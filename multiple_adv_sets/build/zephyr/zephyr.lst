
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 fc 00 20 bd 77 01 00 7f 72 02 00 91 77 01 00     ... .w...r...w..
  10:	91 77 01 00 91 77 01 00 91 77 01 00 00 00 00 00     .w...w...w......
	...
  2c:	3d 72 01 00 91 77 01 00 00 00 00 00 e9 71 01 00     =r...w.......q..
  3c:	91 77 01 00                                         .w..

00000040 <_irq_vector_table>:
  40:	ed 72 01 00 a1 91 02 00 ed 72 01 00 ed 72 01 00     .r.......r...r..
  50:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  60:	69 91 02 00 ed 72 01 00 ed 72 01 00 87 91 02 00     i....r...r......
  70:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  80:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  90:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  a0:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  b0:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  c0:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  d0:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  e0:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..
  f0:	ed 72 01 00 ed 72 01 00 ed 72 01 00 ed 72 01 00     .r...r...r...r..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f010 fbe2 	bl	108e8 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007b8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     7b8:	4801      	ldr	r0, [pc, #4]	; (7c0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     7ba:	7800      	ldrb	r0, [r0, #0]
     7bc:	4770      	bx	lr
     7be:	0000      	.short	0x0000
     7c0:	20000028 	.word	0x20000028

000007c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	f010 fb2d 	bl	10e24 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     7ca:	4c13      	ldr	r4, [pc, #76]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     7cc:	f06f 0527 	mvn.w	r5, #39	; 0x27
     7d0:	b928      	cbnz	r0, 7de <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     7d2:	f010 fb5d 	bl	10e90 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     7d6:	b910      	cbnz	r0, 7de <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     7d8:	f010 fb64 	bl	10ea4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     7dc:	b120      	cbz	r0, 7e8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     7de:	480f      	ldr	r0, [pc, #60]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     7e0:	6060      	str	r0, [r4, #4]
     7e2:	7065      	strb	r5, [r4, #1]
     7e4:	2008      	movs	r0, #8
     7e6:	e010      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     7e8:	f010 faf1 	bl	10dce <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     7ec:	b940      	cbnz	r0, 800 <CONFIG_ISR_STACK_SIZE>
     7ee:	f010 faf8 	bl	10de2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     7f2:	b928      	cbnz	r0, 800 <CONFIG_ISR_STACK_SIZE>
     7f4:	f010 fb0c 	bl	10e10 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     7f8:	b910      	cbnz	r0, 800 <CONFIG_ISR_STACK_SIZE>
     7fa:	f010 fb1d 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     7fe:	b130      	cbz	r0, 80e <CONFIG_ISR_STACK_SIZE+0xe>
     800:	4806      	ldr	r0, [pc, #24]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     802:	3031      	adds	r0, #49	; 0x31
     804:	6060      	str	r0, [r4, #4]
     806:	7065      	strb	r5, [r4, #1]
     808:	2004      	movs	r0, #4
     80a:	70a0      	strb	r0, [r4, #2]
     80c:	bd70      	pop	{r4, r5, r6, pc}
     80e:	21e8      	movs	r1, #232	; 0xe8
     810:	2074      	movs	r0, #116	; 0x74
     812:	f003 fb57 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     816:	0000      	.short	0x0000
     818:	20000028 	.word	0x20000028
     81c:	000154dc 	.word	0x000154dc

00000820 <mpsl_tx_power_radio_supported_power_adjust>:
     820:	4907      	ldr	r1, [pc, #28]	; (840 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     822:	f991 2002 	ldrsb.w	r2, [r1, #2]
     826:	4290      	cmp	r0, r2
     828:	da03      	bge.n	832 <mpsl_tx_power_radio_supported_power_adjust+0x12>
     82a:	f991 2001 	ldrsb.w	r2, [r1, #1]
     82e:	4290      	cmp	r0, r2
     830:	dc01      	bgt.n	836 <mpsl_tx_power_radio_supported_power_adjust+0x16>
     832:	4610      	mov	r0, r2
     834:	4770      	bx	lr
     836:	6849      	ldr	r1, [r1, #4]
     838:	1a80      	subs	r0, r0, r2
     83a:	5608      	ldrsb	r0, [r1, r0]
     83c:	4770      	bx	lr
     83e:	0000      	.short	0x0000
     840:	20000028 	.word	0x20000028

00000844 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     848:	461c      	mov	r4, r3
     84a:	4690      	mov	r8, r2
     84c:	460d      	mov	r5, r1
     84e:	4606      	mov	r6, r0
     850:	f06f 0715 	mvn.w	r7, #21
     854:	2804      	cmp	r0, #4
     856:	d804      	bhi.n	862 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     858:	b11c      	cbz	r4, 862 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     85a:	f010 f998 	bl	10b8e <__udivmoddi4+0x2a6>
     85e:	42a8      	cmp	r0, r5
     860:	d802      	bhi.n	868 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     862:	4638      	mov	r0, r7
     864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     868:	4805      	ldr	r0, [pc, #20]	; (880 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     86a:	4642      	mov	r2, r8
     86c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     870:	b118      	cbz	r0, 87a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     872:	5740      	ldrsb	r0, [r0, r5]
     874:	4282      	cmp	r2, r0
     876:	dd00      	ble.n	87a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     878:	4602      	mov	r2, r0
     87a:	7022      	strb	r2, [r4, #0]
     87c:	2000      	movs	r0, #0
     87e:	e7f1      	b.n	864 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     880:	20000ec8 	.word	0x20000ec8

00000884 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     884:	4801      	ldr	r0, [pc, #4]	; (88c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     886:	7800      	ldrb	r0, [r0, #0]
     888:	4770      	bx	lr
     88a:	0000      	.short	0x0000
     88c:	20000030 	.word	0x20000030

00000890 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     890:	4905      	ldr	r1, [pc, #20]	; (8a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     892:	780a      	ldrb	r2, [r1, #0]
     894:	4290      	cmp	r0, r2
     896:	d301      	bcc.n	89c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     898:	2000      	movs	r0, #0
     89a:	4770      	bx	lr
     89c:	6849      	ldr	r1, [r1, #4]
     89e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     8a2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     8a6:	4770      	bx	lr
     8a8:	20000030 	.word	0x20000030

000008ac <MPSL_IRQ_RADIO_Handler>:
     8ac:	490e      	ldr	r1, [pc, #56]	; (8e8 <MPSL_IRQ_RADIO_Handler+0x3c>)
     8ae:	b510      	push	{r4, lr}
     8b0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     8b4:	2820      	cmp	r0, #32
     8b6:	d012      	beq.n	8de <MPSL_IRQ_RADIO_Handler+0x32>
     8b8:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     8bc:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     8c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     8c4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     8c8:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     8cc:	6840      	ldr	r0, [r0, #4]
     8ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     8d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     8da:	2104      	movs	r1, #4
     8dc:	4710      	bx	r2
     8de:	f640 0187 	movw	r1, #2183	; 0x887
     8e2:	2070      	movs	r0, #112	; 0x70
     8e4:	f003 faee 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8e8:	200012dc 	.word	0x200012dc
     8ec:	b570      	push	{r4, r5, r6, lr}
     8ee:	4605      	mov	r5, r0
     8f0:	2a20      	cmp	r2, #32
     8f2:	d028      	beq.n	946 <MPSL_IRQ_RADIO_Handler+0x9a>
     8f4:	4819      	ldr	r0, [pc, #100]	; (95c <MPSL_IRQ_RADIO_Handler+0xb0>)
     8f6:	4c1a      	ldr	r4, [pc, #104]	; (960 <MPSL_IRQ_RADIO_Handler+0xb4>)
     8f8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     8fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     900:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     904:	4423      	add	r3, r4
     906:	2920      	cmp	r1, #32
     908:	d022      	beq.n	950 <MPSL_IRQ_RADIO_Handler+0xa4>
     90a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     90e:	7840      	ldrb	r0, [r0, #1]
     910:	784c      	ldrb	r4, [r1, #1]
     912:	7048      	strb	r0, [r1, #1]
     914:	4620      	mov	r0, r4
     916:	4601      	mov	r1, r0
     918:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     91c:	4291      	cmp	r1, r2
     91e:	7005      	strb	r5, [r0, #0]
     920:	7840      	ldrb	r0, [r0, #1]
     922:	d1f8      	bne.n	916 <MPSL_IRQ_RADIO_Handler+0x6a>
     924:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     928:	2a20      	cmp	r2, #32
     92a:	bf1a      	itte	ne
     92c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     930:	7054      	strbne	r4, [r2, #1]
     932:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     936:	2220      	movs	r2, #32
     938:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     93c:	f88c 2001 	strb.w	r2, [ip, #1]
     940:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     944:	bd70      	pop	{r4, r5, r6, pc}
     946:	f240 2192 	movw	r1, #658	; 0x292
     94a:	2070      	movs	r0, #112	; 0x70
     94c:	f003 faba 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     950:	f893 4020 	ldrb.w	r4, [r3, #32]
     954:	7840      	ldrb	r0, [r0, #1]
     956:	f883 0020 	strb.w	r0, [r3, #32]
     95a:	e7db      	b.n	914 <MPSL_IRQ_RADIO_Handler+0x68>
     95c:	2000125c 	.word	0x2000125c
     960:	200012dc 	.word	0x200012dc
     964:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     968:	b085      	sub	sp, #20
     96a:	4615      	mov	r5, r2
     96c:	460c      	mov	r4, r1
     96e:	f002 f9eb 	bl	2d48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     972:	4428      	add	r0, r5
     974:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     978:	9102      	str	r1, [sp, #8]
     97a:	6820      	ldr	r0, [r4, #0]
     97c:	1a40      	subs	r0, r0, r1
     97e:	0200      	lsls	r0, r0, #8
     980:	17c1      	asrs	r1, r0, #31
     982:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     986:	1200      	asrs	r0, r0, #8
     988:	2800      	cmp	r0, #0
     98a:	f300 80f0 	bgt.w	b6e <__data_size+0x1c3>
     98e:	f8dd 8020 	ldr.w	r8, [sp, #32]
     992:	48ca      	ldr	r0, [pc, #808]	; (cbc <__data_size+0x311>)
     994:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     998:	4408      	add	r0, r1
     99a:	9003      	str	r0, [sp, #12]
     99c:	f890 5020 	ldrb.w	r5, [r0, #32]
     9a0:	2020      	movs	r0, #32
     9a2:	4ec7      	ldr	r6, [pc, #796]	; (cc0 <__data_size+0x315>)
     9a4:	46ea      	mov	sl, sp
     9a6:	f10d 0904 	add.w	r9, sp, #4
     9aa:	f88d 0000 	strb.w	r0, [sp]
     9ae:	2d20      	cmp	r5, #32
     9b0:	bf1c      	itt	ne
     9b2:	48c4      	ldrne	r0, [pc, #784]	; (cc4 <__data_size+0x319>)
     9b4:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     9b8:	d039      	beq.n	a2e <__data_size+0x83>
     9ba:	bf00      	nop
     9bc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     9c0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     9c4:	f100 0108 	add.w	r1, r0, #8
     9c8:	68c0      	ldr	r0, [r0, #12]
     9ca:	6827      	ldr	r7, [r4, #0]
     9cc:	1a38      	subs	r0, r7, r0
     9ce:	0200      	lsls	r0, r0, #8
     9d0:	17c2      	asrs	r2, r0, #31
     9d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     9d6:	1200      	asrs	r0, r0, #8
     9d8:	d429      	bmi.n	a2e <__data_size+0x83>
     9da:	89e0      	ldrh	r0, [r4, #14]
     9dc:	b300      	cbz	r0, a20 <__data_size+0x75>
     9de:	89c8      	ldrh	r0, [r1, #14]
     9e0:	b9f0      	cbnz	r0, a20 <__data_size+0x75>
     9e2:	6808      	ldr	r0, [r1, #0]
     9e4:	9004      	str	r0, [sp, #16]
     9e6:	f003 f8c3 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     9ea:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     9ee:	bf08      	it	eq
     9f0:	200d      	moveq	r0, #13
     9f2:	d00b      	beq.n	a0c <__data_size+0x61>
     9f4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     9f8:	3856      	subs	r0, #86	; 0x56
     9fa:	bf08      	it	eq
     9fc:	201c      	moveq	r0, #28
     9fe:	d005      	beq.n	a0c <__data_size+0x61>
     a00:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     a04:	389f      	subs	r0, #159	; 0x9f
     a06:	bf14      	ite	ne
     a08:	2000      	movne	r0, #0
     a0a:	2032      	moveq	r0, #50	; 0x32
     a0c:	1c41      	adds	r1, r0, #1
     a0e:	9804      	ldr	r0, [sp, #16]
     a10:	1a38      	subs	r0, r7, r0
     a12:	0200      	lsls	r0, r0, #8
     a14:	17c2      	asrs	r2, r0, #31
     a16:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     a1a:	1200      	asrs	r0, r0, #8
     a1c:	4288      	cmp	r0, r1
     a1e:	db06      	blt.n	a2e <__data_size+0x83>
     a20:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     a24:	f88a 5000 	strb.w	r5, [sl]
     a28:	7845      	ldrb	r5, [r0, #1]
     a2a:	2d20      	cmp	r5, #32
     a2c:	d1c6      	bne.n	9bc <__data_size+0x11>
     a2e:	f89a 0000 	ldrb.w	r0, [sl]
     a32:	f889 0000 	strb.w	r0, [r9]
     a36:	2d20      	cmp	r5, #32
     a38:	bf1c      	itt	ne
     a3a:	48a2      	ldrne	r0, [pc, #648]	; (cc4 <__data_size+0x319>)
     a3c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     a40:	f000 8138 	beq.w	cb4 <__data_size+0x309>
     a44:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     a48:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     a4c:	6860      	ldr	r0, [r4, #4]
     a4e:	f8d7 8008 	ldr.w	r8, [r7, #8]
     a52:	f107 0108 	add.w	r1, r7, #8
     a56:	eba8 0000 	sub.w	r0, r8, r0
     a5a:	0200      	lsls	r0, r0, #8
     a5c:	17c2      	asrs	r2, r0, #31
     a5e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     a62:	1200      	asrs	r0, r0, #8
     a64:	d427      	bmi.n	ab6 <__data_size+0x10b>
     a66:	89c8      	ldrh	r0, [r1, #14]
     a68:	2800      	cmp	r0, #0
     a6a:	f000 8123 	beq.w	cb4 <__data_size+0x309>
     a6e:	89e0      	ldrh	r0, [r4, #14]
     a70:	2800      	cmp	r0, #0
     a72:	f040 811f 	bne.w	cb4 <__data_size+0x309>
     a76:	f8d4 a000 	ldr.w	sl, [r4]
     a7a:	f003 f879 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     a7e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     a82:	bf08      	it	eq
     a84:	200d      	moveq	r0, #13
     a86:	d00b      	beq.n	aa0 <__data_size+0xf5>
     a88:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     a8c:	3856      	subs	r0, #86	; 0x56
     a8e:	bf08      	it	eq
     a90:	201c      	moveq	r0, #28
     a92:	d005      	beq.n	aa0 <__data_size+0xf5>
     a94:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     a98:	389f      	subs	r0, #159	; 0x9f
     a9a:	bf14      	ite	ne
     a9c:	2000      	movne	r0, #0
     a9e:	2032      	moveq	r0, #50	; 0x32
     aa0:	1c41      	adds	r1, r0, #1
     aa2:	eba8 000a 	sub.w	r0, r8, sl
     aa6:	0200      	lsls	r0, r0, #8
     aa8:	17c2      	asrs	r2, r0, #31
     aaa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     aae:	1200      	asrs	r0, r0, #8
     ab0:	4288      	cmp	r0, r1
     ab2:	f280 80ff 	bge.w	cb4 <__data_size+0x309>
     ab6:	f889 5000 	strb.w	r5, [r9]
     aba:	7e39      	ldrb	r1, [r7, #24]
     abc:	7c20      	ldrb	r0, [r4, #16]
     abe:	4281      	cmp	r1, r0
     ac0:	d906      	bls.n	ad0 <__data_size+0x125>
     ac2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     ac6:	7845      	ldrb	r5, [r0, #1]
     ac8:	2d20      	cmp	r5, #32
     aca:	d1bb      	bne.n	a44 <__data_size+0x99>
     acc:	f000 b8f2 	b.w	cb4 <__data_size+0x309>
     ad0:	f89d 0004 	ldrb.w	r0, [sp, #4]
     ad4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     ad8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     adc:	8ac1      	ldrh	r1, [r0, #22]
     ade:	68c5      	ldr	r5, [r0, #12]
     ae0:	bbe1      	cbnz	r1, b5c <__data_size+0x1b1>
     ae2:	89e1      	ldrh	r1, [r4, #14]
     ae4:	b3d1      	cbz	r1, b5c <__data_size+0x1b1>
     ae6:	6887      	ldr	r7, [r0, #8]
     ae8:	f003 f842 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     aec:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     af0:	bf08      	it	eq
     af2:	200d      	moveq	r0, #13
     af4:	d00b      	beq.n	b0e <__data_size+0x163>
     af6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     afa:	3856      	subs	r0, #86	; 0x56
     afc:	bf08      	it	eq
     afe:	201c      	moveq	r0, #28
     b00:	d005      	beq.n	b0e <__data_size+0x163>
     b02:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b06:	389f      	subs	r0, #159	; 0x9f
     b08:	bf14      	ite	ne
     b0a:	2000      	movne	r0, #0
     b0c:	2032      	moveq	r0, #50	; 0x32
     b0e:	1c41      	adds	r1, r0, #1
     b10:	1be8      	subs	r0, r5, r7
     b12:	0200      	lsls	r0, r0, #8
     b14:	17c2      	asrs	r2, r0, #31
     b16:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b1a:	1200      	asrs	r0, r0, #8
     b1c:	4288      	cmp	r0, r1
     b1e:	da1d      	bge.n	b5c <__data_size+0x1b1>
     b20:	f003 f826 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     b24:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     b28:	bf08      	it	eq
     b2a:	200d      	moveq	r0, #13
     b2c:	d00b      	beq.n	b46 <__data_size+0x19b>
     b2e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     b32:	3856      	subs	r0, #86	; 0x56
     b34:	bf08      	it	eq
     b36:	201c      	moveq	r0, #28
     b38:	d005      	beq.n	b46 <__data_size+0x19b>
     b3a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b3e:	389f      	subs	r0, #159	; 0x9f
     b40:	bf14      	ite	ne
     b42:	2000      	movne	r0, #0
     b44:	2032      	moveq	r0, #50	; 0x32
     b46:	f89d 1004 	ldrb.w	r1, [sp, #4]
     b4a:	1c40      	adds	r0, r0, #1
     b4c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     b50:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     b54:	6889      	ldr	r1, [r1, #8]
     b56:	4408      	add	r0, r1
     b58:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     b5c:	9802      	ldr	r0, [sp, #8]
     b5e:	1a28      	subs	r0, r5, r0
     b60:	0200      	lsls	r0, r0, #8
     b62:	17c1      	asrs	r1, r0, #31
     b64:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b68:	1200      	asrs	r0, r0, #8
     b6a:	2800      	cmp	r0, #0
     b6c:	dd03      	ble.n	b76 <__data_size+0x1cb>
     b6e:	b009      	add	sp, #36	; 0x24
     b70:	2000      	movs	r0, #0
     b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b76:	e9d4 1000 	ldrd	r1, r0, [r4]
     b7a:	1a40      	subs	r0, r0, r1
     b7c:	4428      	add	r0, r5
     b7e:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b86:	e9c4 1000 	strd	r1, r0, [r4]
     b8a:	9808      	ldr	r0, [sp, #32]
     b8c:	9004      	str	r0, [sp, #16]
     b8e:	9803      	ldr	r0, [sp, #12]
     b90:	46ea      	mov	sl, sp
     b92:	f10d 0804 	add.w	r8, sp, #4
     b96:	f890 5020 	ldrb.w	r5, [r0, #32]
     b9a:	2020      	movs	r0, #32
     b9c:	f88d 0000 	strb.w	r0, [sp]
     ba0:	2d20      	cmp	r5, #32
     ba2:	d03c      	beq.n	c1e <__data_size+0x273>
     ba4:	4847      	ldr	r0, [pc, #284]	; (cc4 <__data_size+0x319>)
     ba6:	9904      	ldr	r1, [sp, #16]
     ba8:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
     bac:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     bb0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     bb4:	f100 0108 	add.w	r1, r0, #8
     bb8:	68c0      	ldr	r0, [r0, #12]
     bba:	6827      	ldr	r7, [r4, #0]
     bbc:	1a38      	subs	r0, r7, r0
     bbe:	0200      	lsls	r0, r0, #8
     bc0:	17c2      	asrs	r2, r0, #31
     bc2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     bc6:	1200      	asrs	r0, r0, #8
     bc8:	d429      	bmi.n	c1e <__data_size+0x273>
     bca:	89e0      	ldrh	r0, [r4, #14]
     bcc:	b300      	cbz	r0, c10 <__data_size+0x265>
     bce:	89c8      	ldrh	r0, [r1, #14]
     bd0:	b9f0      	cbnz	r0, c10 <__data_size+0x265>
     bd2:	f8d1 9000 	ldr.w	r9, [r1]
     bd6:	f002 ffcb 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     bda:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     bde:	bf08      	it	eq
     be0:	200d      	moveq	r0, #13
     be2:	d00b      	beq.n	bfc <__data_size+0x251>
     be4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     be8:	3856      	subs	r0, #86	; 0x56
     bea:	bf08      	it	eq
     bec:	201c      	moveq	r0, #28
     bee:	d005      	beq.n	bfc <__data_size+0x251>
     bf0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     bf4:	389f      	subs	r0, #159	; 0x9f
     bf6:	bf14      	ite	ne
     bf8:	2000      	movne	r0, #0
     bfa:	2032      	moveq	r0, #50	; 0x32
     bfc:	1c41      	adds	r1, r0, #1
     bfe:	eba7 0009 	sub.w	r0, r7, r9
     c02:	0200      	lsls	r0, r0, #8
     c04:	17c2      	asrs	r2, r0, #31
     c06:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c0a:	1200      	asrs	r0, r0, #8
     c0c:	4288      	cmp	r0, r1
     c0e:	db06      	blt.n	c1e <__data_size+0x273>
     c10:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     c14:	f88a 5000 	strb.w	r5, [sl]
     c18:	7845      	ldrb	r5, [r0, #1]
     c1a:	2d20      	cmp	r5, #32
     c1c:	d1c6      	bne.n	bac <__data_size+0x201>
     c1e:	f89a 0000 	ldrb.w	r0, [sl]
     c22:	f888 0000 	strb.w	r0, [r8]
     c26:	9804      	ldr	r0, [sp, #16]
     c28:	2d20      	cmp	r5, #32
     c2a:	bf1c      	itt	ne
     c2c:	4925      	ldrne	r1, [pc, #148]	; (cc4 <__data_size+0x319>)
     c2e:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     c32:	d03f      	beq.n	cb4 <__data_size+0x309>
     c34:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     c38:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     c3c:	6861      	ldr	r1, [r4, #4]
     c3e:	f8d7 9008 	ldr.w	r9, [r7, #8]
     c42:	f107 0008 	add.w	r0, r7, #8
     c46:	eba9 0101 	sub.w	r1, r9, r1
     c4a:	0209      	lsls	r1, r1, #8
     c4c:	17ca      	asrs	r2, r1, #31
     c4e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     c52:	1209      	asrs	r1, r1, #8
     c54:	d422      	bmi.n	c9c <__data_size+0x2f1>
     c56:	89c0      	ldrh	r0, [r0, #14]
     c58:	b360      	cbz	r0, cb4 <__data_size+0x309>
     c5a:	89e0      	ldrh	r0, [r4, #14]
     c5c:	bb50      	cbnz	r0, cb4 <__data_size+0x309>
     c5e:	f8d4 a000 	ldr.w	sl, [r4]
     c62:	f002 ff85 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c66:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c6a:	bf08      	it	eq
     c6c:	200d      	moveq	r0, #13
     c6e:	d00b      	beq.n	c88 <__data_size+0x2dd>
     c70:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c74:	3856      	subs	r0, #86	; 0x56
     c76:	bf08      	it	eq
     c78:	201c      	moveq	r0, #28
     c7a:	d005      	beq.n	c88 <__data_size+0x2dd>
     c7c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c80:	389f      	subs	r0, #159	; 0x9f
     c82:	bf14      	ite	ne
     c84:	2000      	movne	r0, #0
     c86:	2032      	moveq	r0, #50	; 0x32
     c88:	1c41      	adds	r1, r0, #1
     c8a:	eba9 000a 	sub.w	r0, r9, sl
     c8e:	0200      	lsls	r0, r0, #8
     c90:	17c2      	asrs	r2, r0, #31
     c92:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c96:	1200      	asrs	r0, r0, #8
     c98:	4288      	cmp	r0, r1
     c9a:	da0b      	bge.n	cb4 <__data_size+0x309>
     c9c:	f888 5000 	strb.w	r5, [r8]
     ca0:	7e38      	ldrb	r0, [r7, #24]
     ca2:	7c21      	ldrb	r1, [r4, #16]
     ca4:	4288      	cmp	r0, r1
     ca6:	f67f af13 	bls.w	ad0 <__data_size+0x125>
     caa:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     cae:	7845      	ldrb	r5, [r0, #1]
     cb0:	2d20      	cmp	r5, #32
     cb2:	d1bf      	bne.n	c34 <__data_size+0x289>
     cb4:	b009      	add	sp, #36	; 0x24
     cb6:	2001      	movs	r0, #1
     cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cbc:	200012dc 	.word	0x200012dc
     cc0:	20000edc 	.word	0x20000edc
     cc4:	2000125c 	.word	0x2000125c
     cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ccc:	460f      	mov	r7, r1
     cce:	4606      	mov	r6, r0
     cd0:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     cd4:	494b      	ldr	r1, [pc, #300]	; (e04 <__data_size+0x459>)
     cd6:	4699      	mov	r9, r3
     cd8:	4408      	add	r0, r1
     cda:	4692      	mov	sl, r2
     cdc:	f890 4020 	ldrb.w	r4, [r0, #32]
     ce0:	2020      	movs	r0, #32
     ce2:	7010      	strb	r0, [r2, #0]
     ce4:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     ce8:	2c20      	cmp	r4, #32
     cea:	bf1c      	itt	ne
     cec:	4846      	ldrne	r0, [pc, #280]	; (e08 <__data_size+0x45d>)
     cee:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     cf2:	d038      	beq.n	d66 <__data_size+0x3bb>
     cf4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     cf8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     cfc:	f100 0108 	add.w	r1, r0, #8
     d00:	68c0      	ldr	r0, [r0, #12]
     d02:	6835      	ldr	r5, [r6, #0]
     d04:	1a28      	subs	r0, r5, r0
     d06:	0200      	lsls	r0, r0, #8
     d08:	17c2      	asrs	r2, r0, #31
     d0a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d0e:	1200      	asrs	r0, r0, #8
     d10:	d429      	bmi.n	d66 <__data_size+0x3bb>
     d12:	89f0      	ldrh	r0, [r6, #14]
     d14:	b300      	cbz	r0, d58 <__data_size+0x3ad>
     d16:	89c8      	ldrh	r0, [r1, #14]
     d18:	b9f0      	cbnz	r0, d58 <__data_size+0x3ad>
     d1a:	6808      	ldr	r0, [r1, #0]
     d1c:	9000      	str	r0, [sp, #0]
     d1e:	f002 ff27 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d22:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d26:	bf08      	it	eq
     d28:	200d      	moveq	r0, #13
     d2a:	d00b      	beq.n	d44 <__data_size+0x399>
     d2c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     d30:	3856      	subs	r0, #86	; 0x56
     d32:	bf08      	it	eq
     d34:	201c      	moveq	r0, #28
     d36:	d005      	beq.n	d44 <__data_size+0x399>
     d38:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d3c:	389f      	subs	r0, #159	; 0x9f
     d3e:	bf14      	ite	ne
     d40:	2000      	movne	r0, #0
     d42:	2032      	moveq	r0, #50	; 0x32
     d44:	1c41      	adds	r1, r0, #1
     d46:	9800      	ldr	r0, [sp, #0]
     d48:	1a28      	subs	r0, r5, r0
     d4a:	0200      	lsls	r0, r0, #8
     d4c:	17c2      	asrs	r2, r0, #31
     d4e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d52:	1200      	asrs	r0, r0, #8
     d54:	4288      	cmp	r0, r1
     d56:	db06      	blt.n	d66 <__data_size+0x3bb>
     d58:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     d5c:	f88a 4000 	strb.w	r4, [sl]
     d60:	7844      	ldrb	r4, [r0, #1]
     d62:	2c20      	cmp	r4, #32
     d64:	d1c6      	bne.n	cf4 <__data_size+0x349>
     d66:	f89a 0000 	ldrb.w	r0, [sl]
     d6a:	f889 0000 	strb.w	r0, [r9]
     d6e:	2c20      	cmp	r4, #32
     d70:	bf1c      	itt	ne
     d72:	4825      	ldrne	r0, [pc, #148]	; (e08 <__data_size+0x45d>)
     d74:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     d78:	d040      	beq.n	dfc <__data_size+0x451>
     d7a:	bf00      	nop
     d7c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     d80:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     d84:	6870      	ldr	r0, [r6, #4]
     d86:	68bd      	ldr	r5, [r7, #8]
     d88:	f107 0108 	add.w	r1, r7, #8
     d8c:	1a28      	subs	r0, r5, r0
     d8e:	0200      	lsls	r0, r0, #8
     d90:	17c2      	asrs	r2, r0, #31
     d92:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d96:	1200      	asrs	r0, r0, #8
     d98:	d422      	bmi.n	de0 <__data_size+0x435>
     d9a:	89c8      	ldrh	r0, [r1, #14]
     d9c:	b370      	cbz	r0, dfc <__data_size+0x451>
     d9e:	89f0      	ldrh	r0, [r6, #14]
     da0:	bb60      	cbnz	r0, dfc <__data_size+0x451>
     da2:	f8d6 b000 	ldr.w	fp, [r6]
     da6:	f002 fee3 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     daa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     dae:	bf08      	it	eq
     db0:	200d      	moveq	r0, #13
     db2:	d00b      	beq.n	dcc <__data_size+0x421>
     db4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     db8:	3856      	subs	r0, #86	; 0x56
     dba:	bf08      	it	eq
     dbc:	201c      	moveq	r0, #28
     dbe:	d005      	beq.n	dcc <__data_size+0x421>
     dc0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     dc4:	389f      	subs	r0, #159	; 0x9f
     dc6:	bf14      	ite	ne
     dc8:	2000      	movne	r0, #0
     dca:	2032      	moveq	r0, #50	; 0x32
     dcc:	1c41      	adds	r1, r0, #1
     dce:	eba5 000b 	sub.w	r0, r5, fp
     dd2:	0200      	lsls	r0, r0, #8
     dd4:	17c2      	asrs	r2, r0, #31
     dd6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     dda:	1200      	asrs	r0, r0, #8
     ddc:	4288      	cmp	r0, r1
     dde:	da0d      	bge.n	dfc <__data_size+0x451>
     de0:	f889 4000 	strb.w	r4, [r9]
     de4:	7e38      	ldrb	r0, [r7, #24]
     de6:	7c31      	ldrb	r1, [r6, #16]
     de8:	4288      	cmp	r0, r1
     dea:	d802      	bhi.n	df2 <__data_size+0x447>
     dec:	2000      	movs	r0, #0
     dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     df2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     df6:	7844      	ldrb	r4, [r0, #1]
     df8:	2c20      	cmp	r4, #32
     dfa:	d1bf      	bne.n	d7c <__data_size+0x3d1>
     dfc:	2001      	movs	r0, #1
     dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e02:	0000      	.short	0x0000
     e04:	200012dc 	.word	0x200012dc
     e08:	2000125c 	.word	0x2000125c
     e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e10:	b082      	sub	sp, #8
     e12:	4605      	mov	r5, r0
     e14:	4614      	mov	r4, r2
     e16:	4688      	mov	r8, r1
     e18:	89d0      	ldrh	r0, [r2, #14]
     e1a:	aa01      	add	r2, sp, #4
     e1c:	4669      	mov	r1, sp
     e1e:	f001 ffaf 	bl	2d80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e22:	f002 fcd7 	bl	37d4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     e26:	f001 ff8f 	bl	2d48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e2a:	4607      	mov	r7, r0
     e2c:	4820      	ldr	r0, [pc, #128]	; (eb0 <__data_size+0x505>)
     e2e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
     e32:	2920      	cmp	r1, #32
     e34:	d004      	beq.n	e40 <__data_size+0x495>
     e36:	68c0      	ldr	r0, [r0, #12]
     e38:	1d40      	adds	r0, r0, #5
     e3a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e3e:	e024      	b.n	e8a <__data_size+0x4df>
     e40:	89e0      	ldrh	r0, [r4, #14]
     e42:	f105 0609 	add.w	r6, r5, #9
     e46:	b1b0      	cbz	r0, e76 <__data_size+0x4cb>
     e48:	f002 ffc4 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     e4c:	b998      	cbnz	r0, e76 <__data_size+0x4cb>
     e4e:	f002 fe8f 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     e52:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     e56:	bf08      	it	eq
     e58:	200d      	moveq	r0, #13
     e5a:	d00b      	beq.n	e74 <__data_size+0x4c9>
     e5c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     e60:	3856      	subs	r0, #86	; 0x56
     e62:	bf08      	it	eq
     e64:	201c      	moveq	r0, #28
     e66:	d005      	beq.n	e74 <__data_size+0x4c9>
     e68:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     e6c:	389f      	subs	r0, #159	; 0x9f
     e6e:	bf14      	ite	ne
     e70:	2000      	movne	r0, #0
     e72:	2032      	moveq	r0, #50	; 0x32
     e74:	4406      	add	r6, r0
     e76:	f1b8 0f00 	cmp.w	r8, #0
     e7a:	d104      	bne.n	e86 <__data_size+0x4db>
     e7c:	9800      	ldr	r0, [sp, #0]
     e7e:	4287      	cmp	r7, r0
     e80:	bf84      	itt	hi
     e82:	1a38      	subhi	r0, r7, r0
     e84:	4406      	addhi	r6, r0
     e86:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     e8a:	e9d4 2000 	ldrd	r2, r0, [r4]
     e8e:	1a80      	subs	r0, r0, r2
     e90:	4408      	add	r0, r1
     e92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e96:	e9c4 1000 	strd	r1, r0, [r4]
     e9a:	42a9      	cmp	r1, r5
     e9c:	bf24      	itt	cs
     e9e:	b002      	addcs	sp, #8
     ea0:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
     ea4:	68a0      	ldr	r0, [r4, #8]
     ea6:	1c40      	adds	r0, r0, #1
     ea8:	60a0      	str	r0, [r4, #8]
     eaa:	b002      	add	sp, #8
     eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     eb0:	200012dc 	.word	0x200012dc
     eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     eb8:	b097      	sub	sp, #92	; 0x5c
     eba:	4617      	mov	r7, r2
     ebc:	468b      	mov	fp, r1
     ebe:	4605      	mov	r5, r0
     ec0:	f002 f9f0 	bl	32a4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     ec4:	4604      	mov	r4, r0
     ec6:	f002 fc85 	bl	37d4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     eca:	4606      	mov	r6, r0
     ecc:	f1bb 0f01 	cmp.w	fp, #1
     ed0:	bf18      	it	ne
     ed2:	f1bb 0f02 	cmpne.w	fp, #2
     ed6:	d005      	beq.n	ee4 <__data_size+0x539>
     ed8:	f640 115d 	movw	r1, #2397	; 0x95d
     edc:	f04f 0070 	mov.w	r0, #112	; 0x70
     ee0:	f002 fff0 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ee4:	49f8      	ldr	r1, [pc, #992]	; (12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>)
     ee6:	2001      	movs	r0, #1
     ee8:	6008      	str	r0, [r1, #0]
     eea:	49f8      	ldr	r1, [pc, #992]	; (12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>)
     eec:	6889      	ldr	r1, [r1, #8]
     eee:	6008      	str	r0, [r1, #0]
     ef0:	2000      	movs	r0, #0
     ef2:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     ef6:	900c      	str	r0, [sp, #48]	; 0x30
     ef8:	1e40      	subs	r0, r0, #1
     efa:	900d      	str	r0, [sp, #52]	; 0x34
     efc:	49f4      	ldr	r1, [pc, #976]	; (12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
     efe:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
     f02:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     f06:	f100 0108 	add.w	r1, r0, #8
     f0a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
     f0e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
     f12:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
     f16:	6980      	ldr	r0, [r0, #24]
     f18:	9012      	str	r0, [sp, #72]	; 0x48
     f1a:	a80e      	add	r0, sp, #56	; 0x38
     f1c:	f000 fbc4 	bl	16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>
     f20:	9007      	str	r0, [sp, #28]
     f22:	48ec      	ldr	r0, [pc, #944]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
     f24:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
     f28:	8b80      	ldrh	r0, [r0, #28]
     f2a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     f2e:	f1b8 0f00 	cmp.w	r8, #0
     f32:	bf04      	itt	eq
     f34:	2000      	moveq	r0, #0
     f36:	9006      	streq	r0, [sp, #24]
     f38:	d00b      	beq.n	f52 <__data_size+0x5a7>
     f3a:	2001      	movs	r0, #1
     f3c:	9006      	str	r0, [sp, #24]
     f3e:	48e5      	ldr	r0, [pc, #916]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
     f40:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
     f44:	b928      	cbnz	r0, f52 <__data_size+0x5a7>
     f46:	f002 ff45 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f4a:	2800      	cmp	r0, #0
     f4c:	bf08      	it	eq
     f4e:	2701      	moveq	r7, #1
     f50:	d000      	beq.n	f54 <__data_size+0x5a9>
     f52:	2700      	movs	r7, #0
     f54:	f002 fe0c 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     f58:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     f5c:	bf08      	it	eq
     f5e:	200d      	moveq	r0, #13
     f60:	d00b      	beq.n	f7a <__data_size+0x5cf>
     f62:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     f66:	3856      	subs	r0, #86	; 0x56
     f68:	bf08      	it	eq
     f6a:	201c      	moveq	r0, #28
     f6c:	d005      	beq.n	f7a <__data_size+0x5cf>
     f6e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     f72:	389f      	subs	r0, #159	; 0x9f
     f74:	bf14      	ite	ne
     f76:	2000      	movne	r0, #0
     f78:	2032      	moveq	r0, #50	; 0x32
     f7a:	f04f 0900 	mov.w	r9, #0
     f7e:	46ca      	mov	sl, r9
     f80:	900b      	str	r0, [sp, #44]	; 0x2c
     f82:	4546      	cmp	r6, r8
     f84:	d938      	bls.n	ff8 <__data_size+0x64d>
     f86:	9907      	ldr	r1, [sp, #28]
     f88:	f8df 934c 	ldr.w	r9, [pc, #844]	; 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
     f8c:	ea6f 0c06 	mvn.w	ip, r6
     f90:	466b      	mov	r3, sp
     f92:	aa16      	add	r2, sp, #88	; 0x58
     f94:	eb01 000c 	add.w	r0, r1, ip
     f98:	4549      	cmp	r1, r9
     f9a:	d904      	bls.n	fa6 <__data_size+0x5fb>
     f9c:	f240 516f 	movw	r1, #1391	; 0x56f
     fa0:	2070      	movs	r0, #112	; 0x70
     fa2:	f002 ff8f 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fa6:	49cd      	ldr	r1, [pc, #820]	; (12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>)
     fa8:	458c      	cmp	ip, r1
     faa:	dd04      	ble.n	fb6 <__data_size+0x60b>
     fac:	f44f 61ae 	mov.w	r1, #1392	; 0x570
     fb0:	2070      	movs	r0, #112	; 0x70
     fb2:	f002 ff87 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fb6:	49ca      	ldr	r1, [pc, #808]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
     fb8:	458c      	cmp	ip, r1
     fba:	da04      	bge.n	fc6 <__data_size+0x61b>
     fbc:	f240 5171 	movw	r1, #1393	; 0x571
     fc0:	2070      	movs	r0, #112	; 0x70
     fc2:	f002 ff7f 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fc6:	49c7      	ldr	r1, [pc, #796]	; (12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>)
     fc8:	4281      	cmp	r1, r0
     fca:	bfdc      	itt	le
     fcc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     fd0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     fd4:	dd05      	ble.n	fe2 <__data_size+0x637>
     fd6:	2800      	cmp	r0, #0
     fd8:	bfbc      	itt	lt
     fda:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     fde:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     fe2:	4619      	mov	r1, r3
     fe4:	f001 fecc 	bl	2d80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fe8:	9800      	ldr	r0, [sp, #0]
     fea:	990e      	ldr	r1, [sp, #56]	; 0x38
     fec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ff0:	9000      	str	r0, [sp, #0]
     ff2:	1a08      	subs	r0, r1, r0
     ff4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
     ff8:	2f00      	cmp	r7, #0
     ffa:	bf18      	it	ne
     ffc:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    1000:	d105      	bne.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    1002:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1006:	2800      	cmp	r0, #0
    1008:	bf18      	it	ne
    100a:	f04f 0a02 	movne.w	sl, #2
    100e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1012:	d008      	beq.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
    1014:	980e      	ldr	r0, [sp, #56]	; 0x38
    1016:	1b00      	subs	r0, r0, r4
    1018:	0200      	lsls	r0, r0, #8
    101a:	17c1      	asrs	r1, r0, #31
    101c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1020:	1200      	asrs	r0, r0, #8
    1022:	2801      	cmp	r0, #1
    1024:	da01      	bge.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
    1026:	2003      	movs	r0, #3
    1028:	e00d      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    102a:	b157      	cbz	r7, 1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    102c:	48a9      	ldr	r0, [pc, #676]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    102e:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    1032:	b130      	cbz	r0, 1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    1034:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1038:	f110 0a00 	adds.w	sl, r0, #0
    103c:	bf18      	it	ne
    103e:	f04f 0a02 	movne.w	sl, #2
    1042:	4625      	mov	r5, r4
    1044:	2000      	movs	r0, #0
    1046:	4482      	add	sl, r0
    1048:	980e      	ldr	r0, [sp, #56]	; 0x38
    104a:	eba0 0009 	sub.w	r0, r0, r9
    104e:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1052:	1e50      	subs	r0, r2, #1
    1054:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1058:	1b41      	subs	r1, r0, r5
    105a:	0209      	lsls	r1, r1, #8
    105c:	17cb      	asrs	r3, r1, #31
    105e:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1062:	1209      	asrs	r1, r1, #8
    1064:	4551      	cmp	r1, sl
    1066:	db04      	blt.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
    1068:	f1b9 0f00 	cmp.w	r9, #0
    106c:	bf18      	it	ne
    106e:	920e      	strne	r2, [sp, #56]	; 0x38
    1070:	e02d      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
    1072:	f1b9 0f00 	cmp.w	r9, #0
    1076:	d005      	beq.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    1078:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    107c:	b920      	cbnz	r0, 1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    107e:	f002 fb9f 	bl	37c0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1082:	b108      	cbz	r0, 1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    1084:	b9af      	cbnz	r7, 10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
    1086:	e00c      	b.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
    1088:	b92f      	cbnz	r7, 1096 <CONFIG_FPROTECT_BLOCK_SIZE+0x96>
    108a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    108e:	2800      	cmp	r0, #0
    1090:	bf18      	it	ne
    1092:	f1aa 0a02 	subne.w	sl, sl, #2
    1096:	f04f 0900 	mov.w	r9, #0
    109a:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    109e:	464e      	mov	r6, r9
    10a0:	e007      	b.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
    10a2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    10a6:	b120      	cbz	r0, 10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
    10a8:	2000      	movs	r0, #0
    10aa:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    10ae:	f1aa 0a02 	sub.w	sl, sl, #2
    10b2:	980e      	ldr	r0, [sp, #56]	; 0x38
    10b4:	eba0 0009 	sub.w	r0, r0, r9
    10b8:	1e40      	subs	r0, r0, #1
    10ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10be:	1b41      	subs	r1, r0, r5
    10c0:	0209      	lsls	r1, r1, #8
    10c2:	17ca      	asrs	r2, r1, #31
    10c4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    10c8:	1209      	asrs	r1, r1, #8
    10ca:	4551      	cmp	r1, sl
    10cc:	db7e      	blt.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
    10ce:	9714      	str	r7, [sp, #80]	; 0x50
    10d0:	4605      	mov	r5, r0
    10d2:	f04f 0900 	mov.w	r9, #0
    10d6:	9f06      	ldr	r7, [sp, #24]
    10d8:	f001 ffbc 	bl	3054 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    10dc:	1a28      	subs	r0, r5, r0
    10de:	0200      	lsls	r0, r0, #8
    10e0:	17c1      	asrs	r1, r0, #31
    10e2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    10e6:	ea4f 2a20 	mov.w	sl, r0, asr #8
    10ea:	f002 fd41 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    10ee:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    10f2:	bf08      	it	eq
    10f4:	200d      	moveq	r0, #13
    10f6:	d00b      	beq.n	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
    10f8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    10fc:	3856      	subs	r0, #86	; 0x56
    10fe:	bf08      	it	eq
    1100:	201c      	moveq	r0, #28
    1102:	d005      	beq.n	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
    1104:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1108:	389f      	subs	r0, #159	; 0x9f
    110a:	bf14      	ite	ne
    110c:	2000      	movne	r0, #0
    110e:	2032      	moveq	r0, #50	; 0x32
    1110:	300b      	adds	r0, #11
    1112:	4582      	cmp	sl, r0
    1114:	da20      	bge.n	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    1116:	f1bb 0f01 	cmp.w	fp, #1
    111a:	d002      	beq.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
    111c:	9814      	ldr	r0, [sp, #80]	; 0x50
    111e:	b140      	cbz	r0, 1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
    1120:	e012      	b.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    1122:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1126:	d11c      	bne.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
    1128:	f640 01de 	movw	r1, #2270	; 0x8de
    112c:	2070      	movs	r0, #112	; 0x70
    112e:	f002 fec9 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1132:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1136:	d007      	beq.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    1138:	1b60      	subs	r0, r4, r5
    113a:	0200      	lsls	r0, r0, #8
    113c:	17c1      	asrs	r1, r0, #31
    113e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1142:	1200      	asrs	r0, r0, #8
    1144:	2804      	cmp	r0, #4
    1146:	dd04      	ble.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
    1148:	462c      	mov	r4, r5
    114a:	4620      	mov	r0, r4
    114c:	f001 ffa8 	bl	30a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1150:	e007      	b.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
    1152:	2800      	cmp	r0, #0
    1154:	dc63      	bgt.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    1156:	e004      	b.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
    1158:	462c      	mov	r4, r5
    115a:	4620      	mov	r0, r4
    115c:	f001 ffa0 	bl	30a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1160:	46b9      	mov	r9, r7
    1162:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1166:	d055      	beq.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    1168:	980e      	ldr	r0, [sp, #56]	; 0x38
    116a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    116c:	1b00      	subs	r0, r0, r4
    116e:	1b12      	subs	r2, r2, r4
    1170:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1174:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1178:	2801      	cmp	r0, #1
    117a:	d350      	bcc.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    117c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1180:	bf98      	it	ls
    1182:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1186:	d84a      	bhi.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    1188:	4620      	mov	r0, r4
    118a:	f00f fd39 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    118e:	9907      	ldr	r1, [sp, #28]
    1190:	4a52      	ldr	r2, [pc, #328]	; (12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>)
    1192:	1a0d      	subs	r5, r1, r0
    1194:	f04f 0a00 	mov.w	sl, #0
    1198:	1aaa      	subs	r2, r5, r2
    119a:	f17a 0200 	sbcs.w	r2, sl, #0
    119e:	d318      	bcc.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11a0:	4b4e      	ldr	r3, [pc, #312]	; (12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>)
    11a2:	1a42      	subs	r2, r0, r1
    11a4:	1ad3      	subs	r3, r2, r3
    11a6:	f17a 0300 	sbcs.w	r3, sl, #0
    11aa:	d312      	bcc.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11ac:	4b4a      	ldr	r3, [pc, #296]	; (12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>)
    11ae:	42ab      	cmp	r3, r5
    11b0:	bf3e      	ittt	cc
    11b2:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    11b6:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    11ba:	1845      	addcc	r5, r0, r1
    11bc:	d309      	bcc.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11be:	4293      	cmp	r3, r2
    11c0:	d231      	bcs.n	1226 <CONFIG_FPROTECT_BLOCK_SIZE+0x226>
    11c2:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    11c6:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    11ca:	e000      	b.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    11cc:	e027      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    11ce:	4408      	add	r0, r1
    11d0:	4245      	negs	r5, r0
    11d2:	4f40      	ldr	r7, [pc, #256]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    11d4:	7fb8      	ldrb	r0, [r7, #30]
    11d6:	b358      	cbz	r0, 1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    11d8:	f1bb 0f01 	cmp.w	fp, #1
    11dc:	d005      	beq.n	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    11de:	2002      	movs	r0, #2
    11e0:	f002 f99a 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11e4:	2001      	movs	r0, #1
    11e6:	f002 f997 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11ea:	45b0      	cmp	r8, r6
    11ec:	d22c      	bcs.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    11ee:	eba5 0106 	sub.w	r1, r5, r6
    11f2:	f04f 0002 	mov.w	r0, #2
    11f6:	f002 f8d9 	bl	33ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    11fa:	b390      	cbz	r0, 1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
    11fc:	f1b8 0f00 	cmp.w	r8, #0
    1200:	bf1c      	itt	ne
    1202:	eba5 0108 	subne.w	r1, r5, r8
    1206:	2001      	movne	r0, #1
    1208:	d034      	beq.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    120a:	bf00      	nop
    120c:	f002 f8ce 	bl	33ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1210:	b338      	cbz	r0, 1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
    1212:	e02f      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1214:	f640 11f1 	movw	r1, #2545	; 0x9f1
    1218:	2070      	movs	r0, #112	; 0x70
    121a:	f002 fe53 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    121e:	b017      	add	sp, #92	; 0x5c
    1220:	2000      	movs	r0, #0
    1222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1226:	f640 21c2 	movw	r1, #2754	; 0xac2
    122a:	2070      	movs	r0, #112	; 0x70
    122c:	f002 fe4a 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1230:	45b0      	cmp	r8, r6
    1232:	bf34      	ite	cc
    1234:	4630      	movcc	r0, r6
    1236:	4640      	movcs	r0, r8
    1238:	301e      	adds	r0, #30
    123a:	42a8      	cmp	r0, r5
    123c:	dbcc      	blt.n	11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
    123e:	f640 2105 	movw	r1, #2565	; 0xa05
    1242:	2070      	movs	r0, #112	; 0x70
    1244:	f002 fe3e 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1248:	d90c      	bls.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
    124a:	eba5 0108 	sub.w	r1, r5, r8
    124e:	2001      	movs	r0, #1
    1250:	f002 f8ac 	bl	33ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1254:	b128      	cbz	r0, 1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
    1256:	2e00      	cmp	r6, #0
    1258:	bf1c      	itt	ne
    125a:	1ba9      	subne	r1, r5, r6
    125c:	2002      	movne	r0, #2
    125e:	d009      	beq.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1260:	e7d4      	b.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    1262:	e030      	b.n	12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    1264:	ea56 0008 	orrs.w	r0, r6, r8
    1268:	d004      	beq.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    126a:	f640 1141 	movw	r1, #2369	; 0x941
    126e:	2070      	movs	r0, #112	; 0x70
    1270:	f002 fe28 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1274:	4629      	mov	r1, r5
    1276:	2000      	movs	r0, #0
    1278:	f002 f898 	bl	33ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    127c:	b318      	cbz	r0, 12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    127e:	9806      	ldr	r0, [sp, #24]
    1280:	2601      	movs	r6, #1
    1282:	2800      	cmp	r0, #0
    1284:	bf04      	itt	eq
    1286:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    128a:	2800      	cmpeq	r0, #0
    128c:	d002      	beq.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    128e:	f1b9 0f00 	cmp.w	r9, #0
    1292:	d033      	beq.n	12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    1294:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    1298:	b118      	cbz	r0, 12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    129a:	f002 fc6f 	bl	3b7c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    129e:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    12a2:	f1b9 0f00 	cmp.w	r9, #0
    12a6:	d02c      	beq.n	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
    12a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    12aa:	1a20      	subs	r0, r4, r0
    12ac:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    12b0:	2005      	movs	r0, #5
    12b2:	f002 f87b 	bl	33ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12b6:	b3e0      	cbz	r0, 1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
    12b8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    12bc:	2800      	cmp	r0, #0
    12be:	bf08      	it	eq
    12c0:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    12c4:	e025      	b.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    12c6:	e00f      	b.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    12c8:	40000508 	.word	0x40000508
    12cc:	20000038 	.word	0x20000038
    12d0:	20000edc 	.word	0x20000edc
    12d4:	200012dc 	.word	0x200012dc
    12d8:	1e847fff 	.word	0x1e847fff
    12dc:	0f424000 	.word	0x0f424000
    12e0:	f0bdc000 	.word	0xf0bdc000
    12e4:	1e848000 	.word	0x1e848000
    12e8:	2002      	movs	r0, #2
    12ea:	f002 f915 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12ee:	2001      	movs	r0, #1
    12f0:	f002 f912 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12f4:	b017      	add	sp, #92	; 0x5c
    12f6:	2000      	movs	r0, #0
    12f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12fc:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    1300:	b190      	cbz	r0, 1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    1302:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1306:	b120      	cbz	r0, 1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    1308:	2005      	movs	r0, #5
    130a:	f002 f905 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    130e:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    1312:	eba5 0008 	sub.w	r0, r5, r8
    1316:	f1a0 0119 	sub.w	r1, r0, #25
    131a:	2900      	cmp	r1, #0
    131c:	dc0f      	bgt.n	133e <CONFIG_FPROTECT_BLOCK_SIZE+0x33e>
    131e:	f640 212e 	movw	r1, #2606	; 0xa2e
    1322:	2070      	movs	r0, #112	; 0x70
    1324:	f002 fdce 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1328:	f002 fc44 	bl	3bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    132c:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    1330:	e7b7      	b.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    1332:	e7ff      	b.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    1334:	f240 21f2 	movw	r1, #754	; 0x2f2
    1338:	2070      	movs	r0, #112	; 0x70
    133a:	f002 fdc3 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    133e:	2003      	movs	r0, #3
    1340:	f002 f834 	bl	33ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1344:	b1c0      	cbz	r0, 1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    1346:	480f      	ldr	r0, [pc, #60]	; (1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>)
    1348:	6880      	ldr	r0, [r0, #8]
    134a:	f8c0 a000 	str.w	sl, [r0]
    134e:	480e      	ldr	r0, [pc, #56]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    1350:	f8c0 a000 	str.w	sl, [r0]
    1354:	ac0c      	add	r4, sp, #48	; 0x30
    1356:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    135a:	6038      	str	r0, [r7, #0]
    135c:	6079      	str	r1, [r7, #4]
    135e:	60ba      	str	r2, [r7, #8]
    1360:	60fb      	str	r3, [r7, #12]
    1362:	ac10      	add	r4, sp, #64	; 0x40
    1364:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1368:	6138      	str	r0, [r7, #16]
    136a:	6179      	str	r1, [r7, #20]
    136c:	61ba      	str	r2, [r7, #24]
    136e:	61fb      	str	r3, [r7, #28]
    1370:	b017      	add	sp, #92	; 0x5c
    1372:	2001      	movs	r0, #1
    1374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1378:	f640 2136 	movw	r1, #2614	; 0xa36
    137c:	2070      	movs	r0, #112	; 0x70
    137e:	f002 fda1 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1382:	0000      	.short	0x0000
    1384:	20000038 	.word	0x20000038
    1388:	40000508 	.word	0x40000508
    138c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1390:	4606      	mov	r6, r0
    1392:	7808      	ldrb	r0, [r1, #0]
    1394:	7490      	strb	r0, [r2, #18]
    1396:	7ac8      	ldrb	r0, [r1, #11]
    1398:	7450      	strb	r0, [r2, #17]
    139a:	7a88      	ldrb	r0, [r1, #10]
    139c:	7410      	strb	r0, [r2, #16]
    139e:	8908      	ldrh	r0, [r1, #8]
    13a0:	81d0      	strh	r0, [r2, #14]
    13a2:	f8df 8198 	ldr.w	r8, [pc, #408]	; 153c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b4>
    13a6:	6870      	ldr	r0, [r6, #4]
    13a8:	469a      	mov	sl, r3
    13aa:	fba0 7908 	umull	r7, r9, r0, r8
    13ae:	4614      	mov	r4, r2
    13b0:	460d      	mov	r5, r1
    13b2:	6830      	ldr	r0, [r6, #0]
    13b4:	f00f fc24 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    13b8:	19c1      	adds	r1, r0, r7
    13ba:	7828      	ldrb	r0, [r5, #0]
    13bc:	ea4f 0c68 	mov.w	ip, r8, asr #1
    13c0:	f149 0200 	adc.w	r2, r9, #0
    13c4:	f1a8 0e01 	sub.w	lr, r8, #1
    13c8:	f1cc 0b00 	rsb	fp, ip, #0
    13cc:	b168      	cbz	r0, 13ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62>
    13ce:	89e0      	ldrh	r0, [r4, #14]
    13d0:	7c67      	ldrb	r7, [r4, #17]
    13d2:	43c0      	mvns	r0, r0
    13d4:	f8d5 9004 	ldr.w	r9, [r5, #4]
    13d8:	f104 020c 	add.w	r2, r4, #12
    13dc:	4560      	cmp	r0, ip
    13de:	dd5f      	ble.n	14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>
    13e0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    13e4:	2070      	movs	r0, #112	; 0x70
    13e6:	f002 fd6d 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ea:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1540 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b8>
    13ee:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    13f2:	eb11 0a09 	adds.w	sl, r1, r9
    13f6:	f142 0900 	adc.w	r9, r2, #0
    13fa:	ebb0 0a0a 	subs.w	sl, r0, sl
    13fe:	eb73 0909 	sbcs.w	r9, r3, r9
    1402:	d245      	bcs.n	1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>
    1404:	1a41      	subs	r1, r0, r1
    1406:	eb73 0102 	sbcs.w	r1, r3, r2
    140a:	d341      	bcc.n	1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>
    140c:	1bc7      	subs	r7, r0, r7
    140e:	6870      	ldr	r0, [r6, #4]
    1410:	60a0      	str	r0, [r4, #8]
    1412:	4547      	cmp	r7, r8
    1414:	d305      	bcc.n	1422 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a>
    1416:	1c40      	adds	r0, r0, #1
    1418:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    141c:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    1420:	60a0      	str	r0, [r4, #8]
    1422:	89e0      	ldrh	r0, [r4, #14]
    1424:	686d      	ldr	r5, [r5, #4]
    1426:	43c1      	mvns	r1, r0
    1428:	7c66      	ldrb	r6, [r4, #17]
    142a:	1878      	adds	r0, r7, r1
    142c:	f104 020c 	add.w	r2, r4, #12
    1430:	4577      	cmp	r7, lr
    1432:	d904      	bls.n	143e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb6>
    1434:	f240 516f 	movw	r1, #1391	; 0x56f
    1438:	2070      	movs	r0, #112	; 0x70
    143a:	f002 fd43 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    143e:	4561      	cmp	r1, ip
    1440:	dcce      	bgt.n	13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    1442:	4559      	cmp	r1, fp
    1444:	db2f      	blt.n	14a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11e>
    1446:	4580      	cmp	r8, r0
    1448:	bfdc      	itt	le
    144a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    144e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1452:	dd05      	ble.n	1460 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd8>
    1454:	2800      	cmp	r0, #0
    1456:	bfbc      	itt	lt
    1458:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    145c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1460:	4621      	mov	r1, r4
    1462:	f001 fc8d 	bl	2d80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1466:	6820      	ldr	r0, [r4, #0]
    1468:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    146c:	1978      	adds	r0, r7, r5
    146e:	1c40      	adds	r0, r0, #1
    1470:	6021      	str	r1, [r4, #0]
    1472:	2e00      	cmp	r6, #0
    1474:	bf08      	it	eq
    1476:	307a      	addeq	r0, #122	; 0x7a
    1478:	d003      	beq.n	1482 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfa>
    147a:	2e01      	cmp	r6, #1
    147c:	bf08      	it	eq
    147e:	3048      	addeq	r0, #72	; 0x48
    1480:	d134      	bne.n	14ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x164>
    1482:	f001 fc61 	bl	2d48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1486:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    148a:	6060      	str	r0, [r4, #4]
    148c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1490:	6830      	ldr	r0, [r6, #0]
    1492:	1e40      	subs	r0, r0, #1
    1494:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1498:	6020      	str	r0, [r4, #0]
    149a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    149e:	e7f4      	b.n	148a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x102>
    14a0:	4601      	mov	r1, r0
    14a2:	4558      	cmp	r0, fp
    14a4:	da04      	bge.n	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
    14a6:	f240 5171 	movw	r1, #1393	; 0x571
    14aa:	2070      	movs	r0, #112	; 0x70
    14ac:	f002 fd0a 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14b0:	4580      	cmp	r8, r0
    14b2:	bfdc      	itt	le
    14b4:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    14b8:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    14bc:	dd05      	ble.n	14ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x142>
    14be:	2800      	cmp	r0, #0
    14c0:	bfbc      	itt	lt
    14c2:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    14c6:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    14ca:	4621      	mov	r1, r4
    14cc:	f001 fc58 	bl	2d80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    14d0:	6820      	ldr	r0, [r4, #0]
    14d2:	2f00      	cmp	r7, #0
    14d4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    14d8:	f109 0001 	add.w	r0, r9, #1
    14dc:	6021      	str	r1, [r4, #0]
    14de:	bf08      	it	eq
    14e0:	307a      	addeq	r0, #122	; 0x7a
    14e2:	d008      	beq.n	14f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e>
    14e4:	2f01      	cmp	r7, #1
    14e6:	bf08      	it	eq
    14e8:	3048      	addeq	r0, #72	; 0x48
    14ea:	d004      	beq.n	14f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e>
    14ec:	f240 6124 	movw	r1, #1572	; 0x624
    14f0:	2070      	movs	r0, #112	; 0x70
    14f2:	f002 fce7 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f6:	f001 fc27 	bl	2d48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14fa:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    14fe:	6061      	str	r1, [r4, #4]
    1500:	6870      	ldr	r0, [r6, #4]
    1502:	60a0      	str	r0, [r4, #8]
    1504:	2100      	movs	r1, #0
    1506:	4622      	mov	r2, r4
    1508:	6830      	ldr	r0, [r6, #0]
    150a:	f7ff fc7f 	bl	e0c <__data_size+0x461>
    150e:	6832      	ldr	r2, [r6, #0]
    1510:	4653      	mov	r3, sl
    1512:	4621      	mov	r1, r4
    1514:	6928      	ldr	r0, [r5, #16]
    1516:	f7ff fa25 	bl	964 <MPSL_IRQ_RADIO_Handler+0xb8>
    151a:	2800      	cmp	r0, #0
    151c:	bf18      	it	ne
    151e:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1522:	e9d4 2100 	ldrd	r2, r1, [r4]
    1526:	6830      	ldr	r0, [r6, #0]
    1528:	1a89      	subs	r1, r1, r2
    152a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    152e:	4408      	add	r0, r1
    1530:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1534:	e9c4 2000 	strd	r2, r0, [r4]
    1538:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    153c:	1e848000 	.word	0x1e848000
    1540:	0f424000 	.word	0x0f424000
    1544:	b570      	push	{r4, r5, r6, lr}
    1546:	4d1e      	ldr	r5, [pc, #120]	; (15c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x238>)
    1548:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    154c:	2820      	cmp	r0, #32
    154e:	bf18      	it	ne
    1550:	bd70      	popne	{r4, r5, r6, pc}
    1552:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1556:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    155a:	4428      	add	r0, r5
    155c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1560:	2c20      	cmp	r4, #32
    1562:	d027      	beq.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
    1564:	4b17      	ldr	r3, [pc, #92]	; (15c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23c>)
    1566:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    156a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    156e:	7849      	ldrb	r1, [r1, #1]
    1570:	f880 1020 	strb.w	r1, [r0, #32]
    1574:	20ff      	movs	r0, #255	; 0xff
    1576:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    157a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    157e:	4621      	mov	r1, r4
    1580:	2002      	movs	r0, #2
    1582:	f000 f8cb 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    1586:	2000      	movs	r0, #0
    1588:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    158c:	77a8      	strb	r0, [r5, #30]
    158e:	490e      	ldr	r1, [pc, #56]	; (15c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x240>)
    1590:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1594:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1598:	7e00      	ldrb	r0, [r0, #24]
    159a:	2800      	cmp	r0, #0
    159c:	bf08      	it	eq
    159e:	f002 fe9d 	bleq	42dc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    15a2:	2000      	movs	r0, #0
    15a4:	4909      	ldr	r1, [pc, #36]	; (15cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x244>)
    15a6:	6849      	ldr	r1, [r1, #4]
    15a8:	2900      	cmp	r1, #0
    15aa:	bf08      	it	eq
    15ac:	bd70      	popeq	{r4, r5, r6, pc}
    15ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15b2:	4708      	bx	r1
    15b4:	f44f 714b 	mov.w	r1, #812	; 0x32c
    15b8:	2070      	movs	r0, #112	; 0x70
    15ba:	f002 fc83 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15be:	0000      	.short	0x0000
    15c0:	200012dc 	.word	0x200012dc
    15c4:	2000125c 	.word	0x2000125c
    15c8:	20000edc 	.word	0x20000edc
    15cc:	20000038 	.word	0x20000038
    15d0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    15d4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x310>
    15d8:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    15dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    15e0:	4440      	add	r0, r8
    15e2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    15e6:	2c20      	cmp	r4, #32
    15e8:	bf08      	it	eq
    15ea:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    15ee:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    15f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 16a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x318>
    15f6:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    15fa:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    15fe:	2607      	movs	r6, #7
    1600:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1604:	2801      	cmp	r0, #1
    1606:	d00e      	beq.n	1626 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29e>
    1608:	2804      	cmp	r0, #4
    160a:	bf08      	it	eq
    160c:	2602      	moveq	r6, #2
    160e:	d00a      	beq.n	1626 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29e>
    1610:	2805      	cmp	r0, #5
    1612:	bf0c      	ite	eq
    1614:	2603      	moveq	r6, #3
    1616:	2806      	cmpne	r0, #6
    1618:	d005      	beq.n	1626 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29e>
    161a:	f640 01a8 	movw	r1, #2216	; 0x8a8
    161e:	f04f 0070 	mov.w	r0, #112	; 0x70
    1622:	f002 fc4f 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1626:	f1bb 0f00 	cmp.w	fp, #0
    162a:	bf18      	it	ne
    162c:	f3af 8000 	nopne.w
    1630:	f3ef 8010 	mrs	r0, PRIMASK
    1634:	b672      	cpsid	i
    1636:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    163a:	784a      	ldrb	r2, [r1, #1]
    163c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1640:	4441      	add	r1, r8
    1642:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1646:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    164a:	42a2      	cmp	r2, r4
    164c:	bf04      	itt	eq
    164e:	2220      	moveq	r2, #32
    1650:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1654:	b1c0      	cbz	r0, 1688 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x300>
    1656:	462a      	mov	r2, r5
    1658:	4621      	mov	r1, r4
    165a:	2001      	movs	r0, #1
    165c:	f000 f85e 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    1660:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1664:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1668:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    166c:	6840      	ldr	r0, [r0, #4]
    166e:	4631      	mov	r1, r6
    1670:	4790      	blx	r2
    1672:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1676:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    167a:	4440      	add	r0, r8
    167c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1680:	2c20      	cmp	r4, #32
    1682:	d1ba      	bne.n	15fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x272>
    1684:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1688:	4806      	ldr	r0, [pc, #24]	; (16a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31c>)
    168a:	2800      	cmp	r0, #0
    168c:	bf18      	it	ne
    168e:	f3af 8000 	nopne.w
    1692:	b662      	cpsie	i
    1694:	e7df      	b.n	1656 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ce>
    1696:	0000      	.short	0x0000
    1698:	200012dc 	.word	0x200012dc
    169c:	00000000 	.word	0x00000000
    16a0:	2000125c 	.word	0x2000125c
    16a4:	00000000 	.word	0x00000000
    16a8:	b510      	push	{r4, lr}
    16aa:	4604      	mov	r4, r0
    16ac:	6800      	ldr	r0, [r0, #0]
    16ae:	f00f faa7 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    16b2:	4602      	mov	r2, r0
    16b4:	89e0      	ldrh	r0, [r4, #14]
    16b6:	7b21      	ldrb	r1, [r4, #12]
    16b8:	4b14      	ldr	r3, [pc, #80]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    16ba:	4408      	add	r0, r1
    16bc:	1c41      	adds	r1, r0, #1
    16be:	1850      	adds	r0, r2, r1
    16c0:	429a      	cmp	r2, r3
    16c2:	d904      	bls.n	16ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x346>
    16c4:	f240 516f 	movw	r1, #1391	; 0x56f
    16c8:	2070      	movs	r0, #112	; 0x70
    16ca:	f002 fbfb 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16ce:	4a10      	ldr	r2, [pc, #64]	; (1710 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x388>)
    16d0:	4291      	cmp	r1, r2
    16d2:	dd04      	ble.n	16de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x356>
    16d4:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    16d8:	2070      	movs	r0, #112	; 0x70
    16da:	f002 fbf3 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16de:	4a0d      	ldr	r2, [pc, #52]	; (1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>)
    16e0:	4291      	cmp	r1, r2
    16e2:	da04      	bge.n	16ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x366>
    16e4:	f240 5171 	movw	r1, #1393	; 0x571
    16e8:	2070      	movs	r0, #112	; 0x70
    16ea:	f002 fbeb 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16ee:	490a      	ldr	r1, [pc, #40]	; (1718 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x390>)
    16f0:	4281      	cmp	r1, r0
    16f2:	bfde      	ittt	le
    16f4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    16f8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    16fc:	bd10      	pople	{r4, pc}
    16fe:	2800      	cmp	r0, #0
    1700:	bfbc      	itt	lt
    1702:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1706:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    170a:	bd10      	pop	{r4, pc}
    170c:	1e847fff 	.word	0x1e847fff
    1710:	0f424000 	.word	0x0f424000
    1714:	f0bdc000 	.word	0xf0bdc000
    1718:	1e848000 	.word	0x1e848000
    171c:	f8df c058 	ldr.w	ip, [pc, #88]	; 1778 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f0>
    1720:	b510      	push	{r4, lr}
    1722:	2300      	movs	r3, #0
    1724:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1728:	2807      	cmp	r0, #7
    172a:	d21f      	bcs.n	176c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e4>
    172c:	e8df f000 	tbb	[pc, r0]
    1730:	05050505 	.word	0x05050505
    1734:	00040404 	.word	0x00040404
    1738:	2301      	movs	r3, #1
    173a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    173e:	2b00      	cmp	r3, #0
    1740:	bf08      	it	eq
    1742:	bd10      	popeq	{r4, pc}
    1744:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1748:	480c      	ldr	r0, [pc, #48]	; (177c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f4>)
    174a:	4402      	add	r2, r0
    174c:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1750:	2820      	cmp	r0, #32
    1752:	bf0e      	itee	eq
    1754:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1758:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    175c:	7041      	strbne	r1, [r0, #1]
    175e:	2020      	movs	r0, #32
    1760:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1764:	7058      	strb	r0, [r3, #1]
    1766:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    176a:	bd10      	pop	{r4, pc}
    176c:	f44f 711a 	mov.w	r1, #616	; 0x268
    1770:	2070      	movs	r0, #112	; 0x70
    1772:	f002 fba7 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1776:	0000      	.short	0x0000
    1778:	2000125c 	.word	0x2000125c
    177c:	200012dc 	.word	0x200012dc
    1780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1784:	4617      	mov	r7, r2
    1786:	f8df a158 	ldr.w	sl, [pc, #344]	; 18e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x558>
    178a:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    178e:	4450      	add	r0, sl
    1790:	4688      	mov	r8, r1
    1792:	f890 4020 	ldrb.w	r4, [r0, #32]
    1796:	2901      	cmp	r1, #1
    1798:	4625      	mov	r5, r4
    179a:	bf18      	it	ne
    179c:	f1b8 0f02 	cmpne.w	r8, #2
    17a0:	d005      	beq.n	17ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x426>
    17a2:	f640 216c 	movw	r1, #2668	; 0xa6c
    17a6:	f04f 0070 	mov.w	r0, #112	; 0x70
    17aa:	f002 fb8b 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17ae:	f04f 0b00 	mov.w	fp, #0
    17b2:	2d20      	cmp	r5, #32
    17b4:	d044      	beq.n	1840 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b8>
    17b6:	f89a 001e 	ldrb.w	r0, [sl, #30]
    17ba:	2600      	movs	r6, #0
    17bc:	2800      	cmp	r0, #0
    17be:	bf08      	it	eq
    17c0:	2602      	moveq	r6, #2
    17c2:	f001 fc47 	bl	3054 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    17c6:	4b47      	ldr	r3, [pc, #284]	; (18e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55c>)
    17c8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    17cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    17d0:	688a      	ldr	r2, [r1, #8]
    17d2:	68c9      	ldr	r1, [r1, #12]
    17d4:	1a12      	subs	r2, r2, r0
    17d6:	1a09      	subs	r1, r1, r0
    17d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    17dc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    17e0:	4296      	cmp	r6, r2
    17e2:	bf99      	ittee	ls
    17e4:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    17e8:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    17ec:	4a3e      	ldrhi	r2, [pc, #248]	; (18e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x560>)
    17ee:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    17f2:	d923      	bls.n	183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>
    17f4:	4622      	mov	r2, r4
    17f6:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    17fa:	784c      	ldrb	r4, [r1, #1]
    17fc:	2c20      	cmp	r4, #32
    17fe:	d015      	beq.n	182c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a4>
    1800:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1804:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    1808:	f8dc 1008 	ldr.w	r1, [ip, #8]
    180c:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1810:	1a09      	subs	r1, r1, r0
    1812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1816:	ebac 0c00 	sub.w	ip, ip, r0
    181a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    181e:	428e      	cmp	r6, r1
    1820:	bf9c      	itt	ls
    1822:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1826:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    182a:	d8e3      	bhi.n	17f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46c>
    182c:	2a20      	cmp	r2, #32
    182e:	d005      	beq.n	183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>
    1830:	463b      	mov	r3, r7
    1832:	2120      	movs	r1, #32
    1834:	2004      	movs	r0, #4
    1836:	f7ff f859 	bl	8ec <MPSL_IRQ_RADIO_Handler+0x40>
    183a:	4604      	mov	r4, r0
    183c:	42ac      	cmp	r4, r5
    183e:	d10f      	bne.n	1860 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d8>
    1840:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    1844:	2820      	cmp	r0, #32
    1846:	d00f      	beq.n	1868 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e0>
    1848:	9900      	ldr	r1, [sp, #0]
    184a:	f8da 0008 	ldr.w	r0, [sl, #8]
    184e:	1c89      	adds	r1, r1, #2
    1850:	1a08      	subs	r0, r1, r0
    1852:	0200      	lsls	r0, r0, #8
    1854:	17c1      	asrs	r1, r0, #31
    1856:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    185a:	1200      	asrs	r0, r0, #8
    185c:	2800      	cmp	r0, #0
    185e:	dd03      	ble.n	1868 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e0>
    1860:	b003      	add	sp, #12
    1862:	2000      	movs	r0, #0
    1864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1868:	2d20      	cmp	r5, #32
    186a:	d016      	beq.n	189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    186c:	462a      	mov	r2, r5
    186e:	4641      	mov	r1, r8
    1870:	9800      	ldr	r0, [sp, #0]
    1872:	f7ff fb1f 	bl	eb4 <__data_size+0x509>
    1876:	2800      	cmp	r0, #0
    1878:	bf1f      	itttt	ne
    187a:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    187e:	2002      	movne	r0, #2
    1880:	b003      	addne	sp, #12
    1882:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1886:	463b      	mov	r3, r7
    1888:	462a      	mov	r2, r5
    188a:	2120      	movs	r1, #32
    188c:	2004      	movs	r0, #4
    188e:	f7ff f82d 	bl	8ec <MPSL_IRQ_RADIO_Handler+0x40>
    1892:	b003      	add	sp, #12
    1894:	2000      	movs	r0, #0
    1896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    189a:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    189e:	b118      	cbz	r0, 18a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x520>
    18a0:	f002 f96c 	bl	3b7c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    18a4:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    18a8:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    18ac:	b120      	cbz	r0, 18b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x530>
    18ae:	2005      	movs	r0, #5
    18b0:	f001 fe32 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    18b4:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    18b8:	2004      	movs	r0, #4
    18ba:	f001 fe2d 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    18be:	f001 fe9b 	bl	35f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    18c2:	2020      	movs	r0, #32
    18c4:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    18c8:	4808      	ldr	r0, [pc, #32]	; (18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>)
    18ca:	6880      	ldr	r0, [r0, #8]
    18cc:	f8c0 b000 	str.w	fp, [r0]
    18d0:	4807      	ldr	r0, [pc, #28]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    18d2:	f8c0 b000 	str.w	fp, [r0]
    18d6:	b003      	add	sp, #12
    18d8:	2001      	movs	r0, #1
    18da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18de:	0000      	.short	0x0000
    18e0:	200012dc 	.word	0x200012dc
    18e4:	20000edc 	.word	0x20000edc
    18e8:	2000125c 	.word	0x2000125c
    18ec:	20000038 	.word	0x20000038
    18f0:	40000508 	.word	0x40000508

000018f4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    18f4:	4906      	ldr	r1, [pc, #24]	; (1910 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    18f6:	b510      	push	{r4, lr}
    18f8:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    18fc:	2a20      	cmp	r2, #32
    18fe:	bf1c      	itt	ne
    1900:	7788      	strbne	r0, [r1, #30]
    1902:	bd10      	popne	{r4, pc}
    1904:	f240 317a 	movw	r1, #890	; 0x37a
    1908:	2070      	movs	r0, #112	; 0x70
    190a:	f002 fadb 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    190e:	0000      	.short	0x0000
    1910:	200012dc 	.word	0x200012dc

00001914 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1918:	4e69      	ldr	r6, [pc, #420]	; (1ac0 <CONFIG_BT_DIS_PNP_VID+0x1ab>)
    191a:	4607      	mov	r7, r0
    191c:	b08d      	sub	sp, #52	; 0x34
    191e:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1922:	4688      	mov	r8, r1
    1924:	2820      	cmp	r0, #32
    1926:	d055      	beq.n	19d4 <CONFIG_BT_DIS_PNP_VID+0xbf>
    1928:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    192c:	f106 0408 	add.w	r4, r6, #8
    1930:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1934:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1938:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    193c:	2020      	movs	r0, #32
    193e:	f88d 0020 	strb.w	r0, [sp, #32]
    1942:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1946:	aa0a      	add	r2, sp, #40	; 0x28
    1948:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    194c:	4430      	add	r0, r6
    194e:	a909      	add	r1, sp, #36	; 0x24
    1950:	f890 5020 	ldrb.w	r5, [r0, #32]
    1954:	68f0      	ldr	r0, [r6, #12]
    1956:	9002      	str	r0, [sp, #8]
    1958:	6830      	ldr	r0, [r6, #0]
    195a:	4438      	add	r0, r7
    195c:	f001 fa10 	bl	2d80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1960:	f8da 000c 	ldr.w	r0, [sl, #12]
    1964:	9909      	ldr	r1, [sp, #36]	; 0x24
    1966:	2f65      	cmp	r7, #101	; 0x65
    1968:	4408      	add	r0, r1
    196a:	d338      	bcc.n	19de <CONFIG_BT_DIS_PNP_VID+0xc9>
    196c:	4a55      	ldr	r2, [pc, #340]	; (1ac4 <CONFIG_BT_DIS_PNP_VID+0x1af>)
    196e:	2100      	movs	r1, #0
    1970:	1bd2      	subs	r2, r2, r7
    1972:	eb71 0201 	sbcs.w	r2, r1, r1
    1976:	d332      	bcc.n	19de <CONFIG_BT_DIS_PNP_VID+0xc9>
    1978:	6822      	ldr	r2, [r4, #0]
    197a:	1a82      	subs	r2, r0, r2
    197c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1980:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1984:	d82b      	bhi.n	19de <CONFIG_BT_DIS_PNP_VID+0xc9>
    1986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    198a:	6060      	str	r0, [r4, #4]
    198c:	4630      	mov	r0, r6
    198e:	f884 8010 	strb.w	r8, [r4, #16]
    1992:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1996:	f10d 0a20 	add.w	sl, sp, #32
    199a:	2d20      	cmp	r5, #32
    199c:	bf1c      	itt	ne
    199e:	494a      	ldrne	r1, [pc, #296]	; (1ac8 <CONFIG_BT_DIS_PNP_VID+0x1b3>)
    19a0:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    19a4:	d050      	beq.n	1a48 <CONFIG_BT_DIS_PNP_VID+0x133>
    19a6:	bf00      	nop
    19a8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    19ac:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    19b0:	6861      	ldr	r1, [r4, #4]
    19b2:	f8d8 6008 	ldr.w	r6, [r8, #8]
    19b6:	f108 0008 	add.w	r0, r8, #8
    19ba:	1a71      	subs	r1, r6, r1
    19bc:	0209      	lsls	r1, r1, #8
    19be:	17ca      	asrs	r2, r1, #31
    19c0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    19c4:	1209      	asrs	r1, r1, #8
    19c6:	d42d      	bmi.n	1a24 <CONFIG_BT_DIS_PNP_VID+0x10f>
    19c8:	89c0      	ldrh	r0, [r0, #14]
    19ca:	2800      	cmp	r0, #0
    19cc:	d03c      	beq.n	1a48 <CONFIG_BT_DIS_PNP_VID+0x133>
    19ce:	89e0      	ldrh	r0, [r4, #14]
    19d0:	b148      	cbz	r0, 19e6 <CONFIG_BT_DIS_PNP_VID+0xd1>
    19d2:	e039      	b.n	1a48 <CONFIG_BT_DIS_PNP_VID+0x133>
    19d4:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    19d8:	2070      	movs	r0, #112	; 0x70
    19da:	f002 fa73 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19de:	b00d      	add	sp, #52	; 0x34
    19e0:	2001      	movs	r0, #1
    19e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19e6:	6820      	ldr	r0, [r4, #0]
    19e8:	900c      	str	r0, [sp, #48]	; 0x30
    19ea:	f002 f8c1 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    19ee:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    19f2:	bf08      	it	eq
    19f4:	200d      	moveq	r0, #13
    19f6:	d00b      	beq.n	1a10 <CONFIG_BT_DIS_PNP_VID+0xfb>
    19f8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    19fc:	3856      	subs	r0, #86	; 0x56
    19fe:	bf08      	it	eq
    1a00:	201c      	moveq	r0, #28
    1a02:	d005      	beq.n	1a10 <CONFIG_BT_DIS_PNP_VID+0xfb>
    1a04:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1a08:	389f      	subs	r0, #159	; 0x9f
    1a0a:	bf14      	ite	ne
    1a0c:	2000      	movne	r0, #0
    1a0e:	2032      	moveq	r0, #50	; 0x32
    1a10:	1c41      	adds	r1, r0, #1
    1a12:	980c      	ldr	r0, [sp, #48]	; 0x30
    1a14:	1a30      	subs	r0, r6, r0
    1a16:	0200      	lsls	r0, r0, #8
    1a18:	17c2      	asrs	r2, r0, #31
    1a1a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1a1e:	1200      	asrs	r0, r0, #8
    1a20:	4288      	cmp	r0, r1
    1a22:	da11      	bge.n	1a48 <CONFIG_BT_DIS_PNP_VID+0x133>
    1a24:	f88a 5000 	strb.w	r5, [sl]
    1a28:	f898 1018 	ldrb.w	r1, [r8, #24]
    1a2c:	7c20      	ldrb	r0, [r4, #16]
    1a2e:	4281      	cmp	r1, r0
    1a30:	d805      	bhi.n	1a3e <CONFIG_BT_DIS_PNP_VID+0x129>
    1a32:	9802      	ldr	r0, [sp, #8]
    1a34:	6060      	str	r0, [r4, #4]
    1a36:	b00d      	add	sp, #52	; 0x34
    1a38:	2002      	movs	r0, #2
    1a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a3e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1a42:	7845      	ldrb	r5, [r0, #1]
    1a44:	2d20      	cmp	r5, #32
    1a46:	d1af      	bne.n	19a8 <CONFIG_BT_DIS_PNP_VID+0x93>
    1a48:	2005      	movs	r0, #5
    1a4a:	f001 fd65 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a4e:	4c1c      	ldr	r4, [pc, #112]	; (1ac0 <CONFIG_BT_DIS_PNP_VID+0x1ab>)
    1a50:	f04f 30ff 	mov.w	r0, #4294967295
    1a54:	6060      	str	r0, [r4, #4]
    1a56:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1a5a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1a5e:	2120      	movs	r1, #32
    1a60:	2a20      	cmp	r2, #32
    1a62:	d003      	beq.n	1a6c <CONFIG_BT_DIS_PNP_VID+0x157>
    1a64:	2005      	movs	r0, #5
    1a66:	f7fe ff41 	bl	8ec <MPSL_IRQ_RADIO_Handler+0x40>
    1a6a:	e004      	b.n	1a76 <CONFIG_BT_DIS_PNP_VID+0x161>
    1a6c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    1a70:	4420      	add	r0, r4
    1a72:	f890 0020 	ldrb.w	r0, [r0, #32]
    1a76:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    1a7a:	4913      	ldr	r1, [pc, #76]	; (1ac8 <CONFIG_BT_DIS_PNP_VID+0x1b3>)
    1a7c:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1a80:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    1a84:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1a88:	7048      	strb	r0, [r1, #1]
    1a8a:	6820      	ldr	r0, [r4, #0]
    1a8c:	4438      	add	r0, r7
    1a8e:	6020      	str	r0, [r4, #0]
    1a90:	20ff      	movs	r0, #255	; 0xff
    1a92:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1a96:	7e60      	ldrb	r0, [r4, #25]
    1a98:	2801      	cmp	r0, #1
    1a9a:	d105      	bne.n	1aa8 <CONFIG_BT_DIS_PNP_VID+0x193>
    1a9c:	68e0      	ldr	r0, [r4, #12]
    1a9e:	1e40      	subs	r0, r0, #1
    1aa0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aa4:	f001 fb9c 	bl	31e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1aa8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1aac:	2820      	cmp	r0, #32
    1aae:	d003      	beq.n	1ab8 <CONFIG_BT_DIS_PNP_VID+0x1a3>
    1ab0:	4806      	ldr	r0, [pc, #24]	; (1acc <CONFIG_BT_DIS_PNP_VID+0x1b7>)
    1ab2:	7840      	ldrb	r0, [r0, #1]
    1ab4:	f002 fada 	bl	406c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ab8:	b00d      	add	sp, #52	; 0x34
    1aba:	2000      	movs	r0, #0
    1abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ac0:	200012dc 	.word	0x200012dc
    1ac4:	0f424000 	.word	0x0f424000
    1ac8:	2000125c 	.word	0x2000125c
    1acc:	20000038 	.word	0x20000038

00001ad0 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1ad0:	4806      	ldr	r0, [pc, #24]	; (1aec <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1ad2:	b510      	push	{r4, lr}
    1ad4:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1ad8:	2920      	cmp	r1, #32
    1ada:	bf1c      	itt	ne
    1adc:	7e00      	ldrbne	r0, [r0, #24]
    1ade:	bd10      	popne	{r4, pc}
    1ae0:	f640 312a 	movw	r1, #2858	; 0xb2a
    1ae4:	2070      	movs	r0, #112	; 0x70
    1ae6:	f002 f9ed 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1aea:	0000      	.short	0x0000
    1aec:	200012dc 	.word	0x200012dc

00001af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1af2:	4d6b      	ldr	r5, [pc, #428]	; (1ca0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    1af4:	4a6b      	ldr	r2, [pc, #428]	; (1ca4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    1af6:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    1afa:	2601      	movs	r6, #1
    1afc:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1b00:	2808      	cmp	r0, #8
    1b02:	d27c      	bcs.n	1bfe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    1b04:	e8df f000 	tbb	[pc, r0]
    1b08:	a9977004 	.word	0xa9977004
    1b0c:	b3ae41c7 	.word	0xb3ae41c7
    1b10:	b919      	cbnz	r1, 1b1a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1b12:	f002 f84f 	bl	3bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1b16:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1b1a:	8ae0      	ldrh	r0, [r4, #22]
    1b1c:	b110      	cbz	r0, 1b24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1b1e:	f002 f959 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1b22:	b180      	cbz	r0, 1b46 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1b24:	f7ff fd0e 	bl	1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    1b28:	20ff      	movs	r0, #255	; 0xff
    1b2a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1b2e:	6861      	ldr	r1, [r4, #4]
    1b30:	f1b1 3fff 	cmp.w	r1, #4294967295
    1b34:	d003      	beq.n	1b3e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1b36:	2005      	movs	r0, #5
    1b38:	f001 fc38 	bl	33ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1b3c:	b140      	cbz	r0, 1b50 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1b3e:	7e60      	ldrb	r0, [r4, #25]
    1b40:	2801      	cmp	r0, #1
    1b42:	d110      	bne.n	1b66 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1b44:	e009      	b.n	1b5a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1b46:	f640 0134 	movw	r1, #2100	; 0x834
    1b4a:	2070      	movs	r0, #112	; 0x70
    1b4c:	f002 f9ba 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b50:	f640 0139 	movw	r1, #2105	; 0x839
    1b54:	2070      	movs	r0, #112	; 0x70
    1b56:	f002 f9b5 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b5a:	68e0      	ldr	r0, [r4, #12]
    1b5c:	1e40      	subs	r0, r0, #1
    1b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b62:	f001 fb3d 	bl	31e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1b66:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1b6a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1b6e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1b72:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b76:	6840      	ldr	r0, [r0, #4]
    1b78:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1b7c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1b80:	b001      	add	sp, #4
    1b82:	2101      	movs	r1, #1
    1b84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1b88:	4710      	bx	r2
    1b8a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1b8e:	b140      	cbz	r0, 1ba2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1b90:	b919      	cbnz	r1, 1b9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    1b92:	f002 f80f 	bl	3bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1b96:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1b9a:	2000      	movs	r0, #0
    1b9c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ba2:	f7ff fccf 	bl	1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    1ba6:	f04f 30ff 	mov.w	r0, #4294967295
    1baa:	6060      	str	r0, [r4, #4]
    1bac:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1bb0:	f88d 0000 	strb.w	r0, [sp]
    1bb4:	f89d 0000 	ldrb.w	r0, [sp]
    1bb8:	b188      	cbz	r0, 1bde <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    1bba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1bbe:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1bc2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1bc6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1bca:	6840      	ldr	r0, [r0, #4]
    1bcc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1bd0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1bd4:	b001      	add	sp, #4
    1bd6:	2106      	movs	r1, #6
    1bd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1bdc:	4710      	bx	r2
    1bde:	f44f 6105 	mov.w	r1, #2128	; 0x850
    1be2:	2070      	movs	r0, #112	; 0x70
    1be4:	f002 f96e 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1be8:	f7ff fcac 	bl	1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    1bec:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1bf0:	f002 f8f0 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1bf4:	b120      	cbz	r0, 1c00 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    1bf6:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    1bfa:	b130      	cbz	r0, 1c0a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    1bfc:	e009      	b.n	1c12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    1bfe:	e04a      	b.n	1c96 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    1c00:	f640 015e 	movw	r1, #2142	; 0x85e
    1c04:	2070      	movs	r0, #112	; 0x70
    1c06:	f002 f95d 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c0a:	f001 ffd3 	bl	3bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1c0e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1c12:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c16:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1c1a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c1e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1c22:	6840      	ldr	r0, [r0, #4]
    1c24:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c28:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1c2c:	b001      	add	sp, #4
    1c2e:	2100      	movs	r1, #0
    1c30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1c34:	4710      	bx	r2
    1c36:	f001 fdaf 	bl	3798 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    1c3a:	8ae0      	ldrh	r0, [r4, #22]
    1c3c:	b110      	cbz	r0, 1c44 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    1c3e:	f002 f8c9 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c42:	b128      	cbz	r0, 1c50 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    1c44:	f001 fdbc 	bl	37c0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1c48:	2800      	cmp	r0, #0
    1c4a:	bf18      	it	ne
    1c4c:	7766      	strbne	r6, [r4, #29]
    1c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c50:	f640 0168 	movw	r1, #2152	; 0x868
    1c54:	2070      	movs	r0, #112	; 0x70
    1c56:	f002 f935 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c5a:	4813      	ldr	r0, [pc, #76]	; (1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1c5c:	6006      	str	r6, [r0, #0]
    1c5e:	6890      	ldr	r0, [r2, #8]
    1c60:	6006      	str	r6, [r0, #0]
    1c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c64:	7810      	ldrb	r0, [r2, #0]
    1c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1c6a:	f002 b9ff 	b.w	406c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c6e:	f7ff fc69 	bl	1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    1c72:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c76:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1c7a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c7e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1c82:	6840      	ldr	r0, [r0, #4]
    1c84:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c88:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1c8c:	b001      	add	sp, #4
    1c8e:	2105      	movs	r1, #5
    1c90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1c94:	4710      	bx	r2
    1c96:	f640 017b 	movw	r1, #2171	; 0x87b
    1c9a:	2070      	movs	r0, #112	; 0x70
    1c9c:	f002 f912 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ca0:	20000edc 	.word	0x20000edc
    1ca4:	20000038 	.word	0x20000038
    1ca8:	40000508 	.word	0x40000508

00001cac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1cac:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cb0:	4682      	mov	sl, r0
    1cb2:	48f0      	ldr	r0, [pc, #960]	; (2074 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x328>)
    1cb4:	b095      	sub	sp, #84	; 0x54
    1cb6:	6800      	ldr	r0, [r0, #0]
    1cb8:	4def      	ldr	r5, [pc, #956]	; (2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>)
    1cba:	05c0      	lsls	r0, r0, #23
    1cbc:	0dc0      	lsrs	r0, r0, #23
    1cbe:	d00e      	beq.n	1cde <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1cc0:	3810      	subs	r0, #16
    1cc2:	b240      	sxtb	r0, r0
    1cc4:	2800      	cmp	r0, #0
    1cc6:	bfb8      	it	lt
    1cc8:	f000 000f 	andlt.w	r0, r0, #15
    1ccc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1cd0:	bfac      	ite	ge
    1cd2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1cd6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1cda:	0940      	lsrs	r0, r0, #5
    1cdc:	d00d      	beq.n	1cfa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1cde:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ce0:	f04f 0b00 	mov.w	fp, #0
    1ce4:	7800      	ldrb	r0, [r0, #0]
    1ce6:	2800      	cmp	r0, #0
    1ce8:	bf18      	it	ne
    1cea:	2801      	cmpne	r0, #1
    1cec:	d018      	beq.n	1d20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1cee:	f240 7104 	movw	r1, #1796	; 0x704
    1cf2:	f04f 0070 	mov.w	r0, #112	; 0x70
    1cf6:	f002 f8e5 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cfa:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1cfe:	f04f 0b01 	mov.w	fp, #1
    1d02:	2820      	cmp	r0, #32
    1d04:	d007      	beq.n	1d16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1d06:	9816      	ldr	r0, [sp, #88]	; 0x58
    1d08:	7800      	ldrb	r0, [r0, #0]
    1d0a:	b148      	cbz	r0, 1d20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1d0c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1d10:	2070      	movs	r0, #112	; 0x70
    1d12:	f002 f8d7 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d16:	f240 61fd 	movw	r1, #1789	; 0x6fd
    1d1a:	2070      	movs	r0, #112	; 0x70
    1d1c:	f002 f8d2 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d20:	4cd6      	ldr	r4, [pc, #856]	; (207c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x330>)
    1d22:	b124      	cbz	r4, 1d2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1d24:	2100      	movs	r1, #0
    1d26:	f240 7007 	movw	r0, #1799	; 0x707
    1d2a:	f3af 8000 	nop.w
    1d2e:	2000      	movs	r0, #0
    1d30:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1d34:	49d2      	ldr	r1, [pc, #840]	; (2080 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x334>)
    1d36:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    1d3a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1d3e:	f04f 0901 	mov.w	r9, #1
    1d42:	9000      	str	r0, [sp, #0]
    1d44:	b124      	cbz	r4, 1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d46:	2100      	movs	r1, #0
    1d48:	f240 7012 	movw	r0, #1810	; 0x712
    1d4c:	f3af 8000 	nop.w
    1d50:	f1b9 0f00 	cmp.w	r9, #0
    1d54:	d00a      	beq.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d56:	bf00      	nop
    1d58:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1d5c:	f04f 0800 	mov.w	r8, #0
    1d60:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1d64:	f1bb 0f00 	cmp.w	fp, #0
    1d68:	d007      	beq.n	1d7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e>
    1d6a:	e038      	b.n	1dde <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x92>
    1d6c:	48c5      	ldr	r0, [pc, #788]	; (2084 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x338>)
    1d6e:	2800      	cmp	r0, #0
    1d70:	bf18      	it	ne
    1d72:	f3af 8000 	nopne.w
    1d76:	b662      	cpsie	i
    1d78:	e7ee      	b.n	1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1d7a:	4637      	mov	r7, r6
    1d7c:	2001      	movs	r0, #1
    1d7e:	ea20 0607 	bic.w	r6, r0, r7
    1d82:	48c1      	ldr	r0, [pc, #772]	; (2088 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33c>)
    1d84:	2240      	movs	r2, #64	; 0x40
    1d86:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1d8a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1d8e:	f00f f893 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1d92:	b124      	cbz	r4, 1d9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52>
    1d94:	2100      	movs	r1, #0
    1d96:	f240 502f 	movw	r0, #1327	; 0x52f
    1d9a:	f3af 8000 	nop.w
    1d9e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1da2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1da6:	4429      	add	r1, r5
    1da8:	4428      	add	r0, r5
    1daa:	8c0a      	ldrh	r2, [r1, #32]
    1dac:	8402      	strh	r2, [r0, #32]
    1dae:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1db2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1db6:	b124      	cbz	r4, 1dc2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x76>
    1db8:	2100      	movs	r1, #0
    1dba:	f240 5033 	movw	r0, #1331	; 0x533
    1dbe:	f3af 8000 	nop.w
    1dc2:	b124      	cbz	r4, 1dce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x82>
    1dc4:	2100      	movs	r1, #0
    1dc6:	f240 701c 	movw	r0, #1820	; 0x71c
    1dca:	f3af 8000 	nop.w
    1dce:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1dd2:	f88d 0008 	strb.w	r0, [sp, #8]
    1dd6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1dda:	2800      	cmp	r0, #0
    1ddc:	d1b2      	bne.n	1d44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1dde:	b124      	cbz	r4, 1dea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9e>
    1de0:	2100      	movs	r1, #0
    1de2:	f240 7026 	movw	r0, #1830	; 0x726
    1de6:	f3af 8000 	nop.w
    1dea:	a802      	add	r0, sp, #8
    1dec:	f001 f938 	bl	3060 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1df4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1df8:	4633      	mov	r3, r6
    1dfa:	aa09      	add	r2, sp, #36	; 0x24
    1dfc:	a80e      	add	r0, sp, #56	; 0x38
    1dfe:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e00:	f7ff fac4 	bl	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1e04:	b124      	cbz	r4, 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1e06:	2100      	movs	r1, #0
    1e08:	f240 702d 	movw	r0, #1837	; 0x72d
    1e0c:	f3af 8000 	nop.w
    1e10:	4a9d      	ldr	r2, [pc, #628]	; (2088 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33c>)
    1e12:	990e      	ldr	r1, [sp, #56]	; 0x38
    1e14:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1e18:	a809      	add	r0, sp, #36	; 0x24
    1e1a:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1e1e:	2a01      	cmp	r2, #1
    1e20:	bf18      	it	ne
    1e22:	2a02      	cmpne	r2, #2
    1e24:	d138      	bne.n	1e98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e2a:	eba2 0201 	sub.w	r2, r2, r1
    1e2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1e32:	eba3 0101 	sub.w	r1, r3, r1
    1e36:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1e3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e3e:	2a02      	cmp	r2, #2
    1e40:	d364      	bcc.n	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1e42:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1e46:	bf98      	it	ls
    1e48:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1e4c:	d85e      	bhi.n	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1e4e:	f04f 0801 	mov.w	r8, #1
    1e52:	ab14      	add	r3, sp, #80	; 0x50
    1e54:	aa13      	add	r2, sp, #76	; 0x4c
    1e56:	4631      	mov	r1, r6
    1e58:	f7fe ff36 	bl	cc8 <__data_size+0x31d>
    1e5c:	2800      	cmp	r0, #0
    1e5e:	d05d      	beq.n	1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>
    1e60:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1e64:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    1e68:	4633      	mov	r3, r6
    1e6a:	428a      	cmp	r2, r1
    1e6c:	d05a      	beq.n	1f24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d8>
    1e6e:	2005      	movs	r0, #5
    1e70:	f7fe fd3c 	bl	8ec <MPSL_IRQ_RADIO_Handler+0x40>
    1e74:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1e78:	7048      	strb	r0, [r1, #1]
    1e7a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1e7e:	2820      	cmp	r0, #32
    1e80:	bf1c      	itt	ne
    1e82:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1e86:	f880 a001 	strbne.w	sl, [r0, #1]
    1e8a:	d057      	beq.n	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1e8c:	4632      	mov	r2, r6
    1e8e:	4651      	mov	r1, sl
    1e90:	f05f 0003 	movs.w	r0, #3
    1e94:	f7ff fc42 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    1e98:	b124      	cbz	r4, 1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>
    1e9a:	2100      	movs	r1, #0
    1e9c:	f240 7032 	movw	r0, #1842	; 0x732
    1ea0:	f3af 8000 	nop.w
    1ea4:	4879      	ldr	r0, [pc, #484]	; (208c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x340>)
    1ea6:	2800      	cmp	r0, #0
    1ea8:	bf18      	it	ne
    1eaa:	f3af 8000 	nopne.w
    1eae:	f3ef 8910 	mrs	r9, PRIMASK
    1eb2:	b672      	cpsid	i
    1eb4:	b124      	cbz	r4, 1ec0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>
    1eb6:	2100      	movs	r1, #0
    1eb8:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    1ebc:	f3af 8000 	nop.w
    1ec0:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1ec4:	f88d 0008 	strb.w	r0, [sp, #8]
    1ec8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ecc:	2800      	cmp	r0, #0
    1ece:	f47f af39 	bne.w	1d44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1ed2:	b124      	cbz	r4, 1ede <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x192>
    1ed4:	2100      	movs	r1, #0
    1ed6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    1eda:	f3af 8000 	nop.w
    1ede:	af09      	add	r7, sp, #36	; 0x24
    1ee0:	9800      	ldr	r0, [sp, #0]
    1ee2:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    1ee6:	f100 0708 	add.w	r7, r0, #8
    1eea:	f1b8 0f00 	cmp.w	r8, #0
    1eee:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    1ef2:	990d      	ldr	r1, [sp, #52]	; 0x34
    1ef4:	6181      	str	r1, [r0, #24]
    1ef6:	d053      	beq.n	1fa0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    1ef8:	b124      	cbz	r4, 1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1efa:	2100      	movs	r1, #0
    1efc:	f240 704d 	movw	r0, #1869	; 0x74d
    1f00:	f3af 8000 	nop.w
    1f04:	f1bb 0f00 	cmp.w	fp, #0
    1f08:	d13a      	bne.n	1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1f0a:	e01f      	b.n	1f4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x200>
    1f0c:	4632      	mov	r2, r6
    1f0e:	4651      	mov	r1, sl
    1f10:	2004      	movs	r0, #4
    1f12:	f7ff fc03 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    1f16:	f04f 0801 	mov.w	r8, #1
    1f1a:	e7bd      	b.n	1e98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1f1c:	4632      	mov	r2, r6
    1f1e:	4651      	mov	r1, sl
    1f20:	2004      	movs	r0, #4
    1f22:	e7b7      	b.n	1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1f24:	2920      	cmp	r1, #32
    1f26:	bf19      	ittee	ne
    1f28:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1f2c:	7840      	ldrbne	r0, [r0, #1]
    1f2e:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    1f32:	4428      	addeq	r0, r5
    1f34:	bf08      	it	eq
    1f36:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1f3a:	e79b      	b.n	1e74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    1f3c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    1f40:	4429      	add	r1, r5
    1f42:	f881 a020 	strb.w	sl, [r1, #32]
    1f46:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1f4a:	e79f      	b.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1f4c:	9811      	ldr	r0, [sp, #68]	; 0x44
    1f4e:	f010 0fff 	tst.w	r0, #255	; 0xff
    1f52:	d015      	beq.n	1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1f54:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1f58:	2820      	cmp	r0, #32
    1f5a:	d111      	bne.n	1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1f5c:	b124      	cbz	r4, 1f68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    1f5e:	2100      	movs	r1, #0
    1f60:	f240 7052 	movw	r0, #1874	; 0x752
    1f64:	f3af 8000 	nop.w
    1f68:	4632      	mov	r2, r6
    1f6a:	2102      	movs	r1, #2
    1f6c:	980e      	ldr	r0, [sp, #56]	; 0x38
    1f6e:	f7ff fc07 	bl	1780 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f8>
    1f72:	9010      	str	r0, [sp, #64]	; 0x40
    1f74:	b920      	cbnz	r0, 1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1f76:	9816      	ldr	r0, [sp, #88]	; 0x58
    1f78:	7800      	ldrb	r0, [r0, #0]
    1f7a:	b1f0      	cbz	r0, 1fba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26e>
    1f7c:	2801      	cmp	r0, #1
    1f7e:	d02b      	beq.n	1fd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28c>
    1f80:	b124      	cbz	r4, 1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>
    1f82:	2100      	movs	r1, #0
    1f84:	f240 706f 	movw	r0, #1903	; 0x76f
    1f88:	f3af 8000 	nop.w
    1f8c:	20ff      	movs	r0, #255	; 0xff
    1f8e:	f1bb 0f00 	cmp.w	fp, #0
    1f92:	bf18      	it	ne
    1f94:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    1f98:	d027      	beq.n	1fea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29e>
    1f9a:	bf00      	nop
    1f9c:	f04f 0801 	mov.w	r8, #1
    1fa0:	b124      	cbz	r4, 1fac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>
    1fa2:	2100      	movs	r1, #0
    1fa4:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    1fa8:	f3af 8000 	nop.w
    1fac:	9810      	ldr	r0, [sp, #64]	; 0x40
    1fae:	4e38      	ldr	r6, [pc, #224]	; (2090 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x344>)
    1fb0:	2802      	cmp	r0, #2
    1fb2:	d023      	beq.n	1ffc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b0>
    1fb4:	2801      	cmp	r0, #1
    1fb6:	d029      	beq.n	200c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c0>
    1fb8:	e02d      	b.n	2016 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ca>
    1fba:	b124      	cbz	r4, 1fc6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27a>
    1fbc:	2100      	movs	r1, #0
    1fbe:	f240 705a 	movw	r0, #1882	; 0x75a
    1fc2:	f3af 8000 	nop.w
    1fc6:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1fca:	4651      	mov	r1, sl
    1fcc:	2004      	movs	r0, #4
    1fce:	f7ff fba5 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    1fd2:	f04f 0801 	mov.w	r8, #1
    1fd6:	e7e3      	b.n	1fa0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    1fd8:	2c00      	cmp	r4, #0
    1fda:	f43f aeb3 	beq.w	1d44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1fde:	2100      	movs	r1, #0
    1fe0:	f240 7065 	movw	r0, #1893	; 0x765
    1fe4:	f3af 8000 	nop.w
    1fe8:	e6ac      	b.n	1d44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1fea:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1fee:	2101      	movs	r1, #1
    1ff0:	4391      	bics	r1, r2
    1ff2:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    1ff6:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1ffa:	e7cf      	b.n	1f9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x250>
    1ffc:	68a8      	ldr	r0, [r5, #8]
    1ffe:	990e      	ldr	r1, [sp, #56]	; 0x38
    2000:	1a40      	subs	r0, r0, r1
    2002:	f00e fdfd 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2006:	6871      	ldr	r1, [r6, #4]
    2008:	b921      	cbnz	r1, 2014 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c8>
    200a:	e004      	b.n	2016 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ca>
    200c:	6871      	ldr	r1, [r6, #4]
    200e:	f04f 30ff 	mov.w	r0, #4294967295
    2012:	b101      	cbz	r1, 2016 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ca>
    2014:	4788      	blx	r1
    2016:	f1b9 0f00 	cmp.w	r9, #0
    201a:	d024      	beq.n	2066 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31a>
    201c:	b124      	cbz	r4, 2028 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2dc>
    201e:	2100      	movs	r1, #0
    2020:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    2024:	f3af 8000 	nop.w
    2028:	f1b8 0f00 	cmp.w	r8, #0
    202c:	d011      	beq.n	2052 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x306>
    202e:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2032:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2036:	4428      	add	r0, r5
    2038:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    203c:	2820      	cmp	r0, #32
    203e:	d008      	beq.n	2052 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x306>
    2040:	b124      	cbz	r4, 204c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x300>
    2042:	2100      	movs	r1, #0
    2044:	f240 7097 	movw	r0, #1943	; 0x797
    2048:	f3af 8000 	nop.w
    204c:	7870      	ldrb	r0, [r6, #1]
    204e:	f002 f80d 	bl	406c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2052:	b124      	cbz	r4, 205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    2054:	2100      	movs	r1, #0
    2056:	f240 709c 	movw	r0, #1948	; 0x79c
    205a:	f3af 8000 	nop.w
    205e:	b017      	add	sp, #92	; 0x5c
    2060:	4640      	mov	r0, r8
    2062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2066:	4807      	ldr	r0, [pc, #28]	; (2084 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x338>)
    2068:	2800      	cmp	r0, #0
    206a:	bf18      	it	ne
    206c:	f3af 8000 	nopne.w
    2070:	b662      	cpsie	i
    2072:	e7d3      	b.n	201c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    2074:	e000ed04 	.word	0xe000ed04
    2078:	200012dc 	.word	0x200012dc
    207c:	00000000 	.word	0x00000000
    2080:	20000edc 	.word	0x20000edc
    2084:	00000000 	.word	0x00000000
    2088:	2000125c 	.word	0x2000125c
    208c:	00000000 	.word	0x00000000
    2090:	20000038 	.word	0x20000038

00002094 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2094:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2098:	48c9      	ldr	r0, [pc, #804]	; (23c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    209a:	b08a      	sub	sp, #40	; 0x28
    209c:	6800      	ldr	r0, [r0, #0]
    209e:	05c0      	lsls	r0, r0, #23
    20a0:	0dc0      	lsrs	r0, r0, #23
    20a2:	d011      	beq.n	20c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    20a4:	3810      	subs	r0, #16
    20a6:	b240      	sxtb	r0, r0
    20a8:	2800      	cmp	r0, #0
    20aa:	bfb8      	it	lt
    20ac:	f000 000f 	andlt.w	r0, r0, #15
    20b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    20b4:	bfac      	ite	ge
    20b6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    20ba:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    20be:	0940      	lsrs	r0, r0, #5
    20c0:	bf08      	it	eq
    20c2:	f04f 0b01 	moveq.w	fp, #1
    20c6:	d001      	beq.n	20cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    20c8:	f04f 0b00 	mov.w	fp, #0
    20cc:	980a      	ldr	r0, [sp, #40]	; 0x28
    20ce:	7800      	ldrb	r0, [r0, #0]
    20d0:	2800      	cmp	r0, #0
    20d2:	bf1e      	ittt	ne
    20d4:	2000      	movne	r0, #0
    20d6:	b00b      	addne	sp, #44	; 0x2c
    20d8:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20dc:	f04f 0a00 	mov.w	sl, #0
    20e0:	4db8      	ldr	r5, [pc, #736]	; (23c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    20e2:	4cb9      	ldr	r4, [pc, #740]	; (23c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    20e4:	46d1      	mov	r9, sl
    20e6:	b125      	cbz	r5, 20f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    20e8:	2100      	movs	r1, #0
    20ea:	f240 50b9 	movw	r0, #1465	; 0x5b9
    20ee:	f3af 8000 	nop.w
    20f2:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    20f6:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    20fa:	f04f 0800 	mov.w	r8, #0
    20fe:	b125      	cbz	r5, 210a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    2100:	2100      	movs	r1, #0
    2102:	f240 50be 	movw	r0, #1470	; 0x5be
    2106:	f3af 8000 	nop.w
    210a:	f1bb 0f00 	cmp.w	fp, #0
    210e:	d123      	bne.n	2158 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2110:	4637      	mov	r7, r6
    2112:	2001      	movs	r0, #1
    2114:	ea20 0607 	bic.w	r6, r0, r7
    2118:	48ac      	ldr	r0, [pc, #688]	; (23cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    211a:	2240      	movs	r2, #64	; 0x40
    211c:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2120:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2124:	f00e fec8 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2128:	b125      	cbz	r5, 2134 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    212a:	2100      	movs	r1, #0
    212c:	f240 502f 	movw	r0, #1327	; 0x52f
    2130:	f3af 8000 	nop.w
    2134:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    2138:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    213c:	4421      	add	r1, r4
    213e:	4420      	add	r0, r4
    2140:	8c0a      	ldrh	r2, [r1, #32]
    2142:	8402      	strh	r2, [r0, #32]
    2144:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2148:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    214c:	b125      	cbz	r5, 2158 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    214e:	2100      	movs	r1, #0
    2150:	f240 5033 	movw	r0, #1331	; 0x533
    2154:	f3af 8000 	nop.w
    2158:	b125      	cbz	r5, 2164 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    215a:	2100      	movs	r1, #0
    215c:	f240 50c6 	movw	r0, #1478	; 0x5c6
    2160:	f3af 8000 	nop.w
    2164:	a808      	add	r0, sp, #32
    2166:	f000 ff7b 	bl	3060 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    216a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    216e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    2172:	4633      	mov	r3, r6
    2174:	466a      	mov	r2, sp
    2176:	a806      	add	r0, sp, #24
    2178:	990a      	ldr	r1, [sp, #40]	; 0x28
    217a:	f7ff f907 	bl	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    217e:	b125      	cbz	r5, 218a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    2180:	2100      	movs	r1, #0
    2182:	f240 50cc 	movw	r0, #1484	; 0x5cc
    2186:	f3af 8000 	nop.w
    218a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    218e:	2820      	cmp	r0, #32
    2190:	d019      	beq.n	21c6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    2192:	68e0      	ldr	r0, [r4, #12]
    2194:	9900      	ldr	r1, [sp, #0]
    2196:	1a09      	subs	r1, r1, r0
    2198:	0209      	lsls	r1, r1, #8
    219a:	17ca      	asrs	r2, r1, #31
    219c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    21a0:	1209      	asrs	r1, r1, #8
    21a2:	d510      	bpl.n	21c6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    21a4:	e9dd 2100 	ldrd	r2, r1, [sp]
    21a8:	1a89      	subs	r1, r1, r2
    21aa:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    21ae:	4408      	add	r0, r1
    21b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21b4:	e9cd 3000 	strd	r3, r0, [sp]
    21b8:	4293      	cmp	r3, r2
    21ba:	d202      	bcs.n	21c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    21bc:	9802      	ldr	r0, [sp, #8]
    21be:	1c40      	adds	r0, r0, #1
    21c0:	9002      	str	r0, [sp, #8]
    21c2:	f04f 0801 	mov.w	r8, #1
    21c6:	b14d      	cbz	r5, 21dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    21c8:	2100      	movs	r1, #0
    21ca:	f240 50df 	movw	r0, #1503	; 0x5df
    21ce:	f3af 8000 	nop.w
    21d2:	2100      	movs	r1, #0
    21d4:	f240 50e5 	movw	r0, #1509	; 0x5e5
    21d8:	f3af 8000 	nop.w
    21dc:	9900      	ldr	r1, [sp, #0]
    21de:	9806      	ldr	r0, [sp, #24]
    21e0:	9a01      	ldr	r2, [sp, #4]
    21e2:	1a09      	subs	r1, r1, r0
    21e4:	1a10      	subs	r0, r2, r0
    21e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21ee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    21f2:	bf98      	it	ls
    21f4:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    21f8:	d803      	bhi.n	2202 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    21fa:	f1bb 0f00 	cmp.w	fp, #0
    21fe:	d10c      	bne.n	221a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    2200:	e003      	b.n	220a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    2202:	f1bb 0f00 	cmp.w	fp, #0
    2206:	d039      	beq.n	227c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    2208:	e0c0      	b.n	238c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    220a:	4633      	mov	r3, r6
    220c:	4669      	mov	r1, sp
    220e:	4870      	ldr	r0, [pc, #448]	; (23d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2210:	9a06      	ldr	r2, [sp, #24]
    2212:	f7fe fba7 	bl	964 <MPSL_IRQ_RADIO_Handler+0xb8>
    2216:	ea48 0800 	orr.w	r8, r8, r0
    221a:	f1b8 0f00 	cmp.w	r8, #0
    221e:	d023      	beq.n	2268 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    2220:	9800      	ldr	r0, [sp, #0]
    2222:	f00e fced 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2226:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    222a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    222e:	4b69      	ldr	r3, [pc, #420]	; (23d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    2230:	4411      	add	r1, r2
    2232:	1c49      	adds	r1, r1, #1
    2234:	1842      	adds	r2, r0, r1
    2236:	4298      	cmp	r0, r3
    2238:	d856      	bhi.n	22e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    223a:	4865      	ldr	r0, [pc, #404]	; (23d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    223c:	4281      	cmp	r1, r0
    223e:	dc7c      	bgt.n	233a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    2240:	4240      	negs	r0, r0
    2242:	4281      	cmp	r1, r0
    2244:	db7a      	blt.n	233c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    2246:	1c58      	adds	r0, r3, #1
    2248:	4290      	cmp	r0, r2
    224a:	bfdc      	itt	le
    224c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2250:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2254:	dd05      	ble.n	2262 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    2256:	2a00      	cmp	r2, #0
    2258:	bfbc      	itt	lt
    225a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    225e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2262:	980a      	ldr	r0, [sp, #40]	; 0x28
    2264:	e9c0 2904 	strd	r2, r9, [r0, #16]
    2268:	f04f 0a01 	mov.w	sl, #1
    226c:	2d00      	cmp	r5, #0
    226e:	d07c      	beq.n	236a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    2270:	2100      	movs	r1, #0
    2272:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    2276:	f3af 8000 	nop.w
    227a:	e087      	b.n	238c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    227c:	9807      	ldr	r0, [sp, #28]
    227e:	9002      	str	r0, [sp, #8]
    2280:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2284:	aa08      	add	r2, sp, #32
    2286:	a905      	add	r1, sp, #20
    2288:	f8dd 8018 	ldr.w	r8, [sp, #24]
    228c:	f000 fd78 	bl	2d80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2290:	f001 faa0 	bl	37d4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2294:	f000 fd58 	bl	2d48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2298:	4607      	mov	r7, r0
    229a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    229e:	2820      	cmp	r0, #32
    22a0:	d027      	beq.n	22f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    22a2:	68e0      	ldr	r0, [r4, #12]
    22a4:	1d40      	adds	r0, r0, #5
    22a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22aa:	bf00      	nop
    22ac:	e9dd 2100 	ldrd	r2, r1, [sp]
    22b0:	1a89      	subs	r1, r1, r2
    22b2:	9000      	str	r0, [sp, #0]
    22b4:	4408      	add	r0, r1
    22b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22ba:	9001      	str	r0, [sp, #4]
    22bc:	9800      	ldr	r0, [sp, #0]
    22be:	4540      	cmp	r0, r8
    22c0:	d202      	bcs.n	22c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    22c2:	9802      	ldr	r0, [sp, #8]
    22c4:	1c40      	adds	r0, r0, #1
    22c6:	9002      	str	r0, [sp, #8]
    22c8:	201f      	movs	r0, #31
    22ca:	f88d 000c 	strb.w	r0, [sp, #12]
    22ce:	9800      	ldr	r0, [sp, #0]
    22d0:	f00e fc96 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    22d4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    22d8:	f89d 200c 	ldrb.w	r2, [sp, #12]
    22dc:	4b3d      	ldr	r3, [pc, #244]	; (23d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    22de:	4411      	add	r1, r2
    22e0:	1c49      	adds	r1, r1, #1
    22e2:	1842      	adds	r2, r0, r1
    22e4:	4298      	cmp	r0, r3
    22e6:	d92a      	bls.n	233e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    22e8:	f240 516f 	movw	r1, #1391	; 0x56f
    22ec:	2070      	movs	r0, #112	; 0x70
    22ee:	f001 fde9 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22f2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    22f6:	f108 0609 	add.w	r6, r8, #9
    22fa:	b1b0      	cbz	r0, 232a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    22fc:	f001 fd6a 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2300:	b998      	cbnz	r0, 232a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    2302:	f001 fc35 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2306:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    230a:	bf08      	it	eq
    230c:	200d      	moveq	r0, #13
    230e:	d00b      	beq.n	2328 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    2310:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2314:	3856      	subs	r0, #86	; 0x56
    2316:	bf08      	it	eq
    2318:	201c      	moveq	r0, #28
    231a:	d005      	beq.n	2328 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    231c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2320:	389f      	subs	r0, #159	; 0x9f
    2322:	bf14      	ite	ne
    2324:	4648      	movne	r0, r9
    2326:	2032      	moveq	r0, #50	; 0x32
    2328:	4406      	add	r6, r0
    232a:	9805      	ldr	r0, [sp, #20]
    232c:	4287      	cmp	r7, r0
    232e:	bf84      	itt	hi
    2330:	1a38      	subhi	r0, r7, r0
    2332:	4406      	addhi	r6, r0
    2334:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2338:	e7b8      	b.n	22ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    233a:	e003      	b.n	2344 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    233c:	e00a      	b.n	2354 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    233e:	4824      	ldr	r0, [pc, #144]	; (23d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2340:	4281      	cmp	r1, r0
    2342:	dd04      	ble.n	234e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    2344:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2348:	2070      	movs	r0, #112	; 0x70
    234a:	f001 fdbb 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    234e:	4822      	ldr	r0, [pc, #136]	; (23d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    2350:	4281      	cmp	r1, r0
    2352:	da04      	bge.n	235e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    2354:	f240 5171 	movw	r1, #1393	; 0x571
    2358:	2070      	movs	r0, #112	; 0x70
    235a:	f001 fdb3 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    235e:	481f      	ldr	r0, [pc, #124]	; (23dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    2360:	4290      	cmp	r0, r2
    2362:	bfd8      	it	le
    2364:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2368:	e000      	b.n	236c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    236a:	e00f      	b.n	238c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    236c:	bfd8      	it	le
    236e:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2372:	dd05      	ble.n	2380 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    2374:	2a00      	cmp	r2, #0
    2376:	bfbc      	itt	lt
    2378:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    237c:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2380:	980a      	ldr	r0, [sp, #40]	; 0x28
    2382:	f04f 0a01 	mov.w	sl, #1
    2386:	46d0      	mov	r8, sl
    2388:	e9c0 2904 	strd	r2, r9, [r0, #16]
    238c:	ea1a 0f08 	tst.w	sl, r8
    2390:	d009      	beq.n	23a6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    2392:	980a      	ldr	r0, [sp, #40]	; 0x28
    2394:	4911      	ldr	r1, [pc, #68]	; (23dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    2396:	9b02      	ldr	r3, [sp, #8]
    2398:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    239c:	fbe3 2001 	umlal	r2, r0, r3, r1
    23a0:	990a      	ldr	r1, [sp, #40]	; 0x28
    23a2:	e9c1 2004 	strd	r2, r0, [r1, #16]
    23a6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    23aa:	f88d 0014 	strb.w	r0, [sp, #20]
    23ae:	f89d 0014 	ldrb.w	r0, [sp, #20]
    23b2:	2800      	cmp	r0, #0
    23b4:	f47f ae97 	bne.w	20e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    23b8:	b00b      	add	sp, #44	; 0x2c
    23ba:	4650      	mov	r0, sl
    23bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23c0:	e000ed04 	.word	0xe000ed04
    23c4:	00000000 	.word	0x00000000
    23c8:	200012dc 	.word	0x200012dc
    23cc:	2000125c 	.word	0x2000125c
    23d0:	0f424000 	.word	0x0f424000
    23d4:	1e847fff 	.word	0x1e847fff
    23d8:	f0bdc000 	.word	0xf0bdc000
    23dc:	1e848000 	.word	0x1e848000

000023e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    23e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23e4:	4d94      	ldr	r5, [pc, #592]	; (2638 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    23e6:	b08c      	sub	sp, #48	; 0x30
    23e8:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    23ec:	2000      	movs	r0, #0
    23ee:	9009      	str	r0, [sp, #36]	; 0x24
    23f0:	9006      	str	r0, [sp, #24]
    23f2:	2001      	movs	r0, #1
    23f4:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    23f8:	f04f 0800 	mov.w	r8, #0
    23fc:	4607      	mov	r7, r0
    23fe:	4c8f      	ldr	r4, [pc, #572]	; (263c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    2400:	f8cd 001c 	str.w	r0, [sp, #28]
    2404:	f000 fe26 	bl	3054 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2408:	9008      	str	r0, [sp, #32]
    240a:	b124      	cbz	r4, 2416 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    240c:	2100      	movs	r1, #0
    240e:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    2412:	f3af 8000 	nop.w
    2416:	9807      	ldr	r0, [sp, #28]
    2418:	2800      	cmp	r0, #0
    241a:	d03c      	beq.n	2496 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    241c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2420:	b124      	cbz	r4, 242c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    2422:	2100      	movs	r1, #0
    2424:	f240 70b5 	movw	r0, #1973	; 0x7b5
    2428:	f3af 8000 	nop.w
    242c:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    2430:	2240      	movs	r2, #64	; 0x40
    2432:	ea27 060a 	bic.w	r6, r7, sl
    2436:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    243a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    243e:	4683      	mov	fp, r0
    2440:	f00e fd3a 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2444:	b124      	cbz	r4, 2450 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    2446:	2100      	movs	r1, #0
    2448:	f240 502f 	movw	r0, #1327	; 0x52f
    244c:	f3af 8000 	nop.w
    2450:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2454:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2458:	4428      	add	r0, r5
    245a:	4429      	add	r1, r5
    245c:	9000      	str	r0, [sp, #0]
    245e:	8c0a      	ldrh	r2, [r1, #32]
    2460:	8402      	strh	r2, [r0, #32]
    2462:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2466:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    246a:	b124      	cbz	r4, 2476 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    246c:	2100      	movs	r1, #0
    246e:	f240 5033 	movw	r0, #1331	; 0x533
    2472:	f3af 8000 	nop.w
    2476:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    247a:	f88d 0008 	strb.w	r0, [sp, #8]
    247e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2482:	b178      	cbz	r0, 24a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    2484:	2c00      	cmp	r4, #0
    2486:	bf1c      	itt	ne
    2488:	2100      	movne	r1, #0
    248a:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    248e:	d0b9      	beq.n	2404 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2490:	f3af 8000 	nop.w
    2494:	e7b6      	b.n	2404 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2496:	486a      	ldr	r0, [pc, #424]	; (2640 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2498:	2800      	cmp	r0, #0
    249a:	bf18      	it	ne
    249c:	f3af 8000 	nopne.w
    24a0:	b662      	cpsie	i
    24a2:	e7bb      	b.n	241c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    24a4:	b124      	cbz	r4, 24b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    24a6:	2100      	movs	r1, #0
    24a8:	f240 70bf 	movw	r0, #1983	; 0x7bf
    24ac:	f3af 8000 	nop.w
    24b0:	980c      	ldr	r0, [sp, #48]	; 0x30
    24b2:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    24b6:	2803      	cmp	r0, #3
    24b8:	d17d      	bne.n	25b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    24ba:	9a00      	ldr	r2, [sp, #0]
    24bc:	990c      	ldr	r1, [sp, #48]	; 0x30
    24be:	f892 0020 	ldrb.w	r0, [r2, #32]
    24c2:	4288      	cmp	r0, r1
    24c4:	bf14      	ite	ne
    24c6:	f04f 0a00 	movne.w	sl, #0
    24ca:	f04f 0a01 	moveq.w	sl, #1
    24ce:	f102 0c20 	add.w	ip, r2, #32
    24d2:	4683      	mov	fp, r0
    24d4:	2220      	movs	r2, #32
    24d6:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    24da:	e003      	b.n	24e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    24dc:	4602      	mov	r2, r0
    24de:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    24e2:	7840      	ldrb	r0, [r0, #1]
    24e4:	4288      	cmp	r0, r1
    24e6:	d002      	beq.n	24ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    24e8:	2820      	cmp	r0, #32
    24ea:	d00a      	beq.n	2502 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    24ec:	e7f6      	b.n	24dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    24ee:	2820      	cmp	r0, #32
    24f0:	d007      	beq.n	2502 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    24f2:	4583      	cmp	fp, r0
    24f4:	d107      	bne.n	2506 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    24f6:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    24fa:	7840      	ldrb	r0, [r0, #1]
    24fc:	f88c 0000 	strb.w	r0, [ip]
    2500:	e007      	b.n	2512 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2502:	4640      	mov	r0, r8
    2504:	e00c      	b.n	2520 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2506:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    250a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    250e:	7840      	ldrb	r0, [r0, #1]
    2510:	7048      	strb	r0, [r1, #1]
    2512:	b124      	cbz	r4, 251e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    2514:	2100      	movs	r1, #0
    2516:	f240 409a 	movw	r0, #1178	; 0x49a
    251a:	f3af 8000 	nop.w
    251e:	4638      	mov	r0, r7
    2520:	46c3      	mov	fp, r8
    2522:	ea10 0f0a 	tst.w	r0, sl
    2526:	bf18      	it	ne
    2528:	46bb      	movne	fp, r7
    252a:	2800      	cmp	r0, #0
    252c:	d04f      	beq.n	25ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    252e:	b124      	cbz	r4, 253a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    2530:	2100      	movs	r1, #0
    2532:	f240 70c4 	movw	r0, #1988	; 0x7c4
    2536:	f3af 8000 	nop.w
    253a:	4632      	mov	r2, r6
    253c:	2001      	movs	r0, #1
    253e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2540:	f7ff f8ec 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    2544:	b124      	cbz	r4, 2550 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2546:	2100      	movs	r1, #0
    2548:	f240 70cd 	movw	r0, #1997	; 0x7cd
    254c:	f3af 8000 	nop.w
    2550:	483c      	ldr	r0, [pc, #240]	; (2644 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    2552:	2800      	cmp	r0, #0
    2554:	bf18      	it	ne
    2556:	f3af 8000 	nopne.w
    255a:	f3ef 8010 	mrs	r0, PRIMASK
    255e:	b672      	cpsid	i
    2560:	9007      	str	r0, [sp, #28]
    2562:	b124      	cbz	r4, 256e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2564:	2100      	movs	r1, #0
    2566:	f240 70d2 	movw	r0, #2002	; 0x7d2
    256a:	f3af 8000 	nop.w
    256e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2572:	f88d 0008 	strb.w	r0, [sp, #8]
    2576:	f89d 0008 	ldrb.w	r0, [sp, #8]
    257a:	b138      	cbz	r0, 258c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    257c:	2c00      	cmp	r4, #0
    257e:	bf1c      	itt	ne
    2580:	2100      	movne	r1, #0
    2582:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    2586:	f43f af3d 	beq.w	2404 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    258a:	e781      	b.n	2490 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    258c:	f1bb 0f00 	cmp.w	fp, #0
    2590:	d00a      	beq.n	25a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    2592:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2596:	2820      	cmp	r0, #32
    2598:	d106      	bne.n	25a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    259a:	4632      	mov	r2, r6
    259c:	2102      	movs	r1, #2
    259e:	9808      	ldr	r0, [sp, #32]
    25a0:	f7ff f8ee 	bl	1780 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f8>
    25a4:	9006      	str	r0, [sp, #24]
    25a6:	b1f8      	cbz	r0, 25e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    25a8:	b124      	cbz	r4, 25b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    25aa:	2100      	movs	r1, #0
    25ac:	f240 70ea 	movw	r0, #2026	; 0x7ea
    25b0:	f3af 8000 	nop.w
    25b4:	e000      	b.n	25b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    25b6:	e00a      	b.n	25ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    25b8:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    25bc:	ea27 0000 	bic.w	r0, r7, r0
    25c0:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    25c4:	20ff      	movs	r0, #255	; 0xff
    25c6:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    25ca:	2001      	movs	r0, #1
    25cc:	9009      	str	r0, [sp, #36]	; 0x24
    25ce:	b124      	cbz	r4, 25da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    25d0:	2100      	movs	r1, #0
    25d2:	f240 70f3 	movw	r0, #2035	; 0x7f3
    25d6:	f3af 8000 	nop.w
    25da:	9806      	ldr	r0, [sp, #24]
    25dc:	4e1a      	ldr	r6, [pc, #104]	; (2648 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    25de:	2802      	cmp	r0, #2
    25e0:	d009      	beq.n	25f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    25e2:	2801      	cmp	r0, #1
    25e4:	d00f      	beq.n	2606 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    25e6:	e013      	b.n	2610 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    25e8:	b194      	cbz	r4, 2610 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    25ea:	2100      	movs	r1, #0
    25ec:	f240 70e5 	movw	r0, #2021	; 0x7e5
    25f0:	f3af 8000 	nop.w
    25f4:	e7ec      	b.n	25d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    25f6:	68a9      	ldr	r1, [r5, #8]
    25f8:	9808      	ldr	r0, [sp, #32]
    25fa:	1a08      	subs	r0, r1, r0
    25fc:	f00e fb00 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2600:	6871      	ldr	r1, [r6, #4]
    2602:	b921      	cbnz	r1, 260e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    2604:	e004      	b.n	2610 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2606:	6871      	ldr	r1, [r6, #4]
    2608:	f04f 30ff 	mov.w	r0, #4294967295
    260c:	b101      	cbz	r1, 2610 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    260e:	4788      	blx	r1
    2610:	9807      	ldr	r0, [sp, #28]
    2612:	b148      	cbz	r0, 2628 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    2614:	b124      	cbz	r4, 2620 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2616:	2100      	movs	r1, #0
    2618:	f640 0007 	movw	r0, #2055	; 0x807
    261c:	f3af 8000 	nop.w
    2620:	9809      	ldr	r0, [sp, #36]	; 0x24
    2622:	b00d      	add	sp, #52	; 0x34
    2624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2628:	4805      	ldr	r0, [pc, #20]	; (2640 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    262a:	2800      	cmp	r0, #0
    262c:	bf18      	it	ne
    262e:	f3af 8000 	nopne.w
    2632:	b662      	cpsie	i
    2634:	e7ee      	b.n	2614 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    2636:	0000      	.short	0x0000
    2638:	200012dc 	.word	0x200012dc
	...
    2648:	20000038 	.word	0x20000038

0000264c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    264c:	2820      	cmp	r0, #32
    264e:	bf24      	itt	cs
    2650:	2000      	movcs	r0, #0
    2652:	4770      	bxcs	lr
    2654:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2658:	4b03      	ldr	r3, [pc, #12]	; (2668 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    265a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    265e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2662:	6042      	str	r2, [r0, #4]
    2664:	2001      	movs	r0, #1
    2666:	4770      	bx	lr
    2668:	20000edc 	.word	0x20000edc

0000266c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    266c:	b510      	push	{r4, lr}
    266e:	2820      	cmp	r0, #32
    2670:	d211      	bcs.n	2696 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2672:	490e      	ldr	r1, [pc, #56]	; (26ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2674:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2678:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    267c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2680:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2684:	b13b      	cbz	r3, 2696 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2686:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    268a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    268e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2692:	2a01      	cmp	r2, #1
    2694:	d001      	beq.n	269a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2696:	2000      	movs	r0, #0
    2698:	bd10      	pop	{r4, pc}
    269a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    269e:	4601      	mov	r1, r0
    26a0:	2000      	movs	r0, #0
    26a2:	f7ff f83b 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    26a6:	2001      	movs	r0, #1
    26a8:	bd10      	pop	{r4, pc}
    26aa:	0000      	.short	0x0000
    26ac:	200012dc 	.word	0x200012dc

000026b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    26b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26b4:	4e86      	ldr	r6, [pc, #536]	; (28d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    26b6:	4680      	mov	r8, r0
    26b8:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    26bc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    26c0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    26c4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    26c8:	2800      	cmp	r0, #0
    26ca:	d071      	beq.n	27b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    26cc:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    26d0:	4d80      	ldr	r5, [pc, #512]	; (28d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    26d2:	b125      	cbz	r5, 26de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    26d4:	2100      	movs	r1, #0
    26d6:	f640 3076 	movw	r0, #2934	; 0xb76
    26da:	f3af 8000 	nop.w
    26de:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    26e2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    26e6:	2801      	cmp	r0, #1
    26e8:	d018      	beq.n	271c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    26ea:	b2c0      	uxtb	r0, r0
    26ec:	2804      	cmp	r0, #4
    26ee:	bf1c      	itt	ne
    26f0:	2805      	cmpne	r0, #5
    26f2:	2806      	cmpne	r0, #6
    26f4:	d061      	beq.n	27ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    26f6:	b12d      	cbz	r5, 2704 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    26f8:	f04f 0100 	mov.w	r1, #0
    26fc:	f640 3082 	movw	r0, #2946	; 0xb82
    2700:	f3af 8000 	nop.w
    2704:	f001 fd08 	bl	4118 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2708:	b125      	cbz	r5, 2714 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    270a:	2100      	movs	r1, #0
    270c:	f640 3086 	movw	r0, #2950	; 0xb86
    2710:	f3af 8000 	nop.w
    2714:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2718:	2801      	cmp	r0, #1
    271a:	d1e6      	bne.n	26ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    271c:	2401      	movs	r4, #1
    271e:	b125      	cbz	r5, 272a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2720:	2100      	movs	r1, #0
    2722:	f640 308d 	movw	r0, #2957	; 0xb8d
    2726:	f3af 8000 	nop.w
    272a:	2c00      	cmp	r4, #0
    272c:	d04b      	beq.n	27c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    272e:	2000      	movs	r0, #0
    2730:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2734:	b125      	cbz	r5, 2740 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2736:	2100      	movs	r1, #0
    2738:	f640 3092 	movw	r0, #2962	; 0xb92
    273c:	f3af 8000 	nop.w
    2740:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2744:	2001      	movs	r0, #1
    2746:	ea20 090b 	bic.w	r9, r0, fp
    274a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    274e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2752:	2240      	movs	r2, #64	; 0x40
    2754:	f00e fbb0 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2758:	b125      	cbz	r5, 2764 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    275a:	2100      	movs	r1, #0
    275c:	f240 502f 	movw	r0, #1327	; 0x52f
    2760:	f3af 8000 	nop.w
    2764:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2768:	eb00 0a06 	add.w	sl, r0, r6
    276c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2770:	4430      	add	r0, r6
    2772:	8c01      	ldrh	r1, [r0, #32]
    2774:	f8aa 1020 	strh.w	r1, [sl, #32]
    2778:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    277c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2780:	b125      	cbz	r5, 278c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2782:	2100      	movs	r1, #0
    2784:	f240 5033 	movw	r0, #1331	; 0x533
    2788:	f3af 8000 	nop.w
    278c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2790:	f88d 0000 	strb.w	r0, [sp]
    2794:	f89d 0000 	ldrb.w	r0, [sp]
    2798:	b1e0      	cbz	r0, 27d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    279a:	2d00      	cmp	r5, #0
    279c:	bf1c      	itt	ne
    279e:	2100      	movne	r1, #0
    27a0:	f640 3098 	movwne	r0, #2968	; 0xb98
    27a4:	d0bb      	beq.n	271e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    27a6:	bf00      	nop
    27a8:	f3af 8000 	nop.w
    27ac:	e7b7      	b.n	271e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    27ae:	e7ff      	b.n	27b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    27b0:	f640 316d 	movw	r1, #2925	; 0xb6d
    27b4:	2070      	movs	r0, #112	; 0x70
    27b6:	f001 fb85 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27ba:	464a      	mov	r2, r9
    27bc:	4641      	mov	r1, r8
    27be:	2001      	movs	r0, #1
    27c0:	f7fe ffac 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    27c4:	e7a0      	b.n	2708 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    27c6:	4844      	ldr	r0, [pc, #272]	; (28d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    27c8:	2800      	cmp	r0, #0
    27ca:	bf18      	it	ne
    27cc:	f3af 8000 	nopne.w
    27d0:	b662      	cpsie	i
    27d2:	e7ac      	b.n	272e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    27d4:	b125      	cbz	r5, 27e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    27d6:	2100      	movs	r1, #0
    27d8:	f640 309c 	movw	r0, #2972	; 0xb9c
    27dc:	f3af 8000 	nop.w
    27e0:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    27e4:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    27e8:	4640      	mov	r0, r8
    27ea:	461c      	mov	r4, r3
    27ec:	f04f 0b20 	mov.w	fp, #32
    27f0:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    27f4:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    27f8:	e004      	b.n	2804 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    27fa:	46a3      	mov	fp, r4
    27fc:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2800:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2804:	4284      	cmp	r4, r0
    2806:	d002      	beq.n	280e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2808:	2c20      	cmp	r4, #32
    280a:	d02b      	beq.n	2864 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    280c:	e7f5      	b.n	27fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    280e:	2c20      	cmp	r4, #32
    2810:	d028      	beq.n	2864 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2812:	42a3      	cmp	r3, r4
    2814:	d104      	bne.n	2820 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    2816:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    281a:	7840      	ldrb	r0, [r0, #1]
    281c:	7008      	strb	r0, [r1, #0]
    281e:	e005      	b.n	282c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2820:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2824:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2828:	7840      	ldrb	r0, [r0, #1]
    282a:	7048      	strb	r0, [r1, #1]
    282c:	f1ba 0f00 	cmp.w	sl, #0
    2830:	d011      	beq.n	2856 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2832:	b125      	cbz	r5, 283e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2834:	2100      	movs	r1, #0
    2836:	f240 4092 	movw	r0, #1170	; 0x492
    283a:	f3af 8000 	nop.w
    283e:	f89a 0000 	ldrb.w	r0, [sl]
    2842:	42a0      	cmp	r0, r4
    2844:	d107      	bne.n	2856 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2846:	b125      	cbz	r5, 2852 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2848:	2100      	movs	r1, #0
    284a:	f240 4095 	movw	r0, #1173	; 0x495
    284e:	f3af 8000 	nop.w
    2852:	f88a b000 	strb.w	fp, [sl]
    2856:	b15d      	cbz	r5, 2870 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2858:	2100      	movs	r1, #0
    285a:	f240 409a 	movw	r0, #1178	; 0x49a
    285e:	f3af 8000 	nop.w
    2862:	e000      	b.n	2866 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2864:	b125      	cbz	r5, 2870 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2866:	2100      	movs	r1, #0
    2868:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    286c:	f3af 8000 	nop.w
    2870:	481a      	ldr	r0, [pc, #104]	; (28dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2872:	2800      	cmp	r0, #0
    2874:	bf18      	it	ne
    2876:	f3af 8000 	nopne.w
    287a:	f3ef 8410 	mrs	r4, PRIMASK
    287e:	b672      	cpsid	i
    2880:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2884:	f88d 0000 	strb.w	r0, [sp]
    2888:	f89d 0000 	ldrb.w	r0, [sp]
    288c:	b138      	cbz	r0, 289e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    288e:	2d00      	cmp	r5, #0
    2890:	bf1c      	itt	ne
    2892:	2100      	movne	r1, #0
    2894:	f640 30a6 	movwne	r0, #2982	; 0xba6
    2898:	f43f af41 	beq.w	271e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    289c:	e784      	b.n	27a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    289e:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    28a2:	20ff      	movs	r0, #255	; 0xff
    28a4:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    28a8:	b154      	cbz	r4, 28c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    28aa:	2d00      	cmp	r5, #0
    28ac:	bf08      	it	eq
    28ae:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28b2:	2100      	movs	r1, #0
    28b4:	f640 30b3 	movw	r0, #2995	; 0xbb3
    28b8:	f3af 8000 	nop.w
    28bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28c0:	4805      	ldr	r0, [pc, #20]	; (28d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    28c2:	2800      	cmp	r0, #0
    28c4:	bf18      	it	ne
    28c6:	f3af 8000 	nopne.w
    28ca:	b662      	cpsie	i
    28cc:	e7ed      	b.n	28aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    28ce:	0000      	.short	0x0000
    28d0:	200012dc 	.word	0x200012dc
	...

000028e0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	460d      	mov	r5, r1
    28e4:	4606      	mov	r6, r0
    28e6:	f001 fa63 	bl	3db0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    28ea:	480f      	ldr	r0, [pc, #60]	; (2928 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    28ec:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    28f0:	2400      	movs	r4, #0
    28f2:	3880      	subs	r0, #128	; 0x80
    28f4:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    28f8:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    28fc:	b129      	cbz	r1, 290a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    28fe:	1c61      	adds	r1, r4, #1
    2900:	b2cc      	uxtb	r4, r1
    2902:	2c20      	cmp	r4, #32
    2904:	d3f8      	bcc.n	28f8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2906:	2020      	movs	r0, #32
    2908:	bd70      	pop	{r4, r5, r6, pc}
    290a:	4808      	ldr	r0, [pc, #32]	; (292c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    290c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2910:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2914:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2918:	4621      	mov	r1, r4
    291a:	6045      	str	r5, [r0, #4]
    291c:	2001      	movs	r0, #1
    291e:	f7fe fefd 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    2922:	4620      	mov	r0, r4
    2924:	bd70      	pop	{r4, r5, r6, pc}
    2926:	0000      	.short	0x0000
    2928:	200012dc 	.word	0x200012dc
    292c:	20000edc 	.word	0x20000edc

00002930 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2934:	f000 fb8e 	bl	3054 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2938:	4605      	mov	r5, r0
    293a:	f000 fe5d 	bl	35f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    293e:	4c60      	ldr	r4, [pc, #384]	; (2ac0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    2940:	6860      	ldr	r0, [r4, #4]
    2942:	f1b0 3fff 	cmp.w	r0, #4294967295
    2946:	bf1c      	itt	ne
    2948:	f04f 30ff 	movne.w	r0, #4294967295
    294c:	6060      	strne	r0, [r4, #4]
    294e:	7fa0      	ldrb	r0, [r4, #30]
    2950:	4f5c      	ldr	r7, [pc, #368]	; (2ac4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    2952:	b990      	cbnz	r0, 297a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    2954:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    2958:	1a40      	subs	r0, r0, r1
    295a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    295e:	f44f 710c 	mov.w	r1, #560	; 0x230
    2962:	f00e f97a 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2966:	68e1      	ldr	r1, [r4, #12]
    2968:	4408      	add	r0, r1
    296a:	1a28      	subs	r0, r5, r0
    296c:	0200      	lsls	r0, r0, #8
    296e:	17c1      	asrs	r1, r0, #31
    2970:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2974:	1200      	asrs	r0, r0, #8
    2976:	0fc0      	lsrs	r0, r0, #31
    2978:	d012      	beq.n	29a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    297a:	7e60      	ldrb	r0, [r4, #25]
    297c:	b320      	cbz	r0, 29c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    297e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2982:	f88d 0000 	strb.w	r0, [sp]
    2986:	f89d 0000 	ldrb.w	r0, [sp]
    298a:	b1e8      	cbz	r0, 29c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    298c:	f000 fc90 	bl	32b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2990:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2994:	b1f0      	cbz	r0, 29d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2996:	f240 31d5 	movw	r1, #981	; 0x3d5
    299a:	2070      	movs	r0, #112	; 0x70
    299c:	f001 fa92 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29a0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    29a4:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    29a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    29ac:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    29b0:	6840      	ldr	r0, [r0, #4]
    29b2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    29b6:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    29ba:	2108      	movs	r1, #8
    29bc:	4790      	blx	r2
    29be:	f240 31bd 	movw	r1, #957	; 0x3bd
    29c2:	2070      	movs	r0, #112	; 0x70
    29c4:	f001 fa7e 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29c8:	1ce8      	adds	r0, r5, #3
    29ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29ce:	f000 fb67 	bl	30a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    29d2:	e7dd      	b.n	2990 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    29d4:	2001      	movs	r0, #1
    29d6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    29da:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    29de:	2820      	cmp	r0, #32
    29e0:	d021      	beq.n	2a26 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    29e2:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    29e6:	2020      	movs	r0, #32
    29e8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    29ec:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    29f0:	2600      	movs	r6, #0
    29f2:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    29f6:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    29fa:	6026      	str	r6, [r4, #0]
    29fc:	f000 fef0 	bl	37e0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2a00:	7720      	strb	r0, [r4, #28]
    2a02:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    2a06:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    2a0a:	eb00 0a04 	add.w	sl, r0, r4
    2a0e:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2a12:	2820      	cmp	r0, #32
    2a14:	d012      	beq.n	2a3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    2a16:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a1a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2a1e:	7e81      	ldrb	r1, [r0, #26]
    2a20:	2901      	cmp	r1, #1
    2a22:	d005      	beq.n	2a30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    2a24:	e00a      	b.n	2a3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    2a26:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    2a2a:	2070      	movs	r0, #112	; 0x70
    2a2c:	f001 fa4a 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a30:	f100 0208 	add.w	r2, r0, #8
    2a34:	2101      	movs	r1, #1
    2a36:	4628      	mov	r0, r5
    2a38:	f7fe f9e8 	bl	e0c <__data_size+0x461>
    2a3c:	4642      	mov	r2, r8
    2a3e:	2101      	movs	r1, #1
    2a40:	4628      	mov	r0, r5
    2a42:	f7fe fe9d 	bl	1780 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f8>
    2a46:	0007      	movs	r7, r0
    2a48:	d0f8      	beq.n	2a3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    2a4a:	481f      	ldr	r0, [pc, #124]	; (2ac8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    2a4c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2a50:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    2a54:	2802      	cmp	r0, #2
    2a56:	d104      	bne.n	2a62 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    2a58:	4642      	mov	r2, r8
    2a5a:	4649      	mov	r1, r9
    2a5c:	2006      	movs	r0, #6
    2a5e:	f7fe fe5d 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    2a62:	20ff      	movs	r0, #255	; 0xff
    2a64:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2a68:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    2a6c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2acc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    2a70:	2820      	cmp	r0, #32
    2a72:	bf1c      	itt	ne
    2a74:	f898 0001 	ldrbne.w	r0, [r8, #1]
    2a78:	f001 faf8 	blne	406c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2a7c:	7f20      	ldrb	r0, [r4, #28]
    2a7e:	b118      	cbz	r0, 2a88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    2a80:	f000 fe8a 	bl	3798 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2a84:	7726      	strb	r6, [r4, #28]
    2a86:	7766      	strb	r6, [r4, #29]
    2a88:	2f02      	cmp	r7, #2
    2a8a:	d00f      	beq.n	2aac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    2a8c:	2f01      	cmp	r7, #1
    2a8e:	bf18      	it	ne
    2a90:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a94:	f04f 30ff 	mov.w	r0, #4294967295
    2a98:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2a9c:	2900      	cmp	r1, #0
    2a9e:	bf08      	it	eq
    2aa0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2aa4:	b001      	add	sp, #4
    2aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2aaa:	4708      	bx	r1
    2aac:	68a0      	ldr	r0, [r4, #8]
    2aae:	1b40      	subs	r0, r0, r5
    2ab0:	f00e f8a6 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2ab4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2ab8:	2900      	cmp	r1, #0
    2aba:	d1f3      	bne.n	2aa4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    2abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ac0:	200012dc 	.word	0x200012dc
    2ac4:	20000edc 	.word	0x20000edc
    2ac8:	2000125c 	.word	0x2000125c
    2acc:	20000038 	.word	0x20000038

00002ad0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2ad0:	b530      	push	{r4, r5, lr}
    2ad2:	4c36      	ldr	r4, [pc, #216]	; (2bac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2ad4:	4605      	mov	r5, r0
    2ad6:	b083      	sub	sp, #12
    2ad8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2adc:	2820      	cmp	r0, #32
    2ade:	d008      	beq.n	2af2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    2ae0:	6860      	ldr	r0, [r4, #4]
    2ae2:	f1b0 3fff 	cmp.w	r0, #4294967295
    2ae6:	d009      	beq.n	2afc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    2ae8:	f640 21a1 	movw	r1, #2721	; 0xaa1
    2aec:	2070      	movs	r0, #112	; 0x70
    2aee:	f001 f9e9 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2af2:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    2af6:	2070      	movs	r0, #112	; 0x70
    2af8:	f001 f9e4 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2afc:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2b00:	492b      	ldr	r1, [pc, #172]	; (2bb0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    2b02:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2b06:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2b0a:	3008      	adds	r0, #8
    2b0c:	f7fe fdcc 	bl	16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>
    2b10:	4601      	mov	r1, r0
    2b12:	4a28      	ldr	r2, [pc, #160]	; (2bb4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    2b14:	4428      	add	r0, r5
    2b16:	4291      	cmp	r1, r2
    2b18:	d904      	bls.n	2b24 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    2b1a:	f240 516f 	movw	r1, #1391	; 0x56f
    2b1e:	2070      	movs	r0, #112	; 0x70
    2b20:	f001 f9d0 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b24:	4924      	ldr	r1, [pc, #144]	; (2bb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    2b26:	428d      	cmp	r5, r1
    2b28:	dd04      	ble.n	2b34 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    2b2a:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2b2e:	2070      	movs	r0, #112	; 0x70
    2b30:	f001 f9c8 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b34:	4921      	ldr	r1, [pc, #132]	; (2bbc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    2b36:	428d      	cmp	r5, r1
    2b38:	da04      	bge.n	2b44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    2b3a:	f240 5171 	movw	r1, #1393	; 0x571
    2b3e:	2070      	movs	r0, #112	; 0x70
    2b40:	f001 f9c0 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b44:	491e      	ldr	r1, [pc, #120]	; (2bc0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    2b46:	4281      	cmp	r1, r0
    2b48:	bfdc      	itt	le
    2b4a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2b4e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2b52:	dd05      	ble.n	2b60 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2b54:	2800      	cmp	r0, #0
    2b56:	bfbc      	itt	lt
    2b58:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2b5c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2b60:	aa01      	add	r2, sp, #4
    2b62:	4669      	mov	r1, sp
    2b64:	f000 f90c 	bl	2d80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2b68:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2b6c:	280f      	cmp	r0, #15
    2b6e:	bf8c      	ite	hi
    2b70:	2001      	movhi	r0, #1
    2b72:	2000      	movls	r0, #0
    2b74:	9900      	ldr	r1, [sp, #0]
    2b76:	4408      	add	r0, r1
    2b78:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2b7c:	6061      	str	r1, [r4, #4]
    2b7e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2b82:	f88d 0000 	strb.w	r0, [sp]
    2b86:	f89d 0000 	ldrb.w	r0, [sp]
    2b8a:	2800      	cmp	r0, #0
    2b8c:	bf04      	itt	eq
    2b8e:	b003      	addeq	sp, #12
    2b90:	bd30      	popeq	{r4, r5, pc}
    2b92:	2005      	movs	r0, #5
    2b94:	f000 fc0a 	bl	33ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2b98:	2800      	cmp	r0, #0
    2b9a:	bf1c      	itt	ne
    2b9c:	b003      	addne	sp, #12
    2b9e:	bd30      	popne	{r4, r5, pc}
    2ba0:	f640 21a8 	movw	r1, #2728	; 0xaa8
    2ba4:	2070      	movs	r0, #112	; 0x70
    2ba6:	f001 f98d 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2baa:	0000      	.short	0x0000
    2bac:	200012dc 	.word	0x200012dc
    2bb0:	20000edc 	.word	0x20000edc
    2bb4:	1e847fff 	.word	0x1e847fff
    2bb8:	0f424000 	.word	0x0f424000
    2bbc:	f0bdc000 	.word	0xf0bdc000
    2bc0:	1e848000 	.word	0x1e848000

00002bc4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2bc4:	b570      	push	{r4, r5, r6, lr}
    2bc6:	4c1c      	ldr	r4, [pc, #112]	; (2c38 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    2bc8:	2120      	movs	r1, #32
    2bca:	f884 1020 	strb.w	r1, [r4, #32]
    2bce:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2bd2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2bd6:	2000      	movs	r0, #0
    2bd8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2bdc:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    2be0:	1e42      	subs	r2, r0, #1
    2be2:	e9c4 0200 	strd	r0, r2, [r4]
    2be6:	77a0      	strb	r0, [r4, #30]
    2be8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2bec:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2bf0:	7720      	strb	r0, [r4, #28]
    2bf2:	7760      	strb	r0, [r4, #29]
    2bf4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    2bf8:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2bfc:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2c00:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2c04:	2210      	movs	r2, #16
    2c06:	7088      	strb	r0, [r1, #2]
    2c08:	f801 0f04 	strb.w	r0, [r1, #4]!
    2c0c:	1e52      	subs	r2, r2, #1
    2c0e:	d1fa      	bne.n	2c06 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2c10:	f000 fdf0 	bl	37f4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    2c14:	4d09      	ldr	r5, [pc, #36]	; (2c3c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    2c16:	2601      	movs	r6, #1
    2c18:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2c1c:	20ff      	movs	r0, #255	; 0xff
    2c1e:	7028      	strb	r0, [r5, #0]
    2c20:	4807      	ldr	r0, [pc, #28]	; (2c40 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2c22:	f001 fa05 	bl	4030 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2c26:	7068      	strb	r0, [r5, #1]
    2c28:	f001 fa60 	bl	40ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2c2c:	60a8      	str	r0, [r5, #8]
    2c2e:	f000 fd6b 	bl	3708 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2c32:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    2c36:	bd70      	pop	{r4, r5, r6, pc}
    2c38:	200012dc 	.word	0x200012dc
    2c3c:	20000038 	.word	0x20000038
    2c40:	000015d1 	.word	0x000015d1

00002c44 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2c44:	b570      	push	{r4, r5, r6, lr}
    2c46:	4605      	mov	r5, r0
    2c48:	2001      	movs	r0, #1
    2c4a:	fa00 f405 	lsl.w	r4, r0, r5
    2c4e:	460e      	mov	r6, r1
    2c50:	2a00      	cmp	r2, #0
    2c52:	bf08      	it	eq
    2c54:	4808      	ldreq	r0, [pc, #32]	; (2c78 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2c56:	d00c      	beq.n	2c72 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2c58:	2000      	movs	r0, #0
    2c5a:	f000 fd3b 	bl	36d4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2c5e:	00e9      	lsls	r1, r5, #3
    2c60:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2c64:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2c68:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2c6c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2c70:	4802      	ldr	r0, [pc, #8]	; (2c7c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2c72:	6004      	str	r4, [r0, #0]
    2c74:	bd70      	pop	{r4, r5, r6, pc}
    2c76:	0000      	.short	0x0000
    2c78:	4001f508 	.word	0x4001f508
    2c7c:	4001f504 	.word	0x4001f504

00002c80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2c80:	b500      	push	{lr}
    2c82:	b083      	sub	sp, #12
    2c84:	4668      	mov	r0, sp
    2c86:	f000 f9eb 	bl	3060 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2c8a:	9800      	ldr	r0, [sp, #0]
    2c8c:	f00d ffb8 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c90:	9a01      	ldr	r2, [sp, #4]
    2c92:	4b03      	ldr	r3, [pc, #12]	; (2ca0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2c94:	2100      	movs	r1, #0
    2c96:	fbe2 0103 	umlal	r0, r1, r2, r3
    2c9a:	b003      	add	sp, #12
    2c9c:	bd00      	pop	{pc}
    2c9e:	0000      	.short	0x0000
    2ca0:	1e848000 	.word	0x1e848000

00002ca4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2ca4:	b570      	push	{r4, r5, r6, lr}
    2ca6:	4606      	mov	r6, r0
    2ca8:	b082      	sub	sp, #8
    2caa:	461d      	mov	r5, r3
    2cac:	4610      	mov	r0, r2
    2cae:	f00d ffa7 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2cb2:	4604      	mov	r4, r0
    2cb4:	4668      	mov	r0, sp
    2cb6:	f000 f9d3 	bl	3060 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2cba:	4920      	ldr	r1, [pc, #128]	; (2d3c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    2cbc:	9801      	ldr	r0, [sp, #4]
    2cbe:	fba0 0201 	umull	r0, r2, r0, r1
    2cc2:	1a30      	subs	r0, r6, r0
    2cc4:	bf44      	itt	mi
    2cc6:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    2cca:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    2cce:	d504      	bpl.n	2cda <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    2cd0:	f640 31c8 	movw	r1, #3016	; 0xbc8
    2cd4:	2070      	movs	r0, #112	; 0x70
    2cd6:	f001 f8f5 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cda:	4288      	cmp	r0, r1
    2cdc:	db04      	blt.n	2ce8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    2cde:	f640 31c9 	movw	r1, #3017	; 0xbc9
    2ce2:	2070      	movs	r0, #112	; 0x70
    2ce4:	f001 f8ee 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ce8:	4a15      	ldr	r2, [pc, #84]	; (2d40 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    2cea:	1a21      	subs	r1, r4, r0
    2cec:	2300      	movs	r3, #0
    2cee:	1a8a      	subs	r2, r1, r2
    2cf0:	f173 0200 	sbcs.w	r2, r3, #0
    2cf4:	d318      	bcc.n	2d28 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2cf6:	f8df c048 	ldr.w	ip, [pc, #72]	; 2d40 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    2cfa:	1b02      	subs	r2, r0, r4
    2cfc:	ebb2 0c0c 	subs.w	ip, r2, ip
    2d00:	f173 0300 	sbcs.w	r3, r3, #0
    2d04:	d310      	bcc.n	2d28 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2d06:	4b0f      	ldr	r3, [pc, #60]	; (2d44 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    2d08:	428b      	cmp	r3, r1
    2d0a:	bf3e      	ittt	cc
    2d0c:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2d10:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    2d14:	1901      	addcc	r1, r0, r4
    2d16:	d307      	bcc.n	2d28 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2d18:	4293      	cmp	r3, r2
    2d1a:	d20a      	bcs.n	2d32 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    2d1c:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    2d20:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    2d24:	4408      	add	r0, r1
    2d26:	4241      	negs	r1, r0
    2d28:	f101 000f 	add.w	r0, r1, #15
    2d2c:	b002      	add	sp, #8
    2d2e:	1a28      	subs	r0, r5, r0
    2d30:	bd70      	pop	{r4, r5, r6, pc}
    2d32:	f640 21c2 	movw	r1, #2754	; 0xac2
    2d36:	2070      	movs	r0, #112	; 0x70
    2d38:	f001 f8c4 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d3c:	1e848000 	.word	0x1e848000
    2d40:	0f424000 	.word	0x0f424000
    2d44:	1e847fff 	.word	0x1e847fff

00002d48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2d48:	0b41      	lsrs	r1, r0, #13
    2d4a:	f248 6237 	movw	r2, #34359	; 0x8637
    2d4e:	4351      	muls	r1, r2
    2d50:	0c0a      	lsrs	r2, r1, #16
    2d52:	4b09      	ldr	r3, [pc, #36]	; (2d78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2d54:	0251      	lsls	r1, r2, #9
    2d56:	fb02 0203 	mla	r2, r2, r3, r0
    2d5a:	4808      	ldr	r0, [pc, #32]	; (2d7c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2d5c:	4350      	muls	r0, r2
    2d5e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2d62:	306e      	adds	r0, #110	; 0x6e
    2d64:	0d40      	lsrs	r0, r0, #21
    2d66:	425b      	negs	r3, r3
    2d68:	fb10 f303 	smulbb	r3, r0, r3
    2d6c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2d70:	bf88      	it	hi
    2d72:	1c49      	addhi	r1, r1, #1
    2d74:	4408      	add	r0, r1
    2d76:	4770      	bx	lr
    2d78:	ffffc2f7 	.word	0xffffc2f7
    2d7c:	00010c6f 	.word	0x00010c6f

00002d80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2d80:	0b43      	lsrs	r3, r0, #13
    2d82:	f248 6c37 	movw	ip, #34359	; 0x8637
    2d86:	fb03 f30c 	mul.w	r3, r3, ip
    2d8a:	b430      	push	{r4, r5}
    2d8c:	0c1b      	lsrs	r3, r3, #16
    2d8e:	f8df c044 	ldr.w	ip, [pc, #68]	; 2dd4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2d92:	025c      	lsls	r4, r3, #9
    2d94:	fb03 030c 	mla	r3, r3, ip, r0
    2d98:	480f      	ldr	r0, [pc, #60]	; (2dd8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2d9a:	4358      	muls	r0, r3
    2d9c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2da0:	eb04 000c 	add.w	r0, r4, ip
    2da4:	f643 5409 	movw	r4, #15625	; 0x3d09
    2da8:	fb1c f404 	smulbb	r4, ip, r4
    2dac:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2db0:	f643 5508 	movw	r5, #15624	; 0x3d08
    2db4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2db8:	442c      	add	r4, r5
    2dba:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2dbe:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2dc2:	bf84      	itt	hi
    2dc4:	f04f 0c00 	movhi.w	ip, #0
    2dc8:	1c40      	addhi	r0, r0, #1
    2dca:	6008      	str	r0, [r1, #0]
    2dcc:	f882 c000 	strb.w	ip, [r2]
    2dd0:	bc30      	pop	{r4, r5}
    2dd2:	4770      	bx	lr
    2dd4:	ffffc2f7 	.word	0xffffc2f7
    2dd8:	00010c6f 	.word	0x00010c6f

00002ddc <MPSL_IRQ_RTC0_Handler>:
    2ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2de0:	4d3b      	ldr	r5, [pc, #236]	; (2ed0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2de2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2de6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2ed4 <MPSL_IRQ_RTC0_Handler+0xf8>
    2dea:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2dee:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2df2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2df6:	f04f 0400 	mov.w	r4, #0
    2dfa:	d019      	beq.n	2e30 <MPSL_IRQ_RTC0_Handler+0x54>
    2dfc:	4836      	ldr	r0, [pc, #216]	; (2ed8 <MPSL_IRQ_RTC0_Handler+0xfc>)
    2dfe:	6800      	ldr	r0, [r0, #0]
    2e00:	b1b0      	cbz	r0, 2e30 <MPSL_IRQ_RTC0_Handler+0x54>
    2e02:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2e06:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2e0a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    2e0e:	f8d8 1000 	ldr.w	r1, [r8]
    2e12:	1a40      	subs	r0, r0, r1
    2e14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e18:	2802      	cmp	r0, #2
    2e1a:	d302      	bcc.n	2e22 <MPSL_IRQ_RTC0_Handler+0x46>
    2e1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e20:	d906      	bls.n	2e30 <MPSL_IRQ_RTC0_Handler+0x54>
    2e22:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2e26:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2e2a:	2004      	movs	r0, #4
    2e2c:	f7fe fe60 	bl	1af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2e30:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2e34:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2e38:	d01a      	beq.n	2e70 <MPSL_IRQ_RTC0_Handler+0x94>
    2e3a:	4828      	ldr	r0, [pc, #160]	; (2edc <MPSL_IRQ_RTC0_Handler+0x100>)
    2e3c:	6800      	ldr	r0, [r0, #0]
    2e3e:	b1b8      	cbz	r0, 2e70 <MPSL_IRQ_RTC0_Handler+0x94>
    2e40:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2e44:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2e48:	4825      	ldr	r0, [pc, #148]	; (2ee0 <MPSL_IRQ_RTC0_Handler+0x104>)
    2e4a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2e4e:	f8d8 1000 	ldr.w	r1, [r8]
    2e52:	1a40      	subs	r0, r0, r1
    2e54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e58:	2802      	cmp	r0, #2
    2e5a:	d302      	bcc.n	2e62 <MPSL_IRQ_RTC0_Handler+0x86>
    2e5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e60:	d906      	bls.n	2e70 <MPSL_IRQ_RTC0_Handler+0x94>
    2e62:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2e66:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2e6a:	2005      	movs	r0, #5
    2e6c:	f7fe fe40 	bl	1af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2e70:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2e74:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2e78:	d01a      	beq.n	2eb0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2e7a:	481a      	ldr	r0, [pc, #104]	; (2ee4 <MPSL_IRQ_RTC0_Handler+0x108>)
    2e7c:	6800      	ldr	r0, [r0, #0]
    2e7e:	b1b8      	cbz	r0, 2eb0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2e80:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    2e84:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2e88:	4817      	ldr	r0, [pc, #92]	; (2ee8 <MPSL_IRQ_RTC0_Handler+0x10c>)
    2e8a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2e8e:	f8d8 1000 	ldr.w	r1, [r8]
    2e92:	1a40      	subs	r0, r0, r1
    2e94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e98:	2802      	cmp	r0, #2
    2e9a:	d302      	bcc.n	2ea2 <MPSL_IRQ_RTC0_Handler+0xc6>
    2e9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2ea0:	d906      	bls.n	2eb0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2ea2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2ea6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2eaa:	2006      	movs	r0, #6
    2eac:	f7fe fe20 	bl	1af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2eb0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2eb4:	2800      	cmp	r0, #0
    2eb6:	bf08      	it	eq
    2eb8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ebc:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    2ec0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2ec4:	4809      	ldr	r0, [pc, #36]	; (2eec <MPSL_IRQ_RTC0_Handler+0x110>)
    2ec6:	68c1      	ldr	r1, [r0, #12]
    2ec8:	1c49      	adds	r1, r1, #1
    2eca:	60c1      	str	r1, [r0, #12]
    2ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ed0:	4000b000 	.word	0x4000b000
    2ed4:	4000b504 	.word	0x4000b504
    2ed8:	4000b140 	.word	0x4000b140
    2edc:	4000b144 	.word	0x4000b144
    2ee0:	4000b004 	.word	0x4000b004
    2ee4:	4000b148 	.word	0x4000b148
    2ee8:	4000b008 	.word	0x4000b008
    2eec:	20000044 	.word	0x20000044

00002ef0 <MPSL_IRQ_TIMER0_Handler>:
    2ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ef4:	4d38      	ldr	r5, [pc, #224]	; (2fd8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2ef6:	7828      	ldrb	r0, [r5, #0]
    2ef8:	2804      	cmp	r0, #4
    2efa:	d068      	beq.n	2fce <MPSL_IRQ_TIMER0_Handler+0xde>
    2efc:	1ca8      	adds	r0, r5, #2
    2efe:	2201      	movs	r2, #1
    2f00:	7801      	ldrb	r1, [r0, #0]
    2f02:	b159      	cbz	r1, 2f1c <MPSL_IRQ_TIMER0_Handler+0x2c>
    2f04:	2901      	cmp	r1, #1
    2f06:	bf08      	it	eq
    2f08:	706a      	strbeq	r2, [r5, #1]
    2f0a:	d002      	beq.n	2f12 <MPSL_IRQ_TIMER0_Handler+0x22>
    2f0c:	7869      	ldrb	r1, [r5, #1]
    2f0e:	2900      	cmp	r1, #0
    2f10:	d058      	beq.n	2fc4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    2f12:	2102      	movs	r1, #2
    2f14:	7001      	strb	r1, [r0, #0]
    2f16:	7840      	ldrb	r0, [r0, #1]
    2f18:	f000 fafe 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f1c:	4c2f      	ldr	r4, [pc, #188]	; (2fdc <MPSL_IRQ_TIMER0_Handler+0xec>)
    2f1e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f22:	f04f 0800 	mov.w	r8, #0
    2f26:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2f2a:	f44f 7780 	mov.w	r7, #256	; 0x100
    2f2e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    2f32:	d00a      	beq.n	2f4a <MPSL_IRQ_TIMER0_Handler+0x5a>
    2f34:	482a      	ldr	r0, [pc, #168]	; (2fe0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2f36:	6800      	ldr	r0, [r0, #0]
    2f38:	b138      	cbz	r0, 2f4a <MPSL_IRQ_TIMER0_Handler+0x5a>
    2f3a:	2003      	movs	r0, #3
    2f3c:	f000 faec 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f40:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f44:	2003      	movs	r0, #3
    2f46:	f7fe fdd3 	bl	1af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f4a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f4e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2f52:	d00a      	beq.n	2f6a <MPSL_IRQ_TIMER0_Handler+0x7a>
    2f54:	4823      	ldr	r0, [pc, #140]	; (2fe4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2f56:	6800      	ldr	r0, [r0, #0]
    2f58:	b138      	cbz	r0, 2f6a <MPSL_IRQ_TIMER0_Handler+0x7a>
    2f5a:	2002      	movs	r0, #2
    2f5c:	f000 fadc 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f60:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f64:	2002      	movs	r0, #2
    2f66:	f7fe fdc3 	bl	1af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f6a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f6e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2f72:	d00a      	beq.n	2f8a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2f74:	481c      	ldr	r0, [pc, #112]	; (2fe8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    2f76:	6800      	ldr	r0, [r0, #0]
    2f78:	b138      	cbz	r0, 2f8a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2f7a:	2001      	movs	r0, #1
    2f7c:	f000 facc 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f80:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f84:	2001      	movs	r0, #1
    2f86:	f7fe fdb3 	bl	1af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f8a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f8e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2f92:	bf08      	it	eq
    2f94:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f98:	4814      	ldr	r0, [pc, #80]	; (2fec <MPSL_IRQ_TIMER0_Handler+0xfc>)
    2f9a:	6800      	ldr	r0, [r0, #0]
    2f9c:	2800      	cmp	r0, #0
    2f9e:	bf08      	it	eq
    2fa0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fa4:	2000      	movs	r0, #0
    2fa6:	f000 fab7 	bl	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2faa:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2fae:	2004      	movs	r0, #4
    2fb0:	7028      	strb	r0, [r5, #0]
    2fb2:	f8c5 8004 	str.w	r8, [r5, #4]
    2fb6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fbe:	2000      	movs	r0, #0
    2fc0:	f7fe bd96 	b.w	1af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fc4:	f240 419f 	movw	r1, #1183	; 0x49f
    2fc8:	206c      	movs	r0, #108	; 0x6c
    2fca:	f000 ff7b 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fd2:	2007      	movs	r0, #7
    2fd4:	f7fe bd8c 	b.w	1af0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fd8:	20000044 	.word	0x20000044
    2fdc:	40008000 	.word	0x40008000
    2fe0:	4000814c 	.word	0x4000814c
    2fe4:	40008148 	.word	0x40008148
    2fe8:	40008144 	.word	0x40008144
    2fec:	40008140 	.word	0x40008140
    2ff0:	2201      	movs	r2, #1
    2ff2:	0211      	lsls	r1, r2, #8
    2ff4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2ff8:	2000      	movs	r0, #0
    2ffa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2ffe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3002:	f3bf 8f4f 	dsb	sy
    3006:	f3bf 8f6f 	isb	sy
    300a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    300e:	490e      	ldr	r1, [pc, #56]	; (3048 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3010:	f841 2f04 	str.w	r2, [r1, #4]!
    3014:	1e43      	subs	r3, r0, #1
    3016:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    301a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    301e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3022:	4b0a      	ldr	r3, [pc, #40]	; (304c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3024:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3028:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    302c:	1d1b      	adds	r3, r3, #4
    302e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3032:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3036:	1d1b      	adds	r3, r3, #4
    3038:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    303c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3040:	60ca      	str	r2, [r1, #12]
    3042:	4903      	ldr	r1, [pc, #12]	; (3050 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3044:	7048      	strb	r0, [r1, #1]
    3046:	4770      	bx	lr
    3048:	40008000 	.word	0x40008000
    304c:	40008004 	.word	0x40008004
    3050:	20000044 	.word	0x20000044

00003054 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3054:	4801      	ldr	r0, [pc, #4]	; (305c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3056:	6800      	ldr	r0, [r0, #0]
    3058:	4770      	bx	lr
    305a:	0000      	.short	0x0000
    305c:	4000b504 	.word	0x4000b504

00003060 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    3060:	b430      	push	{r4, r5}
    3062:	f3ef 8c10 	mrs	ip, PRIMASK
    3066:	b672      	cpsid	i
    3068:	2500      	movs	r5, #0
    306a:	4b0b      	ldr	r3, [pc, #44]	; (3098 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    306c:	4a0b      	ldr	r2, [pc, #44]	; (309c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    306e:	bf00      	nop
    3070:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3074:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    3078:	b12c      	cbz	r4, 3086 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    307a:	68d1      	ldr	r1, [r2, #12]
    307c:	1c49      	adds	r1, r1, #1
    307e:	60d1      	str	r1, [r2, #12]
    3080:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    3084:	e7f4      	b.n	3070 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    3086:	68d2      	ldr	r2, [r2, #12]
    3088:	f1bc 0f00 	cmp.w	ip, #0
    308c:	d100      	bne.n	3090 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    308e:	b662      	cpsie	i
    3090:	e9c0 1200 	strd	r1, r2, [r0]
    3094:	bc30      	pop	{r4, r5}
    3096:	4770      	bx	lr
    3098:	4000b000 	.word	0x4000b000
    309c:	20000044 	.word	0x20000044

000030a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    30a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30a4:	4e46      	ldr	r6, [pc, #280]	; (31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    30a6:	4605      	mov	r5, r0
    30a8:	1eb7      	subs	r7, r6, #2
    30aa:	7833      	ldrb	r3, [r6, #0]
    30ac:	68b9      	ldr	r1, [r7, #8]
    30ae:	2b01      	cmp	r3, #1
    30b0:	bf04      	itt	eq
    30b2:	42a9      	cmpeq	r1, r5
    30b4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30b8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    30bc:	4a41      	ldr	r2, [pc, #260]	; (31c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    30be:	6010      	str	r0, [r2, #0]
    30c0:	4a42      	ldr	r2, [pc, #264]	; (31cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    30c2:	4841      	ldr	r0, [pc, #260]	; (31c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    30c4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    30c8:	f102 0c04 	add.w	ip, r2, #4
    30cc:	f04f 0400 	mov.w	r4, #0
    30d0:	2b00      	cmp	r3, #0
    30d2:	d062      	beq.n	319a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    30d4:	483e      	ldr	r0, [pc, #248]	; (31d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    30d6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    30da:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    30de:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    30e2:	bf00      	nop
    30e4:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    30e8:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    30ec:	f04f 0801 	mov.w	r8, #1
    30f0:	2800      	cmp	r0, #0
    30f2:	bf01      	itttt	eq
    30f4:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    30f8:	2800      	cmpeq	r0, #0
    30fa:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    30fe:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3102:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3106:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    310a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    310e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3112:	4830      	ldr	r0, [pc, #192]	; (31d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3114:	f8d0 c000 	ldr.w	ip, [r0]
    3118:	eba5 0c0c 	sub.w	ip, r5, ip
    311c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3120:	f1bc 0f02 	cmp.w	ip, #2
    3124:	d344      	bcc.n	31b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3126:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    312a:	d841      	bhi.n	31b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    312c:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3130:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3134:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3138:	b12b      	cbz	r3, 3146 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    313a:	6802      	ldr	r2, [r0, #0]
    313c:	1a8a      	subs	r2, r1, r2
    313e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3142:	2a02      	cmp	r2, #2
    3144:	d3f9      	bcc.n	313a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    3146:	f8c7 8004 	str.w	r8, [r7, #4]
    314a:	703c      	strb	r4, [r7, #0]
    314c:	f7ff ff50 	bl	2ff0 <MPSL_IRQ_TIMER0_Handler+0x100>
    3150:	4821      	ldr	r0, [pc, #132]	; (31d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3152:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3156:	f364 0101 	bfi	r1, r4, #0, #2
    315a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    315e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3162:	2102      	movs	r1, #2
    3164:	f361 0201 	bfi	r2, r1, #0, #2
    3168:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    316c:	2104      	movs	r1, #4
    316e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    3172:	f8c0 800c 	str.w	r8, [r0, #12]
    3176:	6879      	ldr	r1, [r7, #4]
    3178:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    317c:	1580      	asrs	r0, r0, #22
    317e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3182:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3186:	4915      	ldr	r1, [pc, #84]	; (31dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3188:	05c0      	lsls	r0, r0, #23
    318a:	6008      	str	r0, [r1, #0]
    318c:	2004      	movs	r0, #4
    318e:	60bd      	str	r5, [r7, #8]
    3190:	7070      	strb	r0, [r6, #1]
    3192:	f886 8000 	strb.w	r8, [r6]
    3196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    319a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    319e:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    31a2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    31a6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    31aa:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    31ae:	e799      	b.n	30e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    31b0:	2000      	movs	r0, #0
    31b2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    31b6:	f240 2193 	movw	r1, #659	; 0x293
    31ba:	206c      	movs	r0, #108	; 0x6c
    31bc:	f000 fe82 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31c0:	20000046 	.word	0x20000046
    31c4:	4001f508 	.word	0x4001f508
    31c8:	fffbfffd 	.word	0xfffbfffd
    31cc:	4000b000 	.word	0x4000b000
    31d0:	fffafffd 	.word	0xfffafffd
    31d4:	4000b504 	.word	0x4000b504
    31d8:	40008000 	.word	0x40008000
    31dc:	4001f504 	.word	0x4001f504

000031e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    31e0:	b570      	push	{r4, r5, r6, lr}
    31e2:	4c2a      	ldr	r4, [pc, #168]	; (328c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    31e4:	68a1      	ldr	r1, [r4, #8]
    31e6:	4281      	cmp	r1, r0
    31e8:	bf14      	ite	ne
    31ea:	2201      	movne	r2, #1
    31ec:	2200      	moveq	r2, #0
    31ee:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3290 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    31f2:	f89c 5000 	ldrb.w	r5, [ip]
    31f6:	2d02      	cmp	r5, #2
    31f8:	d002      	beq.n	3200 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    31fa:	2a00      	cmp	r2, #0
    31fc:	d034      	beq.n	3268 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    31fe:	e002      	b.n	3206 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3200:	2a00      	cmp	r2, #0
    3202:	bf08      	it	eq
    3204:	bd70      	popeq	{r4, r5, r6, pc}
    3206:	7862      	ldrb	r2, [r4, #1]
    3208:	b39a      	cbz	r2, 3272 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    320a:	4b22      	ldr	r3, [pc, #136]	; (3294 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    320c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3210:	601a      	str	r2, [r3, #0]
    3212:	4b21      	ldr	r3, [pc, #132]	; (3298 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3214:	1392      	asrs	r2, r2, #14
    3216:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    321a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    321e:	2200      	movs	r2, #0
    3220:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3224:	4a1d      	ldr	r2, [pc, #116]	; (329c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3226:	6816      	ldr	r6, [r2, #0]
    3228:	1b86      	subs	r6, r0, r6
    322a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    322e:	2e02      	cmp	r6, #2
    3230:	d324      	bcc.n	327c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3232:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3236:	d821      	bhi.n	327c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3238:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    323c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3240:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3244:	b12d      	cbz	r5, 3252 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3246:	6813      	ldr	r3, [r2, #0]
    3248:	1acb      	subs	r3, r1, r3
    324a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    324e:	2b02      	cmp	r3, #2
    3250:	d3f9      	bcc.n	3246 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3252:	4b13      	ldr	r3, [pc, #76]	; (32a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3254:	2102      	movs	r1, #2
    3256:	074a      	lsls	r2, r1, #29
    3258:	601a      	str	r2, [r3, #0]
    325a:	60a0      	str	r0, [r4, #8]
    325c:	2004      	movs	r0, #4
    325e:	f88c 0001 	strb.w	r0, [ip, #1]
    3262:	f88c 1000 	strb.w	r1, [ip]
    3266:	bd70      	pop	{r4, r5, r6, pc}
    3268:	f240 21a1 	movw	r1, #673	; 0x2a1
    326c:	206c      	movs	r0, #108	; 0x6c
    326e:	f000 fe29 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3272:	f240 21a5 	movw	r1, #677	; 0x2a5
    3276:	206c      	movs	r0, #108	; 0x6c
    3278:	f000 fe24 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    327c:	2000      	movs	r0, #0
    327e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3282:	f240 21b1 	movw	r1, #689	; 0x2b1
    3286:	206c      	movs	r0, #108	; 0x6c
    3288:	f000 fe1c 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    328c:	20000044 	.word	0x20000044
    3290:	20000046 	.word	0x20000046
    3294:	4001f508 	.word	0x4001f508
    3298:	4000b000 	.word	0x4000b000
    329c:	4000b504 	.word	0x4000b504
    32a0:	4001f504 	.word	0x4001f504

000032a4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    32a4:	4801      	ldr	r0, [pc, #4]	; (32ac <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    32a6:	6880      	ldr	r0, [r0, #8]
    32a8:	4770      	bx	lr
    32aa:	0000      	.short	0x0000
    32ac:	20000044 	.word	0x20000044

000032b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    32b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32b4:	4836      	ldr	r0, [pc, #216]	; (3390 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    32b6:	4a35      	ldr	r2, [pc, #212]	; (338c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    32b8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    32bc:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3394 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    32c0:	1d03      	adds	r3, r0, #4
    32c2:	2100      	movs	r1, #0
    32c4:	f89c 4000 	ldrb.w	r4, [ip]
    32c8:	b184      	cbz	r4, 32ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    32ca:	4a33      	ldr	r2, [pc, #204]	; (3398 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    32cc:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    32d0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    32d4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    32d8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    32dc:	2301      	movs	r3, #1
    32de:	2a00      	cmp	r2, #0
    32e0:	bf04      	itt	eq
    32e2:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    32e6:	2800      	cmpeq	r0, #0
    32e8:	d111      	bne.n	330e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    32ea:	e00a      	b.n	3302 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    32ec:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    32f0:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    32f4:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    32f8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    32fc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3300:	e7ea      	b.n	32d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3302:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3306:	f44f 6000 	mov.w	r0, #2048	; 0x800
    330a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    330e:	2c02      	cmp	r4, #2
    3310:	d004      	beq.n	331c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    3312:	f240 21bd 	movw	r1, #701	; 0x2bd
    3316:	206c      	movs	r0, #108	; 0x6c
    3318:	f000 fdd4 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    331c:	4e1f      	ldr	r6, [pc, #124]	; (339c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    331e:	6830      	ldr	r0, [r6, #0]
    3320:	4c1f      	ldr	r4, [pc, #124]	; (33a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3322:	1cc0      	adds	r0, r0, #3
    3324:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3328:	68a2      	ldr	r2, [r4, #8]
    332a:	4d1e      	ldr	r5, [pc, #120]	; (33a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    332c:	4290      	cmp	r0, r2
    332e:	d00b      	beq.n	3348 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3330:	6837      	ldr	r7, [r6, #0]
    3332:	1bd7      	subs	r7, r2, r7
    3334:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3338:	2f04      	cmp	r7, #4
    333a:	d305      	bcc.n	3348 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    333c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3340:	d802      	bhi.n	3348 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3342:	f7ff fead 	bl	30a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3346:	e01b      	b.n	3380 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3348:	6830      	ldr	r0, [r6, #0]
    334a:	1a10      	subs	r0, r2, r0
    334c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3350:	2802      	cmp	r0, #2
    3352:	d313      	bcc.n	337c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3354:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3358:	d810      	bhi.n	337c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    335a:	4a13      	ldr	r2, [pc, #76]	; (33a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    335c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3360:	6010      	str	r0, [r2, #0]
    3362:	6063      	str	r3, [r4, #4]
    3364:	7021      	strb	r1, [r4, #0]
    3366:	606b      	str	r3, [r5, #4]
    3368:	60eb      	str	r3, [r5, #12]
    336a:	0040      	lsls	r0, r0, #1
    336c:	1f11      	subs	r1, r2, #4
    336e:	6008      	str	r0, [r1, #0]
    3370:	2004      	movs	r0, #4
    3372:	f88c 0001 	strb.w	r0, [ip, #1]
    3376:	f88c 3000 	strb.w	r3, [ip]
    337a:	e001      	b.n	3380 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    337c:	6063      	str	r3, [r4, #4]
    337e:	7021      	strb	r1, [r4, #0]
    3380:	6860      	ldr	r0, [r4, #4]
    3382:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    338a:	0000      	.short	0x0000
    338c:	fffbfffd 	.word	0xfffbfffd
    3390:	4000b000 	.word	0x4000b000
    3394:	20000046 	.word	0x20000046
    3398:	fffafffd 	.word	0xfffafffd
    339c:	4000b504 	.word	0x4000b504
    33a0:	20000044 	.word	0x20000044
    33a4:	40008000 	.word	0x40008000
    33a8:	4001f508 	.word	0x4001f508

000033ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    33ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33b0:	4a54      	ldr	r2, [pc, #336]	; (3504 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    33b2:	2500      	movs	r5, #0
    33b4:	2401      	movs	r4, #1
    33b6:	f892 c000 	ldrb.w	ip, [r2]
    33ba:	7853      	ldrb	r3, [r2, #1]
    33bc:	f44f 76a0 	mov.w	r6, #320	; 0x140
    33c0:	2807      	cmp	r0, #7
    33c2:	d27d      	bcs.n	34c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    33c4:	e8df f000 	tbb	[pc, r0]
    33c8:	04040404 	.word	0x04040404
    33cc:	00585858 	.word	0x00585858
    33d0:	4a4d      	ldr	r2, [pc, #308]	; (3508 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    33d2:	6897      	ldr	r7, [r2, #8]
    33d4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    33d8:	bf04      	itt	eq
    33da:	7852      	ldrbeq	r2, [r2, #1]
    33dc:	2a00      	cmpeq	r2, #0
    33de:	d003      	beq.n	33e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    33e0:	f1bc 0f02 	cmp.w	ip, #2
    33e4:	d005      	beq.n	33f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    33e6:	e026      	b.n	3436 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    33e8:	f240 314d 	movw	r1, #845	; 0x34d
    33ec:	206c      	movs	r0, #108	; 0x6c
    33ee:	f000 fd69 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33f2:	1f1a      	subs	r2, r3, #4
    33f4:	b2d2      	uxtb	r2, r2
    33f6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    33fa:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    33fe:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3402:	2200      	movs	r2, #0
    3404:	f1bc 0f01 	cmp.w	ip, #1
    3408:	d003      	beq.n	3412 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    340a:	f1bc 0f02 	cmp.w	ip, #2
    340e:	d008      	beq.n	3422 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3410:	e00e      	b.n	3430 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3412:	2b04      	cmp	r3, #4
    3414:	bf24      	itt	cs
    3416:	6837      	ldrcs	r7, [r6, #0]
    3418:	2f00      	cmpcs	r7, #0
    341a:	bf08      	it	eq
    341c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3420:	e006      	b.n	3430 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3422:	2b04      	cmp	r3, #4
    3424:	bf24      	itt	cs
    3426:	6837      	ldrcs	r7, [r6, #0]
    3428:	2f00      	cmpcs	r7, #0
    342a:	bf08      	it	eq
    342c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3430:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3434:	d1e5      	bne.n	3402 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3436:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 350c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    343a:	f100 0210 	add.w	r2, r0, #16
    343e:	fa04 f202 	lsl.w	r2, r4, r2
    3442:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3446:	f04f 0340 	mov.w	r3, #64	; 0x40
    344a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    344e:	b2db      	uxtb	r3, r3
    3450:	4463      	add	r3, ip
    3452:	601c      	str	r4, [r3, #0]
    3454:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3458:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    345c:	eba1 0303 	sub.w	r3, r1, r3
    3460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3464:	2b03      	cmp	r3, #3
    3466:	bf26      	itte	cs
    3468:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    346c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3470:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3474:	d237      	bcs.n	34e6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    3476:	e03c      	b.n	34f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    3478:	f1bc 0f00 	cmp.w	ip, #0
    347c:	d006      	beq.n	348c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    347e:	4283      	cmp	r3, r0
    3480:	d104      	bne.n	348c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3482:	f240 316d 	movw	r1, #877	; 0x36d
    3486:	206c      	movs	r0, #108	; 0x6c
    3488:	f000 fd1c 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    348c:	1f02      	subs	r2, r0, #4
    348e:	b2d3      	uxtb	r3, r2
    3490:	2b03      	cmp	r3, #3
    3492:	d304      	bcc.n	349e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    3494:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    3498:	206c      	movs	r0, #108	; 0x6c
    349a:	f000 fd13 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    349e:	f8df c070 	ldr.w	ip, [pc, #112]	; 3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    34a2:	f103 0210 	add.w	r2, r3, #16
    34a6:	fa04 f202 	lsl.w	r2, r4, r2
    34aa:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    34ae:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    34b2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    34b6:	f84c 5003 	str.w	r5, [ip, r3]
    34ba:	4b16      	ldr	r3, [pc, #88]	; (3514 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    34bc:	681b      	ldr	r3, [r3, #0]
    34be:	e000      	b.n	34c2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    34c0:	e01a      	b.n	34f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    34c2:	1f00      	subs	r0, r0, #4
    34c4:	1acb      	subs	r3, r1, r3
    34c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    34ca:	b2c0      	uxtb	r0, r0
    34cc:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    34d0:	2b02      	cmp	r3, #2
    34d2:	d30b      	bcc.n	34ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    34d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    34d8:	d808      	bhi.n	34ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    34da:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    34de:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    34e2:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    34e6:	2001      	movs	r0, #1
    34e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34ec:	2100      	movs	r1, #0
    34ee:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    34f2:	2000      	movs	r0, #0
    34f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34f8:	f240 3171 	movw	r1, #881	; 0x371
    34fc:	206c      	movs	r0, #108	; 0x6c
    34fe:	f000 fce1 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3502:	0000      	.short	0x0000
    3504:	20000046 	.word	0x20000046
    3508:	20000044 	.word	0x20000044
    350c:	40008000 	.word	0x40008000
    3510:	4000b000 	.word	0x4000b000
    3514:	4000b504 	.word	0x4000b504

00003518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    351c:	2601      	movs	r6, #1
    351e:	2700      	movs	r7, #0
    3520:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3524:	2807      	cmp	r0, #7
    3526:	d251      	bcs.n	35cc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3528:	e8df f000 	tbb	[pc, r0]
    352c:	04040404 	.word	0x04040404
    3530:	00191919 	.word	0x00191919
    3534:	f100 0110 	add.w	r1, r0, #16
    3538:	fa06 f201 	lsl.w	r2, r6, r1
    353c:	4926      	ldr	r1, [pc, #152]	; (35d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    353e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3542:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3546:	2200      	movs	r2, #0
    3548:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    354c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3550:	508f      	str	r7, [r1, r2]
    3552:	4922      	ldr	r1, [pc, #136]	; (35dc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3554:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3558:	9000      	str	r0, [sp, #0]
    355a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    355e:	4d20      	ldr	r5, [pc, #128]	; (35e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3560:	1f01      	subs	r1, r0, #4
    3562:	b2cc      	uxtb	r4, r1
    3564:	7829      	ldrb	r1, [r5, #0]
    3566:	b179      	cbz	r1, 3588 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3568:	786a      	ldrb	r2, [r5, #1]
    356a:	4282      	cmp	r2, r0
    356c:	d10c      	bne.n	3588 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    356e:	4a1d      	ldr	r2, [pc, #116]	; (35e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3570:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3574:	6010      	str	r0, [r2, #0]
    3576:	2901      	cmp	r1, #1
    3578:	bf08      	it	eq
    357a:	f7ff fd39 	bleq	2ff0 <MPSL_IRQ_TIMER0_Handler+0x100>
    357e:	702f      	strb	r7, [r5, #0]
    3580:	4919      	ldr	r1, [pc, #100]	; (35e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3582:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3586:	6088      	str	r0, [r1, #8]
    3588:	4918      	ldr	r1, [pc, #96]	; (35ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    358a:	f104 0010 	add.w	r0, r4, #16
    358e:	fa06 f000 	lsl.w	r0, r6, r0
    3592:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3596:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    359a:	00a0      	lsls	r0, r4, #2
    359c:	4408      	add	r0, r1
    359e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    35a2:	4a13      	ldr	r2, [pc, #76]	; (35f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    35a4:	6812      	ldr	r2, [r2, #0]
    35a6:	1a80      	subs	r0, r0, r2
    35a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35ac:	2802      	cmp	r0, #2
    35ae:	d307      	bcc.n	35c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    35b0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    35b4:	2000      	movs	r0, #0
    35b6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    35ba:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    35be:	500f      	str	r7, [r1, r0]
    35c0:	480c      	ldr	r0, [pc, #48]	; (35f4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    35c2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    35c6:	9000      	str	r0, [sp, #0]
    35c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    35cc:	f240 31f5 	movw	r1, #1013	; 0x3f5
    35d0:	206c      	movs	r0, #108	; 0x6c
    35d2:	f000 fc77 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35d6:	0000      	.short	0x0000
    35d8:	40008000 	.word	0x40008000
    35dc:	40008140 	.word	0x40008140
    35e0:	20000046 	.word	0x20000046
    35e4:	4001f508 	.word	0x4001f508
    35e8:	20000044 	.word	0x20000044
    35ec:	4000b000 	.word	0x4000b000
    35f0:	4000b504 	.word	0x4000b504
    35f4:	4000b140 	.word	0x4000b140

000035f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    35f8:	4825      	ldr	r0, [pc, #148]	; (3690 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    35fa:	4a24      	ldr	r2, [pc, #144]	; (368c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    35fc:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3600:	4924      	ldr	r1, [pc, #144]	; (3694 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3602:	1d03      	adds	r3, r0, #4
    3604:	f891 c000 	ldrb.w	ip, [r1]
    3608:	2100      	movs	r1, #0
    360a:	f1bc 0f00 	cmp.w	ip, #0
    360e:	d010      	beq.n	3632 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3610:	4a21      	ldr	r2, [pc, #132]	; (3698 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3612:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3616:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    361a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    361e:	bf00      	nop
    3620:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3624:	2a00      	cmp	r2, #0
    3626:	bf04      	itt	eq
    3628:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    362c:	2800      	cmpeq	r0, #0
    362e:	d111      	bne.n	3654 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3630:	e00a      	b.n	3648 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3632:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3636:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    363a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    363e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3642:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3646:	e7eb      	b.n	3620 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3648:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    364c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3650:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3654:	4811      	ldr	r0, [pc, #68]	; (369c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3656:	f04f 32ff 	mov.w	r2, #4294967295
    365a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    365e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3662:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3666:	f100 0204 	add.w	r2, r0, #4
    366a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    366e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3672:	f102 0204 	add.w	r2, r2, #4
    3676:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    367a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    367e:	f102 0204 	add.w	r2, r2, #4
    3682:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3686:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    368a:	4770      	bx	lr
    368c:	fffbfffd 	.word	0xfffbfffd
    3690:	4000b000 	.word	0x4000b000
    3694:	20000046 	.word	0x20000046
    3698:	fffafffd 	.word	0xfffafffd
    369c:	40008000 	.word	0x40008000

000036a0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    36a0:	b510      	push	{r4, lr}
    36a2:	2807      	cmp	r0, #7
    36a4:	d20d      	bcs.n	36c2 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    36a6:	e8df f000 	tbb	[pc, r0]
    36aa:	0404      	.short	0x0404
    36ac:	06060404 	.word	0x06060404
    36b0:	0006      	.short	0x0006
    36b2:	4906      	ldr	r1, [pc, #24]	; (36cc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    36b4:	e002      	b.n	36bc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    36b6:	1f00      	subs	r0, r0, #4
    36b8:	4905      	ldr	r1, [pc, #20]	; (36d0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    36ba:	b2c0      	uxtb	r0, r0
    36bc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    36c0:	bd10      	pop	{r4, pc}
    36c2:	f240 3195 	movw	r1, #917	; 0x395
    36c6:	206c      	movs	r0, #108	; 0x6c
    36c8:	f000 fbfc 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36cc:	40008140 	.word	0x40008140
    36d0:	4000b140 	.word	0x4000b140

000036d4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    36d4:	b510      	push	{r4, lr}
    36d6:	2807      	cmp	r0, #7
    36d8:	d20d      	bcs.n	36f6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    36da:	e8df f000 	tbb	[pc, r0]
    36de:	0404      	.short	0x0404
    36e0:	06060404 	.word	0x06060404
    36e4:	0006      	.short	0x0006
    36e6:	4906      	ldr	r1, [pc, #24]	; (3700 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    36e8:	e002      	b.n	36f0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    36ea:	1f00      	subs	r0, r0, #4
    36ec:	4905      	ldr	r1, [pc, #20]	; (3704 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    36ee:	b2c0      	uxtb	r0, r0
    36f0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    36f4:	bd10      	pop	{r4, pc}
    36f6:	f240 3195 	movw	r1, #917	; 0x395
    36fa:	206c      	movs	r0, #108	; 0x6c
    36fc:	f000 fbe2 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3700:	40008140 	.word	0x40008140
    3704:	4000b140 	.word	0x4000b140

00003708 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3708:	b570      	push	{r4, r5, r6, lr}
    370a:	481f      	ldr	r0, [pc, #124]	; (3788 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    370c:	2400      	movs	r4, #0
    370e:	2104      	movs	r1, #4
    3710:	7004      	strb	r4, [r0, #0]
    3712:	1e80      	subs	r0, r0, #2
    3714:	7001      	strb	r1, [r0, #0]
    3716:	0589      	lsls	r1, r1, #22
    3718:	60c4      	str	r4, [r0, #12]
    371a:	6081      	str	r1, [r0, #8]
    371c:	f7ff fc68 	bl	2ff0 <MPSL_IRQ_TIMER0_Handler+0x100>
    3720:	2501      	movs	r5, #1
    3722:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3726:	02eb      	lsls	r3, r5, #11
    3728:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    372c:	f3bf 8f4f 	dsb	sy
    3730:	f3bf 8f6f 	isb	sy
    3734:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3738:	4814      	ldr	r0, [pc, #80]	; (378c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    373a:	6045      	str	r5, [r0, #4]
    373c:	6085      	str	r5, [r0, #8]
    373e:	4914      	ldr	r1, [pc, #80]	; (3790 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    3740:	680a      	ldr	r2, [r1, #0]
    3742:	2a00      	cmp	r2, #0
    3744:	d1fc      	bne.n	3740 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3746:	1e51      	subs	r1, r2, #1
    3748:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    374c:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3750:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3754:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3758:	490e      	ldr	r1, [pc, #56]	; (3794 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    375a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    375e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3762:	1d09      	adds	r1, r1, #4
    3764:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3768:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    376c:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    3770:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3774:	6005      	str	r5, [r0, #0]
    3776:	f44f 7182 	mov.w	r1, #260	; 0x104
    377a:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    377e:	2102      	movs	r1, #2
    3780:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3784:	bd70      	pop	{r4, r5, r6, pc}
    3786:	0000      	.short	0x0000
    3788:	20000046 	.word	0x20000046
    378c:	4000b000 	.word	0x4000b000
    3790:	4000b504 	.word	0x4000b504
    3794:	4000b004 	.word	0x4000b004

00003798 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3798:	4808      	ldr	r0, [pc, #32]	; (37bc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    379a:	f990 0000 	ldrsb.w	r0, [r0]
    379e:	2800      	cmp	r0, #0
    37a0:	bfb8      	it	lt
    37a2:	4770      	bxlt	lr
    37a4:	f000 011f 	and.w	r1, r0, #31
    37a8:	2201      	movs	r2, #1
    37aa:	fa02 f101 	lsl.w	r1, r2, r1
    37ae:	0940      	lsrs	r0, r0, #5
    37b0:	0080      	lsls	r0, r0, #2
    37b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    37b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    37ba:	4770      	bx	lr
    37bc:	200004c4 	.word	0x200004c4

000037c0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    37c0:	4803      	ldr	r0, [pc, #12]	; (37d0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    37c2:	7800      	ldrb	r0, [r0, #0]
    37c4:	2803      	cmp	r0, #3
    37c6:	bf0c      	ite	eq
    37c8:	2001      	moveq	r0, #1
    37ca:	2000      	movne	r0, #0
    37cc:	4770      	bx	lr
    37ce:	0000      	.short	0x0000
    37d0:	200004b0 	.word	0x200004b0

000037d4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    37d4:	4801      	ldr	r0, [pc, #4]	; (37dc <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    37d6:	8840      	ldrh	r0, [r0, #2]
    37d8:	4770      	bx	lr
    37da:	0000      	.short	0x0000
    37dc:	200004b0 	.word	0x200004b0

000037e0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    37e0:	4803      	ldr	r0, [pc, #12]	; (37f0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    37e2:	7800      	ldrb	r0, [r0, #0]
    37e4:	2802      	cmp	r0, #2
    37e6:	bf16      	itet	ne
    37e8:	2803      	cmpne	r0, #3
    37ea:	2001      	moveq	r0, #1
    37ec:	2000      	movne	r0, #0
    37ee:	4770      	bx	lr
    37f0:	200004b0 	.word	0x200004b0

000037f4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    37f4:	4802      	ldr	r0, [pc, #8]	; (3800 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    37f6:	2100      	movs	r1, #0
    37f8:	7001      	strb	r1, [r0, #0]
    37fa:	8041      	strh	r1, [r0, #2]
    37fc:	4770      	bx	lr
    37fe:	0000      	.short	0x0000
    3800:	200004b0 	.word	0x200004b0

00003804 <MPSL_IRQ_CLOCK_Handler>:
    3804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3808:	4c16      	ldr	r4, [pc, #88]	; (3864 <MPSL_IRQ_CLOCK_Handler+0x60>)
    380a:	7a60      	ldrb	r0, [r4, #9]
    380c:	2800      	cmp	r0, #0
    380e:	d027      	beq.n	3860 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3810:	f44f 7180 	mov.w	r1, #256	; 0x100
    3814:	058d      	lsls	r5, r1, #22
    3816:	4628      	mov	r0, r5
    3818:	f00d fa43 	bl	10ca2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    381c:	4680      	mov	r8, r0
    381e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3822:	4628      	mov	r0, r5
    3824:	f00d fa3d 	bl	10ca2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3828:	2600      	movs	r6, #0
    382a:	4607      	mov	r7, r0
    382c:	f1b8 0f00 	cmp.w	r8, #0
    3830:	d009      	beq.n	3846 <MPSL_IRQ_CLOCK_Handler+0x42>
    3832:	2001      	movs	r0, #1
    3834:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3838:	7920      	ldrb	r0, [r4, #4]
    383a:	b120      	cbz	r0, 3846 <MPSL_IRQ_CLOCK_Handler+0x42>
    383c:	7126      	strb	r6, [r4, #4]
    383e:	69e0      	ldr	r0, [r4, #28]
    3840:	b108      	cbz	r0, 3846 <MPSL_IRQ_CLOCK_Handler+0x42>
    3842:	4780      	blx	r0
    3844:	61e6      	str	r6, [r4, #28]
    3846:	b137      	cbz	r7, 3856 <MPSL_IRQ_CLOCK_Handler+0x52>
    3848:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    384c:	2002      	movs	r0, #2
    384e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3852:	f000 fa6b 	bl	3d2c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3856:	4640      	mov	r0, r8
    3858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    385c:	f000 b858 	b.w	3910 <MPSL_IRQ_CLOCK_Handler+0x10c>
    3860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3864:	20000054 	.word	0x20000054
    3868:	b510      	push	{r4, lr}
    386a:	f00d fac4 	bl	10df6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    386e:	b930      	cbnz	r0, 387e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3870:	f00d fae2 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3874:	b918      	cbnz	r0, 387e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3876:	f00d fb15 	bl	10ea4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    387a:	2800      	cmp	r0, #0
    387c:	d002      	beq.n	3884 <MPSL_IRQ_CLOCK_Handler+0x80>
    387e:	4902      	ldr	r1, [pc, #8]	; (3888 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3880:	2002      	movs	r0, #2
    3882:	6008      	str	r0, [r1, #0]
    3884:	bd10      	pop	{r4, pc}
    3886:	0000      	.short	0x0000
    3888:	40000c34 	.word	0x40000c34
    388c:	b570      	push	{r4, r5, r6, lr}
    388e:	f000 f991 	bl	3bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3892:	f000 fa9f 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3896:	4c09      	ldr	r4, [pc, #36]	; (38bc <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3898:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    389c:	b130      	cbz	r0, 38ac <MPSL_IRQ_CLOCK_Handler+0xa8>
    389e:	f7ff ffe3 	bl	3868 <MPSL_IRQ_CLOCK_Handler+0x64>
    38a2:	2001      	movs	r0, #1
    38a4:	6128      	str	r0, [r5, #16]
    38a6:	2004      	movs	r0, #4
    38a8:	72a0      	strb	r0, [r4, #10]
    38aa:	e004      	b.n	38b6 <MPSL_IRQ_CLOCK_Handler+0xb2>
    38ac:	2003      	movs	r0, #3
    38ae:	72a0      	strb	r0, [r4, #10]
    38b0:	2001      	movs	r0, #1
    38b2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    38b6:	2000      	movs	r0, #0
    38b8:	71e0      	strb	r0, [r4, #7]
    38ba:	bd70      	pop	{r4, r5, r6, pc}
    38bc:	20000054 	.word	0x20000054
    38c0:	b570      	push	{r4, r5, r6, lr}
    38c2:	4c12      	ldr	r4, [pc, #72]	; (390c <MPSL_IRQ_CLOCK_Handler+0x108>)
    38c4:	79a0      	ldrb	r0, [r4, #6]
    38c6:	b1e0      	cbz	r0, 3902 <MPSL_IRQ_CLOCK_Handler+0xfe>
    38c8:	79e1      	ldrb	r1, [r4, #7]
    38ca:	1e40      	subs	r0, r0, #1
    38cc:	4281      	cmp	r1, r0
    38ce:	da18      	bge.n	3902 <MPSL_IRQ_CLOCK_Handler+0xfe>
    38d0:	f000 fa80 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    38d4:	4605      	mov	r5, r0
    38d6:	f000 fb69 	bl	3fac <mpsl_temperature_get>
    38da:	79a1      	ldrb	r1, [r4, #6]
    38dc:	2901      	cmp	r1, #1
    38de:	d902      	bls.n	38e6 <MPSL_IRQ_CLOCK_Handler+0xe2>
    38e0:	79e1      	ldrb	r1, [r4, #7]
    38e2:	1c49      	adds	r1, r1, #1
    38e4:	71e1      	strb	r1, [r4, #7]
    38e6:	b10d      	cbz	r5, 38ec <MPSL_IRQ_CLOCK_Handler+0xe8>
    38e8:	6961      	ldr	r1, [r4, #20]
    38ea:	e000      	b.n	38ee <MPSL_IRQ_CLOCK_Handler+0xea>
    38ec:	6921      	ldr	r1, [r4, #16]
    38ee:	1a41      	subs	r1, r0, r1
    38f0:	2902      	cmp	r1, #2
    38f2:	da02      	bge.n	38fa <MPSL_IRQ_CLOCK_Handler+0xf6>
    38f4:	f111 0f02 	cmn.w	r1, #2
    38f8:	dc07      	bgt.n	390a <MPSL_IRQ_CLOCK_Handler+0x106>
    38fa:	b10d      	cbz	r5, 3900 <MPSL_IRQ_CLOCK_Handler+0xfc>
    38fc:	6160      	str	r0, [r4, #20]
    38fe:	e000      	b.n	3902 <MPSL_IRQ_CLOCK_Handler+0xfe>
    3900:	6120      	str	r0, [r4, #16]
    3902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3906:	f7ff bfc1 	b.w	388c <MPSL_IRQ_CLOCK_Handler+0x88>
    390a:	bd70      	pop	{r4, r5, r6, pc}
    390c:	20000054 	.word	0x20000054
    3910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3914:	4606      	mov	r6, r0
    3916:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    391a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    391e:	4628      	mov	r0, r5
    3920:	f00d f9bf 	bl	10ca2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3924:	4680      	mov	r8, r0
    3926:	f44f 7188 	mov.w	r1, #272	; 0x110
    392a:	4628      	mov	r0, r5
    392c:	f00d f9b9 	bl	10ca2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3930:	4c27      	ldr	r4, [pc, #156]	; (39d0 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3932:	4682      	mov	sl, r0
    3934:	7827      	ldrb	r7, [r4, #0]
    3936:	f104 0008 	add.w	r0, r4, #8
    393a:	f00d fa26 	bl	10d8a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    393e:	b110      	cbz	r0, 3946 <MPSL_IRQ_CLOCK_Handler+0x142>
    3940:	f240 11b9 	movw	r1, #441	; 0x1b9
    3944:	e016      	b.n	3974 <MPSL_IRQ_CLOCK_Handler+0x170>
    3946:	f04f 0901 	mov.w	r9, #1
    394a:	b146      	cbz	r6, 395e <MPSL_IRQ_CLOCK_Handler+0x15a>
    394c:	7aa0      	ldrb	r0, [r4, #10]
    394e:	2803      	cmp	r0, #3
    3950:	d105      	bne.n	395e <MPSL_IRQ_CLOCK_Handler+0x15a>
    3952:	2004      	movs	r0, #4
    3954:	72a0      	strb	r0, [r4, #10]
    3956:	f7ff ff87 	bl	3868 <MPSL_IRQ_CLOCK_Handler+0x64>
    395a:	f8c5 9010 	str.w	r9, [r5, #16]
    395e:	2600      	movs	r6, #0
    3960:	f1b8 0f00 	cmp.w	r8, #0
    3964:	d018      	beq.n	3998 <MPSL_IRQ_CLOCK_Handler+0x194>
    3966:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    396a:	7aa0      	ldrb	r0, [r4, #10]
    396c:	2804      	cmp	r0, #4
    396e:	d004      	beq.n	397a <MPSL_IRQ_CLOCK_Handler+0x176>
    3970:	f240 11cb 	movw	r1, #459	; 0x1cb
    3974:	206d      	movs	r0, #109	; 0x6d
    3976:	f000 faa5 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    397a:	f00d fa3c 	bl	10df6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    397e:	b928      	cbnz	r0, 398c <MPSL_IRQ_CLOCK_Handler+0x188>
    3980:	f00d fa5a 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3984:	b910      	cbnz	r0, 398c <MPSL_IRQ_CLOCK_Handler+0x188>
    3986:	f00d fa8d 	bl	10ea4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    398a:	b108      	cbz	r0, 3990 <MPSL_IRQ_CLOCK_Handler+0x18c>
    398c:	4811      	ldr	r0, [pc, #68]	; (39d4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    398e:	6006      	str	r6, [r0, #0]
    3990:	2002      	movs	r0, #2
    3992:	72a0      	strb	r0, [r4, #10]
    3994:	f000 f8f2 	bl	3b7c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3998:	f1ba 0f00 	cmp.w	sl, #0
    399c:	d008      	beq.n	39b0 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    399e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    39a2:	7aa0      	ldrb	r0, [r4, #10]
    39a4:	2802      	cmp	r0, #2
    39a6:	d101      	bne.n	39ac <MPSL_IRQ_CLOCK_Handler+0x1a8>
    39a8:	f7ff ff8a 	bl	38c0 <MPSL_IRQ_CLOCK_Handler+0xbc>
    39ac:	f8c5 9014 	str.w	r9, [r5, #20]
    39b0:	b13f      	cbz	r7, 39c2 <MPSL_IRQ_CLOCK_Handler+0x1be>
    39b2:	7026      	strb	r6, [r4, #0]
    39b4:	7aa0      	ldrb	r0, [r4, #10]
    39b6:	2802      	cmp	r0, #2
    39b8:	d101      	bne.n	39be <MPSL_IRQ_CLOCK_Handler+0x1ba>
    39ba:	f7ff ff67 	bl	388c <MPSL_IRQ_CLOCK_Handler+0x88>
    39be:	f000 f8dd 	bl	3b7c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    39c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39c6:	4802      	ldr	r0, [pc, #8]	; (39d0 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    39c8:	3008      	adds	r0, #8
    39ca:	f00d b9f5 	b.w	10db8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    39ce:	0000      	.short	0x0000
    39d0:	20000054 	.word	0x20000054
    39d4:	40000c34 	.word	0x40000c34
    39d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39dc:	4c5f      	ldr	r4, [pc, #380]	; (3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>)
    39de:	2700      	movs	r7, #0
    39e0:	4606      	mov	r6, r0
    39e2:	61a7      	str	r7, [r4, #24]
    39e4:	7842      	ldrb	r2, [r0, #1]
    39e6:	7881      	ldrb	r1, [r0, #2]
    39e8:	7800      	ldrb	r0, [r0, #0]
    39ea:	72e0      	strb	r0, [r4, #11]
    39ec:	7162      	strb	r2, [r4, #5]
    39ee:	71a1      	strb	r1, [r4, #6]
    39f0:	71e7      	strb	r7, [r4, #7]
    39f2:	f04f 0801 	mov.w	r8, #1
    39f6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    39fa:	2805      	cmp	r0, #5
    39fc:	d225      	bcs.n	3a4a <MPSL_IRQ_CLOCK_Handler+0x246>
    39fe:	e8df f000 	tbb	[pc, r0]
    3a02:	0310      	.short	0x0310
    3a04:	00222006 	.word	0x00222006
    3a08:	f8c4 8018 	str.w	r8, [r4, #24]
    3a0c:	e009      	b.n	3a22 <MPSL_IRQ_CLOCK_Handler+0x21e>
    3a0e:	f000 f8d1 	bl	3bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3a12:	2101      	movs	r1, #1
    3a14:	4628      	mov	r0, r5
    3a16:	f00d f949 	bl	10cac <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d0f9      	beq.n	3a12 <MPSL_IRQ_CLOCK_Handler+0x20e>
    3a1e:	2002      	movs	r0, #2
    3a20:	61a0      	str	r0, [r4, #24]
    3a22:	f00d f96f 	bl	10d04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3a26:	b1b0      	cbz	r0, 3a56 <MPSL_IRQ_CLOCK_Handler+0x252>
    3a28:	f000 f9ee 	bl	3e08 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3a2c:	7e21      	ldrb	r1, [r4, #24]
    3a2e:	f001 0103 	and.w	r1, r1, #3
    3a32:	4288      	cmp	r0, r1
    3a34:	d10f      	bne.n	3a56 <MPSL_IRQ_CLOCK_Handler+0x252>
    3a36:	79b0      	ldrb	r0, [r6, #6]
    3a38:	b150      	cbz	r0, 3a50 <MPSL_IRQ_CLOCK_Handler+0x24c>
    3a3a:	2002      	movs	r0, #2
    3a3c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3a40:	e070      	b.n	3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>
    3a42:	4847      	ldr	r0, [pc, #284]	; (3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>)
    3a44:	e7ec      	b.n	3a20 <MPSL_IRQ_CLOCK_Handler+0x21c>
    3a46:	4847      	ldr	r0, [pc, #284]	; (3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>)
    3a48:	e7ea      	b.n	3a20 <MPSL_IRQ_CLOCK_Handler+0x21c>
    3a4a:	f240 313a 	movw	r1, #826	; 0x33a
    3a4e:	e04d      	b.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3a50:	f000 f9ae 	bl	3db0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3a54:	e066      	b.n	3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>
    3a56:	f8c5 800c 	str.w	r8, [r5, #12]
    3a5a:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3a5e:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3a62:	69a0      	ldr	r0, [r4, #24]
    3a64:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3a68:	f00d f9b1 	bl	10dce <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3a6c:	b940      	cbnz	r0, 3a80 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3a6e:	f00d f9b8 	bl	10de2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a72:	b928      	cbnz	r0, 3a80 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3a74:	f00d f9cc 	bl	10e10 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a78:	b910      	cbnz	r0, 3a80 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3a7a:	f00d f9dd 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a7e:	b138      	cbz	r0, 3a90 <MPSL_IRQ_CLOCK_Handler+0x28c>
    3a80:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3a84:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    3a88:	4937      	ldr	r1, [pc, #220]	; (3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    3a8a:	f3c0 3042 	ubfx	r0, r0, #13, #3
    3a8e:	6008      	str	r0, [r1, #0]
    3a90:	f00d f99d 	bl	10dce <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3a94:	b940      	cbnz	r0, 3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3a96:	f00d f9a4 	bl	10de2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a9a:	b928      	cbnz	r0, 3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3a9c:	f00d f9b8 	bl	10e10 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3aa0:	b910      	cbnz	r0, 3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3aa2:	f00d f9c9 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3aa6:	b118      	cbz	r0, 3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    3aa8:	492f      	ldr	r1, [pc, #188]	; (3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    3aaa:	3110      	adds	r1, #16
    3aac:	f8c1 8000 	str.w	r8, [r1]
    3ab0:	f8c5 8008 	str.w	r8, [r5, #8]
    3ab4:	2002      	movs	r0, #2
    3ab6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3aba:	79b0      	ldrb	r0, [r6, #6]
    3abc:	bb90      	cbnz	r0, 3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>
    3abe:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3ac2:	f010 0f02 	tst.w	r0, #2
    3ac6:	d00f      	beq.n	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    3ac8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3acc:	f8d9 1000 	ldr.w	r1, [r9]
    3ad0:	43c9      	mvns	r1, r1
    3ad2:	f341 1100 	sbfx	r1, r1, #4, #1
    3ad6:	f101 0801 	add.w	r8, r1, #1
    3ada:	f8d9 1000 	ldr.w	r1, [r9]
    3ade:	f041 0110 	orr.w	r1, r1, #16
    3ae2:	f8c9 1000 	str.w	r1, [r9]
    3ae6:	e007      	b.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3ae8:	f240 21fb 	movw	r1, #763	; 0x2fb
    3aec:	206d      	movs	r0, #109	; 0x6d
    3aee:	f000 f9e9 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3af2:	bf00      	nop
    3af4:	f000 fb10 	bl	4118 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3af8:	4651      	mov	r1, sl
    3afa:	4628      	mov	r0, r5
    3afc:	f00d f8d1 	bl	10ca2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3b00:	2800      	cmp	r0, #0
    3b02:	d0f7      	beq.n	3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>
    3b04:	f000 f954 	bl	3db0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3b08:	f1b8 0f00 	cmp.w	r8, #0
    3b0c:	d105      	bne.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
    3b0e:	f8d9 1000 	ldr.w	r1, [r9]
    3b12:	f021 0110 	bic.w	r1, r1, #16
    3b16:	f8c9 1000 	str.w	r1, [r9]
    3b1a:	2002      	movs	r0, #2
    3b1c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3b20:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3b24:	79a0      	ldrb	r0, [r4, #6]
    3b26:	b170      	cbz	r0, 3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3b28:	7830      	ldrb	r0, [r6, #0]
    3b2a:	b960      	cbnz	r0, 3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3b2c:	f000 f952 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3b30:	4606      	mov	r6, r0
    3b32:	f000 fa3b 	bl	3fac <mpsl_temperature_get>
    3b36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3b3a:	b116      	cbz	r6, 3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b3c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3b40:	e001      	b.n	3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3b42:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3b46:	2101      	movs	r1, #1
    3b48:	4628      	mov	r0, r5
    3b4a:	f00d f8af 	bl	10cac <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3b4e:	b108      	cbz	r0, 3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b50:	f000 f93a 	bl	3dc8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3b54:	72a7      	strb	r7, [r4, #10]
    3b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b5a:	0000      	.short	0x0000
    3b5c:	20000054 	.word	0x20000054
    3b60:	00020001 	.word	0x00020001
    3b64:	00030001 	.word	0x00030001
    3b68:	4000053c 	.word	0x4000053c
    3b6c:	e000ed10 	.word	0xe000ed10

00003b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3b70:	4801      	ldr	r0, [pc, #4]	; (3b78 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3b72:	89c0      	ldrh	r0, [r0, #14]
    3b74:	4770      	bx	lr
    3b76:	0000      	.short	0x0000
    3b78:	20000054 	.word	0x20000054

00003b7c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3b7c:	b510      	push	{r4, lr}
    3b7e:	f3ef 8410 	mrs	r4, PRIMASK
    3b82:	b672      	cpsid	i
    3b84:	480a      	ldr	r0, [pc, #40]	; (3bb0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3b86:	7841      	ldrb	r1, [r0, #1]
    3b88:	b129      	cbz	r1, 3b96 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3b8a:	7841      	ldrb	r1, [r0, #1]
    3b8c:	1e49      	subs	r1, r1, #1
    3b8e:	7041      	strb	r1, [r0, #1]
    3b90:	7841      	ldrb	r1, [r0, #1]
    3b92:	b129      	cbz	r1, 3ba0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3b94:	e008      	b.n	3ba8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3b96:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3b9a:	206d      	movs	r0, #109	; 0x6d
    3b9c:	f000 f992 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ba0:	7880      	ldrb	r0, [r0, #2]
    3ba2:	b908      	cbnz	r0, 3ba8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3ba4:	f000 f924 	bl	3df0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3ba8:	2c00      	cmp	r4, #0
    3baa:	d100      	bne.n	3bae <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3bac:	b662      	cpsie	i
    3bae:	bd10      	pop	{r4, pc}
    3bb0:	20000054 	.word	0x20000054

00003bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3bb4:	b510      	push	{r4, lr}
    3bb6:	f3ef 8410 	mrs	r4, PRIMASK
    3bba:	b672      	cpsid	i
    3bbc:	4806      	ldr	r0, [pc, #24]	; (3bd8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3bbe:	7841      	ldrb	r1, [r0, #1]
    3bc0:	1c49      	adds	r1, r1, #1
    3bc2:	7041      	strb	r1, [r0, #1]
    3bc4:	7840      	ldrb	r0, [r0, #1]
    3bc6:	2801      	cmp	r0, #1
    3bc8:	d101      	bne.n	3bce <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3bca:	f00d f886 	bl	10cda <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3bce:	2c00      	cmp	r4, #0
    3bd0:	d100      	bne.n	3bd4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3bd2:	b662      	cpsie	i
    3bd4:	bd10      	pop	{r4, pc}
    3bd6:	0000      	.short	0x0000
    3bd8:	20000054 	.word	0x20000054

00003bdc <mpsl_clock_hfclk_release>:
    3bdc:	4805      	ldr	r0, [pc, #20]	; (3bf4 <mpsl_clock_hfclk_release+0x18>)
    3bde:	b510      	push	{r4, lr}
    3be0:	78c1      	ldrb	r1, [r0, #3]
    3be2:	b121      	cbz	r1, 3bee <mpsl_clock_hfclk_release+0x12>
    3be4:	2100      	movs	r1, #0
    3be6:	7101      	strb	r1, [r0, #4]
    3be8:	70c1      	strb	r1, [r0, #3]
    3bea:	f7ff ffc7 	bl	3b7c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3bee:	2000      	movs	r0, #0
    3bf0:	bd10      	pop	{r4, pc}
    3bf2:	0000      	.short	0x0000
    3bf4:	20000054 	.word	0x20000054

00003bf8 <mpsl_clock_hfclk_request>:
    3bf8:	b570      	push	{r4, r5, r6, lr}
    3bfa:	4c0c      	ldr	r4, [pc, #48]	; (3c2c <mpsl_clock_hfclk_request+0x34>)
    3bfc:	78e1      	ldrb	r1, [r4, #3]
    3bfe:	b961      	cbnz	r1, 3c1a <mpsl_clock_hfclk_request+0x22>
    3c00:	2501      	movs	r5, #1
    3c02:	70e5      	strb	r5, [r4, #3]
    3c04:	61e0      	str	r0, [r4, #28]
    3c06:	f7ff ffd5 	bl	3bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3c0a:	f000 f8e3 	bl	3dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3c0e:	b130      	cbz	r0, 3c1e <mpsl_clock_hfclk_request+0x26>
    3c10:	69e0      	ldr	r0, [r4, #28]
    3c12:	b110      	cbz	r0, 3c1a <mpsl_clock_hfclk_request+0x22>
    3c14:	4780      	blx	r0
    3c16:	2000      	movs	r0, #0
    3c18:	61e0      	str	r0, [r4, #28]
    3c1a:	2000      	movs	r0, #0
    3c1c:	bd70      	pop	{r4, r5, r6, pc}
    3c1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3c22:	7125      	strb	r5, [r4, #4]
    3c24:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3c28:	e7f7      	b.n	3c1a <mpsl_clock_hfclk_request+0x22>
    3c2a:	0000      	.short	0x0000
    3c2c:	20000054 	.word	0x20000054

00003c30 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c34:	0005      	movs	r5, r0
    3c36:	f06f 0015 	mvn.w	r0, #21
    3c3a:	d03f      	beq.n	3cbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c3c:	7829      	ldrb	r1, [r5, #0]
    3c3e:	2904      	cmp	r1, #4
    3c40:	d83c      	bhi.n	3cbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c42:	2900      	cmp	r1, #0
    3c44:	7869      	ldrb	r1, [r5, #1]
    3c46:	d03b      	beq.n	3cc0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3c48:	2900      	cmp	r1, #0
    3c4a:	d137      	bne.n	3cbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c4c:	78a9      	ldrb	r1, [r5, #2]
    3c4e:	2900      	cmp	r1, #0
    3c50:	d134      	bne.n	3cbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c52:	2000      	movs	r0, #0
    3c54:	f00c fff0 	bl	10c38 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1e>
    3c58:	2000      	movs	r0, #0
    3c5a:	f00c ffe0 	bl	10c1e <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
    3c5e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3c62:	f04f 31ff 	mov.w	r1, #4294967295
    3c66:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3c6a:	2600      	movs	r6, #0
    3c6c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3c70:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3c74:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3c78:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3c7c:	4c14      	ldr	r4, [pc, #80]	; (3cd0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3c7e:	7066      	strb	r6, [r4, #1]
    3c80:	88a8      	ldrh	r0, [r5, #4]
    3c82:	81a0      	strh	r0, [r4, #12]
    3c84:	f00d f820 	bl	10cc8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3c88:	2701      	movs	r7, #1
    3c8a:	b108      	cbz	r0, 3c90 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3c8c:	70e7      	strb	r7, [r4, #3]
    3c8e:	7067      	strb	r7, [r4, #1]
    3c90:	2101      	movs	r1, #1
    3c92:	4640      	mov	r0, r8
    3c94:	f00d f80a 	bl	10cac <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c98:	b108      	cbz	r0, 3c9e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3c9a:	f000 f895 	bl	3dc8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c9e:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3ca2:	81e0      	strh	r0, [r4, #14]
    3ca4:	4628      	mov	r0, r5
    3ca6:	f7ff fe97 	bl	39d8 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    3caa:	7267      	strb	r7, [r4, #9]
    3cac:	2000      	movs	r0, #0
    3cae:	f00c ffb6 	bl	10c1e <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
    3cb2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3cb6:	4630      	mov	r0, r6
    3cb8:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cc0:	2900      	cmp	r1, #0
    3cc2:	d0fb      	beq.n	3cbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3cc4:	2920      	cmp	r1, #32
    3cc6:	d8f9      	bhi.n	3cbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3cc8:	78a9      	ldrb	r1, [r5, #2]
    3cca:	2921      	cmp	r1, #33	; 0x21
    3ccc:	d9c1      	bls.n	3c52 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3cce:	e7f5      	b.n	3cbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3cd0:	20000054 	.word	0x20000054

00003cd4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3cd4:	4801      	ldr	r0, [pc, #4]	; (3cdc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3cd6:	8980      	ldrh	r0, [r0, #12]
    3cd8:	4770      	bx	lr
    3cda:	0000      	.short	0x0000
    3cdc:	20000054 	.word	0x20000054

00003ce0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3ce0:	b510      	push	{r4, lr}
    3ce2:	480d      	ldr	r0, [pc, #52]	; (3d18 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3ce4:	f00d f851 	bl	10d8a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3ce8:	490b      	ldr	r1, [pc, #44]	; (3d18 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3cea:	3908      	subs	r1, #8
    3cec:	b148      	cbz	r0, 3d02 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    3cee:	2001      	movs	r0, #1
    3cf0:	7008      	strb	r0, [r1, #0]
    3cf2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3cf6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cfe:	f7ff bf59 	b.w	3bb4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3d02:	7a88      	ldrb	r0, [r1, #10]
    3d04:	2802      	cmp	r0, #2
    3d06:	d101      	bne.n	3d0c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3d08:	f7ff fdc0 	bl	388c <MPSL_IRQ_CLOCK_Handler+0x88>
    3d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d10:	4801      	ldr	r0, [pc, #4]	; (3d18 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3d12:	f00d b851 	b.w	10db8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3d16:	0000      	.short	0x0000
    3d18:	2000005c 	.word	0x2000005c

00003d1c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3d1c:	4802      	ldr	r0, [pc, #8]	; (3d28 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3d1e:	7a80      	ldrb	r0, [r0, #10]
    3d20:	2800      	cmp	r0, #0
    3d22:	d000      	beq.n	3d26 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3d24:	2001      	movs	r0, #1
    3d26:	4770      	bx	lr
    3d28:	20000054 	.word	0x20000054

00003d2c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d2e:	4d1f      	ldr	r5, [pc, #124]	; (3dac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3d30:	7ae8      	ldrb	r0, [r5, #11]
    3d32:	2800      	cmp	r0, #0
    3d34:	d10f      	bne.n	3d56 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3d36:	7e28      	ldrb	r0, [r5, #24]
    3d38:	f000 0003 	and.w	r0, r0, #3
    3d3c:	f00c ffd2 	bl	10ce4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3d40:	2800      	cmp	r0, #0
    3d42:	d008      	beq.n	3d56 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3d44:	f3ef 8110 	mrs	r1, PRIMASK
    3d48:	b672      	cpsid	i
    3d4a:	f7ff ffe7 	bl	3d1c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3d4e:	b118      	cbz	r0, 3d58 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3d50:	2900      	cmp	r1, #0
    3d52:	d100      	bne.n	3d56 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3d54:	b662      	cpsie	i
    3d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d58:	2601      	movs	r6, #1
    3d5a:	72ae      	strb	r6, [r5, #10]
    3d5c:	b901      	cbnz	r1, 3d60 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3d5e:	b662      	cpsie	i
    3d60:	2018      	movs	r0, #24
    3d62:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3d66:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3d6a:	61a6      	str	r6, [r4, #24]
    3d6c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3d70:	f8ad 0000 	strh.w	r0, [sp]
    3d74:	f8bd 0000 	ldrh.w	r0, [sp]
    3d78:	1e41      	subs	r1, r0, #1
    3d7a:	f8ad 1000 	strh.w	r1, [sp]
    3d7e:	d2f9      	bcs.n	3d74 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3d80:	2700      	movs	r7, #0
    3d82:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3d86:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3d8a:	4808      	ldr	r0, [pc, #32]	; (3dac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3d8c:	3008      	adds	r0, #8
    3d8e:	f00d f80f 	bl	10db0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3d92:	702f      	strb	r7, [r5, #0]
    3d94:	f7ff fd7a 	bl	388c <MPSL_IRQ_CLOCK_Handler+0x88>
    3d98:	6166      	str	r6, [r4, #20]
    3d9a:	7968      	ldrb	r0, [r5, #5]
    3d9c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3da0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3da4:	2018      	movs	r0, #24
    3da6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dac:	20000054 	.word	0x20000054

00003db0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3db0:	b510      	push	{r4, lr}
    3db2:	4c04      	ldr	r4, [pc, #16]	; (3dc4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3db4:	7e20      	ldrb	r0, [r4, #24]
    3db6:	f000 0003 	and.w	r0, r0, #3
    3dba:	f00c ff93 	bl	10ce4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d0f8      	beq.n	3db4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3dc2:	bd10      	pop	{r4, pc}
    3dc4:	20000054 	.word	0x20000054

00003dc8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3dc8:	4901      	ldr	r1, [pc, #4]	; (3dd0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3dca:	2001      	movs	r0, #1
    3dcc:	7008      	strb	r0, [r1, #0]
    3dce:	4770      	bx	lr
    3dd0:	200004c5 	.word	0x200004c5

00003dd4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3dd4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3dd8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3ddc:	b918      	cbnz	r0, 3de6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3dde:	4803      	ldr	r0, [pc, #12]	; (3dec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3de0:	7800      	ldrb	r0, [r0, #0]
    3de2:	2800      	cmp	r0, #0
    3de4:	d000      	beq.n	3de8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3de6:	2001      	movs	r0, #1
    3de8:	4770      	bx	lr
    3dea:	0000      	.short	0x0000
    3dec:	200004c5 	.word	0x200004c5

00003df0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3df0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3df4:	2101      	movs	r1, #1
    3df6:	6041      	str	r1, [r0, #4]
    3df8:	2100      	movs	r1, #0
    3dfa:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3dfe:	4801      	ldr	r0, [pc, #4]	; (3e04 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3e00:	7001      	strb	r1, [r0, #0]
    3e02:	4770      	bx	lr
    3e04:	200004c5 	.word	0x200004c5

00003e08 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3e08:	4802      	ldr	r0, [pc, #8]	; (3e14 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3e0a:	6800      	ldr	r0, [r0, #0]
    3e0c:	f000 0003 	and.w	r0, r0, #3
    3e10:	4770      	bx	lr
    3e12:	0000      	.short	0x0000
    3e14:	4000041c 	.word	0x4000041c
    3e18:	b510      	push	{r4, lr}
    3e1a:	b131      	cbz	r1, 3e2a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3e1c:	2901      	cmp	r1, #1
    3e1e:	d007      	beq.n	3e30 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3e20:	f240 3102 	movw	r1, #770	; 0x302
    3e24:	a005      	add	r0, pc, #20	; (adr r0, 3e3c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3e26:	f000 f821 	bl	3e6c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3e2a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3e2e:	e001      	b.n	3e34 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3e30:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3e34:	f000 0001 	and.w	r0, r0, #1
    3e38:	bd10      	pop	{r4, pc}
    3e3a:	0000      	.short	0x0000
    3e3c:	5f66726e 	.word	0x5f66726e
    3e40:	636f6c63 	.word	0x636f6c63
    3e44:	00682e6b 	.word	0x00682e6b
    3e48:	f3bf 8f4f 	dsb	sy
    3e4c:	4805      	ldr	r0, [pc, #20]	; (3e64 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3e4e:	6801      	ldr	r1, [r0, #0]
    3e50:	4a05      	ldr	r2, [pc, #20]	; (3e68 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3e52:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3e56:	4311      	orrs	r1, r2
    3e58:	6001      	str	r1, [r0, #0]
    3e5a:	f3bf 8f4f 	dsb	sy
    3e5e:	bf00      	nop
    3e60:	e7fd      	b.n	3e5e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3e62:	0000      	.short	0x0000
    3e64:	e000ed0c 	.word	0xe000ed0c
    3e68:	05fa0004 	.word	0x05fa0004

00003e6c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3e6c:	b672      	cpsid	i
    3e6e:	4a03      	ldr	r2, [pc, #12]	; (3e7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3e70:	6852      	ldr	r2, [r2, #4]
    3e72:	b102      	cbz	r2, 3e76 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3e74:	4790      	blx	r2
    3e76:	f7ff ffe7 	bl	3e48 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3e7a:	0000      	.short	0x0000
    3e7c:	20000074 	.word	0x20000074
    3e80:	4806      	ldr	r0, [pc, #24]	; (3e9c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3e82:	b510      	push	{r4, lr}
    3e84:	2100      	movs	r1, #0
    3e86:	6001      	str	r1, [r0, #0]
    3e88:	2101      	movs	r1, #1
    3e8a:	6001      	str	r1, [r0, #0]
    3e8c:	4608      	mov	r0, r1
    3e8e:	f00c ff50 	bl	10d32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e96:	2001      	movs	r0, #1
    3e98:	f00c bf3e 	b.w	10d18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3e9c:	40001ffc 	.word	0x40001ffc
    3ea0:	4807      	ldr	r0, [pc, #28]	; (3ec0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3ea2:	b510      	push	{r4, lr}
    3ea4:	2101      	movs	r1, #1
    3ea6:	6041      	str	r1, [r0, #4]
    3ea8:	1e89      	subs	r1, r1, #2
    3eaa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3eae:	200c      	movs	r0, #12
    3eb0:	f00c ff3f 	bl	10d32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3eb8:	200c      	movs	r0, #12
    3eba:	f00c bf2d 	b.w	10d18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3ebe:	0000      	.short	0x0000
    3ec0:	4000c000 	.word	0x4000c000

00003ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3ec4:	b50e      	push	{r1, r2, r3, lr}
    3ec6:	b672      	cpsid	i
    3ec8:	4a0f      	ldr	r2, [pc, #60]	; (3f08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3eca:	6855      	ldr	r5, [r2, #4]
    3ecc:	b1d5      	cbz	r5, 3f04 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3ece:	2200      	movs	r2, #0
    3ed0:	4603      	mov	r3, r0
    3ed2:	466e      	mov	r6, sp
    3ed4:	240a      	movs	r4, #10
    3ed6:	e003      	b.n	3ee0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3ed8:	fbb0 f0f4 	udiv	r0, r0, r4
    3edc:	1c52      	adds	r2, r2, #1
    3ede:	b2d2      	uxtb	r2, r2
    3ee0:	2800      	cmp	r0, #0
    3ee2:	d1f9      	bne.n	3ed8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3ee4:	54b0      	strb	r0, [r6, r2]
    3ee6:	e009      	b.n	3efc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3ee8:	fbb3 f0f4 	udiv	r0, r3, r4
    3eec:	fb04 3010 	mls	r0, r4, r0, r3
    3ef0:	fbb3 f3f4 	udiv	r3, r3, r4
    3ef4:	1e52      	subs	r2, r2, #1
    3ef6:	b2d2      	uxtb	r2, r2
    3ef8:	3030      	adds	r0, #48	; 0x30
    3efa:	54b0      	strb	r0, [r6, r2]
    3efc:	2a00      	cmp	r2, #0
    3efe:	d1f3      	bne.n	3ee8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3f00:	4630      	mov	r0, r6
    3f02:	47a8      	blx	r5
    3f04:	f7ff ffa0 	bl	3e48 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3f08:	20000074 	.word	0x20000074

00003f0c <mpsl_init>:
    3f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f10:	4c18      	ldr	r4, [pc, #96]	; (3f74 <mpsl_init+0x68>)
    3f12:	4606      	mov	r6, r0
    3f14:	4617      	mov	r7, r2
    3f16:	7860      	ldrb	r0, [r4, #1]
    3f18:	460d      	mov	r5, r1
    3f1a:	b118      	cbz	r0, 3f24 <mpsl_init+0x18>
    3f1c:	f04f 30ff 	mov.w	r0, #4294967295
    3f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f24:	f7fc fc4e 	bl	7c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    3f28:	b906      	cbnz	r6, 3f2c <mpsl_init+0x20>
    3f2a:	4e13      	ldr	r6, [pc, #76]	; (3f78 <mpsl_init+0x6c>)
    3f2c:	6067      	str	r7, [r4, #4]
    3f2e:	7025      	strb	r5, [r4, #0]
    3f30:	f7ff ffa6 	bl	3e80 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3f34:	f7ff ffb4 	bl	3ea0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    3f38:	4630      	mov	r0, r6
    3f3a:	f7ff fe79 	bl	3c30 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3f3e:	0006      	movs	r6, r0
    3f40:	d1ee      	bne.n	3f20 <mpsl_init+0x14>
    3f42:	f7fe fe3f 	bl	2bc4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3f46:	f7ff fef1 	bl	3d2c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3f4a:	f00c fe33 	bl	10bb4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3f4e:	4628      	mov	r0, r5
    3f50:	f00c fee2 	bl	10d18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f54:	2001      	movs	r0, #1
    3f56:	2d00      	cmp	r5, #0
    3f58:	db09      	blt.n	3f6e <mpsl_init+0x62>
    3f5a:	f005 011f 	and.w	r1, r5, #31
    3f5e:	fa00 f101 	lsl.w	r1, r0, r1
    3f62:	096a      	lsrs	r2, r5, #5
    3f64:	0092      	lsls	r2, r2, #2
    3f66:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3f6a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3f6e:	7060      	strb	r0, [r4, #1]
    3f70:	4630      	mov	r0, r6
    3f72:	e7d5      	b.n	3f20 <mpsl_init+0x14>
    3f74:	20000074 	.word	0x20000074
    3f78:	00010d54 	.word	0x00010d54

00003f7c <mpsl_is_initialized>:
    3f7c:	4801      	ldr	r0, [pc, #4]	; (3f84 <mpsl_is_initialized+0x8>)
    3f7e:	7840      	ldrb	r0, [r0, #1]
    3f80:	4770      	bx	lr
    3f82:	0000      	.short	0x0000
    3f84:	20000074 	.word	0x20000074

00003f88 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3f88:	4807      	ldr	r0, [pc, #28]	; (3fa8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3f8a:	f990 0000 	ldrsb.w	r0, [r0]
    3f8e:	2800      	cmp	r0, #0
    3f90:	db09      	blt.n	3fa6 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3f92:	f000 021f 	and.w	r2, r0, #31
    3f96:	2101      	movs	r1, #1
    3f98:	4091      	lsls	r1, r2
    3f9a:	0940      	lsrs	r0, r0, #5
    3f9c:	0080      	lsls	r0, r0, #2
    3f9e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3fa2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3fa6:	4770      	bx	lr
    3fa8:	20000074 	.word	0x20000074

00003fac <mpsl_temperature_get>:
    3fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fb0:	2601      	movs	r6, #1
    3fb2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3fb6:	0331      	lsls	r1, r6, #12
    3fb8:	f04f 0800 	mov.w	r8, #0
    3fbc:	4640      	mov	r0, r8
    3fbe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3fc2:	f3bf 8f4f 	dsb	sy
    3fc6:	f3bf 8f6f 	isb	sy
    3fca:	4c16      	ldr	r4, [pc, #88]	; (4024 <mpsl_temperature_get+0x78>)
    3fcc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3fd0:	200c      	movs	r0, #12
    3fd2:	f00c fecd 	bl	10d70 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3fd6:	4d14      	ldr	r5, [pc, #80]	; (4028 <mpsl_temperature_get+0x7c>)
    3fd8:	6828      	ldr	r0, [r5, #0]
    3fda:	43c0      	mvns	r0, r0
    3fdc:	f340 1700 	sbfx	r7, r0, #4, #1
    3fe0:	6828      	ldr	r0, [r5, #0]
    3fe2:	f040 0010 	orr.w	r0, r0, #16
    3fe6:	6028      	str	r0, [r5, #0]
    3fe8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3fec:	6026      	str	r6, [r4, #0]
    3fee:	1c7f      	adds	r7, r7, #1
    3ff0:	e002      	b.n	3ff8 <mpsl_temperature_get+0x4c>
    3ff2:	bf00      	nop
    3ff4:	f000 f890 	bl	4118 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3ff8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3ffc:	2800      	cmp	r0, #0
    3ffe:	d0f9      	beq.n	3ff4 <mpsl_temperature_get+0x48>
    4000:	b91f      	cbnz	r7, 400a <mpsl_temperature_get+0x5e>
    4002:	6828      	ldr	r0, [r5, #0]
    4004:	f020 0010 	bic.w	r0, r0, #16
    4008:	6028      	str	r0, [r5, #0]
    400a:	4808      	ldr	r0, [pc, #32]	; (402c <mpsl_temperature_get+0x80>)
    400c:	6805      	ldr	r5, [r0, #0]
    400e:	6066      	str	r6, [r4, #4]
    4010:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4014:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4018:	200c      	movs	r0, #12
    401a:	f00c fea9 	bl	10d70 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    401e:	4628      	mov	r0, r5
    4020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4024:	4000c000 	.word	0x4000c000
    4028:	e000ed10 	.word	0xe000ed10
    402c:	4000c508 	.word	0x4000c508

00004030 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4030:	b510      	push	{r4, lr}
    4032:	4602      	mov	r2, r0
    4034:	2005      	movs	r0, #5
    4036:	490c      	ldr	r1, [pc, #48]	; (4068 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4038:	e004      	b.n	4044 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    403a:	bf00      	nop
    403c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4040:	791b      	ldrb	r3, [r3, #4]
    4042:	b133      	cbz	r3, 4052 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4044:	1e40      	subs	r0, r0, #1
    4046:	b2c0      	uxtb	r0, r0
    4048:	d2f8      	bcs.n	403c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    404a:	2148      	movs	r1, #72	; 0x48
    404c:	2069      	movs	r0, #105	; 0x69
    404e:	f7ff ff39 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4052:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4056:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    405a:	2200      	movs	r2, #0
    405c:	714a      	strb	r2, [r1, #5]
    405e:	718a      	strb	r2, [r1, #6]
    4060:	2201      	movs	r2, #1
    4062:	710a      	strb	r2, [r1, #4]
    4064:	bd10      	pop	{r4, pc}
    4066:	0000      	.short	0x0000
    4068:	2000130c 	.word	0x2000130c

0000406c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    406c:	b510      	push	{r4, lr}
    406e:	2805      	cmp	r0, #5
    4070:	d301      	bcc.n	4076 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4072:	2158      	movs	r1, #88	; 0x58
    4074:	e006      	b.n	4084 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4076:	490a      	ldr	r1, [pc, #40]	; (40a0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4078:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    407c:	7901      	ldrb	r1, [r0, #4]
    407e:	2901      	cmp	r1, #1
    4080:	d003      	beq.n	408a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4082:	2159      	movs	r1, #89	; 0x59
    4084:	2069      	movs	r0, #105	; 0x69
    4086:	f7ff ff1d 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    408a:	7941      	ldrb	r1, [r0, #5]
    408c:	7982      	ldrb	r2, [r0, #6]
    408e:	1c49      	adds	r1, r1, #1
    4090:	b2c9      	uxtb	r1, r1
    4092:	428a      	cmp	r2, r1
    4094:	d000      	beq.n	4098 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4096:	7141      	strb	r1, [r0, #5]
    4098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    409c:	f7ff bf74 	b.w	3f88 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    40a0:	2000130c 	.word	0x2000130c

000040a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    40a4:	b570      	push	{r4, r5, r6, lr}
    40a6:	2505      	movs	r5, #5
    40a8:	4e0e      	ldr	r6, [pc, #56]	; (40e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    40aa:	4c0f      	ldr	r4, [pc, #60]	; (40e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    40ac:	e016      	b.n	40dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    40ae:	7821      	ldrb	r1, [r4, #0]
    40b0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    40b4:	7902      	ldrb	r2, [r0, #4]
    40b6:	2a01      	cmp	r2, #1
    40b8:	d108      	bne.n	40cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    40ba:	7942      	ldrb	r2, [r0, #5]
    40bc:	7983      	ldrb	r3, [r0, #6]
    40be:	429a      	cmp	r2, r3
    40c0:	d004      	beq.n	40cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    40c2:	7942      	ldrb	r2, [r0, #5]
    40c4:	7182      	strb	r2, [r0, #6]
    40c6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    40ca:	4780      	blx	r0
    40cc:	7820      	ldrb	r0, [r4, #0]
    40ce:	1c40      	adds	r0, r0, #1
    40d0:	b2c0      	uxtb	r0, r0
    40d2:	7020      	strb	r0, [r4, #0]
    40d4:	2805      	cmp	r0, #5
    40d6:	d301      	bcc.n	40dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    40d8:	2000      	movs	r0, #0
    40da:	7020      	strb	r0, [r4, #0]
    40dc:	1e6d      	subs	r5, r5, #1
    40de:	b2ed      	uxtb	r5, r5
    40e0:	d2e5      	bcs.n	40ae <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    40e2:	bd70      	pop	{r4, r5, r6, pc}
    40e4:	2000130c 	.word	0x2000130c
    40e8:	200004c6 	.word	0x200004c6

000040ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    40ec:	b500      	push	{lr}
    40ee:	f00c fe6e 	bl	10dce <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    40f2:	b940      	cbnz	r0, 4106 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    40f4:	f00c fe75 	bl	10de2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    40f8:	b928      	cbnz	r0, 4106 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    40fa:	f00c fe89 	bl	10e10 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    40fe:	b910      	cbnz	r0, 4106 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4100:	f00c fe9a 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4104:	b108      	cbz	r0, 410a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4106:	4802      	ldr	r0, [pc, #8]	; (4110 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4108:	bd00      	pop	{pc}
    410a:	4802      	ldr	r0, [pc, #8]	; (4114 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    410c:	bd00      	pop	{pc}
    410e:	0000      	.short	0x0000
    4110:	4000050c 	.word	0x4000050c
    4114:	4001e700 	.word	0x4001e700

00004118 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4118:	b510      	push	{r4, lr}
    411a:	f00c fe8d 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    411e:	b330      	cbz	r0, 416e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4120:	f3ef 8010 	mrs	r0, PRIMASK
    4124:	b1c8      	cbz	r0, 415a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4126:	2100      	movs	r1, #0
    4128:	b672      	cpsid	i
    412a:	4812      	ldr	r0, [pc, #72]	; (4174 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    412c:	6802      	ldr	r2, [r0, #0]
    412e:	6803      	ldr	r3, [r0, #0]
    4130:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4134:	f043 0310 	orr.w	r3, r3, #16
    4138:	6003      	str	r3, [r0, #0]
    413a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    413e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4142:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4146:	431c      	orrs	r4, r3
    4148:	d000      	beq.n	414c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    414a:	bf40      	sev
    414c:	bf20      	wfe
    414e:	bf00      	nop
    4150:	bf00      	nop
    4152:	bf00      	nop
    4154:	bf00      	nop
    4156:	b112      	cbz	r2, 415e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4158:	e005      	b.n	4166 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    415a:	2101      	movs	r1, #1
    415c:	e7e4      	b.n	4128 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    415e:	6802      	ldr	r2, [r0, #0]
    4160:	f022 0210 	bic.w	r2, r2, #16
    4164:	6002      	str	r2, [r0, #0]
    4166:	2900      	cmp	r1, #0
    4168:	d000      	beq.n	416c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    416a:	b662      	cpsie	i
    416c:	bd10      	pop	{r4, pc}
    416e:	bf20      	wfe
    4170:	bd10      	pop	{r4, pc}
    4172:	0000      	.short	0x0000
    4174:	e000ed10 	.word	0xe000ed10

00004178 <mpsl_cx_granted_ops_get>:
    4178:	4901      	ldr	r1, [pc, #4]	; (4180 <mpsl_cx_granted_ops_get+0x8>)
    417a:	6809      	ldr	r1, [r1, #0]
    417c:	6889      	ldr	r1, [r1, #8]
    417e:	4708      	bx	r1
    4180:	2000007c 	.word	0x2000007c

00004184 <mpsl_cx_register_callback>:
    4184:	4901      	ldr	r1, [pc, #4]	; (418c <mpsl_cx_register_callback+0x8>)
    4186:	6809      	ldr	r1, [r1, #0]
    4188:	6909      	ldr	r1, [r1, #16]
    418a:	4708      	bx	r1
    418c:	2000007c 	.word	0x2000007c

00004190 <mpsl_cx_release>:
    4190:	4801      	ldr	r0, [pc, #4]	; (4198 <mpsl_cx_release+0x8>)
    4192:	6800      	ldr	r0, [r0, #0]
    4194:	6840      	ldr	r0, [r0, #4]
    4196:	4700      	bx	r0
    4198:	2000007c 	.word	0x2000007c

0000419c <mpsl_cx_request>:
    419c:	4901      	ldr	r1, [pc, #4]	; (41a4 <mpsl_cx_request+0x8>)
    419e:	6809      	ldr	r1, [r1, #0]
    41a0:	6809      	ldr	r1, [r1, #0]
    41a2:	4708      	bx	r1
    41a4:	2000007c 	.word	0x2000007c

000041a8 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI>:
    41a8:	00011081 00011079 0001106d 0001107d     ....y...m...}...
    41b8:	00011075 4c0eb570 28007860 7820d117     u...p..L`x.(.. x
    41c8:	28012500 2002d106 69207020 6920b110     .%.(...  p i.. i
    41d8:	61254780 28037820 7025d109 28006920     .G%a x.(..%p i.(
    41e8:	6860d005 47806940 47806920 bd706125     ..`h@i.G i.G%ap.
    41f8:	20000080                                ... 

000041fc <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    41fc:	b510      	push	{r4, lr}
    41fe:	4c08      	ldr	r4, [pc, #32]	; (4220 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    4200:	7820      	ldrb	r0, [r4, #0]
    4202:	2802      	cmp	r0, #2
    4204:	d002      	beq.n	420c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    4206:	7820      	ldrb	r0, [r4, #0]
    4208:	2803      	cmp	r0, #3
    420a:	d102      	bne.n	4212 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    420c:	6860      	ldr	r0, [r4, #4]
    420e:	6880      	ldr	r0, [r0, #8]
    4210:	4780      	blx	r0
    4212:	2000      	movs	r0, #0
    4214:	70a0      	strb	r0, [r4, #2]
    4216:	7060      	strb	r0, [r4, #1]
    4218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    421c:	f7ff bfce 	b.w	41bc <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    4220:	20000080 	.word	0x20000080

00004224 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>:
    4224:	4802      	ldr	r0, [pc, #8]	; (4230 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xc>)
    4226:	7800      	ldrb	r0, [r0, #0]
    4228:	2800      	cmp	r0, #0
    422a:	d000      	beq.n	422e <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xa>
    422c:	2001      	movs	r0, #1
    422e:	4770      	bx	lr
    4230:	20000080 	.word	0x20000080

00004234 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4604      	mov	r4, r0
    4238:	2805      	cmp	r0, #5
    423a:	d304      	bcc.n	4246 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    423c:	f240 113d 	movw	r1, #317	; 0x13d
    4240:	2068      	movs	r0, #104	; 0x68
    4242:	f7ff fe3f 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4246:	f7ff ffb9 	bl	41bc <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    424a:	4d10      	ldr	r5, [pc, #64]	; (428c <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x58>)
    424c:	2001      	movs	r0, #1
    424e:	7068      	strb	r0, [r5, #1]
    4250:	7828      	ldrb	r0, [r5, #0]
    4252:	2802      	cmp	r0, #2
    4254:	d116      	bne.n	4284 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>
    4256:	6868      	ldr	r0, [r5, #4]
    4258:	68c1      	ldr	r1, [r0, #12]
    425a:	4620      	mov	r0, r4
    425c:	4788      	blx	r1
    425e:	490c      	ldr	r1, [pc, #48]	; (4290 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x5c>)
    4260:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    4264:	7852      	ldrb	r2, [r2, #1]
    4266:	4282      	cmp	r2, r0
    4268:	d30d      	bcc.n	4286 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    426a:	78a8      	ldrb	r0, [r5, #2]
    426c:	2801      	cmp	r0, #1
    426e:	d00a      	beq.n	4286 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    4270:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    4274:	f88d 0000 	strb.w	r0, [sp]
    4278:	f88d 4001 	strb.w	r4, [sp, #1]
    427c:	6868      	ldr	r0, [r5, #4]
    427e:	6801      	ldr	r1, [r0, #0]
    4280:	4668      	mov	r0, sp
    4282:	4788      	blx	r1
    4284:	bd38      	pop	{r3, r4, r5, pc}
    4286:	2001      	movs	r0, #1
    4288:	e7f4      	b.n	4274 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x40>
    428a:	0000      	.short	0x0000
    428c:	20000080 	.word	0x20000080
    4290:	20001670 	.word	0x20001670

00004294 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    4294:	4905      	ldr	r1, [pc, #20]	; (42ac <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    4296:	780a      	ldrb	r2, [r1, #0]
    4298:	2a02      	cmp	r2, #2
    429a:	d004      	beq.n	42a6 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    429c:	780a      	ldrb	r2, [r1, #0]
    429e:	2a03      	cmp	r2, #3
    42a0:	d001      	beq.n	42a6 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    42a2:	2000      	movs	r0, #0
    42a4:	4770      	bx	lr
    42a6:	6849      	ldr	r1, [r1, #4]
    42a8:	6909      	ldr	r1, [r1, #16]
    42aa:	4708      	bx	r1
    42ac:	20000080 	.word	0x20000080

000042b0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    42b0:	b510      	push	{r4, lr}
    42b2:	b158      	cbz	r0, 42cc <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    42b4:	4908      	ldr	r1, [pc, #32]	; (42d8 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    42b6:	780a      	ldrb	r2, [r1, #0]
    42b8:	2a02      	cmp	r2, #2
    42ba:	d002      	beq.n	42c2 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    42bc:	780a      	ldrb	r2, [r1, #0]
    42be:	2a03      	cmp	r2, #3
    42c0:	d109      	bne.n	42d6 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    42c2:	6849      	ldr	r1, [r1, #4]
    42c4:	6849      	ldr	r1, [r1, #4]
    42c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42ca:	4708      	bx	r1
    42cc:	f240 1153 	movw	r1, #339	; 0x153
    42d0:	2068      	movs	r0, #104	; 0x68
    42d2:	f7ff fdf7 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    42d6:	bd10      	pop	{r4, pc}
    42d8:	20000080 	.word	0x20000080

000042dc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    42dc:	4901      	ldr	r1, [pc, #4]	; (42e4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    42de:	2001      	movs	r0, #1
    42e0:	7088      	strb	r0, [r1, #2]
    42e2:	4770      	bx	lr
    42e4:	20000080 	.word	0x20000080

000042e8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    42e8:	4805      	ldr	r0, [pc, #20]	; (4300 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    42ea:	7801      	ldrb	r1, [r0, #0]
    42ec:	2902      	cmp	r1, #2
    42ee:	d004      	beq.n	42fa <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    42f0:	7801      	ldrb	r1, [r0, #0]
    42f2:	2903      	cmp	r1, #3
    42f4:	d001      	beq.n	42fa <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    42f6:	2000      	movs	r0, #0
    42f8:	4770      	bx	lr
    42fa:	6840      	ldr	r0, [r0, #4]
    42fc:	6980      	ldr	r0, [r0, #24]
    42fe:	4700      	bx	r0
    4300:	20000080 	.word	0x20000080

00004304 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4304:	000110a5 000110dd 000110c7 000110b5     ................
    4314:	000110c1 000110af 000110a3 000110a1     ................
    4324:	000110d9 000110cd 000110bb 000110a9     ................
    4334:	0001109b 00011093 00011097 0001108d     ................

00004344 <mpsl_fem_disable>:
    4344:	4801      	ldr	r0, [pc, #4]	; (434c <mpsl_fem_disable+0x8>)
    4346:	6800      	ldr	r0, [r0, #0]
    4348:	6800      	ldr	r0, [r0, #0]
    434a:	4700      	bx	r0
    434c:	20000094 	.word	0x20000094

00004350 <mpsl_fem_lna_configuration_clear>:
    4350:	4801      	ldr	r0, [pc, #4]	; (4358 <mpsl_fem_lna_configuration_clear+0x8>)
    4352:	6800      	ldr	r0, [r0, #0]
    4354:	6940      	ldr	r0, [r0, #20]
    4356:	4700      	bx	r0
    4358:	20000094 	.word	0x20000094

0000435c <mpsl_fem_lna_configuration_set>:
    435c:	4a01      	ldr	r2, [pc, #4]	; (4364 <mpsl_fem_lna_configuration_set+0x8>)
    435e:	6812      	ldr	r2, [r2, #0]
    4360:	68d2      	ldr	r2, [r2, #12]
    4362:	4710      	bx	r2
    4364:	20000094 	.word	0x20000094

00004368 <mpsl_fem_lna_is_configured>:
    4368:	4901      	ldr	r1, [pc, #4]	; (4370 <mpsl_fem_lna_is_configured+0x8>)
    436a:	6809      	ldr	r1, [r1, #0]
    436c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    436e:	4708      	bx	r1
    4370:	20000094 	.word	0x20000094

00004374 <mpsl_fem_pa_configuration_clear>:
    4374:	4801      	ldr	r0, [pc, #4]	; (437c <mpsl_fem_pa_configuration_clear+0x8>)
    4376:	6800      	ldr	r0, [r0, #0]
    4378:	6900      	ldr	r0, [r0, #16]
    437a:	4700      	bx	r0
    437c:	20000094 	.word	0x20000094

00004380 <mpsl_fem_pa_configuration_set>:
    4380:	4a01      	ldr	r2, [pc, #4]	; (4388 <mpsl_fem_pa_configuration_set+0x8>)
    4382:	6812      	ldr	r2, [r2, #0]
    4384:	6892      	ldr	r2, [r2, #8]
    4386:	4710      	bx	r2
    4388:	20000094 	.word	0x20000094

0000438c <mpsl_fem_pa_gain_set>:
    438c:	4901      	ldr	r1, [pc, #4]	; (4394 <mpsl_fem_pa_gain_set+0x8>)
    438e:	6809      	ldr	r1, [r1, #0]
    4390:	6a49      	ldr	r1, [r1, #36]	; 0x24
    4392:	4708      	bx	r1
    4394:	20000094 	.word	0x20000094

00004398 <mpsl_fem_pa_is_configured>:
    4398:	4901      	ldr	r1, [pc, #4]	; (43a0 <mpsl_fem_pa_is_configured+0x8>)
    439a:	6809      	ldr	r1, [r1, #0]
    439c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    439e:	4708      	bx	r1
    43a0:	20000094 	.word	0x20000094

000043a4 <mpsl_fem_tx_power_split>:
    43a4:	4b01      	ldr	r3, [pc, #4]	; (43ac <mpsl_fem_tx_power_split+0x8>)
    43a6:	681b      	ldr	r3, [r3, #0]
    43a8:	685b      	ldr	r3, [r3, #4]
    43aa:	4718      	bx	r3
    43ac:	20000094 	.word	0x20000094

000043b0 <mpsl_fem_device_config_254_apply_get>:
    43b0:	4801      	ldr	r0, [pc, #4]	; (43b8 <mpsl_fem_device_config_254_apply_get+0x8>)
    43b2:	7800      	ldrb	r0, [r0, #0]
    43b4:	4770      	bx	lr
    43b6:	0000      	.short	0x0000
    43b8:	200004c7 	.word	0x200004c7
    43bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    43be:	4c14      	ldr	r4, [pc, #80]	; (4410 <mpsl_fem_device_config_254_apply_get+0x60>)
    43c0:	7a20      	ldrb	r0, [r4, #8]
    43c2:	f88d 0001 	strb.w	r0, [sp, #1]
    43c6:	79e0      	ldrb	r0, [r4, #7]
    43c8:	f88d 0000 	strb.w	r0, [sp]
    43cc:	79a0      	ldrb	r0, [r4, #6]
    43ce:	f8ad 0004 	strh.w	r0, [sp, #4]
    43d2:	7960      	ldrb	r0, [r4, #5]
    43d4:	f8ad 0002 	strh.w	r0, [sp, #2]
    43d8:	4668      	mov	r0, sp
    43da:	f009 ff51 	bl	e280 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    43de:	b108      	cbz	r0, 43e4 <mpsl_fem_device_config_254_apply_get+0x34>
    43e0:	2183      	movs	r1, #131	; 0x83
    43e2:	e010      	b.n	4406 <mpsl_fem_device_config_254_apply_get+0x56>
    43e4:	68e0      	ldr	r0, [r4, #12]
    43e6:	9002      	str	r0, [sp, #8]
    43e8:	a802      	add	r0, sp, #8
    43ea:	f009 ff5f 	bl	e2ac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    43ee:	b108      	cbz	r0, 43f4 <mpsl_fem_device_config_254_apply_get+0x44>
    43f0:	2187      	movs	r1, #135	; 0x87
    43f2:	e008      	b.n	4406 <mpsl_fem_device_config_254_apply_get+0x56>
    43f4:	4807      	ldr	r0, [pc, #28]	; (4414 <mpsl_fem_device_config_254_apply_get+0x64>)
    43f6:	6800      	ldr	r0, [r0, #0]
    43f8:	9003      	str	r0, [sp, #12]
    43fa:	a803      	add	r0, sp, #12
    43fc:	f010 fa31 	bl	14862 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4400:	2800      	cmp	r0, #0
    4402:	d003      	beq.n	440c <mpsl_fem_device_config_254_apply_get+0x5c>
    4404:	218b      	movs	r1, #139	; 0x8b
    4406:	2003      	movs	r0, #3
    4408:	f000 f958 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    440c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    440e:	0000      	.short	0x0000
    4410:	20001334 	.word	0x20001334
    4414:	000047cc 	.word	0x000047cc
    4418:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    441a:	4604      	mov	r4, r0
    441c:	6800      	ldr	r0, [r0, #0]
    441e:	460d      	mov	r5, r1
    4420:	f100 0003 	add.w	r0, r0, #3
    4424:	f020 0003 	bic.w	r0, r0, #3
    4428:	6020      	str	r0, [r4, #0]
    442a:	f04f 0000 	mov.w	r0, #0
    442e:	9000      	str	r0, [sp, #0]
    4430:	9001      	str	r0, [sp, #4]
    4432:	7808      	ldrb	r0, [r1, #0]
    4434:	f88d 0001 	strb.w	r0, [sp, #1]
    4438:	7848      	ldrb	r0, [r1, #1]
    443a:	f88d 0002 	strb.w	r0, [sp, #2]
    443e:	7888      	ldrb	r0, [r1, #2]
    4440:	f88d 0003 	strb.w	r0, [sp, #3]
    4444:	78c8      	ldrb	r0, [r1, #3]
    4446:	f88d 0004 	strb.w	r0, [sp, #4]
    444a:	7928      	ldrb	r0, [r5, #4]
    444c:	0016      	movs	r6, r2
    444e:	f88d 0005 	strb.w	r0, [sp, #5]
    4452:	d001      	beq.n	4458 <mpsl_fem_device_config_254_apply_get+0xa8>
    4454:	2000      	movs	r0, #0
    4456:	e000      	b.n	445a <mpsl_fem_device_config_254_apply_get+0xaa>
    4458:	6820      	ldr	r0, [r4, #0]
    445a:	4669      	mov	r1, sp
    445c:	f000 fb3e 	bl	4adc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    4460:	6821      	ldr	r1, [r4, #0]
    4462:	4408      	add	r0, r1
    4464:	6020      	str	r0, [r4, #0]
    4466:	78a9      	ldrb	r1, [r5, #2]
    4468:	b141      	cbz	r1, 447c <mpsl_fem_device_config_254_apply_get+0xcc>
    446a:	8a6b      	ldrh	r3, [r5, #18]
    446c:	78ea      	ldrb	r2, [r5, #3]
    446e:	b106      	cbz	r6, 4472 <mpsl_fem_device_config_254_apply_get+0xc2>
    4470:	2000      	movs	r0, #0
    4472:	f000 fe19 	bl	50a8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    4476:	6821      	ldr	r1, [r4, #0]
    4478:	4408      	add	r0, r1
    447a:	6020      	str	r0, [r4, #0]
    447c:	4819      	ldr	r0, [pc, #100]	; (44e4 <mpsl_fem_device_config_254_apply_get+0x134>)
    447e:	78c1      	ldrb	r1, [r0, #3]
    4480:	b179      	cbz	r1, 44a2 <mpsl_fem_device_config_254_apply_get+0xf2>
    4482:	7c29      	ldrb	r1, [r5, #16]
    4484:	b169      	cbz	r1, 44a2 <mpsl_fem_device_config_254_apply_get+0xf2>
    4486:	7900      	ldrb	r0, [r0, #4]
    4488:	b108      	cbz	r0, 448e <mpsl_fem_device_config_254_apply_get+0xde>
    448a:	22ff      	movs	r2, #255	; 0xff
    448c:	e000      	b.n	4490 <mpsl_fem_device_config_254_apply_get+0xe0>
    448e:	2225      	movs	r2, #37	; 0x25
    4490:	b10e      	cbz	r6, 4496 <mpsl_fem_device_config_254_apply_get+0xe6>
    4492:	2000      	movs	r0, #0
    4494:	e000      	b.n	4498 <mpsl_fem_device_config_254_apply_get+0xe8>
    4496:	6820      	ldr	r0, [r4, #0]
    4498:	f000 fe90 	bl	51bc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    449c:	6821      	ldr	r1, [r4, #0]
    449e:	4408      	add	r0, r1
    44a0:	6020      	str	r0, [r4, #0]
    44a2:	7928      	ldrb	r0, [r5, #4]
    44a4:	b168      	cbz	r0, 44c2 <mpsl_fem_device_config_254_apply_get+0x112>
    44a6:	6820      	ldr	r0, [r4, #0]
    44a8:	1cc0      	adds	r0, r0, #3
    44aa:	f020 0003 	bic.w	r0, r0, #3
    44ae:	6020      	str	r0, [r4, #0]
    44b0:	7d2a      	ldrb	r2, [r5, #20]
    44b2:	7929      	ldrb	r1, [r5, #4]
    44b4:	b106      	cbz	r6, 44b8 <mpsl_fem_device_config_254_apply_get+0x108>
    44b6:	2000      	movs	r0, #0
    44b8:	f00a fa34 	bl	e924 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>
    44bc:	6821      	ldr	r1, [r4, #0]
    44be:	4408      	add	r0, r1
    44c0:	6020      	str	r0, [r4, #0]
    44c2:	7d68      	ldrb	r0, [r5, #21]
    44c4:	2800      	cmp	r0, #0
    44c6:	d00c      	beq.n	44e2 <mpsl_fem_device_config_254_apply_get+0x132>
    44c8:	6820      	ldr	r0, [r4, #0]
    44ca:	1cc0      	adds	r0, r0, #3
    44cc:	f020 0003 	bic.w	r0, r0, #3
    44d0:	6020      	str	r0, [r4, #0]
    44d2:	7d69      	ldrb	r1, [r5, #21]
    44d4:	b106      	cbz	r6, 44d8 <mpsl_fem_device_config_254_apply_get+0x128>
    44d6:	2000      	movs	r0, #0
    44d8:	f000 fe98 	bl	520c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>
    44dc:	6821      	ldr	r1, [r4, #0]
    44de:	4408      	add	r0, r1
    44e0:	6020      	str	r0, [r4, #0]
    44e2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    44e4:	20000098 	.word	0x20000098

000044e8 <sdc_build_revision_get>:
    44e8:	b510      	push	{r4, lr}
    44ea:	b128      	cbz	r0, 44f8 <sdc_build_revision_get+0x10>
    44ec:	2214      	movs	r2, #20
    44ee:	4904      	ldr	r1, [pc, #16]	; (4500 <sdc_build_revision_get+0x18>)
    44f0:	f00c fce2 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    44f4:	2000      	movs	r0, #0
    44f6:	bd10      	pop	{r4, pc}
    44f8:	f06f 0015 	mvn.w	r0, #21
    44fc:	bd10      	pop	{r4, pc}
    44fe:	0000      	.short	0x0000
    4500:	000047e8 	.word	0x000047e8

00004504 <sdc_cfg_set>:
    4504:	b570      	push	{r4, r5, r6, lr}
    4506:	b110      	cbz	r0, 450e <sdc_cfg_set+0xa>
    4508:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    450c:	bd70      	pop	{r4, r5, r6, pc}
    450e:	4c30      	ldr	r4, [pc, #192]	; (45d0 <sdc_cfg_set+0xcc>)
    4510:	7860      	ldrb	r0, [r4, #1]
    4512:	b110      	cbz	r0, 451a <sdc_cfg_set+0x16>
    4514:	f04f 30ff 	mov.w	r0, #4294967295
    4518:	bd70      	pop	{r4, r5, r6, pc}
    451a:	b321      	cbz	r1, 4566 <sdc_cfg_set+0x62>
    451c:	f06f 0015 	mvn.w	r0, #21
    4520:	2a00      	cmp	r2, #0
    4522:	d0f9      	beq.n	4518 <sdc_cfg_set+0x14>
    4524:	4b2b      	ldr	r3, [pc, #172]	; (45d4 <sdc_cfg_set+0xd0>)
    4526:	290c      	cmp	r1, #12
    4528:	d2f6      	bcs.n	4518 <sdc_cfg_set+0x14>
    452a:	e8df f001 	tbb	[pc, r1]
    452e:	0706      	.short	0x0706
    4530:	201d0d0a 	.word	0x201d0d0a
    4534:	3726342c 	.word	0x3726342c
    4538:	3f3a      	.short	0x3f3a
    453a:	e7ed      	b.n	4518 <sdc_cfg_set+0x14>
    453c:	7810      	ldrb	r0, [r2, #0]
    453e:	7018      	strb	r0, [r3, #0]
    4540:	e038      	b.n	45b4 <sdc_cfg_set+0xb0>
    4542:	7810      	ldrb	r0, [r2, #0]
    4544:	7058      	strb	r0, [r3, #1]
    4546:	e035      	b.n	45b4 <sdc_cfg_set+0xb0>
    4548:	7891      	ldrb	r1, [r2, #2]
    454a:	2900      	cmp	r1, #0
    454c:	d0e4      	beq.n	4518 <sdc_cfg_set+0x14>
    454e:	78d1      	ldrb	r1, [r2, #3]
    4550:	2900      	cmp	r1, #0
    4552:	d0e1      	beq.n	4518 <sdc_cfg_set+0x14>
    4554:	7811      	ldrb	r1, [r2, #0]
    4556:	291b      	cmp	r1, #27
    4558:	d3de      	bcc.n	4518 <sdc_cfg_set+0x14>
    455a:	7851      	ldrb	r1, [r2, #1]
    455c:	291b      	cmp	r1, #27
    455e:	d3db      	bcc.n	4518 <sdc_cfg_set+0x14>
    4560:	6810      	ldr	r0, [r2, #0]
    4562:	f8c3 0005 	str.w	r0, [r3, #5]
    4566:	e025      	b.n	45b4 <sdc_cfg_set+0xb0>
    4568:	6810      	ldr	r0, [r2, #0]
    456a:	60d8      	str	r0, [r3, #12]
    456c:	e022      	b.n	45b4 <sdc_cfg_set+0xb0>
    456e:	7811      	ldrb	r1, [r2, #0]
    4570:	78da      	ldrb	r2, [r3, #3]
    4572:	4291      	cmp	r1, r2
    4574:	d3d0      	bcc.n	4518 <sdc_cfg_set+0x14>
    4576:	7099      	strb	r1, [r3, #2]
    4578:	e01c      	b.n	45b4 <sdc_cfg_set+0xb0>
    457a:	7811      	ldrb	r1, [r2, #0]
    457c:	789a      	ldrb	r2, [r3, #2]
    457e:	4291      	cmp	r1, r2
    4580:	d8ca      	bhi.n	4518 <sdc_cfg_set+0x14>
    4582:	70d9      	strb	r1, [r3, #3]
    4584:	e016      	b.n	45b4 <sdc_cfg_set+0xb0>
    4586:	78e1      	ldrb	r1, [r4, #3]
    4588:	b111      	cbz	r1, 4590 <sdc_cfg_set+0x8c>
    458a:	7811      	ldrb	r1, [r2, #0]
    458c:	2902      	cmp	r1, #2
    458e:	d3c3      	bcc.n	4518 <sdc_cfg_set+0x14>
    4590:	7810      	ldrb	r0, [r2, #0]
    4592:	7418      	strb	r0, [r3, #16]
    4594:	e00e      	b.n	45b4 <sdc_cfg_set+0xb0>
    4596:	8810      	ldrh	r0, [r2, #0]
    4598:	8258      	strh	r0, [r3, #18]
    459a:	e00b      	b.n	45b4 <sdc_cfg_set+0xb0>
    459c:	7810      	ldrb	r0, [r2, #0]
    459e:	7118      	strb	r0, [r3, #4]
    45a0:	e008      	b.n	45b4 <sdc_cfg_set+0xb0>
    45a2:	7811      	ldrb	r1, [r2, #0]
    45a4:	2902      	cmp	r1, #2
    45a6:	d3b7      	bcc.n	4518 <sdc_cfg_set+0x14>
    45a8:	7519      	strb	r1, [r3, #20]
    45aa:	e003      	b.n	45b4 <sdc_cfg_set+0xb0>
    45ac:	7811      	ldrb	r1, [r2, #0]
    45ae:	2908      	cmp	r1, #8
    45b0:	d8b2      	bhi.n	4518 <sdc_cfg_set+0x14>
    45b2:	7559      	strb	r1, [r3, #21]
    45b4:	2201      	movs	r2, #1
    45b6:	4907      	ldr	r1, [pc, #28]	; (45d4 <sdc_cfg_set+0xd0>)
    45b8:	2000      	movs	r0, #0
    45ba:	f00c fda9 	bl	11110 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    45be:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    45c2:	db02      	blt.n	45ca <sdc_cfg_set+0xc6>
    45c4:	f06f 000b 	mvn.w	r0, #11
    45c8:	bd70      	pop	{r4, r5, r6, pc}
    45ca:	2101      	movs	r1, #1
    45cc:	70a1      	strb	r1, [r4, #2]
    45ce:	bd70      	pop	{r4, r5, r6, pc}
    45d0:	20000098 	.word	0x20000098
    45d4:	20001334 	.word	0x20001334

000045d8 <sdc_enable>:
    45d8:	b570      	push	{r4, r5, r6, lr}
    45da:	460c      	mov	r4, r1
    45dc:	0005      	movs	r5, r0
    45de:	d019      	beq.n	4614 <sdc_enable+0x3c>
    45e0:	b1c4      	cbz	r4, 4614 <sdc_enable+0x3c>
    45e2:	f000 f927 	bl	4834 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    45e6:	b1c0      	cbz	r0, 461a <sdc_enable+0x42>
    45e8:	4628      	mov	r0, r5
    45ea:	f7ff fd21 	bl	4030 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    45ee:	4d0c      	ldr	r5, [pc, #48]	; (4620 <sdc_enable+0x48>)
    45f0:	2200      	movs	r2, #0
    45f2:	490c      	ldr	r1, [pc, #48]	; (4624 <sdc_enable+0x4c>)
    45f4:	7028      	strb	r0, [r5, #0]
    45f6:	4620      	mov	r0, r4
    45f8:	f00c fd8a 	bl	11110 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    45fc:	f010 ff3c 	bl	15478 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4600:	2100      	movs	r1, #0
    4602:	7828      	ldrb	r0, [r5, #0]
    4604:	f00a f8c0 	bl	e788 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4608:	f7ff fed8 	bl	43bc <mpsl_fem_device_config_254_apply_get+0xc>
    460c:	2001      	movs	r0, #1
    460e:	7068      	strb	r0, [r5, #1]
    4610:	2000      	movs	r0, #0
    4612:	bd70      	pop	{r4, r5, r6, pc}
    4614:	f06f 0015 	mvn.w	r0, #21
    4618:	bd70      	pop	{r4, r5, r6, pc}
    461a:	f04f 30ff 	mov.w	r0, #4294967295
    461e:	bd70      	pop	{r4, r5, r6, pc}
    4620:	20000098 	.word	0x20000098
    4624:	20001334 	.word	0x20001334

00004628 <sdc_init>:
    4628:	b530      	push	{r4, r5, lr}
    462a:	b087      	sub	sp, #28
    462c:	0005      	movs	r5, r0
    462e:	d00c      	beq.n	464a <sdc_init+0x22>
    4630:	f7ff fca4 	bl	3f7c <mpsl_is_initialized>
    4634:	f04f 34ff 	mov.w	r4, #4294967295
    4638:	b120      	cbz	r0, 4644 <sdc_init+0x1c>
    463a:	f7ff fb4b 	bl	3cd4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    463e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4642:	d905      	bls.n	4650 <sdc_init+0x28>
    4644:	4620      	mov	r0, r4
    4646:	b007      	add	sp, #28
    4648:	bd30      	pop	{r4, r5, pc}
    464a:	f06f 0015 	mvn.w	r0, #21
    464e:	e7fa      	b.n	4646 <sdc_init+0x1e>
    4650:	4c15      	ldr	r4, [pc, #84]	; (46a8 <sdc_init+0x80>)
    4652:	4816      	ldr	r0, [pc, #88]	; (46ac <sdc_init+0x84>)
    4654:	60a5      	str	r5, [r4, #8]
    4656:	f000 fa1d 	bl	4a94 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    465a:	2000      	movs	r0, #0
    465c:	7060      	strb	r0, [r4, #1]
    465e:	70a0      	strb	r0, [r4, #2]
    4660:	70e0      	strb	r0, [r4, #3]
    4662:	7120      	strb	r0, [r4, #4]
    4664:	4601      	mov	r1, r0
    4666:	2218      	movs	r2, #24
    4668:	4668      	mov	r0, sp
    466a:	f00c fc9f 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    466e:	2218      	movs	r2, #24
    4670:	490f      	ldr	r1, [pc, #60]	; (46b0 <sdc_init+0x88>)
    4672:	4668      	mov	r0, sp
    4674:	f00c fc20 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4678:	2218      	movs	r2, #24
    467a:	4669      	mov	r1, sp
    467c:	480d      	ldr	r0, [pc, #52]	; (46b4 <sdc_init+0x8c>)
    467e:	f00c fc1b 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4682:	f3ef 8410 	mrs	r4, PRIMASK
    4686:	b672      	cpsid	i
    4688:	f06f 000c 	mvn.w	r0, #12
    468c:	f000 fe00 	bl	5290 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4690:	4809      	ldr	r0, [pc, #36]	; (46b8 <sdc_init+0x90>)
    4692:	f000 fecb 	bl	542c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4696:	b118      	cbz	r0, 46a0 <sdc_init+0x78>
    4698:	219e      	movs	r1, #158	; 0x9e
    469a:	2003      	movs	r0, #3
    469c:	f000 f80e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46a0:	b904      	cbnz	r4, 46a4 <sdc_init+0x7c>
    46a2:	b662      	cpsie	i
    46a4:	2000      	movs	r0, #0
    46a6:	e7ce      	b.n	4646 <sdc_init+0x1e>
    46a8:	20000098 	.word	0x20000098
    46ac:	000043bd 	.word	0x000043bd
    46b0:	000047d0 	.word	0x000047d0
    46b4:	20001334 	.word	0x20001334
    46b8:	00004861 	.word	0x00004861

000046bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    46bc:	b50e      	push	{r1, r2, r3, lr}
    46be:	b672      	cpsid	i
    46c0:	4a15      	ldr	r2, [pc, #84]	; (4718 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    46c2:	6895      	ldr	r5, [r2, #8]
    46c4:	b1dd      	cbz	r5, 46fe <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    46c6:	2200      	movs	r2, #0
    46c8:	4603      	mov	r3, r0
    46ca:	466e      	mov	r6, sp
    46cc:	240a      	movs	r4, #10
    46ce:	e003      	b.n	46d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    46d0:	fbb0 f0f4 	udiv	r0, r0, r4
    46d4:	1c52      	adds	r2, r2, #1
    46d6:	b2d2      	uxtb	r2, r2
    46d8:	2800      	cmp	r0, #0
    46da:	d1f9      	bne.n	46d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    46dc:	54b0      	strb	r0, [r6, r2]
    46de:	e00a      	b.n	46f6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    46e0:	b2d8      	uxtb	r0, r3
    46e2:	fbb0 f7f4 	udiv	r7, r0, r4
    46e6:	fbb3 f3f4 	udiv	r3, r3, r4
    46ea:	fb04 0017 	mls	r0, r4, r7, r0
    46ee:	1e52      	subs	r2, r2, #1
    46f0:	b2d2      	uxtb	r2, r2
    46f2:	3030      	adds	r0, #48	; 0x30
    46f4:	54b0      	strb	r0, [r6, r2]
    46f6:	2a00      	cmp	r2, #0
    46f8:	d1f2      	bne.n	46e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    46fa:	4630      	mov	r0, r6
    46fc:	47a8      	blx	r5
    46fe:	f3bf 8f4f 	dsb	sy
    4702:	4806      	ldr	r0, [pc, #24]	; (471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4704:	6801      	ldr	r1, [r0, #0]
    4706:	4a06      	ldr	r2, [pc, #24]	; (4720 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4708:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    470c:	4311      	orrs	r1, r2
    470e:	6001      	str	r1, [r0, #0]
    4710:	f3bf 8f4f 	dsb	sy
    4714:	bf00      	nop
    4716:	e7fd      	b.n	4714 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4718:	20000098 	.word	0x20000098
    471c:	e000ed0c 	.word	0xe000ed0c
    4720:	05fa0004 	.word	0x05fa0004

00004724 <sdc_support_dle_peripheral>:
    4724:	4806      	ldr	r0, [pc, #24]	; (4740 <sdc_support_dle_peripheral+0x1c>)
    4726:	b510      	push	{r4, lr}
    4728:	7881      	ldrb	r1, [r0, #2]
    472a:	7840      	ldrb	r0, [r0, #1]
    472c:	4301      	orrs	r1, r0
    472e:	d002      	beq.n	4736 <sdc_support_dle_peripheral+0x12>
    4730:	f04f 30ff 	mov.w	r0, #4294967295
    4734:	bd10      	pop	{r4, pc}
    4736:	f009 fdef 	bl	e318 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    473a:	2000      	movs	r0, #0
    473c:	bd10      	pop	{r4, pc}
    473e:	0000      	.short	0x0000
    4740:	20000098 	.word	0x20000098

00004744 <sdc_support_ext_adv>:
    4744:	4806      	ldr	r0, [pc, #24]	; (4760 <sdc_support_ext_adv+0x1c>)
    4746:	b510      	push	{r4, lr}
    4748:	7881      	ldrb	r1, [r0, #2]
    474a:	7840      	ldrb	r0, [r0, #1]
    474c:	4301      	orrs	r1, r0
    474e:	d002      	beq.n	4756 <sdc_support_ext_adv+0x12>
    4750:	f04f 30ff 	mov.w	r0, #4294967295
    4754:	bd10      	pop	{r4, pc}
    4756:	f00a f843 	bl	e7e0 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ>
    475a:	2000      	movs	r0, #0
    475c:	bd10      	pop	{r4, pc}
    475e:	0000      	.short	0x0000
    4760:	20000098 	.word	0x20000098

00004764 <sdc_support_le_2m_phy>:
    4764:	4808      	ldr	r0, [pc, #32]	; (4788 <sdc_support_le_2m_phy+0x24>)
    4766:	b510      	push	{r4, lr}
    4768:	7881      	ldrb	r1, [r0, #2]
    476a:	7840      	ldrb	r0, [r0, #1]
    476c:	4301      	orrs	r1, r0
    476e:	d002      	beq.n	4776 <sdc_support_le_2m_phy+0x12>
    4770:	f04f 30ff 	mov.w	r0, #4294967295
    4774:	bd10      	pop	{r4, pc}
    4776:	f010 fa98 	bl	14caa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    477a:	f010 fada 	bl	14d32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    477e:	f010 fac6 	bl	14d0e <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
    4782:	2000      	movs	r0, #0
    4784:	bd10      	pop	{r4, pc}
    4786:	0000      	.short	0x0000
    4788:	20000098 	.word	0x20000098

0000478c <sdc_support_peripheral>:
    478c:	4806      	ldr	r0, [pc, #24]	; (47a8 <sdc_support_peripheral+0x1c>)
    478e:	b510      	push	{r4, lr}
    4790:	7881      	ldrb	r1, [r0, #2]
    4792:	7840      	ldrb	r0, [r0, #1]
    4794:	4301      	orrs	r1, r0
    4796:	d002      	beq.n	479e <sdc_support_peripheral+0x12>
    4798:	f04f 30ff 	mov.w	r0, #4294967295
    479c:	bd10      	pop	{r4, pc}
    479e:	f00a f831 	bl	e804 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    47a2:	2000      	movs	r0, #0
    47a4:	bd10      	pop	{r4, pc}
    47a6:	0000      	.short	0x0000
    47a8:	20000098 	.word	0x20000098

000047ac <sdc_support_phy_update_peripheral>:
    47ac:	4806      	ldr	r0, [pc, #24]	; (47c8 <sdc_support_phy_update_peripheral+0x1c>)
    47ae:	b510      	push	{r4, lr}
    47b0:	7881      	ldrb	r1, [r0, #2]
    47b2:	7840      	ldrb	r0, [r0, #1]
    47b4:	4301      	orrs	r1, r0
    47b6:	d002      	beq.n	47be <sdc_support_phy_update_peripheral+0x12>
    47b8:	f04f 30ff 	mov.w	r0, #4294967295
    47bc:	bd10      	pop	{r4, pc}
    47be:	f010 fab8 	bl	14d32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    47c2:	2000      	movs	r0, #0
    47c4:	bd10      	pop	{r4, pc}
    47c6:	0000      	.short	0x0000
    47c8:	20000098 	.word	0x20000098
    47cc:	00000001 	.word	0x00000001
    47d0:	00010101 	.word	0x00010101
    47d4:	031b1b00 	.word	0x031b1b00
    47d8:	00000002 	.word	0x00000002
    47dc:	00001d4c 	.word	0x00001d4c
    47e0:	001f0003 	.word	0x001f0003
    47e4:	00000002 	.word	0x00000002
    47e8:	f1925c29 	.word	0xf1925c29
    47ec:	d1928136 	.word	0xd1928136
    47f0:	f1f0a9b7 	.word	0xf1f0a9b7
    47f4:	194ce999 	.word	0x194ce999
    47f8:	4a83231f 	.word	0x4a83231f

000047fc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    47fc:	4a05      	ldr	r2, [pc, #20]	; (4814 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    47fe:	b510      	push	{r4, lr}
    4800:	6852      	ldr	r2, [r2, #4]
    4802:	b112      	cbz	r2, 480a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4808:	4710      	bx	r2
    480a:	2192      	movs	r1, #146	; 0x92
    480c:	2004      	movs	r0, #4
    480e:	f7ff ff55 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4812:	0000      	.short	0x0000
    4814:	2000134c 	.word	0x2000134c

00004818 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4818:	4a05      	ldr	r2, [pc, #20]	; (4830 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    481a:	b510      	push	{r4, lr}
    481c:	6892      	ldr	r2, [r2, #8]
    481e:	b112      	cbz	r2, 4826 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4824:	4710      	bx	r2
    4826:	2198      	movs	r1, #152	; 0x98
    4828:	2004      	movs	r0, #4
    482a:	f7ff ff47 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    482e:	0000      	.short	0x0000
    4830:	2000134c 	.word	0x2000134c

00004834 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4834:	4805      	ldr	r0, [pc, #20]	; (484c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4836:	6801      	ldr	r1, [r0, #0]
    4838:	b129      	cbz	r1, 4846 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    483a:	6841      	ldr	r1, [r0, #4]
    483c:	b119      	cbz	r1, 4846 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    483e:	6880      	ldr	r0, [r0, #8]
    4840:	b108      	cbz	r0, 4846 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4842:	2001      	movs	r0, #1
    4844:	4770      	bx	lr
    4846:	2000      	movs	r0, #0
    4848:	4770      	bx	lr
    484a:	0000      	.short	0x0000
    484c:	2000134c 	.word	0x2000134c

00004850 <sdc_rand_source_register>:
    4850:	4902      	ldr	r1, [pc, #8]	; (485c <sdc_rand_source_register+0xc>)
    4852:	c80d      	ldmia	r0, {r0, r2, r3}
    4854:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4858:	2000      	movs	r0, #0
    485a:	4770      	bx	lr
    485c:	2000134c 	.word	0x2000134c

00004860 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4862:	4c12      	ldr	r4, [pc, #72]	; (48ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4864:	2600      	movs	r6, #0
    4866:	6825      	ldr	r5, [r4, #0]
    4868:	e011      	b.n	488e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    486a:	9800      	ldr	r0, [sp, #0]
    486c:	2802      	cmp	r0, #2
    486e:	d002      	beq.n	4876 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4870:	2803      	cmp	r0, #3
    4872:	d10c      	bne.n	488e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4874:	e006      	b.n	4884 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4876:	6820      	ldr	r0, [r4, #0]
    4878:	b110      	cbz	r0, 4880 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    487a:	2000      	movs	r0, #0
    487c:	6026      	str	r6, [r4, #0]
    487e:	e005      	b.n	488c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4880:	2128      	movs	r1, #40	; 0x28
    4882:	e00c      	b.n	489e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4884:	6820      	ldr	r0, [r4, #0]
    4886:	b168      	cbz	r0, 48a4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4888:	2001      	movs	r0, #1
    488a:	6026      	str	r6, [r4, #0]
    488c:	47a8      	blx	r5
    488e:	4668      	mov	r0, sp
    4890:	f000 fd9e 	bl	53d0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4894:	2800      	cmp	r0, #0
    4896:	d0e8      	beq.n	486a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4898:	2805      	cmp	r0, #5
    489a:	d005      	beq.n	48a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    489c:	2135      	movs	r1, #53	; 0x35
    489e:	2004      	movs	r0, #4
    48a0:	f7ff ff0c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48a4:	212d      	movs	r1, #45	; 0x2d
    48a6:	e7fa      	b.n	489e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    48a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48aa:	0000      	.short	0x0000
    48ac:	200000a4 	.word	0x200000a4
    48b0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    48b2:	4c1f      	ldr	r4, [pc, #124]	; (4930 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    48b4:	4605      	mov	r5, r0
    48b6:	7820      	ldrb	r0, [r4, #0]
    48b8:	b140      	cbz	r0, 48cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    48ba:	78a2      	ldrb	r2, [r4, #2]
    48bc:	1c61      	adds	r1, r4, #1
    48be:	4628      	mov	r0, r5
    48c0:	1c92      	adds	r2, r2, #2
    48c2:	f00c faf9 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    48c6:	2000      	movs	r0, #0
    48c8:	7020      	strb	r0, [r4, #0]
    48ca:	e021      	b.n	4910 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    48cc:	4819      	ldr	r0, [pc, #100]	; (4934 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    48ce:	f002 fd23 	bl	7318 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    48d2:	2800      	cmp	r0, #0
    48d4:	d01d      	beq.n	4912 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    48d6:	4c17      	ldr	r4, [pc, #92]	; (4934 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    48d8:	7820      	ldrb	r0, [r4, #0]
    48da:	2814      	cmp	r0, #20
    48dc:	d104      	bne.n	48e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    48de:	210a      	movs	r1, #10
    48e0:	203e      	movs	r0, #62	; 0x3e
    48e2:	f000 f829 	bl	4938 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    48e6:	b118      	cbz	r0, 48f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    48e8:	7820      	ldrb	r0, [r4, #0]
    48ea:	280a      	cmp	r0, #10
    48ec:	d005      	beq.n	48fa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    48ee:	e009      	b.n	4904 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    48f0:	4910      	ldr	r1, [pc, #64]	; (4934 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    48f2:	4628      	mov	r0, r5
    48f4:	f00c ff55 	bl	117a2 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    48f8:	e00a      	b.n	4910 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    48fa:	2105      	movs	r1, #5
    48fc:	203e      	movs	r0, #62	; 0x3e
    48fe:	f000 f81b 	bl	4938 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    4902:	b138      	cbz	r0, 4914 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4904:	490b      	ldr	r1, [pc, #44]	; (4934 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4906:	4628      	mov	r0, r5
    4908:	f00c fca3 	bl	11252 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    490c:	2800      	cmp	r0, #0
    490e:	d000      	beq.n	4912 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4910:	2001      	movs	r0, #1
    4912:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4914:	88a0      	ldrh	r0, [r4, #4]
    4916:	f8ad 0000 	strh.w	r0, [sp]
    491a:	a901      	add	r1, sp, #4
    491c:	4668      	mov	r0, sp
    491e:	f00d f89f 	bl	11a60 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4922:	2800      	cmp	r0, #0
    4924:	d0f5      	beq.n	4912 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4926:	219c      	movs	r1, #156	; 0x9c
    4928:	2008      	movs	r0, #8
    492a:	f7ff fec7 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    492e:	0000      	.short	0x0000
    4930:	20001460 	.word	0x20001460
    4934:	20001358 	.word	0x20001358
    4938:	b570      	push	{r4, r5, r6, lr}
    493a:	460c      	mov	r4, r1
    493c:	4605      	mov	r5, r0
    493e:	f000 f84b 	bl	49d8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    4942:	2800      	cmp	r0, #0
    4944:	d002      	beq.n	494c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4946:	2d3e      	cmp	r5, #62	; 0x3e
    4948:	d001      	beq.n	494e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xee>
    494a:	2001      	movs	r0, #1
    494c:	bd70      	pop	{r4, r5, r6, pc}
    494e:	2c12      	cmp	r4, #18
    4950:	d106      	bne.n	4960 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x100>
    4952:	4806      	ldr	r0, [pc, #24]	; (496c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>)
    4954:	7801      	ldrb	r1, [r0, #0]
    4956:	2902      	cmp	r1, #2
    4958:	d002      	beq.n	4960 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x100>
    495a:	7840      	ldrb	r0, [r0, #1]
    495c:	2800      	cmp	r0, #0
    495e:	d0f5      	beq.n	494c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4960:	4620      	mov	r0, r4
    4962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4966:	f000 b849 	b.w	49fc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    496a:	0000      	.short	0x0000
    496c:	200004c8 	.word	0x200004c8

00004970 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    4970:	4901      	ldr	r1, [pc, #4]	; (4978 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    4972:	7048      	strb	r0, [r1, #1]
    4974:	4770      	bx	lr
    4976:	0000      	.short	0x0000
    4978:	200004c8 	.word	0x200004c8
    497c:	b570      	push	{r4, r5, r6, lr}
    497e:	780a      	ldrb	r2, [r1, #0]
    4980:	7082      	strb	r2, [r0, #2]
    4982:	b33a      	cbz	r2, 49d4 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4984:	2a01      	cmp	r2, #1
    4986:	d825      	bhi.n	49d4 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4988:	2313      	movs	r3, #19
    498a:	7003      	strb	r3, [r0, #0]
    498c:	2300      	movs	r3, #0
    498e:	e00a      	b.n	49a6 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    4990:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4994:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4998:	78a6      	ldrb	r6, [r4, #2]
    499a:	70ee      	strb	r6, [r5, #3]
    499c:	8864      	ldrh	r4, [r4, #2]
    499e:	0a24      	lsrs	r4, r4, #8
    49a0:	1c5b      	adds	r3, r3, #1
    49a2:	712c      	strb	r4, [r5, #4]
    49a4:	b2db      	uxtb	r3, r3
    49a6:	4293      	cmp	r3, r2
    49a8:	d3f2      	bcc.n	4990 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    49aa:	2300      	movs	r3, #0
    49ac:	e00b      	b.n	49c6 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    49ae:	bf00      	nop
    49b0:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    49b4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    49b8:	792e      	ldrb	r6, [r5, #4]
    49ba:	7166      	strb	r6, [r4, #5]
    49bc:	88ad      	ldrh	r5, [r5, #4]
    49be:	0a2d      	lsrs	r5, r5, #8
    49c0:	1c5b      	adds	r3, r3, #1
    49c2:	71a5      	strb	r5, [r4, #6]
    49c4:	b2db      	uxtb	r3, r3
    49c6:	4293      	cmp	r3, r2
    49c8:	d3f2      	bcc.n	49b0 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    49ca:	2101      	movs	r1, #1
    49cc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    49d0:	b2c0      	uxtb	r0, r0
    49d2:	bd70      	pop	{r4, r5, r6, pc}
    49d4:	2000      	movs	r0, #0
    49d6:	bd70      	pop	{r4, r5, r6, pc}

000049d8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    49d8:	2840      	cmp	r0, #64	; 0x40
    49da:	d203      	bcs.n	49e4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    49dc:	1e40      	subs	r0, r0, #1
    49de:	b2c1      	uxtb	r1, r0
    49e0:	4805      	ldr	r0, [pc, #20]	; (49f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    49e2:	e005      	b.n	49f0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    49e4:	28ff      	cmp	r0, #255	; 0xff
    49e6:	d005      	beq.n	49f4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    49e8:	3840      	subs	r0, #64	; 0x40
    49ea:	b2c1      	uxtb	r1, r0
    49ec:	4802      	ldr	r0, [pc, #8]	; (49f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    49ee:	3008      	adds	r0, #8
    49f0:	f00c bf01 	b.w	117f6 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    49f4:	2001      	movs	r0, #1
    49f6:	4770      	bx	lr
    49f8:	200000a8 	.word	0x200000a8

000049fc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    49fc:	1e40      	subs	r0, r0, #1
    49fe:	b2c1      	uxtb	r1, r0
    4a00:	4801      	ldr	r0, [pc, #4]	; (4a08 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4a02:	f00c bef8 	b.w	117f6 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4a06:	0000      	.short	0x0000
    4a08:	200000b8 	.word	0x200000b8

00004a0c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4a0c:	4902      	ldr	r1, [pc, #8]	; (4a18 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    4a0e:	6802      	ldr	r2, [r0, #0]
    4a10:	610a      	str	r2, [r1, #16]
    4a12:	6840      	ldr	r0, [r0, #4]
    4a14:	6148      	str	r0, [r1, #20]
    4a16:	4770      	bx	lr
    4a18:	200000a8 	.word	0x200000a8

00004a1c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4a1c:	4905      	ldr	r1, [pc, #20]	; (4a34 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4a1e:	6802      	ldr	r2, [r0, #0]
    4a20:	600a      	str	r2, [r1, #0]
    4a22:	6840      	ldr	r0, [r0, #4]
    4a24:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4a28:	600a      	str	r2, [r1, #0]
    4a2a:	4a03      	ldr	r2, [pc, #12]	; (4a38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    4a2c:	4310      	orrs	r0, r2
    4a2e:	6048      	str	r0, [r1, #4]
    4a30:	4770      	bx	lr
    4a32:	0000      	.short	0x0000
    4a34:	200000a8 	.word	0x200000a8
    4a38:	024007f8 	.word	0x024007f8

00004a3c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4a3c:	4902      	ldr	r1, [pc, #8]	; (4a48 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    4a3e:	6802      	ldr	r2, [r0, #0]
    4a40:	608a      	str	r2, [r1, #8]
    4a42:	6840      	ldr	r0, [r0, #4]
    4a44:	60c8      	str	r0, [r1, #12]
    4a46:	4770      	bx	lr
    4a48:	200000a8 	.word	0x200000a8

00004a4c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4a4c:	4807      	ldr	r0, [pc, #28]	; (4a6c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    4a4e:	f04f 31ff 	mov.w	r1, #4294967295
    4a52:	2200      	movs	r2, #0
    4a54:	6001      	str	r1, [r0, #0]
    4a56:	0cc9      	lsrs	r1, r1, #19
    4a58:	6041      	str	r1, [r0, #4]
    4a5a:	f100 0108 	add.w	r1, r0, #8
    4a5e:	201f      	movs	r0, #31
    4a60:	600a      	str	r2, [r1, #0]
    4a62:	604a      	str	r2, [r1, #4]
    4a64:	3108      	adds	r1, #8
    4a66:	e9c1 0200 	strd	r0, r2, [r1]
    4a6a:	4770      	bx	lr
    4a6c:	200000a8 	.word	0x200000a8

00004a70 <sdc_hci_cmd_cb_reset>:
    4a70:	b510      	push	{r4, lr}
    4a72:	f7ff ffeb 	bl	4a4c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4a76:	2000      	movs	r0, #0
    4a78:	f7ff ff7a 	bl	4970 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    4a7c:	f010 f879 	bl	14b72 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4a80:	4604      	mov	r4, r0
    4a82:	4803      	ldr	r0, [pc, #12]	; (4a90 <sdc_hci_cmd_cb_reset+0x20>)
    4a84:	6800      	ldr	r0, [r0, #0]
    4a86:	b100      	cbz	r0, 4a8a <sdc_hci_cmd_cb_reset+0x1a>
    4a88:	4780      	blx	r0
    4a8a:	4620      	mov	r0, r4
    4a8c:	bd10      	pop	{r4, pc}
    4a8e:	0000      	.short	0x0000
    4a90:	200000c0 	.word	0x200000c0

00004a94 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4a94:	4901      	ldr	r1, [pc, #4]	; (4a9c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4a96:	6008      	str	r0, [r1, #0]
    4a98:	4770      	bx	lr
    4a9a:	0000      	.short	0x0000
    4a9c:	200000c0 	.word	0x200000c0

00004aa0 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4aa0:	2102      	movs	r1, #2
    4aa2:	8001      	strh	r1, [r0, #0]
    4aa4:	8041      	strh	r1, [r0, #2]
    4aa6:	2100      	movs	r1, #0
    4aa8:	7101      	strb	r1, [r0, #4]
    4aaa:	2129      	movs	r1, #41	; 0x29
    4aac:	7141      	strb	r1, [r0, #5]
    4aae:	f249 215c 	movw	r1, #37468	; 0x925c
    4ab2:	80c1      	strh	r1, [r0, #6]
    4ab4:	4901      	ldr	r1, [pc, #4]	; (4abc <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4ab6:	6081      	str	r1, [r0, #8]
    4ab8:	2000      	movs	r0, #0
    4aba:	4770      	bx	lr
    4abc:	928136f1 	.word	0x928136f1

00004ac0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4ac0:	b510      	push	{r4, lr}
    4ac2:	2805      	cmp	r0, #5
    4ac4:	d304      	bcc.n	4ad0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4ac6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4aca:	2017      	movs	r0, #23
    4acc:	f7ff fdf6 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ad0:	4901      	ldr	r1, [pc, #4]	; (4ad8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4ad2:	5c08      	ldrb	r0, [r1, r0]
    4ad4:	bd10      	pop	{r4, pc}
    4ad6:	0000      	.short	0x0000
    4ad8:	20001564 	.word	0x20001564

00004adc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ade:	4604      	mov	r4, r0
    4ae0:	788a      	ldrb	r2, [r1, #2]
    4ae2:	7848      	ldrb	r0, [r1, #1]
    4ae4:	4402      	add	r2, r0
    4ae6:	2aff      	cmp	r2, #255	; 0xff
    4ae8:	d902      	bls.n	4af0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4aea:	f240 115f 	movw	r1, #351	; 0x15f
    4aee:	e01d      	b.n	4b2c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    4af0:	780a      	ldrb	r2, [r1, #0]
    4af2:	4282      	cmp	r2, r0
    4af4:	d902      	bls.n	4afc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    4af6:	f240 1163 	movw	r1, #355	; 0x163
    4afa:	e017      	b.n	4b2c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    4afc:	9400      	str	r4, [sp, #0]
    4afe:	b1c4      	cbz	r4, 4b32 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x56>
    4b00:	2600      	movs	r6, #0
    4b02:	784b      	ldrb	r3, [r1, #1]
    4b04:	f891 c002 	ldrb.w	ip, [r1, #2]
    4b08:	794a      	ldrb	r2, [r1, #5]
    4b0a:	eb0c 0003 	add.w	r0, ip, r3
    4b0e:	b2c5      	uxtb	r5, r0
    4b10:	42aa      	cmp	r2, r5
    4b12:	d900      	bls.n	4b16 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    4b14:	4615      	mov	r5, r2
    4b16:	78c8      	ldrb	r0, [r1, #3]
    4b18:	42a8      	cmp	r0, r5
    4b1a:	d900      	bls.n	4b1e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    4b1c:	4605      	mov	r5, r0
    4b1e:	1ce7      	adds	r7, r4, #3
    4b20:	f027 0703 	bic.w	r7, r7, #3
    4b24:	42a7      	cmp	r7, r4
    4b26:	d006      	beq.n	4b36 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5a>
    4b28:	f240 1179 	movw	r1, #377	; 0x179
    4b2c:	2017      	movs	r0, #23
    4b2e:	f7ff fdc5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b32:	2601      	movs	r6, #1
    4b34:	e7e5      	b.n	4b02 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x26>
    4b36:	4f15      	ldr	r7, [pc, #84]	; (4b8c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb0>)
    4b38:	703b      	strb	r3, [r7, #0]
    4b3a:	f887 c001 	strb.w	ip, [r7, #1]
    4b3e:	70b8      	strb	r0, [r7, #2]
    4b40:	7908      	ldrb	r0, [r1, #4]
    4b42:	70f8      	strb	r0, [r7, #3]
    4b44:	713a      	strb	r2, [r7, #4]
    4b46:	4631      	mov	r1, r6
    4b48:	4668      	mov	r0, sp
    4b4a:	f000 f90f 	bl	4d6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4b4e:	2100      	movs	r1, #0
    4b50:	468c      	mov	ip, r1
    4b52:	9800      	ldr	r0, [sp, #0]
    4b54:	1cc0      	adds	r0, r0, #3
    4b56:	f020 0003 	bic.w	r0, r0, #3
    4b5a:	9000      	str	r0, [sp, #0]
    4b5c:	b95e      	cbnz	r6, 4b76 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x9a>
    4b5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    4b62:	61d8      	str	r0, [r3, #28]
    4b64:	2000      	movs	r0, #0
    4b66:	e004      	b.n	4b72 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x96>
    4b68:	69da      	ldr	r2, [r3, #28]
    4b6a:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    4b6e:	1c40      	adds	r0, r0, #1
    4b70:	b2c0      	uxtb	r0, r0
    4b72:	42a8      	cmp	r0, r5
    4b74:	d3f8      	bcc.n	4b68 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x8c>
    4b76:	9800      	ldr	r0, [sp, #0]
    4b78:	1c49      	adds	r1, r1, #1
    4b7a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4b7e:	b2c9      	uxtb	r1, r1
    4b80:	9000      	str	r0, [sp, #0]
    4b82:	2905      	cmp	r1, #5
    4b84:	d3e5      	bcc.n	4b52 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x76>
    4b86:	1b00      	subs	r0, r0, r4
    4b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b8a:	0000      	.short	0x0000
    4b8c:	20001564 	.word	0x20001564

00004b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4b90:	b570      	push	{r4, r5, r6, lr}
    4b92:	4604      	mov	r4, r0
    4b94:	f00d fcc7 	bl	12526 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4b98:	b108      	cbz	r0, 4b9e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4b9a:	2010      	movs	r0, #16
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
    4b9e:	7825      	ldrb	r5, [r4, #0]
    4ba0:	f000 f920 	bl	4de4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4ba4:	4602      	mov	r2, r0
    4ba6:	480c      	ldr	r0, [pc, #48]	; (4bd8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4ba8:	8861      	ldrh	r1, [r4, #2]
    4baa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4bae:	e00e      	b.n	4bce <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4bb0:	69c3      	ldr	r3, [r0, #28]
    4bb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4bb6:	b143      	cbz	r3, 4bca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4bb8:	1c4a      	adds	r2, r1, #1
    4bba:	8062      	strh	r2, [r4, #2]
    4bbc:	80a1      	strh	r1, [r4, #4]
    4bbe:	69c0      	ldr	r0, [r0, #28]
    4bc0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4bc4:	60a0      	str	r0, [r4, #8]
    4bc6:	2000      	movs	r0, #0
    4bc8:	bd70      	pop	{r4, r5, r6, pc}
    4bca:	1c49      	adds	r1, r1, #1
    4bcc:	b289      	uxth	r1, r1
    4bce:	4291      	cmp	r1, r2
    4bd0:	d3ee      	bcc.n	4bb0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4bd2:	8061      	strh	r1, [r4, #2]
    4bd4:	2005      	movs	r0, #5
    4bd6:	bd70      	pop	{r4, r5, r6, pc}
    4bd8:	20001564 	.word	0x20001564

00004bdc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4be0:	4607      	mov	r7, r0
    4be2:	b111      	cbz	r1, 4bea <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4be4:	2000      	movs	r0, #0
    4be6:	b938      	cbnz	r0, 4bf8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
    4be8:	e001      	b.n	4bee <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x12>
    4bea:	2001      	movs	r0, #1
    4bec:	e7fb      	b.n	4be6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4bee:	2901      	cmp	r1, #1
    4bf0:	d002      	beq.n	4bf8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
    4bf2:	2000      	movs	r0, #0
    4bf4:	b938      	cbnz	r0, 4c06 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2a>
    4bf6:	e001      	b.n	4bfc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4bf8:	2001      	movs	r0, #1
    4bfa:	e7fb      	b.n	4bf4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x18>
    4bfc:	2902      	cmp	r1, #2
    4bfe:	d002      	beq.n	4c06 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2a>
    4c00:	2000      	movs	r0, #0
    4c02:	b938      	cbnz	r0, 4c14 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
    4c04:	e001      	b.n	4c0a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2e>
    4c06:	2001      	movs	r0, #1
    4c08:	e7fb      	b.n	4c02 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x26>
    4c0a:	2903      	cmp	r1, #3
    4c0c:	d002      	beq.n	4c14 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
    4c0e:	2000      	movs	r0, #0
    4c10:	b960      	cbnz	r0, 4c2c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    4c12:	e001      	b.n	4c18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4c14:	2001      	movs	r0, #1
    4c16:	e7fb      	b.n	4c10 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x34>
    4c18:	2904      	cmp	r1, #4
    4c1a:	d007      	beq.n	4c2c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    4c1c:	2000      	movs	r0, #0
    4c1e:	2800      	cmp	r0, #0
    4c20:	d01f      	beq.n	4c62 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x86>
    4c22:	2400      	movs	r4, #0
    4c24:	4812      	ldr	r0, [pc, #72]	; (4c70 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x94>)
    4c26:	2901      	cmp	r1, #1
    4c28:	d002      	beq.n	4c30 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x54>
    4c2a:	e002      	b.n	4c32 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x56>
    4c2c:	2001      	movs	r0, #1
    4c2e:	e7f6      	b.n	4c1e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x42>
    4c30:	7804      	ldrb	r4, [r0, #0]
    4c32:	2300      	movs	r3, #0
    4c34:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4c38:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    4c3c:	f810 e001 	ldrb.w	lr, [r0, r1]
    4c40:	e008      	b.n	4c54 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x78>
    4c42:	1918      	adds	r0, r3, r4
    4c44:	f8dc 501c 	ldr.w	r5, [ip, #28]
    4c48:	b280      	uxth	r0, r0
    4c4a:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    4c4e:	b125      	cbz	r5, 4c5a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x7e>
    4c50:	1c5b      	adds	r3, r3, #1
    4c52:	b29b      	uxth	r3, r3
    4c54:	459e      	cmp	lr, r3
    4c56:	d8f4      	bhi.n	4c42 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x66>
    4c58:	4630      	mov	r0, r6
    4c5a:	8038      	strh	r0, [r7, #0]
    4c5c:	42b0      	cmp	r0, r6
    4c5e:	d102      	bne.n	4c66 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8a>
    4c60:	2000      	movs	r0, #0
    4c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c6a:	f000 b835 	b.w	4cd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4c6e:	0000      	.short	0x0000
    4c70:	20001564 	.word	0x20001564

00004c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c78:	4607      	mov	r7, r0
    4c7a:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4c7e:	460c      	mov	r4, r1
    4c80:	f243 0602 	movw	r6, #12290	; 0x3002
    4c84:	38ff      	subs	r0, #255	; 0xff
    4c86:	d020      	beq.n	4cca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4c88:	2c05      	cmp	r4, #5
    4c8a:	d302      	bcc.n	4c92 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4c8c:	2007      	movs	r0, #7
    4c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c92:	4638      	mov	r0, r7
    4c94:	f000 f85a 	bl	4d4c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4c98:	0005      	movs	r5, r0
    4c9a:	d016      	beq.n	4cca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4c9c:	480c      	ldr	r0, [pc, #48]	; (4cd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4c9e:	4629      	mov	r1, r5
    4ca0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4ca4:	4638      	mov	r0, r7
    4ca6:	4790      	blx	r2
    4ca8:	480a      	ldr	r0, [pc, #40]	; (4cd4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4caa:	2100      	movs	r1, #0
    4cac:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    4cb0:	69f0      	ldr	r0, [r6, #28]
    4cb2:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    4cb6:	4620      	mov	r0, r4
    4cb8:	f000 f88a 	bl	4dd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4cbc:	4602      	mov	r2, r0
    4cbe:	4629      	mov	r1, r5
    4cc0:	68b0      	ldr	r0, [r6, #8]
    4cc2:	f00d fa32 	bl	1212a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4cc6:	2000      	movs	r0, #0
    4cc8:	e7e1      	b.n	4c8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4cca:	4630      	mov	r0, r6
    4ccc:	e7df      	b.n	4c8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4cce:	0000      	.short	0x0000
    4cd0:	00004e20 	.word	0x00004e20
    4cd4:	20001564 	.word	0x20001564
    4cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cdc:	4690      	mov	r8, r2
    4cde:	460e      	mov	r6, r1
    4ce0:	4607      	mov	r7, r0
    4ce2:	f00d fa6e 	bl	121c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4ce6:	b148      	cbz	r0, 4cfc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4ce8:	4816      	ldr	r0, [pc, #88]	; (4d44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4cea:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4cee:	69e0      	ldr	r0, [r4, #28]
    4cf0:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4cf4:	b128      	cbz	r0, 4d02 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4cf6:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4cfa:	e015      	b.n	4d28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4cfc:	f240 1139 	movw	r1, #313	; 0x139
    4d00:	e012      	b.n	4d28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4d02:	68a0      	ldr	r0, [r4, #8]
    4d04:	2800      	cmp	r0, #0
    4d06:	d01a      	beq.n	4d3e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4d08:	4630      	mov	r0, r6
    4d0a:	f000 f861 	bl	4dd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4d0e:	4601      	mov	r1, r0
    4d10:	68a0      	ldr	r0, [r4, #8]
    4d12:	f00d f9b2 	bl	1207a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4d16:	0005      	movs	r5, r0
    4d18:	d010      	beq.n	4d3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4d1a:	69e0      	ldr	r0, [r4, #28]
    4d1c:	2e05      	cmp	r6, #5
    4d1e:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    4d22:	d304      	bcc.n	4d2e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4d24:	f240 1145 	movw	r1, #325	; 0x145
    4d28:	2017      	movs	r0, #23
    4d2a:	f7ff fcc7 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d2e:	4806      	ldr	r0, [pc, #24]	; (4d48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4d30:	4642      	mov	r2, r8
    4d32:	4629      	mov	r1, r5
    4d34:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    4d38:	4638      	mov	r0, r7
    4d3a:	4798      	blx	r3
    4d3c:	4628      	mov	r0, r5
    4d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d42:	0000      	.short	0x0000
    4d44:	20001564 	.word	0x20001564
    4d48:	00004e0c 	.word	0x00004e0c
    4d4c:	b570      	push	{r4, r5, r6, lr}
    4d4e:	460c      	mov	r4, r1
    4d50:	4605      	mov	r5, r0
    4d52:	f00d fa36 	bl	121c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4d56:	2800      	cmp	r0, #0
    4d58:	d005      	beq.n	4d66 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4d5a:	4803      	ldr	r0, [pc, #12]	; (4d68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4d5c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4d60:	69c0      	ldr	r0, [r0, #28]
    4d62:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4d66:	bd70      	pop	{r4, r5, r6, pc}
    4d68:	20001564 	.word	0x20001564
    4d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d70:	4f16      	ldr	r7, [pc, #88]	; (4dcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4d72:	4688      	mov	r8, r1
    4d74:	4605      	mov	r5, r0
    4d76:	2400      	movs	r4, #0
    4d78:	6828      	ldr	r0, [r5, #0]
    4d7a:	1cc0      	adds	r0, r0, #3
    4d7c:	f020 0003 	bic.w	r0, r0, #3
    4d80:	6028      	str	r0, [r5, #0]
    4d82:	4620      	mov	r0, r4
    4d84:	f000 f824 	bl	4dd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4d88:	5d39      	ldrb	r1, [r7, r4]
    4d8a:	4341      	muls	r1, r0
    4d8c:	f1b8 0f00 	cmp.w	r8, #0
    4d90:	d001      	beq.n	4d96 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4d92:	2000      	movs	r0, #0
    4d94:	e000      	b.n	4d98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4d96:	6828      	ldr	r0, [r5, #0]
    4d98:	9000      	str	r0, [sp, #0]
    4d9a:	b118      	cbz	r0, 4da4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4d9c:	2600      	movs	r6, #0
    4d9e:	b11e      	cbz	r6, 4da8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>
    4da0:	2000      	movs	r0, #0
    4da2:	e002      	b.n	4daa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x136>
    4da4:	2601      	movs	r6, #1
    4da6:	e7fa      	b.n	4d9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4da8:	4668      	mov	r0, sp
    4daa:	f00d f997 	bl	120dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4dae:	b91e      	cbnz	r6, 4db8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>
    4db0:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    4db4:	9a00      	ldr	r2, [sp, #0]
    4db6:	608a      	str	r2, [r1, #8]
    4db8:	6829      	ldr	r1, [r5, #0]
    4dba:	1c64      	adds	r4, r4, #1
    4dbc:	4408      	add	r0, r1
    4dbe:	b2e4      	uxtb	r4, r4
    4dc0:	6028      	str	r0, [r5, #0]
    4dc2:	2c05      	cmp	r4, #5
    4dc4:	d3d8      	bcc.n	4d78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4dca:	0000      	.short	0x0000
    4dcc:	20001564 	.word	0x20001564
    4dd0:	4903      	ldr	r1, [pc, #12]	; (4de0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    4dd2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4dd6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4dda:	1cc0      	adds	r0, r0, #3
    4ddc:	4008      	ands	r0, r1
    4dde:	4770      	bx	lr
    4de0:	00004e34 	.word	0x00004e34
    4de4:	4b08      	ldr	r3, [pc, #32]	; (4e08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x194>)
    4de6:	7818      	ldrb	r0, [r3, #0]
    4de8:	7859      	ldrb	r1, [r3, #1]
    4dea:	4408      	add	r0, r1
    4dec:	b2c1      	uxtb	r1, r0
    4dee:	7898      	ldrb	r0, [r3, #2]
    4df0:	4281      	cmp	r1, r0
    4df2:	d300      	bcc.n	4df6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x182>
    4df4:	4608      	mov	r0, r1
    4df6:	78da      	ldrb	r2, [r3, #3]
    4df8:	4290      	cmp	r0, r2
    4dfa:	d200      	bcs.n	4dfe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18a>
    4dfc:	4610      	mov	r0, r2
    4dfe:	7919      	ldrb	r1, [r3, #4]
    4e00:	4288      	cmp	r0, r1
    4e02:	d200      	bcs.n	4e06 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x192>
    4e04:	4608      	mov	r0, r1
    4e06:	4770      	bx	lr
    4e08:	20001564 	.word	0x20001564
    4e0c:	000121d7 	.word	0x000121d7
    4e10:	000121d7 	.word	0x000121d7
    4e14:	000121d7 	.word	0x000121d7
    4e18:	000121d7 	.word	0x000121d7
    4e1c:	000121d7 	.word	0x000121d7
    4e20:	000140a7 	.word	0x000140a7
    4e24:	00014045 	.word	0x00014045
    4e28:	0001358f 	.word	0x0001358f
    4e2c:	0001546d 	.word	0x0001546d
    4e30:	00015477 	.word	0x00015477
    4e34:	034802e8 	.word	0x034802e8
    4e38:	00800158 	.word	0x00800158
    4e3c:	00000090 	.word	0x00000090

00004e40 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4e40:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e44:	4c27      	ldr	r4, [pc, #156]	; (4ee4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    4e46:	4607      	mov	r7, r0
    4e48:	b081      	sub	sp, #4
    4e4a:	6820      	ldr	r0, [r4, #0]
    4e4c:	469a      	mov	sl, r3
    4e4e:	4693      	mov	fp, r2
    4e50:	b158      	cbz	r0, 4e6a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4e52:	7a01      	ldrb	r1, [r0, #8]
    4e54:	42b9      	cmp	r1, r7
    4e56:	d903      	bls.n	4e60 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4e58:	6840      	ldr	r0, [r0, #4]
    4e5a:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4e5e:	b140      	cbz	r0, 4e72 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4e60:	f243 0002 	movw	r0, #12290	; 0x3002
    4e64:	b005      	add	sp, #20
    4e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e6a:	21a5      	movs	r1, #165	; 0xa5
    4e6c:	2018      	movs	r0, #24
    4e6e:	f7ff fc25 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e72:	4619      	mov	r1, r3
    4e74:	9802      	ldr	r0, [sp, #8]
    4e76:	f00d f9c8 	bl	1220a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4e7a:	4680      	mov	r8, r0
    4e7c:	4658      	mov	r0, fp
    4e7e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4e80:	f00d f9b9 	bl	121f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4e84:	4606      	mov	r6, r0
    4e86:	eb08 0006 	add.w	r0, r8, r6
    4e8a:	1d00      	adds	r0, r0, #4
    4e8c:	b285      	uxth	r5, r0
    4e8e:	6820      	ldr	r0, [r4, #0]
    4e90:	46a1      	mov	r9, r4
    4e92:	4629      	mov	r1, r5
    4e94:	6800      	ldr	r0, [r0, #0]
    4e96:	f00d f8f0 	bl	1207a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4e9a:	0004      	movs	r4, r0
    4e9c:	d01f      	beq.n	4ede <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    4e9e:	8065      	strh	r5, [r4, #2]
    4ea0:	8026      	strh	r6, [r4, #0]
    4ea2:	980e      	ldr	r0, [sp, #56]	; 0x38
    4ea4:	1d25      	adds	r5, r4, #4
    4ea6:	9000      	str	r0, [sp, #0]
    4ea8:	4631      	mov	r1, r6
    4eaa:	465a      	mov	r2, fp
    4eac:	2301      	movs	r3, #1
    4eae:	4628      	mov	r0, r5
    4eb0:	f00d f83b 	bl	11f2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4eb4:	8820      	ldrh	r0, [r4, #0]
    4eb6:	4641      	mov	r1, r8
    4eb8:	4428      	add	r0, r5
    4eba:	230a      	movs	r3, #10
    4ebc:	9a02      	ldr	r2, [sp, #8]
    4ebe:	f8cd a000 	str.w	sl, [sp]
    4ec2:	f00d f832 	bl	11f2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4ec6:	8820      	ldrh	r0, [r4, #0]
    4ec8:	1941      	adds	r1, r0, r5
    4eca:	4628      	mov	r0, r5
    4ecc:	f00d f860 	bl	11f90 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4ed0:	f8d9 0000 	ldr.w	r0, [r9]
    4ed4:	6840      	ldr	r0, [r0, #4]
    4ed6:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4eda:	2000      	movs	r0, #0
    4edc:	e7c2      	b.n	4e64 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4ede:	2004      	movs	r0, #4
    4ee0:	e7c0      	b.n	4e64 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4ee2:	0000      	.short	0x0000
    4ee4:	200000c4 	.word	0x200000c4

00004ee8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4ee8:	b570      	push	{r4, r5, r6, lr}
    4eea:	4c14      	ldr	r4, [pc, #80]	; (4f3c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4eec:	6823      	ldr	r3, [r4, #0]
    4eee:	b18b      	cbz	r3, 4f14 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4ef0:	7a19      	ldrb	r1, [r3, #8]
    4ef2:	4281      	cmp	r1, r0
    4ef4:	d912      	bls.n	4f1c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4ef6:	685a      	ldr	r2, [r3, #4]
    4ef8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4efc:	b171      	cbz	r1, 4f1c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4efe:	2500      	movs	r5, #0
    4f00:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4f04:	884a      	ldrh	r2, [r1, #2]
    4f06:	6818      	ldr	r0, [r3, #0]
    4f08:	f00d f90f 	bl	1212a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4f0c:	6821      	ldr	r1, [r4, #0]
    4f0e:	2000      	movs	r0, #0
    4f10:	7a0a      	ldrb	r2, [r1, #8]
    4f12:	e00c      	b.n	4f2e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4f14:	21c8      	movs	r1, #200	; 0xc8
    4f16:	2018      	movs	r0, #24
    4f18:	f7ff fbd0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f1c:	f243 0002 	movw	r0, #12290	; 0x3002
    4f20:	bd70      	pop	{r4, r5, r6, pc}
    4f22:	684b      	ldr	r3, [r1, #4]
    4f24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4f28:	b933      	cbnz	r3, 4f38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4f2a:	1c40      	adds	r0, r0, #1
    4f2c:	b2c0      	uxtb	r0, r0
    4f2e:	4282      	cmp	r2, r0
    4f30:	d8f7      	bhi.n	4f22 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4f32:	6808      	ldr	r0, [r1, #0]
    4f34:	f00d f8ee 	bl	12114 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4f38:	2000      	movs	r0, #0
    4f3a:	bd70      	pop	{r4, r5, r6, pc}
    4f3c:	200000c4 	.word	0x200000c4

00004f40 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f44:	460d      	mov	r5, r1
    4f46:	0004      	movs	r4, r0
    4f48:	4690      	mov	r8, r2
    4f4a:	f04f 0600 	mov.w	r6, #0
    4f4e:	d009      	beq.n	4f64 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4f50:	2700      	movs	r7, #0
    4f52:	1ce0      	adds	r0, r4, #3
    4f54:	f020 0003 	bic.w	r0, r0, #3
    4f58:	42a0      	cmp	r0, r4
    4f5a:	d005      	beq.n	4f68 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4f5c:	2186      	movs	r1, #134	; 0x86
    4f5e:	2018      	movs	r0, #24
    4f60:	f7ff fbac 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f64:	2701      	movs	r7, #1
    4f66:	e7f4      	b.n	4f52 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4f68:	b1cd      	cbz	r5, 4f9e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4f6a:	4611      	mov	r1, r2
    4f6c:	2000      	movs	r0, #0
    4f6e:	f00d f8b5 	bl	120dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4f72:	300c      	adds	r0, #12
    4f74:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4f78:	b98f      	cbnz	r7, 4f9e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4f7a:	4f0a      	ldr	r7, [pc, #40]	; (4fa4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4f7c:	f104 000c 	add.w	r0, r4, #12
    4f80:	00aa      	lsls	r2, r5, #2
    4f82:	603c      	str	r4, [r7, #0]
    4f84:	7225      	strb	r5, [r4, #8]
    4f86:	6060      	str	r0, [r4, #4]
    4f88:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4f8c:	6020      	str	r0, [r4, #0]
    4f8e:	2100      	movs	r1, #0
    4f90:	6860      	ldr	r0, [r4, #4]
    4f92:	f00c f80b 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4f96:	4641      	mov	r1, r8
    4f98:	6838      	ldr	r0, [r7, #0]
    4f9a:	f00d f89f 	bl	120dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4f9e:	4630      	mov	r0, r6
    4fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fa4:	200000c4 	.word	0x200000c4

00004fa8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4fa8:	b570      	push	{r4, r5, r6, lr}
    4faa:	4d08      	ldr	r5, [pc, #32]	; (4fcc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4fac:	6828      	ldr	r0, [r5, #0]
    4fae:	2800      	cmp	r0, #0
    4fb0:	d00a      	beq.n	4fc8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4fb2:	2400      	movs	r4, #0
    4fb4:	e004      	b.n	4fc0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4fb6:	4620      	mov	r0, r4
    4fb8:	f7ff ff96 	bl	4ee8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4fbc:	1c64      	adds	r4, r4, #1
    4fbe:	b2e4      	uxtb	r4, r4
    4fc0:	6828      	ldr	r0, [r5, #0]
    4fc2:	7a00      	ldrb	r0, [r0, #8]
    4fc4:	42a0      	cmp	r0, r4
    4fc6:	d8f6      	bhi.n	4fb6 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4fc8:	bd70      	pop	{r4, r5, r6, pc}
    4fca:	0000      	.short	0x0000
    4fcc:	200000c4 	.word	0x200000c4

00004fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4fd0:	4909      	ldr	r1, [pc, #36]	; (4ff8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4fd2:	b510      	push	{r4, lr}
    4fd4:	4602      	mov	r2, r0
    4fd6:	6809      	ldr	r1, [r1, #0]
    4fd8:	2000      	movs	r0, #0
    4fda:	b149      	cbz	r1, 4ff0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4fdc:	7a0b      	ldrb	r3, [r1, #8]
    4fde:	4293      	cmp	r3, r2
    4fe0:	d905      	bls.n	4fee <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4fe2:	6849      	ldr	r1, [r1, #4]
    4fe4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4fe8:	2900      	cmp	r1, #0
    4fea:	d000      	beq.n	4fee <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4fec:	1d08      	adds	r0, r1, #4
    4fee:	bd10      	pop	{r4, pc}
    4ff0:	21ee      	movs	r1, #238	; 0xee
    4ff2:	2018      	movs	r0, #24
    4ff4:	f7ff fb62 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ff8:	200000c4 	.word	0x200000c4

00004ffc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4ffc:	490a      	ldr	r1, [pc, #40]	; (5028 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4ffe:	b510      	push	{r4, lr}
    5000:	4602      	mov	r2, r0
    5002:	6809      	ldr	r1, [r1, #0]
    5004:	2000      	movs	r0, #0
    5006:	b159      	cbz	r1, 5020 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5008:	7a0b      	ldrb	r3, [r1, #8]
    500a:	4293      	cmp	r3, r2
    500c:	d907      	bls.n	501e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    500e:	6849      	ldr	r1, [r1, #4]
    5010:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5014:	2900      	cmp	r1, #0
    5016:	d002      	beq.n	501e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5018:	f831 0b04 	ldrh.w	r0, [r1], #4
    501c:	4408      	add	r0, r1
    501e:	bd10      	pop	{r4, pc}
    5020:	21fc      	movs	r1, #252	; 0xfc
    5022:	2018      	movs	r0, #24
    5024:	f7ff fb4a 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5028:	200000c4 	.word	0x200000c4
    502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5030:	4e1c      	ldr	r6, [pc, #112]	; (50a4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xa8>)
    5032:	6845      	ldr	r5, [r0, #4]
    5034:	4604      	mov	r4, r0
    5036:	2200      	movs	r2, #0
    5038:	b1a1      	cbz	r1, 5064 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    503a:	2001      	movs	r0, #1
    503c:	7060      	strb	r0, [r4, #1]
    503e:	8870      	ldrh	r0, [r6, #2]
    5040:	0883      	lsrs	r3, r0, #2
    5042:	2000      	movs	r0, #0
    5044:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5048:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    504c:	830a      	strh	r2, [r1, #24]
    504e:	840b      	strh	r3, [r1, #32]
    5050:	fb00 5103 	mla	r1, r0, r3, r5
    5054:	6071      	str	r1, [r6, #4]
    5056:	1821      	adds	r1, r4, r0
    5058:	1c40      	adds	r0, r0, #1
    505a:	750a      	strb	r2, [r1, #20]
    505c:	2804      	cmp	r0, #4
    505e:	d3f1      	bcc.n	5044 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5064:	7062      	strb	r2, [r4, #1]
    5066:	2000      	movs	r0, #0
    5068:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    506c:	830a      	strh	r2, [r1, #24]
    506e:	840a      	strh	r2, [r1, #32]
    5070:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5074:	604a      	str	r2, [r1, #4]
    5076:	1821      	adds	r1, r4, r0
    5078:	1c40      	adds	r0, r0, #1
    507a:	750a      	strb	r2, [r1, #20]
    507c:	2804      	cmp	r0, #4
    507e:	d3f3      	bcc.n	5068 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5080:	8870      	ldrh	r0, [r6, #2]
    5082:	f00d f941 	bl	12308 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x130>
    5086:	4607      	mov	r7, r0
    5088:	8870      	ldrh	r0, [r6, #2]
    508a:	f00d f944 	bl	12316 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13e>
    508e:	6065      	str	r5, [r4, #4]
    5090:	8420      	strh	r0, [r4, #32]
    5092:	1829      	adds	r1, r5, r0
    5094:	60a1      	str	r1, [r4, #8]
    5096:	8467      	strh	r7, [r4, #34]	; 0x22
    5098:	60e5      	str	r5, [r4, #12]
    509a:	84a0      	strh	r0, [r4, #36]	; 0x24
    509c:	6121      	str	r1, [r4, #16]
    509e:	84e7      	strh	r7, [r4, #38]	; 0x26
    50a0:	e7de      	b.n	5060 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x64>
    50a2:	0000      	.short	0x0000
    50a4:	200000c8 	.word	0x200000c8

000050a8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    50a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50ac:	b180      	cbz	r0, 50d0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    50ae:	2600      	movs	r6, #0
    50b0:	4411      	add	r1, r2
    50b2:	b2cf      	uxtb	r7, r1
    50b4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 5154 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xac>
    50b8:	1cc1      	adds	r1, r0, #3
    50ba:	2400      	movs	r4, #0
    50bc:	f021 0103 	bic.w	r1, r1, #3
    50c0:	f888 7000 	strb.w	r7, [r8]
    50c4:	4281      	cmp	r1, r0
    50c6:	d005      	beq.n	50d4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2c>
    50c8:	214e      	movs	r1, #78	; 0x4e
    50ca:	2009      	movs	r0, #9
    50cc:	f7ff faf6 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50d0:	2601      	movs	r6, #1
    50d2:	e7ed      	b.n	50b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    50d4:	2b1f      	cmp	r3, #31
    50d6:	d804      	bhi.n	50e2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3a>
    50d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    50dc:	ea01 0583 	and.w	r5, r1, r3, lsl #2
    50e0:	e009      	b.n	50f6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4e>
    50e2:	0059      	lsls	r1, r3, #1
    50e4:	2bff      	cmp	r3, #255	; 0xff
    50e6:	d90c      	bls.n	5102 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5a>
    50e8:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    50ec:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    50f0:	d200      	bcs.n	50f4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    50f2:	4611      	mov	r1, r2
    50f4:	b28d      	uxth	r5, r1
    50f6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    50fa:	1ced      	adds	r5, r5, #3
    50fc:	400d      	ands	r5, r1
    50fe:	b136      	cbz	r6, 510e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    5100:	e009      	b.n	5116 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6e>
    5102:	227c      	movs	r2, #124	; 0x7c
    5104:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5108:	d3f4      	bcc.n	50f4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    510a:	217c      	movs	r1, #124	; 0x7c
    510c:	e7f2      	b.n	50f4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    510e:	f8c8 0004 	str.w	r0, [r8, #4]
    5112:	f8a8 5002 	strh.w	r5, [r8, #2]
    5116:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    511a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
    511e:	2100      	movs	r1, #0
    5120:	f04f 0901 	mov.w	r9, #1
    5124:	e00f      	b.n	5146 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9e>
    5126:	b95e      	cbnz	r6, 5140 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x98>
    5128:	f8d8 4004 	ldr.w	r4, [r8, #4]
    512c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    5130:	eb00 0c02 	add.w	ip, r0, r2
    5134:	f804 9033 	strb.w	r9, [r4, r3, lsl #3]
    5138:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    513c:	f8c3 c004 	str.w	ip, [r3, #4]
    5140:	1c49      	adds	r1, r1, #1
    5142:	442a      	add	r2, r5
    5144:	b2c9      	uxtb	r1, r1
    5146:	42b9      	cmp	r1, r7
    5148:	d3ed      	bcc.n	5126 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x7e>
    514a:	1dd2      	adds	r2, r2, #7
    514c:	f022 0007 	bic.w	r0, r2, #7
    5150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5154:	200000c8 	.word	0x200000c8

00005158 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5158:	b570      	push	{r4, r5, r6, lr}
    515a:	4811      	ldr	r0, [pc, #68]	; (51a0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    515c:	2400      	movs	r4, #0
    515e:	4621      	mov	r1, r4
    5160:	7802      	ldrb	r2, [r0, #0]
    5162:	e00c      	b.n	517e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x26>
    5164:	6845      	ldr	r5, [r0, #4]
    5166:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    516a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
    516e:	b123      	cbz	r3, 517a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x22>
    5170:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5174:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
    5178:	e003      	b.n	5182 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2a>
    517a:	1c49      	adds	r1, r1, #1
    517c:	b2c9      	uxtb	r1, r1
    517e:	4291      	cmp	r1, r2
    5180:	d3f0      	bcc.n	5164 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5182:	b144      	cbz	r4, 5196 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3e>
    5184:	2500      	movs	r5, #0
    5186:	70a5      	strb	r5, [r4, #2]
    5188:	2101      	movs	r1, #1
    518a:	4620      	mov	r0, r4
    518c:	f7ff ff4e 	bl	502c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5190:	7025      	strb	r5, [r4, #0]
    5192:	4620      	mov	r0, r4
    5194:	bd70      	pop	{r4, r5, r6, pc}
    5196:	21a9      	movs	r1, #169	; 0xa9
    5198:	2009      	movs	r0, #9
    519a:	f7ff fa8f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    519e:	0000      	.short	0x0000
    51a0:	200000c8 	.word	0x200000c8

000051a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    51a4:	4804      	ldr	r0, [pc, #16]	; (51b8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    51a6:	b510      	push	{r4, lr}
    51a8:	8840      	ldrh	r0, [r0, #2]
    51aa:	0884      	lsrs	r4, r0, #2
    51ac:	f00d f8b3 	bl	12316 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13e>
    51b0:	4284      	cmp	r4, r0
    51b2:	d300      	bcc.n	51b6 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    51b4:	4620      	mov	r0, r4
    51b6:	bd10      	pop	{r4, pc}
    51b8:	200000c8 	.word	0x200000c8

000051bc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    51bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    51c0:	460c      	mov	r4, r1
    51c2:	4607      	mov	r7, r0
    51c4:	4616      	mov	r6, r2
    51c6:	212e      	movs	r1, #46	; 0x2e
    51c8:	4610      	mov	r0, r2
    51ca:	460d      	mov	r5, r1
    51cc:	4622      	mov	r2, r4
    51ce:	f00c ff0e 	bl	11fee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    51d2:	4680      	mov	r8, r0
    51d4:	b157      	cbz	r7, 51ec <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    51d6:	4638      	mov	r0, r7
    51d8:	4641      	mov	r1, r8
    51da:	4632      	mov	r2, r6
    51dc:	462b      	mov	r3, r5
    51de:	9400      	str	r4, [sp, #0]
    51e0:	f00c fea3 	bl	11f2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    51e4:	4803      	ldr	r0, [pc, #12]	; (51f4 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    51e6:	6047      	str	r7, [r0, #4]
    51e8:	7004      	strb	r4, [r0, #0]
    51ea:	7046      	strb	r6, [r0, #1]
    51ec:	4640      	mov	r0, r8
    51ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    51f2:	0000      	.short	0x0000
    51f4:	200000d0 	.word	0x200000d0

000051f8 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>:
    51f8:	4b03      	ldr	r3, [pc, #12]	; (5208 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI+0x10>)
    51fa:	2100      	movs	r1, #0
    51fc:	7818      	ldrb	r0, [r3, #0]
    51fe:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    5202:	6858      	ldr	r0, [r3, #4]
    5204:	f00b bed2 	b.w	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5208:	200000d8 	.word	0x200000d8

0000520c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>:
    520c:	b510      	push	{r4, lr}
    520e:	460c      	mov	r4, r1
    5210:	b110      	cbz	r0, 5218 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xc>
    5212:	2200      	movs	r2, #0
    5214:	b112      	cbz	r2, 521c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x10>
    5216:	e00f      	b.n	5238 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x2c>
    5218:	2201      	movs	r2, #1
    521a:	e7fb      	b.n	5214 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x8>
    521c:	1cc1      	adds	r1, r0, #3
    521e:	f021 0103 	bic.w	r1, r1, #3
    5222:	4281      	cmp	r1, r0
    5224:	d003      	beq.n	522e <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x22>
    5226:	2120      	movs	r1, #32
    5228:	2041      	movs	r0, #65	; 0x41
    522a:	f7ff fa47 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    522e:	4904      	ldr	r1, [pc, #16]	; (5240 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x34>)
    5230:	6048      	str	r0, [r1, #4]
    5232:	700c      	strb	r4, [r1, #0]
    5234:	f7ff ffe0 	bl	51f8 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>
    5238:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    523c:	bd10      	pop	{r4, pc}
    523e:	0000      	.short	0x0000
    5240:	200000d8 	.word	0x200000d8
    5244:	b530      	push	{r4, r5, lr}
    5246:	490d      	ldr	r1, [pc, #52]	; (527c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x70>)
    5248:	2001      	movs	r0, #1
    524a:	6048      	str	r0, [r1, #4]
    524c:	1e82      	subs	r2, r0, #2
    524e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5252:	490b      	ldr	r1, [pc, #44]	; (5280 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x74>)
    5254:	6088      	str	r0, [r1, #8]
    5256:	2300      	movs	r3, #0
    5258:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    525c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5260:	4c08      	ldr	r4, [pc, #32]	; (5284 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x78>)
    5262:	6023      	str	r3, [r4, #0]
    5264:	1d25      	adds	r5, r4, #4
    5266:	6028      	str	r0, [r5, #0]
    5268:	6088      	str	r0, [r1, #8]
    526a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    526e:	6023      	str	r3, [r4, #0]
    5270:	6028      	str	r0, [r5, #0]
    5272:	4906      	ldr	r1, [pc, #24]	; (528c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x80>)
    5274:	4804      	ldr	r0, [pc, #16]	; (5288 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x7c>)
    5276:	6008      	str	r0, [r1, #0]
    5278:	bd30      	pop	{r4, r5, pc}
    527a:	0000      	.short	0x0000
    527c:	4000e000 	.word	0x4000e000
    5280:	4000f000 	.word	0x4000f000
    5284:	4000f500 	.word	0x4000f500
    5288:	3ff60000 	.word	0x3ff60000
    528c:	4001f508 	.word	0x4001f508

00005290 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5290:	b510      	push	{r4, lr}
    5292:	4604      	mov	r4, r0
    5294:	f7ff ffd6 	bl	5244 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x38>
    5298:	f00d f912 	bl	124c0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    529c:	f000 f888 	bl	53b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    52a0:	4905      	ldr	r1, [pc, #20]	; (52b8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    52a2:	4804      	ldr	r0, [pc, #16]	; (52b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    52a4:	6008      	str	r0, [r1, #0]
    52a6:	4620      	mov	r0, r4
    52a8:	f000 f8b8 	bl	541c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    52ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    52b0:	f000 b8d0 	b.w	5454 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    52b4:	3ff60000 	.word	0x3ff60000
    52b8:	4001f508 	.word	0x4001f508
    52bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52c0:	4682      	mov	sl, r0
    52c2:	4838      	ldr	r0, [pc, #224]	; (53a4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    52c4:	f00b fd61 	bl	10d8a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    52c8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 53a4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    52cc:	b128      	cbz	r0, 52da <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    52ce:	2601      	movs	r6, #1
    52d0:	f10b 0001 	add.w	r0, fp, #1
    52d4:	21ff      	movs	r1, #255	; 0xff
    52d6:	7001      	strb	r1, [r0, #0]
    52d8:	e000      	b.n	52dc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    52da:	2600      	movs	r6, #0
    52dc:	f44f 7580 	mov.w	r5, #256	; 0x100
    52e0:	4c31      	ldr	r4, [pc, #196]	; (53a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    52e2:	f04f 0800 	mov.w	r8, #0
    52e6:	1d2f      	adds	r7, r5, #4
    52e8:	2101      	movs	r1, #1
    52ea:	6061      	str	r1, [r4, #4]
    52ec:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    52f0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    52f4:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    52f8:	6021      	str	r1, [r4, #0]
    52fa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 53ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    52fe:	e01c      	b.n	533a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5300:	f8d9 0000 	ldr.w	r0, [r9]
    5304:	06c0      	lsls	r0, r0, #27
    5306:	d518      	bpl.n	533a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5308:	200e      	movs	r0, #14
    530a:	f00d f8e8 	bl	124de <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    530e:	f3ef 8010 	mrs	r0, PRIMASK
    5312:	9000      	str	r0, [sp, #0]
    5314:	b672      	cpsid	i
    5316:	2103      	movs	r1, #3
    5318:	4620      	mov	r0, r4
    531a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    531e:	4629      	mov	r1, r5
    5320:	f00d f8ea 	bl	124f8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5324:	b930      	cbnz	r0, 5334 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5326:	4639      	mov	r1, r7
    5328:	4620      	mov	r0, r4
    532a:	f00d f8e5 	bl	124f8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    532e:	b908      	cbnz	r0, 5334 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5330:	f7fe fef2 	bl	4118 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5334:	9800      	ldr	r0, [sp, #0]
    5336:	b900      	cbnz	r0, 533a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5338:	b662      	cpsie	i
    533a:	4629      	mov	r1, r5
    533c:	4620      	mov	r0, r4
    533e:	f00d f8db 	bl	124f8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5342:	b928      	cbnz	r0, 5350 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    5344:	4639      	mov	r1, r7
    5346:	4620      	mov	r0, r4
    5348:	f00d f8d6 	bl	124f8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    534c:	2800      	cmp	r0, #0
    534e:	d0d7      	beq.n	5300 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    5350:	4639      	mov	r1, r7
    5352:	4620      	mov	r0, r4
    5354:	f00d f8d0 	bl	124f8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5358:	2800      	cmp	r0, #0
    535a:	d1c5      	bne.n	52e8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    535c:	bb06      	cbnz	r6, 53a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    535e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    5362:	f88d 1000 	strb.w	r1, [sp]
    5366:	9900      	ldr	r1, [sp, #0]
    5368:	9100      	str	r1, [sp, #0]
    536a:	f89d 1000 	ldrb.w	r1, [sp]
    536e:	b109      	cbz	r1, 5374 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5370:	2501      	movs	r5, #1
    5372:	e000      	b.n	5376 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    5374:	2500      	movs	r5, #0
    5376:	f10b 0001 	add.w	r0, fp, #1
    537a:	f880 8000 	strb.w	r8, [r0]
    537e:	2003      	movs	r0, #3
    5380:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5384:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5388:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    538c:	200e      	movs	r0, #14
    538e:	f00d f8a6 	bl	124de <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5392:	4804      	ldr	r0, [pc, #16]	; (53a4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5394:	f00b fd10 	bl	10db8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5398:	b115      	cbz	r5, 53a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    539a:	2011      	movs	r0, #17
    539c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53a0:	2000      	movs	r0, #0
    53a2:	e7fb      	b.n	539c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    53a4:	200004ca 	.word	0x200004ca
    53a8:	4000e000 	.word	0x4000e000
    53ac:	e000ed10 	.word	0xe000ed10

000053b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    53b0:	b510      	push	{r4, lr}
    53b2:	4806      	ldr	r0, [pc, #24]	; (53cc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    53b4:	f00b fcfc 	bl	10db0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    53b8:	b118      	cbz	r0, 53c2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    53ba:	2127      	movs	r1, #39	; 0x27
    53bc:	201d      	movs	r0, #29
    53be:	f7ff f97d 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53c2:	4802      	ldr	r0, [pc, #8]	; (53cc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    53c4:	2100      	movs	r1, #0
    53c6:	7041      	strb	r1, [r0, #1]
    53c8:	bd10      	pop	{r4, pc}
    53ca:	0000      	.short	0x0000
    53cc:	200004ca 	.word	0x200004ca

000053d0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    53d0:	b570      	push	{r4, r5, r6, lr}
    53d2:	4911      	ldr	r1, [pc, #68]	; (5418 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    53d4:	680a      	ldr	r2, [r1, #0]
    53d6:	b1ea      	cbz	r2, 5414 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    53d8:	2300      	movs	r3, #0
    53da:	461d      	mov	r5, r3
    53dc:	2401      	movs	r4, #1
    53de:	684a      	ldr	r2, [r1, #4]
    53e0:	1c52      	adds	r2, r2, #1
    53e2:	604a      	str	r2, [r1, #4]
    53e4:	2a0c      	cmp	r2, #12
    53e6:	d300      	bcc.n	53ea <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    53e8:	604d      	str	r5, [r1, #4]
    53ea:	790e      	ldrb	r6, [r1, #4]
    53ec:	fa04 f206 	lsl.w	r2, r4, r6
    53f0:	680e      	ldr	r6, [r1, #0]
    53f2:	4216      	tst	r6, r2
    53f4:	d00b      	beq.n	540e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    53f6:	f3ef 8310 	mrs	r3, PRIMASK
    53fa:	b672      	cpsid	i
    53fc:	680c      	ldr	r4, [r1, #0]
    53fe:	4394      	bics	r4, r2
    5400:	600c      	str	r4, [r1, #0]
    5402:	b903      	cbnz	r3, 5406 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5404:	b662      	cpsie	i
    5406:	6849      	ldr	r1, [r1, #4]
    5408:	6001      	str	r1, [r0, #0]
    540a:	2000      	movs	r0, #0
    540c:	bd70      	pop	{r4, r5, r6, pc}
    540e:	1c5b      	adds	r3, r3, #1
    5410:	2b0c      	cmp	r3, #12
    5412:	d3e4      	bcc.n	53de <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5414:	2005      	movs	r0, #5
    5416:	bd70      	pop	{r4, r5, r6, pc}
    5418:	200000e0 	.word	0x200000e0

0000541c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    541c:	4802      	ldr	r0, [pc, #8]	; (5428 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    541e:	2100      	movs	r1, #0
    5420:	6001      	str	r1, [r0, #0]
    5422:	6041      	str	r1, [r0, #4]
    5424:	4770      	bx	lr
    5426:	0000      	.short	0x0000
    5428:	200000e0 	.word	0x200000e0

0000542c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    542c:	b510      	push	{r4, lr}
    542e:	4c08      	ldr	r4, [pc, #32]	; (5450 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5430:	7861      	ldrb	r1, [r4, #1]
    5432:	b109      	cbz	r1, 5438 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5434:	200f      	movs	r0, #15
    5436:	bd10      	pop	{r4, pc}
    5438:	f7fe fdfa 	bl	4030 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    543c:	7020      	strb	r0, [r4, #0]
    543e:	28ff      	cmp	r0, #255	; 0xff
    5440:	d001      	beq.n	5446 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    5442:	2000      	movs	r0, #0
    5444:	bd10      	pop	{r4, pc}
    5446:	2178      	movs	r1, #120	; 0x78
    5448:	201f      	movs	r0, #31
    544a:	f7ff f937 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    544e:	0000      	.short	0x0000
    5450:	20000000 	.word	0x20000000

00005454 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5454:	4901      	ldr	r1, [pc, #4]	; (545c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5456:	2000      	movs	r0, #0
    5458:	7048      	strb	r0, [r1, #1]
    545a:	4770      	bx	lr
    545c:	20000000 	.word	0x20000000

00005460 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    5460:	4905      	ldr	r1, [pc, #20]	; (5478 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    5462:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    5464:	4282      	cmp	r2, r0
    5466:	bf18      	it	ne
    5468:	4770      	bxne	lr
    546a:	2000      	movs	r0, #0
    546c:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    5470:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5474:	8588      	strh	r0, [r1, #44]	; 0x2c
    5476:	4770      	bx	lr
    5478:	20001638 	.word	0x20001638

0000547c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    547c:	4806      	ldr	r0, [pc, #24]	; (5498 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    547e:	4a07      	ldr	r2, [pc, #28]	; (549c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5480:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    5482:	8852      	ldrh	r2, [r2, #2]
    5484:	4291      	cmp	r1, r2
    5486:	d105      	bne.n	5494 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    5488:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    548c:	2800      	cmp	r0, #0
    548e:	bf1c      	itt	ne
    5490:	2000      	movne	r0, #0
    5492:	4770      	bxne	lr
    5494:	2001      	movs	r0, #1
    5496:	4770      	bx	lr
    5498:	20001638 	.word	0x20001638
    549c:	200004b4 	.word	0x200004b4

000054a0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    54a0:	4901      	ldr	r1, [pc, #4]	; (54a8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    54a2:	8048      	strh	r0, [r1, #2]
    54a4:	4770      	bx	lr
    54a6:	0000      	.short	0x0000
    54a8:	200004b4 	.word	0x200004b4

000054ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    54ac:	4808      	ldr	r0, [pc, #32]	; (54d0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    54ae:	4a09      	ldr	r2, [pc, #36]	; (54d4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    54b0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    54b2:	8852      	ldrh	r2, [r2, #2]
    54b4:	4291      	cmp	r1, r2
    54b6:	d109      	bne.n	54cc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    54b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    54bc:	8581      	strh	r1, [r0, #44]	; 0x2c
    54be:	f810 1f2a 	ldrb.w	r1, [r0, #42]!
    54c2:	b119      	cbz	r1, 54cc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    54c4:	2100      	movs	r1, #0
    54c6:	7001      	strb	r1, [r0, #0]
    54c8:	2001      	movs	r0, #1
    54ca:	4770      	bx	lr
    54cc:	2000      	movs	r0, #0
    54ce:	4770      	bx	lr
    54d0:	20001638 	.word	0x20001638
    54d4:	200004b4 	.word	0x200004b4

000054d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    54d8:	4907      	ldr	r1, [pc, #28]	; (54f8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    54da:	f101 002a 	add.w	r0, r1, #42	; 0x2a
    54de:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    54e2:	2a01      	cmp	r2, #1
    54e4:	bf04      	itt	eq
    54e6:	2000      	moveq	r0, #0
    54e8:	4770      	bxeq	lr
    54ea:	2201      	movs	r2, #1
    54ec:	7002      	strb	r2, [r0, #0]
    54ee:	4803      	ldr	r0, [pc, #12]	; (54fc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    54f0:	8800      	ldrh	r0, [r0, #0]
    54f2:	8588      	strh	r0, [r1, #44]	; 0x2c
    54f4:	4610      	mov	r0, r2
    54f6:	4770      	bx	lr
    54f8:	20001638 	.word	0x20001638
    54fc:	200004b4 	.word	0x200004b4

00005500 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5500:	4907      	ldr	r1, [pc, #28]	; (5520 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5502:	4b08      	ldr	r3, [pc, #32]	; (5524 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    5504:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    5506:	885b      	ldrh	r3, [r3, #2]
    5508:	429a      	cmp	r2, r3
    550a:	d106      	bne.n	551a <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    550c:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    5510:	2a00      	cmp	r2, #0
    5512:	bf1e      	ittt	ne
    5514:	6001      	strne	r1, [r0, #0]
    5516:	2001      	movne	r0, #1
    5518:	4770      	bxne	lr
    551a:	2000      	movs	r0, #0
    551c:	4770      	bx	lr
    551e:	0000      	.short	0x0000
    5520:	20001638 	.word	0x20001638
    5524:	200004b4 	.word	0x200004b4

00005528 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5528:	4909      	ldr	r1, [pc, #36]	; (5550 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    552a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    552c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5530:	3bff      	subs	r3, #255	; 0xff
    5532:	d003      	beq.n	553c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    5534:	2100      	movs	r1, #0
    5536:	6001      	str	r1, [r0, #0]
    5538:	4608      	mov	r0, r1
    553a:	4770      	bx	lr
    553c:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    5540:	4903      	ldr	r1, [pc, #12]	; (5550 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5542:	2a01      	cmp	r2, #1
    5544:	bf1a      	itte	ne
    5546:	6001      	strne	r1, [r0, #0]
    5548:	2001      	movne	r0, #1
    554a:	2000      	moveq	r0, #0
    554c:	4770      	bx	lr
    554e:	0000      	.short	0x0000
    5550:	20001638 	.word	0x20001638

00005554 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5554:	4901      	ldr	r1, [pc, #4]	; (555c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5556:	8008      	strh	r0, [r1, #0]
    5558:	4770      	bx	lr
    555a:	0000      	.short	0x0000
    555c:	200004b4 	.word	0x200004b4

00005560 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    5560:	4905      	ldr	r1, [pc, #20]	; (5578 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
    5562:	2000      	movs	r0, #0
    5564:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    5568:	f64f 70ff 	movw	r0, #65535	; 0xffff
    556c:	8588      	strh	r0, [r1, #44]	; 0x2c
    556e:	4903      	ldr	r1, [pc, #12]	; (557c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
    5570:	8008      	strh	r0, [r1, #0]
    5572:	8048      	strh	r0, [r1, #2]
    5574:	4770      	bx	lr
    5576:	0000      	.short	0x0000
    5578:	20001638 	.word	0x20001638
    557c:	200004b4 	.word	0x200004b4

00005580 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5580:	4905      	ldr	r1, [pc, #20]	; (5598 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5582:	2000      	movs	r0, #0
    5584:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    5588:	f64f 70ff 	movw	r0, #65535	; 0xffff
    558c:	8588      	strh	r0, [r1, #44]	; 0x2c
    558e:	4903      	ldr	r1, [pc, #12]	; (559c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5590:	8008      	strh	r0, [r1, #0]
    5592:	8048      	strh	r0, [r1, #2]
    5594:	4770      	bx	lr
    5596:	0000      	.short	0x0000
    5598:	20001638 	.word	0x20001638
    559c:	200004b4 	.word	0x200004b4

000055a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    55a0:	4a0a      	ldr	r2, [pc, #40]	; (55cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    55a2:	b110      	cbz	r0, 55aa <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    55a4:	2801      	cmp	r0, #1
    55a6:	d007      	beq.n	55b8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    55a8:	e00e      	b.n	55c8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    55aa:	7850      	ldrb	r0, [r2, #1]
    55ac:	b160      	cbz	r0, 55c8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    55ae:	f8d2 0002 	ldr.w	r0, [r2, #2]
    55b2:	6008      	str	r0, [r1, #0]
    55b4:	88d0      	ldrh	r0, [r2, #6]
    55b6:	e004      	b.n	55c2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    55b8:	7810      	ldrb	r0, [r2, #0]
    55ba:	b128      	cbz	r0, 55c8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    55bc:	6890      	ldr	r0, [r2, #8]
    55be:	6008      	str	r0, [r1, #0]
    55c0:	8990      	ldrh	r0, [r2, #12]
    55c2:	8088      	strh	r0, [r1, #4]
    55c4:	2001      	movs	r0, #1
    55c6:	4770      	bx	lr
    55c8:	2000      	movs	r0, #0
    55ca:	4770      	bx	lr
    55cc:	200004cc 	.word	0x200004cc

000055d0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    55d0:	4a09      	ldr	r2, [pc, #36]	; (55f8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x28>)
    55d2:	2301      	movs	r3, #1
    55d4:	b140      	cbz	r0, 55e8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x18>
    55d6:	2801      	cmp	r0, #1
    55d8:	bf18      	it	ne
    55da:	4770      	bxne	lr
    55dc:	7013      	strb	r3, [r2, #0]
    55de:	6808      	ldr	r0, [r1, #0]
    55e0:	6090      	str	r0, [r2, #8]
    55e2:	8888      	ldrh	r0, [r1, #4]
    55e4:	8190      	strh	r0, [r2, #12]
    55e6:	4770      	bx	lr
    55e8:	7053      	strb	r3, [r2, #1]
    55ea:	6808      	ldr	r0, [r1, #0]
    55ec:	f8c2 0002 	str.w	r0, [r2, #2]
    55f0:	8888      	ldrh	r0, [r1, #4]
    55f2:	80d0      	strh	r0, [r2, #6]
    55f4:	4770      	bx	lr
    55f6:	0000      	.short	0x0000
    55f8:	200004cc 	.word	0x200004cc

000055fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    55fc:	4906      	ldr	r1, [pc, #24]	; (5618 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    55fe:	b110      	cbz	r0, 5606 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5600:	2801      	cmp	r0, #1
    5602:	d003      	beq.n	560c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5604:	e006      	b.n	5614 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    5606:	7848      	ldrb	r0, [r1, #1]
    5608:	b910      	cbnz	r0, 5610 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    560a:	e003      	b.n	5614 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    560c:	7808      	ldrb	r0, [r1, #0]
    560e:	b108      	cbz	r0, 5614 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    5610:	2001      	movs	r0, #1
    5612:	4770      	bx	lr
    5614:	2000      	movs	r0, #0
    5616:	4770      	bx	lr
    5618:	200004cc 	.word	0x200004cc

0000561c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    561c:	4901      	ldr	r1, [pc, #4]	; (5624 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    561e:	7708      	strb	r0, [r1, #28]
    5620:	4770      	bx	lr
    5622:	0000      	.short	0x0000
    5624:	20000d5a 	.word	0x20000d5a

00005628 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5628:	4801      	ldr	r0, [pc, #4]	; (5630 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    562a:	78c0      	ldrb	r0, [r0, #3]
    562c:	4770      	bx	lr
    562e:	0000      	.short	0x0000
    5630:	200000e8 	.word	0x200000e8

00005634 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5634:	4801      	ldr	r0, [pc, #4]	; (563c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5636:	7900      	ldrb	r0, [r0, #4]
    5638:	4770      	bx	lr
    563a:	0000      	.short	0x0000
    563c:	200000e8 	.word	0x200000e8

00005640 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    5640:	2000      	movs	r0, #0
    5642:	7048      	strb	r0, [r1, #1]
    5644:	2025      	movs	r0, #37	; 0x25
    5646:	7008      	strb	r0, [r1, #0]
    5648:	4806      	ldr	r0, [pc, #24]	; (5664 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x24>)
    564a:	f8d0 2168 	ldr.w	r2, [r0, #360]	; 0x168
    564e:	604a      	str	r2, [r1, #4]
    5650:	f8d0 216c 	ldr.w	r2, [r0, #364]	; 0x16c
    5654:	608a      	str	r2, [r1, #8]
    5656:	f8d0 2170 	ldr.w	r2, [r0, #368]	; 0x170
    565a:	60ca      	str	r2, [r1, #12]
    565c:	f8b0 0174 	ldrh.w	r0, [r0, #372]	; 0x174
    5660:	8208      	strh	r0, [r1, #16]
    5662:	4770      	bx	lr
    5664:	20000c00 	.word	0x20000c00

00005668 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5668:	b570      	push	{r4, r5, r6, lr}
    566a:	4c08      	ldr	r4, [pc, #32]	; (568c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    566c:	4605      	mov	r5, r0
    566e:	7820      	ldrb	r0, [r4, #0]
    5670:	b118      	cbz	r0, 567a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5672:	21c2      	movs	r1, #194	; 0xc2
    5674:	2027      	movs	r0, #39	; 0x27
    5676:	f7ff f821 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    567a:	4905      	ldr	r1, [pc, #20]	; (5690 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    567c:	2000      	movs	r0, #0
    567e:	7708      	strb	r0, [r1, #28]
    5680:	2101      	movs	r1, #1
    5682:	4804      	ldr	r0, [pc, #16]	; (5694 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x2c>)
    5684:	f00d fb93 	bl	12dae <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5688:	62e5      	str	r5, [r4, #44]	; 0x2c
    568a:	bd70      	pop	{r4, r5, r6, pc}
    568c:	200000e8 	.word	0x200000e8
    5690:	20000d5a 	.word	0x20000d5a
    5694:	20000d30 	.word	0x20000d30

00005698 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5698:	4901      	ldr	r1, [pc, #4]	; (56a0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    569a:	2001      	movs	r0, #1
    569c:	7188      	strb	r0, [r1, #6]
    569e:	4770      	bx	lr
    56a0:	200000e8 	.word	0x200000e8

000056a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    56a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56a8:	4df4      	ldr	r5, [pc, #976]	; (5a7c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3d8>)
    56aa:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    56ae:	782c      	ldrb	r4, [r5, #0]
    56b0:	2c00      	cmp	r4, #0
    56b2:	d166      	bne.n	5782 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xde>
    56b4:	2a00      	cmp	r2, #0
    56b6:	bf1c      	itt	ne
    56b8:	2b00      	cmpne	r3, #0
    56ba:	f1bc 0f00 	cmpne.w	ip, #0
    56be:	d060      	beq.n	5782 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xde>
    56c0:	f8c5 c01c 	str.w	ip, [r5, #28]
    56c4:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    56c8:	f04f 0000 	mov.w	r0, #0
    56cc:	e9c5 2305 	strd	r2, r3, [r5, #20]
    56d0:	71a8      	strb	r0, [r5, #6]
    56d2:	7168      	strb	r0, [r5, #5]
    56d4:	70e8      	strb	r0, [r5, #3]
    56d6:	70a8      	strb	r0, [r5, #2]
    56d8:	7128      	strb	r0, [r5, #4]
    56da:	f8df 83a4 	ldr.w	r8, [pc, #932]	; 5a80 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3dc>
    56de:	81a8      	strh	r0, [r5, #12]
    56e0:	81e8      	strh	r0, [r5, #14]
    56e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    56e6:	f100 0690 	add.w	r6, r0, #144	; 0x90
    56ea:	4604      	mov	r4, r0
    56ec:	f009 ffe4 	bl	f6b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    56f0:	f009 fad0 	bl	ec94 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    56f4:	f994 0076 	ldrsb.w	r0, [r4, #118]	; 0x76
    56f8:	f00a f87a 	bl	f7f0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    56fc:	f104 0020 	add.w	r0, r4, #32
    5700:	f00a fae2 	bl	fcc8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5704:	69a0      	ldr	r0, [r4, #24]
    5706:	f00a fad5 	bl	fcb4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    570a:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    570e:	f00a fb19 	bl	fd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5712:	f898 0000 	ldrb.w	r0, [r8]
    5716:	f641 594c 	movw	r9, #7500	; 0x1d4c
    571a:	2800      	cmp	r0, #0
    571c:	d036      	beq.n	578c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe8>
    571e:	2004      	movs	r0, #4
    5720:	f7fe fd88 	bl	4234 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    5724:	6960      	ldr	r0, [r4, #20]
    5726:	4548      	cmp	r0, r9
    5728:	bf28      	it	cs
    572a:	2096      	movcs	r0, #150	; 0x96
    572c:	d203      	bcs.n	5736 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x92>
    572e:	2001      	movs	r0, #1
    5730:	f00a faa8 	bl	fc84 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    5734:	204d      	movs	r0, #77	; 0x4d
    5736:	f009 ff01 	bl	f53c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    573a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    573e:	f890 026c 	ldrb.w	r0, [r0, #620]	; 0x26c
    5742:	2800      	cmp	r0, #0
    5744:	bf18      	it	ne
    5746:	f009 fee9 	blne	f51c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    574a:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    574e:	2001      	movs	r0, #1
    5750:	f009 fd1c 	bl	f18c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5754:	2800      	cmp	r0, #0
    5756:	bf08      	it	eq
    5758:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    575c:	48c9      	ldr	r0, [pc, #804]	; (5a84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e0>)
    575e:	f009 fe6b 	bl	f438 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5762:	8820      	ldrh	r0, [r4, #0]
    5764:	f7ff fc4a 	bl	4ffc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5768:	6328      	str	r0, [r5, #48]	; 0x30
    576a:	8820      	ldrh	r0, [r4, #0]
    576c:	f7ff fc30 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5770:	6368      	str	r0, [r5, #52]	; 0x34
    5772:	f894 007f 	ldrb.w	r0, [r4, #127]	; 0x7f
    5776:	f88d 0000 	strb.w	r0, [sp]
    577a:	f89d 0000 	ldrb.w	r0, [sp]
    577e:	bb60      	cbnz	r0, 57da <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    5780:	e01b      	b.n	57ba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    5782:	f44f 718d 	mov.w	r1, #282	; 0x11a
    5786:	2027      	movs	r0, #39	; 0x27
    5788:	f7fe ff98 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    578c:	2003      	movs	r0, #3
    578e:	f7fe fd51 	bl	4234 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    5792:	6960      	ldr	r0, [r4, #20]
    5794:	4548      	cmp	r0, r9
    5796:	bf28      	it	cs
    5798:	2096      	movcs	r0, #150	; 0x96
    579a:	d203      	bcs.n	57a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    579c:	2001      	movs	r0, #1
    579e:	f00a fa71 	bl	fc84 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    57a2:	204d      	movs	r0, #77	; 0x4d
    57a4:	f009 feca 	bl	f53c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    57a8:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
    57ac:	2000      	movs	r0, #0
    57ae:	f009 fced 	bl	f18c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    57b2:	2800      	cmp	r0, #0
    57b4:	d1d2      	bne.n	575c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb8>
    57b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57ba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    57bc:	b168      	cbz	r0, 57da <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    57be:	8ff0      	ldrh	r0, [r6, #62]	; 0x3e
    57c0:	88b1      	ldrh	r1, [r6, #4]
    57c2:	4288      	cmp	r0, r1
    57c4:	d109      	bne.n	57da <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    57c6:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    57ca:	2201      	movs	r2, #1
    57cc:	4408      	add	r0, r1
    57ce:	87f0      	strh	r0, [r6, #62]	; 0x3e
    57d0:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    57d4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    57d6:	f7fd fa35 	bl	2c44 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    57da:	f106 0180 	add.w	r1, r6, #128	; 0x80
    57de:	48aa      	ldr	r0, [pc, #680]	; (5a88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e4>)
    57e0:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    57e4:	f500 7784 	add.w	r7, r0, #264	; 0x108
    57e8:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    57ec:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
    57f0:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
    57f4:	f8d6 1094 	ldr.w	r1, [r6, #148]	; 0x94
    57f8:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
    57fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5800:	2701      	movs	r7, #1
    5802:	f100 0190 	add.w	r1, r0, #144	; 0x90
    5806:	f890 c09d 	ldrb.w	ip, [r0, #157]	; 0x9d
    580a:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
    580e:	bf1c      	itt	ne
    5810:	7b89      	ldrbne	r1, [r1, #14]
    5812:	2925      	cmpne	r1, #37	; 0x25
    5814:	d00c      	beq.n	5830 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    5816:	f04f 0308 	mov.w	r3, #8
    581a:	f04f 0202 	mov.w	r2, #2
    581e:	f1bc 0f20 	cmp.w	ip, #32
    5822:	bf18      	it	ne
    5824:	f1bc 0f21 	cmpne.w	ip, #33	; 0x21
    5828:	d02c      	beq.n	5884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1e0>
    582a:	2923      	cmp	r1, #35	; 0x23
    582c:	d050      	beq.n	58d0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>
    582e:	e07e      	b.n	592e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28a>
    5830:	f898 1000 	ldrb.w	r1, [r8]
    5834:	2900      	cmp	r1, #0
    5836:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    583a:	d012      	beq.n	5862 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1be>
    583c:	f890 031e 	ldrb.w	r0, [r0, #798]	; 0x31e
    5840:	2800      	cmp	r0, #0
    5842:	d078      	beq.n	5936 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    5844:	2908      	cmp	r1, #8
    5846:	bf18      	it	ne
    5848:	2904      	cmpne	r1, #4
    584a:	d06d      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    584c:	2808      	cmp	r0, #8
    584e:	bf18      	it	ne
    5850:	2804      	cmpne	r0, #4
    5852:	d069      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    5854:	2901      	cmp	r1, #1
    5856:	bf18      	it	ne
    5858:	2801      	cmpne	r0, #1
    585a:	d055      	beq.n	5908 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x264>
    585c:	f04f 0102 	mov.w	r1, #2
    5860:	e069      	b.n	5936 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    5862:	f890 02a2 	ldrb.w	r0, [r0, #674]	; 0x2a2
    5866:	2800      	cmp	r0, #0
    5868:	d065      	beq.n	5936 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    586a:	2908      	cmp	r1, #8
    586c:	bf18      	it	ne
    586e:	2904      	cmpne	r1, #4
    5870:	d05a      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    5872:	2808      	cmp	r0, #8
    5874:	bf18      	it	ne
    5876:	2804      	cmpne	r0, #4
    5878:	d056      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    587a:	2901      	cmp	r1, #1
    587c:	bf18      	it	ne
    587e:	2801      	cmpne	r0, #1
    5880:	d042      	beq.n	5908 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x264>
    5882:	e7eb      	b.n	585c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>
    5884:	2923      	cmp	r1, #35	; 0x23
    5886:	d023      	beq.n	58d0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>
    5888:	f898 1000 	ldrb.w	r1, [r8]
    588c:	b3e9      	cbz	r1, 590a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x266>
    588e:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    5892:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    5896:	f010 0f04 	tst.w	r0, #4
    589a:	bf18      	it	ne
    589c:	4618      	movne	r0, r3
    589e:	d00c      	beq.n	58ba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x216>
    58a0:	2908      	cmp	r1, #8
    58a2:	bf18      	it	ne
    58a4:	2904      	cmpne	r1, #4
    58a6:	d03f      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    58a8:	2808      	cmp	r0, #8
    58aa:	bf18      	it	ne
    58ac:	2804      	cmpne	r0, #4
    58ae:	d03b      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    58b0:	2901      	cmp	r1, #1
    58b2:	bf18      	it	ne
    58b4:	2801      	cmpne	r0, #1
    58b6:	d027      	beq.n	5908 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x264>
    58b8:	e7d0      	b.n	585c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>
    58ba:	f010 0f01 	tst.w	r0, #1
    58be:	bf18      	it	ne
    58c0:	4638      	movne	r0, r7
    58c2:	d1ed      	bne.n	58a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1fc>
    58c4:	f010 0f02 	tst.w	r0, #2
    58c8:	bf18      	it	ne
    58ca:	4610      	movne	r0, r2
    58cc:	d1e8      	bne.n	58a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1fc>
    58ce:	e032      	b.n	5936 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    58d0:	f898 1000 	ldrb.w	r1, [r8]
    58d4:	b1c9      	cbz	r1, 590a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x266>
    58d6:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    58da:	f890 c146 	ldrb.w	ip, [r0, #326]	; 0x146
    58de:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    58e2:	ea0c 0000 	and.w	r0, ip, r0
    58e6:	f010 0f04 	tst.w	r0, #4
    58ea:	bf18      	it	ne
    58ec:	4618      	movne	r0, r3
    58ee:	d010      	beq.n	5912 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x26e>
    58f0:	2908      	cmp	r1, #8
    58f2:	bf18      	it	ne
    58f4:	2904      	cmpne	r1, #4
    58f6:	d017      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    58f8:	2808      	cmp	r0, #8
    58fa:	bf18      	it	ne
    58fc:	2804      	cmpne	r0, #4
    58fe:	d013      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    5900:	2901      	cmp	r1, #1
    5902:	bf18      	it	ne
    5904:	2801      	cmpne	r0, #1
    5906:	d1a9      	bne.n	585c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>
    5908:	e000      	b.n	590c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x268>
    590a:	e010      	b.n	592e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28a>
    590c:	f04f 0101 	mov.w	r1, #1
    5910:	e011      	b.n	5936 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    5912:	f010 0f01 	tst.w	r0, #1
    5916:	bf18      	it	ne
    5918:	4638      	movne	r0, r7
    591a:	d1e9      	bne.n	58f0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x24c>
    591c:	f010 0f02 	tst.w	r0, #2
    5920:	bf18      	it	ne
    5922:	4610      	movne	r0, r2
    5924:	d1e4      	bne.n	58f0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x24c>
    5926:	e006      	b.n	5936 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    5928:	f04f 0108 	mov.w	r1, #8
    592c:	e003      	b.n	5936 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    592e:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    5932:	2904      	cmp	r1, #4
    5934:	d0f8      	beq.n	5928 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    5936:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
    593a:	f011 0f0c 	tst.w	r1, #12
    593e:	bf18      	it	ne
    5940:	f44f 6029 	movne.w	r0, #2704	; 0xa90
    5944:	f00c ff63 	bl	1280e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5948:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    594a:	4281      	cmp	r1, r0
    594c:	bf38      	it	cc
    594e:	4608      	movcc	r0, r1
    5950:	7228      	strb	r0, [r5, #8]
    5952:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    5956:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    595a:	f896 b014 	ldrb.w	fp, [r6, #20]
    595e:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
    5962:	2908      	cmp	r1, #8
    5964:	d031      	beq.n	59ca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x326>
    5966:	f00c ff52 	bl	1280e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    596a:	bf00      	nop
    596c:	f1bb 0f00 	cmp.w	fp, #0
    5970:	bf04      	itt	eq
    5972:	1d00      	addeq	r0, r0, #4
    5974:	b280      	uxtheq	r0, r0
    5976:	4582      	cmp	sl, r0
    5978:	bf38      	it	cc
    597a:	4650      	movcc	r0, sl
    597c:	b2c2      	uxtb	r2, r0
    597e:	726a      	strb	r2, [r5, #9]
    5980:	7d31      	ldrb	r1, [r6, #20]
    5982:	2900      	cmp	r1, #0
    5984:	bf14      	ite	ne
    5986:	2004      	movne	r0, #4
    5988:	2000      	moveq	r0, #0
    598a:	4410      	add	r0, r2
    598c:	71e8      	strb	r0, [r5, #7]
    598e:	f898 3000 	ldrb.w	r3, [r8]
    5992:	483e      	ldr	r0, [pc, #248]	; (5a8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e8>)
    5994:	b1eb      	cbz	r3, 59d2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x32e>
    5996:	b3e9      	cbz	r1, 5a14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x370>
    5998:	7607      	strb	r7, [r0, #24]
    599a:	e9d6 131e 	ldrd	r1, r3, [r6, #120]	; 0x78
    599e:	e9c0 1304 	strd	r1, r3, [r0, #16]
    59a2:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    59a6:	2001      	movs	r0, #1
    59a8:	2901      	cmp	r1, #1
    59aa:	bf08      	it	eq
    59ac:	2300      	moveq	r3, #0
    59ae:	d03d      	beq.n	5a2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x388>
    59b0:	2902      	cmp	r1, #2
    59b2:	bf08      	it	eq
    59b4:	2301      	moveq	r3, #1
    59b6:	d039      	beq.n	5a2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x388>
    59b8:	2904      	cmp	r1, #4
    59ba:	bf08      	it	eq
    59bc:	2303      	moveq	r3, #3
    59be:	d035      	beq.n	5a2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x388>
    59c0:	2908      	cmp	r1, #8
    59c2:	bf08      	it	eq
    59c4:	2302      	moveq	r3, #2
    59c6:	d031      	beq.n	5a2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x388>
    59c8:	e021      	b.n	5a0e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x36a>
    59ca:	2104      	movs	r1, #4
    59cc:	f00c ff1f 	bl	1280e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    59d0:	e7cc      	b.n	596c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2c8>
    59d2:	7cf1      	ldrb	r1, [r6, #19]
    59d4:	b331      	cbz	r1, 5a24 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x380>
    59d6:	7607      	strb	r7, [r0, #24]
    59d8:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
    59dc:	e9c0 1204 	strd	r1, r2, [r0, #16]
    59e0:	6960      	ldr	r0, [r4, #20]
    59e2:	4548      	cmp	r0, r9
    59e4:	bf2c      	ite	cs
    59e6:	2000      	movcs	r0, #0
    59e8:	2004      	movcc	r0, #4
    59ea:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
    59ee:	2901      	cmp	r1, #1
    59f0:	bf08      	it	eq
    59f2:	2300      	moveq	r3, #0
    59f4:	d012      	beq.n	5a1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x378>
    59f6:	2902      	cmp	r1, #2
    59f8:	bf08      	it	eq
    59fa:	2301      	moveq	r3, #1
    59fc:	d00e      	beq.n	5a1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x378>
    59fe:	2904      	cmp	r1, #4
    5a00:	bf08      	it	eq
    5a02:	2303      	moveq	r3, #3
    5a04:	d00a      	beq.n	5a1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x378>
    5a06:	2908      	cmp	r1, #8
    5a08:	bf08      	it	eq
    5a0a:	2302      	moveq	r3, #2
    5a0c:	d006      	beq.n	5a1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x378>
    5a0e:	f240 31f3 	movw	r1, #1011	; 0x3f3
    5a12:	e000      	b.n	5a16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x372>
    5a14:	e00d      	b.n	5a32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x38e>
    5a16:	2006      	movs	r0, #6
    5a18:	f7fe fe50 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a1c:	22fb      	movs	r2, #251	; 0xfb
    5a1e:	491b      	ldr	r1, [pc, #108]	; (5a8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e8>)
    5a20:	f009 f870 	bl	eb04 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5a24:	2001      	movs	r0, #1
    5a26:	f000 fcaf 	bl	6388 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>
    5a2a:	e005      	b.n	5a38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x394>
    5a2c:	4917      	ldr	r1, [pc, #92]	; (5a8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e8>)
    5a2e:	f009 f869 	bl	eb04 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5a32:	2001      	movs	r0, #1
    5a34:	f000 fc3a 	bl	62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6cc>
    5a38:	4815      	ldr	r0, [pc, #84]	; (5a90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ec>)
    5a3a:	6800      	ldr	r0, [r0, #0]
    5a3c:	2803      	cmp	r0, #3
    5a3e:	bf18      	it	ne
    5a40:	280b      	cmpne	r0, #11
    5a42:	d015      	beq.n	5a70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3cc>
    5a44:	4810      	ldr	r0, [pc, #64]	; (5a88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e4>)
    5a46:	f04f 0100 	mov.w	r1, #0
    5a4a:	f8c0 115a 	str.w	r1, [r0, #346]	; 0x15a
    5a4e:	f8c0 115e 	str.w	r1, [r0, #350]	; 0x15e
    5a52:	f8c0 1162 	str.w	r1, [r0, #354]	; 0x162
    5a56:	f8a0 1166 	strh.w	r1, [r0, #358]	; 0x166
    5a5a:	f500 70ad 	add.w	r0, r0, #346	; 0x15a
    5a5e:	88b1      	ldrh	r1, [r6, #4]
    5a60:	8041      	strh	r1, [r0, #2]
    5a62:	8821      	ldrh	r1, [r4, #0]
    5a64:	8001      	strh	r1, [r0, #0]
    5a66:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    5a6a:	7101      	strb	r1, [r0, #4]
    5a6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a70:	f240 11d5 	movw	r1, #469	; 0x1d5
    5a74:	f04f 0027 	mov.w	r0, #39	; 0x27
    5a78:	f7fe fe20 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a7c:	200000e8 	.word	0x200000e8
    5a80:	20000120 	.word	0x20000120
    5a84:	00006590 	.word	0x00006590
    5a88:	20000c00 	.word	0x20000c00
    5a8c:	20000d08 	.word	0x20000d08
    5a90:	40001550 	.word	0x40001550

00005a94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a98:	4d45      	ldr	r5, [pc, #276]	; (5bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x11c>)
    5a9a:	0006      	movs	r6, r0
    5a9c:	4843      	ldr	r0, [pc, #268]	; (5bac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x118>)
    5a9e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5aa0:	f04f 0700 	mov.w	r7, #0
    5aa4:	6840      	ldr	r0, [r0, #4]
    5aa6:	f891 8001 	ldrb.w	r8, [r1, #1]
    5aaa:	f100 0490 	add.w	r4, r0, #144	; 0x90
    5aae:	bf14      	ite	ne
    5ab0:	2e01      	cmpne	r6, #1
    5ab2:	706f      	strbeq	r7, [r5, #1]
    5ab4:	7868      	ldrb	r0, [r5, #1]
    5ab6:	f04f 0901 	mov.w	r9, #1
    5aba:	b150      	cbz	r0, 5ad2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    5abc:	2801      	cmp	r0, #1
    5abe:	d02e      	beq.n	5b1e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    5ac0:	2802      	cmp	r0, #2
    5ac2:	d053      	beq.n	5b6c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>
    5ac4:	2803      	cmp	r0, #3
    5ac6:	d065      	beq.n	5b94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x100>
    5ac8:	f240 411d 	movw	r1, #1053	; 0x41d
    5acc:	2027      	movs	r0, #39	; 0x27
    5ace:	f7fe fdf5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ad2:	2e01      	cmp	r6, #1
    5ad4:	d011      	beq.n	5afa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5ad6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5ad8:	2800      	cmp	r0, #0
    5ada:	d042      	beq.n	5b62 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xce>
    5adc:	896a      	ldrh	r2, [r5, #10]
    5ade:	1cd2      	adds	r2, r2, #3
    5ae0:	f00b f9ea 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5ae4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5ae6:	6268      	str	r0, [r5, #36]	; 0x24
    5ae8:	2201      	movs	r2, #1
    5aea:	4641      	mov	r1, r8
    5aec:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5aee:	f00c f8a6 	bl	11c3e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5af2:	2e02      	cmp	r6, #2
    5af4:	bf08      	it	eq
    5af6:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5afa:	e9d4 101e 	ldrd	r1, r0, [r4, #120]	; 0x78
    5afe:	1c49      	adds	r1, r1, #1
    5b00:	f140 0000 	adc.w	r0, r0, #0
    5b04:	e9c4 101e 	strd	r1, r0, [r4, #120]	; 0x78
    5b08:	7a20      	ldrb	r0, [r4, #8]
    5b0a:	2801      	cmp	r0, #1
    5b0c:	d101      	bne.n	5b12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7e>
    5b0e:	7227      	strb	r7, [r4, #8]
    5b10:	e001      	b.n	5b16 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x82>
    5b12:	f884 9008 	strb.w	r9, [r4, #8]
    5b16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b1a:	f001 bf0d 	b.w	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5b1e:	2e01      	cmp	r6, #1
    5b20:	d010      	beq.n	5b44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xb0>
    5b22:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5b24:	b1e8      	cbz	r0, 5b62 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xce>
    5b26:	896a      	ldrh	r2, [r5, #10]
    5b28:	1cd2      	adds	r2, r2, #3
    5b2a:	f00b f9c5 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b2e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5b30:	6268      	str	r0, [r5, #36]	; 0x24
    5b32:	2200      	movs	r2, #0
    5b34:	4641      	mov	r1, r8
    5b36:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5b38:	f00c f881 	bl	11c3e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5b3c:	2e02      	cmp	r6, #2
    5b3e:	bf08      	it	eq
    5b40:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b44:	e9d4 101e 	ldrd	r1, r0, [r4, #120]	; 0x78
    5b48:	1c49      	adds	r1, r1, #1
    5b4a:	f140 0000 	adc.w	r0, r0, #0
    5b4e:	e9c4 101e 	strd	r1, r0, [r4, #120]	; 0x78
    5b52:	7a20      	ldrb	r0, [r4, #8]
    5b54:	2801      	cmp	r0, #1
    5b56:	bf0c      	ite	eq
    5b58:	7227      	strbeq	r7, [r4, #8]
    5b5a:	f884 9008 	strbne.w	r9, [r4, #8]
    5b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b62:	f240 4163 	movw	r1, #1123	; 0x463
    5b66:	2027      	movs	r0, #39	; 0x27
    5b68:	f7fe fda8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b6c:	2e01      	cmp	r6, #1
    5b6e:	d006      	beq.n	5b7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xea>
    5b70:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5b72:	f00c fa7d 	bl	12070 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5b76:	2e02      	cmp	r6, #2
    5b78:	bf08      	it	eq
    5b7a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b7e:	e9d4 101e 	ldrd	r1, r0, [r4, #120]	; 0x78
    5b82:	1c49      	adds	r1, r1, #1
    5b84:	f140 0000 	adc.w	r0, r0, #0
    5b88:	e9c4 101e 	strd	r1, r0, [r4, #120]	; 0x78
    5b8c:	7a20      	ldrb	r0, [r4, #8]
    5b8e:	2801      	cmp	r0, #1
    5b90:	d1bf      	bne.n	5b12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7e>
    5b92:	e7bc      	b.n	5b0e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7a>
    5b94:	2e01      	cmp	r6, #1
    5b96:	bf08      	it	eq
    5b98:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b9c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5b9e:	f00c fa67 	bl	12070 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ba2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ba6:	f001 bec7 	b.w	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5baa:	0000      	.short	0x0000
    5bac:	20000120 	.word	0x20000120
    5bb0:	200000e8 	.word	0x200000e8

00005bb4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5bb4:	4802      	ldr	r0, [pc, #8]	; (5bc0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5bb6:	89c0      	ldrh	r0, [r0, #14]
    5bb8:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5bbc:	4770      	bx	lr
    5bbe:	0000      	.short	0x0000
    5bc0:	200000e8 	.word	0x200000e8

00005bc4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5bc4:	4804      	ldr	r0, [pc, #16]	; (5bd8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5bc6:	7800      	ldrb	r0, [r0, #0]
    5bc8:	2800      	cmp	r0, #0
    5bca:	bf1c      	itt	ne
    5bcc:	200c      	movne	r0, #12
    5bce:	4770      	bxne	lr
    5bd0:	2000      	movs	r0, #0
    5bd2:	4902      	ldr	r1, [pc, #8]	; (5bdc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5bd4:	7708      	strb	r0, [r1, #28]
    5bd6:	4770      	bx	lr
    5bd8:	200000e8 	.word	0x200000e8
    5bdc:	20000d5a 	.word	0x20000d5a

00005be0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5be0:	b538      	push	{r3, r4, r5, lr}
    5be2:	481a      	ldr	r0, [pc, #104]	; (5c4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>)
    5be4:	7801      	ldrb	r1, [r0, #0]
    5be6:	f100 0438 	add.w	r4, r0, #56	; 0x38
    5bea:	b149      	cbz	r1, 5c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    5bec:	7821      	ldrb	r1, [r4, #0]
    5bee:	7800      	ldrb	r0, [r0, #0]
    5bf0:	b149      	cbz	r1, 5c06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26>
    5bf2:	2802      	cmp	r0, #2
    5bf4:	d00e      	beq.n	5c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>
    5bf6:	f240 11f1 	movw	r1, #497	; 0x1f1
    5bfa:	2027      	movs	r0, #39	; 0x27
    5bfc:	f7fe fd5e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c00:	f000 fabc 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    5c04:	e00b      	b.n	5c1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    5c06:	2801      	cmp	r0, #1
    5c08:	d009      	beq.n	5c1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    5c0a:	f240 11ed 	movw	r1, #493	; 0x1ed
    5c0e:	2027      	movs	r0, #39	; 0x27
    5c10:	f7fe fd54 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c14:	6860      	ldr	r0, [r4, #4]
    5c16:	f8d0 0280 	ldr.w	r0, [r0, #640]	; 0x280
    5c1a:	f009 fc23 	bl	f464 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5c1e:	6860      	ldr	r0, [r4, #4]
    5c20:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    5c24:	f88d 1000 	strb.w	r1, [sp]
    5c28:	f89d 1000 	ldrb.w	r1, [sp]
    5c2c:	2900      	cmp	r1, #0
    5c2e:	bf18      	it	ne
    5c30:	bd38      	popne	{r3, r4, r5, pc}
    5c32:	6f81      	ldr	r1, [r0, #120]	; 0x78
    5c34:	2900      	cmp	r1, #0
    5c36:	bf08      	it	eq
    5c38:	bd38      	popeq	{r3, r4, r5, pc}
    5c3a:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    5c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5c42:	2200      	movs	r2, #0
    5c44:	4611      	mov	r1, r2
    5c46:	f7fc bffd 	b.w	2c44 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5c4a:	0000      	.short	0x0000
    5c4c:	200000e8 	.word	0x200000e8
    5c50:	2901      	cmp	r1, #1
    5c52:	bf84      	itt	hi
    5c54:	2001      	movhi	r0, #1
    5c56:	4770      	bxhi	lr
    5c58:	b570      	push	{r4, r5, r6, lr}
    5c5a:	4c1b      	ldr	r4, [pc, #108]	; (5cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>)
    5c5c:	4605      	mov	r5, r0
    5c5e:	69a1      	ldr	r1, [r4, #24]
    5c60:	4788      	blx	r1
    5c62:	2800      	cmp	r0, #0
    5c64:	d02c      	beq.n	5cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5c66:	7960      	ldrb	r0, [r4, #5]
    5c68:	bb50      	cbnz	r0, 5cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5c6a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5c6e:	7801      	ldrb	r1, [r0, #0]
    5c70:	2900      	cmp	r1, #0
    5c72:	bf08      	it	eq
    5c74:	2d01      	cmpeq	r5, #1
    5c76:	d001      	beq.n	5c7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>
    5c78:	b321      	cbz	r1, 5cc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5c7a:	bb1d      	cbnz	r5, 5cc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5c7c:	4813      	ldr	r0, [pc, #76]	; (5ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>)
    5c7e:	7802      	ldrb	r2, [r0, #0]
    5c80:	f012 0f10 	tst.w	r2, #16
    5c84:	d106      	bne.n	5c94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    5c86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5c88:	7800      	ldrb	r0, [r0, #0]
    5c8a:	f010 0f10 	tst.w	r0, #16
    5c8e:	bf08      	it	eq
    5c90:	2001      	moveq	r0, #1
    5c92:	d001      	beq.n	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5c94:	f04f 0000 	mov.w	r0, #0
    5c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5c9a:	b923      	cbnz	r3, 5ca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc6>
    5c9c:	8963      	ldrh	r3, [r4, #10]
    5c9e:	b113      	cbz	r3, 5ca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc6>
    5ca0:	f012 0f10 	tst.w	r2, #16
    5ca4:	d00c      	beq.n	5cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5ca6:	2900      	cmp	r1, #0
    5ca8:	bf1c      	itt	ne
    5caa:	7b21      	ldrbne	r1, [r4, #12]
    5cac:	f011 0f02 	tstne.w	r1, #2
    5cb0:	d003      	beq.n	5cba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    5cb2:	6a21      	ldr	r1, [r4, #32]
    5cb4:	78c9      	ldrb	r1, [r1, #3]
    5cb6:	2902      	cmp	r1, #2
    5cb8:	d004      	beq.n	5cc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5cba:	89a1      	ldrh	r1, [r4, #12]
    5cbc:	4308      	orrs	r0, r1
    5cbe:	d001      	beq.n	5cc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5cc0:	2001      	movs	r0, #1
    5cc2:	bd70      	pop	{r4, r5, r6, pc}
    5cc4:	2000      	movs	r0, #0
    5cc6:	bd70      	pop	{r4, r5, r6, pc}
    5cc8:	200000e8 	.word	0x200000e8
    5ccc:	200000f8 	.word	0x200000f8
    5cd0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cd4:	4ede      	ldr	r6, [pc, #888]	; (6050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>)
    5cd6:	4682      	mov	sl, r0
    5cd8:	b083      	sub	sp, #12
    5cda:	6870      	ldr	r0, [r6, #4]
    5cdc:	f04f 0900 	mov.w	r9, #0
    5ce0:	f1a6 0538 	sub.w	r5, r6, #56	; 0x38
    5ce4:	f100 0890 	add.w	r8, r0, #144	; 0x90
    5ce8:	f88d 9000 	strb.w	r9, [sp]
    5cec:	f8cd 9004 	str.w	r9, [sp, #4]
    5cf0:	7828      	ldrb	r0, [r5, #0]
    5cf2:	464f      	mov	r7, r9
    5cf4:	2802      	cmp	r0, #2
    5cf6:	d004      	beq.n	5d02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    5cf8:	f240 41ea 	movw	r1, #1258	; 0x4ea
    5cfc:	2027      	movs	r0, #39	; 0x27
    5cfe:	f7fe fcdd 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d02:	7ba8      	ldrb	r0, [r5, #14]
    5d04:	f010 0f40 	tst.w	r0, #64	; 0x40
    5d08:	d107      	bne.n	5d1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x13a>
    5d0a:	2040      	movs	r0, #64	; 0x40
    5d0c:	696a      	ldr	r2, [r5, #20]
    5d0e:	2100      	movs	r1, #0
    5d10:	4790      	blx	r2
    5d12:	89e8      	ldrh	r0, [r5, #14]
    5d14:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5d18:	81e8      	strh	r0, [r5, #14]
    5d1a:	f898 0014 	ldrb.w	r0, [r8, #20]
    5d1e:	f1ba 0f00 	cmp.w	sl, #0
    5d22:	f000 80d3 	beq.w	5ecc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    5d26:	f04f 0b01 	mov.w	fp, #1
    5d2a:	b1a8      	cbz	r0, 5d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5d2c:	f008 fff0 	bl	ed10 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5d30:	f008 ffca 	bl	ecc8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5d34:	b980      	cbnz	r0, 5d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5d36:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5d38:	7841      	ldrb	r1, [r0, #1]
    5d3a:	b169      	cbz	r1, 5d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5d3c:	7800      	ldrb	r0, [r0, #0]
    5d3e:	f898 1008 	ldrb.w	r1, [r8, #8]
    5d42:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5d46:	4288      	cmp	r0, r1
    5d48:	d106      	bne.n	5d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5d4a:	f885 b002 	strb.w	fp, [r5, #2]
    5d4e:	f000 fa15 	bl	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    5d52:	b005      	add	sp, #20
    5d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d58:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5d5a:	7841      	ldrb	r1, [r0, #1]
    5d5c:	8169      	strh	r1, [r5, #10]
    5d5e:	2900      	cmp	r1, #0
    5d60:	bf08      	it	eq
    5d62:	62af      	streq	r7, [r5, #40]	; 0x28
    5d64:	d003      	beq.n	5d6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18e>
    5d66:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5d68:	f00c f94f 	bl	1200a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5d6c:	62a8      	str	r0, [r5, #40]	; 0x28
    5d6e:	89e8      	ldrh	r0, [r5, #14]
    5d70:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5d74:	81e8      	strh	r0, [r5, #14]
    5d76:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5d78:	f898 1007 	ldrb.w	r1, [r8, #7]
    5d7c:	7800      	ldrb	r0, [r0, #0]
    5d7e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5d82:	4288      	cmp	r0, r1
    5d84:	bf08      	it	eq
    5d86:	f04f 0901 	moveq.w	r9, #1
    5d8a:	d045      	beq.n	5e18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    5d8c:	6870      	ldr	r0, [r6, #4]
    5d8e:	a901      	add	r1, sp, #4
    5d90:	f100 0490 	add.w	r4, r0, #144	; 0x90
    5d94:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    5d98:	2800      	cmp	r0, #0
    5d9a:	d039      	beq.n	5e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x230>
    5d9c:	2802      	cmp	r0, #2
    5d9e:	d10b      	bne.n	5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d8>
    5da0:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5da2:	f00b ff20 	bl	11be6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5da6:	2800      	cmp	r0, #0
    5da8:	d04a      	beq.n	5e40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    5daa:	e9d4 021c 	ldrd	r0, r2, [r4, #112]	; 0x70
    5dae:	1c41      	adds	r1, r0, #1
    5db0:	f142 0000 	adc.w	r0, r2, #0
    5db4:	e9c4 101c 	strd	r1, r0, [r4, #112]	; 0x70
    5db8:	71a7      	strb	r7, [r4, #6]
    5dba:	7830      	ldrb	r0, [r6, #0]
    5dbc:	2800      	cmp	r0, #0
    5dbe:	bf1c      	itt	ne
    5dc0:	78a0      	ldrbne	r0, [r4, #2]
    5dc2:	2800      	cmpne	r0, #0
    5dc4:	d009      	beq.n	5dda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fa>
    5dc6:	70a7      	strb	r7, [r4, #2]
    5dc8:	89aa      	ldrh	r2, [r5, #12]
    5dca:	4639      	mov	r1, r7
    5dcc:	f042 0210 	orr.w	r2, r2, #16
    5dd0:	81aa      	strh	r2, [r5, #12]
    5dd2:	696a      	ldr	r2, [r5, #20]
    5dd4:	f04f 0010 	mov.w	r0, #16
    5dd8:	4790      	blx	r2
    5dda:	7860      	ldrb	r0, [r4, #1]
    5ddc:	b190      	cbz	r0, 5e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    5dde:	7067      	strb	r7, [r4, #1]
    5de0:	f7ff fb64 	bl	54ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5de4:	b390      	cbz	r0, 5e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    5de6:	89aa      	ldrh	r2, [r5, #12]
    5de8:	2008      	movs	r0, #8
    5dea:	f042 0208 	orr.w	r2, r2, #8
    5dee:	81aa      	strh	r2, [r5, #12]
    5df0:	696a      	ldr	r2, [r5, #20]
    5df2:	2100      	movs	r1, #0
    5df4:	4790      	blx	r2
    5df6:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	; 0x70
    5dfa:	1c49      	adds	r1, r1, #1
    5dfc:	f140 0000 	adc.w	r0, r0, #0
    5e00:	e9c4 101c 	strd	r1, r0, [r4, #112]	; 0x70
    5e04:	79e0      	ldrb	r0, [r4, #7]
    5e06:	2801      	cmp	r0, #1
    5e08:	bf0c      	ite	eq
    5e0a:	71e7      	strbeq	r7, [r4, #7]
    5e0c:	f884 b007 	strbne.w	fp, [r4, #7]
    5e10:	89e8      	ldrh	r0, [r5, #14]
    5e12:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5e16:	81e8      	strh	r0, [r5, #14]
    5e18:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5e1a:	f898 1008 	ldrb.w	r1, [r8, #8]
    5e1e:	7800      	ldrb	r0, [r0, #0]
    5e20:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5e24:	4288      	cmp	r0, r1
    5e26:	d122      	bne.n	5e6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5e28:	f001 fdde 	bl	79e8 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
    5e2c:	b1e0      	cbz	r0, 5e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    5e2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5e30:	7801      	ldrb	r1, [r0, #0]
    5e32:	f001 0103 	and.w	r1, r1, #3
    5e36:	2901      	cmp	r1, #1
    5e38:	bf18      	it	ne
    5e3a:	2902      	cmpne	r1, #2
    5e3c:	d00b      	beq.n	5e56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x276>
    5e3e:	e013      	b.n	5e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    5e40:	f240 31b9 	movw	r1, #953	; 0x3b9
    5e44:	f04f 0027 	mov.w	r0, #39	; 0x27
    5e48:	f7fe fc38 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e4c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5e50:	2027      	movs	r0, #39	; 0x27
    5e52:	f7fe fc33 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e56:	7840      	ldrb	r0, [r0, #1]
    5e58:	79e9      	ldrb	r1, [r5, #7]
    5e5a:	4288      	cmp	r0, r1
    5e5c:	d904      	bls.n	5e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    5e5e:	7968      	ldrb	r0, [r5, #5]
    5e60:	f040 0010 	orr.w	r0, r0, #16
    5e64:	7168      	strb	r0, [r5, #5]
    5e66:	e002      	b.n	5e6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5e68:	4668      	mov	r0, sp
    5e6a:	f000 f9cf 	bl	620c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>
    5e6e:	f898 0013 	ldrb.w	r0, [r8, #19]
    5e72:	b3b8      	cbz	r0, 5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x304>
    5e74:	7831      	ldrb	r1, [r6, #0]
    5e76:	6870      	ldr	r0, [r6, #4]
    5e78:	2900      	cmp	r1, #0
    5e7a:	bf0c      	ite	eq
    5e7c:	2201      	moveq	r2, #1
    5e7e:	2200      	movne	r2, #0
    5e80:	4974      	ldr	r1, [pc, #464]	; (6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x474>)
    5e82:	760a      	strb	r2, [r1, #24]
    5e84:	e9d8 231c 	ldrd	r2, r3, [r8, #112]	; 0x70
    5e88:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5e8c:	6941      	ldr	r1, [r0, #20]
    5e8e:	f641 524c 	movw	r2, #7500	; 0x1d4c
    5e92:	4291      	cmp	r1, r2
    5e94:	bf34      	ite	cc
    5e96:	f04f 0c04 	movcc.w	ip, #4
    5e9a:	f04f 0c00 	movcs.w	ip, #0
    5e9e:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
    5ea2:	2801      	cmp	r0, #1
    5ea4:	bf08      	it	eq
    5ea6:	2300      	moveq	r3, #0
    5ea8:	d01d      	beq.n	5ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    5eaa:	2802      	cmp	r0, #2
    5eac:	bf08      	it	eq
    5eae:	2301      	moveq	r3, #1
    5eb0:	d019      	beq.n	5ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    5eb2:	2804      	cmp	r0, #4
    5eb4:	bf08      	it	eq
    5eb6:	2303      	moveq	r3, #3
    5eb8:	d015      	beq.n	5ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    5eba:	2808      	cmp	r0, #8
    5ebc:	bf08      	it	eq
    5ebe:	2302      	moveq	r3, #2
    5ec0:	d011      	beq.n	5ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    5ec2:	f240 31f3 	movw	r1, #1011	; 0x3f3
    5ec6:	2006      	movs	r0, #6
    5ec8:	f7fe fbf8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ecc:	2800      	cmp	r0, #0
    5ece:	bf18      	it	ne
    5ed0:	f008 ff18 	blne	ed04 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5ed4:	78e8      	ldrb	r0, [r5, #3]
    5ed6:	1c40      	adds	r0, r0, #1
    5ed8:	70e8      	strb	r0, [r5, #3]
    5eda:	89e8      	ldrh	r0, [r5, #14]
    5edc:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5ee0:	81e8      	strh	r0, [r5, #14]
    5ee2:	e7c4      	b.n	5e6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5ee4:	e004      	b.n	5ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>
    5ee6:	22fb      	movs	r2, #251	; 0xfb
    5ee8:	495a      	ldr	r1, [pc, #360]	; (6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x474>)
    5eea:	4660      	mov	r0, ip
    5eec:	f008 fe0a 	bl	eb04 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5ef0:	4c59      	ldr	r4, [pc, #356]	; (6058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>)
    5ef2:	9804      	ldr	r0, [sp, #16]
    5ef4:	f04f 0b00 	mov.w	fp, #0
    5ef8:	b920      	cbnz	r0, 5f04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x324>
    5efa:	78e9      	ldrb	r1, [r5, #3]
    5efc:	2001      	movs	r0, #1
    5efe:	f7ff fea7 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70>
    5f02:	b388      	cbz	r0, 5f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    5f04:	f009 fec4 	bl	fc90 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5f08:	f89d 0000 	ldrb.w	r0, [sp]
    5f0c:	2800      	cmp	r0, #0
    5f0e:	bf1c      	itt	ne
    5f10:	2000      	movne	r0, #0
    5f12:	f7ff fdbf 	blne	5a94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5f16:	f8b8 0004 	ldrh.w	r0, [r8, #4]
    5f1a:	f1b9 0f00 	cmp.w	r9, #0
    5f1e:	d00c      	beq.n	5f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5f20:	b938      	cbnz	r0, 5f32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    5f22:	7830      	ldrb	r0, [r6, #0]
    5f24:	b128      	cbz	r0, 5f32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    5f26:	88e0      	ldrh	r0, [r4, #6]
    5f28:	2800      	cmp	r0, #0
    5f2a:	bf04      	itt	eq
    5f2c:	8920      	ldrheq	r0, [r4, #8]
    5f2e:	2800      	cmpeq	r0, #0
    5f30:	d003      	beq.n	5f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5f32:	8960      	ldrh	r0, [r4, #10]
    5f34:	f100 0001 	add.w	r0, r0, #1
    5f38:	8160      	strh	r0, [r4, #10]
    5f3a:	f1ba 0f00 	cmp.w	sl, #0
    5f3e:	d00f      	beq.n	5f60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    5f40:	88e0      	ldrh	r0, [r4, #6]
    5f42:	1c40      	adds	r0, r0, #1
    5f44:	80e0      	strh	r0, [r4, #6]
    5f46:	70ef      	strb	r7, [r5, #3]
    5f48:	6874      	ldr	r4, [r6, #4]
    5f4a:	f104 0590 	add.w	r5, r4, #144	; 0x90
    5f4e:	4629      	mov	r1, r5
    5f50:	4620      	mov	r0, r4
    5f52:	f00c fd85 	bl	12a60 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5f56:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
    5f5a:	2901      	cmp	r1, #1
    5f5c:	d005      	beq.n	5f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38a>
    5f5e:	e015      	b.n	5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>
    5f60:	8920      	ldrh	r0, [r4, #8]
    5f62:	1c40      	adds	r0, r0, #1
    5f64:	8120      	strh	r0, [r4, #8]
    5f66:	e011      	b.n	5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>
    5f68:	e013      	b.n	5f92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b2>
    5f6a:	2800      	cmp	r0, #0
    5f6c:	bf1c      	itt	ne
    5f6e:	6871      	ldrne	r1, [r6, #4]
    5f70:	f501 70b9 	addne.w	r0, r1, #370	; 0x172
    5f74:	d00a      	beq.n	5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>
    5f76:	8822      	ldrh	r2, [r4, #0]
    5f78:	8142      	strh	r2, [r0, #10]
    5f7a:	7a6a      	ldrb	r2, [r5, #9]
    5f7c:	7302      	strb	r2, [r0, #12]
    5f7e:	7aaa      	ldrb	r2, [r5, #10]
    5f80:	7342      	strb	r2, [r0, #13]
    5f82:	2218      	movs	r2, #24
    5f84:	f001 f9a0 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5f88:	f001 fcd6 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5f8c:	f04f 0b01 	mov.w	fp, #1
    5f90:	e04a      	b.n	6028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    5f92:	f89d 0000 	ldrb.w	r0, [sp]
    5f96:	2800      	cmp	r0, #0
    5f98:	bf1c      	itt	ne
    5f9a:	2001      	movne	r0, #1
    5f9c:	f7ff fd7a 	blne	5a94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5fa0:	2000      	movs	r0, #0
    5fa2:	f000 f9f1 	bl	6388 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>
    5fa6:	f89d 0000 	ldrb.w	r0, [sp]
    5faa:	2800      	cmp	r0, #0
    5fac:	bf1c      	itt	ne
    5fae:	2002      	movne	r0, #2
    5fb0:	f7ff fd70 	blne	5a94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5fb4:	f8b8 0004 	ldrh.w	r0, [r8, #4]
    5fb8:	f1b9 0f00 	cmp.w	r9, #0
    5fbc:	d00c      	beq.n	5fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>
    5fbe:	b938      	cbnz	r0, 5fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    5fc0:	7830      	ldrb	r0, [r6, #0]
    5fc2:	b128      	cbz	r0, 5fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    5fc4:	88e0      	ldrh	r0, [r4, #6]
    5fc6:	2800      	cmp	r0, #0
    5fc8:	bf04      	itt	eq
    5fca:	8920      	ldrheq	r0, [r4, #8]
    5fcc:	2800      	cmpeq	r0, #0
    5fce:	d003      	beq.n	5fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>
    5fd0:	8960      	ldrh	r0, [r4, #10]
    5fd2:	f100 0001 	add.w	r0, r0, #1
    5fd6:	8160      	strh	r0, [r4, #10]
    5fd8:	f1ba 0f00 	cmp.w	sl, #0
    5fdc:	d00f      	beq.n	5ffe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41e>
    5fde:	88e0      	ldrh	r0, [r4, #6]
    5fe0:	1c40      	adds	r0, r0, #1
    5fe2:	80e0      	strh	r0, [r4, #6]
    5fe4:	70ef      	strb	r7, [r5, #3]
    5fe6:	6874      	ldr	r4, [r6, #4]
    5fe8:	f104 0590 	add.w	r5, r4, #144	; 0x90
    5fec:	4629      	mov	r1, r5
    5fee:	4620      	mov	r0, r4
    5ff0:	f00c fd36 	bl	12a60 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5ff4:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
    5ff8:	2901      	cmp	r1, #1
    5ffa:	d004      	beq.n	6006 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    5ffc:	e014      	b.n	6028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    5ffe:	8920      	ldrh	r0, [r4, #8]
    6000:	1c40      	adds	r0, r0, #1
    6002:	8120      	strh	r0, [r4, #8]
    6004:	e010      	b.n	6028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    6006:	2800      	cmp	r0, #0
    6008:	bf1c      	itt	ne
    600a:	6871      	ldrne	r1, [r6, #4]
    600c:	f501 70b9 	addne.w	r0, r1, #370	; 0x172
    6010:	d00a      	beq.n	6028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    6012:	8822      	ldrh	r2, [r4, #0]
    6014:	8142      	strh	r2, [r0, #10]
    6016:	7a6a      	ldrb	r2, [r5, #9]
    6018:	7302      	strb	r2, [r0, #12]
    601a:	7aaa      	ldrb	r2, [r5, #10]
    601c:	7342      	strb	r2, [r0, #13]
    601e:	2218      	movs	r2, #24
    6020:	f001 f952 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6024:	f001 fc88 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6028:	9801      	ldr	r0, [sp, #4]
    602a:	b148      	cbz	r0, 6040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    602c:	f00b fe5f 	bl	11cee <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    6030:	6871      	ldr	r1, [r6, #4]
    6032:	1c40      	adds	r0, r0, #1
    6034:	7207      	strb	r7, [r0, #8]
    6036:	220b      	movs	r2, #11
    6038:	f001 f946 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    603c:	f001 fc7c 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6040:	f1bb 0f00 	cmp.w	fp, #0
    6044:	bf18      	it	ne
    6046:	f000 f899 	blne	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    604a:	b005      	add	sp, #20
    604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6050:	20000120 	.word	0x20000120
    6054:	20000d08 	.word	0x20000d08
    6058:	20000d5a 	.word	0x20000d5a
    605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6060:	4e44      	ldr	r6, [pc, #272]	; (6174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    6062:	4680      	mov	r8, r0
    6064:	f1a6 0538 	sub.w	r5, r6, #56	; 0x38
    6068:	6870      	ldr	r0, [r6, #4]
    606a:	460f      	mov	r7, r1
    606c:	f100 0490 	add.w	r4, r0, #144	; 0x90
    6070:	7828      	ldrb	r0, [r5, #0]
    6072:	2801      	cmp	r0, #1
    6074:	d004      	beq.n	6080 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    6076:	f240 4172 	movw	r1, #1138	; 0x472
    607a:	2027      	movs	r0, #39	; 0x27
    607c:	f7fe fb1e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6080:	7820      	ldrb	r0, [r4, #0]
    6082:	f04f 0901 	mov.w	r9, #1
    6086:	b168      	cbz	r0, 60a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c4>
    6088:	2100      	movs	r1, #0
    608a:	7021      	strb	r1, [r4, #0]
    608c:	89aa      	ldrh	r2, [r5, #12]
    608e:	2004      	movs	r0, #4
    6090:	f042 0204 	orr.w	r2, r2, #4
    6094:	81aa      	strh	r2, [r5, #12]
    6096:	696a      	ldr	r2, [r5, #20]
    6098:	4790      	blx	r2
    609a:	7830      	ldrb	r0, [r6, #0]
    609c:	2800      	cmp	r0, #0
    609e:	bf18      	it	ne
    60a0:	f884 9002 	strbne.w	r9, [r4, #2]
    60a4:	6a29      	ldr	r1, [r5, #32]
    60a6:	f04f 0a03 	mov.w	sl, #3
    60aa:	7808      	ldrb	r0, [r1, #0]
    60ac:	ea3a 0000 	bics.w	r0, sl, r0
    60b0:	d10d      	bne.n	60ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ee>
    60b2:	79a0      	ldrb	r0, [r4, #6]
    60b4:	b9a0      	cbnz	r0, 60e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x500>
    60b6:	89aa      	ldrh	r2, [r5, #12]
    60b8:	2002      	movs	r0, #2
    60ba:	f042 0202 	orr.w	r2, r2, #2
    60be:	81aa      	strh	r2, [r5, #12]
    60c0:	696a      	ldr	r2, [r5, #20]
    60c2:	4790      	blx	r2
    60c4:	6a28      	ldr	r0, [r5, #32]
    60c6:	7800      	ldrb	r0, [r0, #0]
    60c8:	ea3a 0000 	bics.w	r0, sl, r0
    60cc:	d008      	beq.n	60e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x500>
    60ce:	6a28      	ldr	r0, [r5, #32]
    60d0:	7840      	ldrb	r0, [r0, #1]
    60d2:	2800      	cmp	r0, #0
    60d4:	bf0e      	itee	eq
    60d6:	f884 9006 	strbeq.w	r9, [r4, #6]
    60da:	2002      	movne	r0, #2
    60dc:	71a0      	strbne	r0, [r4, #6]
    60de:	e001      	b.n	60e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    60e0:	f884 a006 	strb.w	sl, [r4, #6]
    60e4:	7d20      	ldrb	r0, [r4, #20]
    60e6:	2800      	cmp	r0, #0
    60e8:	d032      	beq.n	6150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    60ea:	7830      	ldrb	r0, [r6, #0]
    60ec:	7a6d      	ldrb	r5, [r5, #9]
    60ee:	f8d6 9004 	ldr.w	r9, [r6, #4]
    60f2:	2800      	cmp	r0, #0
    60f4:	bf0c      	ite	eq
    60f6:	2001      	moveq	r0, #1
    60f8:	2000      	movne	r0, #0
    60fa:	f080 0101 	eor.w	r1, r0, #1
    60fe:	481e      	ldr	r0, [pc, #120]	; (6178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>)
    6100:	7601      	strb	r1, [r0, #24]
    6102:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    6106:	e9c0 1204 	strd	r1, r2, [r0, #16]
    610a:	f001 fc6d 	bl	79e8 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
    610e:	2800      	cmp	r0, #0
    6110:	bf18      	it	ne
    6112:	2d23      	cmpne	r5, #35	; 0x23
    6114:	bf38      	it	cc
    6116:	2523      	movcc	r5, #35	; 0x23
    6118:	2001      	movs	r0, #1
    611a:	f899 1073 	ldrb.w	r1, [r9, #115]	; 0x73
    611e:	2901      	cmp	r1, #1
    6120:	bf08      	it	eq
    6122:	2300      	moveq	r3, #0
    6124:	d010      	beq.n	6148 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    6126:	2902      	cmp	r1, #2
    6128:	bf08      	it	eq
    612a:	2301      	moveq	r3, #1
    612c:	d00c      	beq.n	6148 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    612e:	2904      	cmp	r1, #4
    6130:	bf08      	it	eq
    6132:	2303      	moveq	r3, #3
    6134:	d008      	beq.n	6148 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    6136:	2908      	cmp	r1, #8
    6138:	bf08      	it	eq
    613a:	2302      	moveq	r3, #2
    613c:	d004      	beq.n	6148 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    613e:	f240 31f3 	movw	r1, #1011	; 0x3f3
    6142:	2006      	movs	r0, #6
    6144:	f7fe faba 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6148:	462a      	mov	r2, r5
    614a:	490b      	ldr	r1, [pc, #44]	; (6178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>)
    614c:	f008 fcda 	bl	eb04 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6150:	ea37 0008 	bics.w	r0, r7, r8
    6154:	d004      	beq.n	6160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>
    6156:	2100      	movs	r1, #0
    6158:	4608      	mov	r0, r1
    615a:	f7ff fd79 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70>
    615e:	b118      	cbz	r0, 6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x588>
    6160:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6164:	f000 b80a 	b.w	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    6168:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    616c:	2000      	movs	r0, #0
    616e:	f000 b89d 	b.w	62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6cc>
    6172:	0000      	.short	0x0000
    6174:	20000120 	.word	0x20000120
    6178:	20000d08 	.word	0x20000d08
    617c:	b510      	push	{r4, lr}
    617e:	f008 fe93 	bl	eea8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6182:	f008 fd87 	bl	ec94 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6186:	4c14      	ldr	r4, [pc, #80]	; (61d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f8>)
    6188:	2100      	movs	r1, #0
    618a:	6962      	ldr	r2, [r4, #20]
    618c:	89e0      	ldrh	r0, [r4, #14]
    618e:	4790      	blx	r2
    6190:	69e2      	ldr	r2, [r4, #28]
    6192:	7961      	ldrb	r1, [r4, #5]
    6194:	78a0      	ldrb	r0, [r4, #2]
    6196:	4790      	blx	r2
    6198:	4810      	ldr	r0, [pc, #64]	; (61dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5fc>)
    619a:	7f01      	ldrb	r1, [r0, #28]
    619c:	b1c1      	cbz	r1, 61d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f0>
    619e:	f5a0 71ad 	sub.w	r1, r0, #346	; 0x15a
    61a2:	f8d1 215a 	ldr.w	r2, [r1, #346]	; 0x15a
    61a6:	f8c1 2168 	str.w	r2, [r1, #360]	; 0x168
    61aa:	f8d1 215e 	ldr.w	r2, [r1, #350]	; 0x15e
    61ae:	f8c1 216c 	str.w	r2, [r1, #364]	; 0x16c
    61b2:	f8d1 2162 	ldr.w	r2, [r1, #354]	; 0x162
    61b6:	f8c1 2170 	str.w	r2, [r1, #368]	; 0x170
    61ba:	f8b1 2166 	ldrh.w	r2, [r1, #358]	; 0x166
    61be:	f8a1 2174 	strh.w	r2, [r1, #372]	; 0x174
    61c2:	221d      	movs	r2, #29
    61c4:	2100      	movs	r1, #0
    61c6:	301d      	adds	r0, #29
    61c8:	f001 f87e 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    61cc:	f001 fbb4 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    61d0:	2000      	movs	r0, #0
    61d2:	7020      	strb	r0, [r4, #0]
    61d4:	bd10      	pop	{r4, pc}
    61d6:	0000      	.short	0x0000
    61d8:	200000e8 	.word	0x200000e8
    61dc:	20000d5a 	.word	0x20000d5a
    61e0:	4808      	ldr	r0, [pc, #32]	; (6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x624>)
    61e2:	b510      	push	{r4, lr}
    61e4:	7800      	ldrb	r0, [r0, #0]
    61e6:	2802      	cmp	r0, #2
    61e8:	d004      	beq.n	61f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    61ea:	f240 212a 	movw	r1, #554	; 0x22a
    61ee:	2027      	movs	r0, #39	; 0x27
    61f0:	f7fe fa64 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61f4:	4904      	ldr	r1, [pc, #16]	; (6208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x628>)
    61f6:	2001      	movs	r0, #1
    61f8:	7308      	strb	r0, [r1, #12]
    61fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    61fe:	f7ff bfbd 	b.w	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    6202:	0000      	.short	0x0000
    6204:	200000e8 	.word	0x200000e8
    6208:	20000d5a 	.word	0x20000d5a
    620c:	b570      	push	{r4, r5, r6, lr}
    620e:	4920      	ldr	r1, [pc, #128]	; (6290 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b0>)
    6210:	4a20      	ldr	r2, [pc, #128]	; (6294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>)
    6212:	2501      	movs	r5, #1
    6214:	6849      	ldr	r1, [r1, #4]
    6216:	f101 0490 	add.w	r4, r1, #144	; 0x90
    621a:	6a51      	ldr	r1, [r2, #36]	; 0x24
    621c:	780b      	ldrb	r3, [r1, #0]
    621e:	f003 0303 	and.w	r3, r3, #3
    6222:	2b01      	cmp	r3, #1
    6224:	bf18      	it	ne
    6226:	2b02      	cmpne	r3, #2
    6228:	d00e      	beq.n	6248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x668>
    622a:	2b03      	cmp	r3, #3
    622c:	d128      	bne.n	6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    622e:	7025      	strb	r5, [r4, #0]
    6230:	89d3      	ldrh	r3, [r2, #14]
    6232:	4628      	mov	r0, r5
    6234:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    6238:	81d3      	strh	r3, [r2, #14]
    623a:	8993      	ldrh	r3, [r2, #12]
    623c:	f043 0301 	orr.w	r3, r3, #1
    6240:	8193      	strh	r3, [r2, #12]
    6242:	6952      	ldr	r2, [r2, #20]
    6244:	4790      	blx	r2
    6246:	e01b      	b.n	6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    6248:	7849      	ldrb	r1, [r1, #1]
    624a:	b1c9      	cbz	r1, 6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    624c:	89d3      	ldrh	r3, [r2, #14]
    624e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    6252:	81d3      	strh	r3, [r2, #14]
    6254:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6256:	2b00      	cmp	r3, #0
    6258:	bf08      	it	eq
    625a:	bd70      	popeq	{r4, r5, r6, pc}
    625c:	29fb      	cmp	r1, #251	; 0xfb
    625e:	d80a      	bhi.n	6276 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x696>
    6260:	7991      	ldrb	r1, [r2, #6]
    6262:	2900      	cmp	r1, #0
    6264:	bf04      	itt	eq
    6266:	7005      	strbeq	r5, [r0, #0]
    6268:	bd70      	popeq	{r4, r5, r6, pc}
    626a:	2020      	movs	r0, #32
    626c:	6952      	ldr	r2, [r2, #20]
    626e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6272:	2100      	movs	r1, #0
    6274:	4710      	bx	r2
    6276:	7950      	ldrb	r0, [r2, #5]
    6278:	f040 0010 	orr.w	r0, r0, #16
    627c:	7150      	strb	r0, [r2, #5]
    627e:	bd70      	pop	{r4, r5, r6, pc}
    6280:	7a20      	ldrb	r0, [r4, #8]
    6282:	2801      	cmp	r0, #1
    6284:	bf06      	itte	eq
    6286:	2000      	moveq	r0, #0
    6288:	7220      	strbeq	r0, [r4, #8]
    628a:	7225      	strbne	r5, [r4, #8]
    628c:	bd70      	pop	{r4, r5, r6, pc}
    628e:	0000      	.short	0x0000
    6290:	20000120 	.word	0x20000120
    6294:	200000e8 	.word	0x200000e8
    6298:	4803      	ldr	r0, [pc, #12]	; (62a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c8>)
    629a:	7800      	ldrb	r0, [r0, #0]
    629c:	2800      	cmp	r0, #0
    629e:	bf08      	it	eq
    62a0:	4770      	bxeq	lr
    62a2:	f7ff bf6b 	b.w	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    62a6:	0000      	.short	0x0000
    62a8:	200000e8 	.word	0x200000e8
    62ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62b0:	4f32      	ldr	r7, [pc, #200]	; (637c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x79c>)
    62b2:	4606      	mov	r6, r0
    62b4:	f1a7 0538 	sub.w	r5, r7, #56	; 0x38
    62b8:	687c      	ldr	r4, [r7, #4]
    62ba:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    62bc:	f104 0890 	add.w	r8, r4, #144	; 0x90
    62c0:	6268      	str	r0, [r5, #36]	; 0x24
    62c2:	f001 fb91 	bl	79e8 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
    62c6:	2800      	cmp	r0, #0
    62c8:	bf08      	it	eq
    62ca:	79e8      	ldrbeq	r0, [r5, #7]
    62cc:	d010      	beq.n	62f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    62ce:	6878      	ldr	r0, [r7, #4]
    62d0:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    62d4:	2900      	cmp	r1, #0
    62d6:	bf14      	ite	ne
    62d8:	2004      	movne	r0, #4
    62da:	2000      	moveq	r0, #0
    62dc:	f100 0223 	add.w	r2, r0, #35	; 0x23
    62e0:	79e8      	ldrb	r0, [r5, #7]
    62e2:	4282      	cmp	r2, r0
    62e4:	d904      	bls.n	62f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    62e6:	2900      	cmp	r1, #0
    62e8:	bf14      	ite	ne
    62ea:	2004      	movne	r0, #4
    62ec:	2000      	moveq	r0, #0
    62ee:	3023      	adds	r0, #35	; 0x23
    62f0:	2e00      	cmp	r6, #0
    62f2:	bf08      	it	eq
    62f4:	28ff      	cmpeq	r0, #255	; 0xff
    62f6:	d105      	bne.n	6304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x724>
    62f8:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    62fc:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
    6300:	4291      	cmp	r1, r2
    6302:	d003      	beq.n	630c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72c>
    6304:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    6308:	f009 fce8 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    630c:	f898 0014 	ldrb.w	r0, [r8, #20]
    6310:	b1a8      	cbz	r0, 633e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    6312:	481b      	ldr	r0, [pc, #108]	; (6380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a0>)
    6314:	f009 fa78 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6318:	7838      	ldrb	r0, [r7, #0]
    631a:	2800      	cmp	r0, #0
    631c:	bf0c      	ite	eq
    631e:	2001      	moveq	r0, #1
    6320:	2000      	movne	r0, #0
    6322:	f080 0101 	eor.w	r1, r0, #1
    6326:	4817      	ldr	r0, [pc, #92]	; (6384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>)
    6328:	7601      	strb	r1, [r0, #24]
    632a:	e9d8 121e 	ldrd	r1, r2, [r8, #120]	; 0x78
    632e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6332:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    6336:	6a68      	ldr	r0, [r5, #36]	; 0x24
    6338:	f008 fc4c 	bl	ebd4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    633c:	e004      	b.n	6348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    633e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    6340:	f009 fa62 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6344:	f008 fca6 	bl	ec94 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6348:	b93e      	cbnz	r6, 635a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77a>
    634a:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    634e:	f010 000c 	ands.w	r0, r0, #12
    6352:	bf18      	it	ne
    6354:	2028      	movne	r0, #40	; 0x28
    6356:	f009 f8bb 	bl	f4d0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    635a:	6960      	ldr	r0, [r4, #20]
    635c:	f641 514c 	movw	r1, #7500	; 0x1d4c
    6360:	4288      	cmp	r0, r1
    6362:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
    6366:	f04f 0100 	mov.w	r1, #0
    636a:	bf34      	ite	cc
    636c:	2001      	movcc	r0, #1
    636e:	2000      	movcs	r0, #0
    6370:	f009 fc1a 	bl	fba8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6374:	2002      	movs	r0, #2
    6376:	7028      	strb	r0, [r5, #0]
    6378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    637c:	20000120 	.word	0x20000120
    6380:	20000c00 	.word	0x20000c00
    6384:	20000d08 	.word	0x20000d08
    6388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    638c:	4f7c      	ldr	r7, [pc, #496]	; (6580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9a0>)
    638e:	b083      	sub	sp, #12
    6390:	f04f 0900 	mov.w	r9, #0
    6394:	687c      	ldr	r4, [r7, #4]
    6396:	f1a7 0b18 	sub.w	fp, r7, #24
    639a:	f104 0590 	add.w	r5, r4, #144	; 0x90
    639e:	f88d 9000 	strb.w	r9, [sp]
    63a2:	4680      	mov	r8, r0
    63a4:	f001 fb20 	bl	79e8 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
    63a8:	f1a7 0638 	sub.w	r6, r7, #56	; 0x38
    63ac:	2800      	cmp	r0, #0
    63ae:	bf08      	it	eq
    63b0:	79f0      	ldrbeq	r0, [r6, #7]
    63b2:	d010      	beq.n	63d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7f6>
    63b4:	6878      	ldr	r0, [r7, #4]
    63b6:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    63ba:	2900      	cmp	r1, #0
    63bc:	bf14      	ite	ne
    63be:	2004      	movne	r0, #4
    63c0:	2000      	moveq	r0, #0
    63c2:	f100 0223 	add.w	r2, r0, #35	; 0x23
    63c6:	79f0      	ldrb	r0, [r6, #7]
    63c8:	4282      	cmp	r2, r0
    63ca:	d904      	bls.n	63d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7f6>
    63cc:	2900      	cmp	r1, #0
    63ce:	bf14      	ite	ne
    63d0:	2004      	movne	r0, #4
    63d2:	2000      	moveq	r0, #0
    63d4:	3023      	adds	r0, #35	; 0x23
    63d6:	f1b8 0f00 	cmp.w	r8, #0
    63da:	bf08      	it	eq
    63dc:	28ff      	cmpeq	r0, #255	; 0xff
    63de:	d105      	bne.n	63ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80c>
    63e0:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    63e4:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
    63e8:	4288      	cmp	r0, r1
    63ea:	d004      	beq.n	63f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x816>
    63ec:	20ff      	movs	r0, #255	; 0xff
    63ee:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
    63f2:	f009 fc73 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    63f6:	79a8      	ldrb	r0, [r5, #6]
    63f8:	f8df a188 	ldr.w	sl, [pc, #392]	; 6584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9a4>
    63fc:	f04f 0801 	mov.w	r8, #1
    6400:	b150      	cbz	r0, 6418 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x838>
    6402:	2801      	cmp	r0, #1
    6404:	d026      	beq.n	6454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x874>
    6406:	2802      	cmp	r0, #2
    6408:	d037      	beq.n	647a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    640a:	2803      	cmp	r0, #3
    640c:	d045      	beq.n	649a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ba>
    640e:	f240 21d5 	movw	r1, #725	; 0x2d5
    6412:	2027      	movs	r0, #39	; 0x27
    6414:	f7fe f952 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6418:	7a30      	ldrb	r0, [r6, #8]
    641a:	f8ad 0004 	strh.w	r0, [sp, #4]
    641e:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
    6422:	4658      	mov	r0, fp
    6424:	f7ff f86c 	bl	5500 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6428:	b150      	cbz	r0, 6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x860>
    642a:	89b2      	ldrh	r2, [r6, #12]
    642c:	6a31      	ldr	r1, [r6, #32]
    642e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6432:	81b2      	strh	r2, [r6, #12]
    6434:	6972      	ldr	r2, [r6, #20]
    6436:	2080      	movs	r0, #128	; 0x80
    6438:	4790      	blx	r2
    643a:	f885 8001 	strb.w	r8, [r5, #1]
    643e:	e030      	b.n	64a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8c2>
    6440:	466a      	mov	r2, sp
    6442:	a901      	add	r1, sp, #4
    6444:	6b30      	ldr	r0, [r6, #48]	; 0x30
    6446:	f00b fd10 	bl	11e6a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    644a:	6230      	str	r0, [r6, #32]
    644c:	b110      	cbz	r0, 6454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x874>
    644e:	f895 1051 	ldrb.w	r1, [r5, #81]	; 0x51
    6452:	b111      	cbz	r1, 645a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x87a>
    6454:	f8c6 a020 	str.w	sl, [r6, #32]
    6458:	e023      	b.n	64a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8c2>
    645a:	f89d 1000 	ldrb.w	r1, [sp]
    645e:	b931      	cbnz	r1, 646e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88e>
    6460:	f8a0 9000 	strh.w	r9, [r0]
    6464:	f880 9002 	strb.w	r9, [r0, #2]
    6468:	2101      	movs	r1, #1
    646a:	f00c fca0 	bl	12dae <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    646e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6472:	6a30      	ldr	r0, [r6, #32]
    6474:	f00c fc46 	bl	12d04 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6478:	e013      	b.n	64a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8c2>
    647a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
    647e:	f8ad 0004 	strh.w	r0, [sp, #4]
    6482:	466a      	mov	r2, sp
    6484:	a901      	add	r1, sp, #4
    6486:	6b30      	ldr	r0, [r6, #48]	; 0x30
    6488:	f00b fcef 	bl	11e6a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    648c:	6230      	str	r0, [r6, #32]
    648e:	b940      	cbnz	r0, 64a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8c2>
    6490:	f240 21c6 	movw	r1, #710	; 0x2c6
    6494:	2027      	movs	r0, #39	; 0x27
    6496:	f7fe f911 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    649a:	4658      	mov	r0, fp
    649c:	f7ff f830 	bl	5500 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    64a0:	b320      	cbz	r0, 64ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90c>
    64a2:	6a30      	ldr	r0, [r6, #32]
    64a4:	2308      	movs	r3, #8
    64a6:	f04f 0a03 	mov.w	sl, #3
    64aa:	7801      	ldrb	r1, [r0, #0]
    64ac:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    64b0:	7001      	strb	r1, [r0, #0]
    64b2:	79ea      	ldrb	r2, [r5, #7]
    64b4:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    64b8:	4311      	orrs	r1, r2
    64ba:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    64be:	7001      	strb	r1, [r0, #0]
    64c0:	7a2a      	ldrb	r2, [r5, #8]
    64c2:	2304      	movs	r3, #4
    64c4:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    64c8:	4311      	orrs	r1, r2
    64ca:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    64ce:	7001      	strb	r1, [r0, #0]
    64d0:	ea3a 0101 	bics.w	r1, sl, r1
    64d4:	bf04      	itt	eq
    64d6:	78c0      	ldrbeq	r0, [r0, #3]
    64d8:	2802      	cmpeq	r0, #2
    64da:	d015      	beq.n	6508 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x928>
    64dc:	6b30      	ldr	r0, [r6, #48]	; 0x30
    64de:	f00b fc9e 	bl	11e1e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    64e2:	2800      	cmp	r0, #0
    64e4:	bf18      	it	ne
    64e6:	46c1      	movne	r9, r8
    64e8:	d005      	beq.n	64f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x916>
    64ea:	e00d      	b.n	6508 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x928>
    64ec:	f240 21cf 	movw	r1, #719	; 0x2cf
    64f0:	2027      	movs	r0, #39	; 0x27
    64f2:	f7fe f8e3 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64f6:	6a30      	ldr	r0, [r6, #32]
    64f8:	7800      	ldrb	r0, [r0, #0]
    64fa:	ea3a 0000 	bics.w	r0, sl, r0
    64fe:	d003      	beq.n	6508 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x928>
    6500:	f7fe ffbc 	bl	547c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6504:	f080 0901 	eor.w	r9, r0, #1
    6508:	6a30      	ldr	r0, [r6, #32]
    650a:	7801      	ldrb	r1, [r0, #0]
    650c:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
    6510:	7001      	strb	r1, [r0, #0]
    6512:	7ce9      	ldrb	r1, [r5, #19]
    6514:	2900      	cmp	r1, #0
    6516:	bf1c      	itt	ne
    6518:	7841      	ldrbne	r1, [r0, #1]
    651a:	2900      	cmpne	r1, #0
    651c:	d013      	beq.n	6546 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x966>
    651e:	481a      	ldr	r0, [pc, #104]	; (6588 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9a8>)
    6520:	f009 f972 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6524:	7838      	ldrb	r0, [r7, #0]
    6526:	2800      	cmp	r0, #0
    6528:	bf0c      	ite	eq
    652a:	2101      	moveq	r1, #1
    652c:	2100      	movne	r1, #0
    652e:	4817      	ldr	r0, [pc, #92]	; (658c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9ac>)
    6530:	7601      	strb	r1, [r0, #24]
    6532:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    6536:	e9c0 1204 	strd	r1, r2, [r0, #16]
    653a:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
    653e:	6a31      	ldr	r1, [r6, #32]
    6540:	f008 fb48 	bl	ebd4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6544:	e003      	b.n	654e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x96e>
    6546:	f009 f95f 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    654a:	f008 fba3 	bl	ec94 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    654e:	6960      	ldr	r0, [r4, #20]
    6550:	f641 514c 	movw	r1, #7500	; 0x1d4c
    6554:	4288      	cmp	r0, r1
    6556:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
    655a:	f04f 0101 	mov.w	r1, #1
    655e:	bf34      	ite	cc
    6560:	2001      	movcc	r0, #1
    6562:	2000      	movcs	r0, #0
    6564:	f009 fb20 	bl	fba8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6568:	f886 8004 	strb.w	r8, [r6, #4]
    656c:	6a30      	ldr	r0, [r6, #32]
    656e:	8801      	ldrh	r1, [r0, #0]
    6570:	8231      	strh	r1, [r6, #16]
    6572:	7880      	ldrb	r0, [r0, #2]
    6574:	74b0      	strb	r0, [r6, #18]
    6576:	f886 8000 	strb.w	r8, [r6]
    657a:	b003      	add	sp, #12
    657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6580:	20000120 	.word	0x20000120
    6584:	20000d30 	.word	0x20000d30
    6588:	20000c00 	.word	0x20000c00
    658c:	20000d08 	.word	0x20000d08
    6590:	000061e1 	.word	0x000061e1
    6594:	00005cd1 	.word	0x00005cd1
    6598:	0000605d 	.word	0x0000605d
    659c:	00006299 	.word	0x00006299

000065a0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    65a0:	4602      	mov	r2, r0
    65a2:	4807      	ldr	r0, [pc, #28]	; (65c0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    65a4:	b510      	push	{r4, lr}
    65a6:	7800      	ldrb	r0, [r0, #0]
    65a8:	b138      	cbz	r0, 65ba <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    65aa:	4806      	ldr	r0, [pc, #24]	; (65c4 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    65ac:	7881      	ldrb	r1, [r0, #2]
    65ae:	b121      	cbz	r1, 65ba <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    65b0:	1cc0      	adds	r0, r0, #3
    65b2:	f008 f9f9 	bl	e9a8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    65b6:	2001      	movs	r0, #1
    65b8:	bd10      	pop	{r4, pc}
    65ba:	2000      	movs	r0, #0
    65bc:	bd10      	pop	{r4, pc}
    65be:	0000      	.short	0x0000
    65c0:	200004b8 	.word	0x200004b8
    65c4:	2000167a 	.word	0x2000167a

000065c8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    65c8:	4800      	ldr	r0, [pc, #0]	; (65cc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    65ca:	4770      	bx	lr
    65cc:	2000184d 	.word	0x2000184d

000065d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    65d0:	4904      	ldr	r1, [pc, #16]	; (65e4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    65d2:	788a      	ldrb	r2, [r1, #2]
    65d4:	4282      	cmp	r2, r0
    65d6:	bf86      	itte	hi
    65d8:	4408      	addhi	r0, r1
    65da:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    65de:	2000      	movls	r0, #0
    65e0:	4770      	bx	lr
    65e2:	0000      	.short	0x0000
    65e4:	2000167a 	.word	0x2000167a

000065e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    65e8:	4904      	ldr	r1, [pc, #16]	; (65fc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    65ea:	788a      	ldrb	r2, [r1, #2]
    65ec:	4282      	cmp	r2, r0
    65ee:	bf86      	itte	hi
    65f0:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    65f4:	3083      	addhi	r0, #131	; 0x83
    65f6:	2000      	movls	r0, #0
    65f8:	4770      	bx	lr
    65fa:	0000      	.short	0x0000
    65fc:	2000167a 	.word	0x2000167a

00006600 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6600:	4a05      	ldr	r2, [pc, #20]	; (6618 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6602:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6606:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    660a:	6802      	ldr	r2, [r0, #0]
    660c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6610:	8880      	ldrh	r0, [r0, #4]
    6612:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6616:	4770      	bx	lr
    6618:	2000167a 	.word	0x2000167a

0000661c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    661c:	4904      	ldr	r1, [pc, #16]	; (6630 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    661e:	788a      	ldrb	r2, [r1, #2]
    6620:	4282      	cmp	r2, r0
    6622:	bf86      	itte	hi
    6624:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    6628:	1cc0      	addhi	r0, r0, #3
    662a:	2000      	movls	r0, #0
    662c:	4770      	bx	lr
    662e:	0000      	.short	0x0000
    6630:	2000167a 	.word	0x2000167a

00006634 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6634:	b510      	push	{r4, lr}
    6636:	f240 12d3 	movw	r2, #467	; 0x1d3
    663a:	2100      	movs	r1, #0
    663c:	4807      	ldr	r0, [pc, #28]	; (665c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    663e:	f00a fcb5 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6642:	2208      	movs	r2, #8
    6644:	21ff      	movs	r1, #255	; 0xff
    6646:	4806      	ldr	r0, [pc, #24]	; (6660 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6648:	f00a fcb0 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    664c:	4805      	ldr	r0, [pc, #20]	; (6664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    664e:	2100      	movs	r1, #0
    6650:	7001      	strb	r1, [r0, #0]
    6652:	7041      	strb	r1, [r0, #1]
    6654:	f44f 7161 	mov.w	r1, #900	; 0x384
    6658:	8041      	strh	r1, [r0, #2]
    665a:	bd10      	pop	{r4, pc}
    665c:	2000167a 	.word	0x2000167a
    6660:	200004bc 	.word	0x200004bc
    6664:	200004b8 	.word	0x200004b8

00006668 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6668:	4b0b      	ldr	r3, [pc, #44]	; (6698 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    666a:	f893 c002 	ldrb.w	ip, [r3, #2]
    666e:	4584      	cmp	ip, r0
    6670:	bf9c      	itt	ls
    6672:	2000      	movls	r0, #0
    6674:	4770      	bxls	lr
    6676:	4418      	add	r0, r3
    6678:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    667c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6680:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6684:	700b      	strb	r3, [r1, #0]
    6686:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    668a:	6011      	str	r1, [r2, #0]
    668c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6690:	8090      	strh	r0, [r2, #4]
    6692:	2001      	movs	r0, #1
    6694:	4770      	bx	lr
    6696:	0000      	.short	0x0000
    6698:	2000167a 	.word	0x2000167a

0000669c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    669c:	4907      	ldr	r1, [pc, #28]	; (66bc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    669e:	788a      	ldrb	r2, [r1, #2]
    66a0:	4282      	cmp	r2, r0
    66a2:	bf9c      	itt	ls
    66a4:	2000      	movls	r0, #0
    66a6:	4770      	bxls	lr
    66a8:	4408      	add	r0, r1
    66aa:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    66ae:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    66b2:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    66b6:	f000 0001 	and.w	r0, r0, #1
    66ba:	4770      	bx	lr
    66bc:	2000167a 	.word	0x2000167a

000066c0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    66c0:	b510      	push	{r4, lr}
    66c2:	f000 f921 	bl	6908 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    66c6:	2810      	cmp	r0, #16
    66c8:	d014      	beq.n	66f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    66ca:	4a0b      	ldr	r2, [pc, #44]	; (66f8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    66cc:	4601      	mov	r1, r0
    66ce:	2000      	movs	r0, #0
    66d0:	f892 c002 	ldrb.w	ip, [r2, #2]
    66d4:	f1bc 0f00 	cmp.w	ip, #0
    66d8:	d90c      	bls.n	66f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    66da:	1813      	adds	r3, r2, r0
    66dc:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    66e0:	428b      	cmp	r3, r1
    66e2:	d103      	bne.n	66ec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    66e4:	2810      	cmp	r0, #16
    66e6:	bf18      	it	ne
    66e8:	bd10      	popne	{r4, pc}
    66ea:	e003      	b.n	66f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    66ec:	1c40      	adds	r0, r0, #1
    66ee:	b2c0      	uxtb	r0, r0
    66f0:	4584      	cmp	ip, r0
    66f2:	d8f2      	bhi.n	66da <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    66f4:	2008      	movs	r0, #8
    66f6:	bd10      	pop	{r4, pc}
    66f8:	2000167a 	.word	0x2000167a

000066fc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    66fc:	4801      	ldr	r0, [pc, #4]	; (6704 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    66fe:	8840      	ldrh	r0, [r0, #2]
    6700:	4770      	bx	lr
    6702:	0000      	.short	0x0000
    6704:	200004b8 	.word	0x200004b8

00006708 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6708:	4906      	ldr	r1, [pc, #24]	; (6724 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    670a:	788a      	ldrb	r2, [r1, #2]
    670c:	4282      	cmp	r2, r0
    670e:	d906      	bls.n	671e <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    6710:	4408      	add	r0, r1
    6712:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6716:	2800      	cmp	r0, #0
    6718:	bf04      	itt	eq
    671a:	2001      	moveq	r0, #1
    671c:	4770      	bxeq	lr
    671e:	2000      	movs	r0, #0
    6720:	4770      	bx	lr
    6722:	0000      	.short	0x0000
    6724:	2000167a 	.word	0x2000167a

00006728 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6728:	b570      	push	{r4, r5, r6, lr}
    672a:	460d      	mov	r5, r1
    672c:	4604      	mov	r4, r0
    672e:	f000 f8eb 	bl	6908 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6732:	4a1a      	ldr	r2, [pc, #104]	; (679c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    6734:	2810      	cmp	r0, #16
    6736:	d014      	beq.n	6762 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    6738:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    673c:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    6740:	f010 0f01 	tst.w	r0, #1
    6744:	bf1c      	itt	ne
    6746:	2001      	movne	r0, #1
    6748:	bd70      	popne	{r4, r5, r6, pc}
    674a:	7850      	ldrb	r0, [r2, #1]
    674c:	2808      	cmp	r0, #8
    674e:	bf3c      	itt	cc
    6750:	2001      	movcc	r0, #1
    6752:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    6756:	d21e      	bcs.n	6796 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    6758:	7850      	ldrb	r0, [r2, #1]
    675a:	1c40      	adds	r0, r0, #1
    675c:	7050      	strb	r0, [r2, #1]
    675e:	2001      	movs	r0, #1
    6760:	bd70      	pop	{r4, r5, r6, pc}
    6762:	7850      	ldrb	r0, [r2, #1]
    6764:	2808      	cmp	r0, #8
    6766:	d216      	bcs.n	6796 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    6768:	7813      	ldrb	r3, [r2, #0]
    676a:	2001      	movs	r0, #1
    676c:	1c59      	adds	r1, r3, #1
    676e:	7011      	strb	r1, [r2, #0]
    6770:	2b10      	cmp	r3, #16
    6772:	d303      	bcc.n	677c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    6774:	2146      	movs	r1, #70	; 0x46
    6776:	2028      	movs	r0, #40	; 0x28
    6778:	f7fd ffa0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    677c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6780:	6829      	ldr	r1, [r5, #0]
    6782:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    6786:	88a9      	ldrh	r1, [r5, #4]
    6788:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    678c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6790:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    6794:	e7e0      	b.n	6758 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    6796:	2000      	movs	r0, #0
    6798:	bd70      	pop	{r4, r5, r6, pc}
    679a:	0000      	.short	0x0000
    679c:	2000167a 	.word	0x2000167a

000067a0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    67a0:	4901      	ldr	r1, [pc, #4]	; (67a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    67a2:	7048      	strb	r0, [r1, #1]
    67a4:	4770      	bx	lr
    67a6:	0000      	.short	0x0000
    67a8:	200004b8 	.word	0x200004b8

000067ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    67ac:	b470      	push	{r4, r5, r6}
    67ae:	482b      	ldr	r0, [pc, #172]	; (685c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    67b0:	2500      	movs	r5, #0
    67b2:	7801      	ldrb	r1, [r0, #0]
    67b4:	1e49      	subs	r1, r1, #1
    67b6:	b24b      	sxtb	r3, r1
    67b8:	2b00      	cmp	r3, #0
    67ba:	db46      	blt.n	684a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    67bc:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    67c0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    67c4:	f011 0f01 	tst.w	r1, #1
    67c8:	d03b      	beq.n	6842 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    67ca:	7842      	ldrb	r2, [r0, #1]
    67cc:	b2d9      	uxtb	r1, r3
    67ce:	1e52      	subs	r2, r2, #1
    67d0:	7042      	strb	r2, [r0, #1]
    67d2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    67d6:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    67da:	f890 c002 	ldrb.w	ip, [r0, #2]
    67de:	2200      	movs	r2, #0
    67e0:	f1bc 0f00 	cmp.w	ip, #0
    67e4:	d90b      	bls.n	67fe <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    67e6:	1884      	adds	r4, r0, r2
    67e8:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    67ec:	428e      	cmp	r6, r1
    67ee:	d102      	bne.n	67f6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    67f0:	2a10      	cmp	r2, #16
    67f2:	d126      	bne.n	6842 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    67f4:	e003      	b.n	67fe <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    67f6:	1c52      	adds	r2, r2, #1
    67f8:	b2d2      	uxtb	r2, r2
    67fa:	4594      	cmp	ip, r2
    67fc:	d8f3      	bhi.n	67e6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    67fe:	7802      	ldrb	r2, [r0, #0]
    6800:	1e52      	subs	r2, r2, #1
    6802:	b2d2      	uxtb	r2, r2
    6804:	7002      	strb	r2, [r0, #0]
    6806:	428a      	cmp	r2, r1
    6808:	d01b      	beq.n	6842 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    680a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    680e:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    6812:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    6816:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    681a:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    681e:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    6822:	7884      	ldrb	r4, [r0, #2]
    6824:	f890 c000 	ldrb.w	ip, [r0]
    6828:	2200      	movs	r2, #0
    682a:	2c00      	cmp	r4, #0
    682c:	d909      	bls.n	6842 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    682e:	1886      	adds	r6, r0, r2
    6830:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    6834:	4566      	cmp	r6, ip
    6836:	d10c      	bne.n	6852 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    6838:	2a10      	cmp	r2, #16
    683a:	bf1c      	itt	ne
    683c:	4402      	addne	r2, r0
    683e:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    6842:	1e59      	subs	r1, r3, #1
    6844:	b24b      	sxtb	r3, r1
    6846:	2b00      	cmp	r3, #0
    6848:	dab8      	bge.n	67bc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    684a:	4805      	ldr	r0, [pc, #20]	; (6860 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    684c:	7045      	strb	r5, [r0, #1]
    684e:	bc70      	pop	{r4, r5, r6}
    6850:	4770      	bx	lr
    6852:	1c52      	adds	r2, r2, #1
    6854:	b2d2      	uxtb	r2, r2
    6856:	4294      	cmp	r4, r2
    6858:	d8e9      	bhi.n	682e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    685a:	e7f2      	b.n	6842 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    685c:	2000167a 	.word	0x2000167a
    6860:	200004b8 	.word	0x200004b8

00006864 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6868:	4d25      	ldr	r5, [pc, #148]	; (6900 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    686a:	2600      	movs	r6, #0
    686c:	4634      	mov	r4, r6
    686e:	7828      	ldrb	r0, [r5, #0]
    6870:	2800      	cmp	r0, #0
    6872:	bf8c      	ite	hi
    6874:	4f23      	ldrhi	r7, [pc, #140]	; (6904 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6876:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    687a:	bf00      	nop
    687c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6880:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    6884:	f011 0f01 	tst.w	r1, #1
    6888:	d032      	beq.n	68f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    688a:	78aa      	ldrb	r2, [r5, #2]
    688c:	2100      	movs	r1, #0
    688e:	4623      	mov	r3, r4
    6890:	2a00      	cmp	r2, #0
    6892:	d909      	bls.n	68a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    6894:	eb05 0c01 	add.w	ip, r5, r1
    6898:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    689c:	459c      	cmp	ip, r3
    689e:	d004      	beq.n	68aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    68a0:	1c49      	adds	r1, r1, #1
    68a2:	b2c9      	uxtb	r1, r1
    68a4:	428a      	cmp	r2, r1
    68a6:	d8f5      	bhi.n	6894 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    68a8:	2110      	movs	r1, #16
    68aa:	428a      	cmp	r2, r1
    68ac:	bf86      	itte	hi
    68ae:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    68b2:	1cd3      	addhi	r3, r2, #3
    68b4:	2300      	movls	r3, #0
    68b6:	2200      	movs	r2, #0
    68b8:	2910      	cmp	r1, #16
    68ba:	d00c      	beq.n	68d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    68bc:	eb05 0c01 	add.w	ip, r5, r1
    68c0:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    68c4:	f1b8 0f01 	cmp.w	r8, #1
    68c8:	d004      	beq.n	68d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    68ca:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    68ce:	f1bc 0f00 	cmp.w	ip, #0
    68d2:	d000      	beq.n	68d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    68d4:	2201      	movs	r2, #1
    68d6:	1e52      	subs	r2, r2, #1
    68d8:	4213      	tst	r3, r2
    68da:	d109      	bne.n	68f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    68dc:	55b9      	strb	r1, [r7, r6]
    68de:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    68e2:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    68e6:	4630      	mov	r0, r6
    68e8:	1c73      	adds	r3, r6, #1
    68ea:	b2de      	uxtb	r6, r3
    68ec:	f009 fd06 	bl	102fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    68f0:	1c60      	adds	r0, r4, #1
    68f2:	b2c4      	uxtb	r4, r0
    68f4:	7828      	ldrb	r0, [r5, #0]
    68f6:	42a0      	cmp	r0, r4
    68f8:	d8c0      	bhi.n	687c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    68fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68fe:	0000      	.short	0x0000
    6900:	2000167a 	.word	0x2000167a
    6904:	200004bc 	.word	0x200004bc
    6908:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    690c:	4b20      	ldr	r3, [pc, #128]	; (6990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>)
    690e:	4602      	mov	r2, r0
    6910:	2000      	movs	r0, #0
    6912:	f893 8000 	ldrb.w	r8, [r3]
    6916:	f1b8 0f00 	cmp.w	r8, #0
    691a:	d934      	bls.n	6986 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x122>
    691c:	780f      	ldrb	r7, [r1, #0]
    691e:	784e      	ldrb	r6, [r1, #1]
    6920:	788d      	ldrb	r5, [r1, #2]
    6922:	78cc      	ldrb	r4, [r1, #3]
    6924:	f891 c004 	ldrb.w	ip, [r1, #4]
    6928:	f891 a005 	ldrb.w	sl, [r1, #5]
    692c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    6930:	f891 9153 	ldrb.w	r9, [r1, #339]	; 0x153
    6934:	f891 b154 	ldrb.w	fp, [r1, #340]	; 0x154
    6938:	ea82 0909 	eor.w	r9, r2, r9
    693c:	ea87 0b0b 	eor.w	fp, r7, fp
    6940:	44d9      	add	r9, fp
    6942:	f891 b155 	ldrb.w	fp, [r1, #341]	; 0x155
    6946:	ea86 0b0b 	eor.w	fp, r6, fp
    694a:	44d9      	add	r9, fp
    694c:	f891 b156 	ldrb.w	fp, [r1, #342]	; 0x156
    6950:	ea85 0b0b 	eor.w	fp, r5, fp
    6954:	44d9      	add	r9, fp
    6956:	f891 b157 	ldrb.w	fp, [r1, #343]	; 0x157
    695a:	ea84 0b0b 	eor.w	fp, r4, fp
    695e:	44d9      	add	r9, fp
    6960:	f891 b158 	ldrb.w	fp, [r1, #344]	; 0x158
    6964:	f891 1159 	ldrb.w	r1, [r1, #345]	; 0x159
    6968:	ea8c 0b0b 	eor.w	fp, ip, fp
    696c:	44d9      	add	r9, fp
    696e:	ea8a 0101 	eor.w	r1, sl, r1
    6972:	eb11 0f09 	cmn.w	r1, r9
    6976:	bf04      	itt	eq
    6978:	e8bd 0ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    697c:	4770      	bxeq	lr
    697e:	1c40      	adds	r0, r0, #1
    6980:	b2c0      	uxtb	r0, r0
    6982:	4580      	cmp	r8, r0
    6984:	d8d2      	bhi.n	692c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    6986:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    698a:	2010      	movs	r0, #16
    698c:	4770      	bx	lr
    698e:	0000      	.short	0x0000
    6990:	2000167a 	.word	0x2000167a
    6994:	4925      	ldr	r1, [pc, #148]	; (6a2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c8>)
    6996:	b410      	push	{r4}
    6998:	784a      	ldrb	r2, [r1, #1]
    699a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    699e:	1e52      	subs	r2, r2, #1
    69a0:	704a      	strb	r2, [r1, #1]
    69a2:	2200      	movs	r2, #0
    69a4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    69a8:	f891 c002 	ldrb.w	ip, [r1, #2]
    69ac:	f1bc 0f00 	cmp.w	ip, #0
    69b0:	d90d      	bls.n	69ce <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    69b2:	188b      	adds	r3, r1, r2
    69b4:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    69b8:	4284      	cmp	r4, r0
    69ba:	d104      	bne.n	69c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x162>
    69bc:	2a10      	cmp	r2, #16
    69be:	bf1c      	itt	ne
    69c0:	bc10      	popne	{r4}
    69c2:	4770      	bxne	lr
    69c4:	e003      	b.n	69ce <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    69c6:	1c52      	adds	r2, r2, #1
    69c8:	b2d2      	uxtb	r2, r2
    69ca:	4594      	cmp	ip, r2
    69cc:	d8f1      	bhi.n	69b2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14e>
    69ce:	780a      	ldrb	r2, [r1, #0]
    69d0:	1e52      	subs	r2, r2, #1
    69d2:	b2d2      	uxtb	r2, r2
    69d4:	700a      	strb	r2, [r1, #0]
    69d6:	4282      	cmp	r2, r0
    69d8:	bf04      	itt	eq
    69da:	bc10      	popeq	{r4}
    69dc:	4770      	bxeq	lr
    69de:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    69e2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    69e6:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    69ea:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    69ee:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    69f2:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    69f6:	788c      	ldrb	r4, [r1, #2]
    69f8:	f891 c000 	ldrb.w	ip, [r1]
    69fc:	2200      	movs	r2, #0
    69fe:	2c00      	cmp	r4, #0
    6a00:	bf9c      	itt	ls
    6a02:	bc10      	popls	{r4}
    6a04:	4770      	bxls	lr
    6a06:	188b      	adds	r3, r1, r2
    6a08:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    6a0c:	4563      	cmp	r3, ip
    6a0e:	d106      	bne.n	6a1e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6a10:	2a10      	cmp	r2, #16
    6a12:	bf1c      	itt	ne
    6a14:	4411      	addne	r1, r2
    6a16:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    6a1a:	bc10      	pop	{r4}
    6a1c:	4770      	bx	lr
    6a1e:	1c52      	adds	r2, r2, #1
    6a20:	b2d2      	uxtb	r2, r2
    6a22:	4294      	cmp	r4, r2
    6a24:	d8ef      	bhi.n	6a06 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1a2>
    6a26:	bc10      	pop	{r4}
    6a28:	4770      	bx	lr
    6a2a:	0000      	.short	0x0000
    6a2c:	2000167a 	.word	0x2000167a

00006a30 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    6a30:	b570      	push	{r4, r5, r6, lr}
    6a32:	b08c      	sub	sp, #48	; 0x30
    6a34:	f100 0410 	add.w	r4, r0, #16
    6a38:	461d      	mov	r5, r3
    6a3a:	4616      	mov	r6, r2
    6a3c:	f10d 3cff 	add.w	ip, sp, #4294967295
    6a40:	f05f 0008 	movs.w	r0, #8
    6a44:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    6a48:	f88c 2001 	strb.w	r2, [ip, #1]
    6a4c:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    6a50:	f80c 2f02 	strb.w	r2, [ip, #2]!
    6a54:	1e40      	subs	r0, r0, #1
    6a56:	d1f5      	bne.n	6a44 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    6a58:	f101 0c10 	add.w	ip, r1, #16
    6a5c:	466c      	mov	r4, sp
    6a5e:	f10d 010f 	add.w	r1, sp, #15
    6a62:	2008      	movs	r0, #8
    6a64:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    6a68:	704a      	strb	r2, [r1, #1]
    6a6a:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    6a6e:	f801 2f02 	strb.w	r2, [r1, #2]!
    6a72:	1e40      	subs	r0, r0, #1
    6a74:	d1f6      	bne.n	6a64 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    6a76:	4620      	mov	r0, r4
    6a78:	f00b fd4b 	bl	12512 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    6a7c:	b17e      	cbz	r6, 6a9e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    6a7e:	1e6a      	subs	r2, r5, #1
    6a80:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6a84:	f05f 0108 	movs.w	r1, #8
    6a88:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6a8c:	7053      	strb	r3, [r2, #1]
    6a8e:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    6a92:	f802 3f02 	strb.w	r3, [r2, #2]!
    6a96:	1e49      	subs	r1, r1, #1
    6a98:	d1f6      	bne.n	6a88 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    6a9a:	b00c      	add	sp, #48	; 0x30
    6a9c:	bd70      	pop	{r4, r5, r6, pc}
    6a9e:	9808      	ldr	r0, [sp, #32]
    6aa0:	6028      	str	r0, [r5, #0]
    6aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
    6aa4:	6068      	str	r0, [r5, #4]
    6aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
    6aa8:	60a8      	str	r0, [r5, #8]
    6aaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6aac:	60e8      	str	r0, [r5, #12]
    6aae:	b00c      	add	sp, #48	; 0x30
    6ab0:	bd70      	pop	{r4, r5, r6, pc}
	...

00006ab4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6ab4:	b570      	push	{r4, r5, r6, lr}
    6ab6:	4604      	mov	r4, r0
    6ab8:	2601      	movs	r6, #1
    6aba:	b169      	cbz	r1, 6ad8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x24>
    6abc:	2901      	cmp	r1, #1
    6abe:	d024      	beq.n	6b0a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x56>
    6ac0:	2902      	cmp	r1, #2
    6ac2:	d04b      	beq.n	6b5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa8>
    6ac4:	2903      	cmp	r1, #3
    6ac6:	bf18      	it	ne
    6ac8:	bd70      	popne	{r4, r5, r6, pc}
    6aca:	f104 01a7 	add.w	r1, r4, #167	; 0xa7
    6ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ad2:	30a6      	adds	r0, #166	; 0xa6
    6ad4:	f000 ba36 	b.w	6f44 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6ad8:	f44f 7252 	mov.w	r2, #840	; 0x348
    6adc:	2100      	movs	r1, #0
    6ade:	f00a fa65 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ae2:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    6ae6:	f007 fee1 	bl	e8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6aea:	f644 122b 	movw	r2, #18731	; 0x492b
    6aee:	4010      	ands	r0, r2
    6af0:	f8c4 00f2 	str.w	r0, [r4, #242]	; 0xf2
    6af4:	f001 0106 	and.w	r1, r1, #6
    6af8:	f8c4 10f6 	str.w	r1, [r4, #246]	; 0xf6
    6afc:	20fe      	movs	r0, #254	; 0xfe
    6afe:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    6b02:	207f      	movs	r0, #127	; 0x7f
    6b04:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    6b08:	bd70      	pop	{r4, r5, r6, pc}
    6b0a:	2500      	movs	r5, #0
    6b0c:	f8a4 5286 	strh.w	r5, [r4, #646]	; 0x286
    6b10:	f884 527b 	strb.w	r5, [r4, #635]	; 0x27b
    6b14:	6961      	ldr	r1, [r4, #20]
    6b16:	4816      	ldr	r0, [pc, #88]	; (6b70 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    6b18:	460a      	mov	r2, r1
    6b1a:	4408      	add	r0, r1
    6b1c:	fbb0 f0f1 	udiv	r0, r0, r1
    6b20:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    6b24:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6b28:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
    6b2c:	8be3      	ldrh	r3, [r4, #30]
    6b2e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    6b32:	f000 f8d7 	bl	6ce4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    6b36:	f104 01a7 	add.w	r1, r4, #167	; 0xa7
    6b3a:	1e48      	subs	r0, r1, #1
    6b3c:	f000 fa02 	bl	6f44 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b40:	f00a f996 	bl	10e70 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6b44:	b138      	cbz	r0, 6b56 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa2>
    6b46:	69a0      	ldr	r0, [r4, #24]
    6b48:	f000 ffce 	bl	7ae8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6b4c:	2800      	cmp	r0, #0
    6b4e:	bf04      	itt	eq
    6b50:	f884 626c 	strbeq.w	r6, [r4, #620]	; 0x26c
    6b54:	bd70      	popeq	{r4, r5, r6, pc}
    6b56:	f884 526c 	strb.w	r5, [r4, #620]	; 0x26c
    6b5a:	bd70      	pop	{r4, r5, r6, pc}
    6b5c:	f8b4 332a 	ldrh.w	r3, [r4, #810]	; 0x32a
    6b60:	f8d4 2324 	ldr.w	r2, [r4, #804]	; 0x324
    6b64:	6961      	ldr	r1, [r4, #20]
    6b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b6a:	3090      	adds	r0, #144	; 0x90
    6b6c:	f000 b8ba 	b.w	6ce4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    6b70:	01c9c37f 	.word	0x01c9c37f

00006b74 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    6b74:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6b78:	4604      	mov	r4, r0
    6b7a:	4690      	mov	r8, r2
    6b7c:	468a      	mov	sl, r1
    6b7e:	f04f 0901 	mov.w	r9, #1
    6b82:	4608      	mov	r0, r1
    6b84:	f00c f89b 	bl	12cbe <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    6b88:	4605      	mov	r5, r0
    6b8a:	4650      	mov	r0, sl
    6b8c:	f00c f8a3 	bl	12cd6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    6b90:	4607      	mov	r7, r0
    6b92:	f010 0f01 	tst.w	r0, #1
    6b96:	bf18      	it	ne
    6b98:	2601      	movne	r6, #1
    6b9a:	d02b      	beq.n	6bf4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x80>
    6b9c:	f015 0f01 	tst.w	r5, #1
    6ba0:	bf18      	it	ne
    6ba2:	f04f 0b01 	movne.w	fp, #1
    6ba6:	d030      	beq.n	6c0a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x96>
    6ba8:	ea56 000b 	orrs.w	r0, r6, fp
    6bac:	bf08      	it	eq
    6bae:	f04f 0900 	moveq.w	r9, #0
    6bb2:	f007 fe81 	bl	e8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    6bb6:	4238      	tst	r0, r7
    6bb8:	bf08      	it	eq
    6bba:	2600      	moveq	r6, #0
    6bbc:	f007 fe7c 	bl	e8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    6bc0:	4228      	tst	r0, r5
    6bc2:	bf08      	it	eq
    6bc4:	f04f 0b00 	moveq.w	fp, #0
    6bc8:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    6bcc:	42b0      	cmp	r0, r6
    6bce:	bf0c      	ite	eq
    6bd0:	2000      	moveq	r0, #0
    6bd2:	4630      	movne	r0, r6
    6bd4:	f888 0000 	strb.w	r0, [r8]
    6bd8:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    6bdc:	4559      	cmp	r1, fp
    6bde:	bf08      	it	eq
    6be0:	f04f 0b00 	moveq.w	fp, #0
    6be4:	f888 b001 	strb.w	fp, [r8, #1]
    6be8:	2800      	cmp	r0, #0
    6bea:	bf08      	it	eq
    6bec:	f1bb 0f00 	cmpeq.w	fp, #0
    6bf0:	d128      	bne.n	6c44 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    6bf2:	e018      	b.n	6c26 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb2>
    6bf4:	f010 0f02 	tst.w	r0, #2
    6bf8:	bf18      	it	ne
    6bfa:	2602      	movne	r6, #2
    6bfc:	d1ce      	bne.n	6b9c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    6bfe:	f017 0f04 	tst.w	r7, #4
    6c02:	bf14      	ite	ne
    6c04:	2608      	movne	r6, #8
    6c06:	2600      	moveq	r6, #0
    6c08:	e7c8      	b.n	6b9c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    6c0a:	f015 0f02 	tst.w	r5, #2
    6c0e:	bf18      	it	ne
    6c10:	f04f 0b02 	movne.w	fp, #2
    6c14:	d1c8      	bne.n	6ba8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    6c16:	f015 0f04 	tst.w	r5, #4
    6c1a:	bf14      	ite	ne
    6c1c:	f04f 0b08 	movne.w	fp, #8
    6c20:	f04f 0b00 	moveq.w	fp, #0
    6c24:	e7c0      	b.n	6ba8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    6c26:	4650      	mov	r0, sl
    6c28:	f00c f853 	bl	12cd2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    6c2c:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    6c30:	1a40      	subs	r0, r0, r1
    6c32:	b200      	sxth	r0, r0
    6c34:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    6c38:	4288      	cmp	r0, r1
    6c3a:	dc01      	bgt.n	6c40 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xcc>
    6c3c:	2800      	cmp	r0, #0
    6c3e:	dc01      	bgt.n	6c44 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    6c40:	f04f 0900 	mov.w	r9, #0
    6c44:	b116      	cbz	r6, 6c4c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd8>
    6c46:	2e08      	cmp	r6, #8
    6c48:	d010      	beq.n	6c6c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    6c4a:	e01f      	b.n	6c8c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    6c4c:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    6c50:	2801      	cmp	r0, #1
    6c52:	bf18      	it	ne
    6c54:	2802      	cmpne	r0, #2
    6c56:	d019      	beq.n	6c8c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    6c58:	2804      	cmp	r0, #4
    6c5a:	bf18      	it	ne
    6c5c:	2808      	cmpne	r0, #8
    6c5e:	d005      	beq.n	6c6c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    6c60:	f240 21a9 	movw	r1, #681	; 0x2a9
    6c64:	f04f 0006 	mov.w	r0, #6
    6c68:	f7fd fd28 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c6c:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    6c70:	2801      	cmp	r0, #1
    6c72:	d10b      	bne.n	6c8c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    6c74:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    6c78:	2801      	cmp	r0, #1
    6c7a:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    6c7e:	d008      	beq.n	6c92 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x11e>
    6c80:	2808      	cmp	r0, #8
    6c82:	d003      	beq.n	6c8c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    6c84:	f05f 0008 	movs.w	r0, #8
    6c88:	f888 0000 	strb.w	r0, [r8]
    6c8c:	4648      	mov	r0, r9
    6c8e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6c92:	2804      	cmp	r0, #4
    6c94:	bf18      	it	ne
    6c96:	2004      	movne	r0, #4
    6c98:	d1f6      	bne.n	6c88 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x114>
    6c9a:	e7f3      	b.n	6c84 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x110>

00006c9c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    6c9c:	b430      	push	{r4, r5}
    6c9e:	2200      	movs	r2, #0
    6ca0:	f1a1 0c01 	sub.w	ip, r1, #1
    6ca4:	f1bc 0f00 	cmp.w	ip, #0
    6ca8:	dd12      	ble.n	6cd0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    6caa:	1e43      	subs	r3, r0, #1
    6cac:	f011 0f01 	tst.w	r1, #1
    6cb0:	bf08      	it	eq
    6cb2:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    6cb6:	785c      	ldrb	r4, [r3, #1]
    6cb8:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    6cbc:	d008      	beq.n	6cd0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    6cbe:	bf00      	nop
    6cc0:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    6cc4:	4322      	orrs	r2, r4
    6cc6:	785c      	ldrb	r4, [r3, #1]
    6cc8:	432a      	orrs	r2, r5
    6cca:	f1bc 0c01 	subs.w	ip, ip, #1
    6cce:	d1f7      	bne.n	6cc0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    6cd0:	1e49      	subs	r1, r1, #1
    6cd2:	bf5c      	itt	pl
    6cd4:	5c40      	ldrbpl	r0, [r0, r1]
    6cd6:	4302      	orrpl	r2, r0
    6cd8:	2a00      	cmp	r2, #0
    6cda:	bf0c      	ite	eq
    6cdc:	2001      	moveq	r0, #1
    6cde:	2000      	movne	r0, #0
    6ce0:	bc30      	pop	{r4, r5}
    6ce2:	4770      	bx	lr
    6ce4:	b410      	push	{r4}
    6ce6:	f04f 0c00 	mov.w	ip, #0
    6cea:	f8a0 c042 	strh.w	ip, [r0, #66]	; 0x42
    6cee:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
    6cf2:	4c18      	ldr	r4, [pc, #96]	; (6d54 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>)
    6cf4:	fb0c fc01 	mul.w	ip, ip, r1
    6cf8:	fbbc fcf2 	udiv	ip, ip, r2
    6cfc:	f8a0 c046 	strh.w	ip, [r0, #70]	; 0x46
    6d00:	f242 7c10 	movw	ip, #10000	; 0x2710
    6d04:	fb03 f30c 	mul.w	r3, r3, ip
    6d08:	fbb3 f3f2 	udiv	r3, r3, r2
    6d0c:	1c5b      	adds	r3, r3, #1
    6d0e:	b29b      	uxth	r3, r3
    6d10:	fb03 fc02 	mul.w	ip, r3, r2
    6d14:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    6d18:	45a4      	cmp	ip, r4
    6d1a:	bf84      	itt	hi
    6d1c:	1e5b      	subhi	r3, r3, #1
    6d1e:	f8a0 3044 	strhhi.w	r3, [r0, #68]	; 0x44
    6d22:	4b0d      	ldr	r3, [pc, #52]	; (6d58 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xbc>)
    6d24:	f240 2c71 	movw	ip, #625	; 0x271
    6d28:	fbb3 f3f2 	udiv	r3, r3, r2
    6d2c:	1c5b      	adds	r3, r3, #1
    6d2e:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
    6d32:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    6d34:	fb03 f30c 	mul.w	r3, r3, ip
    6d38:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6d3c:	1e5b      	subs	r3, r3, #1
    6d3e:	fbb3 f3f2 	udiv	r3, r3, r2
    6d42:	6383      	str	r3, [r0, #56]	; 0x38
    6d44:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6d46:	4359      	muls	r1, r3
    6d48:	fbb1 f1f2 	udiv	r1, r1, r2
    6d4c:	6341      	str	r1, [r0, #52]	; 0x34
    6d4e:	bc10      	pop	{r4}
    6d50:	4770      	bx	lr
    6d52:	0000      	.short	0x0000
    6d54:	01e84800 	.word	0x01e84800
    6d58:	02625a00 	.word	0x02625a00

00006d5c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    6d5c:	4907      	ldr	r1, [pc, #28]	; (6d7c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x20>)
    6d5e:	b508      	push	{r3, lr}
    6d60:	7809      	ldrb	r1, [r1, #0]
    6d62:	f88d 1000 	strb.w	r1, [sp]
    6d66:	f89d 1000 	ldrb.w	r1, [sp]
    6d6a:	2900      	cmp	r1, #0
    6d6c:	bf1c      	itt	ne
    6d6e:	2000      	movne	r0, #0
    6d70:	bd08      	popne	{r3, pc}
    6d72:	4903      	ldr	r1, [pc, #12]	; (6d80 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x24>)
    6d74:	f00e fba9 	bl	154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    6d78:	2001      	movs	r0, #1
    6d7a:	bd08      	pop	{r3, pc}
    6d7c:	200004da 	.word	0x200004da
    6d80:	200004db 	.word	0x200004db

00006d84 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    6d84:	b510      	push	{r4, lr}
    6d86:	4c05      	ldr	r4, [pc, #20]	; (6d9c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    6d88:	21ff      	movs	r1, #255	; 0xff
    6d8a:	7021      	strb	r1, [r4, #0]
    6d8c:	4601      	mov	r1, r0
    6d8e:	1c60      	adds	r0, r4, #1
    6d90:	f00e fb9b 	bl	154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    6d94:	2000      	movs	r0, #0
    6d96:	7020      	strb	r0, [r4, #0]
    6d98:	bd10      	pop	{r4, pc}
    6d9a:	0000      	.short	0x0000
    6d9c:	200004da 	.word	0x200004da

00006da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6da0:	b570      	push	{r4, r5, r6, lr}
    6da2:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6da6:	b289      	uxth	r1, r1
    6da8:	7ac4      	ldrb	r4, [r0, #11]
    6daa:	404a      	eors	r2, r1
    6dac:	f05f 0300 	movs.w	r3, #0
    6db0:	f002 0cff 	and.w	ip, r2, #255	; 0xff
    6db4:	0a12      	lsrs	r2, r2, #8
    6db6:	fa92 f2a2 	rbit	r2, r2
    6dba:	fa9c fcac 	rbit	ip, ip
    6dbe:	0e12      	lsrs	r2, r2, #24
    6dc0:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    6dc4:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
    6dc8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    6dcc:	1c5b      	adds	r3, r3, #1
    6dce:	440a      	add	r2, r1
    6dd0:	b2db      	uxtb	r3, r3
    6dd2:	b292      	uxth	r2, r2
    6dd4:	2b03      	cmp	r3, #3
    6dd6:	d3eb      	bcc.n	6db0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6dd8:	f8df c088 	ldr.w	ip, [pc, #136]	; 6e64 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xc4>
    6ddc:	4051      	eors	r1, r2
    6dde:	4663      	mov	r3, ip
    6de0:	2200      	movs	r2, #0
    6de2:	fbe1 320c 	umlal	r3, r2, r1, ip
    6de6:	0912      	lsrs	r2, r2, #4
    6de8:	f06f 0324 	mvn.w	r3, #36	; 0x24
    6dec:	fb02 1203 	mla	r2, r2, r3, r1
    6df0:	b2d2      	uxtb	r2, r2
    6df2:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6df6:	f002 0c07 	and.w	ip, r2, #7
    6dfa:	785d      	ldrb	r5, [r3, #1]
    6dfc:	2301      	movs	r3, #1
    6dfe:	fa03 fc0c 	lsl.w	ip, r3, ip
    6e02:	ea15 0f0c 	tst.w	r5, ip
    6e06:	bf1c      	itt	ne
    6e08:	4610      	movne	r0, r2
    6e0a:	bd70      	popne	{r4, r5, r6, pc}
    6e0c:	4361      	muls	r1, r4
    6e0e:	0c09      	lsrs	r1, r1, #16
    6e10:	1c49      	adds	r1, r1, #1
    6e12:	b2c9      	uxtb	r1, r1
    6e14:	f05f 0400 	movs.w	r4, #0
    6e18:	eb00 0c04 	add.w	ip, r0, r4
    6e1c:	f89c 2006 	ldrb.w	r2, [ip, #6]
    6e20:	428a      	cmp	r2, r1
    6e22:	bf27      	ittee	cs
    6e24:	2200      	movcs	r2, #0
    6e26:	f89c c001 	ldrbcs.w	ip, [ip, #1]
    6e2a:	1a89      	subcc	r1, r1, r2
    6e2c:	b2c9      	uxtbcc	r1, r1
    6e2e:	d30b      	bcc.n	6e48 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    6e30:	fa03 f502 	lsl.w	r5, r3, r2
    6e34:	ea1c 0f05 	tst.w	ip, r5
    6e38:	bf1c      	itt	ne
    6e3a:	1e49      	subne	r1, r1, #1
    6e3c:	b2c9      	uxtbne	r1, r1
    6e3e:	b161      	cbz	r1, 6e5a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xba>
    6e40:	1c52      	adds	r2, r2, #1
    6e42:	b2d2      	uxtb	r2, r2
    6e44:	2a08      	cmp	r2, #8
    6e46:	d3f3      	bcc.n	6e30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6e48:	1c62      	adds	r2, r4, #1
    6e4a:	b2d4      	uxtb	r4, r2
    6e4c:	2c05      	cmp	r4, #5
    6e4e:	d3e3      	bcc.n	6e18 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
    6e50:	f240 110d 	movw	r1, #269	; 0x10d
    6e54:	2046      	movs	r0, #70	; 0x46
    6e56:	f7fd fc31 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e5a:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
    6e5e:	b2c0      	uxtb	r0, r0
    6e60:	bd70      	pop	{r4, r5, r6, pc}
    6e62:	0000      	.short	0x0000
    6e64:	6eb3e453 	.word	0x6eb3e453

00006e68 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    6e68:	b570      	push	{r4, r5, r6, lr}
    6e6a:	4604      	mov	r4, r0
    6e6c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    6e70:	b108      	cbz	r0, 6e76 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    6e72:	2825      	cmp	r0, #37	; 0x25
    6e74:	d901      	bls.n	6e7a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    6e76:	2012      	movs	r0, #18
    6e78:	bd70      	pop	{r4, r5, r6, pc}
    6e7a:	2a00      	cmp	r2, #0
    6e7c:	bf04      	itt	eq
    6e7e:	2000      	moveq	r0, #0
    6e80:	bd70      	popeq	{r4, r5, r6, pc}
    6e82:	7da0      	ldrb	r0, [r4, #22]
    6e84:	b110      	cbz	r0, 6e8c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    6e86:	2801      	cmp	r0, #1
    6e88:	d050      	beq.n	6f2c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xc4>
    6e8a:	e047      	b.n	6f1c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xb4>
    6e8c:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    6e90:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    6e94:	4b2a      	ldr	r3, [pc, #168]	; (6f40 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xd8>)
    6e96:	fb01 0002 	mla	r0, r1, r2, r0
    6e9a:	2500      	movs	r5, #0
    6e9c:	461a      	mov	r2, r3
    6e9e:	4629      	mov	r1, r5
    6ea0:	fbe0 2103 	umlal	r2, r1, r0, r3
    6ea4:	0909      	lsrs	r1, r1, #4
    6ea6:	f06f 0224 	mvn.w	r2, #36	; 0x24
    6eaa:	fb01 0002 	mla	r0, r1, r2, r0
    6eae:	b2c0      	uxtb	r0, r0
    6eb0:	eb04 02d0 	add.w	r2, r4, r0, lsr #3
    6eb4:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    6eb8:	f000 0107 	and.w	r1, r0, #7
    6ebc:	7dd2      	ldrb	r2, [r2, #23]
    6ebe:	2301      	movs	r3, #1
    6ec0:	fa03 f101 	lsl.w	r1, r3, r1
    6ec4:	420a      	tst	r2, r1
    6ec6:	bf1e      	ittt	ne
    6ec8:	f884 0024 	strbne.w	r0, [r4, #36]	; 0x24
    6ecc:	4628      	movne	r0, r5
    6ece:	bd70      	popne	{r4, r5, r6, pc}
    6ed0:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6ed4:	fbb0 f2f1 	udiv	r2, r0, r1
    6ed8:	fb01 0012 	mls	r0, r1, r2, r0
    6edc:	1c40      	adds	r0, r0, #1
    6ede:	b2c1      	uxtb	r1, r0
    6ee0:	f05f 0000 	movs.w	r0, #0
    6ee4:	eb04 0c00 	add.w	ip, r4, r0
    6ee8:	f89c 201c 	ldrb.w	r2, [ip, #28]
    6eec:	428a      	cmp	r2, r1
    6eee:	bf27      	ittee	cs
    6ef0:	2200      	movcs	r2, #0
    6ef2:	f89c c017 	ldrbcs.w	ip, [ip, #23]
    6ef6:	1a89      	subcc	r1, r1, r2
    6ef8:	b2c9      	uxtbcc	r1, r1
    6efa:	d30b      	bcc.n	6f14 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xac>
    6efc:	fa03 f602 	lsl.w	r6, r3, r2
    6f00:	ea1c 0f06 	tst.w	ip, r6
    6f04:	bf1c      	itt	ne
    6f06:	1e49      	subne	r1, r1, #1
    6f08:	b2c9      	uxtbne	r1, r1
    6f0a:	b149      	cbz	r1, 6f20 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xb8>
    6f0c:	1c52      	adds	r2, r2, #1
    6f0e:	b2d2      	uxtb	r2, r2
    6f10:	2a08      	cmp	r2, #8
    6f12:	d3f3      	bcc.n	6efc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x94>
    6f14:	1c40      	adds	r0, r0, #1
    6f16:	b2c0      	uxtb	r0, r0
    6f18:	2805      	cmp	r0, #5
    6f1a:	d3e3      	bcc.n	6ee4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x7c>
    6f1c:	201f      	movs	r0, #31
    6f1e:	bd70      	pop	{r4, r5, r6, pc}
    6f20:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    6f24:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6f28:	4628      	mov	r0, r5
    6f2a:	bd70      	pop	{r4, r5, r6, pc}
    6f2c:	88a2      	ldrh	r2, [r4, #4]
    6f2e:	6989      	ldr	r1, [r1, #24]
    6f30:	f104 0016 	add.w	r0, r4, #22
    6f34:	f7ff ff34 	bl	6da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    6f38:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6f3c:	2000      	movs	r0, #0
    6f3e:	bd70      	pop	{r4, r5, r6, pc}
    6f40:	6eb3e453 	.word	0x6eb3e453

00006f44 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    6f44:	b510      	push	{r4, lr}
    6f46:	4604      	mov	r4, r0
    6f48:	1c40      	adds	r0, r0, #1
    6f4a:	4288      	cmp	r0, r1
    6f4c:	bf18      	it	ne
    6f4e:	f00e fabc 	blne	154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    6f52:	7960      	ldrb	r0, [r4, #5]
    6f54:	f000 001f 	and.w	r0, r0, #31
    6f58:	7160      	strb	r0, [r4, #5]
    6f5a:	2000      	movs	r0, #0
    6f5c:	f884 000b 	strb.w	r0, [r4, #11]
    6f60:	eb04 0c00 	add.w	ip, r4, r0
    6f64:	1c40      	adds	r0, r0, #1
    6f66:	f89c 2001 	ldrb.w	r2, [ip, #1]
    6f6a:	f002 0101 	and.w	r1, r2, #1
    6f6e:	0852      	lsrs	r2, r2, #1
    6f70:	f002 0301 	and.w	r3, r2, #1
    6f74:	4419      	add	r1, r3
    6f76:	0852      	lsrs	r2, r2, #1
    6f78:	f002 0301 	and.w	r3, r2, #1
    6f7c:	4419      	add	r1, r3
    6f7e:	0852      	lsrs	r2, r2, #1
    6f80:	f002 0301 	and.w	r3, r2, #1
    6f84:	440b      	add	r3, r1
    6f86:	0851      	lsrs	r1, r2, #1
    6f88:	f001 0201 	and.w	r2, r1, #1
    6f8c:	441a      	add	r2, r3
    6f8e:	0849      	lsrs	r1, r1, #1
    6f90:	f001 0301 	and.w	r3, r1, #1
    6f94:	441a      	add	r2, r3
    6f96:	0849      	lsrs	r1, r1, #1
    6f98:	f001 0301 	and.w	r3, r1, #1
    6f9c:	441a      	add	r2, r3
    6f9e:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    6fa2:	f88c 1006 	strb.w	r1, [ip, #6]
    6fa6:	7ae2      	ldrb	r2, [r4, #11]
    6fa8:	2805      	cmp	r0, #5
    6faa:	4411      	add	r1, r2
    6fac:	72e1      	strb	r1, [r4, #11]
    6fae:	dbd7      	blt.n	6f60 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1c>
    6fb0:	bd10      	pop	{r4, pc}
	...

00006fb4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6fb4:	7841      	ldrb	r1, [r0, #1]
    6fb6:	b141      	cbz	r1, 6fca <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6fb8:	78c0      	ldrb	r0, [r0, #3]
    6fba:	2826      	cmp	r0, #38	; 0x26
    6fbc:	d203      	bcs.n	6fc6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6fbe:	4a04      	ldr	r2, [pc, #16]	; (6fd0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6fc0:	5c10      	ldrb	r0, [r2, r0]
    6fc2:	4288      	cmp	r0, r1
    6fc4:	d101      	bne.n	6fca <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6fc6:	2001      	movs	r0, #1
    6fc8:	4770      	bx	lr
    6fca:	2000      	movs	r0, #0
    6fcc:	4770      	bx	lr
    6fce:	0000      	.short	0x0000
    6fd0:	0001553a 	.word	0x0001553a

00006fd4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6fd4:	b510      	push	{r4, lr}
    6fd6:	2201      	movs	r2, #1
    6fd8:	70c1      	strb	r1, [r0, #3]
    6fda:	2926      	cmp	r1, #38	; 0x26
    6fdc:	bf3c      	itt	cc
    6fde:	4a06      	ldrcc	r2, [pc, #24]	; (6ff8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6fe0:	5c52      	ldrbcc	r2, [r2, r1]
    6fe2:	d306      	bcc.n	6ff2 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6fe4:	29ff      	cmp	r1, #255	; 0xff
    6fe6:	d004      	beq.n	6ff2 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6fe8:	f240 411d 	movw	r1, #1053	; 0x41d
    6fec:	202a      	movs	r0, #42	; 0x2a
    6fee:	f7fd fb65 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ff2:	7042      	strb	r2, [r0, #1]
    6ff4:	bd10      	pop	{r4, pc}
    6ff6:	0000      	.short	0x0000
    6ff8:	0001553a 	.word	0x0001553a

00006ffc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    6ffc:	4904      	ldr	r1, [pc, #16]	; (7010 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    6ffe:	7d89      	ldrb	r1, [r1, #22]
    7000:	f001 0104 	and.w	r1, r1, #4
    7004:	4308      	orrs	r0, r1
    7006:	bf0c      	ite	eq
    7008:	2001      	moveq	r0, #1
    700a:	2000      	movne	r0, #0
    700c:	4770      	bx	lr
    700e:	0000      	.short	0x0000
    7010:	20001594 	.word	0x20001594

00007014 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    7014:	4803      	ldr	r0, [pc, #12]	; (7024 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    7016:	7d80      	ldrb	r0, [r0, #22]
    7018:	f010 0f02 	tst.w	r0, #2
    701c:	bf0c      	ite	eq
    701e:	2001      	moveq	r0, #1
    7020:	2000      	movne	r0, #0
    7022:	4770      	bx	lr
    7024:	20001594 	.word	0x20001594

00007028 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    7028:	4803      	ldr	r0, [pc, #12]	; (7038 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    702a:	7d80      	ldrb	r0, [r0, #22]
    702c:	f010 0f01 	tst.w	r0, #1
    7030:	bf0c      	ite	eq
    7032:	2001      	moveq	r0, #1
    7034:	2000      	movne	r0, #0
    7036:	4770      	bx	lr
    7038:	20001594 	.word	0x20001594

0000703c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7040:	4f5e      	ldr	r7, [pc, #376]	; (71bc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x180>)
    7042:	4680      	mov	r8, r0
    7044:	b085      	sub	sp, #20
    7046:	7eb8      	ldrb	r0, [r7, #26]
    7048:	468a      	mov	sl, r1
    704a:	b128      	cbz	r0, 7058 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x1c>
    704c:	8bb8      	ldrh	r0, [r7, #28]
    704e:	2800      	cmp	r0, #0
    7050:	bf04      	itt	eq
    7052:	b005      	addeq	sp, #20
    7054:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7058:	f107 0418 	add.w	r4, r7, #24
    705c:	2000      	movs	r0, #0
    705e:	f7fd fd2f 	bl	4ac0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7062:	4605      	mov	r5, r0
    7064:	2001      	movs	r0, #1
    7066:	f7fd fd2b 	bl	4ac0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    706a:	4428      	add	r0, r5
    706c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    7070:	f04f 0600 	mov.w	r6, #0
    7074:	f64f 7bff 	movw	fp, #65535	; 0xffff
    7078:	bf18      	it	ne
    707a:	f04f 0900 	movne.w	r9, #0
    707e:	d010      	beq.n	70a2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x66>
    7080:	8820      	ldrh	r0, [r4, #0]
    7082:	1c40      	adds	r0, r0, #1
    7084:	b280      	uxth	r0, r0
    7086:	8020      	strh	r0, [r4, #0]
    7088:	42a8      	cmp	r0, r5
    708a:	bf28      	it	cs
    708c:	f8a4 9000 	strhcs.w	r9, [r4]
    7090:	8820      	ldrh	r0, [r4, #0]
    7092:	4669      	mov	r1, sp
    7094:	f00b faec 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7098:	b148      	cbz	r0, 70ae <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x72>
    709a:	1c70      	adds	r0, r6, #1
    709c:	b2c6      	uxtb	r6, r0
    709e:	42ae      	cmp	r6, r5
    70a0:	d3ee      	bcc.n	7080 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x44>
    70a2:	f8a4 b000 	strh.w	fp, [r4]
    70a6:	b005      	add	sp, #20
    70a8:	2000      	movs	r0, #0
    70aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70ae:	8b38      	ldrh	r0, [r7, #24]
    70b0:	9000      	str	r0, [sp, #0]
    70b2:	8b38      	ldrh	r0, [r7, #24]
    70b4:	4558      	cmp	r0, fp
    70b6:	d054      	beq.n	7162 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x126>
    70b8:	f8a8 0000 	strh.w	r0, [r8]
    70bc:	f888 9005 	strb.w	r9, [r8, #5]
    70c0:	f7fd ff86 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    70c4:	4605      	mov	r5, r0
    70c6:	f00a fe51 	bl	11d6c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    70ca:	0004      	movs	r4, r0
    70cc:	d049      	beq.n	7162 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x126>
    70ce:	4601      	mov	r1, r0
    70d0:	aa01      	add	r2, sp, #4
    70d2:	4628      	mov	r0, r5
    70d4:	f00a fe6f 	bl	11db6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    70d8:	f8a8 0002 	strh.w	r0, [r8, #2]
    70dc:	b128      	cbz	r0, 70ea <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xae>
    70de:	28fb      	cmp	r0, #251	; 0xfb
    70e0:	d907      	bls.n	70f2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xb6>
    70e2:	21ae      	movs	r1, #174	; 0xae
    70e4:	202b      	movs	r0, #43	; 0x2b
    70e6:	f7fd fae9 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70ea:	21ad      	movs	r1, #173	; 0xad
    70ec:	202b      	movs	r0, #43	; 0x2b
    70ee:	f7fd fae5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70f2:	9801      	ldr	r0, [sp, #4]
    70f4:	f00b fddf 	bl	12cb6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    70f8:	2101      	movs	r1, #1
    70fa:	2801      	cmp	r0, #1
    70fc:	bf08      	it	eq
    70fe:	f888 1004 	strbeq.w	r1, [r8, #4]
    7102:	d008      	beq.n	7116 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xda>
    7104:	2802      	cmp	r0, #2
    7106:	bf08      	it	eq
    7108:	f888 0004 	strbeq.w	r0, [r8, #4]
    710c:	d003      	beq.n	7116 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xda>
    710e:	21bd      	movs	r1, #189	; 0xbd
    7110:	202b      	movs	r0, #43	; 0x2b
    7112:	f7fd fad3 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7116:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    711a:	2003      	movs	r0, #3
    711c:	9000      	str	r0, [sp, #0]
    711e:	4652      	mov	r2, sl
    7120:	4621      	mov	r1, r4
    7122:	4628      	mov	r0, r5
    7124:	f00a fd29 	bl	11b7a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    7128:	4628      	mov	r0, r5
    712a:	f8c8 a008 	str.w	sl, [r8, #8]
    712e:	f00a fde0 	bl	11cf2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    7132:	b170      	cbz	r0, 7152 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x116>
    7134:	2200      	movs	r2, #0
    7136:	4611      	mov	r1, r2
    7138:	4628      	mov	r0, r5
    713a:	f00a ff2c 	bl	11f96 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    713e:	b160      	cbz	r0, 715a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x11e>
    7140:	7eb8      	ldrb	r0, [r7, #26]
    7142:	b110      	cbz	r0, 714a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x10e>
    7144:	8bb8      	ldrh	r0, [r7, #28]
    7146:	1e40      	subs	r0, r0, #1
    7148:	83b8      	strh	r0, [r7, #28]
    714a:	b005      	add	sp, #20
    714c:	2001      	movs	r0, #1
    714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7152:	21cd      	movs	r1, #205	; 0xcd
    7154:	202b      	movs	r0, #43	; 0x2b
    7156:	f7fd fab1 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    715a:	21d2      	movs	r1, #210	; 0xd2
    715c:	202b      	movs	r0, #43	; 0x2b
    715e:	f7fd faad 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7162:	f107 0418 	add.w	r4, r7, #24
    7166:	2000      	movs	r0, #0
    7168:	f7fd fcaa 	bl	4ac0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    716c:	4605      	mov	r5, r0
    716e:	2001      	movs	r0, #1
    7170:	f7fd fca6 	bl	4ac0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7174:	4428      	add	r0, r5
    7176:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    717a:	f04f 0600 	mov.w	r6, #0
    717e:	d010      	beq.n	71a2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x166>
    7180:	8820      	ldrh	r0, [r4, #0]
    7182:	1c40      	adds	r0, r0, #1
    7184:	b280      	uxth	r0, r0
    7186:	8020      	strh	r0, [r4, #0]
    7188:	42a8      	cmp	r0, r5
    718a:	bf28      	it	cs
    718c:	f8a4 9000 	strhcs.w	r9, [r4]
    7190:	8820      	ldrh	r0, [r4, #0]
    7192:	a902      	add	r1, sp, #8
    7194:	f00b fa6c 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7198:	b148      	cbz	r0, 71ae <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x172>
    719a:	1c70      	adds	r0, r6, #1
    719c:	b2c6      	uxtb	r6, r0
    719e:	42ae      	cmp	r6, r5
    71a0:	d3ee      	bcc.n	7180 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x144>
    71a2:	f8a4 b000 	strh.w	fp, [r4]
    71a6:	b005      	add	sp, #20
    71a8:	2000      	movs	r0, #0
    71aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71ae:	8b39      	ldrh	r1, [r7, #24]
    71b0:	9800      	ldr	r0, [sp, #0]
    71b2:	4281      	cmp	r1, r0
    71b4:	f47f af7d 	bne.w	70b2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x76>
    71b8:	e7f5      	b.n	71a6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x16a>
    71ba:	0000      	.short	0x0000
    71bc:	20001594 	.word	0x20001594

000071c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    71c0:	b510      	push	{r4, lr}
    71c2:	7901      	ldrb	r1, [r0, #4]
    71c4:	b181      	cbz	r1, 71e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28>
    71c6:	2901      	cmp	r1, #1
    71c8:	bf1c      	itt	ne
    71ca:	2000      	movne	r0, #0
    71cc:	bd10      	popne	{r4, pc}
    71ce:	8842      	ldrh	r2, [r0, #2]
    71d0:	6883      	ldr	r3, [r0, #8]
    71d2:	8800      	ldrh	r0, [r0, #0]
    71d4:	f05f 0101 	movs.w	r1, #1
    71d8:	f000 f80c 	bl	71f4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    71dc:	2800      	cmp	r0, #0
    71de:	bf08      	it	eq
    71e0:	f000 f86c 	bleq	72bc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    71e4:	2001      	movs	r0, #1
    71e6:	bd10      	pop	{r4, pc}
    71e8:	8842      	ldrh	r2, [r0, #2]
    71ea:	6883      	ldr	r3, [r0, #8]
    71ec:	8800      	ldrh	r0, [r0, #0]
    71ee:	2102      	movs	r1, #2
    71f0:	e7f2      	b.n	71d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    71f2:	0000      	movs	r0, r0
    71f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    71f8:	b084      	sub	sp, #16
    71fa:	4689      	mov	r9, r1
    71fc:	469a      	mov	sl, r3
    71fe:	4615      	mov	r5, r2
    7200:	4606      	mov	r6, r0
    7202:	a902      	add	r1, sp, #8
    7204:	f00b fa34 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7208:	2800      	cmp	r0, #0
    720a:	d14d      	bne.n	72a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe8>
    720c:	9803      	ldr	r0, [sp, #12]
    720e:	2d00      	cmp	r5, #0
    7210:	f100 0490 	add.w	r4, r0, #144	; 0x90
    7214:	bf04      	itt	eq
    7216:	2001      	moveq	r0, #1
    7218:	7560      	strbeq	r0, [r4, #21]
    721a:	d045      	beq.n	72a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe8>
    721c:	4630      	mov	r0, r6
    721e:	f7fd feed 	bl	4ffc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7222:	ea5f 0800 	movs.w	r8, r0
    7226:	d00c      	beq.n	7242 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x82>
    7228:	4629      	mov	r1, r5
    722a:	f00a fdcb 	bl	11dc4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    722e:	0007      	movs	r7, r0
    7230:	d003      	beq.n	723a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7a>
    7232:	4821      	ldr	r0, [pc, #132]	; (72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>)
    7234:	8840      	ldrh	r0, [r0, #2]
    7236:	4285      	cmp	r5, r0
    7238:	d907      	bls.n	724a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x8a>
    723a:	b004      	add	sp, #16
    723c:	2000      	movs	r0, #0
    723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7242:	216e      	movs	r1, #110	; 0x6e
    7244:	202b      	movs	r0, #43	; 0x2b
    7246:	f7fd fa39 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    724a:	aa01      	add	r2, sp, #4
    724c:	4639      	mov	r1, r7
    724e:	4640      	mov	r0, r8
    7250:	f00a fdb1 	bl	11db6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    7254:	9801      	ldr	r0, [sp, #4]
    7256:	2600      	movs	r6, #0
    7258:	8006      	strh	r6, [r0, #0]
    725a:	7086      	strb	r6, [r0, #2]
    725c:	7d61      	ldrb	r1, [r4, #21]
    725e:	2900      	cmp	r1, #0
    7260:	bf18      	it	ne
    7262:	f04f 0902 	movne.w	r9, #2
    7266:	4649      	mov	r1, r9
    7268:	f00b fda1 	bl	12dae <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    726c:	2003      	movs	r0, #3
    726e:	9000      	str	r0, [sp, #0]
    7270:	462b      	mov	r3, r5
    7272:	4652      	mov	r2, sl
    7274:	4639      	mov	r1, r7
    7276:	4640      	mov	r0, r8
    7278:	f00a fc96 	bl	11ba8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    727c:	4629      	mov	r1, r5
    727e:	4640      	mov	r0, r8
    7280:	f00a fd50 	bl	11d24 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    7284:	b1a0      	cbz	r0, 72b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf0>
    7286:	f89d 0008 	ldrb.w	r0, [sp, #8]
    728a:	b160      	cbz	r0, 72a6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    728c:	9803      	ldr	r0, [sp, #12]
    728e:	f890 027a 	ldrb.w	r0, [r0, #634]	; 0x27a
    7292:	b128      	cbz	r0, 72a0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    7294:	9803      	ldr	r0, [sp, #12]
    7296:	f880 627a 	strb.w	r6, [r0, #634]	; 0x27a
    729a:	9803      	ldr	r0, [sp, #12]
    729c:	f00c fd11 	bl	13cc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    72a0:	9803      	ldr	r0, [sp, #12]
    72a2:	f8a0 6272 	strh.w	r6, [r0, #626]	; 0x272
    72a6:	7566      	strb	r6, [r4, #21]
    72a8:	b004      	add	sp, #16
    72aa:	2001      	movs	r0, #1
    72ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    72b0:	2184      	movs	r1, #132	; 0x84
    72b2:	202b      	movs	r0, #43	; 0x2b
    72b4:	f7fd fa02 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72b8:	20001594 	.word	0x20001594

000072bc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    72bc:	4901      	ldr	r1, [pc, #4]	; (72c4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    72be:	2001      	movs	r0, #1
    72c0:	7008      	strb	r0, [r1, #0]
    72c2:	4770      	bx	lr
    72c4:	20001898 	.word	0x20001898

000072c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    72c8:	b508      	push	{r3, lr}
    72ca:	b1d8      	cbz	r0, 7304 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3c>
    72cc:	7a03      	ldrb	r3, [r0, #8]
    72ce:	f88d 3000 	strb.w	r3, [sp]
    72d2:	f89d 3000 	ldrb.w	r3, [sp]
    72d6:	2b00      	cmp	r3, #0
    72d8:	bf18      	it	ne
    72da:	bd08      	popne	{r3, pc}
    72dc:	2300      	movs	r3, #0
    72de:	6003      	str	r3, [r0, #0]
    72e0:	6041      	str	r1, [r0, #4]
    72e2:	f3ef 8310 	mrs	r3, PRIMASK
    72e6:	b672      	cpsid	i
    72e8:	490a      	ldr	r1, [pc, #40]	; (7314 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>)
    72ea:	f8d1 c000 	ldr.w	ip, [r1]
    72ee:	f1bc 0f00 	cmp.w	ip, #0
    72f2:	bf1a      	itte	ne
    72f4:	f8d1 c004 	ldrne.w	ip, [r1, #4]
    72f8:	f8cc 0000 	strne.w	r0, [ip]
    72fc:	6008      	streq	r0, [r1, #0]
    72fe:	6048      	str	r0, [r1, #4]
    7300:	b933      	cbnz	r3, 7310 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    7302:	e004      	b.n	730e <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x46>
    7304:	f240 4141 	movw	r1, #1089	; 0x441
    7308:	2010      	movs	r0, #16
    730a:	f7fd f9d7 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    730e:	b662      	cpsie	i
    7310:	7202      	strb	r2, [r0, #8]
    7312:	bd08      	pop	{r3, pc}
    7314:	2000012c 	.word	0x2000012c

00007318 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    7318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    731c:	b087      	sub	sp, #28
    731e:	0004      	movs	r4, r0
    7320:	d00f      	beq.n	7342 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a>
    7322:	48fe      	ldr	r0, [pc, #1016]	; (771c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x404>)
    7324:	2701      	movs	r7, #1
    7326:	2500      	movs	r5, #0
    7328:	7801      	ldrb	r1, [r0, #0]
    732a:	2900      	cmp	r1, #0
    732c:	bf08      	it	eq
    732e:	f8df b3f0 	ldreq.w	fp, [pc, #1008]	; 7720 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x408>
    7332:	d00b      	beq.n	734c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    7334:	7065      	strb	r5, [r4, #1]
    7336:	2103      	movs	r1, #3
    7338:	7021      	strb	r1, [r4, #0]
    733a:	7127      	strb	r7, [r4, #4]
    733c:	7005      	strb	r5, [r0, #0]
    733e:	f000 b8ba 	b.w	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7342:	f240 315d 	movw	r1, #861	; 0x35d
    7346:	2010      	movs	r0, #16
    7348:	f7fd f9b8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    734c:	f8db 0000 	ldr.w	r0, [fp]
    7350:	46a8      	mov	r8, r5
    7352:	2800      	cmp	r0, #0
    7354:	bf08      	it	eq
    7356:	4646      	moveq	r6, r8
    7358:	d022      	beq.n	73a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    735a:	7a01      	ldrb	r1, [r0, #8]
    735c:	f88d 1000 	strb.w	r1, [sp]
    7360:	f89d 1000 	ldrb.w	r1, [sp]
    7364:	2908      	cmp	r1, #8
    7366:	d109      	bne.n	737c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>
    7368:	6840      	ldr	r0, [r0, #4]
    736a:	8800      	ldrh	r0, [r0, #0]
    736c:	f7fd fe30 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7370:	f00a fc31 	bl	11bd6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7374:	2800      	cmp	r0, #0
    7376:	bf08      	it	eq
    7378:	462e      	moveq	r6, r5
    737a:	d011      	beq.n	73a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    737c:	f3ef 8010 	mrs	r0, PRIMASK
    7380:	f8db 6000 	ldr.w	r6, [fp]
    7384:	b672      	cpsid	i
    7386:	6831      	ldr	r1, [r6, #0]
    7388:	f8cb 1000 	str.w	r1, [fp]
    738c:	b900      	cbnz	r0, 7390 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    738e:	b662      	cpsie	i
    7390:	7a30      	ldrb	r0, [r6, #8]
    7392:	f88d 0000 	strb.w	r0, [sp]
    7396:	f89d 0000 	ldrb.w	r0, [sp]
    739a:	2800      	cmp	r0, #0
    739c:	bf08      	it	eq
    739e:	46b8      	moveq	r8, r7
    73a0:	f1b8 0f00 	cmp.w	r8, #0
    73a4:	d1d2      	bne.n	734c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    73a6:	b1de      	cbz	r6, 73e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc8>
    73a8:	7a30      	ldrb	r0, [r6, #8]
    73aa:	f88d 0000 	strb.w	r0, [sp]
    73ae:	f89d 8000 	ldrb.w	r8, [sp]
    73b2:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
    73b6:	f080 8284 	bcs.w	78c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5aa>
    73ba:	e8df f008 	tbb	[pc, r8]
    73be:	fdfe      	.short	0xfdfe
    73c0:	fdfc2480 	.word	0xfdfc2480
    73c4:	fdfdfbfd 	.word	0xfdfdfbfd
    73c8:	fefdfdfd 	.word	0xfefdfdfd
    73cc:	fdfdfc24 	.word	0xfdfdfc24
    73d0:	5454fc24 	.word	0x5454fc24
    73d4:	24fdfd54 	.word	0x24fdfd54
    73d8:	f9fafdfd 	.word	0xf9fafdfd
    73dc:	f715f824 	.word	0xf715f824
    73e0:	b007      	add	sp, #28
    73e2:	2000      	movs	r0, #0
    73e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    73e8:	7065      	strb	r5, [r4, #1]
    73ea:	2014      	movs	r0, #20
    73ec:	7020      	strb	r0, [r4, #0]
    73ee:	6065      	str	r5, [r4, #4]
    73f0:	60a5      	str	r5, [r4, #8]
    73f2:	60e5      	str	r5, [r4, #12]
    73f4:	6125      	str	r5, [r4, #16]
    73f6:	6165      	str	r5, [r4, #20]
    73f8:	61a5      	str	r5, [r4, #24]
    73fa:	61e5      	str	r5, [r4, #28]
    73fc:	2002      	movs	r0, #2
    73fe:	6225      	str	r5, [r4, #32]
    7400:	7120      	strb	r0, [r4, #4]
    7402:	7235      	strb	r5, [r6, #8]
    7404:	e057      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7406:	48c7      	ldr	r0, [pc, #796]	; (7724 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40c>)
    7408:	6803      	ldr	r3, [r0, #0]
    740a:	2b00      	cmp	r3, #0
    740c:	bf04      	itt	eq
    740e:	46a9      	moveq	r9, r5
    7410:	7235      	strbeq	r5, [r6, #8]
    7412:	d050      	beq.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7414:	6870      	ldr	r0, [r6, #4]
    7416:	4642      	mov	r2, r8
    7418:	4621      	mov	r1, r4
    741a:	4798      	blx	r3
    741c:	7820      	ldrb	r0, [r4, #0]
    741e:	6871      	ldr	r1, [r6, #4]
    7420:	2814      	cmp	r0, #20
    7422:	d002      	beq.n	742a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    7424:	2817      	cmp	r0, #23
    7426:	d003      	beq.n	7430 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    7428:	e01b      	b.n	7462 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    742a:	7920      	ldrb	r0, [r4, #4]
    742c:	b930      	cbnz	r0, 743c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>
    742e:	e018      	b.n	7462 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    7430:	7920      	ldrb	r0, [r4, #4]
    7432:	b1b0      	cbz	r0, 7462 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    7434:	4608      	mov	r0, r1
    7436:	f00c f9d9 	bl	137ec <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    743a:	b990      	cbnz	r0, 7462 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    743c:	88e4      	ldrh	r4, [r4, #6]
    743e:	2101      	movs	r1, #1
    7440:	4620      	mov	r0, r4
    7442:	f00a fea3 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7446:	b160      	cbz	r0, 7462 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    7448:	8800      	ldrh	r0, [r0, #0]
    744a:	f7fe f809 	bl	5460 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    744e:	2101      	movs	r1, #1
    7450:	4620      	mov	r0, r4
    7452:	f7fd fc0f 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7456:	b120      	cbz	r0, 7462 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    7458:	f44f 71af 	mov.w	r1, #350	; 0x15e
    745c:	2010      	movs	r0, #16
    745e:	f7fd f92d 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7462:	7235      	strb	r5, [r6, #8]
    7464:	e027      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7466:	48b0      	ldr	r0, [pc, #704]	; (7728 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x410>)
    7468:	6803      	ldr	r3, [r0, #0]
    746a:	2b00      	cmp	r3, #0
    746c:	bf04      	itt	eq
    746e:	46a9      	moveq	r9, r5
    7470:	7235      	strbeq	r5, [r6, #8]
    7472:	d020      	beq.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7474:	f1b8 0f15 	cmp.w	r8, #21
    7478:	d017      	beq.n	74aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    747a:	6877      	ldr	r7, [r6, #4]
    747c:	4642      	mov	r2, r8
    747e:	4621      	mov	r1, r4
    7480:	4638      	mov	r0, r7
    7482:	4798      	blx	r3
    7484:	7820      	ldrb	r0, [r4, #0]
    7486:	281b      	cmp	r0, #27
    7488:	d003      	beq.n	7492 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17a>
    748a:	2819      	cmp	r0, #25
    748c:	d10b      	bne.n	74a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    748e:	7920      	ldrb	r0, [r4, #4]
    7490:	b148      	cbz	r0, 74a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    7492:	8938      	ldrh	r0, [r7, #8]
    7494:	2104      	movs	r1, #4
    7496:	f7fd fbed 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    749a:	b128      	cbz	r0, 74a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x190>
    749c:	f44f 716b 	mov.w	r1, #940	; 0x3ac
    74a0:	2010      	movs	r0, #16
    74a2:	f7fd f90b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74a6:	7235      	strb	r5, [r6, #8]
    74a8:	e005      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    74aa:	4ba0      	ldr	r3, [pc, #640]	; (772c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x414>)
    74ac:	6870      	ldr	r0, [r6, #4]
    74ae:	2200      	movs	r2, #0
    74b0:	681b      	ldr	r3, [r3, #0]
    74b2:	4621      	mov	r1, r4
    74b4:	4798      	blx	r3
    74b6:	b007      	add	sp, #28
    74b8:	2001      	movs	r0, #1
    74ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74be:	489c      	ldr	r0, [pc, #624]	; (7730 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x418>)
    74c0:	6803      	ldr	r3, [r0, #0]
    74c2:	2b00      	cmp	r3, #0
    74c4:	bf04      	itt	eq
    74c6:	46a9      	moveq	r9, r5
    74c8:	7235      	strbeq	r5, [r6, #8]
    74ca:	d0f4      	beq.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    74cc:	2202      	movs	r2, #2
    74ce:	4621      	mov	r1, r4
    74d0:	2000      	movs	r0, #0
    74d2:	4798      	blx	r3
    74d4:	f007 f96a 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    74d8:	2800      	cmp	r0, #0
    74da:	d0ec      	beq.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    74dc:	7820      	ldrb	r0, [r4, #0]
    74de:	2805      	cmp	r0, #5
    74e0:	d003      	beq.n	74ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d2>
    74e2:	21cf      	movs	r1, #207	; 0xcf
    74e4:	2010      	movs	r0, #16
    74e6:	f7fd f8e9 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ea:	7ba0      	ldrb	r0, [r4, #14]
    74ec:	f010 0f10 	tst.w	r0, #16
    74f0:	d022      	beq.n	7538 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x220>
    74f2:	221c      	movs	r2, #28
    74f4:	1d21      	adds	r1, r4, #4
    74f6:	488f      	ldr	r0, [pc, #572]	; (7734 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x41c>)
    74f8:	f009 fcde 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    74fc:	7b22      	ldrb	r2, [r4, #12]
    74fe:	f104 0120 	add.w	r1, r4, #32
    7502:	488d      	ldr	r0, [pc, #564]	; (7738 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
    7504:	f009 fcd8 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7508:	498a      	ldr	r1, [pc, #552]	; (7734 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x41c>)
    750a:	7a88      	ldrb	r0, [r1, #10]
    750c:	f010 0f04 	tst.w	r0, #4
    7510:	d002      	beq.n	7518 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x200>
    7512:	7cc8      	ldrb	r0, [r1, #19]
    7514:	28fe      	cmp	r0, #254	; 0xfe
    7516:	d015      	beq.n	7544 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x22c>
    7518:	f04f 0204 	mov.w	r2, #4
    751c:	7022      	strb	r2, [r4, #0]
    751e:	6808      	ldr	r0, [r1, #0]
    7520:	6060      	str	r0, [r4, #4]
    7522:	6848      	ldr	r0, [r1, #4]
    7524:	60a0      	str	r0, [r4, #8]
    7526:	8908      	ldrh	r0, [r1, #8]
    7528:	81a0      	strh	r0, [r4, #12]
    752a:	7a88      	ldrb	r0, [r1, #10]
    752c:	f010 0f08 	tst.w	r0, #8
    7530:	bf18      	it	ne
    7532:	73a2      	strbne	r2, [r4, #14]
    7534:	d133      	bne.n	759e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    7536:	e01d      	b.n	7574 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x25c>
    7538:	f04f 01d0 	mov.w	r1, #208	; 0xd0
    753c:	f04f 0010 	mov.w	r0, #16
    7540:	f7fd f8bc 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7544:	2013      	movs	r0, #19
    7546:	7020      	strb	r0, [r4, #0]
    7548:	7808      	ldrb	r0, [r1, #0]
    754a:	7120      	strb	r0, [r4, #4]
    754c:	7167      	strb	r7, [r4, #5]
    754e:	7848      	ldrb	r0, [r1, #1]
    7550:	71a0      	strb	r0, [r4, #6]
    7552:	f8d1 0002 	ldr.w	r0, [r1, #2]
    7556:	f8c4 0007 	str.w	r0, [r4, #7]
    755a:	88c8      	ldrh	r0, [r1, #6]
    755c:	f8a4 000b 	strh.w	r0, [r4, #11]
    7560:	20fe      	movs	r0, #254	; 0xfe
    7562:	7360      	strb	r0, [r4, #13]
    7564:	6948      	ldr	r0, [r1, #20]
    7566:	f8c4 000e 	str.w	r0, [r4, #14]
    756a:	8b08      	ldrh	r0, [r1, #24]
    756c:	8260      	strh	r0, [r4, #18]
    756e:	7a48      	ldrb	r0, [r1, #9]
    7570:	7520      	strb	r0, [r4, #20]
    7572:	e7a0      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7574:	f010 0f01 	tst.w	r0, #1
    7578:	bf1c      	itt	ne
    757a:	f010 0f02 	tstne.w	r0, #2
    757e:	73a5      	strbne	r5, [r4, #14]
    7580:	d10d      	bne.n	759e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    7582:	f010 0f04 	tst.w	r0, #4
    7586:	bf18      	it	ne
    7588:	73a7      	strbne	r7, [r4, #14]
    758a:	d108      	bne.n	759e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    758c:	f010 0f01 	tst.w	r0, #1
    7590:	d116      	bne.n	75c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a8>
    7592:	f010 0f02 	tst.w	r0, #2
    7596:	bf18      	it	ne
    7598:	2002      	movne	r0, #2
    759a:	d011      	beq.n	75c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a8>
    759c:	73a0      	strb	r0, [r4, #14]
    759e:	7a0a      	ldrb	r2, [r1, #8]
    75a0:	2a1f      	cmp	r2, #31
    75a2:	d917      	bls.n	75d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2bc>
    75a4:	f44f 718a 	mov.w	r1, #276	; 0x114
    75a8:	2010      	movs	r0, #16
    75aa:	e007      	b.n	75bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a4>
    75ac:	e151      	b.n	7852 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x53a>
    75ae:	e183      	b.n	78b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5a0>
    75b0:	e170      	b.n	7894 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x57c>
    75b2:	e178      	b.n	78a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58e>
    75b4:	e158      	b.n	7868 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x550>
    75b6:	e013      	b.n	75e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c8>
    75b8:	e03a      	b.n	7630 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x318>
    75ba:	e182      	b.n	78c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5aa>
    75bc:	f7fd f87e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75c0:	f010 0f03 	tst.w	r0, #3
    75c4:	bf08      	it	eq
    75c6:	2003      	moveq	r0, #3
    75c8:	d0e8      	beq.n	759c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x284>
    75ca:	f240 1111 	movw	r1, #273	; 0x111
    75ce:	2010      	movs	r0, #16
    75d0:	f7fd f874 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75d4:	4958      	ldr	r1, [pc, #352]	; (7738 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
    75d6:	f104 000f 	add.w	r0, r4, #15
    75da:	f009 fc6d 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    75de:	e76a      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    75e0:	4853      	ldr	r0, [pc, #332]	; (7730 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x418>)
    75e2:	6803      	ldr	r3, [r0, #0]
    75e4:	2b00      	cmp	r3, #0
    75e6:	bf04      	itt	eq
    75e8:	46a9      	moveq	r9, r5
    75ea:	7235      	strbeq	r5, [r6, #8]
    75ec:	f43f af63 	beq.w	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    75f0:	4642      	mov	r2, r8
    75f2:	4621      	mov	r1, r4
    75f4:	2000      	movs	r0, #0
    75f6:	4798      	blx	r3
    75f8:	7820      	ldrb	r0, [r4, #0]
    75fa:	2818      	cmp	r0, #24
    75fc:	bf04      	itt	eq
    75fe:	7920      	ldrbeq	r0, [r4, #4]
    7600:	2801      	cmpeq	r0, #1
    7602:	d113      	bne.n	762c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    7604:	88e0      	ldrh	r0, [r4, #6]
    7606:	f04f 0100 	mov.w	r1, #0
    760a:	f00a fdbf 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    760e:	0004      	movs	r4, r0
    7610:	d00c      	beq.n	762c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    7612:	8820      	ldrh	r0, [r4, #0]
    7614:	f7fd ff24 	bl	5460 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7618:	8820      	ldrh	r0, [r4, #0]
    761a:	2100      	movs	r1, #0
    761c:	f7fd fb2a 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7620:	b120      	cbz	r0, 762c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    7622:	f44f 7196 	mov.w	r1, #300	; 0x12c
    7626:	2010      	movs	r0, #16
    7628:	f7fd f848 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    762c:	7235      	strb	r5, [r6, #8]
    762e:	e742      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7630:	4842      	ldr	r0, [pc, #264]	; (773c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x424>)
    7632:	6800      	ldr	r0, [r0, #0]
    7634:	2800      	cmp	r0, #0
    7636:	f000 8149 	beq.w	78cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b4>
    763a:	6870      	ldr	r0, [r6, #4]
    763c:	b178      	cbz	r0, 765e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x346>
    763e:	f100 0990 	add.w	r9, r0, #144	; 0x90
    7642:	f500 71b9 	add.w	r1, r0, #370	; 0x172
    7646:	f8b0 a000 	ldrh.w	sl, [r0]
    764a:	4640      	mov	r0, r8
    764c:	f1b8 0f10 	cmp.w	r8, #16
    7650:	d063      	beq.n	771a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x402>
    7652:	dc09      	bgt.n	7668 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x350>
    7654:	2801      	cmp	r0, #1
    7656:	d00c      	beq.n	7672 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x35a>
    7658:	280b      	cmp	r0, #11
    765a:	d021      	beq.n	76a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x388>
    765c:	e0c0      	b.n	77e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    765e:	f240 2182 	movw	r1, #642	; 0x282
    7662:	2010      	movs	r0, #16
    7664:	f7fd f82a 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7668:	281a      	cmp	r0, #26
    766a:	d078      	beq.n	775e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x446>
    766c:	281b      	cmp	r0, #27
    766e:	d031      	beq.n	76d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3bc>
    7670:	e0b6      	b.n	77e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    7672:	f1b9 0f00 	cmp.w	r9, #0
    7676:	d00d      	beq.n	7694 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x37c>
    7678:	7065      	strb	r5, [r4, #1]
    767a:	7027      	strb	r7, [r4, #0]
    767c:	7125      	strb	r5, [r4, #4]
    767e:	f8a4 a005 	strh.w	sl, [r4, #5]
    7682:	f899 005d 	ldrb.w	r0, [r9, #93]	; 0x5d
    7686:	71e0      	strb	r0, [r4, #7]
    7688:	f8b9 005e 	ldrh.w	r0, [r9, #94]	; 0x5e
    768c:	8120      	strh	r0, [r4, #8]
    768e:	f8b9 0060 	ldrh.w	r0, [r9, #96]	; 0x60
    7692:	8160      	strh	r0, [r4, #10]
    7694:	f1b8 0f0b 	cmp.w	r8, #11
    7698:	bf1c      	itt	ne
    769a:	46a9      	movne	r9, r5
    769c:	7235      	strbne	r5, [r6, #8]
    769e:	e70a      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    76a0:	4650      	mov	r0, sl
    76a2:	f7fd fcab 	bl	4ffc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    76a6:	b180      	cbz	r0, 76ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3b2>
    76a8:	7065      	strb	r5, [r4, #1]
    76aa:	210f      	movs	r1, #15
    76ac:	7021      	strb	r1, [r4, #0]
    76ae:	f8a4 a006 	strh.w	sl, [r4, #6]
    76b2:	8127      	strh	r7, [r4, #8]
    76b4:	2200      	movs	r2, #0
    76b6:	7127      	strb	r7, [r4, #4]
    76b8:	4611      	mov	r1, r2
    76ba:	f00a fc6c 	bl	11f96 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    76be:	f1b8 0f0b 	cmp.w	r8, #11
    76c2:	bf1c      	itt	ne
    76c4:	46a9      	movne	r9, r5
    76c6:	7235      	strbne	r5, [r6, #8]
    76c8:	e6f5      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    76ca:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    76ce:	2010      	movs	r0, #16
    76d0:	f7fc fff4 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76d4:	f7ff fca8 	bl	7028 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    76d8:	b390      	cbz	r0, 7740 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x428>
    76da:	7235      	strb	r5, [r6, #8]
    76dc:	4650      	mov	r0, sl
    76de:	f8ad a000 	strh.w	sl, [sp]
    76e2:	a902      	add	r1, sp, #8
    76e4:	f00a ffc4 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    76e8:	b120      	cbz	r0, 76f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3dc>
    76ea:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    76ee:	2010      	movs	r0, #16
    76f0:	f7fc ffe4 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76f4:	9803      	ldr	r0, [sp, #12]
    76f6:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    76fa:	f88d 1002 	strb.w	r1, [sp, #2]
    76fe:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    7702:	f88d 1003 	strb.w	r1, [sp, #3]
    7706:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    770a:	f8ad 0004 	strh.w	r0, [sp, #4]
    770e:	2102      	movs	r1, #2
    7710:	4668      	mov	r0, sp
    7712:	f00d fa55 	bl	14bc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7716:	b1d0      	cbz	r0, 774e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x436>
    7718:	e014      	b.n	7744 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x42c>
    771a:	e051      	b.n	77c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4a8>
    771c:	20001898 	.word	0x20001898
    7720:	2000012c 	.word	0x2000012c
    7724:	20000134 	.word	0x20000134
    7728:	20000144 	.word	0x20000144
    772c:	20000140 	.word	0x20000140
    7730:	20000148 	.word	0x20000148
    7734:	2000185d 	.word	0x2000185d
    7738:	20001879 	.word	0x20001879
    773c:	2000013c 	.word	0x2000013c
    7740:	e04d      	b.n	77de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c6>
    7742:	e00c      	b.n	775e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x446>
    7744:	f44f 71c2 	mov.w	r1, #388	; 0x184
    7748:	2010      	movs	r0, #16
    774a:	f7fc ffb7 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    774e:	f1b8 0f0b 	cmp.w	r8, #11
    7752:	bf1c      	itt	ne
    7754:	46a9      	movne	r9, r5
    7756:	7235      	strbne	r5, [r6, #8]
    7758:	f47f adf8 	bne.w	734c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    775c:	e6ab      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    775e:	f7ff fc59 	bl	7014 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    7762:	b3e0      	cbz	r0, 77de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c6>
    7764:	7235      	strb	r5, [r6, #8]
    7766:	a903      	add	r1, sp, #12
    7768:	4650      	mov	r0, sl
    776a:	f00d f859 	bl	14820 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    776e:	b120      	cbz	r0, 777a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x462>
    7770:	f240 118b 	movw	r1, #395	; 0x18b
    7774:	2010      	movs	r0, #16
    7776:	f7fc ffa1 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    777a:	f8ad a000 	strh.w	sl, [sp]
    777e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7782:	f8ad 0002 	strh.w	r0, [sp, #2]
    7786:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    778a:	f8ad 0004 	strh.w	r0, [sp, #4]
    778e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    7792:	f8ad 0006 	strh.w	r0, [sp, #6]
    7796:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    779a:	f8ad 0008 	strh.w	r0, [sp, #8]
    779e:	4668      	mov	r0, sp
    77a0:	f00d f86d 	bl	1487e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    77a4:	b120      	cbz	r0, 77b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x498>
    77a6:	f44f 71ca 	mov.w	r1, #404	; 0x194
    77aa:	2010      	movs	r0, #16
    77ac:	f7fc ff86 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77b0:	f1b8 0f0b 	cmp.w	r8, #11
    77b4:	bf1c      	itt	ne
    77b6:	46a9      	movne	r9, r5
    77b8:	7235      	strbne	r5, [r6, #8]
    77ba:	f47f adc7 	bne.w	734c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    77be:	e67a      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    77c0:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    77c4:	f000 0001 	and.w	r0, r0, #1
    77c8:	f7ff fc18 	bl	6ffc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    77cc:	b1c0      	cbz	r0, 7800 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4e8>
    77ce:	f1b8 0f0b 	cmp.w	r8, #11
    77d2:	bf1c      	itt	ne
    77d4:	46a9      	movne	r9, r5
    77d6:	7235      	strbne	r5, [r6, #8]
    77d8:	f47f adb8 	bne.w	734c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    77dc:	e66b      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    77de:	e7ff      	b.n	77e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    77e0:	f1b8 0f08 	cmp.w	r8, #8
    77e4:	d011      	beq.n	780a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4f2>
    77e6:	483a      	ldr	r0, [pc, #232]	; (78d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    77e8:	6803      	ldr	r3, [r0, #0]
    77ea:	b11b      	cbz	r3, 77f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4dc>
    77ec:	6870      	ldr	r0, [r6, #4]
    77ee:	4642      	mov	r2, r8
    77f0:	4621      	mov	r1, r4
    77f2:	4798      	blx	r3
    77f4:	f1b8 0f0b 	cmp.w	r8, #11
    77f8:	bf1c      	itt	ne
    77fa:	46a9      	movne	r9, r5
    77fc:	7235      	strbne	r5, [r6, #8]
    77fe:	e65a      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7800:	4833      	ldr	r0, [pc, #204]	; (78d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    7802:	6803      	ldr	r3, [r0, #0]
    7804:	2b00      	cmp	r3, #0
    7806:	d1f1      	bne.n	77ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4d4>
    7808:	e7f4      	b.n	77f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4dc>
    780a:	4650      	mov	r0, sl
    780c:	f7fd fbe0 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7810:	f00a f9e1 	bl	11bd6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7814:	b1c0      	cbz	r0, 7848 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x530>
    7816:	4650      	mov	r0, sl
    7818:	f7fd fe22 	bl	5460 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    781c:	2100      	movs	r1, #0
    781e:	4650      	mov	r0, sl
    7820:	f7fd fa28 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7824:	2101      	movs	r1, #1
    7826:	4650      	mov	r0, sl
    7828:	f7fd fa24 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    782c:	f1b9 0f00 	cmp.w	r9, #0
    7830:	d008      	beq.n	7844 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x52c>
    7832:	7065      	strb	r5, [r4, #1]
    7834:	200c      	movs	r0, #12
    7836:	7020      	strb	r0, [r4, #0]
    7838:	7125      	strb	r5, [r4, #4]
    783a:	f8a4 a005 	strh.w	sl, [r4, #5]
    783e:	f899 002e 	ldrb.w	r0, [r9, #46]	; 0x2e
    7842:	71e0      	strb	r0, [r4, #7]
    7844:	7235      	strb	r5, [r6, #8]
    7846:	e636      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7848:	f240 21c3 	movw	r1, #707	; 0x2c3
    784c:	2010      	movs	r0, #16
    784e:	f7fc ff35 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7852:	7065      	strb	r5, [r4, #1]
    7854:	201d      	movs	r0, #29
    7856:	7020      	strb	r0, [r4, #0]
    7858:	f8d6 0009 	ldr.w	r0, [r6, #9]
    785c:	6060      	str	r0, [r4, #4]
    785e:	f8d6 000d 	ldr.w	r0, [r6, #13]
    7862:	60a0      	str	r0, [r4, #8]
    7864:	7235      	strb	r5, [r6, #8]
    7866:	e626      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7868:	4819      	ldr	r0, [pc, #100]	; (78d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    786a:	6800      	ldr	r0, [r0, #0]
    786c:	b180      	cbz	r0, 7890 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x578>
    786e:	6870      	ldr	r0, [r6, #4]
    7870:	7065      	strb	r5, [r4, #1]
    7872:	210a      	movs	r1, #10
    7874:	7021      	strb	r1, [r4, #0]
    7876:	8801      	ldrh	r1, [r0, #0]
    7878:	80a1      	strh	r1, [r4, #4]
    787a:	f8d0 1338 	ldr.w	r1, [r0, #824]	; 0x338
    787e:	f8d0 233c 	ldr.w	r2, [r0, #828]	; 0x33c
    7882:	f8c4 1006 	str.w	r1, [r4, #6]
    7886:	f8c4 200a 	str.w	r2, [r4, #10]
    788a:	f8b0 0340 	ldrh.w	r0, [r0, #832]	; 0x340
    788e:	81e0      	strh	r0, [r4, #14]
    7890:	7235      	strb	r5, [r6, #8]
    7892:	e610      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    7894:	480f      	ldr	r0, [pc, #60]	; (78d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5bc>)
    7896:	6803      	ldr	r3, [r0, #0]
    7898:	b11b      	cbz	r3, 78a2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58a>
    789a:	2200      	movs	r2, #0
    789c:	4621      	mov	r1, r4
    789e:	4610      	mov	r0, r2
    78a0:	4798      	blx	r3
    78a2:	7235      	strb	r5, [r6, #8]
    78a4:	e607      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    78a6:	480c      	ldr	r0, [pc, #48]	; (78d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5c0>)
    78a8:	6803      	ldr	r3, [r0, #0]
    78aa:	b11b      	cbz	r3, 78b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x59c>
    78ac:	2200      	movs	r2, #0
    78ae:	4621      	mov	r1, r4
    78b0:	4610      	mov	r0, r2
    78b2:	4798      	blx	r3
    78b4:	7235      	strb	r5, [r6, #8]
    78b6:	e5fe      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    78b8:	7065      	strb	r5, [r4, #1]
    78ba:	2027      	movs	r0, #39	; 0x27
    78bc:	7020      	strb	r0, [r4, #0]
    78be:	7235      	strb	r5, [r6, #8]
    78c0:	e5f9      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    78c2:	f240 412d 	movw	r1, #1069	; 0x42d
    78c6:	2010      	movs	r0, #16
    78c8:	f7fc fef8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78cc:	7235      	strb	r5, [r6, #8]
    78ce:	e5f2      	b.n	74b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    78d0:	2000013c 	.word	0x2000013c
    78d4:	2000014c 	.word	0x2000014c
    78d8:	20000138 	.word	0x20000138

000078dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    78dc:	4909      	ldr	r1, [pc, #36]	; (7904 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x28>)
    78de:	7008      	strb	r0, [r1, #0]
    78e0:	2000      	movs	r0, #0
    78e2:	6048      	str	r0, [r1, #4]
    78e4:	6088      	str	r0, [r1, #8]
    78e6:	4908      	ldr	r1, [pc, #32]	; (7908 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2c>)
    78e8:	f8c1 003b 	str.w	r0, [r1, #59]	; 0x3b
    78ec:	f8c1 003f 	str.w	r0, [r1, #63]	; 0x3f
    78f0:	f8c1 0043 	str.w	r0, [r1, #67]	; 0x43
    78f4:	f8c1 0047 	str.w	r0, [r1, #71]	; 0x47
    78f8:	f8a1 004b 	strh.w	r0, [r1, #75]	; 0x4b
    78fc:	f881 004d 	strb.w	r0, [r1, #77]	; 0x4d
    7900:	4770      	bx	lr
    7902:	0000      	.short	0x0000
    7904:	20000128 	.word	0x20000128
    7908:	2000185d 	.word	0x2000185d

0000790c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    790c:	4908      	ldr	r1, [pc, #32]	; (7930 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x24>)
    790e:	2000      	movs	r0, #0
    7910:	6048      	str	r0, [r1, #4]
    7912:	6088      	str	r0, [r1, #8]
    7914:	4907      	ldr	r1, [pc, #28]	; (7934 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x28>)
    7916:	f8c1 003b 	str.w	r0, [r1, #59]	; 0x3b
    791a:	f8c1 003f 	str.w	r0, [r1, #63]	; 0x3f
    791e:	f8c1 0043 	str.w	r0, [r1, #67]	; 0x43
    7922:	f8c1 0047 	str.w	r0, [r1, #71]	; 0x47
    7926:	f8a1 004b 	strh.w	r0, [r1, #75]	; 0x4b
    792a:	f881 004d 	strb.w	r0, [r1, #77]	; 0x4d
    792e:	4770      	bx	lr
    7930:	20000128 	.word	0x20000128
    7934:	2000185d 	.word	0x2000185d

00007938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    7938:	4801      	ldr	r0, [pc, #4]	; (7940 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    793a:	7800      	ldrb	r0, [r0, #0]
    793c:	f7fc bb96 	b.w	406c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7940:	20000128 	.word	0x20000128

00007944 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    7944:	4902      	ldr	r1, [pc, #8]	; (7950 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    7946:	4801      	ldr	r0, [pc, #4]	; (794c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    7948:	6008      	str	r0, [r1, #0]
    794a:	4770      	bx	lr
    794c:	0001364b 	.word	0x0001364b
    7950:	20000134 	.word	0x20000134

00007954 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    7954:	4905      	ldr	r1, [pc, #20]	; (796c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    7956:	4804      	ldr	r0, [pc, #16]	; (7968 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    7958:	6008      	str	r0, [r1, #0]
    795a:	4906      	ldr	r1, [pc, #24]	; (7974 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    795c:	4804      	ldr	r0, [pc, #16]	; (7970 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    795e:	6008      	str	r0, [r1, #0]
    7960:	4906      	ldr	r1, [pc, #24]	; (797c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    7962:	4805      	ldr	r0, [pc, #20]	; (7978 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    7964:	6008      	str	r0, [r1, #0]
    7966:	4770      	bx	lr
    7968:	0001364b 	.word	0x0001364b
    796c:	20000134 	.word	0x20000134
    7970:	0001313f 	.word	0x0001313f
    7974:	2000013c 	.word	0x2000013c
    7978:	00005641 	.word	0x00005641
    797c:	2000014c 	.word	0x2000014c

00007980 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    7980:	b430      	push	{r4, r5}
    7982:	f890 5072 	ldrb.w	r5, [r0, #114]	; 0x72
    7986:	888c      	ldrh	r4, [r1, #4]
    7988:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    798c:	f015 0f0c 	tst.w	r5, #12
    7990:	d01b      	beq.n	79ca <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x4a>
    7992:	bf00      	nop
    7994:	f5b4 6f29 	cmp.w	r4, #2704	; 0xa90
    7998:	bf98      	it	ls
    799a:	f44f 6429 	movls.w	r4, #2704	; 0xa90
    799e:	f890 5073 	ldrb.w	r5, [r0, #115]	; 0x73
    79a2:	f015 0f0c 	tst.w	r5, #12
    79a6:	d017      	beq.n	79d8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x58>
    79a8:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
    79ac:	bf98      	it	ls
    79ae:	f44f 6c29 	movls.w	ip, #2704	; 0xa90
    79b2:	884a      	ldrh	r2, [r1, #2]
    79b4:	88c9      	ldrh	r1, [r1, #6]
    79b6:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    79ba:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    79be:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
    79c2:	f8a0 c056 	strh.w	ip, [r0, #86]	; 0x56
    79c6:	bc30      	pop	{r4, r5}
    79c8:	4770      	bx	lr
    79ca:	2b00      	cmp	r3, #0
    79cc:	bf1c      	itt	ne
    79ce:	7815      	ldrbne	r5, [r2, #0]
    79d0:	f015 0f0c 	tstne.w	r5, #12
    79d4:	d1de      	bne.n	7994 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x14>
    79d6:	e7e2      	b.n	799e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x1e>
    79d8:	2b00      	cmp	r3, #0
    79da:	bf1c      	itt	ne
    79dc:	7852      	ldrbne	r2, [r2, #1]
    79de:	f012 0f0c 	tstne.w	r2, #12
    79e2:	d1e1      	bne.n	79a8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x28>
    79e4:	e7e5      	b.n	79b2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x32>
	...

000079e8 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>:
    79e8:	4801      	ldr	r0, [pc, #4]	; (79f0 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x8>)
    79ea:	7800      	ldrb	r0, [r0, #0]
    79ec:	4770      	bx	lr
    79ee:	0000      	.short	0x0000
    79f0:	200004e0 	.word	0x200004e0
    79f4:	b470      	push	{r4, r5, r6}
    79f6:	f8b0 c03c 	ldrh.w	ip, [r0, #60]	; 0x3c
    79fa:	f012 0f0c 	tst.w	r2, #12
    79fe:	f44f 7574 	mov.w	r5, #976	; 0x3d0
    7a02:	bf1c      	itt	ne
    7a04:	eb05 1c8c 	addne.w	ip, r5, ip, lsl #6
    7a08:	fa1f fc8c 	uxthne.w	ip, ip
    7a0c:	d007      	beq.n	7a1e <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x36>
    7a0e:	bf00      	nop
    7a10:	f012 0f0c 	tst.w	r2, #12
    7a14:	bf18      	it	ne
    7a16:	f44f 6429 	movne.w	r4, #2704	; 0xa90
    7a1a:	d114      	bne.n	7a46 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x5e>
    7a1c:	e00c      	b.n	7a38 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x50>
    7a1e:	2a02      	cmp	r2, #2
    7a20:	bf07      	ittee	eq
    7a22:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
    7a26:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
    7a2a:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
    7a2e:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
    7a32:	fa1f fc8c 	uxth.w	ip, ip
    7a36:	e7eb      	b.n	7a10 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x28>
    7a38:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    7a3c:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
    7a40:	42a6      	cmp	r6, r4
    7a42:	bf38      	it	cc
    7a44:	4634      	movcc	r4, r6
    7a46:	4564      	cmp	r4, ip
    7a48:	bf38      	it	cc
    7a4a:	46a4      	movcc	ip, r4
    7a4c:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
    7a50:	f013 0f0c 	tst.w	r3, #12
    7a54:	bf1c      	itt	ne
    7a56:	eb05 1484 	addne.w	r4, r5, r4, lsl #6
    7a5a:	b2a4      	uxthne	r4, r4
    7a5c:	d007      	beq.n	7a6e <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x86>
    7a5e:	bf00      	nop
    7a60:	f013 0f0c 	tst.w	r3, #12
    7a64:	bf18      	it	ne
    7a66:	f44f 6529 	movne.w	r5, #2704	; 0xa90
    7a6a:	d10f      	bne.n	7a8c <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xa4>
    7a6c:	e007      	b.n	7a7e <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x96>
    7a6e:	2b02      	cmp	r3, #2
    7a70:	bf07      	ittee	eq
    7a72:	00a4      	lsleq	r4, r4, #2
    7a74:	343c      	addeq	r4, #60	; 0x3c
    7a76:	00e4      	lslne	r4, r4, #3
    7a78:	3470      	addne	r4, #112	; 0x70
    7a7a:	b2a4      	uxth	r4, r4
    7a7c:	e7f0      	b.n	7a60 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x78>
    7a7e:	f8b0 5056 	ldrh.w	r5, [r0, #86]	; 0x56
    7a82:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    7a86:	4285      	cmp	r5, r0
    7a88:	bf28      	it	cs
    7a8a:	4605      	movcs	r5, r0
    7a8c:	42a5      	cmp	r5, r4
    7a8e:	bf38      	it	cc
    7a90:	462c      	movcc	r4, r5
    7a92:	4814      	ldr	r0, [pc, #80]	; (7ae4 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xfc>)
    7a94:	7800      	ldrb	r0, [r0, #0]
    7a96:	b198      	cbz	r0, 7ac0 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xd8>
    7a98:	f013 0f0c 	tst.w	r3, #12
    7a9c:	bf18      	it	ne
    7a9e:	f44f 6049 	movne.w	r0, #3216	; 0xc90
    7aa2:	d013      	beq.n	7acc <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xe4>
    7aa4:	4284      	cmp	r4, r0
    7aa6:	bf28      	it	cs
    7aa8:	4620      	movcs	r0, r4
    7aaa:	4604      	mov	r4, r0
    7aac:	f012 0f0c 	tst.w	r2, #12
    7ab0:	bf18      	it	ne
    7ab2:	f44f 6049 	movne.w	r0, #3216	; 0xc90
    7ab6:	d00f      	beq.n	7ad8 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xf0>
    7ab8:	4584      	cmp	ip, r0
    7aba:	bf28      	it	cs
    7abc:	4660      	movcs	r0, ip
    7abe:	4684      	mov	ip, r0
    7ac0:	eb0c 0004 	add.w	r0, ip, r4
    7ac4:	bc70      	pop	{r4, r5, r6}
    7ac6:	4408      	add	r0, r1
    7ac8:	1d80      	adds	r0, r0, #6
    7aca:	4770      	bx	lr
    7acc:	2b02      	cmp	r3, #2
    7ace:	bf0c      	ite	eq
    7ad0:	20c8      	moveq	r0, #200	; 0xc8
    7ad2:	f44f 70c4 	movne.w	r0, #392	; 0x188
    7ad6:	e7e5      	b.n	7aa4 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xbc>
    7ad8:	2a02      	cmp	r2, #2
    7ada:	bf0c      	ite	eq
    7adc:	20c8      	moveq	r0, #200	; 0xc8
    7ade:	f44f 70c4 	movne.w	r0, #392	; 0x188
    7ae2:	e7e9      	b.n	7ab8 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xd0>
    7ae4:	200004e0 	.word	0x200004e0

00007ae8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7ae8:	b470      	push	{r4, r5, r6}
    7aea:	f06f 021f 	mvn.w	r2, #31
    7aee:	0c01      	lsrs	r1, r0, #16
    7af0:	ea02 2590 	and.w	r5, r2, r0, lsr #10
    7af4:	231f      	movs	r3, #31
    7af6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7afa:	3854      	subs	r0, #84	; 0x54
    7afc:	bf1c      	itt	ne
    7afe:	f5a1 40aa 	subne.w	r0, r1, #21760	; 0x5500
    7b02:	f1b0 0055 	subsne.w	r0, r0, #85	; 0x55
    7b06:	d009      	beq.n	7b1c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7b08:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7b0c:	38aa      	subs	r0, #170	; 0xaa
    7b0e:	bf1e      	ittt	ne
    7b10:	f5a1 402a 	subne.w	r0, r1, #43520	; 0xaa00
    7b14:	f1b0 00aa 	subsne.w	r0, r0, #170	; 0xaa
    7b18:	2001      	movne	r0, #1
    7b1a:	d100      	bne.n	7b1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x36>
    7b1c:	2000      	movs	r0, #0
    7b1e:	f04f 0c00 	mov.w	ip, #0
    7b22:	4662      	mov	r2, ip
    7b24:	ea4f 040c 	mov.w	r4, ip
    7b28:	ea8c 0601 	eor.w	r6, ip, r1
    7b2c:	43f6      	mvns	r6, r6
    7b2e:	4316      	orrs	r6, r2
    7b30:	f1b6 3fff 	cmp.w	r6, #4294967295
    7b34:	d011      	beq.n	7b5a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x72>
    7b36:	f005 0601 	and.w	r6, r5, #1
    7b3a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    7b3e:	ea4c 3cc6 	orr.w	ip, ip, r6, lsl #15
    7b42:	f003 0601 	and.w	r6, r3, #1
    7b46:	0852      	lsrs	r2, r2, #1
    7b48:	086d      	lsrs	r5, r5, #1
    7b4a:	085b      	lsrs	r3, r3, #1
    7b4c:	1c64      	adds	r4, r4, #1
    7b4e:	ea42 32c6 	orr.w	r2, r2, r6, lsl #15
    7b52:	2c16      	cmp	r4, #22
    7b54:	d3e8      	bcc.n	7b28 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x40>
    7b56:	bc70      	pop	{r4, r5, r6}
    7b58:	4770      	bx	lr
    7b5a:	bc70      	pop	{r4, r5, r6}
    7b5c:	2000      	movs	r0, #0
    7b5e:	4770      	bx	lr

00007b60 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    7b60:	b510      	push	{r4, lr}
    7b62:	4c0c      	ldr	r4, [pc, #48]	; (7b94 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x34>)
    7b64:	2108      	movs	r1, #8
    7b66:	4620      	mov	r0, r4
    7b68:	f7fc fe56 	bl	4818 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7b6c:	6820      	ldr	r0, [r4, #0]
    7b6e:	2800      	cmp	r0, #0
    7b70:	bf04      	itt	eq
    7b72:	6860      	ldreq	r0, [r4, #4]
    7b74:	2800      	cmpeq	r0, #0
    7b76:	d0f5      	beq.n	7b64 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    7b78:	4c07      	ldr	r4, [pc, #28]	; (7b98 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x38>)
    7b7a:	bf00      	nop
    7b7c:	f04f 0108 	mov.w	r1, #8
    7b80:	4620      	mov	r0, r4
    7b82:	f7fc fe49 	bl	4818 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7b86:	6820      	ldr	r0, [r4, #0]
    7b88:	2800      	cmp	r0, #0
    7b8a:	bf04      	itt	eq
    7b8c:	6860      	ldreq	r0, [r4, #4]
    7b8e:	2800      	cmpeq	r0, #0
    7b90:	d0f4      	beq.n	7b7c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1c>
    7b92:	bd10      	pop	{r4, pc}
    7b94:	20000150 	.word	0x20000150
    7b98:	20000158 	.word	0x20000158

00007b9c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    7b9c:	4a09      	ldr	r2, [pc, #36]	; (7bc4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x28>)
    7b9e:	480a      	ldr	r0, [pc, #40]	; (7bc8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x2c>)
    7ba0:	e9d2 1300 	ldrd	r1, r3, [r2]
    7ba4:	4348      	muls	r0, r1
    7ba6:	404b      	eors	r3, r1
    7ba8:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
    7bac:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
    7bb0:	6011      	str	r1, [r2, #0]
    7bb2:	ea4f 60f0 	mov.w	r0, r0, ror #27
    7bb6:	ea4f 41f3 	mov.w	r1, r3, ror #19
    7bba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7bbe:	6051      	str	r1, [r2, #4]
    7bc0:	4770      	bx	lr
    7bc2:	0000      	.short	0x0000
    7bc4:	20000150 	.word	0x20000150
    7bc8:	9e3779bb 	.word	0x9e3779bb

00007bcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    7bcc:	4a09      	ldr	r2, [pc, #36]	; (7bf4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x28>)
    7bce:	480a      	ldr	r0, [pc, #40]	; (7bf8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x2c>)
    7bd0:	e9d2 1300 	ldrd	r1, r3, [r2]
    7bd4:	4348      	muls	r0, r1
    7bd6:	404b      	eors	r3, r1
    7bd8:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
    7bdc:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
    7be0:	6011      	str	r1, [r2, #0]
    7be2:	ea4f 60f0 	mov.w	r0, r0, ror #27
    7be6:	ea4f 41f3 	mov.w	r1, r3, ror #19
    7bea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7bee:	6051      	str	r1, [r2, #4]
    7bf0:	4770      	bx	lr
    7bf2:	0000      	.short	0x0000
    7bf4:	20000158 	.word	0x20000158
    7bf8:	9e3779bb 	.word	0x9e3779bb

00007bfc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c00:	4604      	mov	r4, r0
    7c02:	7c80      	ldrb	r0, [r0, #18]
    7c04:	2800      	cmp	r0, #0
    7c06:	bf16      	itet	ne
    7c08:	2802      	cmpne	r0, #2
    7c0a:	2000      	moveq	r0, #0
    7c0c:	2001      	movne	r0, #1
    7c0e:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    7c12:	b318      	cbz	r0, 7c5c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x60>
    7c14:	7e60      	ldrb	r0, [r4, #25]
    7c16:	b368      	cbz	r0, 7c74 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x78>
    7c18:	f8d4 0013 	ldr.w	r0, [r4, #19]
    7c1c:	f8c4 0061 	str.w	r0, [r4, #97]	; 0x61
    7c20:	f8b4 0017 	ldrh.w	r0, [r4, #23]
    7c24:	f8a4 0065 	strh.w	r0, [r4, #101]	; 0x65
    7c28:	7ca0      	ldrb	r0, [r4, #18]
    7c2a:	2802      	cmp	r0, #2
    7c2c:	bf16      	itet	ne
    7c2e:	2803      	cmpne	r0, #3
    7c30:	2101      	moveq	r1, #1
    7c32:	2100      	movne	r1, #0
    7c34:	76a1      	strb	r1, [r4, #26]
    7c36:	f04f 0008 	mov.w	r0, #8
    7c3a:	76e0      	strb	r0, [r4, #27]
    7c3c:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7c40:	f04f 0701 	mov.w	r7, #1
    7c44:	f04f 0800 	mov.w	r8, #0
    7c48:	2801      	cmp	r0, #1
    7c4a:	bf04      	itt	eq
    7c4c:	f894 2066 	ldrbeq.w	r2, [r4, #102]	; 0x66
    7c50:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    7c54:	d01b      	beq.n	7c8e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
    7c56:	2801      	cmp	r0, #1
    7c58:	d011      	beq.n	7c7e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    7c5a:	e016      	b.n	7c8a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8e>
    7c5c:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7c60:	2000      	movs	r0, #0
    7c62:	f7fd fc9d 	bl	55a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7c66:	2800      	cmp	r0, #0
    7c68:	d1de      	bne.n	7c28 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x2c>
    7c6a:	f240 418a 	movw	r1, #1162	; 0x48a
    7c6e:	202d      	movs	r0, #45	; 0x2d
    7c70:	f7fc fd24 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c74:	f240 418e 	movw	r1, #1166	; 0x48e
    7c78:	202d      	movs	r0, #45	; 0x2d
    7c7a:	f7fc fd1f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c7e:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    7c82:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7c86:	2840      	cmp	r0, #64	; 0x40
    7c88:	d001      	beq.n	7c8e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
    7c8a:	2000      	movs	r0, #0
    7c8c:	e000      	b.n	7c90 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x94>
    7c8e:	2001      	movs	r0, #1
    7c90:	7720      	strb	r0, [r4, #28]
    7c92:	b131      	cbz	r1, 7ca2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xa6>
    7c94:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7c98:	f104 0168 	add.w	r1, r4, #104	; 0x68
    7c9c:	f7fe fd10 	bl	66c0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7ca0:	76e0      	strb	r0, [r4, #27]
    7ca2:	f7fe fd2b 	bl	66fc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7ca6:	4937      	ldr	r1, [pc, #220]	; (7d84 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x188>)
    7ca8:	fba0 6501 	umull	r6, r5, r0, r1
    7cac:	f7fa ffe8 	bl	2c80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    7cb0:	1980      	adds	r0, r0, r6
    7cb2:	4169      	adcs	r1, r5
    7cb4:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    7cb8:	2600      	movs	r6, #0
    7cba:	7ee0      	ldrb	r0, [r4, #27]
    7cbc:	f7fe fc94 	bl	65e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7cc0:	4605      	mov	r5, r0
    7cc2:	7ea0      	ldrb	r0, [r4, #26]
    7cc4:	2800      	cmp	r0, #0
    7cc6:	bf18      	it	ne
    7cc8:	2d00      	cmpne	r5, #0
    7cca:	d003      	beq.n	7cd4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xd8>
    7ccc:	7ee0      	ldrb	r0, [r4, #27]
    7cce:	f7fe fc7f 	bl	65d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    7cd2:	b158      	cbz	r0, 7cec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf0>
    7cd4:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
    7cd8:	2800      	cmp	r0, #0
    7cda:	bf1c      	itt	ne
    7cdc:	7f20      	ldrbne	r0, [r4, #28]
    7cde:	2800      	cmpne	r0, #0
    7ce0:	d01d      	beq.n	7d1e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    7ce2:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7ce6:	2801      	cmp	r0, #1
    7ce8:	d00e      	beq.n	7d08 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10c>
    7cea:	e013      	b.n	7d14 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x118>
    7cec:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
    7cf0:	4632      	mov	r2, r6
    7cf2:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7cf6:	4628      	mov	r0, r5
    7cf8:	f00a fc52 	bl	125a0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7cfc:	7ee1      	ldrb	r1, [r4, #27]
    7cfe:	f104 0061 	add.w	r0, r4, #97	; 0x61
    7d02:	f7fe fc7d 	bl	6600 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    7d06:	e00a      	b.n	7d1e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    7d08:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    7d0c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7d10:	2840      	cmp	r0, #64	; 0x40
    7d12:	d02f      	beq.n	7d74 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>
    7d14:	4641      	mov	r1, r8
    7d16:	f104 0061 	add.w	r0, r4, #97	; 0x61
    7d1a:	f00a fc30 	bl	1257e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7d1e:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
    7d22:	78a0      	ldrb	r0, [r4, #2]
    7d24:	f010 0f04 	tst.w	r0, #4
    7d28:	bf08      	it	eq
    7d2a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d2e:	2600      	movs	r6, #0
    7d30:	7ee0      	ldrb	r0, [r4, #27]
    7d32:	f7fe fc73 	bl	661c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7d36:	0005      	movs	r5, r0
    7d38:	bf08      	it	eq
    7d3a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d3e:	2110      	movs	r1, #16
    7d40:	f7fe ffac 	bl	6c9c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7d44:	2800      	cmp	r0, #0
    7d46:	bf18      	it	ne
    7d48:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d4c:	f884 706e 	strb.w	r7, [r4, #110]	; 0x6e
    7d50:	4632      	mov	r2, r6
    7d52:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    7d56:	4628      	mov	r0, r5
    7d58:	f00a fc22 	bl	125a0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7d5c:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    7d60:	4c09      	ldr	r4, [pc, #36]	; (7d88 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x18c>)
    7d62:	68a0      	ldr	r0, [r4, #8]
    7d64:	f00b f9ab 	bl	130be <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7d68:	68a0      	ldr	r0, [r4, #8]
    7d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7d6e:	2101      	movs	r1, #1
    7d70:	f00b b9ac 	b.w	130cc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7d74:	f7fe fc28 	bl	65c8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7d78:	4632      	mov	r2, r6
    7d7a:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7d7e:	f00a fc0f 	bl	125a0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7d82:	e7cc      	b.n	7d1e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    7d84:	000f4240 	.word	0x000f4240
    7d88:	20000160 	.word	0x20000160

00007d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    7d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d8e:	4604      	mov	r4, r0
    7d90:	3028      	adds	r0, #40	; 0x28
    7d92:	f00b fdce 	bl	13932 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7d96:	8861      	ldrh	r1, [r4, #2]
    7d98:	f3c1 1200 	ubfx	r2, r1, #4, #1
    7d9c:	b122      	cbz	r2, 7da8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1c>
    7d9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7da2:	2228      	movs	r2, #40	; 0x28
    7da4:	f002 bbb6 	b.w	a514 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7da8:	f3c1 0240 	ubfx	r2, r1, #1, #1
    7dac:	2a00      	cmp	r2, #0
    7dae:	bf14      	ite	ne
    7db0:	f8b4 c054 	ldrhne.w	ip, [r4, #84]	; 0x54
    7db4:	f8b4 c04c 	ldrheq.w	ip, [r4, #76]	; 0x4c
    7db8:	7922      	ldrb	r2, [r4, #4]
    7dba:	4b1e      	ldr	r3, [pc, #120]	; (7e34 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa8>)
    7dbc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    7dc0:	2a08      	cmp	r2, #8
    7dc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7dc6:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
    7dca:	fbb3 f6f5 	udiv	r6, r3, r5
    7dce:	bf08      	it	eq
    7dd0:	2540      	moveq	r5, #64	; 0x40
    7dd2:	d00a      	beq.n	7dea <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x5e>
    7dd4:	2a04      	cmp	r2, #4
    7dd6:	bf08      	it	eq
    7dd8:	2510      	moveq	r5, #16
    7dda:	d006      	beq.n	7dea <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x5e>
    7ddc:	2a02      	cmp	r2, #2
    7dde:	bf07      	ittee	eq
    7de0:	2504      	moveq	r5, #4
    7de2:	2312      	moveq	r3, #18
    7de4:	2508      	movne	r5, #8
    7de6:	2319      	movne	r3, #25
    7de8:	e000      	b.n	7dec <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x60>
    7dea:	2314      	movs	r3, #20
    7dec:	fb15 f303 	smulbb	r3, r5, r3
    7df0:	2a08      	cmp	r2, #8
    7df2:	bf08      	it	eq
    7df4:	2540      	moveq	r5, #64	; 0x40
    7df6:	d019      	beq.n	7e2c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa0>
    7df8:	2a04      	cmp	r2, #4
    7dfa:	bf08      	it	eq
    7dfc:	252e      	moveq	r5, #46	; 0x2e
    7dfe:	d015      	beq.n	7e2c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa0>
    7e00:	2500      	movs	r5, #0
    7e02:	2a02      	cmp	r2, #2
    7e04:	bf0c      	ite	eq
    7e06:	2218      	moveq	r2, #24
    7e08:	2228      	movne	r2, #40	; 0x28
    7e0a:	442a      	add	r2, r5
    7e0c:	441a      	add	r2, r3
    7e0e:	fb12 6200 	smlabb	r2, r2, r0, r6
    7e12:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    7e16:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    7e1a:	4410      	add	r0, r2
    7e1c:	9100      	str	r1, [sp, #0]
    7e1e:	4601      	mov	r1, r0
    7e20:	7962      	ldrb	r2, [r4, #5]
    7e22:	2301      	movs	r3, #1
    7e24:	4660      	mov	r0, ip
    7e26:	f001 fe3f 	bl	9aa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc54>
    7e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e2c:	f44f 72a8 	mov.w	r2, #336	; 0x150
    7e30:	e7eb      	b.n	7e0a <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x7e>
    7e32:	0000      	.short	0x0000
    7e34:	0000a4b0 	.word	0x0000a4b0

00007e38 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e3c:	4680      	mov	r8, r0
    7e3e:	b08d      	sub	sp, #52	; 0x34
    7e40:	460c      	mov	r4, r1
    7e42:	69c2      	ldr	r2, [r0, #28]
    7e44:	e9d8 0105 	ldrd	r0, r1, [r8, #20]
    7e48:	e9d8 7600 	ldrd	r7, r6, [r8]
    7e4c:	e9d8 a903 	ldrd	sl, r9, [r8, #12]
    7e50:	9205      	str	r2, [sp, #20]
    7e52:	e9cd 0103 	strd	r0, r1, [sp, #12]
    7e56:	f8d8 0020 	ldr.w	r0, [r8, #32]
    7e5a:	9006      	str	r0, [sp, #24]
    7e5c:	a801      	add	r0, sp, #4
    7e5e:	f00b fe11 	bl	13a84 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7e62:	7aa0      	ldrb	r0, [r4, #10]
    7e64:	f360 4917 	bfi	r9, r0, #16, #8
    7e68:	7820      	ldrb	r0, [r4, #0]
    7e6a:	f360 0707 	bfi	r7, r0, #0, #8
    7e6e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7e72:	f8ad 0000 	strh.w	r0, [sp]
    7e76:	f89d 0000 	ldrb.w	r0, [sp]
    7e7a:	f000 0101 	and.w	r1, r0, #1
    7e7e:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7e82:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7e86:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7e8a:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7e8e:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7e92:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7e96:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7e9a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7e9e:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7ea2:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7ea6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7eaa:	ea41 1b80 	orr.w	fp, r1, r0, lsl #6
    7eae:	7d20      	ldrb	r0, [r4, #20]
    7eb0:	f36b 471f 	bfi	r7, fp, #16, #16
    7eb4:	2801      	cmp	r0, #1
    7eb6:	bf18      	it	ne
    7eb8:	2802      	cmpne	r0, #2
    7eba:	d003      	beq.n	7ec4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x8c>
    7ebc:	2803      	cmp	r0, #3
    7ebe:	bf08      	it	eq
    7ec0:	2008      	moveq	r0, #8
    7ec2:	d10e      	bne.n	7ee2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xaa>
    7ec4:	7861      	ldrb	r1, [r4, #1]
    7ec6:	f360 0607 	bfi	r6, r0, #0, #8
    7eca:	f011 0f10 	tst.w	r1, #16
    7ece:	d10f      	bne.n	7ef0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb8>
    7ed0:	7da1      	ldrb	r1, [r4, #22]
    7ed2:	2901      	cmp	r1, #1
    7ed4:	bf18      	it	ne
    7ed6:	2902      	cmpne	r1, #2
    7ed8:	d008      	beq.n	7eec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb4>
    7eda:	2903      	cmp	r1, #3
    7edc:	bf08      	it	eq
    7ede:	2108      	moveq	r1, #8
    7ee0:	d004      	beq.n	7eec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb4>
    7ee2:	f240 21bb 	movw	r1, #699	; 0x2bb
    7ee6:	2006      	movs	r0, #6
    7ee8:	f7fc fbe8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eec:	f361 260f 	bfi	r6, r1, #8, #8
    7ef0:	f3ca 4107 	ubfx	r1, sl, #16, #8
    7ef4:	2901      	cmp	r1, #1
    7ef6:	d008      	beq.n	7f0a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xd2>
    7ef8:	7a61      	ldrb	r1, [r4, #9]
    7efa:	a801      	add	r0, sp, #4
    7efc:	f00b fd9d 	bl	13a3a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7f00:	7d20      	ldrb	r0, [r4, #20]
    7f02:	2101      	movs	r1, #1
    7f04:	2802      	cmp	r0, #2
    7f06:	d10f      	bne.n	7f28 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7f08:	e00b      	b.n	7f22 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xea>
    7f0a:	2104      	movs	r1, #4
    7f0c:	2808      	cmp	r0, #8
    7f0e:	bf08      	it	eq
    7f10:	f361 0607 	bfieq	r6, r1, #0, #8
    7f14:	f3c6 2007 	ubfx	r0, r6, #8, #8
    7f18:	2808      	cmp	r0, #8
    7f1a:	bf08      	it	eq
    7f1c:	f361 260f 	bfieq	r6, r1, #8, #8
    7f20:	e7ea      	b.n	7ef8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc0>
    7f22:	7d60      	ldrb	r0, [r4, #21]
    7f24:	1c40      	adds	r0, r0, #1
    7f26:	b2c1      	uxtb	r1, r0
    7f28:	7ea0      	ldrb	r0, [r4, #26]
    7f2a:	1c40      	adds	r0, r0, #1
    7f2c:	b2c2      	uxtb	r2, r0
    7f2e:	a801      	add	r0, sp, #4
    7f30:	f00b fce8 	bl	13904 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7f34:	0c38      	lsrs	r0, r7, #16
    7f36:	f010 0f08 	tst.w	r0, #8
    7f3a:	f04f 0500 	mov.w	r5, #0
    7f3e:	d124      	bne.n	7f8a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x152>
    7f40:	a801      	add	r0, sp, #4
    7f42:	f00b fcf6 	bl	13932 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7f46:	7861      	ldrb	r1, [r4, #1]
    7f48:	f011 0f10 	tst.w	r1, #16
    7f4c:	d07b      	beq.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    7f4e:	2228      	movs	r2, #40	; 0x28
    7f50:	4659      	mov	r1, fp
    7f52:	f002 fadf 	bl	a514 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7f56:	bf00      	nop
    7f58:	f240 2171 	movw	r1, #625	; 0x271
    7f5c:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7f60:	fbb0 f0f1 	udiv	r0, r0, r1
    7f64:	fb00 f501 	mul.w	r5, r0, r1
    7f68:	f8d4 0002 	ldr.w	r0, [r4, #2]
    7f6c:	f240 2271 	movw	r2, #625	; 0x271
    7f70:	0a00      	lsrs	r0, r0, #8
    7f72:	4341      	muls	r1, r0
    7f74:	f8d4 0005 	ldr.w	r0, [r4, #5]
    7f78:	0a00      	lsrs	r0, r0, #8
    7f7a:	4350      	muls	r0, r2
    7f7c:	428d      	cmp	r5, r1
    7f7e:	bf98      	it	ls
    7f80:	460d      	movls	r5, r1
    7f82:	d902      	bls.n	7f8a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x152>
    7f84:	4285      	cmp	r5, r0
    7f86:	bf88      	it	hi
    7f88:	4605      	movhi	r5, r0
    7f8a:	7ca0      	ldrb	r0, [r4, #18]
    7f8c:	f360 290f 	bfi	r9, r0, #8, #8
    7f90:	7e20      	ldrb	r0, [r4, #24]
    7f92:	2801      	cmp	r0, #1
    7f94:	bf18      	it	ne
    7f96:	2000      	movne	r0, #0
    7f98:	f360 0a07 	bfi	sl, r0, #0, #8
    7f9c:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    7fa0:	f00a f9c5 	bl	1232e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7fa4:	4683      	mov	fp, r0
    7fa6:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    7faa:	f00a fa68 	bl	1247e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7fae:	4583      	cmp	fp, r0
    7fb0:	bf28      	it	cs
    7fb2:	4658      	movcs	r0, fp
    7fb4:	b198      	cbz	r0, 7fde <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1a6>
    7fb6:	a901      	add	r1, sp, #4
    7fb8:	9108      	str	r1, [sp, #32]
    7fba:	0c39      	lsrs	r1, r7, #16
    7fbc:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    7fc0:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    7fc4:	0a31      	lsrs	r1, r6, #8
    7fc6:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
    7fca:	950a      	str	r5, [sp, #40]	; 0x28
    7fcc:	a908      	add	r1, sp, #32
    7fce:	f001 ffbf 	bl	9f50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10fc>
    7fd2:	2800      	cmp	r0, #0
    7fd4:	bf02      	ittt	eq
    7fd6:	2045      	moveq	r0, #69	; 0x45
    7fd8:	b00d      	addeq	sp, #52	; 0x34
    7fda:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fde:	f8c8 a00c 	str.w	sl, [r8, #12]
    7fe2:	f8c8 7000 	str.w	r7, [r8]
    7fe6:	e9c8 6501 	strd	r6, r5, [r8, #4]
    7fea:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    7fee:	9a05      	ldr	r2, [sp, #20]
    7ff0:	f8c8 9010 	str.w	r9, [r8, #16]
    7ff4:	f8c8 201c 	str.w	r2, [r8, #28]
    7ff8:	e9c8 0105 	strd	r0, r1, [r8, #20]
    7ffc:	9806      	ldr	r0, [sp, #24]
    7ffe:	f8c8 0020 	str.w	r0, [r8, #32]
    8002:	9801      	ldr	r0, [sp, #4]
    8004:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
    8008:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    800c:	f8a8 002c 	strh.w	r0, [r8, #44]	; 0x2c
    8010:	7ae0      	ldrb	r0, [r4, #11]
    8012:	2800      	cmp	r0, #0
    8014:	bf16      	itet	ne
    8016:	2802      	cmpne	r0, #2
    8018:	2000      	moveq	r0, #0
    801a:	2001      	movne	r0, #1
    801c:	f888 0067 	strb.w	r0, [r8, #103]	; 0x67
    8020:	68e0      	ldr	r0, [r4, #12]
    8022:	f8c8 0068 	str.w	r0, [r8, #104]	; 0x68
    8026:	8a20      	ldrh	r0, [r4, #16]
    8028:	f8a8 006c 	strh.w	r0, [r8, #108]	; 0x6c
    802c:	7de0      	ldrb	r0, [r4, #23]
    802e:	f898 103e 	ldrb.w	r1, [r8, #62]	; 0x3e
    8032:	f360 1107 	bfi	r1, r0, #4, #4
    8036:	f888 103e 	strb.w	r1, [r8, #62]	; 0x3e
    803a:	b00d      	add	sp, #52	; 0x34
    803c:	f04f 0000 	mov.w	r0, #0
    8040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8044:	e7ff      	b.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    8046:	4603      	mov	r3, r0
    8048:	b2f0      	uxtb	r0, r6
    804a:	4921      	ldr	r1, [pc, #132]	; (80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>)
    804c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8050:	2808      	cmp	r0, #8
    8052:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    8056:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    805a:	fbb1 f2f2 	udiv	r2, r1, r2
    805e:	bf08      	it	eq
    8060:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    8064:	d00d      	beq.n	8082 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82>
    8066:	2804      	cmp	r0, #4
    8068:	bf08      	it	eq
    806a:	f04f 0c10 	moveq.w	ip, #16
    806e:	d008      	beq.n	8082 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82>
    8070:	2802      	cmp	r0, #2
    8072:	bf07      	ittee	eq
    8074:	f04f 0c04 	moveq.w	ip, #4
    8078:	2112      	moveq	r1, #18
    807a:	f04f 0c08 	movne.w	ip, #8
    807e:	2119      	movne	r1, #25
    8080:	e000      	b.n	8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>
    8082:	2114      	movs	r1, #20
    8084:	fb1c f101 	smulbb	r1, ip, r1
    8088:	2808      	cmp	r0, #8
    808a:	bf08      	it	eq
    808c:	2540      	moveq	r5, #64	; 0x40
    808e:	d01b      	beq.n	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    8090:	2804      	cmp	r0, #4
    8092:	bf08      	it	eq
    8094:	252e      	moveq	r5, #46	; 0x2e
    8096:	d017      	beq.n	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    8098:	2802      	cmp	r0, #2
    809a:	bf0c      	ite	eq
    809c:	2018      	moveq	r0, #24
    809e:	2028      	movne	r0, #40	; 0x28
    80a0:	4428      	add	r0, r5
    80a2:	4408      	add	r0, r1
    80a4:	fb10 2003 	smlabb	r0, r0, r3, r2
    80a8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    80ac:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    80b0:	1845      	adds	r5, r0, r1
    80b2:	f7fd f877 	bl	51a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    80b6:	0c39      	lsrs	r1, r7, #16
    80b8:	9100      	str	r1, [sp, #0]
    80ba:	f3c6 2207 	ubfx	r2, r6, #8, #8
    80be:	2301      	movs	r3, #1
    80c0:	4629      	mov	r1, r5
    80c2:	f001 fcf1 	bl	9aa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc54>
    80c6:	e747      	b.n	7f58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x120>
    80c8:	f44f 70a8 	mov.w	r0, #336	; 0x150
    80cc:	e7e8      	b.n	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    80ce:	0000      	.short	0x0000
    80d0:	0000a4b0 	.word	0x0000a4b0

000080d4 <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI>:
    80d4:	4902      	ldr	r1, [pc, #8]	; (80e0 <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI+0xc>)
    80d6:	4801      	ldr	r0, [pc, #4]	; (80dc <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI+0x8>)
    80d8:	60c8      	str	r0, [r1, #12]
    80da:	4770      	bx	lr
    80dc:	0000a4fc 	.word	0x0000a4fc
    80e0:	20000160 	.word	0x20000160

000080e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    80e4:	4a10      	ldr	r2, [pc, #64]	; (8128 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x44>)
    80e6:	b510      	push	{r4, lr}
    80e8:	2100      	movs	r1, #0
    80ea:	7011      	strb	r1, [r2, #0]
    80ec:	4c0f      	ldr	r4, [pc, #60]	; (812c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x48>)
    80ee:	60a0      	str	r0, [r4, #8]
    80f0:	7810      	ldrb	r0, [r2, #0]
    80f2:	b120      	cbz	r0, 80fe <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    80f4:	f240 310a 	movw	r1, #778	; 0x30a
    80f8:	202d      	movs	r0, #45	; 0x2d
    80fa:	f7fc fadf 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80fe:	6011      	str	r1, [r2, #0]
    8100:	6051      	str	r1, [r2, #4]
    8102:	6091      	str	r1, [r2, #8]
    8104:	60d1      	str	r1, [r2, #12]
    8106:	6111      	str	r1, [r2, #16]
    8108:	6151      	str	r1, [r2, #20]
    810a:	6191      	str	r1, [r2, #24]
    810c:	61d1      	str	r1, [r2, #28]
    810e:	f006 fe89 	bl	ee24 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8112:	f006 fc61 	bl	e9d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8116:	68e0      	ldr	r0, [r4, #12]
    8118:	2800      	cmp	r0, #0
    811a:	bf18      	it	ne
    811c:	bd10      	popne	{r4, pc}
    811e:	f240 310d 	movw	r1, #781	; 0x30d
    8122:	202d      	movs	r0, #45	; 0x2d
    8124:	f7fc faca 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8128:	200015c0 	.word	0x200015c0
    812c:	20000160 	.word	0x20000160

00008130 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    8130:	4902      	ldr	r1, [pc, #8]	; (813c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    8132:	6048      	str	r0, [r1, #4]
    8134:	68c9      	ldr	r1, [r1, #12]
    8136:	6809      	ldr	r1, [r1, #0]
    8138:	4708      	bx	r1
    813a:	0000      	.short	0x0000
    813c:	20000160 	.word	0x20000160

00008140 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    8140:	490b      	ldr	r1, [pc, #44]	; (8170 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x30>)
    8142:	b510      	push	{r4, lr}
    8144:	7808      	ldrb	r0, [r1, #0]
    8146:	2800      	cmp	r0, #0
    8148:	bf18      	it	ne
    814a:	240c      	movne	r4, #12
    814c:	d001      	beq.n	8152 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    814e:	4620      	mov	r0, r4
    8150:	bd10      	pop	{r4, pc}
    8152:	2400      	movs	r4, #0
    8154:	600c      	str	r4, [r1, #0]
    8156:	604c      	str	r4, [r1, #4]
    8158:	608c      	str	r4, [r1, #8]
    815a:	60cc      	str	r4, [r1, #12]
    815c:	610c      	str	r4, [r1, #16]
    815e:	614c      	str	r4, [r1, #20]
    8160:	618c      	str	r4, [r1, #24]
    8162:	61cc      	str	r4, [r1, #28]
    8164:	f006 fe5e 	bl	ee24 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8168:	f006 fc36 	bl	e9d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    816c:	e7ef      	b.n	814e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    816e:	0000      	.short	0x0000
    8170:	200015c0 	.word	0x200015c0

00008174 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    8174:	4905      	ldr	r1, [pc, #20]	; (818c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    8176:	b510      	push	{r4, lr}
    8178:	7809      	ldrb	r1, [r1, #0]
    817a:	2901      	cmp	r1, #1
    817c:	bf1c      	itt	ne
    817e:	2000      	movne	r0, #0
    8180:	bd10      	popne	{r4, pc}
    8182:	f001 fe79 	bl	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    8186:	2000      	movs	r0, #0
    8188:	bd10      	pop	{r4, pc}
    818a:	0000      	.short	0x0000
    818c:	200015c0 	.word	0x200015c0

00008190 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    8190:	4904      	ldr	r1, [pc, #16]	; (81a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
    8192:	4803      	ldr	r0, [pc, #12]	; (81a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
    8194:	6008      	str	r0, [r1, #0]
    8196:	4905      	ldr	r1, [pc, #20]	; (81ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
    8198:	4803      	ldr	r0, [pc, #12]	; (81a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
    819a:	6008      	str	r0, [r1, #0]
    819c:	4770      	bx	lr
    819e:	0000      	.short	0x0000
    81a0:	0000a2a1 	.word	0x0000a2a1
    81a4:	20000174 	.word	0x20000174
    81a8:	0000a125 	.word	0x0000a125
    81ac:	20000170 	.word	0x20000170
    81b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81b4:	000d      	movs	r5, r1
    81b6:	4604      	mov	r4, r0
    81b8:	d016      	beq.n	81e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x58>
    81ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    81be:	f00b fc3e 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    81c2:	b938      	cbnz	r0, 81d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x44>
    81c4:	78a0      	ldrb	r0, [r4, #2]
    81c6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    81ca:	b188      	cbz	r0, 81f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x60>
    81cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    81d0:	f00b fc60 	bl	13a94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    81d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    81d8:	f00b fbec 	bl	139b4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    81dc:	f007 fdb2 	bl	fd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    81e0:	7921      	ldrb	r1, [r4, #4]
    81e2:	2025      	movs	r0, #37	; 0x25
    81e4:	f007 fd7a 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    81e8:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    81ec:	b94d      	cbnz	r5, 8202 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x72>
    81ee:	e004      	b.n	81fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x6a>
    81f0:	4620      	mov	r0, r4
    81f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81f6:	f001 be3f 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    81fa:	2200      	movs	r2, #0
    81fc:	4620      	mov	r0, r4
    81fe:	f001 f86d 	bl	92dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    8202:	4e2a      	ldr	r6, [pc, #168]	; (82ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    8204:	68b0      	ldr	r0, [r6, #8]
    8206:	78c1      	ldrb	r1, [r0, #3]
    8208:	f011 0f3f 	tst.w	r1, #63	; 0x3f
    820c:	bf14      	ite	ne
    820e:	2201      	movne	r2, #1
    8210:	2200      	moveq	r2, #0
    8212:	7901      	ldrb	r1, [r0, #4]
    8214:	f011 0110 	ands.w	r1, r1, #16
    8218:	bf18      	it	ne
    821a:	2101      	movne	r1, #1
    821c:	4211      	tst	r1, r2
    821e:	d014      	beq.n	824a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xba>
    8220:	f00a fe3b 	bl	12e9a <sym_YJWWIM3RHASWWTC5FXJ2FVPFFWZQSPVS3K54SEQ>
    8224:	4607      	mov	r7, r0
    8226:	f104 0028 	add.w	r0, r4, #40	; 0x28
    822a:	f00b fc08 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    822e:	1c40      	adds	r0, r0, #1
    8230:	b2c2      	uxtb	r2, r0
    8232:	4620      	mov	r0, r4
    8234:	7921      	ldrb	r1, [r4, #4]
    8236:	463b      	mov	r3, r7
    8238:	f001 fbc2 	bl	99c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6c>
    823c:	9000      	str	r0, [sp, #0]
    823e:	2303      	movs	r3, #3
    8240:	2204      	movs	r2, #4
    8242:	4669      	mov	r1, sp
    8244:	68b0      	ldr	r0, [r6, #8]
    8246:	f00a febd 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    824a:	4f19      	ldr	r7, [pc, #100]	; (82b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    824c:	b33d      	cbz	r5, 829e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    824e:	68bd      	ldr	r5, [r7, #8]
    8250:	68b0      	ldr	r0, [r6, #8]
    8252:	f00a fe22 	bl	12e9a <sym_YJWWIM3RHASWWTC5FXJ2FVPFFWZQSPVS3K54SEQ>
    8256:	4680      	mov	r8, r0
    8258:	f104 0028 	add.w	r0, r4, #40	; 0x28
    825c:	f00b fb69 	bl	13932 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    8260:	4681      	mov	r9, r0
    8262:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8266:	f00b fbea 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    826a:	eba9 0000 	sub.w	r0, r9, r0
    826e:	1e40      	subs	r0, r0, #1
    8270:	b2c1      	uxtb	r1, r0
    8272:	7920      	ldrb	r0, [r4, #4]
    8274:	4642      	mov	r2, r8
    8276:	f00b fc12 	bl	13a9e <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA>
    827a:	4405      	add	r5, r0
    827c:	78a0      	ldrb	r0, [r4, #2]
    827e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8282:	b138      	cbz	r0, 8294 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x104>
    8284:	6878      	ldr	r0, [r7, #4]
    8286:	4405      	add	r5, r0
    8288:	4620      	mov	r0, r4
    828a:	f7ff fd7f 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    828e:	4428      	add	r0, r5
    8290:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
    8294:	7922      	ldrb	r2, [r4, #4]
    8296:	4629      	mov	r1, r5
    8298:	2000      	movs	r0, #0
    829a:	f007 fb03 	bl	f8a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    829e:	68b0      	ldr	r0, [r6, #8]
    82a0:	f007 fab2 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    82a4:	2006      	movs	r0, #6
    82a6:	7038      	strb	r0, [r7, #0]
    82a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    82ac:	20000160 	.word	0x20000160
    82b0:	200015c0 	.word	0x200015c0
    82b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82b8:	4e70      	ldr	r6, [pc, #448]	; (847c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>)
    82ba:	000f      	movs	r7, r1
    82bc:	4604      	mov	r4, r0
    82be:	d027      	beq.n	8310 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x180>
    82c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    82c4:	f00b fbbb 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    82c8:	b9c0      	cbnz	r0, 82fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x16c>
    82ca:	78a0      	ldrb	r0, [r4, #2]
    82cc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    82d0:	2800      	cmp	r0, #0
    82d2:	d038      	beq.n	8346 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b6>
    82d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    82d8:	f00b fb2b 	bl	13932 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    82dc:	4605      	mov	r5, r0
    82de:	f104 0028 	add.w	r0, r4, #40	; 0x28
    82e2:	f00b fbac 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    82e6:	1a28      	subs	r0, r5, r0
    82e8:	b2c0      	uxtb	r0, r0
    82ea:	f00b fbf3 	bl	13ad4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    82ee:	6871      	ldr	r1, [r6, #4]
    82f0:	4408      	add	r0, r1
    82f2:	6070      	str	r0, [r6, #4]
    82f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    82f8:	f00b fbcc 	bl	13a94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    82fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8300:	f00b fb58 	bl	139b4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    8304:	f007 fd1e 	bl	fd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8308:	7921      	ldrb	r1, [r4, #4]
    830a:	2025      	movs	r0, #37	; 0x25
    830c:	f007 fce6 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    8310:	4d5b      	ldr	r5, [pc, #364]	; (8480 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f0>)
    8312:	f894 806e 	ldrb.w	r8, [r4, #110]	; 0x6e
    8316:	2100      	movs	r1, #0
    8318:	68a8      	ldr	r0, [r5, #8]
    831a:	8001      	strh	r1, [r0, #0]
    831c:	7801      	ldrb	r1, [r0, #0]
    831e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    8322:	7001      	strb	r1, [r0, #0]
    8324:	8861      	ldrh	r1, [r4, #2]
    8326:	2913      	cmp	r1, #19
    8328:	d02d      	beq.n	8386 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f6>
    832a:	dc11      	bgt.n	8350 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c0>
    832c:	2910      	cmp	r1, #16
    832e:	bf08      	it	eq
    8330:	2102      	moveq	r1, #2
    8332:	d03d      	beq.n	83b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    8334:	2912      	cmp	r1, #18
    8336:	bf08      	it	eq
    8338:	2106      	moveq	r1, #6
    833a:	d039      	beq.n	83b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    833c:	f240 614a 	movw	r1, #1610	; 0x64a
    8340:	202d      	movs	r0, #45	; 0x2d
    8342:	f7fc f9bb 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8346:	4620      	mov	r0, r4
    8348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    834c:	f001 bd94 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    8350:	2915      	cmp	r1, #21
    8352:	bf18      	it	ne
    8354:	291d      	cmpne	r1, #29
    8356:	d1f1      	bne.n	833c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    8358:	f04f 0101 	mov.w	r1, #1
    835c:	f00a fe8d 	bl	1307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8360:	68a8      	ldr	r0, [r5, #8]
    8362:	f1b8 0f00 	cmp.w	r8, #0
    8366:	7801      	ldrb	r1, [r0, #0]
    8368:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    836c:	f041 0120 	orr.w	r1, r1, #32
    8370:	7001      	strb	r1, [r0, #0]
    8372:	d013      	beq.n	839c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    8374:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    8378:	f00a fea1 	bl	130be <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    837c:	2101      	movs	r1, #1
    837e:	68a8      	ldr	r0, [r5, #8]
    8380:	f00a fea4 	bl	130cc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8384:	e016      	b.n	83b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>
    8386:	2100      	movs	r1, #0
    8388:	f00a fe77 	bl	1307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    838c:	68a8      	ldr	r0, [r5, #8]
    838e:	7801      	ldrb	r1, [r0, #0]
    8390:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    8394:	f041 0120 	orr.w	r1, r1, #32
    8398:	7001      	strb	r1, [r0, #0]
    839a:	e00b      	b.n	83b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>
    839c:	f104 0168 	add.w	r1, r4, #104	; 0x68
    83a0:	f00a fe8d 	bl	130be <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    83a4:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    83a8:	68a8      	ldr	r0, [r5, #8]
    83aa:	f00a fe8f 	bl	130cc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    83ae:	e001      	b.n	83b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>
    83b0:	f00a fe63 	bl	1307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    83b4:	46a0      	mov	r8, r4
    83b6:	f104 0161 	add.w	r1, r4, #97	; 0x61
    83ba:	68a8      	ldr	r0, [r5, #8]
    83bc:	f00a fe8f 	bl	130de <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    83c0:	f898 1060 	ldrb.w	r1, [r8, #96]	; 0x60
    83c4:	68a8      	ldr	r0, [r5, #8]
    83c6:	f00a fe91 	bl	130ec <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    83ca:	8860      	ldrh	r0, [r4, #2]
    83cc:	281d      	cmp	r0, #29
    83ce:	bf18      	it	ne
    83d0:	2815      	cmpne	r0, #21
    83d2:	d005      	beq.n	83e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x250>
    83d4:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
    83d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    83da:	68a8      	ldr	r0, [r5, #8]
    83dc:	f00a fde2 	bl	12fa4 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    83e0:	68a8      	ldr	r0, [r5, #8]
    83e2:	f007 fa11 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    83e6:	2004      	movs	r0, #4
    83e8:	7030      	strb	r0, [r6, #0]
    83ea:	b327      	cbz	r7, 8436 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2a6>
    83ec:	8860      	ldrh	r0, [r4, #2]
    83ee:	2810      	cmp	r0, #16
    83f0:	d031      	beq.n	8456 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    83f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    83f6:	68b5      	ldr	r5, [r6, #8]
    83f8:	f00b fa9b 	bl	13932 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    83fc:	4607      	mov	r7, r0
    83fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8402:	f00b fb1c 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    8406:	1a38      	subs	r0, r7, r0
    8408:	1e40      	subs	r0, r0, #1
    840a:	b2c0      	uxtb	r0, r0
    840c:	8861      	ldrh	r1, [r4, #2]
    840e:	2228      	movs	r2, #40	; 0x28
    8410:	f002 f8a6 	bl	a560 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    8414:	4405      	add	r5, r0
    8416:	78a0      	ldrb	r0, [r4, #2]
    8418:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    841c:	b130      	cbz	r0, 842c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x29c>
    841e:	6870      	ldr	r0, [r6, #4]
    8420:	4405      	add	r5, r0
    8422:	f00b fb5b 	bl	13adc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    8426:	4428      	add	r0, r5
    8428:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
    842c:	7922      	ldrb	r2, [r4, #4]
    842e:	4629      	mov	r1, r5
    8430:	2000      	movs	r0, #0
    8432:	f007 fa37 	bl	f8a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8436:	8860      	ldrh	r0, [r4, #2]
    8438:	2813      	cmp	r0, #19
    843a:	d015      	beq.n	8468 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2d8>
    843c:	dc10      	bgt.n	8460 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2d0>
    843e:	2810      	cmp	r0, #16
    8440:	bf08      	it	eq
    8442:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    8446:	2812      	cmp	r0, #18
    8448:	d00e      	beq.n	8468 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2d8>
    844a:	bf00      	nop
    844c:	f640 5148 	movw	r1, #3400	; 0xd48
    8450:	202d      	movs	r0, #45	; 0x2d
    8452:	f7fc f933 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8456:	7921      	ldrb	r1, [r4, #4]
    8458:	2000      	movs	r0, #0
    845a:	f006 fdcd 	bl	eff8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    845e:	e7ea      	b.n	8436 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2a6>
    8460:	2815      	cmp	r0, #21
    8462:	bf18      	it	ne
    8464:	281d      	cmpne	r0, #29
    8466:	d1f1      	bne.n	844c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2bc>
    8468:	7922      	ldrb	r2, [r4, #4]
    846a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    846e:	f04f 0101 	mov.w	r1, #1
    8472:	f04f 0000 	mov.w	r0, #0
    8476:	f007 bb97 	b.w	fba8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    847a:	0000      	.short	0x0000
    847c:	200015c0 	.word	0x200015c0
    8480:	20000160 	.word	0x20000160
    8484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8488:	4604      	mov	r4, r0
    848a:	b082      	sub	sp, #8
    848c:	460e      	mov	r6, r1
    848e:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    8492:	f007 fc57 	bl	fd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8496:	7961      	ldrb	r1, [r4, #5]
    8498:	20ff      	movs	r0, #255	; 0xff
    849a:	f007 fc1f 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    849e:	4d89      	ldr	r5, [pc, #548]	; (86c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x534>)
    84a0:	4f89      	ldr	r7, [pc, #548]	; (86c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x538>)
    84a2:	f04f 0800 	mov.w	r8, #0
    84a6:	b166      	cbz	r6, 84c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x332>
    84a8:	7962      	ldrb	r2, [r4, #5]
    84aa:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    84ae:	2000      	movs	r0, #0
    84b0:	f007 fb40 	bl	fb34 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ>
    84b4:	78a0      	ldrb	r0, [r4, #2]
    84b6:	f010 0f03 	tst.w	r0, #3
    84ba:	d042      	beq.n	8542 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x3b2>
    84bc:	2e00      	cmp	r6, #0
    84be:	d03b      	beq.n	8538 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x3a8>
    84c0:	e03f      	b.n	8542 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x3b2>
    84c2:	68a8      	ldr	r0, [r5, #8]
    84c4:	f00a fce9 	bl	12e9a <sym_YJWWIM3RHASWWTC5FXJ2FVPFFWZQSPVS3K54SEQ>
    84c8:	4682      	mov	sl, r0
    84ca:	f894 9004 	ldrb.w	r9, [r4, #4]
    84ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
    84d2:	f00b fa2e 	bl	13932 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    84d6:	4601      	mov	r1, r0
    84d8:	f1b9 0f08 	cmp.w	r9, #8
    84dc:	bf04      	itt	eq
    84de:	f44f 72c8 	moveq.w	r2, #400	; 0x190
    84e2:	2340      	moveq	r3, #64	; 0x40
    84e4:	d00f      	beq.n	8506 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x376>
    84e6:	f1b9 0f04 	cmp.w	r9, #4
    84ea:	bf04      	itt	eq
    84ec:	f44f 72bf 	moveq.w	r2, #382	; 0x17e
    84f0:	2310      	moveq	r3, #16
    84f2:	d008      	beq.n	8506 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x376>
    84f4:	f1b9 0f02 	cmp.w	r9, #2
    84f8:	bf07      	ittee	eq
    84fa:	f108 0218 	addeq.w	r2, r8, #24
    84fe:	2304      	moveq	r3, #4
    8500:	f108 0228 	addne.w	r2, r8, #40	; 0x28
    8504:	2308      	movne	r3, #8
    8506:	f10a 0005 	add.w	r0, sl, #5
    850a:	fb10 2003 	smlabb	r0, r0, r3, r2
    850e:	68ba      	ldr	r2, [r7, #8]
    8510:	fb01 2000 	mla	r0, r1, r0, r2
    8514:	22ca      	movs	r2, #202	; 0xca
    8516:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
    851a:	4408      	add	r0, r1
    851c:	6138      	str	r0, [r7, #16]
    851e:	78a1      	ldrb	r1, [r4, #2]
    8520:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    8524:	b111      	cbz	r1, 852c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x39c>
    8526:	6879      	ldr	r1, [r7, #4]
    8528:	4408      	add	r0, r1
    852a:	6138      	str	r0, [r7, #16]
    852c:	4601      	mov	r1, r0
    852e:	7962      	ldrb	r2, [r4, #5]
    8530:	2000      	movs	r0, #0
    8532:	f007 f9b7 	bl	f8a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8536:	e7bd      	b.n	84b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x324>
    8538:	7962      	ldrb	r2, [r4, #5]
    853a:	2101      	movs	r1, #1
    853c:	2000      	movs	r0, #0
    853e:	f007 fb33 	bl	fba8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8542:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    8546:	4620      	mov	r0, r4
    8548:	2e00      	cmp	r6, #0
    854a:	d07d      	beq.n	8648 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x4b8>
    854c:	8861      	ldrh	r1, [r4, #2]
    854e:	4646      	mov	r6, r8
    8550:	f3c1 0040 	ubfx	r0, r1, #1, #1
    8554:	2800      	cmp	r0, #0
    8556:	bf08      	it	eq
    8558:	f048 0608 	orreq.w	r6, r8, #8
    855c:	f011 0f40 	tst.w	r1, #64	; 0x40
    8560:	bf18      	it	ne
    8562:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    8566:	2800      	cmp	r0, #0
    8568:	bf19      	ittee	ne
    856a:	f8d4 a050 	ldrne.w	sl, [r4, #80]	; 0x50
    856e:	f8b4 9054 	ldrhne.w	r9, [r4, #84]	; 0x54
    8572:	f8d4 a048 	ldreq.w	sl, [r4, #72]	; 0x48
    8576:	f8b4 904c 	ldrheq.w	r9, [r4, #76]	; 0x4c
    857a:	68a8      	ldr	r0, [r5, #8]
    857c:	2107      	movs	r1, #7
    857e:	f8a0 8000 	strh.w	r8, [r0]
    8582:	f00a fd7a 	bl	1307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8586:	2100      	movs	r1, #0
    8588:	68a8      	ldr	r0, [r5, #8]
    858a:	f00a fd02 	bl	12f92 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    858e:	2200      	movs	r2, #0
    8590:	4631      	mov	r1, r6
    8592:	68a8      	ldr	r0, [r5, #8]
    8594:	f00a fd39 	bl	1300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    8598:	f016 0f08 	tst.w	r6, #8
    859c:	d016      	beq.n	85cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x43c>
    859e:	f8b4 103d 	ldrh.w	r1, [r4, #61]	; 0x3d
    85a2:	f8bd 0000 	ldrh.w	r0, [sp]
    85a6:	2302      	movs	r3, #2
    85a8:	f361 000b 	bfi	r0, r1, #0, #12
    85ac:	f8ad 0000 	strh.w	r0, [sp]
    85b0:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    85b4:	2203      	movs	r2, #3
    85b6:	0901      	lsrs	r1, r0, #4
    85b8:	f89d 0001 	ldrb.w	r0, [sp, #1]
    85bc:	f361 1007 	bfi	r0, r1, #4, #4
    85c0:	f88d 0001 	strb.w	r0, [sp, #1]
    85c4:	4669      	mov	r1, sp
    85c6:	68a8      	ldr	r0, [r5, #8]
    85c8:	f00a fcfc 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    85cc:	68a8      	ldr	r0, [r5, #8]
    85ce:	f00a fc0a 	bl	12de6 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
    85d2:	89ba      	ldrh	r2, [r7, #12]
    85d4:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
    85d8:	eba9 0102 	sub.w	r1, r9, r2
    85dc:	4281      	cmp	r1, r0
    85de:	bfa8      	it	ge
    85e0:	4601      	movge	r1, r0
    85e2:	f001 08ff 	and.w	r8, r1, #255	; 0xff
    85e6:	eb02 0008 	add.w	r0, r2, r8
    85ea:	4548      	cmp	r0, r9
    85ec:	d23e      	bcs.n	866c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x4dc>
    85ee:	f046 0110 	orr.w	r1, r6, #16
    85f2:	2200      	movs	r2, #0
    85f4:	68a8      	ldr	r0, [r5, #8]
    85f6:	f00a fd08 	bl	1300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    85fa:	68a8      	ldr	r0, [r5, #8]
    85fc:	f00a fbf3 	bl	12de6 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
    8600:	89b9      	ldrh	r1, [r7, #12]
    8602:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
    8606:	eba9 0101 	sub.w	r1, r9, r1
    860a:	4281      	cmp	r1, r0
    860c:	bfa8      	it	ge
    860e:	4601      	movge	r1, r0
    8610:	f001 08ff 	and.w	r8, r1, #255	; 0xff
    8614:	68a8      	ldr	r0, [r5, #8]
    8616:	f00a fbe2 	bl	12dde <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>
    861a:	4440      	add	r0, r8
    861c:	1c40      	adds	r0, r0, #1
    861e:	b2c6      	uxtb	r6, r0
    8620:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
    8624:	68b9      	ldr	r1, [r7, #8]
    8626:	1840      	adds	r0, r0, r1
    8628:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    862c:	1840      	adds	r0, r0, r1
    862e:	b282      	uxth	r2, r0
    8630:	f104 0161 	add.w	r1, r4, #97	; 0x61
    8634:	f104 002e 	add.w	r0, r4, #46	; 0x2e
    8638:	f7fe fbb2 	bl	6da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    863c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    8640:	7961      	ldrb	r1, [r4, #5]
    8642:	4633      	mov	r3, r6
    8644:	2201      	movs	r2, #1
    8646:	e000      	b.n	864a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x4ba>
    8648:	e037      	b.n	86ba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x52a>
    864a:	4620      	mov	r0, r4
    864c:	f001 f9b8 	bl	99c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6c>
    8650:	9000      	str	r0, [sp, #0]
    8652:	f8bd 0000 	ldrh.w	r0, [sp]
    8656:	f89d 1002 	ldrb.w	r1, [sp, #2]
    865a:	2303      	movs	r3, #3
    865c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8660:	9001      	str	r0, [sp, #4]
    8662:	2204      	movs	r2, #4
    8664:	a901      	add	r1, sp, #4
    8666:	68a8      	ldr	r0, [r5, #8]
    8668:	f00a fcac 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    866c:	78a0      	ldrb	r0, [r4, #2]
    866e:	f010 0f40 	tst.w	r0, #64	; 0x40
    8672:	d00e      	beq.n	8692 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x502>
    8674:	f994 2010 	ldrsb.w	r2, [r4, #16]
    8678:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    867c:	7960      	ldrb	r0, [r4, #5]
    867e:	f00c ff06 	bl	1548e <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>
    8682:	f88d 0000 	strb.w	r0, [sp]
    8686:	2301      	movs	r3, #1
    8688:	2206      	movs	r2, #6
    868a:	4669      	mov	r1, sp
    868c:	68a8      	ldr	r0, [r5, #8]
    868e:	f00a fc99 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8692:	89b8      	ldrh	r0, [r7, #12]
    8694:	4642      	mov	r2, r8
    8696:	eb00 010a 	add.w	r1, r0, sl
    869a:	68a8      	ldr	r0, [r5, #8]
    869c:	f00a fc62 	bl	12f64 <sym_PVUEVCCU6GBXS4SSN6KRMQWGFE4INJ34NEDDTZA>
    86a0:	89b8      	ldrh	r0, [r7, #12]
    86a2:	4440      	add	r0, r8
    86a4:	81b8      	strh	r0, [r7, #12]
    86a6:	68a8      	ldr	r0, [r5, #8]
    86a8:	f007 f8ae 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    86ac:	2007      	movs	r0, #7
    86ae:	7038      	strb	r0, [r7, #0]
    86b0:	2001      	movs	r0, #1
    86b2:	7078      	strb	r0, [r7, #1]
    86b4:	b002      	add	sp, #8
    86b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86ba:	2201      	movs	r2, #1
    86bc:	f000 fe0e 	bl	92dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    86c0:	e7f1      	b.n	86a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x516>
    86c2:	0000      	.short	0x0000
    86c4:	20000160 	.word	0x20000160
    86c8:	200015c0 	.word	0x200015c0
    86cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    86d0:	4e4a      	ldr	r6, [pc, #296]	; (87fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x66c>)
    86d2:	4681      	mov	r9, r0
    86d4:	7830      	ldrb	r0, [r6, #0]
    86d6:	2802      	cmp	r0, #2
    86d8:	bf1c      	itt	ne
    86da:	7830      	ldrbne	r0, [r6, #0]
    86dc:	2803      	cmpne	r0, #3
    86de:	d005      	beq.n	86ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x55c>
    86e0:	f640 41b9 	movw	r1, #3257	; 0xcb9
    86e4:	f04f 002d 	mov.w	r0, #45	; 0x2d
    86e8:	f7fb ffe8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86ec:	4c44      	ldr	r4, [pc, #272]	; (8800 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x670>)
    86ee:	6865      	ldr	r5, [r4, #4]
    86f0:	7b28      	ldrb	r0, [r5, #12]
    86f2:	b140      	cbz	r0, 8706 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x576>
    86f4:	f105 003f 	add.w	r0, r5, #63	; 0x3f
    86f8:	f007 fad2 	bl	fca0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    86fc:	2800      	cmp	r0, #0
    86fe:	bf04      	itt	eq
    8700:	207f      	moveq	r0, #127	; 0x7f
    8702:	f885 003f 	strbeq.w	r0, [r5, #63]	; 0x3f
    8706:	f8d4 c008 	ldr.w	ip, [r4, #8]
    870a:	6861      	ldr	r1, [r4, #4]
    870c:	f04f 0800 	mov.w	r8, #0
    8710:	f89c 0000 	ldrb.w	r0, [ip]
    8714:	6a0a      	ldr	r2, [r1, #32]
    8716:	f000 070f 	and.w	r7, r0, #15
    871a:	2a00      	cmp	r2, #0
    871c:	bf18      	it	ne
    871e:	f892 8077 	ldrbne.w	r8, [r2, #119]	; 0x77
    8722:	f1b9 0f00 	cmp.w	r9, #0
    8726:	d04d      	beq.n	87c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
    8728:	f101 0361 	add.w	r3, r1, #97	; 0x61
    872c:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    8730:	09c0      	lsrs	r0, r0, #7
    8732:	f10c 0109 	add.w	r1, ip, #9
    8736:	f009 fefb 	bl	12530 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    873a:	2800      	cmp	r0, #0
    873c:	d042      	beq.n	87c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
    873e:	6865      	ldr	r5, [r4, #4]
    8740:	2f05      	cmp	r7, #5
    8742:	d121      	bne.n	8788 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x5f8>
    8744:	68a0      	ldr	r0, [r4, #8]
    8746:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    874a:	f000 001f 	and.w	r0, r0, #31
    874e:	2810      	cmp	r0, #16
    8750:	d91a      	bls.n	8788 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x5f8>
    8752:	7be8      	ldrb	r0, [r5, #15]
    8754:	b1c0      	cbz	r0, 8788 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x5f8>
    8756:	20ff      	movs	r0, #255	; 0xff
    8758:	f88d 0000 	strb.w	r0, [sp]
    875c:	466a      	mov	r2, sp
    875e:	2105      	movs	r1, #5
    8760:	4628      	mov	r0, r5
    8762:	f001 f8a5 	bl	98b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa5c>
    8766:	b368      	cbz	r0, 87c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
    8768:	68a0      	ldr	r0, [r4, #8]
    876a:	2222      	movs	r2, #34	; 0x22
    876c:	1cc1      	adds	r1, r0, #3
    876e:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    8772:	f008 fba1 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8776:	221e      	movs	r2, #30
    8778:	4629      	mov	r1, r5
    877a:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    877e:	f7fe fda3 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8782:	f7ff f8d9 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8786:	e01d      	b.n	87c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
    8788:	4641      	mov	r1, r8
    878a:	68a0      	ldr	r0, [r4, #8]
    878c:	f00a fb87 	bl	12e9e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    8790:	b1c0      	cbz	r0, 87c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
    8792:	7832      	ldrb	r2, [r6, #0]
    8794:	6860      	ldr	r0, [r4, #4]
    8796:	4639      	mov	r1, r7
    8798:	2a02      	cmp	r2, #2
    879a:	bf1c      	itt	ne
    879c:	7832      	ldrbne	r2, [r6, #0]
    879e:	2a03      	cmpne	r2, #3
    87a0:	d005      	beq.n	87ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x61e>
    87a2:	f640 4192 	movw	r1, #3218	; 0xc92
    87a6:	f04f 002d 	mov.w	r0, #45	; 0x2d
    87aa:	f7fb ff87 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87ae:	68e2      	ldr	r2, [r4, #12]
    87b0:	7833      	ldrb	r3, [r6, #0]
    87b2:	6952      	ldr	r2, [r2, #20]
    87b4:	f06f 0c07 	mvn.w	ip, #7
    87b8:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    87bc:	58d2      	ldr	r2, [r2, r3]
    87be:	4790      	blx	r2
    87c0:	4605      	mov	r5, r0
    87c2:	e000      	b.n	87c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x636>
    87c4:	2501      	movs	r5, #1
    87c6:	7bb0      	ldrb	r0, [r6, #14]
    87c8:	b118      	cbz	r0, 87d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x642>
    87ca:	f006 fb2b 	bl	ee24 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    87ce:	f006 f903 	bl	e9d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    87d2:	2d00      	cmp	r5, #0
    87d4:	bf08      	it	eq
    87d6:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    87da:	6860      	ldr	r0, [r4, #4]
    87dc:	f00b f990 	bl	13b00 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    87e0:	b138      	cbz	r0, 87f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x662>
    87e2:	f006 fb61 	bl	eea8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    87e6:	68e0      	ldr	r0, [r4, #12]
    87e8:	6880      	ldr	r0, [r0, #8]
    87ea:	b001      	add	sp, #4
    87ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    87f0:	4700      	bx	r0
    87f2:	6860      	ldr	r0, [r4, #4]
    87f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    87f8:	f001 bb3e 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    87fc:	200015c0 	.word	0x200015c0
    8800:	20000160 	.word	0x20000160
    8804:	b530      	push	{r4, r5, lr}
    8806:	b083      	sub	sp, #12
    8808:	2903      	cmp	r1, #3
    880a:	d002      	beq.n	8812 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x682>
    880c:	2905      	cmp	r1, #5
    880e:	d074      	beq.n	88fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x76a>
    8810:	e06f      	b.n	88f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x762>
    8812:	4604      	mov	r4, r0
    8814:	20ff      	movs	r0, #255	; 0xff
    8816:	f88d 0008 	strb.w	r0, [sp, #8]
    881a:	aa02      	add	r2, sp, #8
    881c:	2103      	movs	r1, #3
    881e:	4620      	mov	r0, r4
    8820:	f001 f846 	bl	98b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa5c>
    8824:	2800      	cmp	r0, #0
    8826:	d064      	beq.n	88f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x762>
    8828:	7b20      	ldrb	r0, [r4, #12]
    882a:	4d38      	ldr	r5, [pc, #224]	; (890c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x77c>)
    882c:	2800      	cmp	r0, #0
    882e:	d03e      	beq.n	88ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x71e>
    8830:	f894 00ce 	ldrb.w	r0, [r4, #206]	; 0xce
    8834:	f88d 0000 	strb.w	r0, [sp]
    8838:	f89d 0000 	ldrb.w	r0, [sp]
    883c:	bbb8      	cbnz	r0, 88ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x71e>
    883e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    8842:	7821      	ldrb	r1, [r4, #0]
    8844:	f884 10cf 	strb.w	r1, [r4, #207]	; 0xcf
    8848:	28ff      	cmp	r0, #255	; 0xff
    884a:	d011      	beq.n	8870 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x6e0>
    884c:	f104 02d1 	add.w	r2, r4, #209	; 0xd1
    8850:	1e51      	subs	r1, r2, #1
    8852:	f7fd ff09 	bl	6668 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    8856:	b130      	cbz	r0, 8866 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x6d6>
    8858:	f894 00d0 	ldrb.w	r0, [r4, #208]	; 0xd0
    885c:	f040 0102 	orr.w	r1, r0, #2
    8860:	f884 10d0 	strb.w	r1, [r4, #208]	; 0xd0
    8864:	e012      	b.n	888c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x6fc>
    8866:	f640 7193 	movw	r1, #3987	; 0xf93
    886a:	202d      	movs	r0, #45	; 0x2d
    886c:	f7fb ff26 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8870:	68a8      	ldr	r0, [r5, #8]
    8872:	7801      	ldrb	r1, [r0, #0]
    8874:	f3c1 1280 	ubfx	r2, r1, #6, #1
    8878:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
    887c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    8880:	f8c4 20d1 	str.w	r2, [r4, #209]	; 0xd1
    8884:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8888:	f8a4 00d5 	strh.w	r0, [r4, #213]	; 0xd5
    888c:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
    8890:	287f      	cmp	r0, #127	; 0x7f
    8892:	d029      	beq.n	88e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x758>
    8894:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    8898:	217f      	movs	r1, #127	; 0x7f
    889a:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
    889e:	2219      	movs	r2, #25
    88a0:	4621      	mov	r1, r4
    88a2:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    88a6:	f7fe fd0f 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    88aa:	f7ff f845 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    88ae:	68a8      	ldr	r0, [r5, #8]
    88b0:	2100      	movs	r1, #0
    88b2:	8001      	strh	r1, [r0, #0]
    88b4:	2104      	movs	r1, #4
    88b6:	f00a fbe0 	bl	1307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    88ba:	f104 0161 	add.w	r1, r4, #97	; 0x61
    88be:	68a8      	ldr	r0, [r5, #8]
    88c0:	f00a fc0d 	bl	130de <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    88c4:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    88c8:	68a8      	ldr	r0, [r5, #8]
    88ca:	f00a fc0f 	bl	130ec <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    88ce:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    88d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
    88d4:	68a8      	ldr	r0, [r5, #8]
    88d6:	f00a fc12 	bl	130fe <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    88da:	490d      	ldr	r1, [pc, #52]	; (8910 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x780>)
    88dc:	2005      	movs	r0, #5
    88de:	7008      	strb	r0, [r1, #0]
    88e0:	68a8      	ldr	r0, [r5, #8]
    88e2:	f006 ff91 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    88e6:	e00e      	b.n	8906 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x776>
    88e8:	f640 51fb 	movw	r1, #3579	; 0xdfb
    88ec:	202d      	movs	r0, #45	; 0x2d
    88ee:	f7fb fee5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88f2:	b003      	add	sp, #12
    88f4:	2001      	movs	r0, #1
    88f6:	bd30      	pop	{r4, r5, pc}
    88f8:	e7ff      	b.n	88fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x76a>
    88fa:	4906      	ldr	r1, [pc, #24]	; (8914 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x784>)
    88fc:	6809      	ldr	r1, [r1, #0]
    88fe:	b111      	cbz	r1, 8906 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x776>
    8900:	4788      	blx	r1
    8902:	2800      	cmp	r0, #0
    8904:	d0f5      	beq.n	88f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x762>
    8906:	b003      	add	sp, #12
    8908:	2000      	movs	r0, #0
    890a:	bd30      	pop	{r4, r5, pc}
    890c:	20000160 	.word	0x20000160
    8910:	200015c0 	.word	0x200015c0
    8914:	20000174 	.word	0x20000174
    8918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    891c:	b08b      	sub	sp, #44	; 0x2c
    891e:	2903      	cmp	r1, #3
    8920:	d008      	beq.n	8934 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x7a4>
    8922:	2905      	cmp	r1, #5
    8924:	f000 80f6 	beq.w	8b14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x984>
    8928:	f001 faa6 	bl	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    892c:	b00b      	add	sp, #44	; 0x2c
    892e:	2000      	movs	r0, #0
    8930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8934:	4604      	mov	r4, r0
    8936:	20ff      	movs	r0, #255	; 0xff
    8938:	f88d 0010 	strb.w	r0, [sp, #16]
    893c:	aa04      	add	r2, sp, #16
    893e:	2103      	movs	r1, #3
    8940:	4620      	mov	r0, r4
    8942:	f000 ffb5 	bl	98b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa5c>
    8946:	2800      	cmp	r0, #0
    8948:	f000 80e0 	beq.w	8b0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x97c>
    894c:	7b20      	ldrb	r0, [r4, #12]
    894e:	4e78      	ldr	r6, [pc, #480]	; (8b30 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9a0>)
    8950:	2800      	cmp	r0, #0
    8952:	d03e      	beq.n	89d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x842>
    8954:	f894 00ce 	ldrb.w	r0, [r4, #206]	; 0xce
    8958:	f88d 0000 	strb.w	r0, [sp]
    895c:	f89d 0000 	ldrb.w	r0, [sp]
    8960:	bbb8      	cbnz	r0, 89d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x842>
    8962:	f89d 0010 	ldrb.w	r0, [sp, #16]
    8966:	7821      	ldrb	r1, [r4, #0]
    8968:	f884 10cf 	strb.w	r1, [r4, #207]	; 0xcf
    896c:	28ff      	cmp	r0, #255	; 0xff
    896e:	d011      	beq.n	8994 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x804>
    8970:	f104 02d1 	add.w	r2, r4, #209	; 0xd1
    8974:	1e51      	subs	r1, r2, #1
    8976:	f7fd fe77 	bl	6668 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    897a:	b130      	cbz	r0, 898a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x7fa>
    897c:	f894 00d0 	ldrb.w	r0, [r4, #208]	; 0xd0
    8980:	f040 0102 	orr.w	r1, r0, #2
    8984:	f884 10d0 	strb.w	r1, [r4, #208]	; 0xd0
    8988:	e012      	b.n	89b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x820>
    898a:	f640 7193 	movw	r1, #3987	; 0xf93
    898e:	202d      	movs	r0, #45	; 0x2d
    8990:	f7fb fe94 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8994:	68b0      	ldr	r0, [r6, #8]
    8996:	7801      	ldrb	r1, [r0, #0]
    8998:	f3c1 1280 	ubfx	r2, r1, #6, #1
    899c:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
    89a0:	f8d0 2003 	ldr.w	r2, [r0, #3]
    89a4:	f8c4 20d1 	str.w	r2, [r4, #209]	; 0xd1
    89a8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    89ac:	f8a4 00d5 	strh.w	r0, [r4, #213]	; 0xd5
    89b0:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
    89b4:	287f      	cmp	r0, #127	; 0x7f
    89b6:	d07d      	beq.n	8ab4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x924>
    89b8:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    89bc:	217f      	movs	r1, #127	; 0x7f
    89be:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
    89c2:	2219      	movs	r2, #25
    89c4:	4621      	mov	r1, r4
    89c6:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    89ca:	f7fe fc7d 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    89ce:	f7fe ffb3 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    89d2:	78a0      	ldrb	r0, [r4, #2]
    89d4:	4625      	mov	r5, r4
    89d6:	f3c0 1a80 	ubfx	sl, r0, #6, #1
    89da:	4856      	ldr	r0, [pc, #344]	; (8b34 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9a4>)
    89dc:	f1ba 0f00 	cmp.w	sl, #0
    89e0:	6840      	ldr	r0, [r0, #4]
    89e2:	b2c0      	uxtb	r0, r0
    89e4:	bf14      	ite	ne
    89e6:	f040 0940 	orrne.w	r9, r0, #64	; 0x40
    89ea:	f020 0940 	biceq.w	r9, r0, #64	; 0x40
    89ee:	2100      	movs	r1, #0
    89f0:	68b0      	ldr	r0, [r6, #8]
    89f2:	8001      	strh	r1, [r0, #0]
    89f4:	2107      	movs	r1, #7
    89f6:	f00a fb40 	bl	1307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    89fa:	2100      	movs	r1, #0
    89fc:	68b0      	ldr	r0, [r6, #8]
    89fe:	f00a fac8 	bl	12f92 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    8a02:	2200      	movs	r2, #0
    8a04:	4649      	mov	r1, r9
    8a06:	68b0      	ldr	r0, [r6, #8]
    8a08:	f00a faff 	bl	1300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    8a0c:	2306      	movs	r3, #6
    8a0e:	2200      	movs	r2, #0
    8a10:	f105 0161 	add.w	r1, r5, #97	; 0x61
    8a14:	68b0      	ldr	r0, [r6, #8]
    8a16:	f00a fad5 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8a1a:	f895 1060 	ldrb.w	r1, [r5, #96]	; 0x60
    8a1e:	68b0      	ldr	r0, [r6, #8]
    8a20:	f00a fb64 	bl	130ec <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8a24:	68b0      	ldr	r0, [r6, #8]
    8a26:	f00a f9de 	bl	12de6 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
    8a2a:	f8b5 1054 	ldrh.w	r1, [r5, #84]	; 0x54
    8a2e:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
    8a32:	4281      	cmp	r1, r0
    8a34:	bfb8      	it	lt
    8a36:	4608      	movlt	r0, r1
    8a38:	b2c7      	uxtb	r7, r0
    8a3a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8b38 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9a8>
    8a3e:	42b9      	cmp	r1, r7
    8a40:	d93b      	bls.n	8aba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x92a>
    8a42:	1ef8      	subs	r0, r7, #3
    8a44:	b2c7      	uxtb	r7, r0
    8a46:	f049 0b10 	orr.w	fp, r9, #16
    8a4a:	2200      	movs	r2, #0
    8a4c:	4659      	mov	r1, fp
    8a4e:	68b0      	ldr	r0, [r6, #8]
    8a50:	f00a fadb 	bl	1300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    8a54:	68b0      	ldr	r0, [r6, #8]
    8a56:	f00a f9c2 	bl	12dde <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>
    8a5a:	4438      	add	r0, r7
    8a5c:	1c40      	adds	r0, r0, #1
    8a5e:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    8a62:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    8a66:	f8d8 1008 	ldr.w	r1, [r8, #8]
    8a6a:	1840      	adds	r0, r0, r1
    8a6c:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
    8a70:	1840      	adds	r0, r0, r1
    8a72:	b282      	uxth	r2, r0
    8a74:	f105 0161 	add.w	r1, r5, #97	; 0x61
    8a78:	f105 002e 	add.w	r0, r5, #46	; 0x2e
    8a7c:	f7fe f990 	bl	6da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    8a80:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    8a84:	7969      	ldrb	r1, [r5, #5]
    8a86:	464b      	mov	r3, r9
    8a88:	2201      	movs	r2, #1
    8a8a:	4628      	mov	r0, r5
    8a8c:	f000 ff98 	bl	99c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6c>
    8a90:	9001      	str	r0, [sp, #4]
    8a92:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    8a96:	f89d 1006 	ldrb.w	r1, [sp, #6]
    8a9a:	2303      	movs	r3, #3
    8a9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8aa0:	9008      	str	r0, [sp, #32]
    8aa2:	2204      	movs	r2, #4
    8aa4:	a908      	add	r1, sp, #32
    8aa6:	68b0      	ldr	r0, [r6, #8]
    8aa8:	f00a fa8c 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8aac:	2200      	movs	r2, #0
    8aae:	4659      	mov	r1, fp
    8ab0:	68b0      	ldr	r0, [r6, #8]
    8ab2:	e000      	b.n	8ab6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x926>
    8ab4:	e025      	b.n	8b02 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x972>
    8ab6:	f00a faa8 	bl	1300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    8aba:	f1ba 0f00 	cmp.w	sl, #0
    8abe:	d00e      	beq.n	8ade <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x94e>
    8ac0:	f995 2010 	ldrsb.w	r2, [r5, #16]
    8ac4:	f895 103c 	ldrb.w	r1, [r5, #60]	; 0x3c
    8ac8:	7968      	ldrb	r0, [r5, #5]
    8aca:	f00c fce0 	bl	1548e <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>
    8ace:	f88d 0004 	strb.w	r0, [sp, #4]
    8ad2:	2301      	movs	r3, #1
    8ad4:	2206      	movs	r2, #6
    8ad6:	a901      	add	r1, sp, #4
    8ad8:	68b0      	ldr	r0, [r6, #8]
    8ada:	f00a fa73 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8ade:	463a      	mov	r2, r7
    8ae0:	6d29      	ldr	r1, [r5, #80]	; 0x50
    8ae2:	68b0      	ldr	r0, [r6, #8]
    8ae4:	f00a fa3e 	bl	12f64 <sym_PVUEVCCU6GBXS4SSN6KRMQWGFE4INJ34NEDDTZA>
    8ae8:	f8a8 700c 	strh.w	r7, [r8, #12]
    8aec:	7961      	ldrb	r1, [r4, #5]
    8aee:	20ff      	movs	r0, #255	; 0xff
    8af0:	f007 f8f4 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    8af4:	2008      	movs	r0, #8
    8af6:	f888 0000 	strb.w	r0, [r8]
    8afa:	68b0      	ldr	r0, [r6, #8]
    8afc:	f006 fe84 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8b00:	e012      	b.n	8b28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x998>
    8b02:	f640 51fb 	movw	r1, #3579	; 0xdfb
    8b06:	202d      	movs	r0, #45	; 0x2d
    8b08:	f7fb fdd8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b0c:	4620      	mov	r0, r4
    8b0e:	f001 f9b3 	bl	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    8b12:	e009      	b.n	8b28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x998>
    8b14:	4909      	ldr	r1, [pc, #36]	; (8b3c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9ac>)
    8b16:	6809      	ldr	r1, [r1, #0]
    8b18:	b131      	cbz	r1, 8b28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x998>
    8b1a:	4788      	blx	r1
    8b1c:	2800      	cmp	r0, #0
    8b1e:	bf02      	ittt	eq
    8b20:	2001      	moveq	r0, #1
    8b22:	b00b      	addeq	sp, #44	; 0x2c
    8b24:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b28:	2000      	movs	r0, #0
    8b2a:	b00b      	add	sp, #44	; 0x2c
    8b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b30:	20000160 	.word	0x20000160
    8b34:	0000a4a8 	.word	0x0000a4a8
    8b38:	200015c0 	.word	0x200015c0
    8b3c:	20000170 	.word	0x20000170
    8b40:	4a09      	ldr	r2, [pc, #36]	; (8b68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9d8>)
    8b42:	0003      	movs	r3, r0
    8b44:	6850      	ldr	r0, [r2, #4]
    8b46:	d001      	beq.n	8b4c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9bc>
    8b48:	f001 b996 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    8b4c:	2900      	cmp	r1, #0
    8b4e:	bf08      	it	eq
    8b50:	4770      	bxeq	lr
    8b52:	68d1      	ldr	r1, [r2, #12]
    8b54:	4a05      	ldr	r2, [pc, #20]	; (8b6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9dc>)
    8b56:	6909      	ldr	r1, [r1, #16]
    8b58:	7812      	ldrb	r2, [r2, #0]
    8b5a:	f06f 030f 	mvn.w	r3, #15
    8b5e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8b62:	5889      	ldr	r1, [r1, r2]
    8b64:	4708      	bx	r1
    8b66:	0000      	.short	0x0000
    8b68:	20000160 	.word	0x20000160
    8b6c:	200015c0 	.word	0x200015c0
    8b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b74:	4604      	mov	r4, r0
    8b76:	4601      	mov	r1, r0
    8b78:	220e      	movs	r2, #14
    8b7a:	307e      	adds	r0, #126	; 0x7e
    8b7c:	f7fe fba4 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8b80:	2203      	movs	r2, #3
    8b82:	4621      	mov	r1, r4
    8b84:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    8b88:	f7fe fb9e 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8b8c:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
    8b90:	f894 7088 	ldrb.w	r7, [r4, #136]	; 0x88
    8b94:	f7fe fed0 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8b98:	f005 fe08 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    8b9c:	2600      	movs	r6, #0
    8b9e:	b9a8      	cbnz	r0, 8bcc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa3c>
    8ba0:	7821      	ldrb	r1, [r4, #0]
    8ba2:	f884 10b3 	strb.w	r1, [r4, #179]	; 0xb3
    8ba6:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
    8baa:	f884 70b2 	strb.w	r7, [r4, #178]	; 0xb2
    8bae:	7b60      	ldrb	r0, [r4, #13]
    8bb0:	2800      	cmp	r0, #0
    8bb2:	bf1a      	itte	ne
    8bb4:	f894 0040 	ldrbne.w	r0, [r4, #64]	; 0x40
    8bb8:	f884 00b6 	strbne.w	r0, [r4, #182]	; 0xb6
    8bbc:	f884 60b6 	strbeq.w	r6, [r4, #182]	; 0xb6
    8bc0:	2212      	movs	r2, #18
    8bc2:	4621      	mov	r1, r4
    8bc4:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    8bc8:	f7fe fb7e 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8bcc:	4807      	ldr	r0, [pc, #28]	; (8bec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa5c>)
    8bce:	7006      	strb	r6, [r0, #0]
    8bd0:	2202      	movs	r2, #2
    8bd2:	4621      	mov	r1, r4
    8bd4:	6a20      	ldr	r0, [r4, #32]
    8bd6:	f001 ff9d 	bl	ab14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    8bda:	6a20      	ldr	r0, [r4, #32]
    8bdc:	8800      	ldrh	r0, [r0, #0]
    8bde:	f7fc f9f7 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8be6:	f009 b98c 	b.w	11f02 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    8bea:	0000      	.short	0x0000
    8bec:	200015c0 	.word	0x200015c0
    8bf0:	b570      	push	{r4, r5, r6, lr}
    8bf2:	4d19      	ldr	r5, [pc, #100]	; (8c58 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xac8>)
    8bf4:	2101      	movs	r1, #1
    8bf6:	4604      	mov	r4, r0
    8bf8:	70a9      	strb	r1, [r5, #2]
    8bfa:	3028      	adds	r0, #40	; 0x28
    8bfc:	f00a ff1f 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    8c00:	b128      	cbz	r0, 8c0e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa7e>
    8c02:	4620      	mov	r0, r4
    8c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c08:	2101      	movs	r1, #1
    8c0a:	f7ff bad1 	b.w	81b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
    8c0e:	8860      	ldrh	r0, [r4, #2]
    8c10:	f3c0 1100 	ubfx	r1, r0, #4, #1
    8c14:	b9d9      	cbnz	r1, 8c4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xabe>
    8c16:	78a9      	ldrb	r1, [r5, #2]
    8c18:	b1c9      	cbz	r1, 8c4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xabe>
    8c1a:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    8c1e:	2900      	cmp	r1, #0
    8c20:	bf08      	it	eq
    8c22:	f010 0f01 	tsteq.w	r0, #1
    8c26:	d10c      	bne.n	8c42 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xab2>
    8c28:	f010 0f02 	tst.w	r0, #2
    8c2c:	bf08      	it	eq
    8c2e:	f010 0f20 	tsteq.w	r0, #32
    8c32:	d106      	bne.n	8c42 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xab2>
    8c34:	6968      	ldr	r0, [r5, #20]
    8c36:	b150      	cbz	r0, 8c4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xabe>
    8c38:	f100 0038 	add.w	r0, r0, #56	; 0x38
    8c3c:	f00c fc19 	bl	15472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
    8c40:	b128      	cbz	r0, 8c4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xabe>
    8c42:	4620      	mov	r0, r4
    8c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c48:	2100      	movs	r1, #0
    8c4a:	f7ff bc1b 	b.w	8484 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f4>
    8c4e:	4620      	mov	r0, r4
    8c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c54:	f001 b910 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    8c58:	200015c0 	.word	0x200015c0
    8c5c:	b570      	push	{r4, r5, r6, lr}
    8c5e:	4604      	mov	r4, r0
    8c60:	8840      	ldrh	r0, [r0, #2]
    8c62:	2810      	cmp	r0, #16
    8c64:	d010      	beq.n	8c88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xaf8>
    8c66:	4d11      	ldr	r5, [pc, #68]	; (8cac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb1c>)
    8c68:	7ba8      	ldrb	r0, [r5, #14]
    8c6a:	b120      	cbz	r0, 8c76 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xae6>
    8c6c:	f005 fede 	bl	ea2c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    8c70:	2040      	movs	r0, #64	; 0x40
    8c72:	f006 f8e5 	bl	ee40 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    8c76:	480e      	ldr	r0, [pc, #56]	; (8cb0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb20>)
    8c78:	6880      	ldr	r0, [r0, #8]
    8c7a:	f006 fdc5 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8c7e:	78a0      	ldrb	r0, [r4, #2]
    8c80:	f010 0f04 	tst.w	r0, #4
    8c84:	d10b      	bne.n	8c9e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb0e>
    8c86:	e005      	b.n	8c94 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb04>
    8c88:	4620      	mov	r0, r4
    8c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c8e:	2101      	movs	r1, #1
    8c90:	f7ff bb10 	b.w	82b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x124>
    8c94:	2100      	movs	r1, #0
    8c96:	7922      	ldrb	r2, [r4, #4]
    8c98:	4608      	mov	r0, r1
    8c9a:	f006 ff85 	bl	fba8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8c9e:	2000      	movs	r0, #0
    8ca0:	f006 fc16 	bl	f4d0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    8ca4:	2002      	movs	r0, #2
    8ca6:	7028      	strb	r0, [r5, #0]
    8ca8:	bd70      	pop	{r4, r5, r6, pc}
    8caa:	0000      	.short	0x0000
    8cac:	200015c0 	.word	0x200015c0
    8cb0:	20000160 	.word	0x20000160
    8cb4:	b510      	push	{r4, lr}
    8cb6:	4c08      	ldr	r4, [pc, #32]	; (8cd8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb48>)
    8cb8:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
    8cbc:	89a1      	ldrh	r1, [r4, #12]
    8cbe:	4291      	cmp	r1, r2
    8cc0:	d005      	beq.n	8cce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb3e>
    8cc2:	2101      	movs	r1, #1
    8cc4:	f7ff fbde 	bl	8484 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f4>
    8cc8:	2008      	movs	r0, #8
    8cca:	7020      	strb	r0, [r4, #0]
    8ccc:	bd10      	pop	{r4, pc}
    8cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cd2:	f001 b8d1 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    8cd6:	0000      	.short	0x0000
    8cd8:	200015c0 	.word	0x200015c0
    8cdc:	b570      	push	{r4, r5, r6, lr}
    8cde:	4604      	mov	r4, r0
    8ce0:	8840      	ldrh	r0, [r0, #2]
    8ce2:	4d21      	ldr	r5, [pc, #132]	; (8d68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbd8>)
    8ce4:	f3c0 0140 	ubfx	r1, r0, #1, #1
    8ce8:	2900      	cmp	r1, #0
    8cea:	bf08      	it	eq
    8cec:	f010 0f01 	tsteq.w	r0, #1
    8cf0:	d02a      	beq.n	8d48 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbb8>
    8cf2:	f04f 0100 	mov.w	r1, #0
    8cf6:	7962      	ldrb	r2, [r4, #5]
    8cf8:	4608      	mov	r0, r1
    8cfa:	f006 ff55 	bl	fba8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8cfe:	78a0      	ldrb	r0, [r4, #2]
    8d00:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8d04:	2800      	cmp	r0, #0
    8d06:	bf14      	ite	ne
    8d08:	200c      	movne	r0, #12
    8d0a:	2022      	moveq	r0, #34	; 0x22
    8d0c:	7961      	ldrb	r1, [r4, #5]
    8d0e:	f006 ffe5 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    8d12:	2003      	movs	r0, #3
    8d14:	7028      	strb	r0, [r5, #0]
    8d16:	7ba8      	ldrb	r0, [r5, #14]
    8d18:	b148      	cbz	r0, 8d2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb9e>
    8d1a:	f005 fe87 	bl	ea2c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    8d1e:	7960      	ldrb	r0, [r4, #5]
    8d20:	f010 0f0c 	tst.w	r0, #12
    8d24:	bf0c      	ite	eq
    8d26:	2040      	moveq	r0, #64	; 0x40
    8d28:	2045      	movne	r0, #69	; 0x45
    8d2a:	f006 f889 	bl	ee40 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    8d2e:	7960      	ldrb	r0, [r4, #5]
    8d30:	f010 000c 	ands.w	r0, r0, #12
    8d34:	bf18      	it	ne
    8d36:	2028      	movne	r0, #40	; 0x28
    8d38:	f006 fbca 	bl	f4d0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    8d3c:	480b      	ldr	r0, [pc, #44]	; (8d6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbdc>)
    8d3e:	6880      	ldr	r0, [r0, #8]
    8d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d44:	f006 bd60 	b.w	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8d48:	89a8      	ldrh	r0, [r5, #12]
    8d4a:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    8d4e:	4288      	cmp	r0, r1
    8d50:	d104      	bne.n	8d5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbcc>
    8d52:	4620      	mov	r0, r4
    8d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d58:	f001 b88e 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    8d5c:	4620      	mov	r0, r4
    8d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d62:	2101      	movs	r1, #1
    8d64:	f7ff bb8e 	b.w	8484 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f4>
    8d68:	200015c0 	.word	0x200015c0
    8d6c:	20000160 	.word	0x20000160
    8d70:	b570      	push	{r4, r5, r6, lr}
    8d72:	4c1f      	ldr	r4, [pc, #124]	; (8df0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc60>)
    8d74:	6865      	ldr	r5, [r4, #4]
    8d76:	7b28      	ldrb	r0, [r5, #12]
    8d78:	b140      	cbz	r0, 8d8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbfc>
    8d7a:	f105 003f 	add.w	r0, r5, #63	; 0x3f
    8d7e:	f006 ff8f 	bl	fca0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    8d82:	2800      	cmp	r0, #0
    8d84:	bf04      	itt	eq
    8d86:	207f      	moveq	r0, #127	; 0x7f
    8d88:	f885 003f 	strbeq.w	r0, [r5, #63]	; 0x3f
    8d8c:	4d19      	ldr	r5, [pc, #100]	; (8df4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc64>)
    8d8e:	7ba8      	ldrb	r0, [r5, #14]
    8d90:	b118      	cbz	r0, 8d9a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc0a>
    8d92:	f006 f847 	bl	ee24 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8d96:	f005 fe1f 	bl	e9d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8d9a:	6860      	ldr	r0, [r4, #4]
    8d9c:	f00a feb0 	bl	13b00 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    8da0:	b1a8      	cbz	r0, 8dce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc3e>
    8da2:	6860      	ldr	r0, [r4, #4]
    8da4:	8841      	ldrh	r1, [r0, #2]
    8da6:	f3c1 1200 	ubfx	r2, r1, #4, #1
    8daa:	2a00      	cmp	r2, #0
    8dac:	bf04      	itt	eq
    8dae:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
    8db2:	2900      	cmpeq	r1, #0
    8db4:	d00b      	beq.n	8dce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc3e>
    8db6:	7829      	ldrb	r1, [r5, #0]
    8db8:	2902      	cmp	r1, #2
    8dba:	bf1c      	itt	ne
    8dbc:	7829      	ldrbne	r1, [r5, #0]
    8dbe:	2903      	cmpne	r1, #3
    8dc0:	d00a      	beq.n	8dd8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc48>
    8dc2:	f640 31c6 	movw	r1, #3014	; 0xbc6
    8dc6:	f04f 002d 	mov.w	r0, #45	; 0x2d
    8dca:	f7fb fc77 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dce:	6860      	ldr	r0, [r4, #4]
    8dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8dd4:	f001 b850 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    8dd8:	68e1      	ldr	r1, [r4, #12]
    8dda:	782a      	ldrb	r2, [r5, #0]
    8ddc:	68c9      	ldr	r1, [r1, #12]
    8dde:	f06f 0307 	mvn.w	r3, #7
    8de2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8de6:	5889      	ldr	r1, [r1, r2]
    8de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8dec:	4708      	bx	r1
    8dee:	0000      	.short	0x0000
    8df0:	20000160 	.word	0x20000160
    8df4:	200015c0 	.word	0x200015c0
    8df8:	b570      	push	{r4, r5, r6, lr}
    8dfa:	4604      	mov	r4, r0
    8dfc:	8841      	ldrh	r1, [r0, #2]
    8dfe:	2000      	movs	r0, #0
    8e00:	2909      	cmp	r1, #9
    8e02:	bf18      	it	ne
    8e04:	bd70      	popne	{r4, r5, r6, pc}
    8e06:	4d12      	ldr	r5, [pc, #72]	; (8e50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xcc0>)
    8e08:	81a8      	strh	r0, [r5, #12]
    8e0a:	7068      	strb	r0, [r5, #1]
    8e0c:	4620      	mov	r0, r4
    8e0e:	f7fe ffbd 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8e12:	6869      	ldr	r1, [r5, #4]
    8e14:	4408      	add	r0, r1
    8e16:	6068      	str	r0, [r5, #4]
    8e18:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
    8e1c:	1c40      	adds	r0, r0, #1
    8e1e:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    8e22:	f7fe febb 	bl	7b9c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    8e26:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    8e2a:	fbb0 f2f1 	udiv	r2, r0, r1
    8e2e:	fb01 0012 	mls	r0, r1, r2, r0
    8e32:	6869      	ldr	r1, [r5, #4]
    8e34:	2200      	movs	r2, #0
    8e36:	4408      	add	r0, r1
    8e38:	6068      	str	r0, [r5, #4]
    8e3a:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    8e3e:	4620      	mov	r0, r4
    8e40:	f000 fa4c 	bl	92dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    8e44:	4620      	mov	r0, r4
    8e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e4a:	2101      	movs	r1, #1
    8e4c:	f7ff b9b0 	b.w	81b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
    8e50:	200015c0 	.word	0x200015c0

00008e54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    8e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e58:	4da3      	ldr	r5, [pc, #652]	; (90e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    8e5a:	4604      	mov	r4, r0
    8e5c:	b08a      	sub	sp, #40	; 0x28
    8e5e:	7828      	ldrb	r0, [r5, #0]
    8e60:	2800      	cmp	r0, #0
    8e62:	d17c      	bne.n	8f5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    8e64:	7820      	ldrb	r0, [r4, #0]
    8e66:	28ff      	cmp	r0, #255	; 0xff
    8e68:	d079      	beq.n	8f5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    8e6a:	2600      	movs	r6, #0
    8e6c:	81ae      	strh	r6, [r5, #12]
    8e6e:	606e      	str	r6, [r5, #4]
    8e70:	706e      	strb	r6, [r5, #1]
    8e72:	70ae      	strb	r6, [r5, #2]
    8e74:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
    8e78:	489c      	ldr	r0, [pc, #624]	; (90ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    8e7a:	af02      	add	r7, sp, #8
    8e7c:	f8df 8270 	ldr.w	r8, [pc, #624]	; 90f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    8e80:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    8e82:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    8e86:	f8d8 000c 	ldr.w	r0, [r8, #12]
    8e8a:	6840      	ldr	r0, [r0, #4]
    8e8c:	9005      	str	r0, [sp, #20]
    8e8e:	a802      	add	r0, sp, #8
    8e90:	f006 fad2 	bl	f438 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    8e94:	f006 fc10 	bl	f6b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    8e98:	f007 fa68 	bl	1036c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    8e9c:	f005 ffc2 	bl	ee24 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8ea0:	f005 fd9a 	bl	e9d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8ea4:	4893      	ldr	r0, [pc, #588]	; (90f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>)
    8ea6:	f006 ff05 	bl	fcb4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    8eaa:	4893      	ldr	r0, [pc, #588]	; (90f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a4>)
    8eac:	f006 ff0c 	bl	fcc8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8eb0:	2000      	movs	r0, #0
    8eb2:	f7fb f9bf 	bl	4234 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    8eb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8eba:	f00a fdeb 	bl	13a94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    8ebe:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8ec2:	f00a fd77 	bl	139b4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    8ec6:	f006 ff3d 	bl	fd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8eca:	7921      	ldrb	r1, [r4, #4]
    8ecc:	2025      	movs	r0, #37	; 0x25
    8ece:	f006 ff05 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    8ed2:	f994 0010 	ldrsb.w	r0, [r4, #16]
    8ed6:	f006 fc8b 	bl	f7f0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    8eda:	7921      	ldrb	r1, [r4, #4]
    8edc:	2000      	movs	r0, #0
    8ede:	f006 f955 	bl	f18c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    8ee2:	2701      	movs	r7, #1
    8ee4:	60a8      	str	r0, [r5, #8]
    8ee6:	2800      	cmp	r0, #0
    8ee8:	bf01      	itttt	eq
    8eea:	702f      	strbeq	r7, [r5, #0]
    8eec:	2000      	moveq	r0, #0
    8eee:	b00a      	addeq	sp, #40	; 0x28
    8ef0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8ef4:	7f20      	ldrb	r0, [r4, #28]
    8ef6:	2800      	cmp	r0, #0
    8ef8:	bf01      	itttt	eq
    8efa:	7ea0      	ldrbeq	r0, [r4, #26]
    8efc:	2800      	cmpeq	r0, #0
    8efe:	78a0      	ldrbeq	r0, [r4, #2]
    8f00:	f010 0f04 	tsteq.w	r0, #4
    8f04:	d066      	beq.n	8fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>
    8f06:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    8f0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    8f0e:	ea81 0102 	eor.w	r1, r1, r2
    8f12:	ea71 0000 	orns	r0, r1, r0
    8f16:	d079      	beq.n	900c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    8f18:	f7f9 feb2 	bl	2c80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8f1c:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    8f20:	1a80      	subs	r0, r0, r2
    8f22:	eb71 0003 	sbcs.w	r0, r1, r3
    8f26:	d371      	bcc.n	900c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    8f28:	f7fd fbe8 	bl	66fc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    8f2c:	4973      	ldr	r1, [pc, #460]	; (90fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a8>)
    8f2e:	fba0 a901 	umull	sl, r9, r0, r1
    8f32:	f7f9 fea5 	bl	2c80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8f36:	eb10 000a 	adds.w	r0, r0, sl
    8f3a:	eb41 0109 	adc.w	r1, r1, r9
    8f3e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    8f42:	f04f 0a01 	mov.w	sl, #1
    8f46:	7ee0      	ldrb	r0, [r4, #27]
    8f48:	f7fd fb4e 	bl	65e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    8f4c:	4681      	mov	r9, r0
    8f4e:	7ea0      	ldrb	r0, [r4, #26]
    8f50:	2800      	cmp	r0, #0
    8f52:	bf18      	it	ne
    8f54:	f1b9 0f00 	cmpne.w	r9, #0
    8f58:	d005      	beq.n	8f66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x112>
    8f5a:	7ee0      	ldrb	r0, [r4, #27]
    8f5c:	e000      	b.n	8f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
    8f5e:	e00e      	b.n	8f7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12a>
    8f60:	f7fd fb36 	bl	65d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    8f64:	b178      	cbz	r0, 8f86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x132>
    8f66:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
    8f6a:	2800      	cmp	r0, #0
    8f6c:	bf1c      	itt	ne
    8f6e:	7f20      	ldrbne	r0, [r4, #28]
    8f70:	2800      	cmpne	r0, #0
    8f72:	d021      	beq.n	8fb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    8f74:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    8f78:	2801      	cmp	r0, #1
    8f7a:	d012      	beq.n	8fa2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x14e>
    8f7c:	e017      	b.n	8fae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    8f7e:	b00a      	add	sp, #40	; 0x28
    8f80:	200c      	movs	r0, #12
    8f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f86:	463a      	mov	r2, r7
    8f88:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
    8f8c:	f104 0161 	add.w	r1, r4, #97	; 0x61
    8f90:	4648      	mov	r0, r9
    8f92:	f009 fb05 	bl	125a0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8f96:	7ee1      	ldrb	r1, [r4, #27]
    8f98:	f104 0061 	add.w	r0, r4, #97	; 0x61
    8f9c:	f7fd fb30 	bl	6600 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    8fa0:	e00a      	b.n	8fb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    8fa2:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    8fa6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8faa:	2840      	cmp	r0, #64	; 0x40
    8fac:	d013      	beq.n	8fd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x182>
    8fae:	4651      	mov	r1, sl
    8fb0:	f104 0061 	add.w	r0, r4, #97	; 0x61
    8fb4:	f009 fae3 	bl	1257e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8fb8:	78a0      	ldrb	r0, [r4, #2]
    8fba:	f010 0f04 	tst.w	r0, #4
    8fbe:	d025      	beq.n	900c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    8fc0:	7ee0      	ldrb	r0, [r4, #27]
    8fc2:	f7fd fb2b 	bl	661c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8fc6:	ea5f 0900 	movs.w	r9, r0
    8fca:	d01f      	beq.n	900c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    8fcc:	2110      	movs	r1, #16
    8fce:	f7fd fe65 	bl	6c9c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8fd2:	b140      	cbz	r0, 8fe6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x192>
    8fd4:	e01a      	b.n	900c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    8fd6:	f7fd faf7 	bl	65c8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8fda:	463a      	mov	r2, r7
    8fdc:	f104 0161 	add.w	r1, r4, #97	; 0x61
    8fe0:	f009 fade 	bl	125a0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8fe4:	e7e8      	b.n	8fb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    8fe6:	463a      	mov	r2, r7
    8fe8:	f884 706e 	strb.w	r7, [r4, #110]	; 0x6e
    8fec:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    8ff0:	4648      	mov	r0, r9
    8ff2:	f009 fad5 	bl	125a0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8ff6:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    8ffa:	f8d8 0008 	ldr.w	r0, [r8, #8]
    8ffe:	f00a f85e 	bl	130be <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    9002:	2101      	movs	r1, #1
    9004:	f8d8 0008 	ldr.w	r0, [r8, #8]
    9008:	f00a f860 	bl	130cc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    900c:	f104 0148 	add.w	r1, r4, #72	; 0x48
    9010:	6c60      	ldr	r0, [r4, #68]	; 0x44
    9012:	f009 fa02 	bl	1241a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    9016:	4607      	mov	r7, r0
    9018:	f104 0150 	add.w	r1, r4, #80	; 0x50
    901c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    901e:	f009 f9ff 	bl	12420 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    9022:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    9026:	4338      	orrs	r0, r7
    9028:	f88d 1004 	strb.w	r1, [sp, #4]
    902c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9030:	2900      	cmp	r1, #0
    9032:	bf18      	it	ne
    9034:	2101      	movne	r1, #1
    9036:	4308      	orrs	r0, r1
    9038:	d018      	beq.n	906c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x218>
    903a:	78a0      	ldrb	r0, [r4, #2]
    903c:	f3c0 1000 	ubfx	r0, r0, #4, #1
    9040:	2800      	cmp	r0, #0
    9042:	bf04      	itt	eq
    9044:	f8b4 003d 	ldrheq.w	r0, [r4, #61]	; 0x3d
    9048:	f3c0 070b 	ubfxeq	r7, r0, #0, #12
    904c:	d10e      	bne.n	906c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x218>
    904e:	bf00      	nop
    9050:	f7fe fda4 	bl	7b9c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    9054:	f3c0 000b 	ubfx	r0, r0, #0, #12
    9058:	42b8      	cmp	r0, r7
    905a:	d0f9      	beq.n	9050 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1fc>
    905c:	f8b4 103d 	ldrh.w	r1, [r4, #61]	; 0x3d
    9060:	f360 010b 	bfi	r1, r0, #0, #12
    9064:	f8a4 103d 	strh.w	r1, [r4, #61]	; 0x3d
    9068:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
    906c:	f7fd fbfa 	bl	6864 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    9070:	f8d8 0008 	ldr.w	r0, [r8, #8]
    9074:	1cc0      	adds	r0, r0, #3
    9076:	f7fd fa93 	bl	65a0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    907a:	73a8      	strb	r0, [r5, #14]
    907c:	78a0      	ldrb	r0, [r4, #2]
    907e:	f010 0f01 	tst.w	r0, #1
    9082:	d02c      	beq.n	90de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    9084:	a906      	add	r1, sp, #24
    9086:	2001      	movs	r0, #1
    9088:	f009 f88a 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    908c:	b120      	cbz	r0, 9098 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    908e:	f640 118c 	movw	r1, #2444	; 0x98c
    9092:	202d      	movs	r0, #45	; 0x2d
    9094:	f7fb fb12 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9098:	20ff      	movs	r0, #255	; 0xff
    909a:	7628      	strb	r0, [r5, #24]
    909c:	a806      	add	r0, sp, #24
    909e:	6a26      	ldr	r6, [r4, #32]
    90a0:	f7fb fd76 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    90a4:	b9d8      	cbnz	r0, 90de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    90a6:	9c08      	ldr	r4, [sp, #32]
    90a8:	42b4      	cmp	r4, r6
    90aa:	d013      	beq.n	90d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    90ac:	7a72      	ldrb	r2, [r6, #9]
    90ae:	7a60      	ldrb	r0, [r4, #9]
    90b0:	f106 030a 	add.w	r3, r6, #10
    90b4:	f104 010a 	add.w	r1, r4, #10
    90b8:	f009 fa3a 	bl	12530 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    90bc:	b150      	cbz	r0, 90d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    90be:	78a0      	ldrb	r0, [r4, #2]
    90c0:	7628      	strb	r0, [r5, #24]
    90c2:	f8d4 0003 	ldr.w	r0, [r4, #3]
    90c6:	f8c5 0019 	str.w	r0, [r5, #25]
    90ca:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    90ce:	f8a5 001d 	strh.w	r0, [r5, #29]
    90d2:	e004      	b.n	90de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    90d4:	a806      	add	r0, sp, #24
    90d6:	f7fb fd5b 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    90da:	2800      	cmp	r0, #0
    90dc:	d0e3      	beq.n	90a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    90de:	b00a      	add	sp, #40	; 0x28
    90e0:	2000      	movs	r0, #0
    90e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    90e6:	0000      	.short	0x0000
    90e8:	200015c0 	.word	0x200015c0
    90ec:	0000a4c4 	.word	0x0000a4c4
    90f0:	20000160 	.word	0x20000160
    90f4:	8e89bed6 	.word	0x8e89bed6
    90f8:	0000a4ad 	.word	0x0000a4ad
    90fc:	000f4240 	.word	0x000f4240
    9100:	b570      	push	{r4, r5, r6, lr}
    9102:	b082      	sub	sp, #8
    9104:	4604      	mov	r4, r0
    9106:	f7ff fea5 	bl	8e54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    910a:	2800      	cmp	r0, #0
    910c:	bf1c      	itt	ne
    910e:	b002      	addne	sp, #8
    9110:	bd70      	popne	{r4, r5, r6, pc}
    9112:	7820      	ldrb	r0, [r4, #0]
    9114:	2103      	movs	r1, #3
    9116:	f009 f839 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    911a:	4d1a      	ldr	r5, [pc, #104]	; (9184 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    911c:	6168      	str	r0, [r5, #20]
    911e:	7828      	ldrb	r0, [r5, #0]
    9120:	2801      	cmp	r0, #1
    9122:	d02b      	beq.n	917c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x328>
    9124:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
    9128:	2600      	movs	r6, #0
    912a:	b150      	cbz	r0, 9142 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    912c:	4668      	mov	r0, sp
    912e:	f7fd fe15 	bl	6d5c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    9132:	b130      	cbz	r0, 9142 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    9134:	4669      	mov	r1, sp
    9136:	f104 002e 	add.w	r0, r4, #46	; 0x2e
    913a:	f7fd ff03 	bl	6f44 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    913e:	f884 607b 	strb.w	r6, [r4, #123]	; 0x7b
    9142:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
    9146:	68a9      	ldr	r1, [r5, #8]
    9148:	1840      	adds	r0, r0, r1
    914a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    914e:	1840      	adds	r0, r0, r1
    9150:	b282      	uxth	r2, r0
    9152:	f104 0161 	add.w	r1, r4, #97	; 0x61
    9156:	f104 002e 	add.w	r0, r4, #46	; 0x2e
    915a:	f7fd fe21 	bl	6da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    915e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    9162:	78a0      	ldrb	r0, [r4, #2]
    9164:	f04f 0100 	mov.w	r1, #0
    9168:	f3c0 1000 	ubfx	r0, r0, #4, #1
    916c:	2800      	cmp	r0, #0
    916e:	4620      	mov	r0, r4
    9170:	d002      	beq.n	9178 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x324>
    9172:	f7ff f89f 	bl	82b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x124>
    9176:	e001      	b.n	917c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x328>
    9178:	f7ff f81a 	bl	81b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
    917c:	b002      	add	sp, #8
    917e:	2000      	movs	r0, #0
    9180:	bd70      	pop	{r4, r5, r6, pc}
    9182:	0000      	.short	0x0000
    9184:	200015c0 	.word	0x200015c0
    9188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    918c:	4e51      	ldr	r6, [pc, #324]	; (92d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x480>)
    918e:	4c52      	ldr	r4, [pc, #328]	; (92d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x484>)
    9190:	6875      	ldr	r5, [r6, #4]
    9192:	7820      	ldrb	r0, [r4, #0]
    9194:	2700      	movs	r7, #0
    9196:	2800      	cmp	r0, #0
    9198:	bf08      	it	eq
    919a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    919e:	7820      	ldrb	r0, [r4, #0]
    91a0:	2802      	cmp	r0, #2
    91a2:	bf1c      	itt	ne
    91a4:	7820      	ldrbne	r0, [r4, #0]
    91a6:	2803      	cmpne	r0, #3
    91a8:	d111      	bne.n	91ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    91aa:	7b28      	ldrb	r0, [r5, #12]
    91ac:	b148      	cbz	r0, 91c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36e>
    91ae:	46a8      	mov	r8, r5
    91b0:	f105 003f 	add.w	r0, r5, #63	; 0x3f
    91b4:	f006 fd74 	bl	fca0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    91b8:	2800      	cmp	r0, #0
    91ba:	bf04      	itt	eq
    91bc:	207f      	moveq	r0, #127	; 0x7f
    91be:	f888 003f 	strbeq.w	r0, [r8, #63]	; 0x3f
    91c2:	7ba0      	ldrb	r0, [r4, #14]
    91c4:	b118      	cbz	r0, 91ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    91c6:	f005 fe2d 	bl	ee24 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    91ca:	f005 fc05 	bl	e9d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    91ce:	f7fb f815 	bl	41fc <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    91d2:	7830      	ldrb	r0, [r6, #0]
    91d4:	2800      	cmp	r0, #0
    91d6:	d078      	beq.n	92ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    91d8:	4628      	mov	r0, r5
    91da:	f00a fc91 	bl	13b00 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    91de:	2800      	cmp	r0, #0
    91e0:	d073      	beq.n	92ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    91e2:	6870      	ldr	r0, [r6, #4]
    91e4:	8841      	ldrh	r1, [r0, #2]
    91e6:	f3c1 02c0 	ubfx	r2, r1, #3, #1
    91ea:	b352      	cbz	r2, 9242 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ee>
    91ec:	2909      	cmp	r1, #9
    91ee:	d004      	beq.n	91fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a6>
    91f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    91f4:	2101      	movs	r1, #1
    91f6:	f7ff b85d 	b.w	82b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x124>
    91fa:	81a7      	strh	r7, [r4, #12]
    91fc:	4605      	mov	r5, r0
    91fe:	7067      	strb	r7, [r4, #1]
    9200:	f7fe fdc4 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9204:	6861      	ldr	r1, [r4, #4]
    9206:	4408      	add	r0, r1
    9208:	6060      	str	r0, [r4, #4]
    920a:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    920e:	1c40      	adds	r0, r0, #1
    9210:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
    9214:	f7fe fcc2 	bl	7b9c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    9218:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    921c:	fbb0 f2f1 	udiv	r2, r0, r1
    9220:	fb01 0012 	mls	r0, r1, r2, r0
    9224:	6861      	ldr	r1, [r4, #4]
    9226:	2200      	movs	r2, #0
    9228:	4408      	add	r0, r1
    922a:	6060      	str	r0, [r4, #4]
    922c:	f895 106e 	ldrb.w	r1, [r5, #110]	; 0x6e
    9230:	4628      	mov	r0, r5
    9232:	f000 f853 	bl	92dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    9236:	6870      	ldr	r0, [r6, #4]
    9238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    923c:	2101      	movs	r1, #1
    923e:	f7fe bfb7 	b.w	81b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
    9242:	7862      	ldrb	r2, [r4, #1]
    9244:	b11a      	cbz	r2, 924e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3fa>
    9246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    924a:	f000 be15 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    924e:	f3c1 1100 	ubfx	r1, r1, #4, #1
    9252:	b179      	cbz	r1, 9274 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    9254:	4604      	mov	r4, r0
    9256:	3028      	adds	r0, #40	; 0x28
    9258:	f00a fbf1 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    925c:	b128      	cbz	r0, 926a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    925e:	4620      	mov	r0, r4
    9260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9264:	2101      	movs	r1, #1
    9266:	f7ff b825 	b.w	82b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x124>
    926a:	4620      	mov	r0, r4
    926c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9270:	f000 be02 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    9274:	4605      	mov	r5, r0
    9276:	3028      	adds	r0, #40	; 0x28
    9278:	f00a fbe1 	bl	13a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    927c:	b128      	cbz	r0, 928a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    927e:	4628      	mov	r0, r5
    9280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9284:	2101      	movs	r1, #1
    9286:	f7fe bf93 	b.w	81b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
    928a:	8868      	ldrh	r0, [r5, #2]
    928c:	f3c0 1100 	ubfx	r1, r0, #4, #1
    9290:	b9d9      	cbnz	r1, 92ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    9292:	78a1      	ldrb	r1, [r4, #2]
    9294:	b1c9      	cbz	r1, 92ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    9296:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    929a:	2900      	cmp	r1, #0
    929c:	bf08      	it	eq
    929e:	f010 0f01 	tsteq.w	r0, #1
    92a2:	d10c      	bne.n	92be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x46a>
    92a4:	f010 0f02 	tst.w	r0, #2
    92a8:	bf08      	it	eq
    92aa:	f010 0f20 	tsteq.w	r0, #32
    92ae:	d106      	bne.n	92be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x46a>
    92b0:	6960      	ldr	r0, [r4, #20]
    92b2:	b150      	cbz	r0, 92ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    92b4:	f100 0038 	add.w	r0, r0, #56	; 0x38
    92b8:	f00c f8db 	bl	15472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
    92bc:	b128      	cbz	r0, 92ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    92be:	4628      	mov	r0, r5
    92c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    92c4:	2100      	movs	r1, #0
    92c6:	f7ff b8dd 	b.w	8484 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f4>
    92ca:	4628      	mov	r0, r5
    92cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    92d0:	f000 bdd2 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    92d4:	20000160 	.word	0x20000160
    92d8:	200015c0 	.word	0x200015c0
    92dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92e0:	4604      	mov	r4, r0
    92e2:	8840      	ldrh	r0, [r0, #2]
    92e4:	b087      	sub	sp, #28
    92e6:	4690      	mov	r8, r2
    92e8:	468a      	mov	sl, r1
    92ea:	f04f 0b00 	mov.w	fp, #0
    92ee:	f010 0f03 	tst.w	r0, #3
    92f2:	d00f      	beq.n	9314 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c0>
    92f4:	f010 0f01 	tst.w	r0, #1
    92f8:	f000 0102 	and.w	r1, r0, #2
    92fc:	d005      	beq.n	930a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
    92fe:	2900      	cmp	r1, #0
    9300:	bf08      	it	eq
    9302:	f04f 0b01 	moveq.w	fp, #1
    9306:	d005      	beq.n	9314 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c0>
    9308:	e00f      	b.n	932a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d6>
    930a:	2900      	cmp	r1, #0
    930c:	bf18      	it	ne
    930e:	f04f 0b02 	movne.w	fp, #2
    9312:	d00a      	beq.n	932a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d6>
    9314:	4606      	mov	r6, r0
    9316:	f04f 0900 	mov.w	r9, #0
    931a:	f010 0f01 	tst.w	r0, #1
    931e:	4ffe      	ldr	r7, [pc, #1016]	; (9718 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c4>)
    9320:	f000 0102 	and.w	r1, r0, #2
    9324:	d015      	beq.n	9352 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fe>
    9326:	b129      	cbz	r1, 9334 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e0>
    9328:	e017      	b.n	935a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    932a:	f240 6177 	movw	r1, #1655	; 0x677
    932e:	202d      	movs	r0, #45	; 0x2d
    9330:	f7fb f9c4 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9334:	f016 0f04 	tst.w	r6, #4
    9338:	d00f      	beq.n	935a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    933a:	f049 0008 	orr.w	r0, r9, #8
    933e:	f1b8 0f00 	cmp.w	r8, #0
    9342:	bf0e      	itee	eq
    9344:	f040 0510 	orreq.w	r5, r0, #16
    9348:	f040 0001 	orrne.w	r0, r0, #1
    934c:	f040 0502 	orrne.w	r5, r0, #2
    9350:	e0d0      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    9352:	b111      	cbz	r1, 935a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    9354:	f016 0f04 	tst.w	r6, #4
    9358:	d00f      	beq.n	937a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    935a:	49ef      	ldr	r1, [pc, #956]	; (9718 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c4>)
    935c:	f016 0f07 	tst.w	r6, #7
    9360:	6949      	ldr	r1, [r1, #20]
    9362:	d011      	beq.n	9388 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x534>
    9364:	f016 0f01 	tst.w	r6, #1
    9368:	f006 0202 	and.w	r2, r6, #2
    936c:	d05f      	beq.n	942e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5da>
    936e:	2a00      	cmp	r2, #0
    9370:	bf08      	it	eq
    9372:	f016 0f04 	tsteq.w	r6, #4
    9376:	d047      	beq.n	9408 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b4>
    9378:	e067      	b.n	944a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f6>
    937a:	f1b8 0f00 	cmp.w	r8, #0
    937e:	bf18      	it	ne
    9380:	f049 0509 	orrne.w	r5, r9, #9
    9384:	d14a      	bne.n	941c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c8>
    9386:	e05d      	b.n	9444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
    9388:	f1b8 0f00 	cmp.w	r8, #0
    938c:	d00b      	beq.n	93a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x552>
    938e:	f049 0508 	orr.w	r5, r9, #8
    9392:	b369      	cbz	r1, 93f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x59c>
    9394:	f101 0038 	add.w	r0, r1, #56	; 0x38
    9398:	f00c f86b 	bl	15472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
    939c:	2800      	cmp	r0, #0
    939e:	bf18      	it	ne
    93a0:	2001      	movne	r0, #1
    93a2:	d025      	beq.n	93f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x59c>
    93a4:	e025      	b.n	93f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x59e>
    93a6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    93aa:	2a00      	cmp	r2, #0
    93ac:	bf08      	it	eq
    93ae:	f010 0f01 	tsteq.w	r0, #1
    93b2:	d10b      	bne.n	93cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    93b4:	f010 0f02 	tst.w	r0, #2
    93b8:	bf08      	it	eq
    93ba:	f016 0f20 	tsteq.w	r6, #32
    93be:	d105      	bne.n	93cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    93c0:	b151      	cbz	r1, 93d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>
    93c2:	f101 0038 	add.w	r0, r1, #56	; 0x38
    93c6:	f00c f854 	bl	15472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
    93ca:	b128      	cbz	r0, 93d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>
    93cc:	f049 0518 	orr.w	r5, r9, #24
    93d0:	f016 0f20 	tst.w	r6, #32
    93d4:	d003      	beq.n	93de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58a>
    93d6:	e08d      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    93d8:	f049 0501 	orr.w	r5, r9, #1
    93dc:	e08a      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    93de:	7920      	ldrb	r0, [r4, #4]
    93e0:	f010 000c 	ands.w	r0, r0, #12
    93e4:	bf18      	it	ne
    93e6:	2001      	movne	r0, #1
    93e8:	43c0      	mvns	r0, r0
    93ea:	f360 0500 	bfi	r5, r0, #0, #1
    93ee:	e081      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    93f0:	2000      	movs	r0, #0
    93f2:	f360 1545 	bfi	r5, r0, #5, #1
    93f6:	f016 0f20 	tst.w	r6, #32
    93fa:	d17b      	bne.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    93fc:	7920      	ldrb	r0, [r4, #4]
    93fe:	f010 000c 	ands.w	r0, r0, #12
    9402:	d075      	beq.n	94f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    9404:	2001      	movs	r0, #1
    9406:	e073      	b.n	94f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    9408:	f049 0008 	orr.w	r0, r9, #8
    940c:	f1b8 0f00 	cmp.w	r8, #0
    9410:	d005      	beq.n	941e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    9412:	7921      	ldrb	r1, [r4, #4]
    9414:	2902      	cmp	r1, #2
    9416:	d007      	beq.n	9428 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>
    9418:	f040 0501 	orr.w	r5, r0, #1
    941c:	e06a      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    941e:	7921      	ldrb	r1, [r4, #4]
    9420:	f040 0010 	orr.w	r0, r0, #16
    9424:	2902      	cmp	r1, #2
    9426:	d0f7      	beq.n	9418 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    9428:	f020 0501 	bic.w	r5, r0, #1
    942c:	e062      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    942e:	2a00      	cmp	r2, #0
    9430:	bf18      	it	ne
    9432:	f016 0f04 	tstne.w	r6, #4
    9436:	d008      	beq.n	944a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f6>
    9438:	f1b8 0f00 	cmp.w	r8, #0
    943c:	bf18      	it	ne
    943e:	f049 050b 	orrne.w	r5, r9, #11
    9442:	d157      	bne.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    9444:	f049 0518 	orr.w	r5, r9, #24
    9448:	e054      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    944a:	f016 0f03 	tst.w	r6, #3
    944e:	d158      	bne.n	9502 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ae>
    9450:	f016 0f04 	tst.w	r6, #4
    9454:	d055      	beq.n	9502 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ae>
    9456:	f1b8 0f00 	cmp.w	r8, #0
    945a:	d00b      	beq.n	9474 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    945c:	f049 0508 	orr.w	r5, r9, #8
    9460:	b3a9      	cbz	r1, 94ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x67a>
    9462:	f101 0038 	add.w	r0, r1, #56	; 0x38
    9466:	f00c f804 	bl	15472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
    946a:	2800      	cmp	r0, #0
    946c:	bf18      	it	ne
    946e:	2001      	movne	r0, #1
    9470:	d02e      	beq.n	94d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x67c>
    9472:	e02e      	b.n	94d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x67e>
    9474:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    9478:	2a00      	cmp	r2, #0
    947a:	bf08      	it	eq
    947c:	f010 0f01 	tsteq.w	r0, #1
    9480:	d10b      	bne.n	949a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x646>
    9482:	f010 0f02 	tst.w	r0, #2
    9486:	bf08      	it	eq
    9488:	f016 0f20 	tsteq.w	r6, #32
    948c:	d105      	bne.n	949a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x646>
    948e:	b191      	cbz	r1, 94b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x662>
    9490:	f101 0038 	add.w	r0, r1, #56	; 0x38
    9494:	f00b ffed 	bl	15472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
    9498:	b168      	cbz	r0, 94b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x662>
    949a:	f049 0518 	orr.w	r5, r9, #24
    949e:	f016 0f20 	tst.w	r6, #32
    94a2:	d00b      	beq.n	94bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x668>
    94a4:	7920      	ldrb	r0, [r4, #4]
    94a6:	f010 000c 	ands.w	r0, r0, #12
    94aa:	bf18      	it	ne
    94ac:	2001      	movne	r0, #1
    94ae:	43c0      	mvns	r0, r0
    94b0:	f360 0541 	bfi	r5, r0, #1, #1
    94b4:	e01e      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    94b6:	f049 0503 	orr.w	r5, r9, #3
    94ba:	e01b      	b.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    94bc:	7920      	ldrb	r0, [r4, #4]
    94be:	f010 000c 	ands.w	r0, r0, #12
    94c2:	bf18      	it	ne
    94c4:	2001      	movne	r0, #1
    94c6:	43c0      	mvns	r0, r0
    94c8:	f360 0500 	bfi	r5, r0, #0, #1
    94cc:	e7ea      	b.n	94a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>
    94ce:	e7ff      	b.n	94d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x67c>
    94d0:	2000      	movs	r0, #0
    94d2:	f360 1545 	bfi	r5, r0, #5, #1
    94d6:	7920      	ldrb	r0, [r4, #4]
    94d8:	f010 010c 	ands.w	r1, r0, #12
    94dc:	bf18      	it	ne
    94de:	2101      	movne	r1, #1
    94e0:	f361 0541 	bfi	r5, r1, #1, #1
    94e4:	f016 0f20 	tst.w	r6, #32
    94e8:	d104      	bne.n	94f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    94ea:	f010 000c 	ands.w	r0, r0, #12
    94ee:	d189      	bne.n	9404 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b0>
    94f0:	f360 0500 	bfi	r5, r0, #0, #1
    94f4:	f016 0f40 	tst.w	r6, #64	; 0x40
    94f8:	d029      	beq.n	954e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6fa>
    94fa:	f1b8 0f00 	cmp.w	r8, #0
    94fe:	d005      	beq.n	950c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    9500:	e023      	b.n	954a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f6>
    9502:	f240 711a 	movw	r1, #1818	; 0x71a
    9506:	202d      	movs	r0, #45	; 0x2d
    9508:	f7fb f8d8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    950c:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    9510:	2800      	cmp	r0, #0
    9512:	bf04      	itt	eq
    9514:	8860      	ldrheq	r0, [r4, #2]
    9516:	f010 0f01 	tsteq.w	r0, #1
    951a:	d112      	bne.n	9542 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ee>
    951c:	f010 0f02 	tst.w	r0, #2
    9520:	bf08      	it	eq
    9522:	f010 0f20 	tsteq.w	r0, #32
    9526:	d10c      	bne.n	9542 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ee>
    9528:	6978      	ldr	r0, [r7, #20]
    952a:	b120      	cbz	r0, 9536 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e2>
    952c:	f100 0038 	add.w	r0, r0, #56	; 0x38
    9530:	f00b ff9f 	bl	15472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
    9534:	b928      	cbnz	r0, 9542 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ee>
    9536:	f016 0f01 	tst.w	r6, #1
    953a:	bf08      	it	eq
    953c:	f016 0f02 	tsteq.w	r6, #2
    9540:	d003      	beq.n	954a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f6>
    9542:	7920      	ldrb	r0, [r4, #4]
    9544:	f010 0f0c 	tst.w	r0, #12
    9548:	d101      	bne.n	954e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6fa>
    954a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    954e:	4e73      	ldr	r6, [pc, #460]	; (971c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c8>)
    9550:	68b0      	ldr	r0, [r6, #8]
    9552:	f8a0 9000 	strh.w	r9, [r0]
    9556:	7801      	ldrb	r1, [r0, #0]
    9558:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    955c:	7001      	strb	r1, [r0, #0]
    955e:	f04f 0107 	mov.w	r1, #7
    9562:	f009 fd8a 	bl	1307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    9566:	4659      	mov	r1, fp
    9568:	68b0      	ldr	r0, [r6, #8]
    956a:	f009 fd12 	bl	12f92 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    956e:	2200      	movs	r2, #0
    9570:	4629      	mov	r1, r5
    9572:	68b0      	ldr	r0, [r6, #8]
    9574:	f009 fd49 	bl	1300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    9578:	f015 0f01 	tst.w	r5, #1
    957c:	d00d      	beq.n	959a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x746>
    957e:	f04f 0306 	mov.w	r3, #6
    9582:	f04f 0200 	mov.w	r2, #0
    9586:	f104 0161 	add.w	r1, r4, #97	; 0x61
    958a:	68b0      	ldr	r0, [r6, #8]
    958c:	f009 fd1a 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    9590:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    9594:	68b0      	ldr	r0, [r6, #8]
    9596:	f009 fda9 	bl	130ec <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    959a:	f015 0f02 	tst.w	r5, #2
    959e:	d019      	beq.n	95d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x780>
    95a0:	68b0      	ldr	r0, [r6, #8]
    95a2:	f1ba 0f00 	cmp.w	sl, #0
    95a6:	f04f 0306 	mov.w	r3, #6
    95aa:	f04f 0201 	mov.w	r2, #1
    95ae:	d008      	beq.n	95c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76e>
    95b0:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    95b4:	f009 fd06 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    95b8:	2101      	movs	r1, #1
    95ba:	68b0      	ldr	r0, [r6, #8]
    95bc:	f009 fd86 	bl	130cc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    95c0:	e008      	b.n	95d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x780>
    95c2:	f104 0168 	add.w	r1, r4, #104	; 0x68
    95c6:	f009 fcfd 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    95ca:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    95ce:	68b0      	ldr	r0, [r6, #8]
    95d0:	f009 fd7c 	bl	130cc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    95d4:	f015 0f04 	tst.w	r5, #4
    95d8:	d004      	beq.n	95e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x790>
    95da:	f640 014a 	movw	r1, #2122	; 0x84a
    95de:	202d      	movs	r0, #45	; 0x2d
    95e0:	f7fb f86c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95e4:	f015 0f08 	tst.w	r5, #8
    95e8:	d018      	beq.n	961c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7c8>
    95ea:	f8cd 9014 	str.w	r9, [sp, #20]
    95ee:	f8b4 003d 	ldrh.w	r0, [r4, #61]	; 0x3d
    95f2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    95f6:	2302      	movs	r3, #2
    95f8:	f360 010b 	bfi	r1, r0, #0, #12
    95fc:	f8ad 1014 	strh.w	r1, [sp, #20]
    9600:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    9604:	2203      	movs	r2, #3
    9606:	0901      	lsrs	r1, r0, #4
    9608:	f89d 0015 	ldrb.w	r0, [sp, #21]
    960c:	f361 1007 	bfi	r0, r1, #4, #4
    9610:	f88d 0015 	strb.w	r0, [sp, #21]
    9614:	a905      	add	r1, sp, #20
    9616:	68b0      	ldr	r0, [r6, #8]
    9618:	f009 fcd4 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    961c:	f015 0f20 	tst.w	r5, #32
    9620:	d078      	beq.n	9714 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c0>
    9622:	e9d4 014e 	ldrd	r0, r1, [r4, #312]	; 0x138
    9626:	697b      	ldr	r3, [r7, #20]
    9628:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 9720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8cc>
    962c:	799a      	ldrb	r2, [r3, #6]
    962e:	f83c 2012 	ldrh.w	r2, [ip, r2, lsl #1]
    9632:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9636:	f202 32e7 	addw	r2, r2, #999	; 0x3e7
    963a:	fbb2 f2fc 	udiv	r2, r2, ip
    963e:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
    9642:	ea4f 7ce2 	mov.w	ip, r2, asr #31
    9646:	eb12 020a 	adds.w	r2, r2, sl
    964a:	eb4c 0a0b 	adc.w	sl, ip, fp
    964e:	f8d7 c010 	ldr.w	ip, [r7, #16]
    9652:	eb1c 0000 	adds.w	r0, ip, r0
    9656:	eb49 0101 	adc.w	r1, r9, r1
    965a:	f8d4 912c 	ldr.w	r9, [r4, #300]	; 0x12c
    965e:	1a10      	subs	r0, r2, r0
    9660:	eba9 0c0c 	sub.w	ip, r9, ip
    9664:	eb6a 0101 	sbc.w	r1, sl, r1
    9668:	ea4f 79ec 	mov.w	r9, ip, asr #31
    966c:	2201      	movs	r2, #1
    966e:	ebbc 0c00 	subs.w	ip, ip, r0
    9672:	eb79 0c01 	sbcs.w	ip, r9, r1
    9676:	bfa8      	it	ge
    9678:	2200      	movge	r2, #0
    967a:	f89d c001 	ldrb.w	ip, [sp, #1]
    967e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 9724 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8d0>
    9682:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
    9686:	f04f 0900 	mov.w	r9, #0
    968a:	ebba 0a00 	subs.w	sl, sl, r0
    968e:	f88d c001 	strb.w	ip, [sp, #1]
    9692:	eb79 0901 	sbcs.w	r9, r9, r1
    9696:	bfb8      	it	lt
    9698:	2200      	movlt	r2, #0
    969a:	f5b0 3970 	subs.w	r9, r0, #245760	; 0x3c000
    969e:	f171 0100 	sbcs.w	r1, r1, #0
    96a2:	db1b      	blt.n	96dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x888>
    96a4:	2a00      	cmp	r2, #0
    96a6:	bf1c      	itt	ne
    96a8:	f04c 0120 	orrne.w	r1, ip, #32
    96ac:	f88d 1001 	strbne.w	r1, [sp, #1]
    96b0:	d014      	beq.n	96dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x888>
    96b2:	b2c9      	uxtb	r1, r1
    96b4:	f3c1 1140 	ubfx	r1, r1, #5, #1
    96b8:	2900      	cmp	r1, #0
    96ba:	bf08      	it	eq
    96bc:	211e      	moveq	r1, #30
    96be:	d004      	beq.n	96ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x876>
    96c0:	2900      	cmp	r1, #0
    96c2:	bf18      	it	ne
    96c4:	f44f 7196 	movne.w	r1, #300	; 0x12c
    96c8:	d05d      	beq.n	9786 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x932>
    96ca:	fbb0 f0f1 	udiv	r0, r0, r1
    96ce:	f8bd 1000 	ldrh.w	r1, [sp]
    96d2:	f360 010c 	bfi	r1, r0, #0, #13
    96d6:	f8ad 1000 	strh.w	r1, [sp]
    96da:	e00b      	b.n	96f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a0>
    96dc:	f02c 0120 	bic.w	r1, ip, #32
    96e0:	f88d 1001 	strb.w	r1, [sp, #1]
    96e4:	2a00      	cmp	r2, #0
    96e6:	d1e4      	bne.n	96b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x85e>
    96e8:	f8bd 0000 	ldrh.w	r0, [sp]
    96ec:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
    96f0:	f8ad 0000 	strh.w	r0, [sp]
    96f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
    96f6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    96fa:	fbb0 f0f1 	udiv	r0, r0, r1
    96fe:	f8ad 0002 	strh.w	r0, [sp, #2]
    9702:	7d59      	ldrb	r1, [r3, #21]
    9704:	7d1a      	ldrb	r2, [r3, #20]
    9706:	f8d3 3011 	ldr.w	r3, [r3, #17]
    970a:	f362 631f 	bfi	r3, r2, #24, #8
    970e:	f8dd 2001 	ldr.w	r2, [sp, #1]
    9712:	e009      	b.n	9728 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8d4>
    9714:	e033      	b.n	977e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92a>
    9716:	0000      	.short	0x0000
    9718:	200015c0 	.word	0x200015c0
    971c:	20000160 	.word	0x20000160
    9720:	0000a4b0 	.word	0x0000a4b0
    9724:	00257fff 	.word	0x00257fff
    9728:	f8dd 0005 	ldr.w	r0, [sp, #5]
    972c:	f363 621f 	bfi	r2, r3, #24, #8
    9730:	f361 601c 	bfi	r0, r1, #24, #5
    9734:	0a19      	lsrs	r1, r3, #8
    9736:	f361 0017 	bfi	r0, r1, #0, #24
    973a:	f8cd 2001 	str.w	r2, [sp, #1]
    973e:	f8cd 0005 	str.w	r0, [sp, #5]
    9742:	f005 f8e9 	bl	e918 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    9746:	4601      	mov	r1, r0
    9748:	f89d 0008 	ldrb.w	r0, [sp, #8]
    974c:	f361 1047 	bfi	r0, r1, #5, #3
    9750:	f88d 0008 	strb.w	r0, [sp, #8]
    9754:	f89d 0001 	ldrb.w	r0, [sp, #1]
    9758:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    975c:	f88d 0001 	strb.w	r0, [sp, #1]
    9760:	6978      	ldr	r0, [r7, #20]
    9762:	6801      	ldr	r1, [r0, #0]
    9764:	f8cd 1009 	str.w	r1, [sp, #9]
    9768:	f8d0 1007 	ldr.w	r1, [r0, #7]
    976c:	9a03      	ldr	r2, [sp, #12]
    976e:	f361 221f 	bfi	r2, r1, #8, #24
    9772:	9203      	str	r2, [sp, #12]
    9774:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    9778:	1c40      	adds	r0, r0, #1
    977a:	f8ad 0010 	strh.w	r0, [sp, #16]
    977e:	f1b8 0f01 	cmp.w	r8, #1
    9782:	d161      	bne.n	9848 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9f4>
    9784:	e004      	b.n	9790 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x93c>
    9786:	f240 3122 	movw	r1, #802	; 0x322
    978a:	2006      	movs	r0, #6
    978c:	f7fa ff96 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9790:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    9794:	b3f0      	cbz	r0, 9814 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c0>
    9796:	78a0      	ldrb	r0, [r4, #2]
    9798:	f3c0 0040 	ubfx	r0, r0, #1, #1
    979c:	bbd0      	cbnz	r0, 9814 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c0>
    979e:	68b0      	ldr	r0, [r6, #8]
    97a0:	f009 fb1d 	bl	12dde <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>
    97a4:	1c40      	adds	r0, r0, #1
    97a6:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    97aa:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    97ae:	89b8      	ldrh	r0, [r7, #12]
    97b0:	f1ca 01ff 	rsb	r1, sl, #255	; 0xff
    97b4:	1a10      	subs	r0, r2, r0
    97b6:	4288      	cmp	r0, r1
    97b8:	bfa8      	it	ge
    97ba:	4608      	movge	r0, r1
    97bc:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    97c0:	454a      	cmp	r2, r9
    97c2:	d939      	bls.n	9838 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e4>
    97c4:	78a0      	ldrb	r0, [r4, #2]
    97c6:	f010 0f01 	tst.w	r0, #1
    97ca:	d135      	bne.n	9838 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e4>
    97cc:	f045 0510 	orr.w	r5, r5, #16
    97d0:	2200      	movs	r2, #0
    97d2:	4629      	mov	r1, r5
    97d4:	68b0      	ldr	r0, [r6, #8]
    97d6:	f009 fc18 	bl	1300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    97da:	f1a9 0103 	sub.w	r1, r9, #3
    97de:	f001 09ff 	and.w	r9, r1, #255	; 0xff
    97e2:	f10a 0003 	add.w	r0, sl, #3
    97e6:	4448      	add	r0, r9
    97e8:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    97ec:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
    97f0:	68b9      	ldr	r1, [r7, #8]
    97f2:	1840      	adds	r0, r0, r1
    97f4:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    97f8:	1840      	adds	r0, r0, r1
    97fa:	b282      	uxth	r2, r0
    97fc:	f104 0161 	add.w	r1, r4, #97	; 0x61
    9800:	f104 002e 	add.w	r0, r4, #46	; 0x2e
    9804:	f7fd facc 	bl	6da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    9808:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    980c:	7961      	ldrb	r1, [r4, #5]
    980e:	4653      	mov	r3, sl
    9810:	2201      	movs	r2, #1
    9812:	e000      	b.n	9816 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c2>
    9814:	e018      	b.n	9848 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9f4>
    9816:	4620      	mov	r0, r4
    9818:	f000 f8d2 	bl	99c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6c>
    981c:	9005      	str	r0, [sp, #20]
    981e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    9822:	f89d 1016 	ldrb.w	r1, [sp, #22]
    9826:	2303      	movs	r3, #3
    9828:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    982c:	9006      	str	r0, [sp, #24]
    982e:	2204      	movs	r2, #4
    9830:	a906      	add	r1, sp, #24
    9832:	68b0      	ldr	r0, [r6, #8]
    9834:	f009 fbc6 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    9838:	464a      	mov	r2, r9
    983a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    983c:	68b0      	ldr	r0, [r6, #8]
    983e:	f009 fb91 	bl	12f64 <sym_PVUEVCCU6GBXS4SSN6KRMQWGFE4INJ34NEDDTZA>
    9842:	89b8      	ldrh	r0, [r7, #12]
    9844:	4448      	add	r0, r9
    9846:	81b8      	strh	r0, [r7, #12]
    9848:	f015 0f20 	tst.w	r5, #32
    984c:	d005      	beq.n	985a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa06>
    984e:	2312      	movs	r3, #18
    9850:	2205      	movs	r2, #5
    9852:	4669      	mov	r1, sp
    9854:	68b0      	ldr	r0, [r6, #8]
    9856:	f009 fbb5 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    985a:	f015 0f40 	tst.w	r5, #64	; 0x40
    985e:	d014      	beq.n	988a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa36>
    9860:	f1b8 0f00 	cmp.w	r8, #0
    9864:	bf1c      	itt	ne
    9866:	7965      	ldrbne	r5, [r4, #5]
    9868:	f894 103c 	ldrbne.w	r1, [r4, #60]	; 0x3c
    986c:	d018      	beq.n	98a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa4c>
    986e:	bf00      	nop
    9870:	f994 2010 	ldrsb.w	r2, [r4, #16]
    9874:	4628      	mov	r0, r5
    9876:	f00b fe0a 	bl	1548e <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>
    987a:	f88d 0014 	strb.w	r0, [sp, #20]
    987e:	2301      	movs	r3, #1
    9880:	2206      	movs	r2, #6
    9882:	a905      	add	r1, sp, #20
    9884:	68b0      	ldr	r0, [r6, #8]
    9886:	f009 fb9d 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    988a:	2000      	movs	r0, #0
    988c:	2800      	cmp	r0, #0
    988e:	bf04      	itt	eq
    9890:	b007      	addeq	sp, #28
    9892:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9896:	f640 019d 	movw	r1, #2205	; 0x89d
    989a:	202d      	movs	r0, #45	; 0x2d
    989c:	f7fa ff0e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98a0:	7925      	ldrb	r5, [r4, #4]
    98a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    98a6:	f00a f854 	bl	13952 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY>
    98aa:	4601      	mov	r1, r0
    98ac:	e7e0      	b.n	9870 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa1c>
    98ae:	0000      	movs	r0, r0
    98b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    98b4:	4690      	mov	r8, r2
    98b6:	460d      	mov	r5, r1
    98b8:	4604      	mov	r4, r0
    98ba:	2903      	cmp	r1, #3
    98bc:	bf1b      	ittet	ne
    98be:	f894 0078 	ldrbne.w	r0, [r4, #120]	; 0x78
    98c2:	2800      	cmpne	r0, #0
    98c4:	f04f 0900 	moveq.w	r9, #0
    98c8:	f04f 0901 	movne.w	r9, #1
    98cc:	f005 fade 	bl	ee8c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    98d0:	4606      	mov	r6, r0
    98d2:	2d03      	cmp	r5, #3
    98d4:	d008      	beq.n	98e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa94>
    98d6:	2701      	movs	r7, #1
    98d8:	2d05      	cmp	r5, #5
    98da:	bf02      	ittt	eq
    98dc:	78a0      	ldrbeq	r0, [r4, #2]
    98de:	f010 0001 	andseq.w	r0, r0, #1
    98e2:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98e6:	e007      	b.n	98f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa4>
    98e8:	78a0      	ldrb	r0, [r4, #2]
    98ea:	2702      	movs	r7, #2
    98ec:	f3c0 0040 	ubfx	r0, r0, #1, #1
    98f0:	2800      	cmp	r0, #0
    98f2:	bf08      	it	eq
    98f4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98f8:	f1b9 0f00 	cmp.w	r9, #0
    98fc:	d159      	bne.n	99b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb5e>
    98fe:	482e      	ldr	r0, [pc, #184]	; (99b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb64>)
    9900:	7b80      	ldrb	r0, [r0, #14]
    9902:	b140      	cbz	r0, 9916 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac2>
    9904:	f008 fe86 	bl	12614 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    9908:	f888 0000 	strb.w	r0, [r8]
    990c:	28ff      	cmp	r0, #255	; 0xff
    990e:	d002      	beq.n	9916 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac2>
    9910:	f7fc fec4 	bl	669c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    9914:	4306      	orrs	r6, r0
    9916:	4d29      	ldr	r5, [pc, #164]	; (99bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb68>)
    9918:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
    991c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    9920:	68a9      	ldr	r1, [r5, #8]
    9922:	f811 0b03 	ldrb.w	r0, [r1], #3
    9926:	f3c0 1080 	ubfx	r0, r0, #6, #1
    992a:	f008 fe01 	bl	12530 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    992e:	f898 1000 	ldrb.w	r1, [r8]
    9932:	29ff      	cmp	r1, #255	; 0xff
    9934:	d004      	beq.n	9940 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaec>
    9936:	b9b8      	cbnz	r0, 9968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb14>
    9938:	7ee0      	ldrb	r0, [r4, #27]
    993a:	4288      	cmp	r0, r1
    993c:	d116      	bne.n	996c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb18>
    993e:	e013      	b.n	9968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb14>
    9940:	b1a0      	cbz	r0, 996c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb18>
    9942:	68a9      	ldr	r1, [r5, #8]
    9944:	f811 0b03 	ldrb.w	r0, [r1], #3
    9948:	f3c0 1080 	ubfx	r0, r0, #6, #1
    994c:	f7fc feb8 	bl	66c0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    9950:	4680      	mov	r8, r0
    9952:	f7fc fed9 	bl	6708 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    9956:	b138      	cbz	r0, 9968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb14>
    9958:	4640      	mov	r0, r8
    995a:	f7fc fe5f 	bl	661c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    995e:	b118      	cbz	r0, 9968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb14>
    9960:	2110      	movs	r1, #16
    9962:	f7fd f99b 	bl	6c9c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    9966:	b108      	cbz	r0, 996c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb18>
    9968:	2001      	movs	r0, #1
    996a:	e000      	b.n	996e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb1a>
    996c:	2000      	movs	r0, #0
    996e:	78a1      	ldrb	r1, [r4, #2]
    9970:	f011 0f04 	tst.w	r1, #4
    9974:	d001      	beq.n	997a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb26>
    9976:	b1e0      	cbz	r0, 99b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb5e>
    9978:	e018      	b.n	99ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb58>
    997a:	b9be      	cbnz	r6, 99ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb58>
    997c:	7c60      	ldrb	r0, [r4, #17]
    997e:	2800      	cmp	r0, #0
    9980:	bf18      	it	ne
    9982:	42b8      	cmpne	r0, r7
    9984:	d115      	bne.n	99b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb5e>
    9986:	68a9      	ldr	r1, [r5, #8]
    9988:	f811 0b03 	ldrb.w	r0, [r1], #3
    998c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9990:	f7fc fe96 	bl	66c0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    9994:	4604      	mov	r4, r0
    9996:	f7fc feb7 	bl	6708 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    999a:	b138      	cbz	r0, 99ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb58>
    999c:	4620      	mov	r0, r4
    999e:	f7fc fe3d 	bl	661c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    99a2:	b118      	cbz	r0, 99ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb58>
    99a4:	2110      	movs	r1, #16
    99a6:	f7fd f979 	bl	6c9c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    99aa:	b110      	cbz	r0, 99b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb5e>
    99ac:	2001      	movs	r0, #1
    99ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99b2:	2000      	movs	r0, #0
    99b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99b8:	200015c0 	.word	0x200015c0
    99bc:	20000160 	.word	0x20000160
    99c0:	b508      	push	{r3, lr}
    99c2:	f04f 0c00 	mov.w	ip, #0
    99c6:	f8cd c000 	str.w	ip, [sp]
    99ca:	2908      	cmp	r1, #8
    99cc:	bf04      	itt	eq
    99ce:	f44f 71c8 	moveq.w	r1, #400	; 0x190
    99d2:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    99d6:	d010      	beq.n	99fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba6>
    99d8:	2904      	cmp	r1, #4
    99da:	bf04      	itt	eq
    99dc:	f44f 71bf 	moveq.w	r1, #382	; 0x17e
    99e0:	f04f 0c10 	moveq.w	ip, #16
    99e4:	d009      	beq.n	99fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba6>
    99e6:	2902      	cmp	r1, #2
    99e8:	bf07      	ittee	eq
    99ea:	f10c 0118 	addeq.w	r1, ip, #24
    99ee:	f04f 0c04 	moveq.w	ip, #4
    99f2:	f10c 0128 	addne.w	r1, ip, #40	; 0x28
    99f6:	f04f 0c08 	movne.w	ip, #8
    99fa:	1d5b      	adds	r3, r3, #5
    99fc:	fb13 130c 	smlabb	r3, r3, ip, r1
    9a00:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
    9a04:	f89d 1000 	ldrb.w	r1, [sp]
    9a08:	f36c 0105 	bfi	r1, ip, #0, #6
    9a0c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9a10:	f88d 1000 	strb.w	r1, [sp]
    9a14:	7940      	ldrb	r0, [r0, #5]
    9a16:	2801      	cmp	r0, #1
    9a18:	d00b      	beq.n	9a32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbde>
    9a1a:	2802      	cmp	r0, #2
    9a1c:	d010      	beq.n	9a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbec>
    9a1e:	2804      	cmp	r0, #4
    9a20:	bf18      	it	ne
    9a22:	2808      	cmpne	r0, #8
    9a24:	d012      	beq.n	9a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbf8>
    9a26:	f240 718a 	movw	r1, #1930	; 0x78a
    9a2a:	f04f 002d 	mov.w	r0, #45	; 0x2d
    9a2e:	f7fa fe45 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a32:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9a36:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
    9a3a:	f88d 0002 	strb.w	r0, [sp, #2]
    9a3e:	e00c      	b.n	9a5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc06>
    9a40:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9a44:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
    9a48:	3020      	adds	r0, #32
    9a4a:	e004      	b.n	9a56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc02>
    9a4c:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9a50:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
    9a54:	3040      	adds	r0, #64	; 0x40
    9a56:	f88d 0002 	strb.w	r0, [sp, #2]
    9a5a:	20ca      	movs	r0, #202	; 0xca
    9a5c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    9a60:	fb03 0002 	mla	r0, r3, r2, r0
    9a64:	4a0e      	ldr	r2, [pc, #56]	; (9aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4c>)
    9a66:	4290      	cmp	r0, r2
    9a68:	d304      	bcc.n	9a74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc20>
    9a6a:	f240 719e 	movw	r1, #1950	; 0x79e
    9a6e:	202d      	movs	r0, #45	; 0x2d
    9a70:	f7fa fe24 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    9a78:	f88d 1000 	strb.w	r1, [sp]
    9a7c:	4909      	ldr	r1, [pc, #36]	; (9aa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc50>)
    9a7e:	fba1 1000 	umull	r1, r0, r1, r0
    9a82:	f8bd 1001 	ldrh.w	r1, [sp, #1]
    9a86:	0900      	lsrs	r0, r0, #4
    9a88:	f360 010c 	bfi	r1, r0, #0, #13
    9a8c:	f8ad 1001 	strh.w	r1, [sp, #1]
    9a90:	f8bd 0000 	ldrh.w	r0, [sp]
    9a94:	f89d 1002 	ldrb.w	r1, [sp, #2]
    9a98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    9a9c:	bd08      	pop	{r3, pc}
    9a9e:	0000      	.short	0x0000
    9aa0:	0003bfc4 	.word	0x0003bfc4
    9aa4:	88888889 	.word	0x88888889
    9aa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9aac:	f244 2555 	movw	r5, #16981	; 0x4255
    9ab0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    9ab4:	f00c 0401 	and.w	r4, ip, #1
    9ab8:	f3cc 0a40 	ubfx	sl, ip, #1, #1
    9abc:	f1a0 0ceb 	sub.w	ip, r0, #235	; 0xeb
    9ac0:	9400      	str	r4, [sp, #0]
    9ac2:	ea54 0b0a 	orrs.w	fp, r4, sl
    9ac6:	fa1f fc8c 	uxth.w	ip, ip
    9aca:	f10c 04f6 	add.w	r4, ip, #246	; 0xf6
    9ace:	fb04 f405 	mul.w	r4, r4, r5
    9ad2:	ea4f 5994 	mov.w	r9, r4, lsr #22
    9ad6:	fb0c f405 	mul.w	r4, ip, r5
    9ada:	ea4f 5794 	mov.w	r7, r4, lsr #22
    9ade:	b2fc      	uxtb	r4, r7
    9ae0:	f06f 05f6 	mvn.w	r5, #246	; 0xf6
    9ae4:	fb14 f405 	smulbb	r4, r4, r5
    9ae8:	eb04 060c 	add.w	r6, r4, ip
    9aec:	fa1f fc86 	uxth.w	ip, r6
    9af0:	f10c 0805 	add.w	r8, ip, #5
    9af4:	f04f 0c00 	mov.w	ip, #0
    9af8:	f44f 74c8 	mov.w	r4, #400	; 0x190
    9afc:	f44f 75bf 	mov.w	r5, #382	; 0x17e
    9b00:	f000 8148 	beq.w	9d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf40>
    9b04:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    9b08:	f1ba 0f00 	cmp.w	sl, #0
    9b0c:	d01b      	beq.n	9b46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcf2>
    9b0e:	2a08      	cmp	r2, #8
    9b10:	bf04      	itt	eq
    9b12:	46a3      	moveq	fp, r4
    9b14:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    9b18:	d00f      	beq.n	9b3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xce6>
    9b1a:	2a04      	cmp	r2, #4
    9b1c:	bf04      	itt	eq
    9b1e:	46ab      	moveq	fp, r5
    9b20:	f04f 0a10 	moveq.w	sl, #16
    9b24:	d009      	beq.n	9b3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xce6>
    9b26:	2a02      	cmp	r2, #2
    9b28:	bf07      	ittee	eq
    9b2a:	f10c 0b18 	addeq.w	fp, ip, #24
    9b2e:	f04f 0a04 	moveq.w	sl, #4
    9b32:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    9b36:	f04f 0a08 	movne.w	sl, #8
    9b3a:	eb0a 0e8a 	add.w	lr, sl, sl, lsl #2
    9b3e:	eb0e 1a8a 	add.w	sl, lr, sl, lsl #6
    9b42:	44da      	add	sl, fp
    9b44:	e01a      	b.n	9b7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd28>
    9b46:	b1db      	cbz	r3, 9b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd2c>
    9b48:	2a08      	cmp	r2, #8
    9b4a:	bf04      	itt	eq
    9b4c:	46a3      	moveq	fp, r4
    9b4e:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    9b52:	d00f      	beq.n	9b74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd20>
    9b54:	2a04      	cmp	r2, #4
    9b56:	bf04      	itt	eq
    9b58:	46ab      	moveq	fp, r5
    9b5a:	f04f 0a10 	moveq.w	sl, #16
    9b5e:	d009      	beq.n	9b74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd20>
    9b60:	2a02      	cmp	r2, #2
    9b62:	bf07      	ittee	eq
    9b64:	f10c 0b18 	addeq.w	fp, ip, #24
    9b68:	f04f 0a04 	moveq.w	sl, #4
    9b6c:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    9b70:	f04f 0a08 	movne.w	sl, #8
    9b74:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
    9b78:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
    9b7c:	4451      	add	r1, sl
    9b7e:	e021      	b.n	9bc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd70>
    9b80:	28ff      	cmp	r0, #255	; 0xff
    9b82:	bf34      	ite	cc
    9b84:	4682      	movcc	sl, r0
    9b86:	f04f 0aff 	movcs.w	sl, #255	; 0xff
    9b8a:	f10a 0b05 	add.w	fp, sl, #5
    9b8e:	2a08      	cmp	r2, #8
    9b90:	bf04      	itt	eq
    9b92:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    9b96:	fb0b 110a 	mlaeq	r1, fp, sl, r1
    9b9a:	d027      	beq.n	9bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd98>
    9b9c:	2a04      	cmp	r2, #4
    9b9e:	d01f      	beq.n	9be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd8c>
    9ba0:	2a02      	cmp	r2, #2
    9ba2:	bf0c      	ite	eq
    9ba4:	f04f 0a04 	moveq.w	sl, #4
    9ba8:	f04f 0a08 	movne.w	sl, #8
    9bac:	fb0b 110a 	mla	r1, fp, sl, r1
    9bb0:	bf07      	ittee	eq
    9bb2:	46e2      	moveq	sl, ip
    9bb4:	f04f 0b18 	moveq.w	fp, #24
    9bb8:	f04f 0a00 	movne.w	sl, #0
    9bbc:	f04f 0b28 	movne.w	fp, #40	; 0x28
    9bc0:	44da      	add	sl, fp
    9bc2:	4451      	add	r1, sl
    9bc4:	319c      	adds	r1, #156	; 0x9c
    9bc6:	f002 0a0c 	and.w	sl, r2, #12
    9bca:	f1ba 0f00 	cmp.w	sl, #0
    9bce:	bf18      	it	ne
    9bd0:	f04f 0a28 	movne.w	sl, #40	; 0x28
    9bd4:	4451      	add	r1, sl
    9bd6:	bf18      	it	ne
    9bd8:	f501 6141 	addne.w	r1, r1, #3088	; 0xc10
    9bdc:	d126      	bne.n	9c2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdd8>
    9bde:	e008      	b.n	9bf2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd9e>
    9be0:	f04f 0a10 	mov.w	sl, #16
    9be4:	fb0b 110a 	mla	r1, fp, sl, r1
    9be8:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    9bec:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    9bf0:	e7e6      	b.n	9bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6c>
    9bf2:	2a08      	cmp	r2, #8
    9bf4:	bf04      	itt	eq
    9bf6:	46a3      	moveq	fp, r4
    9bf8:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    9bfc:	d00f      	beq.n	9c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdca>
    9bfe:	2a04      	cmp	r2, #4
    9c00:	bf04      	itt	eq
    9c02:	46ab      	moveq	fp, r5
    9c04:	f04f 0a10 	moveq.w	sl, #16
    9c08:	d009      	beq.n	9c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdca>
    9c0a:	2a02      	cmp	r2, #2
    9c0c:	bf07      	ittee	eq
    9c0e:	f10c 0b18 	addeq.w	fp, ip, #24
    9c12:	f04f 0a04 	moveq.w	sl, #4
    9c16:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    9c1a:	f04f 0a08 	movne.w	sl, #8
    9c1e:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
    9c22:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    9c26:	eb0b 0a4a 	add.w	sl, fp, sl, lsl #1
    9c2a:	4451      	add	r1, sl
    9c2c:	f101 0a98 	add.w	sl, r1, #152	; 0x98
    9c30:	9900      	ldr	r1, [sp, #0]
    9c32:	b1c1      	cbz	r1, 9c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe12>
    9c34:	2a08      	cmp	r2, #8
    9c36:	bf08      	it	eq
    9c38:	2040      	moveq	r0, #64	; 0x40
    9c3a:	d00c      	beq.n	9c56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe02>
    9c3c:	2a04      	cmp	r2, #4
    9c3e:	bf04      	itt	eq
    9c40:	462c      	moveq	r4, r5
    9c42:	2010      	moveq	r0, #16
    9c44:	d007      	beq.n	9c56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe02>
    9c46:	2a02      	cmp	r2, #2
    9c48:	bf07      	ittee	eq
    9c4a:	f10c 0418 	addeq.w	r4, ip, #24
    9c4e:	2004      	moveq	r0, #4
    9c50:	f10c 0428 	addne.w	r4, ip, #40	; 0x28
    9c54:	2008      	movne	r0, #8
    9c56:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    9c5a:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    9c5e:	4420      	add	r0, r4
    9c60:	eb00 010a 	add.w	r1, r0, sl
    9c64:	e091      	b.n	9d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf36>
    9c66:	b1bb      	cbz	r3, 9c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe44>
    9c68:	2a08      	cmp	r2, #8
    9c6a:	bf04      	itt	eq
    9c6c:	46a3      	moveq	fp, r4
    9c6e:	2140      	moveq	r1, #64	; 0x40
    9c70:	d00c      	beq.n	9c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe38>
    9c72:	2a04      	cmp	r2, #4
    9c74:	bf04      	itt	eq
    9c76:	46ab      	moveq	fp, r5
    9c78:	2110      	moveq	r1, #16
    9c7a:	d007      	beq.n	9c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe38>
    9c7c:	2a02      	cmp	r2, #2
    9c7e:	bf07      	ittee	eq
    9c80:	f10c 0b18 	addeq.w	fp, ip, #24
    9c84:	2104      	moveq	r1, #4
    9c86:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    9c8a:	2108      	movne	r1, #8
    9c8c:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    9c90:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
    9c94:	4451      	add	r1, sl
    9c96:	e01c      	b.n	9cd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe7e>
    9c98:	28ff      	cmp	r0, #255	; 0xff
    9c9a:	bf34      	ite	cc
    9c9c:	4601      	movcc	r1, r0
    9c9e:	21ff      	movcs	r1, #255	; 0xff
    9ca0:	f101 0b05 	add.w	fp, r1, #5
    9ca4:	2a08      	cmp	r2, #8
    9ca6:	bf04      	itt	eq
    9ca8:	2140      	moveq	r1, #64	; 0x40
    9caa:	fb0b aa01 	mlaeq	sl, fp, r1, sl
    9cae:	d01e      	beq.n	9cee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe9a>
    9cb0:	2a04      	cmp	r2, #4
    9cb2:	d018      	beq.n	9ce6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe92>
    9cb4:	2a02      	cmp	r2, #2
    9cb6:	bf0c      	ite	eq
    9cb8:	2104      	moveq	r1, #4
    9cba:	2108      	movne	r1, #8
    9cbc:	fb0b aa01 	mla	sl, fp, r1, sl
    9cc0:	bf07      	ittee	eq
    9cc2:	4661      	moveq	r1, ip
    9cc4:	f04f 0b18 	moveq.w	fp, #24
    9cc8:	2100      	movne	r1, #0
    9cca:	f04f 0b28 	movne.w	fp, #40	; 0x28
    9cce:	4459      	add	r1, fp
    9cd0:	4451      	add	r1, sl
    9cd2:	28eb      	cmp	r0, #235	; 0xeb
    9cd4:	d959      	bls.n	9d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf36>
    9cd6:	b313      	cbz	r3, 9d1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeca>
    9cd8:	2a08      	cmp	r2, #8
    9cda:	d00e      	beq.n	9cfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xea6>
    9cdc:	2a04      	cmp	r2, #4
    9cde:	d009      	beq.n	9cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xea0>
    9ce0:	2a02      	cmp	r2, #2
    9ce2:	d00c      	beq.n	9cfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeaa>
    9ce4:	e00f      	b.n	9d06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeb2>
    9ce6:	2110      	movs	r1, #16
    9ce8:	fb0b aa01 	mla	sl, fp, r1, sl
    9cec:	212e      	movs	r1, #46	; 0x2e
    9cee:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    9cf2:	e7ec      	b.n	9cce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe7a>
    9cf4:	462c      	mov	r4, r5
    9cf6:	2010      	movs	r0, #16
    9cf8:	e008      	b.n	9d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeb8>
    9cfa:	2040      	movs	r0, #64	; 0x40
    9cfc:	e006      	b.n	9d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeb8>
    9cfe:	f10c 0418 	add.w	r4, ip, #24
    9d02:	2004      	movs	r0, #4
    9d04:	e002      	b.n	9d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeb8>
    9d06:	f10c 0428 	add.w	r4, ip, #40	; 0x28
    9d0a:	2008      	movs	r0, #8
    9d0c:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    9d10:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    9d14:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    9d18:	fb09 1100 	mla	r1, r9, r0, r1
    9d1c:	e035      	b.n	9d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf36>
    9d1e:	b2fb      	uxtb	r3, r7
    9d20:	2a08      	cmp	r2, #8
    9d22:	bf04      	itt	eq
    9d24:	4620      	moveq	r0, r4
    9d26:	2740      	moveq	r7, #64	; 0x40
    9d28:	d00c      	beq.n	9d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xef0>
    9d2a:	2a04      	cmp	r2, #4
    9d2c:	bf04      	itt	eq
    9d2e:	4628      	moveq	r0, r5
    9d30:	2710      	moveq	r7, #16
    9d32:	d007      	beq.n	9d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xef0>
    9d34:	2a02      	cmp	r2, #2
    9d36:	bf07      	ittee	eq
    9d38:	f10c 0018 	addeq.w	r0, ip, #24
    9d3c:	2704      	moveq	r7, #4
    9d3e:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
    9d42:	2708      	movne	r7, #8
    9d44:	eb07 1787 	add.w	r7, r7, r7, lsl #6
    9d48:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    9d4c:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    9d50:	fb03 1100 	mla	r1, r3, r0, r1
    9d54:	0430      	lsls	r0, r6, #16
    9d56:	0c00      	lsrs	r0, r0, #16
    9d58:	d017      	beq.n	9d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf36>
    9d5a:	2a08      	cmp	r2, #8
    9d5c:	d007      	beq.n	9d6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf1a>
    9d5e:	2a04      	cmp	r2, #4
    9d60:	d002      	beq.n	9d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf14>
    9d62:	2a02      	cmp	r2, #2
    9d64:	d005      	beq.n	9d72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf1e>
    9d66:	e008      	b.n	9d7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf26>
    9d68:	462c      	mov	r4, r5
    9d6a:	2010      	movs	r0, #16
    9d6c:	e008      	b.n	9d80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2c>
    9d6e:	2040      	movs	r0, #64	; 0x40
    9d70:	e006      	b.n	9d80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2c>
    9d72:	f10c 0418 	add.w	r4, ip, #24
    9d76:	2004      	movs	r0, #4
    9d78:	e002      	b.n	9d80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2c>
    9d7a:	f10c 0428 	add.w	r4, ip, #40	; 0x28
    9d7e:	2008      	movs	r0, #8
    9d80:	fb08 1000 	mla	r0, r8, r0, r1
    9d84:	4420      	add	r0, r4
    9d86:	f500 71a5 	add.w	r1, r0, #330	; 0x14a
    9d8a:	f201 100b 	addw	r0, r1, #267	; 0x10b
    9d8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d92:	bf00      	nop
    9d94:	f501 7aa5 	add.w	sl, r1, #330	; 0x14a
    9d98:	b1bb      	cbz	r3, 9dca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf76>
    9d9a:	2a08      	cmp	r2, #8
    9d9c:	bf04      	itt	eq
    9d9e:	46a3      	moveq	fp, r4
    9da0:	2140      	moveq	r1, #64	; 0x40
    9da2:	d00c      	beq.n	9dbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6a>
    9da4:	2a04      	cmp	r2, #4
    9da6:	bf04      	itt	eq
    9da8:	46ab      	moveq	fp, r5
    9daa:	2110      	moveq	r1, #16
    9dac:	d007      	beq.n	9dbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6a>
    9dae:	2a02      	cmp	r2, #2
    9db0:	bf07      	ittee	eq
    9db2:	f10c 0b18 	addeq.w	fp, ip, #24
    9db6:	2104      	moveq	r1, #4
    9db8:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    9dbc:	2108      	movne	r1, #8
    9dbe:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    9dc2:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
    9dc6:	4451      	add	r1, sl
    9dc8:	e01c      	b.n	9e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfb0>
    9dca:	28ff      	cmp	r0, #255	; 0xff
    9dcc:	bf34      	ite	cc
    9dce:	4601      	movcc	r1, r0
    9dd0:	21ff      	movcs	r1, #255	; 0xff
    9dd2:	f101 0b05 	add.w	fp, r1, #5
    9dd6:	2a08      	cmp	r2, #8
    9dd8:	bf04      	itt	eq
    9dda:	2140      	moveq	r1, #64	; 0x40
    9ddc:	fb0b aa01 	mlaeq	sl, fp, r1, sl
    9de0:	d021      	beq.n	9e26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfd2>
    9de2:	2a04      	cmp	r2, #4
    9de4:	d01b      	beq.n	9e1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfca>
    9de6:	2a02      	cmp	r2, #2
    9de8:	bf0c      	ite	eq
    9dea:	2104      	moveq	r1, #4
    9dec:	2108      	movne	r1, #8
    9dee:	fb0b aa01 	mla	sl, fp, r1, sl
    9df2:	bf07      	ittee	eq
    9df4:	4661      	moveq	r1, ip
    9df6:	f04f 0b18 	moveq.w	fp, #24
    9dfa:	2100      	movne	r1, #0
    9dfc:	f04f 0b28 	movne.w	fp, #40	; 0x28
    9e00:	4459      	add	r1, fp
    9e02:	4451      	add	r1, sl
    9e04:	28eb      	cmp	r0, #235	; 0xeb
    9e06:	d9c0      	bls.n	9d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf36>
    9e08:	b183      	cbz	r3, 9e2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfd8>
    9e0a:	2a08      	cmp	r2, #8
    9e0c:	f43f af75 	beq.w	9cfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xea6>
    9e10:	2a04      	cmp	r2, #4
    9e12:	f43f af6f 	beq.w	9cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xea0>
    9e16:	2a02      	cmp	r2, #2
    9e18:	f47f af75 	bne.w	9d06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeb2>
    9e1c:	e76f      	b.n	9cfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeaa>
    9e1e:	2110      	movs	r1, #16
    9e20:	fb0b aa01 	mla	sl, fp, r1, sl
    9e24:	212e      	movs	r1, #46	; 0x2e
    9e26:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    9e2a:	e7e9      	b.n	9e00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfac>
    9e2c:	b2fb      	uxtb	r3, r7
    9e2e:	2a08      	cmp	r2, #8
    9e30:	bf04      	itt	eq
    9e32:	4627      	moveq	r7, r4
    9e34:	2040      	moveq	r0, #64	; 0x40
    9e36:	d00c      	beq.n	9e52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xffe>
    9e38:	2a04      	cmp	r2, #4
    9e3a:	bf04      	itt	eq
    9e3c:	462f      	moveq	r7, r5
    9e3e:	2010      	moveq	r0, #16
    9e40:	d007      	beq.n	9e52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xffe>
    9e42:	2a02      	cmp	r2, #2
    9e44:	bf07      	ittee	eq
    9e46:	f10c 0718 	addeq.w	r7, ip, #24
    9e4a:	2004      	moveq	r0, #4
    9e4c:	f10c 0728 	addne.w	r7, ip, #40	; 0x28
    9e50:	2008      	movne	r0, #8
    9e52:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    9e56:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    9e5a:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    9e5e:	fb03 1100 	mla	r1, r3, r0, r1
    9e62:	0430      	lsls	r0, r6, #16
    9e64:	0c00      	lsrs	r0, r0, #16
    9e66:	d090      	beq.n	9d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf36>
    9e68:	2a08      	cmp	r2, #8
    9e6a:	d080      	beq.n	9d6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf1a>
    9e6c:	2a04      	cmp	r2, #4
    9e6e:	f43f af7b 	beq.w	9d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf14>
    9e72:	2a02      	cmp	r2, #2
    9e74:	d181      	bne.n	9d7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf26>
    9e76:	e77c      	b.n	9d72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf1e>
    9e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e7c:	4604      	mov	r4, r0
    9e7e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    9e82:	4e32      	ldr	r6, [pc, #200]	; (9f4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10f8>)
    9e84:	1c40      	adds	r0, r0, #1
    9e86:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    9e8a:	7bb0      	ldrb	r0, [r6, #14]
    9e8c:	2500      	movs	r5, #0
    9e8e:	b120      	cbz	r0, 9e9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1046>
    9e90:	f004 ffc8 	bl	ee24 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    9e94:	f004 fda0 	bl	e9d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    9e98:	73b5      	strb	r5, [r6, #14]
    9e9a:	7035      	strb	r5, [r6, #0]
    9e9c:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    9ea0:	b128      	cbz	r0, 9eae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x105a>
    9ea2:	4620      	mov	r0, r4
    9ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9ea8:	2101      	movs	r1, #1
    9eaa:	f009 be3e 	b.w	13b2a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    9eae:	7b60      	ldrb	r0, [r4, #13]
    9eb0:	2800      	cmp	r0, #0
    9eb2:	d044      	beq.n	9f3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10ea>
    9eb4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
    9eb8:	4288      	cmp	r0, r1
    9eba:	d840      	bhi.n	9f3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10ea>
    9ebc:	2101      	movs	r1, #1
    9ebe:	4620      	mov	r0, r4
    9ec0:	f009 fe33 	bl	13b2a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    9ec4:	78a0      	ldrb	r0, [r4, #2]
    9ec6:	f010 0f01 	tst.w	r0, #1
    9eca:	d022      	beq.n	9f12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10be>
    9ecc:	6a20      	ldr	r0, [r4, #32]
    9ece:	2643      	movs	r6, #67	; 0x43
    9ed0:	8807      	ldrh	r7, [r0, #0]
    9ed2:	f7fd fd31 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ed6:	f004 fc69 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    9eda:	2800      	cmp	r0, #0
    9edc:	bf18      	it	ne
    9ede:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ee2:	7820      	ldrb	r0, [r4, #0]
    9ee4:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
    9ee8:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
    9eec:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    9ef0:	7b60      	ldrb	r0, [r4, #13]
    9ef2:	b910      	cbnz	r0, 9efa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a6>
    9ef4:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
    9ef8:	e003      	b.n	9f02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10ae>
    9efa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    9efe:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    9f02:	4621      	mov	r1, r4
    9f04:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    9f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9f0c:	2212      	movs	r2, #18
    9f0e:	f7fd b9db 	b.w	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9f12:	f64f 77ff 	movw	r7, #65535	; 0xffff
    9f16:	2643      	movs	r6, #67	; 0x43
    9f18:	f7fd fd0e 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f1c:	f004 fc46 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    9f20:	2800      	cmp	r0, #0
    9f22:	bf18      	it	ne
    9f24:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f28:	7820      	ldrb	r0, [r4, #0]
    9f2a:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
    9f2e:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
    9f32:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    9f36:	7b60      	ldrb	r0, [r4, #13]
    9f38:	2800      	cmp	r0, #0
    9f3a:	d1de      	bne.n	9efa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a6>
    9f3c:	e7da      	b.n	9ef4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a0>
    9f3e:	4620      	mov	r0, r4
    9f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9f44:	2100      	movs	r1, #0
    9f46:	f009 bdf0 	b.w	13b2a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    9f4a:	0000      	.short	0x0000
    9f4c:	200015c0 	.word	0x200015c0
    9f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f52:	790a      	ldrb	r2, [r1, #4]
    9f54:	f012 0f18 	tst.w	r2, #24
    9f58:	d15c      	bne.n	a014 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c0>
    9f5a:	4605      	mov	r5, r0
    9f5c:	000c      	movs	r4, r1
    9f5e:	d028      	beq.n	9fb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x115e>
    9f60:	6820      	ldr	r0, [r4, #0]
    9f62:	2800      	cmp	r0, #0
    9f64:	d02a      	beq.n	9fbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1168>
    9f66:	f009 fce4 	bl	13932 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    9f6a:	7b23      	ldrb	r3, [r4, #12]
    9f6c:	7b62      	ldrb	r2, [r4, #13]
    9f6e:	2b04      	cmp	r3, #4
    9f70:	bf08      	it	eq
    9f72:	2308      	moveq	r3, #8
    9f74:	2a04      	cmp	r2, #4
    9f76:	bf08      	it	eq
    9f78:	2208      	moveq	r2, #8
    9f7a:	4929      	ldr	r1, [pc, #164]	; (a020 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11cc>)
    9f7c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9f80:	2b08      	cmp	r3, #8
    9f82:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    9f86:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    9f8a:	fbb1 f7fc 	udiv	r7, r1, ip
    9f8e:	bf08      	it	eq
    9f90:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    9f94:	d017      	beq.n	9fc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1172>
    9f96:	2b04      	cmp	r3, #4
    9f98:	bf08      	it	eq
    9f9a:	f04f 0c10 	moveq.w	ip, #16
    9f9e:	d012      	beq.n	9fc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1172>
    9fa0:	2b02      	cmp	r3, #2
    9fa2:	bf07      	ittee	eq
    9fa4:	f04f 0c04 	moveq.w	ip, #4
    9fa8:	2112      	moveq	r1, #18
    9faa:	f04f 0c08 	movne.w	ip, #8
    9fae:	2119      	movne	r1, #25
    9fb0:	e00a      	b.n	9fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1174>
    9fb2:	f240 31e2 	movw	r1, #994	; 0x3e2
    9fb6:	202d      	movs	r0, #45	; 0x2d
    9fb8:	f7fa fb80 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fbc:	f240 31e3 	movw	r1, #995	; 0x3e3
    9fc0:	202d      	movs	r0, #45	; 0x2d
    9fc2:	f7fa fb7b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fc6:	2114      	movs	r1, #20
    9fc8:	fb1c f101 	smulbb	r1, ip, r1
    9fcc:	2600      	movs	r6, #0
    9fce:	2b08      	cmp	r3, #8
    9fd0:	bf08      	it	eq
    9fd2:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    9fd6:	d01f      	beq.n	a018 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c4>
    9fd8:	2b04      	cmp	r3, #4
    9fda:	bf08      	it	eq
    9fdc:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    9fe0:	d01a      	beq.n	a018 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c4>
    9fe2:	46b4      	mov	ip, r6
    9fe4:	2b02      	cmp	r3, #2
    9fe6:	bf0c      	ite	eq
    9fe8:	2318      	moveq	r3, #24
    9fea:	2328      	movne	r3, #40	; 0x28
    9fec:	4463      	add	r3, ip
    9fee:	4419      	add	r1, r3
    9ff0:	fb11 7100 	smlabb	r1, r1, r0, r7
    9ff4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9ff8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    9ffc:	4401      	add	r1, r0
    9ffe:	88a0      	ldrh	r0, [r4, #4]
    a000:	9000      	str	r0, [sp, #0]
    a002:	2300      	movs	r3, #0
    a004:	4628      	mov	r0, r5
    a006:	f7ff fd4f 	bl	9aa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc54>
    a00a:	68a1      	ldr	r1, [r4, #8]
    a00c:	4281      	cmp	r1, r0
    a00e:	bf3c      	itt	cc
    a010:	4630      	movcc	r0, r6
    a012:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
    a014:	2001      	movs	r0, #1
    a016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a018:	f44f 73a8 	mov.w	r3, #336	; 0x150
    a01c:	e7e6      	b.n	9fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1198>
    a01e:	0000      	.short	0x0000
    a020:	0000a4b0 	.word	0x0000a4b0
    a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a026:	4604      	mov	r4, r0
    a028:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a02c:	4616      	mov	r6, r2
    a02e:	460d      	mov	r5, r1
    a030:	f88d 0000 	strb.w	r0, [sp]
    a034:	f89d 0000 	ldrb.w	r0, [sp]
    a038:	b120      	cbz	r0, a044 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11f0>
    a03a:	f640 31fa 	movw	r1, #3066	; 0xbfa
    a03e:	202d      	movs	r0, #45	; 0x2d
    a040:	f7fa fb3c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a044:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    a048:	8828      	ldrh	r0, [r5, #0]
    a04a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    a04e:	2b00      	cmp	r3, #0
    a050:	bf18      	it	ne
    a052:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    a054:	6968      	ldr	r0, [r5, #20]
    a056:	f008 fb2f 	bl	126b8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    a05a:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    a05e:	8ba8      	ldrh	r0, [r5, #28]
    a060:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    a064:	8be8      	ldrh	r0, [r5, #30]
    a066:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    a06a:	f895 026d 	ldrb.w	r0, [r5, #621]	; 0x26d
    a06e:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
    a072:	7ea0      	ldrb	r0, [r4, #26]
    a074:	2100      	movs	r1, #0
    a076:	b148      	cbz	r0, a08c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1238>
    a078:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    a07c:	2801      	cmp	r0, #1
    a07e:	d105      	bne.n	a08c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1238>
    a080:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    a084:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    a088:	2840      	cmp	r0, #64	; 0x40
    a08a:	d02e      	beq.n	a0ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1296>
    a08c:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
    a090:	b140      	cbz	r0, a0a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1250>
    a092:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    a096:	2801      	cmp	r0, #1
    a098:	bf04      	itt	eq
    a09a:	f894 0066 	ldrbeq.w	r0, [r4, #102]	; 0x66
    a09e:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    a0a2:	d022      	beq.n	a0ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1296>
    a0a4:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
    a0a8:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
    a0ac:	481c      	ldr	r0, [pc, #112]	; (a120 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12cc>)
    a0ae:	2eff      	cmp	r6, #255	; 0xff
    a0b0:	6880      	ldr	r0, [r0, #8]
    a0b2:	7801      	ldrb	r1, [r0, #0]
    a0b4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    a0b8:	f884 108d 	strb.w	r1, [r4, #141]	; 0x8d
    a0bc:	f8d0 1003 	ldr.w	r1, [r0, #3]
    a0c0:	d021      	beq.n	a106 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12b2>
    a0c2:	f8c4 109a 	str.w	r1, [r4, #154]	; 0x9a
    a0c6:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    a0ca:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    a0ce:	f104 028e 	add.w	r2, r4, #142	; 0x8e
    a0d2:	1e51      	subs	r1, r2, #1
    a0d4:	4630      	mov	r0, r6
    a0d6:	f7fc fac7 	bl	6668 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    a0da:	b178      	cbz	r0, a0fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12a8>
    a0dc:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
    a0e0:	f040 0002 	orr.w	r0, r0, #2
    a0e4:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0ea:	f8d4 0061 	ldr.w	r0, [r4, #97]	; 0x61
    a0ee:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    a0f2:	f8b4 0065 	ldrh.w	r0, [r4, #101]	; 0x65
    a0f6:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    a0fa:	e7d7      	b.n	a0ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1258>
    a0fc:	f640 411b 	movw	r1, #3099	; 0xc1b
    a100:	202d      	movs	r0, #45	; 0x2d
    a102:	f7fa fadb 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a106:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    a10a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    a10e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    a112:	f104 009a 	add.w	r0, r4, #154	; 0x9a
    a116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a11a:	f00b b9db 	b.w	154d4 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    a11e:	0000      	.short	0x0000
    a120:	20000160 	.word	0x20000160
    a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a128:	b083      	sub	sp, #12
    a12a:	4e5a      	ldr	r6, [pc, #360]	; (a294 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1440>)
    a12c:	f04f 0aff 	mov.w	sl, #255	; 0xff
    a130:	4604      	mov	r4, r0
    a132:	f88d a000 	strb.w	sl, [sp]
    a136:	68b0      	ldr	r0, [r6, #8]
    a138:	f04f 0b01 	mov.w	fp, #1
    a13c:	466a      	mov	r2, sp
    a13e:	7801      	ldrb	r1, [r0, #0]
    a140:	f3c1 1880 	ubfx	r8, r1, #6, #1
    a144:	f8d0 1003 	ldr.w	r1, [r0, #3]
    a148:	9101      	str	r1, [sp, #4]
    a14a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    a14e:	f8ad 0008 	strh.w	r0, [sp, #8]
    a152:	2105      	movs	r1, #5
    a154:	4620      	mov	r0, r4
    a156:	f7ff fbab 	bl	98b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa5c>
    a15a:	2800      	cmp	r0, #0
    a15c:	d07e      	beq.n	a25c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1408>
    a15e:	68b0      	ldr	r0, [r6, #8]
    a160:	6a25      	ldr	r5, [r4, #32]
    a162:	7967      	ldrb	r7, [r4, #5]
    a164:	f8d0 100f 	ldr.w	r1, [r0, #15]
    a168:	61a9      	str	r1, [r5, #24]
    a16a:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    a16e:	8429      	strh	r1, [r5, #32]
    a170:	7d41      	ldrb	r1, [r0, #21]
    a172:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
    a176:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    a17a:	f008 fa91 	bl	126a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a17e:	4681      	mov	r9, r0
    a180:	6168      	str	r0, [r5, #20]
    a182:	68b0      	ldr	r0, [r6, #8]
    a184:	4649      	mov	r1, r9
    a186:	7d80      	ldrb	r0, [r0, #22]
    a188:	f008 fcc1 	bl	12b0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a18c:	84a8      	strh	r0, [r5, #36]	; 0x24
    a18e:	68b0      	ldr	r0, [r6, #8]
    a190:	4649      	mov	r1, r9
    a192:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    a196:	f008 fcb1 	bl	12afc <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a19a:	62a8      	str	r0, [r5, #40]	; 0x28
    a19c:	68b0      	ldr	r0, [r6, #8]
    a19e:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    a1a2:	83a9      	strh	r1, [r5, #28]
    a1a4:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    a1a8:	83e9      	strh	r1, [r5, #30]
    a1aa:	f100 011f 	add.w	r1, r0, #31
    a1ae:	f105 00a7 	add.w	r0, r5, #167	; 0xa7
    a1b2:	f00b f98a 	bl	154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    a1b6:	68b0      	ldr	r0, [r6, #8]
    a1b8:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    a1bc:	f001 011f 	and.w	r1, r1, #31
    a1c0:	f885 10b2 	strb.w	r1, [r5, #178]	; 0xb2
    a1c4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    a1c8:	0940      	lsrs	r0, r0, #5
    a1ca:	f885 026d 	strb.w	r0, [r5, #621]	; 0x26d
    a1ce:	f885 7072 	strb.w	r7, [r5, #114]	; 0x72
    a1d2:	f105 006a 	add.w	r0, r5, #106	; 0x6a
    a1d6:	f885 7073 	strb.w	r7, [r5, #115]	; 0x73
    a1da:	f880 a00a 	strb.w	sl, [r0, #10]
    a1de:	f017 0f0c 	tst.w	r7, #12
    a1e2:	bf0c      	ite	eq
    a1e4:	2100      	moveq	r1, #0
    a1e6:	2101      	movne	r1, #1
    a1e8:	f105 0034 	add.w	r0, r5, #52	; 0x34
    a1ec:	f009 f945 	bl	1347a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    a1f0:	7c20      	ldrb	r0, [r4, #16]
    a1f2:	f885 0076 	strb.w	r0, [r5, #118]	; 0x76
    a1f6:	2300      	movs	r3, #0
    a1f8:	f89d 2000 	ldrb.w	r2, [sp]
    a1fc:	4620      	mov	r0, r4
    a1fe:	6a21      	ldr	r1, [r4, #32]
    a200:	f7ff ff10 	bl	a024 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11d0>
    a204:	6a20      	ldr	r0, [r4, #32]
    a206:	2201      	movs	r2, #1
    a208:	8801      	ldrh	r1, [r0, #0]
    a20a:	f8a4 10c2 	strh.w	r1, [r4, #194]	; 0xc2
    a20e:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    a212:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
    a216:	4621      	mov	r1, r4
    a218:	f000 fc7c 	bl	ab14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    a21c:	481e      	ldr	r0, [pc, #120]	; (a298 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1444>)
    a21e:	2100      	movs	r1, #0
    a220:	ad01      	add	r5, sp, #4
    a222:	6807      	ldr	r7, [r0, #0]
    a224:	68b0      	ldr	r0, [r6, #8]
    a226:	8001      	strh	r1, [r0, #0]
    a228:	2108      	movs	r1, #8
    a22a:	f008 ff26 	bl	1307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    a22e:	2100      	movs	r1, #0
    a230:	68b0      	ldr	r0, [r6, #8]
    a232:	f008 feae 	bl	12f92 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    a236:	2200      	movs	r2, #0
    a238:	4639      	mov	r1, r7
    a23a:	68b0      	ldr	r0, [r6, #8]
    a23c:	f008 fee5 	bl	1300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    a240:	2306      	movs	r3, #6
    a242:	2200      	movs	r2, #0
    a244:	f104 0161 	add.w	r1, r4, #97	; 0x61
    a248:	68b0      	ldr	r0, [r6, #8]
    a24a:	f008 febb 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    a24e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    a252:	68b0      	ldr	r0, [r6, #8]
    a254:	f008 ff4a 	bl	130ec <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    a258:	4641      	mov	r1, r8
    a25a:	e000      	b.n	a25e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140a>
    a25c:	e013      	b.n	a286 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1432>
    a25e:	68b0      	ldr	r0, [r6, #8]
    a260:	f008 ff34 	bl	130cc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    a264:	2306      	movs	r3, #6
    a266:	2201      	movs	r2, #1
    a268:	4629      	mov	r1, r5
    a26a:	68b0      	ldr	r0, [r6, #8]
    a26c:	f008 feaa 	bl	12fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    a270:	7961      	ldrb	r1, [r4, #5]
    a272:	20ff      	movs	r0, #255	; 0xff
    a274:	f005 fd32 	bl	fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    a278:	68b0      	ldr	r0, [r6, #8]
    a27a:	f005 fac5 	bl	f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    a27e:	4907      	ldr	r1, [pc, #28]	; (a29c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1448>)
    a280:	2009      	movs	r0, #9
    a282:	7008      	strb	r0, [r1, #0]
    a284:	e002      	b.n	a28c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1438>
    a286:	4620      	mov	r0, r4
    a288:	f7ff fdf6 	bl	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>
    a28c:	b003      	add	sp, #12
    a28e:	4658      	mov	r0, fp
    a290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a294:	20000160 	.word	0x20000160
    a298:	0000a4a8 	.word	0x0000a4a8
    a29c:	200015c0 	.word	0x200015c0
    a2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2a4:	f04f 0bff 	mov.w	fp, #255	; 0xff
    a2a8:	4604      	mov	r4, r0
    a2aa:	f04f 0a01 	mov.w	sl, #1
    a2ae:	f88d b000 	strb.w	fp, [sp]
    a2b2:	466a      	mov	r2, sp
    a2b4:	2105      	movs	r1, #5
    a2b6:	f7ff fafb 	bl	98b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa5c>
    a2ba:	b170      	cbz	r0, a2da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1486>
    a2bc:	4e5e      	ldr	r6, [pc, #376]	; (a438 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15e4>)
    a2be:	f8df 8174 	ldr.w	r8, [pc, #372]	; a434 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15e0>
    a2c2:	68b1      	ldr	r1, [r6, #8]
    a2c4:	f898 2018 	ldrb.w	r2, [r8, #24]
    a2c8:	f108 0319 	add.w	r3, r8, #25
    a2cc:	f811 0b03 	ldrb.w	r0, [r1], #3
    a2d0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a2d4:	f008 f92c 	bl	12530 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    a2d8:	b120      	cbz	r0, a2e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1490>
    a2da:	f04f 0a00 	mov.w	sl, #0
    a2de:	4650      	mov	r0, sl
    a2e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2e4:	68b0      	ldr	r0, [r6, #8]
    a2e6:	6a21      	ldr	r1, [r4, #32]
    a2e8:	2701      	movs	r7, #1
    a2ea:	7803      	ldrb	r3, [r0, #0]
    a2ec:	f891 20a6 	ldrb.w	r2, [r1, #166]	; 0xa6
    a2f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    a2f4:	401a      	ands	r2, r3
    a2f6:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    a2fa:	6a25      	ldr	r5, [r4, #32]
    a2fc:	f8d0 100f 	ldr.w	r1, [r0, #15]
    a300:	61a9      	str	r1, [r5, #24]
    a302:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    a306:	8429      	strh	r1, [r5, #32]
    a308:	7d41      	ldrb	r1, [r0, #21]
    a30a:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
    a30e:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    a312:	f008 f9c5 	bl	126a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a316:	4681      	mov	r9, r0
    a318:	6168      	str	r0, [r5, #20]
    a31a:	68b0      	ldr	r0, [r6, #8]
    a31c:	4649      	mov	r1, r9
    a31e:	7d80      	ldrb	r0, [r0, #22]
    a320:	f008 fbf5 	bl	12b0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a324:	84a8      	strh	r0, [r5, #36]	; 0x24
    a326:	68b0      	ldr	r0, [r6, #8]
    a328:	4649      	mov	r1, r9
    a32a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    a32e:	f008 fbe5 	bl	12afc <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a332:	62a8      	str	r0, [r5, #40]	; 0x28
    a334:	68b0      	ldr	r0, [r6, #8]
    a336:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    a33a:	83a9      	strh	r1, [r5, #28]
    a33c:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    a340:	83e9      	strh	r1, [r5, #30]
    a342:	f100 011f 	add.w	r1, r0, #31
    a346:	f105 00a7 	add.w	r0, r5, #167	; 0xa7
    a34a:	f00b f8be 	bl	154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    a34e:	68b0      	ldr	r0, [r6, #8]
    a350:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    a354:	f001 011f 	and.w	r1, r1, #31
    a358:	f885 10b2 	strb.w	r1, [r5, #178]	; 0xb2
    a35c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    a360:	0940      	lsrs	r0, r0, #5
    a362:	f885 026d 	strb.w	r0, [r5, #621]	; 0x26d
    a366:	f885 7072 	strb.w	r7, [r5, #114]	; 0x72
    a36a:	f105 006a 	add.w	r0, r5, #106	; 0x6a
    a36e:	f885 7073 	strb.w	r7, [r5, #115]	; 0x73
    a372:	f880 b00a 	strb.w	fp, [r0, #10]
    a376:	2700      	movs	r7, #0
    a378:	4639      	mov	r1, r7
    a37a:	3836      	subs	r0, #54	; 0x36
    a37c:	f009 f87d 	bl	1347a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    a380:	7c20      	ldrb	r0, [r4, #16]
    a382:	f885 0076 	strb.w	r0, [r5, #118]	; 0x76
    a386:	2300      	movs	r3, #0
    a388:	f89d 2000 	ldrb.w	r2, [sp]
    a38c:	4620      	mov	r0, r4
    a38e:	6a21      	ldr	r1, [r4, #32]
    a390:	f7ff fe48 	bl	a024 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11d0>
    a394:	220e      	movs	r2, #14
    a396:	4621      	mov	r1, r4
    a398:	f104 007e 	add.w	r0, r4, #126	; 0x7e
    a39c:	f7fc ff94 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a3a0:	6a20      	ldr	r0, [r4, #32]
    a3a2:	2203      	movs	r2, #3
    a3a4:	8801      	ldrh	r1, [r0, #0]
    a3a6:	f8a4 10c2 	strh.w	r1, [r4, #194]	; 0xc2
    a3aa:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    a3ae:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4
    a3b2:	4621      	mov	r1, r4
    a3b4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    a3b8:	f7fc ff86 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a3bc:	6a20      	ldr	r0, [r4, #32]
    a3be:	2500      	movs	r5, #0
    a3c0:	f8b0 9000 	ldrh.w	r9, [r0]
    a3c4:	f7fd fab8 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a3c8:	f004 f9f0 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    a3cc:	b9a8      	cbnz	r0, a3fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a6>
    a3ce:	7821      	ldrb	r1, [r4, #0]
    a3d0:	f884 10b3 	strb.w	r1, [r4, #179]	; 0xb3
    a3d4:	f8a4 90b4 	strh.w	r9, [r4, #180]	; 0xb4
    a3d8:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
    a3dc:	7b60      	ldrb	r0, [r4, #13]
    a3de:	2800      	cmp	r0, #0
    a3e0:	bf1a      	itte	ne
    a3e2:	f894 0040 	ldrbne.w	r0, [r4, #64]	; 0x40
    a3e6:	f884 00b6 	strbne.w	r0, [r4, #182]	; 0xb6
    a3ea:	f884 70b6 	strbeq.w	r7, [r4, #182]	; 0xb6
    a3ee:	2212      	movs	r2, #18
    a3f0:	4621      	mov	r1, r4
    a3f2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    a3f6:	f7fc ff67 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a3fa:	f888 7000 	strb.w	r7, [r8]
    a3fe:	2200      	movs	r2, #0
    a400:	4621      	mov	r1, r4
    a402:	6a20      	ldr	r0, [r4, #32]
    a404:	f000 fb86 	bl	ab14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    a408:	6a20      	ldr	r0, [r4, #32]
    a40a:	8800      	ldrh	r0, [r0, #0]
    a40c:	f7fa fde0 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a410:	f007 fd77 	bl	11f02 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a414:	68b0      	ldr	r0, [r6, #8]
    a416:	6a21      	ldr	r1, [r4, #32]
    a418:	f8d0 2003 	ldr.w	r2, [r0, #3]
    a41c:	f8c1 2003 	str.w	r2, [r1, #3]
    a420:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    a424:	f8a1 2007 	strh.w	r2, [r1, #7]
    a428:	7800      	ldrb	r0, [r0, #0]
    a42a:	6a21      	ldr	r1, [r4, #32]
    a42c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a430:	7088      	strb	r0, [r1, #2]
    a432:	e754      	b.n	a2de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x148a>
    a434:	200015c0 	.word	0x200015c0
    a438:	20000160 	.word	0x20000160
    a43c:	b570      	push	{r4, r5, r6, lr}
    a43e:	4e18      	ldr	r6, [pc, #96]	; (a4a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164c>)
    a440:	2100      	movs	r1, #0
    a442:	6870      	ldr	r0, [r6, #4]
    a444:	8842      	ldrh	r2, [r0, #2]
    a446:	2a09      	cmp	r2, #9
    a448:	d004      	beq.n	a454 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1600>
    a44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a44e:	2101      	movs	r1, #1
    a450:	f7fd bf30 	b.w	82b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x124>
    a454:	4c13      	ldr	r4, [pc, #76]	; (a4a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1650>)
    a456:	4605      	mov	r5, r0
    a458:	81a1      	strh	r1, [r4, #12]
    a45a:	7061      	strb	r1, [r4, #1]
    a45c:	f7fd fc96 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    a460:	6861      	ldr	r1, [r4, #4]
    a462:	4408      	add	r0, r1
    a464:	6060      	str	r0, [r4, #4]
    a466:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    a46a:	1c40      	adds	r0, r0, #1
    a46c:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
    a470:	f7fd fb94 	bl	7b9c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    a474:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    a478:	fbb0 f2f1 	udiv	r2, r0, r1
    a47c:	fb01 0012 	mls	r0, r1, r2, r0
    a480:	6861      	ldr	r1, [r4, #4]
    a482:	2200      	movs	r2, #0
    a484:	4408      	add	r0, r1
    a486:	6060      	str	r0, [r4, #4]
    a488:	f895 106e 	ldrb.w	r1, [r5, #110]	; 0x6e
    a48c:	4628      	mov	r0, r5
    a48e:	f7fe ff25 	bl	92dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    a492:	6870      	ldr	r0, [r6, #4]
    a494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a498:	2101      	movs	r1, #1
    a49a:	f7fd be89 	b.w	81b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
    a49e:	0000      	.short	0x0000
    a4a0:	20000160 	.word	0x20000160
    a4a4:	200015c0 	.word	0x200015c0
    a4a8:	00000003 	.word	0x00000003
    a4ac:	55555501 	.word	0x55555501
    a4b0:	a62c0000 	.word	0xa62c0000
    a4b4:	0000a1e0 	.word	0x0000a1e0
    a4b8:	0000a820 	.word	0x0000a820
    a4bc:	00000000 	.word	0x00000000
    a4c0:	0000a820 	.word	0x0000a820
    a4c4:	00008d71 	.word	0x00008d71
    a4c8:	000086cd 	.word	0x000086cd
    a4cc:	00008b41 	.word	0x00008b41
    a4d0:	00000000 	.word	0x00000000
    a4d4:	00008805 	.word	0x00008805
    a4d8:	00008919 	.word	0x00008919
    a4dc:	00008c5d 	.word	0x00008c5d
    a4e0:	000138f9 	.word	0x000138f9
    a4e4:	00008bf1 	.word	0x00008bf1
    a4e8:	00008cdd 	.word	0x00008cdd
    a4ec:	00008cb5 	.word	0x00008cb5
    a4f0:	00008b71 	.word	0x00008b71
    a4f4:	000138ff 	.word	0x000138ff
    a4f8:	00008df9 	.word	0x00008df9
    a4fc:	00009101 	.word	0x00009101
    a500:	00009189 	.word	0x00009189
    a504:	0000a43d 	.word	0x0000a43d
    a508:	0000a4f4 	.word	0x0000a4f4
    a50c:	0000a4dc 	.word	0x0000a4dc
    a510:	0000a4d4 	.word	0x0000a4d4

0000a514 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    a514:	b510      	push	{r4, lr}
    a516:	1e42      	subs	r2, r0, #1
    a518:	2a02      	cmp	r2, #2
    a51a:	d903      	bls.n	a524 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    a51c:	21ca      	movs	r1, #202	; 0xca
    a51e:	202f      	movs	r0, #47	; 0x2f
    a520:	f7fa f8cc 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a524:	1e40      	subs	r0, r0, #1
    a526:	2910      	cmp	r1, #16
    a528:	bf02      	ittt	eq
    a52a:	490a      	ldreq	r1, [pc, #40]	; (a554 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    a52c:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    a530:	bd10      	popeq	{r4, pc}
    a532:	2912      	cmp	r1, #18
    a534:	bf14      	ite	ne
    a536:	2913      	cmpne	r1, #19
    a538:	4907      	ldreq	r1, [pc, #28]	; (a558 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    a53a:	d007      	beq.n	a54c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    a53c:	2915      	cmp	r1, #21
    a53e:	bf08      	it	eq
    a540:	4906      	ldreq	r1, [pc, #24]	; (a55c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    a542:	d003      	beq.n	a54c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    a544:	21d8      	movs	r1, #216	; 0xd8
    a546:	202f      	movs	r0, #47	; 0x2f
    a548:	f7fa f8b8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a54c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    a550:	bd10      	pop	{r4, pc}
    a552:	0000      	.short	0x0000
    a554:	00013af4 	.word	0x00013af4
    a558:	00013aee 	.word	0x00013aee
    a55c:	00013afa 	.word	0x00013afa

0000a560 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    a560:	1e42      	subs	r2, r0, #1
    a562:	b510      	push	{r4, lr}
    a564:	b2d2      	uxtb	r2, r2
    a566:	2a01      	cmp	r2, #1
    a568:	d905      	bls.n	a576 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    a56a:	291d      	cmp	r1, #29
    a56c:	d01e      	beq.n	a5ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    a56e:	21ee      	movs	r1, #238	; 0xee
    a570:	202f      	movs	r0, #47	; 0x2f
    a572:	f7fa f8a3 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a576:	2913      	cmp	r1, #19
    a578:	d014      	beq.n	a5a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    a57a:	dc08      	bgt.n	a58e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    a57c:	2910      	cmp	r1, #16
    a57e:	bf02      	ittt	eq
    a580:	480d      	ldreq	r0, [pc, #52]	; (a5b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    a582:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    a586:	bd10      	popeq	{r4, pc}
    a588:	2912      	cmp	r1, #18
    a58a:	d00b      	beq.n	a5a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    a58c:	e005      	b.n	a59a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    a58e:	2915      	cmp	r1, #21
    a590:	bf08      	it	eq
    a592:	480a      	ldreq	r0, [pc, #40]	; (a5bc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    a594:	d007      	beq.n	a5a6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    a596:	291d      	cmp	r1, #29
    a598:	d008      	beq.n	a5ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    a59a:	f44f 7181 	mov.w	r1, #258	; 0x102
    a59e:	202f      	movs	r0, #47	; 0x2f
    a5a0:	f7fa f88c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5a4:	4806      	ldr	r0, [pc, #24]	; (a5c0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    a5a6:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    a5aa:	bd10      	pop	{r4, pc}
    a5ac:	f240 315a 	movw	r1, #858	; 0x35a
    a5b0:	fb10 f001 	smulbb	r0, r0, r1
    a5b4:	bd10      	pop	{r4, pc}
    a5b6:	0000      	.short	0x0000
    a5b8:	00013ae2 	.word	0x00013ae2
    a5bc:	00013aea 	.word	0x00013aea
    a5c0:	00013ae6 	.word	0x00013ae6

0000a5c4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    a5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a5c8:	4604      	mov	r4, r0
    a5ca:	f890 0120 	ldrb.w	r0, [r0, #288]	; 0x120
    a5ce:	b083      	sub	sp, #12
    a5d0:	4616      	mov	r6, r2
    a5d2:	460d      	mov	r5, r1
    a5d4:	bb40      	cbnz	r0, a628 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
    a5d6:	4621      	mov	r1, r4
    a5d8:	486a      	ldr	r0, [pc, #424]	; (a784 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1c0>)
    a5da:	f7f8 f981 	bl	28e0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    a5de:	4607      	mov	r7, r0
    a5e0:	2820      	cmp	r0, #32
    a5e2:	d021      	beq.n	a628 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
    a5e4:	2250      	movs	r2, #80	; 0x50
    a5e6:	2100      	movs	r1, #0
    a5e8:	f504 7084 	add.w	r0, r4, #264	; 0x108
    a5ec:	f006 fcde 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a5f0:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
    a5f4:	f04f 0801 	mov.w	r8, #1
    a5f8:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    a5fc:	f884 8120 	strb.w	r8, [r4, #288]	; 0x120
    a600:	b135      	cbz	r5, a610 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    a602:	f7fd fae3 	bl	7bcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    a606:	f000 0007 	and.w	r0, r0, #7
    a60a:	1c40      	adds	r0, r0, #1
    a60c:	f885 029c 	strb.w	r0, [r5, #668]	; 0x29c
    a610:	4620      	mov	r0, r4
    a612:	f009 f8ef 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a616:	2800      	cmp	r0, #0
    a618:	bf08      	it	eq
    a61a:	256b      	moveq	r5, #107	; 0x6b
    a61c:	d029      	beq.n	a672 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xae>
    a61e:	4620      	mov	r0, r4
    a620:	f009 f8da 	bl	137d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a624:	b120      	cbz	r0, a630 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x6c>
    a626:	e00a      	b.n	a63e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    a628:	b003      	add	sp, #12
    a62a:	200c      	movs	r0, #12
    a62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a630:	4620      	mov	r0, r4
    a632:	f009 f8e3 	bl	137fc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    a636:	2800      	cmp	r0, #0
    a638:	bf08      	it	eq
    a63a:	2542      	moveq	r5, #66	; 0x42
    a63c:	d000      	beq.n	a640 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7c>
    a63e:	2549      	movs	r5, #73	; 0x49
    a640:	4668      	mov	r0, sp
    a642:	f7f9 fea9 	bl	4398 <mpsl_fem_pa_is_configured>
    a646:	f89d 0000 	ldrb.w	r0, [sp]
    a64a:	2800      	cmp	r0, #0
    a64c:	bf14      	ite	ne
    a64e:	2701      	movne	r7, #1
    a650:	2700      	moveq	r7, #0
    a652:	a801      	add	r0, sp, #4
    a654:	f7f9 fe88 	bl	4368 <mpsl_fem_lna_is_configured>
    a658:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a65c:	2800      	cmp	r0, #0
    a65e:	bf18      	it	ne
    a660:	2001      	movne	r0, #1
    a662:	4338      	orrs	r0, r7
    a664:	bf18      	it	ne
    a666:	3509      	addne	r5, #9
    a668:	f7f9 fddc 	bl	4224 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    a66c:	2800      	cmp	r0, #0
    a66e:	bf18      	it	ne
    a670:	3518      	addne	r5, #24
    a672:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
    a676:	2002      	movs	r0, #2
    a678:	f884 0132 	strb.w	r0, [r4, #306]	; 0x132
    a67c:	f884 8133 	strb.w	r8, [r4, #307]	; 0x133
    a680:	2500      	movs	r5, #0
    a682:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
    a686:	f006 fab0 	bl	10bea <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    a68a:	4607      	mov	r7, r0
    a68c:	f8b4 9130 	ldrh.w	r9, [r4, #304]	; 0x130
    a690:	f7f9 fa6e 	bl	3b70 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a694:	454f      	cmp	r7, r9
    a696:	bf98      	it	ls
    a698:	464f      	movls	r7, r9
    a69a:	4438      	add	r0, r7
    a69c:	30cc      	adds	r0, #204	; 0xcc
    a69e:	b287      	uxth	r7, r0
    a6a0:	4620      	mov	r0, r4
    a6a2:	f009 f8a3 	bl	137ec <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a6a6:	b378      	cbz	r0, a708 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x144>
    a6a8:	f00a fec6 	bl	15438 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    a6ac:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    a6b0:	b281      	uxth	r1, r0
    a6b2:	4630      	mov	r0, r6
    a6b4:	f006 fad1 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a6b8:	4430      	add	r0, r6
    a6ba:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    a6be:	f7f8 fadf 	bl	2c80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    a6c2:	19c0      	adds	r0, r0, r7
    a6c4:	4169      	adcs	r1, r5
    a6c6:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
    a6ca:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    a6ce:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
    a6d2:	4620      	mov	r0, r4
    a6d4:	f009 f884 	bl	137e0 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    a6d8:	b140      	cbz	r0, a6ec <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x128>
    a6da:	4620      	mov	r0, r4
    a6dc:	f7fd fb56 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    a6e0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    a6e4:	1a30      	subs	r0, r6, r0
    a6e6:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    a6ea:	e005      	b.n	a6f8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    a6ec:	2001      	movs	r0, #1
    a6ee:	f009 f9f1 	bl	13ad4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    a6f2:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    a6f6:	1a30      	subs	r0, r6, r0
    a6f8:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    a6fc:	f04f 30ff 	mov.w	r0, #4294967295
    a700:	0841      	lsrs	r1, r0, #1
    a702:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
    a706:	e026      	b.n	a756 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x192>
    a708:	e7ff      	b.n	a70a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x146>
    a70a:	4620      	mov	r0, r4
    a70c:	f7fd fb3e 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    a710:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    a714:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    a718:	f884 8109 	strb.w	r8, [r4, #265]	; 0x109
    a71c:	f7f8 fab0 	bl	2c80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    a720:	4681      	mov	r9, r0
    a722:	4688      	mov	r8, r1
    a724:	f7fd fa52 	bl	7bcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    a728:	f242 7110 	movw	r1, #10000	; 0x2710
    a72c:	fbb0 f2f1 	udiv	r2, r0, r1
    a730:	fb01 0012 	mls	r0, r1, r2, r0
    a734:	4438      	add	r0, r7
    a736:	eb10 0009 	adds.w	r0, r0, r9
    a73a:	eb45 0108 	adc.w	r1, r5, r8
    a73e:	2e00      	cmp	r6, #0
    a740:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
    a744:	bf04      	itt	eq
    a746:	f04f 30ff 	moveq.w	r0, #4294967295
    a74a:	0841      	lsreq	r1, r0, #1
    a74c:	d001      	beq.n	a752 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x18e>
    a74e:	1980      	adds	r0, r0, r6
    a750:	4169      	adcs	r1, r5
    a752:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
    a756:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    a75a:	f504 7194 	add.w	r1, r4, #296	; 0x128
    a75e:	f7f7 faa5 	bl	1cac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    a762:	b148      	cbz	r0, a778 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1b4>
    a764:	f8a4 5140 	strh.w	r5, [r4, #320]	; 0x140
    a768:	2100      	movs	r1, #0
    a76a:	4620      	mov	r0, r4
    a76c:	f009 f86c 	bl	13848 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    a770:	b003      	add	sp, #12
    a772:	2000      	movs	r0, #0
    a774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a778:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    a77c:	2030      	movs	r0, #48	; 0x30
    a77e:	f7f9 ff9d 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a782:	0000      	.short	0x0000
    a784:	00013dab 	.word	0x00013dab

0000a788 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    a788:	4803      	ldr	r0, [pc, #12]	; (a798 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    a78a:	2100      	movs	r1, #0
    a78c:	7001      	strb	r1, [r0, #0]
    a78e:	2201      	movs	r2, #1
    a790:	7082      	strb	r2, [r0, #2]
    a792:	7041      	strb	r1, [r0, #1]
    a794:	f000 b802 	b.w	a79c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    a798:	20000178 	.word	0x20000178

0000a79c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    a79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7a0:	b086      	sub	sp, #24
    a7a2:	4669      	mov	r1, sp
    a7a4:	2002      	movs	r0, #2
    a7a6:	f007 fcfb 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a7aa:	b120      	cbz	r0, a7b6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1a>
    a7ac:	f240 1137 	movw	r1, #311	; 0x137
    a7b0:	2030      	movs	r0, #48	; 0x30
    a7b2:	f7f9 ff83 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7b6:	4668      	mov	r0, sp
    a7b8:	f7fa f9ea 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a7bc:	2601      	movs	r6, #1
    a7be:	2500      	movs	r5, #0
    a7c0:	bb10      	cbnz	r0, a808 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x6c>
    a7c2:	9c02      	ldr	r4, [sp, #8]
    a7c4:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    a7c8:	b1c8      	cbz	r0, a7fe <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
    a7ca:	f884 6150 	strb.w	r6, [r4, #336]	; 0x150
    a7ce:	2101      	movs	r1, #1
    a7d0:	4620      	mov	r0, r4
    a7d2:	f009 f839 	bl	13848 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    a7d6:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    a7da:	b180      	cbz	r0, a7fe <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
    a7dc:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    a7e0:	f7f7 fdfe 	bl	23e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    a7e4:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    a7e8:	f7f7 ff62 	bl	26b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    a7ec:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    a7f0:	f7f7 ff3c 	bl	266c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    a7f4:	2800      	cmp	r0, #0
    a7f6:	bf18      	it	ne
    a7f8:	f884 5120 	strbne.w	r5, [r4, #288]	; 0x120
    a7fc:	d010      	beq.n	a820 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x84>
    a7fe:	4668      	mov	r0, sp
    a800:	f7fa f9c6 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a804:	2800      	cmp	r0, #0
    a806:	d0dc      	beq.n	a7c2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x26>
    a808:	4f2c      	ldr	r7, [pc, #176]	; (a8bc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x120>)
    a80a:	707e      	strb	r6, [r7, #1]
    a80c:	a903      	add	r1, sp, #12
    a80e:	2001      	movs	r0, #1
    a810:	f007 fcc6 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a814:	2800      	cmp	r0, #0
    a816:	bf08      	it	eq
    a818:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    a81c:	d02d      	beq.n	a87a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
    a81e:	e027      	b.n	a870 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xd4>
    a820:	f240 2109 	movw	r1, #521	; 0x209
    a824:	2030      	movs	r0, #48	; 0x30
    a826:	f7f9 ff49 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a82a:	9805      	ldr	r0, [sp, #20]
    a82c:	2800      	cmp	r0, #0
    a82e:	bf1c      	itt	ne
    a830:	f890 12ac 	ldrbne.w	r1, [r0, #684]	; 0x2ac
    a834:	2900      	cmpne	r1, #0
    a836:	d020      	beq.n	a87a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
    a838:	8800      	ldrh	r0, [r0, #0]
    a83a:	42b0      	cmp	r0, r6
    a83c:	bf18      	it	ne
    a83e:	f04f 0820 	movne.w	r8, #32
    a842:	d035      	beq.n	a8b0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    a844:	2101      	movs	r1, #1
    a846:	f007 fca1 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a84a:	0004      	movs	r4, r0
    a84c:	d01b      	beq.n	a886 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xea>
    a84e:	f894 02f4 	ldrb.w	r0, [r4, #756]	; 0x2f4
    a852:	f7f7 ff2d 	bl	26b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    a856:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
    a85a:	f894 02f4 	ldrb.w	r0, [r4, #756]	; 0x2f4
    a85e:	f7f7 ff05 	bl	266c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    a862:	f884 82f4 	strb.w	r8, [r4, #756]	; 0x2f4
    a866:	a903      	add	r1, sp, #12
    a868:	2001      	movs	r0, #1
    a86a:	f007 fc99 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a86e:	b1d0      	cbz	r0, a8a6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10a>
    a870:	f240 1103 	movw	r1, #259	; 0x103
    a874:	2030      	movs	r0, #48	; 0x30
    a876:	f7f9 ff21 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a87a:	a803      	add	r0, sp, #12
    a87c:	f7fa f988 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a880:	2800      	cmp	r0, #0
    a882:	d0d2      	beq.n	a82a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x8e>
    a884:	e014      	b.n	a8b0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    a886:	f240 1123 	movw	r1, #291	; 0x123
    a88a:	2030      	movs	r0, #48	; 0x30
    a88c:	f7f9 ff16 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a890:	9805      	ldr	r0, [sp, #20]
    a892:	2800      	cmp	r0, #0
    a894:	bf1c      	itt	ne
    a896:	f890 12ac 	ldrbne.w	r1, [r0, #684]	; 0x2ac
    a89a:	2900      	cmpne	r1, #0
    a89c:	d003      	beq.n	a8a6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10a>
    a89e:	8800      	ldrh	r0, [r0, #0]
    a8a0:	42b0      	cmp	r0, r6
    a8a2:	d1cf      	bne.n	a844 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xa8>
    a8a4:	e004      	b.n	a8b0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    a8a6:	a803      	add	r0, sp, #12
    a8a8:	f7fa f972 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a8ac:	2800      	cmp	r0, #0
    a8ae:	d0ef      	beq.n	a890 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
    a8b0:	707d      	strb	r5, [r7, #1]
    a8b2:	b006      	add	sp, #24
    a8b4:	2000      	movs	r0, #0
    a8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8ba:	0000      	.short	0x0000
    a8bc:	20000178 	.word	0x20000178

0000a8c0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    a8c0:	4901      	ldr	r1, [pc, #4]	; (a8c8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    a8c2:	7008      	strb	r0, [r1, #0]
    a8c4:	4770      	bx	lr
    a8c6:	0000      	.short	0x0000
    a8c8:	20000178 	.word	0x20000178

0000a8cc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    a8cc:	4908      	ldr	r1, [pc, #32]	; (a8f0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    a8ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a8d2:	fbb1 f1f2 	udiv	r1, r1, r2
    a8d6:	b510      	push	{r4, lr}
    a8d8:	f201 11d7 	addw	r1, r1, #471	; 0x1d7
    a8dc:	f008 fdf1 	bl	134c2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    a8e0:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
    a8e4:	bf28      	it	cs
    a8e6:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
    a8ea:	b280      	uxth	r0, r0
    a8ec:	bd10      	pop	{r4, pc}
    a8ee:	0000      	.short	0x0000
    a8f0:	0001527d 	.word	0x0001527d

0000a8f4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8f8:	4c14      	ldr	r4, [pc, #80]	; (a94c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x58>)
    a8fa:	4607      	mov	r7, r0
    a8fc:	e9d4 5801 	ldrd	r5, r8, [r4, #4]
    a900:	f004 fe72 	bl	f5e8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    a904:	4606      	mov	r6, r0
    a906:	7820      	ldrb	r0, [r4, #0]
    a908:	b128      	cbz	r0, a916 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x22>
    a90a:	4632      	mov	r2, r6
    a90c:	4641      	mov	r1, r8
    a90e:	4628      	mov	r0, r5
    a910:	f007 fee3 	bl	126da <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    a914:	4605      	mov	r5, r0
    a916:	6860      	ldr	r0, [r4, #4]
    a918:	4285      	cmp	r5, r0
    a91a:	d005      	beq.n	a928 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x34>
    a91c:	68e1      	ldr	r1, [r4, #12]
    a91e:	1a28      	subs	r0, r5, r0
    a920:	4408      	add	r0, r1
    a922:	60e0      	str	r0, [r4, #12]
    a924:	f7f8 f8d4 	bl	2ad0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    a928:	6065      	str	r5, [r4, #4]
    a92a:	42ae      	cmp	r6, r5
    a92c:	d80a      	bhi.n	a944 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x50>
    a92e:	6978      	ldr	r0, [r7, #20]
    a930:	f641 514c 	movw	r1, #7500	; 0x1d4c
    a934:	4281      	cmp	r1, r0
    a936:	bf9c      	itt	ls
    a938:	7860      	ldrbls	r0, [r4, #1]
    a93a:	2800      	cmpls	r0, #0
    a93c:	bf04      	itt	eq
    a93e:	2001      	moveq	r0, #1
    a940:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    a944:	f04f 0000 	mov.w	r0, #0
    a948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a94c:	20000178 	.word	0x20000178

0000a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    a950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a954:	2500      	movs	r5, #0
    a956:	4604      	mov	r4, r0
    a958:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    a95c:	2906      	cmp	r1, #6
    a95e:	f080 80cf 	bcs.w	ab00 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    a962:	e8df f001 	tbb	[pc, r1]
    a966:	9a07      	.short	0x9a07
    a968:	b39f9803 	.word	0xb39f9803
    a96c:	2004      	movs	r0, #4
    a96e:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
    a972:	e084      	b.n	aa7e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x12e>
    a974:	f8d4 02fc 	ldr.w	r0, [r4, #764]	; 0x2fc
    a978:	2800      	cmp	r0, #0
    a97a:	bf1c      	itt	ne
    a97c:	f894 02c2 	ldrbne.w	r0, [r4, #706]	; 0x2c2
    a980:	2800      	cmpne	r0, #0
    a982:	d06a      	beq.n	aa5a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10a>
    a984:	f894 02ac 	ldrb.w	r0, [r4, #684]	; 0x2ac
    a988:	2803      	cmp	r0, #3
    a98a:	d166      	bne.n	aa5a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10a>
    a98c:	f894 6073 	ldrb.w	r6, [r4, #115]	; 0x73
    a990:	f00a fd52 	bl	15438 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    a994:	4601      	mov	r1, r0
    a996:	f894 026d 	ldrb.w	r0, [r4, #621]	; 0x26d
    a99a:	280c      	cmp	r0, #12
    a99c:	d304      	bcc.n	a9a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    a99e:	f44f 7157 	mov.w	r1, #860	; 0x35c
    a9a2:	2006      	movs	r0, #6
    a9a4:	f7f9 fe8a 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9a8:	4a58      	ldr	r2, [pc, #352]	; (ab0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
    a9aa:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    a9ae:	4401      	add	r1, r0
    a9b0:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    a9b4:	fa1f fa80 	uxth.w	sl, r0
    a9b8:	fa1f f881 	uxth.w	r8, r1
    a9bc:	4630      	mov	r0, r6
    a9be:	f004 ff1d 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a9c2:	f8d4 12fc 	ldr.w	r1, [r4, #764]	; 0x2fc
    a9c6:	f016 0f0c 	tst.w	r6, #12
    a9ca:	eba1 0900 	sub.w	r9, r1, r0
    a9ce:	bf0a      	itet	eq
    a9d0:	4630      	moveq	r0, r6
    a9d2:	f64e 2060 	movwne	r0, #60000	; 0xea60
    a9d6:	f004 ff5f 	bleq	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a9da:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    a9de:	fbb0 f0f7 	udiv	r0, r0, r7
    a9e2:	eba9 0900 	sub.w	r9, r9, r0
    a9e6:	4630      	mov	r0, r6
    a9e8:	f004 ff08 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a9ec:	f8d4 1280 	ldr.w	r1, [r4, #640]	; 0x280
    a9f0:	f016 0f0c 	tst.w	r6, #12
    a9f4:	eba1 0b00 	sub.w	fp, r1, r0
    a9f8:	bf0a      	itet	eq
    a9fa:	4630      	moveq	r0, r6
    a9fc:	f64e 2060 	movwne	r0, #60000	; 0xea60
    aa00:	f004 ff4a 	bleq	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    aa04:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    aa08:	4408      	add	r0, r1
    aa0a:	fbb0 f0f7 	udiv	r0, r0, r7
    aa0e:	ebab 0000 	sub.w	r0, fp, r0
    aa12:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    aa16:	fb01 f108 	mul.w	r1, r1, r8
    aa1a:	fbb1 f1fa 	udiv	r1, r1, sl
    aa1e:	2229      	movs	r2, #41	; 0x29
    aa20:	eb02 0050 	add.w	r0, r2, r0, lsr #1
    aa24:	3160      	adds	r1, #96	; 0x60
    aa26:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
    aa2a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    aa2e:	454a      	cmp	r2, r9
    aa30:	d801      	bhi.n	aa36 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe6>
    aa32:	4548      	cmp	r0, r9
    aa34:	d201      	bcs.n	aa3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    aa36:	f7f9 f953 	bl	3ce0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    aa3a:	4641      	mov	r1, r8
    aa3c:	6960      	ldr	r0, [r4, #20]
    aa3e:	f006 f90c 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    aa42:	6961      	ldr	r1, [r4, #20]
    aa44:	f641 524c 	movw	r2, #7500	; 0x1d4c
    aa48:	4291      	cmp	r1, r2
    aa4a:	bf34      	ite	cc
    aa4c:	2102      	movcc	r1, #2
    aa4e:	2100      	movcs	r1, #0
    aa50:	4408      	add	r0, r1
    aa52:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
    aa56:	f884 52c2 	strb.w	r5, [r4, #706]	; 0x2c2
    aa5a:	482d      	ldr	r0, [pc, #180]	; (ab10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>)
    aa5c:	7840      	ldrb	r0, [r0, #1]
    aa5e:	2800      	cmp	r0, #0
    aa60:	d184      	bne.n	a96c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c>
    aa62:	9500      	str	r5, [sp, #0]
    aa64:	f8b4 1274 	ldrh.w	r1, [r4, #628]	; 0x274
    aa68:	2301      	movs	r3, #1
    aa6a:	2200      	movs	r2, #0
    aa6c:	4620      	mov	r0, r4
    aa6e:	f000 f927 	bl	acc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
    aa72:	b120      	cbz	r0, aa7e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x12e>
    aa74:	f240 61cf 	movw	r1, #1743	; 0x6cf
    aa78:	2030      	movs	r0, #48	; 0x30
    aa7a:	f7f9 fe1f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa7e:	f004 fdbf 	bl	f600 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    aa82:	f7f7 ff55 	bl	2930 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    aa86:	f8a4 52f2 	strh.w	r5, [r4, #754]	; 0x2f2
    aa8a:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    aa8e:	f8a4 02be 	strh.w	r0, [r4, #702]	; 0x2be
    aa92:	f884 52c1 	strb.w	r5, [r4, #705]	; 0x2c1
    aa96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa9a:	2003      	movs	r0, #3
    aa9c:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
    aaa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaa4:	f004 fda6 	bl	f5f4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    aaa8:	f8c4 02fc 	str.w	r0, [r4, #764]	; 0x2fc
    aaac:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    aab0:	f004 fea4 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    aab4:	f8d4 12fc 	ldr.w	r1, [r4, #764]	; 0x2fc
    aab8:	1a09      	subs	r1, r1, r0
    aaba:	4815      	ldr	r0, [pc, #84]	; (ab10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>)
    aabc:	6842      	ldr	r2, [r0, #4]
    aabe:	440a      	add	r2, r1
    aac0:	6042      	str	r2, [r0, #4]
    aac2:	6882      	ldr	r2, [r0, #8]
    aac4:	4411      	add	r1, r2
    aac6:	6081      	str	r1, [r0, #8]
    aac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aacc:	4625      	mov	r5, r4
    aace:	f894 4073 	ldrb.w	r4, [r4, #115]	; 0x73
    aad2:	4620      	mov	r0, r4
    aad4:	f004 fee0 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    aad8:	f64d 7141 	movw	r1, #57153	; 0xdf41
    aadc:	4408      	add	r0, r1
    aade:	fbb0 f0f7 	udiv	r0, r0, r7
    aae2:	f014 010c 	ands.w	r1, r4, #12
    aae6:	bf18      	it	ne
    aae8:	2128      	movne	r1, #40	; 0x28
    aaea:	4408      	add	r0, r1
    aaec:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
    aaf0:	4628      	mov	r0, r5
    aaf2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aaf6:	f240 111b 	movw	r1, #283	; 0x11b
    aafa:	f008 bca1 	b.w	13440 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    aafe:	bf00      	nop
    ab00:	f240 715b 	movw	r1, #1883	; 0x75b
    ab04:	2030      	movs	r0, #48	; 0x30
    ab06:	f7f9 fdd9 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab0a:	0000      	.short	0x0000
    ab0c:	00013fc6 	.word	0x00013fc6
    ab10:	20000178 	.word	0x20000178

0000ab14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    ab14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab18:	2600      	movs	r6, #0
    ab1a:	460c      	mov	r4, r1
    ab1c:	4681      	mov	r9, r0
    ab1e:	2701      	movs	r7, #1
    ab20:	b142      	cbz	r2, ab34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x20>
    ab22:	2a01      	cmp	r2, #1
    ab24:	d063      	beq.n	abee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xda>
    ab26:	2a02      	cmp	r2, #2
    ab28:	d067      	beq.n	abfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    ab2a:	f240 7185 	movw	r1, #1925	; 0x785
    ab2e:	2030      	movs	r0, #48	; 0x30
    ab30:	f7f9 fdc4 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab34:	f004 fd58 	bl	f5e8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    ab38:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    ab3c:	4682      	mov	sl, r0
    ab3e:	e9d4 584e 	ldrd	r5, r8, [r4, #312]	; 0x138
    ab42:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ab46:	f880 627f 	strb.w	r6, [r0, #639]	; 0x27f
    ab4a:	f884 6120 	strb.w	r6, [r4, #288]	; 0x120
    ab4e:	f884 7121 	strb.w	r7, [r4, #289]	; 0x121
    ab52:	2101      	movs	r1, #1
    ab54:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ab58:	f7fb ffac 	bl	6ab4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ab5c:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ab60:	f8c0 52e0 	str.w	r5, [r0, #736]	; 0x2e0
    ab64:	f8c0 82e4 	str.w	r8, [r0, #740]	; 0x2e4
    ab68:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    ab6c:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    ab70:	f881 02f4 	strb.w	r0, [r1, #756]	; 0x2f4
    ab74:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ab78:	f8c0 a2f8 	str.w	sl, [r0, #760]	; 0x2f8
    ab7c:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ab80:	e9c0 58ba 	strd	r5, r8, [r0, #744]	; 0x2e8
    ab84:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
    ab88:	f885 62ac 	strb.w	r6, [r5, #684]	; 0x2ac
    ab8c:	2300      	movs	r3, #0
    ab8e:	f8a5 62f0 	strh.w	r6, [r5, #752]	; 0x2f0
    ab92:	461a      	mov	r2, r3
    ab94:	4619      	mov	r1, r3
    ab96:	4628      	mov	r0, r5
    ab98:	9600      	str	r6, [sp, #0]
    ab9a:	f000 f891 	bl	acc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
    ab9e:	2800      	cmp	r0, #0
    aba0:	d161      	bne.n	ac66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x152>
    aba2:	f8c5 62a8 	str.w	r6, [r5, #680]	; 0x2a8
    aba6:	f8c5 62a0 	str.w	r6, [r5, #672]	; 0x2a0
    abaa:	f885 72ac 	strb.w	r7, [r5, #684]	; 0x2ac
    abae:	f8a5 62be 	strh.w	r6, [r5, #702]	; 0x2be
    abb2:	f8a5 62bc 	strh.w	r6, [r5, #700]	; 0x2bc
    abb6:	f885 62c1 	strb.w	r6, [r5, #705]	; 0x2c1
    abba:	f8b5 0094 	ldrh.w	r0, [r5, #148]	; 0x94
    abbe:	1e40      	subs	r0, r0, #1
    abc0:	f8a5 0094 	strh.w	r0, [r5, #148]	; 0x94
    abc4:	f8a5 62f2 	strh.w	r6, [r5, #754]	; 0x2f2
    abc8:	f004 fd1a 	bl	f600 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    abcc:	f7f7 feb0 	bl	2930 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    abd0:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    abd4:	464a      	mov	r2, r9
    abd6:	4939      	ldr	r1, [pc, #228]	; (acbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>)
    abd8:	f7f7 fd38 	bl	264c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    abdc:	2800      	cmp	r0, #0
    abde:	bf18      	it	ne
    abe0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abe4:	f240 716e 	movw	r1, #1902	; 0x76e
    abe8:	2030      	movs	r0, #48	; 0x30
    abea:	f7f9 fd67 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abee:	f004 fcfb 	bl	f5e8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    abf2:	f8c9 02f8 	str.w	r0, [r9, #760]	; 0x2f8
    abf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abfa:	f8d9 a2f8 	ldr.w	sl, [r9, #760]	; 0x2f8
    abfe:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    ac02:	e9d4 584e 	ldrd	r5, r8, [r4, #312]	; 0x138
    ac06:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    ac0a:	2001      	movs	r0, #1
    ac0c:	f881 027f 	strb.w	r0, [r1, #639]	; 0x27f
    ac10:	f884 6120 	strb.w	r6, [r4, #288]	; 0x120
    ac14:	f884 7121 	strb.w	r7, [r4, #289]	; 0x121
    ac18:	2101      	movs	r1, #1
    ac1a:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ac1e:	f7fb ff49 	bl	6ab4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ac22:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ac26:	f8c0 52e0 	str.w	r5, [r0, #736]	; 0x2e0
    ac2a:	f8c0 82e4 	str.w	r8, [r0, #740]	; 0x2e4
    ac2e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    ac32:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    ac36:	f881 02f4 	strb.w	r0, [r1, #756]	; 0x2f4
    ac3a:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ac3e:	f8c0 a2f8 	str.w	sl, [r0, #760]	; 0x2f8
    ac42:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    ac46:	e9c0 58ba 	strd	r5, r8, [r0, #744]	; 0x2e8
    ac4a:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
    ac4e:	f885 62ac 	strb.w	r6, [r5, #684]	; 0x2ac
    ac52:	2300      	movs	r3, #0
    ac54:	f8a5 62f0 	strh.w	r6, [r5, #752]	; 0x2f0
    ac58:	461a      	mov	r2, r3
    ac5a:	4619      	mov	r1, r3
    ac5c:	4628      	mov	r0, r5
    ac5e:	9600      	str	r6, [sp, #0]
    ac60:	f000 f82e 	bl	acc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
    ac64:	b120      	cbz	r0, ac70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x15c>
    ac66:	f240 211d 	movw	r1, #541	; 0x21d
    ac6a:	2030      	movs	r0, #48	; 0x30
    ac6c:	f7f9 fd26 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac70:	f8c5 62a8 	str.w	r6, [r5, #680]	; 0x2a8
    ac74:	f8c5 62a0 	str.w	r6, [r5, #672]	; 0x2a0
    ac78:	f885 72ac 	strb.w	r7, [r5, #684]	; 0x2ac
    ac7c:	f8a5 62be 	strh.w	r6, [r5, #702]	; 0x2be
    ac80:	f8a5 62bc 	strh.w	r6, [r5, #700]	; 0x2bc
    ac84:	f885 62c1 	strb.w	r6, [r5, #705]	; 0x2c1
    ac88:	f8b5 0094 	ldrh.w	r0, [r5, #148]	; 0x94
    ac8c:	1e40      	subs	r0, r0, #1
    ac8e:	f8a5 0094 	strh.w	r0, [r5, #148]	; 0x94
    ac92:	f8a5 62f2 	strh.w	r6, [r5, #754]	; 0x2f2
    ac96:	f004 fcb3 	bl	f600 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ac9a:	f7f7 fe49 	bl	2930 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ac9e:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    aca2:	464a      	mov	r2, r9
    aca4:	4905      	ldr	r1, [pc, #20]	; (acbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>)
    aca6:	f7f7 fcd1 	bl	264c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    acaa:	2800      	cmp	r0, #0
    acac:	bf18      	it	ne
    acae:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acb2:	f240 717f 	movw	r1, #1919	; 0x77f
    acb6:	2030      	movs	r0, #48	; 0x30
    acb8:	f7f9 fd00 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acbc:	0000b369 	.word	0x0000b369
    acc0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acc4:	b08f      	sub	sp, #60	; 0x3c
    acc6:	4604      	mov	r4, r0
    acc8:	2000      	movs	r0, #0
    acca:	9002      	str	r0, [sp, #8]
    accc:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    acd0:	469b      	mov	fp, r3
    acd2:	4689      	mov	r9, r1
    acd4:	930b      	str	r3, [sp, #44]	; 0x2c
    acd6:	9007      	str	r0, [sp, #28]
    acd8:	f00a fbae 	bl	15438 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    acdc:	4601      	mov	r1, r0
    acde:	f894 026d 	ldrb.w	r0, [r4, #621]	; 0x26d
    ace2:	280c      	cmp	r0, #12
    ace4:	d275      	bcs.n	add2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2be>
    ace6:	4afb      	ldr	r2, [pc, #1004]	; (b0d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c0>)
    ace8:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    acec:	4408      	add	r0, r1
    acee:	b285      	uxth	r5, r0
    acf0:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    acf4:	280e      	cmp	r0, #14
    acf6:	bf0c      	ite	eq
    acf8:	2001      	moveq	r0, #1
    acfa:	2000      	movne	r0, #0
    acfc:	9008      	str	r0, [sp, #32]
    acfe:	9811      	ldr	r0, [sp, #68]	; 0x44
    ad00:	2800      	cmp	r0, #0
    ad02:	bf04      	itt	eq
    ad04:	f894 02ac 	ldrbeq.w	r0, [r4, #684]	; 0x2ac
    ad08:	2803      	cmpeq	r0, #3
    ad0a:	d128      	bne.n	ad5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
    ad0c:	9808      	ldr	r0, [sp, #32]
    ad0e:	b330      	cbz	r0, ad5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
    ad10:	f8b4 031c 	ldrh.w	r0, [r4, #796]	; 0x31c
    ad14:	4548      	cmp	r0, r9
    ad16:	d122      	bne.n	ad5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
    ad18:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
    ad1c:	f8c4 02a0 	str.w	r0, [r4, #672]	; 0x2a0
    ad20:	6960      	ldr	r0, [r4, #20]
    ad22:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
    ad26:	f8b4 02f2 	ldrh.w	r0, [r4, #754]	; 0x2f2
    ad2a:	f8b4 1286 	ldrh.w	r1, [r4, #646]	; 0x286
    ad2e:	4408      	add	r0, r1
    ad30:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
    ad34:	4620      	mov	r0, r4
    ad36:	f009 f952 	bl	13fde <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    ad3a:	f8d4 0320 	ldr.w	r0, [r4, #800]	; 0x320
    ad3e:	62a0      	str	r0, [r4, #40]	; 0x28
    ad40:	f8b4 031e 	ldrh.w	r0, [r4, #798]	; 0x31e
    ad44:	84a0      	strh	r0, [r4, #36]	; 0x24
    ad46:	f8d4 0324 	ldr.w	r0, [r4, #804]	; 0x324
    ad4a:	6160      	str	r0, [r4, #20]
    ad4c:	f8b4 0328 	ldrh.w	r0, [r4, #808]	; 0x328
    ad50:	83a0      	strh	r0, [r4, #28]
    ad52:	f8b4 032a 	ldrh.w	r0, [r4, #810]	; 0x32a
    ad56:	83e0      	strh	r0, [r4, #30]
    ad58:	2002      	movs	r0, #2
    ad5a:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
    ad5e:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    ad62:	f504 7632 	add.w	r6, r4, #712	; 0x2c8
    ad66:	eba9 0000 	sub.w	r0, r9, r0
    ad6a:	fa0f f880 	sxth.w	r8, r0
    ad6e:	f8b4 02f0 	ldrh.w	r0, [r4, #752]	; 0x2f0
    ad72:	eba9 0000 	sub.w	r0, r9, r0
    ad76:	b207      	sxth	r7, r0
    ad78:	2f00      	cmp	r7, #0
    ad7a:	da0b      	bge.n	ad94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    ad7c:	f8d4 02e0 	ldr.w	r0, [r4, #736]	; 0x2e0
    ad80:	f8d4 12e4 	ldr.w	r1, [r4, #740]	; 0x2e4
    ad84:	4647      	mov	r7, r8
    ad86:	e9c4 01ba 	strd	r0, r1, [r4, #744]	; 0x2e8
    ad8a:	2001      	movs	r0, #1
    ad8c:	900b      	str	r0, [sp, #44]	; 0x2c
    ad8e:	2000      	movs	r0, #0
    ad90:	f884 02c3 	strb.w	r0, [r4, #707]	; 0x2c3
    ad94:	48d0      	ldr	r0, [pc, #832]	; (b0d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
    ad96:	f04f 0a00 	mov.w	sl, #0
    ad9a:	7880      	ldrb	r0, [r0, #2]
    ad9c:	2800      	cmp	r0, #0
    ad9e:	d07c      	beq.n	ae9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x386>
    ada0:	f7f8 ffbc 	bl	3d1c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    ada4:	2800      	cmp	r0, #0
    ada6:	d078      	beq.n	ae9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x386>
    ada8:	f8b4 0298 	ldrh.w	r0, [r4, #664]	; 0x298
    adac:	2802      	cmp	r0, #2
    adae:	d37c      	bcc.n	aeaa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
    adb0:	f894 02ac 	ldrb.w	r0, [r4, #684]	; 0x2ac
    adb4:	2802      	cmp	r0, #2
    adb6:	d078      	beq.n	aeaa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
    adb8:	f894 02c2 	ldrb.w	r0, [r4, #706]	; 0x2c2
    adbc:	2800      	cmp	r0, #0
    adbe:	d174      	bne.n	aeaa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
    adc0:	6960      	ldr	r0, [r4, #20]
    adc2:	f641 514c 	movw	r1, #7500	; 0x1d4c
    adc6:	4288      	cmp	r0, r1
    adc8:	d36f      	bcc.n	aeaa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
    adca:	f894 126d 	ldrb.w	r1, [r4, #621]	; 0x26d
    adce:	290c      	cmp	r1, #12
    add0:	d304      	bcc.n	addc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
    add2:	f44f 7157 	mov.w	r1, #860	; 0x35c
    add6:	2006      	movs	r0, #6
    add8:	f7f9 fc70 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    addc:	4abd      	ldr	r2, [pc, #756]	; (b0d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c0>)
    adde:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    ade2:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
    ade6:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    adea:	b289      	uxth	r1, r1
    adec:	460d      	mov	r5, r1
    adee:	2a01      	cmp	r2, #1
    adf0:	d016      	beq.n	ae20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30c>
    adf2:	f005 ff32 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    adf6:	4601      	mov	r1, r0
    adf8:	6962      	ldr	r2, [r4, #20]
    adfa:	f641 504c 	movw	r0, #7500	; 0x1d4c
    adfe:	4282      	cmp	r2, r0
    ae00:	bf2c      	ite	cs
    ae02:	2000      	movcs	r0, #0
    ae04:	2002      	movcc	r0, #2
    ae06:	4408      	add	r0, r1
    ae08:	f8b4 2286 	ldrh.w	r2, [r4, #646]	; 0x286
    ae0c:	4442      	add	r2, r8
    ae0e:	1bd1      	subs	r1, r2, r7
    ae10:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
    ae14:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
    ae18:	1a82      	subs	r2, r0, r2
    ae1a:	fb01 aa02 	mla	sl, r1, r2, sl
    ae1e:	e041      	b.n	aea4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    ae20:	f894 00a2 	ldrb.w	r0, [r4, #162]	; 0xa2
    ae24:	2803      	cmp	r0, #3
    ae26:	d054      	beq.n	aed2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3be>
    ae28:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    ae2c:	f894 027f 	ldrb.w	r0, [r4, #639]	; 0x27f
    ae30:	f007 fd2c 	bl	1288c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    ae34:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ae36:	4408      	add	r0, r1
    ae38:	9006      	str	r0, [sp, #24]
    ae3a:	4629      	mov	r1, r5
    ae3c:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    ae40:	f005 ff0b 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ae44:	f8d4 22a0 	ldr.w	r2, [r4, #672]	; 0x2a0
    ae48:	f8d4 12a8 	ldr.w	r1, [r4, #680]	; 0x2a8
    ae4c:	1a82      	subs	r2, r0, r2
    ae4e:	fb01 aa02 	mla	sl, r1, r2, sl
    ae52:	f8c4 02a0 	str.w	r0, [r4, #672]	; 0x2a0
    ae56:	4629      	mov	r1, r5
    ae58:	9806      	ldr	r0, [sp, #24]
    ae5a:	f005 fefe 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ae5e:	f8d4 12b0 	ldr.w	r1, [r4, #688]	; 0x2b0
    ae62:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
    ae66:	1a41      	subs	r1, r0, r1
    ae68:	448a      	add	sl, r1
    ae6a:	4629      	mov	r1, r5
    ae6c:	6960      	ldr	r0, [r4, #20]
    ae6e:	f005 fef4 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ae72:	6962      	ldr	r2, [r4, #20]
    ae74:	f641 514c 	movw	r1, #7500	; 0x1d4c
    ae78:	428a      	cmp	r2, r1
    ae7a:	bf34      	ite	cc
    ae7c:	2102      	movcc	r1, #2
    ae7e:	2100      	movcs	r1, #0
    ae80:	4408      	add	r0, r1
    ae82:	f8b4 2286 	ldrh.w	r2, [r4, #646]	; 0x286
    ae86:	4442      	add	r2, r8
    ae88:	1bd1      	subs	r1, r2, r7
    ae8a:	f8d4 22a8 	ldr.w	r2, [r4, #680]	; 0x2a8
    ae8e:	1a89      	subs	r1, r1, r2
    ae90:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
    ae94:	1a82      	subs	r2, r0, r2
    ae96:	1e49      	subs	r1, r1, #1
    ae98:	e000      	b.n	ae9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x388>
    ae9a:	e006      	b.n	aeaa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
    ae9c:	fb01 aa02 	mla	sl, r1, r2, sl
    aea0:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
    aea4:	2001      	movs	r0, #1
    aea6:	f884 02c2 	strb.w	r0, [r4, #706]	; 0x2c2
    aeaa:	f8cd a010 	str.w	sl, [sp, #16]
    aeae:	f894 02ac 	ldrb.w	r0, [r4, #684]	; 0x2ac
    aeb2:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
    aeb6:	b190      	cbz	r0, aede <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ca>
    aeb8:	2801      	cmp	r0, #1
    aeba:	f000 810f 	beq.w	b0dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    aebe:	2802      	cmp	r0, #2
    aec0:	d07d      	beq.n	afbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4aa>
    aec2:	2803      	cmp	r0, #3
    aec4:	f000 813c 	beq.w	b140 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x62c>
    aec8:	f240 514b 	movw	r1, #1355	; 0x54b
    aecc:	2030      	movs	r0, #48	; 0x30
    aece:	f7f9 fbf5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aed2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    aed4:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    aed8:	4408      	add	r0, r1
    aeda:	9006      	str	r0, [sp, #24]
    aedc:	e7ad      	b.n	ae3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x326>
    aede:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    aee2:	f894 027f 	ldrb.w	r0, [r4, #639]	; 0x27f
    aee6:	f007 fcd1 	bl	1288c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    aeea:	4607      	mov	r7, r0
    aeec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    aeee:	4629      	mov	r1, r5
    aef0:	4438      	add	r0, r7
    aef2:	f005 feb2 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    aef6:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
    aefa:	4629      	mov	r1, r5
    aefc:	6960      	ldr	r0, [r4, #20]
    aefe:	f005 feac 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    af02:	6962      	ldr	r2, [r4, #20]
    af04:	f641 514c 	movw	r1, #7500	; 0x1d4c
    af08:	428a      	cmp	r2, r1
    af0a:	bf34      	ite	cc
    af0c:	2102      	movcc	r1, #2
    af0e:	2100      	movcs	r1, #0
    af10:	4408      	add	r0, r1
    af12:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
    af16:	a901      	add	r1, sp, #4
    af18:	a807      	add	r0, sp, #28
    af1a:	f004 fa85 	bl	f428 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    af1e:	e9d4 01ba 	ldrd	r0, r1, [r4, #744]	; 0x2e8
    af22:	9b01      	ldr	r3, [sp, #4]
    af24:	9a07      	ldr	r2, [sp, #28]
    af26:	f7f7 febd 	bl	2ca4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    af2a:	9006      	str	r0, [sp, #24]
    af2c:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    af30:	4628      	mov	r0, r5
    af32:	f004 fcb1 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    af36:	f64d 7141 	movw	r1, #57153	; 0xdf41
    af3a:	4408      	add	r0, r1
    af3c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    af40:	fbb0 f0f8 	udiv	r0, r0, r8
    af44:	f015 010c 	ands.w	r1, r5, #12
    af48:	bf18      	it	ne
    af4a:	2128      	movne	r1, #40	; 0x28
    af4c:	4408      	add	r0, r1
    af4e:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
    af52:	f240 111b 	movw	r1, #283	; 0x11b
    af56:	4620      	mov	r0, r4
    af58:	f008 fa72 	bl	13440 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    af5c:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
    af60:	9002      	str	r0, [sp, #8]
    af62:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    af66:	f004 fc97 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    af6a:	4450      	add	r0, sl
    af6c:	fbb0 f0f8 	udiv	r0, r0, r8
    af70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    af72:	9a02      	ldr	r2, [sp, #8]
    af74:	4439      	add	r1, r7
    af76:	1a08      	subs	r0, r1, r0
    af78:	f8d4 12b0 	ldr.w	r1, [r4, #688]	; 0x2b0
    af7c:	1a40      	subs	r0, r0, r1
    af7e:	4410      	add	r0, r2
    af80:	9a06      	ldr	r2, [sp, #24]
    af82:	3820      	subs	r0, #32
    af84:	1a80      	subs	r0, r0, r2
    af86:	9002      	str	r0, [sp, #8]
    af88:	0048      	lsls	r0, r1, #1
    af8a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    af8c:	3060      	adds	r0, #96	; 0x60
    af8e:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    af92:	1847      	adds	r7, r0, r1
    af94:	f015 0f0c 	tst.w	r5, #12
    af98:	bf0a      	itet	eq
    af9a:	4628      	moveq	r0, r5
    af9c:	f64e 2060 	movwne	r0, #60000	; 0xea60
    afa0:	f004 fc7a 	bleq	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    afa4:	4450      	add	r0, sl
    afa6:	fbb0 f8f8 	udiv	r8, r0, r8
    afaa:	4628      	mov	r0, r5
    afac:	f004 fc26 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    afb0:	4440      	add	r0, r8
    afb2:	4438      	add	r0, r7
    afb4:	f100 0122 	add.w	r1, r0, #34	; 0x22
    afb8:	4847      	ldr	r0, [pc, #284]	; (b0d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
    afba:	6101      	str	r1, [r0, #16]
    afbc:	e000      	b.n	afc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ac>
    afbe:	e00c      	b.n	afda <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c6>
    afc0:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
    afc4:	9902      	ldr	r1, [sp, #8]
    afc6:	1a08      	subs	r0, r1, r0
    afc8:	f5b0 7fec 	cmp.w	r0, #472	; 0x1d8
    afcc:	f080 8133 	bcs.w	b236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
    afd0:	f240 41e4 	movw	r1, #1252	; 0x4e4
    afd4:	2030      	movs	r0, #48	; 0x30
    afd6:	f7f9 fb71 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    afdc:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    afe0:	4408      	add	r0, r1
    afe2:	4629      	mov	r1, r5
    afe4:	f005 fe39 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    afe8:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
    afec:	4629      	mov	r1, r5
    afee:	6960      	ldr	r0, [r4, #20]
    aff0:	f005 fe33 	bl	10c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    aff4:	6962      	ldr	r2, [r4, #20]
    aff6:	f641 514c 	movw	r1, #7500	; 0x1d4c
    affa:	428a      	cmp	r2, r1
    affc:	bf34      	ite	cc
    affe:	2102      	movcc	r1, #2
    b000:	2100      	movcs	r1, #0
    b002:	4408      	add	r0, r1
    b004:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
    b008:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    b00c:	4628      	mov	r0, r5
    b00e:	f004 fc43 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b012:	f64d 7141 	movw	r1, #57153	; 0xdf41
    b016:	4401      	add	r1, r0
    b018:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    b01c:	fbb1 f0f8 	udiv	r0, r1, r8
    b020:	f015 010c 	ands.w	r1, r5, #12
    b024:	bf18      	it	ne
    b026:	2128      	movne	r1, #40	; 0x28
    b028:	4408      	add	r0, r1
    b02a:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
    b02e:	f240 111b 	movw	r1, #283	; 0x11b
    b032:	4620      	mov	r0, r4
    b034:	f008 fa04 	bl	13440 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    b038:	f8b4 0286 	ldrh.w	r0, [r4, #646]	; 0x286
    b03c:	b9e0      	cbnz	r0, b078 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    b03e:	f1bb 0f00 	cmp.w	fp, #0
    b042:	d019      	beq.n	b078 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    b044:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    b048:	4628      	mov	r0, r5
    b04a:	f004 fc25 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b04e:	eb00 010a 	add.w	r1, r0, sl
    b052:	fbb1 f0f8 	udiv	r0, r1, r8
    b056:	f8d4 12b0 	ldr.w	r1, [r4, #688]	; 0x2b0
    b05a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b05c:	4408      	add	r0, r1
    b05e:	f8d4 12a4 	ldr.w	r1, [r4, #676]	; 0x2a4
    b062:	4411      	add	r1, r2
    b064:	1a0f      	subs	r7, r1, r0
    b066:	4628      	mov	r0, r5
    b068:	f004 fbc8 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b06c:	f8d4 12fc 	ldr.w	r1, [r4, #764]	; 0x2fc
    b070:	1a08      	subs	r0, r1, r0
    b072:	4438      	add	r0, r7
    b074:	3820      	subs	r0, #32
    b076:	e006      	b.n	b086 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x572>
    b078:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    b07a:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    b07e:	4408      	add	r0, r1
    b080:	f8d4 12b0 	ldr.w	r1, [r4, #688]	; 0x2b0
    b084:	1a40      	subs	r0, r0, r1
    b086:	9002      	str	r0, [sp, #8]
    b088:	f8d4 22a8 	ldr.w	r2, [r4, #680]	; 0x2a8
    b08c:	f8d4 12a0 	ldr.w	r1, [r4, #672]	; 0x2a0
    b090:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
    b094:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    b098:	fb01 0002 	mla	r0, r1, r2, r0
    b09c:	0040      	lsls	r0, r0, #1
    b09e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    b0a0:	3060      	adds	r0, #96	; 0x60
    b0a2:	1847      	adds	r7, r0, r1
    b0a4:	f015 0f0c 	tst.w	r5, #12
    b0a8:	bf0a      	itet	eq
    b0aa:	4628      	moveq	r0, r5
    b0ac:	f64e 2060 	movwne	r0, #60000	; 0xea60
    b0b0:	f004 fbf2 	bleq	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b0b4:	eb00 010a 	add.w	r1, r0, sl
    b0b8:	fbb1 f8f8 	udiv	r8, r1, r8
    b0bc:	4628      	mov	r0, r5
    b0be:	f004 fb9d 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b0c2:	4905      	ldr	r1, [pc, #20]	; (b0d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
    b0c4:	4440      	add	r0, r8
    b0c6:	4438      	add	r0, r7
    b0c8:	6108      	str	r0, [r1, #16]
    b0ca:	2001      	movs	r0, #1
    b0cc:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
    b0d0:	e0b1      	b.n	b236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
    b0d2:	0000      	.short	0x0000
    b0d4:	00013fc6 	.word	0x00013fc6
    b0d8:	20000178 	.word	0x20000178
    b0dc:	6961      	ldr	r1, [r4, #20]
    b0de:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
    b0e2:	1a09      	subs	r1, r1, r0
    b0e4:	4379      	muls	r1, r7
    b0e6:	9102      	str	r1, [sp, #8]
    b0e8:	f8b4 1286 	ldrh.w	r1, [r4, #646]	; 0x286
    b0ec:	f8d4 c2a0 	ldr.w	ip, [r4, #672]	; 0x2a0
    b0f0:	eb01 0208 	add.w	r2, r1, r8
    b0f4:	f8d4 12a8 	ldr.w	r1, [r4, #680]	; 0x2a8
    b0f8:	f8d4 32b0 	ldr.w	r3, [r4, #688]	; 0x2b0
    b0fc:	1a52      	subs	r2, r2, r1
    b0fe:	fb0c 3101 	mla	r1, ip, r1, r3
    b102:	1e52      	subs	r2, r2, #1
    b104:	fb02 1000 	mla	r0, r2, r0, r1
    b108:	0040      	lsls	r0, r0, #1
    b10a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    b10c:	3060      	adds	r0, #96	; 0x60
    b10e:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    b112:	1847      	adds	r7, r0, r1
    b114:	f015 0f0c 	tst.w	r5, #12
    b118:	bf0a      	itet	eq
    b11a:	4628      	moveq	r0, r5
    b11c:	f64e 2060 	movwne	r0, #60000	; 0xea60
    b120:	f004 fbba 	bleq	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b124:	eb00 010a 	add.w	r1, r0, sl
    b128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b12c:	fbb1 f8f0 	udiv	r8, r1, r0
    b130:	4628      	mov	r0, r5
    b132:	f004 fb63 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b136:	498a      	ldr	r1, [pc, #552]	; (b360 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
    b138:	4440      	add	r0, r8
    b13a:	4438      	add	r0, r7
    b13c:	6108      	str	r0, [r1, #16]
    b13e:	e07a      	b.n	b236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
    b140:	6960      	ldr	r0, [r4, #20]
    b142:	4378      	muls	r0, r7
    b144:	9002      	str	r0, [sp, #8]
    b146:	f1bb 0f00 	cmp.w	fp, #0
    b14a:	d007      	beq.n	b15c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x648>
    b14c:	f8b4 1286 	ldrh.w	r1, [r4, #646]	; 0x286
    b150:	2900      	cmp	r1, #0
    b152:	bf04      	itt	eq
    b154:	2100      	moveq	r1, #0
    b156:	f884 12c3 	strbeq.w	r1, [r4, #707]	; 0x2c3
    b15a:	d003      	beq.n	b164 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x650>
    b15c:	f894 12c3 	ldrb.w	r1, [r4, #707]	; 0x2c3
    b160:	2900      	cmp	r1, #0
    b162:	d168      	bne.n	b236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
    b164:	f8d4 12b4 	ldr.w	r1, [r4, #692]	; 0x2b4
    b168:	fb07 0011 	mls	r0, r7, r1, r0
    b16c:	9002      	str	r0, [sp, #8]
    b16e:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    b172:	2825      	cmp	r0, #37	; 0x25
    b174:	bf1c      	itt	ne
    b176:	f894 009e 	ldrbne.w	r0, [r4, #158]	; 0x9e
    b17a:	2825      	cmpne	r0, #37	; 0x25
    b17c:	d10b      	bne.n	b196 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x682>
    b17e:	f8b4 031c 	ldrh.w	r0, [r4, #796]	; 0x31c
    b182:	eba9 0000 	sub.w	r0, r9, r0
    b186:	b200      	sxth	r0, r0
    b188:	2800      	cmp	r0, #0
    b18a:	db04      	blt.n	b196 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x682>
    b18c:	f894 031f 	ldrb.w	r0, [r4, #799]	; 0x31f
    b190:	2800      	cmp	r0, #0
    b192:	bf18      	it	ne
    b194:	9007      	strne	r0, [sp, #28]
    b196:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b198:	b308      	cbz	r0, b1de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ca>
    b19a:	f8b4 0286 	ldrh.w	r0, [r4, #646]	; 0x286
    b19e:	b9f0      	cbnz	r0, b1de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ca>
    b1a0:	f8d4 02fc 	ldr.w	r0, [r4, #764]	; 0x2fc
    b1a4:	2800      	cmp	r0, #0
    b1a6:	d07c      	beq.n	b2a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    b1a8:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    b1ac:	f010 0f0c 	tst.w	r0, #12
    b1b0:	bf14      	ite	ne
    b1b2:	f64e 2060 	movwne	r0, #60000	; 0xea60
    b1b6:	f004 fb6f 	bleq	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b1ba:	eb00 010a 	add.w	r1, r0, sl
    b1be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b1c2:	fbb1 f0f0 	udiv	r0, r1, r0
    b1c6:	9902      	ldr	r1, [sp, #8]
    b1c8:	1a0d      	subs	r5, r1, r0
    b1ca:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    b1ce:	f004 fb15 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b1d2:	f8d4 12fc 	ldr.w	r1, [r4, #764]	; 0x2fc
    b1d6:	1a08      	subs	r0, r1, r0
    b1d8:	4428      	add	r0, r5
    b1da:	3820      	subs	r0, #32
    b1dc:	9002      	str	r0, [sp, #8]
    b1de:	f8b4 0286 	ldrh.w	r0, [r4, #646]	; 0x286
    b1e2:	f8d4 12b4 	ldr.w	r1, [r4, #692]	; 0x2b4
    b1e6:	4440      	add	r0, r8
    b1e8:	4348      	muls	r0, r1
    b1ea:	0040      	lsls	r0, r0, #1
    b1ec:	9d07      	ldr	r5, [sp, #28]
    b1ee:	f100 0760 	add.w	r7, r0, #96	; 0x60
    b1f2:	f015 0f0c 	tst.w	r5, #12
    b1f6:	bf0a      	itet	eq
    b1f8:	4628      	moveq	r0, r5
    b1fa:	f64e 2060 	movwne	r0, #60000	; 0xea60
    b1fe:	f004 fb4b 	bleq	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b202:	eb00 010a 	add.w	r1, r0, sl
    b206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b20a:	fbb1 f8f0 	udiv	r8, r1, r0
    b20e:	4628      	mov	r0, r5
    b210:	f004 faf4 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b214:	eb08 0100 	add.w	r1, r8, r0
    b218:	19c8      	adds	r0, r1, r7
    b21a:	4951      	ldr	r1, [pc, #324]	; (b360 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
    b21c:	6108      	str	r0, [r1, #16]
    b21e:	6960      	ldr	r0, [r4, #20]
    b220:	f641 514c 	movw	r1, #7500	; 0x1d4c
    b224:	4288      	cmp	r0, r1
    b226:	d206      	bcs.n	b236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
    b228:	ab02      	add	r3, sp, #8
    b22a:	4a4e      	ldr	r2, [pc, #312]	; (b364 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x850>)
    b22c:	4639      	mov	r1, r7
    b22e:	f007 fc54 	bl	12ada <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
    b232:	f884 02c3 	strb.w	r0, [r4, #707]	; 0x2c3
    b236:	9902      	ldr	r1, [sp, #8]
    b238:	9804      	ldr	r0, [sp, #16]
    b23a:	4a49      	ldr	r2, [pc, #292]	; (b360 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
    b23c:	1a08      	subs	r0, r1, r0
    b23e:	9002      	str	r0, [sp, #8]
    b240:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    b244:	6960      	ldr	r0, [r4, #20]
    b246:	6911      	ldr	r1, [r2, #16]
    b248:	1ac0      	subs	r0, r0, r3
    b24a:	f2a0 1089 	subw	r0, r0, #393	; 0x189
    b24e:	6150      	str	r0, [r2, #20]
    b250:	4281      	cmp	r1, r0
    b252:	bf98      	it	ls
    b254:	4608      	movls	r0, r1
    b256:	2500      	movs	r5, #0
    b258:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    b25c:	7035      	strb	r5, [r6, #0]
    b25e:	2064      	movs	r0, #100	; 0x64
    b260:	8130      	strh	r0, [r6, #8]
    b262:	e9d4 12ba 	ldrd	r1, r2, [r4, #744]	; 0x2e8
    b266:	9802      	ldr	r0, [sp, #8]
    b268:	1808      	adds	r0, r1, r0
    b26a:	eb42 0105 	adc.w	r1, r2, r5
    b26e:	e9c6 0104 	strd	r0, r1, [r6, #16]
    b272:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b276:	f008 f8e1 	bl	1343c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    b27a:	f8d4 1280 	ldr.w	r1, [r4, #640]	; 0x280
    b27e:	4408      	add	r0, r1
    b280:	6070      	str	r0, [r6, #4]
    b282:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    b286:	e9c4 01ba 	strd	r0, r1, [r4, #744]	; 0x2e8
    b28a:	f8a4 92f0 	strh.w	r9, [r4, #752]	; 0x2f0
    b28e:	f000 f9d1 	bl	b634 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
    b292:	b110      	cbz	r0, b29a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x786>
    b294:	6870      	ldr	r0, [r6, #4]
    b296:	301e      	adds	r0, #30
    b298:	6070      	str	r0, [r6, #4]
    b29a:	72b5      	strb	r5, [r6, #10]
    b29c:	f8b4 0270 	ldrh.w	r0, [r4, #624]	; 0x270
    b2a0:	e000      	b.n	b2a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x790>
    b2a2:	e039      	b.n	b318 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x804>
    b2a4:	eba0 0009 	sub.w	r0, r0, r9
    b2a8:	b200      	sxth	r0, r0
    b2aa:	2800      	cmp	r0, #0
    b2ac:	bfc4      	itt	gt
    b2ae:	2002      	movgt	r0, #2
    b2b0:	72b0      	strbgt	r0, [r6, #10]
    b2b2:	9808      	ldr	r0, [sp, #32]
    b2b4:	b378      	cbz	r0, b316 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    b2b6:	f1bb 0f00 	cmp.w	fp, #0
    b2ba:	d01d      	beq.n	b2f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
    b2bc:	f8b4 1298 	ldrh.w	r1, [r4, #664]	; 0x298
    b2c0:	2900      	cmp	r1, #0
    b2c2:	bf0c      	ite	eq
    b2c4:	2000      	moveq	r0, #0
    b2c6:	f8b4 029a 	ldrhne.w	r0, [r4, #666]	; 0x29a
    b2ca:	f8a4 029a 	strh.w	r0, [r4, #666]	; 0x29a
    b2ce:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
    b2d2:	1c40      	adds	r0, r0, #1
    b2d4:	4350      	muls	r0, r2
    b2d6:	4288      	cmp	r0, r1
    b2d8:	d20e      	bcs.n	b2f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
    b2da:	7ab0      	ldrb	r0, [r6, #10]
    b2dc:	b160      	cbz	r0, b2f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
    b2de:	72b5      	strb	r5, [r6, #10]
    b2e0:	f8b4 029a 	ldrh.w	r0, [r4, #666]	; 0x29a
    b2e4:	1c40      	adds	r0, r0, #1
    b2e6:	f8a4 029a 	strh.w	r0, [r4, #666]	; 0x29a
    b2ea:	f7fc fc57 	bl	7b9c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    b2ee:	f000 0007 	and.w	r0, r0, #7
    b2f2:	1c40      	adds	r0, r0, #1
    b2f4:	f884 029c 	strb.w	r0, [r4, #668]	; 0x29c
    b2f8:	f894 02f4 	ldrb.w	r0, [r4, #756]	; 0x2f4
    b2fc:	4631      	mov	r1, r6
    b2fe:	f7f6 fcd5 	bl	1cac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b302:	b338      	cbz	r0, b354 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>
    b304:	9811      	ldr	r0, [sp, #68]	; 0x44
    b306:	f080 0001 	eor.w	r0, r0, #1
    b30a:	f884 02c0 	strb.w	r0, [r4, #704]	; 0x2c0
    b30e:	b013      	add	sp, #76	; 0x4c
    b310:	2000      	movs	r0, #0
    b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b316:	e004      	b.n	b322 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80e>
    b318:	f240 5136 	movw	r1, #1334	; 0x536
    b31c:	2030      	movs	r0, #48	; 0x30
    b31e:	f7f9 f9cd 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b322:	f1bb 0f00 	cmp.w	fp, #0
    b326:	d1c9      	bne.n	b2bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7a8>
    b328:	f894 02ac 	ldrb.w	r0, [r4, #684]	; 0x2ac
    b32c:	2800      	cmp	r0, #0
    b32e:	d0e3      	beq.n	b2f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
    b330:	f8d4 12b4 	ldr.w	r1, [r4, #692]	; 0x2b4
    b334:	6960      	ldr	r0, [r4, #20]
    b336:	1a41      	subs	r1, r0, r1
    b338:	4630      	mov	r0, r6
    b33a:	f007 fb5d 	bl	129f8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    b33e:	0400      	lsls	r0, r0, #16
    b340:	0c00      	lsrs	r0, r0, #16
    b342:	d0d9      	beq.n	b2f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
    b344:	991c      	ldr	r1, [sp, #112]	; 0x70
    b346:	2900      	cmp	r1, #0
    b348:	bf18      	it	ne
    b34a:	8008      	strhne	r0, [r1, #0]
    b34c:	2001      	movs	r0, #1
    b34e:	b013      	add	sp, #76	; 0x4c
    b350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b354:	f240 5194 	movw	r1, #1428	; 0x594
    b358:	2030      	movs	r0, #48	; 0x30
    b35a:	f7f9 f9af 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b35e:	0000      	.short	0x0000
    b360:	20000178 	.word	0x20000178
    b364:	20000188 	.word	0x20000188
    b368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b36c:	b082      	sub	sp, #8
    b36e:	0004      	movs	r4, r0
    b370:	d00b      	beq.n	b38a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x876>
    b372:	2720      	movs	r7, #32
    b374:	2600      	movs	r6, #0
    b376:	2909      	cmp	r1, #9
    b378:	f080 8156 	bcs.w	b628 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb14>
    b37c:	e8df f001 	tbb	[pc, r1]
    b380:	73736909 	.word	0x73736909
    b384:	fafbfc6e 	.word	0xfafbfc6e
    b388:	00f9      	.short	0x00f9
    b38a:	2193      	movs	r1, #147	; 0x93
    b38c:	2030      	movs	r0, #48	; 0x30
    b38e:	f7f9 f995 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b392:	f8c4 62fc 	str.w	r6, [r4, #764]	; 0x2fc
    b396:	f894 12c0 	ldrb.w	r1, [r4, #704]	; 0x2c0
    b39a:	4620      	mov	r0, r4
    b39c:	b1a9      	cbz	r1, b3ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8b6>
    b39e:	f8b0 12be 	ldrh.w	r1, [r0, #702]	; 0x2be
    b3a2:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    b3a6:	4291      	cmp	r1, r2
    b3a8:	d109      	bne.n	b3be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8aa>
    b3aa:	f8b0 1274 	ldrh.w	r1, [r0, #628]	; 0x274
    b3ae:	1a89      	subs	r1, r1, r2
    b3b0:	f8a0 1276 	strh.w	r1, [r0, #630]	; 0x276
    b3b4:	f8b0 1274 	ldrh.w	r1, [r0, #628]	; 0x274
    b3b8:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    b3bc:	e010      	b.n	b3e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8cc>
    b3be:	1a89      	subs	r1, r1, r2
    b3c0:	f8a0 1276 	strh.w	r1, [r0, #630]	; 0x276
    b3c4:	f8b0 12be 	ldrh.w	r1, [r0, #702]	; 0x2be
    b3c8:	e008      	b.n	b3dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c8>
    b3ca:	f8b0 12bc 	ldrh.w	r1, [r0, #700]	; 0x2bc
    b3ce:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    b3d2:	1a89      	subs	r1, r1, r2
    b3d4:	f8a0 1276 	strh.w	r1, [r0, #630]	; 0x276
    b3d8:	f8b0 12bc 	ldrh.w	r1, [r0, #700]	; 0x2bc
    b3dc:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    b3e0:	e9d0 12b6 	ldrd	r1, r2, [r0, #728]	; 0x2d8
    b3e4:	f8c0 12e0 	str.w	r1, [r0, #736]	; 0x2e0
    b3e8:	f8c0 22e4 	str.w	r2, [r0, #740]	; 0x2e4
    b3ec:	f000 f9d8 	bl	b7a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    b3f0:	f005 fbfb 	bl	10bea <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    b3f4:	2864      	cmp	r0, #100	; 0x64
    b3f6:	bf98      	it	ls
    b3f8:	2064      	movls	r0, #100	; 0x64
    b3fa:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    b3fe:	f001 010c 	and.w	r1, r1, #12
    b402:	2900      	cmp	r1, #0
    b404:	bf18      	it	ne
    b406:	2128      	movne	r1, #40	; 0x28
    b408:	4408      	add	r0, r1
    b40a:	f8d4 12b4 	ldr.w	r1, [r4, #692]	; 0x2b4
    b40e:	f200 1083 	addw	r0, r0, #387	; 0x183
    b412:	eb01 0600 	add.w	r6, r1, r0
    b416:	4620      	mov	r0, r4
    b418:	bf14      	ite	ne
    b41a:	2128      	movne	r1, #40	; 0x28
    b41c:	2100      	moveq	r1, #0
    b41e:	f201 12e7 	addw	r2, r1, #487	; 0x1e7
    b422:	6b41      	ldr	r1, [r0, #52]	; 0x34
    b424:	f007 ff8d 	bl	13342 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    b428:	4605      	mov	r5, r0
    b42a:	4632      	mov	r2, r6
    b42c:	4620      	mov	r0, r4
    b42e:	6961      	ldr	r1, [r4, #20]
    b430:	f007 ff87 	bl	13342 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    b434:	497e      	ldr	r1, [pc, #504]	; (b630 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb1c>)
    b436:	4285      	cmp	r5, r0
    b438:	6088      	str	r0, [r1, #8]
    b43a:	bf38      	it	cc
    b43c:	4628      	movcc	r0, r5
    b43e:	6048      	str	r0, [r1, #4]
    b440:	f8d4 02cc 	ldr.w	r0, [r4, #716]	; 0x2cc
    b444:	38ac      	subs	r0, #172	; 0xac
    b446:	60c8      	str	r0, [r1, #12]
    b448:	b002      	add	sp, #8
    b44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b44e:	f7f7 bb3f 	b.w	2ad0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    b452:	b002      	add	sp, #8
    b454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b458:	f000 bad2 	b.w	ba00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    b45c:	b002      	add	sp, #8
    b45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b462:	f004 bc75 	b.w	fd50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    b466:	f7f7 fc0b 	bl	2c80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    b46a:	f8d4 22e0 	ldr.w	r2, [r4, #736]	; 0x2e0
    b46e:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
    b472:	1a80      	subs	r0, r0, r2
    b474:	eb61 0103 	sbc.w	r1, r1, r3
    b478:	2200      	movs	r2, #0
    b47a:	4613      	mov	r3, r2
    b47c:	1a12      	subs	r2, r2, r0
    b47e:	eb73 0201 	sbcs.w	r2, r3, r1
    b482:	db04      	blt.n	b48e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x97a>
    b484:	f240 6111 	movw	r1, #1553	; 0x611
    b488:	2030      	movs	r0, #48	; 0x30
    b48a:	f7f9 f917 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b48e:	1c42      	adds	r2, r0, #1
    b490:	f171 0100 	sbcs.w	r1, r1, #0
    b494:	db04      	blt.n	b4a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98c>
    b496:	f240 6112 	movw	r1, #1554	; 0x612
    b49a:	2030      	movs	r0, #48	; 0x30
    b49c:	f7f9 f90e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4a0:	6961      	ldr	r1, [r4, #20]
    b4a2:	2900      	cmp	r1, #0
    b4a4:	bf14      	ite	ne
    b4a6:	fbb0 f0f1 	udivne	r0, r0, r1
    b4aa:	4630      	moveq	r0, r6
    b4ac:	f894 109e 	ldrb.w	r1, [r4, #158]	; 0x9e
    b4b0:	290e      	cmp	r1, #14
    b4b2:	d015      	beq.n	b4e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9cc>
    b4b4:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    b4b8:	f8b4 12be 	ldrh.w	r1, [r4, #702]	; 0x2be
    b4bc:	1813      	adds	r3, r2, r0
    b4be:	1acb      	subs	r3, r1, r3
    b4c0:	b21b      	sxth	r3, r3
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	bfae      	itee	ge
    b4c6:	1c48      	addge	r0, r1, #1
    b4c8:	1c40      	addlt	r0, r0, #1
    b4ca:	4410      	addlt	r0, r2
    b4cc:	f8a4 02be 	strh.w	r0, [r4, #702]	; 0x2be
    b4d0:	f894 02c1 	ldrb.w	r0, [r4, #705]	; 0x2c1
    b4d4:	f88d 0000 	strb.w	r0, [sp]
    b4d8:	f89d 0000 	ldrb.w	r0, [sp]
    b4dc:	b978      	cbnz	r0, b4fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9ea>
    b4de:	e005      	b.n	b4ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9d8>
    b4e0:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    b4e4:	1c40      	adds	r0, r0, #1
    b4e6:	f8a4 02be 	strh.w	r0, [r4, #702]	; 0x2be
    b4ea:	e008      	b.n	b4fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9ea>
    b4ec:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    b4f0:	f8b4 1274 	ldrh.w	r1, [r4, #628]	; 0x274
    b4f4:	4288      	cmp	r0, r1
    b4f6:	bf04      	itt	eq
    b4f8:	1c40      	addeq	r0, r0, #1
    b4fa:	f8a4 02be 	strheq.w	r0, [r4, #702]	; 0x2be
    b4fe:	f8b4 02f2 	ldrh.w	r0, [r4, #754]	; 0x2f2
    b502:	f10d 0804 	add.w	r8, sp, #4
    b506:	1c40      	adds	r0, r0, #1
    b508:	f8a4 02f2 	strh.w	r0, [r4, #754]	; 0x2f2
    b50c:	f8b4 00d4 	ldrh.w	r0, [r4, #212]	; 0xd4
    b510:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
    b514:	1a40      	subs	r0, r0, r1
    b516:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    b51a:	1e40      	subs	r0, r0, #1
    b51c:	4408      	add	r0, r1
    b51e:	b285      	uxth	r5, r0
    b520:	e049      	b.n	b5b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa2>
    b522:	2300      	movs	r3, #0
    b524:	461a      	mov	r2, r3
    b526:	4620      	mov	r0, r4
    b528:	f8cd 8000 	str.w	r8, [sp]
    b52c:	f7ff fbc8 	bl	acc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
    b530:	b130      	cbz	r0, b540 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa2c>
    b532:	2801      	cmp	r0, #1
    b534:	d028      	beq.n	b588 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa74>
    b536:	f240 6151 	movw	r1, #1617	; 0x651
    b53a:	2030      	movs	r0, #48	; 0x30
    b53c:	f7f9 f8be 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b540:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    b542:	2800      	cmp	r0, #0
    b544:	bf04      	itt	eq
    b546:	b002      	addeq	sp, #8
    b548:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b54c:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    b550:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
    b554:	1a80      	subs	r0, r0, r2
    b556:	b201      	sxth	r1, r0
    b558:	2900      	cmp	r1, #0
    b55a:	bfdc      	itt	le
    b55c:	b002      	addle	sp, #8
    b55e:	e8bd 81f0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, pc}
    b562:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    b566:	4401      	add	r1, r0
    b568:	1e49      	subs	r1, r1, #1
    b56a:	fb91 f1f0 	sdiv	r1, r1, r0
    b56e:	b289      	uxth	r1, r1
    b570:	e003      	b.n	b57a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa66>
    b572:	e055      	b.n	b620 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb0c>
    b574:	e03f      	b.n	b5f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae2>
    b576:	e036      	b.n	b5e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xad2>
    b578:	e056      	b.n	b628 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb14>
    b57a:	fb01 2000 	mla	r0, r1, r0, r2
    b57e:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
    b582:	b002      	add	sp, #8
    b584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b588:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    b58c:	f8b4 1270 	ldrh.w	r1, [r4, #624]	; 0x270
    b590:	1a42      	subs	r2, r0, r1
    b592:	b212      	sxth	r2, r2
    b594:	2a00      	cmp	r2, #0
    b596:	da09      	bge.n	b5ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa98>
    b598:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b59c:	4402      	add	r2, r0
    b59e:	1aaa      	subs	r2, r5, r2
    b5a0:	b212      	sxth	r2, r2
    b5a2:	2a00      	cmp	r2, #0
    b5a4:	bfb8      	it	lt
    b5a6:	f8a4 12be 	strhlt.w	r1, [r4, #702]	; 0x2be
    b5aa:	db04      	blt.n	b5b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa2>
    b5ac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b5b0:	4408      	add	r0, r1
    b5b2:	f8a4 02be 	strh.w	r0, [r4, #702]	; 0x2be
    b5b6:	f8b4 12be 	ldrh.w	r1, [r4, #702]	; 0x2be
    b5ba:	1a68      	subs	r0, r5, r1
    b5bc:	b200      	sxth	r0, r0
    b5be:	2800      	cmp	r0, #0
    b5c0:	daaf      	bge.n	b522 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0e>
    b5c2:	f894 00a2 	ldrb.w	r0, [r4, #162]	; 0xa2
    b5c6:	2800      	cmp	r0, #0
    b5c8:	bf0c      	ite	eq
    b5ca:	203e      	moveq	r0, #62	; 0x3e
    b5cc:	2008      	movne	r0, #8
    b5ce:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    b5d2:	2208      	movs	r2, #8
    b5d4:	4621      	mov	r1, r4
    b5d6:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
    b5da:	f7fb fe75 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b5de:	4620      	mov	r0, r4
    b5e0:	f008 fd32 	bl	14048 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    b5e4:	e00f      	b.n	b606 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaf2>
    b5e6:	2001      	movs	r0, #1
    b5e8:	f7f6 f984 	bl	18f4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    b5ec:	b002      	add	sp, #8
    b5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5f2:	f007 b80d 	b.w	12610 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    b5f6:	f894 02ac 	ldrb.w	r0, [r4, #684]	; 0x2ac
    b5fa:	2804      	cmp	r0, #4
    b5fc:	d003      	beq.n	b606 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaf2>
    b5fe:	21b5      	movs	r1, #181	; 0xb5
    b600:	2030      	movs	r0, #48	; 0x30
    b602:	f7f9 f85b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b606:	f884 62ac 	strb.w	r6, [r4, #684]	; 0x2ac
    b60a:	f894 02f4 	ldrb.w	r0, [r4, #756]	; 0x2f4
    b60e:	f7f7 f82d 	bl	266c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b612:	f884 72f4 	strb.w	r7, [r4, #756]	; 0x2f4
    b616:	b002      	add	sp, #8
    b618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b61c:	f7fc b98c 	b.w	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b620:	21be      	movs	r1, #190	; 0xbe
    b622:	2030      	movs	r0, #48	; 0x30
    b624:	f7f9 f84a 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b628:	21c2      	movs	r1, #194	; 0xc2
    b62a:	2030      	movs	r0, #48	; 0x30
    b62c:	f7f9 f846 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b630:	20000178 	.word	0x20000178

0000b634 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
    b634:	4802      	ldr	r0, [pc, #8]	; (b640 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
    b636:	6900      	ldr	r0, [r0, #16]
    b638:	2800      	cmp	r0, #0
    b63a:	bf18      	it	ne
    b63c:	2001      	movne	r0, #1
    b63e:	4770      	bx	lr
    b640:	20000190 	.word	0x20000190

0000b644 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    b644:	4806      	ldr	r0, [pc, #24]	; (b660 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    b646:	4905      	ldr	r1, [pc, #20]	; (b65c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    b648:	6501      	str	r1, [r0, #80]	; 0x50
    b64a:	4906      	ldr	r1, [pc, #24]	; (b664 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    b64c:	6541      	str	r1, [r0, #84]	; 0x54
    b64e:	4807      	ldr	r0, [pc, #28]	; (b66c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    b650:	4905      	ldr	r1, [pc, #20]	; (b668 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    b652:	6501      	str	r1, [r0, #80]	; 0x50
    b654:	4906      	ldr	r1, [pc, #24]	; (b670 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    b656:	6541      	str	r1, [r0, #84]	; 0x54
    b658:	4770      	bx	lr
    b65a:	0000      	.short	0x0000
    b65c:	0000ce8d 	.word	0x0000ce8d
    b660:	200001b0 	.word	0x200001b0
    b664:	0000cf81 	.word	0x0000cf81
    b668:	0000d811 	.word	0x0000d811
    b66c:	20000248 	.word	0x20000248
    b670:	0000d841 	.word	0x0000d841

0000b674 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    b674:	481f      	ldr	r0, [pc, #124]	; (b6f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    b676:	2100      	movs	r1, #0
    b678:	6101      	str	r1, [r0, #16]
    b67a:	6141      	str	r1, [r0, #20]
    b67c:	7081      	strb	r1, [r0, #2]
    b67e:	481f      	ldr	r0, [pc, #124]	; (b6fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    b680:	491d      	ldr	r1, [pc, #116]	; (b6f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    b682:	6081      	str	r1, [r0, #8]
    b684:	491e      	ldr	r1, [pc, #120]	; (b700 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    b686:	6041      	str	r1, [r0, #4]
    b688:	491e      	ldr	r1, [pc, #120]	; (b704 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    b68a:	6001      	str	r1, [r0, #0]
    b68c:	491e      	ldr	r1, [pc, #120]	; (b708 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    b68e:	6281      	str	r1, [r0, #40]	; 0x28
    b690:	491e      	ldr	r1, [pc, #120]	; (b70c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    b692:	62c1      	str	r1, [r0, #44]	; 0x2c
    b694:	491e      	ldr	r1, [pc, #120]	; (b710 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    b696:	60c1      	str	r1, [r0, #12]
    b698:	491e      	ldr	r1, [pc, #120]	; (b714 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    b69a:	6181      	str	r1, [r0, #24]
    b69c:	491e      	ldr	r1, [pc, #120]	; (b718 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    b69e:	6301      	str	r1, [r0, #48]	; 0x30
    b6a0:	491e      	ldr	r1, [pc, #120]	; (b71c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    b6a2:	6201      	str	r1, [r0, #32]
    b6a4:	491e      	ldr	r1, [pc, #120]	; (b720 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    b6a6:	64c1      	str	r1, [r0, #76]	; 0x4c
    b6a8:	491e      	ldr	r1, [pc, #120]	; (b724 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    b6aa:	6481      	str	r1, [r0, #72]	; 0x48
    b6ac:	491e      	ldr	r1, [pc, #120]	; (b728 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    b6ae:	6441      	str	r1, [r0, #68]	; 0x44
    b6b0:	491e      	ldr	r1, [pc, #120]	; (b72c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    b6b2:	6341      	str	r1, [r0, #52]	; 0x34
    b6b4:	491e      	ldr	r1, [pc, #120]	; (b730 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    b6b6:	61c1      	str	r1, [r0, #28]
    b6b8:	491e      	ldr	r1, [pc, #120]	; (b734 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    b6ba:	6241      	str	r1, [r0, #36]	; 0x24
    b6bc:	481f      	ldr	r0, [pc, #124]	; (b73c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    b6be:	491e      	ldr	r1, [pc, #120]	; (b738 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    b6c0:	6081      	str	r1, [r0, #8]
    b6c2:	491f      	ldr	r1, [pc, #124]	; (b740 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    b6c4:	61c1      	str	r1, [r0, #28]
    b6c6:	491f      	ldr	r1, [pc, #124]	; (b744 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    b6c8:	6241      	str	r1, [r0, #36]	; 0x24
    b6ca:	491f      	ldr	r1, [pc, #124]	; (b748 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    b6cc:	62c1      	str	r1, [r0, #44]	; 0x2c
    b6ce:	491f      	ldr	r1, [pc, #124]	; (b74c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    b6d0:	6101      	str	r1, [r0, #16]
    b6d2:	491f      	ldr	r1, [pc, #124]	; (b750 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    b6d4:	6141      	str	r1, [r0, #20]
    b6d6:	491f      	ldr	r1, [pc, #124]	; (b754 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    b6d8:	6441      	str	r1, [r0, #68]	; 0x44
    b6da:	491f      	ldr	r1, [pc, #124]	; (b758 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    b6dc:	6341      	str	r1, [r0, #52]	; 0x34
    b6de:	491f      	ldr	r1, [pc, #124]	; (b75c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    b6e0:	6181      	str	r1, [r0, #24]
    b6e2:	491f      	ldr	r1, [pc, #124]	; (b760 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    b6e4:	6301      	str	r1, [r0, #48]	; 0x30
    b6e6:	491f      	ldr	r1, [pc, #124]	; (b764 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf0>)
    b6e8:	6481      	str	r1, [r0, #72]	; 0x48
    b6ea:	491f      	ldr	r1, [pc, #124]	; (b768 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf4>)
    b6ec:	64c1      	str	r1, [r0, #76]	; 0x4c
    b6ee:	491f      	ldr	r1, [pc, #124]	; (b76c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf8>)
    b6f0:	6381      	str	r1, [r0, #56]	; 0x38
    b6f2:	4770      	bx	lr
    b6f4:	20000190 	.word	0x20000190
    b6f8:	0000d54d 	.word	0x0000d54d
    b6fc:	200001b0 	.word	0x200001b0
    b700:	0000cb5d 	.word	0x0000cb5d
    b704:	0000cbcd 	.word	0x0000cbcd
    b708:	0000d085 	.word	0x0000d085
    b70c:	0000d0d5 	.word	0x0000d0d5
    b710:	0000cc91 	.word	0x0000cc91
    b714:	0000d511 	.word	0x0000d511
    b718:	0000d6c5 	.word	0x0000d6c5
    b71c:	0000cd51 	.word	0x0000cd51
    b720:	0000d055 	.word	0x0000d055
    b724:	0000d021 	.word	0x0000d021
    b728:	0000d439 	.word	0x0000d439
    b72c:	0000d4a9 	.word	0x0000d4a9
    b730:	0000d589 	.word	0x0000d589
    b734:	0000cdc1 	.word	0x0000cdc1
    b738:	0000da9d 	.word	0x0000da9d
    b73c:	20000248 	.word	0x20000248
    b740:	0000dac5 	.word	0x0000dac5
    b744:	0000d7cd 	.word	0x0000d7cd
    b748:	0000d8e9 	.word	0x0000d8e9
    b74c:	0000d7a1 	.word	0x0000d7a1
    b750:	0000d9f1 	.word	0x0000d9f1
    b754:	0000d96d 	.word	0x0000d96d
    b758:	0000d99d 	.word	0x0000d99d
    b75c:	0000da15 	.word	0x0000da15
    b760:	0000db41 	.word	0x0000db41
    b764:	0000d885 	.word	0x0000d885
    b768:	0000d8b5 	.word	0x0000d8b5
    b76c:	0000d9c1 	.word	0x0000d9c1

0000b770 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    b770:	4806      	ldr	r0, [pc, #24]	; (b78c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    b772:	4905      	ldr	r1, [pc, #20]	; (b788 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    b774:	6581      	str	r1, [r0, #88]	; 0x58
    b776:	4906      	ldr	r1, [pc, #24]	; (b790 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    b778:	6601      	str	r1, [r0, #96]	; 0x60
    b77a:	4807      	ldr	r0, [pc, #28]	; (b798 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    b77c:	4905      	ldr	r1, [pc, #20]	; (b794 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    b77e:	6581      	str	r1, [r0, #88]	; 0x58
    b780:	4906      	ldr	r1, [pc, #24]	; (b79c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    b782:	65c1      	str	r1, [r0, #92]	; 0x5c
    b784:	4770      	bx	lr
    b786:	0000      	.short	0x0000
    b788:	0000d0f5 	.word	0x0000d0f5
    b78c:	200001b0 	.word	0x200001b0
    b790:	0000d1ed 	.word	0x0000d1ed
    b794:	0000d915 	.word	0x0000d915
    b798:	20000248 	.word	0x20000248
    b79c:	0000d945 	.word	0x0000d945

0000b7a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    b7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b7a4:	4c8e      	ldr	r4, [pc, #568]	; (b9e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>)
    b7a6:	2101      	movs	r1, #1
    b7a8:	f1a4 0518 	sub.w	r5, r4, #24
    b7ac:	7021      	strb	r1, [r4, #0]
    b7ae:	2600      	movs	r6, #0
    b7b0:	6060      	str	r0, [r4, #4]
    b7b2:	80ae      	strh	r6, [r5, #4]
    b7b4:	70ee      	strb	r6, [r5, #3]
    b7b6:	702e      	strb	r6, [r5, #0]
    b7b8:	f880 127b 	strb.w	r1, [r0, #635]	; 0x27b
    b7bc:	8800      	ldrh	r0, [r0, #0]
    b7be:	f7f9 fc1d 	bl	4ffc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    b7c2:	0007      	movs	r7, r0
    b7c4:	d010      	beq.n	b7e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    b7c6:	6860      	ldr	r0, [r4, #4]
    b7c8:	8800      	ldrh	r0, [r0, #0]
    b7ca:	f7f9 fec3 	bl	5554 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    b7ce:	6860      	ldr	r0, [r4, #4]
    b7d0:	8800      	ldrh	r0, [r0, #0]
    b7d2:	f7f9 fe65 	bl	54a0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    b7d6:	6860      	ldr	r0, [r4, #4]
    b7d8:	f8b0 1272 	ldrh.w	r1, [r0, #626]	; 0x272
    b7dc:	b1c1      	cbz	r1, b810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x70>
    b7de:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    b7e2:	29fe      	cmp	r1, #254	; 0xfe
    b7e4:	d005      	beq.n	b7f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    b7e6:	e018      	b.n	b81a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a>
    b7e8:	f640 3166 	movw	r1, #2918	; 0xb66
    b7ec:	2031      	movs	r0, #49	; 0x31
    b7ee:	f7f8 ff65 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7f2:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    b7f6:	f88d 1000 	strb.w	r1, [sp]
    b7fa:	f89d 1000 	ldrb.w	r1, [sp]
    b7fe:	b189      	cbz	r1, b824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    b800:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
    b804:	2301      	movs	r3, #1
    b806:	4619      	mov	r1, r3
    b808:	3090      	adds	r0, #144	; 0x90
    b80a:	f006 ff7c 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b80e:	b188      	cbz	r0, b834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    b810:	6860      	ldr	r0, [r4, #4]
    b812:	f890 012c 	ldrb.w	r0, [r0, #300]	; 0x12c
    b816:	28fe      	cmp	r0, #254	; 0xfe
    b818:	d004      	beq.n	b824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    b81a:	6860      	ldr	r0, [r4, #4]
    b81c:	f890 012c 	ldrb.w	r0, [r0, #300]	; 0x12c
    b820:	f000 fbba 	bl	bf98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x598>
    b824:	6861      	ldr	r1, [r4, #4]
    b826:	f891 027d 	ldrb.w	r0, [r1, #637]	; 0x27d
    b82a:	2800      	cmp	r0, #0
    b82c:	bf18      	it	ne
    b82e:	80ee      	strhne	r6, [r5, #6]
    b830:	d11f      	bne.n	b872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    b832:	e00f      	b.n	b854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    b834:	6860      	ldr	r0, [r4, #4]
    b836:	f8a0 60d6 	strh.w	r6, [r0, #214]	; 0xd6
    b83a:	f890 1139 	ldrb.w	r1, [r0, #313]	; 0x139
    b83e:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    b842:	2100      	movs	r1, #0
    b844:	2002      	movs	r0, #2
    b846:	f001 f879 	bl	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    b84a:	6860      	ldr	r0, [r4, #4]
    b84c:	f880 627a 	strb.w	r6, [r0, #634]	; 0x27a
    b850:	2002      	movs	r0, #2
    b852:	e7e5      	b.n	b820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    b854:	f891 01f0 	ldrb.w	r0, [r1, #496]	; 0x1f0
    b858:	f88d 0000 	strb.w	r0, [sp]
    b85c:	f89d 0000 	ldrb.w	r0, [sp]
    b860:	b928      	cbnz	r0, b86e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    b862:	8d88      	ldrh	r0, [r1, #44]	; 0x2c
    b864:	8b8a      	ldrh	r2, [r1, #28]
    b866:	4290      	cmp	r0, r2
    b868:	bf88      	it	hi
    b86a:	80e8      	strhhi	r0, [r5, #6]
    b86c:	d801      	bhi.n	b872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    b86e:	8b88      	ldrh	r0, [r1, #28]
    b870:	80e8      	strh	r0, [r5, #6]
    b872:	f8b1 0276 	ldrh.w	r0, [r1, #630]	; 0x276
    b876:	1e40      	subs	r0, r0, #1
    b878:	fa1f f880 	uxth.w	r8, r0
    b87c:	f8b1 0278 	ldrh.w	r0, [r1, #632]	; 0x278
    b880:	4440      	add	r0, r8
    b882:	f8a1 0278 	strh.w	r0, [r1, #632]	; 0x278
    b886:	f8b1 00d2 	ldrh.w	r0, [r1, #210]	; 0xd2
    b88a:	4440      	add	r0, r8
    b88c:	f8a1 00d2 	strh.w	r0, [r1, #210]	; 0xd2
    b890:	f891 00a4 	ldrb.w	r0, [r1, #164]	; 0xa4
    b894:	b940      	cbnz	r0, b8a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    b896:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    b89a:	f101 0090 	add.w	r0, r1, #144	; 0x90
    b89e:	2301      	movs	r3, #1
    b8a0:	2106      	movs	r1, #6
    b8a2:	f006 ff30 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b8a6:	b128      	cbz	r0, b8b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114>
    b8a8:	6860      	ldr	r0, [r4, #4]
    b8aa:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    b8ae:	4441      	add	r1, r8
    b8b0:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
    b8b4:	6861      	ldr	r1, [r4, #4]
    b8b6:	f8b1 0272 	ldrh.w	r0, [r1, #626]	; 0x272
    b8ba:	2801      	cmp	r0, #1
    b8bc:	bf9c      	itt	ls
    b8be:	1c40      	addls	r0, r0, #1
    b8c0:	f8a1 0272 	strhls.w	r0, [r1, #626]	; 0x272
    b8c4:	f1b8 0f00 	cmp.w	r8, #0
    b8c8:	bf18      	it	ne
    b8ca:	f881 6284 	strbne.w	r6, [r1, #644]	; 0x284
    b8ce:	f881 627a 	strb.w	r6, [r1, #634]	; 0x27a
    b8d2:	f8b1 2276 	ldrh.w	r2, [r1, #630]	; 0x276
    b8d6:	f101 0090 	add.w	r0, r1, #144	; 0x90
    b8da:	f7fb fac5 	bl	6e68 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    b8de:	b120      	cbz	r0, b8ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    b8e0:	f640 31ad 	movw	r1, #2989	; 0xbad
    b8e4:	2031      	movs	r0, #49	; 0x31
    b8e6:	f7f8 fee9 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8ea:	6862      	ldr	r2, [r4, #4]
    b8ec:	f892 009e 	ldrb.w	r0, [r2, #158]	; 0x9e
    b8f0:	280c      	cmp	r0, #12
    b8f2:	bf18      	it	ne
    b8f4:	280d      	cmpne	r0, #13
    b8f6:	d119      	bne.n	b92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c>
    b8f8:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
    b8fc:	f8b2 331c 	ldrh.w	r3, [r2, #796]	; 0x31c
    b900:	eba1 0103 	sub.w	r1, r1, r3
    b904:	b209      	sxth	r1, r1
    b906:	2900      	cmp	r1, #0
    b908:	db10      	blt.n	b92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c>
    b90a:	f202 311e 	addw	r1, r2, #798	; 0x31e
    b90e:	f102 00a7 	add.w	r0, r2, #167	; 0xa7
    b912:	f009 fdda 	bl	154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    b916:	2103      	movs	r1, #3
    b918:	6860      	ldr	r0, [r4, #4]
    b91a:	f7fb f8cb 	bl	6ab4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b91e:	6860      	ldr	r0, [r4, #4]
    b920:	f880 609e 	strb.w	r6, [r0, #158]	; 0x9e
    b924:	21ff      	movs	r1, #255	; 0xff
    b926:	f880 10fa 	strb.w	r1, [r0, #250]	; 0xfa
    b92a:	e027      	b.n	b97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
    b92c:	2825      	cmp	r0, #37	; 0x25
    b92e:	d111      	bne.n	b954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4>
    b930:	f8b2 0094 	ldrh.w	r0, [r2, #148]	; 0x94
    b934:	f8b2 131c 	ldrh.w	r1, [r2, #796]	; 0x31c
    b938:	1a40      	subs	r0, r0, r1
    b93a:	b200      	sxth	r0, r0
    b93c:	2800      	cmp	r0, #0
    b93e:	db09      	blt.n	b954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4>
    b940:	f882 609e 	strb.w	r6, [r2, #158]	; 0x9e
    b944:	f001 f872 	bl	ca2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x102c>
    b948:	2800      	cmp	r0, #0
    b94a:	6860      	ldr	r0, [r4, #4]
    b94c:	f880 6144 	strb.w	r6, [r0, #324]	; 0x144
    b950:	d114      	bne.n	b97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
    b952:	e03e      	b.n	b9d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x232>
    b954:	f892 009d 	ldrb.w	r0, [r2, #157]	; 0x9d
    b958:	2825      	cmp	r0, #37	; 0x25
    b95a:	bf18      	it	ne
    b95c:	2826      	cmpne	r0, #38	; 0x26
    b95e:	d10d      	bne.n	b97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
    b960:	f8b2 0094 	ldrh.w	r0, [r2, #148]	; 0x94
    b964:	f8b2 131c 	ldrh.w	r1, [r2, #796]	; 0x31c
    b968:	eba0 0001 	sub.w	r0, r0, r1
    b96c:	b200      	sxth	r0, r0
    b96e:	2800      	cmp	r0, #0
    b970:	db04      	blt.n	b97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
    b972:	f882 609d 	strb.w	r6, [r2, #157]	; 0x9d
    b976:	f001 f859 	bl	ca2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x102c>
    b97a:	b350      	cbz	r0, b9d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x232>
    b97c:	4638      	mov	r0, r7
    b97e:	f006 f92a 	bl	11bd6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    b982:	2800      	cmp	r0, #0
    b984:	6860      	ldr	r0, [r4, #4]
    b986:	bf17      	itett	ne
    b988:	f890 027e 	ldrbne.w	r0, [r0, #638]	; 0x27e
    b98c:	f880 627e 	strbeq.w	r6, [r0, #638]	; 0x27e
    b990:	2800      	cmpne	r0, #0
    b992:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b996:	4813      	ldr	r0, [pc, #76]	; (b9e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>)
    b998:	9000      	str	r0, [sp, #0]
    b99a:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    b99e:	4b12      	ldr	r3, [pc, #72]	; (b9e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
    b9a0:	4a12      	ldr	r2, [pc, #72]	; (b9ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>)
    b9a2:	f7f9 fe7f 	bl	56a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    b9a6:	6969      	ldr	r1, [r5, #20]
    b9a8:	2900      	cmp	r1, #0
    b9aa:	bf1c      	itt	ne
    b9ac:	7868      	ldrbne	r0, [r5, #1]
    b9ae:	f003 fa53 	blne	ee58 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
    b9b2:	6860      	ldr	r0, [r4, #4]
    b9b4:	2301      	movs	r3, #1
    b9b6:	2105      	movs	r1, #5
    b9b8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    b9bc:	3090      	adds	r0, #144	; 0x90
    b9be:	f006 fea2 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b9c2:	2800      	cmp	r0, #0
    b9c4:	bf08      	it	eq
    b9c6:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b9ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9ce:	f7f9 be63 	b.w	5698 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    b9d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9d6:	2100      	movs	r1, #0
    b9d8:	4608      	mov	r0, r1
    b9da:	f000 bbc1 	b.w	c160 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x760>
    b9de:	0000      	.short	0x0000
    b9e0:	200001a8 	.word	0x200001a8
    b9e4:	0000c161 	.word	0x0000c161
    b9e8:	0000ba1d 	.word	0x0000ba1d
    b9ec:	0000c975 	.word	0x0000c975

0000b9f0 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    b9f0:	4802      	ldr	r0, [pc, #8]	; (b9fc <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
    b9f2:	2100      	movs	r1, #0
    b9f4:	6101      	str	r1, [r0, #16]
    b9f6:	6141      	str	r1, [r0, #20]
    b9f8:	4608      	mov	r0, r1
    b9fa:	4770      	bx	lr
    b9fc:	20000190 	.word	0x20000190

0000ba00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    ba00:	4805      	ldr	r0, [pc, #20]	; (ba18 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
    ba02:	6840      	ldr	r0, [r0, #4]
    ba04:	f890 027e 	ldrb.w	r0, [r0, #638]	; 0x27e
    ba08:	b118      	cbz	r0, ba12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
    ba0a:	2100      	movs	r1, #0
    ba0c:	4608      	mov	r0, r1
    ba0e:	f000 bba7 	b.w	c160 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x760>
    ba12:	f7fa b8e5 	b.w	5be0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    ba16:	0000      	.short	0x0000
    ba18:	200001a8 	.word	0x200001a8
    ba1c:	490f      	ldr	r1, [pc, #60]	; (ba5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c>)
    ba1e:	4602      	mov	r2, r0
    ba20:	78c8      	ldrb	r0, [r1, #3]
    ba22:	b9c8      	cbnz	r0, ba58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    ba24:	f101 0018 	add.w	r0, r1, #24
    ba28:	6840      	ldr	r0, [r0, #4]
    ba2a:	b14a      	cbz	r2, ba40 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x40>
    ba2c:	7909      	ldrb	r1, [r1, #4]
    ba2e:	f011 0f08 	tst.w	r1, #8
    ba32:	d003      	beq.n	ba3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3c>
    ba34:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
    ba38:	2809      	cmp	r0, #9
    ba3a:	d00d      	beq.n	ba58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    ba3c:	2001      	movs	r0, #1
    ba3e:	4770      	bx	lr
    ba40:	6941      	ldr	r1, [r0, #20]
    ba42:	f641 524c 	movw	r2, #7500	; 0x1d4c
    ba46:	4291      	cmp	r1, r2
    ba48:	d306      	bcc.n	ba58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    ba4a:	f8b0 2058 	ldrh.w	r2, [r0, #88]	; 0x58
    ba4e:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    ba50:	4291      	cmp	r1, r2
    ba52:	d301      	bcc.n	ba58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    ba54:	f7fe bf4e 	b.w	a8f4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    ba58:	2000      	movs	r0, #0
    ba5a:	4770      	bx	lr
    ba5c:	20000190 	.word	0x20000190
    ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba62:	4dfe      	ldr	r5, [pc, #1016]	; (be5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x45c>)
    ba64:	6869      	ldr	r1, [r5, #4]
    ba66:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    ba6a:	2afe      	cmp	r2, #254	; 0xfe
    ba6c:	bf0c      	ite	eq
    ba6e:	2800      	cmpeq	r0, #0
    ba70:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    ba72:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
    ba76:	f101 0090 	add.w	r0, r1, #144	; 0x90
    ba7a:	f04f 0301 	mov.w	r3, #1
    ba7e:	4619      	mov	r1, r3
    ba80:	f006 fe41 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ba84:	2800      	cmp	r0, #0
    ba86:	bf18      	it	ne
    ba88:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    ba8a:	6868      	ldr	r0, [r5, #4]
    ba8c:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    ba90:	f88d 1000 	strb.w	r1, [sp]
    ba94:	f89d 1000 	ldrb.w	r1, [sp]
    ba98:	2400      	movs	r4, #0
    ba9a:	b159      	cbz	r1, bab4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb4>
    ba9c:	f8a0 40d6 	strh.w	r4, [r0, #214]	; 0xd6
    baa0:	f890 1139 	ldrb.w	r1, [r0, #313]	; 0x139
    baa4:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    baa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    baac:	2100      	movs	r1, #0
    baae:	2002      	movs	r0, #2
    bab0:	f000 bf44 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bab4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    bab8:	2301      	movs	r3, #1
    baba:	2104      	movs	r1, #4
    babc:	3090      	adds	r0, #144	; 0x90
    babe:	f006 fe22 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bac2:	0006      	movs	r6, r0
    bac4:	6868      	ldr	r0, [r5, #4]
    bac6:	f04f 0702 	mov.w	r7, #2
    baca:	d00c      	beq.n	bae6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe6>
    bacc:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    bad0:	2911      	cmp	r1, #17
    bad2:	d07c      	beq.n	bbce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ce>
    bad4:	2915      	cmp	r1, #21
    bad6:	d07b      	beq.n	bbd0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d0>
    bad8:	2916      	cmp	r1, #22
    bada:	d07a      	beq.n	bbd2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d2>
    badc:	291c      	cmp	r1, #28
    bade:	f000 810f 	beq.w	bd00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    bae2:	f000 b92e 	b.w	bd42 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x342>
    bae6:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    baea:	f011 0f01 	tst.w	r1, #1
    baee:	d005      	beq.n	bafc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfc>
    baf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    baf4:	2101      	movs	r1, #1
    baf6:	2009      	movs	r0, #9
    baf8:	f000 bf20 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bafc:	f011 0f02 	tst.w	r1, #2
    bb00:	d00b      	beq.n	bb1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a>
    bb02:	2101      	movs	r1, #1
    bb04:	200c      	movs	r0, #12
    bb06:	f000 ff19 	bl	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bb0a:	6868      	ldr	r0, [r5, #4]
    bb0c:	f890 10e3 	ldrb.w	r1, [r0, #227]	; 0xe3
    bb10:	f041 0101 	orr.w	r1, r1, #1
    bb14:	f880 10e3 	strb.w	r1, [r0, #227]	; 0xe3
    bb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb1a:	f011 0f04 	tst.w	r1, #4
    bb1e:	d005      	beq.n	bb2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12c>
    bb20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bb24:	2101      	movs	r1, #1
    bb26:	2013      	movs	r0, #19
    bb28:	f000 bf08 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bb2c:	f011 0f08 	tst.w	r1, #8
    bb30:	d009      	beq.n	bb46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x146>
    bb32:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    bb36:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    bb3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bb3e:	2101      	movs	r1, #1
    bb40:	2007      	movs	r0, #7
    bb42:	f000 befb 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bb46:	f011 0f30 	tst.w	r1, #48	; 0x30
    bb4a:	d07c      	beq.n	bc46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x246>
    bb4c:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    bb50:	f88d 1000 	strb.w	r1, [sp]
    bb54:	f89d 1000 	ldrb.w	r1, [sp]
    bb58:	2900      	cmp	r1, #0
    bb5a:	d174      	bne.n	bc46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x246>
    bb5c:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    bb60:	f88d 1000 	strb.w	r1, [sp]
    bb64:	f89d 1000 	ldrb.w	r1, [sp]
    bb68:	b1c9      	cbz	r1, bb9e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19e>
    bb6a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    bb6e:	2925      	cmp	r1, #37	; 0x25
    bb70:	bf1b      	ittet	ne
    bb72:	f890 109d 	ldrbne.w	r1, [r0, #157]	; 0x9d
    bb76:	2925      	cmpne	r1, #37	; 0x25
    bb78:	2301      	moveq	r3, #1
    bb7a:	2300      	movne	r3, #0
    bb7c:	f200 321e 	addw	r2, r0, #798	; 0x31e
    bb80:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    bb84:	f7fb fefc 	bl	7980 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    bb88:	6868      	ldr	r0, [r5, #4]
    bb8a:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    bb8e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    bb92:	f041 0110 	orr.w	r1, r1, #16
    bb96:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    bb9a:	f880 413a 	strb.w	r4, [r0, #314]	; 0x13a
    bb9e:	6868      	ldr	r0, [r5, #4]
    bba0:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    bba4:	f011 0f10 	tst.w	r1, #16
    bba8:	d04d      	beq.n	bc46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x246>
    bbaa:	f007 fbe3 	bl	13374 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    bbae:	686b      	ldr	r3, [r5, #4]
    bbb0:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
    bbb4:	2801      	cmp	r0, #1
    bbb6:	bf08      	it	eq
    bbb8:	f883 7068 	strbeq.w	r7, [r3, #104]	; 0x68
    bbbc:	d00c      	beq.n	bbd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d8>
    bbbe:	f503 72c5 	add.w	r2, r3, #394	; 0x18a
    bbc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
    bbc6:	8818      	ldrh	r0, [r3, #0]
    bbc8:	f007 fb8b 	bl	132e2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    bbcc:	e002      	b.n	bbd4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d4>
    bbce:	e012      	b.n	bbf6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f6>
    bbd0:	e017      	b.n	bc02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x202>
    bbd2:	e056      	b.n	bc82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x282>
    bbd4:	f7fb feb0 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    bbd8:	6868      	ldr	r0, [r5, #4]
    bbda:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    bbde:	f8a0 112e 	strh.w	r1, [r0, #302]	; 0x12e
    bbe2:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
    bbe6:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    bbea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bbee:	2101      	movs	r1, #1
    bbf0:	2015      	movs	r0, #21
    bbf2:	f000 bea3 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bbf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bbfa:	2101      	movs	r1, #1
    bbfc:	200b      	movs	r0, #11
    bbfe:	f000 be9d 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bc02:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    bc06:	2908      	cmp	r1, #8
    bc08:	d20d      	bcs.n	bc26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x226>
    bc0a:	f501 7224 	add.w	r2, r1, #656	; 0x290
    bc0e:	f1c1 0108 	rsb	r1, r1, #8
    bc12:	b2c9      	uxtb	r1, r1
    bc14:	4410      	add	r0, r2
    bc16:	f7f8 fdf1 	bl	47fc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    bc1a:	6869      	ldr	r1, [r5, #4]
    bc1c:	f891 2132 	ldrb.w	r2, [r1, #306]	; 0x132
    bc20:	4410      	add	r0, r2
    bc22:	f881 0132 	strb.w	r0, [r1, #306]	; 0x132
    bc26:	686b      	ldr	r3, [r5, #4]
    bc28:	f893 0132 	ldrb.w	r0, [r3, #306]	; 0x132
    bc2c:	f1a0 0108 	sub.w	r1, r0, #8
    bc30:	2904      	cmp	r1, #4
    bc32:	d211      	bcs.n	bc58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x258>
    bc34:	1f02      	subs	r2, r0, #4
    bc36:	3808      	subs	r0, #8
    bc38:	f1c0 0004 	rsb	r0, r0, #4
    bc3c:	b2c1      	uxtb	r1, r0
    bc3e:	f502 7090 	add.w	r0, r2, #288	; 0x120
    bc42:	4418      	add	r0, r3
    bc44:	e000      	b.n	bc48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x248>
    bc46:	e061      	b.n	bd0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x30c>
    bc48:	f7f8 fdd8 	bl	47fc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    bc4c:	6869      	ldr	r1, [r5, #4]
    bc4e:	f891 2132 	ldrb.w	r2, [r1, #306]	; 0x132
    bc52:	4410      	add	r0, r2
    bc54:	f881 0132 	strb.w	r0, [r1, #306]	; 0x132
    bc58:	6868      	ldr	r0, [r5, #4]
    bc5a:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    bc5e:	290c      	cmp	r1, #12
    bc60:	bf38      	it	cc
    bc62:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
    bc64:	d005      	beq.n	bc72 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x272>
    bc66:	f640 013b 	movw	r1, #2107	; 0x83b
    bc6a:	f04f 0031 	mov.w	r0, #49	; 0x31
    bc6e:	f7f8 fd25 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc72:	f880 4132 	strb.w	r4, [r0, #306]	; 0x132
    bc76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bc7a:	2101      	movs	r1, #1
    bc7c:	2004      	movs	r0, #4
    bc7e:	f000 be5d 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bc82:	f890 1300 	ldrb.w	r1, [r0, #768]	; 0x300
    bc86:	2901      	cmp	r1, #1
    bc88:	d00b      	beq.n	bca2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2a2>
    bc8a:	2902      	cmp	r1, #2
    bc8c:	bf18      	it	ne
    bc8e:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    bc90:	f890 10e2 	ldrb.w	r1, [r0, #226]	; 0xe2
    bc94:	b1f9      	cbz	r1, bcd6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2d6>
    bc96:	2106      	movs	r1, #6
    bc98:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    bc9c:	2101      	movs	r1, #1
    bc9e:	2002      	movs	r0, #2
    bca0:	e028      	b.n	bcf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2f4>
    bca2:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    bca6:	f88d 1000 	strb.w	r1, [sp]
    bcaa:	f89d 1000 	ldrb.w	r1, [sp]
    bcae:	2900      	cmp	r1, #0
    bcb0:	bf18      	it	ne
    bcb2:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    bcb4:	f500 7388 	add.w	r3, r0, #272	; 0x110
    bcb8:	f500 7122 	add.w	r1, r0, #648	; 0x288
    bcbc:	2200      	movs	r2, #0
    bcbe:	f200 3001 	addw	r0, r0, #769	; 0x301
    bcc2:	f7fa feb5 	bl	6a30 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    bcc6:	2101      	movs	r1, #1
    bcc8:	2005      	movs	r0, #5
    bcca:	f000 fe37 	bl	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bcce:	6868      	ldr	r0, [r5, #4]
    bcd0:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
    bcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcd6:	2203      	movs	r2, #3
    bcd8:	2106      	movs	r1, #6
    bcda:	f880 212b 	strb.w	r2, [r0, #299]	; 0x12b
    bcde:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    bce2:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
    bce6:	0880      	lsrs	r0, r0, #2
    bce8:	f010 0f01 	tst.w	r0, #1
    bcec:	bf14      	ite	ne
    bcee:	2011      	movne	r0, #17
    bcf0:	200d      	moveq	r0, #13
    bcf2:	2101      	movs	r1, #1
    bcf4:	f000 fe22 	bl	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bcf8:	6868      	ldr	r0, [r5, #4]
    bcfa:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
    bcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bd04:	2101      	movs	r1, #1
    bd06:	2006      	movs	r0, #6
    bd08:	f000 be18 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bd0c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    bd10:	2922      	cmp	r1, #34	; 0x22
    bd12:	d007      	beq.n	bd24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x324>
    bd14:	2929      	cmp	r1, #41	; 0x29
    bd16:	d114      	bne.n	bd42 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x342>
    bd18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bd1c:	2101      	movs	r1, #1
    bd1e:	2011      	movs	r0, #17
    bd20:	f000 be0c 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bd24:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    bd28:	2902      	cmp	r1, #2
    bd2a:	d01d      	beq.n	bd68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x368>
    bd2c:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    bd30:	2901      	cmp	r1, #1
    bd32:	d106      	bne.n	bd42 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x342>
    bd34:	f890 0145 	ldrb.w	r0, [r0, #325]	; 0x145
    bd38:	f88d 0000 	strb.w	r0, [sp]
    bd3c:	f89d 0000 	ldrb.w	r0, [sp]
    bd40:	b190      	cbz	r0, bd68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x368>
    bd42:	6868      	ldr	r0, [r5, #4]
    bd44:	2301      	movs	r3, #1
    bd46:	2100      	movs	r1, #0
    bd48:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    bd4c:	3090      	adds	r0, #144	; 0x90
    bd4e:	f006 fcda 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bd52:	b1c8      	cbz	r0, bd88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x388>
    bd54:	6868      	ldr	r0, [r5, #4]
    bd56:	2301      	movs	r3, #1
    bd58:	2104      	movs	r1, #4
    bd5a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    bd5e:	3090      	adds	r0, #144	; 0x90
    bd60:	f006 fcd1 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bd64:	b130      	cbz	r0, bd74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x374>
    bd66:	e00f      	b.n	bd88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x388>
    bd68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bd6c:	2101      	movs	r1, #1
    bd6e:	2017      	movs	r0, #23
    bd70:	f000 bde4 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bd74:	6868      	ldr	r0, [r5, #4]
    bd76:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    bd7a:	b128      	cbz	r0, bd88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x388>
    bd7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bd80:	2100      	movs	r1, #0
    bd82:	2012      	movs	r0, #18
    bd84:	f000 bdda 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bd88:	6868      	ldr	r0, [r5, #4]
    bd8a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    bd8e:	2a0b      	cmp	r2, #11
    bd90:	d015      	beq.n	bdbe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3be>
    bd92:	2e00      	cmp	r6, #0
    bd94:	bf18      	it	ne
    bd96:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    bd98:	2301      	movs	r3, #1
    bd9a:	2100      	movs	r1, #0
    bd9c:	3090      	adds	r0, #144	; 0x90
    bd9e:	f006 fcb2 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bda2:	2800      	cmp	r0, #0
    bda4:	d07d      	beq.n	bea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4a2>
    bda6:	6868      	ldr	r0, [r5, #4]
    bda8:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    bdac:	b189      	cbz	r1, bdd2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3d2>
    bdae:	2100      	movs	r1, #0
    bdb0:	200e      	movs	r0, #14
    bdb2:	f000 fdc3 	bl	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bdb6:	6868      	ldr	r0, [r5, #4]
    bdb8:	f880 414b 	strb.w	r4, [r0, #331]	; 0x14b
    bdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdbe:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    bdc2:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    bdc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bdca:	2100      	movs	r1, #0
    bdcc:	2007      	movs	r0, #7
    bdce:	f000 bdb5 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bdd2:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    bdd6:	b121      	cbz	r1, bde2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3e2>
    bdd8:	f890 10e3 	ldrb.w	r1, [r0, #227]	; 0xe3
    bddc:	f011 0f03 	tst.w	r1, #3
    bde0:	d012      	beq.n	be08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x408>
    bde2:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    bde6:	f88d 1000 	strb.w	r1, [sp]
    bdea:	f89d 1000 	ldrb.w	r1, [sp]
    bdee:	b131      	cbz	r1, bdfe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3fe>
    bdf0:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    bdf4:	f88d 1000 	strb.w	r1, [sp]
    bdf8:	f89d 1000 	ldrb.w	r1, [sp]
    bdfc:	b191      	cbz	r1, be24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x424>
    bdfe:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    be02:	2901      	cmp	r1, #1
    be04:	d14d      	bne.n	bea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4a2>
    be06:	e030      	b.n	be6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x46a>
    be08:	2100      	movs	r1, #0
    be0a:	200c      	movs	r0, #12
    be0c:	f000 fd96 	bl	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    be10:	6868      	ldr	r0, [r5, #4]
    be12:	f890 10e3 	ldrb.w	r1, [r0, #227]	; 0xe3
    be16:	f041 0101 	orr.w	r1, r1, #1
    be1a:	f880 10e3 	strb.w	r1, [r0, #227]	; 0xe3
    be1e:	f880 414a 	strb.w	r4, [r0, #330]	; 0x14a
    be22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be24:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    be28:	2925      	cmp	r1, #37	; 0x25
    be2a:	bf1d      	ittte	ne
    be2c:	f890 109d 	ldrbne.w	r1, [r0, #157]	; 0x9d
    be30:	2925      	cmpne	r1, #37	; 0x25
    be32:	2300      	movne	r3, #0
    be34:	2301      	moveq	r3, #1
    be36:	f200 321e 	addw	r2, r0, #798	; 0x31e
    be3a:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    be3e:	f7fb fd9f 	bl	7980 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    be42:	6868      	ldr	r0, [r5, #4]
    be44:	f880 413a 	strb.w	r4, [r0, #314]	; 0x13a
    be48:	2100      	movs	r1, #0
    be4a:	2014      	movs	r0, #20
    be4c:	f000 fd76 	bl	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    be50:	6868      	ldr	r0, [r5, #4]
    be52:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    be56:	f8a0 112e 	strh.w	r1, [r0, #302]	; 0x12e
    be5a:	e001      	b.n	be60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x460>
    be5c:	200001a8 	.word	0x200001a8
    be60:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
    be64:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    be68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be6a:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    be6e:	f88d 1000 	strb.w	r1, [sp]
    be72:	f89d 1000 	ldrb.w	r1, [sp]
    be76:	b9a1      	cbnz	r1, bea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4a2>
    be78:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    be7c:	2301      	movs	r3, #1
    be7e:	210b      	movs	r1, #11
    be80:	3090      	adds	r0, #144	; 0x90
    be82:	f006 fc40 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    be86:	b960      	cbnz	r0, bea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4a2>
    be88:	6868      	ldr	r0, [r5, #4]
    be8a:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    be8e:	2901      	cmp	r1, #1
    be90:	bf08      	it	eq
    be92:	2301      	moveq	r3, #1
    be94:	d010      	beq.n	beb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    be96:	2902      	cmp	r1, #2
    be98:	bf08      	it	eq
    be9a:	2302      	moveq	r3, #2
    be9c:	d00c      	beq.n	beb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    be9e:	2904      	cmp	r1, #4
    bea0:	e000      	b.n	bea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4a4>
    bea2:	e05b      	b.n	bf5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55c>
    bea4:	bf14      	ite	ne
    bea6:	2908      	cmpne	r1, #8
    bea8:	2303      	moveq	r3, #3
    beaa:	d005      	beq.n	beb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    beac:	f240 21a9 	movw	r1, #681	; 0x2a9
    beb0:	f04f 0006 	mov.w	r0, #6
    beb4:	f7f8 fc02 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    beb8:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
    bebc:	2a01      	cmp	r2, #1
    bebe:	bf18      	it	ne
    bec0:	2a02      	cmpne	r2, #2
    bec2:	d004      	beq.n	bece <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ce>
    bec4:	2a04      	cmp	r2, #4
    bec6:	bf14      	ite	ne
    bec8:	2a08      	cmpne	r2, #8
    beca:	2203      	moveq	r2, #3
    becc:	d1ee      	bne.n	beac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ac>
    bece:	f890 c146 	ldrb.w	ip, [r0, #326]	; 0x146
    bed2:	2b01      	cmp	r3, #1
    bed4:	d007      	beq.n	bee6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4e6>
    bed6:	2b02      	cmp	r3, #2
    bed8:	d009      	beq.n	beee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ee>
    beda:	2b03      	cmp	r3, #3
    bedc:	bf08      	it	eq
    bede:	f1bc 0f04 	cmpeq.w	ip, #4
    bee2:	d007      	beq.n	bef4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4f4>
    bee4:	e016      	b.n	bf14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x514>
    bee6:	f1bc 0f01 	cmp.w	ip, #1
    beea:	d113      	bne.n	bf14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x514>
    beec:	e002      	b.n	bef4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4f4>
    beee:	f1bc 0f02 	cmp.w	ip, #2
    bef2:	d10f      	bne.n	bf14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x514>
    bef4:	f890 3147 	ldrb.w	r3, [r0, #327]	; 0x147
    bef8:	2a01      	cmp	r2, #1
    befa:	d006      	beq.n	bf0a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50a>
    befc:	2a02      	cmp	r2, #2
    befe:	d007      	beq.n	bf10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x510>
    bf00:	2a03      	cmp	r2, #3
    bf02:	bf08      	it	eq
    bf04:	2b04      	cmpeq	r3, #4
    bf06:	d00e      	beq.n	bf26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x526>
    bf08:	e004      	b.n	bf14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x514>
    bf0a:	2b01      	cmp	r3, #1
    bf0c:	d102      	bne.n	bf14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x514>
    bf0e:	e00a      	b.n	bf26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x526>
    bf10:	2b02      	cmp	r3, #2
    bf12:	d008      	beq.n	bf26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x526>
    bf14:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    bf18:	2301      	movs	r3, #1
    bf1a:	2103      	movs	r1, #3
    bf1c:	3090      	adds	r0, #144	; 0x90
    bf1e:	f006 fbf2 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bf22:	b9d8      	cbnz	r0, bf5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55c>
    bf24:	e011      	b.n	bf4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x54a>
    bf26:	f8b0 3094 	ldrh.w	r3, [r0, #148]	; 0x94
    bf2a:	f500 7247 	add.w	r2, r0, #796	; 0x31c
    bf2e:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    bf32:	f006 fd46 	bl	129c2 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
    bf36:	b120      	cbz	r0, bf42 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x542>
    bf38:	6869      	ldr	r1, [r5, #4]
    bf3a:	2026      	movs	r0, #38	; 0x26
    bf3c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    bf40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf42:	2000      	movs	r0, #0
    bf44:	f000 fdd0 	bl	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    bf48:	e008      	b.n	bf5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55c>
    bf4a:	6868      	ldr	r0, [r5, #4]
    bf4c:	2301      	movs	r3, #1
    bf4e:	2102      	movs	r1, #2
    bf50:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    bf54:	3090      	adds	r0, #144	; 0x90
    bf56:	f006 fbd6 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bf5a:	b1b0      	cbz	r0, bf8a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58a>
    bf5c:	6868      	ldr	r0, [r5, #4]
    bf5e:	2301      	movs	r3, #1
    bf60:	2100      	movs	r1, #0
    bf62:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    bf66:	3090      	adds	r0, #144	; 0x90
    bf68:	f006 fbcd 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bf6c:	2800      	cmp	r0, #0
    bf6e:	bf08      	it	eq
    bf70:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    bf72:	6868      	ldr	r0, [r5, #4]
    bf74:	f890 0314 	ldrb.w	r0, [r0, #788]	; 0x314
    bf78:	2800      	cmp	r0, #0
    bf7a:	bf08      	it	eq
    bf7c:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    bf7e:	2100      	movs	r1, #0
    bf80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bf84:	20ff      	movs	r0, #255	; 0xff
    bf86:	f000 bcd9 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bf8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bf8e:	2100      	movs	r1, #0
    bf90:	2016      	movs	r0, #22
    bf92:	f000 bcd3 	b.w	c93c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf3c>
    bf96:	0000      	movs	r0, r0
    bf98:	b570      	push	{r4, r5, r6, lr}
    bf9a:	b084      	sub	sp, #16
    bf9c:	4605      	mov	r5, r0
    bf9e:	4668      	mov	r0, sp
    bfa0:	f7f9 fac2 	bl	5528 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    bfa4:	b310      	cbz	r0, bfec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5ec>
    bfa6:	222a      	movs	r2, #42	; 0x2a
    bfa8:	2100      	movs	r1, #0
    bfaa:	9800      	ldr	r0, [sp, #0]
    bfac:	f004 fffe 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bfb0:	2103      	movs	r1, #3
    bfb2:	9800      	ldr	r0, [sp, #0]
    bfb4:	f006 fefb 	bl	12dae <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    bfb8:	9800      	ldr	r0, [sp, #0]
    bfba:	7801      	ldrb	r1, [r0, #0]
    bfbc:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    bfc0:	7001      	strb	r1, [r0, #0]
    bfc2:	4629      	mov	r1, r5
    bfc4:	f7fb f806 	bl	6fd4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    bfc8:	4c64      	ldr	r4, [pc, #400]	; (c15c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x75c>)
    bfca:	f644 162f 	movw	r6, #18735	; 0x492f
    bfce:	2d0e      	cmp	r5, #14
    bfd0:	d077      	beq.n	c0c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6c2>
    bfd2:	dc10      	bgt.n	bff6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5f6>
    bfd4:	f1a5 0002 	sub.w	r0, r5, #2
    bfd8:	280c      	cmp	r0, #12
    bfda:	d21e      	bcs.n	c01a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61a>
    bfdc:	e8df f000 	tbb	[pc, r0]
    bfe0:	b34f1d22 	.word	0xb34f1d22
    bfe4:	5c1d22b3 	.word	0x5c1d22b3
    bfe8:	343ab31d 	.word	0x343ab31d
    bfec:	f640 210a 	movw	r1, #2570	; 0xa0a
    bff0:	2031      	movs	r0, #49	; 0x31
    bff2:	f7f8 fb63 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bff6:	2d15      	cmp	r5, #21
    bff8:	d064      	beq.n	c0c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6c4>
    bffa:	dc08      	bgt.n	c00e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x60e>
    bffc:	2d11      	cmp	r5, #17
    bffe:	d016      	beq.n	c02e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x62e>
    c000:	2d12      	cmp	r5, #18
    c002:	bf18      	it	ne
    c004:	2d13      	cmpne	r5, #19
    c006:	d046      	beq.n	c096 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x696>
    c008:	2d14      	cmp	r5, #20
    c00a:	d05b      	beq.n	c0c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6c4>
    c00c:	e005      	b.n	c01a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61a>
    c00e:	2d16      	cmp	r5, #22
    c010:	d02c      	beq.n	c06c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x66c>
    c012:	2d17      	cmp	r5, #23
    c014:	d071      	beq.n	c0fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6fa>
    c016:	2dff      	cmp	r5, #255	; 0xff
    c018:	d06e      	beq.n	c0f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6f8>
    c01a:	f640 217b 	movw	r1, #2683	; 0xa7b
    c01e:	2031      	movs	r0, #49	; 0x31
    c020:	f7f8 fb4c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c024:	6861      	ldr	r1, [r4, #4]
    c026:	9800      	ldr	r0, [sp, #0]
    c028:	f891 112e 	ldrb.w	r1, [r1, #302]	; 0x12e
    c02c:	e010      	b.n	c050 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x650>
    c02e:	6860      	ldr	r0, [r4, #4]
    c030:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    c034:	9800      	ldr	r0, [sp, #0]
    c036:	f006 fe96 	bl	12d66 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    c03a:	6860      	ldr	r0, [r4, #4]
    c03c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    c040:	9800      	ldr	r0, [sp, #0]
    c042:	f006 fe92 	bl	12d6a <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    c046:	e07e      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c048:	6861      	ldr	r1, [r4, #4]
    c04a:	9800      	ldr	r0, [sp, #0]
    c04c:	f891 112a 	ldrb.w	r1, [r1, #298]	; 0x12a
    c050:	7101      	strb	r1, [r0, #4]
    c052:	e078      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c054:	9800      	ldr	r0, [sp, #0]
    c056:	210c      	movs	r1, #12
    c058:	7101      	strb	r1, [r0, #4]
    c05a:	2159      	movs	r1, #89	; 0x59
    c05c:	7141      	strb	r1, [r0, #5]
    c05e:	2100      	movs	r1, #0
    c060:	7181      	strb	r1, [r0, #6]
    c062:	21d8      	movs	r1, #216	; 0xd8
    c064:	71c1      	strb	r1, [r0, #7]
    c066:	2111      	movs	r1, #17
    c068:	7201      	strb	r1, [r0, #8]
    c06a:	e06c      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c06c:	6861      	ldr	r1, [r4, #4]
    c06e:	9800      	ldr	r0, [sp, #0]
    c070:	f891 2146 	ldrb.w	r2, [r1, #326]	; 0x146
    c074:	7102      	strb	r2, [r0, #4]
    c076:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    c07a:	7141      	strb	r1, [r0, #5]
    c07c:	e063      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c07e:	6860      	ldr	r0, [r4, #4]
    c080:	f500 7124 	add.w	r1, r0, #656	; 0x290
    c084:	9800      	ldr	r0, [sp, #0]
    c086:	f006 fe83 	bl	12d90 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    c08a:	6860      	ldr	r0, [r4, #4]
    c08c:	f500 7192 	add.w	r1, r0, #292	; 0x124
    c090:	9800      	ldr	r0, [sp, #0]
    c092:	f006 fe7a 	bl	12d8a <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    c096:	e056      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c098:	f002 fc08 	bl	e8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c09c:	ea00 0206 	and.w	r2, r0, r6
    c0a0:	f001 0006 	and.w	r0, r1, #6
    c0a4:	e9cd 2002 	strd	r2, r0, [sp, #8]
    c0a8:	6861      	ldr	r1, [r4, #4]
    c0aa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c0ae:	f891 10f2 	ldrb.w	r1, [r1, #242]	; 0xf2
    c0b2:	4008      	ands	r0, r1
    c0b4:	f88d 0008 	strb.w	r0, [sp, #8]
    c0b8:	a902      	add	r1, sp, #8
    c0ba:	9800      	ldr	r0, [sp, #0]
    c0bc:	f006 fe72 	bl	12da4 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    c0c0:	e041      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c0c2:	e02c      	b.n	c11e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x71e>
    c0c4:	6860      	ldr	r0, [r4, #4]
    c0c6:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    c0ca:	9800      	ldr	r0, [sp, #0]
    c0cc:	f006 fe77 	bl	12dbe <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    c0d0:	6860      	ldr	r0, [r4, #4]
    c0d2:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    c0d6:	9800      	ldr	r0, [sp, #0]
    c0d8:	f006 fe75 	bl	12dc6 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    c0dc:	6860      	ldr	r0, [r4, #4]
    c0de:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    c0e2:	9800      	ldr	r0, [sp, #0]
    c0e4:	f006 fe73 	bl	12dce <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    c0e8:	6860      	ldr	r0, [r4, #4]
    c0ea:	f8b0 112e 	ldrh.w	r1, [r0, #302]	; 0x12e
    c0ee:	9800      	ldr	r0, [sp, #0]
    c0f0:	f006 fe71 	bl	12dd6 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    c0f4:	e027      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c0f6:	e000      	b.n	c0fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6fa>
    c0f8:	e01d      	b.n	c136 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x736>
    c0fa:	6860      	ldr	r0, [r4, #4]
    c0fc:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    c100:	2901      	cmp	r1, #1
    c102:	9900      	ldr	r1, [sp, #0]
    c104:	bf14      	ite	ne
    c106:	f890 206e 	ldrbne.w	r2, [r0, #110]	; 0x6e
    c10a:	f890 2146 	ldrbeq.w	r2, [r0, #326]	; 0x146
    c10e:	710a      	strb	r2, [r1, #4]
    c110:	bf14      	ite	ne
    c112:	f890 006f 	ldrbne.w	r0, [r0, #111]	; 0x6f
    c116:	f890 0147 	ldrbeq.w	r0, [r0, #327]	; 0x147
    c11a:	7148      	strb	r0, [r1, #5]
    c11c:	e013      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c11e:	f002 fbc5 	bl	e8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c122:	4030      	ands	r0, r6
    c124:	f001 0106 	and.w	r1, r1, #6
    c128:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c12c:	a902      	add	r1, sp, #8
    c12e:	9800      	ldr	r0, [sp, #0]
    c130:	f006 fe33 	bl	12d9a <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    c134:	e007      	b.n	c146 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x746>
    c136:	6860      	ldr	r0, [r4, #4]
    c138:	f890 2317 	ldrb.w	r2, [r0, #791]	; 0x317
    c13c:	f8d0 1318 	ldr.w	r1, [r0, #792]	; 0x318
    c140:	9800      	ldr	r0, [sp, #0]
    c142:	f006 fe14 	bl	12d6e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    c146:	f7f9 f9c7 	bl	54d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    c14a:	2800      	cmp	r0, #0
    c14c:	bf1c      	itt	ne
    c14e:	b004      	addne	sp, #16
    c150:	bd70      	popne	{r4, r5, r6, pc}
    c152:	f640 217f 	movw	r1, #2687	; 0xa7f
    c156:	2031      	movs	r0, #49	; 0x31
    c158:	f7f8 fab0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c15c:	200001a8 	.word	0x200001a8
    c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c164:	4cfe      	ldr	r4, [pc, #1016]	; (c560 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb60>)
    c166:	4683      	mov	fp, r0
    c168:	b087      	sub	sp, #28
    c16a:	6860      	ldr	r0, [r4, #4]
    c16c:	460f      	mov	r7, r1
    c16e:	8800      	ldrh	r0, [r0, #0]
    c170:	f7f8 ff44 	bl	4ffc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    c174:	9005      	str	r0, [sp, #20]
    c176:	b170      	cbz	r0, c196 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x796>
    c178:	f1a4 0518 	sub.w	r5, r4, #24
    c17c:	f04f 0600 	mov.w	r6, #0
    c180:	88a8      	ldrh	r0, [r5, #4]
    c182:	f410 7f80 	tst.w	r0, #256	; 0x100
    c186:	6860      	ldr	r0, [r4, #4]
    c188:	bf1c      	itt	ne
    c18a:	f8a0 60d2 	strhne.w	r6, [r0, #210]	; 0xd2
    c18e:	f880 6284 	strbne.w	r6, [r0, #644]	; 0x284
    c192:	d005      	beq.n	c1a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7a0>
    c194:	e009      	b.n	c1aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7aa>
    c196:	f640 515c 	movw	r1, #3420	; 0xd5c
    c19a:	2031      	movs	r0, #49	; 0x31
    c19c:	f7f8 fa8e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1a0:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    c1a4:	1c49      	adds	r1, r1, #1
    c1a6:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    c1aa:	6860      	ldr	r0, [r4, #4]
    c1ac:	f04f 0901 	mov.w	r9, #1
    c1b0:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    c1b4:	b939      	cbnz	r1, c1c6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7c6>
    c1b6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    c1ba:	2301      	movs	r3, #1
    c1bc:	2106      	movs	r1, #6
    c1be:	3090      	adds	r0, #144	; 0x90
    c1c0:	f006 faa1 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c1c4:	b350      	cbz	r0, c21c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81c>
    c1c6:	88a8      	ldrh	r0, [r5, #4]
    c1c8:	f410 6f00 	tst.w	r0, #2048	; 0x800
    c1cc:	d007      	beq.n	c1de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7de>
    c1ce:	6860      	ldr	r0, [r4, #4]
    c1d0:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    c1d4:	2900      	cmp	r1, #0
    c1d6:	bf18      	it	ne
    c1d8:	f8c0 60c4 	strne.w	r6, [r0, #196]	; 0xc4
    c1dc:	d11e      	bne.n	c21c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81c>
    c1de:	6861      	ldr	r1, [r4, #4]
    c1e0:	f8d1 00c4 	ldr.w	r0, [r1, #196]	; 0xc4
    c1e4:	1c42      	adds	r2, r0, #1
    c1e6:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
    c1ea:	f8d1 00c8 	ldr.w	r0, [r1, #200]	; 0xc8
    c1ee:	4290      	cmp	r0, r2
    c1f0:	bf2c      	ite	cs
    c1f2:	1a83      	subcs	r3, r0, r2
    c1f4:	2300      	movcc	r3, #0
    c1f6:	f8b5 c006 	ldrh.w	ip, [r5, #6]
    c1fa:	f10c 0c05 	add.w	ip, ip, #5
    c1fe:	4563      	cmp	r3, ip
    c200:	bf98      	it	ls
    c202:	f881 90d0 	strbls.w	r9, [r1, #208]	; 0xd0
    c206:	4282      	cmp	r2, r0
    c208:	d308      	bcc.n	c21c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81c>
    c20a:	f501 70c0 	add.w	r0, r1, #384	; 0x180
    c20e:	220c      	movs	r2, #12
    c210:	f8c1 60c4 	str.w	r6, [r1, #196]	; 0xc4
    c214:	f7fb f858 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    c218:	f7fb fb8e 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    c21c:	88a8      	ldrh	r0, [r5, #4]
    c21e:	f04f 0802 	mov.w	r8, #2
    c222:	f410 7f40 	tst.w	r0, #768	; 0x300
    c226:	d011      	beq.n	c24c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x84c>
    c228:	6860      	ldr	r0, [r4, #4]
    c22a:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    c22e:	b111      	cbz	r1, c236 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x836>
    c230:	2903      	cmp	r1, #3
    c232:	d006      	beq.n	c242 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x842>
    c234:	e00a      	b.n	c24c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x84c>
    c236:	f880 90a2 	strb.w	r9, [r0, #162]	; 0xa2
    c23a:	2101      	movs	r1, #1
    c23c:	f7fe fb88 	bl	a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    c240:	e004      	b.n	c24c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x84c>
    c242:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    c246:	2101      	movs	r1, #1
    c248:	f7fe fb82 	bl	a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    c24c:	6860      	ldr	r0, [r4, #4]
    c24e:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    c252:	2901      	cmp	r1, #1
    c254:	d105      	bne.n	c262 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x862>
    c256:	88a9      	ldrh	r1, [r5, #4]
    c258:	f411 6f80 	tst.w	r1, #1024	; 0x400
    c25c:	bf18      	it	ne
    c25e:	f880 80a2 	strbne.w	r8, [r0, #162]	; 0xa2
    c262:	f1bb 0f00 	cmp.w	fp, #0
    c266:	f040 8292 	bne.w	c78e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd8e>
    c26a:	88a9      	ldrh	r1, [r5, #4]
    c26c:	f011 0f40 	tst.w	r1, #64	; 0x40
    c270:	bf18      	it	ne
    c272:	f8a0 6298 	strhne.w	r6, [r0, #664]	; 0x298
    c276:	d104      	bne.n	c282 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x882>
    c278:	f8b0 2298 	ldrh.w	r2, [r0, #664]	; 0x298
    c27c:	1c52      	adds	r2, r2, #1
    c27e:	f8a0 2298 	strh.w	r2, [r0, #664]	; 0x298
    c282:	ea5f 0a07 	movs.w	sl, r7
    c286:	d163      	bne.n	c350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    c288:	f011 0f08 	tst.w	r1, #8
    c28c:	d043      	beq.n	c316 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x916>
    c28e:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    c292:	29fe      	cmp	r1, #254	; 0xfe
    c294:	d00d      	beq.n	c2b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8b2>
    c296:	21fe      	movs	r1, #254	; 0xfe
    c298:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    c29c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    c2a0:	291a      	cmp	r1, #26
    c2a2:	d00b      	beq.n	c2bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8bc>
    c2a4:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    c2a8:	2920      	cmp	r1, #32
    c2aa:	d019      	beq.n	c2e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e0>
    c2ac:	292a      	cmp	r1, #42	; 0x2a
    c2ae:	d023      	beq.n	c2f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8f8>
    c2b0:	e028      	b.n	c304 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
    c2b2:	f240 71d3 	movw	r1, #2003	; 0x7d3
    c2b6:	2031      	movs	r0, #49	; 0x31
    c2b8:	f7f8 fa00 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2bc:	f880 60e1 	strb.w	r6, [r0, #225]	; 0xe1
    c2c0:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    c2c4:	1e49      	subs	r1, r1, #1
    c2c6:	b249      	sxtb	r1, r1
    c2c8:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    c2cc:	2900      	cmp	r1, #0
    c2ce:	bfa8      	it	ge
    c2d0:	f880 609e 	strbge.w	r6, [r0, #158]	; 0x9e
    c2d4:	dae6      	bge.n	c2a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8a4>
    c2d6:	f240 118d 	movw	r1, #397	; 0x18d
    c2da:	2031      	movs	r0, #49	; 0x31
    c2dc:	f7f8 f9ee 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2e0:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    c2e4:	f006 fa7b 	bl	127de <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    c2e8:	2800      	cmp	r0, #0
    c2ea:	bf14      	ite	ne
    c2ec:	2128      	movne	r1, #40	; 0x28
    c2ee:	2121      	moveq	r1, #33	; 0x21
    c2f0:	6860      	ldr	r0, [r4, #4]
    c2f2:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    c2f6:	e005      	b.n	c304 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
    c2f8:	f880 9315 	strb.w	r9, [r0, #789]	; 0x315
    c2fc:	f880 609d 	strb.w	r6, [r0, #157]	; 0x9d
    c300:	f880 60dc 	strb.w	r6, [r0, #220]	; 0xdc
    c304:	6860      	ldr	r0, [r4, #4]
    c306:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    c30a:	2909      	cmp	r1, #9
    c30c:	bf04      	itt	eq
    c30e:	f885 8000 	strbeq.w	r8, [r5]
    c312:	f880 812c 	strbeq.w	r8, [r0, #300]	; 0x12c
    c316:	7928      	ldrb	r0, [r5, #4]
    c318:	f010 0f01 	tst.w	r0, #1
    c31c:	d067      	beq.n	c3ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9ee>
    c31e:	68e8      	ldr	r0, [r5, #12]
    c320:	2301      	movs	r3, #1
    c322:	2105      	movs	r1, #5
    c324:	f890 a003 	ldrb.w	sl, [r0, #3]
    c328:	6860      	ldr	r0, [r4, #4]
    c32a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    c32e:	3090      	adds	r0, #144	; 0x90
    c330:	f006 f9e9 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c334:	b168      	cbz	r0, c352 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x952>
    c336:	f1aa 0002 	sub.w	r0, sl, #2
    c33a:	280a      	cmp	r0, #10
    c33c:	d206      	bcs.n	c34c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x94c>
    c33e:	e8df f000 	tbb	[pc, r0]
    c342:	0808      	.short	0x0808
    c344:	08080505 	.word	0x08080505
    c348:	08080505 	.word	0x08080505
    c34c:	f04f 0a08 	mov.w	sl, #8
    c350:	e07e      	b.n	c450 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa50>
    c352:	68e8      	ldr	r0, [r5, #12]
    c354:	f7fa fe2e 	bl	6fb4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    c358:	b158      	cbz	r0, c372 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x972>
    c35a:	68e8      	ldr	r0, [r5, #12]
    c35c:	f890 a003 	ldrb.w	sl, [r0, #3]
    c360:	f1ba 0f00 	cmp.w	sl, #0
    c364:	bf1c      	itt	ne
    c366:	f1ba 0f01 	cmpne.w	sl, #1
    c36a:	f1ba 0f16 	cmpne.w	sl, #22
    c36e:	d004      	beq.n	c37a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x97a>
    c370:	e01b      	b.n	c3aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9aa>
    c372:	f000 fd6b 	bl	ce4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x144c>
    c376:	4682      	mov	sl, r0
    c378:	e036      	b.n	c3e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9e8>
    c37a:	6860      	ldr	r0, [r4, #4]
    c37c:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    c380:	f006 fa2d 	bl	127de <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    c384:	b188      	cbz	r0, c3aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9aa>
    c386:	6861      	ldr	r1, [r4, #4]
    c388:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    c38c:	2820      	cmp	r0, #32
    c38e:	d00c      	beq.n	c3aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9aa>
    c390:	2821      	cmp	r0, #33	; 0x21
    c392:	bf04      	itt	eq
    c394:	2028      	moveq	r0, #40	; 0x28
    c396:	f881 009d 	strbeq.w	r0, [r1, #157]	; 0x9d
    c39a:	d006      	beq.n	c3aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9aa>
    c39c:	f1ba 0f16 	cmp.w	sl, #22
    c3a0:	bf0c      	ite	eq
    c3a2:	f04f 0a20 	moveq.w	sl, #32
    c3a6:	46c2      	movne	sl, r8
    c3a8:	e052      	b.n	c450 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa50>
    c3aa:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
    c3ae:	d205      	bcs.n	c3bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9bc>
    c3b0:	486c      	ldr	r0, [pc, #432]	; (c564 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb64>)
    c3b2:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
    c3b6:	b108      	cbz	r0, c3bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9bc>
    c3b8:	4780      	blx	r0
    c3ba:	e00c      	b.n	c3d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d6>
    c3bc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    c3c0:	d107      	bne.n	c3d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d2>
    c3c2:	6928      	ldr	r0, [r5, #16]
    c3c4:	b128      	cbz	r0, c3d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d2>
    c3c6:	6860      	ldr	r0, [r4, #4]
    c3c8:	f04f 0a00 	mov.w	sl, #0
    c3cc:	f880 9316 	strb.w	r9, [r0, #790]	; 0x316
    c3d0:	e002      	b.n	c3d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d8>
    c3d2:	f000 fd3b 	bl	ce4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x144c>
    c3d6:	4682      	mov	sl, r0
    c3d8:	6860      	ldr	r0, [r4, #4]
    c3da:	e9d0 1242 	ldrd	r1, r2, [r0, #264]	; 0x108
    c3de:	1c49      	adds	r1, r1, #1
    c3e0:	f142 0200 	adc.w	r2, r2, #0
    c3e4:	e9c0 1242 	strd	r1, r2, [r0, #264]	; 0x108
    c3e8:	f1ba 0f00 	cmp.w	sl, #0
    c3ec:	d130      	bne.n	c450 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa50>
    c3ee:	88a8      	ldrh	r0, [r5, #4]
    c3f0:	f010 0f04 	tst.w	r0, #4
    c3f4:	d006      	beq.n	c404 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa04>
    c3f6:	6861      	ldr	r1, [r4, #4]
    c3f8:	f891 10a0 	ldrb.w	r1, [r1, #160]	; 0xa0
    c3fc:	2908      	cmp	r1, #8
    c3fe:	bf08      	it	eq
    c400:	f885 9000 	strbeq.w	r9, [r5]
    c404:	f010 0f02 	tst.w	r0, #2
    c408:	d016      	beq.n	c438 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa38>
    c40a:	68a8      	ldr	r0, [r5, #8]
    c40c:	78c0      	ldrb	r0, [r0, #3]
    c40e:	2826      	cmp	r0, #38	; 0x26
    c410:	d205      	bcs.n	c41e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa1e>
    c412:	4955      	ldr	r1, [pc, #340]	; (c568 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb68>)
    c414:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    c418:	b109      	cbz	r1, c41e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa1e>
    c41a:	4788      	blx	r1
    c41c:	e00c      	b.n	c438 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa38>
    c41e:	28ff      	cmp	r0, #255	; 0xff
    c420:	d004      	beq.n	c42c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa2c>
    c422:	f240 71c9 	movw	r1, #1993	; 0x7c9
    c426:	2031      	movs	r0, #49	; 0x31
    c428:	f7f8 f948 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c42c:	6860      	ldr	r0, [r4, #4]
    c42e:	212a      	movs	r1, #42	; 0x2a
    c430:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    c434:	f880 6314 	strb.w	r6, [r0, #788]	; 0x314
    c438:	7928      	ldrb	r0, [r5, #4]
    c43a:	f010 0f10 	tst.w	r0, #16
    c43e:	d007      	beq.n	c450 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa50>
    c440:	6860      	ldr	r0, [r4, #4]
    c442:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    c446:	290c      	cmp	r1, #12
    c448:	bf04      	itt	eq
    c44a:	210d      	moveq	r1, #13
    c44c:	f880 109e 	strbeq.w	r1, [r0, #158]	; 0x9e
    c450:	78e8      	ldrb	r0, [r5, #3]
    c452:	f010 0f08 	tst.w	r0, #8
    c456:	d00d      	beq.n	c474 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa74>
    c458:	6860      	ldr	r0, [r4, #4]
    c45a:	2301      	movs	r3, #1
    c45c:	2105      	movs	r1, #5
    c45e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    c462:	3090      	adds	r0, #144	; 0x90
    c464:	f006 f94f 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c468:	2800      	cmp	r0, #0
    c46a:	bf14      	ite	ne
    c46c:	f04f 0a08 	movne.w	sl, #8
    c470:	f7f9 fb10 	bleq	5a94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    c474:	ea4a 0707 	orr.w	r7, sl, r7
    c478:	6928      	ldr	r0, [r5, #16]
    c47a:	b3e8      	cbz	r0, c4f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaf8>
    c47c:	9600      	str	r6, [sp, #0]
    c47e:	9601      	str	r6, [sp, #4]
    c480:	9602      	str	r6, [sp, #8]
    c482:	9603      	str	r6, [sp, #12]
    c484:	9604      	str	r6, [sp, #16]
    c486:	6860      	ldr	r0, [r4, #4]
    c488:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
    c48c:	f003 fa04 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c494:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    c498:	fbb0 f8f1 	udiv	r8, r0, r1
    c49c:	6860      	ldr	r0, [r4, #4]
    c49e:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
    c4a2:	f003 f9ab 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c4a6:	4440      	add	r0, r8
    c4a8:	f8ad 0006 	strh.w	r0, [sp, #6]
    c4ac:	6860      	ldr	r0, [r4, #4]
    c4ae:	8801      	ldrh	r1, [r0, #0]
    c4b0:	f8ad 1000 	strh.w	r1, [sp]
    c4b4:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    c4b8:	f8ad 1004 	strh.w	r1, [sp, #4]
    c4bc:	6940      	ldr	r0, [r0, #20]
    c4be:	f006 f8fb 	bl	126b8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    c4c2:	f8ad 0002 	strh.w	r0, [sp, #2]
    c4c6:	6860      	ldr	r0, [r4, #4]
    c4c8:	f890 0316 	ldrb.w	r0, [r0, #790]	; 0x316
    c4cc:	b130      	cbz	r0, c4dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xadc>
    c4ce:	68e8      	ldr	r0, [r5, #12]
    c4d0:	1cc1      	adds	r1, r0, #3
    c4d2:	9103      	str	r1, [sp, #12]
    c4d4:	f006 fbed 	bl	12cb2 <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>
    c4d8:	f88d 0010 	strb.w	r0, [sp, #16]
    c4dc:	6860      	ldr	r0, [r4, #4]
    c4de:	f890 0315 	ldrb.w	r0, [r0, #789]	; 0x315
    c4e2:	f88d 0008 	strb.w	r0, [sp, #8]
    c4e6:	6929      	ldr	r1, [r5, #16]
    c4e8:	4668      	mov	r0, sp
    c4ea:	4788      	blx	r1
    c4ec:	6860      	ldr	r0, [r4, #4]
    c4ee:	f880 6316 	strb.w	r6, [r0, #790]	; 0x316
    c4f2:	f880 6315 	strb.w	r6, [r0, #789]	; 0x315
    c4f6:	e000      	b.n	c4fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xafa>
    c4f8:	e021      	b.n	c53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb3e>
    c4fa:	9903      	ldr	r1, [sp, #12]
    c4fc:	b1f9      	cbz	r1, c53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb3e>
    c4fe:	f890 1314 	ldrb.w	r1, [r0, #788]	; 0x314
    c502:	b9e1      	cbnz	r1, c53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb3e>
    c504:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    c508:	292a      	cmp	r1, #42	; 0x2a
    c50a:	d018      	beq.n	c53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb3e>
    c50c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    c510:	9a03      	ldr	r2, [sp, #12]
    c512:	b1a1      	cbz	r1, c53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb3e>
    c514:	7813      	ldrb	r3, [r2, #0]
    c516:	2bff      	cmp	r3, #255	; 0xff
    c518:	d006      	beq.n	c528 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb28>
    c51a:	2b07      	cmp	r3, #7
    c51c:	bf02      	ittt	eq
    c51e:	2902      	cmpeq	r1, #2
    c520:	7851      	ldrbeq	r1, [r2, #1]
    c522:	29ff      	cmpeq	r1, #255	; 0xff
    c524:	d002      	beq.n	c52c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb2c>
    c526:	e00a      	b.n	c53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb3e>
    c528:	291b      	cmp	r1, #27
    c52a:	d808      	bhi.n	c53e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb3e>
    c52c:	f880 9314 	strb.w	r9, [r0, #788]	; 0x314
    c530:	9903      	ldr	r1, [sp, #12]
    c532:	f8c0 1318 	str.w	r1, [r0, #792]	; 0x318
    c536:	f89d 1010 	ldrb.w	r1, [sp, #16]
    c53a:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
    c53e:	4638      	mov	r0, r7
    c540:	f7ff fa8e 	bl	ba60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x60>
    c544:	f8d4 8004 	ldr.w	r8, [r4, #4]
    c548:	f8b8 0278 	ldrh.w	r0, [r8, #632]	; 0x278
    c54c:	1c40      	adds	r0, r0, #1
    c54e:	f8a8 0278 	strh.w	r0, [r8, #632]	; 0x278
    c552:	f898 027c 	ldrb.w	r0, [r8, #636]	; 0x27c
    c556:	b168      	cbz	r0, c574 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb74>
    c558:	f7f9 fb2c 	bl	5bb4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    c55c:	2800      	cmp	r0, #0
    c55e:	e005      	b.n	c56c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb6c>
    c560:	200001a8 	.word	0x200001a8
    c564:	200001b0 	.word	0x200001b0
    c568:	20000248 	.word	0x20000248
    c56c:	bf18      	it	ne
    c56e:	f8a8 6278 	strhne.w	r6, [r8, #632]	; 0x278
    c572:	e018      	b.n	c5a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba6>
    c574:	f7f9 f85e 	bl	5634 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    c578:	b130      	cbz	r0, c588 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb88>
    c57a:	6860      	ldr	r0, [r4, #4]
    c57c:	f890 027e 	ldrb.w	r0, [r0, #638]	; 0x27e
    c580:	2800      	cmp	r0, #0
    c582:	bf08      	it	eq
    c584:	f8a8 6278 	strheq.w	r6, [r8, #632]	; 0x278
    c588:	f7f9 f84e 	bl	5628 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    c58c:	b158      	cbz	r0, c5a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba6>
    c58e:	f898 0284 	ldrb.w	r0, [r8, #644]	; 0x284
    c592:	1c40      	adds	r0, r0, #1
    c594:	b2c0      	uxtb	r0, r0
    c596:	f888 0284 	strb.w	r0, [r8, #644]	; 0x284
    c59a:	2802      	cmp	r0, #2
    c59c:	bf84      	itt	hi
    c59e:	f8a8 6278 	strhhi.w	r6, [r8, #632]	; 0x278
    c5a2:	f888 6284 	strbhi.w	r6, [r8, #644]	; 0x284
    c5a6:	6860      	ldr	r0, [r4, #4]
    c5a8:	2301      	movs	r3, #1
    c5aa:	2100      	movs	r1, #0
    c5ac:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    c5b0:	3090      	adds	r0, #144	; 0x90
    c5b2:	f006 f8a8 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c5b6:	b920      	cbnz	r0, c5c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbc2>
    c5b8:	6860      	ldr	r0, [r4, #4]
    c5ba:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    c5be:	280d      	cmp	r0, #13
    c5c0:	d15c      	bne.n	c67c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>
    c5c2:	6860      	ldr	r0, [r4, #4]
    c5c4:	2301      	movs	r3, #1
    c5c6:	2100      	movs	r1, #0
    c5c8:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    c5cc:	3090      	adds	r0, #144	; 0x90
    c5ce:	f006 f89a 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c5d2:	b3e0      	cbz	r0, c64e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc4e>
    c5d4:	6860      	ldr	r0, [r4, #4]
    c5d6:	2301      	movs	r3, #1
    c5d8:	2100      	movs	r1, #0
    c5da:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
    c5de:	3090      	adds	r0, #144	; 0x90
    c5e0:	f006 f891 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c5e4:	b398      	cbz	r0, c64e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc4e>
    c5e6:	6860      	ldr	r0, [r4, #4]
    c5e8:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    c5ec:	2902      	cmp	r1, #2
    c5ee:	bf04      	itt	eq
    c5f0:	f890 0284 	ldrbeq.w	r0, [r0, #644]	; 0x284
    c5f4:	2800      	cmpeq	r0, #0
    c5f6:	d141      	bne.n	c67c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>
    c5f8:	9805      	ldr	r0, [sp, #20]
    c5fa:	f005 faec 	bl	11bd6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    c5fe:	b330      	cbz	r0, c64e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc4e>
    c600:	6861      	ldr	r1, [r4, #4]
    c602:	f891 012c 	ldrb.w	r0, [r1, #300]	; 0x12c
    c606:	28fe      	cmp	r0, #254	; 0xfe
    c608:	d138      	bne.n	c67c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>
    c60a:	f8b1 0272 	ldrh.w	r0, [r1, #626]	; 0x272
    c60e:	2801      	cmp	r0, #1
    c610:	d934      	bls.n	c67c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>
    c612:	f881 927a 	strb.w	r9, [r1, #634]	; 0x27a
    c616:	f8b1 00d4 	ldrh.w	r0, [r1, #212]	; 0xd4
    c61a:	f8b1 30d2 	ldrh.w	r3, [r1, #210]	; 0xd2
    c61e:	1e82      	subs	r2, r0, #2
    c620:	4293      	cmp	r3, r2
    c622:	bfaf      	iteee	ge
    c624:	2001      	movge	r0, #1
    c626:	1ac0      	sublt	r0, r0, r3
    c628:	1e40      	sublt	r0, r0, #1
    c62a:	b280      	uxthlt	r0, r0
    c62c:	f8b1 3278 	ldrh.w	r3, [r1, #632]	; 0x278
    c630:	88ea      	ldrh	r2, [r5, #6]
    c632:	4293      	cmp	r3, r2
    c634:	bf2f      	iteee	cs
    c636:	2201      	movcs	r2, #1
    c638:	1ad2      	subcc	r2, r2, r3
    c63a:	1c52      	addcc	r2, r2, #1
    c63c:	b292      	uxthcc	r2, r2
    c63e:	4290      	cmp	r0, r2
    c640:	bf88      	it	hi
    c642:	4610      	movhi	r0, r2
    c644:	2801      	cmp	r0, #1
    c646:	bf08      	it	eq
    c648:	f881 627a 	strbeq.w	r6, [r1, #634]	; 0x27a
    c64c:	e000      	b.n	c650 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc50>
    c64e:	e015      	b.n	c67c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>
    c650:	f891 207f 	ldrb.w	r2, [r1, #127]	; 0x7f
    c654:	f88d 2000 	strb.w	r2, [sp]
    c658:	f89d 2000 	ldrb.w	r2, [sp]
    c65c:	b992      	cbnz	r2, c684 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc84>
    c65e:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    c660:	b182      	cbz	r2, c684 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc84>
    c662:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    c666:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    c66a:	1a51      	subs	r1, r2, r1
    c66c:	b209      	sxth	r1, r1
    c66e:	2900      	cmp	r1, #0
    c670:	dd08      	ble.n	c684 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc84>
    c672:	4281      	cmp	r1, r0
    c674:	bfd8      	it	le
    c676:	4608      	movle	r0, r1
    c678:	b280      	uxth	r0, r0
    c67a:	e003      	b.n	c684 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc84>
    c67c:	6861      	ldr	r1, [r4, #4]
    c67e:	2001      	movs	r0, #1
    c680:	f881 627a 	strb.w	r6, [r1, #634]	; 0x27a
    c684:	78a9      	ldrb	r1, [r5, #2]
    c686:	2900      	cmp	r1, #0
    c688:	bf18      	it	ne
    c68a:	2801      	cmpne	r0, #1
    c68c:	bf9c      	itt	ls
    c68e:	6861      	ldrls	r1, [r4, #4]
    c690:	f881 627e 	strbls.w	r6, [r1, #638]	; 0x27e
    c694:	d903      	bls.n	c69e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc9e>
    c696:	6860      	ldr	r0, [r4, #4]
    c698:	f880 927e 	strb.w	r9, [r0, #638]	; 0x27e
    c69c:	2001      	movs	r0, #1
    c69e:	6861      	ldr	r1, [r4, #4]
    c6a0:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    c6a4:	4410      	add	r0, r2
    c6a6:	b280      	uxth	r0, r0
    c6a8:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    c6ac:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	bf18      	it	ne
    c6b4:	2b01      	cmpne	r3, #1
    c6b6:	d009      	beq.n	c6cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xccc>
    c6b8:	2b02      	cmp	r3, #2
    c6ba:	bf18      	it	ne
    c6bc:	2b03      	cmpne	r3, #3
    c6be:	d008      	beq.n	c6d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcd2>
    c6c0:	f640 21f1 	movw	r1, #2801	; 0xaf1
    c6c4:	f04f 0031 	mov.w	r0, #49	; 0x31
    c6c8:	f7f7 fff8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6cc:	f8a1 0270 	strh.w	r0, [r1, #624]	; 0x270
    c6d0:	e05d      	b.n	c78e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd8e>
    c6d2:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
    c6d6:	2b09      	cmp	r3, #9
    c6d8:	d028      	beq.n	c72c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd2c>
    c6da:	f8b1 00d2 	ldrh.w	r0, [r1, #210]	; 0xd2
    c6de:	f8b1 20d4 	ldrh.w	r2, [r1, #212]	; 0xd4
    c6e2:	1c83      	adds	r3, r0, #2
    c6e4:	f04f 0800 	mov.w	r8, #0
    c6e8:	429a      	cmp	r2, r3
    c6ea:	d30a      	bcc.n	c702 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd02>
    c6ec:	1a10      	subs	r0, r2, r0
    c6ee:	1e80      	subs	r0, r0, #2
    c6f0:	fa1f f880 	uxth.w	r8, r0
    c6f4:	f1b8 0f00 	cmp.w	r8, #0
    c6f8:	bf1c      	itt	ne
    c6fa:	f1a8 0001 	subne.w	r0, r8, #1
    c6fe:	fa1f f880 	uxthne.w	r8, r0
    c702:	f891 00d0 	ldrb.w	r0, [r1, #208]	; 0xd0
    c706:	b160      	cbz	r0, c722 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd22>
    c708:	f891 209d 	ldrb.w	r2, [r1, #157]	; 0x9d
    c70c:	f101 0090 	add.w	r0, r1, #144	; 0x90
    c710:	2301      	movs	r3, #1
    c712:	2109      	movs	r1, #9
    c714:	f005 fff7 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c718:	2800      	cmp	r0, #0
    c71a:	bf08      	it	eq
    c71c:	f04f 0800 	moveq.w	r8, #0
    c720:	d02f      	beq.n	c782 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd82>
    c722:	6860      	ldr	r0, [r4, #4]
    c724:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    c728:	b999      	cbnz	r1, c752 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd52>
    c72a:	e00a      	b.n	c742 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd42>
    c72c:	f8b1 30d2 	ldrh.w	r3, [r1, #210]	; 0xd2
    c730:	2b03      	cmp	r3, #3
    c732:	d3cb      	bcc.n	c6cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xccc>
    c734:	f8b1 00d4 	ldrh.w	r0, [r1, #212]	; 0xd4
    c738:	4410      	add	r0, r2
    c73a:	1c40      	adds	r0, r0, #1
    c73c:	f8a1 0270 	strh.w	r0, [r1, #624]	; 0x270
    c740:	e025      	b.n	c78e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd8e>
    c742:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    c746:	2301      	movs	r3, #1
    c748:	2106      	movs	r1, #6
    c74a:	3090      	adds	r0, #144	; 0x90
    c74c:	f005 ffdb 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c750:	b180      	cbz	r0, c774 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd74>
    c752:	6862      	ldr	r2, [r4, #4]
    c754:	2000      	movs	r0, #0
    c756:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    c75a:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
    c75e:	1c93      	adds	r3, r2, #2
    c760:	4299      	cmp	r1, r3
    c762:	d303      	bcc.n	c76c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd6c>
    c764:	1a88      	subs	r0, r1, r2
    c766:	1e80      	subs	r0, r0, #2
    c768:	bf18      	it	ne
    c76a:	1e40      	subne	r0, r0, #1
    c76c:	4540      	cmp	r0, r8
    c76e:	bf38      	it	cc
    c770:	fa1f f880 	uxthcc.w	r8, r0
    c774:	f1b8 0f00 	cmp.w	r8, #0
    c778:	bf1c      	itt	ne
    c77a:	f1a8 0001 	subne.w	r0, r8, #1
    c77e:	fa1f f880 	uxthne.w	r8, r0
    c782:	6860      	ldr	r0, [r4, #4]
    c784:	f8b0 1274 	ldrh.w	r1, [r0, #628]	; 0x274
    c788:	4441      	add	r1, r8
    c78a:	f8a0 1270 	strh.w	r1, [r0, #624]	; 0x270
    c78e:	7928      	ldrb	r0, [r5, #4]
    c790:	f3c0 1080 	ubfx	r0, r0, #6, #1
    c794:	2800      	cmp	r0, #0
    c796:	6860      	ldr	r0, [r4, #4]
    c798:	bf18      	it	ne
    c79a:	f8a0 6286 	strhne.w	r6, [r0, #646]	; 0x286
    c79e:	d106      	bne.n	c7ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdae>
    c7a0:	f8b0 1286 	ldrh.w	r1, [r0, #646]	; 0x286
    c7a4:	f8b0 2276 	ldrh.w	r2, [r0, #630]	; 0x276
    c7a8:	4411      	add	r1, r2
    c7aa:	f8a0 1286 	strh.w	r1, [r0, #646]	; 0x286
    c7ae:	6860      	ldr	r0, [r4, #4]
    c7b0:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    c7b4:	f88d 1000 	strb.w	r1, [sp]
    c7b8:	f89d 1000 	ldrb.w	r1, [sp]
    c7bc:	b939      	cbnz	r1, c7ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdce>
    c7be:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
    c7c2:	2301      	movs	r3, #1
    c7c4:	4619      	mov	r1, r3
    c7c6:	3090      	adds	r0, #144	; 0x90
    c7c8:	f005 ff9d 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c7cc:	b138      	cbz	r0, c7de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdde>
    c7ce:	6860      	ldr	r0, [r4, #4]
    c7d0:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    c7d4:	f8b0 2276 	ldrh.w	r2, [r0, #630]	; 0x276
    c7d8:	4411      	add	r1, r2
    c7da:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    c7de:	6861      	ldr	r1, [r4, #4]
    c7e0:	f891 00dc 	ldrb.w	r0, [r1, #220]	; 0xdc
    c7e4:	b130      	cbz	r0, c7f4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf4>
    c7e6:	f8b1 20d8 	ldrh.w	r2, [r1, #216]	; 0xd8
    c7ea:	f8b1 3276 	ldrh.w	r3, [r1, #630]	; 0x276
    c7ee:	441a      	add	r2, r3
    c7f0:	f8a1 20d8 	strh.w	r2, [r1, #216]	; 0xd8
    c7f4:	f991 20e0 	ldrsb.w	r2, [r1, #224]	; 0xe0
    c7f8:	2a00      	cmp	r2, #0
    c7fa:	dd06      	ble.n	c80a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe0a>
    c7fc:	f8b1 30de 	ldrh.w	r3, [r1, #222]	; 0xde
    c800:	f8b1 c276 	ldrh.w	ip, [r1, #630]	; 0x276
    c804:	4463      	add	r3, ip
    c806:	f8a1 30de 	strh.w	r3, [r1, #222]	; 0xde
    c80a:	f04f 083d 	mov.w	r8, #61	; 0x3d
    c80e:	f1bb 0f00 	cmp.w	fp, #0
    c812:	bf18      	it	ne
    c814:	f881 80be 	strbne.w	r8, [r1, #190]	; 0xbe
    c818:	d11b      	bne.n	c852 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe52>
    c81a:	782b      	ldrb	r3, [r5, #0]
    c81c:	2b02      	cmp	r3, #2
    c81e:	d012      	beq.n	c846 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe46>
    c820:	2b01      	cmp	r3, #1
    c822:	bf08      	it	eq
    c824:	f891 00a1 	ldrbeq.w	r0, [r1, #161]	; 0xa1
    c828:	d053      	beq.n	c8d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed2>
    c82a:	b37f      	cbz	r7, c88c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe8c>
    c82c:	f101 00b5 	add.w	r0, r1, #181	; 0xb5
    c830:	2208      	movs	r2, #8
    c832:	f7fa fd49 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    c836:	f017 0f10 	tst.w	r7, #16
    c83a:	d010      	beq.n	c85e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe5e>
    c83c:	6861      	ldr	r1, [r4, #4]
    c83e:	201e      	movs	r0, #30
    c840:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    c844:	e058      	b.n	c8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef8>
    c846:	f891 012e 	ldrb.w	r0, [r1, #302]	; 0x12e
    c84a:	2806      	cmp	r0, #6
    c84c:	bf18      	it	ne
    c84e:	2016      	movne	r0, #22
    c850:	e03f      	b.n	c8d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed2>
    c852:	f101 00b5 	add.w	r0, r1, #181	; 0xb5
    c856:	2208      	movs	r2, #8
    c858:	f7fa fd36 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    c85c:	e04c      	b.n	c8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef8>
    c85e:	f017 0f08 	tst.w	r7, #8
    c862:	bf1c      	itt	ne
    c864:	6860      	ldrne	r0, [r4, #4]
    c866:	f880 80be 	strbne.w	r8, [r0, #190]	; 0xbe
    c86a:	d145      	bne.n	c8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef8>
    c86c:	f017 0f20 	tst.w	r7, #32
    c870:	d004      	beq.n	c87c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe7c>
    c872:	6861      	ldr	r1, [r4, #4]
    c874:	2023      	movs	r0, #35	; 0x23
    c876:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    c87a:	e03d      	b.n	c8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef8>
    c87c:	f017 0f03 	tst.w	r7, #3
    c880:	d005      	beq.n	c88e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe8e>
    c882:	6861      	ldr	r1, [r4, #4]
    c884:	202a      	movs	r0, #42	; 0x2a
    c886:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    c88a:	e035      	b.n	c8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef8>
    c88c:	e004      	b.n	c898 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe98>
    c88e:	f640 4173 	movw	r1, #3187	; 0xc73
    c892:	2031      	movs	r0, #49	; 0x31
    c894:	f7f7 ff12 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c898:	b128      	cbz	r0, c8a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea6>
    c89a:	f8b1 00d8 	ldrh.w	r0, [r1, #216]	; 0xd8
    c89e:	f8b1 30da 	ldrh.w	r3, [r1, #218]	; 0xda
    c8a2:	4298      	cmp	r0, r3
    c8a4:	d214      	bcs.n	c8d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed0>
    c8a6:	2a00      	cmp	r2, #0
    c8a8:	dd05      	ble.n	c8b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xeb6>
    c8aa:	f8b1 00de 	ldrh.w	r0, [r1, #222]	; 0xde
    c8ae:	f8b1 20da 	ldrh.w	r2, [r1, #218]	; 0xda
    c8b2:	4290      	cmp	r0, r2
    c8b4:	d20c      	bcs.n	c8d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed0>
    c8b6:	f8b1 20d6 	ldrh.w	r2, [r1, #214]	; 0xd6
    c8ba:	f8b1 00d4 	ldrh.w	r0, [r1, #212]	; 0xd4
    c8be:	4282      	cmp	r2, r0
    c8c0:	d30a      	bcc.n	c8d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed8>
    c8c2:	f891 2138 	ldrb.w	r2, [r1, #312]	; 0x138
    c8c6:	f88d 2000 	strb.w	r2, [sp]
    c8ca:	f89d 2000 	ldrb.w	r2, [sp]
    c8ce:	b11a      	cbz	r2, c8d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed8>
    c8d0:	2022      	movs	r0, #34	; 0x22
    c8d2:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    c8d6:	e7bc      	b.n	c852 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe52>
    c8d8:	f891 20a2 	ldrb.w	r2, [r1, #162]	; 0xa2
    c8dc:	b132      	cbz	r2, c8ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xeec>
    c8de:	f8b1 20d2 	ldrh.w	r2, [r1, #210]	; 0xd2
    c8e2:	4282      	cmp	r2, r0
    c8e4:	bf28      	it	cs
    c8e6:	2008      	movcs	r0, #8
    c8e8:	d2f3      	bcs.n	c8d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed2>
    c8ea:	e005      	b.n	c8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef8>
    c8ec:	f8b1 00d2 	ldrh.w	r0, [r1, #210]	; 0xd2
    c8f0:	2806      	cmp	r0, #6
    c8f2:	bf28      	it	cs
    c8f4:	203e      	movcs	r0, #62	; 0x3e
    c8f6:	d2ec      	bcs.n	c8d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed2>
    c8f8:	6860      	ldr	r0, [r4, #4]
    c8fa:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    c8fe:	f88d 1000 	strb.w	r1, [sp]
    c902:	f89d 1000 	ldrb.w	r1, [sp]
    c906:	b171      	cbz	r1, c926 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf26>
    c908:	f880 609d 	strb.w	r6, [r0, #157]	; 0x9d
    c90c:	f880 609e 	strb.w	r6, [r0, #158]	; 0x9e
    c910:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2
    c914:	f890 127b 	ldrb.w	r1, [r0, #635]	; 0x27b
    c918:	2900      	cmp	r1, #0
    c91a:	bf0c      	ite	eq
    c91c:	2103      	moveq	r1, #3
    c91e:	2102      	movne	r1, #2
    c920:	f7fe f816 	bl	a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    c924:	e002      	b.n	c92c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf2c>
    c926:	2100      	movs	r1, #0
    c928:	f7fe f812 	bl	a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    c92c:	6860      	ldr	r0, [r4, #4]
    c92e:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
    c932:	b007      	add	sp, #28
    c934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c938:	f7f8 bdb8 	b.w	54ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    c93c:	4a0c      	ldr	r2, [pc, #48]	; (c970 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf70>)
    c93e:	b510      	push	{r4, lr}
    c940:	6852      	ldr	r2, [r2, #4]
    c942:	f892 312c 	ldrb.w	r3, [r2, #300]	; 0x12c
    c946:	2bfe      	cmp	r3, #254	; 0xfe
    c948:	d004      	beq.n	c954 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf54>
    c94a:	f640 2184 	movw	r1, #2692	; 0xa84
    c94e:	2031      	movs	r0, #49	; 0x31
    c950:	f7f7 feb4 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c954:	f882 012c 	strb.w	r0, [r2, #300]	; 0x12c
    c958:	2000      	movs	r0, #0
    c95a:	2900      	cmp	r1, #0
    c95c:	bf1c      	itt	ne
    c95e:	f8a2 00de 	strhne.w	r0, [r2, #222]	; 0xde
    c962:	bd10      	popne	{r4, pc}
    c964:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    c968:	2001      	movs	r0, #1
    c96a:	f882 00dc 	strb.w	r0, [r2, #220]	; 0xdc
    c96e:	bd10      	pop	{r4, pc}
    c970:	200001a8 	.word	0x200001a8
    c974:	b570      	push	{r4, r5, r6, lr}
    c976:	4b2c      	ldr	r3, [pc, #176]	; (ca28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1028>)
    c978:	4602      	mov	r2, r0
    c97a:	8898      	ldrh	r0, [r3, #4]
    c97c:	4310      	orrs	r0, r2
    c97e:	8098      	strh	r0, [r3, #4]
    c980:	f103 0018 	add.w	r0, r3, #24
    c984:	2a40      	cmp	r2, #64	; 0x40
    c986:	6840      	ldr	r0, [r0, #4]
    c988:	d011      	beq.n	c9ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfae>
    c98a:	f012 0f02 	tst.w	r2, #2
    c98e:	f04f 0400 	mov.w	r4, #0
    c992:	f04f 0c01 	mov.w	ip, #1
    c996:	f002 0501 	and.w	r5, r2, #1
    c99a:	d00d      	beq.n	c9b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfb8>
    c99c:	2d00      	cmp	r5, #0
    c99e:	bf08      	it	eq
    c9a0:	6099      	streq	r1, [r3, #8]
    c9a2:	d026      	beq.n	c9f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xff2>
    c9a4:	f640 41c9 	movw	r1, #3273	; 0xcc9
    c9a8:	2031      	movs	r0, #49	; 0x31
    c9aa:	f7f7 fe87 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c9b2:	2104      	movs	r1, #4
    c9b4:	f7fd bfcc 	b.w	a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    c9b8:	b1b5      	cbz	r5, c9e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfe8>
    c9ba:	60d9      	str	r1, [r3, #12]
    c9bc:	78c9      	ldrb	r1, [r1, #3]
    c9be:	2906      	cmp	r1, #6
    c9c0:	d009      	beq.n	c9d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd6>
    c9c2:	290b      	cmp	r1, #11
    c9c4:	bf01      	itttt	eq
    c9c6:	f890 109e 	ldrbeq.w	r1, [r0, #158]	; 0x9e
    c9ca:	2912      	cmpeq	r1, #18
    c9cc:	f880 40a3 	strbeq.w	r4, [r0, #163]	; 0xa3
    c9d0:	f880 c0e2 	strbeq.w	ip, [r0, #226]	; 0xe2
    c9d4:	e008      	b.n	c9e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfe8>
    c9d6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    c9da:	2918      	cmp	r1, #24
    c9dc:	d104      	bne.n	c9e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfe8>
    c9de:	2100      	movs	r1, #0
    c9e0:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    c9e4:	f880 c0a3 	strb.w	ip, [r0, #163]	; 0xa3
    c9e8:	f012 0f02 	tst.w	r2, #2
    c9ec:	bf18      	it	ne
    c9ee:	6899      	ldrne	r1, [r3, #8]
    c9f0:	d013      	beq.n	ca1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x101a>
    c9f2:	78c9      	ldrb	r1, [r1, #3]
    c9f4:	2905      	cmp	r1, #5
    c9f6:	d007      	beq.n	ca08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1008>
    c9f8:	290b      	cmp	r1, #11
    c9fa:	bf02      	ittt	eq
    c9fc:	f890 109e 	ldrbeq.w	r1, [r0, #158]	; 0x9e
    ca00:	2911      	cmpeq	r1, #17
    ca02:	f880 40a4 	strbeq.w	r4, [r0, #164]	; 0xa4
    ca06:	e008      	b.n	ca1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x101a>
    ca08:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    ca0c:	2916      	cmp	r1, #22
    ca0e:	d104      	bne.n	ca1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x101a>
    ca10:	2100      	movs	r1, #0
    ca12:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    ca16:	f880 c0a4 	strb.w	ip, [r0, #164]	; 0xa4
    ca1a:	f012 0f20 	tst.w	r2, #32
    ca1e:	bf1c      	itt	ne
    ca20:	2008      	movne	r0, #8
    ca22:	70d8      	strbne	r0, [r3, #3]
    ca24:	bd70      	pop	{r4, r5, r6, pc}
    ca26:	0000      	.short	0x0000
    ca28:	20000190 	.word	0x20000190
    ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca30:	4c2c      	ldr	r4, [pc, #176]	; (cae4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e4>)
    ca32:	2501      	movs	r5, #1
    ca34:	6862      	ldr	r2, [r4, #4]
    ca36:	f892 031e 	ldrb.w	r0, [r2, #798]	; 0x31e
    ca3a:	2800      	cmp	r0, #0
    ca3c:	bf14      	ite	ne
    ca3e:	2601      	movne	r6, #1
    ca40:	2600      	moveq	r6, #0
    ca42:	f892 131f 	ldrb.w	r1, [r2, #799]	; 0x31f
    ca46:	2900      	cmp	r1, #0
    ca48:	bf14      	ite	ne
    ca4a:	f04f 0c01 	movne.w	ip, #1
    ca4e:	f04f 0c00 	moveq.w	ip, #0
    ca52:	2e00      	cmp	r6, #0
    ca54:	bf08      	it	eq
    ca56:	f892 0072 	ldrbeq.w	r0, [r2, #114]	; 0x72
    ca5a:	f1bc 0f00 	cmp.w	ip, #0
    ca5e:	bf08      	it	eq
    ca60:	f892 1073 	ldrbeq.w	r1, [r2, #115]	; 0x73
    ca64:	f102 036a 	add.w	r3, r2, #106	; 0x6a
    ca68:	f882 0072 	strb.w	r0, [r2, #114]	; 0x72
    ca6c:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    ca70:	20ff      	movs	r0, #255	; 0xff
    ca72:	7298      	strb	r0, [r3, #10]
    ca74:	f892 0144 	ldrb.w	r0, [r2, #324]	; 0x144
    ca78:	2801      	cmp	r0, #1
    ca7a:	d004      	beq.n	ca86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1086>
    ca7c:	2e00      	cmp	r6, #0
    ca7e:	bf08      	it	eq
    ca80:	f1bc 0f00 	cmpeq.w	ip, #0
    ca84:	d003      	beq.n	ca8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x108e>
    ca86:	f04f 0000 	mov.w	r0, #0
    ca8a:	f000 f82d 	bl	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    ca8e:	6860      	ldr	r0, [r4, #4]
    ca90:	3034      	adds	r0, #52	; 0x34
    ca92:	f006 fcd3 	bl	1343c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    ca96:	4606      	mov	r6, r0
    ca98:	2105      	movs	r1, #5
    ca9a:	6860      	ldr	r0, [r4, #4]
    ca9c:	f7fd ff58 	bl	a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    caa0:	6860      	ldr	r0, [r4, #4]
    caa2:	3034      	adds	r0, #52	; 0x34
    caa4:	f006 fcca 	bl	1343c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    caa8:	4607      	mov	r7, r0
    caaa:	42be      	cmp	r6, r7
    caac:	d20b      	bcs.n	cac6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c6>
    caae:	f7f5 f80f 	bl	1ad0 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    cab2:	4601      	mov	r1, r0
    cab4:	1bb8      	subs	r0, r7, r6
    cab6:	2865      	cmp	r0, #101	; 0x65
    cab8:	bf38      	it	cc
    caba:	2065      	movcc	r0, #101	; 0x65
    cabc:	f7f4 ff2a 	bl	1914 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    cac0:	2800      	cmp	r0, #0
    cac2:	bf18      	it	ne
    cac4:	2500      	movne	r5, #0
    cac6:	6860      	ldr	r0, [r4, #4]
    cac8:	f006 fc54 	bl	13374 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    cacc:	b138      	cbz	r0, cade <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10de>
    cace:	6863      	ldr	r3, [r4, #4]
    cad0:	f503 72c5 	add.w	r2, r3, #394	; 0x18a
    cad4:	f103 0134 	add.w	r1, r3, #52	; 0x34
    cad8:	8818      	ldrh	r0, [r3, #0]
    cada:	f006 fc02 	bl	132e2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    cade:	4628      	mov	r0, r5
    cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cae4:	200001a8 	.word	0x200001a8
    cae8:	b510      	push	{r4, lr}
    caea:	4c1b      	ldr	r4, [pc, #108]	; (cb58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1158>)
    caec:	6861      	ldr	r1, [r4, #4]
    caee:	880a      	ldrh	r2, [r1, #0]
    caf0:	f8a1 21ce 	strh.w	r2, [r1, #462]	; 0x1ce
    caf4:	f881 01cc 	strb.w	r0, [r1, #460]	; 0x1cc
    caf8:	f891 0072 	ldrb.w	r0, [r1, #114]	; 0x72
    cafc:	2801      	cmp	r0, #1
    cafe:	bf18      	it	ne
    cb00:	2802      	cmpne	r0, #2
    cb02:	d00b      	beq.n	cb1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x111c>
    cb04:	2804      	cmp	r0, #4
    cb06:	bf14      	ite	ne
    cb08:	2808      	cmpne	r0, #8
    cb0a:	2003      	moveq	r0, #3
    cb0c:	d006      	beq.n	cb1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x111c>
    cb0e:	bf00      	nop
    cb10:	f240 21a9 	movw	r1, #681	; 0x2a9
    cb14:	f04f 0006 	mov.w	r0, #6
    cb18:	f7f7 fdd0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb1c:	f881 01d0 	strb.w	r0, [r1, #464]	; 0x1d0
    cb20:	f891 0073 	ldrb.w	r0, [r1, #115]	; 0x73
    cb24:	2801      	cmp	r0, #1
    cb26:	bf18      	it	ne
    cb28:	2802      	cmpne	r0, #2
    cb2a:	d004      	beq.n	cb36 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1136>
    cb2c:	2804      	cmp	r0, #4
    cb2e:	bf14      	ite	ne
    cb30:	2808      	cmpne	r0, #8
    cb32:	2003      	moveq	r0, #3
    cb34:	d1ec      	bne.n	cb10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
    cb36:	f881 01d1 	strb.w	r0, [r1, #465]	; 0x1d1
    cb3a:	f501 70e1 	add.w	r0, r1, #450	; 0x1c2
    cb3e:	f04f 0211 	mov.w	r2, #17
    cb42:	f7fa fbc1 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    cb46:	6861      	ldr	r1, [r4, #4]
    cb48:	2000      	movs	r0, #0
    cb4a:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    cb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb52:	f7fa bef1 	b.w	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    cb56:	0000      	.short	0x0000
    cb58:	200001a8 	.word	0x200001a8
    cb5c:	b570      	push	{r4, r5, r6, lr}
    cb5e:	4c19      	ldr	r4, [pc, #100]	; (cbc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11c4>)
    cb60:	2301      	movs	r3, #1
    cb62:	2100      	movs	r1, #0
    cb64:	6860      	ldr	r0, [r4, #4]
    cb66:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    cb6a:	3090      	adds	r0, #144	; 0x90
    cb6c:	f005 fdcb 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cb70:	2800      	cmp	r0, #0
    cb72:	bf04      	itt	eq
    cb74:	2001      	moveq	r0, #1
    cb76:	bd70      	popeq	{r4, r5, r6, pc}
    cb78:	4d13      	ldr	r5, [pc, #76]	; (cbc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11c8>)
    cb7a:	68e8      	ldr	r0, [r5, #12]
    cb7c:	f006 f870 	bl	12c60 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    cb80:	6861      	ldr	r1, [r4, #4]
    cb82:	f8a1 031c 	strh.w	r0, [r1, #796]	; 0x31c
    cb86:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    cb8a:	1a80      	subs	r0, r0, r2
    cb8c:	b200      	sxth	r0, r0
    cb8e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    cb92:	4282      	cmp	r2, r0
    cb94:	bfa8      	it	ge
    cb96:	2800      	cmpge	r0, #0
    cb98:	dd09      	ble.n	cbae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ae>
    cb9a:	f201 311e 	addw	r1, r1, #798	; 0x31e
    cb9e:	68e8      	ldr	r0, [r5, #12]
    cba0:	f006 f859 	bl	12c56 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    cba4:	6861      	ldr	r1, [r4, #4]
    cba6:	200c      	movs	r0, #12
    cba8:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    cbac:	e007      	b.n	cbbe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11be>
    cbae:	2028      	movs	r0, #40	; 0x28
    cbb0:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    cbb4:	f101 00b5 	add.w	r0, r1, #181	; 0xb5
    cbb8:	2208      	movs	r2, #8
    cbba:	f7fa fb85 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    cbbe:	2000      	movs	r0, #0
    cbc0:	bd70      	pop	{r4, r5, r6, pc}
    cbc2:	0000      	.short	0x0000
    cbc4:	200001a8 	.word	0x200001a8
    cbc8:	20000190 	.word	0x20000190
    cbcc:	b570      	push	{r4, r5, r6, lr}
    cbce:	4c2e      	ldr	r4, [pc, #184]	; (cc88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1288>)
    cbd0:	2301      	movs	r3, #1
    cbd2:	2100      	movs	r1, #0
    cbd4:	6860      	ldr	r0, [r4, #4]
    cbd6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    cbda:	3090      	adds	r0, #144	; 0x90
    cbdc:	f005 fd93 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cbe0:	2800      	cmp	r0, #0
    cbe2:	bf04      	itt	eq
    cbe4:	2001      	moveq	r0, #1
    cbe6:	bd70      	popeq	{r4, r5, r6, pc}
    cbe8:	6860      	ldr	r0, [r4, #4]
    cbea:	4d28      	ldr	r5, [pc, #160]	; (cc8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x128c>)
    cbec:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    cbf0:	68e8      	ldr	r0, [r5, #12]
    cbf2:	f006 f805 	bl	12c00 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    cbf6:	2800      	cmp	r0, #0
    cbf8:	d038      	beq.n	cc6c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x126c>
    cbfa:	68e8      	ldr	r0, [r5, #12]
    cbfc:	6861      	ldr	r1, [r4, #4]
    cbfe:	f8b0 200d 	ldrh.w	r2, [r0, #13]
    cc02:	f8a1 231c 	strh.w	r2, [r1, #796]	; 0x31c
    cc06:	f8b1 3094 	ldrh.w	r3, [r1, #148]	; 0x94
    cc0a:	1ad2      	subs	r2, r2, r3
    cc0c:	b212      	sxth	r2, r2
    cc0e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    cc12:	4293      	cmp	r3, r2
    cc14:	bfa8      	it	ge
    cc16:	2a00      	cmpge	r2, #0
    cc18:	dd2c      	ble.n	cc74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1274>
    cc1a:	f006 f824 	bl	12c66 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    cc1e:	f005 fd3f 	bl	126a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    cc22:	4606      	mov	r6, r0
    cc24:	6860      	ldr	r0, [r4, #4]
    cc26:	4631      	mov	r1, r6
    cc28:	f8c0 6324 	str.w	r6, [r0, #804]	; 0x324
    cc2c:	68e8      	ldr	r0, [r5, #12]
    cc2e:	7900      	ldrb	r0, [r0, #4]
    cc30:	f005 ff6d 	bl	12b0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    cc34:	6861      	ldr	r1, [r4, #4]
    cc36:	f8a1 031e 	strh.w	r0, [r1, #798]	; 0x31e
    cc3a:	68e8      	ldr	r0, [r5, #12]
    cc3c:	4631      	mov	r1, r6
    cc3e:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    cc42:	f005 ff5b 	bl	12afc <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    cc46:	6861      	ldr	r1, [r4, #4]
    cc48:	f8c1 0320 	str.w	r0, [r1, #800]	; 0x320
    cc4c:	68e8      	ldr	r0, [r5, #12]
    cc4e:	f006 f80d 	bl	12c6c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    cc52:	6861      	ldr	r1, [r4, #4]
    cc54:	f8a1 0328 	strh.w	r0, [r1, #808]	; 0x328
    cc58:	68e8      	ldr	r0, [r5, #12]
    cc5a:	f006 f80a 	bl	12c72 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    cc5e:	6861      	ldr	r1, [r4, #4]
    cc60:	f8a1 032a 	strh.w	r0, [r1, #810]	; 0x32a
    cc64:	200e      	movs	r0, #14
    cc66:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    cc6a:	e00b      	b.n	cc84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1284>
    cc6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc70:	f000 b8ec 	b.w	ce4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x144c>
    cc74:	2028      	movs	r0, #40	; 0x28
    cc76:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    cc7a:	f101 00b5 	add.w	r0, r1, #181	; 0xb5
    cc7e:	2208      	movs	r2, #8
    cc80:	f7fa fb22 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    cc84:	2000      	movs	r0, #0
    cc86:	bd70      	pop	{r4, r5, r6, pc}
    cc88:	200001a8 	.word	0x200001a8
    cc8c:	20000190 	.word	0x20000190
    cc90:	b538      	push	{r3, r4, r5, lr}
    cc92:	4c2d      	ldr	r4, [pc, #180]	; (cd48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1348>)
    cc94:	2301      	movs	r3, #1
    cc96:	2100      	movs	r1, #0
    cc98:	6860      	ldr	r0, [r4, #4]
    cc9a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    cc9e:	3090      	adds	r0, #144	; 0x90
    cca0:	f005 fd31 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cca4:	b970      	cbnz	r0, ccc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12c4>
    cca6:	6860      	ldr	r0, [r4, #4]
    cca8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    ccac:	2a13      	cmp	r2, #19
    ccae:	d009      	beq.n	ccc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12c4>
    ccb0:	2301      	movs	r3, #1
    ccb2:	2105      	movs	r1, #5
    ccb4:	3090      	adds	r0, #144	; 0x90
    ccb6:	f005 fd26 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ccba:	2800      	cmp	r0, #0
    ccbc:	bf0c      	ite	eq
    ccbe:	2001      	moveq	r0, #1
    ccc0:	2008      	movne	r0, #8
    ccc2:	bd38      	pop	{r3, r4, r5, pc}
    ccc4:	6860      	ldr	r0, [r4, #4]
    ccc6:	f890 10e2 	ldrb.w	r1, [r0, #226]	; 0xe2
    ccca:	b939      	cbnz	r1, ccdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12dc>
    cccc:	2100      	movs	r1, #0
    ccce:	f8a0 10de 	strh.w	r1, [r0, #222]	; 0xde
    ccd2:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    ccd6:	1c49      	adds	r1, r1, #1
    ccd8:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    ccdc:	4d1b      	ldr	r5, [pc, #108]	; (cd4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134c>)
    ccde:	f500 7122 	add.w	r1, r0, #648	; 0x288
    cce2:	68e8      	ldr	r0, [r5, #12]
    cce4:	f005 ffd4 	bl	12c90 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    cce8:	6860      	ldr	r0, [r4, #4]
    ccea:	f500 7190 	add.w	r1, r0, #288	; 0x120
    ccee:	68e8      	ldr	r0, [r5, #12]
    ccf0:	f005 ffc5 	bl	12c7e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    ccf4:	6860      	ldr	r0, [r4, #4]
    ccf6:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
    ccfa:	f88d 1000 	strb.w	r1, [sp]
    ccfe:	f89d 1000 	ldrb.w	r1, [sp]
    cd02:	b121      	cbz	r1, cd0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x130e>
    cd04:	f240 21a2 	movw	r1, #674	; 0x2a2
    cd08:	2031      	movs	r0, #49	; 0x31
    cd0a:	f7f7 fcd7 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd0e:	8801      	ldrh	r1, [r0, #0]
    cd10:	f8a0 1336 	strh.w	r1, [r0, #822]	; 0x336
    cd14:	f500 714e 	add.w	r1, r0, #824	; 0x338
    cd18:	68e8      	ldr	r0, [r5, #12]
    cd1a:	f005 ffb4 	bl	12c86 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    cd1e:	6860      	ldr	r0, [r4, #4]
    cd20:	f500 7150 	add.w	r1, r0, #832	; 0x340
    cd24:	68e8      	ldr	r0, [r5, #12]
    cd26:	f005 ffa7 	bl	12c78 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    cd2a:	6861      	ldr	r1, [r4, #4]
    cd2c:	2207      	movs	r2, #7
    cd2e:	f501 704b 	add.w	r0, r1, #812	; 0x32c
    cd32:	f7fa fac9 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    cd36:	6861      	ldr	r1, [r4, #4]
    cd38:	2015      	movs	r0, #21
    cd3a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    cd3e:	f7fa fdfb 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    cd42:	2000      	movs	r0, #0
    cd44:	bd38      	pop	{r3, r4, r5, pc}
    cd46:	0000      	.short	0x0000
    cd48:	200001a8 	.word	0x200001a8
    cd4c:	20000190 	.word	0x20000190
    cd50:	b510      	push	{r4, lr}
    cd52:	4c19      	ldr	r4, [pc, #100]	; (cdb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13b8>)
    cd54:	b082      	sub	sp, #8
    cd56:	6860      	ldr	r0, [r4, #4]
    cd58:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    cd5c:	f010 0f01 	tst.w	r0, #1
    cd60:	bf1e      	ittt	ne
    cd62:	2001      	movne	r0, #1
    cd64:	b002      	addne	sp, #8
    cd66:	bd10      	popne	{r4, pc}
    cd68:	4669      	mov	r1, sp
    cd6a:	4814      	ldr	r0, [pc, #80]	; (cdbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13bc>)
    cd6c:	68c0      	ldr	r0, [r0, #12]
    cd6e:	f005 ff96 	bl	12c9e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    cd72:	f001 fd9b 	bl	e8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    cd76:	f644 122f 	movw	r2, #18735	; 0x492f
    cd7a:	4002      	ands	r2, r0
    cd7c:	6860      	ldr	r0, [r4, #4]
    cd7e:	e9dd 4c00 	ldrd	r4, ip, [sp]
    cd82:	f001 0106 	and.w	r1, r1, #6
    cd86:	4022      	ands	r2, r4
    cd88:	ea0c 0101 	and.w	r1, ip, r1
    cd8c:	f8c0 20f2 	str.w	r2, [r0, #242]	; 0xf2
    cd90:	f8c0 10f6 	str.w	r1, [r0, #246]	; 0xf6
    cd94:	2100      	movs	r1, #0
    cd96:	f8a0 10de 	strh.w	r1, [r0, #222]	; 0xde
    cd9a:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    cd9e:	1c49      	adds	r1, r1, #1
    cda0:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    cda4:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    cda8:	f041 0101 	orr.w	r1, r1, #1
    cdac:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    cdb0:	b002      	add	sp, #8
    cdb2:	2000      	movs	r0, #0
    cdb4:	bd10      	pop	{r4, pc}
    cdb6:	0000      	.short	0x0000
    cdb8:	200001a8 	.word	0x200001a8
    cdbc:	20000190 	.word	0x20000190
    cdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdc2:	4c20      	ldr	r4, [pc, #128]	; (ce44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1444>)
    cdc4:	b083      	sub	sp, #12
    cdc6:	2301      	movs	r3, #1
    cdc8:	6860      	ldr	r0, [r4, #4]
    cdca:	2107      	movs	r1, #7
    cdcc:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    cdd0:	3090      	adds	r0, #144	; 0x90
    cdd2:	f005 fc98 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cdd6:	2800      	cmp	r0, #0
    cdd8:	bf02      	ittt	eq
    cdda:	2001      	moveq	r0, #1
    cddc:	b003      	addeq	sp, #12
    cdde:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    cde0:	4669      	mov	r1, sp
    cde2:	4819      	ldr	r0, [pc, #100]	; (ce48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1448>)
    cde4:	68c0      	ldr	r0, [r0, #12]
    cde6:	f005 ff5f 	bl	12ca8 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    cdea:	6865      	ldr	r5, [r4, #4]
    cdec:	f89d 7004 	ldrb.w	r7, [sp, #4]
    cdf0:	35f2      	adds	r5, #242	; 0xf2
    cdf2:	9e00      	ldr	r6, [sp, #0]
    cdf4:	f001 fd5a 	bl	e8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    cdf8:	ea06 0200 	and.w	r2, r6, r0
    cdfc:	ea07 0001 	and.w	r0, r7, r1
    ce00:	f644 112f 	movw	r1, #18735	; 0x492f
    ce04:	4011      	ands	r1, r2
    ce06:	f000 0006 	and.w	r0, r0, #6
    ce0a:	6029      	str	r1, [r5, #0]
    ce0c:	6068      	str	r0, [r5, #4]
    ce0e:	6861      	ldr	r1, [r4, #4]
    ce10:	2000      	movs	r0, #0
    ce12:	f881 00dc 	strb.w	r0, [r1, #220]	; 0xdc
    ce16:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    ce1a:	880a      	ldrh	r2, [r1, #0]
    ce1c:	f8a1 21de 	strh.w	r2, [r1, #478]	; 0x1de
    ce20:	f881 01dc 	strb.w	r0, [r1, #476]	; 0x1dc
    ce24:	9a00      	ldr	r2, [sp, #0]
    ce26:	f8c1 21e0 	str.w	r2, [r1, #480]	; 0x1e0
    ce2a:	9a01      	ldr	r2, [sp, #4]
    ce2c:	f8c1 21e4 	str.w	r2, [r1, #484]	; 0x1e4
    ce30:	f501 70e9 	add.w	r0, r1, #466	; 0x1d2
    ce34:	2205      	movs	r2, #5
    ce36:	f7fa fa47 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ce3a:	f7fa fd7d 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ce3e:	b003      	add	sp, #12
    ce40:	2000      	movs	r0, #0
    ce42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce44:	200001a8 	.word	0x200001a8
    ce48:	20000190 	.word	0x20000190
    ce4c:	480d      	ldr	r0, [pc, #52]	; (ce84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1484>)
    ce4e:	6840      	ldr	r0, [r0, #4]
    ce50:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    ce54:	f011 0f08 	tst.w	r1, #8
    ce58:	bf1c      	itt	ne
    ce5a:	2001      	movne	r0, #1
    ce5c:	4770      	bxne	lr
    ce5e:	f041 0108 	orr.w	r1, r1, #8
    ce62:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    ce66:	4908      	ldr	r1, [pc, #32]	; (ce88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1488>)
    ce68:	68c9      	ldr	r1, [r1, #12]
    ce6a:	78c9      	ldrb	r1, [r1, #3]
    ce6c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    ce70:	2100      	movs	r1, #0
    ce72:	f8a0 10de 	strh.w	r1, [r0, #222]	; 0xde
    ce76:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    ce7a:	1c49      	adds	r1, r1, #1
    ce7c:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    ce80:	2000      	movs	r0, #0
    ce82:	4770      	bx	lr
    ce84:	200001a8 	.word	0x200001a8
    ce88:	20000190 	.word	0x20000190
    ce8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce90:	4c39      	ldr	r4, [pc, #228]	; (cf78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1578>)
    ce92:	6860      	ldr	r0, [r4, #4]
    ce94:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    ce98:	f010 0f30 	tst.w	r0, #48	; 0x30
    ce9c:	bf1c      	itt	ne
    ce9e:	2001      	movne	r0, #1
    cea0:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cea4:	4d35      	ldr	r5, [pc, #212]	; (cf7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x157c>)
    cea6:	68e8      	ldr	r0, [r5, #12]
    cea8:	f005 ff1b 	bl	12ce2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    ceac:	b380      	cbz	r0, cf10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1510>
    ceae:	68e8      	ldr	r0, [r5, #12]
    ceb0:	f005 ff09 	bl	12cc6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    ceb4:	4680      	mov	r8, r0
    ceb6:	68e8      	ldr	r0, [r5, #12]
    ceb8:	f005 ff09 	bl	12cce <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    cebc:	4607      	mov	r7, r0
    cebe:	68e8      	ldr	r0, [r5, #12]
    cec0:	f005 feff 	bl	12cc2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    cec4:	4606      	mov	r6, r0
    cec6:	68e8      	ldr	r0, [r5, #12]
    cec8:	f005 feff 	bl	12cca <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    cecc:	4601      	mov	r1, r0
    cece:	f8cd 8000 	str.w	r8, [sp]
    ced2:	6860      	ldr	r0, [r4, #4]
    ced4:	463b      	mov	r3, r7
    ced6:	4632      	mov	r2, r6
    ced8:	3034      	adds	r0, #52	; 0x34
    ceda:	f006 fafd 	bl	134d8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    cede:	7928      	ldrb	r0, [r5, #4]
    cee0:	f010 0f02 	tst.w	r0, #2
    cee4:	d003      	beq.n	ceee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14ee>
    cee6:	68a8      	ldr	r0, [r5, #8]
    cee8:	78c0      	ldrb	r0, [r0, #3]
    ceea:	2814      	cmp	r0, #20
    ceec:	d015      	beq.n	cf1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x151a>
    ceee:	6863      	ldr	r3, [r4, #4]
    cef0:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    cef4:	281d      	cmp	r0, #29
    cef6:	d010      	beq.n	cf1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x151a>
    cef8:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
    cefc:	2801      	cmp	r0, #1
    cefe:	d018      	beq.n	cf32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1532>
    cf00:	f893 013b 	ldrb.w	r0, [r3, #315]	; 0x13b
    cf04:	f88d 0000 	strb.w	r0, [sp]
    cf08:	f89d 0000 	ldrb.w	r0, [sp]
    cf0c:	b150      	cbz	r0, cf24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1524>
    cf0e:	e010      	b.n	cf32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1532>
    cf10:	e7ff      	b.n	cf12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1512>
    cf12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf16:	f7ff bf99 	b.w	ce4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x144c>
    cf1a:	6861      	ldr	r1, [r4, #4]
    cf1c:	2001      	movs	r0, #1
    cf1e:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    cf22:	e006      	b.n	cf32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1532>
    cf24:	f893 013a 	ldrb.w	r0, [r3, #314]	; 0x13a
    cf28:	f88d 0000 	strb.w	r0, [sp]
    cf2c:	f89d 0000 	ldrb.w	r0, [sp]
    cf30:	b138      	cbz	r0, cf42 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1542>
    cf32:	6860      	ldr	r0, [r4, #4]
    cf34:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    cf38:	f041 0110 	orr.w	r1, r1, #16
    cf3c:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    cf40:	e00e      	b.n	cf60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1560>
    cf42:	f893 009f 	ldrb.w	r0, [r3, #159]	; 0x9f
    cf46:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
    cf4a:	f040 0020 	orr.w	r0, r0, #32
    cf4e:	f883 009f 	strb.w	r0, [r3, #159]	; 0x9f
    cf52:	f103 0134 	add.w	r1, r3, #52	; 0x34
    cf56:	8818      	ldrh	r0, [r3, #0]
    cf58:	f006 fac6 	bl	134e8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    cf5c:	f7fa fcec 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    cf60:	6860      	ldr	r0, [r4, #4]
    cf62:	2100      	movs	r1, #0
    cf64:	f8a0 10de 	strh.w	r1, [r0, #222]	; 0xde
    cf68:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    cf6c:	1c49      	adds	r1, r1, #1
    cf6e:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    cf72:	2000      	movs	r0, #0
    cf74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cf78:	200001a8 	.word	0x200001a8
    cf7c:	20000190 	.word	0x20000190
    cf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf84:	4c24      	ldr	r4, [pc, #144]	; (d018 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1618>)
    cf86:	2301      	movs	r3, #1
    cf88:	210a      	movs	r1, #10
    cf8a:	6860      	ldr	r0, [r4, #4]
    cf8c:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    cf90:	3090      	adds	r0, #144	; 0x90
    cf92:	f005 fbb8 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cf96:	2800      	cmp	r0, #0
    cf98:	bf04      	itt	eq
    cf9a:	2001      	moveq	r0, #1
    cf9c:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cfa0:	4d1e      	ldr	r5, [pc, #120]	; (d01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x161c>)
    cfa2:	68e8      	ldr	r0, [r5, #12]
    cfa4:	f005 fe9d 	bl	12ce2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    cfa8:	b1d8      	cbz	r0, cfe2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e2>
    cfaa:	68e8      	ldr	r0, [r5, #12]
    cfac:	f005 fe8b 	bl	12cc6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    cfb0:	4606      	mov	r6, r0
    cfb2:	68e8      	ldr	r0, [r5, #12]
    cfb4:	f005 fe8b 	bl	12cce <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    cfb8:	4680      	mov	r8, r0
    cfba:	68e8      	ldr	r0, [r5, #12]
    cfbc:	f005 fe81 	bl	12cc2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    cfc0:	4607      	mov	r7, r0
    cfc2:	68e8      	ldr	r0, [r5, #12]
    cfc4:	f005 fe81 	bl	12cca <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    cfc8:	9600      	str	r6, [sp, #0]
    cfca:	6862      	ldr	r2, [r4, #4]
    cfcc:	4601      	mov	r1, r0
    cfce:	f102 0c34 	add.w	ip, r2, #52	; 0x34
    cfd2:	4643      	mov	r3, r8
    cfd4:	463a      	mov	r2, r7
    cfd6:	4660      	mov	r0, ip
    cfd8:	f006 fa7e 	bl	134d8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    cfdc:	6860      	ldr	r0, [r4, #4]
    cfde:	f006 f9c9 	bl	13374 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    cfe2:	6863      	ldr	r3, [r4, #4]
    cfe4:	2000      	movs	r0, #0
    cfe6:	f883 00dc 	strb.w	r0, [r3, #220]	; 0xdc
    cfea:	f883 009d 	strb.w	r0, [r3, #157]	; 0x9d
    cfee:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
    cff2:	2801      	cmp	r0, #1
    cff4:	bf04      	itt	eq
    cff6:	2002      	moveq	r0, #2
    cff8:	f883 0068 	strbeq.w	r0, [r3, #104]	; 0x68
    cffc:	d008      	beq.n	d010 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1610>
    cffe:	f503 72c5 	add.w	r2, r3, #394	; 0x18a
    d002:	f103 0134 	add.w	r1, r3, #52	; 0x34
    d006:	8818      	ldrh	r0, [r3, #0]
    d008:	f006 f96b 	bl	132e2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    d00c:	f7fa fc94 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d010:	2000      	movs	r0, #0
    d012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d016:	0000      	.short	0x0000
    d018:	200001a8 	.word	0x200001a8
    d01c:	20000190 	.word	0x20000190
    d020:	480b      	ldr	r0, [pc, #44]	; (d050 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1650>)
    d022:	6840      	ldr	r0, [r0, #4]
    d024:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    d028:	f011 0f04 	tst.w	r1, #4
    d02c:	bf1c      	itt	ne
    d02e:	2001      	movne	r0, #1
    d030:	4770      	bxne	lr
    d032:	2200      	movs	r2, #0
    d034:	f8a0 20de 	strh.w	r2, [r0, #222]	; 0xde
    d038:	f890 20e0 	ldrb.w	r2, [r0, #224]	; 0xe0
    d03c:	f041 0104 	orr.w	r1, r1, #4
    d040:	1c52      	adds	r2, r2, #1
    d042:	f880 20e0 	strb.w	r2, [r0, #224]	; 0xe0
    d046:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    d04a:	2000      	movs	r0, #0
    d04c:	4770      	bx	lr
    d04e:	0000      	.short	0x0000
    d050:	200001a8 	.word	0x200001a8
    d054:	b510      	push	{r4, lr}
    d056:	4c0a      	ldr	r4, [pc, #40]	; (d080 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1680>)
    d058:	2301      	movs	r3, #1
    d05a:	2109      	movs	r1, #9
    d05c:	6860      	ldr	r0, [r4, #4]
    d05e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    d062:	3090      	adds	r0, #144	; 0x90
    d064:	f005 fb4f 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d068:	2800      	cmp	r0, #0
    d06a:	bf08      	it	eq
    d06c:	bd10      	popeq	{r4, pc}
    d06e:	2000      	movs	r0, #0
    d070:	6861      	ldr	r1, [r4, #4]
    d072:	f881 00d0 	strb.w	r0, [r1, #208]	; 0xd0
    d076:	f881 00dc 	strb.w	r0, [r1, #220]	; 0xdc
    d07a:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d07e:	bd10      	pop	{r4, pc}
    d080:	200001a8 	.word	0x200001a8
    d084:	b510      	push	{r4, lr}
    d086:	4c12      	ldr	r4, [pc, #72]	; (d0d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d0>)
    d088:	2301      	movs	r3, #1
    d08a:	2100      	movs	r1, #0
    d08c:	6860      	ldr	r0, [r4, #4]
    d08e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    d092:	3090      	adds	r0, #144	; 0x90
    d094:	f005 fb37 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d098:	b168      	cbz	r0, d0b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16b6>
    d09a:	6860      	ldr	r0, [r4, #4]
    d09c:	2100      	movs	r1, #0
    d09e:	f8a0 10de 	strh.w	r1, [r0, #222]	; 0xde
    d0a2:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    d0a6:	1c49      	adds	r1, r1, #1
    d0a8:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    d0ac:	2111      	movs	r1, #17
    d0ae:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    d0b2:	2000      	movs	r0, #0
    d0b4:	bd10      	pop	{r4, pc}
    d0b6:	6860      	ldr	r0, [r4, #4]
    d0b8:	2301      	movs	r3, #1
    d0ba:	2105      	movs	r1, #5
    d0bc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    d0c0:	3090      	adds	r0, #144	; 0x90
    d0c2:	f005 fb20 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d0c6:	2800      	cmp	r0, #0
    d0c8:	bf14      	ite	ne
    d0ca:	2008      	movne	r0, #8
    d0cc:	2001      	moveq	r0, #1
    d0ce:	bd10      	pop	{r4, pc}
    d0d0:	200001a8 	.word	0x200001a8
    d0d4:	4806      	ldr	r0, [pc, #24]	; (d0f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16f0>)
    d0d6:	6840      	ldr	r0, [r0, #4]
    d0d8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d0dc:	2912      	cmp	r1, #18
    d0de:	bf1c      	itt	ne
    d0e0:	2002      	movne	r0, #2
    d0e2:	4770      	bxne	lr
    d0e4:	2113      	movs	r1, #19
    d0e6:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    d0ea:	2000      	movs	r0, #0
    d0ec:	4770      	bx	lr
    d0ee:	0000      	.short	0x0000
    d0f0:	200001a8 	.word	0x200001a8
    d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0f6:	4c3b      	ldr	r4, [pc, #236]	; (d1e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17e4>)
    d0f8:	2301      	movs	r3, #1
    d0fa:	210b      	movs	r1, #11
    d0fc:	6860      	ldr	r0, [r4, #4]
    d0fe:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    d102:	3090      	adds	r0, #144	; 0x90
    d104:	f005 faff 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d108:	2800      	cmp	r0, #0
    d10a:	d133      	bne.n	d174 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1774>
    d10c:	6860      	ldr	r0, [r4, #4]
    d10e:	2301      	movs	r3, #1
    d110:	2100      	movs	r1, #0
    d112:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    d116:	3090      	adds	r0, #144	; 0x90
    d118:	f005 faf5 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d11c:	2800      	cmp	r0, #0
    d11e:	bf04      	itt	eq
    d120:	2001      	moveq	r0, #1
    d122:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    d124:	6860      	ldr	r0, [r4, #4]
    d126:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    d12a:	2825      	cmp	r0, #37	; 0x25
    d12c:	d022      	beq.n	d174 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1774>
    d12e:	4d2e      	ldr	r5, [pc, #184]	; (d1e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17e8>)
    d130:	68e8      	ldr	r0, [r5, #12]
    d132:	f005 fdf1 	bl	12d18 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    d136:	b1f8      	cbz	r0, d178 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1778>
    d138:	6861      	ldr	r1, [r4, #4]
    d13a:	2302      	movs	r3, #2
    d13c:	f891 00f2 	ldrb.w	r0, [r1, #242]	; 0xf2
    d140:	f040 0004 	orr.w	r0, r0, #4
    d144:	f881 00f2 	strb.w	r0, [r1, #242]	; 0xf2
    d148:	68e8      	ldr	r0, [r5, #12]
    d14a:	7942      	ldrb	r2, [r0, #5]
    d14c:	f002 0207 	and.w	r2, r2, #7
    d150:	f881 206b 	strb.w	r2, [r1, #107]	; 0x6b
    d154:	7900      	ldrb	r0, [r0, #4]
    d156:	f000 0007 	and.w	r0, r0, #7
    d15a:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    d15e:	f891 c145 	ldrb.w	ip, [r1, #325]	; 0x145
    d162:	f88d c000 	strb.w	ip, [sp]
    d166:	f89d c000 	ldrb.w	ip, [sp]
    d16a:	2500      	movs	r5, #0
    d16c:	f1bc 0f00 	cmp.w	ip, #0
    d170:	d006      	beq.n	d180 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1780>
    d172:	e029      	b.n	d1c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c8>
    d174:	2020      	movs	r0, #32
    d176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d17c:	f7ff be66 	b.w	ce4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x144c>
    d180:	f891 c144 	ldrb.w	ip, [r1, #324]	; 0x144
    d184:	f1bc 0f01 	cmp.w	ip, #1
    d188:	d01e      	beq.n	d1c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c8>
    d18a:	f891 6073 	ldrb.w	r6, [r1, #115]	; 0x73
    d18e:	f101 0c72 	add.w	ip, r1, #114	; 0x72
    d192:	4286      	cmp	r6, r0
    d194:	bf02      	ittt	eq
    d196:	f89c 0000 	ldrbeq.w	r0, [ip]
    d19a:	4290      	cmpeq	r0, r2
    d19c:	f881 3144 	strbeq.w	r3, [r1, #324]	; 0x144
    d1a0:	d012      	beq.n	d1c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c8>
    d1a2:	f501 70df 	add.w	r0, r1, #446	; 0x1be
    d1a6:	880a      	ldrh	r2, [r1, #0]
    d1a8:	f820 2b02 	strh.w	r2, [r0], #2
    d1ac:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    d1b0:	f800 2b01 	strb.w	r2, [r0], #1
    d1b4:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
    d1b8:	f800 290d 	strb.w	r2, [r0], #-13
    d1bc:	f04f 021b 	mov.w	r2, #27
    d1c0:	f7fa f882 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    d1c4:	f7fa fbb8 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d1c8:	6860      	ldr	r0, [r4, #4]
    d1ca:	2122      	movs	r1, #34	; 0x22
    d1cc:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    d1d0:	f8a0 50de 	strh.w	r5, [r0, #222]	; 0xde
    d1d4:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    d1d8:	1c49      	adds	r1, r1, #1
    d1da:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    d1de:	2000      	movs	r0, #0
    d1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1e2:	0000      	.short	0x0000
    d1e4:	200001a8 	.word	0x200001a8
    d1e8:	20000190 	.word	0x20000190
    d1ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1f0:	4c8f      	ldr	r4, [pc, #572]	; (d430 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a30>)
    d1f2:	6860      	ldr	r0, [r4, #4]
    d1f4:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    d1f8:	2921      	cmp	r1, #33	; 0x21
    d1fa:	bf0c      	ite	eq
    d1fc:	f04f 0901 	moveq.w	r9, #1
    d200:	f04f 0900 	movne.w	r9, #0
    d204:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d208:	2923      	cmp	r1, #35	; 0x23
    d20a:	bf08      	it	eq
    d20c:	f100 059e 	addeq.w	r5, r0, #158	; 0x9e
    d210:	d007      	beq.n	d222 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1822>
    d212:	f1b9 0f00 	cmp.w	r9, #0
    d216:	bf12      	itee	ne
    d218:	f100 059d 	addne.w	r5, r0, #157	; 0x9d
    d21c:	2002      	moveq	r0, #2
    d21e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d222:	f810 1ff2 	ldrb.w	r1, [r0, #242]!
    d226:	4f83      	ldr	r7, [pc, #524]	; (d434 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a34>)
    d228:	f041 0104 	orr.w	r1, r1, #4
    d22c:	7001      	strb	r1, [r0, #0]
    d22e:	f04f 0a01 	mov.w	sl, #1
    d232:	68f8      	ldr	r0, [r7, #12]
    d234:	f005 fd84 	bl	12d40 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    d238:	f04f 0800 	mov.w	r8, #0
    d23c:	2800      	cmp	r0, #0
    d23e:	d054      	beq.n	d2ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18ea>
    d240:	68fe      	ldr	r6, [r7, #12]
    d242:	4630      	mov	r0, r6
    d244:	f005 fd3b 	bl	12cbe <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d248:	4683      	mov	fp, r0
    d24a:	4630      	mov	r0, r6
    d24c:	f005 fd43 	bl	12cd6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d250:	4606      	mov	r6, r0
    d252:	f005 fb0c 	bl	1286e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d256:	b1f8      	cbz	r0, d298 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1898>
    d258:	6862      	ldr	r2, [r4, #4]
    d25a:	f892 1072 	ldrb.w	r1, [r2, #114]	; 0x72
    d25e:	4281      	cmp	r1, r0
    d260:	d01a      	beq.n	d298 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1898>
    d262:	f892 3144 	ldrb.w	r3, [r2, #324]	; 0x144
    d266:	2b01      	cmp	r3, #1
    d268:	d02a      	beq.n	d2c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18c0>
    d26a:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
    d26e:	4233      	tst	r3, r6
    d270:	d03b      	beq.n	d2ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18ea>
    d272:	bf00      	nop
    d274:	f1b9 0f00 	cmp.w	r9, #0
    d278:	bf04      	itt	eq
    d27a:	f892 206b 	ldrbeq.w	r2, [r2, #107]	; 0x6b
    d27e:	4232      	tsteq	r2, r6
    d280:	d10a      	bne.n	d298 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1898>
    d282:	b311      	cbz	r1, d2ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18ca>
    d284:	2904      	cmp	r1, #4
    d286:	bf18      	it	ne
    d288:	2804      	cmpne	r0, #4
    d28a:	d023      	beq.n	d2d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18d4>
    d28c:	2908      	cmp	r1, #8
    d28e:	bf18      	it	ne
    d290:	2808      	cmpne	r0, #8
    d292:	d022      	beq.n	d2da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18da>
    d294:	4281      	cmp	r1, r0
    d296:	d828      	bhi.n	d2ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18ea>
    d298:	4658      	mov	r0, fp
    d29a:	f005 fae8 	bl	1286e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d29e:	0001      	movs	r1, r0
    d2a0:	d042      	beq.n	d328 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1928>
    d2a2:	6860      	ldr	r0, [r4, #4]
    d2a4:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
    d2a8:	428a      	cmp	r2, r1
    d2aa:	d03d      	beq.n	d328 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1928>
    d2ac:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    d2b0:	2901      	cmp	r1, #1
    d2b2:	d015      	beq.n	d2e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18e0>
    d2b4:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    d2b8:	ea10 0f0b 	tst.w	r0, fp
    d2bc:	d015      	beq.n	d2ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18ea>
    d2be:	e033      	b.n	d328 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1928>
    d2c0:	f892 3146 	ldrb.w	r3, [r2, #326]	; 0x146
    d2c4:	4233      	tst	r3, r6
    d2c6:	d1d5      	bne.n	d274 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1874>
    d2c8:	e00f      	b.n	d2ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18ea>
    d2ca:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    d2ce:	2006      	movs	r0, #6
    d2d0:	f7f7 f9f4 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2d4:	4281      	cmp	r1, r0
    d2d6:	d308      	bcc.n	d2ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18ea>
    d2d8:	e7de      	b.n	d298 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1898>
    d2da:	4281      	cmp	r1, r0
    d2dc:	d305      	bcc.n	d2ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18ea>
    d2de:	e7db      	b.n	d298 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1898>
    d2e0:	f890 0147 	ldrb.w	r0, [r0, #327]	; 0x147
    d2e4:	ea10 0f0b 	tst.w	r0, fp
    d2e8:	d11e      	bne.n	d328 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1928>
    d2ea:	6860      	ldr	r0, [r4, #4]
    d2ec:	2600      	movs	r6, #0
    d2ee:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    d2f2:	2901      	cmp	r1, #1
    d2f4:	bf0a      	itet	eq
    d2f6:	201e      	moveq	r0, #30
    d2f8:	f880 8144 	strbne.w	r8, [r0, #324]	; 0x144
    d2fc:	f7ff fbf4 	bleq	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    d300:	f1b9 0f00 	cmp.w	r9, #0
    d304:	d03b      	beq.n	d37e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x197e>
    d306:	68f8      	ldr	r0, [r7, #12]
    d308:	6861      	ldr	r1, [r4, #4]
    d30a:	78c0      	ldrb	r0, [r0, #3]
    d30c:	f881 0129 	strb.w	r0, [r1, #297]	; 0x129
    d310:	fa0a f000 	lsl.w	r0, sl, r0
    d314:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
    d318:	d027      	beq.n	d36a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x196a>
    d31a:	200b      	movs	r0, #11
    d31c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d320:	f891 00dc 	ldrb.w	r0, [r1, #220]	; 0xdc
    d324:	b330      	cbz	r0, d374 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1974>
    d326:	e038      	b.n	d39a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x199a>
    d328:	466a      	mov	r2, sp
    d32a:	6860      	ldr	r0, [r4, #4]
    d32c:	68f9      	ldr	r1, [r7, #12]
    d32e:	f7f9 fc21 	bl	6b74 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    d332:	b3a8      	cbz	r0, d3a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19a0>
    d334:	68f8      	ldr	r0, [r7, #12]
    d336:	f005 fccc 	bl	12cd2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d33a:	6861      	ldr	r1, [r4, #4]
    d33c:	f8a1 031c 	strh.w	r0, [r1, #796]	; 0x31c
    d340:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    d344:	1a80      	subs	r0, r0, r2
    d346:	b200      	sxth	r0, r0
    d348:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    d34c:	4282      	cmp	r2, r0
    d34e:	bfa8      	it	ge
    d350:	2800      	cmpge	r0, #0
    d352:	dd4c      	ble.n	d3ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19ee>
    d354:	f89d 0000 	ldrb.w	r0, [sp]
    d358:	f881 031e 	strb.w	r0, [r1, #798]	; 0x31e
    d35c:	f89d 0001 	ldrb.w	r0, [sp, #1]
    d360:	f881 031f 	strb.w	r0, [r1, #799]	; 0x31f
    d364:	2025      	movs	r0, #37	; 0x25
    d366:	7028      	strb	r0, [r5, #0]
    d368:	e049      	b.n	d3fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19fe>
    d36a:	f240 31fd 	movw	r1, #1021	; 0x3fd
    d36e:	2031      	movs	r0, #49	; 0x31
    d370:	f7f7 f9a4 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d374:	f240 4105 	movw	r1, #1029	; 0x405
    d378:	2031      	movs	r0, #49	; 0x31
    d37a:	f7f7 f99f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d37e:	f885 8000 	strb.w	r8, [r5]
    d382:	6861      	ldr	r1, [r4, #4]
    d384:	f891 00e0 	ldrb.w	r0, [r1, #224]	; 0xe0
    d388:	1e40      	subs	r0, r0, #1
    d38a:	b240      	sxtb	r0, r0
    d38c:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    d390:	2800      	cmp	r0, #0
    d392:	db44      	blt.n	d41e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a1e>
    d394:	f7ff fd5a 	bl	ce4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x144c>
    d398:	4606      	mov	r6, r0
    d39a:	4630      	mov	r0, r6
    d39c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3a0:	e7ff      	b.n	d3a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19a2>
    d3a2:	6860      	ldr	r0, [r4, #4]
    d3a4:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    d3a8:	2901      	cmp	r1, #1
    d3aa:	bf18      	it	ne
    d3ac:	f880 8144 	strbne.w	r8, [r0, #324]	; 0x144
    d3b0:	d007      	beq.n	d3c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19c2>
    d3b2:	6860      	ldr	r0, [r4, #4]
    d3b4:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    d3b8:	42a9      	cmp	r1, r5
    d3ba:	bf08      	it	eq
    d3bc:	f880 809e 	strbeq.w	r8, [r0, #158]	; 0x9e
    d3c0:	e01d      	b.n	d3fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19fe>
    d3c2:	f8b0 3094 	ldrh.w	r3, [r0, #148]	; 0x94
    d3c6:	f500 7247 	add.w	r2, r0, #796	; 0x31c
    d3ca:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    d3ce:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    d3d2:	f005 faf6 	bl	129c2 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
    d3d6:	b120      	cbz	r0, d3e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19e2>
    d3d8:	6861      	ldr	r1, [r4, #4]
    d3da:	2026      	movs	r0, #38	; 0x26
    d3dc:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d3e0:	e7e7      	b.n	d3b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19b2>
    d3e2:	2000      	movs	r0, #0
    d3e4:	f7ff fb80 	bl	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    d3e8:	f885 8000 	strb.w	r8, [r5]
    d3ec:	e7e1      	b.n	d3b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19b2>
    d3ee:	2028      	movs	r0, #40	; 0x28
    d3f0:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    d3f4:	f101 00b5 	add.w	r0, r1, #181	; 0xb5
    d3f8:	2208      	movs	r2, #8
    d3fa:	f7f9 ff65 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    d3fe:	6860      	ldr	r0, [r4, #4]
    d400:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    d404:	42a9      	cmp	r1, r5
    d406:	bf18      	it	ne
    d408:	f880 80dc 	strbne.w	r8, [r0, #220]	; 0xdc
    d40c:	d10c      	bne.n	d428 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a28>
    d40e:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    d412:	1e49      	subs	r1, r1, #1
    d414:	b249      	sxtb	r1, r1
    d416:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    d41a:	2900      	cmp	r1, #0
    d41c:	da04      	bge.n	d428 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a28>
    d41e:	f240 118d 	movw	r1, #397	; 0x18d
    d422:	2031      	movs	r0, #49	; 0x31
    d424:	f7f7 f94a 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d428:	2000      	movs	r0, #0
    d42a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d42e:	0000      	.short	0x0000
    d430:	200001a8 	.word	0x200001a8
    d434:	20000190 	.word	0x20000190
    d438:	b570      	push	{r4, r5, r6, lr}
    d43a:	4d1a      	ldr	r5, [pc, #104]	; (d4a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aa4>)
    d43c:	f1a5 0618 	sub.w	r6, r5, #24
    d440:	6868      	ldr	r0, [r5, #4]
    d442:	f810 1ff2 	ldrb.w	r1, [r0, #242]!
    d446:	f041 0104 	orr.w	r1, r1, #4
    d44a:	7001      	strb	r1, [r0, #0]
    d44c:	68f0      	ldr	r0, [r6, #12]
    d44e:	f005 fc86 	bl	12d5e <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    d452:	4604      	mov	r4, r0
    d454:	68f0      	ldr	r0, [r6, #12]
    d456:	f005 fc84 	bl	12d62 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    d45a:	4621      	mov	r1, r4
    d45c:	2400      	movs	r4, #0
    d45e:	2916      	cmp	r1, #22
    d460:	d11d      	bne.n	d49e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a9e>
    d462:	6869      	ldr	r1, [r5, #4]
    d464:	f891 209d 	ldrb.w	r2, [r1, #157]	; 0x9d
    d468:	2a21      	cmp	r2, #33	; 0x21
    d46a:	d002      	beq.n	d472 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a72>
    d46c:	2a28      	cmp	r2, #40	; 0x28
    d46e:	d003      	beq.n	d478 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a78>
    d470:	e015      	b.n	d49e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a9e>
    d472:	f7ff fb39 	bl	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    d476:	e00c      	b.n	d492 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a92>
    d478:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    d47c:	f101 0090 	add.w	r0, r1, #144	; 0x90
    d480:	2301      	movs	r3, #1
    d482:	210b      	movs	r1, #11
    d484:	f005 f93f 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d488:	2800      	cmp	r0, #0
    d48a:	bf04      	itt	eq
    d48c:	202a      	moveq	r0, #42	; 0x2a
    d48e:	f7ff fb2b 	bleq	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    d492:	2000      	movs	r0, #0
    d494:	6869      	ldr	r1, [r5, #4]
    d496:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d49a:	f881 00dc 	strb.w	r0, [r1, #220]	; 0xdc
    d49e:	4620      	mov	r0, r4
    d4a0:	bd70      	pop	{r4, r5, r6, pc}
    d4a2:	0000      	.short	0x0000
    d4a4:	200001a8 	.word	0x200001a8
    d4a8:	b570      	push	{r4, r5, r6, lr}
    d4aa:	4c18      	ldr	r4, [pc, #96]	; (d50c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0c>)
    d4ac:	4816      	ldr	r0, [pc, #88]	; (d508 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b08>)
    d4ae:	6863      	ldr	r3, [r4, #4]
    d4b0:	68c0      	ldr	r0, [r0, #12]
    d4b2:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
    d4b6:	7900      	ldrb	r0, [r0, #4]
    d4b8:	2921      	cmp	r1, #33	; 0x21
    d4ba:	bf1b      	ittet	ne
    d4bc:	460a      	movne	r2, r1
    d4be:	2928      	cmpne	r1, #40	; 0x28
    d4c0:	2216      	moveq	r2, #22
    d4c2:	22fe      	movne	r2, #254	; 0xfe
    d4c4:	f04f 0500 	mov.w	r5, #0
    d4c8:	2a16      	cmp	r2, #22
    d4ca:	d11a      	bne.n	d502 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b02>
    d4cc:	2921      	cmp	r1, #33	; 0x21
    d4ce:	d002      	beq.n	d4d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ad6>
    d4d0:	2928      	cmp	r1, #40	; 0x28
    d4d2:	d003      	beq.n	d4dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1adc>
    d4d4:	e015      	b.n	d502 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b02>
    d4d6:	f7ff fb07 	bl	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    d4da:	e00c      	b.n	d4f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1af6>
    d4dc:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    d4e0:	f103 0090 	add.w	r0, r3, #144	; 0x90
    d4e4:	2301      	movs	r3, #1
    d4e6:	210b      	movs	r1, #11
    d4e8:	f005 f90d 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d4ec:	2800      	cmp	r0, #0
    d4ee:	bf04      	itt	eq
    d4f0:	202a      	moveq	r0, #42	; 0x2a
    d4f2:	f7ff faf9 	bleq	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    d4f6:	2000      	movs	r0, #0
    d4f8:	6861      	ldr	r1, [r4, #4]
    d4fa:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d4fe:	f881 00dc 	strb.w	r0, [r1, #220]	; 0xdc
    d502:	4628      	mov	r0, r5
    d504:	bd70      	pop	{r4, r5, r6, pc}
    d506:	0000      	.short	0x0000
    d508:	20000190 	.word	0x20000190
    d50c:	200001a8 	.word	0x200001a8
    d510:	480d      	ldr	r0, [pc, #52]	; (d548 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b48>)
    d512:	b510      	push	{r4, lr}
    d514:	6840      	ldr	r0, [r0, #4]
    d516:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d51a:	2918      	cmp	r1, #24
    d51c:	bf1c      	itt	ne
    d51e:	2002      	movne	r0, #2
    d520:	bd10      	popne	{r4, pc}
    d522:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    d526:	1e49      	subs	r1, r1, #1
    d528:	b249      	sxtb	r1, r1
    d52a:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    d52e:	2900      	cmp	r1, #0
    d530:	da04      	bge.n	d53c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b3c>
    d532:	f240 118d 	movw	r1, #397	; 0x18d
    d536:	2031      	movs	r0, #49	; 0x31
    d538:	f7f7 f8c0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d53c:	211c      	movs	r1, #28
    d53e:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    d542:	2000      	movs	r0, #0
    d544:	bd10      	pop	{r4, pc}
    d546:	0000      	.short	0x0000
    d548:	200001a8 	.word	0x200001a8
    d54c:	b510      	push	{r4, lr}
    d54e:	4c0c      	ldr	r4, [pc, #48]	; (d580 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b80>)
    d550:	2301      	movs	r3, #1
    d552:	4619      	mov	r1, r3
    d554:	6860      	ldr	r0, [r4, #4]
    d556:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
    d55a:	3090      	adds	r0, #144	; 0x90
    d55c:	f005 f8d3 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d560:	2800      	cmp	r0, #0
    d562:	bf1c      	itt	ne
    d564:	2000      	movne	r0, #0
    d566:	bd10      	popne	{r4, pc}
    d568:	4806      	ldr	r0, [pc, #24]	; (d584 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b84>)
    d56a:	68c0      	ldr	r0, [r0, #12]
    d56c:	f005 fbb5 	bl	12cda <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    d570:	6861      	ldr	r1, [r4, #4]
    d572:	f881 00a1 	strb.w	r0, [r1, #161]	; 0xa1
    d576:	2008      	movs	r0, #8
    d578:	f881 00a0 	strb.w	r0, [r1, #160]	; 0xa0
    d57c:	2000      	movs	r0, #0
    d57e:	bd10      	pop	{r4, pc}
    d580:	200001a8 	.word	0x200001a8
    d584:	20000190 	.word	0x20000190
    d588:	b570      	push	{r4, r5, r6, lr}
    d58a:	484d      	ldr	r0, [pc, #308]	; (d6c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cc0>)
    d58c:	2600      	movs	r6, #0
    d58e:	f100 0518 	add.w	r5, r0, #24
    d592:	68c1      	ldr	r1, [r0, #12]
    d594:	f04f 0c01 	mov.w	ip, #1
    d598:	4634      	mov	r4, r6
    d59a:	790b      	ldrb	r3, [r1, #4]
    d59c:	6869      	ldr	r1, [r5, #4]
    d59e:	2b16      	cmp	r3, #22
    d5a0:	f891 209d 	ldrb.w	r2, [r1, #157]	; 0x9d
    d5a4:	d050      	beq.n	d648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c48>
    d5a6:	dc08      	bgt.n	d5ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bba>
    d5a8:	2b0e      	cmp	r3, #14
    d5aa:	d00b      	beq.n	d5c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bc4>
    d5ac:	2b12      	cmp	r3, #18
    d5ae:	d01b      	beq.n	d5e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be8>
    d5b0:	2b14      	cmp	r3, #20
    d5b2:	bf08      	it	eq
    d5b4:	2a1d      	cmpeq	r2, #29
    d5b6:	d029      	beq.n	d60c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0c>
    d5b8:	e080      	b.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d5ba:	2b17      	cmp	r3, #23
    d5bc:	d05a      	beq.n	d674 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c74>
    d5be:	2bff      	cmp	r3, #255	; 0xff
    d5c0:	d077      	beq.n	d6b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cb2>
    d5c2:	e07b      	b.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d5c4:	2a04      	cmp	r2, #4
    d5c6:	d179      	bne.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d5c8:	f881 409d 	strb.w	r4, [r1, #157]	; 0x9d
    d5cc:	f881 40dc 	strb.w	r4, [r1, #220]	; 0xdc
    d5d0:	8808      	ldrh	r0, [r1, #0]
    d5d2:	f8a1 01de 	strh.w	r0, [r1, #478]	; 0x1de
    d5d6:	201a      	movs	r0, #26
    d5d8:	f881 01dc 	strb.w	r0, [r1, #476]	; 0x1dc
    d5dc:	f501 70e9 	add.w	r0, r1, #466	; 0x1d2
    d5e0:	2205      	movs	r2, #5
    d5e2:	f7f9 fe71 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    d5e6:	e02c      	b.n	d642 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c42>
    d5e8:	2a0f      	cmp	r2, #15
    d5ea:	d167      	bne.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d5ec:	f101 0090 	add.w	r0, r1, #144	; 0x90
    d5f0:	2301      	movs	r3, #1
    d5f2:	2109      	movs	r1, #9
    d5f4:	f005 f887 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d5f8:	2800      	cmp	r0, #0
    d5fa:	d05f      	beq.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d5fc:	6868      	ldr	r0, [r5, #4]
    d5fe:	f880 40d0 	strb.w	r4, [r0, #208]	; 0xd0
    d602:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    d606:	f880 409d 	strb.w	r4, [r0, #157]	; 0x9d
    d60a:	e057      	b.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d60c:	f881 409d 	strb.w	r4, [r1, #157]	; 0x9d
    d610:	f881 40dc 	strb.w	r4, [r1, #220]	; 0xdc
    d614:	f891 00f2 	ldrb.w	r0, [r1, #242]	; 0xf2
    d618:	f020 0020 	bic.w	r0, r0, #32
    d61c:	f881 00f2 	strb.w	r0, [r1, #242]	; 0xf2
    d620:	f891 0068 	ldrb.w	r0, [r1, #104]	; 0x68
    d624:	2801      	cmp	r0, #1
    d626:	bf04      	itt	eq
    d628:	2002      	moveq	r0, #2
    d62a:	f881 0068 	strbeq.w	r0, [r1, #104]	; 0x68
    d62e:	d045      	beq.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d630:	f501 72c5 	add.w	r2, r1, #394	; 0x18a
    d634:	f101 0c34 	add.w	ip, r1, #52	; 0x34
    d638:	8808      	ldrh	r0, [r1, #0]
    d63a:	460b      	mov	r3, r1
    d63c:	4661      	mov	r1, ip
    d63e:	f005 fe50 	bl	132e2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    d642:	f7fa f979 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d646:	e039      	b.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d648:	2a21      	cmp	r2, #33	; 0x21
    d64a:	bf18      	it	ne
    d64c:	2a28      	cmpne	r2, #40	; 0x28
    d64e:	d135      	bne.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d650:	f881 409d 	strb.w	r4, [r1, #157]	; 0x9d
    d654:	f881 40dc 	strb.w	r4, [r1, #220]	; 0xdc
    d658:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    d65c:	2822      	cmp	r0, #34	; 0x22
    d65e:	d02d      	beq.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d660:	f891 00f3 	ldrb.w	r0, [r1, #243]	; 0xf3
    d664:	f020 0009 	bic.w	r0, r0, #9
    d668:	f881 00f3 	strb.w	r0, [r1, #243]	; 0xf3
    d66c:	201a      	movs	r0, #26
    d66e:	f7ff fa3b 	bl	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    d672:	e023      	b.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d674:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    d678:	2823      	cmp	r0, #35	; 0x23
    d67a:	d11f      	bne.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d67c:	f881 409e 	strb.w	r4, [r1, #158]	; 0x9e
    d680:	f891 00e0 	ldrb.w	r0, [r1, #224]	; 0xe0
    d684:	1e40      	subs	r0, r0, #1
    d686:	b240      	sxtb	r0, r0
    d688:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    d68c:	2800      	cmp	r0, #0
    d68e:	da04      	bge.n	d69a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c9a>
    d690:	f240 118d 	movw	r1, #397	; 0x18d
    d694:	2031      	movs	r0, #49	; 0x31
    d696:	f7f7 f811 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d69a:	f891 0144 	ldrb.w	r0, [r1, #324]	; 0x144
    d69e:	2801      	cmp	r0, #1
    d6a0:	bf04      	itt	eq
    d6a2:	2000      	moveq	r0, #0
    d6a4:	f7ff fa20 	bleq	cae8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e8>
    d6a8:	6868      	ldr	r0, [r5, #4]
    d6aa:	f880 4144 	strb.w	r4, [r0, #324]	; 0x144
    d6ae:	e005      	b.n	d6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    d6b0:	e7ff      	b.n	d6b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cb2>
    d6b2:	6900      	ldr	r0, [r0, #16]
    d6b4:	2800      	cmp	r0, #0
    d6b6:	bf18      	it	ne
    d6b8:	f881 c316 	strbne.w	ip, [r1, #790]	; 0x316
    d6bc:	4630      	mov	r0, r6
    d6be:	bd70      	pop	{r4, r5, r6, pc}
    d6c0:	20000190 	.word	0x20000190
    d6c4:	b570      	push	{r4, r5, r6, lr}
    d6c6:	4c34      	ldr	r4, [pc, #208]	; (d798 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d98>)
    d6c8:	6860      	ldr	r0, [r4, #4]
    d6ca:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    d6ce:	f011 0f02 	tst.w	r1, #2
    d6d2:	d00a      	beq.n	d6ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cea>
    d6d4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    d6d8:	2301      	movs	r3, #1
    d6da:	2108      	movs	r1, #8
    d6dc:	3090      	adds	r0, #144	; 0x90
    d6de:	f005 f812 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d6e2:	2800      	cmp	r0, #0
    d6e4:	bf04      	itt	eq
    d6e6:	2001      	moveq	r0, #1
    d6e8:	bd70      	popeq	{r4, r5, r6, pc}
    d6ea:	6860      	ldr	r0, [r4, #4]
    d6ec:	f890 00e3 	ldrb.w	r0, [r0, #227]	; 0xe3
    d6f0:	f010 0f02 	tst.w	r0, #2
    d6f4:	d115      	bne.n	d722 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d22>
    d6f6:	4d29      	ldr	r5, [pc, #164]	; (d79c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d9c>)
    d6f8:	68e8      	ldr	r0, [r5, #12]
    d6fa:	f005 faf0 	bl	12cde <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    d6fe:	6861      	ldr	r1, [r4, #4]
    d700:	f881 00ed 	strb.w	r0, [r1, #237]	; 0xed
    d704:	68e8      	ldr	r0, [r5, #12]
    d706:	f8b0 2005 	ldrh.w	r2, [r0, #5]
    d70a:	f8a1 20ee 	strh.w	r2, [r1, #238]	; 0xee
    d70e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d712:	f8a1 00f0 	strh.w	r0, [r1, #240]	; 0xf0
    d716:	f891 00e3 	ldrb.w	r0, [r1, #227]	; 0xe3
    d71a:	f040 0002 	orr.w	r0, r0, #2
    d71e:	f881 00e3 	strb.w	r0, [r1, #227]	; 0xe3
    d722:	6861      	ldr	r1, [r4, #4]
    d724:	f04f 0500 	mov.w	r5, #0
    d728:	f891 00e3 	ldrb.w	r0, [r1, #227]	; 0xe3
    d72c:	f010 0f01 	tst.w	r0, #1
    d730:	d01c      	beq.n	d76c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6c>
    d732:	f101 00e4 	add.w	r0, r1, #228	; 0xe4
    d736:	2201      	movs	r2, #1
    d738:	f7f9 fdc6 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    d73c:	f7fa f8fc 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d740:	6860      	ldr	r0, [r4, #4]
    d742:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    d746:	2907      	cmp	r1, #7
    d748:	bf04      	itt	eq
    d74a:	f880 509d 	strbeq.w	r5, [r0, #157]	; 0x9d
    d74e:	f880 50dc 	strbeq.w	r5, [r0, #220]	; 0xdc
    d752:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    d756:	b139      	cbz	r1, d768 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d68>
    d758:	f880 514a 	strb.w	r5, [r0, #330]	; 0x14a
    d75c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    d760:	2900      	cmp	r1, #0
    d762:	bf08      	it	eq
    d764:	f880 50dc 	strbeq.w	r5, [r0, #220]	; 0xdc
    d768:	2000      	movs	r0, #0
    d76a:	bd70      	pop	{r4, r5, r6, pc}
    d76c:	f891 009f 	ldrb.w	r0, [r1, #159]	; 0x9f
    d770:	f010 0f02 	tst.w	r0, #2
    d774:	d004      	beq.n	d780 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d80>
    d776:	f240 21e2 	movw	r1, #738	; 0x2e2
    d77a:	2031      	movs	r0, #49	; 0x31
    d77c:	f7f6 ff9e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d780:	f040 0002 	orr.w	r0, r0, #2
    d784:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    d788:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    d78c:	f891 00e0 	ldrb.w	r0, [r1, #224]	; 0xe0
    d790:	1c40      	adds	r0, r0, #1
    d792:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    d796:	e7d3      	b.n	d740 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d40>
    d798:	200001a8 	.word	0x200001a8
    d79c:	20000190 	.word	0x20000190
    d7a0:	4809      	ldr	r0, [pc, #36]	; (d7c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dc8>)
    d7a2:	b510      	push	{r4, lr}
    d7a4:	6840      	ldr	r0, [r0, #4]
    d7a6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d7aa:	2915      	cmp	r1, #21
    d7ac:	d004      	beq.n	d7b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db8>
    d7ae:	f240 61fd 	movw	r1, #1789	; 0x6fd
    d7b2:	2031      	movs	r0, #49	; 0x31
    d7b4:	f7f6 ff82 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7b8:	2101      	movs	r1, #1
    d7ba:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    d7be:	2116      	movs	r1, #22
    d7c0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    d7c4:	bd10      	pop	{r4, pc}
    d7c6:	0000      	.short	0x0000
    d7c8:	200001a8 	.word	0x200001a8
    d7cc:	480f      	ldr	r0, [pc, #60]	; (d80c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e0c>)
    d7ce:	b510      	push	{r4, lr}
    d7d0:	6840      	ldr	r0, [r0, #4]
    d7d2:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    d7d6:	f011 0f01 	tst.w	r1, #1
    d7da:	d011      	beq.n	d800 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e00>
    d7dc:	f890 20e0 	ldrb.w	r2, [r0, #224]	; 0xe0
    d7e0:	1e52      	subs	r2, r2, #1
    d7e2:	b252      	sxtb	r2, r2
    d7e4:	f880 20e0 	strb.w	r2, [r0, #224]	; 0xe0
    d7e8:	2a00      	cmp	r2, #0
    d7ea:	bfa2      	ittt	ge
    d7ec:	f001 01fe 	andge.w	r1, r1, #254	; 0xfe
    d7f0:	f880 109f 	strbge.w	r1, [r0, #159]	; 0x9f
    d7f4:	bd10      	popge	{r4, pc}
    d7f6:	f240 118d 	movw	r1, #397	; 0x18d
    d7fa:	2031      	movs	r0, #49	; 0x31
    d7fc:	f7f6 ff5e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d800:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    d804:	2031      	movs	r0, #49	; 0x31
    d806:	f7f6 ff59 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d80a:	0000      	.short	0x0000
    d80c:	200001a8 	.word	0x200001a8
    d810:	b510      	push	{r4, lr}
    d812:	4c0a      	ldr	r4, [pc, #40]	; (d83c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e3c>)
    d814:	2301      	movs	r3, #1
    d816:	2100      	movs	r1, #0
    d818:	6860      	ldr	r0, [r4, #4]
    d81a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    d81e:	3090      	adds	r0, #144	; 0x90
    d820:	f004 ff71 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d824:	b120      	cbz	r0, d830 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e30>
    d826:	6861      	ldr	r1, [r4, #4]
    d828:	201d      	movs	r0, #29
    d82a:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d82e:	bd10      	pop	{r4, pc}
    d830:	f240 7184 	movw	r1, #1924	; 0x784
    d834:	2031      	movs	r0, #49	; 0x31
    d836:	f7f6 ff41 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d83a:	0000      	.short	0x0000
    d83c:	200001a8 	.word	0x200001a8
    d840:	480f      	ldr	r0, [pc, #60]	; (d880 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e80>)
    d842:	b510      	push	{r4, lr}
    d844:	6840      	ldr	r0, [r0, #4]
    d846:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    d84a:	f001 0230 	and.w	r2, r1, #48	; 0x30
    d84e:	2a10      	cmp	r2, #16
    d850:	d004      	beq.n	d85c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e5c>
    d852:	f240 718b 	movw	r1, #1931	; 0x78b
    d856:	2031      	movs	r0, #49	; 0x31
    d858:	f7f6 ff30 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d85c:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    d860:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    d864:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    d868:	1e49      	subs	r1, r1, #1
    d86a:	b249      	sxtb	r1, r1
    d86c:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    d870:	2900      	cmp	r1, #0
    d872:	bfa8      	it	ge
    d874:	bd10      	popge	{r4, pc}
    d876:	f240 118d 	movw	r1, #397	; 0x18d
    d87a:	2031      	movs	r0, #49	; 0x31
    d87c:	f7f6 ff1e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d880:	200001a8 	.word	0x200001a8
    d884:	b510      	push	{r4, lr}
    d886:	4c0a      	ldr	r4, [pc, #40]	; (d8b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1eb0>)
    d888:	2301      	movs	r3, #1
    d88a:	2100      	movs	r1, #0
    d88c:	6860      	ldr	r0, [r4, #4]
    d88e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    d892:	3090      	adds	r0, #144	; 0x90
    d894:	f004 ff37 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d898:	b120      	cbz	r0, d8a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ea4>
    d89a:	6861      	ldr	r1, [r4, #4]
    d89c:	200f      	movs	r0, #15
    d89e:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d8a2:	bd10      	pop	{r4, pc}
    d8a4:	f240 7177 	movw	r1, #1911	; 0x777
    d8a8:	2031      	movs	r0, #49	; 0x31
    d8aa:	f7f6 ff07 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8ae:	0000      	.short	0x0000
    d8b0:	200001a8 	.word	0x200001a8
    d8b4:	480b      	ldr	r0, [pc, #44]	; (d8e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ee4>)
    d8b6:	6840      	ldr	r0, [r0, #4]
    d8b8:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    d8bc:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    d8c0:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    d8c4:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    d8c8:	1e49      	subs	r1, r1, #1
    d8ca:	b249      	sxtb	r1, r1
    d8cc:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    d8d0:	2900      	cmp	r1, #0
    d8d2:	bfa8      	it	ge
    d8d4:	4770      	bxge	lr
    d8d6:	b510      	push	{r4, lr}
    d8d8:	f240 118d 	movw	r1, #397	; 0x18d
    d8dc:	2031      	movs	r0, #49	; 0x31
    d8de:	f7f6 feed 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8e2:	0000      	.short	0x0000
    d8e4:	200001a8 	.word	0x200001a8
    d8e8:	4809      	ldr	r0, [pc, #36]	; (d910 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f10>)
    d8ea:	b510      	push	{r4, lr}
    d8ec:	6840      	ldr	r0, [r0, #4]
    d8ee:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d8f2:	2911      	cmp	r1, #17
    d8f4:	d004      	beq.n	d900 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f00>
    d8f6:	f240 61f5 	movw	r1, #1781	; 0x6f5
    d8fa:	2031      	movs	r0, #49	; 0x31
    d8fc:	f7f6 fede 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d900:	2101      	movs	r1, #1
    d902:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    d906:	2112      	movs	r1, #18
    d908:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    d90c:	bd10      	pop	{r4, pc}
    d90e:	0000      	.short	0x0000
    d910:	200001a8 	.word	0x200001a8
    d914:	b510      	push	{r4, lr}
    d916:	4c0a      	ldr	r4, [pc, #40]	; (d940 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f40>)
    d918:	2301      	movs	r3, #1
    d91a:	2100      	movs	r1, #0
    d91c:	6860      	ldr	r0, [r4, #4]
    d91e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    d922:	3090      	adds	r0, #144	; 0x90
    d924:	f004 feef 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d928:	b120      	cbz	r0, d934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f34>
    d92a:	6861      	ldr	r1, [r4, #4]
    d92c:	2020      	movs	r0, #32
    d92e:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d932:	bd10      	pop	{r4, pc}
    d934:	f240 7197 	movw	r1, #1943	; 0x797
    d938:	2031      	movs	r0, #49	; 0x31
    d93a:	f7f6 febf 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d93e:	0000      	.short	0x0000
    d940:	200001a8 	.word	0x200001a8
    d944:	4808      	ldr	r0, [pc, #32]	; (d968 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f68>)
    d946:	b510      	push	{r4, lr}
    d948:	6840      	ldr	r0, [r0, #4]
    d94a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d94e:	2922      	cmp	r1, #34	; 0x22
    d950:	bf11      	iteee	ne
    d952:	2900      	cmpne	r1, #0
    d954:	2123      	moveq	r1, #35	; 0x23
    d956:	f880 109e 	strbeq.w	r1, [r0, #158]	; 0x9e
    d95a:	bd10      	popeq	{r4, pc}
    d95c:	f240 719e 	movw	r1, #1950	; 0x79e
    d960:	f04f 0031 	mov.w	r0, #49	; 0x31
    d964:	f7f6 feaa 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d968:	200001a8 	.word	0x200001a8
    d96c:	480a      	ldr	r0, [pc, #40]	; (d998 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f98>)
    d96e:	6840      	ldr	r0, [r0, #4]
    d970:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d974:	2929      	cmp	r1, #41	; 0x29
    d976:	bf08      	it	eq
    d978:	2100      	moveq	r1, #0
    d97a:	d003      	beq.n	d984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f84>
    d97c:	2916      	cmp	r1, #22
    d97e:	bf08      	it	eq
    d980:	211a      	moveq	r1, #26
    d982:	d102      	bne.n	d98a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f8a>
    d984:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    d988:	4770      	bx	lr
    d98a:	b510      	push	{r4, lr}
    d98c:	f240 711e 	movw	r1, #1822	; 0x71e
    d990:	2031      	movs	r0, #49	; 0x31
    d992:	f7f6 fe93 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d996:	0000      	.short	0x0000
    d998:	200001a8 	.word	0x200001a8
    d99c:	4807      	ldr	r0, [pc, #28]	; (d9bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1fbc>)
    d99e:	b510      	push	{r4, lr}
    d9a0:	6840      	ldr	r0, [r0, #4]
    d9a2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d9a6:	2916      	cmp	r1, #22
    d9a8:	bf02      	ittt	eq
    d9aa:	211a      	moveq	r1, #26
    d9ac:	f880 109e 	strbeq.w	r1, [r0, #158]	; 0x9e
    d9b0:	bd10      	popeq	{r4, pc}
    d9b2:	f240 710a 	movw	r1, #1802	; 0x70a
    d9b6:	2031      	movs	r0, #49	; 0x31
    d9b8:	f7f6 fe80 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9bc:	200001a8 	.word	0x200001a8
    d9c0:	b510      	push	{r4, lr}
    d9c2:	4c0a      	ldr	r4, [pc, #40]	; (d9ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1fec>)
    d9c4:	2301      	movs	r3, #1
    d9c6:	2100      	movs	r1, #0
    d9c8:	6860      	ldr	r0, [r4, #4]
    d9ca:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    d9ce:	3090      	adds	r0, #144	; 0x90
    d9d0:	f004 fe99 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d9d4:	b120      	cbz	r0, d9e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1fe0>
    d9d6:	6861      	ldr	r1, [r4, #4]
    d9d8:	2004      	movs	r0, #4
    d9da:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    d9de:	bd10      	pop	{r4, pc}
    d9e0:	f240 61ef 	movw	r1, #1775	; 0x6ef
    d9e4:	2031      	movs	r0, #49	; 0x31
    d9e6:	f7f6 fe69 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9ea:	0000      	.short	0x0000
    d9ec:	200001a8 	.word	0x200001a8
    d9f0:	4807      	ldr	r0, [pc, #28]	; (da10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2010>)
    d9f2:	b510      	push	{r4, lr}
    d9f4:	6840      	ldr	r0, [r0, #4]
    d9f6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    d9fa:	2916      	cmp	r1, #22
    d9fc:	bf02      	ittt	eq
    d9fe:	2118      	moveq	r1, #24
    da00:	f880 109e 	strbeq.w	r1, [r0, #158]	; 0x9e
    da04:	bd10      	popeq	{r4, pc}
    da06:	f240 7104 	movw	r1, #1796	; 0x704
    da0a:	2031      	movs	r0, #49	; 0x31
    da0c:	f7f6 fe56 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da10:	200001a8 	.word	0x200001a8
    da14:	b538      	push	{r3, r4, r5, lr}
    da16:	4d20      	ldr	r5, [pc, #128]	; (da98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2098>)
    da18:	6869      	ldr	r1, [r5, #4]
    da1a:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    da1e:	281c      	cmp	r0, #28
    da20:	d004      	beq.n	da2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x202c>
    da22:	f240 7137 	movw	r1, #1847	; 0x737
    da26:	2031      	movs	r0, #49	; 0x31
    da28:	f7f6 fe48 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da2c:	2400      	movs	r4, #0
    da2e:	f881 40e1 	strb.w	r4, [r1, #225]	; 0xe1
    da32:	f891 0264 	ldrb.w	r0, [r1, #612]	; 0x264
    da36:	f88d 0000 	strb.w	r0, [sp]
    da3a:	f89d 0000 	ldrb.w	r0, [sp]
    da3e:	b120      	cbz	r0, da4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x204a>
    da40:	f240 713b 	movw	r1, #1851	; 0x73b
    da44:	2031      	movs	r0, #49	; 0x31
    da46:	f7f6 fe39 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da4a:	f891 00e2 	ldrb.w	r0, [r1, #226]	; 0xe2
    da4e:	b150      	cbz	r0, da66 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2066>
    da50:	f881 40e2 	strb.w	r4, [r1, #226]	; 0xe2
    da54:	8808      	ldrh	r0, [r1, #0]
    da56:	f8a1 0268 	strh.w	r0, [r1, #616]	; 0x268
    da5a:	f881 4266 	strb.w	r4, [r1, #614]	; 0x266
    da5e:	f501 7017 	add.w	r0, r1, #604	; 0x25c
    da62:	220a      	movs	r2, #10
    da64:	e00a      	b.n	da7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x207c>
    da66:	8808      	ldrh	r0, [r1, #0]
    da68:	f8a1 0268 	strh.w	r0, [r1, #616]	; 0x268
    da6c:	f881 4266 	strb.w	r4, [r1, #614]	; 0x266
    da70:	2001      	movs	r0, #1
    da72:	f881 026a 	strb.w	r0, [r1, #618]	; 0x26a
    da76:	f501 7017 	add.w	r0, r1, #604	; 0x25c
    da7a:	2209      	movs	r2, #9
    da7c:	f7f9 fc24 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    da80:	6868      	ldr	r0, [r5, #4]
    da82:	8800      	ldrh	r0, [r0, #0]
    da84:	f7f7 faa4 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    da88:	f004 fa3b 	bl	11f02 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    da8c:	f7f9 ff54 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    da90:	6868      	ldr	r0, [r5, #4]
    da92:	f880 409e 	strb.w	r4, [r0, #158]	; 0x9e
    da96:	bd38      	pop	{r3, r4, r5, pc}
    da98:	200001a8 	.word	0x200001a8
    da9c:	b510      	push	{r4, lr}
    da9e:	4c08      	ldr	r4, [pc, #32]	; (dac0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20c0>)
    daa0:	2301      	movs	r3, #1
    daa2:	4619      	mov	r1, r3
    daa4:	6860      	ldr	r0, [r4, #4]
    daa6:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
    daaa:	3090      	adds	r0, #144	; 0x90
    daac:	f004 fe2b 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    dab0:	2800      	cmp	r0, #0
    dab2:	bf18      	it	ne
    dab4:	bd10      	popne	{r4, pc}
    dab6:	2009      	movs	r0, #9
    dab8:	6861      	ldr	r1, [r4, #4]
    daba:	f881 00a0 	strb.w	r0, [r1, #160]	; 0xa0
    dabe:	bd10      	pop	{r4, pc}
    dac0:	200001a8 	.word	0x200001a8
    dac4:	481c      	ldr	r0, [pc, #112]	; (db38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2138>)
    dac6:	b510      	push	{r4, lr}
    dac8:	6880      	ldr	r0, [r0, #8]
    daca:	2100      	movs	r1, #0
    dacc:	7902      	ldrb	r2, [r0, #4]
    dace:	481b      	ldr	r0, [pc, #108]	; (db3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x213c>)
    dad0:	6840      	ldr	r0, [r0, #4]
    dad2:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
    dad6:	2b0b      	cmp	r3, #11
    dad8:	bf01      	itttt	eq
    dada:	f890 3129 	ldrbeq.w	r3, [r0, #297]	; 0x129
    dade:	4293      	cmpeq	r3, r2
    dae0:	f880 109d 	strbeq.w	r1, [r0, #157]	; 0x9d
    dae4:	f880 10dc 	strbeq.w	r1, [r0, #220]	; 0xdc
    dae8:	bf08      	it	eq
    daea:	bd10      	popeq	{r4, pc}
    daec:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
    daf0:	f013 0f08 	tst.w	r3, #8
    daf4:	d012      	beq.n	db1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x211c>
    daf6:	f003 01f7 	and.w	r1, r3, #247	; 0xf7
    dafa:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    dafe:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    db02:	f1a1 0101 	sub.w	r1, r1, #1
    db06:	b249      	sxtb	r1, r1
    db08:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    db0c:	2900      	cmp	r1, #0
    db0e:	bfa8      	it	ge
    db10:	bd10      	popge	{r4, pc}
    db12:	f240 118d 	movw	r1, #397	; 0x18d
    db16:	2031      	movs	r0, #49	; 0x31
    db18:	f7f6 fdd0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db1c:	2aff      	cmp	r2, #255	; 0xff
    db1e:	d004      	beq.n	db2a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212a>
    db20:	f240 61e2 	movw	r1, #1762	; 0x6e2
    db24:	2031      	movs	r0, #49	; 0x31
    db26:	f7f6 fdc9 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db2a:	222a      	movs	r2, #42	; 0x2a
    db2c:	f880 209d 	strb.w	r2, [r0, #157]	; 0x9d
    db30:	f880 1314 	strb.w	r1, [r0, #788]	; 0x314
    db34:	bd10      	pop	{r4, pc}
    db36:	0000      	.short	0x0000
    db38:	20000190 	.word	0x20000190
    db3c:	200001a8 	.word	0x200001a8
    db40:	b510      	push	{r4, lr}
    db42:	4c1b      	ldr	r4, [pc, #108]	; (dbb0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x21b0>)
    db44:	6860      	ldr	r0, [r4, #4]
    db46:	f890 10e3 	ldrb.w	r1, [r0, #227]	; 0xe3
    db4a:	f011 0f02 	tst.w	r1, #2
    db4e:	d01d      	beq.n	db8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x218c>
    db50:	2100      	movs	r1, #0
    db52:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
    db56:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
    db5a:	6860      	ldr	r0, [r4, #4]
    db5c:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    db60:	f012 0f02 	tst.w	r2, #2
    db64:	bf08      	it	eq
    db66:	bd10      	popeq	{r4, pc}
    db68:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    db6c:	1e49      	subs	r1, r1, #1
    db6e:	b249      	sxtb	r1, r1
    db70:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    db74:	2900      	cmp	r1, #0
    db76:	bfa2      	ittt	ge
    db78:	f002 01fd 	andge.w	r1, r2, #253	; 0xfd
    db7c:	f880 109f 	strbge.w	r1, [r0, #159]	; 0x9f
    db80:	bd10      	popge	{r4, pc}
    db82:	f240 118d 	movw	r1, #397	; 0x18d
    db86:	2031      	movs	r0, #49	; 0x31
    db88:	f7f6 fd98 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db8c:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    db90:	2301      	movs	r3, #1
    db92:	2100      	movs	r1, #0
    db94:	3090      	adds	r0, #144	; 0x90
    db96:	f004 fdb6 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    db9a:	b120      	cbz	r0, dba6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x21a6>
    db9c:	6861      	ldr	r1, [r4, #4]
    db9e:	2007      	movs	r0, #7
    dba0:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    dba4:	e7d9      	b.n	db5a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x215a>
    dba6:	f240 7163 	movw	r1, #1891	; 0x763
    dbaa:	2031      	movs	r0, #49	; 0x31
    dbac:	f7f6 fd86 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbb0:	200001a8 	.word	0x200001a8

0000dbb4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    dbb4:	4802      	ldr	r0, [pc, #8]	; (dbc0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    dbb6:	6840      	ldr	r0, [r0, #4]
    dbb8:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    dbbc:	4770      	bx	lr
    dbbe:	0000      	.short	0x0000
    dbc0:	200002e0 	.word	0x200002e0

0000dbc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    dbc4:	480c      	ldr	r0, [pc, #48]	; (dbf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    dbc6:	6841      	ldr	r1, [r0, #4]
    dbc8:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    dbcc:	2803      	cmp	r0, #3
    dbce:	d004      	beq.n	dbda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    dbd0:	2801      	cmp	r0, #1
    dbd2:	bf18      	it	ne
    dbd4:	2802      	cmpne	r0, #2
    dbd6:	d007      	beq.n	dbe8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    dbd8:	e004      	b.n	dbe4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    dbda:	f891 005a 	ldrb.w	r0, [r1, #90]	; 0x5a
    dbde:	2801      	cmp	r0, #1
    dbe0:	bf08      	it	eq
    dbe2:	4770      	bxeq	lr
    dbe4:	2000      	movs	r0, #0
    dbe6:	4770      	bx	lr
    dbe8:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    dbec:	2801      	cmp	r0, #1
    dbee:	bf14      	ite	ne
    dbf0:	2803      	cmpne	r0, #3
    dbf2:	2001      	moveq	r0, #1
    dbf4:	d1f6      	bne.n	dbe4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    dbf6:	4770      	bx	lr
    dbf8:	200002e0 	.word	0x200002e0

0000dbfc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    dbfc:	4901      	ldr	r1, [pc, #4]	; (dc04 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    dbfe:	7048      	strb	r0, [r1, #1]
    dc00:	4770      	bx	lr
    dc02:	0000      	.short	0x0000
    dc04:	20000e50 	.word	0x20000e50

0000dc08 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    dc08:	b570      	push	{r4, r5, r6, lr}
    dc0a:	4605      	mov	r5, r0
    dc0c:	480a      	ldr	r0, [pc, #40]	; (dc38 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>)
    dc0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dc12:	fbb0 f4f1 	udiv	r4, r0, r1
    dc16:	f006 fa27 	bl	14068 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x20>
    dc1a:	306b      	adds	r0, #107	; 0x6b
    dc1c:	b280      	uxth	r0, r0
    dc1e:	4420      	add	r0, r4
    dc20:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    dc24:	4628      	mov	r0, r5
    dc26:	f005 fc4c 	bl	134c2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    dc2a:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
    dc2e:	bf28      	it	cs
    dc30:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
    dc34:	b280      	uxth	r0, r0
    dc36:	bd70      	pop	{r4, r5, r6, pc}
    dc38:	000122f9 	.word	0x000122f9

0000dc3c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    dc3c:	4801      	ldr	r0, [pc, #4]	; (dc44 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    dc3e:	7800      	ldrb	r0, [r0, #0]
    dc40:	4770      	bx	lr
    dc42:	0000      	.short	0x0000
    dc44:	20000e60 	.word	0x20000e60

0000dc48 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    dc48:	4806      	ldr	r0, [pc, #24]	; (dc64 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    dc4a:	4905      	ldr	r1, [pc, #20]	; (dc60 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    dc4c:	6581      	str	r1, [r0, #88]	; 0x58
    dc4e:	4906      	ldr	r1, [pc, #24]	; (dc68 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    dc50:	65c1      	str	r1, [r0, #92]	; 0x5c
    dc52:	4807      	ldr	r0, [pc, #28]	; (dc70 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    dc54:	4905      	ldr	r1, [pc, #20]	; (dc6c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    dc56:	6581      	str	r1, [r0, #88]	; 0x58
    dc58:	4906      	ldr	r1, [pc, #24]	; (dc74 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    dc5a:	6601      	str	r1, [r0, #96]	; 0x60
    dc5c:	4770      	bx	lr
    dc5e:	0000      	.short	0x0000
    dc60:	0000dd6d 	.word	0x0000dd6d
    dc64:	20000304 	.word	0x20000304
    dc68:	0000dea1 	.word	0x0000dea1
    dc6c:	0000df49 	.word	0x0000df49
    dc70:	2000039c 	.word	0x2000039c
    dc74:	0000df79 	.word	0x0000df79
    dc78:	b510      	push	{r4, lr}
    dc7a:	4c1b      	ldr	r4, [pc, #108]	; (dce8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa0>)
    dc7c:	6861      	ldr	r1, [r4, #4]
    dc7e:	880a      	ldrh	r2, [r1, #0]
    dc80:	f8a1 21ce 	strh.w	r2, [r1, #462]	; 0x1ce
    dc84:	f881 01cc 	strb.w	r0, [r1, #460]	; 0x1cc
    dc88:	f891 0072 	ldrb.w	r0, [r1, #114]	; 0x72
    dc8c:	2801      	cmp	r0, #1
    dc8e:	bf18      	it	ne
    dc90:	2802      	cmpne	r0, #2
    dc92:	d00b      	beq.n	dcac <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x64>
    dc94:	2804      	cmp	r0, #4
    dc96:	bf14      	ite	ne
    dc98:	2808      	cmpne	r0, #8
    dc9a:	2003      	moveq	r0, #3
    dc9c:	d006      	beq.n	dcac <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x64>
    dc9e:	bf00      	nop
    dca0:	f240 21a9 	movw	r1, #681	; 0x2a9
    dca4:	f04f 0006 	mov.w	r0, #6
    dca8:	f7f6 fd08 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcac:	f881 01d0 	strb.w	r0, [r1, #464]	; 0x1d0
    dcb0:	f891 0073 	ldrb.w	r0, [r1, #115]	; 0x73
    dcb4:	2801      	cmp	r0, #1
    dcb6:	bf18      	it	ne
    dcb8:	2802      	cmpne	r0, #2
    dcba:	d004      	beq.n	dcc6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x7e>
    dcbc:	2804      	cmp	r0, #4
    dcbe:	bf14      	ite	ne
    dcc0:	2808      	cmpne	r0, #8
    dcc2:	2003      	moveq	r0, #3
    dcc4:	d1ec      	bne.n	dca0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x58>
    dcc6:	f881 01d1 	strb.w	r0, [r1, #465]	; 0x1d1
    dcca:	f501 70e1 	add.w	r0, r1, #450	; 0x1c2
    dcce:	f04f 0211 	mov.w	r2, #17
    dcd2:	f7f9 faf9 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    dcd6:	6861      	ldr	r1, [r4, #4]
    dcd8:	2000      	movs	r0, #0
    dcda:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    dcde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dce2:	f7f9 be29 	b.w	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    dce6:	0000      	.short	0x0000
    dce8:	200002fc 	.word	0x200002fc
    dcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcf0:	f8df 8074 	ldr.w	r8, [pc, #116]	; dd68 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x120>
    dcf4:	2600      	movs	r6, #0
    dcf6:	f108 050c 	add.w	r5, r8, #12
    dcfa:	2703      	movs	r7, #3
    dcfc:	6869      	ldr	r1, [r5, #4]
    dcfe:	2401      	movs	r4, #1
    dd00:	b1a8      	cbz	r0, dd2e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xe6>
    dd02:	f8d8 0008 	ldr.w	r0, [r8, #8]
    dd06:	78c0      	ldrb	r0, [r0, #3]
    dd08:	f881 0129 	strb.w	r0, [r1, #297]	; 0x129
    dd0c:	fa04 f000 	lsl.w	r0, r4, r0
    dd10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    dd14:	d006      	beq.n	dd24 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xdc>
    dd16:	f881 709d 	strb.w	r7, [r1, #157]	; 0x9d
    dd1a:	f8a1 60d8 	strh.w	r6, [r1, #216]	; 0xd8
    dd1e:	f881 40dc 	strb.w	r4, [r1, #220]	; 0xdc
    dd22:	e01d      	b.n	dd60 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x118>
    dd24:	f240 51cf 	movw	r1, #1487	; 0x5cf
    dd28:	2036      	movs	r0, #54	; 0x36
    dd2a:	f7f6 fcc7 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd2e:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    dd32:	f101 0090 	add.w	r0, r1, #144	; 0x90
    dd36:	2300      	movs	r3, #0
    dd38:	4619      	mov	r1, r3
    dd3a:	f004 fce4 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    dd3e:	2800      	cmp	r0, #0
    dd40:	bf04      	itt	eq
    dd42:	2001      	moveq	r0, #1
    dd44:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd48:	f8d8 0008 	ldr.w	r0, [r8, #8]
    dd4c:	78c1      	ldrb	r1, [r0, #3]
    dd4e:	6868      	ldr	r0, [r5, #4]
    dd50:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    dd54:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    dd58:	f8a0 60de 	strh.w	r6, [r0, #222]	; 0xde
    dd5c:	f880 40e0 	strb.w	r4, [r0, #224]	; 0xe0
    dd60:	2000      	movs	r0, #0
    dd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd66:	0000      	.short	0x0000
    dd68:	200002f0 	.word	0x200002f0
    dd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd70:	4c49      	ldr	r4, [pc, #292]	; (de98 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x250>)
    dd72:	2500      	movs	r5, #0
    dd74:	b086      	sub	sp, #24
    dd76:	6860      	ldr	r0, [r4, #4]
    dd78:	462b      	mov	r3, r5
    dd7a:	4629      	mov	r1, r5
    dd7c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    dd80:	3090      	adds	r0, #144	; 0x90
    dd82:	f004 fcc0 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    dd86:	2800      	cmp	r0, #0
    dd88:	bf02      	ittt	eq
    dd8a:	2001      	moveq	r0, #1
    dd8c:	b006      	addeq	sp, #24
    dd8e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd92:	6860      	ldr	r0, [r4, #4]
    dd94:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    dd98:	2824      	cmp	r0, #36	; 0x24
    dd9a:	bf11      	iteee	ne
    dd9c:	2825      	cmpne	r0, #37	; 0x25
    dd9e:	2020      	moveq	r0, #32
    dda0:	b006      	addeq	sp, #24
    dda2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    dda6:	4668      	mov	r0, sp
    dda8:	f7f7 fbaa 	bl	5500 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    ddac:	2800      	cmp	r0, #0
    ddae:	bf08      	it	eq
    ddb0:	2100      	moveq	r1, #0
    ddb2:	d004      	beq.n	ddbe <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x176>
    ddb4:	9800      	ldr	r0, [sp, #0]
    ddb6:	a901      	add	r1, sp, #4
    ddb8:	78c0      	ldrb	r0, [r0, #3]
    ddba:	f88d 0004 	strb.w	r0, [sp, #4]
    ddbe:	6860      	ldr	r0, [r4, #4]
    ddc0:	ab04      	add	r3, sp, #16
    ddc2:	2216      	movs	r2, #22
    ddc4:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    ddc8:	f004 fd79 	bl	128be <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    ddcc:	2601      	movs	r6, #1
    ddce:	2700      	movs	r7, #0
    ddd0:	b190      	cbz	r0, ddf8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1b0>
    ddd2:	6860      	ldr	r0, [r4, #4]
    ddd4:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ddd8:	2116      	movs	r1, #22
    ddda:	f880 212a 	strb.w	r2, [r0, #298]	; 0x12a
    ddde:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
    dde2:	2129      	movs	r1, #41	; 0x29
    dde4:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    dde8:	f880 60e0 	strb.w	r6, [r0, #224]	; 0xe0
    ddec:	f8a0 70de 	strh.w	r7, [r0, #222]	; 0xde
    ddf0:	b006      	add	sp, #24
    ddf2:	2000      	movs	r0, #0
    ddf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddf8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; de9c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x254>
    ddfc:	f8d8 0008 	ldr.w	r0, [r8, #8]
    de00:	f004 ff8a 	bl	12d18 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    de04:	b1a0      	cbz	r0, de30 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1e8>
    de06:	f8d8 2008 	ldr.w	r2, [r8, #8]
    de0a:	6861      	ldr	r1, [r4, #4]
    de0c:	7910      	ldrb	r0, [r2, #4]
    de0e:	f000 0007 	and.w	r0, r0, #7
    de12:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    de16:	7952      	ldrb	r2, [r2, #5]
    de18:	f002 0207 	and.w	r2, r2, #7
    de1c:	f881 206b 	strb.w	r2, [r1, #107]	; 0x6b
    de20:	f891 3145 	ldrb.w	r3, [r1, #325]	; 0x145
    de24:	f88d 3004 	strb.w	r3, [sp, #4]
    de28:	f89d 3004 	ldrb.w	r3, [sp, #4]
    de2c:	b12b      	cbz	r3, de3a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1f2>
    de2e:	e027      	b.n	de80 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x238>
    de30:	2000      	movs	r0, #0
    de32:	f7ff ff5b 	bl	dcec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa4>
    de36:	4605      	mov	r5, r0
    de38:	e02a      	b.n	de90 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x248>
    de3a:	f891 3144 	ldrb.w	r3, [r1, #324]	; 0x144
    de3e:	2b01      	cmp	r3, #1
    de40:	d01e      	beq.n	de80 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x238>
    de42:	f891 c073 	ldrb.w	ip, [r1, #115]	; 0x73
    de46:	f101 0372 	add.w	r3, r1, #114	; 0x72
    de4a:	4584      	cmp	ip, r0
    de4c:	bf01      	itttt	eq
    de4e:	7818      	ldrbeq	r0, [r3, #0]
    de50:	4290      	cmpeq	r0, r2
    de52:	2002      	moveq	r0, #2
    de54:	f881 0144 	strbeq.w	r0, [r1, #324]	; 0x144
    de58:	d012      	beq.n	de80 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x238>
    de5a:	f501 70df 	add.w	r0, r1, #446	; 0x1be
    de5e:	880a      	ldrh	r2, [r1, #0]
    de60:	f820 2b02 	strh.w	r2, [r0], #2
    de64:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    de68:	f800 2b01 	strb.w	r2, [r0], #1
    de6c:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
    de70:	f800 290d 	strb.w	r2, [r0], #-13
    de74:	f04f 021b 	mov.w	r2, #27
    de78:	f7f9 fa26 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    de7c:	f7f9 fd5c 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    de80:	6860      	ldr	r0, [r4, #4]
    de82:	2122      	movs	r1, #34	; 0x22
    de84:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    de88:	f880 60e0 	strb.w	r6, [r0, #224]	; 0xe0
    de8c:	f8a0 70de 	strh.w	r7, [r0, #222]	; 0xde
    de90:	b006      	add	sp, #24
    de92:	4628      	mov	r0, r5
    de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de98:	200002fc 	.word	0x200002fc
    de9c:	200002f0 	.word	0x200002f0
    dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dea2:	4c27      	ldr	r4, [pc, #156]	; (df40 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2f8>)
    dea4:	6860      	ldr	r0, [r4, #4]
    dea6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    deaa:	2820      	cmp	r0, #32
    deac:	bf1c      	itt	ne
    deae:	2001      	movne	r0, #1
    deb0:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    deb2:	4e24      	ldr	r6, [pc, #144]	; (df44 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2fc>)
    deb4:	68b0      	ldr	r0, [r6, #8]
    deb6:	f004 ff39 	bl	12d2c <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    deba:	2800      	cmp	r0, #0
    debc:	d036      	beq.n	df2c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2e4>
    debe:	68b0      	ldr	r0, [r6, #8]
    dec0:	6862      	ldr	r2, [r4, #4]
    dec2:	7901      	ldrb	r1, [r0, #4]
    dec4:	7940      	ldrb	r0, [r0, #5]
    dec6:	f001 0107 	and.w	r1, r1, #7
    deca:	f361 0507 	bfi	r5, r1, #0, #8
    dece:	4629      	mov	r1, r5
    ded0:	f000 0007 	and.w	r0, r0, #7
    ded4:	f360 210f 	bfi	r1, r0, #8, #8
    ded8:	2001      	movs	r0, #1
    deda:	f882 00dc 	strb.w	r0, [r2, #220]	; 0xdc
    dede:	2500      	movs	r5, #0
    dee0:	f8a2 50d8 	strh.w	r5, [r2, #216]	; 0xd8
    dee4:	2024      	movs	r0, #36	; 0x24
    dee6:	f882 009d 	strb.w	r0, [r2, #157]	; 0x9d
    deea:	f8d2 0146 	ldr.w	r0, [r2, #326]	; 0x146
    deee:	f8b2 2072 	ldrh.w	r2, [r2, #114]	; 0x72
    def2:	f8ad 2000 	strh.w	r2, [sp]
    def6:	f004 fcfe 	bl	128f6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    defa:	f89d 2000 	ldrb.w	r2, [sp]
    defe:	b2c1      	uxtb	r1, r0
    df00:	428a      	cmp	r2, r1
    df02:	bf07      	ittee	eq
    df04:	6861      	ldreq	r1, [r4, #4]
    df06:	f881 52a2 	strbeq.w	r5, [r1, #674]	; 0x2a2
    df0a:	6862      	ldrne	r2, [r4, #4]
    df0c:	f882 12a2 	strbne.w	r1, [r2, #674]	; 0x2a2
    df10:	f89d 1001 	ldrb.w	r1, [sp, #1]
    df14:	f3c0 2007 	ubfx	r0, r0, #8, #8
    df18:	4281      	cmp	r1, r0
    df1a:	bf19      	ittee	ne
    df1c:	6861      	ldrne	r1, [r4, #4]
    df1e:	f881 02a3 	strbne.w	r0, [r1, #675]	; 0x2a3
    df22:	6860      	ldreq	r0, [r4, #4]
    df24:	f880 52a3 	strbeq.w	r5, [r0, #675]	; 0x2a3
    df28:	2000      	movs	r0, #0
    df2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df2c:	2001      	movs	r0, #1
    df2e:	f7ff fedd 	bl	dcec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa4>
    df32:	4604      	mov	r4, r0
    df34:	201e      	movs	r0, #30
    df36:	f7ff fe9f 	bl	dc78 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    df3a:	4620      	mov	r0, r4
    df3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df3e:	0000      	.short	0x0000
    df40:	200002fc 	.word	0x200002fc
    df44:	200002f0 	.word	0x200002f0
    df48:	b510      	push	{r4, lr}
    df4a:	4c0a      	ldr	r4, [pc, #40]	; (df74 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x32c>)
    df4c:	2300      	movs	r3, #0
    df4e:	4619      	mov	r1, r3
    df50:	6860      	ldr	r0, [r4, #4]
    df52:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    df56:	3090      	adds	r0, #144	; 0x90
    df58:	f004 fbd5 	bl	12706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    df5c:	b120      	cbz	r0, df68 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x320>
    df5e:	6861      	ldr	r1, [r4, #4]
    df60:	2020      	movs	r0, #32
    df62:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    df66:	bd10      	pop	{r4, pc}
    df68:	f240 61ee 	movw	r1, #1774	; 0x6ee
    df6c:	2036      	movs	r0, #54	; 0x36
    df6e:	f7f6 fba5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df72:	0000      	.short	0x0000
    df74:	200002fc 	.word	0x200002fc
    df78:	b570      	push	{r4, r5, r6, lr}
    df7a:	4c1f      	ldr	r4, [pc, #124]	; (dff8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x3b0>)
    df7c:	6860      	ldr	r0, [r4, #4]
    df7e:	f890 12a2 	ldrb.w	r1, [r0, #674]	; 0x2a2
    df82:	2900      	cmp	r1, #0
    df84:	bf05      	ittet	eq
    df86:	f890 12a3 	ldrbeq.w	r1, [r0, #675]	; 0x2a3
    df8a:	2900      	cmpeq	r1, #0
    df8c:	2100      	movne	r1, #0
    df8e:	2101      	moveq	r1, #1
    df90:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
    df94:	f04f 0225 	mov.w	r2, #37	; 0x25
    df98:	f04f 0500 	mov.w	r5, #0
    df9c:	2b22      	cmp	r3, #34	; 0x22
    df9e:	d008      	beq.n	dfb2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x36a>
    dfa0:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
    dfa4:	2b24      	cmp	r3, #36	; 0x24
    dfa6:	d019      	beq.n	dfdc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x394>
    dfa8:	f240 711a 	movw	r1, #1818	; 0x71a
    dfac:	2036      	movs	r0, #54	; 0x36
    dfae:	f7f6 fb85 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfb2:	2900      	cmp	r1, #0
    dfb4:	bf08      	it	eq
    dfb6:	f880 209e 	strbeq.w	r2, [r0, #158]	; 0x9e
    dfba:	d00b      	beq.n	dfd4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x38c>
    dfbc:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    dfc0:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    dfc4:	2801      	cmp	r0, #1
    dfc6:	bf04      	itt	eq
    dfc8:	2000      	moveq	r0, #0
    dfca:	f7ff fe55 	bleq	dc78 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    dfce:	6860      	ldr	r0, [r4, #4]
    dfd0:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    dfd4:	6860      	ldr	r0, [r4, #4]
    dfd6:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    dfda:	bd70      	pop	{r4, r5, r6, pc}
    dfdc:	2900      	cmp	r1, #0
    dfde:	bf08      	it	eq
    dfe0:	f880 209d 	strbeq.w	r2, [r0, #157]	; 0x9d
    dfe4:	d004      	beq.n	dff0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x3a8>
    dfe6:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    dfea:	2000      	movs	r0, #0
    dfec:	f7ff fe44 	bl	dc78 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    dff0:	6860      	ldr	r0, [r4, #4]
    dff2:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    dff6:	bd70      	pop	{r4, r5, r6, pc}
    dff8:	200002fc 	.word	0x200002fc

0000dffc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    dffc:	4903      	ldr	r1, [pc, #12]	; (e00c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    dffe:	884a      	ldrh	r2, [r1, #2]
    e000:	8002      	strh	r2, [r0, #0]
    e002:	7809      	ldrb	r1, [r1, #0]
    e004:	7081      	strb	r1, [r0, #2]
    e006:	2000      	movs	r0, #0
    e008:	4770      	bx	lr
    e00a:	0000      	.short	0x0000
    e00c:	20001594 	.word	0x20001594

0000e010 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    e010:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e012:	460c      	mov	r4, r1
    e014:	4605      	mov	r5, r0
    e016:	8800      	ldrh	r0, [r0, #0]
    e018:	4669      	mov	r1, sp
    e01a:	f004 fb29 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e01e:	2200      	movs	r2, #0
    e020:	b128      	cbz	r0, e02e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    e022:	f8c4 2002 	str.w	r2, [r4, #2]
    e026:	71a2      	strb	r2, [r4, #6]
    e028:	8022      	strh	r2, [r4, #0]
    e02a:	2002      	movs	r0, #2
    e02c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e02e:	9901      	ldr	r1, [sp, #4]
    e030:	f111 0190 	adds.w	r1, r1, #144	; 0x90
    e034:	f881 206a 	strb.w	r2, [r1, #106]	; 0x6a
    e038:	f8d1 0017 	ldr.w	r0, [r1, #23]
    e03c:	f8c4 0002 	str.w	r0, [r4, #2]
    e040:	7ec8      	ldrb	r0, [r1, #27]
    e042:	71a0      	strb	r0, [r4, #6]
    e044:	8828      	ldrh	r0, [r5, #0]
    e046:	8020      	strh	r0, [r4, #0]
    e048:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    e04c:	f88d 0008 	strb.w	r0, [sp, #8]
    e050:	9802      	ldr	r0, [sp, #8]
    e052:	9002      	str	r0, [sp, #8]
    e054:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e058:	2800      	cmp	r0, #0
    e05a:	d1eb      	bne.n	e034 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    e05c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000e060 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    e060:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e062:	460d      	mov	r5, r1
    e064:	4606      	mov	r6, r0
    e066:	8800      	ldrh	r0, [r0, #0]
    e068:	4669      	mov	r1, sp
    e06a:	f004 fb01 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e06e:	2800      	cmp	r0, #0
    e070:	d11a      	bne.n	e0a8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    e072:	f8dd 4004 	ldr.w	r4, [sp, #4]
    e076:	2700      	movs	r7, #0
    e078:	f884 7074 	strb.w	r7, [r4, #116]	; 0x74
    e07c:	f814 0f72 	ldrb.w	r0, [r4, #114]!
    e080:	f006 fe72 	bl	14d68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
    e084:	70a8      	strb	r0, [r5, #2]
    e086:	7860      	ldrb	r0, [r4, #1]
    e088:	f006 fe6e 	bl	14d68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
    e08c:	70e8      	strb	r0, [r5, #3]
    e08e:	78a0      	ldrb	r0, [r4, #2]
    e090:	f88d 0008 	strb.w	r0, [sp, #8]
    e094:	9802      	ldr	r0, [sp, #8]
    e096:	9002      	str	r0, [sp, #8]
    e098:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e09c:	3c72      	subs	r4, #114	; 0x72
    e09e:	2800      	cmp	r0, #0
    e0a0:	d1ea      	bne.n	e078 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    e0a2:	8830      	ldrh	r0, [r6, #0]
    e0a4:	8028      	strh	r0, [r5, #0]
    e0a6:	2000      	movs	r0, #0
    e0a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000e0ac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    e0ac:	4903      	ldr	r1, [pc, #12]	; (e0bc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    e0ae:	888a      	ldrh	r2, [r1, #4]
    e0b0:	8002      	strh	r2, [r0, #0]
    e0b2:	88c9      	ldrh	r1, [r1, #6]
    e0b4:	8041      	strh	r1, [r0, #2]
    e0b6:	2000      	movs	r0, #0
    e0b8:	4770      	bx	lr
    e0ba:	0000      	.short	0x0000
    e0bc:	20001666 	.word	0x20001666

0000e0c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    e0c0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e0c2:	2400      	movs	r4, #0
    e0c4:	a902      	add	r1, sp, #8
    e0c6:	f88d 4004 	strb.w	r4, [sp, #4]
    e0ca:	f88d 4008 	strb.w	r4, [sp, #8]
    e0ce:	9100      	str	r1, [sp, #0]
    e0d0:	7882      	ldrb	r2, [r0, #2]
    e0d2:	7841      	ldrb	r1, [r0, #1]
    e0d4:	7800      	ldrb	r0, [r0, #0]
    e0d6:	ab01      	add	r3, sp, #4
    e0d8:	f007 f8ee 	bl	152b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x586>
    e0dc:	2800      	cmp	r0, #0
    e0de:	d112      	bne.n	e106 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    e0e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e0e4:	f006 ff4b 	bl	14f7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24c>
    e0e8:	b170      	cbz	r0, e108 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    e0ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e0ee:	f006 ff46 	bl	14f7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24c>
    e0f2:	b148      	cbz	r0, e108 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    e0f4:	4805      	ldr	r0, [pc, #20]	; (e10c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    e0f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    e0fa:	7481      	strb	r1, [r0, #18]
    e0fc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    e100:	74c1      	strb	r1, [r0, #19]
    e102:	8284      	strh	r4, [r0, #20]
    e104:	2000      	movs	r0, #0
    e106:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e108:	2011      	movs	r0, #17
    e10a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e10c:	20001594 	.word	0x20001594

0000e110 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I>:
    e110:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e112:	4604      	mov	r4, r0
    e114:	2000      	movs	r0, #0
    e116:	f000 fb4f 	bl	e7b8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
    e11a:	7860      	ldrb	r0, [r4, #1]
    e11c:	b300      	cbz	r0, e160 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x50>
    e11e:	2500      	movs	r5, #0
    e120:	e018      	b.n	e154 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x44>
    e122:	bf00      	nop
    e124:	eb04 0685 	add.w	r6, r4, r5, lsl #2
    e128:	2102      	movs	r1, #2
    e12a:	78b0      	ldrb	r0, [r6, #2]
    e12c:	f004 f82e 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e130:	b120      	cbz	r0, e13c <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x2c>
    e132:	7821      	ldrb	r1, [r4, #0]
    e134:	2901      	cmp	r1, #1
    e136:	d003      	beq.n	e140 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x30>
    e138:	b131      	cbz	r1, e148 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x38>
    e13a:	e00f      	b.n	e15c <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4c>
    e13c:	2042      	movs	r0, #66	; 0x42
    e13e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e140:	1cb1      	adds	r1, r6, #2
    e142:	f000 fa25 	bl	e590 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e146:	e001      	b.n	e14c <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x3c>
    e148:	f006 fffb 	bl	15142 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
    e14c:	2800      	cmp	r0, #0
    e14e:	d1f6      	bne.n	e13e <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x2e>
    e150:	1c6d      	adds	r5, r5, #1
    e152:	b2ed      	uxtb	r5, r5
    e154:	7860      	ldrb	r0, [r4, #1]
    e156:	42a8      	cmp	r0, r5
    e158:	d8e4      	bhi.n	e124 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x14>
    e15a:	e018      	b.n	e18e <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x7e>
    e15c:	2012      	movs	r0, #18
    e15e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e160:	7820      	ldrb	r0, [r4, #0]
    e162:	2800      	cmp	r0, #0
    e164:	d1fa      	bne.n	e15c <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4c>
    e166:	4669      	mov	r1, sp
    e168:	2002      	movs	r0, #2
    e16a:	f004 f819 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e16e:	b148      	cbz	r0, e184 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x74>
    e170:	f241 514b 	movw	r1, #5451	; 0x154b
    e174:	2039      	movs	r0, #57	; 0x39
    e176:	f7f6 faa1 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e17a:	9802      	ldr	r0, [sp, #8]
    e17c:	f006 ffe1 	bl	15142 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
    e180:	2800      	cmp	r0, #0
    e182:	d1ec      	bne.n	e15e <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4e>
    e184:	4668      	mov	r0, sp
    e186:	f7f6 fd03 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e18a:	2800      	cmp	r0, #0
    e18c:	d0f5      	beq.n	e17a <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x6a>
    e18e:	2000      	movs	r0, #0
    e190:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000e194 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    e194:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e198:	460e      	mov	r6, r1
    e19a:	4605      	mov	r5, r0
    e19c:	7807      	ldrb	r7, [r0, #0]
    e19e:	f006 fe88 	bl	14eb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    e1a2:	2800      	cmp	r0, #0
    e1a4:	d10a      	bne.n	e1bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e1a6:	4628      	mov	r0, r5
    e1a8:	f006 fe49 	bl	14e3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x10c>
    e1ac:	2800      	cmp	r0, #0
    e1ae:	d105      	bne.n	e1bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e1b0:	2002      	movs	r0, #2
    e1b2:	f7f6 fc85 	bl	4ac0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e1b6:	4287      	cmp	r7, r0
    e1b8:	d302      	bcc.n	e1c0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    e1ba:	2007      	movs	r0, #7
    e1bc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e1c0:	2102      	movs	r1, #2
    e1c2:	4638      	mov	r0, r7
    e1c4:	f003 ffe2 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e1c8:	0004      	movs	r4, r0
    e1ca:	d003      	beq.n	e1d4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x40>
    e1cc:	f005 fd76 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    e1d0:	bb70      	cbnz	r0, e230 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9c>
    e1d2:	e00c      	b.n	e1ee <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    e1d4:	2200      	movs	r2, #0
    e1d6:	2102      	movs	r1, #2
    e1d8:	4638      	mov	r0, r7
    e1da:	f003 ffcd 	bl	12178 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    e1de:	0004      	movs	r4, r0
    e1e0:	d011      	beq.n	e206 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    e1e2:	4826      	ldr	r0, [pc, #152]	; (e27c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe8>)
    e1e4:	f990 1000 	ldrsb.w	r1, [r0]
    e1e8:	4620      	mov	r0, r4
    e1ea:	f005 f9d5 	bl	13598 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    e1ee:	7828      	ldrb	r0, [r5, #0]
    e1f0:	2103      	movs	r1, #3
    e1f2:	f003 ffcb 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e1f6:	b1e8      	cbz	r0, e234 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    e1f8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    e1fc:	b1d0      	cbz	r0, e234 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    e1fe:	7868      	ldrb	r0, [r5, #1]
    e200:	07c1      	lsls	r1, r0, #31
    e202:	d10b      	bne.n	e21c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x88>
    e204:	e004      	b.n	e210 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    e206:	f241 215a 	movw	r1, #4698	; 0x125a
    e20a:	2039      	movs	r0, #57	; 0x39
    e20c:	f7f6 fa56 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e210:	0781      	lsls	r1, r0, #30
    e212:	d403      	bmi.n	e21c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x88>
    e214:	06c1      	lsls	r1, r0, #27
    e216:	d401      	bmi.n	e21c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x88>
    e218:	0680      	lsls	r0, r0, #26
    e21a:	d501      	bpl.n	e220 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8c>
    e21c:	2012      	movs	r0, #18
    e21e:	e7cd      	b.n	e1bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e220:	4620      	mov	r0, r4
    e222:	f005 fb03 	bl	1382c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    e226:	f006 fd9f 	bl	14d68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
    e22a:	7da9      	ldrb	r1, [r5, #22]
    e22c:	4288      	cmp	r0, r1
    e22e:	d001      	beq.n	e234 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    e230:	200c      	movs	r0, #12
    e232:	e7c3      	b.n	e1bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e234:	4620      	mov	r0, r4
    e236:	f005 fae5 	bl	13804 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e23a:	7030      	strb	r0, [r6, #0]
    e23c:	74e8      	strb	r0, [r5, #19]
    e23e:	4629      	mov	r1, r5
    e240:	4620      	mov	r0, r4
    e242:	f7f9 fdf9 	bl	7e38 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    e246:	4606      	mov	r6, r0
    e248:	7e68      	ldrb	r0, [r5, #25]
    e24a:	b1a0      	cbz	r0, e276 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe2>
    e24c:	b99e      	cbnz	r6, e276 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe2>
    e24e:	2200      	movs	r2, #0
    e250:	4668      	mov	r0, sp
    e252:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e254:	f004 f86e 	bl	12334 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e258:	2200      	movs	r2, #0
    e25a:	2101      	movs	r1, #1
    e25c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    e25e:	f004 f8e2 	bl	12426 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e262:	2204      	movs	r2, #4
    e264:	4668      	mov	r0, sp
    e266:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e268:	f004 f864 	bl	12334 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e26c:	2200      	movs	r2, #0
    e26e:	4611      	mov	r1, r2
    e270:	6c60      	ldr	r0, [r4, #68]	; 0x44
    e272:	f004 f8d8 	bl	12426 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e276:	4630      	mov	r0, r6
    e278:	e7a0      	b.n	e1bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e27a:	0000      	.short	0x0000
    e27c:	20000434 	.word	0x20000434

0000e280 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    e280:	7801      	ldrb	r1, [r0, #0]
    e282:	b171      	cbz	r1, e2a2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    e284:	7841      	ldrb	r1, [r0, #1]
    e286:	b161      	cbz	r1, e2a2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    e288:	8841      	ldrh	r1, [r0, #2]
    e28a:	291b      	cmp	r1, #27
    e28c:	d309      	bcc.n	e2a2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    e28e:	8881      	ldrh	r1, [r0, #4]
    e290:	291b      	cmp	r1, #27
    e292:	d306      	bcc.n	e2a2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    e294:	4904      	ldr	r1, [pc, #16]	; (e2a8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    e296:	6802      	ldr	r2, [r0, #0]
    e298:	600a      	str	r2, [r1, #0]
    e29a:	8880      	ldrh	r0, [r0, #4]
    e29c:	8088      	strh	r0, [r1, #4]
    e29e:	2000      	movs	r0, #0
    e2a0:	4770      	bx	lr
    e2a2:	2012      	movs	r0, #18
    e2a4:	4770      	bx	lr
    e2a6:	0000      	.short	0x0000
    e2a8:	20001594 	.word	0x20001594

0000e2ac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    e2ac:	6800      	ldr	r0, [r0, #0]
    e2ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    e2b2:	d303      	bcc.n	e2bc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x10>
    e2b4:	4902      	ldr	r1, [pc, #8]	; (e2c0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x14>)
    e2b6:	6088      	str	r0, [r1, #8]
    e2b8:	2000      	movs	r0, #0
    e2ba:	4770      	bx	lr
    e2bc:	2012      	movs	r0, #18
    e2be:	4770      	bx	lr
    e2c0:	20001594 	.word	0x20001594

0000e2c4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    e2c4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e2c6:	4605      	mov	r5, r0
    e2c8:	7800      	ldrb	r0, [r0, #0]
    e2ca:	b198      	cbz	r0, e2f4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
    e2cc:	4668      	mov	r0, sp
    e2ce:	f7f6 f863 	bl	4398 <mpsl_fem_pa_is_configured>
    e2d2:	f89d 0000 	ldrb.w	r0, [sp]
    e2d6:	b108      	cbz	r0, e2dc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x18>
    e2d8:	2401      	movs	r4, #1
    e2da:	e000      	b.n	e2de <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x1a>
    e2dc:	2400      	movs	r4, #0
    e2de:	a801      	add	r0, sp, #4
    e2e0:	f7f6 f842 	bl	4368 <mpsl_fem_lna_is_configured>
    e2e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e2e8:	b100      	cbz	r0, e2ec <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x28>
    e2ea:	2001      	movs	r0, #1
    e2ec:	4304      	orrs	r4, r0
    e2ee:	d001      	beq.n	e2f4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
    e2f0:	200c      	movs	r0, #12
    e2f2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e2f4:	4902      	ldr	r1, [pc, #8]	; (e300 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x3c>)
    e2f6:	7828      	ldrb	r0, [r5, #0]
    e2f8:	7208      	strb	r0, [r1, #8]
    e2fa:	2000      	movs	r0, #0
    e2fc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e2fe:	0000      	.short	0x0000
    e300:	20001666 	.word	0x20001666

0000e304 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    e304:	4a03      	ldr	r2, [pc, #12]	; (e314 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    e306:	e9d2 1200 	ldrd	r1, r2, [r2]
    e30a:	6001      	str	r1, [r0, #0]
    e30c:	6042      	str	r2, [r0, #4]
    e30e:	2000      	movs	r0, #0
    e310:	4770      	bx	lr
    e312:	0000      	.short	0x0000
    e314:	0000e780 	.word	0x0000e780

0000e318 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    e318:	b510      	push	{r4, lr}
    e31a:	2005      	movs	r0, #5
    e31c:	f000 faba 	bl	e894 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    e320:	f7fd f990 	bl	b644 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    e324:	4902      	ldr	r1, [pc, #8]	; (e330 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    e326:	4801      	ldr	r0, [pc, #4]	; (e32c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    e328:	6048      	str	r0, [r1, #4]
    e32a:	bd10      	pop	{r4, pc}
    e32c:	0000e335 	.word	0x0000e335
    e330:	20000434 	.word	0x20000434
    e334:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    e338:	4613      	mov	r3, r2
    e33a:	4a34      	ldr	r2, [pc, #208]	; (e40c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf4>)
    e33c:	460f      	mov	r7, r1
    e33e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    e342:	8815      	ldrh	r5, [r2, #0]
    e344:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
    e348:	428d      	cmp	r5, r1
    e34a:	d300      	bcc.n	e34e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    e34c:	460d      	mov	r5, r1
    e34e:	8891      	ldrh	r1, [r2, #4]
    e350:	42a1      	cmp	r1, r4
    e352:	d200      	bcs.n	e356 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x3e>
    e354:	460c      	mov	r4, r1
    e356:	8851      	ldrh	r1, [r2, #2]
    e358:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
    e35c:	4561      	cmp	r1, ip
    e35e:	d300      	bcc.n	e362 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x4a>
    e360:	4661      	mov	r1, ip
    e362:	88d6      	ldrh	r6, [r2, #6]
    e364:	f640 0248 	movw	r2, #2120	; 0x848
    e368:	4566      	cmp	r6, ip
    e36a:	d201      	bcs.n	e370 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x58>
    e36c:	4296      	cmp	r6, r2
    e36e:	d300      	bcc.n	e372 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x5a>
    e370:	4616      	mov	r6, r2
    e372:	4291      	cmp	r1, r2
    e374:	d300      	bcc.n	e378 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x60>
    e376:	4611      	mov	r1, r2
    e378:	4688      	mov	r8, r1
    e37a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e37e:	2c1b      	cmp	r4, #27
    e380:	d001      	beq.n	e386 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6e>
    e382:	4296      	cmp	r6, r2
    e384:	d103      	bne.n	e38e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x76>
    e386:	2d1b      	cmp	r5, #27
    e388:	d03e      	beq.n	e408 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>
    e38a:	4590      	cmp	r8, r2
    e38c:	d03c      	beq.n	e408 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>
    e38e:	466a      	mov	r2, sp
    e390:	4619      	mov	r1, r3
    e392:	f006 fe16 	bl	14fc2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x290>
    e396:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    e39a:	42a8      	cmp	r0, r5
    e39c:	d800      	bhi.n	e3a0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    e39e:	4605      	mov	r5, r0
    e3a0:	80fd      	strh	r5, [r7, #6]
    e3a2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    e3a6:	4641      	mov	r1, r8
    e3a8:	4540      	cmp	r0, r8
    e3aa:	d900      	bls.n	e3ae <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x96>
    e3ac:	4608      	mov	r0, r1
    e3ae:	8138      	strh	r0, [r7, #8]
    e3b0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    e3b4:	42a1      	cmp	r1, r4
    e3b6:	d800      	bhi.n	e3ba <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa2>
    e3b8:	460c      	mov	r4, r1
    e3ba:	807c      	strh	r4, [r7, #2]
    e3bc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e3c0:	42b1      	cmp	r1, r6
    e3c2:	d800      	bhi.n	e3c6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xae>
    e3c4:	460e      	mov	r6, r1
    e3c6:	80be      	strh	r6, [r7, #4]
    e3c8:	21ff      	movs	r1, #255	; 0xff
    e3ca:	7039      	strb	r1, [r7, #0]
    e3cc:	3d1b      	subs	r5, #27
    e3ce:	2de0      	cmp	r5, #224	; 0xe0
    e3d0:	d902      	bls.n	e3d8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc0>
    e3d2:	f640 41b8 	movw	r1, #3256	; 0xcb8
    e3d6:	e014      	b.n	e402 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    e3d8:	3c1b      	subs	r4, #27
    e3da:	2ce0      	cmp	r4, #224	; 0xe0
    e3dc:	d902      	bls.n	e3e4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xcc>
    e3de:	f640 41ba 	movw	r1, #3258	; 0xcba
    e3e2:	e00e      	b.n	e402 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    e3e4:	f640 1148 	movw	r1, #2376	; 0x948
    e3e8:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
    e3ec:	4288      	cmp	r0, r1
    e3ee:	d902      	bls.n	e3f6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xde>
    e3f0:	f640 41bc 	movw	r1, #3260	; 0xcbc
    e3f4:	e005      	b.n	e402 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    e3f6:	f5a6 76a4 	sub.w	r6, r6, #328	; 0x148
    e3fa:	428e      	cmp	r6, r1
    e3fc:	d904      	bls.n	e408 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>
    e3fe:	f640 41be 	movw	r1, #3262	; 0xcbe
    e402:	2039      	movs	r0, #57	; 0x39
    e404:	f7f6 f95a 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e408:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    e40c:	20001666 	.word	0x20001666
    e410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e414:	461d      	mov	r5, r3
    e416:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    e41a:	f1a1 0c06 	sub.w	ip, r1, #6
    e41e:	f640 437a 	movw	r3, #3194	; 0xc7a
    e422:	9e08      	ldr	r6, [sp, #32]
    e424:	459c      	cmp	ip, r3
    e426:	d805      	bhi.n	e434 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>
    e428:	f1a2 0c06 	sub.w	ip, r2, #6
    e42c:	459c      	cmp	ip, r3
    e42e:	d801      	bhi.n	e434 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>
    e430:	2301      	movs	r3, #1
    e432:	e000      	b.n	e436 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11e>
    e434:	2300      	movs	r3, #0
    e436:	b120      	cbz	r0, e442 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x12a>
    e438:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    e43c:	b168      	cbz	r0, e45a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x142>
    e43e:	b96b      	cbnz	r3, e45c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x144>
    e440:	e002      	b.n	e448 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x130>
    e442:	4815      	ldr	r0, [pc, #84]	; (e498 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x180>)
    e444:	7a00      	ldrb	r0, [r0, #8]
    e446:	e7f9      	b.n	e43c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x124>
    e448:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    e44c:	2806      	cmp	r0, #6
    e44e:	d821      	bhi.n	e494 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x17c>
    e450:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    e454:	2806      	cmp	r0, #6
    e456:	d901      	bls.n	e45c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x144>
    e458:	e01c      	b.n	e494 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x17c>
    e45a:	b1db      	cbz	r3, e494 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x17c>
    e45c:	4291      	cmp	r1, r2
    e45e:	d819      	bhi.n	e494 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x17c>
    e460:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e464:	d216      	bcs.n	e494 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x17c>
    e466:	f1a4 000a 	sub.w	r0, r4, #10
    e46a:	f640 4176 	movw	r1, #3190	; 0xc76
    e46e:	4288      	cmp	r0, r1
    e470:	d810      	bhi.n	e494 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x17c>
    e472:	4610      	mov	r0, r2
    e474:	f004 f914 	bl	126a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    e478:	1c6d      	adds	r5, r5, #1
    e47a:	4368      	muls	r0, r5
    e47c:	f240 2171 	movw	r1, #625	; 0x271
    e480:	0040      	lsls	r0, r0, #1
    e482:	434c      	muls	r4, r1
    e484:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    e488:	d204      	bcs.n	e494 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x17c>
    e48a:	42b7      	cmp	r7, r6
    e48c:	d802      	bhi.n	e494 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x17c>
    e48e:	2001      	movs	r0, #1
    e490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e494:	2000      	movs	r0, #0
    e496:	e7fb      	b.n	e490 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x178>
    e498:	20001666 	.word	0x20001666
    e49c:	b510      	push	{r4, lr}
    e49e:	4812      	ldr	r0, [pc, #72]	; (e4e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1d0>)
    e4a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e4a4:	4a11      	ldr	r2, [pc, #68]	; (e4ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1d4>)
    e4a6:	8301      	strh	r1, [r0, #24]
    e4a8:	2100      	movs	r1, #0
    e4aa:	7681      	strb	r1, [r0, #26]
    e4ac:	8381      	strh	r1, [r0, #28]
    e4ae:	231b      	movs	r3, #27
    e4b0:	8013      	strh	r3, [r2, #0]
    e4b2:	f44f 74a4 	mov.w	r4, #328	; 0x148
    e4b6:	8054      	strh	r4, [r2, #2]
    e4b8:	8093      	strh	r3, [r2, #4]
    e4ba:	80d4      	strh	r4, [r2, #6]
    e4bc:	7481      	strb	r1, [r0, #18]
    e4be:	74c1      	strb	r1, [r0, #19]
    e4c0:	7251      	strb	r1, [r2, #9]
    e4c2:	2403      	movs	r4, #3
    e4c4:	7004      	strb	r4, [r0, #0]
    e4c6:	2402      	movs	r4, #2
    e4c8:	7044      	strb	r4, [r0, #1]
    e4ca:	8043      	strh	r3, [r0, #2]
    e4cc:	8083      	strh	r3, [r0, #4]
    e4ce:	f640 63a6 	movw	r3, #3750	; 0xea6
    e4d2:	6083      	str	r3, [r0, #8]
    e4d4:	005b      	lsls	r3, r3, #1
    e4d6:	60c3      	str	r3, [r0, #12]
    e4d8:	7211      	strb	r1, [r2, #8]
    e4da:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    e4de:	7581      	strb	r1, [r0, #22]
    e4e0:	7401      	strb	r1, [r0, #16]
    e4e2:	4803      	ldr	r0, [pc, #12]	; (e4f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1d8>)
    e4e4:	7001      	strb	r1, [r0, #0]
    e4e6:	bd10      	pop	{r4, pc}
    e4e8:	20001594 	.word	0x20001594
    e4ec:	20001666 	.word	0x20001666
    e4f0:	2000043c 	.word	0x2000043c
    e4f4:	b530      	push	{r4, r5, lr}
    e4f6:	b087      	sub	sp, #28
    e4f8:	4605      	mov	r5, r0
    e4fa:	8808      	ldrh	r0, [r1, #0]
    e4fc:	f8ad 0004 	strh.w	r0, [sp, #4]
    e500:	4813      	ldr	r0, [pc, #76]	; (e550 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x238>)
    e502:	460c      	mov	r4, r1
    e504:	ab03      	add	r3, sp, #12
    e506:	7c81      	ldrb	r1, [r0, #18]
    e508:	f88d 1006 	strb.w	r1, [sp, #6]
    e50c:	7cc1      	ldrb	r1, [r0, #19]
    e50e:	f88d 1007 	strb.w	r1, [sp, #7]
    e512:	8a80      	ldrh	r0, [r0, #20]
    e514:	f8ad 0008 	strh.w	r0, [sp, #8]
    e518:	a804      	add	r0, sp, #16
    e51a:	9000      	str	r0, [sp, #0]
    e51c:	aa01      	add	r2, sp, #4
    e51e:	4621      	mov	r1, r4
    e520:	4628      	mov	r0, r5
    e522:	f006 fd88 	bl	15036 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x304>
    e526:	0005      	movs	r5, r0
    e528:	d110      	bne.n	e54c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x234>
    e52a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    e52e:	f88d 0014 	strb.w	r0, [sp, #20]
    e532:	f89d 0010 	ldrb.w	r0, [sp, #16]
    e536:	f88d 0015 	strb.w	r0, [sp, #21]
    e53a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    e53e:	f8ad 0016 	strh.w	r0, [sp, #22]
    e542:	a905      	add	r1, sp, #20
    e544:	4620      	mov	r0, r4
    e546:	f004 f98e 	bl	12866 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    e54a:	4628      	mov	r0, r5
    e54c:	b007      	add	sp, #28
    e54e:	bd30      	pop	{r4, r5, pc}
    e550:	20001594 	.word	0x20001594
    e554:	b510      	push	{r4, lr}
    e556:	2102      	movs	r1, #2
    e558:	2000      	movs	r0, #0
    e55a:	f003 fe17 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e55e:	0004      	movs	r4, r0
    e560:	d10c      	bne.n	e57c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x264>
    e562:	2200      	movs	r2, #0
    e564:	2102      	movs	r1, #2
    e566:	4610      	mov	r0, r2
    e568:	f003 fe06 	bl	12178 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    e56c:	0004      	movs	r4, r0
    e56e:	d007      	beq.n	e580 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x268>
    e570:	4806      	ldr	r0, [pc, #24]	; (e58c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x274>)
    e572:	f990 1000 	ldrsb.w	r1, [r0]
    e576:	4620      	mov	r0, r4
    e578:	f005 f80e 	bl	13598 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    e57c:	4620      	mov	r0, r4
    e57e:	bd10      	pop	{r4, pc}
    e580:	f240 2135 	movw	r1, #565	; 0x235
    e584:	2039      	movs	r0, #57	; 0x39
    e586:	f7f6 f899 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e58a:	0000      	.short	0x0000
    e58c:	20000434 	.word	0x20000434

0000e590 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    e590:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e594:	460c      	mov	r4, r1
    e596:	4606      	mov	r6, r0
    e598:	f005 f937 	bl	1380a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    e59c:	b198      	cbz	r0, e5c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x36>
    e59e:	4630      	mov	r0, r6
    e5a0:	f005 f924 	bl	137ec <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e5a4:	b130      	cbz	r0, e5b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    e5a6:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    e5aa:	2012      	movs	r0, #18
    e5ac:	2900      	cmp	r1, #0
    e5ae:	d00b      	beq.n	e5c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    e5b0:	2980      	cmp	r1, #128	; 0x80
    e5b2:	d809      	bhi.n	e5c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    e5b4:	4630      	mov	r0, r6
    e5b6:	f005 f8de 	bl	13776 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    e5ba:	b138      	cbz	r0, e5cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    e5bc:	4630      	mov	r0, r6
    e5be:	f004 ffb3 	bl	13528 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    e5c2:	b128      	cbz	r0, e5d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    e5c4:	e009      	b.n	e5da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    e5c6:	2042      	movs	r0, #66	; 0x42
    e5c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e5cc:	200c      	movs	r0, #12
    e5ce:	e7fb      	b.n	e5c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    e5d0:	4630      	mov	r0, r6
    e5d2:	f005 f8fd 	bl	137d0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    e5d6:	2800      	cmp	r0, #0
    e5d8:	d05b      	beq.n	e692 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x102>
    e5da:	4630      	mov	r0, r6
    e5dc:	f005 fb6e 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    e5e0:	2800      	cmp	r0, #0
    e5e2:	d1f3      	bne.n	e5cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    e5e4:	4630      	mov	r0, r6
    e5e6:	f004 ffbc 	bl	13562 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    e5ea:	2800      	cmp	r0, #0
    e5ec:	d1ee      	bne.n	e5cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    e5ee:	4630      	mov	r0, r6
    e5f0:	f7f9 fb04 	bl	7bfc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    e5f4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    e5f8:	f242 7110 	movw	r1, #10000	; 0x2710
    e5fc:	fb00 f801 	mul.w	r8, r0, r1
    e600:	78e1      	ldrb	r1, [r4, #3]
    e602:	4630      	mov	r0, r6
    e604:	f005 f8ae 	bl	13764 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    e608:	7820      	ldrb	r0, [r4, #0]
    e60a:	2103      	movs	r1, #3
    e60c:	f003 fdbe 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e610:	b138      	cbz	r0, e622 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    e612:	4949      	ldr	r1, [pc, #292]	; (e738 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>)
    e614:	6809      	ldr	r1, [r1, #0]
    e616:	b121      	cbz	r1, e622 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    e618:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    e61c:	b10a      	cbz	r2, e622 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    e61e:	3038      	adds	r0, #56	; 0x38
    e620:	4788      	blx	r1
    e622:	4630      	mov	r0, r6
    e624:	f005 f8d8 	bl	137d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e628:	b148      	cbz	r0, e63e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xae>
    e62a:	4630      	mov	r0, r6
    e62c:	f005 f8de 	bl	137ec <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e630:	4f42      	ldr	r7, [pc, #264]	; (e73c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ac>)
    e632:	b180      	cbz	r0, e656 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    e634:	4630      	mov	r0, r6
    e636:	f005 f8dd 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e63a:	b150      	cbz	r0, e652 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    e63c:	e00b      	b.n	e656 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    e63e:	4642      	mov	r2, r8
    e640:	2100      	movs	r1, #0
    e642:	4630      	mov	r0, r6
    e644:	f7fb ffbe 	bl	a5c4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    e648:	2800      	cmp	r0, #0
    e64a:	d0bd      	beq.n	e5c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    e64c:	f241 417b 	movw	r1, #5243	; 0x147b
    e650:	e065      	b.n	e71e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18e>
    e652:	7a38      	ldrb	r0, [r7, #8]
    e654:	b1e8      	cbz	r0, e692 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x102>
    e656:	2200      	movs	r2, #0
    e658:	2101      	movs	r1, #1
    e65a:	a801      	add	r0, sp, #4
    e65c:	f7f6 fabe 	bl	4bdc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    e660:	0004      	movs	r4, r0
    e662:	d046      	beq.n	e6f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    e664:	2100      	movs	r1, #0
    e666:	f7f8 fa25 	bl	6ab4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e66a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e66e:	8020      	strh	r0, [r4, #0]
    e670:	4621      	mov	r1, r4
    e672:	4630      	mov	r0, r6
    e674:	f005 f8dc 	bl	13830 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    e678:	f000 f918 	bl	e8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e67c:	0940      	lsrs	r0, r0, #5
    e67e:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    e682:	07c0      	lsls	r0, r0, #31
    e684:	4d2e      	ldr	r5, [pc, #184]	; (e740 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>)
    e686:	f104 0034 	add.w	r0, r4, #52	; 0x34
    e68a:	d004      	beq.n	e696 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x106>
    e68c:	886a      	ldrh	r2, [r5, #2]
    e68e:	88a9      	ldrh	r1, [r5, #4]
    e690:	e003      	b.n	e69a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x10a>
    e692:	2012      	movs	r0, #18
    e694:	e798      	b.n	e5c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    e696:	221b      	movs	r2, #27
    e698:	4611      	mov	r1, r2
    e69a:	84c2      	strh	r2, [r0, #38]	; 0x26
    e69c:	8501      	strh	r1, [r0, #40]	; 0x28
    e69e:	7a38      	ldrb	r0, [r7, #8]
    e6a0:	b100      	cbz	r0, e6a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x114>
    e6a2:	2001      	movs	r0, #1
    e6a4:	f105 0120 	add.w	r1, r5, #32
    e6a8:	f884 0077 	strb.w	r0, [r4, #119]	; 0x77
    e6ac:	c90e      	ldmia	r1, {r1, r2, r3}
    e6ae:	f104 0780 	add.w	r7, r4, #128	; 0x80
    e6b2:	e887 000e 	stmia.w	r7, {r1, r2, r3}
    e6b6:	68a9      	ldr	r1, [r5, #8]
    e6b8:	6361      	str	r1, [r4, #52]	; 0x34
    e6ba:	b110      	cbz	r0, e6c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x132>
    e6bc:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    e6c0:	e001      	b.n	e6c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x136>
    e6c2:	f641 574c 	movw	r7, #7500	; 0x1d4c
    e6c6:	4630      	mov	r0, r6
    e6c8:	f005 f894 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e6cc:	b910      	cbnz	r0, e6d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    e6ce:	4630      	mov	r0, r6
    e6d0:	f005 f8ac 	bl	1382c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    e6d4:	4621      	mov	r1, r4
    e6d6:	2001      	movs	r0, #1
    e6d8:	6167      	str	r7, [r4, #20]
    e6da:	f7ff ff0b 	bl	e4f4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1dc>
    e6de:	b150      	cbz	r0, e6f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    e6e0:	2101      	movs	r1, #1
    e6e2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e6e6:	f7f6 fac5 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e6ea:	b110      	cbz	r0, e6f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    e6ec:	f241 41cb 	movw	r1, #5323	; 0x14cb
    e6f0:	e015      	b.n	e71e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18e>
    e6f2:	2009      	movs	r0, #9
    e6f4:	e768      	b.n	e5c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    e6f6:	7868      	ldrb	r0, [r5, #1]
    e6f8:	9000      	str	r0, [sp, #0]
    e6fa:	782b      	ldrb	r3, [r5, #0]
    e6fc:	88aa      	ldrh	r2, [r5, #4]
    e6fe:	8869      	ldrh	r1, [r5, #2]
    e700:	8820      	ldrh	r0, [r4, #0]
    e702:	f7f6 fb9d 	bl	4e40 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    e706:	b110      	cbz	r0, e70e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17e>
    e708:	f241 41d6 	movw	r1, #5334	; 0x14d6
    e70c:	e007      	b.n	e71e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18e>
    e70e:	4642      	mov	r2, r8
    e710:	4621      	mov	r1, r4
    e712:	4630      	mov	r0, r6
    e714:	f7fb ff56 	bl	a5c4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    e718:	b120      	cbz	r0, e724 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>
    e71a:	f241 41d8 	movw	r1, #5336	; 0x14d8
    e71e:	2039      	movs	r0, #57	; 0x39
    e720:	f7f5 ffcc 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e724:	4807      	ldr	r0, [pc, #28]	; (e744 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>)
    e726:	6843      	ldr	r3, [r0, #4]
    e728:	b123      	cbz	r3, e734 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
    e72a:	2200      	movs	r2, #0
    e72c:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    e730:	4620      	mov	r0, r4
    e732:	4798      	blx	r3
    e734:	2000      	movs	r0, #0
    e736:	e747      	b.n	e5c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    e738:	20000444 	.word	0x20000444
    e73c:	20001666 	.word	0x20001666
    e740:	20001594 	.word	0x20001594
    e744:	20000434 	.word	0x20000434
    e748:	b510      	push	{r4, lr}
    e74a:	4604      	mov	r4, r0
    e74c:	88c1      	ldrh	r1, [r0, #6]
    e74e:	8880      	ldrh	r0, [r0, #4]
    e750:	f006 fc29 	bl	14fa6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
    e754:	2800      	cmp	r0, #0
    e756:	d10f      	bne.n	e778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    e758:	8861      	ldrh	r1, [r4, #2]
    e75a:	8820      	ldrh	r0, [r4, #0]
    e75c:	f006 fc23 	bl	14fa6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
    e760:	2800      	cmp	r0, #0
    e762:	d109      	bne.n	e778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    e764:	4805      	ldr	r0, [pc, #20]	; (e77c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>)
    e766:	88a1      	ldrh	r1, [r4, #4]
    e768:	8081      	strh	r1, [r0, #4]
    e76a:	8821      	ldrh	r1, [r4, #0]
    e76c:	8001      	strh	r1, [r0, #0]
    e76e:	88e1      	ldrh	r1, [r4, #6]
    e770:	80c1      	strh	r1, [r0, #6]
    e772:	8861      	ldrh	r1, [r4, #2]
    e774:	8041      	strh	r1, [r0, #2]
    e776:	2000      	movs	r0, #0
    e778:	bd10      	pop	{r4, pc}
    e77a:	0000      	.short	0x0000
    e77c:	20001666 	.word	0x20001666
    e780:	0c11d80c 	.word	0x0c11d80c
    e784:	11d80059 	.word	0x11d80059

0000e788 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    e788:	b510      	push	{r4, lr}
    e78a:	460c      	mov	r4, r1
    e78c:	f7f9 f8a6 	bl	78dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    e790:	4805      	ldr	r0, [pc, #20]	; (e7a8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    e792:	6044      	str	r4, [r0, #4]
    e794:	6880      	ldr	r0, [r0, #8]
    e796:	f006 fe27 	bl	153e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b6>
    e79a:	f006 fa0f 	bl	14bbc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    e79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7a2:	f7f9 b9dd 	b.w	7b60 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    e7a6:	0000      	.short	0x0000
    e7a8:	20000448 	.word	0x20000448

0000e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>:
    e7ac:	4801      	ldr	r0, [pc, #4]	; (e7b4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A+0x8>)
    e7ae:	7800      	ldrb	r0, [r0, #0]
    e7b0:	4770      	bx	lr
    e7b2:	0000      	.short	0x0000
    e7b4:	20000448 	.word	0x20000448

0000e7b8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>:
    e7b8:	4901      	ldr	r1, [pc, #4]	; (e7c0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q+0x8>)
    e7ba:	7008      	strb	r0, [r1, #0]
    e7bc:	4770      	bx	lr
    e7be:	0000      	.short	0x0000
    e7c0:	20000448 	.word	0x20000448

0000e7c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    e7c4:	b510      	push	{r4, lr}
    e7c6:	4c05      	ldr	r4, [pc, #20]	; (e7dc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    e7c8:	68e0      	ldr	r0, [r4, #12]
    e7ca:	f006 fe0d 	bl	153e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b6>
    e7ce:	6920      	ldr	r0, [r4, #16]
    e7d0:	f006 fe0a 	bl	153e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b6>
    e7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7d8:	f006 ba9b 	b.w	14d12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    e7dc:	20000448 	.word	0x20000448

0000e7e0 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ>:
    e7e0:	b510      	push	{r4, lr}
    e7e2:	4905      	ldr	r1, [pc, #20]	; (e7f8 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x18>)
    e7e4:	4805      	ldr	r0, [pc, #20]	; (e7fc <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x1c>)
    e7e6:	f006 fdf2 	bl	153ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x69c>
    e7ea:	4804      	ldr	r0, [pc, #16]	; (e7fc <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x1c>)
    e7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7f0:	4903      	ldr	r1, [pc, #12]	; (e800 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x20>)
    e7f2:	1d00      	adds	r0, r0, #4
    e7f4:	f006 bdeb 	b.w	153ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x69c>
    e7f8:	2000045c 	.word	0x2000045c
    e7fc:	20000450 	.word	0x20000450
    e800:	20000464 	.word	0x20000464

0000e804 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    e804:	b510      	push	{r4, lr}
    e806:	4908      	ldr	r1, [pc, #32]	; (e828 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    e808:	4808      	ldr	r0, [pc, #32]	; (e82c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    e80a:	f006 fde0 	bl	153ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x69c>
    e80e:	4807      	ldr	r0, [pc, #28]	; (e82c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    e810:	4907      	ldr	r1, [pc, #28]	; (e830 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    e812:	1d00      	adds	r0, r0, #4
    e814:	f006 fddb 	bl	153ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x69c>
    e818:	4804      	ldr	r0, [pc, #16]	; (e82c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    e81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e81e:	4905      	ldr	r1, [pc, #20]	; (e834 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    e820:	3008      	adds	r0, #8
    e822:	f006 bdd4 	b.w	153ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x69c>
    e826:	0000      	.short	0x0000
    e828:	20000474 	.word	0x20000474
    e82c:	20000450 	.word	0x20000450
    e830:	2000047c 	.word	0x2000047c
    e834:	2000046c 	.word	0x2000046c

0000e838 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    e838:	4801      	ldr	r0, [pc, #4]	; (e840 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    e83a:	7840      	ldrb	r0, [r0, #1]
    e83c:	4770      	bx	lr
    e83e:	0000      	.short	0x0000
    e840:	20000448 	.word	0x20000448
    e844:	b510      	push	{r4, lr}
    e846:	f7fb ff9f 	bl	a788 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    e84a:	4803      	ldr	r0, [pc, #12]	; (e858 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    e84c:	f7f9 fc4a 	bl	80e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    e850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e854:	f7f9 b876 	b.w	7944 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    e858:	200018ab 	.word	0x200018ab
    e85c:	b510      	push	{r4, lr}
    e85e:	f7f6 fe7f 	bl	5560 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    e862:	4803      	ldr	r0, [pc, #12]	; (e870 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    e864:	f7f6 ff00 	bl	5668 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    e868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e86c:	f006 bda6 	b.w	153bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68a>
    e870:	200018ab 	.word	0x200018ab
    e874:	4906      	ldr	r1, [pc, #24]	; (e890 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x58>)
    e876:	b510      	push	{r4, lr}
    e878:	2001      	movs	r0, #1
    e87a:	7048      	strb	r0, [r1, #1]
    e87c:	f7f9 fc88 	bl	8190 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    e880:	f7fc fef8 	bl	b674 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    e884:	f7ff ffea 	bl	e85c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>
    e888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e88c:	f7f9 b862 	b.w	7954 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    e890:	20000448 	.word	0x20000448

0000e894 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    e894:	4a04      	ldr	r2, [pc, #16]	; (e8a8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    e896:	08c1      	lsrs	r1, r0, #3
    e898:	f000 0307 	and.w	r3, r0, #7
    e89c:	2001      	movs	r0, #1
    e89e:	4098      	lsls	r0, r3
    e8a0:	5c53      	ldrb	r3, [r2, r1]
    e8a2:	4303      	orrs	r3, r0
    e8a4:	5453      	strb	r3, [r2, r1]
    e8a6:	4770      	bx	lr
    e8a8:	20000020 	.word	0x20000020

0000e8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    e8ac:	4901      	ldr	r1, [pc, #4]	; (e8b4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    e8ae:	e9d1 0100 	ldrd	r0, r1, [r1]
    e8b2:	4770      	bx	lr
    e8b4:	20000020 	.word	0x20000020

0000e8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    e8b8:	4909      	ldr	r1, [pc, #36]	; (e8e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x28>)
    e8ba:	8808      	ldrh	r0, [r1, #0]
    e8bc:	7909      	ldrb	r1, [r1, #4]
    e8be:	0ac2      	lsrs	r2, r0, #11
    e8c0:	0a00      	lsrs	r0, r0, #8
    e8c2:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
    e8c6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    e8ca:	07d2      	lsls	r2, r2, #31
    e8cc:	f000 0001 	and.w	r0, r0, #1
    e8d0:	1800      	adds	r0, r0, r0
    e8d2:	ea40 7252 	orr.w	r2, r0, r2, lsr #29
    e8d6:	b2d0      	uxtb	r0, r2
    e8d8:	f040 0001 	orr.w	r0, r0, #1
    e8dc:	4770      	bx	lr
    e8de:	0000      	.short	0x0000
    e8e0:	20000020 	.word	0x20000020

0000e8e4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    e8e4:	b510      	push	{r4, lr}
    e8e6:	f7f5 f9f5 	bl	3cd4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    e8ea:	2200      	movs	r2, #0
    e8ec:	4b08      	ldr	r3, [pc, #32]	; (e910 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    e8ee:	4611      	mov	r1, r2
    e8f0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    e8f4:	4284      	cmp	r4, r0
    e8f6:	d303      	bcc.n	e900 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    e8f8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    e8fc:	7882      	ldrb	r2, [r0, #2]
    e8fe:	e003      	b.n	e908 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    e900:	1c49      	adds	r1, r1, #1
    e902:	b2c9      	uxtb	r1, r1
    e904:	290c      	cmp	r1, #12
    e906:	d3f3      	bcc.n	e8f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    e908:	4802      	ldr	r0, [pc, #8]	; (e914 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    e90a:	7002      	strb	r2, [r0, #0]
    e90c:	bd10      	pop	{r4, pc}
    e90e:	0000      	.short	0x0000
    e910:	0001543c 	.word	0x0001543c
    e914:	200004e1 	.word	0x200004e1

0000e918 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    e918:	4801      	ldr	r0, [pc, #4]	; (e920 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    e91a:	7800      	ldrb	r0, [r0, #0]
    e91c:	4770      	bx	lr
    e91e:	0000      	.short	0x0000
    e920:	200004e1 	.word	0x200004e1

0000e924 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>:
    e924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e928:	460f      	mov	r7, r1
    e92a:	4605      	mov	r5, r0
    e92c:	2115      	movs	r1, #21
    e92e:	4690      	mov	r8, r2
    e930:	460e      	mov	r6, r1
    e932:	20ff      	movs	r0, #255	; 0xff
    e934:	f003 fb5b 	bl	11fee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e938:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e93c:	1cc0      	adds	r0, r0, #3
    e93e:	ea00 0401 	and.w	r4, r0, r1
    e942:	b30d      	cbz	r5, e988 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x64>
    e944:	f8df 904c 	ldr.w	r9, [pc, #76]	; e994 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x70>
    e948:	fb04 5307 	mla	r3, r4, r7, r5
    e94c:	e9c9 5301 	strd	r5, r3, [r9, #4]
    e950:	f8a9 4000 	strh.w	r4, [r9]
    e954:	00fa      	lsls	r2, r7, #3
    e956:	2100      	movs	r1, #0
    e958:	4618      	mov	r0, r3
    e95a:	f002 fb27 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e95e:	2500      	movs	r5, #0
    e960:	46aa      	mov	sl, r5
    e962:	e00f      	b.n	e984 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x60>
    e964:	4628      	mov	r0, r5
    e966:	f000 f817 	bl	e998 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x74>
    e96a:	4621      	mov	r1, r4
    e96c:	22ff      	movs	r2, #255	; 0xff
    e96e:	4633      	mov	r3, r6
    e970:	f8cd 8000 	str.w	r8, [sp]
    e974:	f003 fad9 	bl	11f2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    e978:	f8d9 1008 	ldr.w	r1, [r9, #8]
    e97c:	f801 a035 	strb.w	sl, [r1, r5, lsl #3]
    e980:	1c6d      	adds	r5, r5, #1
    e982:	b2ad      	uxth	r5, r5
    e984:	42bd      	cmp	r5, r7
    e986:	d3ed      	bcc.n	e964 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x40>
    e988:	3408      	adds	r4, #8
    e98a:	fb04 f007 	mul.w	r0, r4, r7
    e98e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e992:	0000      	.short	0x0000
    e994:	20000484 	.word	0x20000484
    e998:	4902      	ldr	r1, [pc, #8]	; (e9a4 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x80>)
    e99a:	684a      	ldr	r2, [r1, #4]
    e99c:	8809      	ldrh	r1, [r1, #0]
    e99e:	fb00 2001 	mla	r0, r0, r1, r2
    e9a2:	4770      	bx	lr
    e9a4:	20000484 	.word	0x20000484

0000e9a8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    e9a8:	b570      	push	{r4, r5, r6, lr}
    e9aa:	4605      	mov	r5, r0
    e9ac:	4616      	mov	r6, r2
    e9ae:	460c      	mov	r4, r1
    e9b0:	2002      	movs	r0, #2
    e9b2:	f000 fa09 	bl	edc8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    e9b6:	4905      	ldr	r1, [pc, #20]	; (e9cc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    e9b8:	2001      	movs	r0, #1
    e9ba:	7008      	strb	r0, [r1, #0]
    e9bc:	4904      	ldr	r1, [pc, #16]	; (e9d0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    e9be:	1ef0      	subs	r0, r6, #3
    e9c0:	6008      	str	r0, [r1, #0]
    e9c2:	4804      	ldr	r0, [pc, #16]	; (e9d4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    e9c4:	6005      	str	r5, [r0, #0]
    e9c6:	1f00      	subs	r0, r0, #4
    e9c8:	6004      	str	r4, [r0, #0]
    e9ca:	bd70      	pop	{r4, r5, r6, pc}
    e9cc:	200004e2 	.word	0x200004e2
    e9d0:	4000f510 	.word	0x4000f510
    e9d4:	4000f508 	.word	0x4000f508

0000e9d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    e9d8:	4810      	ldr	r0, [pc, #64]	; (ea1c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x44>)
    e9da:	7801      	ldrb	r1, [r0, #0]
    e9dc:	b1a9      	cbz	r1, ea0a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x32>
    e9de:	4a10      	ldr	r2, [pc, #64]	; (ea20 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    e9e0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    e9e4:	6011      	str	r1, [r2, #0]
    e9e6:	490f      	ldr	r1, [pc, #60]	; (ea24 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    e9e8:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    e9ec:	2200      	movs	r2, #0
    e9ee:	2b00      	cmp	r3, #0
    e9f0:	bf1c      	itt	ne
    e9f2:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    e9f6:	2b00      	cmpne	r3, #0
    e9f8:	d002      	beq.n	ea00 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    e9fa:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    e9fe:	b141      	cbz	r1, ea12 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    ea00:	7042      	strb	r2, [r0, #1]
    ea02:	f04f 0110 	mov.w	r1, #16
    ea06:	7081      	strb	r1, [r0, #2]
    ea08:	7002      	strb	r2, [r0, #0]
    ea0a:	f04f 0000 	mov.w	r0, #0
    ea0e:	f000 b9db 	b.w	edc8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ea12:	2101      	movs	r1, #1
    ea14:	7041      	strb	r1, [r0, #1]
    ea16:	4904      	ldr	r1, [pc, #16]	; (ea28 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    ea18:	6809      	ldr	r1, [r1, #0]
    ea1a:	e7f4      	b.n	ea06 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2e>
    ea1c:	200004e2 	.word	0x200004e2
    ea20:	4001f508 	.word	0x4001f508
    ea24:	4000f000 	.word	0x4000f000
    ea28:	4000f400 	.word	0x4000f400

0000ea2c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    ea2c:	b510      	push	{r4, lr}
    ea2e:	2002      	movs	r0, #2
    ea30:	f000 f9ca 	bl	edc8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ea34:	4907      	ldr	r1, [pc, #28]	; (ea54 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    ea36:	2001      	movs	r0, #1
    ea38:	7008      	strb	r0, [r1, #0]
    ea3a:	4907      	ldr	r1, [pc, #28]	; (ea58 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    ea3c:	2000      	movs	r0, #0
    ea3e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ea42:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    ea46:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    ea4a:	4904      	ldr	r1, [pc, #16]	; (ea5c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    ea4c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ea50:	6008      	str	r0, [r1, #0]
    ea52:	bd10      	pop	{r4, pc}
    ea54:	200004e2 	.word	0x200004e2
    ea58:	4000f000 	.word	0x4000f000
    ea5c:	4001f504 	.word	0x4001f504

0000ea60 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    ea60:	4803      	ldr	r0, [pc, #12]	; (ea70 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    ea62:	2100      	movs	r1, #0
    ea64:	7001      	strb	r1, [r0, #0]
    ea66:	7041      	strb	r1, [r0, #1]
    ea68:	2110      	movs	r1, #16
    ea6a:	7081      	strb	r1, [r0, #2]
    ea6c:	4770      	bx	lr
    ea6e:	0000      	.short	0x0000
    ea70:	200004e2 	.word	0x200004e2

0000ea74 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    ea74:	480c      	ldr	r0, [pc, #48]	; (eaa8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    ea76:	7801      	ldrb	r1, [r0, #0]
    ea78:	2900      	cmp	r1, #0
    ea7a:	bf04      	itt	eq
    ea7c:	7880      	ldrbeq	r0, [r0, #2]
    ea7e:	4770      	bxeq	lr
    ea80:	480a      	ldr	r0, [pc, #40]	; (eaac <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    ea82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ea86:	2900      	cmp	r1, #0
    ea88:	bf1c      	itt	ne
    ea8a:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    ea8e:	2900      	cmpne	r1, #0
    ea90:	d002      	beq.n	ea98 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    ea92:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    ea96:	b110      	cbz	r0, ea9e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    ea98:	f04f 0010 	mov.w	r0, #16
    ea9c:	4770      	bx	lr
    ea9e:	4804      	ldr	r0, [pc, #16]	; (eab0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    eaa0:	6800      	ldr	r0, [r0, #0]
    eaa2:	b2c0      	uxtb	r0, r0
    eaa4:	4770      	bx	lr
    eaa6:	0000      	.short	0x0000
    eaa8:	200004e2 	.word	0x200004e2
    eaac:	4000f000 	.word	0x4000f000
    eab0:	4000f400 	.word	0x4000f400

0000eab4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    eab4:	4811      	ldr	r0, [pc, #68]	; (eafc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x48>)
    eab6:	b510      	push	{r4, lr}
    eab8:	7802      	ldrb	r2, [r0, #0]
    eaba:	4b11      	ldr	r3, [pc, #68]	; (eb00 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>)
    eabc:	7840      	ldrb	r0, [r0, #1]
    eabe:	21c8      	movs	r1, #200	; 0xc8
    eac0:	1e49      	subs	r1, r1, #1
    eac2:	b2c9      	uxtb	r1, r1
    eac4:	b15a      	cbz	r2, eade <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2a>
    eac6:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    eaca:	f1bc 0f00 	cmp.w	ip, #0
    eace:	d00c      	beq.n	eaea <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    ead0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    ead4:	b138      	cbz	r0, eae6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    ead6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    eada:	b160      	cbz	r0, eaf6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    eadc:	e003      	b.n	eae6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    eade:	2802      	cmp	r0, #2
    eae0:	d003      	beq.n	eaea <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    eae2:	2801      	cmp	r0, #1
    eae4:	d007      	beq.n	eaf6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    eae6:	2000      	movs	r0, #0
    eae8:	bd10      	pop	{r4, pc}
    eaea:	2900      	cmp	r1, #0
    eaec:	d1e8      	bne.n	eac0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    eaee:	219e      	movs	r1, #158	; 0x9e
    eaf0:	203b      	movs	r0, #59	; 0x3b
    eaf2:	f7f5 fde3 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaf6:	2001      	movs	r0, #1
    eaf8:	bd10      	pop	{r4, pc}
    eafa:	0000      	.short	0x0000
    eafc:	200004e2 	.word	0x200004e2
    eb00:	4000f000 	.word	0x4000f000

0000eb04 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    eb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb08:	4604      	mov	r4, r0
    eb0a:	461e      	mov	r6, r3
    eb0c:	4617      	mov	r7, r2
    eb0e:	4688      	mov	r8, r1
    eb10:	2001      	movs	r0, #1
    eb12:	f000 f959 	bl	edc8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    eb16:	4d23      	ldr	r5, [pc, #140]	; (eba4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    eb18:	4823      	ldr	r0, [pc, #140]	; (eba8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa4>)
    eb1a:	f004 0103 	and.w	r1, r4, #3
    eb1e:	712e      	strb	r6, [r5, #4]
    eb20:	6800      	ldr	r0, [r0, #0]
    eb22:	0432      	lsls	r2, r6, #16
    eb24:	f361 0007 	bfi	r0, r1, #0, #8
    eb28:	f366 200f 	bfi	r0, r6, #8, #8
    eb2c:	0c00      	lsrs	r0, r0, #16
    eb2e:	4e1f      	ldr	r6, [pc, #124]	; (ebac <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa8>)
    eb30:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    eb34:	4308      	orrs	r0, r1
    eb36:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    eb3a:	481d      	ldr	r0, [pc, #116]	; (ebb0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xac>)
    eb3c:	f8c0 8000 	str.w	r8, [r0]
    eb40:	f002 f97a 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    eb44:	b928      	cbnz	r0, eb52 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x4e>
    eb46:	481b      	ldr	r0, [pc, #108]	; (ebb4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xb0>)
    eb48:	6801      	ldr	r1, [r0, #0]
    eb4a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    eb4e:	4339      	orrs	r1, r7
    eb50:	6001      	str	r1, [r0, #0]
    eb52:	491a      	ldr	r1, [pc, #104]	; (ebbc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xb8>)
    eb54:	4818      	ldr	r0, [pc, #96]	; (ebb8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xb4>)
    eb56:	6008      	str	r0, [r1, #0]
    eb58:	4919      	ldr	r1, [pc, #100]	; (ebc0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xbc>)
    eb5a:	481a      	ldr	r0, [pc, #104]	; (ebc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xc0>)
    eb5c:	2c00      	cmp	r4, #0
    eb5e:	bf18      	it	ne
    eb60:	2c04      	cmpne	r4, #4
    eb62:	d104      	bne.n	eb6e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    eb64:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    eb68:	4917      	ldr	r1, [pc, #92]	; (ebc8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xc4>)
    eb6a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    eb6e:	2c01      	cmp	r4, #1
    eb70:	d105      	bne.n	eb7e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    eb72:	4916      	ldr	r1, [pc, #88]	; (ebcc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xc8>)
    eb74:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    eb78:	4915      	ldr	r1, [pc, #84]	; (ebd0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xcc>)
    eb7a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    eb7e:	2001      	movs	r0, #1
    eb80:	7068      	strb	r0, [r5, #1]
    eb82:	70ec      	strb	r4, [r5, #3]
    eb84:	2c00      	cmp	r4, #0
    eb86:	bf1e      	ittt	ne
    eb88:	2c01      	cmpne	r4, #1
    eb8a:	2c02      	cmpne	r4, #2
    eb8c:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb90:	7028      	strb	r0, [r5, #0]
    eb92:	f04f 0100 	mov.w	r1, #0
    eb96:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    eb9a:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    eb9e:	6030      	str	r0, [r6, #0]
    eba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eba4:	200004e5 	.word	0x200004e5
    eba8:	0000ed90 	.word	0x0000ed90
    ebac:	4000f000 	.word	0x4000f000
    ebb0:	4000f508 	.word	0x4000f508
    ebb4:	4000f518 	.word	0x4000f518
    ebb8:	02020000 	.word	0x02020000
    ebbc:	4001f508 	.word	0x4001f508
    ebc0:	4000f100 	.word	0x4000f100
    ebc4:	4001f088 	.word	0x4001f088
    ebc8:	4000f004 	.word	0x4000f004
    ebcc:	40001150 	.word	0x40001150
    ebd0:	4000f00c 	.word	0x4000f00c

0000ebd4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    ebd4:	b570      	push	{r4, r5, r6, lr}
    ebd6:	4a27      	ldr	r2, [pc, #156]	; (ec74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa0>)
    ebd8:	7853      	ldrb	r3, [r2, #1]
    ebda:	b1d3      	cbz	r3, ec12 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x3e>
    ebdc:	4b26      	ldr	r3, [pc, #152]	; (ec78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa4>)
    ebde:	6019      	str	r1, [r3, #0]
    ebe0:	1d19      	adds	r1, r3, #4
    ebe2:	6008      	str	r0, [r1, #0]
    ebe4:	2101      	movs	r1, #1
    ebe6:	7091      	strb	r1, [r2, #2]
    ebe8:	4610      	mov	r0, r2
    ebea:	78d5      	ldrb	r5, [r2, #3]
    ebec:	f890 c000 	ldrb.w	ip, [r0]
    ebf0:	4c22      	ldr	r4, [pc, #136]	; (ec7c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa8>)
    ebf2:	4823      	ldr	r0, [pc, #140]	; (ec80 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xac>)
    ebf4:	2300      	movs	r3, #0
    ebf6:	b195      	cbz	r5, ec1e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x4a>
    ebf8:	2d04      	cmp	r5, #4
    ebfa:	d027      	beq.n	ec4c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>
    ebfc:	f1bc 0f00 	cmp.w	ip, #0
    ec00:	d02b      	beq.n	ec5a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x86>
    ec02:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    ec06:	7910      	ldrb	r0, [r2, #4]
    ec08:	2802      	cmp	r0, #2
    ec0a:	bf18      	it	ne
    ec0c:	2803      	cmpne	r0, #3
    ec0e:	d028      	beq.n	ec62 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x8e>
    ec10:	e02d      	b.n	ec6e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x9a>
    ec12:	f44f 71c2 	mov.w	r1, #388	; 0x184
    ec16:	f04f 003c 	mov.w	r0, #60	; 0x3c
    ec1a:	f7f5 fd4f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec1e:	f1bc 0f00 	cmp.w	ip, #0
    ec22:	d00f      	beq.n	ec44 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x70>
    ec24:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    ec28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ec2c:	6022      	str	r2, [r4, #0]
    ec2e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    ec32:	2a00      	cmp	r2, #0
    ec34:	bf08      	it	eq
    ec36:	bd70      	popeq	{r4, r5, r6, pc}
    ec38:	6041      	str	r1, [r0, #4]
    ec3a:	4912      	ldr	r1, [pc, #72]	; (ec84 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb0>)
    ec3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    ec40:	6008      	str	r0, [r1, #0]
    ec42:	bd70      	pop	{r4, r5, r6, pc}
    ec44:	21b3      	movs	r1, #179	; 0xb3
    ec46:	203c      	movs	r0, #60	; 0x3c
    ec48:	f7f5 fd38 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec4c:	7011      	strb	r1, [r2, #0]
    ec4e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    ec52:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ec56:	6001      	str	r1, [r0, #0]
    ec58:	bd70      	pop	{r4, r5, r6, pc}
    ec5a:	21c6      	movs	r1, #198	; 0xc6
    ec5c:	203c      	movs	r0, #60	; 0x3c
    ec5e:	f7f5 fd2d 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec62:	4809      	ldr	r0, [pc, #36]	; (ec88 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb4>)
    ec64:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    ec68:	4808      	ldr	r0, [pc, #32]	; (ec8c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb8>)
    ec6a:	2103      	movs	r1, #3
    ec6c:	6001      	str	r1, [r0, #0]
    ec6e:	4808      	ldr	r0, [pc, #32]	; (ec90 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xbc>)
    ec70:	6020      	str	r0, [r4, #0]
    ec72:	bd70      	pop	{r4, r5, r6, pc}
    ec74:	200004e5 	.word	0x200004e5
    ec78:	4000f50c 	.word	0x4000f50c
    ec7c:	4001f504 	.word	0x4001f504
    ec80:	4000f000 	.word	0x4000f000
    ec84:	4001f508 	.word	0x4001f508
    ec88:	40001000 	.word	0x40001000
    ec8c:	4000f51c 	.word	0x4000f51c
    ec90:	02020000 	.word	0x02020000

0000ec94 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    ec94:	4905      	ldr	r1, [pc, #20]	; (ecac <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    ec96:	2000      	movs	r0, #0
    ec98:	780a      	ldrb	r2, [r1, #0]
    ec9a:	b11a      	cbz	r2, eca4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    ec9c:	4b05      	ldr	r3, [pc, #20]	; (ecb4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>)
    ec9e:	4a04      	ldr	r2, [pc, #16]	; (ecb0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1c>)
    eca0:	601a      	str	r2, [r3, #0]
    eca2:	7008      	strb	r0, [r1, #0]
    eca4:	7048      	strb	r0, [r1, #1]
    eca6:	7088      	strb	r0, [r1, #2]
    eca8:	4770      	bx	lr
    ecaa:	0000      	.short	0x0000
    ecac:	200004e5 	.word	0x200004e5
    ecb0:	02020000 	.word	0x02020000
    ecb4:	4001f508 	.word	0x4001f508

0000ecb8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    ecb8:	4802      	ldr	r0, [pc, #8]	; (ecc4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    ecba:	2100      	movs	r1, #0
    ecbc:	7001      	strb	r1, [r0, #0]
    ecbe:	7041      	strb	r1, [r0, #1]
    ecc0:	7081      	strb	r1, [r0, #2]
    ecc2:	4770      	bx	lr
    ecc4:	200004e5 	.word	0x200004e5

0000ecc8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    ecc8:	480b      	ldr	r0, [pc, #44]	; (ecf8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    ecca:	b510      	push	{r4, lr}
    eccc:	7800      	ldrb	r0, [r0, #0]
    ecce:	b148      	cbz	r0, ece4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>
    ecd0:	480a      	ldr	r0, [pc, #40]	; (ecfc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    ecd2:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    ecd6:	b150      	cbz	r0, ecee <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    ecd8:	4809      	ldr	r0, [pc, #36]	; (ed00 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    ecda:	6800      	ldr	r0, [r0, #0]
    ecdc:	2800      	cmp	r0, #0
    ecde:	bf18      	it	ne
    ece0:	2001      	movne	r0, #1
    ece2:	bd10      	pop	{r4, pc}
    ece4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    ece8:	203c      	movs	r0, #60	; 0x3c
    ecea:	f7f5 fce7 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecee:	f240 11eb 	movw	r1, #491	; 0x1eb
    ecf2:	203c      	movs	r0, #60	; 0x3c
    ecf4:	f7f5 fce2 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecf8:	200004e5 	.word	0x200004e5
    ecfc:	4000f000 	.word	0x4000f000
    ed00:	4000f400 	.word	0x4000f400

0000ed04 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    ed04:	4901      	ldr	r1, [pc, #4]	; (ed0c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    ed06:	2001      	movs	r0, #1
    ed08:	6088      	str	r0, [r1, #8]
    ed0a:	4770      	bx	lr
    ed0c:	4000f000 	.word	0x4000f000

0000ed10 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    ed10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed14:	481b      	ldr	r0, [pc, #108]	; (ed84 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    ed16:	7800      	ldrb	r0, [r0, #0]
    ed18:	b1d8      	cbz	r0, ed52 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    ed1a:	4c1b      	ldr	r4, [pc, #108]	; (ed88 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
    ed1c:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    ed20:	2800      	cmp	r0, #0
    ed22:	bf18      	it	ne
    ed24:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed28:	2002      	movs	r0, #2
    ed2a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    ed2e:	4f17      	ldr	r7, [pc, #92]	; (ed8c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    ed30:	6838      	ldr	r0, [r7, #0]
    ed32:	f3c0 1800 	ubfx	r8, r0, #4, #1
    ed36:	6838      	ldr	r0, [r7, #0]
    ed38:	f040 0010 	orr.w	r0, r0, #16
    ed3c:	6038      	str	r0, [r7, #0]
    ed3e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    ed42:	2800      	cmp	r0, #0
    ed44:	bf04      	itt	eq
    ed46:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
    ed4a:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
    ed4e:	d10d      	bne.n	ed6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5c>
    ed50:	e004      	b.n	ed5c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    ed52:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    ed56:	203c      	movs	r0, #60	; 0x3c
    ed58:	f7f5 fcb0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed5c:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
    ed60:	f7f5 f9da 	bl	4118 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ed64:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    ed68:	2800      	cmp	r0, #0
    ed6a:	d0f7      	beq.n	ed5c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    ed6c:	f1b8 0f00 	cmp.w	r8, #0
    ed70:	d103      	bne.n	ed7a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    ed72:	6838      	ldr	r0, [r7, #0]
    ed74:	f020 0010 	bic.w	r0, r0, #16
    ed78:	6038      	str	r0, [r7, #0]
    ed7a:	2002      	movs	r0, #2
    ed7c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed84:	200004e5 	.word	0x200004e5
    ed88:	4000f000 	.word	0x4000f000
    ed8c:	e000ed10 	.word	0xe000ed10
    ed90:	00010000 	.word	0x00010000

0000ed94 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    ed94:	b510      	push	{r4, lr}
    ed96:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ed9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ed9e:	2000      	movs	r0, #0
    eda0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    eda4:	f3bf 8f4f 	dsb	sy
    eda8:	f3bf 8f6f 	isb	sy
    edac:	4904      	ldr	r1, [pc, #16]	; (edc0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    edae:	6008      	str	r0, [r1, #0]
    edb0:	6008      	str	r0, [r1, #0]
    edb2:	f7ff ff6f 	bl	ec94 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    edb6:	4903      	ldr	r1, [pc, #12]	; (edc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>)
    edb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    edbc:	6008      	str	r0, [r1, #0]
    edbe:	bd10      	pop	{r4, pc}
    edc0:	4000f500 	.word	0x4000f500
    edc4:	4001f508 	.word	0x4001f508

0000edc8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    edc8:	b570      	push	{r4, r5, r6, lr}
    edca:	4c11      	ldr	r4, [pc, #68]	; (ee10 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    edcc:	4605      	mov	r5, r0
    edce:	2000      	movs	r0, #0
    edd0:	6020      	str	r0, [r4, #0]
    edd2:	6020      	str	r0, [r4, #0]
    edd4:	f7ff ff5e 	bl	ec94 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    edd8:	490e      	ldr	r1, [pc, #56]	; (ee14 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    edda:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    edde:	6008      	str	r0, [r1, #0]
    ede0:	2d00      	cmp	r5, #0
    ede2:	bf08      	it	eq
    ede4:	bd70      	popeq	{r4, r5, r6, pc}
    ede6:	480c      	ldr	r0, [pc, #48]	; (ee18 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    ede8:	490c      	ldr	r1, [pc, #48]	; (ee1c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    edea:	2d01      	cmp	r5, #1
    edec:	bf04      	itt	eq
    edee:	2202      	moveq	r2, #2
    edf0:	6022      	streq	r2, [r4, #0]
    edf2:	d00b      	beq.n	ee0c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    edf4:	2d02      	cmp	r5, #2
    edf6:	d003      	beq.n	ee00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x38>
    edf8:	2181      	movs	r1, #129	; 0x81
    edfa:	203d      	movs	r0, #61	; 0x3d
    edfc:	f7f5 fc5e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee00:	2203      	movs	r2, #3
    ee02:	6022      	str	r2, [r4, #0]
    ee04:	6008      	str	r0, [r1, #0]
    ee06:	4906      	ldr	r1, [pc, #24]	; (ee20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    ee08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ee0c:	6008      	str	r0, [r1, #0]
    ee0e:	bd70      	pop	{r4, r5, r6, pc}
    ee10:	4000f500 	.word	0x4000f500
    ee14:	4001f508 	.word	0x4001f508
    ee18:	200019ad 	.word	0x200019ad
    ee1c:	4000f514 	.word	0x4000f514
    ee20:	4001f504 	.word	0x4001f504

0000ee24 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    ee24:	4805      	ldr	r0, [pc, #20]	; (ee3c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    ee26:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ee2a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    ee2e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ee32:	2100      	movs	r1, #0
    ee34:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    ee38:	4770      	bx	lr
    ee3a:	0000      	.short	0x0000
    ee3c:	40001000 	.word	0x40001000

0000ee40 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    ee40:	4904      	ldr	r1, [pc, #16]	; (ee54 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    ee42:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    ee46:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    ee4a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ee4e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    ee52:	4770      	bx	lr
    ee54:	40001000 	.word	0x40001000

0000ee58 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
    ee58:	00c2      	lsls	r2, r0, #3
    ee5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ee5e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    ee62:	4b07      	ldr	r3, [pc, #28]	; (ee80 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
    ee64:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    ee68:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    ee6c:	2101      	movs	r1, #1
    ee6e:	fa01 f000 	lsl.w	r0, r1, r0
    ee72:	4904      	ldr	r1, [pc, #16]	; (ee84 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
    ee74:	6008      	str	r0, [r1, #0]
    ee76:	4904      	ldr	r1, [pc, #16]	; (ee88 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
    ee78:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    ee7a:	4310      	orrs	r0, r2
    ee7c:	6308      	str	r0, [r1, #48]	; 0x30
    ee7e:	4770      	bx	lr
    ee80:	40001104 	.word	0x40001104
    ee84:	4001f504 	.word	0x4001f504
    ee88:	200015f0 	.word	0x200015f0

0000ee8c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    ee8c:	4801      	ldr	r0, [pc, #4]	; (ee94 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    ee8e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    ee92:	4770      	bx	lr
    ee94:	200015f0 	.word	0x200015f0

0000ee98 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    ee98:	4902      	ldr	r1, [pc, #8]	; (eea4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    ee9a:	5c08      	ldrb	r0, [r1, r0]
    ee9c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    eea0:	4770      	bx	lr
    eea2:	0000      	.short	0x0000
    eea4:	000105ec 	.word	0x000105ec

0000eea8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    eea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eeac:	f7f5 f9a6 	bl	41fc <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    eeb0:	f7f5 fa1a 	bl	42e8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    eeb4:	4c4a      	ldr	r4, [pc, #296]	; (efe0 <CONFIG_BT_DIS_PNP_PID+0xef>)
    eeb6:	4680      	mov	r8, r0
    eeb8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    eebc:	f010 0f10 	tst.w	r0, #16
    eec0:	bf14      	ite	ne
    eec2:	f04f 0901 	movne.w	r9, #1
    eec6:	f04f 0900 	moveq.w	r9, #0
    eeca:	2010      	movs	r0, #16
    eecc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    eed0:	2002      	movs	r0, #2
    eed2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    eed6:	4d43      	ldr	r5, [pc, #268]	; (efe4 <CONFIG_BT_DIS_PNP_PID+0xf3>)
    eed8:	f8df a10c 	ldr.w	sl, [pc, #268]	; efe8 <CONFIG_BT_DIS_PNP_PID+0xf7>
    eedc:	2600      	movs	r6, #0
    eede:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
    eee2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    eee6:	f8ca 0000 	str.w	r0, [sl]
    eeea:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    eeee:	f04f 0701 	mov.w	r7, #1
    eef2:	f010 0fff 	tst.w	r0, #255	; 0xff
    eef6:	d016      	beq.n	ef26 <CONFIG_BT_DIS_PNP_PID+0x35>
    eef8:	20ff      	movs	r0, #255	; 0xff
    eefa:	f88d 0000 	strb.w	r0, [sp]
    eefe:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    ef02:	6127      	str	r7, [r4, #16]
    ef04:	e005      	b.n	ef12 <CONFIG_BT_DIS_PNP_PID+0x21>
    ef06:	bf00      	nop
    ef08:	f89d 0000 	ldrb.w	r0, [sp]
    ef0c:	1e40      	subs	r0, r0, #1
    ef0e:	f88d 0000 	strb.w	r0, [sp]
    ef12:	f89d 1000 	ldrb.w	r1, [sp]
    ef16:	b119      	cbz	r1, ef20 <CONFIG_BT_DIS_PNP_PID+0x2f>
    ef18:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    ef1c:	2800      	cmp	r0, #0
    ef1e:	d0f3      	beq.n	ef08 <CONFIG_BT_DIS_PNP_PID+0x17>
    ef20:	f89d 0000 	ldrb.w	r0, [sp]
    ef24:	b140      	cbz	r0, ef38 <CONFIG_BT_DIS_PNP_PID+0x47>
    ef26:	8ba8      	ldrh	r0, [r5, #28]
    ef28:	2896      	cmp	r0, #150	; 0x96
    ef2a:	d324      	bcc.n	ef76 <CONFIG_BT_DIS_PNP_PID+0x85>
    ef2c:	7a68      	ldrb	r0, [r5, #9]
    ef2e:	2801      	cmp	r0, #1
    ef30:	d007      	beq.n	ef42 <CONFIG_BT_DIS_PNP_PID+0x51>
    ef32:	2802      	cmp	r0, #2
    ef34:	d012      	beq.n	ef5c <CONFIG_BT_DIS_PNP_PID+0x6b>
    ef36:	e01e      	b.n	ef76 <CONFIG_BT_DIS_PNP_PID+0x85>
    ef38:	f640 0183 	movw	r1, #2179	; 0x883
    ef3c:	203e      	movs	r0, #62	; 0x3e
    ef3e:	f7f5 fbbd 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef42:	f7f5 fa17 	bl	4374 <mpsl_fem_pa_configuration_clear>
    ef46:	2800      	cmp	r0, #0
    ef48:	bf18      	it	ne
    ef4a:	f1b0 3fff 	cmpne.w	r0, #4294967295
    ef4e:	d012      	beq.n	ef76 <CONFIG_BT_DIS_PNP_PID+0x85>
    ef50:	f640 0194 	movw	r1, #2196	; 0x894
    ef54:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ef58:	f7f5 fbb0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef5c:	f7f5 f9f8 	bl	4350 <mpsl_fem_lna_configuration_clear>
    ef60:	2800      	cmp	r0, #0
    ef62:	bf18      	it	ne
    ef64:	f1b0 3fff 	cmpne.w	r0, #4294967295
    ef68:	d005      	beq.n	ef76 <CONFIG_BT_DIS_PNP_PID+0x85>
    ef6a:	f640 019a 	movw	r1, #2202	; 0x89a
    ef6e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ef72:	f7f5 fba3 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef76:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    ef7a:	2000      	movs	r0, #0
    ef7c:	f001 f9fc 	bl	10378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ef80:	71ee      	strb	r6, [r5, #7]
    ef82:	722e      	strb	r6, [r5, #8]
    ef84:	726e      	strb	r6, [r5, #9]
    ef86:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
    ef8a:	b1b0      	cbz	r0, efba <CONFIG_BT_DIS_PNP_PID+0xc9>
    ef8c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
    ef90:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
    ef94:	f040 0002 	orr.w	r0, r0, #2
    ef98:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ef9c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    efa0:	f8ca 0000 	str.w	r0, [sl]
    efa4:	6968      	ldr	r0, [r5, #20]
    efa6:	4911      	ldr	r1, [pc, #68]	; (efec <CONFIG_BT_DIS_PNP_PID+0xfb>)
    efa8:	f020 0003 	bic.w	r0, r0, #3
    efac:	6168      	str	r0, [r5, #20]
    efae:	6008      	str	r0, [r1, #0]
    efb0:	4910      	ldr	r1, [pc, #64]	; (eff4 <CONFIG_BT_DIS_PNP_PID+0x103>)
    efb2:	480f      	ldr	r0, [pc, #60]	; (eff0 <CONFIG_BT_DIS_PNP_PID+0xff>)
    efb4:	6008      	str	r0, [r1, #0]
    efb6:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    efba:	f1b9 0f00 	cmp.w	r9, #0
    efbe:	bf1c      	itt	ne
    efc0:	2010      	movne	r0, #16
    efc2:	f8c4 0304 	strne.w	r0, [r4, #772]	; 0x304
    efc6:	f1b8 0f00 	cmp.w	r8, #0
    efca:	bf18      	it	ne
    efcc:	6127      	strne	r7, [r4, #16]
    efce:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    efd2:	2800      	cmp	r0, #0
    efd4:	bf1c      	itt	ne
    efd6:	6127      	strne	r7, [r4, #16]
    efd8:	f885 6045 	strbne.w	r6, [r5, #69]	; 0x45
    efdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efe0:	40001000 	.word	0x40001000
    efe4:	200015f0 	.word	0x200015f0
    efe8:	4001f508 	.word	0x4001f508
    efec:	40001900 	.word	0x40001900
    eff0:	00023280 	.word	0x00023280
    eff4:	40001910 	.word	0x40001910

0000eff8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    eff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    effc:	4c5c      	ldr	r4, [pc, #368]	; (f170 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x178>)
    effe:	4605      	mov	r5, r0
    f000:	b086      	sub	sp, #24
    f002:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    f006:	468a      	mov	sl, r1
    f008:	f010 0f01 	tst.w	r0, #1
    f00c:	d016      	beq.n	f03c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    f00e:	f8df 8164 	ldr.w	r8, [pc, #356]	; f174 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x17c>
    f012:	f04f 0902 	mov.w	r9, #2
    f016:	2d00      	cmp	r5, #0
    f018:	f8d8 0000 	ldr.w	r0, [r8]
    f01c:	9005      	str	r0, [sp, #20]
    f01e:	bf04      	itt	eq
    f020:	2004      	moveq	r0, #4
    f022:	f88d 0014 	strbeq.w	r0, [sp, #20]
    f026:	d00e      	beq.n	f046 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    f028:	2d01      	cmp	r5, #1
    f02a:	bf08      	it	eq
    f02c:	f88d 9014 	strbeq.w	r9, [sp, #20]
    f030:	d009      	beq.n	f046 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    f032:	f640 21b9 	movw	r1, #2745	; 0xab9
    f036:	203e      	movs	r0, #62	; 0x3e
    f038:	f7f5 fb40 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f03c:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    f040:	203e      	movs	r0, #62	; 0x3e
    f042:	f7f5 fb3b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f046:	a805      	add	r0, sp, #20
    f048:	f7f5 f8a8 	bl	419c <mpsl_cx_request>
    f04c:	b120      	cbz	r0, f058 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    f04e:	f640 21bd 	movw	r1, #2749	; 0xabd
    f052:	203e      	movs	r0, #62	; 0x3e
    f054:	f7f5 fb32 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f058:	4f47      	ldr	r7, [pc, #284]	; (f178 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x180>)
    f05a:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    f05e:	f040 0001 	orr.w	r0, r0, #1
    f062:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    f066:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    f06a:	2601      	movs	r6, #1
    f06c:	f040 0002 	orr.w	r0, r0, #2
    f070:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    f074:	b115      	cbz	r5, f07c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>
    f076:	2d01      	cmp	r5, #1
    f078:	d006      	beq.n	f088 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>
    f07a:	e00b      	b.n	f094 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x9c>
    f07c:	4650      	mov	r0, sl
    f07e:	f001 fa3b 	bl	104f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    f082:	7266      	strb	r6, [r4, #9]
    f084:	603e      	str	r6, [r7, #0]
    f086:	e005      	b.n	f094 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x9c>
    f088:	4650      	mov	r0, sl
    f08a:	f001 f9b1 	bl	103f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    f08e:	f884 9009 	strb.w	r9, [r4, #9]
    f092:	607e      	str	r6, [r7, #4]
    f094:	4839      	ldr	r0, [pc, #228]	; (f17c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x184>)
    f096:	64c6      	str	r6, [r0, #76]	; 0x4c
    f098:	4839      	ldr	r0, [pc, #228]	; (f180 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x188>)
    f09a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    f09e:	8ba1      	ldrh	r1, [r4, #28]
    f0a0:	2996      	cmp	r1, #150	; 0x96
    f0a2:	d32e      	bcc.n	f102 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    f0a4:	4937      	ldr	r1, [pc, #220]	; (f184 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    f0a6:	b135      	cbz	r5, f0b6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xbe>
    f0a8:	2d01      	cmp	r5, #1
    f0aa:	d017      	beq.n	f0dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xe4>
    f0ac:	f240 714c 	movw	r1, #1868	; 0x74c
    f0b0:	203e      	movs	r0, #62	; 0x3e
    f0b2:	f7f5 fb03 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0b6:	f100 0228 	add.w	r2, r0, #40	; 0x28
    f0ba:	e9c1 0202 	strd	r0, r2, [r1, #8]
    f0be:	4932      	ldr	r1, [pc, #200]	; (f188 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x190>)
    f0c0:	4830      	ldr	r0, [pc, #192]	; (f184 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    f0c2:	f7f5 f95d 	bl	4380 <mpsl_fem_pa_configuration_set>
    f0c6:	2800      	cmp	r0, #0
    f0c8:	bf18      	it	ne
    f0ca:	f1b0 3fff 	cmpne.w	r0, #4294967295
    f0ce:	d018      	beq.n	f102 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    f0d0:	f240 713b 	movw	r1, #1851	; 0x73b
    f0d4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f0d8:	f7f5 faf0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0dc:	f100 0229 	add.w	r2, r0, #41	; 0x29
    f0e0:	e9c1 0202 	strd	r0, r2, [r1, #8]
    f0e4:	4928      	ldr	r1, [pc, #160]	; (f188 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x190>)
    f0e6:	4827      	ldr	r0, [pc, #156]	; (f184 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    f0e8:	f7f5 f938 	bl	435c <mpsl_fem_lna_configuration_set>
    f0ec:	2800      	cmp	r0, #0
    f0ee:	bf18      	it	ne
    f0f0:	f1b0 3fff 	cmpne.w	r0, #4294967295
    f0f4:	d005      	beq.n	f102 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    f0f6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    f0fa:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f0fe:	f7f5 fadd 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f102:	f108 008c 	add.w	r0, r8, #140	; 0x8c
    f106:	2d01      	cmp	r5, #1
    f108:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    f10a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    f10e:	f8d8 009c 	ldr.w	r0, [r8, #156]	; 0x9c
    f112:	9004      	str	r0, [sp, #16]
    f114:	bf14      	ite	ne
    f116:	2001      	movne	r0, #1
    f118:	2000      	moveq	r0, #0
    f11a:	f88d 0001 	strb.w	r0, [sp, #1]
    f11e:	4668      	mov	r0, sp
    f120:	f7f5 f8c6 	bl	42b0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    f124:	a805      	add	r0, sp, #20
    f126:	f7f5 f827 	bl	4178 <mpsl_cx_granted_ops_get>
    f12a:	b120      	cbz	r0, f136 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x13e>
    f12c:	f640 21cf 	movw	r1, #2767	; 0xacf
    f130:	203e      	movs	r0, #62	; 0x3e
    f132:	f7f5 fac3 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f136:	7a60      	ldrb	r0, [r4, #9]
    f138:	2801      	cmp	r0, #1
    f13a:	d007      	beq.n	f14c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x154>
    f13c:	2802      	cmp	r0, #2
    f13e:	bf04      	itt	eq
    f140:	f89d 0014 	ldrbeq.w	r0, [sp, #20]
    f144:	f010 0f02 	tsteq.w	r0, #2
    f148:	d010      	beq.n	f16c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x174>
    f14a:	e004      	b.n	f156 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x15e>
    f14c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f150:	f010 0f04 	tst.w	r0, #4
    f154:	d00a      	beq.n	f16c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x174>
    f156:	f04f 0000 	mov.w	r0, #0
    f15a:	bf00      	nop
    f15c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    f160:	2800      	cmp	r0, #0
    f162:	bf18      	it	ne
    f164:	613e      	strne	r6, [r7, #16]
    f166:	b006      	add	sp, #24
    f168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f16c:	2001      	movs	r0, #1
    f16e:	e7f5      	b.n	f15c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x164>
    f170:	200015f0 	.word	0x200015f0
    f174:	000105c4 	.word	0x000105c4
    f178:	40001000 	.word	0x40001000
    f17c:	40008000 	.word	0x40008000
    f180:	4000800c 	.word	0x4000800c
    f184:	20000498 	.word	0x20000498
    f188:	00010614 	.word	0x00010614

0000f18c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    f18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f190:	4c9b      	ldr	r4, [pc, #620]	; (f400 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x274>)
    f192:	0005      	movs	r5, r0
    f194:	f8df 926c 	ldr.w	r9, [pc, #620]	; f404 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x278>
    f198:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    f19c:	b089      	sub	sp, #36	; 0x24
    f19e:	f040 0002 	orr.w	r0, r0, #2
    f1a2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    f1a6:	f8d9 0000 	ldr.w	r0, [r9]
    f1aa:	460f      	mov	r7, r1
    f1ac:	f04f 0a02 	mov.w	sl, #2
    f1b0:	9000      	str	r0, [sp, #0]
    f1b2:	bf04      	itt	eq
    f1b4:	2004      	moveq	r0, #4
    f1b6:	f88d 0000 	strbeq.w	r0, [sp]
    f1ba:	d009      	beq.n	f1d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    f1bc:	2d01      	cmp	r5, #1
    f1be:	bf08      	it	eq
    f1c0:	f88d a000 	strbeq.w	sl, [sp]
    f1c4:	d004      	beq.n	f1d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    f1c6:	f640 21b9 	movw	r1, #2745	; 0xab9
    f1ca:	203e      	movs	r0, #62	; 0x3e
    f1cc:	f7f5 fa76 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1d0:	4668      	mov	r0, sp
    f1d2:	f7f4 ffe3 	bl	419c <mpsl_cx_request>
    f1d6:	b120      	cbz	r0, f1e2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    f1d8:	f640 21bd 	movw	r1, #2749	; 0xabd
    f1dc:	203e      	movs	r0, #62	; 0x3e
    f1de:	f7f5 fa6d 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1e2:	f8df b224 	ldr.w	fp, [pc, #548]	; f408 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x27c>
    f1e6:	4e89      	ldr	r6, [pc, #548]	; (f40c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x280>)
    f1e8:	f04f 0800 	mov.w	r8, #0
    f1ec:	b115      	cbz	r5, f1f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    f1ee:	2d01      	cmp	r5, #1
    f1f0:	d020      	beq.n	f234 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa8>
    f1f2:	e037      	b.n	f264 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    f1f4:	4638      	mov	r0, r7
    f1f6:	f001 f97f 	bl	104f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    f1fa:	2001      	movs	r0, #1
    f1fc:	7260      	strb	r0, [r4, #9]
    f1fe:	79e0      	ldrb	r0, [r4, #7]
    f200:	2801      	cmp	r0, #1
    f202:	d105      	bne.n	f210 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    f204:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    f208:	f040 0008 	orr.w	r0, r0, #8
    f20c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f210:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f212:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    f216:	6320      	str	r0, [r4, #48]	; 0x30
    f218:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    f21c:	f8cb 0000 	str.w	r0, [fp]
    f220:	487b      	ldr	r0, [pc, #492]	; (f410 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x284>)
    f222:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
    f226:	f500 71fa 	add.w	r1, r0, #500	; 0x1f4
    f22a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f22e:	fbb1 f8f0 	udiv	r8, r1, r0
    f232:	e017      	b.n	f264 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    f234:	4638      	mov	r0, r7
    f236:	f001 f8db 	bl	103f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    f23a:	f884 a009 	strb.w	sl, [r4, #9]
    f23e:	79e0      	ldrb	r0, [r4, #7]
    f240:	2801      	cmp	r0, #1
    f242:	d105      	bne.n	f250 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>
    f244:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    f248:	f040 0004 	orr.w	r0, r0, #4
    f24c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f250:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f252:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    f256:	6320      	str	r0, [r4, #48]	; 0x30
    f258:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    f25c:	f8cb 0000 	str.w	r0, [fp]
    f260:	f04f 0829 	mov.w	r8, #41	; 0x29
    f264:	79e0      	ldrb	r0, [r4, #7]
    f266:	2800      	cmp	r0, #0
    f268:	bf04      	itt	eq
    f26a:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    f26e:	f040 0002 	orreq.w	r0, r0, #2
    f272:	d006      	beq.n	f282 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xf6>
    f274:	2801      	cmp	r0, #1
    f276:	bf04      	itt	eq
    f278:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    f27c:	f040 0004 	orreq.w	r0, r0, #4
    f280:	d101      	bne.n	f286 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xfa>
    f282:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    f286:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    f28a:	f8df a188 	ldr.w	sl, [pc, #392]	; f414 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x288>
    f28e:	f010 0f01 	tst.w	r0, #1
    f292:	d029      	beq.n	f2e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    f294:	f010 0f02 	tst.w	r0, #2
    f298:	d016      	beq.n	f2c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13c>
    f29a:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    f29e:	f040 0001 	orr.w	r0, r0, #1
    f2a2:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f2a6:	f8d6 0550 	ldr.w	r0, [r6, #1360]	; 0x550
    f2aa:	b2c0      	uxtb	r0, r0
    f2ac:	280b      	cmp	r0, #11
    f2ae:	bf18      	it	ne
    f2b0:	280a      	cmpne	r0, #10
    f2b2:	d003      	beq.n	f2bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x130>
    f2b4:	2803      	cmp	r0, #3
    f2b6:	bf18      	it	ne
    f2b8:	2802      	cmpne	r0, #2
    f2ba:	d115      	bne.n	f2e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    f2bc:	f240 6117 	movw	r1, #1559	; 0x617
    f2c0:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f2c4:	f7f5 f9fa 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2c8:	f010 0f04 	tst.w	r0, #4
    f2cc:	d00c      	beq.n	f2e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    f2ce:	4953      	ldr	r1, [pc, #332]	; (f41c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x290>)
    f2d0:	4851      	ldr	r0, [pc, #324]	; (f418 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28c>)
    f2d2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    f2d6:	f8da 0140 	ldr.w	r0, [sl, #320]	; 0x140
    f2da:	b128      	cbz	r0, f2e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    f2dc:	f240 611f 	movw	r1, #1567	; 0x61f
    f2e0:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f2e4:	f7f5 f9ea 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2e8:	f001 fc76 	bl	10bd8 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    f2ec:	b128      	cbz	r0, f2fa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    f2ee:	f7ff fddb 	bl	eea8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f2f2:	b009      	add	sp, #36	; 0x24
    f2f4:	2000      	movs	r0, #0
    f2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2fa:	2d01      	cmp	r5, #1
    f2fc:	bf08      	it	eq
    f2fe:	f649 71ba 	movweq	r1, #40890	; 0x9fba
    f302:	d004      	beq.n	f30e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x182>
    f304:	4842      	ldr	r0, [pc, #264]	; (f410 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x284>)
    f306:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
    f30a:	f500 7116 	add.w	r1, r0, #600	; 0x258
    f30e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f312:	fbb1 f7f0 	udiv	r7, r1, r0
    f316:	f001 fc71 	bl	10bfc <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>
    f31a:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
    f31e:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    f322:	f109 02a0 	add.w	r2, r9, #160	; 0xa0
    f326:	f10d 0b08 	add.w	fp, sp, #8
    f32a:	e892 140c 	ldmia.w	r2, {r2, r3, sl, ip}
    f32e:	e88b 140c 	stmia.w	fp, {r2, r3, sl, ip}
    f332:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
    f336:	9206      	str	r2, [sp, #24]
    f338:	2d01      	cmp	r5, #1
    f33a:	bf14      	ite	ne
    f33c:	2201      	movne	r2, #1
    f33e:	2200      	moveq	r2, #0
    f340:	f88d 2009 	strb.w	r2, [sp, #9]
    f344:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f348:	9706      	str	r7, [sp, #24]
    f34a:	a802      	add	r0, sp, #8
    f34c:	f7f4 ffb0 	bl	42b0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    f350:	8ba0      	ldrh	r0, [r4, #28]
    f352:	2100      	movs	r1, #0
    f354:	2896      	cmp	r0, #150	; 0x96
    f356:	d32c      	bcc.n	f3b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    f358:	4831      	ldr	r0, [pc, #196]	; (f420 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    f35a:	b135      	cbz	r5, f36a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1de>
    f35c:	2d01      	cmp	r5, #1
    f35e:	d016      	beq.n	f38e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
    f360:	f240 714c 	movw	r1, #1868	; 0x74c
    f364:	203e      	movs	r0, #62	; 0x3e
    f366:	f7f5 f9a9 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f36a:	2228      	movs	r2, #40	; 0x28
    f36c:	e9c0 1202 	strd	r1, r2, [r0, #8]
    f370:	492c      	ldr	r1, [pc, #176]	; (f424 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>)
    f372:	482b      	ldr	r0, [pc, #172]	; (f420 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    f374:	f7f5 f804 	bl	4380 <mpsl_fem_pa_configuration_set>
    f378:	2800      	cmp	r0, #0
    f37a:	bf18      	it	ne
    f37c:	f1b0 3fff 	cmpne.w	r0, #4294967295
    f380:	d017      	beq.n	f3b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    f382:	f240 713b 	movw	r1, #1851	; 0x73b
    f386:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f38a:	f7f5 f997 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f38e:	2229      	movs	r2, #41	; 0x29
    f390:	e9c0 1202 	strd	r1, r2, [r0, #8]
    f394:	4923      	ldr	r1, [pc, #140]	; (f424 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>)
    f396:	4822      	ldr	r0, [pc, #136]	; (f420 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    f398:	f7f4 ffe0 	bl	435c <mpsl_fem_lna_configuration_set>
    f39c:	2800      	cmp	r0, #0
    f39e:	bf18      	it	ne
    f3a0:	f1b0 3fff 	cmpne.w	r0, #4294967295
    f3a4:	d005      	beq.n	f3b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    f3a6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    f3aa:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f3ae:	f7f5 f985 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3b2:	a801      	add	r0, sp, #4
    f3b4:	f7f4 fee0 	bl	4178 <mpsl_cx_granted_ops_get>
    f3b8:	b120      	cbz	r0, f3c4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x238>
    f3ba:	f640 21cf 	movw	r1, #2767	; 0xacf
    f3be:	203e      	movs	r0, #62	; 0x3e
    f3c0:	f7f5 f97c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3c4:	7a60      	ldrb	r0, [r4, #9]
    f3c6:	2801      	cmp	r0, #1
    f3c8:	d007      	beq.n	f3da <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x24e>
    f3ca:	2802      	cmp	r0, #2
    f3cc:	bf04      	itt	eq
    f3ce:	f89d 0004 	ldrbeq.w	r0, [sp, #4]
    f3d2:	f010 0f02 	tsteq.w	r0, #2
    f3d6:	d011      	beq.n	f3fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x270>
    f3d8:	e004      	b.n	f3e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x258>
    f3da:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f3de:	f010 0f04 	tst.w	r0, #4
    f3e2:	d00b      	beq.n	f3fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x270>
    f3e4:	f04f 0000 	mov.w	r0, #0
    f3e8:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    f3ec:	2800      	cmp	r0, #0
    f3ee:	bf1c      	itt	ne
    f3f0:	2001      	movne	r0, #1
    f3f2:	6130      	strne	r0, [r6, #16]
    f3f4:	4640      	mov	r0, r8
    f3f6:	b009      	add	sp, #36	; 0x24
    f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3fc:	2001      	movs	r0, #1
    f3fe:	e7f3      	b.n	f3e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    f400:	200015f0 	.word	0x200015f0
    f404:	000105c4 	.word	0x000105c4
    f408:	4001f504 	.word	0x4001f504
    f40c:	40001000 	.word	0x40001000
    f410:	000105da 	.word	0x000105da
    f414:	40008000 	.word	0x40008000
    f418:	40001008 	.word	0x40001008
    f41c:	4001f098 	.word	0x4001f098
    f420:	20000498 	.word	0x20000498
    f424:	00010614 	.word	0x00010614

0000f428 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    f428:	4a02      	ldr	r2, [pc, #8]	; (f434 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    f42a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    f42c:	6003      	str	r3, [r0, #0]
    f42e:	6c10      	ldr	r0, [r2, #64]	; 0x40
    f430:	6008      	str	r0, [r1, #0]
    f432:	4770      	bx	lr
    f434:	200015f0 	.word	0x200015f0

0000f438 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    f438:	b510      	push	{r4, lr}
    f43a:	4604      	mov	r4, r0
    f43c:	4807      	ldr	r0, [pc, #28]	; (f45c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x24>)
    f43e:	f7f4 fea1 	bl	4184 <mpsl_cx_register_callback>
    f442:	b120      	cbz	r0, f44e <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x16>
    f444:	f640 1107 	movw	r1, #2311	; 0x907
    f448:	203e      	movs	r0, #62	; 0x3e
    f44a:	f7f5 f937 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f44e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    f452:	4803      	ldr	r0, [pc, #12]	; (f460 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x28>)
    f454:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    f458:	bd10      	pop	{r4, pc}
    f45a:	0000      	.short	0x0000
    f45c:	000103c1 	.word	0x000103c1
    f460:	200015e0 	.word	0x200015e0

0000f464 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    f464:	4916      	ldr	r1, [pc, #88]	; (f4c0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    f466:	b510      	push	{r4, lr}
    f468:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    f46a:	4282      	cmp	r2, r0
    f46c:	d304      	bcc.n	f478 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    f46e:	f640 1117 	movw	r1, #2327	; 0x917
    f472:	203e      	movs	r0, #62	; 0x3e
    f474:	f7f5 f922 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f478:	2201      	movs	r2, #1
    f47a:	f8df c048 	ldr.w	ip, [pc, #72]	; f4c4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>
    f47e:	730a      	strb	r2, [r1, #12]
    f480:	6108      	str	r0, [r1, #16]
    f482:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    f486:	f10c 0304 	add.w	r3, ip, #4
    f48a:	f8d3 4540 	ldr.w	r4, [r3, #1344]	; 0x540
    f48e:	1d64      	adds	r4, r4, #5
    f490:	4284      	cmp	r4, r0
    f492:	d306      	bcc.n	f4a2 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3e>
    f494:	480c      	ldr	r0, [pc, #48]	; (f4c8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    f496:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    f49a:	2900      	cmp	r1, #0
    f49c:	bf08      	it	eq
    f49e:	6102      	streq	r2, [r0, #16]
    f4a0:	bd10      	pop	{r4, pc}
    f4a2:	2200      	movs	r2, #0
    f4a4:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    f4a8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f4ac:	6b08      	ldr	r0, [r1, #48]	; 0x30
    f4ae:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    f4b2:	6308      	str	r0, [r1, #48]	; 0x30
    f4b4:	4905      	ldr	r1, [pc, #20]	; (f4cc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x68>)
    f4b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    f4ba:	6008      	str	r0, [r1, #0]
    f4bc:	bd10      	pop	{r4, pc}
    f4be:	0000      	.short	0x0000
    f4c0:	200015f0 	.word	0x200015f0
    f4c4:	40008000 	.word	0x40008000
    f4c8:	40001000 	.word	0x40001000
    f4cc:	4001f504 	.word	0x4001f504

0000f4d0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    f4d0:	b510      	push	{r4, lr}
    f4d2:	4c0f      	ldr	r4, [pc, #60]	; (f510 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    f4d4:	4603      	mov	r3, r0
    f4d6:	2002      	movs	r0, #2
    f4d8:	7320      	strb	r0, [r4, #12]
    f4da:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
    f4de:	8ba0      	ldrh	r0, [r4, #28]
    f4e0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    f4e4:	7e22      	ldrb	r2, [r4, #24]
    f4e6:	f1bc 0f01 	cmp.w	ip, #1
    f4ea:	d00d      	beq.n	f508 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    f4ec:	f001 f928 	bl	10740 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    f4f0:	6120      	str	r0, [r4, #16]
    f4f2:	4808      	ldr	r0, [pc, #32]	; (f514 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    f4f4:	2100      	movs	r1, #0
    f4f6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    f4fa:	6921      	ldr	r1, [r4, #16]
    f4fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f4fe:	4408      	add	r0, r1
    f500:	4905      	ldr	r1, [pc, #20]	; (f518 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    f502:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    f506:	bd10      	pop	{r4, pc}
    f508:	f001 f938 	bl	1077c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    f50c:	e7f0      	b.n	f4f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x20>
    f50e:	0000      	.short	0x0000
    f510:	200015f0 	.word	0x200015f0
    f514:	40008000 	.word	0x40008000
    f518:	40008004 	.word	0x40008004

0000f51c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    f51c:	b510      	push	{r4, lr}
    f51e:	f001 fca7 	bl	10e70 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    f522:	2800      	cmp	r0, #0
    f524:	bf08      	it	eq
    f526:	bd10      	popeq	{r4, pc}
    f528:	4803      	ldr	r0, [pc, #12]	; (f538 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    f52a:	6801      	ldr	r1, [r0, #0]
    f52c:	f021 0101 	bic.w	r1, r1, #1
    f530:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    f534:	6001      	str	r1, [r0, #0]
    f536:	bd10      	pop	{r4, pc}
    f538:	40001774 	.word	0x40001774

0000f53c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
    f53c:	b510      	push	{r4, lr}
    f53e:	2896      	cmp	r0, #150	; 0x96
    f540:	bf9e      	ittt	ls
    f542:	4904      	ldrls	r1, [pc, #16]	; (f554 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
    f544:	8388      	strhls	r0, [r1, #28]
    f546:	bd10      	popls	{r4, pc}
    f548:	f240 11d7 	movw	r1, #471	; 0x1d7
    f54c:	203e      	movs	r0, #62	; 0x3e
    f54e:	f7f5 f8b5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f552:	0000      	.short	0x0000
    f554:	200015f0 	.word	0x200015f0

0000f558 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    f558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f55c:	2248      	movs	r2, #72	; 0x48
    f55e:	2100      	movs	r1, #0
    f560:	481d      	ldr	r0, [pc, #116]	; (f5d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
    f562:	f001 fd23 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f566:	481c      	ldr	r0, [pc, #112]	; (f5d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
    f568:	2400      	movs	r4, #0
    f56a:	21ff      	movs	r1, #255	; 0xff
    f56c:	71c4      	strb	r4, [r0, #7]
    f56e:	7204      	strb	r4, [r0, #8]
    f570:	7244      	strb	r4, [r0, #9]
    f572:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
    f576:	215f      	movs	r1, #95	; 0x5f
    f578:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    f57c:	f001 fc31 	bl	10de2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f580:	4f16      	ldr	r7, [pc, #88]	; (f5dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
    f582:	4d17      	ldr	r5, [pc, #92]	; (f5e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x88>)
    f584:	4e17      	ldr	r6, [pc, #92]	; (f5e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x8c>)
    f586:	b928      	cbnz	r0, f594 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
    f588:	f001 fc42 	bl	10e10 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f58c:	b910      	cbnz	r0, f594 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
    f58e:	f001 fc49 	bl	10e24 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f592:	b140      	cbz	r0, f5a6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4e>
    f594:	2224      	movs	r2, #36	; 0x24
    f596:	21ff      	movs	r1, #255	; 0xff
    f598:	4638      	mov	r0, r7
    f59a:	f001 fd07 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f59e:	602c      	str	r4, [r5, #0]
    f5a0:	6034      	str	r4, [r6, #0]
    f5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5a6:	f001 fc7d 	bl	10ea4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f5aa:	b910      	cbnz	r0, f5b2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5a>
    f5ac:	f001 fc70 	bl	10e90 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f5b0:	b140      	cbz	r0, f5c4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6c>
    f5b2:	2240      	movs	r2, #64	; 0x40
    f5b4:	21ff      	movs	r1, #255	; 0xff
    f5b6:	4638      	mov	r0, r7
    f5b8:	f001 fcf8 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f5bc:	602c      	str	r4, [r5, #0]
    f5be:	6034      	str	r4, [r6, #0]
    f5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5c4:	2238      	movs	r2, #56	; 0x38
    f5c6:	21ff      	movs	r1, #255	; 0xff
    f5c8:	4638      	mov	r0, r7
    f5ca:	f001 fcef 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f5ce:	602c      	str	r4, [r5, #0]
    f5d0:	6034      	str	r4, [r6, #0]
    f5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5d6:	0000      	.short	0x0000
    f5d8:	200015f0 	.word	0x200015f0
    f5dc:	40000e00 	.word	0x40000e00
    f5e0:	40000e08 	.word	0x40000e08
    f5e4:	40000e10 	.word	0x40000e10

0000f5e8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    f5e8:	4801      	ldr	r0, [pc, #4]	; (f5f0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    f5ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
    f5ec:	4770      	bx	lr
    f5ee:	0000      	.short	0x0000
    f5f0:	200015f0 	.word	0x200015f0

0000f5f4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    f5f4:	4801      	ldr	r0, [pc, #4]	; (f5fc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    f5f6:	6a00      	ldr	r0, [r0, #32]
    f5f8:	4770      	bx	lr
    f5fa:	0000      	.short	0x0000
    f5fc:	200015f0 	.word	0x200015f0

0000f600 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    f600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f604:	4e29      	ldr	r6, [pc, #164]	; (f6ac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xac>)
    f606:	4c28      	ldr	r4, [pc, #160]	; (f6a8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xa8>)
    f608:	2000      	movs	r0, #0
    f60a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    f60e:	1d27      	adds	r7, r4, #4
    f610:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    f614:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
    f618:	f106 0804 	add.w	r8, r6, #4
    f61c:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    f620:	f7ff fc42 	bl	eea8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f624:	4d22      	ldr	r5, [pc, #136]	; (f6b0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb0>)
    f626:	8ba8      	ldrh	r0, [r5, #28]
    f628:	2896      	cmp	r0, #150	; 0x96
    f62a:	d30c      	bcc.n	f646 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
    f62c:	f7f4 fe8a 	bl	4344 <mpsl_fem_disable>
    f630:	2800      	cmp	r0, #0
    f632:	bf18      	it	ne
    f634:	f1b0 3fff 	cmpne.w	r0, #4294967295
    f638:	d005      	beq.n	f646 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
    f63a:	f240 5146 	movw	r1, #1350	; 0x546
    f63e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f642:	f7f5 f83b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f646:	f7f4 fda3 	bl	4190 <mpsl_cx_release>
    f64a:	b120      	cbz	r0, f656 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x56>
    f64c:	f240 515a 	movw	r1, #1370	; 0x55a
    f650:	203e      	movs	r0, #62	; 0x3e
    f652:	f7f5 f833 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f656:	6b28      	ldr	r0, [r5, #48]	; 0x30
    f658:	4916      	ldr	r1, [pc, #88]	; (f6b4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb4>)
    f65a:	f040 6044 	orr.w	r0, r0, #205520896	; 0xc400000
    f65e:	6008      	str	r0, [r1, #0]
    f660:	2000      	movs	r0, #0
    f662:	6328      	str	r0, [r5, #48]	; 0x30
    f664:	7328      	strb	r0, [r5, #12]
    f666:	6268      	str	r0, [r5, #36]	; 0x24
    f668:	6228      	str	r0, [r5, #32]
    f66a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    f66e:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    f672:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
    f676:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    f67a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    f67e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    f682:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    f686:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    f68a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f68e:	2002      	movs	r0, #2
    f690:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f694:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    f698:	f3bf 8f4f 	dsb	sy
    f69c:	f3bf 8f6f 	isb	sy
    f6a0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    f6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f6a8:	40008000 	.word	0x40008000
    f6ac:	40008008 	.word	0x40008008
    f6b0:	200015f0 	.word	0x200015f0
    f6b4:	4001f508 	.word	0x4001f508

0000f6b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    f6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f6bc:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    f6c0:	2701      	movs	r7, #1
    f6c2:	f04f 0902 	mov.w	r9, #2
    f6c6:	2500      	movs	r5, #0
    f6c8:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    f6cc:	f3bf 8f4f 	dsb	sy
    f6d0:	f3bf 8f6f 	isb	sy
    f6d4:	4c39      	ldr	r4, [pc, #228]	; (f7bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    f6d6:	f8c4 5ffc 	str.w	r5, [r4, #4092]	; 0xffc
    f6da:	f8c4 7ffc 	str.w	r7, [r4, #4092]	; 0xffc
    f6de:	f001 fbb7 	bl	10e50 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    f6e2:	4e37      	ldr	r6, [pc, #220]	; (f7c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    f6e4:	b118      	cbz	r0, f6ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    f6e6:	6830      	ldr	r0, [r6, #0]
    f6e8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    f6ec:	6030      	str	r0, [r6, #0]
    f6ee:	f001 fba3 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f6f2:	b138      	cbz	r0, f704 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    f6f4:	6830      	ldr	r0, [r6, #0]
    f6f6:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    f6fa:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    f6fe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    f702:	6030      	str	r0, [r6, #0]
    f704:	f001 fbb4 	bl	10e70 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    f708:	b130      	cbz	r0, f718 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x60>
    f70a:	482e      	ldr	r0, [pc, #184]	; (f7c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    f70c:	6801      	ldr	r1, [r0, #0]
    f70e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    f712:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    f716:	6001      	str	r1, [r0, #0]
    f718:	492c      	ldr	r1, [pc, #176]	; (f7cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    f71a:	482b      	ldr	r0, [pc, #172]	; (f7c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    f71c:	6008      	str	r0, [r1, #0]
    f71e:	f7f4 fe47 	bl	43b0 <mpsl_fem_device_config_254_apply_get>
    f722:	b140      	cbz	r0, f736 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    f724:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f728:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    f72c:	f1b0 3fff 	cmp.w	r0, #4294967295
    f730:	bf1c      	itt	ne
    f732:	4927      	ldrne	r1, [pc, #156]	; (f7d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    f734:	6008      	strne	r0, [r1, #0]
    f736:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    f73a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    f73c:	f1b0 3fff 	cmp.w	r0, #4294967295
    f740:	d004      	beq.n	f74c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x94>
    f742:	4924      	ldr	r1, [pc, #144]	; (f7d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    f744:	680a      	ldr	r2, [r1, #0]
    f746:	f360 4217 	bfi	r2, r0, #16, #8
    f74a:	600a      	str	r2, [r1, #0]
    f74c:	f240 1103 	movw	r1, #259	; 0x103
    f750:	f240 605b 	movw	r0, #1627	; 0x65b
    f754:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    f758:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    f75c:	481e      	ldr	r0, [pc, #120]	; (f7d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    f75e:	6007      	str	r7, [r0, #0]
    f760:	481e      	ldr	r0, [pc, #120]	; (f7dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    f762:	4a1f      	ldr	r2, [pc, #124]	; (f7e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
    f764:	2103      	movs	r1, #3
    f766:	7607      	strb	r7, [r0, #24]
    f768:	6011      	str	r1, [r2, #0]
    f76a:	f240 2101 	movw	r1, #513	; 0x201
    f76e:	f8c4 1650 	str.w	r1, [r4, #1616]	; 0x650
    f772:	2102      	movs	r1, #2
    f774:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    f778:	4a1a      	ldr	r2, [pc, #104]	; (f7e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
    f77a:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    f77e:	6011      	str	r1, [r2, #0]
    f780:	f1a0 0110 	sub.w	r1, r0, #16
    f784:	2296      	movs	r2, #150	; 0x96
    f786:	870d      	strh	r5, [r1, #56]	; 0x38
    f788:	4917      	ldr	r1, [pc, #92]	; (f7e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x130>)
    f78a:	6245      	str	r5, [r0, #36]	; 0x24
    f78c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    f790:	700d      	strb	r5, [r1, #0]
    f792:	8382      	strh	r2, [r0, #28]
    f794:	4a15      	ldr	r2, [pc, #84]	; (f7ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x134>)
    f796:	6812      	ldr	r2, [r2, #0]
    f798:	6142      	str	r2, [r0, #20]
    f79a:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
    f79e:	f8c8 9280 	str.w	r9, [r8, #640]	; 0x280
    f7a2:	2010      	movs	r0, #16
    f7a4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    f7a8:	f8c8 9100 	str.w	r9, [r8, #256]	; 0x100
    f7ac:	6848      	ldr	r0, [r1, #4]
    f7ae:	2800      	cmp	r0, #0
    f7b0:	bf08      	it	eq
    f7b2:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f7ba:	4700      	bx	r0
    f7bc:	40001000 	.word	0x40001000
    f7c0:	4000173c 	.word	0x4000173c
    f7c4:	40001740 	.word	0x40001740
    f7c8:	8900002c 	.word	0x8900002c
    f7cc:	40001778 	.word	0x40001778
    f7d0:	4000174c 	.word	0x4000174c
    f7d4:	4000158c 	.word	0x4000158c
    f7d8:	40001530 	.word	0x40001530
    f7dc:	200015f0 	.word	0x200015f0
    f7e0:	40001510 	.word	0x40001510
    f7e4:	4001f504 	.word	0x4001f504
    f7e8:	20000490 	.word	0x20000490
    f7ec:	40001900 	.word	0x40001900

0000f7f0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    f7f0:	4901      	ldr	r1, [pc, #4]	; (f7f8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    f7f2:	7648      	strb	r0, [r1, #25]
    f7f4:	4770      	bx	lr
    f7f6:	0000      	.short	0x0000
    f7f8:	200015f0 	.word	0x200015f0

0000f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f7fc:	4901      	ldr	r1, [pc, #4]	; (f804 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    f7fe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    f802:	4770      	bx	lr
    f804:	000106a0 	.word	0x000106a0

0000f808 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    f808:	491e      	ldr	r1, [pc, #120]	; (f884 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    f80a:	b510      	push	{r4, lr}
    f80c:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    f810:	4a1d      	ldr	r2, [pc, #116]	; (f888 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    f812:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    f816:	f040 0001 	orr.w	r0, r0, #1
    f81a:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
    f81e:	f010 0f01 	tst.w	r0, #1
    f822:	bf08      	it	eq
    f824:	bd10      	popeq	{r4, pc}
    f826:	f010 0f02 	tst.w	r0, #2
    f82a:	d016      	beq.n	f85a <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x52>
    f82c:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    f830:	f040 0001 	orr.w	r0, r0, #1
    f834:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    f838:	f8d1 0550 	ldr.w	r0, [r1, #1360]	; 0x550
    f83c:	b2c0      	uxtb	r0, r0
    f83e:	280b      	cmp	r0, #11
    f840:	bf18      	it	ne
    f842:	280a      	cmpne	r0, #10
    f844:	d003      	beq.n	f84e <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x46>
    f846:	2803      	cmp	r0, #3
    f848:	bf1c      	itt	ne
    f84a:	2802      	cmpne	r0, #2
    f84c:	bd10      	popne	{r4, pc}
    f84e:	f240 6117 	movw	r1, #1559	; 0x617
    f852:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f856:	f7f4 ff31 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f85a:	f010 0f04 	tst.w	r0, #4
    f85e:	bf08      	it	eq
    f860:	bd10      	popeq	{r4, pc}
    f862:	480a      	ldr	r0, [pc, #40]	; (f88c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    f864:	490a      	ldr	r1, [pc, #40]	; (f890 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    f866:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    f86a:	480a      	ldr	r0, [pc, #40]	; (f894 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    f86c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    f870:	2800      	cmp	r0, #0
    f872:	bf08      	it	eq
    f874:	bd10      	popeq	{r4, pc}
    f876:	f240 611f 	movw	r1, #1567	; 0x61f
    f87a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f87e:	f7f4 ff1d 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f882:	0000      	.short	0x0000
    f884:	40001000 	.word	0x40001000
    f888:	200015f0 	.word	0x200015f0
    f88c:	40001008 	.word	0x40001008
    f890:	4001f098 	.word	0x4001f098
    f894:	40008000 	.word	0x40008000

0000f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f898:	4901      	ldr	r1, [pc, #4]	; (f8a0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    f89a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    f89e:	4770      	bx	lr
    f8a0:	000106c4 	.word	0x000106c4

0000f8a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    f8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8a8:	0006      	movs	r6, r0
    f8aa:	4895      	ldr	r0, [pc, #596]	; (fb00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x25c>)
    f8ac:	b089      	sub	sp, #36	; 0x24
    f8ae:	4690      	mov	r8, r2
    f8b0:	6800      	ldr	r0, [r0, #0]
    f8b2:	460d      	mov	r5, r1
    f8b4:	9000      	str	r0, [sp, #0]
    f8b6:	bf08      	it	eq
    f8b8:	2004      	moveq	r0, #4
    f8ba:	d008      	beq.n	f8ce <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a>
    f8bc:	2e01      	cmp	r6, #1
    f8be:	bf08      	it	eq
    f8c0:	2002      	moveq	r0, #2
    f8c2:	d004      	beq.n	f8ce <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a>
    f8c4:	f640 21b9 	movw	r1, #2745	; 0xab9
    f8c8:	203e      	movs	r0, #62	; 0x3e
    f8ca:	f7f4 fef7 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8ce:	f88d 0000 	strb.w	r0, [sp]
    f8d2:	4668      	mov	r0, sp
    f8d4:	f7f4 fc62 	bl	419c <mpsl_cx_request>
    f8d8:	b120      	cbz	r0, f8e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x40>
    f8da:	f640 21bd 	movw	r1, #2749	; 0xabd
    f8de:	203e      	movs	r0, #62	; 0x3e
    f8e0:	f7f4 feec 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8e4:	f8df 921c 	ldr.w	r9, [pc, #540]	; fb04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x260>
    f8e8:	4f87      	ldr	r7, [pc, #540]	; (fb08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>)
    f8ea:	4c88      	ldr	r4, [pc, #544]	; (fb0c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x268>)
    f8ec:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    f8f0:	f04f 0a01 	mov.w	sl, #1
    f8f4:	b136      	cbz	r6, f904 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x60>
    f8f6:	2e01      	cmp	r6, #1
    f8f8:	d01a      	beq.n	f930 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    f8fa:	f640 0114 	movw	r1, #2068	; 0x814
    f8fe:	203e      	movs	r0, #62	; 0x3e
    f900:	f7f4 fedc 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f904:	4640      	mov	r0, r8
    f906:	f000 fdf7 	bl	104f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    f90a:	4881      	ldr	r0, [pc, #516]	; (fb10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x26c>)
    f90c:	f884 a009 	strb.w	sl, [r4, #9]
    f910:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
    f914:	79e0      	ldrb	r0, [r4, #7]
    f916:	2801      	cmp	r0, #1
    f918:	d004      	beq.n	f924 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x80>
    f91a:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    f91e:	fbb1 f1fb 	udiv	r1, r1, fp
    f922:	1a6d      	subs	r5, r5, r1
    f924:	2800      	cmp	r0, #0
    f926:	bf04      	itt	eq
    f928:	4638      	moveq	r0, r7
    f92a:	f8c9 7514 	streq.w	r7, [r9, #1300]	; 0x514
    f92e:	e011      	b.n	f954 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>
    f930:	4640      	mov	r0, r8
    f932:	f000 fd5d 	bl	103f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    f936:	2002      	movs	r0, #2
    f938:	7260      	strb	r0, [r4, #9]
    f93a:	79e1      	ldrb	r1, [r4, #7]
    f93c:	2901      	cmp	r1, #1
    f93e:	d004      	beq.n	f94a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa6>
    f940:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    f944:	fbb0 f0fb 	udiv	r0, r0, fp
    f948:	1a2d      	subs	r5, r5, r0
    f94a:	4872      	ldr	r0, [pc, #456]	; (fb14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x270>)
    f94c:	2900      	cmp	r1, #0
    f94e:	bf08      	it	eq
    f950:	f8c9 0514 	streq.w	r0, [r9, #1300]	; 0x514
    f954:	4970      	ldr	r1, [pc, #448]	; (fb18 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x274>)
    f956:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    f95a:	4870      	ldr	r0, [pc, #448]	; (fb1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x278>)
    f95c:	f8c9 0510 	str.w	r0, [r9, #1296]	; 0x510
    f960:	2010      	movs	r0, #16
    f962:	f8c7 0304 	str.w	r0, [r7, #772]	; 0x304
    f966:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f968:	4a6d      	ldr	r2, [pc, #436]	; (fb20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27c>)
    f96a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    f96e:	6320      	str	r0, [r4, #48]	; 0x30
    f970:	0108      	lsls	r0, r1, #4
    f972:	6010      	str	r0, [r2, #0]
    f974:	79e0      	ldrb	r0, [r4, #7]
    f976:	2800      	cmp	r0, #0
    f978:	bf04      	itt	eq
    f97a:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    f97e:	f040 0002 	orreq.w	r0, r0, #2
    f982:	d006      	beq.n	f992 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xee>
    f984:	2801      	cmp	r0, #1
    f986:	bf04      	itt	eq
    f988:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    f98c:	f040 0004 	orreq.w	r0, r0, #4
    f990:	d101      	bne.n	f996 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf2>
    f992:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    f996:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    f99a:	f010 0f01 	tst.w	r0, #1
    f99e:	d028      	beq.n	f9f2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    f9a0:	f010 0f02 	tst.w	r0, #2
    f9a4:	d016      	beq.n	f9d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x130>
    f9a6:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    f9aa:	f040 0001 	orr.w	r0, r0, #1
    f9ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    f9b2:	f8d7 0550 	ldr.w	r0, [r7, #1360]	; 0x550
    f9b6:	b2c0      	uxtb	r0, r0
    f9b8:	280b      	cmp	r0, #11
    f9ba:	bf18      	it	ne
    f9bc:	280a      	cmpne	r0, #10
    f9be:	d003      	beq.n	f9c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x124>
    f9c0:	2803      	cmp	r0, #3
    f9c2:	bf18      	it	ne
    f9c4:	2802      	cmpne	r0, #2
    f9c6:	d114      	bne.n	f9f2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    f9c8:	f240 6117 	movw	r1, #1559	; 0x617
    f9cc:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f9d0:	f7f4 fe74 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9d4:	f010 0f04 	tst.w	r0, #4
    f9d8:	d00b      	beq.n	f9f2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    f9da:	4852      	ldr	r0, [pc, #328]	; (fb24 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x280>)
    f9dc:	f8c9 0514 	str.w	r0, [r9, #1300]	; 0x514
    f9e0:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
    f9e4:	b128      	cbz	r0, f9f2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    f9e6:	f240 611f 	movw	r1, #1567	; 0x61f
    f9ea:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f9ee:	f7f4 fe65 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9f2:	f8c1 a04c 	str.w	sl, [r1, #76]	; 0x4c
    f9f6:	484c      	ldr	r0, [pc, #304]	; (fb28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x284>)
    f9f8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    f9fc:	42a8      	cmp	r0, r5
    f9fe:	d304      	bcc.n	fa0a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x166>
    fa00:	f640 012a 	movw	r1, #2090	; 0x82a
    fa04:	203e      	movs	r0, #62	; 0x3e
    fa06:	f7f4 fe59 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa0a:	2e01      	cmp	r6, #1
    fa0c:	bf0f      	iteee	eq
    fa0e:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    fa12:	483f      	ldrne	r0, [pc, #252]	; (fb10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x26c>)
    fa14:	f830 0018 	ldrhne.w	r0, [r0, r8, lsl #1]
    fa18:	f500 7016 	addne.w	r0, r0, #600	; 0x258
    fa1c:	fbb0 f0fb 	udiv	r0, r0, fp
    fa20:	4937      	ldr	r1, [pc, #220]	; (fb00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x25c>)
    fa22:	f10d 0904 	add.w	r9, sp, #4
    fa26:	f101 02b4 	add.w	r2, r1, #180	; 0xb4
    fa2a:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    fa2e:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    fa32:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
    fa36:	9105      	str	r1, [sp, #20]
    fa38:	bf14      	ite	ne
    fa3a:	2101      	movne	r1, #1
    fa3c:	2100      	moveq	r1, #0
    fa3e:	f88d 1005 	strb.w	r1, [sp, #5]
    fa42:	e9cd 5004 	strd	r5, r0, [sp, #16]
    fa46:	a801      	add	r0, sp, #4
    fa48:	f7f4 fc32 	bl	42b0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    fa4c:	8ba0      	ldrh	r0, [r4, #28]
    fa4e:	2896      	cmp	r0, #150	; 0x96
    fa50:	d32e      	bcc.n	fab0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    fa52:	4836      	ldr	r0, [pc, #216]	; (fb2c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    fa54:	b136      	cbz	r6, fa64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1c0>
    fa56:	2e01      	cmp	r6, #1
    fa58:	d017      	beq.n	fa8a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1e6>
    fa5a:	f240 714c 	movw	r1, #1868	; 0x74c
    fa5e:	203e      	movs	r0, #62	; 0x3e
    fa60:	f7f4 fe2c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa64:	f105 0128 	add.w	r1, r5, #40	; 0x28
    fa68:	e9c0 5102 	strd	r5, r1, [r0, #8]
    fa6c:	4930      	ldr	r1, [pc, #192]	; (fb30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x28c>)
    fa6e:	482f      	ldr	r0, [pc, #188]	; (fb2c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    fa70:	f7f4 fc86 	bl	4380 <mpsl_fem_pa_configuration_set>
    fa74:	2800      	cmp	r0, #0
    fa76:	bf18      	it	ne
    fa78:	f1b0 3fff 	cmpne.w	r0, #4294967295
    fa7c:	d018      	beq.n	fab0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    fa7e:	f240 713b 	movw	r1, #1851	; 0x73b
    fa82:	f04f 003e 	mov.w	r0, #62	; 0x3e
    fa86:	f7f4 fe19 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa8a:	f105 0129 	add.w	r1, r5, #41	; 0x29
    fa8e:	e9c0 5102 	strd	r5, r1, [r0, #8]
    fa92:	4927      	ldr	r1, [pc, #156]	; (fb30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x28c>)
    fa94:	4825      	ldr	r0, [pc, #148]	; (fb2c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    fa96:	f7f4 fc61 	bl	435c <mpsl_fem_lna_configuration_set>
    fa9a:	2800      	cmp	r0, #0
    fa9c:	bf18      	it	ne
    fa9e:	f1b0 3fff 	cmpne.w	r0, #4294967295
    faa2:	d005      	beq.n	fab0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    faa4:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    faa8:	f04f 003e 	mov.w	r0, #62	; 0x3e
    faac:	f7f4 fe06 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fab0:	4668      	mov	r0, sp
    fab2:	f7f4 fb61 	bl	4178 <mpsl_cx_granted_ops_get>
    fab6:	b120      	cbz	r0, fac2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x21e>
    fab8:	f640 21cf 	movw	r1, #2767	; 0xacf
    fabc:	203e      	movs	r0, #62	; 0x3e
    fabe:	f7f4 fdfd 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fac2:	7a60      	ldrb	r0, [r4, #9]
    fac4:	2801      	cmp	r0, #1
    fac6:	d007      	beq.n	fad8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x234>
    fac8:	2802      	cmp	r0, #2
    faca:	bf04      	itt	eq
    facc:	f89d 0000 	ldrbeq.w	r0, [sp]
    fad0:	f010 0f02 	tsteq.w	r0, #2
    fad4:	d011      	beq.n	fafa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x256>
    fad6:	e004      	b.n	fae2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x23e>
    fad8:	f89d 0000 	ldrb.w	r0, [sp]
    fadc:	f010 0f04 	tst.w	r0, #4
    fae0:	d00b      	beq.n	fafa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x256>
    fae2:	f04f 0000 	mov.w	r0, #0
    fae6:	bf00      	nop
    fae8:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    faec:	2800      	cmp	r0, #0
    faee:	bf18      	it	ne
    faf0:	f8c7 a010 	strne.w	sl, [r7, #16]
    faf4:	b009      	add	sp, #36	; 0x24
    faf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fafa:	2001      	movs	r0, #1
    fafc:	e7f4      	b.n	fae8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x244>
    fafe:	0000      	.short	0x0000
    fb00:	000105c4 	.word	0x000105c4
    fb04:	4001f098 	.word	0x4001f098
    fb08:	40001000 	.word	0x40001000
    fb0c:	200015f0 	.word	0x200015f0
    fb10:	000105da 	.word	0x000105da
    fb14:	40001004 	.word	0x40001004
    fb18:	40008000 	.word	0x40008000
    fb1c:	40008140 	.word	0x40008140
    fb20:	4001f504 	.word	0x4001f504
    fb24:	40001008 	.word	0x40001008
    fb28:	4000800c 	.word	0x4000800c
    fb2c:	20000498 	.word	0x20000498
    fb30:	00010614 	.word	0x00010614

0000fb34 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ>:
    fb34:	b570      	push	{r4, r5, r6, lr}
    fb36:	4c1b      	ldr	r4, [pc, #108]	; (fba4 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x70>)
    fb38:	4605      	mov	r5, r0
    fb3a:	2300      	movs	r3, #0
    fb3c:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
    fb40:	4616      	mov	r6, r2
    fb42:	4608      	mov	r0, r1
    fb44:	f1bc 0f00 	cmp.w	ip, #0
    fb48:	d006      	beq.n	fb58 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x24>
    fb4a:	4621      	mov	r1, r4
    fb4c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    fb50:	b13d      	cbz	r5, fb62 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x2e>
    fb52:	2d01      	cmp	r5, #1
    fb54:	d012      	beq.n	fb7c <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x48>
    fb56:	e018      	b.n	fb8a <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x56>
    fb58:	f640 0147 	movw	r1, #2119	; 0x847
    fb5c:	203e      	movs	r0, #62	; 0x3e
    fb5e:	f7f4 fdad 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb62:	f1bc 0f01 	cmp.w	ip, #1
    fb66:	d004      	beq.n	fb72 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x3e>
    fb68:	f005 fca4 	bl	154b4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    fb6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fb6e:	1843      	adds	r3, r0, r1
    fb70:	e00b      	b.n	fb8a <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x56>
    fb72:	f000 fe39 	bl	107e8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    fb76:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fb78:	1843      	adds	r3, r0, r1
    fb7a:	e006      	b.n	fb8a <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x56>
    fb7c:	f1bc 0f01 	cmp.w	ip, #1
    fb80:	d00a      	beq.n	fb98 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x64>
    fb82:	f005 fc89 	bl	15498 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    fb86:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fb88:	1843      	adds	r3, r0, r1
    fb8a:	4632      	mov	r2, r6
    fb8c:	4628      	mov	r0, r5
    fb8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb92:	4619      	mov	r1, r3
    fb94:	f7ff be86 	b.w	f8a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    fb98:	f000 fe18 	bl	107cc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    fb9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fb9e:	1843      	adds	r3, r0, r1
    fba0:	e7f3      	b.n	fb8a <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x56>
    fba2:	0000      	.short	0x0000
    fba4:	200015f0 	.word	0x200015f0

0000fba8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    fba8:	b530      	push	{r4, r5, lr}
    fbaa:	4c31      	ldr	r4, [pc, #196]	; (fc70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc8>)
    fbac:	b087      	sub	sp, #28
    fbae:	000d      	movs	r5, r1
    fbb0:	71e0      	strb	r0, [r4, #7]
    fbb2:	72a2      	strb	r2, [r4, #10]
    fbb4:	bf0c      	ite	eq
    fbb6:	2001      	moveq	r0, #1
    fbb8:	2002      	movne	r0, #2
    fbba:	7220      	strb	r0, [r4, #8]
    fbbc:	2801      	cmp	r0, #1
    fbbe:	d006      	beq.n	fbce <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x26>
    fbc0:	2802      	cmp	r0, #2
    fbc2:	d026      	beq.n	fc12 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
    fbc4:	f640 213d 	movw	r1, #2621	; 0xa3d
    fbc8:	203e      	movs	r0, #62	; 0x3e
    fbca:	f7f4 fd77 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbce:	7a60      	ldrb	r0, [r4, #9]
    fbd0:	2802      	cmp	r0, #2
    fbd2:	d11e      	bne.n	fc12 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
    fbd4:	4610      	mov	r0, r2
    fbd6:	f994 2019 	ldrsb.w	r2, [r4, #25]
    fbda:	7ea1      	ldrb	r1, [r4, #26]
    fbdc:	ab05      	add	r3, sp, #20
    fbde:	f000 fe2d 	bl	1083c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    fbe2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    fbe6:	f000 fdeb 	bl	107c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    fbea:	f10d 0015 	add.w	r0, sp, #21
    fbee:	f7f4 fbcd 	bl	438c <mpsl_fem_pa_gain_set>
    fbf2:	b120      	cbz	r0, fbfe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
    fbf4:	f240 51ee 	movw	r1, #1518	; 0x5ee
    fbf8:	203e      	movs	r0, #62	; 0x3e
    fbfa:	f7f4 fd5f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbfe:	20ff      	movs	r0, #255	; 0xff
    fc00:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    fc04:	481b      	ldr	r0, [pc, #108]	; (fc74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xcc>)
    fc06:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    fc0a:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    fc0e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    fc12:	7a62      	ldrb	r2, [r4, #9]
    fc14:	7e20      	ldrb	r0, [r4, #24]
    fc16:	2a02      	cmp	r2, #2
    fc18:	8ba2      	ldrh	r2, [r4, #28]
    fc1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fc1e:	d01d      	beq.n	fc5c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xb4>
    fc20:	4b15      	ldr	r3, [pc, #84]	; (fc78 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd0>)
    fc22:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    fc26:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fc2a:	fbb0 f0f1 	udiv	r0, r0, r1
    fc2e:	4410      	add	r0, r2
    fc30:	4912      	ldr	r1, [pc, #72]	; (fc7c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd4>)
    fc32:	2d01      	cmp	r5, #1
    fc34:	f101 02c8 	add.w	r2, r1, #200	; 0xc8
    fc38:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    fc3c:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    fc40:	f8d1 10d8 	ldr.w	r1, [r1, #216]	; 0xd8
    fc44:	9104      	str	r1, [sp, #16]
    fc46:	bf14      	ite	ne
    fc48:	2101      	movne	r1, #1
    fc4a:	2100      	moveq	r1, #0
    fc4c:	f88d 1001 	strb.w	r1, [sp, #1]
    fc50:	9001      	str	r0, [sp, #4]
    fc52:	4668      	mov	r0, sp
    fc54:	f7f4 fb2c 	bl	42b0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    fc58:	b007      	add	sp, #28
    fc5a:	bd30      	pop	{r4, r5, pc}
    fc5c:	4b08      	ldr	r3, [pc, #32]	; (fc80 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd8>)
    fc5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    fc62:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fc66:	fbb0 f0f1 	udiv	r0, r0, r1
    fc6a:	1a10      	subs	r0, r2, r0
    fc6c:	e7e0      	b.n	fc30 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x88>
    fc6e:	0000      	.short	0x0000
    fc70:	200015f0 	.word	0x200015f0
    fc74:	40001000 	.word	0x40001000
    fc78:	000105c8 	.word	0x000105c8
    fc7c:	000105c4 	.word	0x000105c4
    fc80:	000106c4 	.word	0x000106c4

0000fc84 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
    fc84:	4901      	ldr	r1, [pc, #4]	; (fc8c <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
    fc86:	71c8      	strb	r0, [r1, #7]
    fc88:	4770      	bx	lr
    fc8a:	0000      	.short	0x0000
    fc8c:	200015f0 	.word	0x200015f0

0000fc90 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    fc90:	4902      	ldr	r1, [pc, #8]	; (fc9c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    fc92:	2000      	movs	r0, #0
    fc94:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    fc98:	4770      	bx	lr
    fc9a:	0000      	.short	0x0000
    fc9c:	40008000 	.word	0x40008000

0000fca0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    fca0:	4903      	ldr	r1, [pc, #12]	; (fcb0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>)
    fca2:	6809      	ldr	r1, [r1, #0]
    fca4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    fca8:	4249      	negs	r1, r1
    fcaa:	7001      	strb	r1, [r0, #0]
    fcac:	2001      	movs	r0, #1
    fcae:	4770      	bx	lr
    fcb0:	40001548 	.word	0x40001548

0000fcb4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    fcb4:	4903      	ldr	r1, [pc, #12]	; (fcc4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    fcb6:	0e02      	lsrs	r2, r0, #24
    fcb8:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    fcbc:	0200      	lsls	r0, r0, #8
    fcbe:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    fcc2:	4770      	bx	lr
    fcc4:	40001000 	.word	0x40001000

0000fcc8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    fcc8:	6800      	ldr	r0, [r0, #0]
    fcca:	4903      	ldr	r1, [pc, #12]	; (fcd8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    fccc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fcd0:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    fcd4:	4770      	bx	lr
    fcd6:	0000      	.short	0x0000
    fcd8:	40001000 	.word	0x40001000

0000fcdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    fcdc:	b510      	push	{r4, lr}
    fcde:	2200      	movs	r2, #0
    fce0:	2901      	cmp	r1, #1
    fce2:	d010      	beq.n	fd06 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    fce4:	2902      	cmp	r1, #2
    fce6:	bf08      	it	eq
    fce8:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    fcec:	d00b      	beq.n	fd06 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    fcee:	2904      	cmp	r1, #4
    fcf0:	bf14      	ite	ne
    fcf2:	2908      	cmpne	r1, #8
    fcf4:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    fcf8:	d005      	beq.n	fd06 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    fcfa:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    fcfe:	f04f 003e 	mov.w	r0, #62	; 0x3e
    fd02:	f7f4 fcdb 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd06:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    fd0a:	4a0c      	ldr	r2, [pc, #48]	; (fd3c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x60>)
    fd0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    fd10:	6011      	str	r1, [r2, #0]
    fd12:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    fd16:	1d11      	adds	r1, r2, #4
    fd18:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    fd1c:	6008      	str	r0, [r1, #0]
    fd1e:	4808      	ldr	r0, [pc, #32]	; (fd40 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x64>)
    fd20:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    fd24:	b2c0      	uxtb	r0, r0
    fd26:	2803      	cmp	r0, #3
    fd28:	bf1c      	itt	ne
    fd2a:	280b      	cmpne	r0, #11
    fd2c:	bd10      	popne	{r4, pc}
    fd2e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    fd32:	f04f 003e 	mov.w	r0, #62	; 0x3e
    fd36:	f7f4 fcc1 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd3a:	0000      	.short	0x0000
    fd3c:	40001514 	.word	0x40001514
    fd40:	40001000 	.word	0x40001000

0000fd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    fd44:	4901      	ldr	r1, [pc, #4]	; (fd4c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    fd46:	7688      	strb	r0, [r1, #26]
    fd48:	4770      	bx	lr
    fd4a:	0000      	.short	0x0000
    fd4c:	200015f0 	.word	0x200015f0

0000fd50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    fd50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd54:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; 1014c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
    fd58:	2701      	movs	r7, #1
    fd5a:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
    fd5e:	48fc      	ldr	r0, [pc, #1008]	; (10150 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    fd60:	f8d0 b540 	ldr.w	fp, [r0, #1344]	; 0x540
    fd64:	f000 ff36 	bl	10bd4 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    fd68:	4cfa      	ldr	r4, [pc, #1000]	; (10154 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    fd6a:	f8df a3ec 	ldr.w	sl, [pc, #1004]	; 10158 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    fd6e:	4dfb      	ldr	r5, [pc, #1004]	; (1015c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    fd70:	e9c4 0b0f 	strd	r0, fp, [r4, #60]	; 0x3c
    fd74:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    fd78:	2600      	movs	r6, #0
    fd7a:	b1d8      	cbz	r0, fdb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x64>
    fd7c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    fd80:	f110 0900 	adds.w	r9, r0, #0
    fd84:	bf18      	it	ne
    fd86:	f04f 0901 	movne.w	r9, #1
    fd8a:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    fd8e:	2800      	cmp	r0, #0
    fd90:	bf18      	it	ne
    fd92:	2001      	movne	r0, #1
    fd94:	ea50 0109 	orrs.w	r1, r0, r9
    fd98:	d015      	beq.n	fdc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    fd9a:	2180      	movs	r1, #128	; 0x80
    fd9c:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    fda0:	0309      	lsls	r1, r1, #12
    fda2:	f8ca 1000 	str.w	r1, [sl]
    fda6:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
    fdaa:	f090 0f01 	teq	r0, #1
    fdae:	bf18      	it	ne
    fdb0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdb4:	8ba0      	ldrh	r0, [r4, #28]
    fdb6:	2896      	cmp	r0, #150	; 0x96
    fdb8:	d37e      	bcc.n	feb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    fdba:	7a60      	ldrb	r0, [r4, #9]
    fdbc:	2801      	cmp	r0, #1
    fdbe:	d07c      	beq.n	feba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16a>
    fdc0:	2802      	cmp	r0, #2
    fdc2:	d07b      	beq.n	febc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>
    fdc4:	e0ba      	b.n	ff3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    fdc6:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
    fdca:	49e5      	ldr	r1, [pc, #916]	; (10160 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    fdcc:	f8df b394 	ldr.w	fp, [pc, #916]	; 10164 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>
    fdd0:	b338      	cbz	r0, fe22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd2>
    fdd2:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
    fdd6:	616f      	str	r7, [r5, #20]
    fdd8:	20ff      	movs	r0, #255	; 0xff
    fdda:	9000      	str	r0, [sp, #0]
    fddc:	e002      	b.n	fde4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x94>
    fdde:	1e40      	subs	r0, r0, #1
    fde0:	9000      	str	r0, [sp, #0]
    fde2:	d019      	beq.n	fe18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
    fde4:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    fde8:	2800      	cmp	r0, #0
    fdea:	9800      	ldr	r0, [sp, #0]
    fdec:	d0f7      	beq.n	fdde <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    fdee:	b198      	cbz	r0, fe18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
    fdf0:	6808      	ldr	r0, [r1, #0]
    fdf2:	f000 0b7f 	and.w	fp, r0, #127	; 0x7f
    fdf6:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    fdfa:	4558      	cmp	r0, fp
    fdfc:	bf3c      	itt	cc
    fdfe:	2000      	movcc	r0, #0
    fe00:	f000 faba 	blcc	10378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    fe04:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
    fe08:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    fe0c:	2001      	movs	r0, #1
    fe0e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    fe12:	642f      	str	r7, [r5, #64]	; 0x40
    fe14:	63af      	str	r7, [r5, #56]	; 0x38
    fe16:	e007      	b.n	fe28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd8>
    fe18:	f640 3167 	movw	r1, #2919	; 0xb67
    fe1c:	203e      	movs	r0, #62	; 0x3e
    fe1e:	f7f4 fc4d 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe22:	f1b9 0f00 	cmp.w	r9, #0
    fe26:	d003      	beq.n	fe30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    fe28:	f1b9 0f00 	cmp.w	r9, #0
    fe2c:	d02a      	beq.n	fe84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    fe2e:	e063      	b.n	fef8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
    fe30:	6808      	ldr	r0, [r1, #0]
    fe32:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    fe36:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    fe3a:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    fe3e:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
    fe42:	b149      	cbz	r1, fe58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    fe44:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    fe48:	4281      	cmp	r1, r0
    fe4a:	d218      	bcs.n	fe7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    fe4c:	2000      	movs	r0, #0
    fe4e:	f000 fa93 	bl	10378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    fe52:	642f      	str	r7, [r5, #64]	; 0x40
    fe54:	63af      	str	r7, [r5, #56]	; 0x38
    fe56:	e012      	b.n	fe7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    fe58:	49c3      	ldr	r1, [pc, #780]	; (10168 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    fe5a:	680a      	ldr	r2, [r1, #0]
    fe5c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    fe60:	b291      	uxth	r1, r2
    fe62:	0c12      	lsrs	r2, r2, #16
    fe64:	4298      	cmp	r0, r3
    fe66:	d303      	bcc.n	fe70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x120>
    fe68:	290f      	cmp	r1, #15
    fe6a:	d906      	bls.n	fe7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    fe6c:	2a02      	cmp	r2, #2
    fe6e:	d204      	bcs.n	fe7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    fe70:	2001      	movs	r0, #1
    fe72:	f000 fa81 	bl	10378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    fe76:	642f      	str	r7, [r5, #64]	; 0x40
    fe78:	e001      	b.n	fe7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    fe7a:	642f      	str	r7, [r5, #64]	; 0x40
    fe7c:	63af      	str	r7, [r5, #56]	; 0x38
    fe7e:	f8db 0000 	ldr.w	r0, [fp]
    fe82:	9000      	str	r0, [sp, #0]
    fe84:	2080      	movs	r0, #128	; 0x80
    fe86:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    fe8a:	f8c8 7040 	str.w	r7, [r8, #64]	; 0x40
    fe8e:	f8d8 1540 	ldr.w	r1, [r8, #1344]	; 0x540
    fe92:	48b6      	ldr	r0, [pc, #728]	; (1016c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    fe94:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    fe98:	f643 2298 	movw	r2, #15000	; 0x3a98
    fe9c:	440a      	add	r2, r1
    fe9e:	49b4      	ldr	r1, [pc, #720]	; (10170 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    fea0:	4282      	cmp	r2, r0
    fea2:	d21c      	bcs.n	fede <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x18e>
    fea4:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
    fea8:	f242 7210 	movw	r2, #10000	; 0x2710
    feac:	4410      	add	r0, r2
    feae:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    feb2:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    feb6:	e002      	b.n	febe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16e>
    feb8:	e040      	b.n	ff3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    feba:	e025      	b.n	ff08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    febc:	e031      	b.n	ff22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d2>
    febe:	4aad      	ldr	r2, [pc, #692]	; (10174 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    fec0:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    fec4:	48ac      	ldr	r0, [pc, #688]	; (10178 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    fec6:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    feca:	48ac      	ldr	r0, [pc, #688]	; (1017c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    fecc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    fed0:	6001      	str	r1, [r0, #0]
    fed2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    fed4:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    fed8:	6320      	str	r0, [r4, #48]	; 0x30
    feda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fede:	2000      	movs	r0, #0
    fee0:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    fee4:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    fee8:	2080      	movs	r0, #128	; 0x80
    feea:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    feee:	0300      	lsls	r0, r0, #12
    fef0:	f8ca 0000 	str.w	r0, [sl]
    fef4:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    fef8:	2080      	movs	r0, #128	; 0x80
    fefa:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    fefe:	0300      	lsls	r0, r0, #12
    ff00:	f8ca 0000 	str.w	r0, [sl]
    ff04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff08:	f7f4 fa34 	bl	4374 <mpsl_fem_pa_configuration_clear>
    ff0c:	2800      	cmp	r0, #0
    ff0e:	bf18      	it	ne
    ff10:	f1b0 3fff 	cmpne.w	r0, #4294967295
    ff14:	d012      	beq.n	ff3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    ff16:	f640 0194 	movw	r1, #2196	; 0x894
    ff1a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ff1e:	f7f4 fbcd 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff22:	f7f4 fa15 	bl	4350 <mpsl_fem_lna_configuration_clear>
    ff26:	2800      	cmp	r0, #0
    ff28:	bf18      	it	ne
    ff2a:	f1b0 3fff 	cmpne.w	r0, #4294967295
    ff2e:	d005      	beq.n	ff3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    ff30:	f640 019a 	movw	r1, #2202	; 0x89a
    ff34:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ff38:	f7f4 fbc0 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff3c:	4886      	ldr	r0, [pc, #536]	; (10158 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    ff3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ff40:	6001      	str	r1, [r0, #0]
    ff42:	6326      	str	r6, [r4, #48]	; 0x30
    ff44:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    ff48:	f020 001d 	bic.w	r0, r0, #29
    ff4c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
    ff50:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    ff54:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    ff58:	7b20      	ldrb	r0, [r4, #12]
    ff5a:	f04f 0900 	mov.w	r9, #0
    ff5e:	2800      	cmp	r0, #0
    ff60:	bf1b      	ittet	ne
    ff62:	f8d8 0144 	ldrne.w	r0, [r8, #324]	; 0x144
    ff66:	2800      	cmpne	r0, #0
    ff68:	2100      	moveq	r1, #0
    ff6a:	2101      	movne	r1, #1
    ff6c:	7a60      	ldrb	r0, [r4, #9]
    ff6e:	2801      	cmp	r0, #1
    ff70:	d002      	beq.n	ff78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x228>
    ff72:	2802      	cmp	r0, #2
    ff74:	d00a      	beq.n	ff8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x23c>
    ff76:	e005      	b.n	ff84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
    ff78:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    ff7c:	2800      	cmp	r0, #0
    ff7e:	bf18      	it	ne
    ff80:	f04f 0908 	movne.w	r9, #8
    ff84:	f019 0f0b 	tst.w	r9, #11
    ff88:	d118      	bne.n	ffbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x26c>
    ff8a:	e011      	b.n	ffb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x260>
    ff8c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    ff90:	2800      	cmp	r0, #0
    ff92:	bf18      	it	ne
    ff94:	f04f 0902 	movne.w	r9, #2
    ff98:	4879      	ldr	r0, [pc, #484]	; (10180 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
    ff9a:	6800      	ldr	r0, [r0, #0]
    ff9c:	f010 0f01 	tst.w	r0, #1
    ffa0:	bf08      	it	eq
    ffa2:	f049 0904 	orreq.w	r9, r9, #4
    ffa6:	2900      	cmp	r1, #0
    ffa8:	bf18      	it	ne
    ffaa:	f049 0901 	orrne.w	r9, r9, #1
    ffae:	e7e9      	b.n	ff84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
    ffb0:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    ffb4:	2800      	cmp	r0, #0
    ffb6:	bf18      	it	ne
    ffb8:	f049 0910 	orrne.w	r9, r9, #16
    ffbc:	4871      	ldr	r0, [pc, #452]	; (10184 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
    ffbe:	7800      	ldrb	r0, [r0, #0]
    ffc0:	b1c0      	cbz	r0, fff4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a4>
    ffc2:	4871      	ldr	r0, [pc, #452]	; (10188 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    ffc4:	6800      	ldr	r0, [r0, #0]
    ffc6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    ffca:	bf1b      	ittet	ne
    ffcc:	f8d5 1114 	ldrne.w	r1, [r5, #276]	; 0x114
    ffd0:	2900      	cmpne	r1, #0
    ffd2:	2100      	moveq	r1, #0
    ffd4:	2101      	movne	r1, #1
    ffd6:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    ffda:	2800      	cmp	r0, #0
    ffdc:	bf1b      	ittet	ne
    ffde:	f8d5 0118 	ldrne.w	r0, [r5, #280]	; 0x118
    ffe2:	2800      	cmpne	r0, #0
    ffe4:	2000      	moveq	r0, #0
    ffe6:	2001      	movne	r0, #1
    ffe8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    ffec:	f8d5 0410 	ldr.w	r0, [r5, #1040]	; 0x410
    fff0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    fff4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    fff8:	2800      	cmp	r0, #0
    fffa:	bf18      	it	ne
    fffc:	2001      	movne	r0, #1
    fffe:	f88d 0000 	strb.w	r0, [sp]
   10002:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
   10006:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
   1000a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   1000e:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
   10012:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   10016:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
   1001a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
   1001e:	f8c5 616c 	str.w	r6, [r5, #364]	; 0x16c
   10022:	4668      	mov	r0, sp
   10024:	f7f4 f936 	bl	4294 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
   10028:	2800      	cmp	r0, #0
   1002a:	bf18      	it	ne
   1002c:	f049 0910 	orrne.w	r9, r9, #16
   10030:	f8c8 6144 	str.w	r6, [r8, #324]	; 0x144
   10034:	f019 0f10 	tst.w	r9, #16
   10038:	d006      	beq.n	10048 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2f8>
   1003a:	f019 0f08 	tst.w	r9, #8
   1003e:	bf02      	ittt	eq
   10040:	7a60      	ldrbeq	r0, [r4, #9]
   10042:	2801      	cmpeq	r0, #1
   10044:	f049 0920 	orreq.w	r9, r9, #32
   10048:	4850      	ldr	r0, [pc, #320]	; (1018c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
   1004a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1004e:	6260      	str	r0, [r4, #36]	; 0x24
   10050:	4846      	ldr	r0, [pc, #280]	; (1016c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
   10052:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   10056:	6220      	str	r0, [r4, #32]
   10058:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   1005c:	2802      	cmp	r0, #2
   1005e:	bf1c      	itt	ne
   10060:	7a60      	ldrbne	r0, [r4, #9]
   10062:	2802      	cmpne	r0, #2
   10064:	7e21      	ldrb	r1, [r4, #24]
   10066:	d00e      	beq.n	10086 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x336>
   10068:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   1006c:	7a62      	ldrb	r2, [r4, #9]
   1006e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
   10072:	7a20      	ldrb	r0, [r4, #8]
   10074:	f04f 0a00 	mov.w	sl, #0
   10078:	b188      	cbz	r0, 1009e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34e>
   1007a:	f019 0f11 	tst.w	r9, #17
   1007e:	d013      	beq.n	100a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
   10080:	f7fe ff12 	bl	eea8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   10084:	e03d      	b.n	10102 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
   10086:	2904      	cmp	r1, #4
   10088:	bf18      	it	ne
   1008a:	2908      	cmpne	r1, #8
   1008c:	d1ec      	bne.n	10068 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
   1008e:	4840      	ldr	r0, [pc, #256]	; (10190 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
   10090:	6800      	ldr	r0, [r0, #0]
   10092:	f010 0f06 	tst.w	r0, #6
   10096:	bf0c      	ite	eq
   10098:	2108      	moveq	r1, #8
   1009a:	2104      	movne	r1, #4
   1009c:	e7e4      	b.n	10068 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
   1009e:	71e6      	strb	r6, [r4, #7]
   100a0:	7226      	strb	r6, [r4, #8]
   100a2:	7266      	strb	r6, [r4, #9]
   100a4:	7326      	strb	r6, [r4, #12]
   100a6:	e02c      	b.n	10102 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
   100a8:	2801      	cmp	r0, #1
   100aa:	bf14      	ite	ne
   100ac:	f04f 0801 	movne.w	r8, #1
   100b0:	f04f 0800 	moveq.w	r8, #0
   100b4:	79e0      	ldrb	r0, [r4, #7]
   100b6:	2801      	cmp	r0, #1
   100b8:	bf18      	it	ne
   100ba:	2000      	movne	r0, #0
   100bc:	9000      	str	r0, [sp, #0]
   100be:	71e6      	strb	r6, [r4, #7]
   100c0:	7226      	strb	r6, [r4, #8]
   100c2:	7266      	strb	r6, [r4, #9]
   100c4:	8ba0      	ldrh	r0, [r4, #28]
   100c6:	2300      	movs	r3, #0
   100c8:	b3f2      	cbz	r2, 10148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
   100ca:	f1b8 0f00 	cmp.w	r8, #0
   100ce:	d06e      	beq.n	101ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45e>
   100d0:	f1b8 0f00 	cmp.w	r8, #0
   100d4:	d005      	beq.n	100e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   100d6:	2a01      	cmp	r2, #1
   100d8:	d076      	beq.n	101c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x478>
   100da:	f005 f9dd 	bl	15498 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   100de:	6a61      	ldr	r1, [r4, #36]	; 0x24
   100e0:	1843      	adds	r3, r0, r1
   100e2:	9800      	ldr	r0, [sp, #0]
   100e4:	4619      	mov	r1, r3
   100e6:	b140      	cbz	r0, 100fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
   100e8:	f10b 003b 	add.w	r0, fp, #59	; 0x3b
   100ec:	4288      	cmp	r0, r1
   100ee:	bf92      	itee	ls
   100f0:	71e7      	strbls	r7, [r4, #7]
   100f2:	612f      	strhi	r7, [r5, #16]
   100f4:	f04f 0a01 	movhi.w	sl, #1
   100f8:	d803      	bhi.n	10102 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
   100fa:	7aa2      	ldrb	r2, [r4, #10]
   100fc:	4640      	mov	r0, r8
   100fe:	f7ff fbd1 	bl	f8a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   10102:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   10106:	b1b0      	cbz	r0, 10136 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
   10108:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   1010c:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
   10110:	f040 0002 	orr.w	r0, r0, #2
   10114:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   10118:	480f      	ldr	r0, [pc, #60]	; (10158 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
   1011a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1011e:	6001      	str	r1, [r0, #0]
   10120:	6960      	ldr	r0, [r4, #20]
   10122:	491c      	ldr	r1, [pc, #112]	; (10194 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
   10124:	f020 0003 	bic.w	r0, r0, #3
   10128:	6160      	str	r0, [r4, #20]
   1012a:	6008      	str	r0, [r1, #0]
   1012c:	491b      	ldr	r1, [pc, #108]	; (1019c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
   1012e:	481a      	ldr	r0, [pc, #104]	; (10198 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
   10130:	6008      	str	r0, [r1, #0]
   10132:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
   10136:	f8df 8068 	ldr.w	r8, [pc, #104]	; 101a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>
   1013a:	f019 0f01 	tst.w	r9, #1
   1013e:	d048      	beq.n	101d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x482>
   10140:	f8d8 0000 	ldr.w	r0, [r8]
   10144:	4780      	blx	r0
   10146:	e07a      	b.n	1023e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
   10148:	e02c      	b.n	101a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x454>
   1014a:	e030      	b.n	101ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45e>
   1014c:	40008000 	.word	0x40008000
   10150:	4000800c 	.word	0x4000800c
   10154:	200015f0 	.word	0x200015f0
   10158:	4001f508 	.word	0x4001f508
   1015c:	40001000 	.word	0x40001000
   10160:	40001548 	.word	0x40001548
   10164:	4000111c 	.word	0x4000111c
   10168:	40001574 	.word	0x40001574
   1016c:	40008004 	.word	0x40008004
   10170:	40008140 	.word	0x40008140
   10174:	4001f098 	.word	0x4001f098
   10178:	40001014 	.word	0x40001014
   1017c:	4001f504 	.word	0x4001f504
   10180:	40001400 	.word	0x40001400
   10184:	20000490 	.word	0x20000490
   10188:	40001640 	.word	0x40001640
   1018c:	40008008 	.word	0x40008008
   10190:	40001414 	.word	0x40001414
   10194:	40001900 	.word	0x40001900
   10198:	00023280 	.word	0x00023280
   1019c:	40001910 	.word	0x40001910
   101a0:	200015e0 	.word	0x200015e0
   101a4:	f640 0147 	movw	r1, #2119	; 0x847
   101a8:	203e      	movs	r0, #62	; 0x3e
   101aa:	f7f4 fa87 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101ae:	2a01      	cmp	r2, #1
   101b0:	d005      	beq.n	101be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46e>
   101b2:	f005 f97f 	bl	154b4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   101b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   101b8:	1843      	adds	r3, r0, r1
   101ba:	e792      	b.n	100e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   101bc:	e004      	b.n	101c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x478>
   101be:	f000 fb13 	bl	107e8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   101c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   101c4:	1843      	adds	r3, r0, r1
   101c6:	e78c      	b.n	100e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   101c8:	f000 fb00 	bl	107cc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   101cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   101ce:	1843      	adds	r3, r0, r1
   101d0:	e787      	b.n	100e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   101d2:	f019 0f02 	tst.w	r9, #2
   101d6:	d029      	beq.n	1022c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4dc>
   101d8:	f019 0f04 	tst.w	r9, #4
   101dc:	d120      	bne.n	10220 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
   101de:	f000 fe47 	bl	10e70 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   101e2:	b9e8      	cbnz	r0, 10220 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
   101e4:	f000 fe34 	bl	10e50 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   101e8:	b9d0      	cbnz	r0, 10220 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
   101ea:	4840      	ldr	r0, [pc, #256]	; (102ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>)
   101ec:	6800      	ldr	r0, [r0, #0]
   101ee:	f3c0 5342 	ubfx	r3, r0, #21, #3
   101f2:	f3c0 6200 	ubfx	r2, r0, #24, #1
   101f6:	f000 010f 	and.w	r1, r0, #15
   101fa:	f3c0 1c03 	ubfx	ip, r0, #4, #4
   101fe:	f3c0 2003 	ubfx	r0, r0, #8, #4
   10202:	b16a      	cbz	r2, 10220 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
   10204:	2900      	cmp	r1, #0
   10206:	bf1c      	itt	ne
   10208:	f1bc 0f00 	cmpne.w	ip, #0
   1020c:	2800      	cmpne	r0, #0
   1020e:	d107      	bne.n	10220 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
   10210:	4837      	ldr	r0, [pc, #220]	; (102f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a0>)
   10212:	6800      	ldr	r0, [r0, #0]
   10214:	2800      	cmp	r0, #0
   10216:	bf18      	it	ne
   10218:	2b03      	cmpne	r3, #3
   1021a:	bf38      	it	cc
   1021c:	f049 0904 	orrcc.w	r9, r9, #4
   10220:	ea27 0099 	bic.w	r0, r7, r9, lsr #2
   10224:	4651      	mov	r1, sl
   10226:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1022a:	e007      	b.n	1023c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ec>
   1022c:	f019 0f28 	tst.w	r9, #40	; 0x28
   10230:	d005      	beq.n	1023e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
   10232:	f8d8 2008 	ldr.w	r2, [r8, #8]
   10236:	ea27 1159 	bic.w	r1, r7, r9, lsr #5
   1023a:	4650      	mov	r0, sl
   1023c:	4790      	blx	r2
   1023e:	f019 0f10 	tst.w	r9, #16
   10242:	bf1c      	itt	ne
   10244:	f8d8 000c 	ldrne.w	r0, [r8, #12]
   10248:	4780      	blxne	r0
   1024a:	7a60      	ldrb	r0, [r4, #9]
   1024c:	2802      	cmp	r0, #2
   1024e:	d118      	bne.n	10282 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x532>
   10250:	7b20      	ldrb	r0, [r4, #12]
   10252:	b1b0      	cbz	r0, 10282 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x532>
   10254:	2802      	cmp	r0, #2
   10256:	d006      	beq.n	10266 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x516>
   10258:	2801      	cmp	r0, #1
   1025a:	d035      	beq.n	102c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x578>
   1025c:	f640 4134 	movw	r1, #3124	; 0xc34
   10260:	203e      	movs	r0, #62	; 0x3e
   10262:	f7f4 fa2b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10266:	6921      	ldr	r1, [r4, #16]
   10268:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1026a:	4408      	add	r0, r1
   1026c:	4921      	ldr	r1, [pc, #132]	; (102f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a4>)
   1026e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   10272:	6b20      	ldr	r0, [r4, #48]	; 0x30
   10274:	4920      	ldr	r1, [pc, #128]	; (102f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>)
   10276:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   1027a:	6320      	str	r0, [r4, #48]	; 0x30
   1027c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   10280:	6008      	str	r0, [r1, #0]
   10282:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   10286:	2800      	cmp	r0, #0
   10288:	bf18      	it	ne
   1028a:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1028e:	f019 0f10 	tst.w	r9, #16
   10292:	bf14      	ite	ne
   10294:	9600      	strne	r6, [sp, #0]
   10296:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1029a:	9800      	ldr	r0, [sp, #0]
   1029c:	1c40      	adds	r0, r0, #1
   1029e:	9000      	str	r0, [sp, #0]
   102a0:	f1b0 3fff 	cmp.w	r0, #4294967295
   102a4:	d01d      	beq.n	102e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x592>
   102a6:	f8d5 0550 	ldr.w	r0, [r5, #1360]	; 0x550
   102aa:	b2c0      	uxtb	r0, r0
   102ac:	2804      	cmp	r0, #4
   102ae:	bf18      	it	ne
   102b0:	280c      	cmpne	r0, #12
   102b2:	d0f2      	beq.n	1029a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x54a>
   102b4:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   102b8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   102bc:	f04f 0002 	mov.w	r0, #2
   102c0:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
   102c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   102ca:	6920      	ldr	r0, [r4, #16]
   102cc:	4288      	cmp	r0, r1
   102ce:	bf84      	itt	hi
   102d0:	4908      	ldrhi	r1, [pc, #32]	; (102f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a4>)
   102d2:	f8c1 0540 	strhi.w	r0, [r1, #1344]	; 0x540
   102d6:	d8cc      	bhi.n	10272 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x522>
   102d8:	f640 4135 	movw	r1, #3125	; 0xc35
   102dc:	203e      	movs	r0, #62	; 0x3e
   102de:	f7f4 f9ed 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102e2:	f640 415d 	movw	r1, #3165	; 0xc5d
   102e6:	203e      	movs	r0, #62	; 0x3e
   102e8:	f7f4 f9e8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102ec:	40001450 	.word	0x40001450
   102f0:	40001454 	.word	0x40001454
   102f4:	40008004 	.word	0x40008004
   102f8:	4001f504 	.word	0x4001f504

000102fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
   102fc:	b510      	push	{r4, lr}
   102fe:	4b19      	ldr	r3, [pc, #100]	; (10364 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x68>)
   10300:	f8b1 c004 	ldrh.w	ip, [r1, #4]
   10304:	eb03 0480 	add.w	r4, r3, r0, lsl #2
   10308:	f8c4 c620 	str.w	ip, [r4, #1568]	; 0x620
   1030c:	f891 c000 	ldrb.w	ip, [r1]
   10310:	f8d1 1001 	ldr.w	r1, [r1, #1]
   10314:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   10318:	f8c4 1600 	str.w	r1, [r4, #1536]	; 0x600
   1031c:	4912      	ldr	r1, [pc, #72]	; (10368 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x6c>)
   1031e:	f8d1 c000 	ldr.w	ip, [r1]
   10322:	2101      	movs	r1, #1
   10324:	fa01 f000 	lsl.w	r0, r1, r0
   10328:	ea4c 0100 	orr.w	r1, ip, r0
   1032c:	b2c9      	uxtb	r1, r1
   1032e:	b132      	cbz	r2, 1033e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42>
   10330:	2a01      	cmp	r2, #1
   10332:	d00b      	beq.n	1034c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
   10334:	f240 51ad 	movw	r1, #1453	; 0x5ad
   10338:	203e      	movs	r0, #62	; 0x3e
   1033a:	f7f4 f9bf 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1033e:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
   10342:	f3c2 2207 	ubfx	r2, r2, #8, #8
   10346:	ea22 0000 	bic.w	r0, r2, r0
   1034a:	e005      	b.n	10358 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>
   1034c:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
   10350:	b2c0      	uxtb	r0, r0
   10352:	f3c2 2207 	ubfx	r2, r2, #8, #8
   10356:	4310      	orrs	r0, r2
   10358:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   1035c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   10360:	bd10      	pop	{r4, pc}
   10362:	0000      	.short	0x0000
   10364:	40001000 	.word	0x40001000
   10368:	40001640 	.word	0x40001640

0001036c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
   1036c:	4901      	ldr	r1, [pc, #4]	; (10374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
   1036e:	2001      	movs	r0, #1
   10370:	7008      	strb	r0, [r1, #0]
   10372:	4770      	bx	lr
   10374:	20000490 	.word	0x20000490
   10378:	4a0e      	ldr	r2, [pc, #56]	; (103b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>)
   1037a:	490f      	ldr	r1, [pc, #60]	; (103b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c>)
   1037c:	6813      	ldr	r3, [r2, #0]
   1037e:	b170      	cbz	r0, 1039e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32>
   10380:	f023 0382 	bic.w	r3, r3, #130	; 0x82
   10384:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   10388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1038c:	6013      	str	r3, [r2, #0]
   1038e:	680a      	ldr	r2, [r1, #0]
   10390:	f022 0210 	bic.w	r2, r2, #16
   10394:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   10398:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1039c:	e005      	b.n	103aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e>
   1039e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   103a2:	6013      	str	r3, [r2, #0]
   103a4:	680a      	ldr	r2, [r1, #0]
   103a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   103aa:	600a      	str	r2, [r1, #0]
   103ac:	4903      	ldr	r1, [pc, #12]	; (103bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x50>)
   103ae:	f881 0036 	strb.w	r0, [r1, #54]	; 0x36
   103b2:	4770      	bx	lr
   103b4:	4000173c 	.word	0x4000173c
   103b8:	4000177c 	.word	0x4000177c
   103bc:	200015f0 	.word	0x200015f0
   103c0:	4909      	ldr	r1, [pc, #36]	; (103e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
   103c2:	7a49      	ldrb	r1, [r1, #9]
   103c4:	2901      	cmp	r1, #1
   103c6:	d00a      	beq.n	103de <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x72>
   103c8:	2902      	cmp	r1, #2
   103ca:	bf0c      	ite	eq
   103cc:	f010 0f02 	tsteq.w	r0, #2
   103d0:	4770      	bxne	lr
   103d2:	bf00      	nop
   103d4:	4905      	ldr	r1, [pc, #20]	; (103ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
   103d6:	f04f 0001 	mov.w	r0, #1
   103da:	6108      	str	r0, [r1, #16]
   103dc:	4770      	bx	lr
   103de:	f010 0f04 	tst.w	r0, #4
   103e2:	d0f7      	beq.n	103d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
   103e4:	4770      	bx	lr
   103e6:	0000      	.short	0x0000
   103e8:	200015f0 	.word	0x200015f0
   103ec:	40001000 	.word	0x40001000
   103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103f2:	4c3b      	ldr	r4, [pc, #236]	; (104e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x174>)
   103f4:	4605      	mov	r5, r0
   103f6:	2d01      	cmp	r5, #1
   103f8:	7620      	strb	r0, [r4, #24]
   103fa:	483a      	ldr	r0, [pc, #232]	; (104e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x178>)
   103fc:	bf08      	it	eq
   103fe:	2103      	moveq	r1, #3
   10400:	d010      	beq.n	10424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
   10402:	2d02      	cmp	r5, #2
   10404:	bf08      	it	eq
   10406:	2104      	moveq	r1, #4
   10408:	d00c      	beq.n	10424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
   1040a:	2d04      	cmp	r5, #4
   1040c:	bf08      	it	eq
   1040e:	2106      	moveq	r1, #6
   10410:	d008      	beq.n	10424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
   10412:	2d08      	cmp	r5, #8
   10414:	bf08      	it	eq
   10416:	2105      	moveq	r1, #5
   10418:	d004      	beq.n	10424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
   1041a:	f640 5155 	movw	r1, #3413	; 0xd55
   1041e:	203e      	movs	r0, #62	; 0x3e
   10420:	f7f4 f94c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10424:	6001      	str	r1, [r0, #0]
   10426:	7ea1      	ldrb	r1, [r4, #26]
   10428:	482f      	ldr	r0, [pc, #188]	; (104e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>)
   1042a:	5c40      	ldrb	r0, [r0, r1]
   1042c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   10430:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   10434:	bf3a      	itte	cc
   10436:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
   1043a:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
   1043e:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
   10442:	4e2a      	ldr	r6, [pc, #168]	; (104ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>)
   10444:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
   10448:	4a29      	ldr	r2, [pc, #164]	; (104f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>)
   1044a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   1044e:	6010      	str	r0, [r2, #0]
   10450:	7a20      	ldrb	r0, [r4, #8]
   10452:	2801      	cmp	r0, #1
   10454:	d113      	bne.n	1047e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x112>
   10456:	7aa0      	ldrb	r0, [r4, #10]
   10458:	f994 2019 	ldrsb.w	r2, [r4, #25]
   1045c:	466b      	mov	r3, sp
   1045e:	f000 f9ed 	bl	1083c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   10462:	f99d 0000 	ldrsb.w	r0, [sp]
   10466:	f000 f9ab 	bl	107c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   1046a:	f10d 0001 	add.w	r0, sp, #1
   1046e:	f7f3 ff8d 	bl	438c <mpsl_fem_pa_gain_set>
   10472:	b120      	cbz	r0, 1047e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x112>
   10474:	f240 51ee 	movw	r1, #1518	; 0x5ee
   10478:	203e      	movs	r0, #62	; 0x3e
   1047a:	f7f4 f91f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1047e:	20ff      	movs	r0, #255	; 0xff
   10480:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   10484:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   10488:	f440 7088 	orr.w	r0, r0, #272	; 0x110
   1048c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   10490:	f000 fd08 	bl	10ea4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10494:	b180      	cbz	r0, 104b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14c>
   10496:	f015 0f0c 	tst.w	r5, #12
   1049a:	d00a      	beq.n	104b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x146>
   1049c:	2001      	movs	r0, #1
   1049e:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
   104a2:	f7ff ff69 	bl	10378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   104a6:	2001      	movs	r0, #1
   104a8:	63f0      	str	r0, [r6, #60]	; 0x3c
   104aa:	6430      	str	r0, [r6, #64]	; 0x40
   104ac:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
   104b0:	e002      	b.n	104b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14c>
   104b2:	2000      	movs	r0, #0
   104b4:	f7ff ff60 	bl	10378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   104b8:	4628      	mov	r0, r5
   104ba:	f000 f927 	bl	1070c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
   104be:	f000 fcd7 	bl	10e70 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   104c2:	2800      	cmp	r0, #0
   104c4:	bf18      	it	ne
   104c6:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   104c8:	f000 fcc2 	bl	10e50 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   104cc:	2800      	cmp	r0, #0
   104ce:	bf18      	it	ne
   104d0:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   104d2:	4808      	ldr	r0, [pc, #32]	; (104f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>)
   104d4:	6801      	ldr	r1, [r0, #0]
   104d6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
   104da:	6001      	str	r1, [r0, #0]
   104dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   104de:	0000      	.short	0x0000
   104e0:	200015f0 	.word	0x200015f0
   104e4:	40001510 	.word	0x40001510
   104e8:	000105ec 	.word	0x000105ec
   104ec:	40001000 	.word	0x40001000
   104f0:	40001554 	.word	0x40001554
   104f4:	40001568 	.word	0x40001568
   104f8:	b538      	push	{r3, r4, r5, lr}
   104fa:	4a2c      	ldr	r2, [pc, #176]	; (105ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x240>)
   104fc:	4604      	mov	r4, r0
   104fe:	2c01      	cmp	r4, #1
   10500:	7610      	strb	r0, [r2, #24]
   10502:	482b      	ldr	r0, [pc, #172]	; (105b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>)
   10504:	bf08      	it	eq
   10506:	2103      	moveq	r1, #3
   10508:	d010      	beq.n	1052c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
   1050a:	2c02      	cmp	r4, #2
   1050c:	bf08      	it	eq
   1050e:	2104      	moveq	r1, #4
   10510:	d00c      	beq.n	1052c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
   10512:	2c04      	cmp	r4, #4
   10514:	bf08      	it	eq
   10516:	2106      	moveq	r1, #6
   10518:	d008      	beq.n	1052c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
   1051a:	2c08      	cmp	r4, #8
   1051c:	bf08      	it	eq
   1051e:	2105      	moveq	r1, #5
   10520:	d004      	beq.n	1052c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
   10522:	f640 5155 	movw	r1, #3413	; 0xd55
   10526:	203e      	movs	r0, #62	; 0x3e
   10528:	f7f4 f8c8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1052c:	6001      	str	r1, [r0, #0]
   1052e:	7e91      	ldrb	r1, [r2, #26]
   10530:	4820      	ldr	r0, [pc, #128]	; (105b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>)
   10532:	5c40      	ldrb	r0, [r0, r1]
   10534:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   10538:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   1053c:	bf3a      	itte	cc
   1053e:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
   10542:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
   10546:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
   1054a:	4b1b      	ldr	r3, [pc, #108]	; (105b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24c>)
   1054c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   10550:	4b1a      	ldr	r3, [pc, #104]	; (105bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x250>)
   10552:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   10556:	6018      	str	r0, [r3, #0]
   10558:	4620      	mov	r0, r4
   1055a:	f992 2019 	ldrsb.w	r2, [r2, #25]
   1055e:	466b      	mov	r3, sp
   10560:	f000 f96c 	bl	1083c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   10564:	f99d 0000 	ldrsb.w	r0, [sp]
   10568:	f000 f92a 	bl	107c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   1056c:	f10d 0001 	add.w	r0, sp, #1
   10570:	f7f3 ff0c 	bl	438c <mpsl_fem_pa_gain_set>
   10574:	b120      	cbz	r0, 10580 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
   10576:	f240 51ee 	movw	r1, #1518	; 0x5ee
   1057a:	203e      	movs	r0, #62	; 0x3e
   1057c:	f7f4 f89e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10580:	f000 fc76 	bl	10e70 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   10584:	2800      	cmp	r0, #0
   10586:	bf08      	it	eq
   10588:	bd38      	popeq	{r3, r4, r5, pc}
   1058a:	4a0d      	ldr	r2, [pc, #52]	; (105c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x254>)
   1058c:	6811      	ldr	r1, [r2, #0]
   1058e:	0650      	lsls	r0, r2, #25
   10590:	2c02      	cmp	r4, #2
   10592:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
   10596:	bf0c      	ite	eq
   10598:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
   1059c:	f3c0 2006 	ubfxne	r0, r0, #8, #7
   105a0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
   105a4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   105a8:	6010      	str	r0, [r2, #0]
   105aa:	bd38      	pop	{r3, r4, r5, pc}
   105ac:	200015f0 	.word	0x200015f0
   105b0:	40001510 	.word	0x40001510
   105b4:	000105ec 	.word	0x000105ec
   105b8:	40001000 	.word	0x40001000
   105bc:	40001554 	.word	0x40001554
   105c0:	40001588 	.word	0x40001588
   105c4:	00000004 	.word	0x00000004
   105c8:	05dc0000 	.word	0x05dc0000
   105cc:	000003e8 	.word	0x000003e8
	...
   105d8:	000017d4 	.word	0x000017d4
   105dc:	a1e0a62c 	.word	0xa1e0a62c
   105e0:	a8200000 	.word	0xa8200000
   105e4:	00000000 	.word	0x00000000
   105e8:	a8200000 	.word	0xa8200000
   105ec:	0a080604 	.word	0x0a080604
   105f0:	12100e0c 	.word	0x12100e0c
   105f4:	1c181614 	.word	0x1c181614
   105f8:	2422201e 	.word	0x2422201e
   105fc:	2c2a2826 	.word	0x2c2a2826
   10600:	3432302e 	.word	0x3432302e
   10604:	3c3a3836 	.word	0x3c3a3836
   10608:	4442403e 	.word	0x4442403e
   1060c:	4c4a4846 	.word	0x4c4a4846
   10610:	501a024e 	.word	0x501a024e
   10614:	00000001 	.word	0x00000001
   10618:	40001110 	.word	0x40001110
	...
   10630:	00001e14 	.word	0x00001e14
   10634:	00001130 	.word	0x00001130
   10638:	00000000 	.word	0x00000000
   1063c:	0000ea60 	.word	0x0000ea60
	...
   1064c:	0000ea60 	.word	0x0000ea60
   10650:	00000002 	.word	0x00000002
	...
   10668:	40008000 	.word	0x40008000
	...
   1067c:	40008000 	.word	0x40008000
	...
   1068c:	00000001 	.word	0x00000001
	...
   106a4:	00000028 	.word	0x00000028
   106a8:	00000018 	.word	0x00000018
   106ac:	00000000 	.word	0x00000000
   106b0:	00000150 	.word	0x00000150
	...
   106c0:	00000150 	.word	0x00000150
   106c4:	00000000 	.word	0x00000000
   106c8:	00001e14 	.word	0x00001e14
   106cc:	00001130 	.word	0x00001130
   106d0:	00000000 	.word	0x00000000
   106d4:	00005fb4 	.word	0x00005fb4
	...
   106e4:	0000733c 	.word	0x0000733c
   106e8:	00000000 	.word	0x00000000
   106ec:	00001770 	.word	0x00001770
   106f0:	00000fa0 	.word	0x00000fa0
   106f4:	00000000 	.word	0x00000000
   106f8:	0000283c 	.word	0x0000283c
	...
   10708:	0000283c 	.word	0x0000283c

0001070c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
   1070c:	b510      	push	{r4, lr}
   1070e:	4604      	mov	r4, r0
   10710:	f000 fbc8 	bl	10ea4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10714:	2800      	cmp	r0, #0
   10716:	bf08      	it	eq
   10718:	bd10      	popeq	{r4, pc}
   1071a:	4908      	ldr	r1, [pc, #32]	; (1073c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
   1071c:	2c08      	cmp	r4, #8
   1071e:	bf18      	it	ne
   10720:	2c04      	cmpne	r4, #4
   10722:	6808      	ldr	r0, [r1, #0]
   10724:	bf03      	ittte	eq
   10726:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
   1072a:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
   1072e:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
   10732:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
   10736:	6008      	str	r0, [r1, #0]
   10738:	bd10      	pop	{r4, pc}
   1073a:	0000      	.short	0x0000
   1073c:	40001740 	.word	0x40001740

00010740 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   10740:	b570      	push	{r4, r5, r6, lr}
   10742:	4605      	mov	r5, r0
   10744:	4614      	mov	r4, r2
   10746:	4608      	mov	r0, r1
   10748:	f7ff f8a6 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1074c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   10750:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   10754:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
   10758:	4807      	ldr	r0, [pc, #28]	; (10778 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
   1075a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1075e:	4408      	add	r0, r1
   10760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10764:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   10768:	fbb0 f5f1 	udiv	r5, r0, r1
   1076c:	4620      	mov	r0, r4
   1076e:	f7ff f845 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10772:	4428      	add	r0, r5
   10774:	1d40      	adds	r0, r0, #5
   10776:	bd70      	pop	{r4, r5, r6, pc}
   10778:	00010818 	.word	0x00010818

0001077c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   1077c:	b570      	push	{r4, r5, r6, lr}
   1077e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 107bc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x40>
   10782:	461c      	mov	r4, r3
   10784:	4b0c      	ldr	r3, [pc, #48]	; (107b8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
   10786:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
   1078a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
   1078e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10792:	ebcc 10c0 	rsb	r0, ip, r0, lsl #7
   10796:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   1079a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
   1079e:	4418      	add	r0, r3
   107a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   107a4:	fbb0 f5f1 	udiv	r5, r0, r1
   107a8:	4610      	mov	r0, r2
   107aa:	f7ff f827 	bl	f7fc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   107ae:	4428      	add	r0, r5
   107b0:	4420      	add	r0, r4
   107b2:	1d40      	adds	r0, r0, #5
   107b4:	bd70      	pop	{r4, r5, r6, pc}
   107b6:	0000      	.short	0x0000
   107b8:	00010818 	.word	0x00010818
   107bc:	00010804 	.word	0x00010804

000107c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
   107c0:	4901      	ldr	r1, [pc, #4]	; (107c8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
   107c2:	b2c0      	uxtb	r0, r0
   107c4:	6008      	str	r0, [r1, #0]
   107c6:	4770      	bx	lr
   107c8:	4000150c 	.word	0x4000150c

000107cc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   107cc:	4a05      	ldr	r2, [pc, #20]	; (107e4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
   107ce:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   107d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107d6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   107da:	fbb1 f1f2 	udiv	r1, r1, r2
   107de:	4408      	add	r0, r1
   107e0:	1e80      	subs	r0, r0, #2
   107e2:	4770      	bx	lr
   107e4:	00010804 	.word	0x00010804

000107e8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   107e8:	4a05      	ldr	r2, [pc, #20]	; (10800 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
   107ea:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   107ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107f2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   107f6:	fbb1 f1f2 	udiv	r1, r1, r2
   107fa:	4408      	add	r0, r1
   107fc:	4770      	bx	lr
   107fe:	0000      	.short	0x0000
   10800:	00010804 	.word	0x00010804
   10804:	05dc0000 	.word	0x05dc0000
   10808:	000003e8 	.word	0x000003e8
	...
   10814:	000017d4 	.word	0x000017d4
   10818:	00000000 	.word	0x00000000
   1081c:	00001e14 	.word	0x00001e14
   10820:	00001130 	.word	0x00001130
   10824:	00000000 	.word	0x00000000
   10828:	0000ea60 	.word	0x0000ea60
	...
   10838:	0000ea60 	.word	0x0000ea60

0001083c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
   1083c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10840:	461e      	mov	r6, r3
   10842:	4690      	mov	r8, r2
   10844:	460f      	mov	r7, r1
   10846:	4605      	mov	r5, r0
   10848:	f7ef ffb6 	bl	7b8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
   1084c:	4c25      	ldr	r4, [pc, #148]	; (108e4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xa8>)
   1084e:	4681      	mov	r9, r0
   10850:	7820      	ldrb	r0, [r4, #0]
   10852:	42a8      	cmp	r0, r5
   10854:	bf04      	itt	eq
   10856:	7860      	ldrbeq	r0, [r4, #1]
   10858:	42b8      	cmpeq	r0, r7
   1085a:	d10b      	bne.n	10874 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
   1085c:	f994 0002 	ldrsb.w	r0, [r4, #2]
   10860:	4540      	cmp	r0, r8
   10862:	bf04      	itt	eq
   10864:	78e0      	ldrbeq	r0, [r4, #3]
   10866:	4548      	cmpeq	r0, r9
   10868:	d104      	bne.n	10874 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
   1086a:	88a0      	ldrh	r0, [r4, #4]
   1086c:	8030      	strh	r0, [r6, #0]
   1086e:	79a0      	ldrb	r0, [r4, #6]
   10870:	70b0      	strb	r0, [r6, #2]
   10872:	e032      	b.n	108da <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x9e>
   10874:	4642      	mov	r2, r8
   10876:	2d01      	cmp	r5, #1
   10878:	bf08      	it	eq
   1087a:	2000      	moveq	r0, #0
   1087c:	d010      	beq.n	108a0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   1087e:	2d02      	cmp	r5, #2
   10880:	bf08      	it	eq
   10882:	2001      	moveq	r0, #1
   10884:	d00c      	beq.n	108a0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   10886:	2d04      	cmp	r5, #4
   10888:	bf08      	it	eq
   1088a:	2003      	moveq	r0, #3
   1088c:	d008      	beq.n	108a0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   1088e:	2d08      	cmp	r5, #8
   10890:	bf08      	it	eq
   10892:	2002      	moveq	r0, #2
   10894:	d004      	beq.n	108a0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   10896:	f240 4133 	movw	r1, #1075	; 0x433
   1089a:	2006      	movs	r0, #6
   1089c:	f7f3 ff0e 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108a0:	466b      	mov	r3, sp
   108a2:	4639      	mov	r1, r7
   108a4:	f7ef ffce 	bl	844 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
   108a8:	b118      	cbz	r0, 108b2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
   108aa:	213d      	movs	r1, #61	; 0x3d
   108ac:	2075      	movs	r0, #117	; 0x75
   108ae:	f7f3 ff05 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108b2:	4638      	mov	r0, r7
   108b4:	f7fe faf0 	bl	ee98 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
   108b8:	4602      	mov	r2, r0
   108ba:	4631      	mov	r1, r6
   108bc:	f99d 0000 	ldrsb.w	r0, [sp]
   108c0:	f7f3 fd70 	bl	43a4 <mpsl_fem_tx_power_split>
   108c4:	71e0      	strb	r0, [r4, #7]
   108c6:	8830      	ldrh	r0, [r6, #0]
   108c8:	80a0      	strh	r0, [r4, #4]
   108ca:	78b0      	ldrb	r0, [r6, #2]
   108cc:	71a0      	strb	r0, [r4, #6]
   108ce:	7025      	strb	r5, [r4, #0]
   108d0:	7067      	strb	r7, [r4, #1]
   108d2:	f884 8002 	strb.w	r8, [r4, #2]
   108d6:	f884 9003 	strb.w	r9, [r4, #3]
   108da:	f994 0007 	ldrsb.w	r0, [r4, #7]
   108de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   108e2:	0000      	.short	0x0000
   108e4:	200004ea 	.word	0x200004ea

000108e8 <__udivmoddi4>:
   108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108ec:	4607      	mov	r7, r0
   108ee:	468c      	mov	ip, r1
   108f0:	4608      	mov	r0, r1
   108f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   108f4:	4615      	mov	r5, r2
   108f6:	463c      	mov	r4, r7
   108f8:	4619      	mov	r1, r3
   108fa:	2b00      	cmp	r3, #0
   108fc:	f040 80c6 	bne.w	10a8c <__udivmoddi4+0x1a4>
   10900:	4282      	cmp	r2, r0
   10902:	fab2 f782 	clz	r7, r2
   10906:	d946      	bls.n	10996 <__udivmoddi4+0xae>
   10908:	b14f      	cbz	r7, 1091e <__udivmoddi4+0x36>
   1090a:	f1c7 0e20 	rsb	lr, r7, #32
   1090e:	fa24 fe0e 	lsr.w	lr, r4, lr
   10912:	fa00 f307 	lsl.w	r3, r0, r7
   10916:	40bd      	lsls	r5, r7
   10918:	ea4e 0c03 	orr.w	ip, lr, r3
   1091c:	40bc      	lsls	r4, r7
   1091e:	ea4f 4815 	mov.w	r8, r5, lsr #16
   10922:	fa1f fe85 	uxth.w	lr, r5
   10926:	fbbc f9f8 	udiv	r9, ip, r8
   1092a:	0c22      	lsrs	r2, r4, #16
   1092c:	fb08 c319 	mls	r3, r8, r9, ip
   10930:	fb09 fa0e 	mul.w	sl, r9, lr
   10934:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   10938:	459a      	cmp	sl, r3
   1093a:	d928      	bls.n	1098e <__udivmoddi4+0xa6>
   1093c:	18eb      	adds	r3, r5, r3
   1093e:	f109 30ff 	add.w	r0, r9, #4294967295
   10942:	d204      	bcs.n	1094e <__udivmoddi4+0x66>
   10944:	459a      	cmp	sl, r3
   10946:	d902      	bls.n	1094e <__udivmoddi4+0x66>
   10948:	f1a9 0002 	sub.w	r0, r9, #2
   1094c:	442b      	add	r3, r5
   1094e:	eba3 030a 	sub.w	r3, r3, sl
   10952:	b2a4      	uxth	r4, r4
   10954:	fbb3 f2f8 	udiv	r2, r3, r8
   10958:	fb08 3312 	mls	r3, r8, r2, r3
   1095c:	fb02 fe0e 	mul.w	lr, r2, lr
   10960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10964:	45a6      	cmp	lr, r4
   10966:	d914      	bls.n	10992 <__udivmoddi4+0xaa>
   10968:	192c      	adds	r4, r5, r4
   1096a:	f102 33ff 	add.w	r3, r2, #4294967295
   1096e:	d203      	bcs.n	10978 <__udivmoddi4+0x90>
   10970:	45a6      	cmp	lr, r4
   10972:	d901      	bls.n	10978 <__udivmoddi4+0x90>
   10974:	1e93      	subs	r3, r2, #2
   10976:	442c      	add	r4, r5
   10978:	eba4 040e 	sub.w	r4, r4, lr
   1097c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10980:	b11e      	cbz	r6, 1098a <__udivmoddi4+0xa2>
   10982:	40fc      	lsrs	r4, r7
   10984:	2300      	movs	r3, #0
   10986:	6034      	str	r4, [r6, #0]
   10988:	6073      	str	r3, [r6, #4]
   1098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1098e:	4648      	mov	r0, r9
   10990:	e7dd      	b.n	1094e <__udivmoddi4+0x66>
   10992:	4613      	mov	r3, r2
   10994:	e7f0      	b.n	10978 <__udivmoddi4+0x90>
   10996:	b902      	cbnz	r2, 1099a <__udivmoddi4+0xb2>
   10998:	deff      	udf	#255	; 0xff
   1099a:	bb87      	cbnz	r7, 109fe <__udivmoddi4+0x116>
   1099c:	1a83      	subs	r3, r0, r2
   1099e:	2101      	movs	r1, #1
   109a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   109a4:	b2aa      	uxth	r2, r5
   109a6:	fbb3 fcfe 	udiv	ip, r3, lr
   109aa:	0c20      	lsrs	r0, r4, #16
   109ac:	fb0e 331c 	mls	r3, lr, ip, r3
   109b0:	fb0c f802 	mul.w	r8, ip, r2
   109b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   109b8:	4598      	cmp	r8, r3
   109ba:	d963      	bls.n	10a84 <__udivmoddi4+0x19c>
   109bc:	18eb      	adds	r3, r5, r3
   109be:	f10c 30ff 	add.w	r0, ip, #4294967295
   109c2:	d204      	bcs.n	109ce <__udivmoddi4+0xe6>
   109c4:	4598      	cmp	r8, r3
   109c6:	d902      	bls.n	109ce <__udivmoddi4+0xe6>
   109c8:	f1ac 0002 	sub.w	r0, ip, #2
   109cc:	442b      	add	r3, r5
   109ce:	eba3 0308 	sub.w	r3, r3, r8
   109d2:	b2a4      	uxth	r4, r4
   109d4:	fbb3 fcfe 	udiv	ip, r3, lr
   109d8:	fb0e 331c 	mls	r3, lr, ip, r3
   109dc:	fb0c f202 	mul.w	r2, ip, r2
   109e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   109e4:	42a2      	cmp	r2, r4
   109e6:	d94f      	bls.n	10a88 <__udivmoddi4+0x1a0>
   109e8:	192c      	adds	r4, r5, r4
   109ea:	f10c 33ff 	add.w	r3, ip, #4294967295
   109ee:	d204      	bcs.n	109fa <__udivmoddi4+0x112>
   109f0:	42a2      	cmp	r2, r4
   109f2:	d902      	bls.n	109fa <__udivmoddi4+0x112>
   109f4:	f1ac 0302 	sub.w	r3, ip, #2
   109f8:	442c      	add	r4, r5
   109fa:	1aa4      	subs	r4, r4, r2
   109fc:	e7be      	b.n	1097c <__udivmoddi4+0x94>
   109fe:	f1c7 0c20 	rsb	ip, r7, #32
   10a02:	fa20 f80c 	lsr.w	r8, r0, ip
   10a06:	fa00 f307 	lsl.w	r3, r0, r7
   10a0a:	fa24 fc0c 	lsr.w	ip, r4, ip
   10a0e:	40bd      	lsls	r5, r7
   10a10:	ea4c 0203 	orr.w	r2, ip, r3
   10a14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10a18:	b2ab      	uxth	r3, r5
   10a1a:	fbb8 fcfe 	udiv	ip, r8, lr
   10a1e:	0c11      	lsrs	r1, r2, #16
   10a20:	fb0e 801c 	mls	r0, lr, ip, r8
   10a24:	fb0c f903 	mul.w	r9, ip, r3
   10a28:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   10a2c:	4581      	cmp	r9, r0
   10a2e:	fa04 f407 	lsl.w	r4, r4, r7
   10a32:	d923      	bls.n	10a7c <__udivmoddi4+0x194>
   10a34:	1828      	adds	r0, r5, r0
   10a36:	f10c 31ff 	add.w	r1, ip, #4294967295
   10a3a:	d204      	bcs.n	10a46 <__udivmoddi4+0x15e>
   10a3c:	4581      	cmp	r9, r0
   10a3e:	d902      	bls.n	10a46 <__udivmoddi4+0x15e>
   10a40:	f1ac 0102 	sub.w	r1, ip, #2
   10a44:	4428      	add	r0, r5
   10a46:	eba0 0009 	sub.w	r0, r0, r9
   10a4a:	b292      	uxth	r2, r2
   10a4c:	fbb0 fcfe 	udiv	ip, r0, lr
   10a50:	fb0e 001c 	mls	r0, lr, ip, r0
   10a54:	fb0c f803 	mul.w	r8, ip, r3
   10a58:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   10a5c:	4598      	cmp	r8, r3
   10a5e:	d90f      	bls.n	10a80 <__udivmoddi4+0x198>
   10a60:	18eb      	adds	r3, r5, r3
   10a62:	f10c 32ff 	add.w	r2, ip, #4294967295
   10a66:	d204      	bcs.n	10a72 <__udivmoddi4+0x18a>
   10a68:	4598      	cmp	r8, r3
   10a6a:	d902      	bls.n	10a72 <__udivmoddi4+0x18a>
   10a6c:	f1ac 0202 	sub.w	r2, ip, #2
   10a70:	442b      	add	r3, r5
   10a72:	eba3 0308 	sub.w	r3, r3, r8
   10a76:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10a7a:	e791      	b.n	109a0 <__udivmoddi4+0xb8>
   10a7c:	4661      	mov	r1, ip
   10a7e:	e7e2      	b.n	10a46 <__udivmoddi4+0x15e>
   10a80:	4662      	mov	r2, ip
   10a82:	e7f6      	b.n	10a72 <__udivmoddi4+0x18a>
   10a84:	4660      	mov	r0, ip
   10a86:	e7a2      	b.n	109ce <__udivmoddi4+0xe6>
   10a88:	4663      	mov	r3, ip
   10a8a:	e7b6      	b.n	109fa <__udivmoddi4+0x112>
   10a8c:	4283      	cmp	r3, r0
   10a8e:	d905      	bls.n	10a9c <__udivmoddi4+0x1b4>
   10a90:	b10e      	cbz	r6, 10a96 <__udivmoddi4+0x1ae>
   10a92:	e9c6 7000 	strd	r7, r0, [r6]
   10a96:	2100      	movs	r1, #0
   10a98:	4608      	mov	r0, r1
   10a9a:	e776      	b.n	1098a <__udivmoddi4+0xa2>
   10a9c:	fab3 f183 	clz	r1, r3
   10aa0:	b981      	cbnz	r1, 10ac4 <__udivmoddi4+0x1dc>
   10aa2:	4283      	cmp	r3, r0
   10aa4:	d301      	bcc.n	10aaa <__udivmoddi4+0x1c2>
   10aa6:	42ba      	cmp	r2, r7
   10aa8:	d80a      	bhi.n	10ac0 <__udivmoddi4+0x1d8>
   10aaa:	1abc      	subs	r4, r7, r2
   10aac:	eb60 0303 	sbc.w	r3, r0, r3
   10ab0:	2001      	movs	r0, #1
   10ab2:	469c      	mov	ip, r3
   10ab4:	2e00      	cmp	r6, #0
   10ab6:	d068      	beq.n	10b8a <__udivmoddi4+0x2a2>
   10ab8:	e9c6 4c00 	strd	r4, ip, [r6]
   10abc:	2100      	movs	r1, #0
   10abe:	e764      	b.n	1098a <__udivmoddi4+0xa2>
   10ac0:	4608      	mov	r0, r1
   10ac2:	e7f7      	b.n	10ab4 <__udivmoddi4+0x1cc>
   10ac4:	f1c1 0c20 	rsb	ip, r1, #32
   10ac8:	408b      	lsls	r3, r1
   10aca:	fa22 f40c 	lsr.w	r4, r2, ip
   10ace:	431c      	orrs	r4, r3
   10ad0:	fa02 f501 	lsl.w	r5, r2, r1
   10ad4:	fa00 f301 	lsl.w	r3, r0, r1
   10ad8:	fa27 f20c 	lsr.w	r2, r7, ip
   10adc:	fa20 fb0c 	lsr.w	fp, r0, ip
   10ae0:	ea4f 4914 	mov.w	r9, r4, lsr #16
   10ae4:	4313      	orrs	r3, r2
   10ae6:	fbbb f8f9 	udiv	r8, fp, r9
   10aea:	fa1f fe84 	uxth.w	lr, r4
   10aee:	fb09 bb18 	mls	fp, r9, r8, fp
   10af2:	0c1a      	lsrs	r2, r3, #16
   10af4:	fb08 fa0e 	mul.w	sl, r8, lr
   10af8:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   10afc:	4592      	cmp	sl, r2
   10afe:	fa07 f701 	lsl.w	r7, r7, r1
   10b02:	d93e      	bls.n	10b82 <__udivmoddi4+0x29a>
   10b04:	18a2      	adds	r2, r4, r2
   10b06:	f108 30ff 	add.w	r0, r8, #4294967295
   10b0a:	d204      	bcs.n	10b16 <__udivmoddi4+0x22e>
   10b0c:	4592      	cmp	sl, r2
   10b0e:	d902      	bls.n	10b16 <__udivmoddi4+0x22e>
   10b10:	f1a8 0002 	sub.w	r0, r8, #2
   10b14:	4422      	add	r2, r4
   10b16:	eba2 020a 	sub.w	r2, r2, sl
   10b1a:	b29b      	uxth	r3, r3
   10b1c:	fbb2 f8f9 	udiv	r8, r2, r9
   10b20:	fb09 2218 	mls	r2, r9, r8, r2
   10b24:	fb08 fe0e 	mul.w	lr, r8, lr
   10b28:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   10b2c:	4596      	cmp	lr, r2
   10b2e:	d92a      	bls.n	10b86 <__udivmoddi4+0x29e>
   10b30:	18a2      	adds	r2, r4, r2
   10b32:	f108 33ff 	add.w	r3, r8, #4294967295
   10b36:	d204      	bcs.n	10b42 <__udivmoddi4+0x25a>
   10b38:	4596      	cmp	lr, r2
   10b3a:	d902      	bls.n	10b42 <__udivmoddi4+0x25a>
   10b3c:	f1a8 0302 	sub.w	r3, r8, #2
   10b40:	4422      	add	r2, r4
   10b42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10b46:	fba0 9305 	umull	r9, r3, r0, r5
   10b4a:	eba2 020e 	sub.w	r2, r2, lr
   10b4e:	429a      	cmp	r2, r3
   10b50:	46ce      	mov	lr, r9
   10b52:	4698      	mov	r8, r3
   10b54:	d302      	bcc.n	10b5c <__udivmoddi4+0x274>
   10b56:	d106      	bne.n	10b66 <__udivmoddi4+0x27e>
   10b58:	454f      	cmp	r7, r9
   10b5a:	d204      	bcs.n	10b66 <__udivmoddi4+0x27e>
   10b5c:	ebb9 0e05 	subs.w	lr, r9, r5
   10b60:	eb63 0804 	sbc.w	r8, r3, r4
   10b64:	3801      	subs	r0, #1
   10b66:	b186      	cbz	r6, 10b8a <__udivmoddi4+0x2a2>
   10b68:	ebb7 030e 	subs.w	r3, r7, lr
   10b6c:	eb62 0708 	sbc.w	r7, r2, r8
   10b70:	fa07 fc0c 	lsl.w	ip, r7, ip
   10b74:	40cb      	lsrs	r3, r1
   10b76:	ea4c 0303 	orr.w	r3, ip, r3
   10b7a:	40cf      	lsrs	r7, r1
   10b7c:	e9c6 3700 	strd	r3, r7, [r6]
   10b80:	e79c      	b.n	10abc <__udivmoddi4+0x1d4>
   10b82:	4640      	mov	r0, r8
   10b84:	e7c7      	b.n	10b16 <__udivmoddi4+0x22e>
   10b86:	4643      	mov	r3, r8
   10b88:	e7db      	b.n	10b42 <__udivmoddi4+0x25a>
   10b8a:	4631      	mov	r1, r6
   10b8c:	e6fd      	b.n	1098a <__udivmoddi4+0xa2>
   10b8e:	2804      	cmp	r0, #4
   10b90:	d202      	bcs.n	10b98 <__udivmoddi4+0x2b0>
   10b92:	f04f 0028 	mov.w	r0, #40	; 0x28
   10b96:	4770      	bx	lr
   10b98:	d102      	bne.n	10ba0 <__udivmoddi4+0x2b8>
   10b9a:	f04f 0010 	mov.w	r0, #16
   10b9e:	4770      	bx	lr
   10ba0:	f04f 0000 	mov.w	r0, #0
   10ba4:	4770      	bx	lr
   10ba6:	2100      	movs	r1, #0
   10ba8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10bac:	f800 1f24 	strb.w	r1, [r0, #36]!
   10bb0:	7041      	strb	r1, [r0, #1]
   10bb2:	4770      	bx	lr

00010bb4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10bb4:	b570      	push	{r4, r5, r6, lr}
   10bb6:	f7ef fe65 	bl	884 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10bba:	4605      	mov	r5, r0
   10bbc:	2400      	movs	r4, #0
   10bbe:	e006      	b.n	10bce <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10bc0:	4620      	mov	r0, r4
   10bc2:	f7ef fe65 	bl	890 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10bc6:	f7ff ffee 	bl	10ba6 <__udivmoddi4+0x2be>
   10bca:	1c64      	adds	r4, r4, #1
   10bcc:	b2e4      	uxtb	r4, r4
   10bce:	42ac      	cmp	r4, r5
   10bd0:	d3f6      	bcc.n	10bc0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10bd2:	bd70      	pop	{r4, r5, r6, pc}

00010bd4 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10bd4:	f7f2 ba3e 	b.w	3054 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010bd8 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10bd8:	b510      	push	{r4, lr}
   10bda:	2000      	movs	r0, #0
   10bdc:	f7f2 fd60 	bl	36a0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10be0:	6800      	ldr	r0, [r0, #0]
   10be2:	2800      	cmp	r0, #0
   10be4:	bf18      	it	ne
   10be6:	2001      	movne	r0, #1
   10be8:	bd10      	pop	{r4, pc}

00010bea <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10bea:	b510      	push	{r4, lr}
   10bec:	f7f2 fdf2 	bl	37d4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   10bf0:	f7f2 f8aa 	bl	2d48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10bf4:	f000 f804 	bl	10c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10bf8:	b280      	uxth	r0, r0
   10bfa:	bd10      	pop	{r4, pc}

00010bfc <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>:
   10bfc:	f000 b80d 	b.w	10c1a <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>

00010c00 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10c00:	0a41      	lsrs	r1, r0, #9
   10c02:	f643 5209 	movw	r2, #15625	; 0x3d09
   10c06:	4351      	muls	r1, r2
   10c08:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10c0c:	fb10 f002 	smulbb	r0, r0, r2
   10c10:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10c14:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10c18:	4770      	bx	lr

00010c1a <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>:
   10c1a:	2000      	movs	r0, #0
   10c1c:	4770      	bx	lr
   10c1e:	2800      	cmp	r0, #0
   10c20:	db09      	blt.n	10c36 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1c>
   10c22:	f000 021f 	and.w	r2, r0, #31
   10c26:	2101      	movs	r1, #1
   10c28:	4091      	lsls	r1, r2
   10c2a:	0940      	lsrs	r0, r0, #5
   10c2c:	0080      	lsls	r0, r0, #2
   10c2e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c32:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10c36:	4770      	bx	lr
   10c38:	2800      	cmp	r0, #0
   10c3a:	db0d      	blt.n	10c58 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x3e>
   10c3c:	f000 021f 	and.w	r2, r0, #31
   10c40:	2101      	movs	r1, #1
   10c42:	4091      	lsls	r1, r2
   10c44:	0940      	lsrs	r0, r0, #5
   10c46:	0080      	lsls	r0, r0, #2
   10c48:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c4c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10c50:	f3bf 8f4f 	dsb	sy
   10c54:	f3bf 8f6f 	isb	sy
   10c58:	4770      	bx	lr

00010c5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
   10c5a:	b570      	push	{r4, r5, r6, lr}
   10c5c:	4602      	mov	r2, r0
   10c5e:	2000      	movs	r0, #0
   10c60:	2900      	cmp	r1, #0
   10c62:	d01d      	beq.n	10ca0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
   10c64:	fba2 0101 	umull	r0, r1, r2, r1
   10c68:	0a40      	lsrs	r0, r0, #9
   10c6a:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
   10c6e:	0a49      	lsrs	r1, r1, #9
   10c70:	1c40      	adds	r0, r0, #1
   10c72:	f141 0100 	adc.w	r1, r1, #0
   10c76:	f240 72a1 	movw	r2, #1953	; 0x7a1
   10c7a:	1883      	adds	r3, r0, r2
   10c7c:	f141 0100 	adc.w	r1, r1, #0
   10c80:	1c5b      	adds	r3, r3, #1
   10c82:	f141 0400 	adc.w	r4, r1, #0
   10c86:	2100      	movs	r1, #0
   10c88:	f1d3 33ff 	rsbs	r3, r3, #4294967295
   10c8c:	41a1      	sbcs	r1, r4
   10c8e:	d203      	bcs.n	10c98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
   10c90:	2172      	movs	r1, #114	; 0x72
   10c92:	206d      	movs	r0, #109	; 0x6d
   10c94:	f7f3 f916 	bl	3ec4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10c98:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
   10c9c:	fbb0 f0f2 	udiv	r0, r0, r2
   10ca0:	bd70      	pop	{r4, r5, r6, pc}
   10ca2:	5840      	ldr	r0, [r0, r1]
   10ca4:	2800      	cmp	r0, #0
   10ca6:	d000      	beq.n	10caa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
   10ca8:	2001      	movs	r0, #1
   10caa:	4770      	bx	lr
   10cac:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10cb0:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10cb4:	f002 0201 	and.w	r2, r2, #1
   10cb8:	03c0      	lsls	r0, r0, #15
   10cba:	d503      	bpl.n	10cc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   10cbc:	428a      	cmp	r2, r1
   10cbe:	d101      	bne.n	10cc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   10cc0:	2001      	movs	r0, #1
   10cc2:	4770      	bx	lr
   10cc4:	2000      	movs	r0, #0
   10cc6:	4770      	bx	lr

00010cc8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10cc8:	b510      	push	{r4, lr}
   10cca:	2101      	movs	r1, #1
   10ccc:	0788      	lsls	r0, r1, #30
   10cce:	f7f3 f8a3 	bl	3e18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10cd2:	2800      	cmp	r0, #0
   10cd4:	d000      	beq.n	10cd8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10cd6:	2001      	movs	r0, #1
   10cd8:	bd10      	pop	{r4, pc}

00010cda <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10cda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10cde:	2101      	movs	r1, #1
   10ce0:	6001      	str	r1, [r0, #0]
   10ce2:	4770      	bx	lr

00010ce4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10ce4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10ce8:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10cec:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10cf0:	f002 0203 	and.w	r2, r2, #3
   10cf4:	03c9      	lsls	r1, r1, #15
   10cf6:	d503      	bpl.n	10d00 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10cf8:	4282      	cmp	r2, r0
   10cfa:	d101      	bne.n	10d00 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10cfc:	2001      	movs	r0, #1
   10cfe:	4770      	bx	lr
   10d00:	2000      	movs	r0, #0
   10d02:	4770      	bx	lr

00010d04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10d04:	b510      	push	{r4, lr}
   10d06:	2100      	movs	r1, #0
   10d08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10d0c:	f7f3 f884 	bl	3e18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10d10:	2800      	cmp	r0, #0
   10d12:	d000      	beq.n	10d16 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10d14:	2001      	movs	r0, #1
   10d16:	bd10      	pop	{r4, pc}
   10d18:	2800      	cmp	r0, #0
   10d1a:	db09      	blt.n	10d30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10d1c:	f000 021f 	and.w	r2, r0, #31
   10d20:	2101      	movs	r1, #1
   10d22:	4091      	lsls	r1, r2
   10d24:	0940      	lsrs	r0, r0, #5
   10d26:	0080      	lsls	r0, r0, #2
   10d28:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d2c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10d30:	4770      	bx	lr
   10d32:	2800      	cmp	r0, #0
   10d34:	db0d      	blt.n	10d52 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10d36:	f000 021f 	and.w	r2, r0, #31
   10d3a:	2101      	movs	r1, #1
   10d3c:	4091      	lsls	r1, r2
   10d3e:	0940      	lsrs	r0, r0, #5
   10d40:	0080      	lsls	r0, r0, #2
   10d42:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d46:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10d4a:	f3bf 8f4f 	dsb	sy
   10d4e:	f3bf 8f6f 	isb	sy
   10d52:	4770      	bx	lr
   10d54:	00021000 	.word	0x00021000
   10d58:	000000fa 	.word	0x000000fa
   10d5c:	63a70f14 	.word	0x63a70f14
   10d60:	c477f9cf 	.word	0xc477f9cf
   10d64:	e931f9ef 	.word	0xe931f9ef
   10d68:	03bcf561 	.word	0x03bcf561
   10d6c:	2b06749a 	.word	0x2b06749a
   10d70:	2800      	cmp	r0, #0
   10d72:	db09      	blt.n	10d88 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10d74:	f000 021f 	and.w	r2, r0, #31
   10d78:	2101      	movs	r1, #1
   10d7a:	4091      	lsls	r1, r2
   10d7c:	0940      	lsrs	r0, r0, #5
   10d7e:	0080      	lsls	r0, r0, #2
   10d80:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d84:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10d88:	4770      	bx	lr

00010d8a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10d8a:	f3ef 8110 	mrs	r1, PRIMASK
   10d8e:	b672      	cpsid	i
   10d90:	7802      	ldrb	r2, [r0, #0]
   10d92:	2a01      	cmp	r2, #1
   10d94:	d001      	beq.n	10d9a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10d96:	2201      	movs	r2, #1
   10d98:	e000      	b.n	10d9c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10d9a:	2200      	movs	r2, #0
   10d9c:	2301      	movs	r3, #1
   10d9e:	7003      	strb	r3, [r0, #0]
   10da0:	b901      	cbnz	r1, 10da4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10da2:	b662      	cpsie	i
   10da4:	b10a      	cbz	r2, 10daa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10da6:	2000      	movs	r0, #0
   10da8:	4770      	bx	lr
   10daa:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10dae:	4770      	bx	lr

00010db0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10db0:	2100      	movs	r1, #0
   10db2:	7001      	strb	r1, [r0, #0]
   10db4:	4608      	mov	r0, r1
   10db6:	4770      	bx	lr

00010db8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10db8:	f3ef 8110 	mrs	r1, PRIMASK
   10dbc:	b672      	cpsid	i
   10dbe:	2200      	movs	r2, #0
   10dc0:	7002      	strb	r2, [r0, #0]
   10dc2:	b901      	cbnz	r1, 10dc6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10dc4:	b662      	cpsie	i
   10dc6:	2000      	movs	r0, #0
   10dc8:	4770      	bx	lr

00010dca <mpsl_low_priority_process>:
   10dca:	f7f3 b96b 	b.w	40a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010dce <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10dce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dd2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10dd6:	280f      	cmp	r0, #15
   10dd8:	d001      	beq.n	10dde <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10dda:	2000      	movs	r0, #0
   10ddc:	4770      	bx	lr
   10dde:	2001      	movs	r0, #1
   10de0:	4770      	bx	lr

00010de2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10de2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10de6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10dea:	280a      	cmp	r0, #10
   10dec:	d001      	beq.n	10df2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10dee:	2000      	movs	r0, #0
   10df0:	4770      	bx	lr
   10df2:	2001      	movs	r0, #1
   10df4:	4770      	bx	lr

00010df6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10df6:	b500      	push	{lr}
   10df8:	f7ff fff3 	bl	10de2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10dfc:	b120      	cbz	r0, 10e08 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10dfe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e02:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10e06:	b108      	cbz	r0, 10e0c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10e08:	2000      	movs	r0, #0
   10e0a:	bd00      	pop	{pc}
   10e0c:	2001      	movs	r0, #1
   10e0e:	bd00      	pop	{pc}

00010e10 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10e10:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e14:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e18:	280e      	cmp	r0, #14
   10e1a:	d001      	beq.n	10e20 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10e1c:	2000      	movs	r0, #0
   10e1e:	4770      	bx	lr
   10e20:	2001      	movs	r0, #1
   10e22:	4770      	bx	lr

00010e24 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10e24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e28:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e2c:	2810      	cmp	r0, #16
   10e2e:	d001      	beq.n	10e34 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10e30:	2000      	movs	r0, #0
   10e32:	4770      	bx	lr
   10e34:	2001      	movs	r0, #1
   10e36:	4770      	bx	lr

00010e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10e38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e3c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e40:	2806      	cmp	r0, #6
   10e42:	d003      	beq.n	10e4c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10e44:	1c40      	adds	r0, r0, #1
   10e46:	d001      	beq.n	10e4c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10e48:	2000      	movs	r0, #0
   10e4a:	4770      	bx	lr
   10e4c:	2001      	movs	r0, #1
   10e4e:	4770      	bx	lr

00010e50 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10e50:	b500      	push	{lr}
   10e52:	f7ff fff1 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10e56:	b148      	cbz	r0, 10e6c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e5c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10e60:	2806      	cmp	r0, #6
   10e62:	d303      	bcc.n	10e6c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e64:	1c40      	adds	r0, r0, #1
   10e66:	d001      	beq.n	10e6c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e68:	2001      	movs	r0, #1
   10e6a:	bd00      	pop	{pc}
   10e6c:	2000      	movs	r0, #0
   10e6e:	bd00      	pop	{pc}

00010e70 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10e70:	b500      	push	{lr}
   10e72:	f7ff ffe1 	bl	10e38 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10e76:	b138      	cbz	r0, 10e88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10e78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e7c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10e80:	2806      	cmp	r0, #6
   10e82:	d303      	bcc.n	10e8c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10e84:	1c40      	adds	r0, r0, #1
   10e86:	d001      	beq.n	10e8c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10e88:	2000      	movs	r0, #0
   10e8a:	bd00      	pop	{pc}
   10e8c:	2001      	movs	r0, #1
   10e8e:	bd00      	pop	{pc}

00010e90 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10e90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e94:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e98:	280d      	cmp	r0, #13
   10e9a:	d001      	beq.n	10ea0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10e9c:	2000      	movs	r0, #0
   10e9e:	4770      	bx	lr
   10ea0:	2001      	movs	r0, #1
   10ea2:	4770      	bx	lr

00010ea4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10ea4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10ea8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10eac:	2808      	cmp	r0, #8
   10eae:	d001      	beq.n	10eb4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10eb0:	2000      	movs	r0, #0
   10eb2:	4770      	bx	lr
   10eb4:	2001      	movs	r0, #1
   10eb6:	4770      	bx	lr

00010eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10eb8:	b4f0      	push	{r4, r5, r6, r7}
   10eba:	ea80 0c01 	eor.w	ip, r0, r1
   10ebe:	4603      	mov	r3, r0
   10ec0:	f01c 0f03 	tst.w	ip, #3
   10ec4:	d13c      	bne.n	10f40 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10ec6:	f013 0f03 	tst.w	r3, #3
   10eca:	d00b      	beq.n	10ee4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10ecc:	2a00      	cmp	r2, #0
   10ece:	bf04      	itt	eq
   10ed0:	bcf0      	popeq	{r4, r5, r6, r7}
   10ed2:	4770      	bxeq	lr
   10ed4:	f811 cb01 	ldrb.w	ip, [r1], #1
   10ed8:	f803 cb01 	strb.w	ip, [r3], #1
   10edc:	1e52      	subs	r2, r2, #1
   10ede:	f013 0f03 	tst.w	r3, #3
   10ee2:	d1f3      	bne.n	10ecc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10ee4:	2a03      	cmp	r2, #3
   10ee6:	d94f      	bls.n	10f88 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10ee8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10eec:	d24c      	bcs.n	10f88 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10eee:	f1c2 0c00 	rsb	ip, r2, #0
   10ef2:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10ef6:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10efa:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10efe:	f1cc 0c00 	rsb	ip, ip, #0
   10f02:	f1bc 0f00 	cmp.w	ip, #0
   10f06:	dd1b      	ble.n	10f40 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f08:	1f0d      	subs	r5, r1, #4
   10f0a:	1f1c      	subs	r4, r3, #4
   10f0c:	f01c 0f01 	tst.w	ip, #1
   10f10:	d003      	beq.n	10f1a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10f12:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10f16:	f844 6f04 	str.w	r6, [r4, #4]!
   10f1a:	ea5f 066c 	movs.w	r6, ip, asr #1
   10f1e:	d007      	beq.n	10f30 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10f20:	686f      	ldr	r7, [r5, #4]
   10f22:	6067      	str	r7, [r4, #4]
   10f24:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10f28:	f844 7f08 	str.w	r7, [r4, #8]!
   10f2c:	1e76      	subs	r6, r6, #1
   10f2e:	d1f7      	bne.n	10f20 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10f30:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10f34:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10f38:	f1cc 0c00 	rsb	ip, ip, #0
   10f3c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10f40:	2a00      	cmp	r2, #0
   10f42:	bf04      	itt	eq
   10f44:	bcf0      	popeq	{r4, r5, r6, r7}
   10f46:	4770      	bxeq	lr
   10f48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10f4c:	d226      	bcs.n	10f9c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10f4e:	2a00      	cmp	r2, #0
   10f50:	bfdc      	itt	le
   10f52:	bcf0      	pople	{r4, r5, r6, r7}
   10f54:	4770      	bxle	lr
   10f56:	1e49      	subs	r1, r1, #1
   10f58:	1e5b      	subs	r3, r3, #1
   10f5a:	f012 0f01 	tst.w	r2, #1
   10f5e:	d003      	beq.n	10f68 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10f60:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10f64:	f803 cf01 	strb.w	ip, [r3, #1]!
   10f68:	1052      	asrs	r2, r2, #1
   10f6a:	bf04      	itt	eq
   10f6c:	bcf0      	popeq	{r4, r5, r6, r7}
   10f6e:	4770      	bxeq	lr
   10f70:	f891 c001 	ldrb.w	ip, [r1, #1]
   10f74:	f883 c001 	strb.w	ip, [r3, #1]
   10f78:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10f7c:	f803 cf02 	strb.w	ip, [r3, #2]!
   10f80:	1e52      	subs	r2, r2, #1
   10f82:	d1f5      	bne.n	10f70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10f84:	bcf0      	pop	{r4, r5, r6, r7}
   10f86:	4770      	bx	lr
   10f88:	2a04      	cmp	r2, #4
   10f8a:	d3d9      	bcc.n	10f40 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f8c:	f851 cb04 	ldr.w	ip, [r1], #4
   10f90:	1f12      	subs	r2, r2, #4
   10f92:	f843 cb04 	str.w	ip, [r3], #4
   10f96:	2a04      	cmp	r2, #4
   10f98:	d2f8      	bcs.n	10f8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10f9a:	e7d1      	b.n	10f40 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f9c:	f811 cb01 	ldrb.w	ip, [r1], #1
   10fa0:	f803 cb01 	strb.w	ip, [r3], #1
   10fa4:	1e52      	subs	r2, r2, #1
   10fa6:	d1f9      	bne.n	10f9c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10fa8:	bcf0      	pop	{r4, r5, r6, r7}
   10faa:	4770      	bx	lr

00010fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10fac:	b470      	push	{r4, r5, r6}
   10fae:	4603      	mov	r3, r0
   10fb0:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10fb4:	f010 0f03 	tst.w	r0, #3
   10fb8:	d009      	beq.n	10fce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10fba:	2a00      	cmp	r2, #0
   10fbc:	bf04      	itt	eq
   10fbe:	bc70      	popeq	{r4, r5, r6}
   10fc0:	4770      	bxeq	lr
   10fc2:	f803 cb01 	strb.w	ip, [r3], #1
   10fc6:	1e52      	subs	r2, r2, #1
   10fc8:	f013 0f03 	tst.w	r3, #3
   10fcc:	d1f5      	bne.n	10fba <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10fce:	b2c9      	uxtb	r1, r1
   10fd0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10fd4:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10fd8:	2a03      	cmp	r2, #3
   10fda:	d939      	bls.n	11050 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10fdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10fe0:	d236      	bcs.n	11050 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10fe2:	4251      	negs	r1, r2
   10fe4:	17cc      	asrs	r4, r1, #31
   10fe6:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10fea:	1089      	asrs	r1, r1, #2
   10fec:	424e      	negs	r6, r1
   10fee:	2e00      	cmp	r6, #0
   10ff0:	dd11      	ble.n	11016 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10ff2:	1f19      	subs	r1, r3, #4
   10ff4:	f016 0f01 	tst.w	r6, #1
   10ff8:	bf18      	it	ne
   10ffa:	f841 5f04 	strne.w	r5, [r1, #4]!
   10ffe:	1074      	asrs	r4, r6, #1
   11000:	d004      	beq.n	1100c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   11002:	604d      	str	r5, [r1, #4]
   11004:	f841 5f08 	str.w	r5, [r1, #8]!
   11008:	1e64      	subs	r4, r4, #1
   1100a:	d1fa      	bne.n	11002 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   1100c:	4271      	negs	r1, r6
   1100e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   11012:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   11016:	2a00      	cmp	r2, #0
   11018:	bf04      	itt	eq
   1101a:	bc70      	popeq	{r4, r5, r6}
   1101c:	4770      	bxeq	lr
   1101e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11022:	d21d      	bcs.n	11060 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   11024:	2a00      	cmp	r2, #0
   11026:	bfdc      	itt	le
   11028:	bc70      	pople	{r4, r5, r6}
   1102a:	4770      	bxle	lr
   1102c:	1e59      	subs	r1, r3, #1
   1102e:	f012 0f01 	tst.w	r2, #1
   11032:	bf18      	it	ne
   11034:	f801 cf01 	strbne.w	ip, [r1, #1]!
   11038:	1052      	asrs	r2, r2, #1
   1103a:	bf04      	itt	eq
   1103c:	bc70      	popeq	{r4, r5, r6}
   1103e:	4770      	bxeq	lr
   11040:	f881 c001 	strb.w	ip, [r1, #1]
   11044:	f801 cf02 	strb.w	ip, [r1, #2]!
   11048:	1e52      	subs	r2, r2, #1
   1104a:	d1f9      	bne.n	11040 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   1104c:	bc70      	pop	{r4, r5, r6}
   1104e:	4770      	bx	lr
   11050:	2a04      	cmp	r2, #4
   11052:	d3e0      	bcc.n	11016 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   11054:	1f12      	subs	r2, r2, #4
   11056:	f843 5b04 	str.w	r5, [r3], #4
   1105a:	2a04      	cmp	r2, #4
   1105c:	d2fa      	bcs.n	11054 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   1105e:	e7da      	b.n	11016 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   11060:	f803 cb01 	strb.w	ip, [r3], #1
   11064:	1e52      	subs	r2, r2, #1
   11066:	d1fb      	bne.n	11060 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   11068:	bc70      	pop	{r4, r5, r6}
   1106a:	4770      	bx	lr
   1106c:	2107      	movs	r1, #7
   1106e:	7001      	strb	r1, [r0, #0]
   11070:	2000      	movs	r0, #0
   11072:	4770      	bx	lr
   11074:	2000      	movs	r0, #0
   11076:	4770      	bx	lr
   11078:	2000      	movs	r0, #0
   1107a:	4770      	bx	lr
   1107c:	2000      	movs	r0, #0
   1107e:	4770      	bx	lr
   11080:	b108      	cbz	r0, 11086 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xda>
   11082:	2000      	movs	r0, #0
   11084:	4770      	bx	lr
   11086:	f06f 0015 	mvn.w	r0, #21
   1108a:	4770      	bx	lr
   1108c:	f04f 30ff 	mov.w	r0, #4294967295
   11090:	4770      	bx	lr
   11092:	2000      	movs	r0, #0
   11094:	4770      	bx	lr
   11096:	2000      	movs	r0, #0
   11098:	4770      	bx	lr
   1109a:	f04f 30ff 	mov.w	r0, #4294967295
   1109e:	4770      	bx	lr
   110a0:	4770      	bx	lr
   110a2:	4770      	bx	lr
   110a4:	2000      	movs	r0, #0
   110a6:	4770      	bx	lr
   110a8:	2100      	movs	r1, #0
   110aa:	7001      	strb	r1, [r0, #0]
   110ac:	4770      	bx	lr
   110ae:	f04f 30ff 	mov.w	r0, #4294967295
   110b2:	4770      	bx	lr
   110b4:	f04f 30ff 	mov.w	r0, #4294967295
   110b8:	4770      	bx	lr
   110ba:	2100      	movs	r1, #0
   110bc:	7001      	strb	r1, [r0, #0]
   110be:	4770      	bx	lr
   110c0:	f04f 30ff 	mov.w	r0, #4294967295
   110c4:	4770      	bx	lr
   110c6:	f04f 30ff 	mov.w	r0, #4294967295
   110ca:	4770      	bx	lr
   110cc:	7800      	ldrb	r0, [r0, #0]
   110ce:	2800      	cmp	r0, #0
   110d0:	d001      	beq.n	110d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12a>
   110d2:	f06f 0015 	mvn.w	r0, #21
   110d6:	4770      	bx	lr
   110d8:	2000      	movs	r0, #0
   110da:	4770      	bx	lr
   110dc:	2200      	movs	r2, #0
   110de:	f000 b800 	b.w	110e2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

000110e2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   110e2:	b570      	push	{r4, r5, r6, lr}
   110e4:	4614      	mov	r4, r2
   110e6:	460d      	mov	r5, r1
   110e8:	1b00      	subs	r0, r0, r4
   110ea:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   110ee:	4288      	cmp	r0, r1
   110f0:	da01      	bge.n	110f6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   110f2:	4608      	mov	r0, r1
   110f4:	e002      	b.n	110fc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   110f6:	287f      	cmp	r0, #127	; 0x7f
   110f8:	dd00      	ble.n	110fc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   110fa:	207f      	movs	r0, #127	; 0x7f
   110fc:	b240      	sxtb	r0, r0
   110fe:	f7ef fb8f 	bl	820 <mpsl_tx_power_radio_supported_power_adjust>
   11102:	7028      	strb	r0, [r5, #0]
   11104:	706c      	strb	r4, [r5, #1]
   11106:	2100      	movs	r1, #0
   11108:	4420      	add	r0, r4
   1110a:	70a9      	strb	r1, [r5, #2]
   1110c:	b240      	sxtb	r0, r0
   1110e:	bd70      	pop	{r4, r5, r6, pc}
   11110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11114:	4681      	mov	r9, r0
   11116:	9000      	str	r0, [sp, #0]
   11118:	4615      	mov	r5, r2
   1111a:	460c      	mov	r4, r1
   1111c:	4668      	mov	r0, sp
   1111e:	f7f3 f97b 	bl	4418 <mpsl_fem_device_config_254_apply_get+0x68>
   11122:	7820      	ldrb	r0, [r4, #0]
   11124:	7861      	ldrb	r1, [r4, #1]
   11126:	46a8      	mov	r8, r5
   11128:	2600      	movs	r6, #0
   1112a:	4408      	add	r0, r1
   1112c:	b2c7      	uxtb	r7, r0
   1112e:	4635      	mov	r5, r6
   11130:	e008      	b.n	11144 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x62>
   11132:	7a23      	ldrb	r3, [r4, #8]
   11134:	79e2      	ldrb	r2, [r4, #7]
   11136:	79a1      	ldrb	r1, [r4, #6]
   11138:	7960      	ldrb	r0, [r4, #5]
   1113a:	f001 f84d 	bl	121d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
   1113e:	1c6d      	adds	r5, r5, #1
   11140:	4406      	add	r6, r0
   11142:	b2ed      	uxtb	r5, r5
   11144:	42bd      	cmp	r5, r7
   11146:	d3f4      	bcc.n	11132 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x50>
   11148:	9800      	ldr	r0, [sp, #0]
   1114a:	1cc0      	adds	r0, r0, #3
   1114c:	f020 0003 	bic.w	r0, r0, #3
   11150:	9000      	str	r0, [sp, #0]
   11152:	f1b8 0f00 	cmp.w	r8, #0
   11156:	d000      	beq.n	1115a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x78>
   11158:	2000      	movs	r0, #0
   1115a:	4632      	mov	r2, r6
   1115c:	4639      	mov	r1, r7
   1115e:	f7f3 feef 	bl	4f40 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
   11162:	9900      	ldr	r1, [sp, #0]
   11164:	4408      	add	r0, r1
   11166:	1dc0      	adds	r0, r0, #7
   11168:	f020 0007 	bic.w	r0, r0, #7
   1116c:	9000      	str	r0, [sp, #0]
   1116e:	eba0 0009 	sub.w	r0, r0, r9
   11172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011176 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
   11176:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11178:	4604      	mov	r4, r0
   1117a:	1d01      	adds	r1, r0, #4
   1117c:	4668      	mov	r0, sp
   1117e:	f7f5 ff5d 	bl	703c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
   11182:	2800      	cmp	r0, #0
   11184:	d004      	beq.n	11190 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
   11186:	4669      	mov	r1, sp
   11188:	4620      	mov	r0, r4
   1118a:	f000 f834 	bl	111f6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
   1118e:	2001      	movs	r0, #1
   11190:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00011192 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
   11192:	b50e      	push	{r1, r2, r3, lr}
   11194:	4601      	mov	r1, r0
   11196:	4668      	mov	r0, sp
   11198:	f000 f813 	bl	111c2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
   1119c:	4668      	mov	r0, sp
   1119e:	f7f6 f80f 	bl	71c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
   111a2:	bd0e      	pop	{r1, r2, r3, pc}

000111a4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
   111a4:	b510      	push	{r4, lr}
   111a6:	4604      	mov	r4, r0
   111a8:	4620      	mov	r0, r4
   111aa:	f7f3 fb81 	bl	48b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
   111ae:	2800      	cmp	r0, #0
   111b0:	d006      	beq.n	111c0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
   111b2:	78a1      	ldrb	r1, [r4, #2]
   111b4:	7820      	ldrb	r0, [r4, #0]
   111b6:	f7f3 fbbf 	bl	4938 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
   111ba:	2800      	cmp	r0, #0
   111bc:	d0f4      	beq.n	111a8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
   111be:	2001      	movs	r0, #1
   111c0:	bd10      	pop	{r4, pc}

000111c2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
   111c2:	880a      	ldrh	r2, [r1, #0]
   111c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
   111c8:	8002      	strh	r2, [r0, #0]
   111ca:	884a      	ldrh	r2, [r1, #2]
   111cc:	8042      	strh	r2, [r0, #2]
   111ce:	784a      	ldrb	r2, [r1, #1]
   111d0:	0993      	lsrs	r3, r2, #6
   111d2:	2200      	movs	r2, #0
   111d4:	7142      	strb	r2, [r0, #5]
   111d6:	784b      	ldrb	r3, [r1, #1]
   111d8:	f3c3 1301 	ubfx	r3, r3, #4, #2
   111dc:	b11b      	cbz	r3, 111e6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   111de:	2b01      	cmp	r3, #1
   111e0:	d005      	beq.n	111ee <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
   111e2:	2b02      	cmp	r3, #2
   111e4:	d005      	beq.n	111f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
   111e6:	7102      	strb	r2, [r0, #4]
   111e8:	1d09      	adds	r1, r1, #4
   111ea:	6081      	str	r1, [r0, #8]
   111ec:	4770      	bx	lr
   111ee:	2201      	movs	r2, #1
   111f0:	e7f9      	b.n	111e6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   111f2:	2202      	movs	r2, #2
   111f4:	e7f7      	b.n	111e6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

000111f6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
   111f6:	b510      	push	{r4, lr}
   111f8:	460c      	mov	r4, r1
   111fa:	7809      	ldrb	r1, [r1, #0]
   111fc:	7001      	strb	r1, [r0, #0]
   111fe:	7841      	ldrb	r1, [r0, #1]
   11200:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   11204:	7041      	strb	r1, [r0, #1]
   11206:	8822      	ldrh	r2, [r4, #0]
   11208:	f3c2 2203 	ubfx	r2, r2, #8, #4
   1120c:	4311      	orrs	r1, r2
   1120e:	7041      	strb	r1, [r0, #1]
   11210:	78a2      	ldrb	r2, [r4, #2]
   11212:	7082      	strb	r2, [r0, #2]
   11214:	8862      	ldrh	r2, [r4, #2]
   11216:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
   1121a:	0a12      	lsrs	r2, r2, #8
   1121c:	70c2      	strb	r2, [r0, #3]
   1121e:	7041      	strb	r1, [r0, #1]
   11220:	7922      	ldrb	r2, [r4, #4]
   11222:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   11226:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1122a:	7041      	strb	r1, [r0, #1]
   1122c:	7962      	ldrb	r2, [r4, #5]
   1122e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
   11232:	7041      	strb	r1, [r0, #1]
   11234:	68a1      	ldr	r1, [r4, #8]
   11236:	1d02      	adds	r2, r0, #4
   11238:	4291      	cmp	r1, r2
   1123a:	d006      	beq.n	1124a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
   1123c:	8862      	ldrh	r2, [r4, #2]
   1123e:	2afb      	cmp	r2, #251	; 0xfb
   11240:	d300      	bcc.n	11244 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
   11242:	22fb      	movs	r2, #251	; 0xfb
   11244:	1d00      	adds	r0, r0, #4
   11246:	f7ff fe37 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1124a:	78a0      	ldrb	r0, [r4, #2]
   1124c:	1d00      	adds	r0, r0, #4
   1124e:	b2c0      	uxtb	r0, r0
   11250:	bd10      	pop	{r4, pc}

00011252 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   11252:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11256:	4604      	mov	r4, r0
   11258:	f891 c000 	ldrb.w	ip, [r1]
   1125c:	460d      	mov	r5, r1
   1125e:	2000      	movs	r0, #0
   11260:	2313      	movs	r3, #19
   11262:	2710      	movs	r7, #16
   11264:	223e      	movs	r2, #62	; 0x3e
   11266:	2612      	movs	r6, #18
   11268:	f04f 0a0c 	mov.w	sl, #12
   1126c:	f04f 0e05 	mov.w	lr, #5
   11270:	f04f 0901 	mov.w	r9, #1
   11274:	f104 010d 	add.w	r1, r4, #13
   11278:	f04f 0b11 	mov.w	fp, #17
   1127c:	f1bc 0f26 	cmp.w	ip, #38	; 0x26
   11280:	d273      	bcs.n	1136a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
   11282:	e8df f00c 	tbb	[pc, ip]
   11286:	1372      	.short	0x1372
   11288:	fd332d2b 	.word	0xfd332d2b
   1128c:	fcd5cb73 	.word	0xfcd5cb73
   11290:	f8f9fafb 	.word	0xf8f9fafb
   11294:	72f5f6f7 	.word	0x72f5f6f7
   11298:	f4995572 	.word	0xf4995572
   1129c:	f0f1f2f3 	.word	0xf0f1f2f3
   112a0:	ed72eeef 	.word	0xed72eeef
   112a4:	e9eaebec 	.word	0xe9eaebec
   112a8:	e672e7e8 	.word	0xe672e7e8
   112ac:	f884 a000 	strb.w	sl, [r4]
   112b0:	7928      	ldrb	r0, [r5, #4]
   112b2:	70a0      	strb	r0, [r4, #2]
   112b4:	7968      	ldrb	r0, [r5, #5]
   112b6:	70e0      	strb	r0, [r4, #3]
   112b8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   112bc:	0a00      	lsrs	r0, r0, #8
   112be:	7120      	strb	r0, [r4, #4]
   112c0:	79e8      	ldrb	r0, [r5, #7]
   112c2:	7160      	strb	r0, [r4, #5]
   112c4:	7a28      	ldrb	r0, [r5, #8]
   112c6:	71a0      	strb	r0, [r4, #6]
   112c8:	8928      	ldrh	r0, [r5, #8]
   112ca:	0a00      	lsrs	r0, r0, #8
   112cc:	71e0      	strb	r0, [r4, #7]
   112ce:	7aa8      	ldrb	r0, [r5, #10]
   112d0:	7220      	strb	r0, [r4, #8]
   112d2:	8968      	ldrh	r0, [r5, #10]
   112d4:	0a00      	lsrs	r0, r0, #8
   112d6:	7260      	strb	r0, [r4, #9]
   112d8:	2008      	movs	r0, #8
   112da:	e1a7      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   112dc:	7027      	strb	r7, [r4, #0]
   112de:	e001      	b.n	112e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x92>
   112e0:	201a      	movs	r0, #26
   112e2:	7020      	strb	r0, [r4, #0]
   112e4:	7928      	ldrb	r0, [r5, #4]
   112e6:	70a0      	strb	r0, [r4, #2]
   112e8:	2001      	movs	r0, #1
   112ea:	e19f      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   112ec:	7022      	strb	r2, [r4, #0]
   112ee:	2002      	movs	r0, #2
   112f0:	70a0      	strb	r0, [r4, #2]
   112f2:	f815 0f04 	ldrb.w	r0, [r5, #4]!
   112f6:	70e0      	strb	r0, [r4, #3]
   112f8:	7aa8      	ldrb	r0, [r5, #10]
   112fa:	7120      	strb	r0, [r4, #4]
   112fc:	7868      	ldrb	r0, [r5, #1]
   112fe:	7160      	strb	r0, [r4, #5]
   11300:	f8d5 0002 	ldr.w	r0, [r5, #2]
   11304:	f8c4 0006 	str.w	r0, [r4, #6]
   11308:	88e8      	ldrh	r0, [r5, #6]
   1130a:	8160      	strh	r0, [r4, #10]
   1130c:	7a28      	ldrb	r0, [r5, #8]
   1130e:	7320      	strb	r0, [r4, #12]
   11310:	7a2e      	ldrb	r6, [r5, #8]
   11312:	2e1f      	cmp	r6, #31
   11314:	d300      	bcc.n	11318 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc6>
   11316:	261f      	movs	r6, #31
   11318:	4608      	mov	r0, r1
   1131a:	4632      	mov	r2, r6
   1131c:	f105 010b 	add.w	r1, r5, #11
   11320:	f7ff fdca 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11324:	360d      	adds	r6, #13
   11326:	7a69      	ldrb	r1, [r5, #9]
   11328:	55a1      	strb	r1, [r4, r6]
   1132a:	1e76      	subs	r6, r6, #1
   1132c:	b2f0      	uxtb	r0, r6
   1132e:	e17b      	b.n	11628 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
   11330:	7022      	strb	r2, [r4, #0]
   11332:	200b      	movs	r0, #11
   11334:	70a0      	strb	r0, [r4, #2]
   11336:	7928      	ldrb	r0, [r5, #4]
   11338:	70e0      	strb	r0, [r4, #3]
   1133a:	7968      	ldrb	r0, [r5, #5]
   1133c:	7120      	strb	r0, [r4, #4]
   1133e:	79a8      	ldrb	r0, [r5, #6]
   11340:	7160      	strb	r0, [r4, #5]
   11342:	f8d5 0007 	ldr.w	r0, [r5, #7]
   11346:	f8c4 0006 	str.w	r0, [r4, #6]
   1134a:	f8b5 000b 	ldrh.w	r0, [r5, #11]
   1134e:	8160      	strh	r0, [r4, #10]
   11350:	7b68      	ldrb	r0, [r5, #13]
   11352:	7320      	strb	r0, [r4, #12]
   11354:	f8d5 000e 	ldr.w	r0, [r5, #14]
   11358:	f8c4 000d 	str.w	r0, [r4, #13]
   1135c:	8a68      	ldrh	r0, [r5, #18]
   1135e:	f8a4 0011 	strh.w	r0, [r4, #17]
   11362:	7d28      	ldrb	r0, [r5, #20]
   11364:	74e0      	strb	r0, [r4, #19]
   11366:	4630      	mov	r0, r6
   11368:	e160      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   1136a:	e161      	b.n	11630 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3de>
   1136c:	7022      	strb	r2, [r4, #0]
   1136e:	f884 9002 	strb.w	r9, [r4, #2]
   11372:	7928      	ldrb	r0, [r5, #4]
   11374:	70e0      	strb	r0, [r4, #3]
   11376:	79a8      	ldrb	r0, [r5, #6]
   11378:	7120      	strb	r0, [r4, #4]
   1137a:	88e8      	ldrh	r0, [r5, #6]
   1137c:	0a00      	lsrs	r0, r0, #8
   1137e:	7160      	strb	r0, [r4, #5]
   11380:	7a28      	ldrb	r0, [r5, #8]
   11382:	71a0      	strb	r0, [r4, #6]
   11384:	7a68      	ldrb	r0, [r5, #9]
   11386:	71e0      	strb	r0, [r4, #7]
   11388:	f8d5 000a 	ldr.w	r0, [r5, #10]
   1138c:	60a0      	str	r0, [r4, #8]
   1138e:	89e8      	ldrh	r0, [r5, #14]
   11390:	81a0      	strh	r0, [r4, #12]
   11392:	7c28      	ldrb	r0, [r5, #16]
   11394:	73a0      	strb	r0, [r4, #14]
   11396:	8a28      	ldrh	r0, [r5, #16]
   11398:	0a00      	lsrs	r0, r0, #8
   1139a:	73e0      	strb	r0, [r4, #15]
   1139c:	7ca8      	ldrb	r0, [r5, #18]
   1139e:	7420      	strb	r0, [r4, #16]
   113a0:	8a68      	ldrh	r0, [r5, #18]
   113a2:	0a00      	lsrs	r0, r0, #8
   113a4:	7460      	strb	r0, [r4, #17]
   113a6:	7d28      	ldrb	r0, [r5, #20]
   113a8:	74a0      	strb	r0, [r4, #18]
   113aa:	8aa8      	ldrh	r0, [r5, #20]
   113ac:	0a00      	lsrs	r0, r0, #8
   113ae:	74e0      	strb	r0, [r4, #19]
   113b0:	7da8      	ldrb	r0, [r5, #22]
   113b2:	7520      	strb	r0, [r4, #20]
   113b4:	4618      	mov	r0, r3
   113b6:	e139      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   113b8:	7022      	strb	r2, [r4, #0]
   113ba:	200a      	movs	r0, #10
   113bc:	70a0      	strb	r0, [r4, #2]
   113be:	f815 0f04 	ldrb.w	r0, [r5, #4]!
   113c2:	70e0      	strb	r0, [r4, #3]
   113c4:	78a8      	ldrb	r0, [r5, #2]
   113c6:	7120      	strb	r0, [r4, #4]
   113c8:	8868      	ldrh	r0, [r5, #2]
   113ca:	0a00      	lsrs	r0, r0, #8
   113cc:	7160      	strb	r0, [r4, #5]
   113ce:	7928      	ldrb	r0, [r5, #4]
   113d0:	71a0      	strb	r0, [r4, #6]
   113d2:	7968      	ldrb	r0, [r5, #5]
   113d4:	71e0      	strb	r0, [r4, #7]
   113d6:	f8d5 0006 	ldr.w	r0, [r5, #6]
   113da:	60a0      	str	r0, [r4, #8]
   113dc:	8968      	ldrh	r0, [r5, #10]
   113de:	81a0      	strh	r0, [r4, #12]
   113e0:	68e8      	ldr	r0, [r5, #12]
   113e2:	f8c4 000e 	str.w	r0, [r4, #14]
   113e6:	8a28      	ldrh	r0, [r5, #16]
   113e8:	8260      	strh	r0, [r4, #18]
   113ea:	f8d5 0012 	ldr.w	r0, [r5, #18]
   113ee:	6160      	str	r0, [r4, #20]
   113f0:	8ae8      	ldrh	r0, [r5, #22]
   113f2:	8320      	strh	r0, [r4, #24]
   113f4:	7e28      	ldrb	r0, [r5, #24]
   113f6:	76a0      	strb	r0, [r4, #26]
   113f8:	8b28      	ldrh	r0, [r5, #24]
   113fa:	0a00      	lsrs	r0, r0, #8
   113fc:	76e0      	strb	r0, [r4, #27]
   113fe:	7ea8      	ldrb	r0, [r5, #26]
   11400:	7720      	strb	r0, [r4, #28]
   11402:	8b68      	ldrh	r0, [r5, #26]
   11404:	0a00      	lsrs	r0, r0, #8
   11406:	7760      	strb	r0, [r4, #29]
   11408:	7f28      	ldrb	r0, [r5, #28]
   1140a:	77a0      	strb	r0, [r4, #30]
   1140c:	8ba8      	ldrh	r0, [r5, #28]
   1140e:	0a00      	lsrs	r0, r0, #8
   11410:	77e0      	strb	r0, [r4, #31]
   11412:	7fa8      	ldrb	r0, [r5, #30]
   11414:	f884 0020 	strb.w	r0, [r4, #32]
   11418:	201f      	movs	r0, #31
   1141a:	e107      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   1141c:	7022      	strb	r2, [r4, #0]
   1141e:	2014      	movs	r0, #20
   11420:	70a0      	strb	r0, [r4, #2]
   11422:	7928      	ldrb	r0, [r5, #4]
   11424:	70e0      	strb	r0, [r4, #3]
   11426:	88a8      	ldrh	r0, [r5, #4]
   11428:	0a00      	lsrs	r0, r0, #8
   1142a:	7120      	strb	r0, [r4, #4]
   1142c:	79a8      	ldrb	r0, [r5, #6]
   1142e:	e151      	b.n	116d4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
   11430:	7022      	strb	r2, [r4, #0]
   11432:	2004      	movs	r0, #4
   11434:	70a0      	strb	r0, [r4, #2]
   11436:	7928      	ldrb	r0, [r5, #4]
   11438:	70e0      	strb	r0, [r4, #3]
   1143a:	79a8      	ldrb	r0, [r5, #6]
   1143c:	7120      	strb	r0, [r4, #4]
   1143e:	88e8      	ldrh	r0, [r5, #6]
   11440:	0a00      	lsrs	r0, r0, #8
   11442:	7160      	strb	r0, [r4, #5]
   11444:	68a8      	ldr	r0, [r5, #8]
   11446:	f8c4 0006 	str.w	r0, [r4, #6]
   1144a:	68e8      	ldr	r0, [r5, #12]
   1144c:	f8c4 000a 	str.w	r0, [r4, #10]
   11450:	e017      	b.n	11482 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
   11452:	e18e      	b.n	11772 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x520>
   11454:	e160      	b.n	11718 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4c6>
   11456:	e140      	b.n	116da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x488>
   11458:	e16d      	b.n	11736 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4e4>
   1145a:	e17b      	b.n	11754 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x502>
   1145c:	e131      	b.n	116c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x470>
   1145e:	e107      	b.n	11670 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
   11460:	e0ef      	b.n	11642 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f0>
   11462:	e0e7      	b.n	11634 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e2>
   11464:	e0d5      	b.n	11612 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c0>
   11466:	e0ca      	b.n	115fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
   11468:	e0b5      	b.n	115d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x384>
   1146a:	e0b9      	b.n	115e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   1146c:	e060      	b.n	11530 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
   1146e:	e05c      	b.n	1152a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d8>
   11470:	e071      	b.n	11556 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
   11472:	e06b      	b.n	1154c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
   11474:	e04f      	b.n	11516 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
   11476:	e043      	b.n	11500 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ae>
   11478:	e036      	b.n	114e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
   1147a:	e032      	b.n	114e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
   1147c:	e01d      	b.n	114ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
   1147e:	e002      	b.n	11486 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
   11480:	e072      	b.n	11568 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
   11482:	200c      	movs	r0, #12
   11484:	e0d2      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11486:	7022      	strb	r2, [r4, #0]
   11488:	2003      	movs	r0, #3
   1148a:	70a0      	strb	r0, [r4, #2]
   1148c:	7928      	ldrb	r0, [r5, #4]
   1148e:	70e0      	strb	r0, [r4, #3]
   11490:	79a8      	ldrb	r0, [r5, #6]
   11492:	7120      	strb	r0, [r4, #4]
   11494:	88e8      	ldrh	r0, [r5, #6]
   11496:	0a00      	lsrs	r0, r0, #8
   11498:	7160      	strb	r0, [r4, #5]
   1149a:	7a28      	ldrb	r0, [r5, #8]
   1149c:	71a0      	strb	r0, [r4, #6]
   1149e:	8928      	ldrh	r0, [r5, #8]
   114a0:	0a00      	lsrs	r0, r0, #8
   114a2:	71e0      	strb	r0, [r4, #7]
   114a4:	7aa8      	ldrb	r0, [r5, #10]
   114a6:	7220      	strb	r0, [r4, #8]
   114a8:	8968      	ldrh	r0, [r5, #10]
   114aa:	0a00      	lsrs	r0, r0, #8
   114ac:	7260      	strb	r0, [r4, #9]
   114ae:	7b28      	ldrb	r0, [r5, #12]
   114b0:	72a0      	strb	r0, [r4, #10]
   114b2:	89a8      	ldrh	r0, [r5, #12]
   114b4:	0a00      	lsrs	r0, r0, #8
   114b6:	72e0      	strb	r0, [r4, #11]
   114b8:	e14a      	b.n	11750 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4fe>
   114ba:	7022      	strb	r2, [r4, #0]
   114bc:	f884 e002 	strb.w	lr, [r4, #2]
   114c0:	7928      	ldrb	r0, [r5, #4]
   114c2:	70e0      	strb	r0, [r4, #3]
   114c4:	88a8      	ldrh	r0, [r5, #4]
   114c6:	0a00      	lsrs	r0, r0, #8
   114c8:	7120      	strb	r0, [r4, #4]
   114ca:	f8d5 0006 	ldr.w	r0, [r5, #6]
   114ce:	f8c4 0005 	str.w	r0, [r4, #5]
   114d2:	f8d5 000a 	ldr.w	r0, [r5, #10]
   114d6:	f8c4 0009 	str.w	r0, [r4, #9]
   114da:	89e8      	ldrh	r0, [r5, #14]
   114dc:	f8a4 000d 	strh.w	r0, [r4, #13]
   114e0:	e15d      	b.n	1179e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x54c>
   114e2:	f884 b000 	strb.w	fp, [r4]
   114e6:	e038      	b.n	1155a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
   114e8:	f884 e000 	strb.w	lr, [r4]
   114ec:	7928      	ldrb	r0, [r5, #4]
   114ee:	70a0      	strb	r0, [r4, #2]
   114f0:	7968      	ldrb	r0, [r5, #5]
   114f2:	70e0      	strb	r0, [r4, #3]
   114f4:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   114f8:	0a00      	lsrs	r0, r0, #8
   114fa:	7120      	strb	r0, [r4, #4]
   114fc:	79e8      	ldrb	r0, [r5, #7]
   114fe:	e0e9      	b.n	116d4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
   11500:	2008      	movs	r0, #8
   11502:	7020      	strb	r0, [r4, #0]
   11504:	7928      	ldrb	r0, [r5, #4]
   11506:	70a0      	strb	r0, [r4, #2]
   11508:	79a8      	ldrb	r0, [r5, #6]
   1150a:	70e0      	strb	r0, [r4, #3]
   1150c:	88e8      	ldrh	r0, [r5, #6]
   1150e:	0a00      	lsrs	r0, r0, #8
   11510:	7120      	strb	r0, [r4, #4]
   11512:	7a28      	ldrb	r0, [r5, #8]
   11514:	e0de      	b.n	116d4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
   11516:	2030      	movs	r0, #48	; 0x30
   11518:	7020      	strb	r0, [r4, #0]
   1151a:	7928      	ldrb	r0, [r5, #4]
   1151c:	70a0      	strb	r0, [r4, #2]
   1151e:	79a8      	ldrb	r0, [r5, #6]
   11520:	70e0      	strb	r0, [r4, #3]
   11522:	88e8      	ldrh	r0, [r5, #6]
   11524:	0a00      	lsrs	r0, r0, #8
   11526:	7120      	strb	r0, [r4, #4]
   11528:	e089      	b.n	1163e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ec>
   1152a:	7022      	strb	r2, [r4, #0]
   1152c:	2007      	movs	r0, #7
   1152e:	e0d7      	b.n	116e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x48e>
   11530:	7022      	strb	r2, [r4, #0]
   11532:	f884 a002 	strb.w	sl, [r4, #2]
   11536:	7928      	ldrb	r0, [r5, #4]
   11538:	70e0      	strb	r0, [r4, #3]
   1153a:	79a8      	ldrb	r0, [r5, #6]
   1153c:	7120      	strb	r0, [r4, #4]
   1153e:	88e8      	ldrh	r0, [r5, #6]
   11540:	0a00      	lsrs	r0, r0, #8
   11542:	7160      	strb	r0, [r4, #5]
   11544:	7a28      	ldrb	r0, [r5, #8]
   11546:	71a0      	strb	r0, [r4, #6]
   11548:	7a68      	ldrb	r0, [r5, #9]
   1154a:	e055      	b.n	115f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a6>
   1154c:	1d29      	adds	r1, r5, #4
   1154e:	4620      	mov	r0, r4
   11550:	f7f3 fa14 	bl	497c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
   11554:	e068      	b.n	11628 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
   11556:	2057      	movs	r0, #87	; 0x57
   11558:	7020      	strb	r0, [r4, #0]
   1155a:	7928      	ldrb	r0, [r5, #4]
   1155c:	70a0      	strb	r0, [r4, #2]
   1155e:	88a8      	ldrh	r0, [r5, #4]
   11560:	0a00      	lsrs	r0, r0, #8
   11562:	70e0      	strb	r0, [r4, #3]
   11564:	2002      	movs	r0, #2
   11566:	e061      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11568:	7022      	strb	r2, [r4, #0]
   1156a:	220d      	movs	r2, #13
   1156c:	70a2      	strb	r2, [r4, #2]
   1156e:	792a      	ldrb	r2, [r5, #4]
   11570:	70e2      	strb	r2, [r4, #3]
   11572:	89ea      	ldrh	r2, [r5, #14]
   11574:	80a2      	strh	r2, [r4, #4]
   11576:	796a      	ldrb	r2, [r5, #5]
   11578:	71a2      	strb	r2, [r4, #6]
   1157a:	f8d5 2006 	ldr.w	r2, [r5, #6]
   1157e:	f8c4 2007 	str.w	r2, [r4, #7]
   11582:	896a      	ldrh	r2, [r5, #10]
   11584:	f8a4 200b 	strh.w	r2, [r4, #11]
   11588:	7c2a      	ldrb	r2, [r5, #16]
   1158a:	4620      	mov	r0, r4
   1158c:	7362      	strb	r2, [r4, #13]
   1158e:	1d29      	adds	r1, r5, #4
   11590:	7c6a      	ldrb	r2, [r5, #17]
   11592:	7382      	strb	r2, [r0, #14]
   11594:	7b8a      	ldrb	r2, [r1, #14]
   11596:	73c2      	strb	r2, [r0, #15]
   11598:	7e8a      	ldrb	r2, [r1, #26]
   1159a:	7402      	strb	r2, [r0, #16]
   1159c:	7a4a      	ldrb	r2, [r1, #9]
   1159e:	7442      	strb	r2, [r0, #17]
   115a0:	f8b1 2011 	ldrh.w	r2, [r1, #17]
   115a4:	f8ad 2000 	strh.w	r2, [sp]
   115a8:	8242      	strh	r2, [r0, #18]
   115aa:	7cca      	ldrb	r2, [r1, #19]
   115ac:	7502      	strb	r2, [r0, #20]
   115ae:	694a      	ldr	r2, [r1, #20]
   115b0:	f8c0 2015 	str.w	r2, [r0, #21]
   115b4:	8b0a      	ldrh	r2, [r1, #24]
   115b6:	f8a0 2019 	strh.w	r2, [r0, #25]
   115ba:	7a0a      	ldrb	r2, [r1, #8]
   115bc:	76c2      	strb	r2, [r0, #27]
   115be:	7a0d      	ldrb	r5, [r1, #8]
   115c0:	2de5      	cmp	r5, #229	; 0xe5
   115c2:	d300      	bcc.n	115c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
   115c4:	25e5      	movs	r5, #229	; 0xe5
   115c6:	462a      	mov	r2, r5
   115c8:	301c      	adds	r0, #28
   115ca:	311c      	adds	r1, #28
   115cc:	f7ff fc74 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   115d0:	351a      	adds	r5, #26
   115d2:	b2e8      	uxtb	r0, r5
   115d4:	e028      	b.n	11628 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
   115d6:	7022      	strb	r2, [r4, #0]
   115d8:	f884 b002 	strb.w	fp, [r4, #2]
   115dc:	4648      	mov	r0, r9
   115de:	e025      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   115e0:	7022      	strb	r2, [r4, #0]
   115e2:	70a6      	strb	r6, [r4, #2]
   115e4:	7928      	ldrb	r0, [r5, #4]
   115e6:	70e0      	strb	r0, [r4, #3]
   115e8:	7968      	ldrb	r0, [r5, #5]
   115ea:	7120      	strb	r0, [r4, #4]
   115ec:	79a8      	ldrb	r0, [r5, #6]
   115ee:	7160      	strb	r0, [r4, #5]
   115f0:	88e8      	ldrh	r0, [r5, #6]
   115f2:	0a00      	lsrs	r0, r0, #8
   115f4:	71a0      	strb	r0, [r4, #6]
   115f6:	7a28      	ldrb	r0, [r5, #8]
   115f8:	71e0      	strb	r0, [r4, #7]
   115fa:	2006      	movs	r0, #6
   115fc:	e016      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   115fe:	7022      	strb	r2, [r4, #0]
   11600:	200e      	movs	r0, #14
   11602:	70a0      	strb	r0, [r4, #2]
   11604:	220f      	movs	r2, #15
   11606:	1d29      	adds	r1, r5, #4
   11608:	1ce0      	adds	r0, r4, #3
   1160a:	f7ff fc55 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1160e:	2010      	movs	r0, #16
   11610:	e00c      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11612:	7022      	strb	r2, [r4, #0]
   11614:	200f      	movs	r0, #15
   11616:	70a0      	strb	r0, [r4, #2]
   11618:	7aaa      	ldrb	r2, [r5, #10]
   1161a:	1d29      	adds	r1, r5, #4
   1161c:	1ce0      	adds	r0, r4, #3
   1161e:	1dd2      	adds	r2, r2, #7
   11620:	f7ff fc4a 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11624:	7aa8      	ldrb	r0, [r5, #10]
   11626:	3008      	adds	r0, #8
   11628:	2800      	cmp	r0, #0
   1162a:	d001      	beq.n	11630 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3de>
   1162c:	7060      	strb	r0, [r4, #1]
   1162e:	1c80      	adds	r0, r0, #2
   11630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11634:	7022      	strb	r2, [r4, #0]
   11636:	70a7      	strb	r7, [r4, #2]
   11638:	88a8      	ldrh	r0, [r5, #4]
   1163a:	f8a4 0003 	strh.w	r0, [r4, #3]
   1163e:	2003      	movs	r0, #3
   11640:	e7f4      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11642:	7022      	strb	r2, [r4, #0]
   11644:	2021      	movs	r0, #33	; 0x21
   11646:	70a0      	strb	r0, [r4, #2]
   11648:	7928      	ldrb	r0, [r5, #4]
   1164a:	70e0      	strb	r0, [r4, #3]
   1164c:	7968      	ldrb	r0, [r5, #5]
   1164e:	7120      	strb	r0, [r4, #4]
   11650:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   11654:	0a00      	lsrs	r0, r0, #8
   11656:	7160      	strb	r0, [r4, #5]
   11658:	79e8      	ldrb	r0, [r5, #7]
   1165a:	71a0      	strb	r0, [r4, #6]
   1165c:	7a28      	ldrb	r0, [r5, #8]
   1165e:	71e0      	strb	r0, [r4, #7]
   11660:	7a68      	ldrb	r0, [r5, #9]
   11662:	7220      	strb	r0, [r4, #8]
   11664:	7aa8      	ldrb	r0, [r5, #10]
   11666:	7260      	strb	r0, [r4, #9]
   11668:	7ae8      	ldrb	r0, [r5, #11]
   1166a:	72a0      	strb	r0, [r4, #10]
   1166c:	2009      	movs	r0, #9
   1166e:	e7dd      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11670:	7022      	strb	r2, [r4, #0]
   11672:	2018      	movs	r0, #24
   11674:	70a0      	strb	r0, [r4, #2]
   11676:	7928      	ldrb	r0, [r5, #4]
   11678:	70e0      	strb	r0, [r4, #3]
   1167a:	f815 0f05 	ldrb.w	r0, [r5, #5]!
   1167e:	7120      	strb	r0, [r4, #4]
   11680:	8828      	ldrh	r0, [r5, #0]
   11682:	0a00      	lsrs	r0, r0, #8
   11684:	7160      	strb	r0, [r4, #5]
   11686:	78a8      	ldrb	r0, [r5, #2]
   11688:	71a0      	strb	r0, [r4, #6]
   1168a:	8868      	ldrh	r0, [r5, #2]
   1168c:	0a00      	lsrs	r0, r0, #8
   1168e:	71e0      	strb	r0, [r4, #7]
   11690:	7928      	ldrb	r0, [r5, #4]
   11692:	7220      	strb	r0, [r4, #8]
   11694:	88a8      	ldrh	r0, [r5, #4]
   11696:	0a00      	lsrs	r0, r0, #8
   11698:	7260      	strb	r0, [r4, #9]
   1169a:	79a8      	ldrb	r0, [r5, #6]
   1169c:	72a0      	strb	r0, [r4, #10]
   1169e:	79e8      	ldrb	r0, [r5, #7]
   116a0:	72e0      	strb	r0, [r4, #11]
   116a2:	68a8      	ldr	r0, [r5, #8]
   116a4:	60e0      	str	r0, [r4, #12]
   116a6:	89a8      	ldrh	r0, [r5, #12]
   116a8:	8220      	strh	r0, [r4, #16]
   116aa:	7ba8      	ldrb	r0, [r5, #14]
   116ac:	74a0      	strb	r0, [r4, #18]
   116ae:	7be8      	ldrb	r0, [r5, #15]
   116b0:	74e0      	strb	r0, [r4, #19]
   116b2:	f8b5 000f 	ldrh.w	r0, [r5, #15]
   116b6:	0a00      	lsrs	r0, r0, #8
   116b8:	7520      	strb	r0, [r4, #20]
   116ba:	7c68      	ldrb	r0, [r5, #17]
   116bc:	7560      	strb	r0, [r4, #21]
   116be:	2014      	movs	r0, #20
   116c0:	e7b4      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   116c2:	20ff      	movs	r0, #255	; 0xff
   116c4:	7020      	strb	r0, [r4, #0]
   116c6:	20a1      	movs	r0, #161	; 0xa1
   116c8:	70a0      	strb	r0, [r4, #2]
   116ca:	7928      	ldrb	r0, [r5, #4]
   116cc:	70e0      	strb	r0, [r4, #3]
   116ce:	7968      	ldrb	r0, [r5, #5]
   116d0:	7120      	strb	r0, [r4, #4]
   116d2:	2000      	movs	r0, #0
   116d4:	7160      	strb	r0, [r4, #5]
   116d6:	2004      	movs	r0, #4
   116d8:	e7a8      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   116da:	20ff      	movs	r0, #255	; 0xff
   116dc:	7020      	strb	r0, [r4, #0]
   116de:	20a2      	movs	r0, #162	; 0xa2
   116e0:	70a0      	strb	r0, [r4, #2]
   116e2:	7928      	ldrb	r0, [r5, #4]
   116e4:	70e0      	strb	r0, [r4, #3]
   116e6:	88a8      	ldrh	r0, [r5, #4]
   116e8:	0a00      	lsrs	r0, r0, #8
   116ea:	7120      	strb	r0, [r4, #4]
   116ec:	79a8      	ldrb	r0, [r5, #6]
   116ee:	7160      	strb	r0, [r4, #5]
   116f0:	88e8      	ldrh	r0, [r5, #6]
   116f2:	0a00      	lsrs	r0, r0, #8
   116f4:	71a0      	strb	r0, [r4, #6]
   116f6:	7a28      	ldrb	r0, [r5, #8]
   116f8:	71e0      	strb	r0, [r4, #7]
   116fa:	8928      	ldrh	r0, [r5, #8]
   116fc:	0a00      	lsrs	r0, r0, #8
   116fe:	7220      	strb	r0, [r4, #8]
   11700:	7aa8      	ldrb	r0, [r5, #10]
   11702:	7260      	strb	r0, [r4, #9]
   11704:	8968      	ldrh	r0, [r5, #10]
   11706:	0a00      	lsrs	r0, r0, #8
   11708:	72a0      	strb	r0, [r4, #10]
   1170a:	7b28      	ldrb	r0, [r5, #12]
   1170c:	72e0      	strb	r0, [r4, #11]
   1170e:	89a8      	ldrh	r0, [r5, #12]
   11710:	0a00      	lsrs	r0, r0, #8
   11712:	7320      	strb	r0, [r4, #12]
   11714:	200b      	movs	r0, #11
   11716:	e789      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11718:	20ff      	movs	r0, #255	; 0xff
   1171a:	7020      	strb	r0, [r4, #0]
   1171c:	20a3      	movs	r0, #163	; 0xa3
   1171e:	70a0      	strb	r0, [r4, #2]
   11720:	7928      	ldrb	r0, [r5, #4]
   11722:	70e0      	strb	r0, [r4, #3]
   11724:	88a8      	ldrh	r0, [r5, #4]
   11726:	0a00      	lsrs	r0, r0, #8
   11728:	7120      	strb	r0, [r4, #4]
   1172a:	79a8      	ldrb	r0, [r5, #6]
   1172c:	7160      	strb	r0, [r4, #5]
   1172e:	79e8      	ldrb	r0, [r5, #7]
   11730:	71a0      	strb	r0, [r4, #6]
   11732:	2005      	movs	r0, #5
   11734:	e77a      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11736:	7022      	strb	r2, [r4, #0]
   11738:	70a3      	strb	r3, [r4, #2]
   1173a:	7928      	ldrb	r0, [r5, #4]
   1173c:	70e0      	strb	r0, [r4, #3]
   1173e:	7968      	ldrb	r0, [r5, #5]
   11740:	7120      	strb	r0, [r4, #4]
   11742:	f8d5 0006 	ldr.w	r0, [r5, #6]
   11746:	f8c4 0005 	str.w	r0, [r4, #5]
   1174a:	8968      	ldrh	r0, [r5, #10]
   1174c:	f8a4 0009 	strh.w	r0, [r4, #9]
   11750:	200a      	movs	r0, #10
   11752:	e76b      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11754:	20ff      	movs	r0, #255	; 0xff
   11756:	7020      	strb	r0, [r4, #0]
   11758:	20a4      	movs	r0, #164	; 0xa4
   1175a:	70a0      	strb	r0, [r4, #2]
   1175c:	7928      	ldrb	r0, [r5, #4]
   1175e:	70e0      	strb	r0, [r4, #3]
   11760:	88a8      	ldrh	r0, [r5, #4]
   11762:	0a00      	lsrs	r0, r0, #8
   11764:	7120      	strb	r0, [r4, #4]
   11766:	79a8      	ldrb	r0, [r5, #6]
   11768:	7160      	strb	r0, [r4, #5]
   1176a:	79e8      	ldrb	r0, [r5, #7]
   1176c:	71a0      	strb	r0, [r4, #6]
   1176e:	2007      	movs	r0, #7
   11770:	e75c      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
   11772:	20ff      	movs	r0, #255	; 0xff
   11774:	7020      	strb	r0, [r4, #0]
   11776:	2080      	movs	r0, #128	; 0x80
   11778:	70a0      	strb	r0, [r4, #2]
   1177a:	88a9      	ldrh	r1, [r5, #4]
   1177c:	f8a4 1003 	strh.w	r1, [r4, #3]
   11780:	88e9      	ldrh	r1, [r5, #6]
   11782:	f8a4 1005 	strh.w	r1, [r4, #5]
   11786:	7a29      	ldrb	r1, [r5, #8]
   11788:	71e1      	strb	r1, [r4, #7]
   1178a:	8969      	ldrh	r1, [r5, #10]
   1178c:	8121      	strh	r1, [r4, #8]
   1178e:	89a9      	ldrh	r1, [r5, #12]
   11790:	8161      	strh	r1, [r4, #10]
   11792:	89e9      	ldrh	r1, [r5, #14]
   11794:	81a1      	strh	r1, [r4, #12]
   11796:	7c29      	ldrb	r1, [r5, #16]
   11798:	f001 0101 	and.w	r1, r1, #1
   1179c:	73a1      	strb	r1, [r4, #14]
   1179e:	200d      	movs	r0, #13
   117a0:	e744      	b.n	1162c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>

000117a2 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
   117a2:	223e      	movs	r2, #62	; 0x3e
   117a4:	7002      	strb	r2, [r0, #0]
   117a6:	2201      	movs	r2, #1
   117a8:	7082      	strb	r2, [r0, #2]
   117aa:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   117ae:	70c2      	strb	r2, [r0, #3]
   117b0:	788a      	ldrb	r2, [r1, #2]
   117b2:	7102      	strb	r2, [r0, #4]
   117b4:	884a      	ldrh	r2, [r1, #2]
   117b6:	0a12      	lsrs	r2, r2, #8
   117b8:	7142      	strb	r2, [r0, #5]
   117ba:	790a      	ldrb	r2, [r1, #4]
   117bc:	7182      	strb	r2, [r0, #6]
   117be:	794a      	ldrb	r2, [r1, #5]
   117c0:	71c2      	strb	r2, [r0, #7]
   117c2:	f8d1 2006 	ldr.w	r2, [r1, #6]
   117c6:	6082      	str	r2, [r0, #8]
   117c8:	894a      	ldrh	r2, [r1, #10]
   117ca:	8182      	strh	r2, [r0, #12]
   117cc:	7e0a      	ldrb	r2, [r1, #24]
   117ce:	7382      	strb	r2, [r0, #14]
   117d0:	8b0a      	ldrh	r2, [r1, #24]
   117d2:	0a12      	lsrs	r2, r2, #8
   117d4:	73c2      	strb	r2, [r0, #15]
   117d6:	7e8a      	ldrb	r2, [r1, #26]
   117d8:	7402      	strb	r2, [r0, #16]
   117da:	8b4a      	ldrh	r2, [r1, #26]
   117dc:	0a12      	lsrs	r2, r2, #8
   117de:	7442      	strb	r2, [r0, #17]
   117e0:	7f0a      	ldrb	r2, [r1, #28]
   117e2:	7482      	strb	r2, [r0, #18]
   117e4:	8b8a      	ldrh	r2, [r1, #28]
   117e6:	0a12      	lsrs	r2, r2, #8
   117e8:	74c2      	strb	r2, [r0, #19]
   117ea:	7f89      	ldrb	r1, [r1, #30]
   117ec:	7501      	strb	r1, [r0, #20]
   117ee:	2113      	movs	r1, #19
   117f0:	7041      	strb	r1, [r0, #1]
   117f2:	4608      	mov	r0, r1
   117f4:	4770      	bx	lr
   117f6:	094a      	lsrs	r2, r1, #5
   117f8:	f001 011f 	and.w	r1, r1, #31
   117fc:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   11800:	40c8      	lsrs	r0, r1
   11802:	f000 0001 	and.w	r0, r0, #1
   11806:	4770      	bx	lr

00011808 <sdc_hci_data_get>:
   11808:	b510      	push	{r4, lr}
   1180a:	b120      	cbz	r0, 11816 <sdc_hci_data_get+0xe>
   1180c:	f7ff fcb3 	bl	11176 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
   11810:	b120      	cbz	r0, 1181c <sdc_hci_data_get+0x14>
   11812:	2000      	movs	r0, #0
   11814:	bd10      	pop	{r4, pc}
   11816:	f06f 0015 	mvn.w	r0, #21
   1181a:	bd10      	pop	{r4, pc}
   1181c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11820:	bd10      	pop	{r4, pc}

00011822 <sdc_hci_data_put>:
   11822:	b510      	push	{r4, lr}
   11824:	f06f 0415 	mvn.w	r4, #21
   11828:	b120      	cbz	r0, 11834 <sdc_hci_data_put+0x12>
   1182a:	f7ff fcb2 	bl	11192 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
   1182e:	b108      	cbz	r0, 11834 <sdc_hci_data_put+0x12>
   11830:	2000      	movs	r0, #0
   11832:	bd10      	pop	{r4, pc}
   11834:	4620      	mov	r0, r4
   11836:	bd10      	pop	{r4, pc}

00011838 <sdc_hci_evt_get>:
   11838:	b510      	push	{r4, lr}
   1183a:	b120      	cbz	r0, 11846 <sdc_hci_evt_get+0xe>
   1183c:	f7ff fcb2 	bl	111a4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
   11840:	b120      	cbz	r0, 1184c <sdc_hci_evt_get+0x14>
   11842:	2000      	movs	r0, #0
   11844:	bd10      	pop	{r4, pc}
   11846:	f06f 0015 	mvn.w	r0, #21
   1184a:	bd10      	pop	{r4, pc}
   1184c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11850:	bd10      	pop	{r4, pc}

00011852 <sdc_hci_get>:
   11852:	b118      	cbz	r0, 1185c <sdc_hci_get+0xa>
   11854:	b111      	cbz	r1, 1185c <sdc_hci_get+0xa>
   11856:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1185a:	4770      	bx	lr
   1185c:	f06f 0015 	mvn.w	r0, #21
   11860:	4770      	bx	lr

00011862 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
   11862:	f003 b918 	b.w	14a96 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

00011866 <sdc_hci_cmd_cb_read_transmit_power_level>:
   11866:	f003 b96d 	b.w	14b44 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0001186a <sdc_hci_cmd_cb_set_event_mask>:
   1186a:	b510      	push	{r4, lr}
   1186c:	f7f3 f8d6 	bl	4a1c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   11870:	2000      	movs	r0, #0
   11872:	bd10      	pop	{r4, pc}

00011874 <sdc_hci_cmd_cb_set_event_mask_page_2>:
   11874:	b510      	push	{r4, lr}
   11876:	f7f3 f8e1 	bl	4a3c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
   1187a:	2000      	movs	r0, #0
   1187c:	bd10      	pop	{r4, pc}

0001187e <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
   1187e:	f003 b97d 	b.w	14b7c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

00011882 <sdc_hci_cmd_vs_conn_event_extend>:
   11882:	b508      	push	{r3, lr}
   11884:	7800      	ldrb	r0, [r0, #0]
   11886:	f88d 0000 	strb.w	r0, [sp]
   1188a:	4668      	mov	r0, sp
   1188c:	f002 ffe9 	bl	14862 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   11890:	bd08      	pop	{r3, pc}

00011892 <sdc_hci_cmd_vs_conn_update>:
   11892:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11894:	2100      	movs	r1, #0
   11896:	9100      	str	r1, [sp, #0]
   11898:	9101      	str	r1, [sp, #4]
   1189a:	9102      	str	r1, [sp, #8]
   1189c:	9103      	str	r1, [sp, #12]
   1189e:	f8d0 1002 	ldr.w	r1, [r0, #2]
   118a2:	f641 524c 	movw	r2, #7500	; 0x1d4c
   118a6:	4291      	cmp	r1, r2
   118a8:	d304      	bcc.n	118b4 <sdc_hci_cmd_vs_conn_update+0x22>
   118aa:	f240 42e2 	movw	r2, #1250	; 0x4e2
   118ae:	fbb1 f1f2 	udiv	r1, r1, r2
   118b2:	e005      	b.n	118c0 <sdc_hci_cmd_vs_conn_update+0x2e>
   118b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   118b8:	fbb1 f1f2 	udiv	r1, r1, r2
   118bc:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
   118c0:	8802      	ldrh	r2, [r0, #0]
   118c2:	b289      	uxth	r1, r1
   118c4:	f8ad 2000 	strh.w	r2, [sp]
   118c8:	f8ad 1002 	strh.w	r1, [sp, #2]
   118cc:	f8ad 1004 	strh.w	r1, [sp, #4]
   118d0:	88c1      	ldrh	r1, [r0, #6]
   118d2:	f8ad 1006 	strh.w	r1, [sp, #6]
   118d6:	8900      	ldrh	r0, [r0, #8]
   118d8:	f8ad 0008 	strh.w	r0, [sp, #8]
   118dc:	4668      	mov	r0, sp
   118de:	f002 fc81 	bl	141e4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
   118e2:	b004      	add	sp, #16
   118e4:	bd10      	pop	{r4, pc}

000118e6 <sdc_hci_cmd_vs_event_length_set>:
   118e6:	f7fc bce1 	b.w	e2ac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

000118ea <sdc_hci_cmd_vs_llpm_mode_set>:
   118ea:	b508      	push	{r3, lr}
   118ec:	7800      	ldrb	r0, [r0, #0]
   118ee:	f88d 0000 	strb.w	r0, [sp]
   118f2:	4668      	mov	r0, sp
   118f4:	f7fc fce6 	bl	e2c4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
   118f8:	bd08      	pop	{r3, pc}

000118fa <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
   118fa:	7881      	ldrb	r1, [r0, #2]
   118fc:	8800      	ldrh	r0, [r0, #0]
   118fe:	f002 bf73 	b.w	147e8 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

00011902 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   11902:	7800      	ldrb	r0, [r0, #0]
   11904:	b100      	cbz	r0, 11908 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   11906:	2001      	movs	r0, #1
   11908:	f002 bf69 	b.w	147de <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0001190c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
   1190c:	b570      	push	{r4, r5, r6, lr}
   1190e:	4605      	mov	r5, r0
   11910:	2210      	movs	r2, #16
   11912:	2100      	movs	r1, #0
   11914:	f7ff fb4a 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   11918:	2210      	movs	r2, #16
   1191a:	2100      	movs	r1, #0
   1191c:	f105 0010 	add.w	r0, r5, #16
   11920:	f7ff fb44 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   11924:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   11928:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1192c:	1c40      	adds	r0, r0, #1
   1192e:	d10b      	bne.n	11948 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   11930:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   11934:	1c40      	adds	r0, r0, #1
   11936:	d107      	bne.n	11948 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   11938:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   1193c:	1c40      	adds	r0, r0, #1
   1193e:	d103      	bne.n	11948 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   11940:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   11944:	1c40      	adds	r0, r0, #1
   11946:	d00b      	beq.n	11960 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
   11948:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1194c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   11950:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   11954:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   11958:	612a      	str	r2, [r5, #16]
   1195a:	6168      	str	r0, [r5, #20]
   1195c:	61a9      	str	r1, [r5, #24]
   1195e:	61eb      	str	r3, [r5, #28]
   11960:	2000      	movs	r0, #0
   11962:	f7f3 fe4b 	bl	55fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   11966:	b918      	cbnz	r0, 11970 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
   11968:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1196c:	07c0      	lsls	r0, r0, #31
   1196e:	d118      	bne.n	119a2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   11970:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   11974:	1c40      	adds	r0, r0, #1
   11976:	d10b      	bne.n	11990 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   11978:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1197c:	1c40      	adds	r0, r0, #1
   1197e:	d107      	bne.n	11990 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   11980:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   11984:	1c40      	adds	r0, r0, #1
   11986:	d103      	bne.n	11990 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   11988:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1198c:	1c40      	adds	r0, r0, #1
   1198e:	d008      	beq.n	119a2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   11990:	f854 0f90 	ldr.w	r0, [r4, #144]!
   11994:	6861      	ldr	r1, [r4, #4]
   11996:	68a2      	ldr	r2, [r4, #8]
   11998:	68e3      	ldr	r3, [r4, #12]
   1199a:	6028      	str	r0, [r5, #0]
   1199c:	6069      	str	r1, [r5, #4]
   1199e:	60aa      	str	r2, [r5, #8]
   119a0:	60eb      	str	r3, [r5, #12]
   119a2:	2000      	movs	r0, #0
   119a4:	bd70      	pop	{r4, r5, r6, pc}

000119a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   119a6:	b538      	push	{r3, r4, r5, lr}
   119a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   119ac:	4604      	mov	r4, r0
   119ae:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   119b2:	1c40      	adds	r0, r0, #1
   119b4:	d105      	bne.n	119c2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
   119b6:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   119ba:	43c0      	mvns	r0, r0
   119bc:	0400      	lsls	r0, r0, #16
   119be:	0c00      	lsrs	r0, r0, #16
   119c0:	d03e      	beq.n	11a40 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   119c2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   119c6:	07c0      	lsls	r0, r0, #31
   119c8:	d03a      	beq.n	11a40 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   119ca:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   119ce:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
   119d2:	f8ad 1000 	strh.w	r1, [sp]
   119d6:	f8c4 0001 	str.w	r0, [r4, #1]
   119da:	f8bd 0000 	ldrh.w	r0, [sp]
   119de:	f8a4 0005 	strh.w	r0, [r4, #5]
   119e2:	79a0      	ldrb	r0, [r4, #6]
   119e4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   119e8:	71a0      	strb	r0, [r4, #6]
   119ea:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   119ee:	1c40      	adds	r0, r0, #1
   119f0:	d00f      	beq.n	11a12 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   119f2:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   119f6:	1c40      	adds	r0, r0, #1
   119f8:	d00b      	beq.n	11a12 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   119fa:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   119fe:	1c40      	adds	r0, r0, #1
   11a00:	d007      	beq.n	11a12 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   11a02:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   11a06:	1c40      	adds	r0, r0, #1
   11a08:	d003      	beq.n	11a12 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   11a0a:	2000      	movs	r0, #0
   11a0c:	f7f3 fdf6 	bl	55fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   11a10:	b140      	cbz	r0, 11a24 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
   11a12:	2210      	movs	r2, #16
   11a14:	2100      	movs	r1, #0
   11a16:	1de0      	adds	r0, r4, #7
   11a18:	f7ff fac8 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   11a1c:	2001      	movs	r0, #1
   11a1e:	7020      	strb	r0, [r4, #0]
   11a20:	2000      	movs	r0, #0
   11a22:	bd38      	pop	{r3, r4, r5, pc}
   11a24:	f855 2f90 	ldr.w	r2, [r5, #144]!
   11a28:	6869      	ldr	r1, [r5, #4]
   11a2a:	68a8      	ldr	r0, [r5, #8]
   11a2c:	68eb      	ldr	r3, [r5, #12]
   11a2e:	f8c4 2007 	str.w	r2, [r4, #7]
   11a32:	f8c4 100b 	str.w	r1, [r4, #11]
   11a36:	f8c4 000f 	str.w	r0, [r4, #15]
   11a3a:	f8c4 3013 	str.w	r3, [r4, #19]
   11a3e:	e7ed      	b.n	11a1c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
   11a40:	2000      	movs	r0, #0
   11a42:	e7ec      	b.n	11a1e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

00011a44 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   11a44:	f002 beff 	b.w	14846 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00011a48 <sdc_hci_cmd_ip_read_bd_addr>:
   11a48:	f003 b836 	b.w	14ab8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00011a4c <sdc_hci_cmd_ip_read_local_version_information>:
   11a4c:	f7fc bc5a 	b.w	e304 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00011a50 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
   11a50:	f002 bb89 	b.w	14166 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00011a54 <sdc_hci_cmd_le_clear_adv_sets>:
   11a54:	f002 bba4 	b.w	141a0 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q>

00011a58 <sdc_hci_cmd_le_clear_filter_accept_list>:
   11a58:	f002 bbba 	b.w	141d0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00011a5c <sdc_hci_cmd_le_encrypt>:
   11a5c:	f002 bc13 	b.w	14286 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00011a60 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
   11a60:	8802      	ldrh	r2, [r0, #0]
   11a62:	800a      	strh	r2, [r1, #0]
   11a64:	f002 bc18 	b.w	14298 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

00011a68 <sdc_hci_cmd_le_long_term_key_request_reply>:
   11a68:	8802      	ldrh	r2, [r0, #0]
   11a6a:	800a      	strh	r2, [r1, #0]
   11a6c:	f002 bc2d 	b.w	142ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

00011a70 <sdc_hci_cmd_le_rand>:
   11a70:	f002 bc55 	b.w	1431e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00011a74 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
   11a74:	f002 bc59 	b.w	1432a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

00011a78 <sdc_hci_cmd_le_read_buffer_size>:
   11a78:	f7fc bac0 	b.w	dffc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00011a7c <sdc_hci_cmd_le_read_channel_map>:
   11a7c:	f7fc bac8 	b.w	e010 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

00011a80 <sdc_hci_cmd_le_read_filter_accept_list_size>:
   11a80:	f002 bca6 	b.w	143d0 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00011a84 <sdc_hci_cmd_le_read_max_adv_data_length>:
   11a84:	f002 bc5a 	b.w	1433c <sym_HN6JPFYV5RALEY5SK42AILWQ3BESLOSWO6JLUAY>

00011a88 <sdc_hci_cmd_le_read_max_data_length>:
   11a88:	f002 bc62 	b.w	14350 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

00011a8c <sdc_hci_cmd_le_read_number_of_supported_adv_sets>:
   11a8c:	f002 bc69 	b.w	14362 <sym_B56D6C76IM4AAFDQEOHND3OAZFOQIH7L5TPFHMY>

00011a90 <sdc_hci_cmd_le_read_phy>:
   11a90:	f7fc bae6 	b.w	e060 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

00011a94 <sdc_hci_cmd_le_read_remote_features>:
   11a94:	f002 bc70 	b.w	14378 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

00011a98 <sdc_hci_cmd_le_read_suggested_default_data_length>:
   11a98:	f7fc bb08 	b.w	e0ac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

00011a9c <sdc_hci_cmd_le_read_transmit_power>:
   11a9c:	f002 bc8f 	b.w	143be <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00011aa0 <sdc_hci_cmd_le_remove_adv_set>:
   11aa0:	f003 b927 	b.w	14cf2 <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA>

00011aa4 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
   11aa4:	f002 bc98 	b.w	143d8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00011aa8 <sdc_hci_cmd_le_set_adv_data>:
   11aa8:	f002 bcb2 	b.w	14410 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00011aac <sdc_hci_cmd_le_set_adv_enable>:
   11aac:	f002 bcc5 	b.w	1443a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

00011ab0 <sdc_hci_cmd_le_set_adv_params>:
   11ab0:	f002 bcf6 	b.w	144a0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00011ab4 <sdc_hci_cmd_le_set_adv_set_random_address>:
   11ab4:	f002 bd6b 	b.w	1458e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>

00011ab8 <sdc_hci_cmd_le_set_data_length>:
   11ab8:	f002 bd87 	b.w	145ca <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

00011abc <sdc_hci_cmd_le_set_default_phy>:
   11abc:	f7fc bb00 	b.w	e0c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

00011ac0 <sdc_hci_cmd_le_set_event_mask>:
   11ac0:	b510      	push	{r4, lr}
   11ac2:	f7f2 ffa3 	bl	4a0c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   11ac6:	2000      	movs	r0, #0
   11ac8:	bd10      	pop	{r4, pc}

00011aca <sdc_hci_cmd_le_set_ext_adv_data>:
   11aca:	f002 bd9e 	b.w	1460a <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A>

00011ace <sdc_hci_cmd_le_set_ext_adv_enable>:
   11ace:	b510      	push	{r4, lr}
   11ad0:	4604      	mov	r4, r0
   11ad2:	2001      	movs	r0, #1
   11ad4:	f7f2 ff4c 	bl	4970 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
   11ad8:	4620      	mov	r0, r4
   11ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ade:	f7fc bb17 	b.w	e110 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I>

00011ae2 <sdc_hci_cmd_le_set_ext_adv_params>:
   11ae2:	f002 bdb1 	b.w	14648 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY>

00011ae6 <sdc_hci_cmd_le_set_ext_scan_response_data>:
   11ae6:	f002 bdcd 	b.w	14684 <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q>

00011aea <sdc_hci_cmd_le_set_host_channel_classification>:
   11aea:	f002 bdea 	b.w	146c2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

00011aee <sdc_hci_cmd_le_set_phy>:
   11aee:	f002 be29 	b.w	14744 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

00011af2 <sdc_hci_cmd_le_set_random_address>:
   11af2:	f002 be40 	b.w	14776 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00011af6 <sdc_hci_cmd_le_set_scan_response_data>:
   11af6:	f002 be4c 	b.w	14792 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

00011afa <sdc_hci_cmd_le_write_suggested_default_data_length>:
   11afa:	f002 be5f 	b.w	147bc <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

00011afe <sdc_hci_cmd_lc_disconnect>:
   11afe:	f002 bae4 	b.w	140ca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

00011b02 <sdc_hci_cmd_lc_read_remote_version_information>:
   11b02:	f002 bfe5 	b.w	14ad0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
   11b06:	1d89      	adds	r1, r1, #6
   11b08:	4408      	add	r0, r1
   11b0a:	4350      	muls	r0, r2
   11b0c:	b280      	uxth	r0, r0
   11b0e:	4770      	bx	lr
   11b10:	b570      	push	{r4, r5, r6, lr}
   11b12:	880b      	ldrh	r3, [r1, #0]
   11b14:	7f04      	ldrb	r4, [r0, #28]
   11b16:	f100 0624 	add.w	r6, r0, #36	; 0x24
   11b1a:	f3c3 050e 	ubfx	r5, r3, #0, #15
   11b1e:	8802      	ldrh	r2, [r0, #0]
   11b20:	442e      	add	r6, r5
   11b22:	1da4      	adds	r4, r4, #6
   11b24:	8836      	ldrh	r6, [r6, #0]
   11b26:	4422      	add	r2, r4
   11b28:	b292      	uxth	r2, r2
   11b2a:	4426      	add	r6, r4
   11b2c:	1e54      	subs	r4, r2, #1
   11b2e:	4434      	add	r4, r6
   11b30:	fb94 f4f2 	sdiv	r4, r4, r2
   11b34:	fb02 5204 	mla	r2, r2, r4, r5
   11b38:	8840      	ldrh	r0, [r0, #2]
   11b3a:	b292      	uxth	r2, r2
   11b3c:	4290      	cmp	r0, r2
   11b3e:	d903      	bls.n	11b48 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   11b40:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
   11b44:	4310      	orrs	r0, r2
   11b46:	e002      	b.n	11b4e <sdc_hci_cmd_lc_read_remote_version_information+0x4c>
   11b48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11b4c:	4398      	bics	r0, r3
   11b4e:	8008      	strh	r0, [r1, #0]
   11b50:	bd70      	pop	{r4, r5, r6, pc}
   11b52:	4288      	cmp	r0, r1
   11b54:	d101      	bne.n	11b5a <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   11b56:	2001      	movs	r0, #1
   11b58:	4770      	bx	lr
   11b5a:	2000      	movs	r0, #0
   11b5c:	4770      	bx	lr
   11b5e:	0442      	lsls	r2, r0, #17
   11b60:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
   11b64:	d107      	bne.n	11b76 <sdc_hci_cmd_lc_read_remote_version_information+0x74>
   11b66:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   11b6a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   11b6e:	4288      	cmp	r0, r1
   11b70:	d001      	beq.n	11b76 <sdc_hci_cmd_lc_read_remote_version_information+0x74>
   11b72:	2001      	movs	r0, #1
   11b74:	4770      	bx	lr
   11b76:	2000      	movs	r0, #0
   11b78:	4770      	bx	lr

00011b7a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
   11b7a:	b570      	push	{r4, r5, r6, lr}
   11b7c:	7f00      	ldrb	r0, [r0, #28]
   11b7e:	461c      	mov	r4, r3
   11b80:	1d80      	adds	r0, r0, #6
   11b82:	4408      	add	r0, r1
   11b84:	4613      	mov	r3, r2
   11b86:	8809      	ldrh	r1, [r1, #0]
   11b88:	9a04      	ldr	r2, [sp, #16]
   11b8a:	1cc9      	adds	r1, r1, #3
   11b8c:	b289      	uxth	r1, r1
   11b8e:	1915      	adds	r5, r2, r4
   11b90:	1ec0      	subs	r0, r0, #3
   11b92:	428d      	cmp	r5, r1
   11b94:	d805      	bhi.n	11ba2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
   11b96:	1881      	adds	r1, r0, r2
   11b98:	4622      	mov	r2, r4
   11b9a:	4618      	mov	r0, r3
   11b9c:	f7ff f98c 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11ba0:	e000      	b.n	11ba4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
   11ba2:	2400      	movs	r4, #0
   11ba4:	4620      	mov	r0, r4
   11ba6:	bd70      	pop	{r4, r5, r6, pc}

00011ba8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
   11ba8:	b570      	push	{r4, r5, r6, lr}
   11baa:	7f00      	ldrb	r0, [r0, #28]
   11bac:	461c      	mov	r4, r3
   11bae:	1d80      	adds	r0, r0, #6
   11bb0:	4408      	add	r0, r1
   11bb2:	4613      	mov	r3, r2
   11bb4:	8809      	ldrh	r1, [r1, #0]
   11bb6:	9a04      	ldr	r2, [sp, #16]
   11bb8:	1cc9      	adds	r1, r1, #3
   11bba:	b289      	uxth	r1, r1
   11bbc:	1915      	adds	r5, r2, r4
   11bbe:	1ec0      	subs	r0, r0, #3
   11bc0:	428d      	cmp	r5, r1
   11bc2:	d805      	bhi.n	11bd0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
   11bc4:	4410      	add	r0, r2
   11bc6:	4622      	mov	r2, r4
   11bc8:	4619      	mov	r1, r3
   11bca:	f7ff f975 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11bce:	e000      	b.n	11bd2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
   11bd0:	2400      	movs	r4, #0
   11bd2:	4620      	mov	r0, r4
   11bd4:	bd70      	pop	{r4, r5, r6, pc}

00011bd6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   11bd6:	88c1      	ldrh	r1, [r0, #6]
   11bd8:	8880      	ldrh	r0, [r0, #4]
   11bda:	f7ff bfba 	b.w	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>

00011bde <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
   11bde:	8881      	ldrh	r1, [r0, #4]
   11be0:	8900      	ldrh	r0, [r0, #8]
   11be2:	f7ff bfb6 	b.w	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>

00011be6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   11be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bea:	460f      	mov	r7, r1
   11bec:	4604      	mov	r4, r0
   11bee:	f100 0124 	add.w	r1, r0, #36	; 0x24
   11bf2:	8880      	ldrh	r0, [r0, #4]
   11bf4:	2600      	movs	r6, #0
   11bf6:	f3c0 000e 	ubfx	r0, r0, #0, #15
   11bfa:	1845      	adds	r5, r0, r1
   11bfc:	603e      	str	r6, [r7, #0]
   11bfe:	8a20      	ldrh	r0, [r4, #16]
   11c00:	2800      	cmp	r0, #0
   11c02:	d01a      	beq.n	11c3a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
   11c04:	89a1      	ldrh	r1, [r4, #12]
   11c06:	4408      	add	r0, r1
   11c08:	b280      	uxth	r0, r0
   11c0a:	81a0      	strh	r0, [r4, #12]
   11c0c:	8829      	ldrh	r1, [r5, #0]
   11c0e:	4288      	cmp	r0, r1
   11c10:	d905      	bls.n	11c1e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
   11c12:	f44f 71b3 	mov.w	r1, #358	; 0x166
   11c16:	f04f 0014 	mov.w	r0, #20
   11c1a:	f7f2 fd4f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11c1e:	d10a      	bne.n	11c36 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
   11c20:	69a0      	ldr	r0, [r4, #24]
   11c22:	b108      	cbz	r0, 11c28 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
   11c24:	7f40      	ldrb	r0, [r0, #29]
   11c26:	70a8      	strb	r0, [r5, #2]
   11c28:	f104 0104 	add.w	r1, r4, #4
   11c2c:	4620      	mov	r0, r4
   11c2e:	f7ff ff6f 	bl	11b10 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   11c32:	81a6      	strh	r6, [r4, #12]
   11c34:	603d      	str	r5, [r7, #0]
   11c36:	8226      	strh	r6, [r4, #16]
   11c38:	2001      	movs	r0, #1
   11c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011c3e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   11c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c40:	4604      	mov	r4, r0
   11c42:	f100 0324 	add.w	r3, r0, #36	; 0x24
   11c46:	88c0      	ldrh	r0, [r0, #6]
   11c48:	460f      	mov	r7, r1
   11c4a:	f3c0 060e 	ubfx	r6, r0, #0, #15
   11c4e:	8a60      	ldrh	r0, [r4, #18]
   11c50:	1999      	adds	r1, r3, r6
   11c52:	b108      	cbz	r0, 11c58 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
   11c54:	42b8      	cmp	r0, r7
   11c56:	d201      	bcs.n	11c5c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
   11c58:	2000      	movs	r0, #0
   11c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c5c:	89e0      	ldrh	r0, [r4, #14]
   11c5e:	2500      	movs	r5, #0
   11c60:	b140      	cbz	r0, 11c74 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
   11c62:	f8b1 c000 	ldrh.w	ip, [r1]
   11c66:	4560      	cmp	r0, ip
   11c68:	d008      	beq.n	11c7c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
   11c6a:	f240 2151 	movw	r1, #593	; 0x251
   11c6e:	2014      	movs	r0, #20
   11c70:	f7f2 fd24 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11c74:	7f60      	ldrb	r0, [r4, #29]
   11c76:	7088      	strb	r0, [r1, #2]
   11c78:	800d      	strh	r5, [r1, #0]
   11c7a:	e00e      	b.n	11c9a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   11c7c:	f894 c01c 	ldrb.w	ip, [r4, #28]
   11c80:	4418      	add	r0, r3
   11c82:	f10c 0c06 	add.w	ip, ip, #6
   11c86:	44b4      	add	ip, r6
   11c88:	4460      	add	r0, ip
   11c8a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   11c8e:	f820 cc03 	strh.w	ip, [r0, #-3]
   11c92:	f894 c020 	ldrb.w	ip, [r4, #32]
   11c96:	f800 cc01 	strb.w	ip, [r0, #-1]
   11c9a:	89e0      	ldrh	r0, [r4, #14]
   11c9c:	4438      	add	r0, r7
   11c9e:	81e0      	strh	r0, [r4, #14]
   11ca0:	8808      	ldrh	r0, [r1, #0]
   11ca2:	4438      	add	r0, r7
   11ca4:	8008      	strh	r0, [r1, #0]
   11ca6:	b19a      	cbz	r2, 11cd0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
   11ca8:	1da1      	adds	r1, r4, #6
   11caa:	4620      	mov	r0, r4
   11cac:	f7ff ff30 	bl	11b10 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   11cb0:	81e5      	strh	r5, [r4, #14]
   11cb2:	7f60      	ldrb	r0, [r4, #29]
   11cb4:	1c40      	adds	r0, r0, #1
   11cb6:	7760      	strb	r0, [r4, #29]
   11cb8:	7da0      	ldrb	r0, [r4, #22]
   11cba:	f88d 0000 	strb.w	r0, [sp]
   11cbe:	9800      	ldr	r0, [sp, #0]
   11cc0:	9000      	str	r0, [sp, #0]
   11cc2:	f89d 0000 	ldrb.w	r0, [sp]
   11cc6:	b178      	cbz	r0, 11ce8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   11cc8:	88e0      	ldrh	r0, [r4, #6]
   11cca:	82a0      	strh	r0, [r4, #20]
   11ccc:	75a5      	strb	r5, [r4, #22]
   11cce:	e00b      	b.n	11ce8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   11cd0:	7f20      	ldrb	r0, [r4, #28]
   11cd2:	89e1      	ldrh	r1, [r4, #14]
   11cd4:	1d80      	adds	r0, r0, #6
   11cd6:	4430      	add	r0, r6
   11cd8:	4419      	add	r1, r3
   11cda:	4408      	add	r0, r1
   11cdc:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   11ce0:	83e1      	strh	r1, [r4, #30]
   11ce2:	7880      	ldrb	r0, [r0, #2]
   11ce4:	f884 0020 	strb.w	r0, [r4, #32]
   11ce8:	8265      	strh	r5, [r4, #18]
   11cea:	2001      	movs	r0, #1
   11cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011cee <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
   11cee:	1cc0      	adds	r0, r0, #3
   11cf0:	4770      	bx	lr

00011cf2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   11cf2:	b510      	push	{r4, lr}
   11cf4:	4604      	mov	r4, r0
   11cf6:	88c1      	ldrh	r1, [r0, #6]
   11cf8:	8880      	ldrh	r0, [r0, #4]
   11cfa:	f7ff ff2a 	bl	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   11cfe:	b938      	cbnz	r0, 11d10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
   11d00:	89a0      	ldrh	r0, [r4, #12]
   11d02:	b928      	cbnz	r0, 11d10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
   11d04:	8a20      	ldrh	r0, [r4, #16]
   11d06:	b918      	cbnz	r0, 11d10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
   11d08:	88a0      	ldrh	r0, [r4, #4]
   11d0a:	8aa1      	ldrh	r1, [r4, #20]
   11d0c:	4288      	cmp	r0, r1
   11d0e:	d101      	bne.n	11d14 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x22>
   11d10:	2000      	movs	r0, #0
   11d12:	bd10      	pop	{r4, pc}
   11d14:	1d21      	adds	r1, r4, #4
   11d16:	4620      	mov	r0, r4
   11d18:	f7ff fefa 	bl	11b10 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   11d1c:	2000      	movs	r0, #0
   11d1e:	8220      	strh	r0, [r4, #16]
   11d20:	2001      	movs	r0, #1
   11d22:	bd10      	pop	{r4, pc}

00011d24 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
   11d24:	b510      	push	{r4, lr}
   11d26:	4604      	mov	r4, r0
   11d28:	f100 0324 	add.w	r3, r0, #36	; 0x24
   11d2c:	88c0      	ldrh	r0, [r0, #6]
   11d2e:	f3c0 000e 	ubfx	r0, r0, #0, #15
   11d32:	181a      	adds	r2, r3, r0
   11d34:	8820      	ldrh	r0, [r4, #0]
   11d36:	2845      	cmp	r0, #69	; 0x45
   11d38:	d200      	bcs.n	11d3c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
   11d3a:	2045      	movs	r0, #69	; 0x45
   11d3c:	4288      	cmp	r0, r1
   11d3e:	d204      	bcs.n	11d4a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
   11d40:	f240 1119 	movw	r1, #281	; 0x119
   11d44:	2014      	movs	r0, #20
   11d46:	f7f2 fcb9 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d4a:	7de0      	ldrb	r0, [r4, #23]
   11d4c:	2800      	cmp	r0, #0
   11d4e:	d003      	beq.n	11d58 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
   11d50:	8810      	ldrh	r0, [r2, #0]
   11d52:	4288      	cmp	r0, r1
   11d54:	d201      	bcs.n	11d5a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
   11d56:	2000      	movs	r0, #0
   11d58:	bd10      	pop	{r4, pc}
   11d5a:	8011      	strh	r1, [r2, #0]
   11d5c:	1da1      	adds	r1, r4, #6
   11d5e:	4620      	mov	r0, r4
   11d60:	f7ff fed6 	bl	11b10 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   11d64:	2000      	movs	r0, #0
   11d66:	75e0      	strb	r0, [r4, #23]
   11d68:	2001      	movs	r0, #1
   11d6a:	bd10      	pop	{r4, pc}

00011d6c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   11d6c:	b570      	push	{r4, r5, r6, lr}
   11d6e:	4604      	mov	r4, r0
   11d70:	f100 0224 	add.w	r2, r0, #36	; 0x24
   11d74:	88c1      	ldrh	r1, [r0, #6]
   11d76:	8880      	ldrh	r0, [r0, #4]
   11d78:	f3c0 030e 	ubfx	r3, r0, #0, #15
   11d7c:	18d5      	adds	r5, r2, r3
   11d7e:	88a2      	ldrh	r2, [r4, #4]
   11d80:	8aa3      	ldrh	r3, [r4, #20]
   11d82:	429a      	cmp	r2, r3
   11d84:	d013      	beq.n	11dae <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   11d86:	f7ff fee4 	bl	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   11d8a:	b980      	cbnz	r0, 11dae <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   11d8c:	89a0      	ldrh	r0, [r4, #12]
   11d8e:	b970      	cbnz	r0, 11dae <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   11d90:	69a4      	ldr	r4, [r4, #24]
   11d92:	b174      	cbz	r4, 11db2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   11d94:	4620      	mov	r0, r4
   11d96:	f7ff ff22 	bl	11bde <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
   11d9a:	b950      	cbnz	r0, 11db2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   11d9c:	8920      	ldrh	r0, [r4, #8]
   11d9e:	3424      	adds	r4, #36	; 0x24
   11da0:	f3c0 000e 	ubfx	r0, r0, #0, #15
   11da4:	4420      	add	r0, r4
   11da6:	78a9      	ldrb	r1, [r5, #2]
   11da8:	7880      	ldrb	r0, [r0, #2]
   11daa:	4288      	cmp	r0, r1
   11dac:	d101      	bne.n	11db2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   11dae:	2000      	movs	r0, #0
   11db0:	bd70      	pop	{r4, r5, r6, pc}
   11db2:	4628      	mov	r0, r5
   11db4:	bd70      	pop	{r4, r5, r6, pc}

00011db6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   11db6:	7f00      	ldrb	r0, [r0, #28]
   11db8:	1d80      	adds	r0, r0, #6
   11dba:	4408      	add	r0, r1
   11dbc:	1ec0      	subs	r0, r0, #3
   11dbe:	6010      	str	r0, [r2, #0]
   11dc0:	8808      	ldrh	r0, [r1, #0]
   11dc2:	4770      	bx	lr

00011dc4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
   11dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11dc8:	460e      	mov	r6, r1
   11dca:	4604      	mov	r4, r0
   11dcc:	88c1      	ldrh	r1, [r0, #6]
   11dce:	f100 0824 	add.w	r8, r0, #36	; 0x24
   11dd2:	8900      	ldrh	r0, [r0, #8]
   11dd4:	8822      	ldrh	r2, [r4, #0]
   11dd6:	f3c1 050e 	ubfx	r5, r1, #0, #15
   11dda:	f3c0 070e 	ubfx	r7, r0, #0, #15
   11dde:	2a45      	cmp	r2, #69	; 0x45
   11de0:	d200      	bcs.n	11de4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
   11de2:	2245      	movs	r2, #69	; 0x45
   11de4:	42b2      	cmp	r2, r6
   11de6:	d203      	bcs.n	11df0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
   11de8:	21db      	movs	r1, #219	; 0xdb
   11dea:	2014      	movs	r0, #20
   11dec:	f7f2 fc66 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11df0:	f7ff feb5 	bl	11b5e <sdc_hci_cmd_lc_read_remote_version_information+0x5c>
   11df4:	b110      	cbz	r0, 11dfc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x38>
   11df6:	2000      	movs	r0, #0
   11df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11dfc:	42af      	cmp	r7, r5
   11dfe:	d908      	bls.n	11e12 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x4e>
   11e00:	7f20      	ldrb	r0, [r4, #28]
   11e02:	1b79      	subs	r1, r7, r5
   11e04:	1d80      	adds	r0, r0, #6
   11e06:	1a08      	subs	r0, r1, r0
   11e08:	4286      	cmp	r6, r0
   11e0a:	dd02      	ble.n	11e12 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x4e>
   11e0c:	2000      	movs	r0, #0
   11e0e:	75e0      	strb	r0, [r4, #23]
   11e10:	e7f1      	b.n	11df6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x32>
   11e12:	eb08 0005 	add.w	r0, r8, r5
   11e16:	2101      	movs	r1, #1
   11e18:	8006      	strh	r6, [r0, #0]
   11e1a:	75e1      	strb	r1, [r4, #23]
   11e1c:	e7ec      	b.n	11df8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>

00011e1e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   11e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e20:	88c6      	ldrh	r6, [r0, #6]
   11e22:	8885      	ldrh	r5, [r0, #4]
   11e24:	4604      	mov	r4, r0
   11e26:	f100 0224 	add.w	r2, r0, #36	; 0x24
   11e2a:	f3c5 000e 	ubfx	r0, r5, #0, #15
   11e2e:	1817      	adds	r7, r2, r0
   11e30:	4631      	mov	r1, r6
   11e32:	4628      	mov	r0, r5
   11e34:	f7ff fe8d 	bl	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   11e38:	b108      	cbz	r0, 11e3e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x20>
   11e3a:	2000      	movs	r0, #0
   11e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e3e:	89a0      	ldrh	r0, [r4, #12]
   11e40:	8a21      	ldrh	r1, [r4, #16]
   11e42:	4408      	add	r0, r1
   11e44:	8839      	ldrh	r1, [r7, #0]
   11e46:	4288      	cmp	r0, r1
   11e48:	d201      	bcs.n	11e4e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x30>
   11e4a:	2001      	movs	r0, #1
   11e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e4e:	f8ad 5000 	strh.w	r5, [sp]
   11e52:	4669      	mov	r1, sp
   11e54:	4620      	mov	r0, r4
   11e56:	f7ff fe5b 	bl	11b10 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   11e5a:	4631      	mov	r1, r6
   11e5c:	f8bd 0000 	ldrh.w	r0, [sp]
   11e60:	f7ff fe77 	bl	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   11e64:	f080 0001 	eor.w	r0, r0, #1
   11e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011e6a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   11e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e6e:	4617      	mov	r7, r2
   11e70:	460d      	mov	r5, r1
   11e72:	4604      	mov	r4, r0
   11e74:	f100 0124 	add.w	r1, r0, #36	; 0x24
   11e78:	88c2      	ldrh	r2, [r0, #6]
   11e7a:	8880      	ldrh	r0, [r0, #4]
   11e7c:	f3c0 030e 	ubfx	r3, r0, #0, #15
   11e80:	18ce      	adds	r6, r1, r3
   11e82:	4611      	mov	r1, r2
   11e84:	f7ff fe65 	bl	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   11e88:	b118      	cbz	r0, 11e92 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x28>
   11e8a:	2000      	movs	r0, #0
   11e8c:	8220      	strh	r0, [r4, #16]
   11e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e92:	8830      	ldrh	r0, [r6, #0]
   11e94:	89a1      	ldrh	r1, [r4, #12]
   11e96:	7f22      	ldrb	r2, [r4, #28]
   11e98:	1a40      	subs	r0, r0, r1
   11e9a:	4411      	add	r1, r2
   11e9c:	4431      	add	r1, r6
   11e9e:	882a      	ldrh	r2, [r5, #0]
   11ea0:	b280      	uxth	r0, r0
   11ea2:	1cc9      	adds	r1, r1, #3
   11ea4:	4282      	cmp	r2, r0
   11ea6:	d900      	bls.n	11eaa <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x40>
   11ea8:	8028      	strh	r0, [r5, #0]
   11eaa:	89a0      	ldrh	r0, [r4, #12]
   11eac:	b128      	cbz	r0, 11eba <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
   11eae:	2000      	movs	r0, #0
   11eb0:	7038      	strb	r0, [r7, #0]
   11eb2:	8828      	ldrh	r0, [r5, #0]
   11eb4:	8220      	strh	r0, [r4, #16]
   11eb6:	4608      	mov	r0, r1
   11eb8:	e7e9      	b.n	11e8e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x24>
   11eba:	2001      	movs	r0, #1
   11ebc:	e7f8      	b.n	11eb0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x46>

00011ebe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
   11ebe:	b508      	push	{r3, lr}
   11ec0:	8a81      	ldrh	r1, [r0, #20]
   11ec2:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   11ec6:	3aff      	subs	r2, #255	; 0xff
   11ec8:	d008      	beq.n	11edc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
   11eca:	7d82      	ldrb	r2, [r0, #22]
   11ecc:	f88d 2000 	strb.w	r2, [sp]
   11ed0:	9a00      	ldr	r2, [sp, #0]
   11ed2:	9200      	str	r2, [sp, #0]
   11ed4:	f89d 2000 	ldrb.w	r2, [sp]
   11ed8:	b95a      	cbnz	r2, 11ef2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x34>
   11eda:	e004      	b.n	11ee6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
   11edc:	f240 318e 	movw	r1, #910	; 0x38e
   11ee0:	2014      	movs	r0, #20
   11ee2:	f7f2 fbeb 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11ee6:	8880      	ldrh	r0, [r0, #4]
   11ee8:	f7ff fe33 	bl	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   11eec:	b108      	cbz	r0, 11ef2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x34>
   11eee:	2000      	movs	r0, #0
   11ef0:	bd08      	pop	{r3, pc}
   11ef2:	2001      	movs	r0, #1
   11ef4:	bd08      	pop	{r3, pc}

00011ef6 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
   11ef6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11efa:	8281      	strh	r1, [r0, #20]
   11efc:	2100      	movs	r1, #0
   11efe:	7581      	strb	r1, [r0, #22]
   11f00:	4770      	bx	lr

00011f02 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
   11f02:	b510      	push	{r4, lr}
   11f04:	8a81      	ldrh	r1, [r0, #20]
   11f06:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   11f0a:	3aff      	subs	r2, #255	; 0xff
   11f0c:	d004      	beq.n	11f18 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
   11f0e:	f240 316a 	movw	r1, #874	; 0x36a
   11f12:	2014      	movs	r0, #20
   11f14:	f7f2 fbd2 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11f18:	88c1      	ldrh	r1, [r0, #6]
   11f1a:	8281      	strh	r1, [r0, #20]
   11f1c:	89c1      	ldrh	r1, [r0, #14]
   11f1e:	b109      	cbz	r1, 11f24 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
   11f20:	21ff      	movs	r1, #255	; 0xff
   11f22:	e000      	b.n	11f26 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
   11f24:	2100      	movs	r1, #0
   11f26:	7581      	strb	r1, [r0, #22]
   11f28:	bd10      	pop	{r4, pc}

00011f2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   11f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f2e:	4616      	mov	r6, r2
   11f30:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11f34:	460f      	mov	r7, r1
   11f36:	4604      	mov	r4, r0
   11f38:	461d      	mov	r5, r3
   11f3a:	4642      	mov	r2, r8
   11f3c:	4619      	mov	r1, r3
   11f3e:	4630      	mov	r0, r6
   11f40:	f000 f855 	bl	11fee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   11f44:	4287      	cmp	r7, r0
   11f46:	d201      	bcs.n	11f4c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x22>
   11f48:	21a8      	movs	r1, #168	; 0xa8
   11f4a:	e019      	b.n	11f80 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x56>
   11f4c:	1ce0      	adds	r0, r4, #3
   11f4e:	f020 0103 	bic.w	r1, r0, #3
   11f52:	4620      	mov	r0, r4
   11f54:	42a1      	cmp	r1, r4
   11f56:	d001      	beq.n	11f5c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x32>
   11f58:	21a9      	movs	r1, #169	; 0xa9
   11f5a:	e011      	b.n	11f80 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x56>
   11f5c:	2224      	movs	r2, #36	; 0x24
   11f5e:	2100      	movs	r1, #0
   11f60:	f7ff f824 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   11f64:	f64f 70ff 	movw	r0, #65535	; 0xffff
   11f68:	82a0      	strh	r0, [r4, #20]
   11f6a:	7725      	strb	r5, [r4, #28]
   11f6c:	4642      	mov	r2, r8
   11f6e:	4629      	mov	r1, r5
   11f70:	4630      	mov	r0, r6
   11f72:	f7ff fdc8 	bl	11b06 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   11f76:	8060      	strh	r0, [r4, #2]
   11f78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   11f7c:	d903      	bls.n	11f86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x5c>
   11f7e:	21af      	movs	r1, #175	; 0xaf
   11f80:	2014      	movs	r0, #20
   11f82:	f7f2 fb9b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11f86:	8026      	strh	r6, [r4, #0]
   11f88:	2000      	movs	r0, #0
   11f8a:	7760      	strb	r0, [r4, #29]
   11f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011f90 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
   11f90:	6181      	str	r1, [r0, #24]
   11f92:	6188      	str	r0, [r1, #24]
   11f94:	4770      	bx	lr

00011f96 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   11f96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11f9a:	4689      	mov	r9, r1
   11f9c:	4604      	mov	r4, r0
   11f9e:	f100 0124 	add.w	r1, r0, #36	; 0x24
   11fa2:	8906      	ldrh	r6, [r0, #8]
   11fa4:	f8b0 800a 	ldrh.w	r8, [r0, #10]
   11fa8:	8880      	ldrh	r0, [r0, #4]
   11faa:	4617      	mov	r7, r2
   11fac:	f3c6 020e 	ubfx	r2, r6, #0, #15
   11fb0:	188d      	adds	r5, r1, r2
   11fb2:	4601      	mov	r1, r0
   11fb4:	4630      	mov	r0, r6
   11fb6:	f7ff fdcc 	bl	11b52 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   11fba:	b110      	cbz	r0, 11fc2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2c>
   11fbc:	2000      	movs	r0, #0
   11fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11fc2:	b10f      	cbz	r7, 11fc8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x32>
   11fc4:	1ce8      	adds	r0, r5, #3
   11fc6:	6038      	str	r0, [r7, #0]
   11fc8:	f1b9 0000 	subs.w	r0, r9, #0
   11fcc:	d003      	beq.n	11fd6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x40>
   11fce:	7f22      	ldrb	r2, [r4, #28]
   11fd0:	1ce9      	adds	r1, r5, #3
   11fd2:	f7fe ff71 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11fd6:	882d      	ldrh	r5, [r5, #0]
   11fd8:	f104 0108 	add.w	r1, r4, #8
   11fdc:	4620      	mov	r0, r4
   11fde:	f7ff fd97 	bl	11b10 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   11fe2:	4546      	cmp	r6, r8
   11fe4:	d101      	bne.n	11fea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x54>
   11fe6:	8920      	ldrh	r0, [r4, #8]
   11fe8:	8160      	strh	r0, [r4, #10]
   11fea:	4628      	mov	r0, r5
   11fec:	e7e7      	b.n	11fbe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>

00011fee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   11fee:	b510      	push	{r4, lr}
   11ff0:	4604      	mov	r4, r0
   11ff2:	f7ff fd88 	bl	11b06 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   11ff6:	2100      	movs	r1, #0
   11ff8:	2c45      	cmp	r4, #69	; 0x45
   11ffa:	d202      	bcs.n	12002 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
   11ffc:	f1c4 0145 	rsb	r1, r4, #69	; 0x45
   12000:	b289      	uxth	r1, r1
   12002:	3024      	adds	r0, #36	; 0x24
   12004:	4408      	add	r0, r1
   12006:	b280      	uxth	r0, r0
   12008:	bd10      	pop	{r4, pc}

0001200a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   1200a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1200e:	4688      	mov	r8, r1
   12010:	88c1      	ldrh	r1, [r0, #6]
   12012:	4604      	mov	r4, r0
   12014:	8900      	ldrh	r0, [r0, #8]
   12016:	f3c1 050e 	ubfx	r5, r1, #0, #15
   1201a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   1201e:	f3c0 070e 	ubfx	r7, r0, #0, #15
   12022:	eb06 0905 	add.w	r9, r6, r5
   12026:	f7ff fd9a 	bl	11b5e <sdc_hci_cmd_lc_read_remote_version_information+0x5c>
   1202a:	2200      	movs	r2, #0
   1202c:	b998      	cbnz	r0, 12056 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
   1202e:	8820      	ldrh	r0, [r4, #0]
   12030:	2845      	cmp	r0, #69	; 0x45
   12032:	d200      	bcs.n	12036 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
   12034:	2045      	movs	r0, #69	; 0x45
   12036:	42af      	cmp	r7, r5
   12038:	d906      	bls.n	12048 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   1203a:	7f21      	ldrb	r1, [r4, #28]
   1203c:	1b7b      	subs	r3, r7, r5
   1203e:	1d89      	adds	r1, r1, #6
   12040:	1a59      	subs	r1, r3, r1
   12042:	4281      	cmp	r1, r0
   12044:	da00      	bge.n	12048 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   12046:	4608      	mov	r0, r1
   12048:	89e1      	ldrh	r1, [r4, #14]
   1204a:	b111      	cbz	r1, 12052 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
   1204c:	f8b9 3000 	ldrh.w	r3, [r9]
   12050:	1ac0      	subs	r0, r0, r3
   12052:	4540      	cmp	r0, r8
   12054:	da03      	bge.n	1205e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
   12056:	8262      	strh	r2, [r4, #18]
   12058:	2000      	movs	r0, #0
   1205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1205e:	7f20      	ldrb	r0, [r4, #28]
   12060:	4431      	add	r1, r6
   12062:	1d80      	adds	r0, r0, #6
   12064:	4428      	add	r0, r5
   12066:	4408      	add	r0, r1
   12068:	f8a4 8012 	strh.w	r8, [r4, #18]
   1206c:	1ec0      	subs	r0, r0, #3
   1206e:	e7f4      	b.n	1205a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

00012070 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   12070:	2100      	movs	r1, #0
   12072:	81c1      	strh	r1, [r0, #14]
   12074:	8241      	strh	r1, [r0, #18]
   12076:	7581      	strb	r1, [r0, #22]
   12078:	4770      	bx	lr

0001207a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   1207a:	b570      	push	{r4, r5, r6, lr}
   1207c:	2300      	movs	r3, #0
   1207e:	f1a1 0208 	sub.w	r2, r1, #8
   12082:	f64f 74f7 	movw	r4, #65527	; 0xfff7
   12086:	42a2      	cmp	r2, r4
   12088:	d304      	bcc.n	12094 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   1208a:	f240 11cd 	movw	r1, #461	; 0x1cd
   1208e:	2015      	movs	r0, #21
   12090:	f7f2 fb14 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12094:	6802      	ldr	r2, [r0, #0]
   12096:	b90a      	cbnz	r2, 1209c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
   12098:	e01e      	b.n	120d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
   1209a:	4610      	mov	r0, r2
   1209c:	6802      	ldr	r2, [r0, #0]
   1209e:	8893      	ldrh	r3, [r2, #4]
   120a0:	428b      	cmp	r3, r1
   120a2:	d002      	beq.n	120aa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
   120a4:	6813      	ldr	r3, [r2, #0]
   120a6:	2b00      	cmp	r3, #0
   120a8:	d1f7      	bne.n	1209a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
   120aa:	8894      	ldrh	r4, [r2, #4]
   120ac:	4613      	mov	r3, r2
   120ae:	428c      	cmp	r4, r1
   120b0:	d101      	bne.n	120b6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
   120b2:	6811      	ldr	r1, [r2, #0]
   120b4:	e00d      	b.n	120d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
   120b6:	f101 0508 	add.w	r5, r1, #8
   120ba:	b2ad      	uxth	r5, r5
   120bc:	42ac      	cmp	r4, r5
   120be:	d30a      	bcc.n	120d6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
   120c0:	1a64      	subs	r4, r4, r1
   120c2:	4411      	add	r1, r2
   120c4:	2200      	movs	r2, #0
   120c6:	600a      	str	r2, [r1, #0]
   120c8:	808c      	strh	r4, [r1, #4]
   120ca:	6802      	ldr	r2, [r0, #0]
   120cc:	6812      	ldr	r2, [r2, #0]
   120ce:	6002      	str	r2, [r0, #0]
   120d0:	600a      	str	r2, [r1, #0]
   120d2:	6001      	str	r1, [r0, #0]
   120d4:	e000      	b.n	120d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
   120d6:	2300      	movs	r3, #0
   120d8:	4618      	mov	r0, r3
   120da:	bd70      	pop	{r4, r5, r6, pc}

000120dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   120dc:	b510      	push	{r4, lr}
   120de:	000c      	movs	r4, r1
   120e0:	d004      	beq.n	120ec <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
   120e2:	2c08      	cmp	r4, #8
   120e4:	d207      	bcs.n	120f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   120e6:	f240 1195 	movw	r1, #405	; 0x195
   120ea:	e00a      	b.n	12102 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
   120ec:	b108      	cbz	r0, 120f2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
   120ee:	2100      	movs	r1, #0
   120f0:	6001      	str	r1, [r0, #0]
   120f2:	2000      	movs	r0, #0
   120f4:	bd10      	pop	{r4, pc}
   120f6:	b158      	cbz	r0, 12110 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
   120f8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   120fc:	d304      	bcc.n	12108 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
   120fe:	f240 11a7 	movw	r1, #423	; 0x1a7
   12102:	2015      	movs	r0, #21
   12104:	f7f2 fada 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12108:	b2a1      	uxth	r1, r4
   1210a:	6800      	ldr	r0, [r0, #0]
   1210c:	f000 f814 	bl	12138 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   12110:	1d20      	adds	r0, r4, #4
   12112:	bd10      	pop	{r4, pc}

00012114 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   12114:	2100      	movs	r1, #0
   12116:	6802      	ldr	r2, [r0, #0]
   12118:	e003      	b.n	12122 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   1211a:	8893      	ldrh	r3, [r2, #4]
   1211c:	6812      	ldr	r2, [r2, #0]
   1211e:	4419      	add	r1, r3
   12120:	b289      	uxth	r1, r1
   12122:	2a00      	cmp	r2, #0
   12124:	d1f9      	bne.n	1211a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   12126:	f000 b807 	b.w	12138 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0001212a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   1212a:	2300      	movs	r3, #0
   1212c:	600b      	str	r3, [r1, #0]
   1212e:	808a      	strh	r2, [r1, #4]
   12130:	6802      	ldr	r2, [r0, #0]
   12132:	600a      	str	r2, [r1, #0]
   12134:	6001      	str	r1, [r0, #0]
   12136:	4770      	bx	lr
   12138:	2300      	movs	r3, #0
   1213a:	6043      	str	r3, [r0, #4]
   1213c:	1d02      	adds	r2, r0, #4
   1213e:	8101      	strh	r1, [r0, #8]
   12140:	6002      	str	r2, [r0, #0]
   12142:	4770      	bx	lr

00012144 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
   12144:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   12146:	4604      	mov	r4, r0
   12148:	4669      	mov	r1, sp
   1214a:	f000 f829 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1214e:	b168      	cbz	r0, 1216c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x28>
   12150:	f240 215a 	movw	r1, #602	; 0x25a
   12154:	e007      	b.n	12166 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x22>
   12156:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1215a:	4621      	mov	r1, r4
   1215c:	f7f2 fd8a 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12160:	b120      	cbz	r0, 1216c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x28>
   12162:	f240 215f 	movw	r1, #607	; 0x25f
   12166:	2017      	movs	r0, #23
   12168:	f7f2 faa8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1216c:	4668      	mov	r0, sp
   1216e:	f7f2 fd0f 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   12172:	2800      	cmp	r0, #0
   12174:	d0ef      	beq.n	12156 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x12>
   12176:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00012178 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
   12178:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
   1217c:	3bff      	subs	r3, #255	; 0xff
   1217e:	d001      	beq.n	12184 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
   12180:	2905      	cmp	r1, #5
   12182:	d301      	bcc.n	12188 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
   12184:	2000      	movs	r0, #0
   12186:	4770      	bx	lr
   12188:	f7f2 bda6 	b.w	4cd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0001218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   1218c:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   12190:	3aff      	subs	r2, #255	; 0xff
   12192:	d001      	beq.n	12198 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   12194:	2905      	cmp	r1, #5
   12196:	d301      	bcc.n	1219c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   12198:	2000      	movs	r0, #0
   1219a:	4770      	bx	lr
   1219c:	f7f2 bdd6 	b.w	4d4c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

000121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   121a0:	b570      	push	{r4, r5, r6, lr}
   121a2:	4605      	mov	r5, r0
   121a4:	460c      	mov	r4, r1
   121a6:	4608      	mov	r0, r1
   121a8:	f000 f9bd 	bl	12526 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   121ac:	b108      	cbz	r0, 121b2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   121ae:	2010      	movs	r0, #16
   121b0:	bd70      	pop	{r4, r5, r6, pc}
   121b2:	2d05      	cmp	r5, #5
   121b4:	d301      	bcc.n	121ba <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
   121b6:	2007      	movs	r0, #7
   121b8:	bd70      	pop	{r4, r5, r6, pc}
   121ba:	7025      	strb	r5, [r4, #0]
   121bc:	2000      	movs	r0, #0
   121be:	8060      	strh	r0, [r4, #2]
   121c0:	bd70      	pop	{r4, r5, r6, pc}
   121c2:	b510      	push	{r4, lr}
   121c4:	4604      	mov	r4, r0
   121c6:	f7f2 fe0d 	bl	4de4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
   121ca:	42a0      	cmp	r0, r4
   121cc:	d901      	bls.n	121d2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
   121ce:	2001      	movs	r0, #1
   121d0:	bd10      	pop	{r4, pc}
   121d2:	2000      	movs	r0, #0
   121d4:	bd10      	pop	{r4, pc}
   121d6:	4770      	bx	lr

000121d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   121d8:	b570      	push	{r4, r5, r6, lr}
   121da:	460e      	mov	r6, r1
   121dc:	461d      	mov	r5, r3
   121de:	4611      	mov	r1, r2
   121e0:	f000 f813 	bl	1220a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
   121e4:	4604      	mov	r4, r0
   121e6:	4629      	mov	r1, r5
   121e8:	4630      	mov	r0, r6
   121ea:	f000 f804 	bl	121f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
   121ee:	4420      	add	r0, r4
   121f0:	1d00      	adds	r0, r0, #4
   121f2:	b280      	uxth	r0, r0
   121f4:	bd70      	pop	{r4, r5, r6, pc}
   121f6:	b510      	push	{r4, lr}
   121f8:	460a      	mov	r2, r1
   121fa:	2101      	movs	r1, #1
   121fc:	f7ff fef7 	bl	11fee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   12200:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   12204:	1cc0      	adds	r0, r0, #3
   12206:	4008      	ands	r0, r1
   12208:	bd10      	pop	{r4, pc}
   1220a:	b510      	push	{r4, lr}
   1220c:	460a      	mov	r2, r1
   1220e:	210a      	movs	r1, #10
   12210:	f7ff feed 	bl	11fee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   12214:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   12218:	1cc0      	adds	r0, r0, #3
   1221a:	4008      	ands	r0, r1
   1221c:	bd10      	pop	{r4, pc}
   1221e:	b510      	push	{r4, lr}
   12220:	4604      	mov	r4, r0
   12222:	4608      	mov	r0, r1
   12224:	f000 f815 	bl	12252 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   12228:	1821      	adds	r1, r4, r0
   1222a:	7d0a      	ldrb	r2, [r1, #20]
   1222c:	2a02      	cmp	r2, #2
   1222e:	d008      	beq.n	12242 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
   12230:	7d49      	ldrb	r1, [r1, #21]
   12232:	2902      	cmp	r1, #2
   12234:	d009      	beq.n	1224a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
   12236:	2a03      	cmp	r2, #3
   12238:	d003      	beq.n	12242 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
   1223a:	2903      	cmp	r1, #3
   1223c:	d005      	beq.n	1224a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
   1223e:	2000      	movs	r0, #0
   12240:	bd10      	pop	{r4, pc}
   12242:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   12246:	8b00      	ldrh	r0, [r0, #24]
   12248:	bd10      	pop	{r4, pc}
   1224a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1224e:	8b40      	ldrh	r0, [r0, #26]
   12250:	bd10      	pop	{r4, pc}
   12252:	b108      	cbz	r0, 12258 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
   12254:	2000      	movs	r0, #0
   12256:	4770      	bx	lr
   12258:	2002      	movs	r0, #2
   1225a:	4770      	bx	lr
   1225c:	b510      	push	{r4, lr}
   1225e:	4604      	mov	r4, r0
   12260:	4608      	mov	r0, r1
   12262:	f7ff fff6 	bl	12252 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   12266:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1226a:	8b01      	ldrh	r1, [r0, #24]
   1226c:	b911      	cbnz	r1, 12274 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x9c>
   1226e:	8b40      	ldrh	r0, [r0, #26]
   12270:	2800      	cmp	r0, #0
   12272:	d000      	beq.n	12276 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x9e>
   12274:	2001      	movs	r0, #1
   12276:	bd10      	pop	{r4, pc}
   12278:	b538      	push	{r3, r4, r5, lr}
   1227a:	4604      	mov	r4, r0
   1227c:	7880      	ldrb	r0, [r0, #2]
   1227e:	460d      	mov	r5, r1
   12280:	f88d 0000 	strb.w	r0, [sp]
   12284:	9800      	ldr	r0, [sp, #0]
   12286:	9000      	str	r0, [sp, #0]
   12288:	f89d 0000 	ldrb.w	r0, [sp]
   1228c:	b948      	cbnz	r0, 122a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xca>
   1228e:	4610      	mov	r0, r2
   12290:	f7ff ffdf 	bl	12252 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   12294:	1821      	adds	r1, r4, r0
   12296:	7d0a      	ldrb	r2, [r1, #20]
   12298:	2a02      	cmp	r2, #2
   1229a:	d004      	beq.n	122a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xce>
   1229c:	7d49      	ldrb	r1, [r1, #21]
   1229e:	2902      	cmp	r1, #2
   122a0:	d005      	beq.n	122ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xd6>
   122a2:	2000      	movs	r0, #0
   122a4:	bd38      	pop	{r3, r4, r5, pc}
   122a6:	4602      	mov	r2, r0
   122a8:	1c40      	adds	r0, r0, #1
   122aa:	b2c0      	uxtb	r0, r0
   122ac:	e001      	b.n	122b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xda>
   122ae:	1c41      	adds	r1, r0, #1
   122b0:	b2ca      	uxtb	r2, r1
   122b2:	b185      	cbz	r5, 122d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xfe>
   122b4:	1823      	adds	r3, r4, r0
   122b6:	2100      	movs	r1, #0
   122b8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   122bc:	7519      	strb	r1, [r3, #20]
   122be:	8301      	strh	r1, [r0, #24]
   122c0:	2003      	movs	r0, #3
   122c2:	18a1      	adds	r1, r4, r2
   122c4:	7508      	strb	r0, [r1, #20]
   122c6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
   122ca:	6840      	ldr	r0, [r0, #4]
   122cc:	6028      	str	r0, [r5, #0]
   122ce:	eb04 0042 	add.w	r0, r4, r2, lsl #1
   122d2:	8b00      	ldrh	r0, [r0, #24]
   122d4:	80a8      	strh	r0, [r5, #4]
   122d6:	2001      	movs	r0, #1
   122d8:	bd38      	pop	{r3, r4, r5, pc}
   122da:	b570      	push	{r4, r5, r6, lr}
   122dc:	4604      	mov	r4, r0
   122de:	4615      	mov	r5, r2
   122e0:	4608      	mov	r0, r1
   122e2:	f7ff ffb6 	bl	12252 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   122e6:	1821      	adds	r1, r4, r0
   122e8:	7d0a      	ldrb	r2, [r1, #20]
   122ea:	42aa      	cmp	r2, r5
   122ec:	d103      	bne.n	122f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
   122ee:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   122f2:	8b00      	ldrh	r0, [r0, #24]
   122f4:	bd70      	pop	{r4, r5, r6, pc}
   122f6:	7d49      	ldrb	r1, [r1, #21]
   122f8:	42a9      	cmp	r1, r5
   122fa:	d103      	bne.n	12304 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
   122fc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   12300:	8b40      	ldrh	r0, [r0, #26]
   12302:	bd70      	pop	{r4, r5, r6, pc}
   12304:	2000      	movs	r0, #0
   12306:	bd70      	pop	{r4, r5, r6, pc}
   12308:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   1230c:	d201      	bcs.n	12312 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13a>
   1230e:	0840      	lsrs	r0, r0, #1
   12310:	4770      	bx	lr
   12312:	20ff      	movs	r0, #255	; 0xff
   12314:	4770      	bx	lr
   12316:	b510      	push	{r4, lr}
   12318:	4604      	mov	r4, r0
   1231a:	f7ff fff5 	bl	12308 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x130>
   1231e:	1a20      	subs	r0, r4, r0
   12320:	f240 6172 	movw	r1, #1650	; 0x672
   12324:	4288      	cmp	r0, r1
   12326:	db00      	blt.n	1232a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x152>
   12328:	4608      	mov	r0, r1
   1232a:	b280      	uxth	r0, r0
   1232c:	bd10      	pop	{r4, pc}

0001232e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
   1232e:	2101      	movs	r1, #1
   12330:	f7ff bf75 	b.w	1221e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

00012334 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
   12334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12338:	4606      	mov	r6, r0
   1233a:	f342 0780 	sbfx	r7, r2, #2, #1
   1233e:	7848      	ldrb	r0, [r1, #1]
   12340:	460c      	mov	r4, r1
   12342:	f022 0504 	bic.w	r5, r2, #4
   12346:	1c7f      	adds	r7, r7, #1
   12348:	b100      	cbz	r0, 1234c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
   1234a:	b995      	cbnz	r5, 12372 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
   1234c:	4328      	orrs	r0, r5
   1234e:	d010      	beq.n	12372 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
   12350:	2000      	movs	r0, #0
   12352:	b120      	cbz	r0, 1235e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2a>
   12354:	b17d      	cbz	r5, 12376 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x42>
   12356:	2100      	movs	r1, #0
   12358:	4620      	mov	r0, r4
   1235a:	f7f2 fe67 	bl	502c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   1235e:	20ff      	movs	r0, #255	; 0xff
   12360:	70a0      	strb	r0, [r4, #2]
   12362:	4638      	mov	r0, r7
   12364:	f7ff ff75 	bl	12252 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   12368:	1821      	adds	r1, r4, r0
   1236a:	7d09      	ldrb	r1, [r1, #20]
   1236c:	2903      	cmp	r1, #3
   1236e:	d004      	beq.n	1237a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x46>
   12370:	e007      	b.n	12382 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
   12372:	2001      	movs	r0, #1
   12374:	e7ed      	b.n	12352 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1e>
   12376:	2101      	movs	r1, #1
   12378:	e7ee      	b.n	12358 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x24>
   1237a:	2d02      	cmp	r5, #2
   1237c:	d001      	beq.n	12382 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
   1237e:	1c40      	adds	r0, r0, #1
   12380:	b2c0      	uxtb	r0, r0
   12382:	1822      	adds	r2, r4, r0
   12384:	2101      	movs	r1, #1
   12386:	7511      	strb	r1, [r2, #20]
   12388:	eb04 0240 	add.w	r2, r4, r0, lsl #1
   1238c:	2100      	movs	r1, #0
   1238e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   12392:	8311      	strh	r1, [r2, #24]
   12394:	6842      	ldr	r2, [r0, #4]
   12396:	70a1      	strb	r1, [r4, #2]
   12398:	4633      	mov	r3, r6
   1239a:	f361 030f 	bfi	r3, r1, #0, #16
   1239e:	c60c      	stmia	r6!, {r2, r3}
   123a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000123a4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
   123a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123a8:	4604      	mov	r4, r0
   123aa:	461e      	mov	r6, r3
   123ac:	4690      	mov	r8, r2
   123ae:	4608      	mov	r0, r1
   123b0:	f7ff ff4f 	bl	12252 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   123b4:	21ff      	movs	r1, #255	; 0xff
   123b6:	70a1      	strb	r1, [r4, #2]
   123b8:	1821      	adds	r1, r4, r0
   123ba:	7d0a      	ldrb	r2, [r1, #20]
   123bc:	2a01      	cmp	r2, #1
   123be:	d004      	beq.n	123ca <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
   123c0:	7d49      	ldrb	r1, [r1, #21]
   123c2:	2901      	cmp	r1, #1
   123c4:	d10c      	bne.n	123e0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3c>
   123c6:	1c40      	adds	r0, r0, #1
   123c8:	b2c0      	uxtb	r0, r0
   123ca:	eb04 0540 	add.w	r5, r4, r0, lsl #1
   123ce:	2700      	movs	r7, #0
   123d0:	8b29      	ldrh	r1, [r5, #24]
   123d2:	8c2b      	ldrh	r3, [r5, #32]
   123d4:	198a      	adds	r2, r1, r6
   123d6:	429a      	cmp	r2, r3
   123d8:	d905      	bls.n	123e6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x42>
   123da:	4420      	add	r0, r4
   123dc:	832f      	strh	r7, [r5, #24]
   123de:	7507      	strb	r7, [r0, #20]
   123e0:	2000      	movs	r0, #0
   123e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123e6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   123ea:	4632      	mov	r2, r6
   123ec:	6840      	ldr	r0, [r0, #4]
   123ee:	4408      	add	r0, r1
   123f0:	4641      	mov	r1, r8
   123f2:	f7fe fd61 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   123f6:	8b28      	ldrh	r0, [r5, #24]
   123f8:	4430      	add	r0, r6
   123fa:	8328      	strh	r0, [r5, #24]
   123fc:	70a7      	strb	r7, [r4, #2]
   123fe:	2001      	movs	r0, #1
   12400:	e7ef      	b.n	123e2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>

00012402 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
   12402:	2202      	movs	r2, #2
   12404:	2100      	movs	r1, #0
   12406:	f7ff bf68 	b.w	122da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

0001240a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
   1240a:	b510      	push	{r4, lr}
   1240c:	2101      	movs	r1, #1
   1240e:	f7ff ff25 	bl	1225c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x84>
   12412:	2800      	cmp	r0, #0
   12414:	d000      	beq.n	12418 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
   12416:	2001      	movs	r0, #1
   12418:	bd10      	pop	{r4, pc}

0001241a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
   1241a:	2201      	movs	r2, #1
   1241c:	f7ff bf2c 	b.w	12278 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>

00012420 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
   12420:	2200      	movs	r2, #0
   12422:	f7ff bf29 	b.w	12278 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>

00012426 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
   12426:	b570      	push	{r4, r5, r6, lr}
   12428:	4604      	mov	r4, r0
   1242a:	4615      	mov	r5, r2
   1242c:	4608      	mov	r0, r1
   1242e:	f7ff ff10 	bl	12252 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   12432:	21ff      	movs	r1, #255	; 0xff
   12434:	70a1      	strb	r1, [r4, #2]
   12436:	1821      	adds	r1, r4, r0
   12438:	2202      	movs	r2, #2
   1243a:	7d0b      	ldrb	r3, [r1, #20]
   1243c:	2b01      	cmp	r3, #1
   1243e:	d007      	beq.n	12450 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x2a>
   12440:	7d4b      	ldrb	r3, [r1, #21]
   12442:	2b01      	cmp	r3, #1
   12444:	d009      	beq.n	1245a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x34>
   12446:	f44f 718b 	mov.w	r1, #278	; 0x116
   1244a:	2009      	movs	r0, #9
   1244c:	f7f2 f936 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12450:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   12454:	8305      	strh	r5, [r0, #24]
   12456:	750a      	strb	r2, [r1, #20]
   12458:	e003      	b.n	12462 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3c>
   1245a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1245e:	8345      	strh	r5, [r0, #26]
   12460:	754a      	strb	r2, [r1, #21]
   12462:	2000      	movs	r0, #0
   12464:	70a0      	strb	r0, [r4, #2]
   12466:	bd70      	pop	{r4, r5, r6, pc}

00012468 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
   12468:	2101      	movs	r1, #1
   1246a:	7001      	strb	r1, [r0, #0]
   1246c:	4770      	bx	lr

0001246e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
   1246e:	2201      	movs	r2, #1
   12470:	4611      	mov	r1, r2
   12472:	f7ff bf32 	b.w	122da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

00012476 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
   12476:	2201      	movs	r2, #1
   12478:	2100      	movs	r1, #0
   1247a:	f7ff bf2e 	b.w	122da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

0001247e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
   1247e:	2100      	movs	r1, #0
   12480:	f7ff becd 	b.w	1221e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
   12484:	2800      	cmp	r0, #0
   12486:	db09      	blt.n	1249c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
   12488:	f000 021f 	and.w	r2, r0, #31
   1248c:	2101      	movs	r1, #1
   1248e:	4091      	lsls	r1, r2
   12490:	0940      	lsrs	r0, r0, #5
   12492:	0080      	lsls	r0, r0, #2
   12494:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   12498:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1249c:	4770      	bx	lr
   1249e:	2800      	cmp	r0, #0
   124a0:	db0d      	blt.n	124be <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
   124a2:	f000 021f 	and.w	r2, r0, #31
   124a6:	2101      	movs	r1, #1
   124a8:	4091      	lsls	r1, r2
   124aa:	0940      	lsrs	r0, r0, #5
   124ac:	0080      	lsls	r0, r0, #2
   124ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   124b2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   124b6:	f3bf 8f4f 	dsb	sy
   124ba:	f3bf 8f6f 	isb	sy
   124be:	4770      	bx	lr
   124c0:	b510      	push	{r4, lr}
   124c2:	200e      	movs	r0, #14
   124c4:	f7ff ffeb 	bl	1249e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   124c8:	200e      	movs	r0, #14
   124ca:	f7ff ffdb 	bl	12484 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   124ce:	200f      	movs	r0, #15
   124d0:	f7ff ffe5 	bl	1249e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   124d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   124d8:	200f      	movs	r0, #15
   124da:	f7ff bfd3 	b.w	12484 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   124de:	2800      	cmp	r0, #0
   124e0:	db09      	blt.n	124f6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
   124e2:	f000 021f 	and.w	r2, r0, #31
   124e6:	2101      	movs	r1, #1
   124e8:	4091      	lsls	r1, r2
   124ea:	0940      	lsrs	r0, r0, #5
   124ec:	0080      	lsls	r0, r0, #2
   124ee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   124f2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   124f6:	4770      	bx	lr
   124f8:	5840      	ldr	r0, [r0, r1]
   124fa:	2800      	cmp	r0, #0
   124fc:	d000      	beq.n	12500 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
   124fe:	2001      	movs	r0, #1
   12500:	4770      	bx	lr

00012502 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
   12502:	b510      	push	{r4, lr}
   12504:	4604      	mov	r4, r0
   12506:	4620      	mov	r0, r4
   12508:	f7f2 fed8 	bl	52bc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
   1250c:	2811      	cmp	r0, #17
   1250e:	d0fa      	beq.n	12506 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
   12510:	bd10      	pop	{r4, pc}

00012512 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   12512:	b510      	push	{r4, lr}
   12514:	f7ff fff5 	bl	12502 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   12518:	2800      	cmp	r0, #0
   1251a:	d003      	beq.n	12524 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
   1251c:	21a0      	movs	r1, #160	; 0xa0
   1251e:	201d      	movs	r0, #29
   12520:	f7f2 f8cc 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12524:	bd10      	pop	{r4, pc}

00012526 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   12526:	b108      	cbz	r0, 1252c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   12528:	2000      	movs	r0, #0
   1252a:	4770      	bx	lr
   1252c:	2001      	movs	r0, #1
   1252e:	4770      	bx	lr

00012530 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
   12530:	4050      	eors	r0, r2
   12532:	780a      	ldrb	r2, [r1, #0]
   12534:	f893 c000 	ldrb.w	ip, [r3]
   12538:	ea82 020c 	eor.w	r2, r2, ip
   1253c:	4410      	add	r0, r2
   1253e:	784a      	ldrb	r2, [r1, #1]
   12540:	f893 c001 	ldrb.w	ip, [r3, #1]
   12544:	ea82 020c 	eor.w	r2, r2, ip
   12548:	4410      	add	r0, r2
   1254a:	788a      	ldrb	r2, [r1, #2]
   1254c:	f893 c002 	ldrb.w	ip, [r3, #2]
   12550:	ea82 020c 	eor.w	r2, r2, ip
   12554:	4410      	add	r0, r2
   12556:	78ca      	ldrb	r2, [r1, #3]
   12558:	f893 c003 	ldrb.w	ip, [r3, #3]
   1255c:	ea82 020c 	eor.w	r2, r2, ip
   12560:	4410      	add	r0, r2
   12562:	790a      	ldrb	r2, [r1, #4]
   12564:	f893 c004 	ldrb.w	ip, [r3, #4]
   12568:	7949      	ldrb	r1, [r1, #5]
   1256a:	ea82 020c 	eor.w	r2, r2, ip
   1256e:	4410      	add	r0, r2
   12570:	795a      	ldrb	r2, [r3, #5]
   12572:	4051      	eors	r1, r2
   12574:	42c1      	cmn	r1, r0
   12576:	bf0c      	ite	eq
   12578:	2001      	moveq	r0, #1
   1257a:	2000      	movne	r0, #0
   1257c:	4770      	bx	lr

0001257e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   1257e:	b510      	push	{r4, lr}
   12580:	2900      	cmp	r1, #0
   12582:	4604      	mov	r4, r0
   12584:	f04f 0106 	mov.w	r1, #6
   12588:	d002      	beq.n	12590 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   1258a:	f7f2 f937 	bl	47fc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1258e:	e001      	b.n	12594 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   12590:	f7f2 f942 	bl	4818 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   12594:	7960      	ldrb	r0, [r4, #5]
   12596:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1259a:	7160      	strb	r0, [r4, #5]
   1259c:	bd10      	pop	{r4, pc}

0001259e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
   1259e:	4770      	bx	lr

000125a0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   125a0:	b530      	push	{r4, r5, lr}
   125a2:	460c      	mov	r4, r1
   125a4:	4605      	mov	r5, r0
   125a6:	b08d      	sub	sp, #52	; 0x34
   125a8:	f04f 0103 	mov.w	r1, #3
   125ac:	f104 0003 	add.w	r0, r4, #3
   125b0:	b112      	cbz	r2, 125b8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   125b2:	f7f2 f923 	bl	47fc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   125b6:	e001      	b.n	125bc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   125b8:	f7f2 f92e 	bl	4818 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   125bc:	7960      	ldrb	r0, [r4, #5]
   125be:	220d      	movs	r2, #13
   125c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   125c4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   125c8:	7160      	strb	r0, [r4, #5]
   125ca:	2100      	movs	r1, #0
   125cc:	a804      	add	r0, sp, #16
   125ce:	f7fe fced 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   125d2:	78e0      	ldrb	r0, [r4, #3]
   125d4:	f88d 001f 	strb.w	r0, [sp, #31]
   125d8:	7920      	ldrb	r0, [r4, #4]
   125da:	f88d 001e 	strb.w	r0, [sp, #30]
   125de:	7960      	ldrb	r0, [r4, #5]
   125e0:	f88d 001d 	strb.w	r0, [sp, #29]
   125e4:	6828      	ldr	r0, [r5, #0]
   125e6:	9000      	str	r0, [sp, #0]
   125e8:	6868      	ldr	r0, [r5, #4]
   125ea:	9001      	str	r0, [sp, #4]
   125ec:	68a8      	ldr	r0, [r5, #8]
   125ee:	9002      	str	r0, [sp, #8]
   125f0:	68e8      	ldr	r0, [r5, #12]
   125f2:	9003      	str	r0, [sp, #12]
   125f4:	4668      	mov	r0, sp
   125f6:	f7ff ff8c 	bl	12512 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   125fa:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   125fe:	7020      	strb	r0, [r4, #0]
   12600:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   12604:	7060      	strb	r0, [r4, #1]
   12606:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   1260a:	70a0      	strb	r0, [r4, #2]
   1260c:	b00d      	add	sp, #52	; 0x34
   1260e:	bd30      	pop	{r4, r5, pc}

00012610 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
   12610:	f7f3 bdb4 	b.w	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>

00012614 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   12614:	b510      	push	{r4, lr}
   12616:	f7fc fa4d 	bl	eab4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   1261a:	2800      	cmp	r0, #0
   1261c:	bf04      	itt	eq
   1261e:	20ff      	moveq	r0, #255	; 0xff
   12620:	bd10      	popeq	{r4, pc}
   12622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12626:	f7fc ba25 	b.w	ea74 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

0001262a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   1262a:	b510      	push	{r4, lr}
   1262c:	f7f4 f96c 	bl	6908 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   12630:	2810      	cmp	r0, #16
   12632:	bf04      	itt	eq
   12634:	2000      	moveq	r0, #0
   12636:	bd10      	popeq	{r4, pc}
   12638:	f7f4 f9ac 	bl	6994 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
   1263c:	2001      	movs	r0, #1
   1263e:	bd10      	pop	{r4, pc}

00012640 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
   12640:	b570      	push	{r4, r5, r6, lr}
   12642:	4606      	mov	r6, r0
   12644:	7900      	ldrb	r0, [r0, #4]
   12646:	f030 001f 	bics.w	r0, r0, #31
   1264a:	bf04      	itt	eq
   1264c:	2500      	moveq	r5, #0
   1264e:	462c      	moveq	r4, r5
   12650:	d10c      	bne.n	1266c <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x2c>
   12652:	5d30      	ldrb	r0, [r6, r4]
   12654:	f000 ff57 	bl	13506 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
   12658:	4428      	add	r0, r5
   1265a:	b2c5      	uxtb	r5, r0
   1265c:	1c60      	adds	r0, r4, #1
   1265e:	b2c4      	uxtb	r4, r0
   12660:	2c05      	cmp	r4, #5
   12662:	d3f6      	bcc.n	12652 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x12>
   12664:	2d01      	cmp	r5, #1
   12666:	bf84      	itt	hi
   12668:	2001      	movhi	r0, #1
   1266a:	bd70      	pophi	{r4, r5, r6, pc}
   1266c:	2000      	movs	r0, #0
   1266e:	bd70      	pop	{r4, r5, r6, pc}

00012670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   12670:	b570      	push	{r4, r5, r6, lr}
   12672:	460c      	mov	r4, r1
   12674:	4605      	mov	r5, r0
   12676:	2100      	movs	r1, #0
   12678:	f7ff fd88 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1267c:	6060      	str	r0, [r4, #4]
   1267e:	b110      	cbz	r0, 12686 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   12680:	2000      	movs	r0, #0
   12682:	7020      	strb	r0, [r4, #0]
   12684:	bd70      	pop	{r4, r5, r6, pc}
   12686:	2101      	movs	r1, #1
   12688:	4628      	mov	r0, r5
   1268a:	f7ff fd7f 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1268e:	6060      	str	r0, [r4, #4]
   12690:	2800      	cmp	r0, #0
   12692:	bf04      	itt	eq
   12694:	2002      	moveq	r0, #2
   12696:	bd70      	popeq	{r4, r5, r6, pc}
   12698:	2001      	movs	r0, #1
   1269a:	7020      	strb	r0, [r4, #0]
   1269c:	2000      	movs	r0, #0
   1269e:	bd70      	pop	{r4, r5, r6, pc}

000126a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   126a0:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
   126a4:	2906      	cmp	r1, #6
   126a6:	bf9a      	itte	ls
   126a8:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   126ac:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
   126b0:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   126b4:	4348      	muls	r0, r1
   126b6:	4770      	bx	lr

000126b8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   126b8:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
   126bc:	f241 7270 	movw	r2, #6000	; 0x1770
   126c0:	4291      	cmp	r1, r2
   126c2:	bf94      	ite	ls
   126c4:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   126c8:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   126cc:	fbb0 f0f1 	udiv	r0, r0, r1
   126d0:	bf98      	it	ls
   126d2:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
   126d6:	b280      	uxth	r0, r0
   126d8:	4770      	bx	lr

000126da <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   126da:	b570      	push	{r4, r5, r6, lr}
   126dc:	4604      	mov	r4, r0
   126de:	4290      	cmp	r0, r2
   126e0:	bf28      	it	cs
   126e2:	bd70      	popcs	{r4, r5, r6, pc}
   126e4:	1b10      	subs	r0, r2, r4
   126e6:	2865      	cmp	r0, #101	; 0x65
   126e8:	d30b      	bcc.n	12702 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
   126ea:	1825      	adds	r5, r4, r0
   126ec:	428d      	cmp	r5, r1
   126ee:	d806      	bhi.n	126fe <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
   126f0:	2103      	movs	r1, #3
   126f2:	f7ef f90f 	bl	1914 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   126f6:	2800      	cmp	r0, #0
   126f8:	bf04      	itt	eq
   126fa:	4628      	moveq	r0, r5
   126fc:	bd70      	popeq	{r4, r5, r6, pc}
   126fe:	4620      	mov	r0, r4
   12700:	bd70      	pop	{r4, r5, r6, pc}
   12702:	2065      	movs	r0, #101	; 0x65
   12704:	e7f1      	b.n	126ea <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

00012706 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   12706:	290d      	cmp	r1, #13
   12708:	d260      	bcs.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   1270a:	e8df f001 	tbb	[pc, r1]
   1270e:	0a07      	.short	0x0a07
   12710:	1c17140f 	.word	0x1c17140f
   12714:	61403d33 	.word	0x61403d33
   12718:	005b4d47 	.word	0x005b4d47
   1271c:	2a00      	cmp	r2, #0
   1271e:	d053      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   12720:	e054      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   12722:	2a08      	cmp	r2, #8
   12724:	bf18      	it	ne
   12726:	2a09      	cmpne	r2, #9
   12728:	d04e      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   1272a:	e04f      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   1272c:	2a0d      	cmp	r2, #13
   1272e:	bf18      	it	ne
   12730:	2a0c      	cmpne	r2, #12
   12732:	d049      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   12734:	e04a      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   12736:	2a0e      	cmp	r2, #14
   12738:	d046      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   1273a:	e047      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   1273c:	f1a2 0010 	sub.w	r0, r2, #16
   12740:	280c      	cmp	r0, #12
   12742:	d941      	bls.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   12744:	e042      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   12746:	b123      	cbz	r3, 12752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4c>
   12748:	f1a2 0011 	sub.w	r0, r2, #17
   1274c:	280b      	cmp	r0, #11
   1274e:	d93b      	bls.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   12750:	e03c      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   12752:	2a13      	cmp	r2, #19
   12754:	bf18      	it	ne
   12756:	2a12      	cmpne	r2, #18
   12758:	d036      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   1275a:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
   1275e:	b120      	cbz	r0, 1276a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x64>
   12760:	2a13      	cmp	r2, #19
   12762:	d333      	bcc.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   12764:	2a1b      	cmp	r2, #27
   12766:	d92f      	bls.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   12768:	e030      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   1276a:	2a17      	cmp	r2, #23
   1276c:	d32e      	bcc.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   1276e:	2a1b      	cmp	r2, #27
   12770:	d92a      	bls.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   12772:	e02b      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   12774:	f1a2 0110 	sub.w	r1, r2, #16
   12778:	2903      	cmp	r1, #3
   1277a:	d925      	bls.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   1277c:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
   12780:	b1f8      	cbz	r0, 127c2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
   12782:	2a1c      	cmp	r2, #28
   12784:	d920      	bls.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   12786:	e021      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   12788:	2a04      	cmp	r2, #4
   1278a:	d01d      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   1278c:	e01e      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   1278e:	b113      	cbz	r3, 12796 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x90>
   12790:	2a07      	cmp	r2, #7
   12792:	d019      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   12794:	e01a      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   12796:	2a01      	cmp	r2, #1
   12798:	d118      	bne.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   1279a:	e015      	b.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   1279c:	2a1d      	cmp	r2, #29
   1279e:	bf1c      	itt	ne
   127a0:	2a1e      	cmpne	r2, #30
   127a2:	2a1f      	cmpne	r2, #31
   127a4:	d010      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   127a6:	e011      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   127a8:	2a20      	cmp	r2, #32
   127aa:	bf18      	it	ne
   127ac:	2a21      	cmpne	r2, #33	; 0x21
   127ae:	d00b      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   127b0:	2a22      	cmp	r2, #34	; 0x22
   127b2:	bf18      	it	ne
   127b4:	2a23      	cmpne	r2, #35	; 0x23
   127b6:	d007      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   127b8:	2a24      	cmp	r2, #36	; 0x24
   127ba:	bf1c      	itt	ne
   127bc:	2a25      	cmpne	r2, #37	; 0x25
   127be:	2a28      	cmpne	r2, #40	; 0x28
   127c0:	d002      	beq.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   127c2:	e003      	b.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   127c4:	2a27      	cmp	r2, #39	; 0x27
   127c6:	d101      	bne.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   127c8:	2001      	movs	r0, #1
   127ca:	4770      	bx	lr
   127cc:	2000      	movs	r0, #0
   127ce:	4770      	bx	lr
   127d0:	b113      	cbz	r3, 127d8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd2>
   127d2:	2a0f      	cmp	r2, #15
   127d4:	d1fa      	bne.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   127d6:	e7f7      	b.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   127d8:	2a05      	cmp	r2, #5
   127da:	d1f7      	bne.n	127cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   127dc:	e7f4      	b.n	127c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>

000127de <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   127de:	280d      	cmp	r0, #13
   127e0:	bf18      	it	ne
   127e2:	280c      	cmpne	r0, #12
   127e4:	d010      	beq.n	12808 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   127e6:	280e      	cmp	r0, #14
   127e8:	bf18      	it	ne
   127ea:	2820      	cmpne	r0, #32
   127ec:	d00c      	beq.n	12808 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   127ee:	2821      	cmp	r0, #33	; 0x21
   127f0:	bf18      	it	ne
   127f2:	2822      	cmpne	r0, #34	; 0x22
   127f4:	d008      	beq.n	12808 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   127f6:	2823      	cmp	r0, #35	; 0x23
   127f8:	bf18      	it	ne
   127fa:	2824      	cmpne	r0, #36	; 0x24
   127fc:	d004      	beq.n	12808 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   127fe:	2825      	cmp	r0, #37	; 0x25
   12800:	bf1e      	ittt	ne
   12802:	2828      	cmpne	r0, #40	; 0x28
   12804:	2000      	movne	r0, #0
   12806:	4770      	bxne	lr
   12808:	f04f 0001 	mov.w	r0, #1
   1280c:	4770      	bx	lr

0001280e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   1280e:	f011 0f0c 	tst.w	r1, #12
   12812:	d014      	beq.n	1283e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   12814:	f001 0104 	and.w	r1, r1, #4
   12818:	2900      	cmp	r1, #0
   1281a:	bf0d      	iteet	eq
   1281c:	2240      	moveq	r2, #64	; 0x40
   1281e:	2210      	movne	r2, #16
   12820:	2196      	movne	r1, #150	; 0x96
   12822:	f44f 7116 	moveq.w	r1, #600	; 0x258
   12826:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   1282a:	eba0 0301 	sub.w	r3, r0, r1
   1282e:	4288      	cmp	r0, r1
   12830:	bf82      	ittt	hi
   12832:	fb93 f0f2 	sdivhi	r0, r3, r2
   12836:	b280      	uxthhi	r0, r0
   12838:	4770      	bxhi	lr
   1283a:	2000      	movs	r0, #0
   1283c:	4770      	bx	lr
   1283e:	2902      	cmp	r1, #2
   12840:	d008      	beq.n	12854 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x46>
   12842:	2870      	cmp	r0, #112	; 0x70
   12844:	d9f9      	bls.n	1283a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
   12846:	3870      	subs	r0, #112	; 0x70
   12848:	17c1      	asrs	r1, r0, #31
   1284a:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   1284e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
   12852:	4770      	bx	lr
   12854:	283c      	cmp	r0, #60	; 0x3c
   12856:	d9f0      	bls.n	1283a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
   12858:	383c      	subs	r0, #60	; 0x3c
   1285a:	17c1      	asrs	r1, r0, #31
   1285c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   12860:	f3c0 008f 	ubfx	r0, r0, #2, #16
   12864:	4770      	bx	lr

00012866 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   12866:	6809      	ldr	r1, [r1, #0]
   12868:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
   1286c:	4770      	bx	lr

0001286e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   1286e:	f010 0f01 	tst.w	r0, #1
   12872:	bf1c      	itt	ne
   12874:	2001      	movne	r0, #1
   12876:	4770      	bxne	lr
   12878:	f010 0f02 	tst.w	r0, #2
   1287c:	bf1c      	itt	ne
   1287e:	2002      	movne	r0, #2
   12880:	4770      	bxne	lr
   12882:	f010 0004 	ands.w	r0, r0, #4
   12886:	bf18      	it	ne
   12888:	2008      	movne	r0, #8
   1288a:	4770      	bx	lr

0001288c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   1288c:	2901      	cmp	r1, #1
   1288e:	d008      	beq.n	128a2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x16>
   12890:	2902      	cmp	r1, #2
   12892:	d00b      	beq.n	128ac <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x20>
   12894:	2904      	cmp	r1, #4
   12896:	bf12      	itee	ne
   12898:	2908      	cmpne	r1, #8
   1289a:	f640 60a6 	movweq	r0, #3750	; 0xea6
   1289e:	4770      	bxeq	lr
   128a0:	e007      	b.n	128b2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x26>
   128a2:	2800      	cmp	r0, #0
   128a4:	bf04      	itt	eq
   128a6:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   128aa:	4770      	bxeq	lr
   128ac:	f640 10c4 	movw	r0, #2500	; 0x9c4
   128b0:	4770      	bx	lr
   128b2:	b510      	push	{r4, lr}
   128b4:	f240 31ba 	movw	r1, #954	; 0x3ba
   128b8:	2029      	movs	r0, #41	; 0x29
   128ba:	f7f1 feff 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000128be <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
   128be:	2a16      	cmp	r2, #22
   128c0:	d110      	bne.n	128e4 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   128c2:	222a      	movs	r2, #42	; 0x2a
   128c4:	280d      	cmp	r0, #13
   128c6:	bf18      	it	ne
   128c8:	280e      	cmpne	r0, #14
   128ca:	d00f      	beq.n	128ec <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   128cc:	f04f 0c23 	mov.w	ip, #35	; 0x23
   128d0:	2820      	cmp	r0, #32
   128d2:	d00d      	beq.n	128f0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   128d4:	b131      	cbz	r1, 128e4 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   128d6:	7808      	ldrb	r0, [r1, #0]
   128d8:	2801      	cmp	r0, #1
   128da:	bf18      	it	ne
   128dc:	2800      	cmpne	r0, #0
   128de:	d005      	beq.n	128ec <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   128e0:	2816      	cmp	r0, #22
   128e2:	d005      	beq.n	128f0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   128e4:	2000      	movs	r0, #0
   128e6:	4770      	bx	lr
   128e8:	2001      	movs	r0, #1
   128ea:	4770      	bx	lr
   128ec:	701a      	strb	r2, [r3, #0]
   128ee:	e7fb      	b.n	128e8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
   128f0:	f883 c000 	strb.w	ip, [r3]
   128f4:	e7f8      	b.n	128e8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>

000128f6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   128f6:	b438      	push	{r3, r4, r5}
   128f8:	b2cb      	uxtb	r3, r1
   128fa:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   128fe:	b2c1      	uxtb	r1, r0
   12900:	f3c0 2407 	ubfx	r4, r0, #8, #8
   12904:	2b01      	cmp	r3, #1
   12906:	d007      	beq.n	12918 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x22>
   12908:	2b02      	cmp	r3, #2
   1290a:	d009      	beq.n	12920 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x2a>
   1290c:	2b04      	cmp	r3, #4
   1290e:	bf08      	it	eq
   12910:	f1bc 0f04 	cmpeq.w	ip, #4
   12914:	d02d      	beq.n	12972 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   12916:	e006      	b.n	12926 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
   12918:	f1bc 0f01 	cmp.w	ip, #1
   1291c:	d103      	bne.n	12926 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
   1291e:	e028      	b.n	12972 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   12920:	f1bc 0f02 	cmp.w	ip, #2
   12924:	d025      	beq.n	12972 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   12926:	2901      	cmp	r1, #1
   12928:	d006      	beq.n	12938 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x42>
   1292a:	2902      	cmp	r1, #2
   1292c:	d007      	beq.n	1293e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x48>
   1292e:	2904      	cmp	r1, #4
   12930:	bf08      	it	eq
   12932:	2c04      	cmpeq	r4, #4
   12934:	d01d      	beq.n	12972 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   12936:	e004      	b.n	12942 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
   12938:	2c01      	cmp	r4, #1
   1293a:	d102      	bne.n	12942 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
   1293c:	e019      	b.n	12972 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   1293e:	2c02      	cmp	r4, #2
   12940:	d017      	beq.n	12972 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   12942:	ea01 010c 	and.w	r1, r1, ip
   12946:	f361 0207 	bfi	r2, r1, #0, #8
   1294a:	ea04 0103 	and.w	r1, r4, r3
   1294e:	f361 220f 	bfi	r2, r1, #8, #8
   12952:	b2d1      	uxtb	r1, r2
   12954:	f011 0f02 	tst.w	r1, #2
   12958:	bf18      	it	ne
   1295a:	2302      	movne	r3, #2
   1295c:	d010      	beq.n	12980 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x8a>
   1295e:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12962:	f88d 3000 	strb.w	r3, [sp]
   12966:	f011 0f02 	tst.w	r1, #2
   1296a:	bf18      	it	ne
   1296c:	2102      	movne	r1, #2
   1296e:	d11b      	bne.n	129a8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
   12970:	e011      	b.n	12996 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xa0>
   12972:	4021      	ands	r1, r4
   12974:	ea03 030c 	and.w	r3, r3, ip
   12978:	4019      	ands	r1, r3
   1297a:	f361 0207 	bfi	r2, r1, #0, #8
   1297e:	e7e6      	b.n	1294e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x58>
   12980:	f011 0f01 	tst.w	r1, #1
   12984:	bf18      	it	ne
   12986:	2301      	movne	r3, #1
   12988:	d1e9      	bne.n	1295e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   1298a:	f011 0f04 	tst.w	r1, #4
   1298e:	bf14      	ite	ne
   12990:	2308      	movne	r3, #8
   12992:	2300      	moveq	r3, #0
   12994:	e7e3      	b.n	1295e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   12996:	f011 0f01 	tst.w	r1, #1
   1299a:	bf18      	it	ne
   1299c:	2101      	movne	r1, #1
   1299e:	d103      	bne.n	129a8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
   129a0:	f011 0104 	ands.w	r1, r1, #4
   129a4:	bf18      	it	ne
   129a6:	2108      	movne	r1, #8
   129a8:	f88d 1001 	strb.w	r1, [sp, #1]
   129ac:	2b08      	cmp	r3, #8
   129ae:	bf01      	itttt	eq
   129b0:	0c00      	lsreq	r0, r0, #16
   129b2:	2801      	cmpeq	r0, #1
   129b4:	2004      	moveq	r0, #4
   129b6:	f88d 0000 	strbeq.w	r0, [sp]
   129ba:	f8bd 0000 	ldrh.w	r0, [sp]
   129be:	bc38      	pop	{r3, r4, r5}
   129c0:	4770      	bx	lr

000129c2 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>:
   129c2:	f04f 0c00 	mov.w	ip, #0
   129c6:	2908      	cmp	r1, #8
   129c8:	d002      	beq.n	129d0 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0xe>
   129ca:	2904      	cmp	r1, #4
   129cc:	d009      	beq.n	129e2 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x20>
   129ce:	e011      	b.n	129f4 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   129d0:	2801      	cmp	r0, #1
   129d2:	d10f      	bne.n	129f4 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   129d4:	2004      	movs	r0, #4
   129d6:	7090      	strb	r0, [r2, #2]
   129d8:	f882 c003 	strb.w	ip, [r2, #3]
   129dc:	8013      	strh	r3, [r2, #0]
   129de:	2001      	movs	r0, #1
   129e0:	4770      	bx	lr
   129e2:	2801      	cmp	r0, #1
   129e4:	d006      	beq.n	129f4 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   129e6:	2008      	movs	r0, #8
   129e8:	7090      	strb	r0, [r2, #2]
   129ea:	f882 c003 	strb.w	ip, [r2, #3]
   129ee:	8013      	strh	r3, [r2, #0]
   129f0:	2001      	movs	r0, #1
   129f2:	4770      	bx	lr
   129f4:	2000      	movs	r0, #0
   129f6:	4770      	bx	lr

000129f8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   129f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129fc:	4607      	mov	r7, r0
   129fe:	460e      	mov	r6, r1
   12a00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
   12a04:	f7ef fb46 	bl	2094 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   12a08:	b1a0      	cbz	r0, 12a34 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3c>
   12a0a:	b336      	cbz	r6, 12a5a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
   12a0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   12a10:	1b02      	subs	r2, r0, r4
   12a12:	eb61 0305 	sbc.w	r3, r1, r5
   12a16:	2000      	movs	r0, #0
   12a18:	4601      	mov	r1, r0
   12a1a:	1a80      	subs	r0, r0, r2
   12a1c:	eb71 0003 	sbcs.w	r0, r1, r3
   12a20:	da1b      	bge.n	12a5a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
   12a22:	1c50      	adds	r0, r2, #1
   12a24:	f173 0000 	sbcs.w	r0, r3, #0
   12a28:	db09      	blt.n	12a3e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x46>
   12a2a:	f240 2136 	movw	r1, #566	; 0x236
   12a2e:	2029      	movs	r0, #41	; 0x29
   12a30:	f7f1 fe44 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12a34:	f44f 710b 	mov.w	r1, #556	; 0x22c
   12a38:	2029      	movs	r0, #41	; 0x29
   12a3a:	f7f1 fe3f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12a3e:	1990      	adds	r0, r2, r6
   12a40:	1e40      	subs	r0, r0, #1
   12a42:	fbb0 f1f6 	udiv	r1, r0, r6
   12a46:	fb01 f006 	mul.w	r0, r1, r6
   12a4a:	1820      	adds	r0, r4, r0
   12a4c:	f145 0200 	adc.w	r2, r5, #0
   12a50:	e9c7 0204 	strd	r0, r2, [r7, #16]
   12a54:	4608      	mov	r0, r1
   12a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a5a:	2000      	movs	r0, #0
   12a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012a60 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   12a60:	b538      	push	{r3, r4, r5, lr}
   12a62:	4605      	mov	r5, r0
   12a64:	460c      	mov	r4, r1
   12a66:	4668      	mov	r0, sp
   12a68:	f7fd f91a 	bl	fca0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   12a6c:	b320      	cbz	r0, 12ab8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x58>
   12a6e:	f99d 2000 	ldrsb.w	r2, [sp]
   12a72:	7262      	strb	r2, [r4, #9]
   12a74:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   12a78:	72a0      	strb	r0, [r4, #10]
   12a7a:	f994 100b 	ldrsb.w	r1, [r4, #11]
   12a7e:	2000      	movs	r0, #0
   12a80:	1a51      	subs	r1, r2, r1
   12a82:	bf48      	it	mi
   12a84:	4249      	negmi	r1, r1
   12a86:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   12a8a:	428b      	cmp	r3, r1
   12a8c:	bfc8      	it	gt
   12a8e:	bd38      	popgt	{r3, r4, r5, pc}
   12a90:	2bff      	cmp	r3, #255	; 0xff
   12a92:	bf08      	it	eq
   12a94:	bd38      	popeq	{r3, r4, r5, pc}
   12a96:	7b21      	ldrb	r1, [r4, #12]
   12a98:	1c49      	adds	r1, r1, #1
   12a9a:	b2c9      	uxtb	r1, r1
   12a9c:	7321      	strb	r1, [r4, #12]
   12a9e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   12aa2:	4299      	cmp	r1, r3
   12aa4:	d803      	bhi.n	12aae <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
   12aa6:	7ae1      	ldrb	r1, [r4, #11]
   12aa8:	297f      	cmp	r1, #127	; 0x7f
   12aaa:	bf18      	it	ne
   12aac:	bd38      	popne	{r3, r4, r5, pc}
   12aae:	72e2      	strb	r2, [r4, #11]
   12ab0:	2000      	movs	r0, #0
   12ab2:	7320      	strb	r0, [r4, #12]
   12ab4:	2001      	movs	r0, #1
   12ab6:	bd38      	pop	{r3, r4, r5, pc}
   12ab8:	207f      	movs	r0, #127	; 0x7f
   12aba:	7260      	strb	r0, [r4, #9]
   12abc:	2000      	movs	r0, #0
   12abe:	bd38      	pop	{r3, r4, r5, pc}

00012ac0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   12ac0:	2300      	movs	r3, #0
   12ac2:	6343      	str	r3, [r0, #52]	; 0x34
   12ac4:	8782      	strh	r2, [r0, #60]	; 0x3c
   12ac6:	f240 2371 	movw	r3, #625	; 0x271
   12aca:	435a      	muls	r2, r3
   12acc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   12ad0:	1e52      	subs	r2, r2, #1
   12ad2:	fbb2 f1f1 	udiv	r1, r2, r1
   12ad6:	6381      	str	r1, [r0, #56]	; 0x38
   12ad8:	4770      	bx	lr

00012ada <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   12ada:	f2a0 1089 	subw	r0, r0, #393	; 0x189
   12ade:	4281      	cmp	r1, r0
   12ae0:	bf38      	it	cc
   12ae2:	4608      	movcc	r0, r1
   12ae4:	1a08      	subs	r0, r1, r0
   12ae6:	6819      	ldr	r1, [r3, #0]
   12ae8:	0840      	lsrs	r0, r0, #1
   12aea:	4401      	add	r1, r0
   12aec:	6019      	str	r1, [r3, #0]
   12aee:	6811      	ldr	r1, [r2, #0]
   12af0:	eba1 0100 	sub.w	r1, r1, r0
   12af4:	6011      	str	r1, [r2, #0]
   12af6:	bf18      	it	ne
   12af8:	2001      	movne	r0, #1
   12afa:	4770      	bx	lr

00012afc <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   12afc:	f641 524c 	movw	r2, #7500	; 0x1d4c
   12b00:	4291      	cmp	r1, r2
   12b02:	bf34      	ite	cc
   12b04:	2164      	movcc	r1, #100	; 0x64
   12b06:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   12b0a:	4348      	muls	r0, r1
   12b0c:	4770      	bx	lr

00012b0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   12b0e:	f641 524c 	movw	r2, #7500	; 0x1d4c
   12b12:	4291      	cmp	r1, r2
   12b14:	bf3e      	ittt	cc
   12b16:	2164      	movcc	r1, #100	; 0x64
   12b18:	fb10 f001 	smulbbcc	r0, r0, r1
   12b1c:	4770      	bxcc	lr
   12b1e:	f240 2171 	movw	r1, #625	; 0x271
   12b22:	fb10 f001 	smulbb	r0, r0, r1
   12b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12b2a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
   12b2e:	4770      	bx	lr
   12b30:	78c3      	ldrb	r3, [r0, #3]
   12b32:	4602      	mov	r2, r0
   12b34:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
   12b38:	bf08      	it	eq
   12b3a:	4770      	bxeq	lr
   12b3c:	2005      	movs	r0, #5
   12b3e:	7912      	ldrb	r2, [r2, #4]
   12b40:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   12b44:	f012 0301 	ands.w	r3, r2, #1
   12b48:	bf18      	it	ne
   12b4a:	2301      	movne	r3, #1
   12b4c:	b123      	cbz	r3, 12b58 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x4a>
   12b4e:	2900      	cmp	r1, #0
   12b50:	bf14      	ite	ne
   12b52:	200b      	movne	r0, #11
   12b54:	4770      	bxeq	lr
   12b56:	e001      	b.n	12b5c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x4e>
   12b58:	2900      	cmp	r1, #0
   12b5a:	d04f      	beq.n	12bfc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
   12b5c:	f012 0302 	ands.w	r3, r2, #2
   12b60:	bf18      	it	ne
   12b62:	2301      	movne	r3, #1
   12b64:	b123      	cbz	r3, 12b70 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x62>
   12b66:	2901      	cmp	r1, #1
   12b68:	bf14      	ite	ne
   12b6a:	1d80      	addne	r0, r0, #6
   12b6c:	4770      	bxeq	lr
   12b6e:	e001      	b.n	12b74 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x66>
   12b70:	2901      	cmp	r1, #1
   12b72:	d043      	beq.n	12bfc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
   12b74:	f012 0304 	ands.w	r3, r2, #4
   12b78:	bf18      	it	ne
   12b7a:	2301      	movne	r3, #1
   12b7c:	b123      	cbz	r3, 12b88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x7a>
   12b7e:	2902      	cmp	r1, #2
   12b80:	bf14      	ite	ne
   12b82:	1c40      	addne	r0, r0, #1
   12b84:	4770      	bxeq	lr
   12b86:	e001      	b.n	12b8c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x7e>
   12b88:	2902      	cmp	r1, #2
   12b8a:	d037      	beq.n	12bfc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
   12b8c:	f012 0308 	ands.w	r3, r2, #8
   12b90:	bf18      	it	ne
   12b92:	2301      	movne	r3, #1
   12b94:	b123      	cbz	r3, 12ba0 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x92>
   12b96:	2903      	cmp	r1, #3
   12b98:	bf14      	ite	ne
   12b9a:	1c80      	addne	r0, r0, #2
   12b9c:	4770      	bxeq	lr
   12b9e:	e001      	b.n	12ba4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x96>
   12ba0:	2903      	cmp	r1, #3
   12ba2:	d02b      	beq.n	12bfc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
   12ba4:	f012 0310 	ands.w	r3, r2, #16
   12ba8:	bf18      	it	ne
   12baa:	2301      	movne	r3, #1
   12bac:	b123      	cbz	r3, 12bb8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xaa>
   12bae:	2904      	cmp	r1, #4
   12bb0:	bf14      	ite	ne
   12bb2:	1cc0      	addne	r0, r0, #3
   12bb4:	4770      	bxeq	lr
   12bb6:	e001      	b.n	12bbc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xae>
   12bb8:	2904      	cmp	r1, #4
   12bba:	d01f      	beq.n	12bfc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
   12bbc:	f012 0320 	ands.w	r3, r2, #32
   12bc0:	bf18      	it	ne
   12bc2:	2301      	movne	r3, #1
   12bc4:	b12b      	cbz	r3, 12bd2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xc4>
   12bc6:	2905      	cmp	r1, #5
   12bc8:	bf1a      	itte	ne
   12bca:	3012      	addne	r0, #18
   12bcc:	b2c0      	uxtbne	r0, r0
   12bce:	4770      	bxeq	lr
   12bd0:	e001      	b.n	12bd6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xc8>
   12bd2:	2905      	cmp	r1, #5
   12bd4:	d012      	beq.n	12bfc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
   12bd6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   12bda:	bf18      	it	ne
   12bdc:	2201      	movne	r2, #1
   12bde:	b12a      	cbz	r2, 12bec <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xde>
   12be0:	2906      	cmp	r1, #6
   12be2:	bf1a      	itte	ne
   12be4:	1c40      	addne	r0, r0, #1
   12be6:	b2c0      	uxtbne	r0, r0
   12be8:	4770      	bxeq	lr
   12bea:	e001      	b.n	12bf0 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xe2>
   12bec:	2906      	cmp	r1, #6
   12bee:	d005      	beq.n	12bfc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
   12bf0:	2907      	cmp	r1, #7
   12bf2:	d103      	bne.n	12bfc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
   12bf4:	1f41      	subs	r1, r0, #5
   12bf6:	458c      	cmp	ip, r1
   12bf8:	bfc8      	it	gt
   12bfa:	4770      	bxgt	lr
   12bfc:	2000      	movs	r0, #0
   12bfe:	4770      	bx	lr

00012c00 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   12c00:	b430      	push	{r4, r5}
   12c02:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   12c06:	f8b0 4009 	ldrh.w	r4, [r0, #9]
   12c0a:	f8b0 c005 	ldrh.w	ip, [r0, #5]
   12c0e:	7903      	ldrb	r3, [r0, #4]
   12c10:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   12c14:	2900      	cmp	r1, #0
   12c16:	bf18      	it	ne
   12c18:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   12c1c:	d903      	bls.n	12c26 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x26>
   12c1e:	f640 5107 	movw	r1, #3335	; 0xd07
   12c22:	428a      	cmp	r2, r1
   12c24:	d90b      	bls.n	12c3e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3e>
   12c26:	1f91      	subs	r1, r2, #6
   12c28:	f640 457a 	movw	r5, #3194	; 0xc7a
   12c2c:	42a9      	cmp	r1, r5
   12c2e:	d80f      	bhi.n	12c50 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   12c30:	b173      	cbz	r3, 12c50 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   12c32:	2b08      	cmp	r3, #8
   12c34:	bf98      	it	ls
   12c36:	4293      	cmpls	r3, r2
   12c38:	d20a      	bcs.n	12c50 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   12c3a:	4562      	cmp	r2, ip
   12c3c:	d308      	bcc.n	12c50 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   12c3e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   12c42:	d205      	bcs.n	12c50 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   12c44:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   12c48:	bf9e      	ittt	ls
   12c4a:	2001      	movls	r0, #1
   12c4c:	bc30      	popls	{r4, r5}
   12c4e:	4770      	bxls	lr
   12c50:	2000      	movs	r0, #0
   12c52:	bc30      	pop	{r4, r5}
   12c54:	4770      	bx	lr

00012c56 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   12c56:	1d02      	adds	r2, r0, #4
   12c58:	4608      	mov	r0, r1
   12c5a:	4611      	mov	r1, r2
   12c5c:	f002 bc35 	b.w	154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

00012c60 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   12c60:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   12c64:	4770      	bx	lr

00012c66 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   12c66:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   12c6a:	4770      	bx	lr

00012c6c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   12c6c:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   12c70:	4770      	bx	lr

00012c72 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   12c72:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   12c76:	4770      	bx	lr

00012c78 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   12c78:	8980      	ldrh	r0, [r0, #12]
   12c7a:	8008      	strh	r0, [r1, #0]
   12c7c:	4770      	bx	lr

00012c7e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   12c7e:	f8d0 0016 	ldr.w	r0, [r0, #22]
   12c82:	6008      	str	r0, [r1, #0]
   12c84:	4770      	bx	lr

00012c86 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   12c86:	6842      	ldr	r2, [r0, #4]
   12c88:	600a      	str	r2, [r1, #0]
   12c8a:	6880      	ldr	r0, [r0, #8]
   12c8c:	6048      	str	r0, [r1, #4]
   12c8e:	4770      	bx	lr

00012c90 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   12c90:	f8d0 200e 	ldr.w	r2, [r0, #14]
   12c94:	600a      	str	r2, [r1, #0]
   12c96:	f8d0 0012 	ldr.w	r0, [r0, #18]
   12c9a:	6048      	str	r0, [r1, #4]
   12c9c:	4770      	bx	lr

00012c9e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   12c9e:	6842      	ldr	r2, [r0, #4]
   12ca0:	600a      	str	r2, [r1, #0]
   12ca2:	6880      	ldr	r0, [r0, #8]
   12ca4:	6048      	str	r0, [r1, #4]
   12ca6:	4770      	bx	lr

00012ca8 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
   12ca8:	6842      	ldr	r2, [r0, #4]
   12caa:	600a      	str	r2, [r1, #0]
   12cac:	6880      	ldr	r0, [r0, #8]
   12cae:	6048      	str	r0, [r1, #4]
   12cb0:	4770      	bx	lr

00012cb2 <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>:
   12cb2:	7840      	ldrb	r0, [r0, #1]
   12cb4:	4770      	bx	lr

00012cb6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   12cb6:	7800      	ldrb	r0, [r0, #0]
   12cb8:	f000 0003 	and.w	r0, r0, #3
   12cbc:	4770      	bx	lr

00012cbe <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   12cbe:	7900      	ldrb	r0, [r0, #4]
   12cc0:	4770      	bx	lr

00012cc2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   12cc2:	8880      	ldrh	r0, [r0, #4]
   12cc4:	4770      	bx	lr

00012cc6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   12cc6:	88c0      	ldrh	r0, [r0, #6]
   12cc8:	4770      	bx	lr

00012cca <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   12cca:	8900      	ldrh	r0, [r0, #8]
   12ccc:	4770      	bx	lr

00012cce <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   12cce:	8940      	ldrh	r0, [r0, #10]
   12cd0:	4770      	bx	lr

00012cd2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   12cd2:	88c0      	ldrh	r0, [r0, #6]
   12cd4:	4770      	bx	lr

00012cd6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   12cd6:	7940      	ldrb	r0, [r0, #5]
   12cd8:	4770      	bx	lr

00012cda <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   12cda:	7900      	ldrb	r0, [r0, #4]
   12cdc:	4770      	bx	lr

00012cde <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   12cde:	7900      	ldrb	r0, [r0, #4]
   12ce0:	4770      	bx	lr

00012ce2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   12ce2:	8901      	ldrh	r1, [r0, #8]
   12ce4:	291b      	cmp	r1, #27
   12ce6:	bf24      	itt	cs
   12ce8:	8941      	ldrhcs	r1, [r0, #10]
   12cea:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   12cee:	d307      	bcc.n	12d00 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x1e>
   12cf0:	8881      	ldrh	r1, [r0, #4]
   12cf2:	291b      	cmp	r1, #27
   12cf4:	bf21      	itttt	cs
   12cf6:	88c0      	ldrhcs	r0, [r0, #6]
   12cf8:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   12cfc:	2001      	movcs	r0, #1
   12cfe:	4770      	bxcs	lr
   12d00:	2000      	movs	r0, #0
   12d02:	4770      	bx	lr

00012d04 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   12d04:	b510      	push	{r4, lr}
   12d06:	29fb      	cmp	r1, #251	; 0xfb
   12d08:	bf9c      	itt	ls
   12d0a:	7041      	strbls	r1, [r0, #1]
   12d0c:	bd10      	popls	{r4, pc}
   12d0e:	f240 51fe 	movw	r1, #1534	; 0x5fe
   12d12:	202a      	movs	r0, #42	; 0x2a
   12d14:	f7f1 fcd2 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012d18 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   12d18:	7901      	ldrb	r1, [r0, #4]
   12d1a:	f011 0f07 	tst.w	r1, #7
   12d1e:	bf1b      	ittet	ne
   12d20:	7940      	ldrbne	r0, [r0, #5]
   12d22:	f010 0f07 	tstne.w	r0, #7
   12d26:	2000      	moveq	r0, #0
   12d28:	2001      	movne	r0, #1
   12d2a:	4770      	bx	lr

00012d2c <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
   12d2c:	7901      	ldrb	r1, [r0, #4]
   12d2e:	f011 0f07 	tst.w	r1, #7
   12d32:	bf1b      	ittet	ne
   12d34:	7940      	ldrbne	r0, [r0, #5]
   12d36:	f010 0f07 	tstne.w	r0, #7
   12d3a:	2000      	moveq	r0, #0
   12d3c:	2001      	movne	r0, #1
   12d3e:	4770      	bx	lr

00012d40 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
   12d40:	7901      	ldrb	r1, [r0, #4]
   12d42:	7940      	ldrb	r0, [r0, #5]
   12d44:	f001 0107 	and.w	r1, r1, #7
   12d48:	1e4a      	subs	r2, r1, #1
   12d4a:	f000 0007 	and.w	r0, r0, #7
   12d4e:	4011      	ands	r1, r2
   12d50:	1e42      	subs	r2, r0, #1
   12d52:	4010      	ands	r0, r2
   12d54:	4308      	orrs	r0, r1
   12d56:	bf0c      	ite	eq
   12d58:	2001      	moveq	r0, #1
   12d5a:	2000      	movne	r0, #0
   12d5c:	4770      	bx	lr

00012d5e <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   12d5e:	7900      	ldrb	r0, [r0, #4]
   12d60:	4770      	bx	lr

00012d62 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   12d62:	7940      	ldrb	r0, [r0, #5]
   12d64:	4770      	bx	lr

00012d66 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   12d66:	7101      	strb	r1, [r0, #4]
   12d68:	4770      	bx	lr

00012d6a <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   12d6a:	7141      	strb	r1, [r0, #5]
   12d6c:	4770      	bx	lr

00012d6e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   12d6e:	b510      	push	{r4, lr}
   12d70:	2a1b      	cmp	r2, #27
   12d72:	d904      	bls.n	12d7e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   12d74:	f240 4127 	movw	r1, #1063	; 0x427
   12d78:	202a      	movs	r0, #42	; 0x2a
   12d7a:	f7f1 fc9f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12d7e:	7042      	strb	r2, [r0, #1]
   12d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12d84:	1cc0      	adds	r0, r0, #3
   12d86:	f7fe b897 	b.w	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

00012d8a <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   12d8a:	6809      	ldr	r1, [r1, #0]
   12d8c:	60c1      	str	r1, [r0, #12]
   12d8e:	4770      	bx	lr

00012d90 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   12d90:	680a      	ldr	r2, [r1, #0]
   12d92:	6042      	str	r2, [r0, #4]
   12d94:	6849      	ldr	r1, [r1, #4]
   12d96:	6081      	str	r1, [r0, #8]
   12d98:	4770      	bx	lr

00012d9a <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   12d9a:	680a      	ldr	r2, [r1, #0]
   12d9c:	6042      	str	r2, [r0, #4]
   12d9e:	6849      	ldr	r1, [r1, #4]
   12da0:	6081      	str	r1, [r0, #8]
   12da2:	4770      	bx	lr

00012da4 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   12da4:	680a      	ldr	r2, [r1, #0]
   12da6:	6042      	str	r2, [r0, #4]
   12da8:	6849      	ldr	r1, [r1, #4]
   12daa:	6081      	str	r1, [r0, #8]
   12dac:	4770      	bx	lr

00012dae <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   12dae:	7802      	ldrb	r2, [r0, #0]
   12db0:	f001 0103 	and.w	r1, r1, #3
   12db4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   12db8:	4311      	orrs	r1, r2
   12dba:	7001      	strb	r1, [r0, #0]
   12dbc:	4770      	bx	lr

00012dbe <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   12dbe:	7101      	strb	r1, [r0, #4]
   12dc0:	0a09      	lsrs	r1, r1, #8
   12dc2:	7141      	strb	r1, [r0, #5]
   12dc4:	4770      	bx	lr

00012dc6 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   12dc6:	7181      	strb	r1, [r0, #6]
   12dc8:	0a09      	lsrs	r1, r1, #8
   12dca:	71c1      	strb	r1, [r0, #7]
   12dcc:	4770      	bx	lr

00012dce <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   12dce:	7201      	strb	r1, [r0, #8]
   12dd0:	0a09      	lsrs	r1, r1, #8
   12dd2:	7241      	strb	r1, [r0, #9]
   12dd4:	4770      	bx	lr

00012dd6 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   12dd6:	7281      	strb	r1, [r0, #10]
   12dd8:	0a09      	lsrs	r1, r1, #8
   12dda:	72c1      	strb	r1, [r0, #11]
   12ddc:	4770      	bx	lr

00012dde <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>:
   12dde:	78c0      	ldrb	r0, [r0, #3]
   12de0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12de4:	4770      	bx	lr

00012de6 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>:
   12de6:	78c1      	ldrb	r1, [r0, #3]
   12de8:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   12dec:	bf18      	it	ne
   12dee:	2201      	movne	r2, #1
   12df0:	7900      	ldrb	r0, [r0, #4]
   12df2:	f010 0301 	ands.w	r3, r0, #1
   12df6:	bf18      	it	ne
   12df8:	2301      	movne	r3, #1
   12dfa:	ea03 0c02 	and.w	ip, r3, r2
   12dfe:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   12e02:	bf14      	ite	ne
   12e04:	2301      	movne	r3, #1
   12e06:	2300      	moveq	r3, #0
   12e08:	f010 0202 	ands.w	r2, r0, #2
   12e0c:	bf18      	it	ne
   12e0e:	2201      	movne	r2, #1
   12e10:	401a      	ands	r2, r3
   12e12:	4462      	add	r2, ip
   12e14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   12e18:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   12e1c:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   12e20:	bf14      	ite	ne
   12e22:	2301      	movne	r3, #1
   12e24:	2300      	moveq	r3, #0
   12e26:	f010 0208 	ands.w	r2, r0, #8
   12e2a:	bf18      	it	ne
   12e2c:	2201      	movne	r2, #1
   12e2e:	401a      	ands	r2, r3
   12e30:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
   12e34:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   12e38:	bf18      	it	ne
   12e3a:	2201      	movne	r2, #1
   12e3c:	f010 0304 	ands.w	r3, r0, #4
   12e40:	bf18      	it	ne
   12e42:	2301      	movne	r3, #1
   12e44:	401a      	ands	r2, r3
   12e46:	4494      	add	ip, r2
   12e48:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   12e4c:	bf18      	it	ne
   12e4e:	2201      	movne	r2, #1
   12e50:	f010 0320 	ands.w	r3, r0, #32
   12e54:	bf18      	it	ne
   12e56:	2301      	movne	r3, #1
   12e58:	401a      	ands	r2, r3
   12e5a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   12e5e:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
   12e62:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   12e66:	bf18      	it	ne
   12e68:	2201      	movne	r2, #1
   12e6a:	f010 0310 	ands.w	r3, r0, #16
   12e6e:	bf18      	it	ne
   12e70:	2301      	movne	r3, #1
   12e72:	401a      	ands	r2, r3
   12e74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   12e78:	4462      	add	r2, ip
   12e7a:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
   12e7e:	bf18      	it	ne
   12e80:	2101      	movne	r1, #1
   12e82:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   12e86:	bf18      	it	ne
   12e88:	2001      	movne	r0, #1
   12e8a:	4008      	ands	r0, r1
   12e8c:	4410      	add	r0, r2
   12e8e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   12e92:	bf1c      	itt	ne
   12e94:	1c40      	addne	r0, r0, #1
   12e96:	b2c0      	uxtbne	r0, r0
   12e98:	4770      	bx	lr

00012e9a <sym_YJWWIM3RHASWWTC5FXJ2FVPFFWZQSPVS3K54SEQ>:
   12e9a:	7840      	ldrb	r0, [r0, #1]
   12e9c:	4770      	bx	lr

00012e9e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   12e9e:	b530      	push	{r4, r5, lr}
   12ea0:	7802      	ldrb	r2, [r0, #0]
   12ea2:	b083      	sub	sp, #12
   12ea4:	f002 020f 	and.w	r2, r2, #15
   12ea8:	2a03      	cmp	r2, #3
   12eaa:	d057      	beq.n	12f5c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xbe>
   12eac:	2a05      	cmp	r2, #5
   12eae:	d152      	bne.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12eb0:	460d      	mov	r5, r1
   12eb2:	4604      	mov	r4, r0
   12eb4:	f100 011f 	add.w	r1, r0, #31
   12eb8:	4668      	mov	r0, sp
   12eba:	f002 fb06 	bl	154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   12ebe:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12ec2:	f89d 1000 	ldrb.w	r1, [sp]
   12ec6:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   12eca:	f88d 0004 	strb.w	r0, [sp, #4]
   12ece:	2900      	cmp	r1, #0
   12ed0:	bf04      	itt	eq
   12ed2:	f89d 1001 	ldrbeq.w	r1, [sp, #1]
   12ed6:	2900      	cmpeq	r1, #0
   12ed8:	d10a      	bne.n	12ef0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x52>
   12eda:	f89d 1002 	ldrb.w	r1, [sp, #2]
   12ede:	2900      	cmp	r1, #0
   12ee0:	bf01      	itttt	eq
   12ee2:	f89d 1003 	ldrbeq.w	r1, [sp, #3]
   12ee6:	2900      	cmpeq	r1, #0
   12ee8:	2800      	cmpeq	r0, #0
   12eea:	b003      	addeq	sp, #12
   12eec:	bf08      	it	eq
   12eee:	bd30      	popeq	{r4, r5, pc}
   12ef0:	f8b4 0019 	ldrh.w	r0, [r4, #25]
   12ef4:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   12ef8:	f8b4 1017 	ldrh.w	r1, [r4, #23]
   12efc:	7da2      	ldrb	r2, [r4, #22]
   12efe:	2d00      	cmp	r5, #0
   12f00:	bf18      	it	ne
   12f02:	f5b0 6f50 	cmpne.w	r0, #3328	; 0xd00
   12f06:	d909      	bls.n	12f1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x7e>
   12f08:	f640 5c07 	movw	ip, #3335	; 0xd07
   12f0c:	4560      	cmp	r0, ip
   12f0e:	d805      	bhi.n	12f1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x7e>
   12f10:	f894 c001 	ldrb.w	ip, [r4, #1]
   12f14:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
   12f18:	d11d      	bne.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f1a:	e011      	b.n	12f40 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xa2>
   12f1c:	f894 c001 	ldrb.w	ip, [r4, #1]
   12f20:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
   12f24:	d117      	bne.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f26:	f1a0 0c06 	sub.w	ip, r0, #6
   12f2a:	f640 457a 	movw	r5, #3194	; 0xc7a
   12f2e:	45ac      	cmp	ip, r5
   12f30:	d811      	bhi.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f32:	b182      	cbz	r2, 12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f34:	2a08      	cmp	r2, #8
   12f36:	bf98      	it	ls
   12f38:	4282      	cmpls	r2, r0
   12f3a:	d20c      	bcs.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f3c:	4288      	cmp	r0, r1
   12f3e:	d30a      	bcc.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   12f44:	d207      	bcs.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f46:	f8b4 001d 	ldrh.w	r0, [r4, #29]
   12f4a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   12f4e:	d802      	bhi.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f50:	b003      	add	sp, #12
   12f52:	2001      	movs	r0, #1
   12f54:	bd30      	pop	{r4, r5, pc}
   12f56:	b003      	add	sp, #12
   12f58:	2000      	movs	r0, #0
   12f5a:	bd30      	pop	{r4, r5, pc}
   12f5c:	7840      	ldrb	r0, [r0, #1]
   12f5e:	280c      	cmp	r0, #12
   12f60:	d1f9      	bne.n	12f56 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   12f62:	e7f5      	b.n	12f50 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb2>

00012f64 <sym_PVUEVCCU6GBXS4SSN6KRMQWGFE4INJ34NEDDTZA>:
   12f64:	b570      	push	{r4, r5, r6, lr}
   12f66:	4605      	mov	r5, r0
   12f68:	78c0      	ldrb	r0, [r0, #3]
   12f6a:	4616      	mov	r6, r2
   12f6c:	f000 043f 	and.w	r4, r0, #63	; 0x3f
   12f70:	1910      	adds	r0, r2, r4
   12f72:	1c40      	adds	r0, r0, #1
   12f74:	28ff      	cmp	r0, #255	; 0xff
   12f76:	d904      	bls.n	12f82 <sym_PVUEVCCU6GBXS4SSN6KRMQWGFE4INJ34NEDDTZA+0x1e>
   12f78:	f44f 714c 	mov.w	r1, #816	; 0x330
   12f7c:	202a      	movs	r0, #42	; 0x2a
   12f7e:	f7f1 fb9d 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12f82:	1928      	adds	r0, r5, r4
   12f84:	1d00      	adds	r0, r0, #4
   12f86:	f7fd ff97 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12f8a:	19a0      	adds	r0, r4, r6
   12f8c:	1c40      	adds	r0, r0, #1
   12f8e:	7068      	strb	r0, [r5, #1]
   12f90:	bd70      	pop	{r4, r5, r6, pc}

00012f92 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>:
   12f92:	22c0      	movs	r2, #192	; 0xc0
   12f94:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   12f98:	78c2      	ldrb	r2, [r0, #3]
   12f9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   12f9e:	4311      	orrs	r1, r2
   12fa0:	70c1      	strb	r1, [r0, #3]
   12fa2:	4770      	bx	lr

00012fa4 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   12fa4:	b570      	push	{r4, r5, r6, lr}
   12fa6:	4614      	mov	r4, r2
   12fa8:	4605      	mov	r5, r0
   12faa:	2a1f      	cmp	r2, #31
   12fac:	d903      	bls.n	12fb6 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   12fae:	21b5      	movs	r1, #181	; 0xb5
   12fb0:	202a      	movs	r0, #42	; 0x2a
   12fb2:	f7f1 fb83 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12fb6:	f105 0009 	add.w	r0, r5, #9
   12fba:	f7fd ff7d 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12fbe:	1da0      	adds	r0, r4, #6
   12fc0:	7068      	strb	r0, [r5, #1]
   12fc2:	bd70      	pop	{r4, r5, r6, pc}

00012fc4 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>:
   12fc4:	b570      	push	{r4, r5, r6, lr}
   12fc6:	461c      	mov	r4, r3
   12fc8:	000d      	movs	r5, r1
   12fca:	4606      	mov	r6, r0
   12fcc:	d00c      	beq.n	12fe8 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x24>
   12fce:	4611      	mov	r1, r2
   12fd0:	f7ff fdae 	bl	12b30 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
   12fd4:	b168      	cbz	r0, 12ff2 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x2e>
   12fd6:	1901      	adds	r1, r0, r4
   12fd8:	1f09      	subs	r1, r1, #4
   12fda:	293f      	cmp	r1, #63	; 0x3f
   12fdc:	dd0e      	ble.n	12ffc <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x38>
   12fde:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   12fe2:	202a      	movs	r0, #42	; 0x2a
   12fe4:	f7f1 fb6a 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12fe8:	f240 21d2 	movw	r1, #722	; 0x2d2
   12fec:	202a      	movs	r0, #42	; 0x2a
   12fee:	f7f1 fb65 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12ff2:	f240 21d3 	movw	r1, #723	; 0x2d3
   12ff6:	202a      	movs	r0, #42	; 0x2a
   12ff8:	f7f1 fb60 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12ffc:	4430      	add	r0, r6
   12ffe:	4622      	mov	r2, r4
   13000:	4629      	mov	r1, r5
   13002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13006:	f7fd bf57 	b.w	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0001300a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>:
   1300a:	b2cb      	uxtb	r3, r1
   1300c:	f003 0101 	and.w	r1, r3, #1
   13010:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   13014:	4461      	add	r1, ip
   13016:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1301a:	f3c3 0c80 	ubfx	ip, r3, #2, #1
   1301e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
   13022:	f3c3 0cc0 	ubfx	ip, r3, #3, #1
   13026:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   1302a:	f3c3 1c00 	ubfx	ip, r3, #4, #1
   1302e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13032:	4461      	add	r1, ip
   13034:	f3c3 1c40 	ubfx	ip, r3, #5, #1
   13038:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
   1303c:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   13040:	f3c3 1c80 	ubfx	ip, r3, #6, #1
   13044:	4461      	add	r1, ip
   13046:	4411      	add	r1, r2
   13048:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1304c:	d002      	beq.n	13054 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ+0x4a>
   1304e:	1c49      	adds	r1, r1, #1
   13050:	b2c9      	uxtb	r1, r1
   13052:	7103      	strb	r3, [r0, #4]
   13054:	f890 c003 	ldrb.w	ip, [r0, #3]
   13058:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   1305c:	f00c 0cc0 	and.w	ip, ip, #192	; 0xc0
   13060:	ea43 030c 	orr.w	r3, r3, ip
   13064:	70c3      	strb	r3, [r0, #3]
   13066:	1c4b      	adds	r3, r1, #1
   13068:	7043      	strb	r3, [r0, #1]
   1306a:	2a00      	cmp	r2, #0
   1306c:	bf08      	it	eq
   1306e:	4770      	bxeq	lr
   13070:	1e53      	subs	r3, r2, #1
   13072:	1a89      	subs	r1, r1, r2
   13074:	4408      	add	r0, r1
   13076:	7103      	strb	r3, [r0, #4]
   13078:	4770      	bx	lr

0001307a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   1307a:	b510      	push	{r4, lr}
   1307c:	7802      	ldrb	r2, [r0, #0]
   1307e:	f001 030f 	and.w	r3, r1, #15
   13082:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   13086:	431a      	orrs	r2, r3
   13088:	7002      	strb	r2, [r0, #0]
   1308a:	2909      	cmp	r1, #9
   1308c:	d213      	bcs.n	130b6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
   1308e:	e8df f001 	tbb	[pc, r1]
   13092:	0705      	.short	0x0705
   13094:	09050705 	.word	0x09050705
   13098:	000f0b05 	.word	0x000f0b05
   1309c:	2106      	movs	r1, #6
   1309e:	e008      	b.n	130b2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   130a0:	210c      	movs	r1, #12
   130a2:	e006      	b.n	130b2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   130a4:	2122      	movs	r1, #34	; 0x22
   130a6:	e004      	b.n	130b2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   130a8:	2101      	movs	r1, #1
   130aa:	2200      	movs	r2, #0
   130ac:	70c2      	strb	r2, [r0, #3]
   130ae:	e000      	b.n	130b2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   130b0:	210e      	movs	r1, #14
   130b2:	7041      	strb	r1, [r0, #1]
   130b4:	bd10      	pop	{r4, pc}
   130b6:	216f      	movs	r1, #111	; 0x6f
   130b8:	202a      	movs	r0, #42	; 0x2a
   130ba:	f7f1 faff 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000130be <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   130be:	680a      	ldr	r2, [r1, #0]
   130c0:	f8c0 2009 	str.w	r2, [r0, #9]
   130c4:	8889      	ldrh	r1, [r1, #4]
   130c6:	f8a0 100d 	strh.w	r1, [r0, #13]
   130ca:	4770      	bx	lr

000130cc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   130cc:	7802      	ldrb	r2, [r0, #0]
   130ce:	2380      	movs	r3, #128	; 0x80
   130d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   130d4:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   130d8:	4311      	orrs	r1, r2
   130da:	7001      	strb	r1, [r0, #0]
   130dc:	4770      	bx	lr

000130de <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   130de:	680a      	ldr	r2, [r1, #0]
   130e0:	f8c0 2003 	str.w	r2, [r0, #3]
   130e4:	8889      	ldrh	r1, [r1, #4]
   130e6:	f8a0 1007 	strh.w	r1, [r0, #7]
   130ea:	4770      	bx	lr

000130ec <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   130ec:	7802      	ldrb	r2, [r0, #0]
   130ee:	2340      	movs	r3, #64	; 0x40
   130f0:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   130f4:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   130f8:	4311      	orrs	r1, r2
   130fa:	7001      	strb	r1, [r0, #0]
   130fc:	4770      	bx	lr

000130fe <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   130fe:	b570      	push	{r4, r5, r6, lr}
   13100:	4614      	mov	r4, r2
   13102:	4605      	mov	r5, r0
   13104:	2a1f      	cmp	r2, #31
   13106:	d903      	bls.n	13110 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   13108:	21d7      	movs	r1, #215	; 0xd7
   1310a:	202a      	movs	r0, #42	; 0x2a
   1310c:	f7f1 fad6 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13110:	f105 0009 	add.w	r0, r5, #9
   13114:	f7fd fed0 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   13118:	1da0      	adds	r0, r4, #6
   1311a:	7068      	strb	r0, [r5, #1]
   1311c:	bd70      	pop	{r4, r5, r6, pc}

0001311e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   1311e:	7801      	ldrb	r1, [r0, #0]
   13120:	2900      	cmp	r1, #0
   13122:	bf08      	it	eq
   13124:	4770      	bxeq	lr
   13126:	6841      	ldr	r1, [r0, #4]
   13128:	f891 227a 	ldrb.w	r2, [r1, #634]	; 0x27a
   1312c:	2a00      	cmp	r2, #0
   1312e:	bf08      	it	eq
   13130:	4770      	bxeq	lr
   13132:	2200      	movs	r2, #0
   13134:	f881 227a 	strb.w	r2, [r1, #634]	; 0x27a
   13138:	6840      	ldr	r0, [r0, #4]
   1313a:	f000 bdc2 	b.w	13cc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   1313e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13142:	460c      	mov	r4, r1
   13144:	b180      	cbz	r0, 13168 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x4a>
   13146:	2600      	movs	r6, #0
   13148:	4607      	mov	r7, r0
   1314a:	f500 75b9 	add.w	r5, r0, #370	; 0x172
   1314e:	2a10      	cmp	r2, #16
   13150:	d07b      	beq.n	1324a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x12c>
   13152:	dc0e      	bgt.n	13172 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
   13154:	f1a2 0005 	sub.w	r0, r2, #5
   13158:	2808      	cmp	r0, #8
   1315a:	d216      	bcs.n	1318a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6c>
   1315c:	e8df f000 	tbb	[pc, r0]
   13160:	15151a5f 	.word	0x15151a5f
   13164:	6e152a43 	.word	0x6e152a43
   13168:	f44f 7112 	mov.w	r1, #584	; 0x248
   1316c:	2010      	movs	r0, #16
   1316e:	f7f1 faa5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13172:	2a18      	cmp	r2, #24
   13174:	d077      	beq.n	13266 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x148>
   13176:	dc04      	bgt.n	13182 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x64>
   13178:	2a11      	cmp	r2, #17
   1317a:	d075      	beq.n	13268 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x14a>
   1317c:	2a17      	cmp	r2, #23
   1317e:	d074      	beq.n	1326a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x14c>
   13180:	e003      	b.n	1318a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6c>
   13182:	2a1a      	cmp	r2, #26
   13184:	d074      	beq.n	13270 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x152>
   13186:	2a1b      	cmp	r2, #27
   13188:	d07d      	beq.n	13286 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x168>
   1318a:	f240 2175 	movw	r1, #629	; 0x275
   1318e:	2010      	movs	r0, #16
   13190:	f7f1 fa94 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13194:	7066      	strb	r6, [r4, #1]
   13196:	2009      	movs	r0, #9
   13198:	7020      	strb	r0, [r4, #0]
   1319a:	85be      	strh	r6, [r7, #44]	; 0x2c
   1319c:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
   131a0:	6060      	str	r0, [r4, #4]
   131a2:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   131a6:	60a0      	str	r0, [r4, #8]
   131a8:	f8b5 0088 	ldrh.w	r0, [r5, #136]	; 0x88
   131ac:	81a0      	strh	r0, [r4, #12]
   131ae:	7126      	strb	r6, [r4, #4]
   131b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131b4:	8838      	ldrh	r0, [r7, #0]
   131b6:	f7f1 ff0b 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   131ba:	4680      	mov	r8, r0
   131bc:	f7fe fe7f 	bl	11ebe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   131c0:	b120      	cbz	r0, 131cc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xae>
   131c2:	f240 11b9 	movw	r1, #441	; 0x1b9
   131c6:	2010      	movs	r0, #16
   131c8:	f7f1 fa78 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   131cc:	7066      	strb	r6, [r4, #1]
   131ce:	200e      	movs	r0, #14
   131d0:	7020      	strb	r0, [r4, #0]
   131d2:	f895 00f4 	ldrb.w	r0, [r5, #244]	; 0xf4
   131d6:	7120      	strb	r0, [r4, #4]
   131d8:	8838      	ldrh	r0, [r7, #0]
   131da:	80e0      	strh	r0, [r4, #6]
   131dc:	4640      	mov	r0, r8
   131de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   131e2:	f7fe be88 	b.w	11ef6 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   131e6:	8838      	ldrh	r0, [r7, #0]
   131e8:	f7f1 fef2 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   131ec:	4680      	mov	r8, r0
   131ee:	f7fe fe66 	bl	11ebe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   131f2:	b120      	cbz	r0, 131fe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe0>
   131f4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   131f8:	2010      	movs	r0, #16
   131fa:	f7f1 fa5f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   131fe:	7066      	strb	r6, [r4, #1]
   13200:	200d      	movs	r0, #13
   13202:	7020      	strb	r0, [r4, #0]
   13204:	f895 00f4 	ldrb.w	r0, [r5, #244]	; 0xf4
   13208:	7120      	strb	r0, [r4, #4]
   1320a:	8838      	ldrh	r0, [r7, #0]
   1320c:	80e0      	strh	r0, [r4, #6]
   1320e:	f895 00f8 	ldrb.w	r0, [r5, #248]	; 0xf8
   13212:	7220      	strb	r0, [r4, #8]
   13214:	4640      	mov	r0, r8
   13216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1321a:	f7fe be6c 	b.w	11ef6 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   1321e:	7066      	strb	r6, [r4, #1]
   13220:	2008      	movs	r0, #8
   13222:	7020      	strb	r0, [r4, #0]
   13224:	f8d5 006a 	ldr.w	r0, [r5, #106]	; 0x6a
   13228:	f8d5 106e 	ldr.w	r1, [r5, #110]	; 0x6e
   1322c:	f8d5 2072 	ldr.w	r2, [r5, #114]	; 0x72
   13230:	6060      	str	r0, [r4, #4]
   13232:	60a1      	str	r1, [r4, #8]
   13234:	60e2      	str	r2, [r4, #12]
   13236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1323a:	e006      	b.n	1324a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x12c>
   1323c:	7066      	strb	r6, [r4, #1]
   1323e:	2010      	movs	r0, #16
   13240:	7020      	strb	r0, [r4, #0]
   13242:	8838      	ldrh	r0, [r7, #0]
   13244:	80a0      	strh	r0, [r4, #4]
   13246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1324a:	7066      	strb	r6, [r4, #1]
   1324c:	2015      	movs	r0, #21
   1324e:	7020      	strb	r0, [r4, #0]
   13250:	f8d5 0022 	ldr.w	r0, [r5, #34]	; 0x22
   13254:	f8d5 1026 	ldr.w	r1, [r5, #38]	; 0x26
   13258:	f8d5 202a 	ldr.w	r2, [r5, #42]	; 0x2a
   1325c:	6060      	str	r0, [r4, #4]
   1325e:	60a1      	str	r1, [r4, #8]
   13260:	60e2      	str	r2, [r4, #12]
   13262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13266:	e012      	b.n	1328e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x170>
   13268:	e018      	b.n	1329c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x17e>
   1326a:	e021      	b.n	132b0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x192>
   1326c:	e000      	b.n	13270 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x152>
   1326e:	e00a      	b.n	13286 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x168>
   13270:	7066      	strb	r6, [r4, #1]
   13272:	2022      	movs	r0, #34	; 0x22
   13274:	7020      	strb	r0, [r4, #0]
   13276:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   13278:	6060      	str	r0, [r4, #4]
   1327a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   1327c:	60a0      	str	r0, [r4, #8]
   1327e:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
   13282:	81a0      	strh	r0, [r4, #12]
   13284:	e7ed      	b.n	13262 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x144>
   13286:	2023      	movs	r0, #35	; 0x23
   13288:	7020      	strb	r0, [r4, #0]
   1328a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   1328c:	e004      	b.n	13298 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x17a>
   1328e:	7066      	strb	r6, [r4, #1]
   13290:	2020      	movs	r0, #32
   13292:	7020      	strb	r0, [r4, #0]
   13294:	f8d5 000a 	ldr.w	r0, [r5, #10]
   13298:	6048      	str	r0, [r1, #4]
   1329a:	e7e2      	b.n	13262 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x144>
   1329c:	7066      	strb	r6, [r4, #1]
   1329e:	2016      	movs	r0, #22
   132a0:	7020      	strb	r0, [r4, #0]
   132a2:	f8d5 005a 	ldr.w	r0, [r5, #90]	; 0x5a
   132a6:	6060      	str	r0, [r4, #4]
   132a8:	f8b5 005e 	ldrh.w	r0, [r5, #94]	; 0x5e
   132ac:	8120      	strh	r0, [r4, #8]
   132ae:	e7d8      	b.n	13262 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x144>
   132b0:	7066      	strb	r6, [r4, #1]
   132b2:	201e      	movs	r0, #30
   132b4:	7020      	strb	r0, [r4, #0]
   132b6:	8838      	ldrh	r0, [r7, #0]
   132b8:	f8a4 0005 	strh.w	r0, [r4, #5]
   132bc:	f8d5 00d7 	ldr.w	r0, [r5, #215]	; 0xd7
   132c0:	6060      	str	r0, [r4, #4]
   132c2:	f8d5 00db 	ldr.w	r0, [r5, #219]	; 0xdb
   132c6:	60a0      	str	r0, [r4, #8]
   132c8:	f8d5 00df 	ldr.w	r0, [r5, #223]	; 0xdf
   132cc:	60e0      	str	r0, [r4, #12]
   132ce:	f8d5 00e3 	ldr.w	r0, [r5, #227]	; 0xe3
   132d2:	6120      	str	r0, [r4, #16]
   132d4:	f8b5 00e7 	ldrh.w	r0, [r5, #231]	; 0xe7
   132d8:	82a0      	strh	r0, [r4, #20]
   132da:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   132de:	75a0      	strb	r0, [r4, #22]
   132e0:	e7bf      	b.n	13262 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x144>

000132e2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   132e2:	b4f0      	push	{r4, r5, r6, r7}
   132e4:	8150      	strh	r0, [r2, #10]
   132e6:	890c      	ldrh	r4, [r1, #8]
   132e8:	4694      	mov	ip, r2
   132ea:	8194      	strh	r4, [r2, #12]
   132ec:	898a      	ldrh	r2, [r1, #12]
   132ee:	f8ac 200e 	strh.w	r2, [ip, #14]
   132f2:	8948      	ldrh	r0, [r1, #10]
   132f4:	f8ac 0010 	strh.w	r0, [ip, #16]
   132f8:	89cd      	ldrh	r5, [r1, #14]
   132fa:	f8ac 5012 	strh.w	r5, [ip, #18]
   132fe:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
   13300:	42ae      	cmp	r6, r5
   13302:	bf04      	itt	eq
   13304:	8d4d      	ldrheq	r5, [r1, #42]	; 0x2a
   13306:	4285      	cmpeq	r5, r0
   13308:	d106      	bne.n	13318 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   1330a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
   1330c:	4295      	cmp	r5, r2
   1330e:	bf02      	ittt	eq
   13310:	8d8a      	ldrheq	r2, [r1, #44]	; 0x2c
   13312:	42a2      	cmpeq	r2, r4
   13314:	2200      	moveq	r2, #0
   13316:	d001      	beq.n	1331c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x3a>
   13318:	f04f 0201 	mov.w	r2, #1
   1331c:	f88c 2014 	strb.w	r2, [ip, #20]
   13320:	8548      	strh	r0, [r1, #42]	; 0x2a
   13322:	f8bc 0012 	ldrh.w	r0, [ip, #18]
   13326:	85c8      	strh	r0, [r1, #46]	; 0x2e
   13328:	f8bc 000c 	ldrh.w	r0, [ip, #12]
   1332c:	8588      	strh	r0, [r1, #44]	; 0x2c
   1332e:	f8bc 000e 	ldrh.w	r0, [ip, #14]
   13332:	8608      	strh	r0, [r1, #48]	; 0x30
   13334:	bcf0      	pop	{r4, r5, r6, r7}
   13336:	f04f 0210 	mov.w	r2, #16
   1333a:	4619      	mov	r1, r3
   1333c:	4660      	mov	r0, ip
   1333e:	f7f3 bfc3 	b.w	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

00013342 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   13342:	b570      	push	{r4, r5, r6, lr}
   13344:	4616      	mov	r6, r2
   13346:	460c      	mov	r4, r1
   13348:	6942      	ldr	r2, [r0, #20]
   1334a:	2596      	movs	r5, #150	; 0x96
   1334c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   13350:	428a      	cmp	r2, r1
   13352:	bf3a      	itte	cc
   13354:	254d      	movcc	r5, #77	; 0x4d
   13356:	4629      	movcc	r1, r5
   13358:	2196      	movcs	r1, #150	; 0x96
   1335a:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
   1335e:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
   13362:	f7f4 fb47 	bl	79f4 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xc>
   13366:	4428      	add	r0, r5
   13368:	4430      	add	r0, r6
   1336a:	42a0      	cmp	r0, r4
   1336c:	bf94      	ite	ls
   1336e:	1a20      	subls	r0, r4, r0
   13370:	2000      	movhi	r0, #0
   13372:	bd70      	pop	{r4, r5, r6, pc}

00013374 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   13374:	b4f0      	push	{r4, r5, r6, r7}
   13376:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   1337a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
   1337e:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
   13380:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
   13384:	428a      	cmp	r2, r1
   13386:	bf28      	it	cs
   13388:	460a      	movcs	r2, r1
   1338a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
   1338e:	f04f 0400 	mov.w	r4, #0
   13392:	f011 0f0c 	tst.w	r1, #12
   13396:	bf18      	it	ne
   13398:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   1339c:	d106      	bne.n	133ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
   1339e:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
   133a2:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
   133a6:	428b      	cmp	r3, r1
   133a8:	bf38      	it	cc
   133aa:	4619      	movcc	r1, r3
   133ac:	87c2      	strh	r2, [r0, #62]	; 0x3e
   133ae:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
   133b2:	f8b0 c044 	ldrh.w	ip, [r0, #68]	; 0x44
   133b6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   133ba:	4594      	cmp	ip, r2
   133bc:	bf38      	it	cc
   133be:	4694      	movcc	ip, r2
   133c0:	428b      	cmp	r3, r1
   133c2:	bf38      	it	cc
   133c4:	460b      	movcc	r3, r1
   133c6:	f8a0 c044 	strh.w	ip, [r0, #68]	; 0x44
   133ca:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
   133ce:	42b2      	cmp	r2, r6
   133d0:	bf0a      	itet	eq
   133d2:	42a9      	cmpeq	r1, r5
   133d4:	2301      	movne	r3, #1
   133d6:	2300      	moveq	r3, #0
   133d8:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   133da:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
   133de:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   133e2:	f8b0 c040 	ldrh.w	ip, [r0, #64]	; 0x40
   133e6:	428a      	cmp	r2, r1
   133e8:	bf28      	it	cs
   133ea:	460a      	movcs	r2, r1
   133ec:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
   133f0:	f011 0f0c 	tst.w	r1, #12
   133f4:	bf18      	it	ne
   133f6:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   133fa:	d106      	bne.n	1340a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
   133fc:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
   13400:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
   13404:	428e      	cmp	r6, r1
   13406:	bf38      	it	cc
   13408:	4631      	movcc	r1, r6
   1340a:	f890 6068 	ldrb.w	r6, [r0, #104]	; 0x68
   1340e:	2e02      	cmp	r6, #2
   13410:	d00b      	beq.n	1342a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xb6>
   13412:	8782      	strh	r2, [r0, #60]	; 0x3c
   13414:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
   13418:	42aa      	cmp	r2, r5
   1341a:	bf0a      	itet	eq
   1341c:	4561      	cmpeq	r1, ip
   1341e:	2001      	movne	r0, #1
   13420:	2000      	moveq	r0, #0
   13422:	ea40 0003 	orr.w	r0, r0, r3
   13426:	bcf0      	pop	{r4, r5, r6, r7}
   13428:	4770      	bx	lr
   1342a:	4295      	cmp	r5, r2
   1342c:	bf38      	it	cc
   1342e:	462a      	movcc	r2, r5
   13430:	458c      	cmp	ip, r1
   13432:	bf38      	it	cc
   13434:	4661      	movcc	r1, ip
   13436:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
   1343a:	e7ea      	b.n	13412 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>

0001343c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
   1343c:	6840      	ldr	r0, [r0, #4]
   1343e:	4770      	bx	lr

00013440 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   13440:	b570      	push	{r4, r5, r6, lr}
   13442:	460d      	mov	r5, r1
   13444:	4616      	mov	r6, r2
   13446:	6941      	ldr	r1, [r0, #20]
   13448:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1344c:	4604      	mov	r4, r0
   1344e:	4291      	cmp	r1, r2
   13450:	bf34      	ite	cc
   13452:	214d      	movcc	r1, #77	; 0x4d
   13454:	2196      	movcs	r1, #150	; 0x96
   13456:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
   1345a:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
   1345e:	f7f4 fac9 	bl	79f4 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xc>
   13462:	6963      	ldr	r3, [r4, #20]
   13464:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13466:	4299      	cmp	r1, r3
   13468:	bf38      	it	cc
   1346a:	460b      	movcc	r3, r1
   1346c:	1b59      	subs	r1, r3, r5
   1346e:	4430      	add	r0, r6
   13470:	4288      	cmp	r0, r1
   13472:	bf38      	it	cc
   13474:	4608      	movcc	r0, r1
   13476:	63a0      	str	r0, [r4, #56]	; 0x38
   13478:	bd70      	pop	{r4, r5, r6, pc}

0001347a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   1347a:	221b      	movs	r2, #27
   1347c:	8402      	strh	r2, [r0, #32]
   1347e:	8382      	strh	r2, [r0, #28]
   13480:	82c2      	strh	r2, [r0, #22]
   13482:	8282      	strh	r2, [r0, #20]
   13484:	8142      	strh	r2, [r0, #10]
   13486:	8202      	strh	r2, [r0, #16]
   13488:	8102      	strh	r2, [r0, #8]
   1348a:	8542      	strh	r2, [r0, #42]	; 0x2a
   1348c:	8582      	strh	r2, [r0, #44]	; 0x2c
   1348e:	8482      	strh	r2, [r0, #36]	; 0x24
   13490:	b159      	cbz	r1, 134aa <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   13492:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   13496:	8441      	strh	r1, [r0, #34]	; 0x22
   13498:	83c1      	strh	r1, [r0, #30]
   1349a:	8341      	strh	r1, [r0, #26]
   1349c:	8301      	strh	r1, [r0, #24]
   1349e:	81c1      	strh	r1, [r0, #14]
   134a0:	8241      	strh	r1, [r0, #18]
   134a2:	8181      	strh	r1, [r0, #12]
   134a4:	85c1      	strh	r1, [r0, #46]	; 0x2e
   134a6:	8601      	strh	r1, [r0, #48]	; 0x30
   134a8:	4770      	bx	lr
   134aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
   134ae:	8441      	strh	r1, [r0, #34]	; 0x22
   134b0:	83c1      	strh	r1, [r0, #30]
   134b2:	8341      	strh	r1, [r0, #26]
   134b4:	8301      	strh	r1, [r0, #24]
   134b6:	81c1      	strh	r1, [r0, #14]
   134b8:	8241      	strh	r1, [r0, #18]
   134ba:	8181      	strh	r1, [r0, #12]
   134bc:	85c1      	strh	r1, [r0, #46]	; 0x2e
   134be:	8601      	strh	r1, [r0, #48]	; 0x30
   134c0:	4770      	bx	lr

000134c2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   134c2:	6800      	ldr	r0, [r0, #0]
   134c4:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   134c8:	4290      	cmp	r0, r2
   134ca:	bf9c      	itt	ls
   134cc:	2000      	movls	r0, #0
   134ce:	4770      	bxls	lr
   134d0:	1a40      	subs	r0, r0, r1
   134d2:	389c      	subs	r0, #156	; 0x9c
   134d4:	0840      	lsrs	r0, r0, #1
   134d6:	4770      	bx	lr

000134d8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   134d8:	f8dd c000 	ldr.w	ip, [sp]
   134dc:	8281      	strh	r1, [r0, #20]
   134de:	82c2      	strh	r2, [r0, #22]
   134e0:	8303      	strh	r3, [r0, #24]
   134e2:	f8a0 c01a 	strh.w	ip, [r0, #26]
   134e6:	4770      	bx	lr

000134e8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   134e8:	8150      	strh	r0, [r2, #10]
   134ea:	8a88      	ldrh	r0, [r1, #20]
   134ec:	8190      	strh	r0, [r2, #12]
   134ee:	8ac8      	ldrh	r0, [r1, #22]
   134f0:	81d0      	strh	r0, [r2, #14]
   134f2:	8b08      	ldrh	r0, [r1, #24]
   134f4:	8210      	strh	r0, [r2, #16]
   134f6:	8b48      	ldrh	r0, [r1, #26]
   134f8:	4694      	mov	ip, r2
   134fa:	8250      	strh	r0, [r2, #18]
   134fc:	221a      	movs	r2, #26
   134fe:	4619      	mov	r1, r3
   13500:	4660      	mov	r0, ip
   13502:	f7f3 bee1 	b.w	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

00013506 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
   13506:	f000 0155 	and.w	r1, r0, #85	; 0x55
   1350a:	2255      	movs	r2, #85	; 0x55
   1350c:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   13510:	4408      	add	r0, r1
   13512:	f000 0133 	and.w	r1, r0, #51	; 0x33
   13516:	2233      	movs	r2, #51	; 0x33
   13518:	ea02 0090 	and.w	r0, r2, r0, lsr #2
   1351c:	4408      	add	r0, r1
   1351e:	f000 010f 	and.w	r1, r0, #15
   13522:	eb01 1010 	add.w	r0, r1, r0, lsr #4
   13526:	4770      	bx	lr

00013528 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
   13528:	b510      	push	{r4, lr}
   1352a:	4604      	mov	r4, r0
   1352c:	7c80      	ldrb	r0, [r0, #18]
   1352e:	2802      	cmp	r0, #2
   13530:	bf18      	it	ne
   13532:	2803      	cmpne	r0, #3
   13534:	d109      	bne.n	1354a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x22>
   13536:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1353a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   1353e:	f7f3 f8bf 	bl	66c0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   13542:	2808      	cmp	r0, #8
   13544:	bf1c      	itt	ne
   13546:	2001      	movne	r0, #1
   13548:	bd10      	popne	{r4, pc}
   1354a:	7ca0      	ldrb	r0, [r4, #18]
   1354c:	2800      	cmp	r0, #0
   1354e:	bf1e      	ittt	ne
   13550:	2802      	cmpne	r0, #2
   13552:	7e60      	ldrbne	r0, [r4, #25]
   13554:	bd10      	popne	{r4, pc}
   13556:	f04f 0000 	mov.w	r0, #0
   1355a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1355e:	f7f2 b84d 	b.w	55fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

00013562 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
   13562:	b508      	push	{r3, lr}
   13564:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   13568:	f88d 1000 	strb.w	r1, [sp]
   1356c:	f89d 1000 	ldrb.w	r1, [sp]
   13570:	b959      	cbnz	r1, 1358a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x28>
   13572:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
   13576:	f88d 0000 	strb.w	r0, [sp]
   1357a:	f89d 0000 	ldrb.w	r0, [sp]
   1357e:	b110      	cbz	r0, 13586 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x24>
   13580:	f7fb f914 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   13584:	b108      	cbz	r0, 1358a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x28>
   13586:	2000      	movs	r0, #0
   13588:	bd08      	pop	{r3, pc}
   1358a:	2001      	movs	r0, #1
   1358c:	bd08      	pop	{r3, pc}

0001358e <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
   1358e:	20ff      	movs	r0, #255	; 0xff
   13590:	7008      	strb	r0, [r1, #0]
   13592:	6c48      	ldr	r0, [r1, #68]	; 0x44
   13594:	f7fe bf68 	b.w	12468 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00013598 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
   13598:	b530      	push	{r4, r5, lr}
   1359a:	460d      	mov	r5, r1
   1359c:	b085      	sub	sp, #20
   1359e:	4604      	mov	r4, r0
   135a0:	f44f 72ac 	mov.w	r2, #344	; 0x158
   135a4:	2100      	movs	r1, #0
   135a6:	f7fd fd01 	bl	10fac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   135aa:	20ff      	movs	r0, #255	; 0xff
   135ac:	7020      	strb	r0, [r4, #0]
   135ae:	207f      	movs	r0, #127	; 0x7f
   135b0:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
   135b4:	2013      	movs	r0, #19
   135b6:	8060      	strh	r0, [r4, #2]
   135b8:	f7f1 fdce 	bl	5158 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
   135bc:	4601      	mov	r1, r0
   135be:	6460      	str	r0, [r4, #68]	; 0x44
   135c0:	2200      	movs	r2, #0
   135c2:	a802      	add	r0, sp, #8
   135c4:	f7fe feb6 	bl	12334 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   135c8:	2200      	movs	r2, #0
   135ca:	2101      	movs	r1, #1
   135cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   135ce:	f7fe ff2a 	bl	12426 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   135d2:	2204      	movs	r2, #4
   135d4:	a802      	add	r0, sp, #8
   135d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   135d8:	f7fe feac 	bl	12334 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   135dc:	2200      	movs	r2, #0
   135de:	4611      	mov	r1, r2
   135e0:	6c60      	ldr	r0, [r4, #68]	; 0x44
   135e2:	f7fe ff20 	bl	12426 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   135e6:	7425      	strb	r5, [r4, #16]
   135e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   135ec:	f000 fa4a 	bl	13a84 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   135f0:	4668      	mov	r0, sp
   135f2:	f7f3 fbb3 	bl	6d5c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
   135f6:	b130      	cbz	r0, 13606 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ+0x6e>
   135f8:	4669      	mov	r1, sp
   135fa:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   135fe:	f7f3 fca1 	bl	6f44 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   13602:	b005      	add	sp, #20
   13604:	bd30      	pop	{r4, r5, pc}
   13606:	f240 3126 	movw	r1, #806	; 0x326
   1360a:	202d      	movs	r0, #45	; 0x2d
   1360c:	f7f1 f856 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013610 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
   13610:	8840      	ldrh	r0, [r0, #2]
   13612:	f3c0 1100 	ubfx	r1, r0, #4, #1
   13616:	b131      	cbz	r1, 13626 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x16>
   13618:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1361c:	2800      	cmp	r0, #0
   1361e:	bf04      	itt	eq
   13620:	201f      	moveq	r0, #31
   13622:	4770      	bxeq	lr
   13624:	e002      	b.n	1362c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1c>
   13626:	f3c0 0140 	ubfx	r1, r0, #1, #1
   1362a:	b109      	cbz	r1, 13630 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x20>
   1362c:	2000      	movs	r0, #0
   1362e:	4770      	bx	lr
   13630:	f010 0f01 	tst.w	r0, #1
   13634:	bf1c      	itt	ne
   13636:	20ee      	movne	r0, #238	; 0xee
   13638:	4770      	bxne	lr
   1363a:	f7f1 bdb3 	b.w	51a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>

0001363e <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>:
   1363e:	21ff      	movs	r1, #255	; 0xff
   13640:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
   13644:	4770      	bx	lr

00013646 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
   13646:	f7f6 bc17 	b.w	9e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1024>

0001364a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
   1364a:	b510      	push	{r4, lr}
   1364c:	4604      	mov	r4, r0
   1364e:	2000      	movs	r0, #0
   13650:	2a12      	cmp	r2, #18
   13652:	d03c      	beq.n	136ce <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x84>
   13654:	dc04      	bgt.n	13660 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x16>
   13656:	2a03      	cmp	r2, #3
   13658:	d018      	beq.n	1368c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
   1365a:	2a0e      	cmp	r2, #14
   1365c:	d01d      	beq.n	1369a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x50>
   1365e:	e003      	b.n	13668 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
   13660:	2a19      	cmp	r2, #25
   13662:	d006      	beq.n	13672 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x28>
   13664:	2a1e      	cmp	r2, #30
   13666:	d04c      	beq.n	13702 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xb8>
   13668:	f240 21d2 	movw	r1, #722	; 0x2d2
   1366c:	202d      	movs	r0, #45	; 0x2d
   1366e:	f7f1 f825 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13672:	7048      	strb	r0, [r1, #1]
   13674:	2021      	movs	r0, #33	; 0x21
   13676:	7008      	strb	r0, [r1, #0]
   13678:	f8d4 00cf 	ldr.w	r0, [r4, #207]	; 0xcf
   1367c:	6048      	str	r0, [r1, #4]
   1367e:	f8d4 00d3 	ldr.w	r0, [r4, #211]	; 0xd3
   13682:	6088      	str	r0, [r1, #8]
   13684:	f894 00d7 	ldrb.w	r0, [r4, #215]	; 0xd7
   13688:	7308      	strb	r0, [r1, #12]
   1368a:	bd10      	pop	{r4, pc}
   1368c:	7048      	strb	r0, [r1, #1]
   1368e:	2007      	movs	r0, #7
   13690:	7008      	strb	r0, [r1, #0]
   13692:	f8d4 00c2 	ldr.w	r0, [r4, #194]	; 0xc2
   13696:	6048      	str	r0, [r1, #4]
   13698:	bd10      	pop	{r4, pc}
   1369a:	7048      	strb	r0, [r1, #1]
   1369c:	2014      	movs	r0, #20
   1369e:	3488      	adds	r4, #136	; 0x88
   136a0:	f801 0b04 	strb.w	r0, [r1], #4
   136a4:	e8b4 100d 	ldmia.w	r4!, {r0, r2, r3, ip}
   136a8:	e8a1 100d 	stmia.w	r1!, {r0, r2, r3, ip}
   136ac:	e894 100d 	ldmia.w	r4, {r0, r2, r3, ip}
   136b0:	e8a1 100d 	stmia.w	r1!, {r0, r2, r3, ip}
   136b4:	2001      	movs	r0, #1
   136b6:	f801 0c1c 	strb.w	r0, [r1, #-28]
   136ba:	f811 0c20 	ldrb.w	r0, [r1, #-32]
   136be:	3c98      	subs	r4, #152	; 0x98
   136c0:	2800      	cmp	r0, #0
   136c2:	bf18      	it	ne
   136c4:	bd10      	popne	{r4, pc}
   136c6:	f7fb f871 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   136ca:	b990      	cbnz	r0, 136f2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xa8>
   136cc:	bd10      	pop	{r4, pc}
   136ce:	7048      	strb	r0, [r1, #1]
   136d0:	2017      	movs	r0, #23
   136d2:	7008      	strb	r0, [r1, #0]
   136d4:	f8d4 00b2 	ldr.w	r0, [r4, #178]	; 0xb2
   136d8:	6048      	str	r0, [r1, #4]
   136da:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   136de:	8108      	strh	r0, [r1, #8]
   136e0:	7908      	ldrb	r0, [r1, #4]
   136e2:	2800      	cmp	r0, #0
   136e4:	bf18      	it	ne
   136e6:	bd10      	popne	{r4, pc}
   136e8:	f7fb f860 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   136ec:	2800      	cmp	r0, #0
   136ee:	bf18      	it	ne
   136f0:	bd10      	popne	{r4, pc}
   136f2:	6a20      	ldr	r0, [r4, #32]
   136f4:	8800      	ldrh	r0, [r0, #0]
   136f6:	f7f1 fc6b 	bl	4fd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   136fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136fe:	f7fe bbfa 	b.w	11ef6 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   13702:	7048      	strb	r0, [r1, #1]
   13704:	2026      	movs	r0, #38	; 0x26
   13706:	460b      	mov	r3, r1
   13708:	7008      	strb	r0, [r1, #0]
   1370a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
   1370e:	2222      	movs	r2, #34	; 0x22
   13710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13714:	1d18      	adds	r0, r3, #4
   13716:	f7fd bbcf 	b.w	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0001371a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
   1371a:	6880      	ldr	r0, [r0, #8]
   1371c:	4770      	bx	lr

0001371e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
   1371e:	b500      	push	{lr}
   13720:	8842      	ldrh	r2, [r0, #2]
   13722:	b085      	sub	sp, #20
   13724:	f3c2 1300 	ubfx	r3, r2, #4, #1
   13728:	468c      	mov	ip, r1
   1372a:	2b00      	cmp	r3, #0
   1372c:	bf07      	ittee	eq
   1372e:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   13732:	2a00      	cmpeq	r2, #0
   13734:	2001      	movne	r0, #1
   13736:	b005      	addne	sp, #20
   13738:	bf18      	it	ne
   1373a:	bd00      	popne	{pc}
   1373c:	f100 0128 	add.w	r1, r0, #40	; 0x28
   13740:	9100      	str	r1, [sp, #0]
   13742:	8841      	ldrh	r1, [r0, #2]
   13744:	f8ad 1004 	strh.w	r1, [sp, #4]
   13748:	6881      	ldr	r1, [r0, #8]
   1374a:	9102      	str	r1, [sp, #8]
   1374c:	7901      	ldrb	r1, [r0, #4]
   1374e:	f88d 100c 	strb.w	r1, [sp, #12]
   13752:	7940      	ldrb	r0, [r0, #5]
   13754:	f88d 000d 	strb.w	r0, [sp, #13]
   13758:	4669      	mov	r1, sp
   1375a:	4660      	mov	r0, ip
   1375c:	f7f6 fbf8 	bl	9f50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10fc>
   13760:	b005      	add	sp, #20
   13762:	bd00      	pop	{pc}

00013764 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
   13764:	2200      	movs	r2, #0
   13766:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
   1376a:	8843      	ldrh	r3, [r0, #2]
   1376c:	2b1d      	cmp	r3, #29
   1376e:	bf0c      	ite	eq
   13770:	7342      	strbeq	r2, [r0, #13]
   13772:	7341      	strbne	r1, [r0, #13]
   13774:	4770      	bx	lr

00013776 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
   13776:	b510      	push	{r4, lr}
   13778:	8841      	ldrh	r1, [r0, #2]
   1377a:	f3c1 1200 	ubfx	r2, r1, #4, #1
   1377e:	b92a      	cbnz	r2, 1378c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
   13780:	f3c1 0140 	ubfx	r1, r1, #1, #1
   13784:	2900      	cmp	r1, #0
   13786:	bf18      	it	ne
   13788:	2401      	movne	r4, #1
   1378a:	d100      	bne.n	1378e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x18>
   1378c:	2400      	movs	r4, #0
   1378e:	6c40      	ldr	r0, [r0, #68]	; 0x44
   13790:	f7fe fe37 	bl	12402 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
   13794:	2800      	cmp	r0, #0
   13796:	bf18      	it	ne
   13798:	2001      	movne	r0, #1
   1379a:	ea24 0000 	bic.w	r0, r4, r0
   1379e:	f080 0001 	eor.w	r0, r0, #1
   137a2:	bd10      	pop	{r4, pc}

000137a4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
   137a4:	b510      	push	{r4, lr}
   137a6:	8840      	ldrh	r0, [r0, #2]
   137a8:	f3c0 1100 	ubfx	r1, r0, #4, #1
   137ac:	b119      	cbz	r1, 137b6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
   137ae:	f3c0 0080 	ubfx	r0, r0, #2, #1
   137b2:	b148      	cbz	r0, 137c8 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
   137b4:	e00a      	b.n	137cc <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   137b6:	f3c0 0140 	ubfx	r1, r0, #1, #1
   137ba:	b939      	cbnz	r1, 137cc <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   137bc:	f010 0f01 	tst.w	r0, #1
   137c0:	d102      	bne.n	137c8 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
   137c2:	f7f1 fcef 	bl	51a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   137c6:	b108      	cbz	r0, 137cc <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   137c8:	2001      	movs	r0, #1
   137ca:	bd10      	pop	{r4, pc}
   137cc:	2000      	movs	r0, #0
   137ce:	bd10      	pop	{r4, pc}

000137d0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
   137d0:	7880      	ldrb	r0, [r0, #2]
   137d2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   137d6:	4770      	bx	lr

000137d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
   137d8:	7880      	ldrb	r0, [r0, #2]
   137da:	f000 0001 	and.w	r0, r0, #1
   137de:	4770      	bx	lr

000137e0 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
   137e0:	8840      	ldrh	r0, [r0, #2]
   137e2:	2809      	cmp	r0, #9
   137e4:	bf0c      	ite	eq
   137e6:	2001      	moveq	r0, #1
   137e8:	2000      	movne	r0, #0
   137ea:	4770      	bx	lr

000137ec <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
   137ec:	7880      	ldrb	r0, [r0, #2]
   137ee:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   137f2:	4770      	bx	lr

000137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
   137f4:	7880      	ldrb	r0, [r0, #2]
   137f6:	f3c0 1000 	ubfx	r0, r0, #4, #1
   137fa:	4770      	bx	lr

000137fc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
   137fc:	7880      	ldrb	r0, [r0, #2]
   137fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
   13802:	4770      	bx	lr

00013804 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
   13804:	f990 0010 	ldrsb.w	r0, [r0, #16]
   13808:	4770      	bx	lr

0001380a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
   1380a:	7800      	ldrb	r0, [r0, #0]
   1380c:	28ff      	cmp	r0, #255	; 0xff
   1380e:	bf14      	ite	ne
   13810:	2001      	movne	r0, #1
   13812:	2000      	moveq	r0, #0
   13814:	4770      	bx	lr

00013816 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
   13816:	680a      	ldr	r2, [r1, #0]
   13818:	f8c0 2013 	str.w	r2, [r0, #19]
   1381c:	8889      	ldrh	r1, [r1, #4]
   1381e:	f8a0 1017 	strh.w	r1, [r0, #23]
   13822:	2101      	movs	r1, #1
   13824:	7641      	strb	r1, [r0, #25]
   13826:	4770      	bx	lr

00013828 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
   13828:	7b00      	ldrb	r0, [r0, #12]
   1382a:	4770      	bx	lr

0001382c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
   1382c:	7940      	ldrb	r0, [r0, #5]
   1382e:	4770      	bx	lr

00013830 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
   13830:	6201      	str	r1, [r0, #32]
   13832:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   13836:	724a      	strb	r2, [r1, #9]
   13838:	f8d0 2061 	ldr.w	r2, [r0, #97]	; 0x61
   1383c:	f8c1 200a 	str.w	r2, [r1, #10]
   13840:	f8b0 0065 	ldrh.w	r0, [r0, #101]	; 0x65
   13844:	81c8      	strh	r0, [r1, #14]
   13846:	4770      	bx	lr

00013848 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
   13848:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
   1384c:	4770      	bx	lr

0001384e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
   1384e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13852:	4604      	mov	r4, r0
   13854:	7880      	ldrb	r0, [r0, #2]
   13856:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1385a:	b158      	cbz	r0, 13874 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x26>
   1385c:	233c      	movs	r3, #60	; 0x3c
   1385e:	22ff      	movs	r2, #255	; 0xff
   13860:	4620      	mov	r0, r4
   13862:	6a21      	ldr	r1, [r4, #32]
   13864:	f7f6 fbde 	bl	a024 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11d0>
   13868:	220e      	movs	r2, #14
   1386a:	4621      	mov	r1, r4
   1386c:	f104 007e 	add.w	r0, r4, #126	; 0x7e
   13870:	f7f3 fd2a 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   13874:	78a0      	ldrb	r0, [r4, #2]
   13876:	f04f 0500 	mov.w	r5, #0
   1387a:	f010 0f01 	tst.w	r0, #1
   1387e:	d022      	beq.n	138c6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x78>
   13880:	6a20      	ldr	r0, [r4, #32]
   13882:	263c      	movs	r6, #60	; 0x3c
   13884:	8807      	ldrh	r7, [r0, #0]
   13886:	f7f4 f857 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1388a:	f7fa ff8f 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1388e:	b9a8      	cbnz	r0, 138bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6e>
   13890:	7821      	ldrb	r1, [r4, #0]
   13892:	f884 10b3 	strb.w	r1, [r4, #179]	; 0xb3
   13896:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
   1389a:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
   1389e:	7b60      	ldrb	r0, [r4, #13]
   138a0:	b910      	cbnz	r0, 138a8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5a>
   138a2:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
   138a6:	e003      	b.n	138b0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x62>
   138a8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
   138ac:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
   138b0:	2212      	movs	r2, #18
   138b2:	4621      	mov	r1, r4
   138b4:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   138b8:	f7f3 fd06 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   138bc:	2001      	movs	r0, #1
   138be:	f884 0079 	strb.w	r0, [r4, #121]	; 0x79
   138c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138c6:	f64f 77ff 	movw	r7, #65535	; 0xffff
   138ca:	263c      	movs	r6, #60	; 0x3c
   138cc:	f7f4 f834 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   138d0:	f7fa ff6c 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   138d4:	2800      	cmp	r0, #0
   138d6:	d1f1      	bne.n	138bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6e>
   138d8:	7821      	ldrb	r1, [r4, #0]
   138da:	f884 10b3 	strb.w	r1, [r4, #179]	; 0xb3
   138de:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
   138e2:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
   138e6:	7b60      	ldrb	r0, [r4, #13]
   138e8:	2800      	cmp	r0, #0
   138ea:	d1dd      	bne.n	138a8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5a>
   138ec:	e7d9      	b.n	138a2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x54>

000138ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
   138ee:	7c40      	ldrb	r0, [r0, #17]
   138f0:	2800      	cmp	r0, #0
   138f2:	bf18      	it	ne
   138f4:	2001      	movne	r0, #1
   138f6:	4770      	bx	lr
   138f8:	2101      	movs	r1, #1
   138fa:	f7f4 bcdb 	b.w	82b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x124>
   138fe:	2101      	movs	r1, #1
   13900:	f7f4 bcd8 	b.w	82b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x124>

00013904 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   13904:	b510      	push	{r4, lr}
   13906:	7001      	strb	r1, [r0, #0]
   13908:	7042      	strb	r2, [r0, #1]
   1390a:	7880      	ldrb	r0, [r0, #2]
   1390c:	f3c0 0380 	ubfx	r3, r0, #2, #1
   13910:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   13914:	4463      	add	r3, ip
   13916:	f000 0001 	and.w	r0, r0, #1
   1391a:	4418      	add	r0, r3
   1391c:	fb10 f001 	smulbb	r0, r0, r1
   13920:	fb10 f002 	smulbb	r0, r0, r2
   13924:	28ff      	cmp	r0, #255	; 0xff
   13926:	bf38      	it	cc
   13928:	bd10      	popcc	{r4, pc}
   1392a:	215c      	movs	r1, #92	; 0x5c
   1392c:	202e      	movs	r0, #46	; 0x2e
   1392e:	f7f0 fec5 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013932 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   13932:	7881      	ldrb	r1, [r0, #2]
   13934:	f3c1 0280 	ubfx	r2, r1, #2, #1
   13938:	f3c1 0340 	ubfx	r3, r1, #1, #1
   1393c:	441a      	add	r2, r3
   1393e:	f001 0101 	and.w	r1, r1, #1
   13942:	4411      	add	r1, r2
   13944:	7842      	ldrb	r2, [r0, #1]
   13946:	7800      	ldrb	r0, [r0, #0]
   13948:	fb12 f000 	smulbb	r0, r2, r0
   1394c:	4348      	muls	r0, r1
   1394e:	b2c0      	uxtb	r0, r0
   13950:	4770      	bx	lr

00013952 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY>:
   13952:	b510      	push	{r4, lr}
   13954:	7941      	ldrb	r1, [r0, #5]
   13956:	b1c9      	cbz	r1, 1398c <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x3a>
   13958:	7881      	ldrb	r1, [r0, #2]
   1395a:	f011 0f01 	tst.w	r1, #1
   1395e:	d003      	beq.n	13968 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x16>
   13960:	78c2      	ldrb	r2, [r0, #3]
   13962:	f012 0f01 	tst.w	r2, #1
   13966:	d023      	beq.n	139b0 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   13968:	f011 0f02 	tst.w	r1, #2
   1396c:	d003      	beq.n	13976 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x24>
   1396e:	78c2      	ldrb	r2, [r0, #3]
   13970:	f012 0f02 	tst.w	r2, #2
   13974:	d01a      	beq.n	139ac <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5a>
   13976:	f011 0f04 	tst.w	r1, #4
   1397a:	d003      	beq.n	13984 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x32>
   1397c:	78c0      	ldrb	r0, [r0, #3]
   1397e:	f010 0f04 	tst.w	r0, #4
   13982:	d00e      	beq.n	139a2 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x50>
   13984:	2139      	movs	r1, #57	; 0x39
   13986:	202e      	movs	r0, #46	; 0x2e
   13988:	f7f0 fe98 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1398c:	78c1      	ldrb	r1, [r0, #3]
   1398e:	f011 0f02 	tst.w	r1, #2
   13992:	d10b      	bne.n	139ac <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5a>
   13994:	f011 0f01 	tst.w	r1, #1
   13998:	d10a      	bne.n	139b0 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   1399a:	7880      	ldrb	r0, [r0, #2]
   1399c:	f010 0f04 	tst.w	r0, #4
   139a0:	d001      	beq.n	139a6 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x54>
   139a2:	2027      	movs	r0, #39	; 0x27
   139a4:	bd10      	pop	{r4, pc}
   139a6:	f010 0f02 	tst.w	r0, #2
   139aa:	d001      	beq.n	139b0 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   139ac:	2026      	movs	r0, #38	; 0x26
   139ae:	bd10      	pop	{r4, pc}
   139b0:	2025      	movs	r0, #37	; 0x25
   139b2:	bd10      	pop	{r4, pc}

000139b4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   139b4:	7882      	ldrb	r2, [r0, #2]
   139b6:	2100      	movs	r1, #0
   139b8:	f012 0f01 	tst.w	r2, #1
   139bc:	d005      	beq.n	139ca <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   139be:	78c3      	ldrb	r3, [r0, #3]
   139c0:	f013 0f01 	tst.w	r3, #1
   139c4:	bf08      	it	eq
   139c6:	2101      	moveq	r1, #1
   139c8:	d010      	beq.n	139ec <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   139ca:	f012 0f02 	tst.w	r2, #2
   139ce:	d005      	beq.n	139dc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   139d0:	78c3      	ldrb	r3, [r0, #3]
   139d2:	f013 0f02 	tst.w	r3, #2
   139d6:	bf08      	it	eq
   139d8:	2102      	moveq	r1, #2
   139da:	d007      	beq.n	139ec <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   139dc:	f012 0f04 	tst.w	r2, #4
   139e0:	d004      	beq.n	139ec <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   139e2:	78c3      	ldrb	r3, [r0, #3]
   139e4:	f013 0f04 	tst.w	r3, #4
   139e8:	bf08      	it	eq
   139ea:	2104      	moveq	r1, #4
   139ec:	7943      	ldrb	r3, [r0, #5]
   139ee:	1c5b      	adds	r3, r3, #1
   139f0:	b2db      	uxtb	r3, r3
   139f2:	7143      	strb	r3, [r0, #5]
   139f4:	f890 c001 	ldrb.w	ip, [r0, #1]
   139f8:	4563      	cmp	r3, ip
   139fa:	d10d      	bne.n	13a18 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   139fc:	2300      	movs	r3, #0
   139fe:	7143      	strb	r3, [r0, #5]
   13a00:	f890 c003 	ldrb.w	ip, [r0, #3]
   13a04:	ea4c 0c01 	orr.w	ip, ip, r1
   13a08:	f880 c003 	strb.w	ip, [r0, #3]
   13a0c:	4594      	cmp	ip, r2
   13a0e:	d103      	bne.n	13a18 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   13a10:	70c3      	strb	r3, [r0, #3]
   13a12:	7902      	ldrb	r2, [r0, #4]
   13a14:	1c52      	adds	r2, r2, #1
   13a16:	7102      	strb	r2, [r0, #4]
   13a18:	2901      	cmp	r1, #1
   13a1a:	bf04      	itt	eq
   13a1c:	2025      	moveq	r0, #37	; 0x25
   13a1e:	4770      	bxeq	lr
   13a20:	2902      	cmp	r1, #2
   13a22:	bf04      	itt	eq
   13a24:	2026      	moveq	r0, #38	; 0x26
   13a26:	4770      	bxeq	lr
   13a28:	2904      	cmp	r1, #4
   13a2a:	bf04      	itt	eq
   13a2c:	2027      	moveq	r0, #39	; 0x27
   13a2e:	4770      	bxeq	lr
   13a30:	b510      	push	{r4, lr}
   13a32:	2139      	movs	r1, #57	; 0x39
   13a34:	202e      	movs	r0, #46	; 0x2e
   13a36:	f7f0 fe41 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013a3a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   13a3a:	7081      	strb	r1, [r0, #2]
   13a3c:	4770      	bx	lr

00013a3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   13a3e:	b410      	push	{r4}
   13a40:	7881      	ldrb	r1, [r0, #2]
   13a42:	f3c1 0280 	ubfx	r2, r1, #2, #1
   13a46:	f3c1 0340 	ubfx	r3, r1, #1, #1
   13a4a:	441a      	add	r2, r3
   13a4c:	f001 0101 	and.w	r1, r1, #1
   13a50:	7843      	ldrb	r3, [r0, #1]
   13a52:	4411      	add	r1, r2
   13a54:	fb13 f201 	smulbb	r2, r3, r1
   13a58:	78c1      	ldrb	r1, [r0, #3]
   13a5a:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   13a5e:	f3c1 0440 	ubfx	r4, r1, #1, #1
   13a62:	44a4      	add	ip, r4
   13a64:	f001 0101 	and.w	r1, r1, #1
   13a68:	4461      	add	r1, ip
   13a6a:	f890 c005 	ldrb.w	ip, [r0, #5]
   13a6e:	fb11 c103 	smlabb	r1, r1, r3, ip
   13a72:	7803      	ldrb	r3, [r0, #0]
   13a74:	7900      	ldrb	r0, [r0, #4]
   13a76:	1a18      	subs	r0, r3, r0
   13a78:	fb10 f002 	smulbb	r0, r0, r2
   13a7c:	1a40      	subs	r0, r0, r1
   13a7e:	bc10      	pop	{r4}
   13a80:	b2c0      	uxtb	r0, r0
   13a82:	4770      	bx	lr

00013a84 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   13a84:	b510      	push	{r4, lr}
   13a86:	4604      	mov	r4, r0
   13a88:	f001 fd24 	bl	154d4 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   13a8c:	2001      	movs	r0, #1
   13a8e:	7060      	strb	r0, [r4, #1]
   13a90:	7020      	strb	r0, [r4, #0]
   13a92:	bd10      	pop	{r4, pc}

00013a94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   13a94:	2100      	movs	r1, #0
   13a96:	70c1      	strb	r1, [r0, #3]
   13a98:	7141      	strb	r1, [r0, #5]
   13a9a:	7101      	strb	r1, [r0, #4]
   13a9c:	4770      	bx	lr

00013a9e <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA>:
   13a9e:	2808      	cmp	r0, #8
   13aa0:	bf04      	itt	eq
   13aa2:	f44f 70c8 	moveq.w	r0, #400	; 0x190
   13aa6:	2340      	moveq	r3, #64	; 0x40
   13aa8:	d00e      	beq.n	13ac8 <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA+0x2a>
   13aaa:	2804      	cmp	r0, #4
   13aac:	bf04      	itt	eq
   13aae:	f44f 70bf 	moveq.w	r0, #382	; 0x17e
   13ab2:	2310      	moveq	r3, #16
   13ab4:	d008      	beq.n	13ac8 <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA+0x2a>
   13ab6:	2300      	movs	r3, #0
   13ab8:	2802      	cmp	r0, #2
   13aba:	bf07      	ittee	eq
   13abc:	f103 0018 	addeq.w	r0, r3, #24
   13ac0:	2304      	moveq	r3, #4
   13ac2:	f103 0028 	addne.w	r0, r3, #40	; 0x28
   13ac6:	2308      	movne	r3, #8
   13ac8:	1d52      	adds	r2, r2, #5
   13aca:	fb02 0003 	mla	r0, r2, r3, r0
   13ace:	3080      	adds	r0, #128	; 0x80
   13ad0:	4348      	muls	r0, r1
   13ad2:	4770      	bx	lr

00013ad4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   13ad4:	f240 315a 	movw	r1, #858	; 0x35a
   13ad8:	4348      	muls	r0, r1
   13ada:	4770      	bx	lr

00013adc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   13adc:	f240 20ef 	movw	r0, #751	; 0x2ef
   13ae0:	4770      	bx	lr
   13ae2:	020e      	.short	0x020e
   13ae4:	0630041c 	.word	0x0630041c
   13ae8:	035a0c60 	.word	0x035a0c60
   13aec:	05c506b4 	.word	0x05c506b4
   13af0:	12250bf5 	.word	0x12250bf5
   13af4:	03b101a3 	.word	0x03b101a3
   13af8:	02ef05bf 	.word	0x02ef05bf
   13afc:	09a30649 	.word	0x09a30649

00013b00 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
   13b00:	b510      	push	{r4, lr}
   13b02:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   13b06:	2900      	cmp	r1, #0
   13b08:	bf1c      	itt	ne
   13b0a:	2000      	movne	r0, #0
   13b0c:	bd10      	popne	{r4, pc}
   13b0e:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
   13b12:	2900      	cmp	r1, #0
   13b14:	bf1c      	itt	ne
   13b16:	e9d0 1245 	ldrdne	r1, r2, [r0, #276]	; 0x114
   13b1a:	428a      	cmpne	r2, r1
   13b1c:	bf9c      	itt	ls
   13b1e:	2001      	movls	r0, #1
   13b20:	bd10      	popls	{r4, pc}
   13b22:	f7ff fe94 	bl	1384e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   13b26:	2000      	movs	r0, #0
   13b28:	bd10      	pop	{r4, pc}

00013b2a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
   13b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b2c:	b083      	sub	sp, #12
   13b2e:	2500      	movs	r5, #0
   13b30:	b131      	cbz	r1, 13b40 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x16>
   13b32:	2901      	cmp	r1, #1
   13b34:	d076      	beq.n	13c24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xfa>
   13b36:	f240 7195 	movw	r1, #1941	; 0x795
   13b3a:	2030      	movs	r0, #48	; 0x30
   13b3c:	f7f0 fdbe 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13b40:	4604      	mov	r4, r0
   13b42:	f890 0109 	ldrb.w	r0, [r0, #265]	; 0x109
   13b46:	2600      	movs	r6, #0
   13b48:	b138      	cbz	r0, 13b5a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x30>
   13b4a:	f7f4 f827 	bl	7b9c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   13b4e:	f242 7110 	movw	r1, #10000	; 0x2710
   13b52:	fbb0 f2f1 	udiv	r2, r0, r1
   13b56:	fb01 0612 	mls	r6, r1, r2, r0
   13b5a:	4620      	mov	r0, r4
   13b5c:	f7ff fddd 	bl	1371a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   13b60:	e9d4 124e 	ldrd	r1, r2, [r4, #312]	; 0x138
   13b64:	4430      	add	r0, r6
   13b66:	1840      	adds	r0, r0, r1
   13b68:	eb45 0102 	adc.w	r1, r5, r2
   13b6c:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
   13b70:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
   13b74:	2001      	movs	r0, #1
   13b76:	f884 0133 	strb.w	r0, [r4, #307]	; 0x133
   13b7a:	2002      	movs	r0, #2
   13b7c:	f884 0132 	strb.w	r0, [r4, #306]	; 0x132
   13b80:	4620      	mov	r0, r4
   13b82:	f7ff fe37 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   13b86:	2800      	cmp	r0, #0
   13b88:	bf08      	it	eq
   13b8a:	266b      	moveq	r6, #107	; 0x6b
   13b8c:	d024      	beq.n	13bd8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xae>
   13b8e:	4620      	mov	r0, r4
   13b90:	f7ff fe22 	bl	137d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   13b94:	b930      	cbnz	r0, 13ba4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x7a>
   13b96:	4620      	mov	r0, r4
   13b98:	f7ff fe30 	bl	137fc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   13b9c:	2800      	cmp	r0, #0
   13b9e:	bf08      	it	eq
   13ba0:	2642      	moveq	r6, #66	; 0x42
   13ba2:	d000      	beq.n	13ba6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x7c>
   13ba4:	2649      	movs	r6, #73	; 0x49
   13ba6:	4668      	mov	r0, sp
   13ba8:	f7f0 fbf6 	bl	4398 <mpsl_fem_pa_is_configured>
   13bac:	f89d 0000 	ldrb.w	r0, [sp]
   13bb0:	2800      	cmp	r0, #0
   13bb2:	bf14      	ite	ne
   13bb4:	2701      	movne	r7, #1
   13bb6:	2700      	moveq	r7, #0
   13bb8:	a801      	add	r0, sp, #4
   13bba:	f7f0 fbd5 	bl	4368 <mpsl_fem_lna_is_configured>
   13bbe:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13bc2:	2800      	cmp	r0, #0
   13bc4:	bf18      	it	ne
   13bc6:	2001      	movne	r0, #1
   13bc8:	4338      	orrs	r0, r7
   13bca:	bf18      	it	ne
   13bcc:	3609      	addne	r6, #9
   13bce:	f7f0 fb29 	bl	4224 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   13bd2:	2800      	cmp	r0, #0
   13bd4:	bf18      	it	ne
   13bd6:	3618      	addne	r6, #24
   13bd8:	f8a4 6130 	strh.w	r6, [r4, #304]	; 0x130
   13bdc:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
   13be0:	b9f8      	cbnz	r0, 13c22 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf8>
   13be2:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
   13be6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   13bea:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   13bee:	4050      	eors	r0, r2
   13bf0:	ea70 0001 	orns	r0, r0, r1
   13bf4:	d017      	beq.n	13c26 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xfc>
   13bf6:	4620      	mov	r0, r4
   13bf8:	f7f4 f8c8 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   13bfc:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   13c00:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   13c04:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   13c08:	1880      	adds	r0, r0, r2
   13c0a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   13c0e:	4169      	adcs	r1, r5
   13c10:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   13c14:	1a18      	subs	r0, r3, r0
   13c16:	eb72 0001 	sbcs.w	r0, r2, r1
   13c1a:	d504      	bpl.n	13c26 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xfc>
   13c1c:	4620      	mov	r0, r4
   13c1e:	f7ff fe16 	bl	1384e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   13c22:	e007      	b.n	13c34 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x10a>
   13c24:	e014      	b.n	13c50 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x126>
   13c26:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   13c2a:	f504 7194 	add.w	r1, r4, #296	; 0x128
   13c2e:	f7ee f83d 	bl	1cac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   13c32:	b140      	cbz	r0, 13c46 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x11c>
   13c34:	f8a4 5140 	strh.w	r5, [r4, #320]	; 0x140
   13c38:	f7fb fce2 	bl	f600 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   13c3c:	b003      	add	sp, #12
   13c3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13c42:	f7ee be75 	b.w	2930 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   13c46:	f240 61ef 	movw	r1, #1775	; 0x6ef
   13c4a:	2030      	movs	r0, #48	; 0x30
   13c4c:	f7f0 fd36 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13c50:	f880 5110 	strb.w	r5, [r0, #272]	; 0x110
   13c54:	f7fb fcd4 	bl	f600 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   13c58:	b003      	add	sp, #12
   13c5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13c5e:	f7ee be67 	b.w	2930 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>

00013c62 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
   13c62:	b510      	push	{r4, lr}
   13c64:	4604      	mov	r4, r0
   13c66:	f890 0120 	ldrb.w	r0, [r0, #288]	; 0x120
   13c6a:	2800      	cmp	r0, #0
   13c6c:	bf08      	it	eq
   13c6e:	bd10      	popeq	{r4, pc}
   13c70:	2001      	movs	r0, #1
   13c72:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
   13c76:	4601      	mov	r1, r0
   13c78:	4620      	mov	r0, r4
   13c7a:	f7ff fde5 	bl	13848 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   13c7e:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   13c82:	b188      	cbz	r0, 13ca8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x46>
   13c84:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   13c88:	f7ee fbaa 	bl	23e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   13c8c:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   13c90:	f7ee fd0e 	bl	26b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   13c94:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   13c98:	f7ee fce8 	bl	266c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   13c9c:	2800      	cmp	r0, #0
   13c9e:	bf1c      	itt	ne
   13ca0:	2000      	movne	r0, #0
   13ca2:	f884 0120 	strbne.w	r0, [r4, #288]	; 0x120
   13ca6:	d001      	beq.n	13cac <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x4a>
   13ca8:	2000      	movs	r0, #0
   13caa:	bd10      	pop	{r4, pc}
   13cac:	f240 2109 	movw	r1, #521	; 0x209
   13cb0:	2030      	movs	r0, #48	; 0x30
   13cb2:	f7f0 fd03 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013cb6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
   13cb6:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   13cba:	4770      	bx	lr

00013cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
   13cbc:	f890 0120 	ldrb.w	r0, [r0, #288]	; 0x120
   13cc0:	4770      	bx	lr

00013cc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
   13cc2:	b570      	push	{r4, r5, r6, lr}
   13cc4:	4604      	mov	r4, r0
   13cc6:	f890 027b 	ldrb.w	r0, [r0, #635]	; 0x27b
   13cca:	b082      	sub	sp, #8
   13ccc:	2800      	cmp	r0, #0
   13cce:	bf07      	ittee	eq
   13cd0:	f894 02ac 	ldrbeq.w	r0, [r4, #684]	; 0x2ac
   13cd4:	2803      	cmpeq	r0, #3
   13cd6:	b002      	addne	sp, #8
   13cd8:	bd70      	popne	{r4, r5, r6, pc}
   13cda:	f7ee ffd1 	bl	2c80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   13cde:	f8d4 32e0 	ldr.w	r3, [r4, #736]	; 0x2e0
   13ce2:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
   13ce6:	1ac0      	subs	r0, r0, r3
   13ce8:	eb61 0302 	sbc.w	r3, r1, r2
   13cec:	2200      	movs	r2, #0
   13cee:	4611      	mov	r1, r2
   13cf0:	1a12      	subs	r2, r2, r0
   13cf2:	4199      	sbcs	r1, r3
   13cf4:	bfa4      	itt	ge
   13cf6:	b002      	addge	sp, #8
   13cf8:	bd70      	popge	{r4, r5, r6, pc}
   13cfa:	1c41      	adds	r1, r0, #1
   13cfc:	f173 0100 	sbcs.w	r1, r3, #0
   13d00:	db04      	blt.n	13d0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
   13d02:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   13d06:	2030      	movs	r0, #48	; 0x30
   13d08:	f7f0 fcd8 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13d0c:	6961      	ldr	r1, [r4, #20]
   13d0e:	2900      	cmp	r1, #0
   13d10:	bf14      	ite	ne
   13d12:	fbb0 f0f1 	udivne	r0, r0, r1
   13d16:	2000      	moveq	r0, #0
   13d18:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
   13d1c:	1c40      	adds	r0, r0, #1
   13d1e:	4408      	add	r0, r1
   13d20:	f8a4 02bc 	strh.w	r0, [r4, #700]	; 0x2bc
   13d24:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
   13d28:	f8b4 12bc 	ldrh.w	r1, [r4, #700]	; 0x2bc
   13d2c:	1a40      	subs	r0, r0, r1
   13d2e:	b200      	sxth	r0, r0
   13d30:	2800      	cmp	r0, #0
   13d32:	bfdc      	itt	le
   13d34:	b002      	addle	sp, #8
   13d36:	bd70      	pople	{r4, r5, r6, pc}
   13d38:	f894 02f4 	ldrb.w	r0, [r4, #756]	; 0x2f4
   13d3c:	f7ee fb50 	bl	23e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   13d40:	2800      	cmp	r0, #0
   13d42:	bf04      	itt	eq
   13d44:	b002      	addeq	sp, #8
   13d46:	bd70      	popeq	{r4, r5, r6, pc}
   13d48:	20ff      	movs	r0, #255	; 0xff
   13d4a:	f884 02c1 	strb.w	r0, [r4, #705]	; 0x2c1
   13d4e:	f8b4 00d4 	ldrh.w	r0, [r4, #212]	; 0xd4
   13d52:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   13d56:	ae01      	add	r6, sp, #4
   13d58:	1a40      	subs	r0, r0, r1
   13d5a:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
   13d5e:	1e40      	subs	r0, r0, #1
   13d60:	4408      	add	r0, r1
   13d62:	b285      	uxth	r5, r0
   13d64:	e019      	b.n	13d9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd8>
   13d66:	9600      	str	r6, [sp, #0]
   13d68:	f8b4 12bc 	ldrh.w	r1, [r4, #700]	; 0x2bc
   13d6c:	2300      	movs	r3, #0
   13d6e:	2201      	movs	r2, #1
   13d70:	4620      	mov	r0, r4
   13d72:	f7f6 ffa5 	bl	acc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   13d76:	2800      	cmp	r0, #0
   13d78:	bf04      	itt	eq
   13d7a:	b002      	addeq	sp, #8
   13d7c:	bd70      	popeq	{r4, r5, r6, pc}
   13d7e:	2801      	cmp	r0, #1
   13d80:	d004      	beq.n	13d8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xca>
   13d82:	f240 6101 	movw	r1, #1537	; 0x601
   13d86:	2030      	movs	r0, #48	; 0x30
   13d88:	f7f0 fc98 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13d8c:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
   13d90:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   13d94:	4408      	add	r0, r1
   13d96:	f8a4 02bc 	strh.w	r0, [r4, #700]	; 0x2bc
   13d9a:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
   13d9e:	1a28      	subs	r0, r5, r0
   13da0:	b200      	sxth	r0, r0
   13da2:	2800      	cmp	r0, #0
   13da4:	dadf      	bge.n	13d66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa4>
   13da6:	b002      	add	sp, #8
   13da8:	bd70      	pop	{r4, r5, r6, pc}
   13daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13dae:	b082      	sub	sp, #8
   13db0:	0004      	movs	r4, r0
   13db2:	d00a      	beq.n	13dca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x108>
   13db4:	2500      	movs	r5, #0
   13db6:	2909      	cmp	r1, #9
   13db8:	f080 8101 	bcs.w	13fbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fc>
   13dbc:	e8df f001 	tbb	[pc, r1]
   13dc0:	49491b09 	.word	0x49491b09
   13dc4:	daf3ff44 	.word	0xdaf3ff44
   13dc8:	00f9      	.short	0x00f9
   13dca:	21ca      	movs	r1, #202	; 0xca
   13dcc:	2030      	movs	r0, #48	; 0x30
   13dce:	f7f0 fc75 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13dd2:	4620      	mov	r0, r4
   13dd4:	f7f4 f9ac 	bl	8130 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   13dd8:	b120      	cbz	r0, 13de4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x122>
   13dda:	f240 2179 	movw	r1, #633	; 0x279
   13dde:	2030      	movs	r0, #48	; 0x30
   13de0:	f7f0 fc6c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13de4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   13de8:	b002      	add	sp, #8
   13dea:	f2a0 101b 	subw	r0, r0, #283	; 0x11b
   13dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13df2:	f7ee be6d 	b.w	2ad0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   13df6:	4620      	mov	r0, r4
   13df8:	f7ff fcf8 	bl	137ec <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   13dfc:	b9b8      	cbnz	r0, 13e2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
   13dfe:	4620      	mov	r0, r4
   13e00:	f7f3 ffc4 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   13e04:	f500 7596 	add.w	r5, r0, #300	; 0x12c
   13e08:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   13e0c:	42a8      	cmp	r0, r5
   13e0e:	d20c      	bcs.n	13e2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x168>
   13e10:	1a28      	subs	r0, r5, r0
   13e12:	2103      	movs	r1, #3
   13e14:	f7ed fd7e 	bl	1914 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   13e18:	b138      	cbz	r0, 13e2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x168>
   13e1a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
   13e1e:	b002      	add	sp, #8
   13e20:	4620      	mov	r0, r4
   13e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13e26:	f7ff bc0e 	b.w	13646 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   13e2a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
   13e2e:	4620      	mov	r0, r4
   13e30:	f7f4 f9a0 	bl	8174 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   13e34:	2800      	cmp	r0, #0
   13e36:	bf04      	itt	eq
   13e38:	b002      	addeq	sp, #8
   13e3a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e3e:	f44f 712b 	mov.w	r1, #684	; 0x2ac
   13e42:	2030      	movs	r0, #48	; 0x30
   13e44:	f7f0 fc3a 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13e48:	b002      	add	sp, #8
   13e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13e4e:	f7fb bf7f 	b.w	fd50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   13e52:	2701      	movs	r7, #1
   13e54:	4620      	mov	r0, r4
   13e56:	f7ff fccd 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   13e5a:	2800      	cmp	r0, #0
   13e5c:	bf08      	it	eq
   13e5e:	266b      	moveq	r6, #107	; 0x6b
   13e60:	d027      	beq.n	13eb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
   13e62:	4620      	mov	r0, r4
   13e64:	f7ff fcb8 	bl	137d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   13e68:	b930      	cbnz	r0, 13e78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b6>
   13e6a:	4620      	mov	r0, r4
   13e6c:	f7ff fcc6 	bl	137fc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   13e70:	2800      	cmp	r0, #0
   13e72:	bf08      	it	eq
   13e74:	2642      	moveq	r6, #66	; 0x42
   13e76:	d000      	beq.n	13e7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b8>
   13e78:	2649      	movs	r6, #73	; 0x49
   13e7a:	4668      	mov	r0, sp
   13e7c:	f7f0 fa8c 	bl	4398 <mpsl_fem_pa_is_configured>
   13e80:	f89d 0000 	ldrb.w	r0, [sp]
   13e84:	2800      	cmp	r0, #0
   13e86:	bf14      	ite	ne
   13e88:	f04f 0801 	movne.w	r8, #1
   13e8c:	f04f 0800 	moveq.w	r8, #0
   13e90:	a801      	add	r0, sp, #4
   13e92:	f7f0 fa69 	bl	4368 <mpsl_fem_lna_is_configured>
   13e96:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13e9a:	2800      	cmp	r0, #0
   13e9c:	bf18      	it	ne
   13e9e:	2001      	movne	r0, #1
   13ea0:	ea58 0000 	orrs.w	r0, r8, r0
   13ea4:	bf18      	it	ne
   13ea6:	3609      	addne	r6, #9
   13ea8:	f7f0 f9bc 	bl	4224 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   13eac:	2800      	cmp	r0, #0
   13eae:	bf18      	it	ne
   13eb0:	3618      	addne	r6, #24
   13eb2:	f8a4 6130 	strh.w	r6, [r4, #304]	; 0x130
   13eb6:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
   13eba:	2601      	movs	r6, #1
   13ebc:	f884 6133 	strb.w	r6, [r4, #307]	; 0x133
   13ec0:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   13ec4:	b168      	cbz	r0, 13ee2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x220>
   13ec6:	e9d4 024e 	ldrd	r0, r2, [r4, #312]	; 0x138
   13eca:	f510 717a 	adds.w	r1, r0, #1000	; 0x3e8
   13ece:	f142 0000 	adc.w	r0, r2, #0
   13ed2:	e9c4 104e 	strd	r1, r0, [r4, #312]	; 0x138
   13ed6:	2100      	movs	r1, #0
   13ed8:	f504 7094 	add.w	r0, r4, #296	; 0x128
   13edc:	f7fe fd8c 	bl	129f8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   13ee0:	e00e      	b.n	13f00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x23e>
   13ee2:	4620      	mov	r0, r4
   13ee4:	f7ff fc19 	bl	1371a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   13ee8:	e9d4 124e 	ldrd	r1, r2, [r4, #312]	; 0x138
   13eec:	1809      	adds	r1, r1, r0
   13eee:	416a      	adcs	r2, r5
   13ef0:	e9c4 124e 	strd	r1, r2, [r4, #312]	; 0x138
   13ef4:	4601      	mov	r1, r0
   13ef6:	f504 7094 	add.w	r0, r4, #296	; 0x128
   13efa:	f7fe fd7d 	bl	129f8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   13efe:	1c47      	adds	r7, r0, #1
   13f00:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
   13f04:	1c41      	adds	r1, r0, #1
   13f06:	290a      	cmp	r1, #10
   13f08:	bf3c      	itt	cc
   13f0a:	4438      	addcc	r0, r7
   13f0c:	f8a4 0140 	strhcc.w	r0, [r4, #320]	; 0x140
   13f10:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
   13f14:	b138      	cbz	r0, 13f26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x264>
   13f16:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
   13f1a:	1c40      	adds	r0, r0, #1
   13f1c:	280a      	cmp	r0, #10
   13f1e:	bf28      	it	cs
   13f20:	f884 6132 	strbcs.w	r6, [r4, #306]	; 0x132
   13f24:	d202      	bcs.n	13f2c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x26a>
   13f26:	2002      	movs	r0, #2
   13f28:	f884 0132 	strb.w	r0, [r4, #306]	; 0x132
   13f2c:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
   13f30:	bb00      	cbnz	r0, 13f74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
   13f32:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
   13f36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   13f3a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   13f3e:	4050      	eors	r0, r2
   13f40:	ea70 0001 	orns	r0, r0, r1
   13f44:	d01f      	beq.n	13f86 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2c4>
   13f46:	4620      	mov	r0, r4
   13f48:	f7f3 ff20 	bl	7d8c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   13f4c:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   13f50:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   13f54:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
   13f58:	1840      	adds	r0, r0, r1
   13f5a:	eb45 0102 	adc.w	r1, r5, r2
   13f5e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   13f62:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   13f66:	1a18      	subs	r0, r3, r0
   13f68:	eb72 0001 	sbcs.w	r0, r2, r1
   13f6c:	d50b      	bpl.n	13f86 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2c4>
   13f6e:	4620      	mov	r0, r4
   13f70:	f7ff fc6d 	bl	1384e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   13f74:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   13f78:	f7ee fb78 	bl	266c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   13f7c:	f884 5120 	strb.w	r5, [r4, #288]	; 0x120
   13f80:	b002      	add	sp, #8
   13f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f86:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   13f8a:	f504 7194 	add.w	r1, r4, #296	; 0x128
   13f8e:	f7ed fe8d 	bl	1cac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   13f92:	2800      	cmp	r0, #0
   13f94:	bf1c      	itt	ne
   13f96:	b002      	addne	sp, #8
   13f98:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f9c:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
   13fa0:	2030      	movs	r0, #48	; 0x30
   13fa2:	f7f0 fb8b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13fa6:	b002      	add	sp, #8
   13fa8:	4620      	mov	r0, r4
   13faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13fae:	f7ff bb4a 	b.w	13646 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   13fb2:	21ea      	movs	r1, #234	; 0xea
   13fb4:	2030      	movs	r0, #48	; 0x30
   13fb6:	e000      	b.n	13fba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
   13fb8:	e001      	b.n	13fbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fc>
   13fba:	f7f0 fb7f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13fbe:	21ee      	movs	r1, #238	; 0xee
   13fc0:	2030      	movs	r0, #48	; 0x30
   13fc2:	f7f0 fb7b 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13fc6:	01f4      	.short	0x01f4
   13fc8:	009600fa 	.word	0x009600fa
   13fcc:	004b0064 	.word	0x004b0064
   13fd0:	001e0032 	.word	0x001e0032
   13fd4:	000a0014 	.word	0x000a0014
   13fd8:	00020005 	.word	0x00020005
   13fdc:	0001      	.short	0x0001

00013fde <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   13fde:	b510      	push	{r4, lr}
   13fe0:	4604      	mov	r4, r0
   13fe2:	f8d0 0324 	ldr.w	r0, [r0, #804]	; 0x324
   13fe6:	6961      	ldr	r1, [r4, #20]
   13fe8:	4288      	cmp	r0, r1
   13fea:	d109      	bne.n	14000 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   13fec:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
   13ff0:	8ba2      	ldrh	r2, [r4, #28]
   13ff2:	4291      	cmp	r1, r2
   13ff4:	d104      	bne.n	14000 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   13ff6:	f8b4 132a 	ldrh.w	r1, [r4, #810]	; 0x32a
   13ffa:	8be2      	ldrh	r2, [r4, #30]
   13ffc:	4291      	cmp	r1, r2
   13ffe:	d016      	beq.n	1402e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x50>
   14000:	8821      	ldrh	r1, [r4, #0]
   14002:	f8a4 11f4 	strh.w	r1, [r4, #500]	; 0x1f4
   14006:	f7fe fb57 	bl	126b8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   1400a:	f8a4 01f6 	strh.w	r0, [r4, #502]	; 0x1f6
   1400e:	f8b4 0328 	ldrh.w	r0, [r4, #808]	; 0x328
   14012:	f8a4 01f8 	strh.w	r0, [r4, #504]	; 0x1f8
   14016:	f8b4 032a 	ldrh.w	r0, [r4, #810]	; 0x32a
   1401a:	f8a4 01fa 	strh.w	r0, [r4, #506]	; 0x1fa
   1401e:	2206      	movs	r2, #6
   14020:	4621      	mov	r1, r4
   14022:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
   14026:	f7f3 f94f 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1402a:	f7f3 fc85 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1402e:	2102      	movs	r1, #2
   14030:	4620      	mov	r0, r4
   14032:	f7f2 fd3f 	bl	6ab4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   14036:	2000      	movs	r0, #0
   14038:	f884 009e 	strb.w	r0, [r4, #158]	; 0x9e
   1403c:	2003      	movs	r0, #3
   1403e:	f884 00a2 	strb.w	r0, [r4, #162]	; 0xa2
   14042:	bd10      	pop	{r4, pc}

00014044 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   14044:	f7f0 bf50 	b.w	4ee8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00014048 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   14048:	2100      	movs	r1, #0
   1404a:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
   1404e:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   14052:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
   14056:	f890 127b 	ldrb.w	r1, [r0, #635]	; 0x27b
   1405a:	b111      	cbz	r1, 14062 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   1405c:	2102      	movs	r1, #2
   1405e:	f7f6 bc77 	b.w	a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   14062:	2103      	movs	r1, #3
   14064:	f7f6 bc74 	b.w	a950 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   14068:	b530      	push	{r4, r5, lr}
   1406a:	b083      	sub	sp, #12
   1406c:	245b      	movs	r4, #91	; 0x5b
   1406e:	f7f0 f8d9 	bl	4224 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   14072:	2800      	cmp	r0, #0
   14074:	bf18      	it	ne
   14076:	2473      	movne	r4, #115	; 0x73
   14078:	4668      	mov	r0, sp
   1407a:	f7f0 f98d 	bl	4398 <mpsl_fem_pa_is_configured>
   1407e:	f89d 0000 	ldrb.w	r0, [sp]
   14082:	2800      	cmp	r0, #0
   14084:	bf14      	ite	ne
   14086:	2501      	movne	r5, #1
   14088:	2500      	moveq	r5, #0
   1408a:	a801      	add	r0, sp, #4
   1408c:	f7f0 f96c 	bl	4368 <mpsl_fem_lna_is_configured>
   14090:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14094:	2800      	cmp	r0, #0
   14096:	bf18      	it	ne
   14098:	2001      	movne	r0, #1
   1409a:	4328      	orrs	r0, r5
   1409c:	bf18      	it	ne
   1409e:	3409      	addne	r4, #9
   140a0:	4620      	mov	r0, r4
   140a2:	b003      	add	sp, #12
   140a4:	bd30      	pop	{r4, r5, pc}

000140a6 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   140a6:	f7f0 bf1f 	b.w	4ee8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   140aa:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   140ae:	f001 0107 	and.w	r1, r1, #7
   140b2:	7800      	ldrb	r0, [r0, #0]
   140b4:	40c8      	lsrs	r0, r1
   140b6:	f000 0001 	and.w	r0, r0, #1
   140ba:	4770      	bx	lr
   140bc:	b118      	cbz	r0, 140c6 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x20>
   140be:	2802      	cmp	r0, #2
   140c0:	d001      	beq.n	140c6 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x20>
   140c2:	2001      	movs	r0, #1
   140c4:	4770      	bx	lr
   140c6:	2000      	movs	r0, #0
   140c8:	4770      	bx	lr

000140ca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   140ca:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   140cc:	7881      	ldrb	r1, [r0, #2]
   140ce:	4604      	mov	r4, r0
   140d0:	291a      	cmp	r1, #26
   140d2:	d025      	beq.n	14120 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   140d4:	dc0e      	bgt.n	140f4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   140d6:	2916      	cmp	r1, #22
   140d8:	d22c      	bcs.n	14134 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   140da:	e8df f001 	tbb	[pc, r1]
   140de:	2b2b      	.short	0x2b2b
   140e0:	212b2b2b 	.word	0x212b2b2b
   140e4:	2b2b2b2b 	.word	0x2b2b2b2b
   140e8:	2b2b2b2b 	.word	0x2b2b2b2b
   140ec:	2b2b2b2b 	.word	0x2b2b2b2b
   140f0:	2121212b 	.word	0x2121212b
   140f4:	292a      	cmp	r1, #42	; 0x2a
   140f6:	d01d      	beq.n	14134 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   140f8:	dc0b      	bgt.n	14112 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   140fa:	f1a1 011e 	sub.w	r1, r1, #30
   140fe:	290c      	cmp	r1, #12
   14100:	d218      	bcs.n	14134 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   14102:	e8df f001 	tbb	[pc, r1]
   14106:	1717      	.short	0x1717
   14108:	17171717 	.word	0x17171717
   1410c:	17171717 	.word	0x17171717
   14110:	0d17      	.short	0x0d17
   14112:	393a      	subs	r1, #58	; 0x3a
   14114:	2904      	cmp	r1, #4
   14116:	d20d      	bcs.n	14134 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   14118:	e8df f001 	tbb	[pc, r1]
   1411c:	020c020c 	.word	0x020c020c
   14120:	8820      	ldrh	r0, [r4, #0]
   14122:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   14126:	d205      	bcs.n	14134 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   14128:	4669      	mov	r1, sp
   1412a:	f7fe faa1 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1412e:	b118      	cbz	r0, 14138 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   14130:	2002      	movs	r0, #2
   14132:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   14134:	2012      	movs	r0, #18
   14136:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   14138:	9801      	ldr	r0, [sp, #4]
   1413a:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   1413e:	f88d 1008 	strb.w	r1, [sp, #8]
   14142:	9902      	ldr	r1, [sp, #8]
   14144:	9102      	str	r1, [sp, #8]
   14146:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1414a:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1414e:	b109      	cbz	r1, 14154 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   14150:	200c      	movs	r0, #12
   14152:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   14154:	21ff      	movs	r1, #255	; 0xff
   14156:	7001      	strb	r1, [r0, #0]
   14158:	78a1      	ldrb	r1, [r4, #2]
   1415a:	7041      	strb	r1, [r0, #1]
   1415c:	4668      	mov	r0, sp
   1415e:	f7fe ffde 	bl	1311e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   14162:	2000      	movs	r0, #0
   14164:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00014166 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   14166:	b510      	push	{r4, lr}
   14168:	4604      	mov	r4, r0
   1416a:	f001 f8eb 	bl	15344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x612>
   1416e:	b108      	cbz	r0, 14174 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   14170:	200c      	movs	r0, #12
   14172:	bd10      	pop	{r4, pc}
   14174:	7820      	ldrb	r0, [r4, #0]
   14176:	b128      	cbz	r0, 14184 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   14178:	2801      	cmp	r0, #1
   1417a:	d003      	beq.n	14184 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   1417c:	28ff      	cmp	r0, #255	; 0xff
   1417e:	d00b      	beq.n	14198 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   14180:	2012      	movs	r0, #18
   14182:	bd10      	pop	{r4, pc}
   14184:	f7ff ff9a 	bl	140bc <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x16>
   14188:	1c61      	adds	r1, r4, #1
   1418a:	f7f2 facd 	bl	6728 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   1418e:	b108      	cbz	r0, 14194 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   14190:	2000      	movs	r0, #0
   14192:	bd10      	pop	{r4, pc}
   14194:	2007      	movs	r0, #7
   14196:	bd10      	pop	{r4, pc}
   14198:	2001      	movs	r0, #1
   1419a:	f7f2 fb01 	bl	67a0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   1419e:	e7f7      	b.n	14190 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

000141a0 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q>:
   141a0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   141a2:	2000      	movs	r0, #0
   141a4:	f7fa fb08 	bl	e7b8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   141a8:	2400      	movs	r4, #0
   141aa:	4669      	mov	r1, sp
   141ac:	2002      	movs	r0, #2
   141ae:	f7fd fff7 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   141b2:	e006      	b.n	141c2 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x22>
   141b4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   141b8:	9802      	ldr	r0, [sp, #8]
   141ba:	f000 ff8b 	bl	150d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a2>
   141be:	b100      	cbz	r0, 141c2 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x22>
   141c0:	4604      	mov	r4, r0
   141c2:	4668      	mov	r0, sp
   141c4:	f7f0 fce4 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   141c8:	2800      	cmp	r0, #0
   141ca:	d0f3      	beq.n	141b4 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x14>
   141cc:	4620      	mov	r0, r4
   141ce:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000141d0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   141d0:	b510      	push	{r4, lr}
   141d2:	f001 f8b7 	bl	15344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x612>
   141d6:	b108      	cbz	r0, 141dc <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   141d8:	200c      	movs	r0, #12
   141da:	bd10      	pop	{r4, pc}
   141dc:	f7f2 fae6 	bl	67ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   141e0:	2000      	movs	r0, #0
   141e2:	bd10      	pop	{r4, pc}

000141e4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   141e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   141e8:	4606      	mov	r6, r0
   141ea:	f000 fd61 	bl	14cb0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   141ee:	2800      	cmp	r0, #0
   141f0:	d112      	bne.n	14218 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   141f2:	8830      	ldrh	r0, [r6, #0]
   141f4:	2100      	movs	r1, #0
   141f6:	f7fd ffc9 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   141fa:	0004      	movs	r4, r0
   141fc:	d00e      	beq.n	1421c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   141fe:	f000 ff3d 	bl	1507c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x34a>
   14202:	b158      	cbz	r0, 1421c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   14204:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   14208:	f88d 0000 	strb.w	r0, [sp]
   1420c:	9800      	ldr	r0, [sp, #0]
   1420e:	9000      	str	r0, [sp, #0]
   14210:	f89d 0000 	ldrb.w	r0, [sp]
   14214:	b120      	cbz	r0, 14220 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
   14216:	203a      	movs	r0, #58	; 0x3a
   14218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1421c:	2002      	movs	r0, #2
   1421e:	e7fb      	b.n	14218 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   14220:	f04f 0800 	mov.w	r8, #0
   14224:	88b0      	ldrh	r0, [r6, #4]
   14226:	f7fe fa3b 	bl	126a0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1422a:	4605      	mov	r5, r0
   1422c:	4601      	mov	r1, r0
   1422e:	2005      	movs	r0, #5
   14230:	f7fe fc6d 	bl	12b0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   14234:	4607      	mov	r7, r0
   14236:	4629      	mov	r1, r5
   14238:	2008      	movs	r0, #8
   1423a:	f7fe fc68 	bl	12b0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   1423e:	42b8      	cmp	r0, r7
   14240:	d301      	bcc.n	14246 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
   14242:	42af      	cmp	r7, r5
   14244:	d301      	bcc.n	1424a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
   14246:	2012      	movs	r0, #18
   14248:	e7e6      	b.n	14218 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   1424a:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1424e:	4285      	cmp	r5, r0
   14250:	d209      	bcs.n	14266 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
   14252:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
   14256:	2802      	cmp	r0, #2
   14258:	d103      	bne.n	14262 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x7e>
   1425a:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
   1425e:	2802      	cmp	r0, #2
   14260:	d001      	beq.n	14266 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
   14262:	200c      	movs	r0, #12
   14264:	e7d8      	b.n	14218 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   14266:	f8a4 72a8 	strh.w	r7, [r4, #680]	; 0x2a8
   1426a:	e9c4 85ab 	strd	r8, r5, [r4, #684]	; 0x2ac
   1426e:	88f0      	ldrh	r0, [r6, #6]
   14270:	f8a4 02b4 	strh.w	r0, [r4, #692]	; 0x2b4
   14274:	8930      	ldrh	r0, [r6, #8]
   14276:	f8a4 02b6 	strh.w	r0, [r4, #694]	; 0x2b6
   1427a:	f504 7429 	add.w	r4, r4, #676	; 0x2a4
   1427e:	20ff      	movs	r0, #255	; 0xff
   14280:	7020      	strb	r0, [r4, #0]
   14282:	2000      	movs	r0, #0
   14284:	e7c8      	b.n	14218 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

00014286 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   14286:	b510      	push	{r4, lr}
   14288:	460b      	mov	r3, r1
   1428a:	2201      	movs	r2, #1
   1428c:	f100 0110 	add.w	r1, r0, #16
   14290:	f7f2 fbce 	bl	6a30 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   14294:	2000      	movs	r0, #0
   14296:	bd10      	pop	{r4, pc}

00014298 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   14298:	b510      	push	{r4, lr}
   1429a:	8800      	ldrh	r0, [r0, #0]
   1429c:	2101      	movs	r1, #1
   1429e:	f7fd ff75 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   142a2:	b118      	cbz	r0, 142ac <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   142a4:	f890 1300 	ldrb.w	r1, [r0, #768]	; 0x300
   142a8:	b111      	cbz	r1, 142b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   142aa:	e007      	b.n	142bc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   142ac:	2002      	movs	r0, #2
   142ae:	bd10      	pop	{r4, pc}
   142b0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   142b4:	2915      	cmp	r1, #21
   142b6:	d003      	beq.n	142c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   142b8:	2916      	cmp	r1, #22
   142ba:	d001      	beq.n	142c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   142bc:	200c      	movs	r0, #12
   142be:	bd10      	pop	{r4, pc}
   142c0:	2102      	movs	r1, #2
   142c2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   142c6:	2000      	movs	r0, #0
   142c8:	bd10      	pop	{r4, pc}

000142ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   142ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142cc:	4605      	mov	r5, r0
   142ce:	8800      	ldrh	r0, [r0, #0]
   142d0:	2101      	movs	r1, #1
   142d2:	f7fd ff5b 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   142d6:	0004      	movs	r4, r0
   142d8:	d003      	beq.n	142e2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   142da:	f894 0300 	ldrb.w	r0, [r4, #768]	; 0x300
   142de:	b110      	cbz	r0, 142e6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   142e0:	e011      	b.n	14306 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   142e2:	2002      	movs	r0, #2
   142e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   142e6:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
   142ea:	2815      	cmp	r0, #21
   142ec:	d001      	beq.n	142f2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   142ee:	2816      	cmp	r0, #22
   142f0:	d109      	bne.n	14306 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   142f2:	f894 0334 	ldrb.w	r0, [r4, #820]	; 0x334
   142f6:	f88d 0000 	strb.w	r0, [sp]
   142fa:	9800      	ldr	r0, [sp, #0]
   142fc:	9000      	str	r0, [sp, #0]
   142fe:	f89d 0000 	ldrb.w	r0, [sp]
   14302:	2601      	movs	r6, #1
   14304:	b108      	cbz	r0, 1430a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   14306:	200c      	movs	r0, #12
   14308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1430a:	2210      	movs	r2, #16
   1430c:	1ca9      	adds	r1, r5, #2
   1430e:	f204 3001 	addw	r0, r4, #769	; 0x301
   14312:	f7fc fdd1 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   14316:	f884 6300 	strb.w	r6, [r4, #768]	; 0x300
   1431a:	2000      	movs	r0, #0
   1431c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001431e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   1431e:	b510      	push	{r4, lr}
   14320:	2108      	movs	r1, #8
   14322:	f7f0 fa79 	bl	4818 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   14326:	2000      	movs	r0, #0
   14328:	bd10      	pop	{r4, pc}

0001432a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   1432a:	b510      	push	{r4, lr}
   1432c:	4604      	mov	r4, r0
   1432e:	f7fa f911 	bl	e554 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x23c>
   14332:	f7ff fa67 	bl	13804 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   14336:	7020      	strb	r0, [r4, #0]
   14338:	2000      	movs	r0, #0
   1433a:	bd10      	pop	{r4, pc}

0001433c <sym_HN6JPFYV5RALEY5SK42AILWQ3BESLOSWO6JLUAY>:
   1433c:	b510      	push	{r4, lr}
   1433e:	4604      	mov	r4, r0
   14340:	2000      	movs	r0, #0
   14342:	f7fa fa39 	bl	e7b8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   14346:	f7f0 ff2d 	bl	51a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1434a:	8020      	strh	r0, [r4, #0]
   1434c:	2000      	movs	r0, #0
   1434e:	bd10      	pop	{r4, pc}

00014350 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   14350:	21fb      	movs	r1, #251	; 0xfb
   14352:	8001      	strh	r1, [r0, #0]
   14354:	f44f 6229 	mov.w	r2, #2704	; 0xa90
   14358:	8042      	strh	r2, [r0, #2]
   1435a:	8081      	strh	r1, [r0, #4]
   1435c:	80c2      	strh	r2, [r0, #6]
   1435e:	2000      	movs	r0, #0
   14360:	4770      	bx	lr

00014362 <sym_B56D6C76IM4AAFDQEOHND3OAZFOQIH7L5TPFHMY>:
   14362:	b510      	push	{r4, lr}
   14364:	4604      	mov	r4, r0
   14366:	2000      	movs	r0, #0
   14368:	f7fa fa26 	bl	e7b8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   1436c:	2002      	movs	r0, #2
   1436e:	f7f0 fba7 	bl	4ac0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   14372:	7020      	strb	r0, [r4, #0]
   14374:	2000      	movs	r0, #0
   14376:	bd10      	pop	{r4, pc}

00014378 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   14378:	b51c      	push	{r2, r3, r4, lr}
   1437a:	8800      	ldrh	r0, [r0, #0]
   1437c:	4669      	mov	r1, sp
   1437e:	f7fe f977 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   14382:	2800      	cmp	r0, #0
   14384:	d114      	bne.n	143b0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
   14386:	9c01      	ldr	r4, [sp, #4]
   14388:	f89d 0000 	ldrb.w	r0, [sp]
   1438c:	f504 749c 	add.w	r4, r4, #312	; 0x138
   14390:	b918      	cbnz	r0, 1439a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
   14392:	9801      	ldr	r0, [sp, #4]
   14394:	f000 fe72 	bl	1507c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x34a>
   14398:	b158      	cbz	r0, 143b2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3a>
   1439a:	f89d 0000 	ldrb.w	r0, [sp]
   1439e:	2801      	cmp	r0, #1
   143a0:	d103      	bne.n	143aa <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x32>
   143a2:	9801      	ldr	r0, [sp, #4]
   143a4:	f000 fe80 	bl	150a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x376>
   143a8:	b118      	cbz	r0, 143b2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3a>
   143aa:	7ce0      	ldrb	r0, [r4, #19]
   143ac:	b118      	cbz	r0, 143b6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3e>
   143ae:	203a      	movs	r0, #58	; 0x3a
   143b0:	bd1c      	pop	{r2, r3, r4, pc}
   143b2:	2002      	movs	r0, #2
   143b4:	bd1c      	pop	{r2, r3, r4, pc}
   143b6:	2001      	movs	r0, #1
   143b8:	74e0      	strb	r0, [r4, #19]
   143ba:	2000      	movs	r0, #0
   143bc:	bd1c      	pop	{r2, r3, r4, pc}

000143be <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   143be:	b510      	push	{r4, lr}
   143c0:	4604      	mov	r4, r0
   143c2:	20d8      	movs	r0, #216	; 0xd8
   143c4:	7020      	strb	r0, [r4, #0]
   143c6:	f000 fe56 	bl	15076 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   143ca:	7060      	strb	r0, [r4, #1]
   143cc:	2000      	movs	r0, #0
   143ce:	bd10      	pop	{r4, pc}

000143d0 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   143d0:	2108      	movs	r1, #8
   143d2:	7001      	strb	r1, [r0, #0]
   143d4:	2000      	movs	r0, #0
   143d6:	4770      	bx	lr

000143d8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   143d8:	b510      	push	{r4, lr}
   143da:	4604      	mov	r4, r0
   143dc:	f000 ffb2 	bl	15344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x612>
   143e0:	b108      	cbz	r0, 143e6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   143e2:	200c      	movs	r0, #12
   143e4:	bd10      	pop	{r4, pc}
   143e6:	7820      	ldrb	r0, [r4, #0]
   143e8:	b120      	cbz	r0, 143f4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   143ea:	2801      	cmp	r0, #1
   143ec:	d002      	beq.n	143f4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   143ee:	28ff      	cmp	r0, #255	; 0xff
   143f0:	d108      	bne.n	14404 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   143f2:	e009      	b.n	14408 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   143f4:	f7ff fe62 	bl	140bc <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x16>
   143f8:	1c61      	adds	r1, r4, #1
   143fa:	f7fe f916 	bl	1262a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   143fe:	b108      	cbz	r0, 14404 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   14400:	2000      	movs	r0, #0
   14402:	bd10      	pop	{r4, pc}
   14404:	2012      	movs	r0, #18
   14406:	bd10      	pop	{r4, pc}
   14408:	2000      	movs	r0, #0
   1440a:	f7f2 f9c9 	bl	67a0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   1440e:	e7f7      	b.n	14400 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

00014410 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   14410:	b51c      	push	{r2, r3, r4, lr}
   14412:	4604      	mov	r4, r0
   14414:	f7fa f89e 	bl	e554 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x23c>
   14418:	2000      	movs	r0, #0
   1441a:	f88d 0002 	strb.w	r0, [sp, #2]
   1441e:	2103      	movs	r1, #3
   14420:	f88d 1001 	strb.w	r1, [sp, #1]
   14424:	f814 1b01 	ldrb.w	r1, [r4], #1
   14428:	f88d 1003 	strb.w	r1, [sp, #3]
   1442c:	f88d 0000 	strb.w	r0, [sp]
   14430:	4668      	mov	r0, sp
   14432:	9401      	str	r4, [sp, #4]
   14434:	f000 fa25 	bl	14882 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   14438:	bd1c      	pop	{r2, r3, r4, pc}

0001443a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   1443a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1443c:	4605      	mov	r5, r0
   1443e:	f7fa f889 	bl	e554 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x23c>
   14442:	4606      	mov	r6, r0
   14444:	7828      	ldrb	r0, [r5, #0]
   14446:	2400      	movs	r4, #0
   14448:	b160      	cbz	r0, 14464 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   1444a:	f88d 4000 	strb.w	r4, [sp]
   1444e:	2001      	movs	r0, #1
   14450:	f10d 0101 	add.w	r1, sp, #1
   14454:	f7f1 f8a4 	bl	55a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   14458:	b120      	cbz	r0, 14464 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   1445a:	4668      	mov	r0, sp
   1445c:	f000 f897 	bl	1458e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   14460:	2800      	cmp	r0, #0
   14462:	d112      	bne.n	1448a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   14464:	f88d 400c 	strb.w	r4, [sp, #12]
   14468:	4630      	mov	r0, r6
   1446a:	f7ff f9bf 	bl	137ec <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1446e:	b118      	cbz	r0, 14478 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   14470:	2080      	movs	r0, #128	; 0x80
   14472:	f8ad 000d 	strh.w	r0, [sp, #13]
   14476:	e001      	b.n	1447c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   14478:	f8ad 400d 	strh.w	r4, [sp, #13]
   1447c:	f88d 400f 	strb.w	r4, [sp, #15]
   14480:	7828      	ldrb	r0, [r5, #0]
   14482:	2801      	cmp	r0, #1
   14484:	d003      	beq.n	1448e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   14486:	b138      	cbz	r0, 14498 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   14488:	2012      	movs	r0, #18
   1448a:	b004      	add	sp, #16
   1448c:	bd70      	pop	{r4, r5, r6, pc}
   1448e:	a903      	add	r1, sp, #12
   14490:	4630      	mov	r0, r6
   14492:	f7fa f87d 	bl	e590 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   14496:	e7f8      	b.n	1448a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   14498:	4630      	mov	r0, r6
   1449a:	f000 fe52 	bl	15142 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   1449e:	e7f4      	b.n	1448a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

000144a0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   144a0:	b530      	push	{r4, r5, lr}
   144a2:	b08b      	sub	sp, #44	; 0x2c
   144a4:	4604      	mov	r4, r0
   144a6:	f7fa f855 	bl	e554 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x23c>
   144aa:	4602      	mov	r2, r0
   144ac:	7920      	ldrb	r0, [r4, #4]
   144ae:	2804      	cmp	r0, #4
   144b0:	d803      	bhi.n	144ba <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   144b2:	8860      	ldrh	r0, [r4, #2]
   144b4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   144b8:	d902      	bls.n	144c0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   144ba:	2012      	movs	r0, #18
   144bc:	b00b      	add	sp, #44	; 0x2c
   144be:	bd30      	pop	{r4, r5, pc}
   144c0:	2500      	movs	r5, #0
   144c2:	f88d 5004 	strb.w	r5, [sp, #4]
   144c6:	7921      	ldrb	r1, [r4, #4]
   144c8:	9500      	str	r5, [sp, #0]
   144ca:	f89d 0000 	ldrb.w	r0, [sp]
   144ce:	2905      	cmp	r1, #5
   144d0:	f040 0010 	orr.w	r0, r0, #16
   144d4:	f88d 0000 	strb.w	r0, [sp]
   144d8:	d254      	bcs.n	14584 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   144da:	e8df f001 	tbb	[pc, r1]
   144de:	0803      	.short	0x0803
   144e0:	000b1105 	.word	0x000b1105
   144e4:	f040 0001 	orr.w	r0, r0, #1
   144e8:	f040 0002 	orr.w	r0, r0, #2
   144ec:	e006      	b.n	144fc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   144ee:	f040 0009 	orr.w	r0, r0, #9
   144f2:	e001      	b.n	144f8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   144f4:	f040 0001 	orr.w	r0, r0, #1
   144f8:	f040 0004 	orr.w	r0, r0, #4
   144fc:	f88d 0000 	strb.w	r0, [sp]
   14500:	f8bd 0000 	ldrh.w	r0, [sp]
   14504:	9000      	str	r0, [sp, #0]
   14506:	f8bd 0000 	ldrh.w	r0, [sp]
   1450a:	f8ad 0005 	strh.w	r0, [sp, #5]
   1450e:	8821      	ldrh	r1, [r4, #0]
   14510:	f8dd 0006 	ldr.w	r0, [sp, #6]
   14514:	f361 201f 	bfi	r0, r1, #8, #24
   14518:	f8cd 0006 	str.w	r0, [sp, #6]
   1451c:	8861      	ldrh	r1, [r4, #2]
   1451e:	f8dd 0009 	ldr.w	r0, [sp, #9]
   14522:	f361 201f 	bfi	r0, r1, #8, #24
   14526:	f8cd 0009 	str.w	r0, [sp, #9]
   1452a:	7b60      	ldrb	r0, [r4, #13]
   1452c:	f88d 000d 	strb.w	r0, [sp, #13]
   14530:	7960      	ldrb	r0, [r4, #5]
   14532:	f88d 000e 	strb.w	r0, [sp, #14]
   14536:	79a0      	ldrb	r0, [r4, #6]
   14538:	f88d 000f 	strb.w	r0, [sp, #15]
   1453c:	f8d4 0007 	ldr.w	r0, [r4, #7]
   14540:	9004      	str	r0, [sp, #16]
   14542:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   14546:	f8ad 0014 	strh.w	r0, [sp, #20]
   1454a:	7ba0      	ldrb	r0, [r4, #14]
   1454c:	f88d 0016 	strb.w	r0, [sp, #22]
   14550:	207f      	movs	r0, #127	; 0x7f
   14552:	f88d 0017 	strb.w	r0, [sp, #23]
   14556:	2001      	movs	r0, #1
   14558:	f88d 0018 	strb.w	r0, [sp, #24]
   1455c:	f88d 5019 	strb.w	r5, [sp, #25]
   14560:	f88d 001a 	strb.w	r0, [sp, #26]
   14564:	f88d 501b 	strb.w	r5, [sp, #27]
   14568:	4610      	mov	r0, r2
   1456a:	f7ff f95d 	bl	13828 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   1456e:	f88d 001c 	strb.w	r0, [sp, #28]
   14572:	f88d 501d 	strb.w	r5, [sp, #29]
   14576:	f88d 501e 	strb.w	r5, [sp, #30]
   1457a:	a909      	add	r1, sp, #36	; 0x24
   1457c:	a801      	add	r0, sp, #4
   1457e:	f7f9 fe09 	bl	e194 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   14582:	e79b      	b.n	144bc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   14584:	f241 01cf 	movw	r1, #4303	; 0x10cf
   14588:	2039      	movs	r0, #57	; 0x39
   1458a:	f7f0 f897 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001458e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   1458e:	b570      	push	{r4, r5, r6, lr}
   14590:	4604      	mov	r4, r0
   14592:	7800      	ldrb	r0, [r0, #0]
   14594:	2102      	movs	r1, #2
   14596:	f7fd fdf9 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1459a:	0005      	movs	r5, r0
   1459c:	d007      	beq.n	145ae <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   1459e:	f7ff fb8d 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   145a2:	b160      	cbz	r0, 145be <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   145a4:	4628      	mov	r0, r5
   145a6:	f7ff f929 	bl	137fc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   145aa:	b110      	cbz	r0, 145b2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   145ac:	e005      	b.n	145ba <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   145ae:	2042      	movs	r0, #66	; 0x42
   145b0:	bd70      	pop	{r4, r5, r6, pc}
   145b2:	4628      	mov	r0, r5
   145b4:	f7ff f910 	bl	137d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   145b8:	b108      	cbz	r0, 145be <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   145ba:	200c      	movs	r0, #12
   145bc:	bd70      	pop	{r4, r5, r6, pc}
   145be:	1c61      	adds	r1, r4, #1
   145c0:	4628      	mov	r0, r5
   145c2:	f7ff f928 	bl	13816 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   145c6:	2000      	movs	r0, #0
   145c8:	bd70      	pop	{r4, r5, r6, pc}

000145ca <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   145ca:	b50e      	push	{r1, r2, r3, lr}
   145cc:	8882      	ldrh	r2, [r0, #4]
   145ce:	f244 2390 	movw	r3, #17040	; 0x4290
   145d2:	429a      	cmp	r2, r3
   145d4:	d901      	bls.n	145da <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   145d6:	2012      	movs	r0, #18
   145d8:	bd0e      	pop	{r1, r2, r3, pc}
   145da:	f44f 6329 	mov.w	r3, #2704	; 0xa90
   145de:	429a      	cmp	r2, r3
   145e0:	d300      	bcc.n	145e4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   145e2:	461a      	mov	r2, r3
   145e4:	8803      	ldrh	r3, [r0, #0]
   145e6:	f8ad 3000 	strh.w	r3, [sp]
   145ea:	8843      	ldrh	r3, [r0, #2]
   145ec:	f8ad 3002 	strh.w	r3, [sp, #2]
   145f0:	f8ad 2004 	strh.w	r2, [sp, #4]
   145f4:	8843      	ldrh	r3, [r0, #2]
   145f6:	f8ad 3006 	strh.w	r3, [sp, #6]
   145fa:	f8ad 2008 	strh.w	r2, [sp, #8]
   145fe:	8800      	ldrh	r0, [r0, #0]
   14600:	8008      	strh	r0, [r1, #0]
   14602:	4668      	mov	r0, sp
   14604:	f000 fdc3 	bl	1518e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x45c>
   14608:	bd0e      	pop	{r1, r2, r3, pc}

0001460a <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A>:
   1460a:	b51c      	push	{r2, r3, r4, lr}
   1460c:	4604      	mov	r4, r0
   1460e:	2000      	movs	r0, #0
   14610:	f7fa f8d2 	bl	e7b8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   14614:	78e0      	ldrb	r0, [r4, #3]
   14616:	28fb      	cmp	r0, #251	; 0xfb
   14618:	d901      	bls.n	1461e <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A+0x14>
   1461a:	2012      	movs	r0, #18
   1461c:	bd1c      	pop	{r2, r3, r4, pc}
   1461e:	f814 0b02 	ldrb.w	r0, [r4], #2
   14622:	f88d 0000 	strb.w	r0, [sp]
   14626:	f814 0b02 	ldrb.w	r0, [r4], #2
   1462a:	f88d 0002 	strb.w	r0, [sp, #2]
   1462e:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   14632:	f88d 0001 	strb.w	r0, [sp, #1]
   14636:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1463a:	f88d 0003 	strb.w	r0, [sp, #3]
   1463e:	4668      	mov	r0, sp
   14640:	9401      	str	r4, [sp, #4]
   14642:	f000 f91e 	bl	14882 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   14646:	bd1c      	pop	{r2, r3, r4, pc}

00014648 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY>:
   14648:	b530      	push	{r4, r5, lr}
   1464a:	460d      	mov	r5, r1
   1464c:	b087      	sub	sp, #28
   1464e:	4604      	mov	r4, r0
   14650:	4601      	mov	r1, r0
   14652:	2219      	movs	r2, #25
   14654:	4668      	mov	r0, sp
   14656:	f7fc fc2f 	bl	10eb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1465a:	2000      	movs	r0, #0
   1465c:	f88d 0019 	strb.w	r0, [sp, #25]
   14660:	f88d 001a 	strb.w	r0, [sp, #26]
   14664:	7d20      	ldrb	r0, [r4, #20]
   14666:	2802      	cmp	r0, #2
   14668:	d004      	beq.n	14674 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x2c>
   1466a:	7860      	ldrb	r0, [r4, #1]
   1466c:	0701      	lsls	r1, r0, #28
   1466e:	d504      	bpl.n	1467a <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x32>
   14670:	06c0      	lsls	r0, r0, #27
   14672:	d402      	bmi.n	1467a <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x32>
   14674:	2012      	movs	r0, #18
   14676:	b007      	add	sp, #28
   14678:	bd30      	pop	{r4, r5, pc}
   1467a:	4629      	mov	r1, r5
   1467c:	4668      	mov	r0, sp
   1467e:	f7f9 fd89 	bl	e194 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   14682:	e7f8      	b.n	14676 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x2e>

00014684 <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q>:
   14684:	b51c      	push	{r2, r3, r4, lr}
   14686:	4604      	mov	r4, r0
   14688:	2000      	movs	r0, #0
   1468a:	f7fa f895 	bl	e7b8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   1468e:	78e0      	ldrb	r0, [r4, #3]
   14690:	28fb      	cmp	r0, #251	; 0xfb
   14692:	d901      	bls.n	14698 <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q+0x14>
   14694:	2012      	movs	r0, #18
   14696:	bd1c      	pop	{r2, r3, r4, pc}
   14698:	f814 0b02 	ldrb.w	r0, [r4], #2
   1469c:	f88d 0000 	strb.w	r0, [sp]
   146a0:	f814 0b02 	ldrb.w	r0, [r4], #2
   146a4:	f88d 0002 	strb.w	r0, [sp, #2]
   146a8:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   146ac:	f88d 0001 	strb.w	r0, [sp, #1]
   146b0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   146b4:	f88d 0003 	strb.w	r0, [sp, #3]
   146b8:	4668      	mov	r0, sp
   146ba:	9401      	str	r4, [sp, #4]
   146bc:	f000 f96f 	bl	1499e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   146c0:	bd1c      	pop	{r2, r3, r4, pc}

000146c2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
   146c2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   146c4:	4604      	mov	r4, r0
   146c6:	f7fd ffbb 	bl	12640 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
   146ca:	b158      	cbz	r0, 146e4 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
   146cc:	4620      	mov	r0, r4
   146ce:	f7f2 fb59 	bl	6d84 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
   146d2:	4669      	mov	r1, sp
   146d4:	2000      	movs	r0, #0
   146d6:	f7fd fd63 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   146da:	24ff      	movs	r4, #255	; 0xff
   146dc:	b138      	cbz	r0, 146ee <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x2c>
   146de:	f241 0143 	movw	r1, #4163	; 0x1043
   146e2:	e022      	b.n	1472a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x68>
   146e4:	2012      	movs	r0, #18
   146e6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   146e8:	9802      	ldr	r0, [sp, #8]
   146ea:	f880 429c 	strb.w	r4, [r0, #668]	; 0x29c
   146ee:	4668      	mov	r0, sp
   146f0:	f7f0 fa4e 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   146f4:	2800      	cmp	r0, #0
   146f6:	d0f7      	beq.n	146e8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x26>
   146f8:	4669      	mov	r1, sp
   146fa:	2002      	movs	r0, #2
   146fc:	f7fd fd50 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   14700:	b130      	cbz	r0, 14710 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x4e>
   14702:	f241 014d 	movw	r1, #4173	; 0x104d
   14706:	e010      	b.n	1472a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x68>
   14708:	9802      	ldr	r0, [sp, #8]
   1470a:	f880 507b 	strb.w	r5, [r0, #123]	; 0x7b
   1470e:	e000      	b.n	14712 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x50>
   14710:	2501      	movs	r5, #1
   14712:	4668      	mov	r0, sp
   14714:	f7f0 fa3c 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   14718:	2800      	cmp	r0, #0
   1471a:	d0f5      	beq.n	14708 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x46>
   1471c:	4669      	mov	r1, sp
   1471e:	2003      	movs	r0, #3
   14720:	f7fd fd3e 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   14724:	b138      	cbz	r0, 14736 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x74>
   14726:	f241 0158 	movw	r1, #4184	; 0x1058
   1472a:	2039      	movs	r0, #57	; 0x39
   1472c:	f7ef ffc6 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14730:	9802      	ldr	r0, [sp, #8]
   14732:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
   14736:	4668      	mov	r0, sp
   14738:	f7f0 fa2a 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1473c:	2800      	cmp	r0, #0
   1473e:	d0f7      	beq.n	14730 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x6e>
   14740:	2000      	movs	r0, #0
   14742:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00014744 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   14744:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   14746:	4604      	mov	r4, r0
   14748:	f10d 0007 	add.w	r0, sp, #7
   1474c:	9000      	str	r0, [sp, #0]
   1474e:	7922      	ldrb	r2, [r4, #4]
   14750:	78e1      	ldrb	r1, [r4, #3]
   14752:	78a0      	ldrb	r0, [r4, #2]
   14754:	f10d 0306 	add.w	r3, sp, #6
   14758:	f000 fdae 	bl	152b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x586>
   1475c:	2800      	cmp	r0, #0
   1475e:	d109      	bne.n	14774 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   14760:	8820      	ldrh	r0, [r4, #0]
   14762:	f8ad 0004 	strh.w	r0, [sp, #4]
   14766:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   1476a:	f8ad 0008 	strh.w	r0, [sp, #8]
   1476e:	a801      	add	r0, sp, #4
   14770:	f000 f977 	bl	14a62 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   14774:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00014776 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   14776:	b510      	push	{r4, lr}
   14778:	4604      	mov	r4, r0
   1477a:	2001      	movs	r0, #1
   1477c:	f000 fb1c 	bl	14db8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x86>
   14780:	b128      	cbz	r0, 1478e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   14782:	4621      	mov	r1, r4
   14784:	2001      	movs	r0, #1
   14786:	f7f0 ff23 	bl	55d0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1478a:	2000      	movs	r0, #0
   1478c:	bd10      	pop	{r4, pc}
   1478e:	200c      	movs	r0, #12
   14790:	bd10      	pop	{r4, pc}

00014792 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   14792:	b51c      	push	{r2, r3, r4, lr}
   14794:	4604      	mov	r4, r0
   14796:	f7f9 fedd 	bl	e554 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x23c>
   1479a:	2000      	movs	r0, #0
   1479c:	f88d 0000 	strb.w	r0, [sp]
   147a0:	f88d 0002 	strb.w	r0, [sp, #2]
   147a4:	2003      	movs	r0, #3
   147a6:	f88d 0001 	strb.w	r0, [sp, #1]
   147aa:	f814 0b01 	ldrb.w	r0, [r4], #1
   147ae:	f88d 0003 	strb.w	r0, [sp, #3]
   147b2:	4668      	mov	r0, sp
   147b4:	9401      	str	r4, [sp, #4]
   147b6:	f000 f8f2 	bl	1499e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   147ba:	bd1c      	pop	{r2, r3, r4, pc}

000147bc <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   147bc:	b51c      	push	{r2, r3, r4, lr}
   147be:	8801      	ldrh	r1, [r0, #0]
   147c0:	f8ad 1000 	strh.w	r1, [sp]
   147c4:	8841      	ldrh	r1, [r0, #2]
   147c6:	f8ad 1002 	strh.w	r1, [sp, #2]
   147ca:	8801      	ldrh	r1, [r0, #0]
   147cc:	f8ad 1004 	strh.w	r1, [sp, #4]
   147d0:	8840      	ldrh	r0, [r0, #2]
   147d2:	f8ad 0006 	strh.w	r0, [sp, #6]
   147d6:	4668      	mov	r0, sp
   147d8:	f7f9 ffb6 	bl	e748 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>
   147dc:	bd1c      	pop	{r2, r3, r4, pc}

000147de <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   147de:	b510      	push	{r4, lr}
   147e0:	f7f0 ff1c 	bl	561c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   147e4:	2000      	movs	r0, #0
   147e6:	bd10      	pop	{r4, pc}

000147e8 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   147e8:	b510      	push	{r4, lr}
   147ea:	460c      	mov	r4, r1
   147ec:	2101      	movs	r1, #1
   147ee:	f7fd fccd 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   147f2:	b118      	cbz	r0, 147fc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   147f4:	2c02      	cmp	r4, #2
   147f6:	d903      	bls.n	14800 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   147f8:	2012      	movs	r0, #18
   147fa:	bd10      	pop	{r4, pc}
   147fc:	2002      	movs	r0, #2
   147fe:	bd10      	pop	{r4, pc}
   14800:	f014 0101 	ands.w	r1, r4, #1
   14804:	f880 127d 	strb.w	r1, [r0, #637]	; 0x27d
   14808:	f3c4 0240 	ubfx	r2, r4, #1, #1
   1480c:	f880 227c 	strb.w	r2, [r0, #636]	; 0x27c
   14810:	d004      	beq.n	1481c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   14812:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
   14816:	b109      	cbz	r1, 1481c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   14818:	f7ff fa53 	bl	13cc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   1481c:	2000      	movs	r0, #0
   1481e:	bd10      	pop	{r4, pc}

00014820 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   14820:	b51c      	push	{r2, r3, r4, lr}
   14822:	460c      	mov	r4, r1
   14824:	4669      	mov	r1, sp
   14826:	f7fd ff23 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1482a:	2800      	cmp	r0, #0
   1482c:	d108      	bne.n	14840 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>
   1482e:	f89d 0000 	ldrb.w	r0, [sp]
   14832:	b130      	cbz	r0, 14842 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x22>
   14834:	2100      	movs	r1, #0
   14836:	4622      	mov	r2, r4
   14838:	9801      	ldr	r0, [sp, #4]
   1483a:	f000 fbc2 	bl	14fc2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x290>
   1483e:	2000      	movs	r0, #0
   14840:	bd1c      	pop	{r2, r3, r4, pc}
   14842:	2101      	movs	r1, #1
   14844:	e7f7      	b.n	14836 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x16>

00014846 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   14846:	b510      	push	{r4, lr}
   14848:	4604      	mov	r4, r0
   1484a:	2000      	movs	r0, #0
   1484c:	f000 fab4 	bl	14db8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x86>
   14850:	b128      	cbz	r0, 1485e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   14852:	4621      	mov	r1, r4
   14854:	2000      	movs	r0, #0
   14856:	f7f0 febb 	bl	55d0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1485a:	2000      	movs	r0, #0
   1485c:	bd10      	pop	{r4, pc}
   1485e:	200c      	movs	r0, #12
   14860:	bd10      	pop	{r4, pc}

00014862 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   14862:	b510      	push	{r4, lr}
   14864:	4604      	mov	r4, r0
   14866:	7800      	ldrb	r0, [r0, #0]
   14868:	b100      	cbz	r0, 1486c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0xa>
   1486a:	2001      	movs	r0, #1
   1486c:	f7f9 f9c6 	bl	dbfc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   14870:	7820      	ldrb	r0, [r4, #0]
   14872:	b100      	cbz	r0, 14876 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x14>
   14874:	2001      	movs	r0, #1
   14876:	f7f6 f823 	bl	a8c0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1487a:	2000      	movs	r0, #0
   1487c:	bd10      	pop	{r4, pc}

0001487e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1487e:	f000 bc86 	b.w	1518e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x45c>

00014882 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   14882:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14886:	4606      	mov	r6, r0
   14888:	7847      	ldrb	r7, [r0, #1]
   1488a:	7800      	ldrb	r0, [r0, #0]
   1488c:	2102      	movs	r1, #2
   1488e:	f7fd fc7d 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   14892:	0005      	movs	r5, r0
   14894:	d00b      	beq.n	148ae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
   14896:	f7f9 ff89 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1489a:	b158      	cbz	r0, 148b4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x32>
   1489c:	4628      	mov	r0, r5
   1489e:	f7fe feb7 	bl	13610 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   148a2:	4604      	mov	r4, r0
   148a4:	78f0      	ldrb	r0, [r6, #3]
   148a6:	42a0      	cmp	r0, r4
   148a8:	d805      	bhi.n	148b6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
   148aa:	4604      	mov	r4, r0
   148ac:	e003      	b.n	148b6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
   148ae:	2042      	movs	r0, #66	; 0x42
   148b0:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   148b4:	78f4      	ldrb	r4, [r6, #3]
   148b6:	2f04      	cmp	r7, #4
   148b8:	d031      	beq.n	1491e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x9c>
   148ba:	6c68      	ldr	r0, [r5, #68]	; 0x44
   148bc:	f7fd fdd7 	bl	1246e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   148c0:	4420      	add	r0, r4
   148c2:	fa1f f880 	uxth.w	r8, r0
   148c6:	f7f9 ff71 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   148ca:	b9a0      	cbnz	r0, 148f6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
   148cc:	78f0      	ldrb	r0, [r6, #3]
   148ce:	f04f 0912 	mov.w	r9, #18
   148d2:	b118      	cbz	r0, 148dc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5a>
   148d4:	4628      	mov	r0, r5
   148d6:	f7fe ff65 	bl	137a4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
   148da:	b140      	cbz	r0, 148ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x6c>
   148dc:	4628      	mov	r0, r5
   148de:	f7fe fe97 	bl	13610 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   148e2:	4540      	cmp	r0, r8
   148e4:	d207      	bcs.n	148f6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
   148e6:	4628      	mov	r0, r5
   148e8:	f7fe ff84 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   148ec:	b108      	cbz	r0, 148f2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   148ee:	4648      	mov	r0, r9
   148f0:	e7de      	b.n	148b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   148f2:	2007      	movs	r0, #7
   148f4:	e7dc      	b.n	148b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   148f6:	f7f9 ff59 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   148fa:	4602      	mov	r2, r0
   148fc:	4641      	mov	r1, r8
   148fe:	4628      	mov	r0, r5
   14900:	f000 fa79 	bl	14df6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc4>
   14904:	2800      	cmp	r0, #0
   14906:	d1d3      	bne.n	148b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   14908:	2f03      	cmp	r7, #3
   1490a:	d000      	beq.n	1490e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
   1490c:	b1c4      	cbz	r4, 14940 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1490e:	4628      	mov	r0, r5
   14910:	f7fe ff70 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   14914:	7871      	ldrb	r1, [r6, #1]
   14916:	2903      	cmp	r1, #3
   14918:	d00d      	beq.n	14936 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
   1491a:	b988      	cbnz	r0, 14940 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1491c:	e001      	b.n	14922 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xa0>
   1491e:	b97c      	cbnz	r4, 14940 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   14920:	e7f5      	b.n	1490e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
   14922:	2904      	cmp	r1, #4
   14924:	d107      	bne.n	14936 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
   14926:	4628      	mov	r0, r5
   14928:	f7ff f9c8 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1492c:	b140      	cbz	r0, 14940 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1492e:	6c68      	ldr	r0, [r5, #68]	; 0x44
   14930:	f7fd fd6b 	bl	1240a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   14934:	b120      	cbz	r0, 14940 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   14936:	2f01      	cmp	r7, #1
   14938:	d004      	beq.n	14944 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
   1493a:	2f03      	cmp	r7, #3
   1493c:	d002      	beq.n	14944 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
   1493e:	e00e      	b.n	1495e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xdc>
   14940:	2012      	movs	r0, #18
   14942:	e7b5      	b.n	148b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   14944:	4628      	mov	r0, r5
   14946:	f7fe ff55 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1494a:	b108      	cbz	r0, 14950 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1494c:	2200      	movs	r2, #0
   1494e:	e002      	b.n	14956 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
   14950:	2f01      	cmp	r7, #1
   14952:	d014      	beq.n	1497e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xfc>
   14954:	2201      	movs	r2, #1
   14956:	4668      	mov	r0, sp
   14958:	6c69      	ldr	r1, [r5, #68]	; 0x44
   1495a:	f7fd fceb 	bl	12334 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1495e:	2f04      	cmp	r7, #4
   14960:	d018      	beq.n	14994 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x112>
   14962:	6872      	ldr	r2, [r6, #4]
   14964:	4623      	mov	r3, r4
   14966:	2101      	movs	r1, #1
   14968:	6c68      	ldr	r0, [r5, #68]	; 0x44
   1496a:	f7fd fd1b 	bl	123a4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1496e:	2800      	cmp	r0, #0
   14970:	d0bf      	beq.n	148f2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   14972:	7870      	ldrb	r0, [r6, #1]
   14974:	2802      	cmp	r0, #2
   14976:	d004      	beq.n	14982 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
   14978:	2803      	cmp	r0, #3
   1497a:	d002      	beq.n	14982 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
   1497c:	e00d      	b.n	1499a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
   1497e:	2202      	movs	r2, #2
   14980:	e7e9      	b.n	14956 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
   14982:	6c68      	ldr	r0, [r5, #68]	; 0x44
   14984:	f7fd fd73 	bl	1246e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   14988:	4602      	mov	r2, r0
   1498a:	2101      	movs	r1, #1
   1498c:	6c68      	ldr	r0, [r5, #68]	; 0x44
   1498e:	f7fd fd4a 	bl	12426 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   14992:	e002      	b.n	1499a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
   14994:	4628      	mov	r0, r5
   14996:	f7fe fe52 	bl	1363e <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>
   1499a:	2000      	movs	r0, #0
   1499c:	e788      	b.n	148b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>

0001499e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1499e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   149a2:	4606      	mov	r6, r0
   149a4:	7845      	ldrb	r5, [r0, #1]
   149a6:	78c7      	ldrb	r7, [r0, #3]
   149a8:	7800      	ldrb	r0, [r0, #0]
   149aa:	2102      	movs	r1, #2
   149ac:	f7fd fbee 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   149b0:	0004      	movs	r4, r0
   149b2:	d007      	beq.n	149c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   149b4:	f7f9 fefa 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   149b8:	b140      	cbz	r0, 149cc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
   149ba:	4620      	mov	r0, r4
   149bc:	f7fe ff1e 	bl	137fc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   149c0:	b118      	cbz	r0, 149ca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
   149c2:	e003      	b.n	149cc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
   149c4:	2042      	movs	r0, #66	; 0x42
   149c6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   149ca:	2700      	movs	r7, #0
   149cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   149ce:	f7fd fd52 	bl	12476 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   149d2:	4438      	add	r0, r7
   149d4:	fa1f f880 	uxth.w	r8, r0
   149d8:	f7f9 fee8 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   149dc:	b928      	cbnz	r0, 149ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
   149de:	78f0      	ldrb	r0, [r6, #3]
   149e0:	b118      	cbz	r0, 149ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
   149e2:	4620      	mov	r0, r4
   149e4:	f7fe ff0a 	bl	137fc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   149e8:	b198      	cbz	r0, 14a12 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   149ea:	f7f9 fedf 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   149ee:	4602      	mov	r2, r0
   149f0:	4641      	mov	r1, r8
   149f2:	4620      	mov	r0, r4
   149f4:	f000 f9ff 	bl	14df6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc4>
   149f8:	2800      	cmp	r0, #0
   149fa:	d1e4      	bne.n	149c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   149fc:	2d04      	cmp	r5, #4
   149fe:	d008      	beq.n	14a12 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   14a00:	2d03      	cmp	r5, #3
   14a02:	d00a      	beq.n	14a1a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x7c>
   14a04:	b12f      	cbz	r7, 14a12 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   14a06:	4620      	mov	r0, r4
   14a08:	f7ff f958 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   14a0c:	b118      	cbz	r0, 14a16 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x78>
   14a0e:	200c      	movs	r0, #12
   14a10:	e7d9      	b.n	149c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   14a12:	2012      	movs	r0, #18
   14a14:	e7d7      	b.n	149c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   14a16:	2d01      	cmp	r5, #1
   14a18:	d10c      	bne.n	14a34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   14a1a:	4620      	mov	r0, r4
   14a1c:	f7fe feea 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   14a20:	b108      	cbz	r0, 14a26 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x88>
   14a22:	2204      	movs	r2, #4
   14a24:	e002      	b.n	14a2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   14a26:	2d01      	cmp	r5, #1
   14a28:	d010      	beq.n	14a4c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xae>
   14a2a:	2205      	movs	r2, #5
   14a2c:	4668      	mov	r0, sp
   14a2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   14a30:	f7fd fc80 	bl	12334 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   14a34:	6872      	ldr	r2, [r6, #4]
   14a36:	463b      	mov	r3, r7
   14a38:	2100      	movs	r1, #0
   14a3a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   14a3c:	f7fd fcb2 	bl	123a4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   14a40:	b130      	cbz	r0, 14a50 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb2>
   14a42:	2d02      	cmp	r5, #2
   14a44:	d006      	beq.n	14a54 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
   14a46:	2d03      	cmp	r5, #3
   14a48:	d004      	beq.n	14a54 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
   14a4a:	e008      	b.n	14a5e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xc0>
   14a4c:	2206      	movs	r2, #6
   14a4e:	e7ed      	b.n	14a2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   14a50:	2007      	movs	r0, #7
   14a52:	e7b8      	b.n	149c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   14a54:	4642      	mov	r2, r8
   14a56:	2100      	movs	r1, #0
   14a58:	6c60      	ldr	r0, [r4, #68]	; 0x44
   14a5a:	f7fd fce4 	bl	12426 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   14a5e:	2000      	movs	r0, #0
   14a60:	e7b1      	b.n	149c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>

00014a62 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   14a62:	b510      	push	{r4, lr}
   14a64:	4604      	mov	r4, r0
   14a66:	8880      	ldrh	r0, [r0, #4]
   14a68:	b128      	cbz	r0, 14a76 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   14a6a:	2801      	cmp	r0, #1
   14a6c:	d003      	beq.n	14a76 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   14a6e:	2802      	cmp	r0, #2
   14a70:	d001      	beq.n	14a76 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   14a72:	2012      	movs	r0, #18
   14a74:	bd10      	pop	{r4, pc}
   14a76:	78e0      	ldrb	r0, [r4, #3]
   14a78:	f000 fa81 	bl	14f7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24c>
   14a7c:	b148      	cbz	r0, 14a92 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   14a7e:	78a0      	ldrb	r0, [r4, #2]
   14a80:	f000 fa7d 	bl	14f7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24c>
   14a84:	b128      	cbz	r0, 14a92 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   14a86:	4620      	mov	r0, r4
   14a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14a8c:	2101      	movs	r1, #1
   14a8e:	f000 b897 	b.w	14bc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   14a92:	2011      	movs	r0, #17
   14a94:	bd10      	pop	{r4, pc}

00014a96 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   14a96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   14a98:	460c      	mov	r4, r1
   14a9a:	4605      	mov	r5, r0
   14a9c:	8800      	ldrh	r0, [r0, #0]
   14a9e:	4669      	mov	r1, sp
   14aa0:	f7fd fde6 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   14aa4:	2800      	cmp	r0, #0
   14aa6:	d106      	bne.n	14ab6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   14aa8:	9801      	ldr	r0, [sp, #4]
   14aaa:	8829      	ldrh	r1, [r5, #0]
   14aac:	8021      	strh	r1, [r4, #0]
   14aae:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
   14ab2:	8060      	strh	r0, [r4, #2]
   14ab4:	2000      	movs	r0, #0
   14ab6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00014ab8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   14ab8:	b510      	push	{r4, lr}
   14aba:	4604      	mov	r4, r0
   14abc:	4601      	mov	r1, r0
   14abe:	2000      	movs	r0, #0
   14ac0:	f7f0 fd6e 	bl	55a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   14ac4:	b910      	cbnz	r0, 14acc <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   14ac6:	2000      	movs	r0, #0
   14ac8:	6020      	str	r0, [r4, #0]
   14aca:	80a0      	strh	r0, [r4, #4]
   14acc:	2000      	movs	r0, #0
   14ace:	bd10      	pop	{r4, pc}

00014ad0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   14ad0:	b50e      	push	{r1, r2, r3, lr}
   14ad2:	8800      	ldrh	r0, [r0, #0]
   14ad4:	4669      	mov	r1, sp
   14ad6:	f7fd fdcb 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   14ada:	b998      	cbnz	r0, 14b04 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   14adc:	f89d 0000 	ldrb.w	r0, [sp]
   14ae0:	2800      	cmp	r0, #0
   14ae2:	9801      	ldr	r0, [sp, #4]
   14ae4:	d00b      	beq.n	14afe <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   14ae6:	f000 fadf 	bl	150a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x376>
   14aea:	b158      	cbz	r0, 14b04 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   14aec:	9801      	ldr	r0, [sp, #4]
   14aee:	4601      	mov	r1, r0
   14af0:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
   14af4:	3090      	adds	r0, #144	; 0x90
   14af6:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
   14afa:	b97a      	cbnz	r2, 14b1c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x4c>
   14afc:	e004      	b.n	14b08 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x38>
   14afe:	f000 fabd 	bl	1507c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x34a>
   14b02:	e7f2      	b.n	14aea <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x1a>
   14b04:	2002      	movs	r0, #2
   14b06:	bd0e      	pop	{r1, r2, r3, pc}
   14b08:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   14b0c:	f88d 2008 	strb.w	r2, [sp, #8]
   14b10:	9a02      	ldr	r2, [sp, #8]
   14b12:	9202      	str	r2, [sp, #8]
   14b14:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14b18:	2201      	movs	r2, #1
   14b1a:	b10b      	cbz	r3, 14b20 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x50>
   14b1c:	203a      	movs	r0, #58	; 0x3a
   14b1e:	bd0e      	pop	{r1, r2, r3, pc}
   14b20:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
   14b24:	079b      	lsls	r3, r3, #30
   14b26:	d008      	beq.n	14b3a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x6a>
   14b28:	2201      	movs	r2, #1
   14b2a:	3054      	adds	r0, #84	; 0x54
   14b2c:	9901      	ldr	r1, [sp, #4]
   14b2e:	f7f2 fbcb 	bl	72c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   14b32:	f7f2 ff01 	bl	7938 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   14b36:	2000      	movs	r0, #0
   14b38:	bd0e      	pop	{r1, r2, r3, pc}
   14b3a:	700a      	strb	r2, [r1, #0]
   14b3c:	4668      	mov	r0, sp
   14b3e:	f7fe faee 	bl	1311e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   14b42:	e7f8      	b.n	14b36 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x66>

00014b44 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   14b44:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   14b46:	460c      	mov	r4, r1
   14b48:	4605      	mov	r5, r0
   14b4a:	8800      	ldrh	r0, [r0, #0]
   14b4c:	4669      	mov	r1, sp
   14b4e:	f7fd fd8f 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   14b52:	b108      	cbz	r0, 14b58 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   14b54:	2002      	movs	r0, #2
   14b56:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   14b58:	78a8      	ldrb	r0, [r5, #2]
   14b5a:	b130      	cbz	r0, 14b6a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   14b5c:	f000 fa8b 	bl	15076 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   14b60:	70a0      	strb	r0, [r4, #2]
   14b62:	8828      	ldrh	r0, [r5, #0]
   14b64:	8020      	strh	r0, [r4, #0]
   14b66:	2000      	movs	r0, #0
   14b68:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   14b6a:	9801      	ldr	r0, [sp, #4]
   14b6c:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
   14b70:	e7f6      	b.n	14b60 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00014b72 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   14b72:	b510      	push	{r4, lr}
   14b74:	f7f9 fe26 	bl	e7c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   14b78:	2000      	movs	r0, #0
   14b7a:	bd10      	pop	{r4, pc}

00014b7c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   14b7c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   14b80:	4604      	mov	r4, r0
   14b82:	8840      	ldrh	r0, [r0, #2]
   14b84:	460d      	mov	r5, r1
   14b86:	b1b8      	cbz	r0, 14bb8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   14b88:	8820      	ldrh	r0, [r4, #0]
   14b8a:	4669      	mov	r1, sp
   14b8c:	f7fd fd70 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   14b90:	2800      	cmp	r0, #0
   14b92:	d10f      	bne.n	14bb4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   14b94:	8820      	ldrh	r0, [r4, #0]
   14b96:	8028      	strh	r0, [r5, #0]
   14b98:	9e01      	ldr	r6, [sp, #4]
   14b9a:	f106 0514 	add.w	r5, r6, #20
   14b9e:	3690      	adds	r6, #144	; 0x90
   14ba0:	682f      	ldr	r7, [r5, #0]
   14ba2:	8862      	ldrh	r2, [r4, #2]
   14ba4:	4639      	mov	r1, r7
   14ba6:	4630      	mov	r0, r6
   14ba8:	f7fd ff8a 	bl	12ac0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   14bac:	6828      	ldr	r0, [r5, #0]
   14bae:	42b8      	cmp	r0, r7
   14bb0:	d1f6      	bne.n	14ba0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   14bb2:	2000      	movs	r0, #0
   14bb4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   14bb8:	2012      	movs	r0, #18
   14bba:	e7fb      	b.n	14bb4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00014bbc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   14bbc:	f000 b8a9 	b.w	14d12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00014bc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   14bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14bc4:	b08a      	sub	sp, #40	; 0x28
   14bc6:	4689      	mov	r9, r1
   14bc8:	4605      	mov	r5, r0
   14bca:	8800      	ldrh	r0, [r0, #0]
   14bcc:	a904      	add	r1, sp, #16
   14bce:	f7fd fd4f 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   14bd2:	2800      	cmp	r0, #0
   14bd4:	d147      	bne.n	14c66 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   14bd6:	9805      	ldr	r0, [sp, #20]
   14bd8:	4601      	mov	r1, r0
   14bda:	4688      	mov	r8, r1
   14bdc:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
   14be0:	f500 749c 	add.w	r4, r0, #312	; 0x138
   14be4:	f88d 1018 	strb.w	r1, [sp, #24]
   14be8:	9906      	ldr	r1, [sp, #24]
   14bea:	9106      	str	r1, [sp, #24]
   14bec:	f89d 1018 	ldrb.w	r1, [sp, #24]
   14bf0:	3090      	adds	r0, #144	; 0x90
   14bf2:	b109      	cbz	r1, 14bf8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   14bf4:	2701      	movs	r7, #1
   14bf6:	e000      	b.n	14bfa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   14bf8:	2700      	movs	r7, #0
   14bfa:	7b81      	ldrb	r1, [r0, #14]
   14bfc:	2922      	cmp	r1, #34	; 0x22
   14bfe:	d100      	bne.n	14c02 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   14c00:	b13f      	cbz	r7, 14c12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   14c02:	2600      	movs	r6, #0
   14c04:	3062      	adds	r0, #98	; 0x62
   14c06:	2108      	movs	r1, #8
   14c08:	4682      	mov	sl, r0
   14c0a:	f7ff fa4e 	bl	140aa <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   14c0e:	b110      	cbz	r0, 14c16 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   14c10:	e007      	b.n	14c22 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   14c12:	2601      	movs	r6, #1
   14c14:	e7f6      	b.n	14c04 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   14c16:	210b      	movs	r1, #11
   14c18:	4650      	mov	r0, sl
   14c1a:	f7ff fa46 	bl	140aa <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   14c1e:	b900      	cbnz	r0, 14c22 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   14c20:	b306      	cbz	r6, 14c64 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa4>
   14c22:	a802      	add	r0, sp, #8
   14c24:	9000      	str	r0, [sp, #0]
   14c26:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14c2a:	ab01      	add	r3, sp, #4
   14c2c:	462a      	mov	r2, r5
   14c2e:	4641      	mov	r1, r8
   14c30:	f000 fa01 	bl	15036 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x304>
   14c34:	0006      	movs	r6, r0
   14c36:	d116      	bne.n	14c66 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   14c38:	f898 0077 	ldrb.w	r0, [r8, #119]	; 0x77
   14c3c:	340c      	adds	r4, #12
   14c3e:	b168      	cbz	r0, 14c5c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   14c40:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14c44:	f010 0102 	ands.w	r1, r0, #2
   14c48:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14c4c:	f88d 1004 	strb.w	r1, [sp, #4]
   14c50:	f000 0002 	and.w	r0, r0, #2
   14c54:	f88d 0008 	strb.w	r0, [sp, #8]
   14c58:	d008      	beq.n	14c6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   14c5a:	b138      	cbz	r0, 14c6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   14c5c:	20ff      	movs	r0, #255	; 0xff
   14c5e:	7060      	strb	r0, [r4, #1]
   14c60:	b947      	cbnz	r7, 14c74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb4>
   14c62:	e005      	b.n	14c70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb0>
   14c64:	201a      	movs	r0, #26
   14c66:	b00a      	add	sp, #40	; 0x28
   14c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c6c:	2009      	movs	r0, #9
   14c6e:	e7fa      	b.n	14c66 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   14c70:	7820      	ldrb	r0, [r4, #0]
   14c72:	b108      	cbz	r0, 14c78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   14c74:	263a      	movs	r6, #58	; 0x3a
   14c76:	e014      	b.n	14ca2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe2>
   14c78:	f884 9000 	strb.w	r9, [r4]
   14c7c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   14c80:	70a1      	strb	r1, [r4, #2]
   14c82:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14c86:	70e0      	strb	r0, [r4, #3]
   14c88:	88aa      	ldrh	r2, [r5, #4]
   14c8a:	80a2      	strh	r2, [r4, #4]
   14c8c:	f88d 1018 	strb.w	r1, [sp, #24]
   14c90:	f88d 0019 	strb.w	r0, [sp, #25]
   14c94:	88a8      	ldrh	r0, [r5, #4]
   14c96:	f8ad 001a 	strh.w	r0, [sp, #26]
   14c9a:	a906      	add	r1, sp, #24
   14c9c:	4640      	mov	r0, r8
   14c9e:	f7fd fde2 	bl	12866 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   14ca2:	2000      	movs	r0, #0
   14ca4:	7060      	strb	r0, [r4, #1]
   14ca6:	4630      	mov	r0, r6
   14ca8:	e7dd      	b.n	14c66 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>

00014caa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   14caa:	2008      	movs	r0, #8
   14cac:	f7f9 bdf2 	b.w	e894 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00014cb0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   14cb0:	b510      	push	{r4, lr}
   14cb2:	4604      	mov	r4, r0
   14cb4:	2000      	movs	r0, #0
   14cb6:	8822      	ldrh	r2, [r4, #0]
   14cb8:	b086      	sub	sp, #24
   14cba:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   14cbe:	39ff      	subs	r1, #255	; 0xff
   14cc0:	d008      	beq.n	14cd4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   14cc2:	a903      	add	r1, sp, #12
   14cc4:	4610      	mov	r0, r2
   14cc6:	f7fd fcd3 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   14cca:	b110      	cbz	r0, 14cd2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   14ccc:	2002      	movs	r0, #2
   14cce:	b006      	add	sp, #24
   14cd0:	bd10      	pop	{r4, pc}
   14cd2:	9804      	ldr	r0, [sp, #16]
   14cd4:	8921      	ldrh	r1, [r4, #8]
   14cd6:	89a3      	ldrh	r3, [r4, #12]
   14cd8:	8962      	ldrh	r2, [r4, #10]
   14cda:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   14cde:	88e3      	ldrh	r3, [r4, #6]
   14ce0:	88a2      	ldrh	r2, [r4, #4]
   14ce2:	8861      	ldrh	r1, [r4, #2]
   14ce4:	f7f9 fb94 	bl	e410 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf8>
   14ce8:	b108      	cbz	r0, 14cee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   14cea:	2000      	movs	r0, #0
   14cec:	e7ef      	b.n	14cce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   14cee:	2030      	movs	r0, #48	; 0x30
   14cf0:	e7ed      	b.n	14cce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

00014cf2 <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA>:
   14cf2:	b510      	push	{r4, lr}
   14cf4:	4604      	mov	r4, r0
   14cf6:	7800      	ldrb	r0, [r0, #0]
   14cf8:	2102      	movs	r1, #2
   14cfa:	f7fd fa47 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   14cfe:	b120      	cbz	r0, 14d0a <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA+0x18>
   14d00:	7821      	ldrb	r1, [r4, #0]
   14d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14d06:	f000 b9e5 	b.w	150d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a2>
   14d0a:	2042      	movs	r0, #66	; 0x42
   14d0c:	bd10      	pop	{r4, pc}

00014d0e <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
   14d0e:	f7f8 bf9b 	b.w	dc48 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

00014d12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   14d12:	b510      	push	{r4, lr}
   14d14:	f7fd fc43 	bl	1259e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   14d18:	f7f1 fc8c 	bl	6634 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   14d1c:	f7f9 fde2 	bl	e8e4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   14d20:	f7f2 fdf4 	bl	790c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   14d24:	2001      	movs	r0, #1
   14d26:	f7f9 fd47 	bl	e7b8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   14d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14d2e:	f7f9 bbb5 	b.w	e49c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>

00014d32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   14d32:	f7f6 bd1d 	b.w	b770 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   14d36:	f44f 71a4 	mov.w	r1, #328	; 0x148
   14d3a:	4288      	cmp	r0, r1
   14d3c:	d303      	bcc.n	14d46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   14d3e:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   14d42:	4288      	cmp	r0, r1
   14d44:	d300      	bcc.n	14d48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   14d46:	4608      	mov	r0, r1
   14d48:	b280      	uxth	r0, r0
   14d4a:	4770      	bx	lr
   14d4c:	0741      	lsls	r1, r0, #29
   14d4e:	d501      	bpl.n	14d54 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   14d50:	2008      	movs	r0, #8
   14d52:	4770      	bx	lr
   14d54:	07c1      	lsls	r1, r0, #31
   14d56:	d001      	beq.n	14d5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   14d58:	2001      	movs	r0, #1
   14d5a:	4770      	bx	lr
   14d5c:	0780      	lsls	r0, r0, #30
   14d5e:	d501      	bpl.n	14d64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32>
   14d60:	2002      	movs	r0, #2
   14d62:	4770      	bx	lr
   14d64:	2000      	movs	r0, #0
   14d66:	4770      	bx	lr
   14d68:	b510      	push	{r4, lr}
   14d6a:	2801      	cmp	r0, #1
   14d6c:	d00b      	beq.n	14d86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54>
   14d6e:	2802      	cmp	r0, #2
   14d70:	d009      	beq.n	14d86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54>
   14d72:	2804      	cmp	r0, #4
   14d74:	d006      	beq.n	14d84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x52>
   14d76:	2808      	cmp	r0, #8
   14d78:	d004      	beq.n	14d84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x52>
   14d7a:	f240 21a9 	movw	r1, #681	; 0x2a9
   14d7e:	2006      	movs	r0, #6
   14d80:	f7ef fc9c 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14d84:	2003      	movs	r0, #3
   14d86:	bd10      	pop	{r4, pc}
   14d88:	b50e      	push	{r1, r2, r3, lr}
   14d8a:	4669      	mov	r1, sp
   14d8c:	2002      	movs	r0, #2
   14d8e:	f7fd fa07 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   14d92:	b150      	cbz	r0, 14daa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x78>
   14d94:	f44f 71a3 	mov.w	r1, #326	; 0x146
   14d98:	2039      	movs	r0, #57	; 0x39
   14d9a:	f7ef fc8f 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14d9e:	9802      	ldr	r0, [sp, #8]
   14da0:	f7fe ff8c 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   14da4:	b108      	cbz	r0, 14daa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x78>
   14da6:	2001      	movs	r0, #1
   14da8:	bd0e      	pop	{r1, r2, r3, pc}
   14daa:	4668      	mov	r0, sp
   14dac:	f7ef fef0 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   14db0:	2800      	cmp	r0, #0
   14db2:	d0f4      	beq.n	14d9e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6c>
   14db4:	2000      	movs	r0, #0
   14db6:	bd0e      	pop	{r1, r2, r3, pc}
   14db8:	b510      	push	{r4, lr}
   14dba:	4604      	mov	r4, r0
   14dbc:	f7ff ffe4 	bl	14d88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x56>
   14dc0:	b170      	cbz	r0, 14de0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xae>
   14dc2:	f7f9 fcf3 	bl	e7ac <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   14dc6:	b150      	cbz	r0, 14dde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   14dc8:	f7f9 fbc4 	bl	e554 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x23c>
   14dcc:	4604      	mov	r4, r0
   14dce:	f7fe fd15 	bl	137fc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   14dd2:	b960      	cbnz	r0, 14dee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbc>
   14dd4:	4620      	mov	r0, r4
   14dd6:	f7fe fcff 	bl	137d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   14dda:	b108      	cbz	r0, 14de0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xae>
   14ddc:	e007      	b.n	14dee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbc>
   14dde:	b134      	cbz	r4, 14dee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbc>
   14de0:	f000 f9a4 	bl	1512c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3fa>
   14de4:	b128      	cbz	r0, 14df2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc0>
   14de6:	f7f8 fee5 	bl	dbb4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   14dea:	2801      	cmp	r0, #1
   14dec:	d001      	beq.n	14df2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc0>
   14dee:	2000      	movs	r0, #0
   14df0:	bd10      	pop	{r4, pc}
   14df2:	2001      	movs	r0, #1
   14df4:	bd10      	pop	{r4, pc}
   14df6:	b570      	push	{r4, r5, r6, lr}
   14df8:	460c      	mov	r4, r1
   14dfa:	4605      	mov	r5, r0
   14dfc:	b112      	cbz	r2, 14e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd2>
   14dfe:	291f      	cmp	r1, #31
   14e00:	d80c      	bhi.n	14e1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xea>
   14e02:	e016      	b.n	14e32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x100>
   14e04:	f7f0 f9ce 	bl	51a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   14e08:	42a0      	cmp	r0, r4
   14e0a:	d201      	bcs.n	14e10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xde>
   14e0c:	2007      	movs	r0, #7
   14e0e:	bd70      	pop	{r4, r5, r6, pc}
   14e10:	4628      	mov	r0, r5
   14e12:	f7fe fcef 	bl	137f4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   14e16:	b118      	cbz	r0, 14e20 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xee>
   14e18:	2c1f      	cmp	r4, #31
   14e1a:	d901      	bls.n	14e20 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xee>
   14e1c:	2012      	movs	r0, #18
   14e1e:	bd70      	pop	{r4, r5, r6, pc}
   14e20:	4628      	mov	r0, r5
   14e22:	f7fe fcf2 	bl	1380a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   14e26:	b130      	cbz	r0, 14e36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x104>
   14e28:	4621      	mov	r1, r4
   14e2a:	4628      	mov	r0, r5
   14e2c:	f7fe fc77 	bl	1371e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   14e30:	b118      	cbz	r0, 14e3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x108>
   14e32:	2000      	movs	r0, #0
   14e34:	bd70      	pop	{r4, r5, r6, pc}
   14e36:	2042      	movs	r0, #66	; 0x42
   14e38:	bd70      	pop	{r4, r5, r6, pc}
   14e3a:	2045      	movs	r0, #69	; 0x45
   14e3c:	bd70      	pop	{r4, r5, r6, pc}
   14e3e:	b510      	push	{r4, lr}
   14e40:	4604      	mov	r4, r0
   14e42:	7840      	ldrb	r0, [r0, #1]
   14e44:	06c0      	lsls	r0, r0, #27
   14e46:	d413      	bmi.n	14e70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x13e>
   14e48:	f7f9 fd36 	bl	e8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   14e4c:	0780      	lsls	r0, r0, #30
   14e4e:	d405      	bmi.n	14e5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12a>
   14e50:	7d20      	ldrb	r0, [r4, #20]
   14e52:	2802      	cmp	r0, #2
   14e54:	d029      	beq.n	14eaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x178>
   14e56:	7da0      	ldrb	r0, [r4, #22]
   14e58:	2802      	cmp	r0, #2
   14e5a:	d026      	beq.n	14eaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x178>
   14e5c:	f7f9 fd2c 	bl	e8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   14e60:	0740      	lsls	r0, r0, #29
   14e62:	d405      	bmi.n	14e70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x13e>
   14e64:	7d20      	ldrb	r0, [r4, #20]
   14e66:	2803      	cmp	r0, #3
   14e68:	d01f      	beq.n	14eaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x178>
   14e6a:	7da0      	ldrb	r0, [r4, #22]
   14e6c:	2803      	cmp	r0, #3
   14e6e:	d01c      	beq.n	14eaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x178>
   14e70:	7860      	ldrb	r0, [r4, #1]
   14e72:	07c0      	lsls	r0, r0, #31
   14e74:	d002      	beq.n	14e7c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14a>
   14e76:	f7f9 fcdf 	bl	e838 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   14e7a:	b1b0      	cbz	r0, 14eaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x178>
   14e7c:	7860      	ldrb	r0, [r4, #1]
   14e7e:	06c1      	lsls	r1, r0, #27
   14e80:	d405      	bmi.n	14e8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x15c>
   14e82:	0701      	lsls	r1, r0, #28
   14e84:	d503      	bpl.n	14e8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x15c>
   14e86:	7d20      	ldrb	r0, [r4, #20]
   14e88:	2802      	cmp	r0, #2
   14e8a:	d10e      	bne.n	14eaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x178>
   14e8c:	e00f      	b.n	14eae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   14e8e:	7d21      	ldrb	r1, [r4, #20]
   14e90:	2902      	cmp	r1, #2
   14e92:	d001      	beq.n	14e98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x166>
   14e94:	7ea1      	ldrb	r1, [r4, #26]
   14e96:	b941      	cbnz	r1, 14eaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x178>
   14e98:	0700      	lsls	r0, r0, #28
   14e9a:	d408      	bmi.n	14eae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   14e9c:	f8d4 0005 	ldr.w	r0, [r4, #5]
   14ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14ea4:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   14ea8:	d201      	bcs.n	14eae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   14eaa:	2011      	movs	r0, #17
   14eac:	bd10      	pop	{r4, pc}
   14eae:	2000      	movs	r0, #0
   14eb0:	bd10      	pop	{r4, pc}
   14eb2:	b538      	push	{r3, r4, r5, lr}
   14eb4:	4604      	mov	r4, r0
   14eb6:	7800      	ldrb	r0, [r0, #0]
   14eb8:	28ef      	cmp	r0, #239	; 0xef
   14eba:	d85c      	bhi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14ebc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   14ec0:	f8ad 0000 	strh.w	r0, [sp]
   14ec4:	9800      	ldr	r0, [sp, #0]
   14ec6:	f000 fa0e 	bl	152e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5b4>
   14eca:	b3a0      	cbz	r0, 14f36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   14ecc:	7860      	ldrb	r0, [r4, #1]
   14ece:	0701      	lsls	r1, r0, #28
   14ed0:	d40b      	bmi.n	14eea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   14ed2:	f8d4 1002 	ldr.w	r1, [r4, #2]
   14ed6:	f8d4 3005 	ldr.w	r3, [r4, #5]
   14eda:	0a0a      	lsrs	r2, r1, #8
   14edc:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   14ee0:	d849      	bhi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14ee2:	2220      	movs	r2, #32
   14ee4:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   14ee8:	d845      	bhi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14eea:	7a61      	ldrb	r1, [r4, #9]
   14eec:	b319      	cbz	r1, 14f36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   14eee:	2907      	cmp	r1, #7
   14ef0:	d841      	bhi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14ef2:	7aa1      	ldrb	r1, [r4, #10]
   14ef4:	b129      	cbz	r1, 14f02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d0>
   14ef6:	2901      	cmp	r1, #1
   14ef8:	d003      	beq.n	14f02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d0>
   14efa:	2902      	cmp	r1, #2
   14efc:	d001      	beq.n	14f02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d0>
   14efe:	2903      	cmp	r1, #3
   14f00:	d139      	bne.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f02:	0742      	lsls	r2, r0, #29
   14f04:	d403      	bmi.n	14f0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   14f06:	2902      	cmp	r1, #2
   14f08:	d001      	beq.n	14f0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   14f0a:	2903      	cmp	r1, #3
   14f0c:	d105      	bne.n	14f1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e8>
   14f0e:	7ae1      	ldrb	r1, [r4, #11]
   14f10:	b109      	cbz	r1, 14f16 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e4>
   14f12:	2901      	cmp	r1, #1
   14f14:	d12f      	bne.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f16:	0741      	lsls	r1, r0, #29
   14f18:	d407      	bmi.n	14f2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f8>
   14f1a:	7ca1      	ldrb	r1, [r4, #18]
   14f1c:	b129      	cbz	r1, 14f2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f8>
   14f1e:	2901      	cmp	r1, #1
   14f20:	d003      	beq.n	14f2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f8>
   14f22:	2902      	cmp	r1, #2
   14f24:	d001      	beq.n	14f2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f8>
   14f26:	2903      	cmp	r1, #3
   14f28:	d125      	bne.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f2a:	06c1      	lsls	r1, r0, #27
   14f2c:	d504      	bpl.n	14f38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x206>
   14f2e:	7d20      	ldrb	r0, [r4, #20]
   14f30:	2801      	cmp	r0, #1
   14f32:	d120      	bne.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f34:	e01b      	b.n	14f6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x23c>
   14f36:	e01e      	b.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f38:	7d21      	ldrb	r1, [r4, #20]
   14f3a:	2902      	cmp	r1, #2
   14f3c:	d10b      	bne.n	14f56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x224>
   14f3e:	07c1      	lsls	r1, r0, #31
   14f40:	d019      	beq.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f42:	0741      	lsls	r1, r0, #29
   14f44:	d417      	bmi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f46:	0701      	lsls	r1, r0, #28
   14f48:	d515      	bpl.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f4a:	0641      	lsls	r1, r0, #25
   14f4c:	d413      	bmi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f4e:	0681      	lsls	r1, r0, #26
   14f50:	d411      	bmi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f52:	0781      	lsls	r1, r0, #30
   14f54:	d40f      	bmi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f56:	06c0      	lsls	r0, r0, #27
   14f58:	d409      	bmi.n	14f6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x23c>
   14f5a:	7da0      	ldrb	r0, [r4, #22]
   14f5c:	2801      	cmp	r0, #1
   14f5e:	d003      	beq.n	14f68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x236>
   14f60:	2802      	cmp	r0, #2
   14f62:	d001      	beq.n	14f68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x236>
   14f64:	2803      	cmp	r0, #3
   14f66:	d106      	bne.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f68:	7de0      	ldrb	r0, [r4, #23]
   14f6a:	280f      	cmp	r0, #15
   14f6c:	d803      	bhi.n	14f76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   14f6e:	7e20      	ldrb	r0, [r4, #24]
   14f70:	b118      	cbz	r0, 14f7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   14f72:	2801      	cmp	r0, #1
   14f74:	d001      	beq.n	14f7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   14f76:	2012      	movs	r0, #18
   14f78:	bd38      	pop	{r3, r4, r5, pc}
   14f7a:	2000      	movs	r0, #0
   14f7c:	bd38      	pop	{r3, r4, r5, pc}
   14f7e:	b510      	push	{r4, lr}
   14f80:	0004      	movs	r4, r0
   14f82:	d005      	beq.n	14f90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25e>
   14f84:	f7f9 fc98 	bl	e8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   14f88:	4384      	bics	r4, r0
   14f8a:	d001      	beq.n	14f90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25e>
   14f8c:	2000      	movs	r0, #0
   14f8e:	bd10      	pop	{r4, pc}
   14f90:	2001      	movs	r0, #1
   14f92:	bd10      	pop	{r4, pc}
   14f94:	28fb      	cmp	r0, #251	; 0xfb
   14f96:	d802      	bhi.n	14f9e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x26c>
   14f98:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
   14f9c:	d901      	bls.n	14fa2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x270>
   14f9e:	2011      	movs	r0, #17
   14fa0:	4770      	bx	lr
   14fa2:	2000      	movs	r0, #0
   14fa4:	4770      	bx	lr
   14fa6:	381b      	subs	r0, #27
   14fa8:	28e1      	cmp	r0, #225	; 0xe1
   14faa:	d206      	bcs.n	14fba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   14fac:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   14fb0:	d303      	bcc.n	14fba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   14fb2:	f244 2090 	movw	r0, #17040	; 0x4290
   14fb6:	4281      	cmp	r1, r0
   14fb8:	d901      	bls.n	14fbe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28c>
   14fba:	2012      	movs	r0, #18
   14fbc:	4770      	bx	lr
   14fbe:	2000      	movs	r0, #0
   14fc0:	4770      	bx	lr
   14fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fc6:	4605      	mov	r5, r0
   14fc8:	f8b0 705a 	ldrh.w	r7, [r0, #90]	; 0x5a
   14fcc:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c
   14fd0:	4616      	mov	r6, r2
   14fd2:	3034      	adds	r0, #52	; 0x34
   14fd4:	b111      	cbz	r1, 14fdc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2aa>
   14fd6:	f7f8 fe17 	bl	dc08 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   14fda:	e001      	b.n	14fe0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ae>
   14fdc:	f7f5 fc76 	bl	a8cc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   14fe0:	4680      	mov	r8, r0
   14fe2:	2102      	movs	r1, #2
   14fe4:	f7fd fc13 	bl	1280e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   14fe8:	4287      	cmp	r7, r0
   14fea:	d200      	bcs.n	14fee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2bc>
   14fec:	4638      	mov	r0, r7
   14fee:	4607      	mov	r7, r0
   14ff0:	2102      	movs	r1, #2
   14ff2:	4640      	mov	r0, r8
   14ff4:	f7fd fc0b 	bl	1280e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   14ff8:	4284      	cmp	r4, r0
   14ffa:	d200      	bcs.n	14ffe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2cc>
   14ffc:	4620      	mov	r0, r4
   14ffe:	8829      	ldrh	r1, [r5, #0]
   15000:	8031      	strh	r1, [r6, #0]
   15002:	2f1b      	cmp	r7, #27
   15004:	d913      	bls.n	1502e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2fc>
   15006:	2ffb      	cmp	r7, #251	; 0xfb
   15008:	d300      	bcc.n	1500c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2da>
   1500a:	27fb      	movs	r7, #251	; 0xfb
   1500c:	8077      	strh	r7, [r6, #2]
   1500e:	281b      	cmp	r0, #27
   15010:	d90f      	bls.n	15032 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x300>
   15012:	28fb      	cmp	r0, #251	; 0xfb
   15014:	d300      	bcc.n	15018 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   15016:	20fb      	movs	r0, #251	; 0xfb
   15018:	80f0      	strh	r0, [r6, #6]
   1501a:	4640      	mov	r0, r8
   1501c:	f7ff fe8b 	bl	14d36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   15020:	80b0      	strh	r0, [r6, #4]
   15022:	4640      	mov	r0, r8
   15024:	f7ff fe87 	bl	14d36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   15028:	8130      	strh	r0, [r6, #8]
   1502a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1502e:	271b      	movs	r7, #27
   15030:	e7ec      	b.n	1500c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2da>
   15032:	201b      	movs	r0, #27
   15034:	e7f0      	b.n	15018 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   15036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1503a:	7890      	ldrb	r0, [r2, #2]
   1503c:	9e06      	ldr	r6, [sp, #24]
   1503e:	461d      	mov	r5, r3
   15040:	4614      	mov	r4, r2
   15042:	b908      	cbnz	r0, 15048 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   15044:	f7f9 fc38 	bl	e8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   15048:	78e4      	ldrb	r4, [r4, #3]
   1504a:	4607      	mov	r7, r0
   1504c:	b914      	cbnz	r4, 15054 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x322>
   1504e:	f7f9 fc33 	bl	e8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   15052:	4604      	mov	r4, r0
   15054:	b16f      	cbz	r7, 15072 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   15056:	b164      	cbz	r4, 15072 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   15058:	4638      	mov	r0, r7
   1505a:	f7ff fe77 	bl	14d4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1505e:	4620      	mov	r0, r4
   15060:	f7ff fe74 	bl	14d4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   15064:	b12f      	cbz	r7, 15072 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   15066:	b124      	cbz	r4, 15072 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   15068:	702f      	strb	r7, [r5, #0]
   1506a:	7034      	strb	r4, [r6, #0]
   1506c:	2000      	movs	r0, #0
   1506e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15072:	2009      	movs	r0, #9
   15074:	e7fb      	b.n	1506e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   15076:	207f      	movs	r0, #127	; 0x7f
   15078:	f000 b917 	b.w	152aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x578>
   1507c:	b508      	push	{r3, lr}
   1507e:	f890 1290 	ldrb.w	r1, [r0, #656]	; 0x290
   15082:	f890 00bd 	ldrb.w	r0, [r0, #189]	; 0xbd
   15086:	f88d 0000 	strb.w	r0, [sp]
   1508a:	9800      	ldr	r0, [sp, #0]
   1508c:	9000      	str	r0, [sp, #0]
   1508e:	f89d 0000 	ldrb.w	r0, [sp]
   15092:	b100      	cbz	r0, 15096 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   15094:	2001      	movs	r0, #1
   15096:	1e40      	subs	r0, r0, #1
   15098:	4208      	tst	r0, r1
   1509a:	d003      	beq.n	150a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   1509c:	2904      	cmp	r1, #4
   1509e:	d001      	beq.n	150a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   150a0:	2001      	movs	r0, #1
   150a2:	bd08      	pop	{r3, pc}
   150a4:	2000      	movs	r0, #0
   150a6:	bd08      	pop	{r3, pc}
   150a8:	b508      	push	{r3, lr}
   150aa:	f890 12ac 	ldrb.w	r1, [r0, #684]	; 0x2ac
   150ae:	f890 00bd 	ldrb.w	r0, [r0, #189]	; 0xbd
   150b2:	f88d 0000 	strb.w	r0, [sp]
   150b6:	9800      	ldr	r0, [sp, #0]
   150b8:	9000      	str	r0, [sp, #0]
   150ba:	f89d 0000 	ldrb.w	r0, [sp]
   150be:	b100      	cbz	r0, 150c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x390>
   150c0:	2001      	movs	r0, #1
   150c2:	1e40      	subs	r0, r0, #1
   150c4:	4208      	tst	r0, r1
   150c6:	d003      	beq.n	150d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39e>
   150c8:	2904      	cmp	r1, #4
   150ca:	d001      	beq.n	150d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39e>
   150cc:	2001      	movs	r0, #1
   150ce:	bd08      	pop	{r3, pc}
   150d0:	2000      	movs	r0, #0
   150d2:	bd08      	pop	{r3, pc}
   150d4:	b570      	push	{r4, r5, r6, lr}
   150d6:	460d      	mov	r5, r1
   150d8:	4604      	mov	r4, r0
   150da:	f7fe fdef 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   150de:	b970      	cbnz	r0, 150fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
   150e0:	4620      	mov	r0, r4
   150e2:	f7fe fa3e 	bl	13562 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
   150e6:	b950      	cbnz	r0, 150fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
   150e8:	2103      	movs	r1, #3
   150ea:	4628      	mov	r0, r5
   150ec:	f7fd f84e 	bl	1218c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   150f0:	0004      	movs	r4, r0
   150f2:	d006      	beq.n	15102 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
   150f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   150f8:	f000 f9bb 	bl	15472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   150fc:	b108      	cbz	r0, 15102 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
   150fe:	200c      	movs	r0, #12
   15100:	bd70      	pop	{r4, r5, r6, pc}
   15102:	2102      	movs	r1, #2
   15104:	4628      	mov	r0, r5
   15106:	f7ef fdb5 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1510a:	b110      	cbz	r0, 15112 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e0>
   1510c:	f241 219d 	movw	r1, #4765	; 0x129d
   15110:	e007      	b.n	15122 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f0>
   15112:	b14c      	cbz	r4, 15128 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   15114:	2103      	movs	r1, #3
   15116:	4628      	mov	r0, r5
   15118:	f7ef fdac 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1511c:	b120      	cbz	r0, 15128 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   1511e:	f241 21a4 	movw	r1, #4772	; 0x12a4
   15122:	2039      	movs	r0, #57	; 0x39
   15124:	f7ef faca 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15128:	2000      	movs	r0, #0
   1512a:	bd70      	pop	{r4, r5, r6, pc}
   1512c:	b510      	push	{r4, lr}
   1512e:	f7f8 fd85 	bl	dc3c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   15132:	2804      	cmp	r0, #4
   15134:	d003      	beq.n	1513e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x40c>
   15136:	2805      	cmp	r0, #5
   15138:	d001      	beq.n	1513e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x40c>
   1513a:	2000      	movs	r0, #0
   1513c:	bd10      	pop	{r4, pc}
   1513e:	2001      	movs	r0, #1
   15140:	bd10      	pop	{r4, pc}
   15142:	b570      	push	{r4, r5, r6, lr}
   15144:	4605      	mov	r5, r0
   15146:	f7fe fb60 	bl	1380a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1514a:	b170      	cbz	r0, 1516a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x438>
   1514c:	4628      	mov	r0, r5
   1514e:	f7fe fdb5 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   15152:	2800      	cmp	r0, #0
   15154:	d008      	beq.n	15168 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x436>
   15156:	4628      	mov	r0, r5
   15158:	f7fe fdad 	bl	13cb6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   1515c:	4604      	mov	r4, r0
   1515e:	4628      	mov	r0, r5
   15160:	f7fe fd7f 	bl	13c62 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   15164:	b118      	cbz	r0, 1516e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43c>
   15166:	200c      	movs	r0, #12
   15168:	bd70      	pop	{r4, r5, r6, pc}
   1516a:	2042      	movs	r0, #66	; 0x42
   1516c:	bd70      	pop	{r4, r5, r6, pc}
   1516e:	b164      	cbz	r4, 1518a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x458>
   15170:	8820      	ldrh	r0, [r4, #0]
   15172:	f7f0 f975 	bl	5460 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   15176:	8820      	ldrh	r0, [r4, #0]
   15178:	2101      	movs	r1, #1
   1517a:	f7ef fd7b 	bl	4c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1517e:	b120      	cbz	r0, 1518a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x458>
   15180:	f241 41fd 	movw	r1, #5373	; 0x14fd
   15184:	2039      	movs	r0, #57	; 0x39
   15186:	f7ef fa99 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1518a:	2000      	movs	r0, #0
   1518c:	bd70      	pop	{r4, r5, r6, pc}
   1518e:	b5f0      	push	{r4, r5, r6, r7, lr}
   15190:	b085      	sub	sp, #20
   15192:	4604      	mov	r4, r0
   15194:	8800      	ldrh	r0, [r0, #0]
   15196:	4669      	mov	r1, sp
   15198:	f7fd fa6a 	bl	12670 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1519c:	2800      	cmp	r0, #0
   1519e:	d14e      	bne.n	1523e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x50c>
   151a0:	9801      	ldr	r0, [sp, #4]
   151a2:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
   151a6:	f88d 1010 	strb.w	r1, [sp, #16]
   151aa:	9904      	ldr	r1, [sp, #16]
   151ac:	9104      	str	r1, [sp, #16]
   151ae:	f89d 1010 	ldrb.w	r1, [sp, #16]
   151b2:	3090      	adds	r0, #144	; 0x90
   151b4:	b101      	cbz	r1, 151b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x486>
   151b6:	2101      	movs	r1, #1
   151b8:	f88d 1008 	strb.w	r1, [sp, #8]
   151bc:	f89d 1000 	ldrb.w	r1, [sp]
   151c0:	b119      	cbz	r1, 151ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x498>
   151c2:	7bc1      	ldrb	r1, [r0, #15]
   151c4:	0689      	lsls	r1, r1, #26
   151c6:	d40f      	bmi.n	151e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4b6>
   151c8:	e005      	b.n	151d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4a4>
   151ca:	7b81      	ldrb	r1, [r0, #14]
   151cc:	291e      	cmp	r1, #30
   151ce:	d00b      	beq.n	151e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4b6>
   151d0:	e001      	b.n	151d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4a4>
   151d2:	2101      	movs	r1, #1
   151d4:	e000      	b.n	151d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4a6>
   151d6:	2100      	movs	r1, #0
   151d8:	f88d 100c 	strb.w	r1, [sp, #12]
   151dc:	2105      	movs	r1, #5
   151de:	3062      	adds	r0, #98	; 0x62
   151e0:	f7fe ff63 	bl	140aa <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   151e4:	b128      	cbz	r0, 151f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4c0>
   151e6:	e007      	b.n	151f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4c6>
   151e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
   151ec:	2900      	cmp	r1, #0
   151ee:	d1f2      	bne.n	151d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4a4>
   151f0:	e7ef      	b.n	151d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4a0>
   151f2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   151f6:	b308      	cbz	r0, 1523c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x50a>
   151f8:	8921      	ldrh	r1, [r4, #8]
   151fa:	88e0      	ldrh	r0, [r4, #6]
   151fc:	f7ff fed3 	bl	14fa6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   15200:	2800      	cmp	r0, #0
   15202:	d11c      	bne.n	1523e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x50c>
   15204:	88a1      	ldrh	r1, [r4, #4]
   15206:	8860      	ldrh	r0, [r4, #2]
   15208:	f7ff fecd 	bl	14fa6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   1520c:	2800      	cmp	r0, #0
   1520e:	d116      	bne.n	1523e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x50c>
   15210:	8921      	ldrh	r1, [r4, #8]
   15212:	88e0      	ldrh	r0, [r4, #6]
   15214:	f7ff febe 	bl	14f94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x262>
   15218:	2800      	cmp	r0, #0
   1521a:	d110      	bne.n	1523e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x50c>
   1521c:	88a1      	ldrh	r1, [r4, #4]
   1521e:	8860      	ldrh	r0, [r4, #2]
   15220:	f7ff feb8 	bl	14f94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x262>
   15224:	0006      	movs	r6, r0
   15226:	d10a      	bne.n	1523e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x50c>
   15228:	9801      	ldr	r0, [sp, #4]
   1522a:	f500 759d 	add.w	r5, r0, #314	; 0x13a
   1522e:	27ff      	movs	r7, #255	; 0xff
   15230:	706f      	strb	r7, [r5, #1]
   15232:	f89d 1008 	ldrb.w	r1, [sp, #8]
   15236:	b121      	cbz	r1, 15242 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x510>
   15238:	263a      	movs	r6, #58	; 0x3a
   1523a:	e030      	b.n	1529e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x56c>
   1523c:	201a      	movs	r0, #26
   1523e:	b005      	add	sp, #20
   15240:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15242:	f89d 1000 	ldrb.w	r1, [sp]
   15246:	b371      	cbz	r1, 152a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x574>
   15248:	2100      	movs	r1, #0
   1524a:	aa02      	add	r2, sp, #8
   1524c:	f7ff feb9 	bl	14fc2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x290>
   15250:	8861      	ldrh	r1, [r4, #2]
   15252:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   15256:	4281      	cmp	r1, r0
   15258:	d200      	bcs.n	1525c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x52a>
   1525a:	4608      	mov	r0, r1
   1525c:	80e8      	strh	r0, [r5, #6]
   1525e:	88a1      	ldrh	r1, [r4, #4]
   15260:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   15264:	4281      	cmp	r1, r0
   15266:	d200      	bcs.n	1526a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x538>
   15268:	4608      	mov	r0, r1
   1526a:	8128      	strh	r0, [r5, #8]
   1526c:	88e2      	ldrh	r2, [r4, #6]
   1526e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   15272:	428a      	cmp	r2, r1
   15274:	d200      	bcs.n	15278 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x546>
   15276:	4611      	mov	r1, r2
   15278:	8069      	strh	r1, [r5, #2]
   1527a:	8922      	ldrh	r2, [r4, #8]
   1527c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15280:	428a      	cmp	r2, r1
   15282:	d200      	bcs.n	15286 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x554>
   15284:	4611      	mov	r1, r2
   15286:	f640 0248 	movw	r2, #2120	; 0x848
   1528a:	80a9      	strh	r1, [r5, #4]
   1528c:	4291      	cmp	r1, r2
   1528e:	d300      	bcc.n	15292 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x560>
   15290:	4611      	mov	r1, r2
   15292:	80a9      	strh	r1, [r5, #4]
   15294:	4290      	cmp	r0, r2
   15296:	d200      	bcs.n	1529a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x568>
   15298:	4602      	mov	r2, r0
   1529a:	812a      	strh	r2, [r5, #8]
   1529c:	702f      	strb	r7, [r5, #0]
   1529e:	2000      	movs	r0, #0
   152a0:	7068      	strb	r0, [r5, #1]
   152a2:	4630      	mov	r0, r6
   152a4:	e7cb      	b.n	1523e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x50c>
   152a6:	2101      	movs	r1, #1
   152a8:	e7cf      	b.n	1524a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x518>
   152aa:	b508      	push	{r3, lr}
   152ac:	f640 1288 	movw	r2, #2440	; 0x988
   152b0:	4669      	mov	r1, sp
   152b2:	f7ef f877 	bl	43a4 <mpsl_fem_tx_power_split>
   152b6:	bd08      	pop	{r3, pc}
   152b8:	b530      	push	{r4, r5, lr}
   152ba:	f340 0400 	sbfx	r4, r0, #0, #1
   152be:	f340 0040 	sbfx	r0, r0, #1, #1
   152c2:	1c40      	adds	r0, r0, #1
   152c4:	9d03      	ldr	r5, [sp, #12]
   152c6:	1c64      	adds	r4, r4, #1
   152c8:	d000      	beq.n	152cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x59a>
   152ca:	b119      	cbz	r1, 152d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a2>
   152cc:	b100      	cbz	r0, 152d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x59e>
   152ce:	b10a      	cbz	r2, 152d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a2>
   152d0:	b91c      	cbnz	r4, 152da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a8>
   152d2:	e001      	b.n	152d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a6>
   152d4:	2011      	movs	r0, #17
   152d6:	bd30      	pop	{r4, r5, pc}
   152d8:	2100      	movs	r1, #0
   152da:	7019      	strb	r1, [r3, #0]
   152dc:	b900      	cbnz	r0, 152e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ae>
   152de:	2200      	movs	r2, #0
   152e0:	702a      	strb	r2, [r5, #0]
   152e2:	2000      	movs	r0, #0
   152e4:	bd30      	pop	{r4, r5, pc}
   152e6:	b2c0      	uxtb	r0, r0
   152e8:	06c1      	lsls	r1, r0, #27
   152ea:	d415      	bmi.n	15318 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5e6>
   152ec:	0681      	lsls	r1, r0, #26
   152ee:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   152f2:	d503      	bpl.n	152fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ca>
   152f4:	bb21      	cbnz	r1, 15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   152f6:	0781      	lsls	r1, r0, #30
   152f8:	d422      	bmi.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   152fa:	e001      	b.n	15300 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ce>
   152fc:	2900      	cmp	r1, #0
   152fe:	d1fa      	bne.n	152f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5c4>
   15300:	0701      	lsls	r1, r0, #28
   15302:	d51b      	bpl.n	1533c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60a>
   15304:	07c1      	lsls	r1, r0, #31
   15306:	d01b      	beq.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   15308:	0781      	lsls	r1, r0, #30
   1530a:	d419      	bmi.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   1530c:	0641      	lsls	r1, r0, #25
   1530e:	d417      	bmi.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   15310:	0741      	lsls	r1, r0, #29
   15312:	d415      	bmi.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   15314:	0680      	lsls	r0, r0, #26
   15316:	e00f      	b.n	15338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x606>
   15318:	0641      	lsls	r1, r0, #25
   1531a:	d411      	bmi.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   1531c:	0681      	lsls	r1, r0, #26
   1531e:	d40f      	bmi.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   15320:	07c1      	lsls	r1, r0, #31
   15322:	ea4f 7180 	mov.w	r1, r0, lsl #30
   15326:	d004      	beq.n	15332 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x600>
   15328:	2900      	cmp	r1, #0
   1532a:	db02      	blt.n	15332 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x600>
   1532c:	0740      	lsls	r0, r0, #29
   1532e:	d405      	bmi.n	1533c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60a>
   15330:	e006      	b.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   15332:	0701      	lsls	r1, r0, #28
   15334:	d404      	bmi.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   15336:	0740      	lsls	r0, r0, #29
   15338:	2800      	cmp	r0, #0
   1533a:	db01      	blt.n	15340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60e>
   1533c:	2001      	movs	r0, #1
   1533e:	4770      	bx	lr
   15340:	2000      	movs	r0, #0
   15342:	4770      	bx	lr
   15344:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   15346:	f7ff fef1 	bl	1512c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3fa>
   1534a:	b110      	cbz	r0, 15352 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x620>
   1534c:	f7f8 fc3a 	bl	dbc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   15350:	b990      	cbnz	r0, 15378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x646>
   15352:	4669      	mov	r1, sp
   15354:	2002      	movs	r0, #2
   15356:	f7fc ff23 	bl	121a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1535a:	b178      	cbz	r0, 1537c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64a>
   1535c:	f44f 71b2 	mov.w	r1, #356	; 0x164
   15360:	2039      	movs	r0, #57	; 0x39
   15362:	f7ef f9ab 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15366:	9c02      	ldr	r4, [sp, #8]
   15368:	4620      	mov	r0, r4
   1536a:	f7fe fca7 	bl	13cbc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1536e:	b128      	cbz	r0, 1537c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64a>
   15370:	4620      	mov	r0, r4
   15372:	f7fe fabc 	bl	138ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   15376:	b108      	cbz	r0, 1537c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64a>
   15378:	2001      	movs	r0, #1
   1537a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1537c:	4668      	mov	r0, sp
   1537e:	f7ef fc07 	bl	4b90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   15382:	2800      	cmp	r0, #0
   15384:	d0ef      	beq.n	15366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x634>
   15386:	2000      	movs	r0, #0
   15388:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1538a:	b510      	push	{r4, lr}
   1538c:	f7f2 fea2 	bl	80d4 <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI>
   15390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15394:	f7f9 ba56 	b.w	e844 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   15398:	b510      	push	{r4, lr}
   1539a:	f7f5 f9ff 	bl	a79c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1539e:	b108      	cbz	r0, 153a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x672>
   153a0:	21e7      	movs	r1, #231	; 0xe7
   153a2:	e003      	b.n	153ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x67a>
   153a4:	f7f2 fecc 	bl	8140 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   153a8:	b118      	cbz	r0, 153b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x680>
   153aa:	21ec      	movs	r1, #236	; 0xec
   153ac:	2001      	movs	r0, #1
   153ae:	f7ef f985 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   153b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   153b6:	2002      	movs	r0, #2
   153b8:	f7fc bec4 	b.w	12144 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   153bc:	b510      	push	{r4, lr}
   153be:	2001      	movs	r0, #1
   153c0:	f7fc fec0 	bl	12144 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   153c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   153c8:	2000      	movs	r0, #0
   153ca:	f7fc bebb 	b.w	12144 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   153ce:	6802      	ldr	r2, [r0, #0]
   153d0:	b912      	cbnz	r2, 153d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6a6>
   153d2:	6001      	str	r1, [r0, #0]
   153d4:	4770      	bx	lr
   153d6:	4602      	mov	r2, r0
   153d8:	6850      	ldr	r0, [r2, #4]
   153da:	b108      	cbz	r0, 153e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6ae>
   153dc:	428a      	cmp	r2, r1
   153de:	d1fa      	bne.n	153d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6a4>
   153e0:	428a      	cmp	r2, r1
   153e2:	d0f7      	beq.n	153d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6a2>
   153e4:	6051      	str	r1, [r2, #4]
   153e6:	4770      	bx	lr
   153e8:	b510      	push	{r4, lr}
   153ea:	4604      	mov	r4, r0
   153ec:	e002      	b.n	153f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6c2>
   153ee:	6820      	ldr	r0, [r4, #0]
   153f0:	4780      	blx	r0
   153f2:	6864      	ldr	r4, [r4, #4]
   153f4:	2c00      	cmp	r4, #0
   153f6:	d1fa      	bne.n	153ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6bc>
   153f8:	bd10      	pop	{r4, pc}
   153fa:	b510      	push	{r4, lr}
   153fc:	f7ff ffde 	bl	153bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68a>
   15400:	f7ef fdd2 	bl	4fa8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   15404:	f7f0 f8bc 	bl	5580 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   15408:	f7f0 fbdc 	bl	5bc4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1540c:	2800      	cmp	r0, #0
   1540e:	d003      	beq.n	15418 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6e6>
   15410:	21c6      	movs	r1, #198	; 0xc6
   15412:	2001      	movs	r0, #1
   15414:	f7ef f952 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15418:	bd10      	pop	{r4, pc}
   1541a:	f7ff bfee 	b.w	153fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6c8>
   1541e:	b510      	push	{r4, lr}
   15420:	f7ff ffba 	bl	15398 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x666>
   15424:	f7f6 fae4 	bl	b9f0 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   15428:	2800      	cmp	r0, #0
   1542a:	d004      	beq.n	15436 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x704>
   1542c:	f240 1103 	movw	r1, #259	; 0x103
   15430:	2001      	movs	r0, #1
   15432:	f7ef f943 	bl	46bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15436:	bd10      	pop	{r4, pc}

00015438 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   15438:	f7ee bc4c 	b.w	3cd4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1543c:	000b0001 	.word	0x000b0001
   15440:	000a0002 	.word	0x000a0002
   15444:	00090005 	.word	0x00090005
   15448:	0008000a 	.word	0x0008000a
   1544c:	00070014 	.word	0x00070014
   15450:	0006001e 	.word	0x0006001e
   15454:	00050032 	.word	0x00050032
   15458:	0004004b 	.word	0x0004004b
   1545c:	00030064 	.word	0x00030064
   15460:	00020096 	.word	0x00020096
   15464:	000100fa 	.word	0x000100fa
   15468:	000001f4 	.word	0x000001f4

0001546c <sym_HDXV6XMLHCLB5RJEPHSKKLJJM3TFLHYSQSNRE7Y>:
   1546c:	68c8      	ldr	r0, [r1, #12]
   1546e:	f7fc bffb 	b.w	12468 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00015472 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>:
   15472:	7c40      	ldrb	r0, [r0, #17]
   15474:	4770      	bx	lr

00015476 <sym_W7HPZT4ZZWPRGP66GDZI4KM3L4VPFAYQTFZ7HRI>:
   15476:	4770      	bx	lr

00015478 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   15478:	b510      	push	{r4, lr}
   1547a:	f7fa f86d 	bl	f558 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1547e:	f7f9 fc89 	bl	ed94 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   15482:	f7f9 faed 	bl	ea60 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   15486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1548a:	f7f9 bc15 	b.w	ecb8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001548e <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>:
   1548e:	b508      	push	{r3, lr}
   15490:	466b      	mov	r3, sp
   15492:	f7fb f9d3 	bl	1083c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   15496:	bd08      	pop	{r3, pc}

00015498 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   15498:	b510      	push	{r4, lr}
   1549a:	4604      	mov	r4, r0
   1549c:	4608      	mov	r0, r1
   1549e:	f7fa f9fb 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   154a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   154a6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   154aa:	fbb0 f0f1 	udiv	r0, r0, r1
   154ae:	1a20      	subs	r0, r4, r0
   154b0:	1e80      	subs	r0, r0, #2
   154b2:	bd10      	pop	{r4, pc}

000154b4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   154b4:	b510      	push	{r4, lr}
   154b6:	4604      	mov	r4, r0
   154b8:	4608      	mov	r0, r1
   154ba:	f7fa f9ed 	bl	f898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   154be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   154c2:	fbb0 f0f1 	udiv	r0, r0, r1
   154c6:	1a20      	subs	r0, r4, r0
   154c8:	bd10      	pop	{r4, pc}

000154ca <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   154ca:	680a      	ldr	r2, [r1, #0]
   154cc:	6002      	str	r2, [r0, #0]
   154ce:	790b      	ldrb	r3, [r1, #4]
   154d0:	7103      	strb	r3, [r0, #4]
   154d2:	4770      	bx	lr

000154d4 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   154d4:	2100      	movs	r1, #0
   154d6:	6001      	str	r1, [r0, #0]
   154d8:	8081      	strh	r1, [r0, #4]
   154da:	4770      	bx	lr
   154dc:	d8d8d8d8 	.word	0xd8d8d8d8
   154e0:	d8d8d8d8 	.word	0xd8d8d8d8
   154e4:	d8d8d8d8 	.word	0xd8d8d8d8
   154e8:	d8d8d8d8 	.word	0xd8d8d8d8
   154ec:	d8d8d8d8 	.word	0xd8d8d8d8
   154f0:	ecececec 	.word	0xecececec
   154f4:	f0f0f0f0 	.word	0xf0f0f0f0
   154f8:	f4f4f4f4 	.word	0xf4f4f4f4
   154fc:	f8f8f8f8 	.word	0xf8f8f8f8
   15500:	fcfcfcfc 	.word	0xfcfcfcfc
   15504:	03020000 	.word	0x03020000
   15508:	07060504 	.word	0x07060504
   1550c:	d8d8d808 	.word	0xd8d8d808
   15510:	d8d8d8d8 	.word	0xd8d8d8d8
   15514:	d8d8d8d8 	.word	0xd8d8d8d8
   15518:	d8d8d8d8 	.word	0xd8d8d8d8
   1551c:	d8d8d8d8 	.word	0xd8d8d8d8
   15520:	ecececd8 	.word	0xecececd8
   15524:	f0f0f0ec 	.word	0xf0f0f0ec
   15528:	f4f4f4f0 	.word	0xf4f4f4f0
   1552c:	f8f8f8f4 	.word	0xf8f8f8f4
   15530:	fcfcfcf8 	.word	0xfcfcfcf8
   15534:	000000fc 	.word	0x000000fc
   15538:	0403      	.short	0x0403
   1553a:	080c      	.short	0x080c
   1553c:	010d1702 	.word	0x010d1702
   15540:	09090201 	.word	0x09090201
   15544:	02060101 	.word	0x02060101
   15548:	03181809 	.word	0x03181809
   1554c:	09090101 	.word	0x09090101
   15550:	03050303 	.word	0x03050303
   15554:	02220102 	.word	0x02220102
   15558:	10092402 	.word	0x10092402
   1555c:	05050404 	.word	0x05050404

00015560 <button0_pressed_callback>:

int app_state = APP_IDLE;
int mock_adv_station = 0;

// Callback function when button 0 is pressed
void button0_pressed_callback(const struct device *gpiob, struct gpio_callback *cb, gpio_port_pins_t pins) {
   15560:	b508      	push	{r3, lr}
	printk("Button 0 pressed!!\n");
   15562:	4805      	ldr	r0, [pc, #20]	; (15578 <button0_pressed_callback+0x18>)
   15564:	f011 fa2f 	bl	269c6 <printk>
	mock_adv_station = 0;
   15568:	4b04      	ldr	r3, [pc, #16]	; (1557c <button0_pressed_callback+0x1c>)
   1556a:	2200      	movs	r2, #0
   1556c:	601a      	str	r2, [r3, #0]
	app_state = APP_BLE_ADV;
   1556e:	4b04      	ldr	r3, [pc, #16]	; (15580 <button0_pressed_callback+0x20>)
   15570:	2201      	movs	r2, #1
   15572:	601a      	str	r2, [r3, #0]
}
   15574:	bd08      	pop	{r3, pc}
   15576:	bf00      	nop
   15578:	0002a3d0 	.word	0x0002a3d0
   1557c:	2000361c 	.word	0x2000361c
   15580:	200034e8 	.word	0x200034e8

00015584 <button1_pressed_callback>:

// Callback function when button 1 is pressed
void button1_pressed_callback(const struct device *gpiob, struct gpio_callback *cb, gpio_port_pins_t pins) {
   15584:	b508      	push	{r3, lr}
	printk("Button 1 pressed!!\n");
   15586:	4804      	ldr	r0, [pc, #16]	; (15598 <button1_pressed_callback+0x14>)
   15588:	f011 fa1d 	bl	269c6 <printk>
	mock_adv_station = 1;
   1558c:	4a03      	ldr	r2, [pc, #12]	; (1559c <button1_pressed_callback+0x18>)
   1558e:	2301      	movs	r3, #1
   15590:	6013      	str	r3, [r2, #0]
	app_state = APP_BLE_ADV;
   15592:	4a03      	ldr	r2, [pc, #12]	; (155a0 <button1_pressed_callback+0x1c>)
   15594:	6013      	str	r3, [r2, #0]
}
   15596:	bd08      	pop	{r3, pc}
   15598:	0002a3e4 	.word	0x0002a3e4
   1559c:	2000361c 	.word	0x2000361c
   155a0:	200034e8 	.word	0x200034e8

000155a4 <button2_pressed_callback>:

// Callback function when button 2 is pressed
void button2_pressed_callback(const struct device *gpiob, struct gpio_callback *cb, gpio_port_pins_t pins) {
   155a4:	b508      	push	{r3, lr}
	printk("Button 2 pressed!!\n");
   155a6:	4805      	ldr	r0, [pc, #20]	; (155bc <button2_pressed_callback+0x18>)
   155a8:	f011 fa0d 	bl	269c6 <printk>
	mock_adv_station = 2;
   155ac:	4b04      	ldr	r3, [pc, #16]	; (155c0 <button2_pressed_callback+0x1c>)
   155ae:	2202      	movs	r2, #2
   155b0:	601a      	str	r2, [r3, #0]
	app_state = APP_BLE_ADV;
   155b2:	4b04      	ldr	r3, [pc, #16]	; (155c4 <button2_pressed_callback+0x20>)
   155b4:	2201      	movs	r2, #1
   155b6:	601a      	str	r2, [r3, #0]
}
   155b8:	bd08      	pop	{r3, pc}
   155ba:	bf00      	nop
   155bc:	0002a3f8 	.word	0x0002a3f8
   155c0:	2000361c 	.word	0x2000361c
   155c4:	200034e8 	.word	0x200034e8

000155c8 <button3_pressed_callback>:
// Callback function when button 3 is pressed
void button3_pressed_callback(const struct device *gpiob, struct gpio_callback *cb, gpio_port_pins_t pins) {
   155c8:	b508      	push	{r3, lr}
	printk("Button 3 pressed!!\n");
   155ca:	4805      	ldr	r0, [pc, #20]	; (155e0 <button3_pressed_callback+0x18>)
   155cc:	f011 f9fb 	bl	269c6 <printk>
	mock_adv_station = 3;
   155d0:	4b04      	ldr	r3, [pc, #16]	; (155e4 <button3_pressed_callback+0x1c>)
   155d2:	2203      	movs	r2, #3
   155d4:	601a      	str	r2, [r3, #0]
	app_state = APP_BLE_ADV;
   155d6:	4b04      	ldr	r3, [pc, #16]	; (155e8 <button3_pressed_callback+0x20>)
   155d8:	2201      	movs	r2, #1
   155da:	601a      	str	r2, [r3, #0]
}
   155dc:	bd08      	pop	{r3, pc}
   155de:	bf00      	nop
   155e0:	0002a40c 	.word	0x0002a40c
   155e4:	2000361c 	.word	0x2000361c
   155e8:	200034e8 	.word	0x200034e8

000155ec <advertising_work_handle>:
{
   155ec:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_ext_adv_start(ext_adv[CONNECTABLE_ADV_IDX], BT_LE_EXT_ADV_START_DEFAULT);
   155ee:	2300      	movs	r3, #0
   155f0:	f8ad 3004 	strh.w	r3, [sp, #4]
   155f4:	f88d 3006 	strb.w	r3, [sp, #6]
   155f8:	4b06      	ldr	r3, [pc, #24]	; (15614 <advertising_work_handle+0x28>)
   155fa:	a901      	add	r1, sp, #4
   155fc:	6858      	ldr	r0, [r3, #4]
   155fe:	f004 fae7 	bl	19bd0 <bt_le_ext_adv_start>
	if (err) {
   15602:	4601      	mov	r1, r0
   15604:	b110      	cbz	r0, 1560c <advertising_work_handle+0x20>
		printk("Failed to start connectable advertising (err %d)\n", err);
   15606:	4804      	ldr	r0, [pc, #16]	; (15618 <advertising_work_handle+0x2c>)
   15608:	f011 f9dd 	bl	269c6 <printk>
}
   1560c:	b003      	add	sp, #12
   1560e:	f85d fb04 	ldr.w	pc, [sp], #4
   15612:	bf00      	nop
   15614:	2000351c 	.word	0x2000351c
   15618:	0002a420 	.word	0x0002a420

0001561c <adv_connected_cb>:
{
   1561c:	b570      	push	{r4, r5, r6, lr}
   1561e:	460d      	mov	r5, r1
   15620:	4604      	mov	r4, r0
	printk("Advertiser[%d] %p connected conn %p\n", bt_le_ext_adv_get_index(adv),
   15622:	f004 fa3f 	bl	19aa4 <bt_le_ext_adv_get_index>
   15626:	682b      	ldr	r3, [r5, #0]
   15628:	4601      	mov	r1, r0
   1562a:	4622      	mov	r2, r4
   1562c:	4802      	ldr	r0, [pc, #8]	; (15638 <adv_connected_cb+0x1c>)
}
   1562e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("Advertiser[%d] %p connected conn %p\n", bt_le_ext_adv_get_index(adv),
   15632:	f011 b9c8 	b.w	269c6 <printk>
   15636:	bf00      	nop
   15638:	0002a452 	.word	0x0002a452

0001563c <advertising_set_create.constprop.0>:
static int advertising_set_create(struct bt_le_ext_adv **adv,
   1563c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	err = bt_le_ext_adv_create(param, &adv_cb,
   1563e:	4d13      	ldr	r5, [pc, #76]	; (1568c <advertising_set_create.constprop.0+0x50>)
static int advertising_set_create(struct bt_le_ext_adv **adv,
   15640:	460e      	mov	r6, r1
	err = bt_le_ext_adv_create(param, &adv_cb,
   15642:	462a      	mov	r2, r5
   15644:	4912      	ldr	r1, [pc, #72]	; (15690 <advertising_set_create.constprop.0+0x54>)
   15646:	f004 fa91 	bl	19b6c <bt_le_ext_adv_create>
	if (err) {
   1564a:	4604      	mov	r4, r0
   1564c:	b988      	cbnz	r0, 15672 <advertising_set_create.constprop.0+0x36>
	adv_set = *adv;
   1564e:	682d      	ldr	r5, [r5, #0]
	printk("Created adv: %p\n", adv_set);
   15650:	4810      	ldr	r0, [pc, #64]	; (15694 <advertising_set_create.constprop.0+0x58>)
   15652:	4629      	mov	r1, r5
   15654:	f011 f9b7 	bl	269c6 <printk>
	err = bt_le_ext_adv_set_data(adv_set, ad, ad_len,
   15658:	9400      	str	r4, [sp, #0]
   1565a:	4623      	mov	r3, r4
   1565c:	2202      	movs	r2, #2
   1565e:	4631      	mov	r1, r6
   15660:	4628      	mov	r0, r5
   15662:	f012 fa5b 	bl	27b1c <bt_le_ext_adv_set_data>
	if (err) {
   15666:	4604      	mov	r4, r0
   15668:	b130      	cbz	r0, 15678 <advertising_set_create.constprop.0+0x3c>
		printk("Failed to set advertising data (err %d)\n", err);
   1566a:	4601      	mov	r1, r0
   1566c:	480a      	ldr	r0, [pc, #40]	; (15698 <advertising_set_create.constprop.0+0x5c>)
   1566e:	f011 f9aa 	bl	269c6 <printk>
}
   15672:	4620      	mov	r0, r4
   15674:	b004      	add	sp, #16
   15676:	bd70      	pop	{r4, r5, r6, pc}
	return bt_le_ext_adv_start(adv_set, BT_LE_EXT_ADV_START_PARAM(BLE_ADV_TIMEOUT, BLE_ADV_EVENTS));
   15678:	4b08      	ldr	r3, [pc, #32]	; (1569c <advertising_set_create.constprop.0+0x60>)
   1567a:	6818      	ldr	r0, [r3, #0]
   1567c:	9003      	str	r0, [sp, #12]
   1567e:	a903      	add	r1, sp, #12
   15680:	4628      	mov	r0, r5
   15682:	f004 faa5 	bl	19bd0 <bt_le_ext_adv_start>
   15686:	4604      	mov	r4, r0
   15688:	e7f3      	b.n	15672 <advertising_set_create.constprop.0+0x36>
   1568a:	bf00      	nop
   1568c:	2000351c 	.word	0x2000351c
   15690:	00029ba8 	.word	0x00029ba8
   15694:	0002a477 	.word	0x0002a477
   15698:	0002a488 	.word	0x0002a488
   1569c:	00029b78 	.word	0x00029b78

000156a0 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   156a0:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   156a2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   156a4:	b08a      	sub	sp, #40	; 0x28
   156a6:	4604      	mov	r4, r0
   156a8:	460e      	mov	r6, r1
   156aa:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   156ac:	2b03      	cmp	r3, #3
   156ae:	d820      	bhi.n	156f2 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   156b0:	e8df f003 	tbb	[pc, r3]
   156b4:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   156b8:	4911      	ldr	r1, [pc, #68]	; (15700 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   156ba:	4628      	mov	r0, r5
   156bc:	f011 fde6 	bl	2728c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   156c0:	7863      	ldrb	r3, [r4, #1]
   156c2:	9304      	str	r3, [sp, #16]
   156c4:	78a3      	ldrb	r3, [r4, #2]
   156c6:	9303      	str	r3, [sp, #12]
   156c8:	78e3      	ldrb	r3, [r4, #3]
   156ca:	9302      	str	r3, [sp, #8]
   156cc:	7923      	ldrb	r3, [r4, #4]
   156ce:	9301      	str	r3, [sp, #4]
   156d0:	7963      	ldrb	r3, [r4, #5]
   156d2:	9300      	str	r3, [sp, #0]
   156d4:	4a0b      	ldr	r2, [pc, #44]	; (15704 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   156d6:	79a3      	ldrb	r3, [r4, #6]
   156d8:	9505      	str	r5, [sp, #20]
   156da:	211e      	movs	r1, #30
   156dc:	4630      	mov	r0, r6
   156de:	f011 f97f 	bl	269e0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   156e2:	b00a      	add	sp, #40	; 0x28
   156e4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   156e6:	4908      	ldr	r1, [pc, #32]	; (15708 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   156e8:	e7e7      	b.n	156ba <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   156ea:	4908      	ldr	r1, [pc, #32]	; (1570c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   156ec:	e7e5      	b.n	156ba <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   156ee:	4908      	ldr	r1, [pc, #32]	; (15710 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   156f0:	e7e3      	b.n	156ba <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   156f2:	4a08      	ldr	r2, [pc, #32]	; (15714 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   156f4:	210a      	movs	r1, #10
   156f6:	4628      	mov	r0, r5
   156f8:	f011 f972 	bl	269e0 <snprintk>
		break;
   156fc:	e7e0      	b.n	156c0 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   156fe:	bf00      	nop
   15700:	0002a4b1 	.word	0x0002a4b1
   15704:	0002a4da 	.word	0x0002a4da
   15708:	0002a4b8 	.word	0x0002a4b8
   1570c:	0002a4bf 	.word	0x0002a4bf
   15710:	0002a4c9 	.word	0x0002a4c9
   15714:	0002a4d3 	.word	0x0002a4d3

00015718 <disconnected>:
{
   15718:	b510      	push	{r4, lr}
   1571a:	b088      	sub	sp, #32
   1571c:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1571e:	f012 fa9d 	bl	27c5c <bt_conn_get_dst>
   15722:	4669      	mov	r1, sp
   15724:	f7ff ffbc 	bl	156a0 <bt_addr_le_to_str.constprop.0.isra.0>
	dk_set_led_off(CON_STATUS_LED);
   15728:	2001      	movs	r0, #1
   1572a:	f013 fcd7 	bl	290dc <dk_set_led_off>
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   1572e:	4622      	mov	r2, r4
   15730:	4669      	mov	r1, sp
   15732:	4804      	ldr	r0, [pc, #16]	; (15744 <disconnected+0x2c>)
   15734:	f011 f947 	bl	269c6 <printk>
	k_work_submit(&advertising_work);
   15738:	4803      	ldr	r0, [pc, #12]	; (15748 <disconnected+0x30>)
   1573a:	f00c f903 	bl	21944 <k_work_submit>
}
   1573e:	b008      	add	sp, #32
   15740:	bd10      	pop	{r4, pc}
   15742:	bf00      	nop
   15744:	0002a4fd 	.word	0x0002a4fd
   15748:	2000064c 	.word	0x2000064c

0001574c <connected>:
{
   1574c:	b500      	push	{lr}
   1574e:	b089      	sub	sp, #36	; 0x24
	if (err) {
   15750:	b129      	cbz	r1, 1575e <connected+0x12>
		printk("Connection failed (err %u)\n", err);
   15752:	480a      	ldr	r0, [pc, #40]	; (1577c <connected+0x30>)
}
   15754:	b009      	add	sp, #36	; 0x24
   15756:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Connection failed (err %u)\n", err);
   1575a:	f011 b934 	b.w	269c6 <printk>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1575e:	f012 fa7d 	bl	27c5c <bt_conn_get_dst>
   15762:	4669      	mov	r1, sp
   15764:	f7ff ff9c 	bl	156a0 <bt_addr_le_to_str.constprop.0.isra.0>
	dk_set_led_on(CON_STATUS_LED);
   15768:	2001      	movs	r0, #1
   1576a:	f013 fcb4 	bl	290d6 <dk_set_led_on>
	printk("Connected %s\n", addr);
   1576e:	4804      	ldr	r0, [pc, #16]	; (15780 <connected+0x34>)
   15770:	4669      	mov	r1, sp
   15772:	f011 f928 	bl	269c6 <printk>
}
   15776:	b009      	add	sp, #36	; 0x24
   15778:	f85d fb04 	ldr.w	pc, [sp], #4
   1577c:	0002a51b 	.word	0x0002a51b
   15780:	0002a537 	.word	0x0002a537

00015784 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param flags interrupt configuration flags
 * @return a value from gpio_pin_interrupt_configure()
 */
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
   15784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
						  gpio_flags_t flags)
{
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   15788:	6804      	ldr	r4, [r0, #0]
   1578a:	7906      	ldrb	r6, [r0, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1578c:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_api *api =
   1578e:	68a7      	ldr	r7, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15790:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
   15792:	f8d4 8010 	ldr.w	r8, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15796:	2501      	movs	r5, #1
   15798:	40b5      	lsls	r5, r6
   1579a:	421d      	tst	r5, r3
   1579c:	d10a      	bne.n	157b4 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x30>
   1579e:	490e      	ldr	r1, [pc, #56]	; (157d8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
   157a0:	480e      	ldr	r0, [pc, #56]	; (157dc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
   157a2:	f44f 721f 	mov.w	r2, #636	; 0x27c
   157a6:	f011 faff 	bl	26da8 <assert_print>
   157aa:	480b      	ldr	r0, [pc, #44]	; (157d8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
   157ac:	f44f 711f 	mov.w	r1, #636	; 0x27c
   157b0:	f011 faf3 	bl	26d9a <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   157b4:	f8d8 3000 	ldr.w	r3, [r8]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   157b8:	421d      	tst	r5, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
   157ba:	69bd      	ldr	r5, [r7, #24]
   157bc:	4631      	mov	r1, r6
   157be:	4620      	mov	r0, r4
   157c0:	46ac      	mov	ip, r5
   157c2:	bf08      	it	eq
   157c4:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
}
   157c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   157cc:	bf18      	it	ne
   157ce:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   157d2:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   157d6:	4760      	bx	ip
   157d8:	0002a545 	.word	0x0002a545
   157dc:	0002a576 	.word	0x0002a576

000157e0 <gpio_add_callback.constprop.0.isra.0>:
 * handler invocation, but whether they are invoked for the current
 * GPIO event is not specified.
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
   157e0:	4601      	mov	r1, r0
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   157e2:	4803      	ldr	r0, [pc, #12]	; (157f0 <gpio_add_callback.constprop.0.isra.0+0x10>)
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   157e4:	6883      	ldr	r3, [r0, #8]
   157e6:	69db      	ldr	r3, [r3, #28]
   157e8:	b10b      	cbz	r3, 157ee <gpio_add_callback.constprop.0.isra.0+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   157ea:	2201      	movs	r2, #1
   157ec:	4718      	bx	r3
}
   157ee:	4770      	bx	lr
   157f0:	000297d4 	.word	0x000297d4

000157f4 <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   157f4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				  spec->dt_flags | extra_flags);
   157f8:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	return gpio_pin_configure(spec->port,
   157fc:	6805      	ldr	r5, [r0, #0]
   157fe:	7906      	ldrb	r6, [r0, #4]
   15800:	f44a 3880 	orr.w	r8, sl, #65536	; 0x10000
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   15804:	f00a 0330 	and.w	r3, sl, #48	; 0x30
   15808:	2b30      	cmp	r3, #48	; 0x30
	__unused const struct gpio_driver_config *const cfg =
   1580a:	e9d5 b901 	ldrd	fp, r9, [r5, #4]
	struct gpio_driver_data *data =
   1580e:	692f      	ldr	r7, [r5, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   15810:	d10a      	bne.n	15828 <gpio_pin_configure_dt.constprop.0.isra.0+0x34>
   15812:	4925      	ldr	r1, [pc, #148]	; (158a8 <gpio_pin_configure_dt.constprop.0.isra.0+0xb4>)
   15814:	4825      	ldr	r0, [pc, #148]	; (158ac <gpio_pin_configure_dt.constprop.0.isra.0+0xb8>)
   15816:	f240 22bf 	movw	r2, #703	; 0x2bf
   1581a:	f011 fac5 	bl	26da8 <assert_print>
   1581e:	4822      	ldr	r0, [pc, #136]	; (158a8 <gpio_pin_configure_dt.constprop.0.isra.0+0xb4>)
   15820:	f240 21bf 	movw	r1, #703	; 0x2bf
   15824:	f011 fab9 	bl	26d9a <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   15828:	f00a 1302 	and.w	r3, sl, #131074	; 0x20002
   1582c:	b153      	cbz	r3, 15844 <gpio_pin_configure_dt.constprop.0.isra.0+0x50>
   1582e:	491e      	ldr	r1, [pc, #120]	; (158a8 <gpio_pin_configure_dt.constprop.0.isra.0+0xb4>)
   15830:	481e      	ldr	r0, [pc, #120]	; (158ac <gpio_pin_configure_dt.constprop.0.isra.0+0xb8>)
   15832:	f240 22c3 	movw	r2, #707	; 0x2c3
   15836:	f011 fab7 	bl	26da8 <assert_print>
   1583a:	481b      	ldr	r0, [pc, #108]	; (158a8 <gpio_pin_configure_dt.constprop.0.isra.0+0xb4>)
   1583c:	f240 21c3 	movw	r1, #707	; 0x2c3
   15840:	f011 faab 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   15844:	f00a 0306 	and.w	r3, sl, #6
   15848:	2b04      	cmp	r3, #4
   1584a:	d10a      	bne.n	15862 <gpio_pin_configure_dt.constprop.0.isra.0+0x6e>
   1584c:	4916      	ldr	r1, [pc, #88]	; (158a8 <gpio_pin_configure_dt.constprop.0.isra.0+0xb4>)
   1584e:	4817      	ldr	r0, [pc, #92]	; (158ac <gpio_pin_configure_dt.constprop.0.isra.0+0xb8>)
   15850:	f240 22c7 	movw	r2, #711	; 0x2c7
   15854:	f011 faa8 	bl	26da8 <assert_print>
   15858:	4813      	ldr	r0, [pc, #76]	; (158a8 <gpio_pin_configure_dt.constprop.0.isra.0+0xb4>)
   1585a:	f240 21c7 	movw	r1, #711	; 0x2c7
   1585e:	f011 fa9c 	bl	26d9a <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15862:	2301      	movs	r3, #1
   15864:	fa03 f406 	lsl.w	r4, r3, r6
   15868:	f8db 3000 	ldr.w	r3, [fp]
   1586c:	421c      	tst	r4, r3
   1586e:	d10a      	bne.n	15886 <gpio_pin_configure_dt.constprop.0.isra.0+0x92>
   15870:	490d      	ldr	r1, [pc, #52]	; (158a8 <gpio_pin_configure_dt.constprop.0.isra.0+0xb4>)
   15872:	480e      	ldr	r0, [pc, #56]	; (158ac <gpio_pin_configure_dt.constprop.0.isra.0+0xb8>)
   15874:	f240 22da 	movw	r2, #730	; 0x2da
   15878:	f011 fa96 	bl	26da8 <assert_print>
   1587c:	480a      	ldr	r0, [pc, #40]	; (158a8 <gpio_pin_configure_dt.constprop.0.isra.0+0xb4>)
   1587e:	f240 21da 	movw	r1, #730	; 0x2da
   15882:	f011 fa8a 	bl	26d9a <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   15886:	683b      	ldr	r3, [r7, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   15888:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1588c:	bf14      	ite	ne
   1588e:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15890:	43a3      	biceq	r3, r4
   15892:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
   15894:	f8d9 3000 	ldr.w	r3, [r9]
   15898:	4642      	mov	r2, r8
   1589a:	4631      	mov	r1, r6
   1589c:	4628      	mov	r0, r5
}
   1589e:	b001      	add	sp, #4
   158a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->pin_configure(port, pin, flags);
   158a4:	4718      	bx	r3
   158a6:	bf00      	nop
   158a8:	0002a545 	.word	0x0002a545
   158ac:	0002a576 	.word	0x0002a576

000158b0 <main>:

void main(void)
{
   158b0:	b538      	push	{r3, r4, r5, lr}
	int err;

	printk("Starting Bluetooth multiple advertising sets example\n");
   158b2:	484a      	ldr	r0, [pc, #296]	; (159dc <main+0x12c>)
   158b4:	f011 f887 	bl	269c6 <printk>

	err = dk_leds_init();
   158b8:	f009 f89c 	bl	1e9f4 <dk_leds_init>
   158bc:	4601      	mov	r1, r0
	if (err) {
   158be:	b120      	cbz	r0, 158ca <main+0x1a>
		printk("LEDs init failed (err %d)\n", err);
   158c0:	4847      	ldr	r0, [pc, #284]	; (159e0 <main+0x130>)
		
		default:
			break;
		}
	}
   158c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Bluetooth init failed (err %d)\n", err);
   158c6:	f011 b87e 	b.w	269c6 <printk>
	err = bt_enable(NULL);
   158ca:	f003 fbe3 	bl	19094 <bt_enable>
	if (err) {
   158ce:	4601      	mov	r1, r0
   158d0:	b108      	cbz	r0, 158d6 <main+0x26>
		printk("Bluetooth init failed (err %d)\n", err);
   158d2:	4844      	ldr	r0, [pc, #272]	; (159e4 <main+0x134>)
   158d4:	e7f5      	b.n	158c2 <main+0x12>
	printk("Bluetooth initialized\n");
   158d6:	4844      	ldr	r0, [pc, #272]	; (159e8 <main+0x138>)
		switch (app_state)
   158d8:	4c44      	ldr	r4, [pc, #272]	; (159ec <main+0x13c>)
			printk("Entered case APP_BLE_ADV\n");
   158da:	4d45      	ldr	r5, [pc, #276]	; (159f0 <main+0x140>)
	printk("Bluetooth initialized\n");
   158dc:	f011 f873 	bl	269c6 <printk>
	gpio_pin_configure_dt(&button0_spec, GPIO_INPUT);
   158e0:	4844      	ldr	r0, [pc, #272]	; (159f4 <main+0x144>)
   158e2:	f7ff ff87 	bl	157f4 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button0_spec, GPIO_INT_EDGE_TO_ACTIVE);
   158e6:	4843      	ldr	r0, [pc, #268]	; (159f4 <main+0x144>)
   158e8:	f7ff ff4c 	bl	15784 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
   158ec:	4842      	ldr	r0, [pc, #264]	; (159f8 <main+0x148>)
   158ee:	4b43      	ldr	r3, [pc, #268]	; (159fc <main+0x14c>)
   158f0:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
   158f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   158f6:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button0_spec.port, &button0_cb);
   158f8:	f7ff ff72 	bl	157e0 <gpio_add_callback.constprop.0.isra.0>
	gpio_pin_configure_dt(&button1_spec, GPIO_INPUT);
   158fc:	4840      	ldr	r0, [pc, #256]	; (15a00 <main+0x150>)
   158fe:	f7ff ff79 	bl	157f4 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button1_spec, GPIO_INT_EDGE_TO_ACTIVE);
   15902:	483f      	ldr	r0, [pc, #252]	; (15a00 <main+0x150>)
   15904:	f7ff ff3e 	bl	15784 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
   15908:	483e      	ldr	r0, [pc, #248]	; (15a04 <main+0x154>)
   1590a:	4b3f      	ldr	r3, [pc, #252]	; (15a08 <main+0x158>)
   1590c:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
   1590e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15912:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button1_spec.port, &button1_cb);
   15914:	f7ff ff64 	bl	157e0 <gpio_add_callback.constprop.0.isra.0>
	gpio_pin_configure_dt(&button2_spec, GPIO_INPUT);
   15918:	483c      	ldr	r0, [pc, #240]	; (15a0c <main+0x15c>)
   1591a:	f7ff ff6b 	bl	157f4 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button2_spec, GPIO_INT_EDGE_TO_ACTIVE);
   1591e:	483b      	ldr	r0, [pc, #236]	; (15a0c <main+0x15c>)
   15920:	f7ff ff30 	bl	15784 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
   15924:	483a      	ldr	r0, [pc, #232]	; (15a10 <main+0x160>)
   15926:	4b3b      	ldr	r3, [pc, #236]	; (15a14 <main+0x164>)
   15928:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
   1592a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1592e:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button2_spec.port, &button2_cb);
   15930:	f7ff ff56 	bl	157e0 <gpio_add_callback.constprop.0.isra.0>
	gpio_pin_configure_dt(&button3_spec, GPIO_INPUT);
   15934:	4838      	ldr	r0, [pc, #224]	; (15a18 <main+0x168>)
   15936:	f7ff ff5d 	bl	157f4 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button3_spec, GPIO_INT_EDGE_TO_ACTIVE);
   1593a:	4837      	ldr	r0, [pc, #220]	; (15a18 <main+0x168>)
   1593c:	f7ff ff22 	bl	15784 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
   15940:	4836      	ldr	r0, [pc, #216]	; (15a1c <main+0x16c>)
   15942:	4b37      	ldr	r3, [pc, #220]	; (15a20 <main+0x170>)
   15944:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
   15946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1594a:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button3_spec.port, &button3_cb);
   1594c:	f7ff ff48 	bl	157e0 <gpio_add_callback.constprop.0.isra.0>
		switch (app_state)
   15950:	6823      	ldr	r3, [r4, #0]
   15952:	b1ab      	cbz	r3, 15980 <main+0xd0>
   15954:	2b01      	cmp	r3, #1
   15956:	d1fc      	bne.n	15952 <main+0xa2>
			printk("Entered case APP_BLE_ADV\n");
   15958:	4628      	mov	r0, r5
   1595a:	f011 f834 	bl	269c6 <printk>
			if (mock_adv_station == 0)
   1595e:	4b31      	ldr	r3, [pc, #196]	; (15a24 <main+0x174>)
   15960:	681b      	ldr	r3, [r3, #0]
   15962:	b9e3      	cbnz	r3, 1599e <main+0xee>
	err = bt_set_name(NON_CONNECTABLE_DEVICE_NAME);
   15964:	4830      	ldr	r0, [pc, #192]	; (15a28 <main+0x178>)
   15966:	f003 fb77 	bl	19058 <bt_set_name>
	if (err) {
   1596a:	4601      	mov	r1, r0
   1596c:	b170      	cbz	r0, 1598c <main+0xdc>
		printk("Failed to set device name (err %d)\n", err);
   1596e:	482f      	ldr	r0, [pc, #188]	; (15a2c <main+0x17c>)
			printk("Failed to create a non-connectable advertising set (err %d)\n", err);
   15970:	f011 f829 	bl	269c6 <printk>
			printk("Non-connectable advertising started\n");
   15974:	482e      	ldr	r0, [pc, #184]	; (15a30 <main+0x180>)
   15976:	f011 f826 	bl	269c6 <printk>
			app_state = APP_IDLE;
   1597a:	2300      	movs	r3, #0
   1597c:	6023      	str	r3, [r4, #0]
			break;
   1597e:	e7e7      	b.n	15950 <main+0xa0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   15980:	2100      	movs	r1, #0
   15982:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   15986:	f00d f8d3 	bl	22b30 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   1598a:	e7e1      	b.n	15950 <main+0xa0>
		err = advertising_set_create(&ext_adv[NON_CONNECTABLE_ADV_IDX], non_connectable_adv_param,
   1598c:	4929      	ldr	r1, [pc, #164]	; (15a34 <main+0x184>)
		err = advertising_set_create(&ext_adv[NON_CONNECTABLE_ADV_IDX], non_connectable_adv_param,
   1598e:	482a      	ldr	r0, [pc, #168]	; (15a38 <main+0x188>)
   15990:	f7ff fe54 	bl	1563c <advertising_set_create.constprop.0>
		if (err) {
   15994:	4601      	mov	r1, r0
   15996:	2800      	cmp	r0, #0
   15998:	d0ec      	beq.n	15974 <main+0xc4>
			printk("Failed to create a non-connectable advertising set (err %d)\n", err);
   1599a:	4828      	ldr	r0, [pc, #160]	; (15a3c <main+0x18c>)
   1599c:	e7e8      	b.n	15970 <main+0xc0>
			} else if (mock_adv_station == 1)
   1599e:	2b01      	cmp	r3, #1
   159a0:	d107      	bne.n	159b2 <main+0x102>
	err = bt_set_name(NON_CONNECTABLE_DEVICE_NAME);
   159a2:	4821      	ldr	r0, [pc, #132]	; (15a28 <main+0x178>)
   159a4:	f003 fb58 	bl	19058 <bt_set_name>
	if (err) {
   159a8:	4601      	mov	r1, r0
   159aa:	2800      	cmp	r0, #0
   159ac:	d1df      	bne.n	1596e <main+0xbe>
		err = advertising_set_create(&ext_adv[NON_CONNECTABLE_ADV_IDX], non_connectable_adv_param,
   159ae:	4924      	ldr	r1, [pc, #144]	; (15a40 <main+0x190>)
   159b0:	e7ed      	b.n	1598e <main+0xde>
			} else if (mock_adv_station == 2)
   159b2:	2b02      	cmp	r3, #2
   159b4:	d107      	bne.n	159c6 <main+0x116>
	err = bt_set_name(NON_CONNECTABLE_DEVICE_NAME);
   159b6:	481c      	ldr	r0, [pc, #112]	; (15a28 <main+0x178>)
   159b8:	f003 fb4e 	bl	19058 <bt_set_name>
	if (err) {
   159bc:	4601      	mov	r1, r0
   159be:	2800      	cmp	r0, #0
   159c0:	d1d5      	bne.n	1596e <main+0xbe>
		err = advertising_set_create(&ext_adv[NON_CONNECTABLE_ADV_IDX], non_connectable_adv_param,
   159c2:	4920      	ldr	r1, [pc, #128]	; (15a44 <main+0x194>)
   159c4:	e7e3      	b.n	1598e <main+0xde>
			} else if (mock_adv_station == 3)
   159c6:	2b03      	cmp	r3, #3
   159c8:	d1d4      	bne.n	15974 <main+0xc4>
	err = bt_set_name(NON_CONNECTABLE_DEVICE_NAME);
   159ca:	4817      	ldr	r0, [pc, #92]	; (15a28 <main+0x178>)
   159cc:	f003 fb44 	bl	19058 <bt_set_name>
	if (err) {
   159d0:	4601      	mov	r1, r0
   159d2:	2800      	cmp	r0, #0
   159d4:	d1cb      	bne.n	1596e <main+0xbe>
		err = advertising_set_create(&ext_adv[NON_CONNECTABLE_ADV_IDX], non_connectable_adv_param,
   159d6:	491c      	ldr	r1, [pc, #112]	; (15a48 <main+0x198>)
   159d8:	e7d9      	b.n	1598e <main+0xde>
   159da:	bf00      	nop
   159dc:	0002a58e 	.word	0x0002a58e
   159e0:	0002a5c4 	.word	0x0002a5c4
   159e4:	0002a5df 	.word	0x0002a5df
   159e8:	0002a5ff 	.word	0x0002a5ff
   159ec:	200034e8 	.word	0x200034e8
   159f0:	0002a616 	.word	0x0002a616
   159f4:	00029bb4 	.word	0x00029bb4
   159f8:	200034ec 	.word	0x200034ec
   159fc:	00015561 	.word	0x00015561
   15a00:	00029bbc 	.word	0x00029bbc
   15a04:	200034f8 	.word	0x200034f8
   15a08:	00015585 	.word	0x00015585
   15a0c:	00029bc4 	.word	0x00029bc4
   15a10:	20003504 	.word	0x20003504
   15a14:	000155a5 	.word	0x000155a5
   15a18:	00029bcc 	.word	0x00029bcc
   15a1c:	20003510 	.word	0x20003510
   15a20:	000155c9 	.word	0x000155c9
   15a24:	2000361c 	.word	0x2000361c
   15a28:	0002a630 	.word	0x0002a630
   15a2c:	0002a63a 	.word	0x0002a63a
   15a30:	0002a69b 	.word	0x0002a69b
   15a34:	2000065c 	.word	0x2000065c
   15a38:	20000638 	.word	0x20000638
   15a3c:	0002a65e 	.word	0x0002a65e
   15a40:	2000066c 	.word	0x2000066c
   15a44:	2000067c 	.word	0x2000067c
   15a48:	2000068c 	.word	0x2000068c

00015a4c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15a4c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   15a4e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   15a52:	2b02      	cmp	r3, #2
{
   15a54:	b570      	push	{r4, r5, r6, lr}
   15a56:	4604      	mov	r4, r0
   15a58:	460e      	mov	r6, r1
	notify->result = res;
   15a5a:	6081      	str	r1, [r0, #8]
	switch (method) {
   15a5c:	d010      	beq.n	15a80 <sys_notify_finalize+0x34>
   15a5e:	2b03      	cmp	r3, #3
   15a60:	d004      	beq.n	15a6c <sys_notify_finalize+0x20>
   15a62:	2b01      	cmp	r3, #1
   15a64:	d10f      	bne.n	15a86 <sys_notify_finalize+0x3a>
   15a66:	2500      	movs	r5, #0
   15a68:	4628      	mov	r0, r5
   15a6a:	e001      	b.n	15a70 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   15a6c:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   15a6e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   15a70:	2300      	movs	r3, #0
   15a72:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   15a74:	b110      	cbz	r0, 15a7c <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15a76:	4631      	mov	r1, r6
   15a78:	f00d fed8 	bl	2382c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   15a7c:	4628      	mov	r0, r5
   15a7e:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   15a80:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   15a82:	2500      	movs	r5, #0
		break;
   15a84:	e7f4      	b.n	15a70 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   15a86:	4905      	ldr	r1, [pc, #20]	; (15a9c <sys_notify_finalize+0x50>)
   15a88:	4805      	ldr	r0, [pc, #20]	; (15aa0 <sys_notify_finalize+0x54>)
   15a8a:	2245      	movs	r2, #69	; 0x45
   15a8c:	f011 f98c 	bl	26da8 <assert_print>
   15a90:	4802      	ldr	r0, [pc, #8]	; (15a9c <sys_notify_finalize+0x50>)
   15a92:	2145      	movs	r1, #69	; 0x45
   15a94:	f011 f981 	bl	26d9a <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   15a98:	2500      	movs	r5, #0
   15a9a:	e7e8      	b.n	15a6e <sys_notify_finalize+0x22>
   15a9c:	0002a6c0 	.word	0x0002a6c0
   15aa0:	0002a576 	.word	0x0002a576

00015aa4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   15aa4:	4b01      	ldr	r3, [pc, #4]	; (15aac <char_out+0x8>)
   15aa6:	681b      	ldr	r3, [r3, #0]
   15aa8:	4718      	bx	r3
   15aaa:	bf00      	nop
   15aac:	2000069c 	.word	0x2000069c

00015ab0 <__printk_hook_install>:
	_char_out = fn;
   15ab0:	4b01      	ldr	r3, [pc, #4]	; (15ab8 <__printk_hook_install+0x8>)
   15ab2:	6018      	str	r0, [r3, #0]
}
   15ab4:	4770      	bx	lr
   15ab6:	bf00      	nop
   15ab8:	2000069c 	.word	0x2000069c

00015abc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   15abc:	b507      	push	{r0, r1, r2, lr}
   15abe:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   15ac0:	2100      	movs	r1, #0
   15ac2:	4602      	mov	r2, r0
   15ac4:	9100      	str	r1, [sp, #0]
   15ac6:	4803      	ldr	r0, [pc, #12]	; (15ad4 <vprintk+0x18>)
   15ac8:	f000 fbae 	bl	16228 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   15acc:	b003      	add	sp, #12
   15ace:	f85d fb04 	ldr.w	pc, [sp], #4
   15ad2:	bf00      	nop
   15ad4:	00015aa5 	.word	0x00015aa5

00015ad8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   15ad8:	b530      	push	{r4, r5, lr}
   15ada:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   15adc:	2500      	movs	r5, #0
   15ade:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   15ae2:	4604      	mov	r4, r0
   15ae4:	9500      	str	r5, [sp, #0]
   15ae6:	a903      	add	r1, sp, #12
   15ae8:	4805      	ldr	r0, [pc, #20]	; (15b00 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   15aea:	9505      	str	r5, [sp, #20]
   15aec:	f000 fb9c 	bl	16228 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   15af0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   15af4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   15af6:	bfb8      	it	lt
   15af8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   15afa:	b007      	add	sp, #28
   15afc:	bd30      	pop	{r4, r5, pc}
   15afe:	bf00      	nop
   15b00:	000269a1 	.word	0x000269a1

00015b04 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   15b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15b08:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   15b0c:	f01a 0f08 	tst.w	sl, #8
{
   15b10:	4604      	mov	r4, r0
   15b12:	4693      	mov	fp, r2
	if (processing) {
   15b14:	d01c      	beq.n	15b50 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   15b16:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   15b18:	bf0c      	ite	eq
   15b1a:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   15b1e:	f04a 0a20 	orrne.w	sl, sl, #32
   15b22:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15b26:	f104 0014 	add.w	r0, r4, #20
   15b2a:	f00b f939 	bl	20da0 <z_spin_unlock_valid>
   15b2e:	b940      	cbnz	r0, 15b42 <process_event+0x3e>
   15b30:	4992      	ldr	r1, [pc, #584]	; (15d7c <process_event+0x278>)
   15b32:	4893      	ldr	r0, [pc, #588]	; (15d80 <process_event+0x27c>)
   15b34:	22b9      	movs	r2, #185	; 0xb9
   15b36:	f011 f937 	bl	26da8 <assert_print>
   15b3a:	4890      	ldr	r0, [pc, #576]	; (15d7c <process_event+0x278>)
   15b3c:	21b9      	movs	r1, #185	; 0xb9
   15b3e:	f011 f92c 	bl	26d9a <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   15b42:	f38b 8811 	msr	BASEPRI, fp
   15b46:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   15b4a:	b003      	add	sp, #12
   15b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   15b50:	4f8c      	ldr	r7, [pc, #560]	; (15d84 <process_event+0x280>)
   15b52:	f8df 822c 	ldr.w	r8, [pc, #556]	; 15d80 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15b56:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   15b5a:	2902      	cmp	r1, #2
   15b5c:	d106      	bne.n	15b6c <process_event+0x68>
			evt = process_recheck(mgr);
   15b5e:	4620      	mov	r0, r4
   15b60:	f010 ff4b 	bl	269fa <process_recheck>
		if (evt == EVT_NOP) {
   15b64:	2800      	cmp	r0, #0
   15b66:	d0de      	beq.n	15b26 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   15b68:	2801      	cmp	r0, #1
   15b6a:	d163      	bne.n	15c34 <process_event+0x130>
			res = mgr->last_res;
   15b6c:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15b70:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   15b72:	f1b9 0f00 	cmp.w	r9, #0
   15b76:	da19      	bge.n	15bac <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   15b78:	2600      	movs	r6, #0
		*clients = mgr->clients;
   15b7a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15b7c:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   15b80:	e9c4 6600 	strd	r6, r6, [r4]
   15b84:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   15b88:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   15b8a:	8ba3      	ldrh	r3, [r4, #28]
   15b8c:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   15b90:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   15b92:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   15b94:	d003      	beq.n	15b9e <process_event+0x9a>
		if (do_monitors
   15b96:	68a2      	ldr	r2, [r4, #8]
   15b98:	2a00      	cmp	r2, #0
   15b9a:	f040 80f5 	bne.w	15d88 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
   15b9e:	b915      	cbnz	r5, 15ba6 <process_event+0xa2>
		    || (transit != NULL)) {
   15ba0:	2e00      	cmp	r6, #0
   15ba2:	f000 812f 	beq.w	15e04 <process_event+0x300>
   15ba6:	f04f 0a00 	mov.w	sl, #0
   15baa:	e0ef      	b.n	15d8c <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15bac:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   15bb0:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   15bb2:	2901      	cmp	r1, #1
   15bb4:	d820      	bhi.n	15bf8 <process_event+0xf4>
	list->head = NULL;
   15bb6:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15bb8:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   15bbc:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   15bbe:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15bc0:	b29b      	uxth	r3, r3
	list->tail = NULL;
   15bc2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   15bc6:	d10a      	bne.n	15bde <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   15bc8:	b13d      	cbz	r5, 15bda <process_event+0xd6>
   15bca:	8be2      	ldrh	r2, [r4, #30]
   15bcc:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   15bce:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   15bd0:	3201      	adds	r2, #1
   15bd2:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   15bd4:	2900      	cmp	r1, #0
   15bd6:	d1fa      	bne.n	15bce <process_event+0xca>
   15bd8:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15bda:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   15bde:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   15be0:	4620      	mov	r0, r4
   15be2:	f010 ff0a 	bl	269fa <process_recheck>
   15be6:	4606      	mov	r6, r0
   15be8:	2800      	cmp	r0, #0
   15bea:	d0ce      	beq.n	15b8a <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   15bec:	8ba3      	ldrh	r3, [r4, #28]
   15bee:	f043 0320 	orr.w	r3, r3, #32
   15bf2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   15bf4:	2600      	movs	r6, #0
   15bf6:	e7c8      	b.n	15b8a <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   15bf8:	2a04      	cmp	r2, #4
   15bfa:	d10d      	bne.n	15c18 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15bfc:	f023 0307 	bic.w	r3, r3, #7
   15c00:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   15c02:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   15c04:	4620      	mov	r0, r4
   15c06:	f010 fef8 	bl	269fa <process_recheck>
   15c0a:	4605      	mov	r5, r0
   15c0c:	b180      	cbz	r0, 15c30 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   15c0e:	f042 0220 	orr.w	r2, r2, #32
   15c12:	83a2      	strh	r2, [r4, #28]
   15c14:	2500      	movs	r5, #0
   15c16:	e7ed      	b.n	15bf4 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
   15c18:	f240 121b 	movw	r2, #283	; 0x11b
   15c1c:	4639      	mov	r1, r7
   15c1e:	4640      	mov	r0, r8
   15c20:	f011 f8c2 	bl	26da8 <assert_print>
   15c24:	f240 111b 	movw	r1, #283	; 0x11b
   15c28:	4638      	mov	r0, r7
   15c2a:	f011 f8b6 	bl	26d9a <assert_post_action>
   15c2e:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   15c30:	462e      	mov	r6, r5
   15c32:	e7aa      	b.n	15b8a <process_event+0x86>
		} else if (evt == EVT_START) {
   15c34:	2803      	cmp	r0, #3
   15c36:	d131      	bne.n	15c9c <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   15c38:	f1ba 0f00 	cmp.w	sl, #0
   15c3c:	d00a      	beq.n	15c54 <process_event+0x150>
   15c3e:	4639      	mov	r1, r7
   15c40:	4640      	mov	r0, r8
   15c42:	f44f 72ab 	mov.w	r2, #342	; 0x156
   15c46:	f011 f8af 	bl	26da8 <assert_print>
   15c4a:	f44f 71ab 	mov.w	r1, #342	; 0x156
   15c4e:	4638      	mov	r0, r7
   15c50:	f011 f8a3 	bl	26d9a <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   15c54:	6823      	ldr	r3, [r4, #0]
   15c56:	b953      	cbnz	r3, 15c6e <process_event+0x16a>
   15c58:	4639      	mov	r1, r7
   15c5a:	4640      	mov	r0, r8
   15c5c:	f240 1257 	movw	r2, #343	; 0x157
   15c60:	f011 f8a2 	bl	26da8 <assert_print>
   15c64:	f240 1157 	movw	r1, #343	; 0x157
   15c68:	4638      	mov	r0, r7
   15c6a:	f011 f896 	bl	26d9a <assert_post_action>
			transit = mgr->transitions->start;
   15c6e:	6923      	ldr	r3, [r4, #16]
   15c70:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   15c72:	b956      	cbnz	r6, 15c8a <process_event+0x186>
   15c74:	4639      	mov	r1, r7
   15c76:	4640      	mov	r0, r8
   15c78:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   15c7c:	f011 f894 	bl	26da8 <assert_print>
   15c80:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   15c84:	4638      	mov	r0, r7
   15c86:	f011 f888 	bl	26d9a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15c8a:	8ba3      	ldrh	r3, [r4, #28]
   15c8c:	f023 0307 	bic.w	r3, r3, #7
   15c90:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   15c94:	83a3      	strh	r3, [r4, #28]
}
   15c96:	2500      	movs	r5, #0
		res = 0;
   15c98:	46a9      	mov	r9, r5
}
   15c9a:	e776      	b.n	15b8a <process_event+0x86>
		} else if (evt == EVT_STOP) {
   15c9c:	2804      	cmp	r0, #4
   15c9e:	d12e      	bne.n	15cfe <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   15ca0:	f1ba 0f02 	cmp.w	sl, #2
   15ca4:	d00a      	beq.n	15cbc <process_event+0x1b8>
   15ca6:	4639      	mov	r1, r7
   15ca8:	4640      	mov	r0, r8
   15caa:	f240 125d 	movw	r2, #349	; 0x15d
   15cae:	f011 f87b 	bl	26da8 <assert_print>
   15cb2:	f240 115d 	movw	r1, #349	; 0x15d
   15cb6:	4638      	mov	r0, r7
   15cb8:	f011 f86f 	bl	26d9a <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   15cbc:	8be3      	ldrh	r3, [r4, #30]
   15cbe:	b153      	cbz	r3, 15cd6 <process_event+0x1d2>
   15cc0:	4639      	mov	r1, r7
   15cc2:	4640      	mov	r0, r8
   15cc4:	f44f 72af 	mov.w	r2, #350	; 0x15e
   15cc8:	f011 f86e 	bl	26da8 <assert_print>
   15ccc:	f44f 71af 	mov.w	r1, #350	; 0x15e
   15cd0:	4638      	mov	r0, r7
   15cd2:	f011 f862 	bl	26d9a <assert_post_action>
			transit = mgr->transitions->stop;
   15cd6:	6923      	ldr	r3, [r4, #16]
   15cd8:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   15cda:	b956      	cbnz	r6, 15cf2 <process_event+0x1ee>
   15cdc:	4639      	mov	r1, r7
   15cde:	4640      	mov	r0, r8
   15ce0:	f240 1261 	movw	r2, #353	; 0x161
   15ce4:	f011 f860 	bl	26da8 <assert_print>
   15ce8:	f240 1161 	movw	r1, #353	; 0x161
   15cec:	4638      	mov	r0, r7
   15cee:	f011 f854 	bl	26d9a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15cf2:	8ba3      	ldrh	r3, [r4, #28]
   15cf4:	f023 0307 	bic.w	r3, r3, #7
   15cf8:	f043 0304 	orr.w	r3, r3, #4
   15cfc:	e7ca      	b.n	15c94 <process_event+0x190>
		} else if (evt == EVT_RESET) {
   15cfe:	2805      	cmp	r0, #5
   15d00:	d12e      	bne.n	15d60 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   15d02:	f1ba 0f01 	cmp.w	sl, #1
   15d06:	d00a      	beq.n	15d1e <process_event+0x21a>
   15d08:	4639      	mov	r1, r7
   15d0a:	4640      	mov	r0, r8
   15d0c:	f44f 72b2 	mov.w	r2, #356	; 0x164
   15d10:	f011 f84a 	bl	26da8 <assert_print>
   15d14:	f44f 71b2 	mov.w	r1, #356	; 0x164
   15d18:	4638      	mov	r0, r7
   15d1a:	f011 f83e 	bl	26d9a <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   15d1e:	6823      	ldr	r3, [r4, #0]
   15d20:	b953      	cbnz	r3, 15d38 <process_event+0x234>
   15d22:	4639      	mov	r1, r7
   15d24:	4640      	mov	r0, r8
   15d26:	f240 1265 	movw	r2, #357	; 0x165
   15d2a:	f011 f83d 	bl	26da8 <assert_print>
   15d2e:	f240 1165 	movw	r1, #357	; 0x165
   15d32:	4638      	mov	r0, r7
   15d34:	f011 f831 	bl	26d9a <assert_post_action>
			transit = mgr->transitions->reset;
   15d38:	6923      	ldr	r3, [r4, #16]
   15d3a:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   15d3c:	b956      	cbnz	r6, 15d54 <process_event+0x250>
   15d3e:	4639      	mov	r1, r7
   15d40:	4640      	mov	r0, r8
   15d42:	f44f 72b4 	mov.w	r2, #360	; 0x168
   15d46:	f011 f82f 	bl	26da8 <assert_print>
   15d4a:	f44f 71b4 	mov.w	r1, #360	; 0x168
   15d4e:	4638      	mov	r0, r7
   15d50:	f011 f823 	bl	26d9a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   15d54:	8ba3      	ldrh	r3, [r4, #28]
   15d56:	f023 0307 	bic.w	r3, r3, #7
   15d5a:	f043 0305 	orr.w	r3, r3, #5
   15d5e:	e799      	b.n	15c94 <process_event+0x190>
			__ASSERT_NO_MSG(false);
   15d60:	f240 126b 	movw	r2, #363	; 0x16b
   15d64:	4639      	mov	r1, r7
   15d66:	4640      	mov	r0, r8
   15d68:	f011 f81e 	bl	26da8 <assert_print>
   15d6c:	2500      	movs	r5, #0
   15d6e:	f240 116b 	movw	r1, #363	; 0x16b
   15d72:	4638      	mov	r0, r7
   15d74:	f011 f811 	bl	26d9a <assert_post_action>
		onoff_transition_fn transit = NULL;
   15d78:	462e      	mov	r6, r5
   15d7a:	e78d      	b.n	15c98 <process_event+0x194>
   15d7c:	0002a705 	.word	0x0002a705
   15d80:	0002a576 	.word	0x0002a576
   15d84:	0002a6e3 	.word	0x0002a6e3
				   && !sys_slist_is_empty(&mgr->monitors);
   15d88:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   15d8c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   15d90:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   15d92:	f104 0314 	add.w	r3, r4, #20
   15d96:	4618      	mov	r0, r3
   15d98:	9301      	str	r3, [sp, #4]
   15d9a:	f00b f801 	bl	20da0 <z_spin_unlock_valid>
   15d9e:	b940      	cbnz	r0, 15db2 <process_event+0x2ae>
   15da0:	4931      	ldr	r1, [pc, #196]	; (15e68 <process_event+0x364>)
   15da2:	4640      	mov	r0, r8
   15da4:	22b9      	movs	r2, #185	; 0xb9
   15da6:	f010 ffff 	bl	26da8 <assert_print>
   15daa:	482f      	ldr	r0, [pc, #188]	; (15e68 <process_event+0x364>)
   15dac:	21b9      	movs	r1, #185	; 0xb9
   15dae:	f010 fff4 	bl	26d9a <assert_post_action>
   15db2:	f38b 8811 	msr	BASEPRI, fp
   15db6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   15dba:	f1ba 0f00 	cmp.w	sl, #0
   15dbe:	d130      	bne.n	15e22 <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
   15dc0:	2d00      	cmp	r5, #0
   15dc2:	d140      	bne.n	15e46 <process_event+0x342>
			if (transit != NULL) {
   15dc4:	b116      	cbz	r6, 15dcc <process_event+0x2c8>
				transit(mgr, transition_complete);
   15dc6:	4929      	ldr	r1, [pc, #164]	; (15e6c <process_event+0x368>)
   15dc8:	4620      	mov	r0, r4
   15dca:	47b0      	blx	r6
	__asm__ volatile(
   15dcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   15dd0:	f3ef 8b11 	mrs	fp, BASEPRI
   15dd4:	f383 8812 	msr	BASEPRI_MAX, r3
   15dd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15ddc:	9801      	ldr	r0, [sp, #4]
   15dde:	f00a ffd1 	bl	20d84 <z_spin_lock_valid>
   15de2:	b940      	cbnz	r0, 15df6 <process_event+0x2f2>
   15de4:	4920      	ldr	r1, [pc, #128]	; (15e68 <process_event+0x364>)
   15de6:	4640      	mov	r0, r8
   15de8:	228e      	movs	r2, #142	; 0x8e
   15dea:	f010 ffdd 	bl	26da8 <assert_print>
   15dee:	481e      	ldr	r0, [pc, #120]	; (15e68 <process_event+0x364>)
   15df0:	218e      	movs	r1, #142	; 0x8e
   15df2:	f010 ffd2 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   15df6:	9801      	ldr	r0, [sp, #4]
   15df8:	f00a ffe2 	bl	20dc0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   15dfc:	8ba3      	ldrh	r3, [r4, #28]
   15dfe:	f023 0308 	bic.w	r3, r3, #8
   15e02:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   15e04:	8ba3      	ldrh	r3, [r4, #28]
   15e06:	06da      	lsls	r2, r3, #27
   15e08:	d525      	bpl.n	15e56 <process_event+0x352>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   15e0a:	f023 0310 	bic.w	r3, r3, #16
   15e0e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   15e10:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   15e12:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   15e16:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   15e1a:	2900      	cmp	r1, #0
   15e1c:	f47f ae9d 	bne.w	15b5a <process_event+0x56>
out:
   15e20:	e681      	b.n	15b26 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   15e22:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   15e24:	2900      	cmp	r1, #0
   15e26:	d0cb      	beq.n	15dc0 <process_event+0x2bc>
	return node->next;
   15e28:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
   15e2c:	f8d1 b004 	ldr.w	fp, [r1, #4]
   15e30:	9a00      	ldr	r2, [sp, #0]
   15e32:	464b      	mov	r3, r9
   15e34:	4620      	mov	r0, r4
   15e36:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   15e38:	f1ba 0f00 	cmp.w	sl, #0
   15e3c:	d0c0      	beq.n	15dc0 <process_event+0x2bc>
   15e3e:	4651      	mov	r1, sl
   15e40:	f8da a000 	ldr.w	sl, [sl]
   15e44:	e7f2      	b.n	15e2c <process_event+0x328>
   15e46:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   15e48:	9a00      	ldr	r2, [sp, #0]
   15e4a:	682d      	ldr	r5, [r5, #0]
   15e4c:	464b      	mov	r3, r9
   15e4e:	4620      	mov	r0, r4
   15e50:	f010 fdef 	bl	26a32 <notify_one>
   15e54:	e7b4      	b.n	15dc0 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   15e56:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   15e5a:	bf1e      	ittt	ne
   15e5c:	f023 0320 	bicne.w	r3, r3, #32
   15e60:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   15e62:	2102      	movne	r1, #2
   15e64:	e7d5      	b.n	15e12 <process_event+0x30e>
   15e66:	bf00      	nop
   15e68:	0002a705 	.word	0x0002a705
   15e6c:	00015e71 	.word	0x00015e71

00015e70 <transition_complete>:
{
   15e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e72:	4604      	mov	r4, r0
   15e74:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   15e76:	f100 0614 	add.w	r6, r0, #20
   15e7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15e7e:	f3ef 8711 	mrs	r7, BASEPRI
   15e82:	f383 8812 	msr	BASEPRI_MAX, r3
   15e86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15e8a:	4630      	mov	r0, r6
   15e8c:	f00a ff7a 	bl	20d84 <z_spin_lock_valid>
   15e90:	b940      	cbnz	r0, 15ea4 <transition_complete+0x34>
   15e92:	490a      	ldr	r1, [pc, #40]	; (15ebc <transition_complete+0x4c>)
   15e94:	480a      	ldr	r0, [pc, #40]	; (15ec0 <transition_complete+0x50>)
   15e96:	228e      	movs	r2, #142	; 0x8e
   15e98:	f010 ff86 	bl	26da8 <assert_print>
   15e9c:	4807      	ldr	r0, [pc, #28]	; (15ebc <transition_complete+0x4c>)
   15e9e:	218e      	movs	r1, #142	; 0x8e
   15ea0:	f010 ff7b 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   15ea4:	4630      	mov	r0, r6
   15ea6:	f00a ff8b 	bl	20dc0 <z_spin_lock_set_owner>
	mgr->last_res = res;
   15eaa:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   15eac:	463a      	mov	r2, r7
   15eae:	4620      	mov	r0, r4
   15eb0:	2101      	movs	r1, #1
}
   15eb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   15eb6:	f7ff be25 	b.w	15b04 <process_event>
   15eba:	bf00      	nop
   15ebc:	0002a705 	.word	0x0002a705
   15ec0:	0002a576 	.word	0x0002a576

00015ec4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   15ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15ec8:	4604      	mov	r4, r0
   15eca:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   15ecc:	f010 fdc7 	bl	26a5e <validate_args>

	if (rv < 0) {
   15ed0:	1e05      	subs	r5, r0, #0
   15ed2:	db54      	blt.n	15f7e <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   15ed4:	f104 0914 	add.w	r9, r4, #20
   15ed8:	f04f 0340 	mov.w	r3, #64	; 0x40
   15edc:	f3ef 8a11 	mrs	sl, BASEPRI
   15ee0:	f383 8812 	msr	BASEPRI_MAX, r3
   15ee4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15ee8:	4648      	mov	r0, r9
   15eea:	f00a ff4b 	bl	20d84 <z_spin_lock_valid>
   15eee:	b940      	cbnz	r0, 15f02 <onoff_request+0x3e>
   15ef0:	4933      	ldr	r1, [pc, #204]	; (15fc0 <onoff_request+0xfc>)
   15ef2:	4834      	ldr	r0, [pc, #208]	; (15fc4 <onoff_request+0x100>)
   15ef4:	228e      	movs	r2, #142	; 0x8e
   15ef6:	f010 ff57 	bl	26da8 <assert_print>
   15efa:	4831      	ldr	r0, [pc, #196]	; (15fc0 <onoff_request+0xfc>)
   15efc:	218e      	movs	r1, #142	; 0x8e
   15efe:	f010 ff4c 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   15f02:	4648      	mov	r0, r9
   15f04:	f00a ff5c 	bl	20dc0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   15f08:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15f0a:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   15f0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15f10:	428b      	cmp	r3, r1
   15f12:	f002 0607 	and.w	r6, r2, #7
   15f16:	d04a      	beq.n	15fae <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   15f18:	2e02      	cmp	r6, #2
   15f1a:	d11f      	bne.n	15f5c <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   15f1c:	3301      	adds	r3, #1
   15f1e:	83e3      	strh	r3, [r4, #30]
	rv = state;
   15f20:	4635      	mov	r5, r6
		notify = true;
   15f22:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15f26:	4648      	mov	r0, r9
   15f28:	f00a ff3a 	bl	20da0 <z_spin_unlock_valid>
   15f2c:	b940      	cbnz	r0, 15f40 <onoff_request+0x7c>
   15f2e:	4924      	ldr	r1, [pc, #144]	; (15fc0 <onoff_request+0xfc>)
   15f30:	4824      	ldr	r0, [pc, #144]	; (15fc4 <onoff_request+0x100>)
   15f32:	22b9      	movs	r2, #185	; 0xb9
   15f34:	f010 ff38 	bl	26da8 <assert_print>
   15f38:	4821      	ldr	r0, [pc, #132]	; (15fc0 <onoff_request+0xfc>)
   15f3a:	21b9      	movs	r1, #185	; 0xb9
   15f3c:	f010 ff2d 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   15f40:	f38a 8811 	msr	BASEPRI, sl
   15f44:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   15f48:	f1b8 0f00 	cmp.w	r8, #0
   15f4c:	d017      	beq.n	15f7e <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   15f4e:	2300      	movs	r3, #0
   15f50:	4632      	mov	r2, r6
   15f52:	4639      	mov	r1, r7
   15f54:	4620      	mov	r0, r4
   15f56:	f010 fd6c 	bl	26a32 <notify_one>
   15f5a:	e010      	b.n	15f7e <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   15f5c:	0793      	lsls	r3, r2, #30
   15f5e:	d001      	beq.n	15f64 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   15f60:	2e06      	cmp	r6, #6
   15f62:	d10f      	bne.n	15f84 <onoff_request+0xc0>
	parent->next = child;
   15f64:	2300      	movs	r3, #0
   15f66:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   15f68:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   15f6a:	b9eb      	cbnz	r3, 15fa8 <onoff_request+0xe4>
	list->head = node;
   15f6c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   15f70:	4635      	mov	r5, r6
   15f72:	b9f6      	cbnz	r6, 15fb2 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   15f74:	4652      	mov	r2, sl
   15f76:	2102      	movs	r1, #2
   15f78:	4620      	mov	r0, r4
   15f7a:	f7ff fdc3 	bl	15b04 <process_event>
		}
	}

	return rv;
}
   15f7e:	4628      	mov	r0, r5
   15f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   15f84:	2e05      	cmp	r6, #5
   15f86:	d017      	beq.n	15fb8 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   15f88:	2e01      	cmp	r6, #1
   15f8a:	d00a      	beq.n	15fa2 <onoff_request+0xde>
   15f8c:	490e      	ldr	r1, [pc, #56]	; (15fc8 <onoff_request+0x104>)
   15f8e:	480d      	ldr	r0, [pc, #52]	; (15fc4 <onoff_request+0x100>)
   15f90:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   15f94:	f010 ff08 	bl	26da8 <assert_print>
   15f98:	480b      	ldr	r0, [pc, #44]	; (15fc8 <onoff_request+0x104>)
   15f9a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15f9e:	f010 fefc 	bl	26d9a <assert_post_action>
		rv = -EIO;
   15fa2:	f06f 0504 	mvn.w	r5, #4
   15fa6:	e004      	b.n	15fb2 <onoff_request+0xee>
	parent->next = child;
   15fa8:	601f      	str	r7, [r3, #0]
	list->tail = node;
   15faa:	6067      	str	r7, [r4, #4]
}
   15fac:	e7e0      	b.n	15f70 <onoff_request+0xac>
		rv = -EAGAIN;
   15fae:	f06f 050a 	mvn.w	r5, #10
   15fb2:	f04f 0800 	mov.w	r8, #0
   15fb6:	e7b6      	b.n	15f26 <onoff_request+0x62>
		rv = -ENOTSUP;
   15fb8:	f06f 0585 	mvn.w	r5, #133	; 0x85
   15fbc:	e7f9      	b.n	15fb2 <onoff_request+0xee>
   15fbe:	bf00      	nop
   15fc0:	0002a705 	.word	0x0002a705
   15fc4:	0002a576 	.word	0x0002a576
   15fc8:	0002a6e3 	.word	0x0002a6e3

00015fcc <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   15fcc:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   15fce:	b379      	cbz	r1, 16030 <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   15fd0:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   15fd2:	1f0c      	subs	r4, r1, #4
   15fd4:	1b64      	subs	r4, r4, r5
   15fd6:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15fd8:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   15fdc:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   15fde:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   15fe0:	07db      	lsls	r3, r3, #31
   15fe2:	d408      	bmi.n	15ff6 <sys_heap_free+0x2a>
   15fe4:	4913      	ldr	r1, [pc, #76]	; (16034 <sys_heap_free+0x68>)
   15fe6:	4814      	ldr	r0, [pc, #80]	; (16038 <sys_heap_free+0x6c>)
   15fe8:	22ac      	movs	r2, #172	; 0xac
   15fea:	f010 fedd 	bl	26da8 <assert_print>
   15fee:	4811      	ldr	r0, [pc, #68]	; (16034 <sys_heap_free+0x68>)
   15ff0:	21ac      	movs	r1, #172	; 0xac
   15ff2:	f010 fed2 	bl	26d9a <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   15ff6:	4631      	mov	r1, r6
   15ff8:	4628      	mov	r0, r5
   15ffa:	f010 fd5c 	bl	26ab6 <chunk_size>
   15ffe:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   16000:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   16004:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   16006:	4286      	cmp	r6, r0
   16008:	d008      	beq.n	1601c <sys_heap_free+0x50>
   1600a:	490a      	ldr	r1, [pc, #40]	; (16034 <sys_heap_free+0x68>)
   1600c:	480a      	ldr	r0, [pc, #40]	; (16038 <sys_heap_free+0x6c>)
   1600e:	22b4      	movs	r2, #180	; 0xb4
   16010:	f010 feca 	bl	26da8 <assert_print>
   16014:	4807      	ldr	r0, [pc, #28]	; (16034 <sys_heap_free+0x68>)
   16016:	21b4      	movs	r1, #180	; 0xb4
   16018:	f010 febf 	bl	26d9a <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1601c:	8863      	ldrh	r3, [r4, #2]
   1601e:	f023 0301 	bic.w	r3, r3, #1
   16022:	8063      	strh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   16024:	4631      	mov	r1, r6
   16026:	4628      	mov	r0, r5
}
   16028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   1602c:	f010 bdff 	b.w	26c2e <free_chunk>
}
   16030:	bd70      	pop	{r4, r5, r6, pc}
   16032:	bf00      	nop
   16034:	0002a732 	.word	0x0002a732
   16038:	0002a576 	.word	0x0002a576

0001603c <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1603c:	424b      	negs	r3, r1
{
   1603e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   16042:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   16046:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   1604a:	6806      	ldr	r6, [r0, #0]
{
   1604c:	4614      	mov	r4, r2
	if (align != rew) {
   1604e:	d01b      	beq.n	16088 <sys_heap_aligned_alloc+0x4c>
		return false;
   16050:	2f04      	cmp	r7, #4
   16052:	463d      	mov	r5, r7
   16054:	46b9      	mov	r9, r7
   16056:	bf28      	it	cs
   16058:	2504      	movcs	r5, #4
		align -= rew;
   1605a:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1605c:	f107 3aff 	add.w	sl, r7, #4294967295
   16060:	ea1a 0f07 	tst.w	sl, r7
   16064:	d00a      	beq.n	1607c <sys_heap_aligned_alloc+0x40>
   16066:	4931      	ldr	r1, [pc, #196]	; (1612c <sys_heap_aligned_alloc+0xf0>)
   16068:	4831      	ldr	r0, [pc, #196]	; (16130 <sys_heap_aligned_alloc+0xf4>)
   1606a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1606e:	f010 fe9b 	bl	26da8 <assert_print>
   16072:	482e      	ldr	r0, [pc, #184]	; (1612c <sys_heap_aligned_alloc+0xf0>)
   16074:	f44f 71a0 	mov.w	r1, #320	; 0x140
   16078:	f010 fe8f 	bl	26d9a <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   1607c:	b97c      	cbnz	r4, 1609e <sys_heap_aligned_alloc+0x62>
		return NULL;
   1607e:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   16082:	4648      	mov	r0, r9
   16084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   16088:	2904      	cmp	r1, #4
   1608a:	d804      	bhi.n	16096 <sys_heap_aligned_alloc+0x5a>
}
   1608c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   16090:	4611      	mov	r1, r2
   16092:	f010 bdfd 	b.w	26c90 <sys_heap_alloc>
		rew = 0;
   16096:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1609a:	2504      	movs	r5, #4
   1609c:	e7de      	b.n	1605c <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1609e:	68b3      	ldr	r3, [r6, #8]
   160a0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   160a4:	d9eb      	bls.n	1607e <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   160a6:	f104 010b 	add.w	r1, r4, #11
   160aa:	4439      	add	r1, r7
   160ac:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   160ae:	08c9      	lsrs	r1, r1, #3
   160b0:	4630      	mov	r0, r6
   160b2:	f010 fd56 	bl	26b62 <alloc_chunk>
	if (c0 == 0) {
   160b6:	4680      	mov	r8, r0
   160b8:	2800      	cmp	r0, #0
   160ba:	d0e0      	beq.n	1607e <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   160bc:	f109 0504 	add.w	r5, r9, #4
   160c0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   160c4:	4435      	add	r5, r6
   160c6:	4455      	add	r5, sl
   160c8:	427f      	negs	r7, r7
   160ca:	402f      	ands	r7, r5
   160cc:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   160d0:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   160d2:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   160d6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   160d8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   160da:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   160de:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   160e0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   160e4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   160e8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   160ec:	d208      	bcs.n	16100 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   160ee:	4601      	mov	r1, r0
   160f0:	463a      	mov	r2, r7
   160f2:	4630      	mov	r0, r6
   160f4:	f010 fd81 	bl	26bfa <split_chunks>
		free_list_add(h, c0);
   160f8:	4641      	mov	r1, r8
   160fa:	4630      	mov	r0, r6
   160fc:	f010 fce0 	bl	26ac0 <free_list_add>
	return c + chunk_size(h, c);
   16100:	4639      	mov	r1, r7
   16102:	4630      	mov	r0, r6
   16104:	f010 fcd7 	bl	26ab6 <chunk_size>
   16108:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1610a:	4284      	cmp	r4, r0
   1610c:	d207      	bcs.n	1611e <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c, c_end);
   1610e:	4630      	mov	r0, r6
   16110:	4622      	mov	r2, r4
   16112:	f010 fd72 	bl	26bfa <split_chunks>
		free_list_add(h, c_end);
   16116:	4621      	mov	r1, r4
   16118:	4630      	mov	r0, r6
   1611a:	f010 fcd1 	bl	26ac0 <free_list_add>
	void *cmem = &buf[c];
   1611e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16122:	8873      	ldrh	r3, [r6, #2]
   16124:	f043 0301 	orr.w	r3, r3, #1
   16128:	8073      	strh	r3, [r6, #2]
   1612a:	e7aa      	b.n	16082 <sys_heap_aligned_alloc+0x46>
   1612c:	0002a732 	.word	0x0002a732
   16130:	0002a576 	.word	0x0002a576

00016134 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   16134:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   16138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1613c:	4604      	mov	r4, r0
   1613e:	460e      	mov	r6, r1
   16140:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   16142:	d35e      	bcc.n	16202 <sys_heap_init+0xce>
   16144:	4936      	ldr	r1, [pc, #216]	; (16220 <sys_heap_init+0xec>)
   16146:	4837      	ldr	r0, [pc, #220]	; (16224 <sys_heap_init+0xf0>)
   16148:	f240 12e3 	movw	r2, #483	; 0x1e3
   1614c:	f010 fe2c 	bl	26da8 <assert_print>
   16150:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   16154:	4832      	ldr	r0, [pc, #200]	; (16220 <sys_heap_init+0xec>)
   16156:	f010 fe20 	bl	26d9a <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   1615a:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1615c:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1615e:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16160:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16164:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   16168:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1616a:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1616c:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   16170:	d80a      	bhi.n	16188 <sys_heap_init+0x54>
   16172:	492b      	ldr	r1, [pc, #172]	; (16220 <sys_heap_init+0xec>)
   16174:	482b      	ldr	r0, [pc, #172]	; (16224 <sys_heap_init+0xf0>)
   16176:	f240 12f3 	movw	r2, #499	; 0x1f3
   1617a:	f010 fe15 	bl	26da8 <assert_print>
   1617e:	4828      	ldr	r0, [pc, #160]	; (16220 <sys_heap_init+0xec>)
   16180:	f240 11f3 	movw	r1, #499	; 0x1f3
   16184:	f010 fe09 	bl	26d9a <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   16188:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1618a:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1618e:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   16192:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   16196:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16198:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1619a:	2300      	movs	r3, #0
   1619c:	08e4      	lsrs	r4, r4, #3
   1619e:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   161a0:	1c63      	adds	r3, r4, #1
   161a2:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   161a4:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   161a6:	d90a      	bls.n	161be <sys_heap_init+0x8a>
   161a8:	491d      	ldr	r1, [pc, #116]	; (16220 <sys_heap_init+0xec>)
   161aa:	481e      	ldr	r0, [pc, #120]	; (16224 <sys_heap_init+0xf0>)
   161ac:	f44f 7201 	mov.w	r2, #516	; 0x204
   161b0:	f010 fdfa 	bl	26da8 <assert_print>
   161b4:	481a      	ldr	r0, [pc, #104]	; (16220 <sys_heap_init+0xec>)
   161b6:	f44f 7101 	mov.w	r1, #516	; 0x204
   161ba:	f010 fdee 	bl	26d9a <assert_post_action>
   161be:	f105 0310 	add.w	r3, r5, #16
   161c2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   161c6:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
   161c8:	4598      	cmp	r8, r3
   161ca:	d125      	bne.n	16218 <sys_heap_init+0xe4>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   161cc:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   161ce:	f043 0301 	orr.w	r3, r3, #1
   161d2:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
   161d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   161d8:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   161da:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   161dc:	802a      	strh	r2, [r5, #0]
   161de:	8048      	strh	r0, [r1, #2]
   161e0:	19a9      	adds	r1, r5, r6
   161e2:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   161e6:	804a      	strh	r2, [r1, #2]
   161e8:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   161ea:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   161ee:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   161f0:	885a      	ldrh	r2, [r3, #2]
   161f2:	f042 0201 	orr.w	r2, r2, #1
   161f6:	4628      	mov	r0, r5
   161f8:	805a      	strh	r2, [r3, #2]
}
   161fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   161fe:	f010 bc5f 	b.w	26ac0 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   16202:	2a04      	cmp	r2, #4
   16204:	d8a9      	bhi.n	1615a <sys_heap_init+0x26>
   16206:	4906      	ldr	r1, [pc, #24]	; (16220 <sys_heap_init+0xec>)
   16208:	4806      	ldr	r0, [pc, #24]	; (16224 <sys_heap_init+0xf0>)
   1620a:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   1620e:	f010 fdcb 	bl	26da8 <assert_print>
   16212:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   16216:	e79d      	b.n	16154 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   16218:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   1621c:	e7d4      	b.n	161c8 <sys_heap_init+0x94>
   1621e:	bf00      	nop
   16220:	0002a732 	.word	0x0002a732
   16224:	0002a576 	.word	0x0002a576

00016228 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   16228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1622c:	b091      	sub	sp, #68	; 0x44
   1622e:	468b      	mov	fp, r1
   16230:	9002      	str	r0, [sp, #8]
   16232:	4692      	mov	sl, r2
   16234:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   16236:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   16238:	f89a 0000 	ldrb.w	r0, [sl]
   1623c:	b908      	cbnz	r0, 16242 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1623e:	4628      	mov	r0, r5
   16240:	e363      	b.n	1690a <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
   16242:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   16244:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   16248:	d007      	beq.n	1625a <z_cbvprintf_impl+0x32>
			OUTC('%');
   1624a:	9b02      	ldr	r3, [sp, #8]
   1624c:	4659      	mov	r1, fp
   1624e:	4798      	blx	r3
   16250:	2800      	cmp	r0, #0
   16252:	f2c0 835a 	blt.w	1690a <z_cbvprintf_impl+0x6e2>
   16256:	3501      	adds	r5, #1
			break;
   16258:	e212      	b.n	16680 <z_cbvprintf_impl+0x458>
		} state = {
   1625a:	2218      	movs	r2, #24
   1625c:	2100      	movs	r1, #0
   1625e:	a80a      	add	r0, sp, #40	; 0x28
   16260:	f011 f880 	bl	27364 <memset>
	if (*sp == '%') {
   16264:	f89a 3001 	ldrb.w	r3, [sl, #1]
   16268:	2b25      	cmp	r3, #37	; 0x25
   1626a:	d078      	beq.n	1635e <z_cbvprintf_impl+0x136>
   1626c:	2200      	movs	r2, #0
   1626e:	4610      	mov	r0, r2
   16270:	4696      	mov	lr, r2
   16272:	4694      	mov	ip, r2
   16274:	4616      	mov	r6, r2
   16276:	4639      	mov	r1, r7
		switch (*sp) {
   16278:	f817 3b01 	ldrb.w	r3, [r7], #1
   1627c:	2b2b      	cmp	r3, #43	; 0x2b
   1627e:	f000 809d 	beq.w	163bc <z_cbvprintf_impl+0x194>
   16282:	f200 8094 	bhi.w	163ae <z_cbvprintf_impl+0x186>
   16286:	2b20      	cmp	r3, #32
   16288:	f000 809b 	beq.w	163c2 <z_cbvprintf_impl+0x19a>
   1628c:	2b23      	cmp	r3, #35	; 0x23
   1628e:	f000 809b 	beq.w	163c8 <z_cbvprintf_impl+0x1a0>
   16292:	b12e      	cbz	r6, 162a0 <z_cbvprintf_impl+0x78>
   16294:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   16298:	f046 0604 	orr.w	r6, r6, #4
   1629c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   162a0:	f1bc 0f00 	cmp.w	ip, #0
   162a4:	d005      	beq.n	162b2 <z_cbvprintf_impl+0x8a>
   162a6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   162aa:	f046 0608 	orr.w	r6, r6, #8
   162ae:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   162b2:	f1be 0f00 	cmp.w	lr, #0
   162b6:	d005      	beq.n	162c4 <z_cbvprintf_impl+0x9c>
   162b8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   162bc:	f046 0610 	orr.w	r6, r6, #16
   162c0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   162c4:	b128      	cbz	r0, 162d2 <z_cbvprintf_impl+0xaa>
   162c6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   162ca:	f040 0020 	orr.w	r0, r0, #32
   162ce:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   162d2:	b12a      	cbz	r2, 162e0 <z_cbvprintf_impl+0xb8>
   162d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   162d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   162dc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   162e0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   162e4:	f002 0044 	and.w	r0, r2, #68	; 0x44
   162e8:	2844      	cmp	r0, #68	; 0x44
   162ea:	d103      	bne.n	162f4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   162ec:	f36f 1286 	bfc	r2, #6, #1
   162f0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   162f4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   162f8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   162fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   162fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   16302:	d17b      	bne.n	163fc <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
   16304:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   16308:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   1630c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1630e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   16312:	781a      	ldrb	r2, [r3, #0]
   16314:	2a2e      	cmp	r2, #46	; 0x2e
   16316:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1631a:	bf0c      	ite	eq
   1631c:	2101      	moveq	r1, #1
   1631e:	2100      	movne	r1, #0
   16320:	f361 0241 	bfi	r2, r1, #1, #1
   16324:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   16328:	d174      	bne.n	16414 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
   1632a:	785a      	ldrb	r2, [r3, #1]
   1632c:	2a2a      	cmp	r2, #42	; 0x2a
   1632e:	d06a      	beq.n	16406 <z_cbvprintf_impl+0x1de>
	++sp;
   16330:	3301      	adds	r3, #1
	size_t val = 0;
   16332:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   16334:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   16336:	4618      	mov	r0, r3
   16338:	f810 2b01 	ldrb.w	r2, [r0], #1
   1633c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   16340:	2f09      	cmp	r7, #9
   16342:	f240 808e 	bls.w	16462 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   16346:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1634a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   1634c:	f3c2 0040 	ubfx	r0, r2, #1, #1
   16350:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   16354:	f361 0241 	bfi	r2, r1, #1, #1
   16358:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   1635c:	e05a      	b.n	16414 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
   1635e:	f10a 0702 	add.w	r7, sl, #2
   16362:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   16366:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1636a:	07d9      	lsls	r1, r3, #31
   1636c:	f140 8149 	bpl.w	16602 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
   16370:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   16374:	f1b9 0f00 	cmp.w	r9, #0
   16378:	da07      	bge.n	1638a <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
   1637a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1637e:	f042 0204 	orr.w	r2, r2, #4
   16382:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   16386:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   1638a:	075a      	lsls	r2, r3, #29
   1638c:	f140 8142 	bpl.w	16614 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
   16390:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   16394:	f1b8 0f00 	cmp.w	r8, #0
   16398:	f280 8141 	bge.w	1661e <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
   1639c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   163a0:	f36f 0341 	bfc	r3, #1, #1
   163a4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   163a8:	f04f 38ff 	mov.w	r8, #4294967295
   163ac:	e137      	b.n	1661e <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
   163ae:	2b2d      	cmp	r3, #45	; 0x2d
   163b0:	d00c      	beq.n	163cc <z_cbvprintf_impl+0x1a4>
   163b2:	2b30      	cmp	r3, #48	; 0x30
   163b4:	f47f af6d 	bne.w	16292 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
   163b8:	2201      	movs	r2, #1
	} while (loop);
   163ba:	e75c      	b.n	16276 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
   163bc:	f04f 0c01 	mov.w	ip, #1
   163c0:	e759      	b.n	16276 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
   163c2:	f04f 0e01 	mov.w	lr, #1
   163c6:	e756      	b.n	16276 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
   163c8:	2001      	movs	r0, #1
   163ca:	e754      	b.n	16276 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   163cc:	2601      	movs	r6, #1
   163ce:	e752      	b.n	16276 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
   163d0:	fb0c 0202 	mla	r2, ip, r2, r0
   163d4:	3a30      	subs	r2, #48	; 0x30
   163d6:	4633      	mov	r3, r6
   163d8:	461e      	mov	r6, r3
   163da:	f816 0b01 	ldrb.w	r0, [r6], #1
   163de:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   163e2:	2f09      	cmp	r7, #9
   163e4:	d9f4      	bls.n	163d0 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
   163e6:	4299      	cmp	r1, r3
   163e8:	d093      	beq.n	16312 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   163ea:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   163ee:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   163f0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   163f2:	f362 0141 	bfi	r1, r2, #1, #1
   163f6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   163fa:	e78a      	b.n	16312 <z_cbvprintf_impl+0xea>
   163fc:	460b      	mov	r3, r1
	size_t val = 0;
   163fe:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   16400:	f04f 0c0a 	mov.w	ip, #10
   16404:	e7e8      	b.n	163d8 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
   16406:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1640a:	f042 0204 	orr.w	r2, r2, #4
   1640e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   16412:	3302      	adds	r3, #2
	switch (*sp) {
   16414:	461f      	mov	r7, r3
   16416:	f817 2b01 	ldrb.w	r2, [r7], #1
   1641a:	2a6c      	cmp	r2, #108	; 0x6c
   1641c:	d041      	beq.n	164a2 <z_cbvprintf_impl+0x27a>
   1641e:	d825      	bhi.n	1646c <z_cbvprintf_impl+0x244>
   16420:	2a68      	cmp	r2, #104	; 0x68
   16422:	d02b      	beq.n	1647c <z_cbvprintf_impl+0x254>
   16424:	2a6a      	cmp	r2, #106	; 0x6a
   16426:	d046      	beq.n	164b6 <z_cbvprintf_impl+0x28e>
   16428:	2a4c      	cmp	r2, #76	; 0x4c
   1642a:	d04c      	beq.n	164c6 <z_cbvprintf_impl+0x29e>
   1642c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1642e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   16432:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   16436:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1643a:	2a78      	cmp	r2, #120	; 0x78
   1643c:	f200 80d9 	bhi.w	165f2 <z_cbvprintf_impl+0x3ca>
   16440:	2a57      	cmp	r2, #87	; 0x57
   16442:	d84d      	bhi.n	164e0 <z_cbvprintf_impl+0x2b8>
   16444:	2a41      	cmp	r2, #65	; 0x41
   16446:	d003      	beq.n	16450 <z_cbvprintf_impl+0x228>
   16448:	3a45      	subs	r2, #69	; 0x45
   1644a:	2a02      	cmp	r2, #2
   1644c:	f200 80d1 	bhi.w	165f2 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   16450:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   16454:	2204      	movs	r2, #4
   16456:	f362 0302 	bfi	r3, r2, #0, #3
   1645a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   1645e:	2301      	movs	r3, #1
			break;
   16460:	e09e      	b.n	165a0 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
   16462:	fb06 2101 	mla	r1, r6, r1, r2
   16466:	3930      	subs	r1, #48	; 0x30
   16468:	4603      	mov	r3, r0
   1646a:	e764      	b.n	16336 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
   1646c:	2a74      	cmp	r2, #116	; 0x74
   1646e:	d026      	beq.n	164be <z_cbvprintf_impl+0x296>
   16470:	2a7a      	cmp	r2, #122	; 0x7a
   16472:	d1db      	bne.n	1642c <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
   16474:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16478:	2206      	movs	r2, #6
   1647a:	e00d      	b.n	16498 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
   1647c:	785a      	ldrb	r2, [r3, #1]
   1647e:	2a68      	cmp	r2, #104	; 0x68
   16480:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   16484:	d106      	bne.n	16494 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
   16486:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   16488:	f361 02c6 	bfi	r2, r1, #3, #4
   1648c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   16490:	1c9f      	adds	r7, r3, #2
   16492:	e7cc      	b.n	1642e <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
   16494:	4613      	mov	r3, r2
   16496:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   16498:	f362 03c6 	bfi	r3, r2, #3, #4
   1649c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   164a0:	e7c5      	b.n	1642e <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
   164a2:	785a      	ldrb	r2, [r3, #1]
   164a4:	2a6c      	cmp	r2, #108	; 0x6c
   164a6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   164aa:	d101      	bne.n	164b0 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
   164ac:	2104      	movs	r1, #4
   164ae:	e7eb      	b.n	16488 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
   164b0:	4613      	mov	r3, r2
   164b2:	2203      	movs	r2, #3
   164b4:	e7f0      	b.n	16498 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
   164b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   164ba:	2205      	movs	r2, #5
   164bc:	e7ec      	b.n	16498 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
   164be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   164c2:	2207      	movs	r2, #7
   164c4:	e7e8      	b.n	16498 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
   164c6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   164ca:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   164ce:	f023 0302 	bic.w	r3, r3, #2
   164d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   164d6:	f043 0302 	orr.w	r3, r3, #2
   164da:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   164de:	e7a6      	b.n	1642e <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
   164e0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   164e4:	2920      	cmp	r1, #32
   164e6:	f200 8084 	bhi.w	165f2 <z_cbvprintf_impl+0x3ca>
   164ea:	a001      	add	r0, pc, #4	; (adr r0, 164f0 <z_cbvprintf_impl+0x2c8>)
   164ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   164f0:	000165b5 	.word	0x000165b5
   164f4:	000165f3 	.word	0x000165f3
   164f8:	000165f3 	.word	0x000165f3
   164fc:	000165f3 	.word	0x000165f3
   16500:	000165f3 	.word	0x000165f3
   16504:	000165f3 	.word	0x000165f3
   16508:	000165f3 	.word	0x000165f3
   1650c:	000165f3 	.word	0x000165f3
   16510:	000165f3 	.word	0x000165f3
   16514:	00016451 	.word	0x00016451
   16518:	000165f3 	.word	0x000165f3
   1651c:	000165b5 	.word	0x000165b5
   16520:	00016575 	.word	0x00016575
   16524:	00016451 	.word	0x00016451
   16528:	00016451 	.word	0x00016451
   1652c:	00016451 	.word	0x00016451
   16530:	000165f3 	.word	0x000165f3
   16534:	00016575 	.word	0x00016575
   16538:	000165f3 	.word	0x000165f3
   1653c:	000165f3 	.word	0x000165f3
   16540:	000165f3 	.word	0x000165f3
   16544:	000165f3 	.word	0x000165f3
   16548:	000165bd 	.word	0x000165bd
   1654c:	000165b5 	.word	0x000165b5
   16550:	000165d9 	.word	0x000165d9
   16554:	000165f3 	.word	0x000165f3
   16558:	000165f3 	.word	0x000165f3
   1655c:	000165d9 	.word	0x000165d9
   16560:	000165f3 	.word	0x000165f3
   16564:	000165b5 	.word	0x000165b5
   16568:	000165f3 	.word	0x000165f3
   1656c:	000165f3 	.word	0x000165f3
   16570:	000165b5 	.word	0x000165b5
		conv->specifier_cat = SPECIFIER_SINT;
   16574:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   16578:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1657a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1657e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   16582:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   16584:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   16588:	bf02      	ittt	eq
   1658a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   1658e:	f041 0101 	orreq.w	r1, r1, #1
   16592:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   16596:	2a63      	cmp	r2, #99	; 0x63
   16598:	d131      	bne.n	165fe <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1659a:	3b00      	subs	r3, #0
   1659c:	bf18      	it	ne
   1659e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   165a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   165a4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   165a8:	430b      	orrs	r3, r1
   165aa:	f363 0241 	bfi	r2, r3, #1, #1
   165ae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   165b2:	e6d8      	b.n	16366 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   165b4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   165b8:	2002      	movs	r0, #2
   165ba:	e7de      	b.n	1657a <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   165bc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   165c0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   165c4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   165c8:	2103      	movs	r1, #3
   165ca:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   165ce:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   165d0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   165d4:	4143      	adcs	r3, r0
   165d6:	e7e3      	b.n	165a0 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   165d8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   165dc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   165de:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   165e2:	f361 0202 	bfi	r2, r1, #0, #3
   165e6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   165ea:	bf14      	ite	ne
   165ec:	2301      	movne	r3, #1
   165ee:	2300      	moveq	r3, #0
   165f0:	e7d6      	b.n	165a0 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
   165f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   165f6:	f043 0301 	orr.w	r3, r3, #1
   165fa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   165fe:	2300      	movs	r3, #0
   16600:	e7ce      	b.n	165a0 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
   16602:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   16606:	2a00      	cmp	r2, #0
			width = conv->width_value;
   16608:	bfb4      	ite	lt
   1660a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   1660e:	f04f 39ff 	movge.w	r9, #4294967295
   16612:	e6ba      	b.n	1638a <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
   16614:	079b      	lsls	r3, r3, #30
   16616:	f57f aec7 	bpl.w	163a8 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
   1661a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   1661e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   16622:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   16624:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   16628:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   1662c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   16630:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   16632:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   16636:	d135      	bne.n	166a4 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
   16638:	1ecb      	subs	r3, r1, #3
   1663a:	2b04      	cmp	r3, #4
   1663c:	d822      	bhi.n	16684 <z_cbvprintf_impl+0x45c>
   1663e:	e8df f003 	tbb	[pc, r3]
   16642:	0903      	.short	0x0903
   16644:	2109      	.short	0x2109
   16646:	21          	.byte	0x21
   16647:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   16648:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1664c:	17da      	asrs	r2, r3, #31
   1664e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   16652:	e006      	b.n	16662 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   16654:	3407      	adds	r4, #7
   16656:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1665a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1665e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   16662:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16666:	f013 0603 	ands.w	r6, r3, #3
   1666a:	d059      	beq.n	16720 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
   1666c:	9802      	ldr	r0, [sp, #8]
   1666e:	463b      	mov	r3, r7
   16670:	4652      	mov	r2, sl
   16672:	4659      	mov	r1, fp
   16674:	f010 fb7b 	bl	26d6e <outs>
   16678:	2800      	cmp	r0, #0
   1667a:	f2c0 8146 	blt.w	1690a <z_cbvprintf_impl+0x6e2>
   1667e:	4405      	add	r5, r0
			continue;
   16680:	46ba      	mov	sl, r7
   16682:	e5d9      	b.n	16238 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   16684:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   16688:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1668a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1668e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   16692:	d102      	bne.n	1669a <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
   16694:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
   16698:	e7d8      	b.n	1664c <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
   1669a:	2902      	cmp	r1, #2
   1669c:	d1e1      	bne.n	16662 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
   1669e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   166a2:	e7d3      	b.n	1664c <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   166a4:	2b02      	cmp	r3, #2
   166a6:	d129      	bne.n	166fc <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
   166a8:	1ecb      	subs	r3, r1, #3
   166aa:	2b04      	cmp	r3, #4
   166ac:	d813      	bhi.n	166d6 <z_cbvprintf_impl+0x4ae>
   166ae:	e8df f003 	tbb	[pc, r3]
   166b2:	0a03      	.short	0x0a03
   166b4:	120a      	.short	0x120a
   166b6:	12          	.byte	0x12
   166b7:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   166b8:	6822      	ldr	r2, [r4, #0]
   166ba:	920a      	str	r2, [sp, #40]	; 0x28
   166bc:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   166be:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   166c0:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   166c2:	4604      	mov	r4, r0
   166c4:	e7cd      	b.n	16662 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
   166c6:	1de0      	adds	r0, r4, #7
   166c8:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   166cc:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   166d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   166d4:	e7f5      	b.n	166c2 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
   166d6:	f854 3b04 	ldr.w	r3, [r4], #4
   166da:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   166dc:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   166de:	f04f 0300 	mov.w	r3, #0
   166e2:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   166e4:	d105      	bne.n	166f2 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
   166e6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   166ea:	930a      	str	r3, [sp, #40]	; 0x28
   166ec:	2300      	movs	r3, #0
   166ee:	930b      	str	r3, [sp, #44]	; 0x2c
   166f0:	e7b7      	b.n	16662 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
   166f2:	2902      	cmp	r1, #2
   166f4:	d1b5      	bne.n	16662 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
   166f6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   166fa:	e7f6      	b.n	166ea <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
   166fc:	2b04      	cmp	r3, #4
   166fe:	d109      	bne.n	16714 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   16700:	1de3      	adds	r3, r4, #7
   16702:	f023 0307 	bic.w	r3, r3, #7
   16706:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   1670a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1670e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   16712:	e7a6      	b.n	16662 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   16714:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   16716:	bf04      	itt	eq
   16718:	f854 3b04 	ldreq.w	r3, [r4], #4
   1671c:	930a      	streq	r3, [sp, #40]	; 0x28
   1671e:	e7a0      	b.n	16662 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
   16720:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   16724:	2878      	cmp	r0, #120	; 0x78
   16726:	d8ab      	bhi.n	16680 <z_cbvprintf_impl+0x458>
   16728:	2862      	cmp	r0, #98	; 0x62
   1672a:	d822      	bhi.n	16772 <z_cbvprintf_impl+0x54a>
   1672c:	2825      	cmp	r0, #37	; 0x25
   1672e:	f43f ad8c 	beq.w	1624a <z_cbvprintf_impl+0x22>
   16732:	2858      	cmp	r0, #88	; 0x58
   16734:	d1a4      	bne.n	16680 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   16736:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1673a:	9300      	str	r3, [sp, #0]
   1673c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16740:	ab04      	add	r3, sp, #16
   16742:	aa0c      	add	r2, sp, #48	; 0x30
   16744:	f010 facd 	bl	26ce2 <encode_uint>
   16748:	4682      	mov	sl, r0
			if (precision >= 0) {
   1674a:	f1b8 0f00 	cmp.w	r8, #0
   1674e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   16752:	db0c      	blt.n	1676e <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
   16754:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   16758:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   1675c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   16760:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   16762:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   16766:	d902      	bls.n	1676e <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
   16768:	eba8 0303 	sub.w	r3, r8, r3
   1676c:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   1676e:	4680      	mov	r8, r0
   16770:	e03e      	b.n	167f0 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
   16772:	3863      	subs	r0, #99	; 0x63
   16774:	2815      	cmp	r0, #21
   16776:	d883      	bhi.n	16680 <z_cbvprintf_impl+0x458>
   16778:	a201      	add	r2, pc, #4	; (adr r2, 16780 <z_cbvprintf_impl+0x558>)
   1677a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1677e:	bf00      	nop
   16780:	00016801 	.word	0x00016801
   16784:	00016865 	.word	0x00016865
   16788:	00016681 	.word	0x00016681
   1678c:	00016681 	.word	0x00016681
   16790:	00016681 	.word	0x00016681
   16794:	00016681 	.word	0x00016681
   16798:	00016865 	.word	0x00016865
   1679c:	00016681 	.word	0x00016681
   167a0:	00016681 	.word	0x00016681
   167a4:	00016681 	.word	0x00016681
   167a8:	00016681 	.word	0x00016681
   167ac:	000168bf 	.word	0x000168bf
   167b0:	0001688d 	.word	0x0001688d
   167b4:	00016891 	.word	0x00016891
   167b8:	00016681 	.word	0x00016681
   167bc:	00016681 	.word	0x00016681
   167c0:	000167d9 	.word	0x000167d9
   167c4:	00016681 	.word	0x00016681
   167c8:	0001688d 	.word	0x0001688d
   167cc:	00016681 	.word	0x00016681
   167d0:	00016681 	.word	0x00016681
   167d4:	0001688d 	.word	0x0001688d
			if (precision >= 0) {
   167d8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   167dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   167e0:	db0a      	blt.n	167f8 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
   167e2:	4641      	mov	r1, r8
   167e4:	4650      	mov	r0, sl
   167e6:	f010 fd74 	bl	272d2 <strnlen>
			bpe = bps + len;
   167ea:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   167ee:	2600      	movs	r6, #0
		if (bps == NULL) {
   167f0:	f1ba 0f00 	cmp.w	sl, #0
   167f4:	d10c      	bne.n	16810 <z_cbvprintf_impl+0x5e8>
   167f6:	e743      	b.n	16680 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
   167f8:	4650      	mov	r0, sl
   167fa:	f010 fd63 	bl	272c4 <strlen>
   167fe:	e7f4      	b.n	167ea <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   16800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16802:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   16806:	2600      	movs	r6, #0
			bps = buf;
   16808:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   1680c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   16810:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   16814:	b106      	cbz	r6, 16818 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
   16816:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   16818:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1681c:	06d0      	lsls	r0, r2, #27
   1681e:	d568      	bpl.n	168f2 <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
   16820:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   16822:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   16824:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   16826:	bf48      	it	mi
   16828:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1682a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1682c:	bf48      	it	mi
   1682e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   16830:	f1b9 0f00 	cmp.w	r9, #0
   16834:	dd76      	ble.n	16924 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
   16836:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1683a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1683e:	f3c2 0380 	ubfx	r3, r2, #2, #1
   16842:	9303      	str	r3, [sp, #12]
   16844:	0753      	lsls	r3, r2, #29
   16846:	d46d      	bmi.n	16924 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
   16848:	0650      	lsls	r0, r2, #25
   1684a:	d561      	bpl.n	16910 <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
   1684c:	b146      	cbz	r6, 16860 <z_cbvprintf_impl+0x638>
						OUTC(sign);
   1684e:	9b02      	ldr	r3, [sp, #8]
   16850:	4659      	mov	r1, fp
   16852:	4630      	mov	r0, r6
   16854:	4798      	blx	r3
   16856:	2800      	cmp	r0, #0
   16858:	db57      	blt.n	1690a <z_cbvprintf_impl+0x6e2>
						sign = 0;
   1685a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1685c:	3501      	adds	r5, #1
						sign = 0;
   1685e:	461e      	mov	r6, r3
					pad = '0';
   16860:	2330      	movs	r3, #48	; 0x30
   16862:	e056      	b.n	16912 <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
   16864:	071e      	lsls	r6, r3, #28
   16866:	d40f      	bmi.n	16888 <z_cbvprintf_impl+0x660>
				sign = ' ';
   16868:	f013 0610 	ands.w	r6, r3, #16
   1686c:	bf18      	it	ne
   1686e:	2620      	movne	r6, #32
			sint = value->sint;
   16870:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   16874:	2b00      	cmp	r3, #0
   16876:	f6bf af5e 	bge.w	16736 <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
   1687a:	4252      	negs	r2, r2
   1687c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   16880:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   16884:	262d      	movs	r6, #45	; 0x2d
   16886:	e756      	b.n	16736 <z_cbvprintf_impl+0x50e>
				sign = '+';
   16888:	262b      	movs	r6, #43	; 0x2b
   1688a:	e7f1      	b.n	16870 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
   1688c:	2600      	movs	r6, #0
   1688e:	e752      	b.n	16736 <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
   16890:	980a      	ldr	r0, [sp, #40]	; 0x28
   16892:	b340      	cbz	r0, 168e6 <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   16894:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   16898:	9300      	str	r3, [sp, #0]
   1689a:	aa0c      	add	r2, sp, #48	; 0x30
   1689c:	ab04      	add	r3, sp, #16
   1689e:	2100      	movs	r1, #0
   168a0:	f010 fa1f 	bl	26ce2 <encode_uint>
				conv->altform_0c = true;
   168a4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   168a8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   168ac:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   168b0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   168b4:	4682      	mov	sl, r0
				conv->altform_0c = true;
   168b6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   168ba:	2600      	movs	r6, #0
				goto prec_int_pad0;
   168bc:	e745      	b.n	1674a <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
   168be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   168c0:	2907      	cmp	r1, #7
   168c2:	f63f aedd 	bhi.w	16680 <z_cbvprintf_impl+0x458>
   168c6:	e8df f001 	tbb	[pc, r1]
   168ca:	040c      	.short	0x040c
   168cc:	08080c06 	.word	0x08080c06
   168d0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   168d2:	701d      	strb	r5, [r3, #0]
		break;
   168d4:	e6d4      	b.n	16680 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
   168d6:	801d      	strh	r5, [r3, #0]
		break;
   168d8:	e6d2      	b.n	16680 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   168da:	17ea      	asrs	r2, r5, #31
   168dc:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   168e0:	e6ce      	b.n	16680 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   168e2:	601d      	str	r5, [r3, #0]
		break;
   168e4:	e6cc      	b.n	16680 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
   168e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 169b0 <z_cbvprintf_impl+0x788>
   168ea:	4606      	mov	r6, r0
			bpe = bps + 5;
   168ec:	f10a 0805 	add.w	r8, sl, #5
   168f0:	e78e      	b.n	16810 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
   168f2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   168f4:	bf48      	it	mi
   168f6:	3301      	addmi	r3, #1
   168f8:	e793      	b.n	16822 <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
   168fa:	4618      	mov	r0, r3
   168fc:	9303      	str	r3, [sp, #12]
   168fe:	4659      	mov	r1, fp
   16900:	9b02      	ldr	r3, [sp, #8]
   16902:	4798      	blx	r3
   16904:	2800      	cmp	r0, #0
   16906:	9b03      	ldr	r3, [sp, #12]
   16908:	da04      	bge.n	16914 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
   1690a:	b011      	add	sp, #68	; 0x44
   1690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   16910:	2320      	movs	r3, #32
   16912:	444d      	add	r5, r9
   16914:	464a      	mov	r2, r9
				while (width-- > 0) {
   16916:	2a00      	cmp	r2, #0
   16918:	eba5 0109 	sub.w	r1, r5, r9
   1691c:	f109 39ff 	add.w	r9, r9, #4294967295
   16920:	dceb      	bgt.n	168fa <z_cbvprintf_impl+0x6d2>
   16922:	460d      	mov	r5, r1
		if (sign != 0) {
   16924:	b136      	cbz	r6, 16934 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
   16926:	9b02      	ldr	r3, [sp, #8]
   16928:	4659      	mov	r1, fp
   1692a:	4630      	mov	r0, r6
   1692c:	4798      	blx	r3
   1692e:	2800      	cmp	r0, #0
   16930:	dbeb      	blt.n	1690a <z_cbvprintf_impl+0x6e2>
   16932:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   16934:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   16938:	06d9      	lsls	r1, r3, #27
   1693a:	d401      	bmi.n	16940 <z_cbvprintf_impl+0x718>
   1693c:	071a      	lsls	r2, r3, #28
   1693e:	d506      	bpl.n	1694e <z_cbvprintf_impl+0x726>
				OUTC('0');
   16940:	9b02      	ldr	r3, [sp, #8]
   16942:	4659      	mov	r1, fp
   16944:	2030      	movs	r0, #48	; 0x30
   16946:	4798      	blx	r3
   16948:	2800      	cmp	r0, #0
   1694a:	dbde      	blt.n	1690a <z_cbvprintf_impl+0x6e2>
   1694c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1694e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   16952:	06db      	lsls	r3, r3, #27
   16954:	d507      	bpl.n	16966 <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
   16956:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1695a:	9b02      	ldr	r3, [sp, #8]
   1695c:	4659      	mov	r1, fp
   1695e:	4798      	blx	r3
   16960:	2800      	cmp	r0, #0
   16962:	dbd2      	blt.n	1690a <z_cbvprintf_impl+0x6e2>
   16964:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   16966:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   16968:	442e      	add	r6, r5
   1696a:	1b73      	subs	r3, r6, r5
   1696c:	2b00      	cmp	r3, #0
   1696e:	dc16      	bgt.n	1699e <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
   16970:	9802      	ldr	r0, [sp, #8]
   16972:	4643      	mov	r3, r8
   16974:	4652      	mov	r2, sl
   16976:	4659      	mov	r1, fp
   16978:	f010 f9f9 	bl	26d6e <outs>
   1697c:	2800      	cmp	r0, #0
   1697e:	dbc4      	blt.n	1690a <z_cbvprintf_impl+0x6e2>
   16980:	4405      	add	r5, r0
		while (width > 0) {
   16982:	44a9      	add	r9, r5
   16984:	eba9 0305 	sub.w	r3, r9, r5
   16988:	2b00      	cmp	r3, #0
   1698a:	f77f ae79 	ble.w	16680 <z_cbvprintf_impl+0x458>
			OUTC(' ');
   1698e:	9b02      	ldr	r3, [sp, #8]
   16990:	4659      	mov	r1, fp
   16992:	2020      	movs	r0, #32
   16994:	4798      	blx	r3
   16996:	2800      	cmp	r0, #0
   16998:	dbb7      	blt.n	1690a <z_cbvprintf_impl+0x6e2>
   1699a:	3501      	adds	r5, #1
			--width;
   1699c:	e7f2      	b.n	16984 <z_cbvprintf_impl+0x75c>
				OUTC('0');
   1699e:	9b02      	ldr	r3, [sp, #8]
   169a0:	4659      	mov	r1, fp
   169a2:	2030      	movs	r0, #48	; 0x30
   169a4:	4798      	blx	r3
   169a6:	2800      	cmp	r0, #0
   169a8:	dbaf      	blt.n	1690a <z_cbvprintf_impl+0x6e2>
   169aa:	3501      	adds	r5, #1
   169ac:	e7dd      	b.n	1696a <z_cbvprintf_impl+0x742>
   169ae:	bf00      	nop
   169b0:	0002a753 	.word	0x0002a753

000169b4 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   169b4:	b508      	push	{r3, lr}
	__asm__ volatile(
   169b6:	f04f 0240 	mov.w	r2, #64	; 0x40
   169ba:	f3ef 8311 	mrs	r3, BASEPRI
   169be:	f382 8812 	msr	BASEPRI_MAX, r2
   169c2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   169c6:	f001 f8cd 	bl	17b64 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   169ca:	4803      	ldr	r0, [pc, #12]	; (169d8 <sys_reboot+0x24>)
   169cc:	f00f fffb 	bl	269c6 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   169d0:	f000 fb1e 	bl	17010 <arch_cpu_idle>
   169d4:	e7fc      	b.n	169d0 <sys_reboot+0x1c>
   169d6:	bf00      	nop
   169d8:	0002a759 	.word	0x0002a759

000169dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   169dc:	f009 b84e 	b.w	1fa7c <SystemInit>

000169e0 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   169e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169e4:	e9cd 0100 	strd	r0, r1, [sp]
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
		printk("%c: ", z_log_minimal_level_to_char(level));
   169e8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 16a80 <z_log_minimal_hexdump_print+0xa0>
			printk("   ");
   169ec:	f8df 9094 	ldr.w	r9, [pc, #148]	; 16a84 <z_log_minimal_hexdump_print+0xa4>
{
   169f0:	4616      	mov	r6, r2
	while (size > 0U) {
   169f2:	4614      	mov	r4, r2
   169f4:	9b01      	ldr	r3, [sp, #4]
   169f6:	199d      	adds	r5, r3, r6
   169f8:	1b2d      	subs	r5, r5, r4
   169fa:	b914      	cbnz	r4, 16a02 <z_log_minimal_hexdump_print+0x22>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   169fc:	b003      	add	sp, #12
   169fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   16a02:	9b00      	ldr	r3, [sp, #0]
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   16a04:	4f20      	ldr	r7, [pc, #128]	; (16a88 <z_log_minimal_hexdump_print+0xa8>)
   16a06:	3b01      	subs	r3, #1
   16a08:	2b03      	cmp	r3, #3
   16a0a:	bf96      	itet	ls
   16a0c:	4a1f      	ldrls	r2, [pc, #124]	; (16a8c <z_log_minimal_hexdump_print+0xac>)
   16a0e:	213f      	movhi	r1, #63	; 0x3f
   16a10:	5cd1      	ldrbls	r1, [r2, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   16a12:	4640      	mov	r0, r8
   16a14:	f00f ffd7 	bl	269c6 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16a18:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   16a1c:	455c      	cmp	r4, fp
   16a1e:	d926      	bls.n	16a6e <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   16a20:	f815 100b 	ldrb.w	r1, [r5, fp]
   16a24:	4638      	mov	r0, r7
   16a26:	f00f ffce 	bl	269c6 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16a2a:	f10b 0b01 	add.w	fp, fp, #1
   16a2e:	f1bb 0f08 	cmp.w	fp, #8
   16a32:	d1f3      	bne.n	16a1c <z_log_minimal_hexdump_print+0x3c>
	printk("|");
   16a34:	4816      	ldr	r0, [pc, #88]	; (16a90 <z_log_minimal_hexdump_print+0xb0>)
			printk(" ");
   16a36:	f8df a05c 	ldr.w	sl, [pc, #92]	; 16a94 <z_log_minimal_hexdump_print+0xb4>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   16a3a:	f8df b05c 	ldr.w	fp, [pc, #92]	; 16a98 <z_log_minimal_hexdump_print+0xb8>
	printk("|");
   16a3e:	f00f ffc2 	bl	269c6 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16a42:	2700      	movs	r7, #0
		if (i < length) {
   16a44:	42bc      	cmp	r4, r7
   16a46:	d916      	bls.n	16a76 <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
   16a48:	5de9      	ldrb	r1, [r5, r7]
	return (int)((((unsigned)c) >= ' ') &&
   16a4a:	f1a1 0220 	sub.w	r2, r1, #32
   16a4e:	2a5f      	cmp	r2, #95	; 0x5f
			printk("%c", isprint((int)c) != 0 ? c : '.');
   16a50:	bf28      	it	cs
   16a52:	212e      	movcs	r1, #46	; 0x2e
   16a54:	4658      	mov	r0, fp
   16a56:	f00f ffb6 	bl	269c6 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16a5a:	3701      	adds	r7, #1
   16a5c:	2f08      	cmp	r7, #8
   16a5e:	d1f1      	bne.n	16a44 <z_log_minimal_hexdump_print+0x64>
	printk("\n");
   16a60:	480e      	ldr	r0, [pc, #56]	; (16a9c <z_log_minimal_hexdump_print+0xbc>)
   16a62:	f00f ffb0 	bl	269c6 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   16a66:	2c07      	cmp	r4, #7
   16a68:	d9c8      	bls.n	169fc <z_log_minimal_hexdump_print+0x1c>
		size -= HEXDUMP_BYTES_IN_LINE;
   16a6a:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   16a6c:	e7c2      	b.n	169f4 <z_log_minimal_hexdump_print+0x14>
			printk("   ");
   16a6e:	4648      	mov	r0, r9
   16a70:	f00f ffa9 	bl	269c6 <printk>
   16a74:	e7d9      	b.n	16a2a <z_log_minimal_hexdump_print+0x4a>
			printk(" ");
   16a76:	4650      	mov	r0, sl
   16a78:	f00f ffa5 	bl	269c6 <printk>
   16a7c:	e7ed      	b.n	16a5a <z_log_minimal_hexdump_print+0x7a>
   16a7e:	bf00      	nop
   16a80:	0002a782 	.word	0x0002a782
   16a84:	0002a78d 	.word	0x0002a78d
   16a88:	0002a787 	.word	0x0002a787
   16a8c:	0002a796 	.word	0x0002a796
   16a90:	0002a791 	.word	0x0002a791
   16a94:	0002a78f 	.word	0x0002a78f
   16a98:	0002a793 	.word	0x0002a793
   16a9c:	0002c509 	.word	0x0002c509

00016aa0 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   16aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   16aa2:	2407      	movs	r4, #7
   16aa4:	9402      	str	r4, [sp, #8]
   16aa6:	4c04      	ldr	r4, [pc, #16]	; (16ab8 <read_pnp_id+0x18>)
   16aa8:	9401      	str	r4, [sp, #4]
   16aaa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   16aae:	9400      	str	r4, [sp, #0]
   16ab0:	f011 ff97 	bl	289e2 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   16ab4:	b004      	add	sp, #16
   16ab6:	bd10      	pop	{r4, pc}
   16ab8:	200009a4 	.word	0x200009a4

00016abc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   16abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16ac0:	4605      	mov	r5, r0
   16ac2:	f04f 0340 	mov.w	r3, #64	; 0x40
   16ac6:	f3ef 8611 	mrs	r6, BASEPRI
   16aca:	f383 8812 	msr	BASEPRI_MAX, r3
   16ace:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16ad2:	481d      	ldr	r0, [pc, #116]	; (16b48 <pm_state_notify+0x8c>)
   16ad4:	f00a f956 	bl	20d84 <z_spin_lock_valid>
   16ad8:	b940      	cbnz	r0, 16aec <pm_state_notify+0x30>
   16ada:	491c      	ldr	r1, [pc, #112]	; (16b4c <pm_state_notify+0x90>)
   16adc:	481c      	ldr	r0, [pc, #112]	; (16b50 <pm_state_notify+0x94>)
   16ade:	228e      	movs	r2, #142	; 0x8e
   16ae0:	f010 f962 	bl	26da8 <assert_print>
   16ae4:	4819      	ldr	r0, [pc, #100]	; (16b4c <pm_state_notify+0x90>)
   16ae6:	218e      	movs	r1, #142	; 0x8e
   16ae8:	f010 f957 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   16aec:	4816      	ldr	r0, [pc, #88]	; (16b48 <pm_state_notify+0x8c>)
   16aee:	f00a f967 	bl	20dc0 <z_spin_lock_set_owner>
	return list->head;
   16af2:	4b18      	ldr	r3, [pc, #96]	; (16b54 <pm_state_notify+0x98>)
   16af4:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   16af6:	b19c      	cbz	r4, 16b20 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   16af8:	4f17      	ldr	r7, [pc, #92]	; (16b58 <pm_state_notify+0x9c>)
   16afa:	f8df 8060 	ldr.w	r8, [pc, #96]	; 16b5c <pm_state_notify+0xa0>
   16afe:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   16b02:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   16b06:	2d00      	cmp	r5, #0
   16b08:	bf08      	it	eq
   16b0a:	4613      	moveq	r3, r2
		if (callback) {
   16b0c:	b12b      	cbz	r3, 16b1a <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   16b0e:	f898 2014 	ldrb.w	r2, [r8, #20]
   16b12:	fb09 f202 	mul.w	r2, r9, r2
   16b16:	5cb8      	ldrb	r0, [r7, r2]
   16b18:	4798      	blx	r3
	return node->next;
   16b1a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   16b1c:	2c00      	cmp	r4, #0
   16b1e:	d1f0      	bne.n	16b02 <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16b20:	4809      	ldr	r0, [pc, #36]	; (16b48 <pm_state_notify+0x8c>)
   16b22:	f00a f93d 	bl	20da0 <z_spin_unlock_valid>
   16b26:	b940      	cbnz	r0, 16b3a <pm_state_notify+0x7e>
   16b28:	4908      	ldr	r1, [pc, #32]	; (16b4c <pm_state_notify+0x90>)
   16b2a:	4809      	ldr	r0, [pc, #36]	; (16b50 <pm_state_notify+0x94>)
   16b2c:	22b9      	movs	r2, #185	; 0xb9
   16b2e:	f010 f93b 	bl	26da8 <assert_print>
   16b32:	4806      	ldr	r0, [pc, #24]	; (16b4c <pm_state_notify+0x90>)
   16b34:	21b9      	movs	r1, #185	; 0xb9
   16b36:	f010 f930 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   16b3a:	f386 8811 	msr	BASEPRI, r6
   16b3e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   16b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16b46:	bf00      	nop
   16b48:	20003624 	.word	0x20003624
   16b4c:	0002a705 	.word	0x0002a705
   16b50:	0002a576 	.word	0x0002a576
   16b54:	20003628 	.word	0x20003628
   16b58:	2000363c 	.word	0x2000363c
   16b5c:	20003f4c 	.word	0x20003f4c

00016b60 <pm_system_resume>:

void pm_system_resume(void)
{
   16b60:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   16b62:	4b1a      	ldr	r3, [pc, #104]	; (16bcc <pm_system_resume+0x6c>)
   16b64:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16b66:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16b6a:	f004 031f 	and.w	r3, r4, #31
   16b6e:	2201      	movs	r2, #1
   16b70:	409a      	lsls	r2, r3
   16b72:	4b17      	ldr	r3, [pc, #92]	; (16bd0 <pm_system_resume+0x70>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16b74:	0961      	lsrs	r1, r4, #5
   16b76:	43d0      	mvns	r0, r2
   16b78:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16b7c:	e853 1f00 	ldrex	r1, [r3]
   16b80:	ea01 0500 	and.w	r5, r1, r0
   16b84:	e843 5c00 	strex	ip, r5, [r3]
   16b88:	f1bc 0f00 	cmp.w	ip, #0
   16b8c:	d1f6      	bne.n	16b7c <pm_system_resume+0x1c>
   16b8e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   16b92:	4211      	tst	r1, r2
   16b94:	d013      	beq.n	16bbe <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   16b96:	4b0f      	ldr	r3, [pc, #60]	; (16bd4 <pm_system_resume+0x74>)
   16b98:	4d0f      	ldr	r5, [pc, #60]	; (16bd8 <pm_system_resume+0x78>)
   16b9a:	b18b      	cbz	r3, 16bc0 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   16b9c:	230c      	movs	r3, #12
   16b9e:	4363      	muls	r3, r4
   16ba0:	18ea      	adds	r2, r5, r3
   16ba2:	5ce8      	ldrb	r0, [r5, r3]
   16ba4:	7851      	ldrb	r1, [r2, #1]
   16ba6:	f010 fbf5 	bl	27394 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   16baa:	2000      	movs	r0, #0
   16bac:	f7ff ff86 	bl	16abc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   16bb0:	230c      	movs	r3, #12
   16bb2:	435c      	muls	r4, r3
   16bb4:	192a      	adds	r2, r5, r4
   16bb6:	2300      	movs	r3, #0
   16bb8:	512b      	str	r3, [r5, r4]
   16bba:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   16bbe:	bd38      	pop	{r3, r4, r5, pc}
   16bc0:	f383 8811 	msr	BASEPRI, r3
   16bc4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   16bc8:	e7ef      	b.n	16baa <pm_system_resume+0x4a>
   16bca:	bf00      	nop
   16bcc:	20003f4c 	.word	0x20003f4c
   16bd0:	20003648 	.word	0x20003648
   16bd4:	00027395 	.word	0x00027395
   16bd8:	2000363c 	.word	0x2000363c

00016bdc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   16bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   16be0:	4b42      	ldr	r3, [pc, #264]	; (16cec <pm_system_suspend+0x110>)
{
   16be2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   16be4:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   16be6:	f04f 0340 	mov.w	r3, #64	; 0x40
   16bea:	f3ef 8811 	mrs	r8, BASEPRI
   16bee:	f383 8812 	msr	BASEPRI_MAX, r3
   16bf2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16bf6:	483e      	ldr	r0, [pc, #248]	; (16cf0 <pm_system_suspend+0x114>)
   16bf8:	f00a f8c4 	bl	20d84 <z_spin_lock_valid>
   16bfc:	b940      	cbnz	r0, 16c10 <pm_system_suspend+0x34>
   16bfe:	493d      	ldr	r1, [pc, #244]	; (16cf4 <pm_system_suspend+0x118>)
   16c00:	483d      	ldr	r0, [pc, #244]	; (16cf8 <pm_system_suspend+0x11c>)
   16c02:	228e      	movs	r2, #142	; 0x8e
   16c04:	f010 f8d0 	bl	26da8 <assert_print>
   16c08:	483a      	ldr	r0, [pc, #232]	; (16cf4 <pm_system_suspend+0x118>)
   16c0a:	218e      	movs	r1, #142	; 0x8e
   16c0c:	f010 f8c5 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   16c10:	4837      	ldr	r0, [pc, #220]	; (16cf0 <pm_system_suspend+0x114>)
   16c12:	4e3a      	ldr	r6, [pc, #232]	; (16cfc <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   16c14:	240c      	movs	r4, #12
   16c16:	f00a f8d3 	bl	20dc0 <z_spin_lock_set_owner>
   16c1a:	436c      	muls	r4, r5
   16c1c:	4b38      	ldr	r3, [pc, #224]	; (16d00 <pm_system_suspend+0x124>)
   16c1e:	5d19      	ldrb	r1, [r3, r4]
   16c20:	191a      	adds	r2, r3, r4
   16c22:	2900      	cmp	r1, #0
   16c24:	d056      	beq.n	16cd4 <pm_system_suspend+0xf8>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   16c26:	ca07      	ldmia	r2, {r0, r1, r2}
   16c28:	eb06 0c04 	add.w	ip, r6, r4
   16c2c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   16c30:	2200      	movs	r2, #0
   16c32:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16c34:	482e      	ldr	r0, [pc, #184]	; (16cf0 <pm_system_suspend+0x114>)
   16c36:	f00a f8b3 	bl	20da0 <z_spin_unlock_valid>
   16c3a:	b940      	cbnz	r0, 16c4e <pm_system_suspend+0x72>
   16c3c:	492d      	ldr	r1, [pc, #180]	; (16cf4 <pm_system_suspend+0x118>)
   16c3e:	482e      	ldr	r0, [pc, #184]	; (16cf8 <pm_system_suspend+0x11c>)
   16c40:	22b9      	movs	r2, #185	; 0xb9
   16c42:	f010 f8b1 	bl	26da8 <assert_print>
   16c46:	482b      	ldr	r0, [pc, #172]	; (16cf4 <pm_system_suspend+0x118>)
   16c48:	21b9      	movs	r1, #185	; 0xb9
   16c4a:	f010 f8a6 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   16c4e:	f388 8811 	msr	BASEPRI, r8
   16c52:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   16c56:	230c      	movs	r3, #12
   16c58:	436b      	muls	r3, r5
   16c5a:	18f2      	adds	r2, r6, r3
   16c5c:	5cf0      	ldrb	r0, [r6, r3]
   16c5e:	b3b8      	cbz	r0, 16cd0 <pm_system_suspend+0xf4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   16c60:	1c7b      	adds	r3, r7, #1
   16c62:	d00f      	beq.n	16c84 <pm_system_suspend+0xa8>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   16c64:	f8d2 c008 	ldr.w	ip, [r2, #8]
   16c68:	4826      	ldr	r0, [pc, #152]	; (16d04 <pm_system_suspend+0x128>)
   16c6a:	4a27      	ldr	r2, [pc, #156]	; (16d08 <pm_system_suspend+0x12c>)
   16c6c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   16c70:	2100      	movs	r1, #0
   16c72:	2300      	movs	r3, #0
   16c74:	fbec 0104 	umlal	r0, r1, ip, r4
   16c78:	f7e9 fa42 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   16c7c:	2101      	movs	r1, #1
   16c7e:	1a38      	subs	r0, r7, r0
   16c80:	f00c fa22 	bl	230c8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   16c84:	f00b f942 	bl	21f0c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   16c88:	2001      	movs	r0, #1
   16c8a:	f7ff ff17 	bl	16abc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c8e:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16c92:	f005 021f 	and.w	r2, r5, #31
   16c96:	2101      	movs	r1, #1
   16c98:	4091      	lsls	r1, r2
   16c9a:	4a1c      	ldr	r2, [pc, #112]	; (16d0c <pm_system_suspend+0x130>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16c9c:	096b      	lsrs	r3, r5, #5
   16c9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16ca2:	e853 2f00 	ldrex	r2, [r3]
   16ca6:	430a      	orrs	r2, r1
   16ca8:	e843 2000 	strex	r0, r2, [r3]
   16cac:	2800      	cmp	r0, #0
   16cae:	d1f8      	bne.n	16ca2 <pm_system_suspend+0xc6>
   16cb0:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   16cb4:	4b16      	ldr	r3, [pc, #88]	; (16d10 <pm_system_suspend+0x134>)
   16cb6:	b133      	cbz	r3, 16cc6 <pm_system_suspend+0xea>
		pm_state_set(info->state, info->substate_id);
   16cb8:	200c      	movs	r0, #12
   16cba:	4368      	muls	r0, r5
   16cbc:	1833      	adds	r3, r6, r0
   16cbe:	5c30      	ldrb	r0, [r6, r0]
   16cc0:	7859      	ldrb	r1, [r3, #1]
   16cc2:	f010 fb5b 	bl	2737c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   16cc6:	f7ff ff4b 	bl	16b60 <pm_system_resume>
	k_sched_unlock();
   16cca:	f00b fd7d 	bl	227c8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   16cce:	2001      	movs	r0, #1
}
   16cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   16cd4:	4639      	mov	r1, r7
   16cd6:	4628      	mov	r0, r5
   16cd8:	f000 f81c 	bl	16d14 <pm_policy_next_state>
		if (info != NULL) {
   16cdc:	2800      	cmp	r0, #0
   16cde:	d0a9      	beq.n	16c34 <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
   16ce0:	c807      	ldmia	r0, {r0, r1, r2}
   16ce2:	4434      	add	r4, r6
   16ce4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   16ce8:	e7a4      	b.n	16c34 <pm_system_suspend+0x58>
   16cea:	bf00      	nop
   16cec:	20003f4c 	.word	0x20003f4c
   16cf0:	20003620 	.word	0x20003620
   16cf4:	0002a705 	.word	0x0002a705
   16cf8:	0002a576 	.word	0x0002a576
   16cfc:	2000363c 	.word	0x2000363c
   16d00:	20003630 	.word	0x20003630
   16d04:	000f423f 	.word	0x000f423f
   16d08:	000f4240 	.word	0x000f4240
   16d0c:	20003648 	.word	0x20003648
   16d10:	0002737d 	.word	0x0002737d

00016d14 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   16d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d18:	b085      	sub	sp, #20
   16d1a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   16d1c:	a903      	add	r1, sp, #12
   16d1e:	f000 f841 	bl	16da4 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   16d22:	9b03      	ldr	r3, [sp, #12]
   16d24:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   16d26:	4b1c      	ldr	r3, [pc, #112]	; (16d98 <pm_policy_next_state+0x84>)
   16d28:	f8df 8070 	ldr.w	r8, [pc, #112]	; 16d9c <pm_policy_next_state+0x88>
   16d2c:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   16d30:	1e44      	subs	r4, r0, #1
   16d32:	b224      	sxth	r4, r4
   16d34:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   16d38:	f04f 0b00 	mov.w	fp, #0
   16d3c:	1c63      	adds	r3, r4, #1
   16d3e:	d104      	bne.n	16d4a <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   16d40:	2500      	movs	r5, #0
}
   16d42:	4628      	mov	r0, r5
   16d44:	b005      	add	sp, #20
   16d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   16d4a:	9b01      	ldr	r3, [sp, #4]
   16d4c:	4a14      	ldr	r2, [pc, #80]	; (16da0 <pm_policy_next_state+0x8c>)
   16d4e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   16d52:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   16d56:	46c4      	mov	ip, r8
   16d58:	6868      	ldr	r0, [r5, #4]
   16d5a:	4659      	mov	r1, fp
   16d5c:	fbe0 c107 	umlal	ip, r1, r0, r7
   16d60:	2300      	movs	r3, #0
   16d62:	4660      	mov	r0, ip
   16d64:	f7e9 f9cc 	bl	100 <__aeabi_uldivmod>
   16d68:	4681      	mov	r9, r0
   16d6a:	68a8      	ldr	r0, [r5, #8]
   16d6c:	4a0c      	ldr	r2, [pc, #48]	; (16da0 <pm_policy_next_state+0x8c>)
   16d6e:	46c4      	mov	ip, r8
   16d70:	4659      	mov	r1, fp
   16d72:	fbe0 c107 	umlal	ip, r1, r0, r7
   16d76:	2300      	movs	r3, #0
   16d78:	4660      	mov	r0, ip
   16d7a:	f7e9 f9c1 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   16d7e:	f1ba 3fff 	cmp.w	sl, #4294967295
   16d82:	d001      	beq.n	16d88 <pm_policy_next_state+0x74>
   16d84:	4582      	cmp	sl, r0
   16d86:	d904      	bls.n	16d92 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   16d88:	1c72      	adds	r2, r6, #1
   16d8a:	d0da      	beq.n	16d42 <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   16d8c:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   16d8e:	42b0      	cmp	r0, r6
   16d90:	d9d7      	bls.n	16d42 <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   16d92:	3c01      	subs	r4, #1
   16d94:	b224      	sxth	r4, r4
   16d96:	e7d1      	b.n	16d3c <pm_policy_next_state+0x28>
   16d98:	200006b8 	.word	0x200006b8
   16d9c:	000f423f 	.word	0x000f423f
   16da0:	000f4240 	.word	0x000f4240

00016da4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   16da4:	b908      	cbnz	r0, 16daa <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   16da6:	4b02      	ldr	r3, [pc, #8]	; (16db0 <pm_state_cpu_get_all+0xc>)
   16da8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   16daa:	2000      	movs	r0, #0
   16dac:	4770      	bx	lr
   16dae:	bf00      	nop
   16db0:	00029c60 	.word	0x00029c60

00016db4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   16db4:	4904      	ldr	r1, [pc, #16]	; (16dc8 <sub_bytes+0x14>)
   16db6:	1e43      	subs	r3, r0, #1
   16db8:	300f      	adds	r0, #15
   16dba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16dbe:	5c8a      	ldrb	r2, [r1, r2]
   16dc0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   16dc2:	4283      	cmp	r3, r0
   16dc4:	d1f9      	bne.n	16dba <sub_bytes+0x6>
	}
}
   16dc6:	4770      	bx	lr
   16dc8:	0002a7cb 	.word	0x0002a7cb

00016dcc <tc_aes128_set_encrypt_key>:
{
   16dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   16dce:	4e26      	ldr	r6, [pc, #152]	; (16e68 <tc_aes128_set_encrypt_key+0x9c>)
{
   16dd0:	4607      	mov	r7, r0
   16dd2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   16dd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   16dd6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   16dd8:	ad01      	add	r5, sp, #4
   16dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16ddc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16de0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16de4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   16de8:	4638      	mov	r0, r7
   16dea:	2f00      	cmp	r7, #0
   16dec:	d038      	beq.n	16e60 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   16dee:	2c00      	cmp	r4, #0
   16df0:	d038      	beq.n	16e64 <tc_aes128_set_encrypt_key+0x98>
   16df2:	1f38      	subs	r0, r7, #4
   16df4:	4621      	mov	r1, r4
   16df6:	4602      	mov	r2, r0
   16df8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   16dfa:	784b      	ldrb	r3, [r1, #1]
   16dfc:	780d      	ldrb	r5, [r1, #0]
   16dfe:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   16e00:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   16e04:	78cd      	ldrb	r5, [r1, #3]
   16e06:	432b      	orrs	r3, r5
   16e08:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   16e0a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   16e0c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   16e10:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   16e12:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   16e16:	d1f0      	bne.n	16dfa <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   16e18:	4c14      	ldr	r4, [pc, #80]	; (16e6c <tc_aes128_set_encrypt_key+0xa0>)
   16e1a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   16e1c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   16e1e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   16e20:	d116      	bne.n	16e50 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   16e22:	f3c3 4207 	ubfx	r2, r3, #16, #8
   16e26:	5ca5      	ldrb	r5, [r4, r2]
   16e28:	0e1a      	lsrs	r2, r3, #24
   16e2a:	5ca2      	ldrb	r2, [r4, r2]
   16e2c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   16e30:	f3c3 2507 	ubfx	r5, r3, #8, #8
   16e34:	b2db      	uxtb	r3, r3
   16e36:	5d65      	ldrb	r5, [r4, r5]
   16e38:	5ce3      	ldrb	r3, [r4, r3]
   16e3a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   16e3e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   16e42:	ad0c      	add	r5, sp, #48	; 0x30
   16e44:	f021 0303 	bic.w	r3, r1, #3
   16e48:	442b      	add	r3, r5
   16e4a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   16e4e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   16e50:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   16e54:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   16e56:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   16e58:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   16e5a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   16e5c:	d1de      	bne.n	16e1c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   16e5e:	2001      	movs	r0, #1
}
   16e60:	b00d      	add	sp, #52	; 0x34
   16e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   16e64:	4620      	mov	r0, r4
   16e66:	e7fb      	b.n	16e60 <tc_aes128_set_encrypt_key+0x94>
   16e68:	00029b40 	.word	0x00029b40
   16e6c:	0002a7cb 	.word	0x0002a7cb

00016e70 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   16e70:	4801      	ldr	r0, [pc, #4]	; (16e78 <nrf_cc3xx_platform_abort_init+0x8>)
   16e72:	f00d b915 	b.w	240a0 <nrf_cc3xx_platform_set_abort>
   16e76:	bf00      	nop
   16e78:	00029c60 	.word	0x00029c60

00016e7c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16e7c:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   16e7e:	4604      	mov	r4, r0
   16e80:	b918      	cbnz	r0, 16e8a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   16e82:	4b0d      	ldr	r3, [pc, #52]	; (16eb8 <mutex_free_platform+0x3c>)
   16e84:	480d      	ldr	r0, [pc, #52]	; (16ebc <mutex_free_platform+0x40>)
   16e86:	685b      	ldr	r3, [r3, #4]
   16e88:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   16e8a:	6861      	ldr	r1, [r4, #4]
   16e8c:	2908      	cmp	r1, #8
   16e8e:	d00d      	beq.n	16eac <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16e90:	f031 0304 	bics.w	r3, r1, #4
   16e94:	d00a      	beq.n	16eac <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   16e96:	f011 0102 	ands.w	r1, r1, #2
   16e9a:	d008      	beq.n	16eae <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   16e9c:	4808      	ldr	r0, [pc, #32]	; (16ec0 <mutex_free_platform+0x44>)
   16e9e:	4621      	mov	r1, r4
   16ea0:	f009 fe02 	bl	20aa8 <k_mem_slab_free>
        mutex->mutex = NULL;
   16ea4:	2300      	movs	r3, #0
   16ea6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   16ea8:	2300      	movs	r3, #0
   16eaa:	6063      	str	r3, [r4, #4]
}
   16eac:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   16eae:	6820      	ldr	r0, [r4, #0]
   16eb0:	2214      	movs	r2, #20
   16eb2:	f010 fa57 	bl	27364 <memset>
   16eb6:	e7f7      	b.n	16ea8 <mutex_free_platform+0x2c>
   16eb8:	20000874 	.word	0x20000874
   16ebc:	0002a8cb 	.word	0x0002a8cb
   16ec0:	2000364c 	.word	0x2000364c

00016ec4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16ec4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   16ec6:	b308      	cbz	r0, 16f0c <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   16ec8:	6843      	ldr	r3, [r0, #4]
   16eca:	2b04      	cmp	r3, #4
   16ecc:	d110      	bne.n	16ef0 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16ece:	2201      	movs	r2, #1
   16ed0:	6803      	ldr	r3, [r0, #0]
   16ed2:	f3bf 8f5b 	dmb	ish
   16ed6:	e853 1f00 	ldrex	r1, [r3]
   16eda:	2900      	cmp	r1, #0
   16edc:	d103      	bne.n	16ee6 <mutex_lock_platform+0x22>
   16ede:	e843 2000 	strex	r0, r2, [r3]
   16ee2:	2800      	cmp	r0, #0
   16ee4:	d1f7      	bne.n	16ed6 <mutex_lock_platform+0x12>
   16ee6:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16eea:	d10b      	bne.n	16f04 <mutex_lock_platform+0x40>
   16eec:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   16eee:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16ef0:	b153      	cbz	r3, 16f08 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   16ef2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   16ef4:	f04f 32ff 	mov.w	r2, #4294967295
   16ef8:	f04f 33ff 	mov.w	r3, #4294967295
   16efc:	f009 ff96 	bl	20e2c <z_impl_k_mutex_lock>
        if (ret == 0) {
   16f00:	2800      	cmp	r0, #0
   16f02:	d0f3      	beq.n	16eec <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16f04:	4803      	ldr	r0, [pc, #12]	; (16f14 <mutex_lock_platform+0x50>)
   16f06:	e7f2      	b.n	16eee <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   16f08:	4803      	ldr	r0, [pc, #12]	; (16f18 <mutex_lock_platform+0x54>)
   16f0a:	e7f0      	b.n	16eee <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   16f0c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16f10:	e7ed      	b.n	16eee <mutex_lock_platform+0x2a>
   16f12:	bf00      	nop
   16f14:	ffff8fe9 	.word	0xffff8fe9
   16f18:	ffff8fea 	.word	0xffff8fea

00016f1c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16f1c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   16f1e:	b1d0      	cbz	r0, 16f56 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   16f20:	6843      	ldr	r3, [r0, #4]
   16f22:	2b04      	cmp	r3, #4
   16f24:	d111      	bne.n	16f4a <mutex_unlock_platform+0x2e>
   16f26:	2200      	movs	r2, #0
   16f28:	6803      	ldr	r3, [r0, #0]
   16f2a:	f3bf 8f5b 	dmb	ish
   16f2e:	e853 1f00 	ldrex	r1, [r3]
   16f32:	2901      	cmp	r1, #1
   16f34:	d103      	bne.n	16f3e <mutex_unlock_platform+0x22>
   16f36:	e843 2000 	strex	r0, r2, [r3]
   16f3a:	2800      	cmp	r0, #0
   16f3c:	d1f7      	bne.n	16f2e <mutex_unlock_platform+0x12>
   16f3e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16f42:	4807      	ldr	r0, [pc, #28]	; (16f60 <mutex_unlock_platform+0x44>)
   16f44:	bf08      	it	eq
   16f46:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   16f48:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16f4a:	b13b      	cbz	r3, 16f5c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   16f4c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   16f4e:	f00a f83f 	bl	20fd0 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   16f52:	2000      	movs	r0, #0
   16f54:	e7f8      	b.n	16f48 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   16f56:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16f5a:	e7f5      	b.n	16f48 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   16f5c:	4801      	ldr	r0, [pc, #4]	; (16f64 <mutex_unlock_platform+0x48>)
   16f5e:	e7f3      	b.n	16f48 <mutex_unlock_platform+0x2c>
   16f60:	ffff8fe9 	.word	0xffff8fe9
   16f64:	ffff8fea 	.word	0xffff8fea

00016f68 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16f68:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   16f6a:	4604      	mov	r4, r0
   16f6c:	b918      	cbnz	r0, 16f76 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   16f6e:	4b16      	ldr	r3, [pc, #88]	; (16fc8 <mutex_init_platform+0x60>)
   16f70:	4816      	ldr	r0, [pc, #88]	; (16fcc <mutex_init_platform+0x64>)
   16f72:	685b      	ldr	r3, [r3, #4]
   16f74:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   16f76:	6863      	ldr	r3, [r4, #4]
   16f78:	2b04      	cmp	r3, #4
   16f7a:	d023      	beq.n	16fc4 <mutex_init_platform+0x5c>
   16f7c:	2b08      	cmp	r3, #8
   16f7e:	d021      	beq.n	16fc4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   16f80:	b9cb      	cbnz	r3, 16fb6 <mutex_init_platform+0x4e>
   16f82:	6823      	ldr	r3, [r4, #0]
   16f84:	b9bb      	cbnz	r3, 16fb6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   16f86:	4812      	ldr	r0, [pc, #72]	; (16fd0 <mutex_init_platform+0x68>)
   16f88:	f04f 32ff 	mov.w	r2, #4294967295
   16f8c:	f04f 33ff 	mov.w	r3, #4294967295
   16f90:	4621      	mov	r1, r4
   16f92:	f009 fd2f 	bl	209f4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   16f96:	b908      	cbnz	r0, 16f9c <mutex_init_platform+0x34>
   16f98:	6823      	ldr	r3, [r4, #0]
   16f9a:	b91b      	cbnz	r3, 16fa4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   16f9c:	4b0a      	ldr	r3, [pc, #40]	; (16fc8 <mutex_init_platform+0x60>)
   16f9e:	480d      	ldr	r0, [pc, #52]	; (16fd4 <mutex_init_platform+0x6c>)
   16fa0:	685b      	ldr	r3, [r3, #4]
   16fa2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   16fa4:	6820      	ldr	r0, [r4, #0]
   16fa6:	2214      	movs	r2, #20
   16fa8:	2100      	movs	r1, #0
   16faa:	f010 f9db 	bl	27364 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   16fae:	6863      	ldr	r3, [r4, #4]
   16fb0:	f043 0302 	orr.w	r3, r3, #2
   16fb4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   16fb6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   16fb8:	f012 f9eb 	bl	29392 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   16fbc:	6863      	ldr	r3, [r4, #4]
   16fbe:	f043 0301 	orr.w	r3, r3, #1
   16fc2:	6063      	str	r3, [r4, #4]
}
   16fc4:	bd10      	pop	{r4, pc}
   16fc6:	bf00      	nop
   16fc8:	20000874 	.word	0x20000874
   16fcc:	0002a8cb 	.word	0x0002a8cb
   16fd0:	2000364c 	.word	0x2000364c
   16fd4:	0002a8f1 	.word	0x0002a8f1

00016fd8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   16fd8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   16fda:	4906      	ldr	r1, [pc, #24]	; (16ff4 <nrf_cc3xx_platform_mutex_init+0x1c>)
   16fdc:	4806      	ldr	r0, [pc, #24]	; (16ff8 <nrf_cc3xx_platform_mutex_init+0x20>)
   16fde:	2340      	movs	r3, #64	; 0x40
   16fe0:	2214      	movs	r2, #20
   16fe2:	f012 f99e 	bl	29322 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   16fe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   16fea:	4904      	ldr	r1, [pc, #16]	; (16ffc <nrf_cc3xx_platform_mutex_init+0x24>)
   16fec:	4804      	ldr	r0, [pc, #16]	; (17000 <nrf_cc3xx_platform_mutex_init+0x28>)
   16fee:	f00d b90b 	b.w	24208 <nrf_cc3xx_platform_set_mutexes>
   16ff2:	bf00      	nop
   16ff4:	2000366c 	.word	0x2000366c
   16ff8:	2000364c 	.word	0x2000364c
   16ffc:	00029c78 	.word	0x00029c78
   17000:	00029c68 	.word	0x00029c68

00017004 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   17004:	4901      	ldr	r1, [pc, #4]	; (1700c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   17006:	2210      	movs	r2, #16
	str	r2, [r1]
   17008:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1700a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1700c:	e000ed10 	.word	0xe000ed10

00017010 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   17010:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   17012:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   17014:	f380 8811 	msr	BASEPRI, r0
	isb
   17018:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1701c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   17020:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   17022:	b662      	cpsie	i
	isb
   17024:	f3bf 8f6f 	isb	sy

	bx	lr
   17028:	4770      	bx	lr
   1702a:	bf00      	nop

0001702c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1702c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1702e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   17030:	f381 8811 	msr	BASEPRI, r1

	wfe
   17034:	bf20      	wfe

	msr	BASEPRI, r0
   17036:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1703a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1703c:	4770      	bx	lr
   1703e:	bf00      	nop

00017040 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17040:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17042:	4605      	mov	r5, r0

	if (esf != NULL) {
   17044:	460c      	mov	r4, r1
   17046:	b1c9      	cbz	r1, 1707c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   17048:	688b      	ldr	r3, [r1, #8]
   1704a:	9300      	str	r3, [sp, #0]
   1704c:	e9d1 2300 	ldrd	r2, r3, [r1]
   17050:	480e      	ldr	r0, [pc, #56]	; (1708c <z_arm_fatal_error+0x4c>)
   17052:	2145      	movs	r1, #69	; 0x45
   17054:	f00f feb6 	bl	26dc4 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   17058:	6963      	ldr	r3, [r4, #20]
   1705a:	9300      	str	r3, [sp, #0]
   1705c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   17060:	480b      	ldr	r0, [pc, #44]	; (17090 <z_arm_fatal_error+0x50>)
   17062:	2145      	movs	r1, #69	; 0x45
   17064:	f00f feae 	bl	26dc4 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   17068:	69e2      	ldr	r2, [r4, #28]
   1706a:	480a      	ldr	r0, [pc, #40]	; (17094 <z_arm_fatal_error+0x54>)
   1706c:	2145      	movs	r1, #69	; 0x45
   1706e:	f00f fea9 	bl	26dc4 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   17072:	69a2      	ldr	r2, [r4, #24]
   17074:	4808      	ldr	r0, [pc, #32]	; (17098 <z_arm_fatal_error+0x58>)
   17076:	2145      	movs	r1, #69	; 0x45
   17078:	f00f fea4 	bl	26dc4 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1707c:	4621      	mov	r1, r4
   1707e:	4628      	mov	r0, r5
}
   17080:	b003      	add	sp, #12
   17082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   17086:	f009 ba71 	b.w	2056c <z_fatal_error>
   1708a:	bf00      	nop
   1708c:	0002a91e 	.word	0x0002a91e
   17090:	0002a952 	.word	0x0002a952
   17094:	0002a986 	.word	0x0002a986
   17098:	0002a99a 	.word	0x0002a99a

0001709c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1709c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1709e:	2b00      	cmp	r3, #0
   170a0:	db08      	blt.n	170b4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   170a2:	2201      	movs	r2, #1
   170a4:	f000 001f 	and.w	r0, r0, #31
   170a8:	fa02 f000 	lsl.w	r0, r2, r0
   170ac:	095b      	lsrs	r3, r3, #5
   170ae:	4a02      	ldr	r2, [pc, #8]	; (170b8 <arch_irq_enable+0x1c>)
   170b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   170b4:	4770      	bx	lr
   170b6:	bf00      	nop
   170b8:	e000e100 	.word	0xe000e100

000170bc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   170bc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   170be:	2b00      	cmp	r3, #0
   170c0:	db0d      	blt.n	170de <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   170c2:	2201      	movs	r2, #1
   170c4:	095b      	lsrs	r3, r3, #5
   170c6:	f000 001f 	and.w	r0, r0, #31
   170ca:	fa02 f000 	lsl.w	r0, r2, r0
   170ce:	3320      	adds	r3, #32
   170d0:	4a03      	ldr	r2, [pc, #12]	; (170e0 <arch_irq_disable+0x24>)
   170d2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   170d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   170da:	f3bf 8f6f 	isb	sy
}
   170de:	4770      	bx	lr
   170e0:	e000e100 	.word	0xe000e100

000170e4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   170e4:	4b05      	ldr	r3, [pc, #20]	; (170fc <arch_irq_is_enabled+0x18>)
   170e6:	0942      	lsrs	r2, r0, #5
   170e8:	f000 001f 	and.w	r0, r0, #31
   170ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   170f0:	2301      	movs	r3, #1
   170f2:	fa03 f000 	lsl.w	r0, r3, r0
}
   170f6:	4010      	ands	r0, r2
   170f8:	4770      	bx	lr
   170fa:	bf00      	nop
   170fc:	e000e100 	.word	0xe000e100

00017100 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   17100:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   17102:	07d3      	lsls	r3, r2, #31
{
   17104:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   17106:	d41e      	bmi.n	17146 <z_arm_irq_priority_set+0x46>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   17108:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1710a:	2c07      	cmp	r4, #7
   1710c:	d908      	bls.n	17120 <z_arm_irq_priority_set+0x20>
   1710e:	490f      	ldr	r1, [pc, #60]	; (1714c <z_arm_irq_priority_set+0x4c>)
   17110:	480f      	ldr	r0, [pc, #60]	; (17150 <z_arm_irq_priority_set+0x50>)
   17112:	225b      	movs	r2, #91	; 0x5b
   17114:	f00f fe48 	bl	26da8 <assert_print>
   17118:	480c      	ldr	r0, [pc, #48]	; (1714c <z_arm_irq_priority_set+0x4c>)
   1711a:	215b      	movs	r1, #91	; 0x5b
   1711c:	f00f fe3d 	bl	26d9a <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   17120:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   17122:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17124:	bfac      	ite	ge
   17126:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1712a:	4b0a      	ldrlt	r3, [pc, #40]	; (17154 <z_arm_irq_priority_set+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1712c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17130:	bfb8      	it	lt
   17132:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17136:	b2e4      	uxtb	r4, r4
   17138:	bfaa      	itet	ge
   1713a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1713e:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17140:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   17144:	bd38      	pop	{r3, r4, r5, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   17146:	2400      	movs	r4, #0
   17148:	e7ea      	b.n	17120 <z_arm_irq_priority_set+0x20>
   1714a:	bf00      	nop
   1714c:	0002a9cd 	.word	0x0002a9cd
   17150:	0002a576 	.word	0x0002a576
   17154:	e000ed14 	.word	0xe000ed14

00017158 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   17158:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1715a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1715c:	4b04      	ldr	r3, [pc, #16]	; (17170 <_arch_isr_direct_pm+0x18>)
   1715e:	699a      	ldr	r2, [r3, #24]
   17160:	b11a      	cbz	r2, 1716a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   17162:	2200      	movs	r2, #0
   17164:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   17166:	f012 f905 	bl	29374 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1716a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1716c:	bd08      	pop	{r3, pc}
   1716e:	bf00      	nop
   17170:	20003f4c 	.word	0x20003f4c

00017174 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   17174:	bf30      	wfi
    b z_SysNmiOnReset
   17176:	f7ff bffd 	b.w	17174 <z_SysNmiOnReset>
   1717a:	bf00      	nop

0001717c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1717c:	4a0b      	ldr	r2, [pc, #44]	; (171ac <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1717e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   17180:	4b0b      	ldr	r3, [pc, #44]	; (171b0 <z_arm_prep_c+0x34>)
   17182:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   17186:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   17188:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1718c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   17190:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   17194:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   17198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1719c:	f009 fa5c 	bl	20658 <z_bss_zero>
	z_data_copy();
   171a0:	f00b fe0e 	bl	22dc0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   171a4:	f000 fafe 	bl	177a4 <z_arm_interrupt_init>
	z_cstart();
   171a8:	f009 fa9a 	bl	206e0 <z_cstart>
   171ac:	00000000 	.word	0x00000000
   171b0:	e000ed00 	.word	0xe000ed00

000171b4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   171b4:	4a09      	ldr	r2, [pc, #36]	; (171dc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   171b6:	490a      	ldr	r1, [pc, #40]	; (171e0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   171b8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   171ba:	6809      	ldr	r1, [r1, #0]
   171bc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   171be:	4909      	ldr	r1, [pc, #36]	; (171e4 <arch_swap+0x30>)
	_current->arch.basepri = key;
   171c0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   171c2:	684b      	ldr	r3, [r1, #4]
   171c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   171c8:	604b      	str	r3, [r1, #4]
   171ca:	2300      	movs	r3, #0
   171cc:	f383 8811 	msr	BASEPRI, r3
   171d0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   171d4:	6893      	ldr	r3, [r2, #8]
}
   171d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   171d8:	4770      	bx	lr
   171da:	bf00      	nop
   171dc:	20003f4c 	.word	0x20003f4c
   171e0:	0002a130 	.word	0x0002a130
   171e4:	e000ed00 	.word	0xe000ed00

000171e8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   171e8:	4912      	ldr	r1, [pc, #72]	; (17234 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   171ea:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   171ec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   171f0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   171f2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   171f6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   171fa:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   171fc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   17200:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   17204:	4f0c      	ldr	r7, [pc, #48]	; (17238 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   17206:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1720a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1720c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1720e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   17210:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   17212:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   17214:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   17216:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1721a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1721c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1721e:	f000 fb5d 	bl	178dc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   17222:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   17226:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1722a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1722e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   17232:	4770      	bx	lr
    ldr r1, =_kernel
   17234:	20003f4c 	.word	0x20003f4c
    ldr v4, =_SCS_ICSR
   17238:	e000ed04 	.word	0xe000ed04

0001723c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1723c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   17240:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   17242:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   17246:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1724a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1724c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   17250:	2902      	cmp	r1, #2
    beq _oops
   17252:	d0ff      	beq.n	17254 <_oops>

00017254 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   17254:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   17256:	f010 f80a 	bl	2726e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1725a:	bd01      	pop	{r0, pc}

0001725c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1725c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   17260:	9b00      	ldr	r3, [sp, #0]
   17262:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   17266:	490a      	ldr	r1, [pc, #40]	; (17290 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   17268:	9b01      	ldr	r3, [sp, #4]
   1726a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1726e:	9b02      	ldr	r3, [sp, #8]
   17270:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   17274:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   17278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1727c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   17280:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   17284:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   17286:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   17288:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1728a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1728c:	4770      	bx	lr
   1728e:	bf00      	nop
   17290:	00026aa3 	.word	0x00026aa3

00017294 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   17294:	4a09      	ldr	r2, [pc, #36]	; (172bc <z_check_thread_stack_fail+0x28>)
{
   17296:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   17298:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1729a:	b170      	cbz	r0, 172ba <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1729c:	f113 0f16 	cmn.w	r3, #22
   172a0:	6e80      	ldr	r0, [r0, #104]	; 0x68
   172a2:	d005      	beq.n	172b0 <z_check_thread_stack_fail+0x1c>
   172a4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   172a8:	429a      	cmp	r2, r3
   172aa:	d805      	bhi.n	172b8 <z_check_thread_stack_fail+0x24>
   172ac:	4283      	cmp	r3, r0
   172ae:	d203      	bcs.n	172b8 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   172b0:	4281      	cmp	r1, r0
   172b2:	bf28      	it	cs
   172b4:	2000      	movcs	r0, #0
   172b6:	4770      	bx	lr
   172b8:	2000      	movs	r0, #0
}
   172ba:	4770      	bx	lr
   172bc:	20003f4c 	.word	0x20003f4c

000172c0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   172c0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   172c2:	4b09      	ldr	r3, [pc, #36]	; (172e8 <arch_switch_to_main_thread+0x28>)
   172c4:	6098      	str	r0, [r3, #8]
{
   172c6:	460d      	mov	r5, r1
   172c8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   172ca:	f000 fb07 	bl	178dc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   172ce:	4620      	mov	r0, r4
   172d0:	f385 8809 	msr	PSP, r5
   172d4:	2100      	movs	r1, #0
   172d6:	b663      	cpsie	if
   172d8:	f381 8811 	msr	BASEPRI, r1
   172dc:	f3bf 8f6f 	isb	sy
   172e0:	2200      	movs	r2, #0
   172e2:	2300      	movs	r3, #0
   172e4:	f00f fbdd 	bl	26aa2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   172e8:	20003f4c 	.word	0x20003f4c

000172ec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   172ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   172ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   172f0:	4a0b      	ldr	r2, [pc, #44]	; (17320 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   172f2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   172f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   172f6:	bf1e      	ittt	ne
	movne	r1, #0
   172f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   172fa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   172fc:	f012 f83a 	blne	29374 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   17300:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   17302:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   17306:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1730a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1730e:	4905      	ldr	r1, [pc, #20]	; (17324 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   17310:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   17312:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   17314:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   17316:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1731a:	4903      	ldr	r1, [pc, #12]	; (17328 <_isr_wrapper+0x3c>)
	bx r1
   1731c:	4708      	bx	r1
   1731e:	0000      	.short	0x0000
	ldr r2, =_kernel
   17320:	20003f4c 	.word	0x20003f4c
	ldr r1, =_sw_isr_table
   17324:	0002987c 	.word	0x0002987c
	ldr r1, =z_arm_int_exit
   17328:	0001732d 	.word	0x0001732d

0001732c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1732c:	4b04      	ldr	r3, [pc, #16]	; (17340 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1732e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   17330:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   17332:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   17334:	d003      	beq.n	1733e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   17336:	4903      	ldr	r1, [pc, #12]	; (17344 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   17338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1733c:	600a      	str	r2, [r1, #0]

0001733e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1733e:	4770      	bx	lr
	ldr r3, =_kernel
   17340:	20003f4c 	.word	0x20003f4c
	ldr r1, =_SCS_ICSR
   17344:	e000ed04 	.word	0xe000ed04

00017348 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   17348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1734c:	4c39      	ldr	r4, [pc, #228]	; (17434 <mem_manage_fault+0xec>)
{
   1734e:	4680      	mov	r8, r0
   17350:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   17352:	4839      	ldr	r0, [pc, #228]	; (17438 <mem_manage_fault+0xf0>)
   17354:	2145      	movs	r1, #69	; 0x45
{
   17356:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   17358:	f00f fd34 	bl	26dc4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1735c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1735e:	06da      	lsls	r2, r3, #27
   17360:	d503      	bpl.n	1736a <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   17362:	4836      	ldr	r0, [pc, #216]	; (1743c <mem_manage_fault+0xf4>)
   17364:	2145      	movs	r1, #69	; 0x45
   17366:	f00f fd2d 	bl	26dc4 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1736a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1736c:	071b      	lsls	r3, r3, #28
   1736e:	d503      	bpl.n	17378 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   17370:	4833      	ldr	r0, [pc, #204]	; (17440 <mem_manage_fault+0xf8>)
   17372:	2145      	movs	r1, #69	; 0x45
   17374:	f00f fd26 	bl	26dc4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   17378:	4c2e      	ldr	r4, [pc, #184]	; (17434 <mem_manage_fault+0xec>)
   1737a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1737c:	079f      	lsls	r7, r3, #30
   1737e:	d429      	bmi.n	173d4 <mem_manage_fault+0x8c>
	uint32_t mmfar = -EINVAL;
   17380:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   17384:	4c2b      	ldr	r4, [pc, #172]	; (17434 <mem_manage_fault+0xec>)
   17386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17388:	07d9      	lsls	r1, r3, #31
   1738a:	d503      	bpl.n	17394 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   1738c:	482d      	ldr	r0, [pc, #180]	; (17444 <mem_manage_fault+0xfc>)
   1738e:	2145      	movs	r1, #69	; 0x45
   17390:	f00f fd18 	bl	26dc4 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   17394:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17396:	069a      	lsls	r2, r3, #26
   17398:	d503      	bpl.n	173a2 <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   1739a:	482b      	ldr	r0, [pc, #172]	; (17448 <mem_manage_fault+0x100>)
   1739c:	2145      	movs	r1, #69	; 0x45
   1739e:	f00f fd11 	bl	26dc4 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   173a2:	4d24      	ldr	r5, [pc, #144]	; (17434 <mem_manage_fault+0xec>)
   173a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   173a6:	06db      	lsls	r3, r3, #27
   173a8:	d428      	bmi.n	173fc <mem_manage_fault+0xb4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   173aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   173ac:	079c      	lsls	r4, r3, #30
   173ae:	d425      	bmi.n	173fc <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   173b0:	2400      	movs	r4, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   173b2:	4b20      	ldr	r3, [pc, #128]	; (17434 <mem_manage_fault+0xec>)
   173b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   173b6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   173b8:	bf42      	ittt	mi
   173ba:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   173bc:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   173c0:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   173c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   173c4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   173c8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   173ca:	2300      	movs	r3, #0
   173cc:	7033      	strb	r3, [r6, #0]

	return reason;
}
   173ce:	4620      	mov	r0, r4
   173d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   173d4:	481d      	ldr	r0, [pc, #116]	; (1744c <mem_manage_fault+0x104>)
   173d6:	2145      	movs	r1, #69	; 0x45
   173d8:	f00f fcf4 	bl	26dc4 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   173dc:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   173de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   173e0:	0618      	lsls	r0, r3, #24
   173e2:	d5cd      	bpl.n	17380 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   173e4:	481a      	ldr	r0, [pc, #104]	; (17450 <mem_manage_fault+0x108>)
   173e6:	463a      	mov	r2, r7
   173e8:	2145      	movs	r1, #69	; 0x45
   173ea:	f00f fceb 	bl	26dc4 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   173ee:	2d00      	cmp	r5, #0
   173f0:	d0c8      	beq.n	17384 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   173f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   173f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   173f8:	62a3      	str	r3, [r4, #40]	; 0x28
   173fa:	e7c3      	b.n	17384 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   173fc:	686b      	ldr	r3, [r5, #4]
   173fe:	0518      	lsls	r0, r3, #20
   17400:	d5d6      	bpl.n	173b0 <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   17402:	4641      	mov	r1, r8
   17404:	4638      	mov	r0, r7
   17406:	f7ff ff45 	bl	17294 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1740a:	4604      	mov	r4, r0
   1740c:	b118      	cbz	r0, 17416 <mem_manage_fault+0xce>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1740e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   17412:	2402      	movs	r4, #2
   17414:	e7cd      	b.n	173b2 <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   17416:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17418:	06d9      	lsls	r1, r3, #27
   1741a:	d5c9      	bpl.n	173b0 <mem_manage_fault+0x68>
   1741c:	490d      	ldr	r1, [pc, #52]	; (17454 <mem_manage_fault+0x10c>)
   1741e:	480e      	ldr	r0, [pc, #56]	; (17458 <mem_manage_fault+0x110>)
   17420:	f240 1253 	movw	r2, #339	; 0x153
   17424:	f00f fcc0 	bl	26da8 <assert_print>
   17428:	480a      	ldr	r0, [pc, #40]	; (17454 <mem_manage_fault+0x10c>)
   1742a:	f240 1153 	movw	r1, #339	; 0x153
   1742e:	f00f fcb4 	bl	26d9a <assert_post_action>
   17432:	e7be      	b.n	173b2 <mem_manage_fault+0x6a>
   17434:	e000ed00 	.word	0xe000ed00
   17438:	0002aa03 	.word	0x0002aa03
   1743c:	0002aa1e 	.word	0x0002aa1e
   17440:	0002aa56 	.word	0x0002aa56
   17444:	0002aaa6 	.word	0x0002aaa6
   17448:	0002aaca 	.word	0x0002aaca
   1744c:	0002aa6e 	.word	0x0002aa6e
   17450:	0002aa8b 	.word	0x0002aa8b
   17454:	0002aafe 	.word	0x0002aafe
   17458:	0002a576 	.word	0x0002a576

0001745c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1745c:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1745e:	4c1d      	ldr	r4, [pc, #116]	; (174d4 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   17460:	481d      	ldr	r0, [pc, #116]	; (174d8 <usage_fault.constprop.0+0x7c>)
   17462:	2145      	movs	r1, #69	; 0x45
   17464:	f00f fcae 	bl	26dc4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   17468:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1746a:	019b      	lsls	r3, r3, #6
   1746c:	d503      	bpl.n	17476 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   1746e:	481b      	ldr	r0, [pc, #108]	; (174dc <usage_fault.constprop.0+0x80>)
   17470:	2145      	movs	r1, #69	; 0x45
   17472:	f00f fca7 	bl	26dc4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   17476:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17478:	01dc      	lsls	r4, r3, #7
   1747a:	d503      	bpl.n	17484 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   1747c:	4818      	ldr	r0, [pc, #96]	; (174e0 <usage_fault.constprop.0+0x84>)
   1747e:	2145      	movs	r1, #69	; 0x45
   17480:	f00f fca0 	bl	26dc4 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   17484:	4c13      	ldr	r4, [pc, #76]	; (174d4 <usage_fault.constprop.0+0x78>)
   17486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17488:	0318      	lsls	r0, r3, #12
   1748a:	d503      	bpl.n	17494 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   1748c:	4815      	ldr	r0, [pc, #84]	; (174e4 <usage_fault.constprop.0+0x88>)
   1748e:	2145      	movs	r1, #69	; 0x45
   17490:	f00f fc98 	bl	26dc4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   17494:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17496:	0359      	lsls	r1, r3, #13
   17498:	d503      	bpl.n	174a2 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1749a:	4813      	ldr	r0, [pc, #76]	; (174e8 <usage_fault.constprop.0+0x8c>)
   1749c:	2145      	movs	r1, #69	; 0x45
   1749e:	f00f fc91 	bl	26dc4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   174a2:	4c0c      	ldr	r4, [pc, #48]	; (174d4 <usage_fault.constprop.0+0x78>)
   174a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   174a6:	039a      	lsls	r2, r3, #14
   174a8:	d503      	bpl.n	174b2 <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   174aa:	4810      	ldr	r0, [pc, #64]	; (174ec <usage_fault.constprop.0+0x90>)
   174ac:	2145      	movs	r1, #69	; 0x45
   174ae:	f00f fc89 	bl	26dc4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   174b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   174b4:	03db      	lsls	r3, r3, #15
   174b6:	d503      	bpl.n	174c0 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   174b8:	480d      	ldr	r0, [pc, #52]	; (174f0 <usage_fault.constprop.0+0x94>)
   174ba:	2145      	movs	r1, #69	; 0x45
   174bc:	f00f fc82 	bl	26dc4 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   174c0:	4a04      	ldr	r2, [pc, #16]	; (174d4 <usage_fault.constprop.0+0x78>)
   174c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   174c4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   174c8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   174cc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   174ce:	2000      	movs	r0, #0
   174d0:	bd10      	pop	{r4, pc}
   174d2:	bf00      	nop
   174d4:	e000ed00 	.word	0xe000ed00
   174d8:	0002ab38 	.word	0x0002ab38
   174dc:	0002ab55 	.word	0x0002ab55
   174e0:	0002ab6d 	.word	0x0002ab6d
   174e4:	0002ab8c 	.word	0x0002ab8c
   174e8:	0002abaf 	.word	0x0002abaf
   174ec:	0002abd9 	.word	0x0002abd9
   174f0:	0002abf8 	.word	0x0002abf8

000174f4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   174f4:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   174f6:	4c23      	ldr	r4, [pc, #140]	; (17584 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   174f8:	4606      	mov	r6, r0
   174fa:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   174fc:	4822      	ldr	r0, [pc, #136]	; (17588 <bus_fault.constprop.0+0x94>)
   174fe:	2145      	movs	r1, #69	; 0x45
   17500:	f00f fc60 	bl	26dc4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   17504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17506:	04d9      	lsls	r1, r3, #19
   17508:	d503      	bpl.n	17512 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   1750a:	4820      	ldr	r0, [pc, #128]	; (1758c <bus_fault.constprop.0+0x98>)
   1750c:	2145      	movs	r1, #69	; 0x45
   1750e:	f00f fc59 	bl	26dc4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   17512:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17514:	051a      	lsls	r2, r3, #20
   17516:	d503      	bpl.n	17520 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   17518:	481d      	ldr	r0, [pc, #116]	; (17590 <bus_fault.constprop.0+0x9c>)
   1751a:	2145      	movs	r1, #69	; 0x45
   1751c:	f00f fc52 	bl	26dc4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   17520:	4c18      	ldr	r4, [pc, #96]	; (17584 <bus_fault.constprop.0+0x90>)
   17522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17524:	059b      	lsls	r3, r3, #22
   17526:	d510      	bpl.n	1754a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   17528:	481a      	ldr	r0, [pc, #104]	; (17594 <bus_fault.constprop.0+0xa0>)
   1752a:	2145      	movs	r1, #69	; 0x45
   1752c:	f00f fc4a 	bl	26dc4 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   17530:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   17532:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17534:	0418      	lsls	r0, r3, #16
   17536:	d508      	bpl.n	1754a <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   17538:	4817      	ldr	r0, [pc, #92]	; (17598 <bus_fault.constprop.0+0xa4>)
   1753a:	2145      	movs	r1, #69	; 0x45
   1753c:	f00f fc42 	bl	26dc4 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   17540:	b11e      	cbz	r6, 1754a <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   17542:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   17548:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1754a:	4c0e      	ldr	r4, [pc, #56]	; (17584 <bus_fault.constprop.0+0x90>)
   1754c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1754e:	0559      	lsls	r1, r3, #21
   17550:	d503      	bpl.n	1755a <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   17552:	4812      	ldr	r0, [pc, #72]	; (1759c <bus_fault.constprop.0+0xa8>)
   17554:	2145      	movs	r1, #69	; 0x45
   17556:	f00f fc35 	bl	26dc4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1755a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1755c:	05da      	lsls	r2, r3, #23
   1755e:	d50b      	bpl.n	17578 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   17560:	480f      	ldr	r0, [pc, #60]	; (175a0 <bus_fault.constprop.0+0xac>)
   17562:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   17564:	f00f fc2e 	bl	26dc4 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   17568:	4a06      	ldr	r2, [pc, #24]	; (17584 <bus_fault.constprop.0+0x90>)
   1756a:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1756c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1756e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   17572:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17574:	7028      	strb	r0, [r5, #0]
}
   17576:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   17578:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1757a:	049b      	lsls	r3, r3, #18
   1757c:	d5f4      	bpl.n	17568 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1757e:	4809      	ldr	r0, [pc, #36]	; (175a4 <bus_fault.constprop.0+0xb0>)
   17580:	2145      	movs	r1, #69	; 0x45
   17582:	e7ef      	b.n	17564 <bus_fault.constprop.0+0x70>
   17584:	e000ed00 	.word	0xe000ed00
   17588:	0002ac28 	.word	0x0002ac28
   1758c:	0002ac43 	.word	0x0002ac43
   17590:	0002aa56 	.word	0x0002aa56
   17594:	0002ac59 	.word	0x0002ac59
   17598:	0002ac77 	.word	0x0002ac77
   1759c:	0002ac91 	.word	0x0002ac91
   175a0:	0002acb1 	.word	0x0002acb1
   175a4:	0002aaca 	.word	0x0002aaca

000175a8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   175a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   175ac:	4b67      	ldr	r3, [pc, #412]	; (1774c <z_arm_fault+0x1a4>)
   175ae:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   175b2:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   175b4:	f3c8 0708 	ubfx	r7, r8, #0, #9
   175b8:	2600      	movs	r6, #0
   175ba:	f386 8811 	msr	BASEPRI, r6
   175be:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   175c2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   175c6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   175ca:	d107      	bne.n	175dc <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   175cc:	f002 030c 	and.w	r3, r2, #12
   175d0:	2b08      	cmp	r3, #8
   175d2:	d110      	bne.n	175f6 <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   175d4:	485e      	ldr	r0, [pc, #376]	; (17750 <z_arm_fault+0x1a8>)
   175d6:	2145      	movs	r1, #69	; 0x45
   175d8:	f00f fbf4 	bl	26dc4 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   175dc:	495d      	ldr	r1, [pc, #372]	; (17754 <z_arm_fault+0x1ac>)
   175de:	485e      	ldr	r0, [pc, #376]	; (17758 <z_arm_fault+0x1b0>)
   175e0:	f240 4205 	movw	r2, #1029	; 0x405
   175e4:	f00f fbe0 	bl	26da8 <assert_print>
   175e8:	485a      	ldr	r0, [pc, #360]	; (17754 <z_arm_fault+0x1ac>)
   175ea:	f240 4105 	movw	r1, #1029	; 0x405
   175ee:	f00f fbd4 	bl	26d9a <assert_post_action>
   175f2:	2500      	movs	r5, #0
   175f4:	e006      	b.n	17604 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   175f6:	0713      	lsls	r3, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   175f8:	bf4e      	itee	mi
   175fa:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
   175fc:	4605      	movpl	r5, r0
			*nested_exc = true;
   175fe:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   17600:	2d00      	cmp	r5, #0
   17602:	d0eb      	beq.n	175dc <z_arm_fault+0x34>
	*recoverable = false;
   17604:	2400      	movs	r4, #0
	switch (fault) {
   17606:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   17608:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   1760c:	2b09      	cmp	r3, #9
   1760e:	f200 808b 	bhi.w	17728 <z_arm_fault+0x180>
   17612:	e8df f003 	tbb	[pc, r3]
   17616:	7e05      	.short	0x7e05
   17618:	89896682 	.word	0x89896682
   1761c:	86898989 	.word	0x86898989
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   17620:	4f4a      	ldr	r7, [pc, #296]	; (1774c <z_arm_fault+0x1a4>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   17622:	484e      	ldr	r0, [pc, #312]	; (1775c <z_arm_fault+0x1b4>)
   17624:	2145      	movs	r1, #69	; 0x45
   17626:	f00f fbcd 	bl	26dc4 <z_log_minimal_printk>
	*recoverable = false;
   1762a:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1762e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   17630:	f014 0402 	ands.w	r4, r4, #2
   17634:	d005      	beq.n	17642 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   17636:	484a      	ldr	r0, [pc, #296]	; (17760 <z_arm_fault+0x1b8>)
   17638:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   1763a:	f00f fbc3 	bl	26dc4 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1763e:	2400      	movs	r4, #0
}
   17640:	e006      	b.n	17650 <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   17642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17644:	2b00      	cmp	r3, #0
   17646:	da1d      	bge.n	17684 <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
   17648:	4846      	ldr	r0, [pc, #280]	; (17764 <z_arm_fault+0x1bc>)
   1764a:	2145      	movs	r1, #69	; 0x45
   1764c:	f00f fbba 	bl	26dc4 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   17650:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17654:	b99b      	cbnz	r3, 1767e <z_arm_fault+0xd6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   17656:	2220      	movs	r2, #32
   17658:	4629      	mov	r1, r5
   1765a:	a802      	add	r0, sp, #8
   1765c:	f00f fe77 	bl	2734e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   17660:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17662:	2e00      	cmp	r6, #0
   17664:	d06d      	beq.n	17742 <z_arm_fault+0x19a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   17666:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1766a:	b922      	cbnz	r2, 17676 <z_arm_fault+0xce>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1766c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17670:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   17674:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   17676:	a902      	add	r1, sp, #8
   17678:	4620      	mov	r0, r4
   1767a:	f7ff fce1 	bl	17040 <z_arm_fatal_error>
}
   1767e:	b00a      	add	sp, #40	; 0x28
   17680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   17684:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   17686:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   1768a:	d039      	beq.n	17700 <z_arm_fault+0x158>
		PR_EXC("  Fault escalation (see below)");
   1768c:	4836      	ldr	r0, [pc, #216]	; (17768 <z_arm_fault+0x1c0>)
   1768e:	2145      	movs	r1, #69	; 0x45
   17690:	f00f fb98 	bl	26dc4 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   17694:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   17696:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   1769a:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1769e:	429a      	cmp	r2, r3
   176a0:	d106      	bne.n	176b0 <z_arm_fault+0x108>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   176a2:	682a      	ldr	r2, [r5, #0]
   176a4:	4831      	ldr	r0, [pc, #196]	; (1776c <z_arm_fault+0x1c4>)
   176a6:	2145      	movs	r1, #69	; 0x45
   176a8:	f00f fb8c 	bl	26dc4 <z_log_minimal_printk>
			reason = esf->basic.r0;
   176ac:	682c      	ldr	r4, [r5, #0]
   176ae:	e7cf      	b.n	17650 <z_arm_fault+0xa8>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   176b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   176b2:	b2db      	uxtb	r3, r3
   176b4:	b13b      	cbz	r3, 176c6 <z_arm_fault+0x11e>
			reason = mem_manage_fault(esf, 1, recoverable);
   176b6:	f10d 0207 	add.w	r2, sp, #7
   176ba:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   176bc:	4628      	mov	r0, r5
   176be:	f7ff fe43 	bl	17348 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   176c2:	4604      	mov	r4, r0
		break;
   176c4:	e7c4      	b.n	17650 <z_arm_fault+0xa8>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   176c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   176c8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   176cc:	d005      	beq.n	176da <z_arm_fault+0x132>
			reason = bus_fault(esf, 1, recoverable);
   176ce:	f10d 0107 	add.w	r1, sp, #7
   176d2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   176d4:	f7ff ff0e 	bl	174f4 <bus_fault.constprop.0>
   176d8:	e7f3      	b.n	176c2 <z_arm_fault+0x11a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   176da:	6abc      	ldr	r4, [r7, #40]	; 0x28
   176dc:	0c24      	lsrs	r4, r4, #16
   176de:	0424      	lsls	r4, r4, #16
   176e0:	b114      	cbz	r4, 176e8 <z_arm_fault+0x140>
		reason = usage_fault(esf);
   176e2:	f7ff febb 	bl	1745c <usage_fault.constprop.0>
   176e6:	e7ec      	b.n	176c2 <z_arm_fault+0x11a>
			__ASSERT(0,
   176e8:	491a      	ldr	r1, [pc, #104]	; (17754 <z_arm_fault+0x1ac>)
   176ea:	481b      	ldr	r0, [pc, #108]	; (17758 <z_arm_fault+0x1b0>)
   176ec:	f240 22d7 	movw	r2, #727	; 0x2d7
   176f0:	f00f fb5a 	bl	26da8 <assert_print>
   176f4:	f240 21d7 	movw	r1, #727	; 0x2d7
		__ASSERT(0,
   176f8:	4816      	ldr	r0, [pc, #88]	; (17754 <z_arm_fault+0x1ac>)
   176fa:	f00f fb4e 	bl	26d9a <assert_post_action>
   176fe:	e7a7      	b.n	17650 <z_arm_fault+0xa8>
   17700:	4914      	ldr	r1, [pc, #80]	; (17754 <z_arm_fault+0x1ac>)
   17702:	4815      	ldr	r0, [pc, #84]	; (17758 <z_arm_fault+0x1b0>)
   17704:	f240 22db 	movw	r2, #731	; 0x2db
   17708:	f00f fb4e 	bl	26da8 <assert_print>
   1770c:	f240 21db 	movw	r1, #731	; 0x2db
   17710:	e7f2      	b.n	176f8 <z_arm_fault+0x150>
		reason = mem_manage_fault(esf, 0, recoverable);
   17712:	f10d 0207 	add.w	r2, sp, #7
   17716:	2100      	movs	r1, #0
   17718:	e7d0      	b.n	176bc <z_arm_fault+0x114>
		reason = bus_fault(esf, 0, recoverable);
   1771a:	f10d 0107 	add.w	r1, sp, #7
   1771e:	2000      	movs	r0, #0
   17720:	e7d8      	b.n	176d4 <z_arm_fault+0x12c>
	PR_FAULT_INFO(
   17722:	4813      	ldr	r0, [pc, #76]	; (17770 <z_arm_fault+0x1c8>)
   17724:	2145      	movs	r1, #69	; 0x45
   17726:	e788      	b.n	1763a <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
   17728:	4912      	ldr	r1, [pc, #72]	; (17774 <z_arm_fault+0x1cc>)
   1772a:	4a13      	ldr	r2, [pc, #76]	; (17778 <z_arm_fault+0x1d0>)
   1772c:	4813      	ldr	r0, [pc, #76]	; (1777c <z_arm_fault+0x1d4>)
   1772e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   17732:	bf08      	it	eq
   17734:	460a      	moveq	r2, r1
   17736:	f1a7 0310 	sub.w	r3, r7, #16
   1773a:	2145      	movs	r1, #69	; 0x45
   1773c:	f00f fb42 	bl	26dc4 <z_log_minimal_printk>
   17740:	e77d      	b.n	1763e <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   17742:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   17746:	f023 0301 	bic.w	r3, r3, #1
   1774a:	e793      	b.n	17674 <z_arm_fault+0xcc>
   1774c:	e000ed00 	.word	0xe000ed00
   17750:	0002acfc 	.word	0x0002acfc
   17754:	0002aafe 	.word	0x0002aafe
   17758:	0002a576 	.word	0x0002a576
   1775c:	0002ad2c 	.word	0x0002ad2c
   17760:	0002ad48 	.word	0x0002ad48
   17764:	0002ad6e 	.word	0x0002ad6e
   17768:	0002ad81 	.word	0x0002ad81
   1776c:	0002ada5 	.word	0x0002ada5
   17770:	0002adc6 	.word	0x0002adc6
   17774:	0002acce 	.word	0x0002acce
   17778:	0002ace3 	.word	0x0002ace3
   1777c:	0002adef 	.word	0x0002adef

00017780 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   17780:	4a02      	ldr	r2, [pc, #8]	; (1778c <z_arm_fault_init+0xc>)
   17782:	6953      	ldr	r3, [r2, #20]
   17784:	f043 0310 	orr.w	r3, r3, #16
   17788:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1778a:	4770      	bx	lr
   1778c:	e000ed00 	.word	0xe000ed00

00017790 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   17790:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   17794:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   17798:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1779a:	4672      	mov	r2, lr
	bl z_arm_fault
   1779c:	f7ff ff04 	bl	175a8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   177a0:	bd01      	pop	{r0, pc}
   177a2:	bf00      	nop

000177a4 <z_arm_interrupt_init>:
   177a4:	4804      	ldr	r0, [pc, #16]	; (177b8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   177a6:	2300      	movs	r3, #0
   177a8:	2140      	movs	r1, #64	; 0x40
   177aa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   177ac:	3301      	adds	r3, #1
   177ae:	2b30      	cmp	r3, #48	; 0x30
   177b0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   177b4:	d1f9      	bne.n	177aa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   177b6:	4770      	bx	lr
   177b8:	e000e100 	.word	0xe000e100

000177bc <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   177bc:	2000      	movs	r0, #0
    msr CONTROL, r0
   177be:	f380 8814 	msr	CONTROL, r0
    isb
   177c2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   177c6:	f7ff f909 	bl	169dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   177ca:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   177cc:	490d      	ldr	r1, [pc, #52]	; (17804 <__start+0x48>)
    str r0, [r1]
   177ce:	6008      	str	r0, [r1, #0]
    dsb
   177d0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   177d4:	480c      	ldr	r0, [pc, #48]	; (17808 <__start+0x4c>)
    msr msp, r0
   177d6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   177da:	f000 f82b 	bl	17834 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   177de:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   177e0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   177e4:	4809      	ldr	r0, [pc, #36]	; (1780c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   177e6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   177ea:	1840      	adds	r0, r0, r1
    msr PSP, r0
   177ec:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   177f0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   177f4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   177f6:	4308      	orrs	r0, r1
    msr CONTROL, r0
   177f8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   177fc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   17800:	f7ff fcbc 	bl	1717c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   17804:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   17808:	2000fc00 	.word	0x2000fc00
    ldr r0, =z_interrupt_stacks
   1780c:	2000fdc0 	.word	0x2000fdc0

00017810 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   17810:	4907      	ldr	r1, [pc, #28]	; (17830 <z_arm_clear_arm_mpu_config+0x20>)
   17812:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   17816:	2300      	movs	r3, #0
	int num_regions =
   17818:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   1781c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1781e:	4293      	cmp	r3, r2
   17820:	d100      	bne.n	17824 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   17822:	4770      	bx	lr
  MPU->RNR = rnr;
   17824:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   17828:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1782c:	3301      	adds	r3, #1
   1782e:	e7f6      	b.n	1781e <z_arm_clear_arm_mpu_config+0xe>
   17830:	e000ed00 	.word	0xe000ed00

00017834 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   17834:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   17836:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   17838:	2300      	movs	r3, #0
   1783a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1783e:	f7ff ffe7 	bl	17810 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   17842:	4b14      	ldr	r3, [pc, #80]	; (17894 <z_arm_init_arch_hw_at_boot+0x60>)
   17844:	f04f 32ff 	mov.w	r2, #4294967295
   17848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   1784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   17850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   17854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   17858:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1785c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   17860:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   17864:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   17868:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1786c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   17870:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   17874:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   17878:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   1787c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   17880:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   17884:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   17888:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1788a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1788e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   17892:	bd08      	pop	{r3, pc}
   17894:	e000e100 	.word	0xe000e100

00017898 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   17898:	4b08      	ldr	r3, [pc, #32]	; (178bc <z_impl_k_thread_abort+0x24>)
   1789a:	689b      	ldr	r3, [r3, #8]
   1789c:	4283      	cmp	r3, r0
   1789e:	d10b      	bne.n	178b8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   178a0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   178a4:	b143      	cbz	r3, 178b8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   178a6:	4b06      	ldr	r3, [pc, #24]	; (178c0 <z_impl_k_thread_abort+0x28>)
   178a8:	685a      	ldr	r2, [r3, #4]
   178aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   178ae:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   178b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   178b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   178b6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   178b8:	f00b b970 	b.w	22b9c <z_thread_abort>
   178bc:	20003f4c 	.word	0x20003f4c
   178c0:	e000ed00 	.word	0xe000ed00

000178c4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   178c4:	4b02      	ldr	r3, [pc, #8]	; (178d0 <z_arm_configure_static_mpu_regions+0xc>)
   178c6:	4a03      	ldr	r2, [pc, #12]	; (178d4 <z_arm_configure_static_mpu_regions+0x10>)
   178c8:	4803      	ldr	r0, [pc, #12]	; (178d8 <z_arm_configure_static_mpu_regions+0x14>)
   178ca:	2101      	movs	r1, #1
   178cc:	f000 b87c 	b.w	179c8 <arm_core_mpu_configure_static_mpu_regions>
   178d0:	20040000 	.word	0x20040000
   178d4:	20000000 	.word	0x20000000
   178d8:	00029c8c 	.word	0x00029c8c

000178dc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   178dc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   178de:	4b05      	ldr	r3, [pc, #20]	; (178f4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   178e0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   178e2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   178e4:	4a04      	ldr	r2, [pc, #16]	; (178f8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   178e6:	2140      	movs	r1, #64	; 0x40
   178e8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   178ec:	4618      	mov	r0, r3
   178ee:	2101      	movs	r1, #1
   178f0:	f000 b888 	b.w	17a04 <arm_core_mpu_configure_dynamic_mpu_regions>
   178f4:	20003b6c 	.word	0x20003b6c
   178f8:	150b0000 	.word	0x150b0000

000178fc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   178fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   178fe:	4f24      	ldr	r7, [pc, #144]	; (17990 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;
   17900:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   17902:	2200      	movs	r2, #0
   17904:	428a      	cmp	r2, r1
   17906:	da0e      	bge.n	17926 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   17908:	6844      	ldr	r4, [r0, #4]
   1790a:	2c00      	cmp	r4, #0
   1790c:	d03c      	beq.n	17988 <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1790e:	b193      	cbz	r3, 17936 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   17910:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   17914:	ea14 0f0c 	tst.w	r4, ip
   17918:	d007      	beq.n	1792a <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   1791a:	481e      	ldr	r0, [pc, #120]	; (17994 <mpu_configure_regions+0x98>)
   1791c:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1791e:	f00f fa51 	bl	26dc4 <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   17922:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   17926:	4628      	mov	r0, r5
   17928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   1792a:	2c1f      	cmp	r4, #31
   1792c:	d9f5      	bls.n	1791a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   1792e:	6806      	ldr	r6, [r0, #0]
		&&
   17930:	ea1c 0f06 	tst.w	ip, r6
   17934:	d1f1      	bne.n	1791a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   17936:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   17938:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1793a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1793e:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
   17940:	d910      	bls.n	17964 <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
   17942:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   17946:	d80f      	bhi.n	17968 <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   17948:	3c01      	subs	r4, #1
   1794a:	fab4 f484 	clz	r4, r4
   1794e:	f1c4 041f 	rsb	r4, r4, #31
   17952:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   17954:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   17956:	ea4c 0404 	orr.w	r4, ip, r4
   1795a:	d907      	bls.n	1796c <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1795c:	480e      	ldr	r0, [pc, #56]	; (17998 <mpu_configure_regions+0x9c>)
   1795e:	462a      	mov	r2, r5
   17960:	2145      	movs	r1, #69	; 0x45
   17962:	e7dc      	b.n	1791e <mpu_configure_regions+0x22>
		return REGION_32B;
   17964:	2408      	movs	r4, #8
   17966:	e7f5      	b.n	17954 <mpu_configure_regions+0x58>
		return REGION_4G;
   17968:	243e      	movs	r4, #62	; 0x3e
   1796a:	e7f3      	b.n	17954 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1796c:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   17970:	432e      	orrs	r6, r5
   17972:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   17976:	f044 0401 	orr.w	r4, r4, #1
   1797a:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1797e:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
   17982:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   17984:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   17988:	3201      	adds	r2, #1
   1798a:	300c      	adds	r0, #12
   1798c:	e7ba      	b.n	17904 <mpu_configure_regions+0x8>
   1798e:	bf00      	nop
   17990:	e000ed00 	.word	0xe000ed00
   17994:	0002ae0b 	.word	0x0002ae0b
   17998:	0002ae33 	.word	0x0002ae33

0001799c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1799c:	4b04      	ldr	r3, [pc, #16]	; (179b0 <arm_core_mpu_enable+0x14>)
   1799e:	2205      	movs	r2, #5
   179a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   179a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   179a8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   179ac:	4770      	bx	lr
   179ae:	bf00      	nop
   179b0:	e000ed00 	.word	0xe000ed00

000179b4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   179b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   179b8:	4b02      	ldr	r3, [pc, #8]	; (179c4 <arm_core_mpu_disable+0x10>)
   179ba:	2200      	movs	r2, #0
   179bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   179c0:	4770      	bx	lr
   179c2:	bf00      	nop
   179c4:	e000ed00 	.word	0xe000ed00

000179c8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   179c8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   179ca:	4c0b      	ldr	r4, [pc, #44]	; (179f8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   179cc:	2301      	movs	r3, #1
   179ce:	7822      	ldrb	r2, [r4, #0]
   179d0:	f7ff ff94 	bl	178fc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   179d4:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   179d6:	3016      	adds	r0, #22
   179d8:	d10c      	bne.n	179f4 <arm_core_mpu_configure_static_mpu_regions+0x2c>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   179da:	4908      	ldr	r1, [pc, #32]	; (179fc <arm_core_mpu_configure_static_mpu_regions+0x34>)
   179dc:	4808      	ldr	r0, [pc, #32]	; (17a00 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   179de:	f44f 728b 	mov.w	r2, #278	; 0x116
   179e2:	f00f f9e1 	bl	26da8 <assert_print>
			regions_num);
	}
}
   179e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   179ea:	4804      	ldr	r0, [pc, #16]	; (179fc <arm_core_mpu_configure_static_mpu_regions+0x34>)
   179ec:	f44f 718b 	mov.w	r1, #278	; 0x116
   179f0:	f00f b9d3 	b.w	26d9a <assert_post_action>
}
   179f4:	bd10      	pop	{r4, pc}
   179f6:	bf00      	nop
   179f8:	20004a7c 	.word	0x20004a7c
   179fc:	0002ae5e 	.word	0x0002ae5e
   17a00:	0002a576 	.word	0x0002a576

00017a04 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   17a04:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   17a06:	4a10      	ldr	r2, [pc, #64]	; (17a48 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
   17a08:	2300      	movs	r3, #0
   17a0a:	7812      	ldrb	r2, [r2, #0]
   17a0c:	f7ff ff76 	bl	178fc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   17a10:	f110 0f16 	cmn.w	r0, #22
   17a14:	d00a      	beq.n	17a2c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
  MPU->RNR = rnr;
   17a16:	4b0d      	ldr	r3, [pc, #52]	; (17a4c <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
   17a18:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   17a1a:	2807      	cmp	r0, #7
   17a1c:	dd00      	ble.n	17a20 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   17a1e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   17a20:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   17a24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   17a28:	3001      	adds	r0, #1
   17a2a:	e7f6      	b.n	17a1a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   17a2c:	4908      	ldr	r1, [pc, #32]	; (17a50 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   17a2e:	4809      	ldr	r0, [pc, #36]	; (17a54 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
   17a30:	f240 1235 	movw	r2, #309	; 0x135
   17a34:	f00f f9b8 	bl	26da8 <assert_print>
}
   17a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   17a3c:	4804      	ldr	r0, [pc, #16]	; (17a50 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   17a3e:	f240 1135 	movw	r1, #309	; 0x135
   17a42:	f00f b9aa 	b.w	26d9a <assert_post_action>
   17a46:	bf00      	nop
   17a48:	20004a7c 	.word	0x20004a7c
   17a4c:	e000ed00 	.word	0xe000ed00
   17a50:	0002ae5e 	.word	0x0002ae5e
   17a54:	0002a576 	.word	0x0002a576

00017a58 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   17a58:	4922      	ldr	r1, [pc, #136]	; (17ae4 <z_arm_mpu_init+0x8c>)
{
   17a5a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   17a5c:	680c      	ldr	r4, [r1, #0]
   17a5e:	2c08      	cmp	r4, #8
   17a60:	d90d      	bls.n	17a7e <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   17a62:	4921      	ldr	r1, [pc, #132]	; (17ae8 <z_arm_mpu_init+0x90>)
   17a64:	4821      	ldr	r0, [pc, #132]	; (17aec <z_arm_mpu_init+0x94>)
   17a66:	f240 124d 	movw	r2, #333	; 0x14d
   17a6a:	f00f f99d 	bl	26da8 <assert_print>
   17a6e:	481e      	ldr	r0, [pc, #120]	; (17ae8 <z_arm_mpu_init+0x90>)
   17a70:	f240 114d 	movw	r1, #333	; 0x14d
   17a74:	f00f f991 	bl	26d9a <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   17a78:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   17a7c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   17a7e:	f7ff ff99 	bl	179b4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   17a82:	6848      	ldr	r0, [r1, #4]
   17a84:	491a      	ldr	r1, [pc, #104]	; (17af0 <z_arm_mpu_init+0x98>)
   17a86:	2200      	movs	r2, #0
   17a88:	4294      	cmp	r4, r2
   17a8a:	f100 000c 	add.w	r0, r0, #12
   17a8e:	d116      	bne.n	17abe <z_arm_mpu_init+0x66>
	static_regions_num = mpu_config.num_regions;
   17a90:	4b18      	ldr	r3, [pc, #96]	; (17af4 <z_arm_mpu_init+0x9c>)
   17a92:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   17a94:	f7ff ff82 	bl	1799c <arm_core_mpu_enable>
	__ASSERT(
   17a98:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   17a9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   17aa0:	2b08      	cmp	r3, #8
   17aa2:	d00a      	beq.n	17aba <z_arm_mpu_init+0x62>
   17aa4:	4910      	ldr	r1, [pc, #64]	; (17ae8 <z_arm_mpu_init+0x90>)
   17aa6:	4811      	ldr	r0, [pc, #68]	; (17aec <z_arm_mpu_init+0x94>)
   17aa8:	f240 12ad 	movw	r2, #429	; 0x1ad
   17aac:	f00f f97c 	bl	26da8 <assert_print>
   17ab0:	480d      	ldr	r0, [pc, #52]	; (17ae8 <z_arm_mpu_init+0x90>)
   17ab2:	f240 11ad 	movw	r1, #429	; 0x1ad
   17ab6:	f00f f970 	bl	26d9a <assert_post_action>
	return 0;
   17aba:	2000      	movs	r0, #0
   17abc:	e7de      	b.n	17a7c <z_arm_mpu_init+0x24>
   17abe:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17ac2:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   17ac6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   17aca:	4313      	orrs	r3, r2
   17acc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17ad0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   17ad4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   17ad8:	f043 0301 	orr.w	r3, r3, #1
   17adc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   17ae0:	3201      	adds	r2, #1
   17ae2:	e7d1      	b.n	17a88 <z_arm_mpu_init+0x30>
   17ae4:	00029c98 	.word	0x00029c98
   17ae8:	0002ae5e 	.word	0x0002ae5e
   17aec:	0002a576 	.word	0x0002a576
   17af0:	e000ed00 	.word	0xe000ed00
   17af4:	20004a7c 	.word	0x20004a7c

00017af8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   17af8:	4b01      	ldr	r3, [pc, #4]	; (17b00 <__stdout_hook_install+0x8>)
   17afa:	6018      	str	r0, [r3, #0]
}
   17afc:	4770      	bx	lr
   17afe:	bf00      	nop
   17b00:	200006dc 	.word	0x200006dc

00017b04 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   17b04:	b510      	push	{r4, lr}
	__asm__ volatile(
   17b06:	f04f 0340 	mov.w	r3, #64	; 0x40
   17b0a:	f3ef 8011 	mrs	r0, BASEPRI
   17b0e:	f383 8812 	msr	BASEPRI_MAX, r3
   17b12:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   17b16:	4a11      	ldr	r2, [pc, #68]	; (17b5c <nordicsemi_nrf52_init+0x58>)
   17b18:	2301      	movs	r3, #1
   17b1a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   17b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17b22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   17b26:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17b2a:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   17b2e:	2c08      	cmp	r4, #8
   17b30:	d108      	bne.n	17b44 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17b32:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   17b36:	2905      	cmp	r1, #5
   17b38:	d804      	bhi.n	17b44 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   17b3a:	4c09      	ldr	r4, [pc, #36]	; (17b60 <nordicsemi_nrf52_init+0x5c>)
   17b3c:	5c61      	ldrb	r1, [r4, r1]
   17b3e:	b109      	cbz	r1, 17b44 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   17b40:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   17b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b48:	2201      	movs	r2, #1
   17b4a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   17b4e:	f380 8811 	msr	BASEPRI, r0
   17b52:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   17b56:	2000      	movs	r0, #0
   17b58:	bd10      	pop	{r4, pc}
   17b5a:	bf00      	nop
   17b5c:	4001e000 	.word	0x4001e000
   17b60:	0002aea8 	.word	0x0002aea8

00017b64 <sys_arch_reboot>:
    *p_gpregret = val;
   17b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b68:	b2c0      	uxtb	r0, r0
   17b6a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   17b6e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17b72:	4905      	ldr	r1, [pc, #20]	; (17b88 <sys_arch_reboot+0x24>)
   17b74:	4b05      	ldr	r3, [pc, #20]	; (17b8c <sys_arch_reboot+0x28>)
   17b76:	68ca      	ldr	r2, [r1, #12]
   17b78:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17b7c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17b7e:	60cb      	str	r3, [r1, #12]
   17b80:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   17b84:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17b86:	e7fd      	b.n	17b84 <sys_arch_reboot+0x20>
   17b88:	e000ed00 	.word	0xe000ed00
   17b8c:	05fa0004 	.word	0x05fa0004

00017b90 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   17b90:	b120      	cbz	r0, 17b9c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   17b92:	4b03      	ldr	r3, [pc, #12]	; (17ba0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   17b94:	0180      	lsls	r0, r0, #6
   17b96:	f043 0301 	orr.w	r3, r3, #1
   17b9a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   17b9c:	4770      	bx	lr
   17b9e:	bf00      	nop
   17ba0:	00029ba0 	.word	0x00029ba0

00017ba4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   17ba4:	4b0e      	ldr	r3, [pc, #56]	; (17be0 <bt_hex_real+0x3c>)
   17ba6:	2940      	cmp	r1, #64	; 0x40
{
   17ba8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   17baa:	bf28      	it	cs
   17bac:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   17bae:	4c0d      	ldr	r4, [pc, #52]	; (17be4 <bt_hex_real+0x40>)
   17bb0:	1846      	adds	r6, r0, r1
   17bb2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   17bb4:	42b0      	cmp	r0, r6
   17bb6:	f103 0302 	add.w	r3, r3, #2
   17bba:	d104      	bne.n	17bc6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   17bbc:	2300      	movs	r3, #0
   17bbe:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   17bc2:	4807      	ldr	r0, [pc, #28]	; (17be0 <bt_hex_real+0x3c>)
   17bc4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   17bc6:	7802      	ldrb	r2, [r0, #0]
   17bc8:	0912      	lsrs	r2, r2, #4
   17bca:	5ca2      	ldrb	r2, [r4, r2]
   17bcc:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   17bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
   17bd4:	f002 020f 	and.w	r2, r2, #15
   17bd8:	5ca2      	ldrb	r2, [r4, r2]
   17bda:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   17bde:	e7e9      	b.n	17bb4 <bt_hex_real+0x10>
   17be0:	20004a9b 	.word	0x20004a9b
   17be4:	0002aeae 	.word	0x0002aeae

00017be8 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   17be8:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   17bea:	7803      	ldrb	r3, [r0, #0]
   17bec:	b08b      	sub	sp, #44	; 0x2c
   17bee:	4604      	mov	r4, r0
   17bf0:	ad07      	add	r5, sp, #28
   17bf2:	2b03      	cmp	r3, #3
   17bf4:	d821      	bhi.n	17c3a <bt_addr_le_str_real+0x52>
   17bf6:	e8df f003 	tbb	[pc, r3]
   17bfa:	1a02      	.short	0x1a02
   17bfc:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   17bfe:	4912      	ldr	r1, [pc, #72]	; (17c48 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   17c00:	4628      	mov	r0, r5
   17c02:	f00f fb43 	bl	2728c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   17c06:	7863      	ldrb	r3, [r4, #1]
   17c08:	9304      	str	r3, [sp, #16]
   17c0a:	78a3      	ldrb	r3, [r4, #2]
   17c0c:	9303      	str	r3, [sp, #12]
   17c0e:	78e3      	ldrb	r3, [r4, #3]
   17c10:	9302      	str	r3, [sp, #8]
   17c12:	7923      	ldrb	r3, [r4, #4]
   17c14:	9301      	str	r3, [sp, #4]
   17c16:	7963      	ldrb	r3, [r4, #5]
   17c18:	9300      	str	r3, [sp, #0]
   17c1a:	4a0c      	ldr	r2, [pc, #48]	; (17c4c <bt_addr_le_str_real+0x64>)
   17c1c:	79a3      	ldrb	r3, [r4, #6]
   17c1e:	9505      	str	r5, [sp, #20]
   17c20:	211e      	movs	r1, #30
   17c22:	480b      	ldr	r0, [pc, #44]	; (17c50 <bt_addr_le_str_real+0x68>)
   17c24:	f00e fedc 	bl	269e0 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   17c28:	4809      	ldr	r0, [pc, #36]	; (17c50 <bt_addr_le_str_real+0x68>)
   17c2a:	b00b      	add	sp, #44	; 0x2c
   17c2c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   17c2e:	4909      	ldr	r1, [pc, #36]	; (17c54 <bt_addr_le_str_real+0x6c>)
   17c30:	e7e6      	b.n	17c00 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   17c32:	4909      	ldr	r1, [pc, #36]	; (17c58 <bt_addr_le_str_real+0x70>)
   17c34:	e7e4      	b.n	17c00 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   17c36:	4909      	ldr	r1, [pc, #36]	; (17c5c <bt_addr_le_str_real+0x74>)
   17c38:	e7e2      	b.n	17c00 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   17c3a:	4a09      	ldr	r2, [pc, #36]	; (17c60 <bt_addr_le_str_real+0x78>)
   17c3c:	210a      	movs	r1, #10
   17c3e:	4628      	mov	r0, r5
   17c40:	f00e fece 	bl	269e0 <snprintk>
		break;
   17c44:	e7df      	b.n	17c06 <bt_addr_le_str_real+0x1e>
   17c46:	bf00      	nop
   17c48:	0002a4b1 	.word	0x0002a4b1
   17c4c:	0002a4da 	.word	0x0002a4da
   17c50:	20004a7d 	.word	0x20004a7d
   17c54:	0002a4b8 	.word	0x0002a4b8
   17c58:	0002a4bf 	.word	0x0002a4bf
   17c5c:	0002a4c9 	.word	0x0002a4c9
   17c60:	0002a4d3 	.word	0x0002a4d3

00017c64 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   17c64:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   17c66:	4d0a      	ldr	r5, [pc, #40]	; (17c90 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   17c68:	4b0a      	ldr	r3, [pc, #40]	; (17c94 <long_wq_init+0x30>)
{
   17c6a:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   17c6c:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   17c6e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   17c70:	9302      	str	r3, [sp, #8]
   17c72:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   17c74:	f009 fe6c 	bl	21950 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   17c78:	ab02      	add	r3, sp, #8
   17c7a:	9300      	str	r3, [sp, #0]
   17c7c:	4628      	mov	r0, r5
   17c7e:	4906      	ldr	r1, [pc, #24]	; (17c98 <long_wq_init+0x34>)
   17c80:	230a      	movs	r3, #10
   17c82:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   17c86:	f009 fe7b 	bl	21980 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   17c8a:	4620      	mov	r0, r4
   17c8c:	b005      	add	sp, #20
   17c8e:	bd30      	pop	{r4, r5, pc}
   17c90:	20001ab8 	.word	0x20001ab8
   17c94:	0002aebf 	.word	0x0002aebf
   17c98:	2000dbc0 	.word	0x2000dbc0

00017c9c <bt_long_wq_schedule>:
{
   17c9c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   17c9e:	4801      	ldr	r0, [pc, #4]	; (17ca4 <bt_long_wq_schedule+0x8>)
   17ca0:	f009 bf02 	b.w	21aa8 <k_work_schedule_for_queue>
   17ca4:	20001ab8 	.word	0x20001ab8

00017ca8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   17ca8:	b430      	push	{r4, r5}
   17caa:	4603      	mov	r3, r0
   17cac:	4608      	mov	r0, r1
	switch (src->type) {
   17cae:	781a      	ldrb	r2, [r3, #0]
   17cb0:	2a01      	cmp	r2, #1
   17cb2:	d013      	beq.n	17cdc <uuid_to_uuid128+0x34>
   17cb4:	2a02      	cmp	r2, #2
   17cb6:	d026      	beq.n	17d06 <uuid_to_uuid128+0x5e>
   17cb8:	b972      	cbnz	r2, 17cd8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   17cba:	4a15      	ldr	r2, [pc, #84]	; (17d10 <uuid_to_uuid128+0x68>)
   17cbc:	f102 0410 	add.w	r4, r2, #16
   17cc0:	f852 5b04 	ldr.w	r5, [r2], #4
   17cc4:	f841 5b04 	str.w	r5, [r1], #4
   17cc8:	42a2      	cmp	r2, r4
   17cca:	d1f9      	bne.n	17cc0 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   17ccc:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   17cce:	7812      	ldrb	r2, [r2, #0]
   17cd0:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   17cd2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   17cd4:	0a1b      	lsrs	r3, r3, #8
   17cd6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   17cd8:	bc30      	pop	{r4, r5}
   17cda:	4770      	bx	lr
		*dst = uuid128_base;
   17cdc:	4a0c      	ldr	r2, [pc, #48]	; (17d10 <uuid_to_uuid128+0x68>)
   17cde:	f102 0410 	add.w	r4, r2, #16
   17ce2:	f852 5b04 	ldr.w	r5, [r2], #4
   17ce6:	f841 5b04 	str.w	r5, [r1], #4
   17cea:	42a2      	cmp	r2, r4
   17cec:	d1f9      	bne.n	17ce2 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   17cee:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   17cf0:	7812      	ldrb	r2, [r2, #0]
   17cf2:	700a      	strb	r2, [r1, #0]
   17cf4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   17cf8:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   17cfa:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   17cfc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   17cfe:	0a1b      	lsrs	r3, r3, #8
   17d00:	7382      	strb	r2, [r0, #14]
   17d02:	7403      	strb	r3, [r0, #16]
}
   17d04:	e7e8      	b.n	17cd8 <uuid_to_uuid128+0x30>
}
   17d06:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   17d08:	2211      	movs	r2, #17
   17d0a:	4619      	mov	r1, r3
   17d0c:	f00f bb1f 	b.w	2734e <memcpy>
   17d10:	0002aec8 	.word	0x0002aec8

00017d14 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   17d14:	b570      	push	{r4, r5, r6, lr}
   17d16:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   17d18:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   17d1c:	2b01      	cmp	r3, #1
{
   17d1e:	4605      	mov	r5, r0
   17d20:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   17d22:	d00a      	beq.n	17d3a <bt_buf_get_rx+0x26>
   17d24:	2805      	cmp	r0, #5
   17d26:	d008      	beq.n	17d3a <bt_buf_get_rx+0x26>
   17d28:	490b      	ldr	r1, [pc, #44]	; (17d58 <bt_buf_get_rx+0x44>)
   17d2a:	480c      	ldr	r0, [pc, #48]	; (17d5c <bt_buf_get_rx+0x48>)
   17d2c:	2241      	movs	r2, #65	; 0x41
   17d2e:	f00f f83b 	bl	26da8 <assert_print>
   17d32:	4809      	ldr	r0, [pc, #36]	; (17d58 <bt_buf_get_rx+0x44>)
   17d34:	2141      	movs	r1, #65	; 0x41
   17d36:	f00f f830 	bl	26d9a <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   17d3a:	4623      	mov	r3, r4
   17d3c:	4808      	ldr	r0, [pc, #32]	; (17d60 <bt_buf_get_rx+0x4c>)
   17d3e:	4632      	mov	r2, r6
   17d40:	f010 ff62 	bl	28c08 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   17d44:	4604      	mov	r4, r0
   17d46:	b120      	cbz	r0, 17d52 <bt_buf_get_rx+0x3e>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   17d48:	2100      	movs	r1, #0
   17d4a:	3008      	adds	r0, #8
   17d4c:	f005 f914 	bl	1cf78 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17d50:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   17d52:	4620      	mov	r0, r4
   17d54:	bd70      	pop	{r4, r5, r6, pc}
   17d56:	bf00      	nop
   17d58:	0002aed9 	.word	0x0002aed9
   17d5c:	0002a576 	.word	0x0002a576
   17d60:	20000b98 	.word	0x20000b98

00017d64 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   17d64:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   17d66:	490b      	ldr	r1, [pc, #44]	; (17d94 <bt_buf_get_cmd_complete+0x30>)
{
   17d68:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   17d6a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
{
   17d6e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   17d70:	b920      	cbnz	r0, 17d7c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   17d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17d76:	2001      	movs	r0, #1
   17d78:	f7ff bfcc 	b.w	17d14 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   17d7c:	f005 fa60 	bl	1d240 <net_buf_ref>
   17d80:	2301      	movs	r3, #1
		buf->len = 0U;
   17d82:	2100      	movs	r1, #0
   17d84:	7503      	strb	r3, [r0, #20]
   17d86:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   17d88:	4604      	mov	r4, r0
   17d8a:	3008      	adds	r0, #8
   17d8c:	f005 f8f4 	bl	1cf78 <net_buf_simple_reserve>
}
   17d90:	4620      	mov	r0, r4
   17d92:	bd10      	pop	{r4, pc}
   17d94:	200004f8 	.word	0x200004f8

00017d98 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   17d98:	b570      	push	{r4, r5, r6, lr}
   17d9a:	4604      	mov	r4, r0
	switch (evt) {
   17d9c:	2c0f      	cmp	r4, #15
{
   17d9e:	460d      	mov	r5, r1
   17da0:	4610      	mov	r0, r2
   17da2:	4619      	mov	r1, r3
	switch (evt) {
   17da4:	d805      	bhi.n	17db2 <bt_buf_get_evt+0x1a>
   17da6:	2c0d      	cmp	r4, #13
   17da8:	d912      	bls.n	17dd0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   17daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   17dae:	f7ff bfd9 	b.w	17d64 <bt_buf_get_cmd_complete>
	switch (evt) {
   17db2:	2c13      	cmp	r4, #19
   17db4:	d10c      	bne.n	17dd0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   17db6:	480b      	ldr	r0, [pc, #44]	; (17de4 <bt_buf_get_evt+0x4c>)
   17db8:	f010 ff26 	bl	28c08 <net_buf_alloc_fixed>
			if (buf) {
   17dbc:	4604      	mov	r4, r0
   17dbe:	b128      	cbz	r0, 17dcc <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   17dc0:	2100      	movs	r1, #0
   17dc2:	3008      	adds	r0, #8
   17dc4:	f005 f8d8 	bl	1cf78 <net_buf_simple_reserve>
   17dc8:	2301      	movs	r3, #1
   17dca:	7523      	strb	r3, [r4, #20]
}
   17dcc:	4620      	mov	r0, r4
   17dce:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   17dd0:	4602      	mov	r2, r0
   17dd2:	460b      	mov	r3, r1
		if (discardable) {
   17dd4:	b10d      	cbz	r5, 17dda <bt_buf_get_evt+0x42>
   17dd6:	4804      	ldr	r0, [pc, #16]	; (17de8 <bt_buf_get_evt+0x50>)
   17dd8:	e7ee      	b.n	17db8 <bt_buf_get_evt+0x20>
}
   17dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17dde:	2001      	movs	r0, #1
   17de0:	f7ff bf98 	b.w	17d14 <bt_buf_get_rx>
   17de4:	20000bcc 	.word	0x20000bcc
   17de8:	20000afc 	.word	0x20000afc

00017dec <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   17dec:	6883      	ldr	r3, [r0, #8]
   17dee:	4802      	ldr	r0, [pc, #8]	; (17df8 <hci_data_buf_overflow+0xc>)
   17df0:	781a      	ldrb	r2, [r3, #0]
   17df2:	2157      	movs	r1, #87	; 0x57
   17df4:	f00e bfe6 	b.w	26dc4 <z_log_minimal_printk>
   17df8:	0002af0f 	.word	0x0002af0f

00017dfc <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   17dfc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17dfe:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   17e00:	781a      	ldrb	r2, [r3, #0]
   17e02:	b972      	cbnz	r2, 17e22 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17e04:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   17e08:	4620      	mov	r0, r4
   17e0a:	f002 faed 	bl	1a3e8 <bt_conn_lookup_handle>
	if (!conn) {
   17e0e:	4605      	mov	r5, r0
   17e10:	b940      	cbnz	r0, 17e24 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   17e12:	4b08      	ldr	r3, [pc, #32]	; (17e34 <hci_disconn_complete_prio+0x38>)
   17e14:	881a      	ldrh	r2, [r3, #0]
   17e16:	b922      	cbnz	r2, 17e22 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   17e18:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   17e1c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   17e20:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   17e22:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   17e24:	2101      	movs	r1, #1
   17e26:	f002 fae7 	bl	1a3f8 <bt_conn_set_state>
	bt_conn_unref(conn);
   17e2a:	4628      	mov	r0, r5
}
   17e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   17e30:	f002 baaa 	b.w	1a388 <bt_conn_unref>
   17e34:	20004a6c 	.word	0x20004a6c

00017e38 <hci_disconn_complete>:

static void hci_disconn_complete(struct net_buf *buf)
{
   17e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17e3a:	6885      	ldr	r5, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   17e3c:	782e      	ldrb	r6, [r5, #0]
   17e3e:	b9be      	cbnz	r6, 17e70 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17e40:	f8b5 7001 	ldrh.w	r7, [r5, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   17e44:	4638      	mov	r0, r7
   17e46:	f002 facf 	bl	1a3e8 <bt_conn_lookup_handle>
	if (!conn) {
   17e4a:	4604      	mov	r4, r0
   17e4c:	b930      	cbnz	r0, 17e5c <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   17e4e:	463a      	mov	r2, r7
   17e50:	4808      	ldr	r0, [pc, #32]	; (17e74 <hci_disconn_complete+0x3c>)
		bt_le_scan_update(false);
	}
#endif /* defined(CONFIG_BT_CENTRAL) && !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

	bt_conn_unref(conn);
}
   17e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   17e56:	2145      	movs	r1, #69	; 0x45
   17e58:	f00e bfb4 	b.w	26dc4 <z_log_minimal_printk>
	conn->err = evt->reason;
   17e5c:	78eb      	ldrb	r3, [r5, #3]
   17e5e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17e60:	4631      	mov	r1, r6
   17e62:	f002 fac9 	bl	1a3f8 <bt_conn_set_state>
		bt_conn_unref(conn);
   17e66:	4620      	mov	r0, r4
}
   17e68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   17e6c:	f002 ba8c 	b.w	1a388 <bt_conn_unref>
}
   17e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17e72:	bf00      	nop
   17e74:	0002af3c 	.word	0x0002af3c

00017e78 <le_phy_update_complete>:

#if defined(CONFIG_BT_PHY_UPDATE)
static void le_phy_update_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17e78:	6883      	ldr	r3, [r0, #8]
{
   17e7a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17e7c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
   17e80:	4620      	mov	r0, r4
   17e82:	f002 fab1 	bl	1a3e8 <bt_conn_lookup_handle>
	if (!conn) {
   17e86:	b930      	cbnz	r0, 17e96 <le_phy_update_complete+0x1e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17e88:	4622      	mov	r2, r4
   17e8a:	4805      	ldr	r0, [pc, #20]	; (17ea0 <le_phy_update_complete+0x28>)
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
	notify_le_phy_updated(conn);
#endif

	bt_conn_unref(conn);
}
   17e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17e90:	2145      	movs	r1, #69	; 0x45
   17e92:	f00e bf97 	b.w	26dc4 <z_log_minimal_printk>
}
   17e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   17e9a:	f002 ba75 	b.w	1a388 <bt_conn_unref>
   17e9e:	bf00      	nop
   17ea0:	0002af67 	.word	0x0002af67

00017ea4 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17ea4:	6883      	ldr	r3, [r0, #8]
{
   17ea6:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17ea8:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   17eaa:	4620      	mov	r0, r4
   17eac:	f002 fa9c 	bl	1a3e8 <bt_conn_lookup_handle>
	if (!conn) {
   17eb0:	b930      	cbnz	r0, 17ec0 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17eb2:	4622      	mov	r2, r4
   17eb4:	4804      	ldr	r0, [pc, #16]	; (17ec8 <le_data_len_change+0x24>)
}
   17eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17eba:	2145      	movs	r1, #69	; 0x45
   17ebc:	f00e bf82 	b.w	26dc4 <z_log_minimal_printk>
}
   17ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   17ec4:	f002 ba60 	b.w	1a388 <bt_conn_unref>
   17ec8:	0002af67 	.word	0x0002af67

00017ecc <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   17ecc:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   17ece:	2101      	movs	r1, #1
   17ed0:	3008      	adds	r0, #8
   17ed2:	f005 fa69 	bl	1d3a8 <net_buf_simple_pull_mem>
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
}
   17ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17eda:	7802      	ldrb	r2, [r0, #0]
   17edc:	4801      	ldr	r0, [pc, #4]	; (17ee4 <hci_hardware_error+0x18>)
   17ede:	2145      	movs	r1, #69	; 0x45
   17ee0:	f00e bf70 	b.w	26dc4 <z_log_minimal_printk>
   17ee4:	0002af90 	.word	0x0002af90

00017ee8 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   17ee8:	4601      	mov	r1, r0
   17eea:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   17eec:	4807      	ldr	r0, [pc, #28]	; (17f0c <rx_queue_put+0x24>)
   17eee:	f005 f867 	bl	1cfc0 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17ef2:	4907      	ldr	r1, [pc, #28]	; (17f10 <rx_queue_put+0x28>)
   17ef4:	4807      	ldr	r0, [pc, #28]	; (17f14 <rx_queue_put+0x2c>)
   17ef6:	f011 fae2 	bl	294be <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   17efa:	1e02      	subs	r2, r0, #0
   17efc:	da05      	bge.n	17f0a <rx_queue_put+0x22>
		BT_ERR("Could not submit rx_work: %d", err);
	}
}
   17efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Could not submit rx_work: %d", err);
   17f02:	4805      	ldr	r0, [pc, #20]	; (17f18 <rx_queue_put+0x30>)
   17f04:	2145      	movs	r1, #69	; 0x45
   17f06:	f00e bf5d 	b.w	26dc4 <z_log_minimal_printk>
}
   17f0a:	bd08      	pop	{r3, pc}
   17f0c:	200005ec 	.word	0x200005ec
   17f10:	2000071c 	.word	0x2000071c
   17f14:	20001b58 	.word	0x20001b58
   17f18:	0002afb7 	.word	0x0002afb7

00017f1c <le_conn_update_complete>:
{
   17f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17f1e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   17f20:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   17f24:	4630      	mov	r0, r6
   17f26:	f002 fa5f 	bl	1a3e8 <bt_conn_lookup_handle>
	if (!conn) {
   17f2a:	4604      	mov	r4, r0
   17f2c:	b938      	cbnz	r0, 17f3e <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17f2e:	4822      	ldr	r0, [pc, #136]	; (17fb8 <le_conn_update_complete+0x9c>)
   17f30:	4632      	mov	r2, r6
   17f32:	2145      	movs	r1, #69	; 0x45
}
   17f34:	b002      	add	sp, #8
   17f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17f3a:	f00e bf43 	b.w	26dc4 <z_log_minimal_printk>
	if (!evt->status) {
   17f3e:	782b      	ldrb	r3, [r5, #0]
   17f40:	b9cb      	cbnz	r3, 17f76 <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   17f42:	792a      	ldrb	r2, [r5, #4]
   17f44:	78eb      	ldrb	r3, [r5, #3]
   17f46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17f4a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   17f4e:	79aa      	ldrb	r2, [r5, #6]
   17f50:	796b      	ldrb	r3, [r5, #5]
   17f52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17f56:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17f5a:	79eb      	ldrb	r3, [r5, #7]
   17f5c:	7a2a      	ldrb	r2, [r5, #8]
   17f5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17f62:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   17f66:	f002 fb6d 	bl	1a644 <notify_le_param_updated>
	bt_conn_unref(conn);
   17f6a:	4620      	mov	r0, r4
}
   17f6c:	b002      	add	sp, #8
   17f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   17f72:	f002 ba09 	b.w	1a388 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17f76:	2b1a      	cmp	r3, #26
   17f78:	d1f7      	bne.n	17f6a <le_conn_update_complete+0x4e>
   17f7a:	78c3      	ldrb	r3, [r0, #3]
   17f7c:	2b01      	cmp	r3, #1
   17f7e:	d1f4      	bne.n	17f6a <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17f80:	f44f 7100 	mov.w	r1, #512	; 0x200
   17f84:	3004      	adds	r0, #4
   17f86:	f00f fa75 	bl	27474 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17f8a:	0583      	lsls	r3, r0, #22
   17f8c:	d4ed      	bmi.n	17f6a <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
   17f8e:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   17f92:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   17f96:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   17f9a:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   17f9e:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   17fa2:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   17fa6:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   17fa8:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
   17fac:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   17fb0:	4620      	mov	r0, r4
   17fb2:	f002 fefb 	bl	1adac <bt_l2cap_update_conn_param>
   17fb6:	e7d8      	b.n	17f6a <le_conn_update_complete+0x4e>
   17fb8:	0002af67 	.word	0x0002af67

00017fbc <handle_event>:
{
   17fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17fbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   17fc2:	4605      	mov	r5, r0
   17fc4:	4614      	mov	r4, r2
   17fc6:	4608      	mov	r0, r1
		if (handler->event != event) {
   17fc8:	7822      	ldrb	r2, [r4, #0]
   17fca:	42aa      	cmp	r2, r5
   17fcc:	d010      	beq.n	17ff0 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
   17fce:	3408      	adds	r4, #8
   17fd0:	429c      	cmp	r4, r3
   17fd2:	d1f9      	bne.n	17fc8 <handle_event+0xc>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   17fd4:	8984      	ldrh	r4, [r0, #12]
   17fd6:	6880      	ldr	r0, [r0, #8]
   17fd8:	4621      	mov	r1, r4
   17fda:	f7ff fde3 	bl	17ba4 <bt_hex_real>
   17fde:	4623      	mov	r3, r4
   17fe0:	9000      	str	r0, [sp, #0]
   17fe2:	462a      	mov	r2, r5
   17fe4:	480b      	ldr	r0, [pc, #44]	; (18014 <handle_event+0x58>)
   17fe6:	2157      	movs	r1, #87	; 0x57
   17fe8:	f00e feec 	bl	26dc4 <z_log_minimal_printk>
}
   17fec:	b003      	add	sp, #12
   17fee:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
   17ff0:	8982      	ldrh	r2, [r0, #12]
   17ff2:	7863      	ldrb	r3, [r4, #1]
   17ff4:	4293      	cmp	r3, r2
   17ff6:	d907      	bls.n	18008 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17ff8:	4807      	ldr	r0, [pc, #28]	; (18018 <handle_event+0x5c>)
   17ffa:	462b      	mov	r3, r5
   17ffc:	2145      	movs	r1, #69	; 0x45
}
   17ffe:	b003      	add	sp, #12
   18000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   18004:	f00e bede 	b.w	26dc4 <z_log_minimal_printk>
		handler->handler(buf);
   18008:	6863      	ldr	r3, [r4, #4]
}
   1800a:	b003      	add	sp, #12
   1800c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   18010:	4718      	bx	r3
   18012:	bf00      	nop
   18014:	0002b000 	.word	0x0002b000
   18018:	0002afd9 	.word	0x0002afd9

0001801c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1801c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1801e:	4844      	ldr	r0, [pc, #272]	; (18130 <rx_work_handler+0x114>)
   18020:	f005 f82c 	bl	1d07c <net_buf_slist_get>
	if (!buf) {
   18024:	4604      	mov	r4, r0
   18026:	2800      	cmp	r0, #0
   18028:	f000 8081 	beq.w	1812e <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1802c:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   1802e:	2a01      	cmp	r2, #1
   18030:	d04d      	beq.n	180ce <rx_work_handler+0xb2>
   18032:	2a03      	cmp	r2, #3
   18034:	d178      	bne.n	18128 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18036:	8983      	ldrh	r3, [r0, #12]
   18038:	2b03      	cmp	r3, #3
   1803a:	d80b      	bhi.n	18054 <rx_work_handler+0x38>
   1803c:	493d      	ldr	r1, [pc, #244]	; (18134 <rx_work_handler+0x118>)
   1803e:	483e      	ldr	r0, [pc, #248]	; (18138 <rx_work_handler+0x11c>)
   18040:	f240 12eb 	movw	r2, #491	; 0x1eb
   18044:	f00e feb0 	bl	26da8 <assert_print>
   18048:	4040      	eors	r0, r0
   1804a:	f380 8811 	msr	BASEPRI, r0
   1804e:	f04f 0003 	mov.w	r0, #3
   18052:	df02      	svc	2
   18054:	2104      	movs	r1, #4
   18056:	f104 0008 	add.w	r0, r4, #8
   1805a:	f005 f9a5 	bl	1d3a8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1805e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   18060:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   18062:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   18064:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   18066:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   18068:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1806c:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   1806e:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   18070:	d007      	beq.n	18082 <rx_work_handler+0x66>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   18072:	4832      	ldr	r0, [pc, #200]	; (1813c <rx_work_handler+0x120>)
   18074:	2145      	movs	r1, #69	; 0x45
   18076:	f00e fea5 	bl	26dc4 <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   1807a:	4620      	mov	r0, r4
   1807c:	f005 f89c 	bl	1d1b8 <net_buf_unref>
		break;
   18080:	e014      	b.n	180ac <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   18082:	f002 f9b1 	bl	1a3e8 <bt_conn_lookup_handle>
	if (!conn) {
   18086:	4605      	mov	r5, r0
   18088:	b928      	cbnz	r0, 18096 <rx_work_handler+0x7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1808a:	8ae2      	ldrh	r2, [r4, #22]
   1808c:	482c      	ldr	r0, [pc, #176]	; (18140 <rx_work_handler+0x124>)
   1808e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   18090:	f00e fe98 	bl	26dc4 <z_log_minimal_printk>
   18094:	e7f1      	b.n	1807a <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   18096:	f002 fa87 	bl	1a5a8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1809a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   1809c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1809e:	4621      	mov	r1, r4
   180a0:	4628      	mov	r0, r5
   180a2:	f002 f86f 	bl	1a184 <bt_conn_recv>
	bt_conn_unref(conn);
   180a6:	4628      	mov	r0, r5
   180a8:	f002 f96e 	bl	1a388 <bt_conn_unref>
	return list->head;
   180ac:	4b25      	ldr	r3, [pc, #148]	; (18144 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   180ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   180b2:	2b00      	cmp	r3, #0
   180b4:	d03b      	beq.n	1812e <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   180b6:	4924      	ldr	r1, [pc, #144]	; (18148 <rx_work_handler+0x12c>)
   180b8:	4824      	ldr	r0, [pc, #144]	; (1814c <rx_work_handler+0x130>)
   180ba:	f011 fa00 	bl	294be <k_work_submit_to_queue>
#endif
		if (err < 0) {
   180be:	1e02      	subs	r2, r0, #0
   180c0:	da35      	bge.n	1812e <rx_work_handler+0x112>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   180c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Could not submit rx_work: %d", err);
   180c6:	4822      	ldr	r0, [pc, #136]	; (18150 <rx_work_handler+0x134>)
   180c8:	2145      	movs	r1, #69	; 0x45
   180ca:	f00e be7b 	b.w	26dc4 <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   180ce:	8983      	ldrh	r3, [r0, #12]
   180d0:	2b01      	cmp	r3, #1
   180d2:	d80b      	bhi.n	180ec <rx_work_handler+0xd0>
   180d4:	4917      	ldr	r1, [pc, #92]	; (18134 <rx_work_handler+0x118>)
   180d6:	4818      	ldr	r0, [pc, #96]	; (18138 <rx_work_handler+0x11c>)
   180d8:	f640 1259 	movw	r2, #2393	; 0x959
   180dc:	f00e fe64 	bl	26da8 <assert_print>
   180e0:	4040      	eors	r0, r0
   180e2:	f380 8811 	msr	BASEPRI, r0
   180e6:	f04f 0003 	mov.w	r0, #3
   180ea:	df02      	svc	2
   180ec:	2102      	movs	r1, #2
   180ee:	f104 0008 	add.w	r0, r4, #8
   180f2:	f005 f959 	bl	1d3a8 <net_buf_simple_pull_mem>
   180f6:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   180f8:	7800      	ldrb	r0, [r0, #0]
   180fa:	f00f f9a8 	bl	2744e <bt_hci_evt_get_flags>
   180fe:	0783      	lsls	r3, r0, #30
   18100:	d40b      	bmi.n	1811a <rx_work_handler+0xfe>
   18102:	490c      	ldr	r1, [pc, #48]	; (18134 <rx_work_handler+0x118>)
   18104:	480c      	ldr	r0, [pc, #48]	; (18138 <rx_work_handler+0x11c>)
   18106:	f640 125d 	movw	r2, #2397	; 0x95d
   1810a:	f00e fe4d 	bl	26da8 <assert_print>
   1810e:	4040      	eors	r0, r0
   18110:	f380 8811 	msr	BASEPRI, r0
   18114:	f04f 0003 	mov.w	r0, #3
   18118:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1811a:	4a0e      	ldr	r2, [pc, #56]	; (18154 <rx_work_handler+0x138>)
   1811c:	7828      	ldrb	r0, [r5, #0]
   1811e:	2304      	movs	r3, #4
   18120:	4621      	mov	r1, r4
   18122:	f7ff ff4b 	bl	17fbc <handle_event>
	net_buf_unref(buf);
   18126:	e7a8      	b.n	1807a <rx_work_handler+0x5e>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   18128:	480b      	ldr	r0, [pc, #44]	; (18158 <rx_work_handler+0x13c>)
   1812a:	2145      	movs	r1, #69	; 0x45
   1812c:	e7b0      	b.n	18090 <rx_work_handler+0x74>
}
   1812e:	bd70      	pop	{r4, r5, r6, pc}
   18130:	200005ec 	.word	0x200005ec
   18134:	0002b027 	.word	0x0002b027
   18138:	0002a576 	.word	0x0002a576
   1813c:	0002b05b 	.word	0x0002b05b
   18140:	0002b084 	.word	0x0002b084
   18144:	200004f8 	.word	0x200004f8
   18148:	2000071c 	.word	0x2000071c
   1814c:	20001b58 	.word	0x20001b58
   18150:	0002afb7 	.word	0x0002afb7
   18154:	00029d40 	.word	0x00029d40
   18158:	0002b0ab 	.word	0x0002b0ab

0001815c <hci_le_meta_event>:
{
   1815c:	b510      	push	{r4, lr}
   1815e:	2101      	movs	r1, #1
   18160:	4604      	mov	r4, r0
   18162:	3008      	adds	r0, #8
   18164:	f005 f920 	bl	1d3a8 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   18168:	4621      	mov	r1, r4
   1816a:	4a03      	ldr	r2, [pc, #12]	; (18178 <hci_le_meta_event+0x1c>)
   1816c:	7800      	ldrb	r0, [r0, #0]
}
   1816e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   18172:	2309      	movs	r3, #9
   18174:	f7ff bf22 	b.w	17fbc <handle_event>
   18178:	00029ce8 	.word	0x00029ce8

0001817c <le_remote_feat_complete>:
{
   1817c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1817e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18180:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   18184:	4630      	mov	r0, r6
   18186:	f002 f92f 	bl	1a3e8 <bt_conn_lookup_handle>
	if (!conn) {
   1818a:	4604      	mov	r4, r0
   1818c:	b930      	cbnz	r0, 1819c <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1818e:	4632      	mov	r2, r6
   18190:	480b      	ldr	r0, [pc, #44]	; (181c0 <le_remote_feat_complete+0x44>)
}
   18192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18196:	2145      	movs	r1, #69	; 0x45
   18198:	f00e be14 	b.w	26dc4 <z_log_minimal_printk>
	if (!evt->status) {
   1819c:	782b      	ldrb	r3, [r5, #0]
   1819e:	b923      	cbnz	r3, 181aa <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   181a0:	2208      	movs	r2, #8
   181a2:	1ce9      	adds	r1, r5, #3
   181a4:	30b4      	adds	r0, #180	; 0xb4
   181a6:	f00f f8d2 	bl	2734e <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   181aa:	1d20      	adds	r0, r4, #4
   181ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
   181b0:	f00f f960 	bl	27474 <atomic_or>
	bt_conn_unref(conn);
   181b4:	4620      	mov	r0, r4
}
   181b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   181ba:	f002 b8e5 	b.w	1a388 <bt_conn_unref>
   181be:	bf00      	nop
   181c0:	0002af67 	.word	0x0002af67

000181c4 <hci_cmd_done>:
{
   181c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   181c8:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   181ca:	7990      	ldrb	r0, [r2, #6]
   181cc:	4d3e      	ldr	r5, [pc, #248]	; (182c8 <hci_cmd_done+0x104>)
{
   181ce:	460e      	mov	r6, r1
   181d0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   181d2:	f004 fd5f 	bl	1cc94 <net_buf_pool_get>
   181d6:	4285      	cmp	r5, r0
   181d8:	d00e      	beq.n	181f8 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   181da:	79a4      	ldrb	r4, [r4, #6]
   181dc:	4620      	mov	r0, r4
   181de:	f004 fd59 	bl	1cc94 <net_buf_pool_get>
   181e2:	4623      	mov	r3, r4
   181e4:	e9cd 0500 	strd	r0, r5, [sp]
   181e8:	463a      	mov	r2, r7
   181ea:	4838      	ldr	r0, [pc, #224]	; (182cc <hci_cmd_done+0x108>)
   181ec:	2157      	movs	r1, #87	; 0x57
   181ee:	f00e fde9 	bl	26dc4 <z_log_minimal_printk>
}
   181f2:	b002      	add	sp, #8
   181f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   181f8:	4620      	mov	r0, r4
   181fa:	f004 fd53 	bl	1cca4 <net_buf_id>
   181fe:	4d34      	ldr	r5, [pc, #208]	; (182d0 <hci_cmd_done+0x10c>)
   18200:	f04f 080c 	mov.w	r8, #12
   18204:	fb08 5000 	mla	r0, r8, r0, r5
   18208:	8843      	ldrh	r3, [r0, #2]
   1820a:	42bb      	cmp	r3, r7
   1820c:	d00d      	beq.n	1822a <hci_cmd_done+0x66>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1820e:	4620      	mov	r0, r4
   18210:	f004 fd48 	bl	1cca4 <net_buf_id>
   18214:	fb08 5500 	mla	r5, r8, r0, r5
   18218:	482e      	ldr	r0, [pc, #184]	; (182d4 <hci_cmd_done+0x110>)
   1821a:	886b      	ldrh	r3, [r5, #2]
   1821c:	463a      	mov	r2, r7
   1821e:	2157      	movs	r1, #87	; 0x57
}
   18220:	b002      	add	sp, #8
   18222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   18226:	f00e bdcd 	b.w	26dc4 <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   1822a:	4f2b      	ldr	r7, [pc, #172]	; (182d8 <hci_cmd_done+0x114>)
   1822c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
   18230:	b120      	cbz	r0, 1823c <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   18232:	f004 ffc1 	bl	1d1b8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18236:	2300      	movs	r3, #0
   18238:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	if (cmd(buf)->state && !status) {
   1823c:	4620      	mov	r0, r4
   1823e:	f004 fd31 	bl	1cca4 <net_buf_id>
   18242:	270c      	movs	r7, #12
   18244:	fb07 5000 	mla	r0, r7, r0, r5
   18248:	6843      	ldr	r3, [r0, #4]
   1824a:	b1a3      	cbz	r3, 18276 <hci_cmd_done+0xb2>
   1824c:	b99e      	cbnz	r6, 18276 <hci_cmd_done+0xb2>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1824e:	4620      	mov	r0, r4
   18250:	f004 fd28 	bl	1cca4 <net_buf_id>
   18254:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   18258:	2301      	movs	r3, #1
   1825a:	6847      	ldr	r7, [r0, #4]
   1825c:	e9d7 2000 	ldrd	r2, r0, [r7]
   18260:	f000 011f 	and.w	r1, r0, #31
   18264:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
   18268:	7a3b      	ldrb	r3, [r7, #8]
   1826a:	0940      	lsrs	r0, r0, #5
   1826c:	b1e3      	cbz	r3, 182a8 <hci_cmd_done+0xe4>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1826e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   18272:	f00f f8ff 	bl	27474 <atomic_or>
	if (cmd(buf)->sync) {
   18276:	4620      	mov	r0, r4
   18278:	f004 fd14 	bl	1cca4 <net_buf_id>
   1827c:	270c      	movs	r7, #12
   1827e:	fb07 5000 	mla	r0, r7, r0, r5
   18282:	6883      	ldr	r3, [r0, #8]
   18284:	2b00      	cmp	r3, #0
   18286:	d0b4      	beq.n	181f2 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   18288:	4620      	mov	r0, r4
   1828a:	f004 fd0b 	bl	1cca4 <net_buf_id>
   1828e:	4378      	muls	r0, r7
   18290:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   18292:	4620      	mov	r0, r4
   18294:	f004 fd06 	bl	1cca4 <net_buf_id>
   18298:	fb07 5500 	mla	r5, r7, r0, r5
   1829c:	68a8      	ldr	r0, [r5, #8]
}
   1829e:	b002      	add	sp, #8
   182a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   182a4:	f009 b842 	b.w	2132c <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   182a8:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   182aa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   182ae:	f3bf 8f5b 	dmb	ish
   182b2:	e852 1f00 	ldrex	r1, [r2]
   182b6:	4019      	ands	r1, r3
   182b8:	e842 1000 	strex	r0, r1, [r2]
   182bc:	2800      	cmp	r0, #0
   182be:	d1f8      	bne.n	182b2 <hci_cmd_done+0xee>
   182c0:	f3bf 8f5b 	dmb	ish
   182c4:	e7d7      	b.n	18276 <hci_cmd_done+0xb2>
   182c6:	bf00      	nop
   182c8:	20000b64 	.word	0x20000b64
   182cc:	0002b0c4 	.word	0x0002b0c4
   182d0:	20003b78 	.word	0x20003b78
   182d4:	0002b0fe 	.word	0x0002b0fe
   182d8:	200004f8 	.word	0x200004f8

000182dc <hci_cmd_status>:
{
   182dc:	b538      	push	{r3, r4, r5, lr}
   182de:	2104      	movs	r1, #4
   182e0:	4604      	mov	r4, r0
   182e2:	3008      	adds	r0, #8
   182e4:	f005 f860 	bl	1d3a8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   182e8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   182ea:	7801      	ldrb	r1, [r0, #0]
   182ec:	8840      	ldrh	r0, [r0, #2]
   182ee:	4622      	mov	r2, r4
   182f0:	f7ff ff68 	bl	181c4 <hci_cmd_done>
	if (ncmd) {
   182f4:	b125      	cbz	r5, 18300 <hci_cmd_status+0x24>
   182f6:	4803      	ldr	r0, [pc, #12]	; (18304 <hci_cmd_status+0x28>)
}
   182f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   182fc:	f009 b816 	b.w	2132c <z_impl_k_sem_give>
   18300:	bd38      	pop	{r3, r4, r5, pc}
   18302:	bf00      	nop
   18304:	200005d0 	.word	0x200005d0

00018308 <hci_cmd_complete>:
{
   18308:	b538      	push	{r3, r4, r5, lr}
   1830a:	2103      	movs	r1, #3
   1830c:	4604      	mov	r4, r0
   1830e:	3008      	adds	r0, #8
   18310:	f005 f84a 	bl	1d3a8 <net_buf_simple_pull_mem>
	status = buf->data[0];
   18314:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   18316:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   18318:	7819      	ldrb	r1, [r3, #0]
   1831a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1831e:	4622      	mov	r2, r4
   18320:	f7ff ff50 	bl	181c4 <hci_cmd_done>
	if (ncmd) {
   18324:	b125      	cbz	r5, 18330 <hci_cmd_complete+0x28>
   18326:	4803      	ldr	r0, [pc, #12]	; (18334 <hci_cmd_complete+0x2c>)
}
   18328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1832c:	f008 bffe 	b.w	2132c <z_impl_k_sem_give>
   18330:	bd38      	pop	{r3, r4, r5, pc}
   18332:	bf00      	nop
   18334:	200005d0 	.word	0x200005d0

00018338 <hci_num_completed_packets>:
{
   18338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1833c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1833e:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   18340:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 18410 <hci_num_completed_packets+0xd8>
			tx->pending_no_cb = 0U;
   18344:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   18346:	783b      	ldrb	r3, [r7, #0]
   18348:	429d      	cmp	r5, r3
   1834a:	db01      	blt.n	18350 <hci_num_completed_packets+0x18>
}
   1834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   18350:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   18354:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   18358:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1835c:	4650      	mov	r0, sl
   1835e:	f002 f843 	bl	1a3e8 <bt_conn_lookup_handle>
		if (!conn) {
   18362:	4604      	mov	r4, r0
   18364:	b1d0      	cbz	r0, 1839c <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   18366:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   1836a:	b37e      	cbz	r6, 183cc <hci_num_completed_packets+0x94>
	__asm__ volatile(
   1836c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18370:	f3ef 8211 	mrs	r2, BASEPRI
   18374:	f383 8812 	msr	BASEPRI_MAX, r3
   18378:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1837c:	69e3      	ldr	r3, [r4, #28]
   1837e:	b1a3      	cbz	r3, 183aa <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   18380:	3b01      	subs	r3, #1
   18382:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18384:	f382 8811 	msr	BASEPRI, r2
   18388:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1838c:	4620      	mov	r0, r4
   1838e:	f001 fe7f 	bl	1a090 <bt_conn_get_pkts>
   18392:	3e01      	subs	r6, #1
   18394:	f008 ffca 	bl	2132c <z_impl_k_sem_give>
   18398:	b2b6      	uxth	r6, r6
   1839a:	e7e6      	b.n	1836a <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
   1839c:	481d      	ldr	r0, [pc, #116]	; (18414 <hci_num_completed_packets+0xdc>)
   1839e:	4652      	mov	r2, sl
   183a0:	2145      	movs	r1, #69	; 0x45
   183a2:	f00e fd0f 	bl	26dc4 <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   183a6:	3501      	adds	r5, #1
   183a8:	e7cd      	b.n	18346 <hci_num_completed_packets+0xe>
   183aa:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   183ac:	b12b      	cbz	r3, 183ba <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   183ae:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   183b0:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   183b2:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   183b4:	428b      	cmp	r3, r1
	list->tail = node;
   183b6:	bf08      	it	eq
   183b8:	61a0      	streq	r0, [r4, #24]
   183ba:	f382 8811 	msr	BASEPRI, r2
   183be:	f3bf 8f6f 	isb	sy
			if (!node) {
   183c2:	b93b      	cbnz	r3, 183d4 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
   183c4:	2145      	movs	r1, #69	; 0x45
   183c6:	4648      	mov	r0, r9
   183c8:	f00e fcfc 	bl	26dc4 <z_log_minimal_printk>
		bt_conn_unref(conn);
   183cc:	4620      	mov	r0, r4
   183ce:	f001 ffdb 	bl	1a388 <bt_conn_unref>
   183d2:	e7e8      	b.n	183a6 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
   183d4:	f04f 0240 	mov.w	r2, #64	; 0x40
   183d8:	f3ef 8111 	mrs	r1, BASEPRI
   183dc:	f382 8812 	msr	BASEPRI_MAX, r2
   183e0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   183e4:	68da      	ldr	r2, [r3, #12]
   183e6:	61e2      	str	r2, [r4, #28]
	return list->tail;
   183e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   183ea:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   183ee:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   183f2:	b94a      	cbnz	r2, 18408 <hci_num_completed_packets+0xd0>
	list->head = node;
   183f4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   183f8:	f381 8811 	msr	BASEPRI, r1
   183fc:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   18400:	4650      	mov	r0, sl
   18402:	f009 fa9f 	bl	21944 <k_work_submit>
   18406:	e7c1      	b.n	1838c <hci_num_completed_packets+0x54>
	parent->next = child;
   18408:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1840a:	6263      	str	r3, [r4, #36]	; 0x24
}
   1840c:	e7f4      	b.n	183f8 <hci_num_completed_packets+0xc0>
   1840e:	bf00      	nop
   18410:	0002b157 	.word	0x0002b157
   18414:	0002b136 	.word	0x0002b136

00018418 <bt_hci_cmd_state_set_init>:
{
   18418:	b510      	push	{r4, lr}
	state->bit = bit;
   1841a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1841e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18422:	720b      	strb	r3, [r1, #8]
{
   18424:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   18426:	f004 fc3d 	bl	1cca4 <net_buf_id>
   1842a:	4b03      	ldr	r3, [pc, #12]	; (18438 <bt_hci_cmd_state_set_init+0x20>)
   1842c:	220c      	movs	r2, #12
   1842e:	fb02 3300 	mla	r3, r2, r0, r3
   18432:	605c      	str	r4, [r3, #4]
}
   18434:	bd10      	pop	{r4, pc}
   18436:	bf00      	nop
   18438:	20003b78 	.word	0x20003b78

0001843c <bt_hci_cmd_create>:
{
   1843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   18440:	f04f 32ff 	mov.w	r2, #4294967295
   18444:	4606      	mov	r6, r0
   18446:	f04f 33ff 	mov.w	r3, #4294967295
   1844a:	481c      	ldr	r0, [pc, #112]	; (184bc <bt_hci_cmd_create+0x80>)
   1844c:	460f      	mov	r7, r1
   1844e:	f010 fbdb 	bl	28c08 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   18452:	4604      	mov	r4, r0
   18454:	b940      	cbnz	r0, 18468 <bt_hci_cmd_create+0x2c>
   18456:	491a      	ldr	r1, [pc, #104]	; (184c0 <bt_hci_cmd_create+0x84>)
   18458:	481a      	ldr	r0, [pc, #104]	; (184c4 <bt_hci_cmd_create+0x88>)
   1845a:	22ff      	movs	r2, #255	; 0xff
   1845c:	f00e fca4 	bl	26da8 <assert_print>
   18460:	4817      	ldr	r0, [pc, #92]	; (184c0 <bt_hci_cmd_create+0x84>)
   18462:	21ff      	movs	r1, #255	; 0xff
   18464:	f00e fc99 	bl	26d9a <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   18468:	f104 0a08 	add.w	sl, r4, #8
   1846c:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1846e:	f04f 0800 	mov.w	r8, #0
   18472:	4650      	mov	r0, sl
   18474:	f004 fd80 	bl	1cf78 <net_buf_simple_reserve>
   18478:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   1847c:	4620      	mov	r0, r4
   1847e:	f004 fc11 	bl	1cca4 <net_buf_id>
   18482:	4d11      	ldr	r5, [pc, #68]	; (184c8 <bt_hci_cmd_create+0x8c>)
   18484:	f04f 090c 	mov.w	r9, #12
   18488:	fb09 5000 	mla	r0, r9, r0, r5
   1848c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1848e:	4620      	mov	r0, r4
   18490:	f004 fc08 	bl	1cca4 <net_buf_id>
   18494:	fb09 5000 	mla	r0, r9, r0, r5
   18498:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1849c:	4620      	mov	r0, r4
   1849e:	f004 fc01 	bl	1cca4 <net_buf_id>
   184a2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   184a6:	2103      	movs	r1, #3
   184a8:	f8c5 8004 	str.w	r8, [r5, #4]
   184ac:	4650      	mov	r0, sl
   184ae:	f004 ff99 	bl	1d3e4 <net_buf_simple_add>
	hdr->param_len = param_len;
   184b2:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   184b4:	8006      	strh	r6, [r0, #0]
}
   184b6:	4620      	mov	r0, r4
   184b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   184bc:	20000b64 	.word	0x20000b64
   184c0:	0002b027 	.word	0x0002b027
   184c4:	0002a576 	.word	0x0002a576
   184c8:	20003b78 	.word	0x20003b78

000184cc <bt_hci_cmd_send_sync>:
{
   184cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   184ce:	4607      	mov	r7, r0
   184d0:	b087      	sub	sp, #28
   184d2:	4615      	mov	r5, r2
	if (!buf) {
   184d4:	460c      	mov	r4, r1
   184d6:	b921      	cbnz	r1, 184e2 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   184d8:	f7ff ffb0 	bl	1843c <bt_hci_cmd_create>
		if (!buf) {
   184dc:	4604      	mov	r4, r0
   184de:	2800      	cmp	r0, #0
   184e0:	d048      	beq.n	18574 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   184e2:	2201      	movs	r2, #1
   184e4:	2100      	movs	r1, #0
   184e6:	4668      	mov	r0, sp
   184e8:	f010 ff88 	bl	293fc <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   184ec:	4620      	mov	r0, r4
   184ee:	f004 fbd9 	bl	1cca4 <net_buf_id>
   184f2:	4e22      	ldr	r6, [pc, #136]	; (1857c <bt_hci_cmd_send_sync+0xb0>)
   184f4:	230c      	movs	r3, #12
   184f6:	fb03 6000 	mla	r0, r3, r0, r6
   184fa:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   184fe:	4620      	mov	r0, r4
   18500:	f004 fe9e 	bl	1d240 <net_buf_ref>
   18504:	4601      	mov	r1, r0
   18506:	481e      	ldr	r0, [pc, #120]	; (18580 <bt_hci_cmd_send_sync+0xb4>)
   18508:	f004 fe28 	bl	1d15c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1850c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   18510:	2300      	movs	r3, #0
   18512:	4668      	mov	r0, sp
   18514:	f008 ff44 	bl	213a0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   18518:	b158      	cbz	r0, 18532 <bt_hci_cmd_send_sync+0x66>
   1851a:	491a      	ldr	r1, [pc, #104]	; (18584 <bt_hci_cmd_send_sync+0xb8>)
   1851c:	481a      	ldr	r0, [pc, #104]	; (18588 <bt_hci_cmd_send_sync+0xbc>)
   1851e:	f240 1247 	movw	r2, #327	; 0x147
   18522:	f00e fc41 	bl	26da8 <assert_print>
   18526:	4040      	eors	r0, r0
   18528:	f380 8811 	msr	BASEPRI, r0
   1852c:	f04f 0003 	mov.w	r0, #3
   18530:	df02      	svc	2
	status = cmd(buf)->status;
   18532:	4620      	mov	r0, r4
   18534:	f004 fbb6 	bl	1cca4 <net_buf_id>
   18538:	230c      	movs	r3, #12
   1853a:	4358      	muls	r0, r3
   1853c:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   1853e:	b186      	cbz	r6, 18562 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   18540:	4812      	ldr	r0, [pc, #72]	; (1858c <bt_hci_cmd_send_sync+0xc0>)
   18542:	4633      	mov	r3, r6
   18544:	463a      	mov	r2, r7
   18546:	2157      	movs	r1, #87	; 0x57
   18548:	f00e fc3c 	bl	26dc4 <z_log_minimal_printk>
		net_buf_unref(buf);
   1854c:	4620      	mov	r0, r4
   1854e:	f004 fe33 	bl	1d1b8 <net_buf_unref>
			return -EIO;
   18552:	2e09      	cmp	r6, #9
   18554:	bf0c      	ite	eq
   18556:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   1855a:	f06f 0004 	mvnne.w	r0, #4
}
   1855e:	b007      	add	sp, #28
   18560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   18562:	b115      	cbz	r5, 1856a <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   18564:	602c      	str	r4, [r5, #0]
	return 0;
   18566:	4630      	mov	r0, r6
   18568:	e7f9      	b.n	1855e <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   1856a:	4620      	mov	r0, r4
   1856c:	f004 fe24 	bl	1d1b8 <net_buf_unref>
	return 0;
   18570:	4628      	mov	r0, r5
   18572:	e7f4      	b.n	1855e <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
   18574:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18578:	e7f1      	b.n	1855e <bt_hci_cmd_send_sync+0x92>
   1857a:	bf00      	nop
   1857c:	20003b78 	.word	0x20003b78
   18580:	200005f4 	.word	0x200005f4
   18584:	0002b027 	.word	0x0002b027
   18588:	0002a576 	.word	0x0002a576
   1858c:	0002b173 	.word	0x0002b173

00018590 <hci_le_read_max_data_len>:
{
   18590:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18592:	4606      	mov	r6, r0
   18594:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   18596:	aa01      	add	r2, sp, #4
   18598:	2100      	movs	r1, #0
   1859a:	f242 002f 	movw	r0, #8239	; 0x202f
   1859e:	f7ff ff95 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   185a2:	4604      	mov	r4, r0
   185a4:	b130      	cbz	r0, 185b4 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   185a6:	4809      	ldr	r0, [pc, #36]	; (185cc <hci_le_read_max_data_len+0x3c>)
   185a8:	2145      	movs	r1, #69	; 0x45
   185aa:	f00e fc0b 	bl	26dc4 <z_log_minimal_printk>
}
   185ae:	4620      	mov	r0, r4
   185b0:	b002      	add	sp, #8
   185b2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   185b4:	9801      	ldr	r0, [sp, #4]
   185b6:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   185b8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   185bc:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   185be:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   185c2:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   185c4:	f004 fdf8 	bl	1d1b8 <net_buf_unref>
	return 0;
   185c8:	e7f1      	b.n	185ae <hci_le_read_max_data_len+0x1e>
   185ca:	bf00      	nop
   185cc:	0002b194 	.word	0x0002b194

000185d0 <bt_hci_le_rand>:
{
   185d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   185d2:	4b14      	ldr	r3, [pc, #80]	; (18624 <bt_hci_le_rand+0x54>)
   185d4:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
   185d8:	2b00      	cmp	r3, #0
{
   185da:	4605      	mov	r5, r0
   185dc:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   185de:	da1d      	bge.n	1861c <bt_hci_le_rand+0x4c>
	while (len > 0) {
   185e0:	b914      	cbnz	r4, 185e8 <bt_hci_le_rand+0x18>
	return 0;
   185e2:	4620      	mov	r0, r4
}
   185e4:	b002      	add	sp, #8
   185e6:	bd70      	pop	{r4, r5, r6, pc}
		count = MIN(len, sizeof(rp->rand));
   185e8:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   185ea:	aa01      	add	r2, sp, #4
   185ec:	f04f 0100 	mov.w	r1, #0
   185f0:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   185f4:	4626      	mov	r6, r4
   185f6:	bf28      	it	cs
   185f8:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   185fa:	f7ff ff67 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   185fe:	2800      	cmp	r0, #0
   18600:	d1f0      	bne.n	185e4 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   18602:	9b01      	ldr	r3, [sp, #4]
		memcpy(buffer, rp->rand, count);
   18604:	6899      	ldr	r1, [r3, #8]
   18606:	4632      	mov	r2, r6
   18608:	3101      	adds	r1, #1
   1860a:	4628      	mov	r0, r5
   1860c:	f00e fe9f 	bl	2734e <memcpy>
		net_buf_unref(rsp);
   18610:	9801      	ldr	r0, [sp, #4]
   18612:	f004 fdd1 	bl	1d1b8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   18616:	4435      	add	r5, r6
		len -= count;
   18618:	1ba4      	subs	r4, r4, r6
   1861a:	e7e1      	b.n	185e0 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   1861c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18620:	e7e0      	b.n	185e4 <bt_hci_le_rand+0x14>
   18622:	bf00      	nop
   18624:	200004f8 	.word	0x200004f8

00018628 <bt_hci_le_enh_conn_complete>:
{
   18628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1862c:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   18630:	4a8a      	ldr	r2, [pc, #552]	; (1885c <bt_hci_le_enh_conn_complete+0x234>)
	handle |= ~BT_ACL_HANDLE_MASK;
   18632:	ea6f 5308 	mvn.w	r3, r8, lsl #20
		if (disconnected_handles[i] == handle) {
   18636:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   18638:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   1863c:	b29b      	uxth	r3, r3
   1863e:	4299      	cmp	r1, r3
   18640:	f04f 0700 	mov.w	r7, #0
			disconnected_handles[i] = 0;
   18644:	bf08      	it	eq
   18646:	8017      	strheq	r7, [r2, #0]
	if (evt->status) {
   18648:	7802      	ldrb	r2, [r0, #0]
{
   1864a:	b08a      	sub	sp, #40	; 0x28
   1864c:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1864e:	fa1f f988 	uxth.w	r9, r8
			return true;
   18652:	bf08      	it	eq
   18654:	2701      	moveq	r7, #1
	if (evt->status) {
   18656:	b142      	cbz	r2, 1866a <bt_hci_le_enh_conn_complete+0x42>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18658:	2a3c      	cmp	r2, #60	; 0x3c
   1865a:	d02f      	beq.n	186bc <bt_hci_le_enh_conn_complete+0x94>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1865c:	4880      	ldr	r0, [pc, #512]	; (18860 <bt_hci_le_enh_conn_complete+0x238>)
   1865e:	2157      	movs	r1, #87	; 0x57
}
   18660:	b00a      	add	sp, #40	; 0x28
   18662:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   18666:	f00e bbad 	b.w	26dc4 <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1866a:	7903      	ldrb	r3, [r0, #4]
   1866c:	3b02      	subs	r3, #2
   1866e:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   18670:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   18674:	d825      	bhi.n	186c2 <bt_hci_le_enh_conn_complete+0x9a>
	memcpy(dst, src, sizeof(*dst));
   18676:	2207      	movs	r2, #7
   18678:	4651      	mov	r1, sl
   1867a:	a806      	add	r0, sp, #24
   1867c:	f00e fe67 	bl	2734e <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18680:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   18684:	2206      	movs	r2, #6
   18686:	3b02      	subs	r3, #2
   18688:	f105 0111 	add.w	r1, r5, #17
   1868c:	f10d 0011 	add.w	r0, sp, #17
   18690:	f88d 3018 	strb.w	r3, [sp, #24]
   18694:	f00e fe5b 	bl	2734e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18698:	2301      	movs	r3, #1
   1869a:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1869e:	78eb      	ldrb	r3, [r5, #3]
   186a0:	2b01      	cmp	r3, #1
   186a2:	d023      	beq.n	186ec <bt_hci_le_enh_conn_complete+0xc4>
		BT_ERR("No pending conn for peer %s",
   186a4:	4650      	mov	r0, sl
   186a6:	f7ff fa9f 	bl	17be8 <bt_addr_le_str_real>
   186aa:	2145      	movs	r1, #69	; 0x45
   186ac:	4602      	mov	r2, r0
   186ae:	486d      	ldr	r0, [pc, #436]	; (18864 <bt_hci_le_enh_conn_complete+0x23c>)
   186b0:	f00e fb88 	bl	26dc4 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   186b4:	211f      	movs	r1, #31
   186b6:	4648      	mov	r0, r9
   186b8:	f00e feeb 	bl	27492 <bt_hci_disconnect>
}
   186bc:	b00a      	add	sp, #40	; 0x28
   186be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   186c2:	78c3      	ldrb	r3, [r0, #3]
   186c4:	2b01      	cmp	r3, #1
   186c6:	bf04      	itt	eq
   186c8:	4b67      	ldreq	r3, [pc, #412]	; (18868 <bt_hci_le_enh_conn_complete+0x240>)
   186ca:	f893 2023 	ldrbeq.w	r2, [r3, #35]	; 0x23
		bt_addr_le_copy(&id_addr,
   186ce:	4651      	mov	r1, sl
   186d0:	4610      	mov	r0, r2
   186d2:	f00e ffa0 	bl	27616 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   186d6:	2207      	movs	r2, #7
   186d8:	4601      	mov	r1, r0
   186da:	a806      	add	r0, sp, #24
   186dc:	f00e fe37 	bl	2734e <memcpy>
   186e0:	2207      	movs	r2, #7
   186e2:	4651      	mov	r1, sl
   186e4:	a804      	add	r0, sp, #16
   186e6:	f00e fe32 	bl	2734e <memcpy>
}
   186ea:	e7d8      	b.n	1869e <bt_hci_le_enh_conn_complete+0x76>
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   186ec:	4e5e      	ldr	r6, [pc, #376]	; (18868 <bt_hci_le_enh_conn_complete+0x240>)
   186ee:	2205      	movs	r2, #5
   186f0:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
   186f4:	a906      	add	r1, sp, #24
   186f6:	f002 f8a7 	bl	1a848 <bt_conn_lookup_state_le>
		if (!conn) {
   186fa:	4604      	mov	r4, r0
   186fc:	b988      	cbnz	r0, 18722 <bt_hci_le_enh_conn_complete+0xfa>
						       BT_ADDR_LE_NONE,
   186fe:	4b5b      	ldr	r3, [pc, #364]	; (1886c <bt_hci_le_enh_conn_complete+0x244>)
   18700:	6818      	ldr	r0, [r3, #0]
   18702:	889a      	ldrh	r2, [r3, #4]
   18704:	9008      	str	r0, [sp, #32]
   18706:	799b      	ldrb	r3, [r3, #6]
   18708:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1870c:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
						       BT_ADDR_LE_NONE,
   18710:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   18714:	2204      	movs	r2, #4
   18716:	a908      	add	r1, sp, #32
   18718:	f002 f896 	bl	1a848 <bt_conn_lookup_state_le>
	if (!conn) {
   1871c:	4604      	mov	r4, r0
   1871e:	2800      	cmp	r0, #0
   18720:	d0c0      	beq.n	186a4 <bt_hci_le_enh_conn_complete+0x7c>
	conn->handle = handle;
   18722:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   18724:	2207      	movs	r2, #7
   18726:	f820 8b90 	strh.w	r8, [r0], #144
   1872a:	a906      	add	r1, sp, #24
   1872c:	f00e fe0f 	bl	2734e <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18730:	7e2a      	ldrb	r2, [r5, #24]
   18732:	7deb      	ldrb	r3, [r5, #23]
   18734:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18738:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1873c:	7eaa      	ldrb	r2, [r5, #26]
   1873e:	7e6b      	ldrb	r3, [r5, #25]
   18740:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18744:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18748:	7f2a      	ldrb	r2, [r5, #28]
   1874a:	7eeb      	ldrb	r3, [r5, #27]
   1874c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18750:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   18754:	78eb      	ldrb	r3, [r5, #3]
   18756:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   18758:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1875a:	2b01      	cmp	r3, #1
	conn->err = 0U;
   1875c:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1875e:	d112      	bne.n	18786 <bt_hci_le_enh_conn_complete+0x15e>
   18760:	2207      	movs	r2, #7
   18762:	a904      	add	r1, sp, #16
   18764:	f104 0097 	add.w	r0, r4, #151	; 0x97
   18768:	f00e fdf1 	bl	2734e <memcpy>
	memcpy(dst, src, sizeof(*dst));
   1876c:	2206      	movs	r2, #6
   1876e:	f105 010b 	add.w	r1, r5, #11
   18772:	f104 009f 	add.w	r0, r4, #159	; 0x9f
   18776:	f00e fdea 	bl	2734e <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1877a:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
   1877e:	065b      	lsls	r3, r3, #25
   18780:	d501      	bpl.n	18786 <bt_hci_le_enh_conn_complete+0x15e>
			bt_le_adv_resume();
   18782:	f001 f9bb 	bl	19afc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18786:	2107      	movs	r1, #7
   18788:	4620      	mov	r0, r4
   1878a:	f001 fe35 	bl	1a3f8 <bt_conn_set_state>
	if (is_disconnected) {
   1878e:	b11f      	cbz	r7, 18798 <bt_hci_le_enh_conn_complete+0x170>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18790:	2101      	movs	r1, #1
   18792:	4620      	mov	r0, r4
   18794:	f001 fe30 	bl	1a3f8 <bt_conn_set_state>
	bt_conn_connected(conn);
   18798:	4620      	mov	r0, r4
   1879a:	f00f fa34 	bl	27c06 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1879e:	7aa3      	ldrb	r3, [r4, #10]
   187a0:	2b07      	cmp	r3, #7
   187a2:	d153      	bne.n	1884c <bt_hci_le_enh_conn_complete+0x224>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   187a4:	f3bf 8f5b 	dmb	ish
   187a8:	6863      	ldr	r3, [r4, #4]
   187aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   187ae:	051d      	lsls	r5, r3, #20
   187b0:	d41f      	bmi.n	187f2 <bt_hci_le_enh_conn_complete+0x1ca>
   187b2:	78e3      	ldrb	r3, [r4, #3]
   187b4:	b11b      	cbz	r3, 187be <bt_hci_le_enh_conn_complete+0x196>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   187b6:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   187ba:	0718      	lsls	r0, r3, #28
   187bc:	d519      	bpl.n	187f2 <bt_hci_le_enh_conn_complete+0x1ca>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   187be:	2102      	movs	r1, #2
   187c0:	f242 0016 	movw	r0, #8214	; 0x2016
   187c4:	f7ff fe3a 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   187c8:	4605      	mov	r5, r0
   187ca:	2800      	cmp	r0, #0
   187cc:	d042      	beq.n	18854 <bt_hci_le_enh_conn_complete+0x22c>
   187ce:	2102      	movs	r1, #2
   187d0:	3008      	adds	r0, #8
   187d2:	f004 fe07 	bl	1d3e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   187d6:	8823      	ldrh	r3, [r4, #0]
   187d8:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   187da:	2200      	movs	r2, #0
   187dc:	4629      	mov	r1, r5
   187de:	f242 0016 	movw	r0, #8214	; 0x2016
   187e2:	f7ff fe73 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   187e6:	4602      	mov	r2, r0
   187e8:	b118      	cbz	r0, 187f2 <bt_hci_le_enh_conn_complete+0x1ca>
			BT_ERR("Failed read remote features (%d)", err);
   187ea:	4821      	ldr	r0, [pc, #132]	; (18870 <bt_hci_le_enh_conn_complete+0x248>)
   187ec:	2145      	movs	r1, #69	; 0x45
   187ee:	f00e fae9 	bl	26dc4 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   187f2:	f896 3091 	ldrb.w	r3, [r6, #145]	; 0x91
   187f6:	07d9      	lsls	r1, r3, #31
   187f8:	d50c      	bpl.n	18814 <bt_hci_le_enh_conn_complete+0x1ec>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   187fa:	2100      	movs	r1, #0
   187fc:	2302      	movs	r3, #2
   187fe:	461a      	mov	r2, r3
   18800:	9100      	str	r1, [sp, #0]
   18802:	4620      	mov	r0, r4
   18804:	f00e fe7e 	bl	27504 <bt_le_set_phy>
		if (err) {
   18808:	4602      	mov	r2, r0
   1880a:	b118      	cbz	r0, 18814 <bt_hci_le_enh_conn_complete+0x1ec>
			BT_ERR("Failed LE Set PHY (%d)", err);
   1880c:	4819      	ldr	r0, [pc, #100]	; (18874 <bt_hci_le_enh_conn_complete+0x24c>)
   1880e:	2145      	movs	r1, #69	; 0x45
   18810:	f00e fad8 	bl	26dc4 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   18814:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   18818:	069a      	lsls	r2, r3, #26
   1881a:	d517      	bpl.n	1884c <bt_hci_le_enh_conn_complete+0x224>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1881c:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
   18820:	689b      	ldr	r3, [r3, #8]
   18822:	079b      	lsls	r3, r3, #30
   18824:	d512      	bpl.n	1884c <bt_hci_le_enh_conn_complete+0x224>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18826:	a908      	add	r1, sp, #32
   18828:	f10d 000e 	add.w	r0, sp, #14
   1882c:	f7ff feb0 	bl	18590 <hci_le_read_max_data_len>
			if (!err) {
   18830:	b960      	cbnz	r0, 1884c <bt_hci_le_enh_conn_complete+0x224>
				err = bt_le_set_data_len(conn,
   18832:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   18836:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1883a:	4620      	mov	r0, r4
   1883c:	f00e fe44 	bl	274c8 <bt_le_set_data_len>
				if (err) {
   18840:	4602      	mov	r2, r0
   18842:	b118      	cbz	r0, 1884c <bt_hci_le_enh_conn_complete+0x224>
					BT_ERR("Failed to set data len (%d)", err);
   18844:	480c      	ldr	r0, [pc, #48]	; (18878 <bt_hci_le_enh_conn_complete+0x250>)
   18846:	2145      	movs	r1, #69	; 0x45
   18848:	f00e fabc 	bl	26dc4 <z_log_minimal_printk>
	bt_conn_unref(conn);
   1884c:	4620      	mov	r0, r4
   1884e:	f001 fd9b 	bl	1a388 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18852:	e733      	b.n	186bc <bt_hci_le_enh_conn_complete+0x94>
		return -ENOBUFS;
   18854:	f06f 0268 	mvn.w	r2, #104	; 0x68
   18858:	e7c7      	b.n	187ea <bt_hci_le_enh_conn_complete+0x1c2>
   1885a:	bf00      	nop
   1885c:	20004a6c 	.word	0x20004a6c
   18860:	0002b1b9 	.word	0x0002b1b9
   18864:	0002b1d7 	.word	0x0002b1d7
   18868:	200004f8 	.word	0x200004f8
   1886c:	00029b84 	.word	0x00029b84
   18870:	0002b1f8 	.word	0x0002b1f8
   18874:	0002b21e 	.word	0x0002b21e
   18878:	0002b23a 	.word	0x0002b23a

0001887c <bt_send>:
	return bt_dev.drv->send(buf);
   1887c:	4b02      	ldr	r3, [pc, #8]	; (18888 <bt_send+0xc>)
   1887e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   18882:	695b      	ldr	r3, [r3, #20]
   18884:	4718      	bx	r3
   18886:	bf00      	nop
   18888:	200004f8 	.word	0x200004f8

0001888c <bt_hci_cmd_send>:
{
   1888c:	b538      	push	{r3, r4, r5, lr}
   1888e:	4605      	mov	r5, r0
	if (!buf) {
   18890:	460c      	mov	r4, r1
   18892:	b919      	cbnz	r1, 1889c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   18894:	f7ff fdd2 	bl	1843c <bt_hci_cmd_create>
		if (!buf) {
   18898:	4604      	mov	r4, r0
   1889a:	b1c0      	cbz	r0, 188ce <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1889c:	f640 4335 	movw	r3, #3125	; 0xc35
   188a0:	429d      	cmp	r5, r3
   188a2:	d10e      	bne.n	188c2 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   188a4:	4620      	mov	r0, r4
   188a6:	f7ff ffe9 	bl	1887c <bt_send>
		if (err) {
   188aa:	4605      	mov	r5, r0
   188ac:	b138      	cbz	r0, 188be <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
   188ae:	4602      	mov	r2, r0
   188b0:	2145      	movs	r1, #69	; 0x45
   188b2:	4808      	ldr	r0, [pc, #32]	; (188d4 <bt_hci_cmd_send+0x48>)
   188b4:	f00e fa86 	bl	26dc4 <z_log_minimal_printk>
			net_buf_unref(buf);
   188b8:	4620      	mov	r0, r4
   188ba:	f004 fc7d 	bl	1d1b8 <net_buf_unref>
}
   188be:	4628      	mov	r0, r5
   188c0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   188c2:	4805      	ldr	r0, [pc, #20]	; (188d8 <bt_hci_cmd_send+0x4c>)
   188c4:	4621      	mov	r1, r4
   188c6:	f004 fc49 	bl	1d15c <net_buf_put>
	return 0;
   188ca:	2500      	movs	r5, #0
   188cc:	e7f7      	b.n	188be <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   188ce:	f06f 0568 	mvn.w	r5, #104	; 0x68
   188d2:	e7f4      	b.n	188be <bt_hci_cmd_send+0x32>
   188d4:	0002b25b 	.word	0x0002b25b
   188d8:	200005f4 	.word	0x200005f4

000188dc <le_conn_param_neg_reply>:
{
   188dc:	b570      	push	{r4, r5, r6, lr}
   188de:	4606      	mov	r6, r0
   188e0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   188e2:	f242 0021 	movw	r0, #8225	; 0x2021
   188e6:	2103      	movs	r1, #3
   188e8:	f7ff fda8 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   188ec:	4604      	mov	r4, r0
   188ee:	b928      	cbnz	r0, 188fc <le_conn_param_neg_reply+0x20>
}
   188f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   188f4:	4808      	ldr	r0, [pc, #32]	; (18918 <le_conn_param_neg_reply+0x3c>)
   188f6:	2145      	movs	r1, #69	; 0x45
   188f8:	f00e ba64 	b.w	26dc4 <z_log_minimal_printk>
   188fc:	2103      	movs	r1, #3
   188fe:	3008      	adds	r0, #8
   18900:	f004 fd70 	bl	1d3e4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   18904:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   18906:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18908:	4621      	mov	r1, r4
   1890a:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1890e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18912:	f7ff bfbb 	b.w	1888c <bt_hci_cmd_send>
   18916:	bf00      	nop
   18918:	0002b282 	.word	0x0002b282

0001891c <le_conn_param_req>:
{
   1891c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1891e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18920:	78d9      	ldrb	r1, [r3, #3]
   18922:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   18924:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18926:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1892a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1892e:	7959      	ldrb	r1, [r3, #5]
   18930:	791a      	ldrb	r2, [r3, #4]
   18932:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18936:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1893a:	799a      	ldrb	r2, [r3, #6]
   1893c:	79d9      	ldrb	r1, [r3, #7]
   1893e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18942:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18946:	7a1a      	ldrb	r2, [r3, #8]
   18948:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1894a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1894c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   18950:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18952:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   18956:	f001 fd47 	bl	1a3e8 <bt_conn_lookup_handle>
	if (!conn) {
   1895a:	4606      	mov	r6, r0
   1895c:	b950      	cbnz	r0, 18974 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1895e:	481d      	ldr	r0, [pc, #116]	; (189d4 <le_conn_param_req+0xb8>)
   18960:	2145      	movs	r1, #69	; 0x45
   18962:	4622      	mov	r2, r4
   18964:	f00e fa2e 	bl	26dc4 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   18968:	2102      	movs	r1, #2
   1896a:	4620      	mov	r0, r4
   1896c:	f7ff ffb6 	bl	188dc <le_conn_param_neg_reply>
}
   18970:	b003      	add	sp, #12
   18972:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   18974:	4669      	mov	r1, sp
   18976:	f001 fec7 	bl	1a708 <le_param_req>
   1897a:	b938      	cbnz	r0, 1898c <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1897c:	211e      	movs	r1, #30
   1897e:	4620      	mov	r0, r4
   18980:	f7ff ffac 	bl	188dc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   18984:	4630      	mov	r0, r6
   18986:	f001 fcff 	bl	1a388 <bt_conn_unref>
   1898a:	e7f1      	b.n	18970 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1898c:	210e      	movs	r1, #14
   1898e:	f242 0020 	movw	r0, #8224	; 0x2020
   18992:	f7ff fd53 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   18996:	4605      	mov	r5, r0
   18998:	2800      	cmp	r0, #0
   1899a:	d0f3      	beq.n	18984 <le_conn_param_req+0x68>
   1899c:	210e      	movs	r1, #14
   1899e:	3008      	adds	r0, #8
   189a0:	f004 fd20 	bl	1d3e4 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   189a4:	220e      	movs	r2, #14
   189a6:	4604      	mov	r4, r0
   189a8:	2100      	movs	r1, #0
   189aa:	f00e fcdb 	bl	27364 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   189ae:	f8bd 3000 	ldrh.w	r3, [sp]
   189b2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   189b4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   189b8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   189ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   189be:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   189c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   189c4:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   189c6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   189c8:	4629      	mov	r1, r5
   189ca:	f242 0020 	movw	r0, #8224	; 0x2020
   189ce:	f7ff ff5d 	bl	1888c <bt_hci_cmd_send>
   189d2:	e7d7      	b.n	18984 <le_conn_param_req+0x68>
   189d4:	0002af67 	.word	0x0002af67

000189d8 <hci_tx_thread>:
{
   189d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   189dc:	f8df 8118 	ldr.w	r8, [pc, #280]	; 18af8 <hci_tx_thread+0x120>
		BT_ASSERT(err == 0);
   189e0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 18afc <hci_tx_thread+0x124>
			ev_count += bt_conn_prepare_events(&events[1]);
   189e4:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   189e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   189ec:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   189ee:	f36f 3352 	bfc	r3, #13, #6
   189f2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   189f6:	f001 fc87 	bl	1a308 <bt_conn_prepare_events>
   189fa:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   189fc:	483e      	ldr	r0, [pc, #248]	; (18af8 <hci_tx_thread+0x120>)
   189fe:	f04f 32ff 	mov.w	r2, #4294967295
   18a02:	f04f 33ff 	mov.w	r3, #4294967295
   18a06:	4629      	mov	r1, r5
   18a08:	f00a fe3a 	bl	23680 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   18a0c:	b158      	cbz	r0, 18a26 <hci_tx_thread+0x4e>
   18a0e:	483c      	ldr	r0, [pc, #240]	; (18b00 <hci_tx_thread+0x128>)
   18a10:	f640 12d3 	movw	r2, #2515	; 0x9d3
   18a14:	4649      	mov	r1, r9
   18a16:	f00e f9c7 	bl	26da8 <assert_print>
   18a1a:	4040      	eors	r0, r0
   18a1c:	f380 8811 	msr	BASEPRI, r0
   18a20:	f04f 0003 	mov.w	r0, #3
   18a24:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   18a26:	4f37      	ldr	r7, [pc, #220]	; (18b04 <hci_tx_thread+0x12c>)
{
   18a28:	4e33      	ldr	r6, [pc, #204]	; (18af8 <hci_tx_thread+0x120>)
   18a2a:	f107 0bd8 	add.w	fp, r7, #216	; 0xd8
	for (; count; ev++, count--) {
   18a2e:	b915      	cbnz	r5, 18a36 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   18a30:	f009 ff70 	bl	22914 <z_impl_k_yield>
	while (1) {
   18a34:	e7d8      	b.n	189e8 <hci_tx_thread+0x10>
		switch (ev->state) {
   18a36:	68f2      	ldr	r2, [r6, #12]
   18a38:	f3c2 3245 	ubfx	r2, r2, #13, #6
   18a3c:	2a01      	cmp	r2, #1
   18a3e:	d94c      	bls.n	18ada <hci_tx_thread+0x102>
   18a40:	2a04      	cmp	r2, #4
   18a42:	d154      	bne.n	18aee <hci_tx_thread+0x116>
			if (ev->tag == BT_EVENT_CMD_TX) {
   18a44:	7b33      	ldrb	r3, [r6, #12]
   18a46:	2b00      	cmp	r3, #0
   18a48:	d14a      	bne.n	18ae0 <hci_tx_thread+0x108>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   18a4a:	482f      	ldr	r0, [pc, #188]	; (18b08 <hci_tx_thread+0x130>)
   18a4c:	2200      	movs	r2, #0
   18a4e:	2300      	movs	r3, #0
   18a50:	f004 fa62 	bl	1cf18 <net_buf_get>
	BT_ASSERT(buf);
   18a54:	4604      	mov	r4, r0
   18a56:	b958      	cbnz	r0, 18a70 <hci_tx_thread+0x98>
   18a58:	4829      	ldr	r0, [pc, #164]	; (18b00 <hci_tx_thread+0x128>)
   18a5a:	f640 126c 	movw	r2, #2412	; 0x96c
   18a5e:	4649      	mov	r1, r9
   18a60:	f00e f9a2 	bl	26da8 <assert_print>
   18a64:	4040      	eors	r0, r0
   18a66:	f380 8811 	msr	BASEPRI, r0
   18a6a:	f04f 0003 	mov.w	r0, #3
   18a6e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   18a70:	f04f 33ff 	mov.w	r3, #4294967295
   18a74:	f04f 32ff 	mov.w	r2, #4294967295
   18a78:	4658      	mov	r0, fp
   18a7a:	f008 fc91 	bl	213a0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   18a7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   18a82:	b153      	cbz	r3, 18a9a <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
   18a84:	4821      	ldr	r0, [pc, #132]	; (18b0c <hci_tx_thread+0x134>)
   18a86:	2145      	movs	r1, #69	; 0x45
   18a88:	f00e f99c 	bl	26dc4 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   18a8c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
   18a90:	f004 fb92 	bl	1d1b8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18a94:	2300      	movs	r3, #0
   18a96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	bt_dev.sent_cmd = net_buf_ref(buf);
   18a9a:	4620      	mov	r0, r4
   18a9c:	f004 fbd0 	bl	1d240 <net_buf_ref>
   18aa0:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	err = bt_send(buf);
   18aa4:	4620      	mov	r0, r4
   18aa6:	f7ff fee9 	bl	1887c <bt_send>
	if (err) {
   18aaa:	4602      	mov	r2, r0
   18aac:	b1a8      	cbz	r0, 18ada <hci_tx_thread+0x102>
		BT_ERR("Unable to send to driver (err %d)", err);
   18aae:	4818      	ldr	r0, [pc, #96]	; (18b10 <hci_tx_thread+0x138>)
   18ab0:	2145      	movs	r1, #69	; 0x45
   18ab2:	f00e f987 	bl	26dc4 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   18ab6:	4817      	ldr	r0, [pc, #92]	; (18b14 <hci_tx_thread+0x13c>)
   18ab8:	f008 fc38 	bl	2132c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   18abc:	4620      	mov	r0, r4
   18abe:	f004 f8f1 	bl	1cca4 <net_buf_id>
   18ac2:	4b15      	ldr	r3, [pc, #84]	; (18b18 <hci_tx_thread+0x140>)
   18ac4:	220c      	movs	r2, #12
   18ac6:	fb02 3000 	mla	r0, r2, r0, r3
   18aca:	211f      	movs	r1, #31
   18acc:	8840      	ldrh	r0, [r0, #2]
   18ace:	4622      	mov	r2, r4
   18ad0:	f7ff fb78 	bl	181c4 <hci_cmd_done>
		net_buf_unref(buf);
   18ad4:	4620      	mov	r0, r4
   18ad6:	f004 fb6f 	bl	1d1b8 <net_buf_unref>
	for (; count; ev++, count--) {
   18ada:	3614      	adds	r6, #20
   18adc:	3d01      	subs	r5, #1
   18ade:	e7a6      	b.n	18a2e <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   18ae0:	2b01      	cmp	r3, #1
   18ae2:	d1fa      	bne.n	18ada <hci_tx_thread+0x102>
					conn = CONTAINER_OF(ev->fifo,
   18ae4:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   18ae6:	3838      	subs	r0, #56	; 0x38
   18ae8:	f001 ffc2 	bl	1aa70 <bt_conn_process_tx>
   18aec:	e7f5      	b.n	18ada <hci_tx_thread+0x102>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   18aee:	480b      	ldr	r0, [pc, #44]	; (18b1c <hci_tx_thread+0x144>)
   18af0:	2157      	movs	r1, #87	; 0x57
   18af2:	f00e f967 	bl	26dc4 <z_log_minimal_printk>
   18af6:	e7f0      	b.n	18ada <hci_tx_thread+0x102>
   18af8:	200006e0 	.word	0x200006e0
   18afc:	0002b027 	.word	0x0002b027
   18b00:	0002a576 	.word	0x0002a576
   18b04:	200004f8 	.word	0x200004f8
   18b08:	200005f4 	.word	0x200005f4
   18b0c:	0002b2a1 	.word	0x0002b2a1
   18b10:	0002b25b 	.word	0x0002b25b
   18b14:	200005d0 	.word	0x200005d0
   18b18:	20003b78 	.word	0x20003b78
   18b1c:	0002b2c1 	.word	0x0002b2c1

00018b20 <hci_event_prio>:
{
   18b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b24:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   18b26:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   18b2a:	4630      	mov	r0, r6
   18b2c:	f010 f879 	bl	28c22 <net_buf_simple_headroom>
	state->len = buf->len;
   18b30:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18b34:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   18b38:	4605      	mov	r5, r0
   18b3a:	d80b      	bhi.n	18b54 <hci_event_prio+0x34>
   18b3c:	491b      	ldr	r1, [pc, #108]	; (18bac <hci_event_prio+0x8c>)
   18b3e:	481c      	ldr	r0, [pc, #112]	; (18bb0 <hci_event_prio+0x90>)
   18b40:	f640 526f 	movw	r2, #3439	; 0xd6f
   18b44:	f00e f930 	bl	26da8 <assert_print>
   18b48:	4040      	eors	r0, r0
   18b4a:	f380 8811 	msr	BASEPRI, r0
   18b4e:	f04f 0003 	mov.w	r0, #3
   18b52:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   18b54:	4630      	mov	r0, r6
   18b56:	2102      	movs	r1, #2
   18b58:	f004 fc26 	bl	1d3a8 <net_buf_simple_pull_mem>
   18b5c:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18b5e:	7800      	ldrb	r0, [r0, #0]
   18b60:	f00e fc75 	bl	2744e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   18b64:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18b66:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   18b68:	d40b      	bmi.n	18b82 <hci_event_prio+0x62>
   18b6a:	4910      	ldr	r1, [pc, #64]	; (18bac <hci_event_prio+0x8c>)
   18b6c:	4810      	ldr	r0, [pc, #64]	; (18bb0 <hci_event_prio+0x90>)
   18b6e:	f640 5273 	movw	r2, #3443	; 0xd73
   18b72:	f00e f919 	bl	26da8 <assert_print>
   18b76:	4040      	eors	r0, r0
   18b78:	f380 8811 	msr	BASEPRI, r0
   18b7c:	f04f 0003 	mov.w	r0, #3
   18b80:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   18b82:	2305      	movs	r3, #5
   18b84:	4a0b      	ldr	r2, [pc, #44]	; (18bb4 <hci_event_prio+0x94>)
   18b86:	7838      	ldrb	r0, [r7, #0]
   18b88:	4621      	mov	r1, r4
   18b8a:	f7ff fa17 	bl	17fbc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18b8e:	07b3      	lsls	r3, r6, #30
   18b90:	d507      	bpl.n	18ba2 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   18b92:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   18b94:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18b98:	fa10 f585 	uxtah	r5, r0, r5
   18b9c:	60a5      	str	r5, [r4, #8]
}
   18b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   18ba2:	4620      	mov	r0, r4
}
   18ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   18ba8:	f004 bb06 	b.w	1d1b8 <net_buf_unref>
   18bac:	0002b027 	.word	0x0002b027
   18bb0:	0002a576 	.word	0x0002a576
   18bb4:	00029d60 	.word	0x00029d60

00018bb8 <bt_recv>:
{
   18bb8:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18bba:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   18bbc:	2a01      	cmp	r2, #1
{
   18bbe:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   18bc0:	d005      	beq.n	18bce <bt_recv+0x16>
   18bc2:	2a03      	cmp	r2, #3
   18bc4:	d112      	bne.n	18bec <bt_recv+0x34>
			rx_queue_put(buf);
   18bc6:	f7ff f98f 	bl	17ee8 <rx_queue_put>
		return 0;
   18bca:	2000      	movs	r0, #0
}
   18bcc:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18bce:	6883      	ldr	r3, [r0, #8]
   18bd0:	7818      	ldrb	r0, [r3, #0]
   18bd2:	f00e fc3c 	bl	2744e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   18bd6:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18bd8:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   18bda:	d502      	bpl.n	18be2 <bt_recv+0x2a>
			hci_event_prio(buf);
   18bdc:	4628      	mov	r0, r5
   18bde:	f7ff ff9f 	bl	18b20 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18be2:	f014 0002 	ands.w	r0, r4, #2
   18be6:	d0f1      	beq.n	18bcc <bt_recv+0x14>
			rx_queue_put(buf);
   18be8:	4628      	mov	r0, r5
   18bea:	e7ec      	b.n	18bc6 <bt_recv+0xe>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   18bec:	4804      	ldr	r0, [pc, #16]	; (18c00 <bt_recv+0x48>)
   18bee:	2145      	movs	r1, #69	; 0x45
   18bf0:	f00e f8e8 	bl	26dc4 <z_log_minimal_printk>
		net_buf_unref(buf);
   18bf4:	4628      	mov	r0, r5
   18bf6:	f004 fadf 	bl	1d1b8 <net_buf_unref>
		return -EINVAL;
   18bfa:	f06f 0015 	mvn.w	r0, #21
   18bfe:	e7e5      	b.n	18bcc <bt_recv+0x14>
   18c00:	0002b2e7 	.word	0x0002b2e7

00018c04 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   18c04:	4a08      	ldr	r2, [pc, #32]	; (18c28 <bt_hci_driver_register+0x24>)
{
   18c06:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   18c08:	f8d2 0118 	ldr.w	r0, [r2, #280]	; 0x118
   18c0c:	b930      	cbnz	r0, 18c1c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   18c0e:	68d9      	ldr	r1, [r3, #12]
   18c10:	b139      	cbz	r1, 18c22 <bt_hci_driver_register+0x1e>
   18c12:	6959      	ldr	r1, [r3, #20]
   18c14:	b129      	cbz	r1, 18c22 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   18c16:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	return 0;
   18c1a:	4770      	bx	lr
		return -EALREADY;
   18c1c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18c20:	4770      	bx	lr
		return -EINVAL;
   18c22:	f06f 0015 	mvn.w	r0, #21
}
   18c26:	4770      	bx	lr
   18c28:	200004f8 	.word	0x200004f8

00018c2c <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18c2c:	4801      	ldr	r0, [pc, #4]	; (18c34 <bt_finalize_init+0x8>)
   18c2e:	2104      	movs	r1, #4
   18c30:	f00e bc20 	b.w	27474 <atomic_or>
   18c34:	20000580 	.word	0x20000580

00018c38 <bt_init>:
{
   18c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   18c3a:	4dc2      	ldr	r5, [pc, #776]	; (18f44 <bt_init+0x30c>)
   18c3c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   18c40:	6899      	ldr	r1, [r3, #8]
   18c42:	f011 0101 	ands.w	r1, r1, #1
   18c46:	d121      	bne.n	18c8c <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   18c48:	aa01      	add	r2, sp, #4
   18c4a:	f640 4003 	movw	r0, #3075	; 0xc03
   18c4e:	f7ff fc3d 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   18c52:	4604      	mov	r4, r0
   18c54:	2800      	cmp	r0, #0
   18c56:	d16a      	bne.n	18d2e <bt_init+0xf6>
	uint8_t status = buf->data[0];
   18c58:	9b01      	ldr	r3, [sp, #4]
   18c5a:	689b      	ldr	r3, [r3, #8]
	if (status) {
   18c5c:	781b      	ldrb	r3, [r3, #0]
   18c5e:	b993      	cbnz	r3, 18c86 <bt_init+0x4e>
   18c60:	f3bf 8f5b 	dmb	ish
   18c64:	462b      	mov	r3, r5
   18c66:	f853 2f88 	ldr.w	r2, [r3, #136]!
   18c6a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   18c6e:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18c72:	f3bf 8f5b 	dmb	ish
   18c76:	e853 1f00 	ldrex	r1, [r3]
   18c7a:	e843 2000 	strex	r0, r2, [r3]
   18c7e:	2800      	cmp	r0, #0
   18c80:	d1f9      	bne.n	18c76 <bt_init+0x3e>
   18c82:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   18c86:	9801      	ldr	r0, [sp, #4]
   18c88:	f004 fa96 	bl	1d1b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   18c8c:	aa01      	add	r2, sp, #4
   18c8e:	2100      	movs	r1, #0
   18c90:	f241 0003 	movw	r0, #4099	; 0x1003
   18c94:	f7ff fc1a 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18c98:	4604      	mov	r4, r0
   18c9a:	2800      	cmp	r0, #0
   18c9c:	d147      	bne.n	18d2e <bt_init+0xf6>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   18c9e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   18ca0:	48a9      	ldr	r0, [pc, #676]	; (18f48 <bt_init+0x310>)
   18ca2:	6899      	ldr	r1, [r3, #8]
   18ca4:	2208      	movs	r2, #8
   18ca6:	3101      	adds	r1, #1
   18ca8:	f00e fb51 	bl	2734e <memcpy>
	net_buf_unref(rsp);
   18cac:	9801      	ldr	r0, [sp, #4]
   18cae:	f004 fa83 	bl	1d1b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   18cb2:	4621      	mov	r1, r4
   18cb4:	aa01      	add	r2, sp, #4
   18cb6:	f241 0001 	movw	r0, #4097	; 0x1001
   18cba:	f7ff fc07 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18cbe:	4604      	mov	r4, r0
   18cc0:	2800      	cmp	r0, #0
   18cc2:	d134      	bne.n	18d2e <bt_init+0xf6>
	read_local_ver_complete(rsp);
   18cc4:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   18cc6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   18cc8:	785a      	ldrb	r2, [r3, #1]
   18cca:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   18cce:	78d9      	ldrb	r1, [r3, #3]
   18cd0:	789a      	ldrb	r2, [r3, #2]
   18cd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18cd6:	84ea      	strh	r2, [r5, #38]	; 0x26
	bt_dev.lmp_version = rp->lmp_version;
   18cd8:	791a      	ldrb	r2, [r3, #4]
   18cda:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   18cde:	7a19      	ldrb	r1, [r3, #8]
   18ce0:	79da      	ldrb	r2, [r3, #7]
   18ce2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18ce6:	852a      	strh	r2, [r5, #40]	; 0x28
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   18ce8:	795a      	ldrb	r2, [r3, #5]
   18cea:	799b      	ldrb	r3, [r3, #6]
   18cec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   18cf0:	856b      	strh	r3, [r5, #42]	; 0x2a
	net_buf_unref(rsp);
   18cf2:	f004 fa61 	bl	1d1b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   18cf6:	4621      	mov	r1, r4
   18cf8:	aa01      	add	r2, sp, #4
   18cfa:	f241 0002 	movw	r0, #4098	; 0x1002
   18cfe:	f7ff fbe5 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18d02:	4604      	mov	r4, r0
   18d04:	b998      	cbnz	r0, 18d2e <bt_init+0xf6>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   18d06:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   18d08:	4890      	ldr	r0, [pc, #576]	; (18f4c <bt_init+0x314>)
   18d0a:	6899      	ldr	r1, [r3, #8]
   18d0c:	2240      	movs	r2, #64	; 0x40
   18d0e:	3101      	adds	r1, #1
   18d10:	f00e fb1d 	bl	2734e <memcpy>
	net_buf_unref(rsp);
   18d14:	9801      	ldr	r0, [sp, #4]
   18d16:	f004 fa4f 	bl	1d1b8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   18d1a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   18d1e:	065e      	lsls	r6, r3, #25
   18d20:	d408      	bmi.n	18d34 <bt_init+0xfc>
		BT_ERR("Non-LE capable controller detected!");
   18d22:	488b      	ldr	r0, [pc, #556]	; (18f50 <bt_init+0x318>)
   18d24:	2145      	movs	r1, #69	; 0x45
   18d26:	f00e f84d 	bl	26dc4 <z_log_minimal_printk>
		return -ENODEV;
   18d2a:	f06f 0412 	mvn.w	r4, #18
}
   18d2e:	4620      	mov	r0, r4
   18d30:	b002      	add	sp, #8
   18d32:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   18d34:	4621      	mov	r1, r4
   18d36:	aa01      	add	r2, sp, #4
   18d38:	f242 0003 	movw	r0, #8195	; 0x2003
   18d3c:	f7ff fbc6 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18d40:	4604      	mov	r4, r0
   18d42:	2800      	cmp	r0, #0
   18d44:	d1f3      	bne.n	18d2e <bt_init+0xf6>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   18d46:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   18d48:	4882      	ldr	r0, [pc, #520]	; (18f54 <bt_init+0x31c>)
   18d4a:	6899      	ldr	r1, [r3, #8]
   18d4c:	2208      	movs	r2, #8
   18d4e:	3101      	adds	r1, #1
   18d50:	f00e fafd 	bl	2734e <memcpy>
	net_buf_unref(rsp);
   18d54:	9801      	ldr	r0, [sp, #4]
   18d56:	f004 fa2f 	bl	1d1b8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   18d5a:	4621      	mov	r1, r4
   18d5c:	aa01      	add	r2, sp, #4
   18d5e:	f242 0002 	movw	r0, #8194	; 0x2002
   18d62:	f7ff fbb3 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   18d66:	4604      	mov	r4, r0
   18d68:	2800      	cmp	r0, #0
   18d6a:	d1e0      	bne.n	18d2e <bt_init+0xf6>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   18d6c:	9b01      	ldr	r3, [sp, #4]
   18d6e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   18d70:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   18d74:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
   18d78:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   18d7a:	b121      	cbz	r1, 18d86 <bt_init+0x14e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   18d7c:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   18d7e:	4876      	ldr	r0, [pc, #472]	; (18f58 <bt_init+0x320>)
   18d80:	4611      	mov	r1, r2
   18d82:	f010 fb3b 	bl	293fc <z_impl_k_sem_init>
		net_buf_unref(rsp);
   18d86:	9801      	ldr	r0, [sp, #4]
   18d88:	f004 fa16 	bl	1d1b8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18d8c:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
   18d90:	f016 0620 	ands.w	r6, r6, #32
   18d94:	f000 80e8 	beq.w	18f68 <bt_init+0x330>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   18d98:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
   18d9c:	071c      	lsls	r4, r3, #28
   18d9e:	d512      	bpl.n	18dc6 <bt_init+0x18e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   18da0:	aa01      	add	r2, sp, #4
   18da2:	2100      	movs	r1, #0
   18da4:	f242 001c 	movw	r0, #8220	; 0x201c
   18da8:	f7ff fb90 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   18dac:	4604      	mov	r4, r0
   18dae:	2800      	cmp	r0, #0
   18db0:	d1bd      	bne.n	18d2e <bt_init+0xf6>
		le_read_supp_states_complete(rsp);
   18db2:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   18db4:	6883      	ldr	r3, [r0, #8]
   18db6:	f8d3 2001 	ldr.w	r2, [r3, #1]
   18dba:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   18dbe:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
		net_buf_unref(rsp);
   18dc2:	f004 f9f9 	bl	1d1b8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   18dc6:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   18dca:	0698      	lsls	r0, r3, #26
   18dcc:	d523      	bpl.n	18e16 <bt_init+0x1de>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18dce:	f10d 0102 	add.w	r1, sp, #2
   18dd2:	4668      	mov	r0, sp
   18dd4:	f7ff fbdc 	bl	18590 <hci_le_read_max_data_len>
		if (err) {
   18dd8:	4604      	mov	r4, r0
   18dda:	2800      	cmp	r0, #0
   18ddc:	d1a7      	bne.n	18d2e <bt_init+0xf6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18dde:	2104      	movs	r1, #4
   18de0:	f242 0024 	movw	r0, #8228	; 0x2024
   18de4:	f7ff fb2a 	bl	1843c <bt_hci_cmd_create>
		if (!buf) {
   18de8:	4606      	mov	r6, r0
   18dea:	2800      	cmp	r0, #0
   18dec:	f000 80c3 	beq.w	18f76 <bt_init+0x33e>
	return net_buf_simple_add(&buf->b, len);
   18df0:	2104      	movs	r1, #4
   18df2:	3008      	adds	r0, #8
   18df4:	f004 faf6 	bl	1d3e4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   18df8:	f8bd 3000 	ldrh.w	r3, [sp]
   18dfc:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   18dfe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   18e02:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18e04:	4622      	mov	r2, r4
   18e06:	4631      	mov	r1, r6
   18e08:	f242 0024 	movw	r0, #8228	; 0x2024
   18e0c:	f7ff fb5e 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   18e10:	4604      	mov	r4, r0
   18e12:	2800      	cmp	r0, #0
   18e14:	d18b      	bne.n	18d2e <bt_init+0xf6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   18e16:	2108      	movs	r1, #8
   18e18:	f242 0001 	movw	r0, #8193	; 0x2001
   18e1c:	f7ff fb0e 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   18e20:	4604      	mov	r4, r0
   18e22:	2800      	cmp	r0, #0
   18e24:	f000 80a7 	beq.w	18f76 <bt_init+0x33e>
   18e28:	2108      	movs	r1, #8
   18e2a:	4408      	add	r0, r1
   18e2c:	f004 fada 	bl	1d3e4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   18e30:	f895 2090 	ldrb.w	r2, [r5, #144]	; 0x90
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   18e34:	4949      	ldr	r1, [pc, #292]	; (18f5c <bt_init+0x324>)
   18e36:	4b4a      	ldr	r3, [pc, #296]	; (18f60 <bt_init+0x328>)
   18e38:	f012 0f02 	tst.w	r2, #2
   18e3c:	bf18      	it	ne
   18e3e:	460b      	movne	r3, r1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   18e40:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   18e42:	f895 2091 	ldrb.w	r2, [r5, #145]	; 0x91
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   18e46:	bf48      	it	mi
   18e48:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   18e4c:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   18e50:	bf18      	it	ne
   18e52:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   18e56:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   18e58:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18e5c:	2200      	movs	r2, #0
   18e5e:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   18e60:	2307      	movs	r3, #7
   18e62:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
   18e64:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   18e66:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   18e68:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   18e6a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   18e6c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   18e6e:	4621      	mov	r1, r4
   18e70:	f242 0001 	movw	r0, #8193	; 0x2001
   18e74:	f7ff fb2a 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18e78:	4604      	mov	r4, r0
   18e7a:	2800      	cmp	r0, #0
   18e7c:	f47f af57 	bne.w	18d2e <bt_init+0xf6>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18e80:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
	if (bt_dev.le.acl_mtu) {
   18e84:	f8b5 10bc 	ldrh.w	r1, [r5, #188]	; 0xbc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18e88:	069a      	lsls	r2, r3, #26
   18e8a:	f100 8089 	bmi.w	18fa0 <bt_init+0x368>
	if (bt_dev.le.acl_mtu) {
   18e8e:	b9d9      	cbnz	r1, 18ec8 <bt_init+0x290>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   18e90:	aa01      	add	r2, sp, #4
   18e92:	f241 0005 	movw	r0, #4101	; 0x1005
   18e96:	f7ff fb19 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18e9a:	4604      	mov	r4, r0
   18e9c:	2800      	cmp	r0, #0
   18e9e:	f47f af46 	bne.w	18d2e <bt_init+0xf6>
	if (bt_dev.le.acl_mtu) {
   18ea2:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   18ea6:	b963      	cbnz	r3, 18ec2 <bt_init+0x28a>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   18ea8:	9b01      	ldr	r3, [sp, #4]
   18eaa:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   18eac:	785a      	ldrb	r2, [r3, #1]
   18eae:	7899      	ldrb	r1, [r3, #2]
   18eb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18eb4:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   18eb8:	889a      	ldrh	r2, [r3, #4]
   18eba:	4827      	ldr	r0, [pc, #156]	; (18f58 <bt_init+0x320>)
   18ebc:	4611      	mov	r1, r2
   18ebe:	f010 fa9d 	bl	293fc <z_impl_k_sem_init>
	net_buf_unref(rsp);
   18ec2:	9801      	ldr	r0, [sp, #4]
   18ec4:	f004 f978 	bl	1d1b8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   18ec8:	2108      	movs	r1, #8
   18eca:	f640 4001 	movw	r0, #3073	; 0xc01
   18ece:	f7ff fab5 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   18ed2:	4604      	mov	r4, r0
   18ed4:	2800      	cmp	r0, #0
   18ed6:	d04e      	beq.n	18f76 <bt_init+0x33e>
   18ed8:	2108      	movs	r1, #8
   18eda:	4408      	add	r0, r1
   18edc:	f004 fa82 	bl	1d3e4 <net_buf_simple_add>
	dst[0] = val;
   18ee0:	2310      	movs	r3, #16
   18ee2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   18ee4:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   18ee6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   18ee8:	7043      	strb	r3, [r0, #1]
   18eea:	2602      	movs	r6, #2
   18eec:	2320      	movs	r3, #32
	dst[0] = val;
   18eee:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   18ef0:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   18ef2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   18ef4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   18ef6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   18ef8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   18efa:	4621      	mov	r1, r4
   18efc:	f640 4001 	movw	r0, #3073	; 0xc01
   18f00:	f7ff fae4 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18f04:	4604      	mov	r4, r0
   18f06:	2800      	cmp	r0, #0
   18f08:	f47f af11 	bne.w	18d2e <bt_init+0xf6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   18f0c:	4601      	mov	r1, r0
   18f0e:	aa01      	add	r2, sp, #4
   18f10:	f64f 4001 	movw	r0, #64513	; 0xfc01
   18f14:	f7ff fada 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18f18:	4604      	mov	r4, r0
   18f1a:	2800      	cmp	r0, #0
   18f1c:	d049      	beq.n	18fb2 <bt_init+0x37a>
		BT_WARN("Vendor HCI extensions not available");
   18f1e:	4811      	ldr	r0, [pc, #68]	; (18f64 <bt_init+0x32c>)
   18f20:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   18f22:	f00d ff4f 	bl	26dc4 <z_log_minimal_printk>
	err = bt_id_init();
   18f26:	f000 fb31 	bl	1958c <bt_id_init>
	if (err) {
   18f2a:	4604      	mov	r4, r0
   18f2c:	2800      	cmp	r0, #0
   18f2e:	f47f aefe 	bne.w	18d2e <bt_init+0xf6>
		err = bt_conn_init();
   18f32:	f001 fe09 	bl	1ab48 <bt_conn_init>
		if (err) {
   18f36:	4604      	mov	r4, r0
   18f38:	2800      	cmp	r0, #0
   18f3a:	f47f aef8 	bne.w	18d2e <bt_init+0xf6>
	bt_finalize_init();
   18f3e:	f7ff fe75 	bl	18c2c <bt_finalize_init>
	return 0;
   18f42:	e6f4      	b.n	18d2e <bt_init+0xf6>
   18f44:	200004f8 	.word	0x200004f8
   18f48:	20000524 	.word	0x20000524
   18f4c:	2000052c 	.word	0x2000052c
   18f50:	0002b300 	.word	0x0002b300
   18f54:	20000588 	.word	0x20000588
   18f58:	200005b8 	.word	0x200005b8
   18f5c:	0007122e 	.word	0x0007122e
   18f60:	0007120e 	.word	0x0007120e
   18f64:	0002b351 	.word	0x0002b351
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   18f68:	2102      	movs	r1, #2
   18f6a:	f640 406d 	movw	r0, #3181	; 0xc6d
   18f6e:	f7ff fa65 	bl	1843c <bt_hci_cmd_create>
		if (!buf) {
   18f72:	4604      	mov	r4, r0
   18f74:	b910      	cbnz	r0, 18f7c <bt_init+0x344>
		return -ENOBUFS;
   18f76:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18f7a:	e6d8      	b.n	18d2e <bt_init+0xf6>
   18f7c:	2102      	movs	r1, #2
   18f7e:	3008      	adds	r0, #8
   18f80:	f004 fa30 	bl	1d3e4 <net_buf_simple_add>
		cp_le->le = 0x01;
   18f84:	2301      	movs	r3, #1
   18f86:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   18f88:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   18f8a:	4621      	mov	r1, r4
   18f8c:	4632      	mov	r2, r6
   18f8e:	f640 406d 	movw	r0, #3181	; 0xc6d
   18f92:	f7ff fa9b 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   18f96:	4604      	mov	r4, r0
   18f98:	2800      	cmp	r0, #0
   18f9a:	f43f aefd 	beq.w	18d98 <bt_init+0x160>
   18f9e:	e6c6      	b.n	18d2e <bt_init+0xf6>
	else if (!bt_dev.le.acl_mtu) {
   18fa0:	2900      	cmp	r1, #0
   18fa2:	d191      	bne.n	18ec8 <bt_init+0x290>
		BT_ERR("ACL BR/EDR buffers not initialized");
   18fa4:	481b      	ldr	r0, [pc, #108]	; (19014 <bt_init+0x3dc>)
   18fa6:	2145      	movs	r1, #69	; 0x45
   18fa8:	f00d ff0c 	bl	26dc4 <z_log_minimal_printk>
		return -EIO;
   18fac:	f06f 0404 	mvn.w	r4, #4
   18fb0:	e6bd      	b.n	18d2e <bt_init+0xf6>
	net_buf_unref(rsp);
   18fb2:	9801      	ldr	r0, [sp, #4]
   18fb4:	f004 f900 	bl	1d1b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   18fb8:	4621      	mov	r1, r4
   18fba:	aa01      	add	r2, sp, #4
   18fbc:	f64f 4002 	movw	r0, #64514	; 0xfc02
   18fc0:	f7ff fa84 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   18fc4:	4604      	mov	r4, r0
   18fc6:	b110      	cbz	r0, 18fce <bt_init+0x396>
		BT_WARN("Failed to read supported vendor commands");
   18fc8:	4813      	ldr	r0, [pc, #76]	; (19018 <bt_init+0x3e0>)
   18fca:	2157      	movs	r1, #87	; 0x57
   18fcc:	e7a9      	b.n	18f22 <bt_init+0x2ea>
	rp.cmds = (void *)rsp->data;
   18fce:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   18fd0:	4812      	ldr	r0, [pc, #72]	; (1901c <bt_init+0x3e4>)
   18fd2:	6899      	ldr	r1, [r3, #8]
   18fd4:	4632      	mov	r2, r6
   18fd6:	3101      	adds	r1, #1
   18fd8:	f00e f9b9 	bl	2734e <memcpy>
	net_buf_unref(rsp);
   18fdc:	9801      	ldr	r0, [sp, #4]
   18fde:	f004 f8eb 	bl	1d1b8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   18fe2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   18fe6:	075b      	lsls	r3, r3, #29
   18fe8:	d59d      	bpl.n	18f26 <bt_init+0x2ee>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   18fea:	aa01      	add	r2, sp, #4
   18fec:	4621      	mov	r1, r4
   18fee:	f64f 4003 	movw	r0, #64515	; 0xfc03
   18ff2:	f7ff fa6b 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   18ff6:	b110      	cbz	r0, 18ffe <bt_init+0x3c6>
			BT_WARN("Failed to read supported vendor features");
   18ff8:	4809      	ldr	r0, [pc, #36]	; (19020 <bt_init+0x3e8>)
   18ffa:	2157      	movs	r1, #87	; 0x57
   18ffc:	e791      	b.n	18f22 <bt_init+0x2ea>
		rp.feat = (void *)rsp->data;
   18ffe:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   19000:	4808      	ldr	r0, [pc, #32]	; (19024 <bt_init+0x3ec>)
   19002:	6899      	ldr	r1, [r3, #8]
   19004:	2201      	movs	r2, #1
   19006:	4411      	add	r1, r2
   19008:	f00e f9a1 	bl	2734e <memcpy>
		net_buf_unref(rsp);
   1900c:	9801      	ldr	r0, [sp, #4]
   1900e:	f004 f8d3 	bl	1d1b8 <net_buf_unref>
   19012:	e788      	b.n	18f26 <bt_init+0x2ee>
   19014:	0002b329 	.word	0x0002b329
   19018:	0002b37a 	.word	0x0002b37a
   1901c:	2000056d 	.word	0x2000056d
   19020:	0002b3a8 	.word	0x0002b3a8
   19024:	2000056c 	.word	0x2000056c

00019028 <init_work>:
{
   19028:	b510      	push	{r4, lr}
	err = bt_init();
   1902a:	f7ff fe05 	bl	18c38 <bt_init>
	if (ready_cb) {
   1902e:	4b03      	ldr	r3, [pc, #12]	; (1903c <init_work+0x14>)
   19030:	681b      	ldr	r3, [r3, #0]
   19032:	b113      	cbz	r3, 1903a <init_work+0x12>
}
   19034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   19038:	4718      	bx	r3
}
   1903a:	bd10      	pop	{r4, pc}
   1903c:	20003b90 	.word	0x20003b90

00019040 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19040:	4b04      	ldr	r3, [pc, #16]	; (19054 <bt_is_ready+0x14>)
   19042:	f3bf 8f5b 	dmb	ish
   19046:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1904a:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1904e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   19052:	4770      	bx	lr
   19054:	200004f8 	.word	0x200004f8

00019058 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   19058:	b570      	push	{r4, r5, r6, lr}
   1905a:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   1905c:	f00e f932 	bl	272c4 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   19060:	281c      	cmp	r0, #28
	size_t len = strlen(name);
   19062:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   19064:	d811      	bhi.n	1908a <bt_set_name+0x32>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   19066:	4c0a      	ldr	r4, [pc, #40]	; (19090 <bt_set_name+0x38>)
   19068:	4631      	mov	r1, r6
   1906a:	f504 708e 	add.w	r0, r4, #284	; 0x11c
   1906e:	f00e f939 	bl	272e4 <strcmp>
   19072:	b148      	cbz	r0, 19088 <bt_set_name+0x30>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   19074:	f504 708e 	add.w	r0, r4, #284	; 0x11c
   19078:	462a      	mov	r2, r5
   1907a:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
   1907c:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
   1907e:	f00e f90f 	bl	272a0 <strncpy>
	bt_dev.name[len] = '\0';
   19082:	2000      	movs	r0, #0
   19084:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

	return 0;
#else
	return -ENOMEM;
#endif
}
   19088:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1908a:	f06f 000b 	mvn.w	r0, #11
   1908e:	e7fb      	b.n	19088 <bt_set_name+0x30>
   19090:	200004f8 	.word	0x200004f8

00019094 <bt_enable>:
{
   19094:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
   19096:	4e39      	ldr	r6, [pc, #228]	; (1917c <bt_enable+0xe8>)
   19098:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
{
   1909c:	b088      	sub	sp, #32
   1909e:	4605      	mov	r5, r0
	if (!bt_dev.drv) {
   190a0:	b943      	cbnz	r3, 190b4 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
   190a2:	4837      	ldr	r0, [pc, #220]	; (19180 <bt_enable+0xec>)
   190a4:	2145      	movs	r1, #69	; 0x45
   190a6:	f00d fe8d 	bl	26dc4 <z_log_minimal_printk>
		return -ENODEV;
   190aa:	f06f 0412 	mvn.w	r4, #18
}
   190ae:	4620      	mov	r0, r4
   190b0:	b008      	add	sp, #32
   190b2:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   190b4:	f106 0088 	add.w	r0, r6, #136	; 0x88
   190b8:	f3bf 8f5b 	dmb	ish
   190bc:	e850 3f00 	ldrex	r3, [r0]
   190c0:	f023 0302 	bic.w	r3, r3, #2
   190c4:	e840 3200 	strex	r2, r3, [r0]
   190c8:	2a00      	cmp	r2, #0
   190ca:	d1f7      	bne.n	190bc <bt_enable+0x28>
   190cc:	f3bf 8f5b 	dmb	ish
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   190d0:	2101      	movs	r1, #1
   190d2:	f00e f9cf 	bl	27474 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   190d6:	07c3      	lsls	r3, r0, #31
   190d8:	d44c      	bmi.n	19174 <bt_enable+0xe0>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   190da:	482a      	ldr	r0, [pc, #168]	; (19184 <bt_enable+0xf0>)
   190dc:	f7ff ffbc 	bl	19058 <bt_set_name>
		if (err) {
   190e0:	4602      	mov	r2, r0
   190e2:	b118      	cbz	r0, 190ec <bt_enable+0x58>
			BT_WARN("Failed to set device name (%d)", err);
   190e4:	4828      	ldr	r0, [pc, #160]	; (19188 <bt_enable+0xf4>)
   190e6:	2157      	movs	r1, #87	; 0x57
   190e8:	f00d fe6c 	bl	26dc4 <z_log_minimal_printk>
	ready_cb = cb;
   190ec:	4b27      	ldr	r3, [pc, #156]	; (1918c <bt_enable+0xf8>)
   190ee:	601d      	str	r5, [r3, #0]
   190f0:	2201      	movs	r2, #1
   190f2:	4611      	mov	r1, r2
   190f4:	4826      	ldr	r0, [pc, #152]	; (19190 <bt_enable+0xfc>)
   190f6:	f010 f981 	bl	293fc <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   190fa:	4826      	ldr	r0, [pc, #152]	; (19194 <bt_enable+0x100>)
   190fc:	f010 f95c 	bl	293b8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19100:	2200      	movs	r2, #0
   19102:	2300      	movs	r3, #0
   19104:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19108:	2400      	movs	r4, #0
   1910a:	f06f 0308 	mvn.w	r3, #8
   1910e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19112:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19116:	4b20      	ldr	r3, [pc, #128]	; (19198 <bt_enable+0x104>)
   19118:	4920      	ldr	r1, [pc, #128]	; (1919c <bt_enable+0x108>)
   1911a:	9400      	str	r4, [sp, #0]
   1911c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   19120:	481f      	ldr	r0, [pc, #124]	; (191a0 <bt_enable+0x10c>)
   19122:	f007 fd6b 	bl	20bfc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19126:	491f      	ldr	r1, [pc, #124]	; (191a4 <bt_enable+0x110>)
   19128:	481d      	ldr	r0, [pc, #116]	; (191a0 <bt_enable+0x10c>)
   1912a:	f010 f91c 	bl	29366 <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1912e:	491e      	ldr	r1, [pc, #120]	; (191a8 <bt_enable+0x114>)
   19130:	481e      	ldr	r0, [pc, #120]	; (191ac <bt_enable+0x118>)
   19132:	9400      	str	r4, [sp, #0]
   19134:	f06f 0307 	mvn.w	r3, #7
   19138:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1913c:	f008 fc20 	bl	21980 <k_work_queue_start>
   19140:	491b      	ldr	r1, [pc, #108]	; (191b0 <bt_enable+0x11c>)
   19142:	481a      	ldr	r0, [pc, #104]	; (191ac <bt_enable+0x118>)
   19144:	f010 f90f 	bl	29366 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   19148:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
   1914c:	68db      	ldr	r3, [r3, #12]
   1914e:	4798      	blx	r3
	if (err) {
   19150:	4604      	mov	r4, r0
   19152:	b128      	cbz	r0, 19160 <bt_enable+0xcc>
		BT_ERR("HCI driver open failed (%d)", err);
   19154:	4602      	mov	r2, r0
   19156:	2145      	movs	r1, #69	; 0x45
   19158:	4816      	ldr	r0, [pc, #88]	; (191b4 <bt_enable+0x120>)
   1915a:	f00d fe33 	bl	26dc4 <z_log_minimal_printk>
		return err;
   1915e:	e7a6      	b.n	190ae <bt_enable+0x1a>
	if (!cb) {
   19160:	b925      	cbnz	r5, 1916c <bt_enable+0xd8>
}
   19162:	b008      	add	sp, #32
   19164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   19168:	f7ff bd66 	b.w	18c38 <bt_init>
	k_work_submit(&bt_dev.init);
   1916c:	4812      	ldr	r0, [pc, #72]	; (191b8 <bt_enable+0x124>)
   1916e:	f008 fbe9 	bl	21944 <k_work_submit>
	return 0;
   19172:	e79c      	b.n	190ae <bt_enable+0x1a>
		return -EALREADY;
   19174:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19178:	e799      	b.n	190ae <bt_enable+0x1a>
   1917a:	bf00      	nop
   1917c:	200004f8 	.word	0x200004f8
   19180:	0002b3d6 	.word	0x0002b3d6
   19184:	0002b416 	.word	0x0002b416
   19188:	0002b42c 	.word	0x0002b42c
   1918c:	20003b90 	.word	0x20003b90
   19190:	200005d0 	.word	0x200005d0
   19194:	200005f4 	.word	0x200005f4
   19198:	000189d9 	.word	0x000189d9
   1919c:	2000e580 	.word	0x2000e580
   191a0:	20001bf8 	.word	0x20001bf8
   191a4:	0002b450 	.word	0x0002b450
   191a8:	2000e140 	.word	0x2000e140
   191ac:	20001b58 	.word	0x20001b58
   191b0:	0002b456 	.word	0x0002b456
   191b4:	0002b45c 	.word	0x0002b45c
   191b8:	20000570 	.word	0x20000570

000191bc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   191bc:	4800      	ldr	r0, [pc, #0]	; (191c0 <bt_get_name+0x4>)
   191be:	4770      	bx	lr
   191c0:	20000614 	.word	0x20000614

000191c4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   191c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   191c6:	4f0b      	ldr	r7, [pc, #44]	; (191f4 <id_find+0x30>)
{
   191c8:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   191ca:	2500      	movs	r5, #0
   191cc:	79fb      	ldrb	r3, [r7, #7]
   191ce:	b2ec      	uxtb	r4, r5
   191d0:	42a3      	cmp	r3, r4
   191d2:	d802      	bhi.n	191da <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   191d4:	f06f 0401 	mvn.w	r4, #1
   191d8:	e009      	b.n	191ee <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   191da:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   191de:	2207      	movs	r2, #7
   191e0:	4439      	add	r1, r7
   191e2:	4630      	mov	r0, r6
   191e4:	f00e f88a 	bl	272fc <memcmp>
   191e8:	3501      	adds	r5, #1
   191ea:	2800      	cmp	r0, #0
   191ec:	d1ee      	bne.n	191cc <id_find+0x8>
}
   191ee:	4620      	mov	r0, r4
   191f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191f2:	bf00      	nop
   191f4:	200004f8 	.word	0x200004f8

000191f8 <set_random_address>:
{
   191f8:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   191fa:	4914      	ldr	r1, [pc, #80]	; (1924c <set_random_address+0x54>)
   191fc:	2206      	movs	r2, #6
   191fe:	4605      	mov	r5, r0
   19200:	f00e f87c 	bl	272fc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19204:	4604      	mov	r4, r0
   19206:	b1d8      	cbz	r0, 19240 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   19208:	2106      	movs	r1, #6
   1920a:	f242 0005 	movw	r0, #8197	; 0x2005
   1920e:	f7ff f915 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   19212:	4604      	mov	r4, r0
   19214:	b1b0      	cbz	r0, 19244 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19216:	2206      	movs	r2, #6
   19218:	4629      	mov	r1, r5
   1921a:	3008      	adds	r0, #8
   1921c:	f00f fd0d 	bl	28c3a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   19220:	4621      	mov	r1, r4
   19222:	2200      	movs	r2, #0
   19224:	f242 0005 	movw	r0, #8197	; 0x2005
   19228:	f7ff f950 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   1922c:	4604      	mov	r4, r0
   1922e:	b938      	cbnz	r0, 19240 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   19230:	2206      	movs	r2, #6
   19232:	4806      	ldr	r0, [pc, #24]	; (1924c <set_random_address+0x54>)
   19234:	4629      	mov	r1, r5
   19236:	f00e f88a 	bl	2734e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1923a:	4b05      	ldr	r3, [pc, #20]	; (19250 <set_random_address+0x58>)
   1923c:	2201      	movs	r2, #1
   1923e:	771a      	strb	r2, [r3, #28]
}
   19240:	4620      	mov	r0, r4
   19242:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   19244:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19248:	e7fa      	b.n	19240 <set_random_address+0x48>
   1924a:	bf00      	nop
   1924c:	20000515 	.word	0x20000515
   19250:	200004f8 	.word	0x200004f8

00019254 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   19254:	b530      	push	{r4, r5, lr}
   19256:	4604      	mov	r4, r0
   19258:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1925a:	460d      	mov	r5, r1
   1925c:	b1a1      	cbz	r1, 19288 <id_create.constprop.0+0x34>
   1925e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   19260:	2207      	movs	r2, #7
   19262:	a902      	add	r1, sp, #8
   19264:	4628      	mov	r0, r5
   19266:	9302      	str	r3, [sp, #8]
   19268:	f8cd 300b 	str.w	r3, [sp, #11]
   1926c:	f00e f846 	bl	272fc <memcmp>
   19270:	b150      	cbz	r0, 19288 <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
   19272:	4812      	ldr	r0, [pc, #72]	; (192bc <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   19274:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19278:	2207      	movs	r2, #7
   1927a:	4629      	mov	r1, r5
   1927c:	4420      	add	r0, r4
   1927e:	f00e f866 	bl	2734e <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   19282:	2000      	movs	r0, #0
}
   19284:	b005      	add	sp, #20
   19286:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   19288:	4668      	mov	r0, sp
   1928a:	f00e f8d2 	bl	27432 <bt_addr_le_create_static>
			if (err) {
   1928e:	2800      	cmp	r0, #0
   19290:	d1f8      	bne.n	19284 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   19292:	4668      	mov	r0, sp
   19294:	f7ff ff96 	bl	191c4 <id_find>
   19298:	2800      	cmp	r0, #0
   1929a:	daf5      	bge.n	19288 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1929c:	4807      	ldr	r0, [pc, #28]	; (192bc <id_create.constprop.0+0x68>)
   1929e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   192a2:	4404      	add	r4, r0
   192a4:	2207      	movs	r2, #7
   192a6:	4669      	mov	r1, sp
   192a8:	4620      	mov	r0, r4
   192aa:	f00e f850 	bl	2734e <memcpy>
		if (addr) {
   192ae:	2d00      	cmp	r5, #0
   192b0:	d0e7      	beq.n	19282 <id_create.constprop.0+0x2e>
   192b2:	2207      	movs	r2, #7
   192b4:	4621      	mov	r1, r4
   192b6:	4628      	mov	r0, r5
   192b8:	e7e1      	b.n	1927e <id_create.constprop.0+0x2a>
   192ba:	bf00      	nop
   192bc:	200004f8 	.word	0x200004f8

000192c0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   192c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   192c2:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   192c4:	4605      	mov	r5, r0
   192c6:	b918      	cbnz	r0, 192d0 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   192c8:	b314      	cbz	r4, 19310 <bt_id_create+0x50>
		return -EINVAL;
   192ca:	f06f 0015 	mvn.w	r0, #21
   192ce:	e01d      	b.n	1930c <bt_id_create+0x4c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   192d0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   192d2:	2207      	movs	r2, #7
   192d4:	4669      	mov	r1, sp
   192d6:	9300      	str	r3, [sp, #0]
   192d8:	f8cd 3003 	str.w	r3, [sp, #3]
   192dc:	f00e f80e 	bl	272fc <memcmp>
   192e0:	2800      	cmp	r0, #0
   192e2:	d0f1      	beq.n	192c8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   192e4:	782b      	ldrb	r3, [r5, #0]
   192e6:	2b01      	cmp	r3, #1
   192e8:	d104      	bne.n	192f4 <bt_id_create+0x34>
   192ea:	79ab      	ldrb	r3, [r5, #6]
   192ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   192f0:	2bc0      	cmp	r3, #192	; 0xc0
   192f2:	d004      	beq.n	192fe <bt_id_create+0x3e>
			BT_ERR("Only static random identity address supported");
   192f4:	4819      	ldr	r0, [pc, #100]	; (1935c <bt_id_create+0x9c>)
   192f6:	2145      	movs	r1, #69	; 0x45
   192f8:	f00d fd64 	bl	26dc4 <z_log_minimal_printk>
			return -EINVAL;
   192fc:	e7e5      	b.n	192ca <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   192fe:	4628      	mov	r0, r5
   19300:	f7ff ff60 	bl	191c4 <id_find>
   19304:	2800      	cmp	r0, #0
   19306:	dbdf      	blt.n	192c8 <bt_id_create+0x8>
			return -EALREADY;
   19308:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   1930c:	b002      	add	sp, #8
   1930e:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   19310:	4e13      	ldr	r6, [pc, #76]	; (19360 <bt_id_create+0xa0>)
   19312:	79f3      	ldrb	r3, [r6, #7]
   19314:	2b01      	cmp	r3, #1
   19316:	d01e      	beq.n	19356 <bt_id_create+0x96>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19318:	f3bf 8f5b 	dmb	ish
   1931c:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
   19320:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19324:	07db      	lsls	r3, r3, #31
   19326:	d40b      	bmi.n	19340 <bt_id_create+0x80>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   19328:	2d00      	cmp	r5, #0
   1932a:	d0ce      	beq.n	192ca <bt_id_create+0xa>
   1932c:	2207      	movs	r2, #7
   1932e:	4669      	mov	r1, sp
   19330:	4628      	mov	r0, r5
   19332:	9400      	str	r4, [sp, #0]
   19334:	f8cd 4003 	str.w	r4, [sp, #3]
   19338:	f00d ffe0 	bl	272fc <memcmp>
   1933c:	2800      	cmp	r0, #0
   1933e:	d0c4      	beq.n	192ca <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   19340:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   19342:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   19344:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   19346:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   19348:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   1934a:	f7ff ff83 	bl	19254 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   1934e:	2800      	cmp	r0, #0
   19350:	bf08      	it	eq
   19352:	4620      	moveq	r0, r4
   19354:	e7da      	b.n	1930c <bt_id_create+0x4c>
		return -ENOMEM;
   19356:	f06f 000b 	mvn.w	r0, #11
   1935a:	e7d7      	b.n	1930c <bt_id_create+0x4c>
   1935c:	0002b489 	.word	0x0002b489
   19360:	200004f8 	.word	0x200004f8

00019364 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   19364:	b570      	push	{r4, r5, r6, lr}
   19366:	b086      	sub	sp, #24
   19368:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1936a:	aa01      	add	r2, sp, #4
   1936c:	2100      	movs	r1, #0
   1936e:	f241 0009 	movw	r0, #4105	; 0x1009
   19372:	f7ff f8ab 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   19376:	4604      	mov	r4, r0
   19378:	b130      	cbz	r0, 19388 <bt_id_read_public_addr+0x24>
		BT_WARN("Failed to read public address");
   1937a:	4817      	ldr	r0, [pc, #92]	; (193d8 <bt_id_read_public_addr+0x74>)
   1937c:	2157      	movs	r1, #87	; 0x57
   1937e:	f00d fd21 	bl	26dc4 <z_log_minimal_printk>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   19382:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   19384:	b006      	add	sp, #24
   19386:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   19388:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1938a:	9002      	str	r0, [sp, #8]
   1938c:	689d      	ldr	r5, [r3, #8]
   1938e:	f8ad 000c 	strh.w	r0, [sp, #12]
   19392:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   19394:	2206      	movs	r2, #6
   19396:	a902      	add	r1, sp, #8
   19398:	4628      	mov	r0, r5
   1939a:	f00d ffaf 	bl	272fc <memcmp>
   1939e:	b918      	cbnz	r0, 193a8 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   193a0:	9801      	ldr	r0, [sp, #4]
   193a2:	f003 ff09 	bl	1d1b8 <net_buf_unref>
   193a6:	e7ec      	b.n	19382 <bt_id_read_public_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   193a8:	4b0c      	ldr	r3, [pc, #48]	; (193dc <bt_id_read_public_addr+0x78>)
   193aa:	6818      	ldr	r0, [r3, #0]
   193ac:	9004      	str	r0, [sp, #16]
   193ae:	889b      	ldrh	r3, [r3, #4]
   193b0:	f8ad 3014 	strh.w	r3, [sp, #20]
   193b4:	2206      	movs	r2, #6
   193b6:	a904      	add	r1, sp, #16
   193b8:	4628      	mov	r0, r5
   193ba:	f00d ff9f 	bl	272fc <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   193be:	2800      	cmp	r0, #0
   193c0:	d0ee      	beq.n	193a0 <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   193c2:	2206      	movs	r2, #6
   193c4:	4629      	mov	r1, r5
   193c6:	1c70      	adds	r0, r6, #1
   193c8:	f00d ffc1 	bl	2734e <memcpy>
	net_buf_unref(rsp);
   193cc:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   193ce:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   193d0:	f003 fef2 	bl	1d1b8 <net_buf_unref>
	return 1U;
   193d4:	2001      	movs	r0, #1
   193d6:	e7d5      	b.n	19384 <bt_id_read_public_addr+0x20>
   193d8:	0002b4bc 	.word	0x0002b4bc
   193dc:	00029b8b 	.word	0x00029b8b

000193e0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   193e0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   193e2:	4668      	mov	r0, sp
   193e4:	f7ff ffbe 	bl	19364 <bt_id_read_public_addr>
   193e8:	4b04      	ldr	r3, [pc, #16]	; (193fc <bt_setup_public_id_addr+0x1c>)
   193ea:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   193ec:	b118      	cbz	r0, 193f6 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   193ee:	4669      	mov	r1, sp
   193f0:	2000      	movs	r0, #0
   193f2:	f7ff ff2f 	bl	19254 <id_create.constprop.0>
}
   193f6:	b003      	add	sp, #12
   193f8:	f85d fb04 	ldr.w	pc, [sp], #4
   193fc:	200004f8 	.word	0x200004f8

00019400 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   19400:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   19404:	4b1c      	ldr	r3, [pc, #112]	; (19478 <bt_read_static_addr+0x78>)
   19406:	f893 4076 	ldrb.w	r4, [r3, #118]	; 0x76
   1940a:	f014 0401 	ands.w	r4, r4, #1
{
   1940e:	4607      	mov	r7, r0
   19410:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   19412:	d104      	bne.n	1941e <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   19414:	4819      	ldr	r0, [pc, #100]	; (1947c <bt_read_static_addr+0x7c>)
   19416:	2157      	movs	r1, #87	; 0x57
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   19418:	f00d fcd4 	bl	26dc4 <z_log_minimal_printk>
   1941c:	e00c      	b.n	19438 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1941e:	aa01      	add	r2, sp, #4
   19420:	2100      	movs	r1, #0
   19422:	f64f 4009 	movw	r0, #64521	; 0xfc09
   19426:	f7ff f851 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   1942a:	4605      	mov	r5, r0
   1942c:	b140      	cbz	r0, 19440 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   1942e:	4814      	ldr	r0, [pc, #80]	; (19480 <bt_read_static_addr+0x80>)
   19430:	2157      	movs	r1, #87	; 0x57
   19432:	f00d fcc7 	bl	26dc4 <z_log_minimal_printk>
		return 0;
   19436:	2400      	movs	r4, #0
	}

	return cnt;
}
   19438:	4620      	mov	r0, r4
   1943a:	b002      	add	sp, #8
   1943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   19440:	9b01      	ldr	r3, [sp, #4]
   19442:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   19444:	785c      	ldrb	r4, [r3, #1]
   19446:	42b4      	cmp	r4, r6
   19448:	bf28      	it	cs
   1944a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1944c:	f04f 0816 	mov.w	r8, #22
   19450:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   19452:	42a5      	cmp	r5, r4
   19454:	db07      	blt.n	19466 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   19456:	9801      	ldr	r0, [sp, #4]
   19458:	f003 feae 	bl	1d1b8 <net_buf_unref>
	if (!cnt) {
   1945c:	2c00      	cmp	r4, #0
   1945e:	d1eb      	bne.n	19438 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   19460:	4808      	ldr	r0, [pc, #32]	; (19484 <bt_read_static_addr+0x84>)
   19462:	2157      	movs	r1, #87	; 0x57
   19464:	e7d8      	b.n	19418 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   19466:	fb08 7005 	mla	r0, r8, r5, r7
   1946a:	2216      	movs	r2, #22
   1946c:	4631      	mov	r1, r6
   1946e:	f00d ff6e 	bl	2734e <memcpy>
	for (i = 0; i < cnt; i++) {
   19472:	3501      	adds	r5, #1
   19474:	e7ed      	b.n	19452 <bt_read_static_addr+0x52>
   19476:	bf00      	nop
   19478:	200004f8 	.word	0x200004f8
   1947c:	0002b4df 	.word	0x0002b4df
   19480:	0002b510 	.word	0x0002b510
   19484:	0002b535 	.word	0x0002b535

00019488 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   19488:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1948a:	4e15      	ldr	r6, [pc, #84]	; (194e0 <bt_setup_random_id_addr+0x58>)
   1948c:	79f4      	ldrb	r4, [r6, #7]
{
   1948e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   19490:	b9f4      	cbnz	r4, 194d0 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   19492:	2101      	movs	r1, #1
   19494:	a802      	add	r0, sp, #8
   19496:	f7ff ffb3 	bl	19400 <bt_read_static_addr>
   1949a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   1949c:	b1c0      	cbz	r0, 194d0 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1949e:	2716      	movs	r7, #22
   194a0:	ab02      	add	r3, sp, #8
   194a2:	b2e5      	uxtb	r5, r4
   194a4:	fb07 3105 	mla	r1, r7, r5, r3
   194a8:	2206      	movs	r2, #6
   194aa:	f10d 0001 	add.w	r0, sp, #1
   194ae:	f00d ff4e 	bl	2734e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   194b2:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   194b4:	4669      	mov	r1, sp
   194b6:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   194b8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   194bc:	f7ff feca 	bl	19254 <id_create.constprop.0>
				if (err) {
   194c0:	b920      	cbnz	r0, 194cc <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   194c2:	79f2      	ldrb	r2, [r6, #7]
   194c4:	3401      	adds	r4, #1
   194c6:	b2e3      	uxtb	r3, r4
   194c8:	429a      	cmp	r2, r3
   194ca:	d8e9      	bhi.n	194a0 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   194cc:	b009      	add	sp, #36	; 0x24
   194ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   194d0:	2100      	movs	r1, #0
   194d2:	4608      	mov	r0, r1
}
   194d4:	b009      	add	sp, #36	; 0x24
   194d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   194da:	f7ff bef1 	b.w	192c0 <bt_id_create>
   194de:	bf00      	nop
   194e0:	200004f8 	.word	0x200004f8

000194e4 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   194e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   194e8:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   194ec:	7805      	ldrb	r5, [r0, #0]
{
   194ee:	4684      	mov	ip, r0
   194f0:	460e      	mov	r6, r1
   194f2:	4690      	mov	r8, r2
   194f4:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   194f6:	d027      	beq.n	19548 <bt_id_set_adv_own_addr+0x64>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   194f8:	4c23      	ldr	r4, [pc, #140]	; (19588 <bt_id_set_adv_own_addr+0xa4>)
   194fa:	b12a      	cbz	r2, 19508 <bt_id_set_adv_own_addr+0x24>
   194fc:	0688      	lsls	r0, r1, #26
   194fe:	d503      	bpl.n	19508 <bt_id_set_adv_own_addr+0x24>
   19500:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   19504:	0659      	lsls	r1, r3, #25
   19506:	d53b      	bpl.n	19580 <bt_id_set_adv_own_addr+0x9c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   19508:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1950c:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   19510:	5ce3      	ldrb	r3, [r4, r3]
   19512:	2b01      	cmp	r3, #1
   19514:	d008      	beq.n	19528 <bt_id_set_adv_own_addr+0x44>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   19516:	eba9 0505 	sub.w	r5, r9, r5
   1951a:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1951c:	f1b8 0f00 	cmp.w	r8, #0
   19520:	d10d      	bne.n	1953e <bt_id_set_adv_own_addr+0x5a>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   19522:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   19524:	2000      	movs	r0, #0
   19526:	e008      	b.n	1953a <bt_id_set_adv_own_addr+0x56>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   19528:	2107      	movs	r1, #7
   1952a:	fb11 3105 	smlabb	r1, r1, r5, r3
   1952e:	4421      	add	r1, r4
   19530:	4660      	mov	r0, ip
   19532:	f00e f872 	bl	2761a <bt_id_set_adv_random_addr>
				if (err) {
   19536:	2800      	cmp	r0, #0
   19538:	d0ed      	beq.n	19516 <bt_id_set_adv_own_addr+0x32>
}
   1953a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1953e:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   19540:	bf48      	it	mi
   19542:	f043 0302 	orrmi.w	r3, r3, #2
   19546:	e7ec      	b.n	19522 <bt_id_set_adv_own_addr+0x3e>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   19548:	074b      	lsls	r3, r1, #29
   1954a:	d515      	bpl.n	19578 <bt_id_set_adv_own_addr+0x94>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1954c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 19588 <bt_id_set_adv_own_addr+0xa4>
   19550:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   19554:	00ee      	lsls	r6, r5, #3
   19556:	f818 3003 	ldrb.w	r3, [r8, r3]
   1955a:	2b01      	cmp	r3, #1
   1955c:	d10a      	bne.n	19574 <bt_id_set_adv_own_addr+0x90>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1955e:	2107      	movs	r1, #7
   19560:	fb11 3105 	smlabb	r1, r1, r5, r3
   19564:	4441      	add	r1, r8
   19566:	f00e f858 	bl	2761a <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1956a:	1b75      	subs	r5, r6, r5
   1956c:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   19570:	703b      	strb	r3, [r7, #0]
		if (err) {
   19572:	e7e2      	b.n	1953a <bt_id_set_adv_own_addr+0x56>
	int err = 0;
   19574:	4620      	mov	r0, r4
   19576:	e7f8      	b.n	1956a <bt_id_set_adv_own_addr+0x86>
			err = bt_id_set_adv_private_addr(adv);
   19578:	f00e f899 	bl	276ae <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1957c:	2301      	movs	r3, #1
   1957e:	e7f7      	b.n	19570 <bt_id_set_adv_own_addr+0x8c>
			return -ENOTSUP;
   19580:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19584:	e7d9      	b.n	1953a <bt_id_set_adv_own_addr+0x56>
   19586:	bf00      	nop
   19588:	200004f8 	.word	0x200004f8

0001958c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1958c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1958e:	4d10      	ldr	r5, [pc, #64]	; (195d0 <bt_id_init+0x44>)
   19590:	79eb      	ldrb	r3, [r5, #7]
   19592:	b113      	cbz	r3, 1959a <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   19594:	2400      	movs	r4, #0
}
   19596:	4620      	mov	r0, r4
   19598:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
   1959a:	f7ff ff21 	bl	193e0 <bt_setup_public_id_addr>
		if (err) {
   1959e:	4604      	mov	r4, r0
   195a0:	b120      	cbz	r0, 195ac <bt_id_init+0x20>
			BT_ERR("Unable to set identity address");
   195a2:	480c      	ldr	r0, [pc, #48]	; (195d4 <bt_id_init+0x48>)
   195a4:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to set random address");
   195a6:	f00d fc0d 	bl	26dc4 <z_log_minimal_printk>
			return err;
   195aa:	e7f4      	b.n	19596 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   195ac:	79eb      	ldrb	r3, [r5, #7]
   195ae:	2b00      	cmp	r3, #0
   195b0:	d1f0      	bne.n	19594 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   195b2:	f7ff ff69 	bl	19488 <bt_setup_random_id_addr>
		if (err) {
   195b6:	4604      	mov	r4, r0
   195b8:	2800      	cmp	r0, #0
   195ba:	d1f2      	bne.n	195a2 <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
   195bc:	1c68      	adds	r0, r5, #1
   195be:	f7ff fe1b 	bl	191f8 <set_random_address>
		if (err) {
   195c2:	4604      	mov	r4, r0
   195c4:	2800      	cmp	r0, #0
   195c6:	d0e6      	beq.n	19596 <bt_id_init+0xa>
			BT_ERR("Unable to set random address");
   195c8:	4803      	ldr	r0, [pc, #12]	; (195d8 <bt_id_init+0x4c>)
   195ca:	2145      	movs	r1, #69	; 0x45
   195cc:	e7eb      	b.n	195a6 <bt_id_init+0x1a>
   195ce:	bf00      	nop
   195d0:	200004f8 	.word	0x200004f8
   195d4:	0002b563 	.word	0x0002b563
   195d8:	0002b587 	.word	0x0002b587

000195dc <hci_set_ad_ext>:
	return 0;
}

static int hci_set_ad_ext(struct bt_le_ext_adv *adv, uint16_t hci_op,
			  const struct bt_ad *ad, size_t ad_len)
{
   195dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195e0:	b08b      	sub	sp, #44	; 0x2c
	size_t total_len_bytes = 0;

	for (size_t i = 0; i < ad_len; i++) {
   195e2:	f04f 0900 	mov.w	r9, #0
{
   195e6:	9001      	str	r0, [sp, #4]
   195e8:	468b      	mov	fp, r1
   195ea:	4614      	mov	r4, r2
   195ec:	461e      	mov	r6, r3
	size_t total_len_bytes = 0;
   195ee:	464d      	mov	r5, r9
   195f0:	1d17      	adds	r7, r2, #4
		for (size_t j = 0; j < ad[i].len; j++) {
   195f2:	f857 1039 	ldr.w	r1, [r7, r9, lsl #3]
   195f6:	2300      	movs	r3, #0
   195f8:	e007      	b.n	1960a <hci_set_ad_ext+0x2e>
			total_len_bytes += ad[i].data[j].data_len + 2;
   195fa:	f854 2039 	ldr.w	r2, [r4, r9, lsl #3]
   195fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   19602:	3301      	adds	r3, #1
			total_len_bytes += ad[i].data[j].data_len + 2;
   19604:	7852      	ldrb	r2, [r2, #1]
   19606:	3202      	adds	r2, #2
   19608:	4415      	add	r5, r2
		for (size_t j = 0; j < ad[i].len; j++) {
   1960a:	4299      	cmp	r1, r3
   1960c:	d1f5      	bne.n	195fa <hci_set_ad_ext+0x1e>
	for (size_t i = 0; i < ad_len; i++) {
   1960e:	f109 0801 	add.w	r8, r9, #1
   19612:	4546      	cmp	r6, r8
   19614:	d001      	beq.n	1961a <hci_set_ad_ext+0x3e>
   19616:	46c1      	mov	r9, r8
   19618:	e7eb      	b.n	195f2 <hci_set_ad_ext+0x16>
		}
	}

	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1961a:	9b01      	ldr	r3, [sp, #4]
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   1961c:	2dfb      	cmp	r5, #251	; 0xfb
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1961e:	f103 0010 	add.w	r0, r3, #16
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   19622:	f240 8101 	bls.w	19828 <hci_set_ad_ext+0x24c>
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19626:	2106      	movs	r1, #6
   19628:	f00e f863 	bl	276f2 <atomic_test_bit>
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   1962c:	4605      	mov	r5, r0
   1962e:	2800      	cmp	r0, #0
   19630:	f000 8137 	beq.w	198a2 <hci_set_ad_ext+0x2c6>
		/* It is not allowed to set advertising data in multiple
		 * operations while the advertiser is running.
		 */
		return -EAGAIN;
   19634:	f06f 000a 	mvn.w	r0, #10
   19638:	e053      	b.n	196e2 <hci_set_ad_ext+0x106>
			size_t len = data[j].data_len;
   1963a:	f89a 2001 	ldrb.w	r2, [sl, #1]
			uint8_t type = data[j].type;
   1963e:	f89a c000 	ldrb.w	ip, [sl]
			if ((set_data_len + len + 2) > set_data_len_max) {
   19642:	f108 0002 	add.w	r0, r8, #2
   19646:	1811      	adds	r1, r2, r0
   19648:	428d      	cmp	r5, r1
   1964a:	d212      	bcs.n	19672 <hci_set_ad_ext+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1964c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   19650:	eba5 0200 	sub.w	r2, r5, r0
				if (!(type == BT_DATA_NAME_COMPLETE &&
   19654:	d101      	bne.n	1965a <hci_set_ad_ext+0x7e>
   19656:	2a00      	cmp	r2, #0
   19658:	dc09      	bgt.n	1966e <hci_set_ad_ext+0x92>
					BT_ERR("Too big advertising data");
   1965a:	4898      	ldr	r0, [pc, #608]	; (198bc <hci_set_ad_ext+0x2e0>)
   1965c:	2145      	movs	r1, #69	; 0x45
   1965e:	f00d fbb1 	bl	26dc4 <z_log_minimal_printk>
		net_buf_unref(buf);
   19662:	4638      	mov	r0, r7
   19664:	f003 fda8 	bl	1d1b8 <net_buf_unref>
				return -EINVAL;
   19668:	f06f 0015 	mvn.w	r0, #21
   1966c:	e039      	b.n	196e2 <hci_set_ad_ext+0x106>
				type = BT_DATA_NAME_SHORTENED;
   1966e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   19672:	fa5f f982 	uxtb.w	r9, r2
   19676:	9303      	str	r3, [sp, #12]
   19678:	9b00      	ldr	r3, [sp, #0]
   1967a:	f109 0101 	add.w	r1, r9, #1
   1967e:	f803 1008 	strb.w	r1, [r3, r8]
   19682:	f108 0101 	add.w	r1, r8, #1
			set_data[set_data_len++] = type;
   19686:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   19688:	fa53 f080 	uxtab	r0, r3, r0
			set_data[set_data_len++] = type;
   1968c:	f803 c001 	strb.w	ip, [r3, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   19690:	f8da 1004 	ldr.w	r1, [sl, #4]
   19694:	f00d fe5b 	bl	2734e <memcpy>
			set_data_len += len;
   19698:	f109 0902 	add.w	r9, r9, #2
		for (size_t j = 0; j < ad[i].len; j++) {
   1969c:	9b03      	ldr	r3, [sp, #12]
			set_data_len += len;
   1969e:	44c8      	add	r8, r9
   196a0:	fa5f f888 	uxtb.w	r8, r8
		for (size_t j = 0; j < ad[i].len; j++) {
   196a4:	3301      	adds	r3, #1
   196a6:	f10a 0a08 	add.w	sl, sl, #8
   196aa:	e0e1      	b.n	19870 <hci_set_ad_ext+0x294>
			stream->remaining_size += ad[i].data[j].data_len + 2;
   196ac:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
   196b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   196b4:	7849      	ldrb	r1, [r1, #1]
   196b6:	3102      	adds	r1, #2
   196b8:	440a      	add	r2, r1
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
   196ba:	42b2      	cmp	r2, r6
   196bc:	d8d4      	bhi.n	19668 <hci_set_ad_ext+0x8c>
		for (size_t j = 0; j < ad[i].len; j++) {
   196be:	3001      	adds	r0, #1
   196c0:	2501      	movs	r5, #1
   196c2:	4560      	cmp	r0, ip
   196c4:	d1f2      	bne.n	196ac <hci_set_ad_ext+0xd0>
	for (size_t i = 0; i < ad_len; i++) {
   196c6:	4599      	cmp	r9, r3
   196c8:	f103 0101 	add.w	r1, r3, #1
   196cc:	d10c      	bne.n	196e8 <hci_set_ad_ext+0x10c>
   196ce:	b105      	cbz	r5, 196d2 <hci_set_ad_ext+0xf6>
   196d0:	9209      	str	r2, [sp, #36]	; 0x24
	__ASSERT_NO_MSG(stream->remaining_size >= read_len);
   196d2:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 198c0 <hci_set_ad_ext+0x2e4>
	bool is_first_iteration = true;
   196d6:	f04f 0801 	mov.w	r8, #1
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
   196da:	f04f 0900 	mov.w	r9, #0
	return stream->remaining_size == 0;
   196de:	9809      	ldr	r0, [sp, #36]	; 0x24
	while (!ad_stream_is_empty(&stream)) {
   196e0:	b938      	cbnz	r0, 196f2 <hci_set_ad_ext+0x116>
	} else {
		return hci_set_adv_ext_fragmented(adv, hci_op, ad, ad_len);
	}

	return 0;
}
   196e2:	b00b      	add	sp, #44	; 0x2c
   196e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196e8:	460b      	mov	r3, r1
		for (size_t j = 0; j < ad[i].len; j++) {
   196ea:	f857 c033 	ldr.w	ip, [r7, r3, lsl #3]
   196ee:	2000      	movs	r0, #0
   196f0:	e7e7      	b.n	196c2 <hci_set_ad_ext+0xe6>
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
   196f2:	28fb      	cmp	r0, #251	; 0xfb
   196f4:	bf28      	it	cs
   196f6:	20fb      	movcs	r0, #251	; 0xfb
		const size_t cmd_size = sizeof(*set_data) + data_len;
   196f8:	1d05      	adds	r5, r0, #4
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
   196fa:	4604      	mov	r4, r0
		buf = bt_hci_cmd_create(hci_op, cmd_size);
   196fc:	b2e9      	uxtb	r1, r5
   196fe:	4658      	mov	r0, fp
   19700:	f7fe fe9c 	bl	1843c <bt_hci_cmd_create>
		if (!buf) {
   19704:	4607      	mov	r7, r0
   19706:	2800      	cmp	r0, #0
   19708:	f000 808b 	beq.w	19822 <hci_set_ad_ext+0x246>
	return net_buf_simple_add(&buf->b, len);
   1970c:	4629      	mov	r1, r5
   1970e:	3008      	adds	r0, #8
   19710:	f003 fe68 	bl	1d3e4 <net_buf_simple_add>
		set_data->handle = adv->handle;
   19714:	9b01      	ldr	r3, [sp, #4]
   19716:	785b      	ldrb	r3, [r3, #1]
   19718:	7003      	strb	r3, [r0, #0]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
   1971a:	1d03      	adds	r3, r0, #4
   1971c:	9300      	str	r3, [sp, #0]
   1971e:	b2e3      	uxtb	r3, r4
   19720:	4606      	mov	r6, r0
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
   19722:	f880 9002 	strb.w	r9, [r0, #2]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
   19726:	9302      	str	r3, [sp, #8]
	uint8_t read_len = 0;
   19728:	2500      	movs	r5, #0
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
   1972a:	9804      	ldr	r0, [sp, #16]
   1972c:	9a06      	ldr	r2, [sp, #24]
   1972e:	9b07      	ldr	r3, [sp, #28]
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
   19730:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
   19734:	f8bd e020 	ldrh.w	lr, [sp, #32]
   19738:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
   1973c:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
   19740:	7849      	ldrb	r1, [r1, #1]
   19742:	3102      	adds	r1, #2
	if (done_reading_ltv) {
   19744:	458e      	cmp	lr, r1
   19746:	d10b      	bne.n	19760 <hci_set_ad_ext+0x184>
		if (stream->data_index + 1 == stream->ad[stream->ad_index].len) {
   19748:	f8dc 1004 	ldr.w	r1, [ip, #4]
		stream->current_ltv_offset = 0;
   1974c:	f8ad 9020 	strh.w	r9, [sp, #32]
		if (stream->data_index + 1 == stream->ad[stream->ad_index].len) {
   19750:	3301      	adds	r3, #1
   19752:	428b      	cmp	r3, r1
			stream->ad_index++;
   19754:	bf03      	ittte	eq
   19756:	3201      	addeq	r2, #1
			stream->data_index = 0;
   19758:	f8cd 901c 	streq.w	r9, [sp, #28]
			stream->ad_index++;
   1975c:	9206      	streq	r2, [sp, #24]
			stream->data_index++;
   1975e:	9307      	strne	r3, [sp, #28]
	if (stream->ad_index == stream->ad_len) {
   19760:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   19764:	4293      	cmp	r3, r2
   19766:	d018      	beq.n	1979a <hci_set_ad_ext+0x1be>
		return &stream->ad[stream->ad_index].data[stream->data_index];
   19768:	9a07      	ldr	r2, [sp, #28]
   1976a:	f850 c033 	ldr.w	ip, [r0, r3, lsl #3]
		if (!current_ltv) {
   1976e:	eb1c 03c2 	adds.w	r3, ip, r2, lsl #3
   19772:	d012      	beq.n	1979a <hci_set_ad_ext+0x1be>
			buf[read_len] = current_ltv->data_len + 1;
   19774:	9800      	ldr	r0, [sp, #0]
		if (stream->current_ltv_offset == 0) {
   19776:	f8bd 1020 	ldrh.w	r1, [sp, #32]
			buf[read_len] = current_ltv->data_len + 1;
   1977a:	4428      	add	r0, r5
		if (stream->current_ltv_offset == 0) {
   1977c:	bb61      	cbnz	r1, 197d8 <hci_set_ad_ext+0x1fc>
			buf[read_len] = current_ltv->data_len + 1;
   1977e:	785b      	ldrb	r3, [r3, #1]
   19780:	9a00      	ldr	r2, [sp, #0]
   19782:	3301      	adds	r3, #1
   19784:	5553      	strb	r3, [r2, r5]
			stream->current_ltv_offset++;
   19786:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1978a:	3301      	adds	r3, #1
   1978c:	f8ad 3020 	strh.w	r3, [sp, #32]
			read_len++;
   19790:	3501      	adds	r5, #1
	while (read_len < buf_len) {
   19792:	9b02      	ldr	r3, [sp, #8]
			read_len += size_to_copy;
   19794:	b2ed      	uxtb	r5, r5
	while (read_len < buf_len) {
   19796:	42ab      	cmp	r3, r5
   19798:	d8c7      	bhi.n	1972a <hci_set_ad_ext+0x14e>
	__ASSERT_NO_MSG(stream->remaining_size >= read_len);
   1979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1979c:	42ab      	cmp	r3, r5
   1979e:	d208      	bcs.n	197b2 <hci_set_ad_ext+0x1d6>
   197a0:	4848      	ldr	r0, [pc, #288]	; (198c4 <hci_set_ad_ext+0x2e8>)
   197a2:	4651      	mov	r1, sl
   197a4:	22a5      	movs	r2, #165	; 0xa5
   197a6:	f00d faff 	bl	26da8 <assert_print>
   197aa:	21a5      	movs	r1, #165	; 0xa5
   197ac:	4650      	mov	r0, sl
   197ae:	f00d faf4 	bl	26d9a <assert_post_action>
	stream->remaining_size -= read_len;
   197b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   197b4:	1b5b      	subs	r3, r3, r5
   197b6:	9309      	str	r3, [sp, #36]	; 0x24
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
   197b8:	70f5      	strb	r5, [r6, #3]
		if (is_first_iteration && ad_stream_is_empty(&stream)) {
   197ba:	f1b8 0f00 	cmp.w	r8, #0
   197be:	d02a      	beq.n	19816 <hci_set_ad_ext+0x23a>
   197c0:	bb3b      	cbnz	r3, 19812 <hci_set_ad_ext+0x236>
			set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
   197c2:	2303      	movs	r3, #3
			set_data->op = BT_HCI_LE_EXT_ADV_OP_FIRST_FRAG;
   197c4:	7073      	strb	r3, [r6, #1]
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
   197c6:	2200      	movs	r2, #0
   197c8:	4639      	mov	r1, r7
   197ca:	4658      	mov	r0, fp
   197cc:	f7fe fe7e 	bl	184cc <bt_hci_cmd_send_sync>
		if (err) {
   197d0:	2800      	cmp	r0, #0
   197d2:	d186      	bne.n	196e2 <hci_set_ad_ext+0x106>
		is_first_iteration = false;
   197d4:	4680      	mov	r8, r0
   197d6:	e782      	b.n	196de <hci_set_ad_ext+0x102>
		} else if (stream->current_ltv_offset == 1) {
   197d8:	2901      	cmp	r1, #1
   197da:	d103      	bne.n	197e4 <hci_set_ad_ext+0x208>
			buf[read_len] = current_ltv->type;
   197dc:	f81c 3032 	ldrb.w	r3, [ip, r2, lsl #3]
   197e0:	7003      	strb	r3, [r0, #0]
   197e2:	e7d0      	b.n	19786 <hci_set_ad_ext+0x1aa>
					current_ltv->data_len - stream->current_ltv_offset + 2;
   197e4:	785a      	ldrb	r2, [r3, #1]
				&current_ltv->data[stream->current_ltv_offset - 2],
   197e6:	685b      	ldr	r3, [r3, #4]
					current_ltv->data_len - stream->current_ltv_offset + 2;
   197e8:	1a52      	subs	r2, r2, r1
   197ea:	3202      	adds	r2, #2
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
   197ec:	eba4 0c05 	sub.w	ip, r4, r5
   197f0:	4562      	cmp	r2, ip
				&current_ltv->data[stream->current_ltv_offset - 2],
   197f2:	f1a1 0102 	sub.w	r1, r1, #2
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
   197f6:	bf28      	it	cs
   197f8:	4662      	movcs	r2, ip
			(void)memcpy(&buf[read_len],
   197fa:	4419      	add	r1, r3
   197fc:	9203      	str	r2, [sp, #12]
   197fe:	f00d fda6 	bl	2734e <memcpy>
			stream->current_ltv_offset += size_to_copy;
   19802:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   19806:	9a03      	ldr	r2, [sp, #12]
   19808:	4413      	add	r3, r2
   1980a:	f8ad 3020 	strh.w	r3, [sp, #32]
			read_len += size_to_copy;
   1980e:	4415      	add	r5, r2
   19810:	e7bf      	b.n	19792 <hci_set_ad_ext+0x1b6>
			set_data->op = BT_HCI_LE_EXT_ADV_OP_FIRST_FRAG;
   19812:	2301      	movs	r3, #1
   19814:	e7d6      	b.n	197c4 <hci_set_ad_ext+0x1e8>
		} else if (ad_stream_is_empty(&stream)) {
   19816:	b90b      	cbnz	r3, 1981c <hci_set_ad_ext+0x240>
			set_data->op = BT_HCI_LE_EXT_ADV_OP_LAST_FRAG;
   19818:	2302      	movs	r3, #2
   1981a:	e7d3      	b.n	197c4 <hci_set_ad_ext+0x1e8>
			set_data->op = BT_HCI_LE_EXT_ADV_OP_INTERM_FRAG;
   1981c:	f886 8001 	strb.w	r8, [r6, #1]
   19820:	e7d1      	b.n	197c6 <hci_set_ad_ext+0x1ea>
		return -ENOBUFS;
   19822:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19826:	e75c      	b.n	196e2 <hci_set_ad_ext+0x106>
	if (!atomic_test_bit(adv->flags, BT_ADV_EXT_ADV) &&
   19828:	210b      	movs	r1, #11
   1982a:	f00d ff62 	bl	276f2 <atomic_test_bit>
   1982e:	b910      	cbnz	r0, 19836 <hci_set_ad_ext+0x25a>
   19830:	2d1f      	cmp	r5, #31
   19832:	bf28      	it	cs
   19834:	251f      	movcs	r5, #31
	cmd_size = sizeof(*set_data) + total_data_len;
   19836:	f105 0904 	add.w	r9, r5, #4
	buf = bt_hci_cmd_create(hci_op, cmd_size);
   1983a:	fa5f f189 	uxtb.w	r1, r9
   1983e:	4658      	mov	r0, fp
   19840:	f7fe fdfc 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   19844:	4607      	mov	r7, r0
   19846:	2800      	cmp	r0, #0
   19848:	d0eb      	beq.n	19822 <hci_set_ad_ext+0x246>
   1984a:	4649      	mov	r1, r9
   1984c:	3008      	adds	r0, #8
   1984e:	f003 fdc9 	bl	1d3e4 <net_buf_simple_add>
	(void)memset(set_data, 0, cmd_size);
   19852:	464a      	mov	r2, r9
   19854:	4606      	mov	r6, r0
   19856:	2100      	movs	r1, #0
   19858:	f00d fd84 	bl	27364 <memset>
	err = set_data_add_complete(set_data->data, total_data_len,
   1985c:	1d33      	adds	r3, r6, #4
   1985e:	9300      	str	r3, [sp, #0]
	for (size_t i = 0; i < ad_len; i++) {
   19860:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
   19864:	9302      	str	r3, [sp, #8]
	uint8_t set_data_len = 0;
   19866:	f04f 0800 	mov.w	r8, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1986a:	f8d4 a000 	ldr.w	sl, [r4]
   1986e:	2300      	movs	r3, #0
   19870:	6862      	ldr	r2, [r4, #4]
   19872:	4293      	cmp	r3, r2
   19874:	f4ff aee1 	bcc.w	1963a <hci_set_ad_ext+0x5e>
	for (size_t i = 0; i < ad_len; i++) {
   19878:	9b02      	ldr	r3, [sp, #8]
   1987a:	3408      	adds	r4, #8
   1987c:	42a3      	cmp	r3, r4
   1987e:	d1f4      	bne.n	1986a <hci_set_ad_ext+0x28e>
	set_data->handle = adv->handle;
   19880:	9b01      	ldr	r3, [sp, #4]
	*data_len = set_data_len;
   19882:	f886 8003 	strb.w	r8, [r6, #3]
	set_data->handle = adv->handle;
   19886:	785b      	ldrb	r3, [r3, #1]
   19888:	7033      	strb	r3, [r6, #0]
	set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
   1988a:	2303      	movs	r3, #3
   1988c:	7073      	strb	r3, [r6, #1]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1988e:	2200      	movs	r2, #0
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
   19890:	2301      	movs	r3, #1
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   19892:	4639      	mov	r1, r7
   19894:	4658      	mov	r0, fp
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
   19896:	70b3      	strb	r3, [r6, #2]
}
   19898:	b00b      	add	sp, #44	; 0x2c
   1989a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1989e:	f7fe be15 	b.w	184cc <bt_hci_cmd_send_sync>
	(void)memset(stream, 0, sizeof(*stream));
   198a2:	2218      	movs	r2, #24
   198a4:	4601      	mov	r1, r0
   198a6:	a804      	add	r0, sp, #16
   198a8:	f00d fd5c 	bl	27364 <memset>
	stream->ad_len = ad_len;
   198ac:	e9cd 4604 	strd	r4, r6, [sp, #16]
	for (size_t i = 0; i < ad_len; i++) {
   198b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   198b2:	462b      	mov	r3, r5
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
   198b4:	f240 6672 	movw	r6, #1650	; 0x672
   198b8:	e717      	b.n	196ea <hci_set_ad_ext+0x10e>
   198ba:	bf00      	nop
   198bc:	0002b5af 	.word	0x0002b5af
   198c0:	0002b5cd 	.word	0x0002b5cd
   198c4:	0002a576 	.word	0x0002a576

000198c8 <valid_adv_ext_param>:
{
   198c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (param->peer &&
   198ca:	6902      	ldr	r2, [r0, #16]
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   198cc:	6843      	ldr	r3, [r0, #4]
{
   198ce:	4604      	mov	r4, r0
		if (param->peer &&
   198d0:	b15a      	cbz	r2, 198ea <valid_adv_ext_param+0x22>
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   198d2:	f240 4201 	movw	r2, #1025	; 0x401
   198d6:	4213      	tst	r3, r2
   198d8:	d102      	bne.n	198e0 <valid_adv_ext_param+0x18>
		return false;
   198da:	2000      	movs	r0, #0
}
   198dc:	b003      	add	sp, #12
   198de:	bd30      	pop	{r4, r5, pc}
		    (param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   198e0:	f403 6282 	and.w	r2, r3, #1040	; 0x410
   198e4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   198e8:	d0f7      	beq.n	198da <valid_adv_ext_param+0x12>
		if (!(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   198ea:	0559      	lsls	r1, r3, #21
   198ec:	d402      	bmi.n	198f4 <valid_adv_ext_param+0x2c>
   198ee:	f413 4ff8 	tst.w	r3, #31744	; 0x7c00
   198f2:	d1f2      	bne.n	198da <valid_adv_ext_param+0x12>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   198f4:	4a1c      	ldr	r2, [pc, #112]	; (19968 <valid_adv_ext_param+0xa0>)
   198f6:	ea32 0303 	bics.w	r3, r2, r3
   198fa:	d0ee      	beq.n	198da <valid_adv_ext_param+0x12>
	if (param->id >= bt_dev.id_count ||
   198fc:	4d1b      	ldr	r5, [pc, #108]	; (1996c <valid_adv_ext_param+0xa4>)
   198fe:	7820      	ldrb	r0, [r4, #0]
   19900:	79eb      	ldrb	r3, [r5, #7]
   19902:	4283      	cmp	r3, r0
   19904:	d9e9      	bls.n	198da <valid_adv_ext_param+0x12>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   19906:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1990a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1990c:	2207      	movs	r2, #7
   1990e:	4669      	mov	r1, sp
   19910:	4428      	add	r0, r5
   19912:	9300      	str	r3, [sp, #0]
   19914:	f8cd 3003 	str.w	r3, [sp, #3]
   19918:	f00d fcf0 	bl	272fc <memcmp>
	if (param->id >= bt_dev.id_count ||
   1991c:	2800      	cmp	r0, #0
   1991e:	d0dc      	beq.n	198da <valid_adv_ext_param+0x12>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   19920:	6860      	ldr	r0, [r4, #4]
   19922:	07c2      	lsls	r2, r0, #31
   19924:	d406      	bmi.n	19934 <valid_adv_ext_param+0x6c>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   19926:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1992a:	2b08      	cmp	r3, #8
   1992c:	d802      	bhi.n	19934 <valid_adv_ext_param+0x6c>
   1992e:	68a3      	ldr	r3, [r4, #8]
   19930:	2b9f      	cmp	r3, #159	; 0x9f
   19932:	d9d2      	bls.n	198da <valid_adv_ext_param+0x12>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   19934:	f010 0f30 	tst.w	r0, #48	; 0x30
   19938:	d002      	beq.n	19940 <valid_adv_ext_param+0x78>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1993a:	6923      	ldr	r3, [r4, #16]
   1993c:	2b00      	cmp	r3, #0
   1993e:	d0cc      	beq.n	198da <valid_adv_ext_param+0x12>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   19940:	06c3      	lsls	r3, r0, #27
   19942:	d401      	bmi.n	19948 <valid_adv_ext_param+0x80>
   19944:	6923      	ldr	r3, [r4, #16]
   19946:	b943      	cbnz	r3, 1995a <valid_adv_ext_param+0x92>
		if (param->interval_min > param->interval_max ||
   19948:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1994c:	429a      	cmp	r2, r3
   1994e:	d8c4      	bhi.n	198da <valid_adv_ext_param+0x12>
   19950:	2a1f      	cmp	r2, #31
   19952:	d9c2      	bls.n	198da <valid_adv_ext_param+0x12>
		    param->interval_min < 0x0020 ||
   19954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   19958:	d8bf      	bhi.n	198da <valid_adv_ext_param+0x12>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1995a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1995e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   19962:	bf18      	it	ne
   19964:	2001      	movne	r0, #1
   19966:	e7b9      	b.n	198dc <valid_adv_ext_param+0x14>
   19968:	00040600 	.word	0x00040600
   1996c:	200004f8 	.word	0x200004f8

00019970 <adv_new>:
{
   19970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19972:	4e0f      	ldr	r6, [pc, #60]	; (199b0 <adv_new+0x40>)
	for (i = 0; i < ARRAY_SIZE(adv_pool); i++) {
   19974:	2500      	movs	r5, #0
   19976:	2350      	movs	r3, #80	; 0x50
		if (!atomic_test_bit(adv_pool[i].flags, BT_ADV_CREATED)) {
   19978:	2100      	movs	r1, #0
   1997a:	4630      	mov	r0, r6
   1997c:	f00d feb9 	bl	276f2 <atomic_test_bit>
   19980:	fb03 f405 	mul.w	r4, r3, r5
   19984:	4607      	mov	r7, r0
   19986:	b960      	cbnz	r0, 199a2 <adv_new+0x32>
			adv = &adv_pool[i];
   19988:	4b0a      	ldr	r3, [pc, #40]	; (199b4 <adv_new+0x44>)
   1998a:	441c      	add	r4, r3
	(void)memset(adv, 0, sizeof(*adv));
   1998c:	2250      	movs	r2, #80	; 0x50
   1998e:	4620      	mov	r0, r4
   19990:	f00d fce8 	bl	27364 <memset>
	atomic_set_bit(adv_pool[i].flags, BT_ADV_CREATED);
   19994:	4639      	mov	r1, r7
   19996:	4630      	mov	r0, r6
   19998:	f00d fedd 	bl	27756 <atomic_set_bit>
	adv->handle = i;
   1999c:	7065      	strb	r5, [r4, #1]
}
   1999e:	4620      	mov	r0, r4
   199a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(adv_pool); i++) {
   199a2:	3501      	adds	r5, #1
   199a4:	2d40      	cmp	r5, #64	; 0x40
   199a6:	f106 0650 	add.w	r6, r6, #80	; 0x50
   199aa:	d1e5      	bne.n	19978 <adv_new+0x8>
		return NULL;
   199ac:	460c      	mov	r4, r1
   199ae:	e7f6      	b.n	1999e <adv_new+0x2e>
   199b0:	20001c88 	.word	0x20001c88
   199b4:	20001c78 	.word	0x20001c78

000199b8 <le_adv_stop_free_conn>:
	*out_conn = conn;
	return 0;
}

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   199b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   199ba:	f100 0609 	add.w	r6, r0, #9
   199be:	2300      	movs	r3, #0
{
   199c0:	4604      	mov	r4, r0
   199c2:	460d      	mov	r5, r1
   199c4:	2207      	movs	r2, #7
   199c6:	4669      	mov	r1, sp
   199c8:	4630      	mov	r0, r6
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   199ca:	9300      	str	r3, [sp, #0]
   199cc:	f8cd 3003 	str.w	r3, [sp, #3]
   199d0:	f00d fc94 	bl	272fc <memcmp>
   199d4:	7824      	ldrb	r4, [r4, #0]
   199d6:	b9c8      	cbnz	r0, 19a0c <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   199d8:	4b0f      	ldr	r3, [pc, #60]	; (19a18 <le_adv_stop_free_conn+0x60>)
   199da:	889a      	ldrh	r2, [r3, #4]
   199dc:	6818      	ldr	r0, [r3, #0]
   199de:	799b      	ldrb	r3, [r3, #6]
   199e0:	f8ad 200c 	strh.w	r2, [sp, #12]
   199e4:	9002      	str	r0, [sp, #8]
   199e6:	f88d 300e 	strb.w	r3, [sp, #14]
   199ea:	2204      	movs	r2, #4
   199ec:	a902      	add	r1, sp, #8
					       BT_CONN_CONNECTING_ADV);
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   199ee:	4620      	mov	r0, r4
   199f0:	f000 ff2a 	bl	1a848 <bt_conn_lookup_state_le>
   199f4:	4604      	mov	r4, r0
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   199f6:	b160      	cbz	r0, 19a12 <le_adv_stop_free_conn+0x5a>
		conn->err = status;
   199f8:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   199fa:	2100      	movs	r1, #0
   199fc:	f000 fcfc 	bl	1a3f8 <bt_conn_set_state>
		bt_conn_unref(conn);
   19a00:	4620      	mov	r0, r4
	}
}
   19a02:	b004      	add	sp, #16
   19a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   19a08:	f000 bcbe 	b.w	1a388 <bt_conn_unref>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   19a0c:	2205      	movs	r2, #5
   19a0e:	4631      	mov	r1, r6
   19a10:	e7ed      	b.n	199ee <le_adv_stop_free_conn+0x36>
}
   19a12:	b004      	add	sp, #16
   19a14:	bd70      	pop	{r4, r5, r6, pc}
   19a16:	bf00      	nop
   19a18:	00029b91 	.word	0x00029b91

00019a1c <le_adv_start_add_conn>:
{
   19a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	bt_dev.adv_conn_id = adv->id;
   19a1e:	4606      	mov	r6, r0
   19a20:	4b1e      	ldr	r3, [pc, #120]	; (19a9c <le_adv_start_add_conn+0x80>)
   19a22:	f816 2b09 	ldrb.w	r2, [r6], #9
   19a26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
{
   19a2a:	b085      	sub	sp, #20
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   19a2c:	2300      	movs	r3, #0
{
   19a2e:	4605      	mov	r5, r0
   19a30:	2207      	movs	r2, #7
   19a32:	460f      	mov	r7, r1
   19a34:	4630      	mov	r0, r6
   19a36:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   19a38:	9300      	str	r3, [sp, #0]
   19a3a:	f8cd 3003 	str.w	r3, [sp, #3]
   19a3e:	f00d fc5d 	bl	272fc <memcmp>
   19a42:	782a      	ldrb	r2, [r5, #0]
   19a44:	4604      	mov	r4, r0
   19a46:	b9a8      	cbnz	r0, 19a74 <le_adv_start_add_conn+0x58>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   19a48:	4b15      	ldr	r3, [pc, #84]	; (19aa0 <le_adv_start_add_conn+0x84>)
   19a4a:	6818      	ldr	r0, [r3, #0]
   19a4c:	8899      	ldrh	r1, [r3, #4]
   19a4e:	9002      	str	r0, [sp, #8]
   19a50:	799b      	ldrb	r3, [r3, #6]
   19a52:	f8ad 100c 	strh.w	r1, [sp, #12]
   19a56:	4610      	mov	r0, r2
   19a58:	a902      	add	r1, sp, #8
   19a5a:	f88d 300e 	strb.w	r3, [sp, #14]
   19a5e:	f000 fe9f 	bl	1a7a0 <bt_conn_add_le>
		if (!conn) {
   19a62:	4605      	mov	r5, r0
   19a64:	b1b8      	cbz	r0, 19a96 <le_adv_start_add_conn+0x7a>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   19a66:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   19a68:	f000 fcc6 	bl	1a3f8 <bt_conn_set_state>
	*out_conn = conn;
   19a6c:	603d      	str	r5, [r7, #0]
}
   19a6e:	4620      	mov	r0, r4
   19a70:	b005      	add	sp, #20
   19a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   19a74:	4631      	mov	r1, r6
   19a76:	4610      	mov	r0, r2
   19a78:	f000 feca 	bl	1a810 <bt_conn_exists_le>
   19a7c:	4604      	mov	r4, r0
   19a7e:	b938      	cbnz	r0, 19a90 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   19a80:	7828      	ldrb	r0, [r5, #0]
   19a82:	4631      	mov	r1, r6
   19a84:	f000 fe8c 	bl	1a7a0 <bt_conn_add_le>
	if (!conn) {
   19a88:	4605      	mov	r5, r0
   19a8a:	b120      	cbz	r0, 19a96 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   19a8c:	2105      	movs	r1, #5
   19a8e:	e7eb      	b.n	19a68 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   19a90:	f06f 0415 	mvn.w	r4, #21
   19a94:	e7eb      	b.n	19a6e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   19a96:	f06f 040b 	mvn.w	r4, #11
   19a9a:	e7e8      	b.n	19a6e <le_adv_start_add_conn+0x52>
   19a9c:	200004f8 	.word	0x200004f8
   19aa0:	00029b91 	.word	0x00029b91

00019aa4 <bt_le_ext_adv_get_index>:
	ptrdiff_t index = adv - adv_pool;
   19aa4:	4b0a      	ldr	r3, [pc, #40]	; (19ad0 <bt_le_ext_adv_get_index+0x2c>)
   19aa6:	1ac0      	subs	r0, r0, r3
   19aa8:	4b0a      	ldr	r3, [pc, #40]	; (19ad4 <bt_le_ext_adv_get_index+0x30>)
{
   19aaa:	b510      	push	{r4, lr}
	ptrdiff_t index = adv - adv_pool;
   19aac:	1104      	asrs	r4, r0, #4
   19aae:	435c      	muls	r4, r3
	__ASSERT(index >= 0 && index < ARRAY_SIZE(adv_pool),
   19ab0:	f241 33b0 	movw	r3, #5040	; 0x13b0
   19ab4:	4298      	cmp	r0, r3
   19ab6:	d908      	bls.n	19aca <bt_le_ext_adv_get_index+0x26>
   19ab8:	4907      	ldr	r1, [pc, #28]	; (19ad8 <bt_le_ext_adv_get_index+0x34>)
   19aba:	4808      	ldr	r0, [pc, #32]	; (19adc <bt_le_ext_adv_get_index+0x38>)
   19abc:	22d4      	movs	r2, #212	; 0xd4
   19abe:	f00d f973 	bl	26da8 <assert_print>
   19ac2:	4805      	ldr	r0, [pc, #20]	; (19ad8 <bt_le_ext_adv_get_index+0x34>)
   19ac4:	21d4      	movs	r1, #212	; 0xd4
   19ac6:	f00d f968 	bl	26d9a <assert_post_action>
}
   19aca:	b2e0      	uxtb	r0, r4
   19acc:	bd10      	pop	{r4, pc}
   19ace:	bf00      	nop
   19ad0:	20001c78 	.word	0x20001c78
   19ad4:	cccccccd 	.word	0xcccccccd
   19ad8:	0002b5cd 	.word	0x0002b5cd
   19adc:	0002a576 	.word	0x0002a576

00019ae0 <bt_le_adv_delete_legacy>:
{
   19ae0:	b510      	push	{r4, lr}
	if (bt_dev.adv) {
   19ae2:	4c05      	ldr	r4, [pc, #20]	; (19af8 <bt_le_adv_delete_legacy+0x18>)
   19ae4:	69a0      	ldr	r0, [r4, #24]
   19ae6:	b130      	cbz	r0, 19af6 <bt_le_adv_delete_legacy+0x16>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19ae8:	f06f 0101 	mvn.w	r1, #1
   19aec:	3010      	adds	r0, #16
   19aee:	f00d fe09 	bl	27704 <atomic_and>
		bt_dev.adv = NULL;
   19af2:	2300      	movs	r3, #0
   19af4:	61a3      	str	r3, [r4, #24]
}
   19af6:	bd10      	pop	{r4, pc}
   19af8:	200004f8 	.word	0x200004f8

00019afc <bt_le_adv_resume>:
	return bt_dev.adv;
   19afc:	4b1a      	ldr	r3, [pc, #104]	; (19b68 <bt_le_adv_resume+0x6c>)
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   19afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return bt_dev.adv;
   19b00:	699e      	ldr	r6, [r3, #24]
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	struct bt_conn *conn;
	bool persist_paused = false;
	int err;

	if (!adv) {
   19b02:	b376      	cbz	r6, 19b62 <bt_le_adv_resume+0x66>
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   19b04:	f106 0510 	add.w	r5, r6, #16
   19b08:	210d      	movs	r1, #13
   19b0a:	4628      	mov	r0, r5
   19b0c:	f00d fdf1 	bl	276f2 <atomic_test_bit>
   19b10:	b338      	cbz	r0, 19b62 <bt_le_adv_resume+0x66>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   19b12:	2106      	movs	r1, #6
   19b14:	4628      	mov	r0, r5
   19b16:	f00d fdec 	bl	276f2 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   19b1a:	4604      	mov	r4, r0
   19b1c:	bb08      	cbnz	r0, 19b62 <bt_le_adv_resume+0x66>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   19b1e:	2109      	movs	r1, #9
   19b20:	4628      	mov	r0, r5
   19b22:	f00d fde6 	bl	276f2 <atomic_test_bit>
   19b26:	b1e0      	cbz	r0, 19b62 <bt_le_adv_resume+0x66>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   19b28:	a901      	add	r1, sp, #4
   19b2a:	4630      	mov	r0, r6
   19b2c:	f7ff ff76 	bl	19a1c <le_adv_start_add_conn>
	if (err) {
   19b30:	b9b8      	cbnz	r0, 19b62 <bt_le_adv_resume+0x66>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
   19b32:	2101      	movs	r1, #1
   19b34:	4630      	mov	r0, r6
   19b36:	f00d ffeb 	bl	27b10 <bt_le_adv_set_enable>
	if (err) {
   19b3a:	b150      	cbz	r0, 19b52 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19b3c:	4621      	mov	r1, r4
   19b3e:	9801      	ldr	r0, [sp, #4]
   19b40:	f000 fc5a 	bl	1a3f8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19b44:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   19b48:	4628      	mov	r0, r5
   19b4a:	f00d fddb 	bl	27704 <atomic_and>
	return (old & mask) != 0;
   19b4e:	f3c0 3440 	ubfx	r4, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   19b52:	9801      	ldr	r0, [sp, #4]
   19b54:	f000 fc18 	bl	1a388 <bt_conn_unref>
	if (persist_paused) {
   19b58:	b11c      	cbz	r4, 19b62 <bt_le_adv_resume+0x66>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
   19b5a:	210d      	movs	r1, #13
   19b5c:	4628      	mov	r0, r5
   19b5e:	f00d fdfa 	bl	27756 <atomic_set_bit>
	}
}
   19b62:	b002      	add	sp, #8
   19b64:	bd70      	pop	{r4, r5, r6, pc}
   19b66:	bf00      	nop
   19b68:	200004f8 	.word	0x200004f8

00019b6c <bt_le_ext_adv_create>:
}

int bt_le_ext_adv_create(const struct bt_le_adv_param *param,
			 const struct bt_le_ext_adv_cb *cb,
			 struct bt_le_ext_adv **out_adv)
{
   19b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b6e:	4b17      	ldr	r3, [pc, #92]	; (19bcc <bt_le_ext_adv_create+0x60>)
   19b70:	f3bf 8f5b 	dmb	ish
   19b74:	681b      	ldr	r3, [r3, #0]
   19b76:	f3bf 8f5b 	dmb	ish
	struct bt_le_ext_adv *adv;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19b7a:	075b      	lsls	r3, r3, #29
{
   19b7c:	4604      	mov	r4, r0
   19b7e:	460f      	mov	r7, r1
   19b80:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19b82:	d519      	bpl.n	19bb8 <bt_le_ext_adv_create+0x4c>
		return -EAGAIN;
	}

	if (!valid_adv_ext_param(param)) {
   19b84:	f7ff fea0 	bl	198c8 <valid_adv_ext_param>
   19b88:	b1c8      	cbz	r0, 19bbe <bt_le_ext_adv_create+0x52>
		return -EINVAL;
	}

	adv = adv_new();
   19b8a:	f7ff fef1 	bl	19970 <adv_new>
	if (!adv) {
   19b8e:	4605      	mov	r5, r0
   19b90:	b1c0      	cbz	r0, 19bc4 <bt_le_ext_adv_create+0x58>
		return -ENOMEM;
	}

	adv->id = param->id;
   19b92:	7823      	ldrb	r3, [r4, #0]
   19b94:	7003      	strb	r3, [r0, #0]
	adv->cb = cb;

	err = le_ext_adv_param_set(adv, param, false);
   19b96:	4621      	mov	r1, r4
	adv->cb = cb;
   19b98:	6147      	str	r7, [r0, #20]
	err = le_ext_adv_param_set(adv, param, false);
   19b9a:	2200      	movs	r2, #0
   19b9c:	f00d fe7c 	bl	27898 <le_ext_adv_param_set>
	if (err) {
   19ba0:	4604      	mov	r4, r0
   19ba2:	b138      	cbz	r0, 19bb4 <bt_le_ext_adv_create+0x48>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19ba4:	f06f 0101 	mvn.w	r1, #1
   19ba8:	f105 0010 	add.w	r0, r5, #16
   19bac:	f00d fdaa 	bl	27704 <atomic_and>
		return err;
	}

	*out_adv = adv;
	return 0;
}
   19bb0:	4620      	mov	r0, r4
   19bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*out_adv = adv;
   19bb4:	6035      	str	r5, [r6, #0]
	return 0;
   19bb6:	e7fb      	b.n	19bb0 <bt_le_ext_adv_create+0x44>
		return -EAGAIN;
   19bb8:	f06f 040a 	mvn.w	r4, #10
   19bbc:	e7f8      	b.n	19bb0 <bt_le_ext_adv_create+0x44>
		return -EINVAL;
   19bbe:	f06f 0415 	mvn.w	r4, #21
   19bc2:	e7f5      	b.n	19bb0 <bt_le_ext_adv_create+0x44>
		return -ENOMEM;
   19bc4:	f06f 040b 	mvn.w	r4, #11
   19bc8:	e7f2      	b.n	19bb0 <bt_le_ext_adv_create+0x44>
   19bca:	bf00      	nop
   19bcc:	20000580 	.word	0x20000580

00019bd0 <bt_le_ext_adv_start>:
	return le_ext_adv_param_set(adv, param, false);
}

int bt_le_ext_adv_start(struct bt_le_ext_adv *adv,
			struct bt_le_ext_adv_start_param *param)
{
   19bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = NULL;
	int err;

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19bd2:	f100 0710 	add.w	r7, r0, #16
{
   19bd6:	b085      	sub	sp, #20
   19bd8:	4605      	mov	r5, r0
   19bda:	460e      	mov	r6, r1
	struct bt_conn *conn = NULL;
   19bdc:	2300      	movs	r3, #0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19bde:	2106      	movs	r1, #6
   19be0:	4638      	mov	r0, r7
	struct bt_conn *conn = NULL;
   19be2:	9303      	str	r3, [sp, #12]
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19be4:	f00d fd85 	bl	276f2 <atomic_test_bit>
   19be8:	2800      	cmp	r0, #0
   19bea:	d153      	bne.n	19c94 <bt_le_ext_adv_start+0xc4>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   19bec:	2109      	movs	r1, #9
   19bee:	4638      	mov	r0, r7
   19bf0:	f00d fd7f 	bl	276f2 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19bf4:	bbb8      	cbnz	r0, 19c66 <bt_le_ext_adv_start+0x96>
		if (err) {
			return err;
		}
	}

	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   19bf6:	2e00      	cmp	r6, #0
   19bf8:	d13f      	bne.n	19c7a <bt_le_ext_adv_start+0xaa>
   19bfa:	4632      	mov	r2, r6
   19bfc:	2105      	movs	r1, #5
   19bfe:	4638      	mov	r0, r7
   19c00:	f00d fd92 	bl	27728 <atomic_set_bit_to>
			  (param->timeout > 0 || param->num_events > 0));

	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   19c04:	2109      	movs	r1, #9
   19c06:	4638      	mov	r0, r7
   19c08:	f00d fd73 	bl	276f2 <atomic_test_bit>
   19c0c:	b938      	cbnz	r0, 19c1e <bt_le_ext_adv_start+0x4e>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
			bt_id_set_adv_private_addr(adv);
		}
	} else {
		if (!atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   19c0e:	210c      	movs	r1, #12
   19c10:	4638      	mov	r0, r7
   19c12:	f00d fd6e 	bl	276f2 <atomic_test_bit>
   19c16:	b910      	cbnz	r0, 19c1e <bt_le_ext_adv_start+0x4e>
			bt_id_set_adv_private_addr(adv);
   19c18:	4628      	mov	r0, r5
   19c1a:	f00d fd48 	bl	276ae <bt_id_set_adv_private_addr>
		}
	}

	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
   19c1e:	4628      	mov	r0, r5
   19c20:	f00d fe1a 	bl	27858 <get_adv_name_type>
   19c24:	b158      	cbz	r0, 19c3e <bt_le_ext_adv_start+0x6e>
	    !atomic_test_bit(adv->flags, BT_ADV_DATA_SET)) {
   19c26:	2102      	movs	r1, #2
   19c28:	4638      	mov	r0, r7
   19c2a:	f00d fd62 	bl	276f2 <atomic_test_bit>
	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
   19c2e:	4603      	mov	r3, r0
   19c30:	b928      	cbnz	r0, 19c3e <bt_le_ext_adv_start+0x6e>
		/* Set the advertiser name */
		bt_le_ext_adv_set_data(adv, NULL, 0, NULL, 0);
   19c32:	9000      	str	r0, [sp, #0]
   19c34:	4602      	mov	r2, r0
   19c36:	4601      	mov	r1, r0
   19c38:	4628      	mov	r0, r5
   19c3a:	f00d ff6f 	bl	27b1c <bt_le_ext_adv_set_data>
	}

	err = bt_le_adv_set_enable_ext(adv, true, param);
   19c3e:	4632      	mov	r2, r6
   19c40:	2101      	movs	r1, #1
   19c42:	4628      	mov	r0, r5
   19c44:	f00d ff23 	bl	27a8e <bt_le_adv_set_enable_ext>
	if (err) {
   19c48:	4604      	mov	r4, r0
   19c4a:	b1f8      	cbz	r0, 19c8c <bt_le_ext_adv_start+0xbc>
		BT_ERR("Failed to start advertiser");
   19c4c:	4813      	ldr	r0, [pc, #76]	; (19c9c <bt_le_ext_adv_start+0xcc>)
   19c4e:	2145      	movs	r1, #69	; 0x45
   19c50:	f00d f8b8 	bl	26dc4 <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   19c54:	9803      	ldr	r0, [sp, #12]
   19c56:	b168      	cbz	r0, 19c74 <bt_le_ext_adv_start+0xa4>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19c58:	2100      	movs	r1, #0
   19c5a:	f000 fbcd 	bl	1a3f8 <bt_conn_set_state>
			bt_conn_unref(conn);
   19c5e:	9803      	ldr	r0, [sp, #12]
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   19c60:	f000 fb92 	bl	1a388 <bt_conn_unref>
   19c64:	e006      	b.n	19c74 <bt_le_ext_adv_start+0xa4>
		err = le_adv_start_add_conn(adv, &conn);
   19c66:	a903      	add	r1, sp, #12
   19c68:	4628      	mov	r0, r5
   19c6a:	f7ff fed7 	bl	19a1c <le_adv_start_add_conn>
		if (err) {
   19c6e:	4604      	mov	r4, r0
   19c70:	2800      	cmp	r0, #0
   19c72:	d0c0      	beq.n	19bf6 <bt_le_ext_adv_start+0x26>
	}

	return 0;
}
   19c74:	4620      	mov	r0, r4
   19c76:	b005      	add	sp, #20
   19c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   19c7a:	8833      	ldrh	r3, [r6, #0]
   19c7c:	b923      	cbnz	r3, 19c88 <bt_le_ext_adv_start+0xb8>
			  (param->timeout > 0 || param->num_events > 0));
   19c7e:	78b2      	ldrb	r2, [r6, #2]
   19c80:	3a00      	subs	r2, #0
   19c82:	bf18      	it	ne
   19c84:	2201      	movne	r2, #1
   19c86:	e7b9      	b.n	19bfc <bt_le_ext_adv_start+0x2c>
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   19c88:	2201      	movs	r2, #1
   19c8a:	e7b7      	b.n	19bfc <bt_le_ext_adv_start+0x2c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   19c8c:	9803      	ldr	r0, [sp, #12]
   19c8e:	2800      	cmp	r0, #0
   19c90:	d1e6      	bne.n	19c60 <bt_le_ext_adv_start+0x90>
   19c92:	e7ef      	b.n	19c74 <bt_le_ext_adv_start+0xa4>
		return -EALREADY;
   19c94:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19c98:	e7ec      	b.n	19c74 <bt_le_ext_adv_start+0xa4>
   19c9a:	bf00      	nop
   19c9c:	0002b5fc 	.word	0x0002b5fc

00019ca0 <bt_hci_le_adv_set_terminated>:
#endif /* CONFIG_BT_PER_ADV */

#if defined(CONFIG_BT_EXT_ADV)
#if defined(CONFIG_BT_BROADCASTER)
void bt_hci_le_adv_set_terminated(struct net_buf *buf)
{
   19ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint16_t conn_handle;
#if (CONFIG_BT_ID_MAX > 1) && (CONFIG_BT_EXT_ADV_MAX_ADV_SET > 1)
	bool was_adv_enabled;
#endif

	evt = (void *)buf->data;
   19ca4:	6887      	ldr	r7, [r0, #8]
	adv = bt_adv_lookup_handle(evt->adv_handle);
   19ca6:	f897 9001 	ldrb.w	r9, [r7, #1]
	if (handle < ARRAY_SIZE(adv_pool) &&
   19caa:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
   19cae:	d849      	bhi.n	19d44 <bt_hci_le_adv_set_terminated+0xa4>
static struct bt_le_ext_adv *bt_adv_lookup_handle(uint8_t handle)
   19cb0:	eb09 0489 	add.w	r4, r9, r9, lsl #2
	    atomic_test_bit(adv_pool[handle].flags, BT_ADV_CREATED)) {
   19cb4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 19dac <bt_hci_le_adv_set_terminated+0x10c>
   19cb8:	0124      	lsls	r4, r4, #4
   19cba:	f104 0510 	add.w	r5, r4, #16
   19cbe:	4445      	add	r5, r8
   19cc0:	2100      	movs	r1, #0
   19cc2:	4628      	mov	r0, r5
   19cc4:	f00d fd15 	bl	276f2 <atomic_test_bit>
	if (handle < ARRAY_SIZE(adv_pool) &&
   19cc8:	2800      	cmp	r0, #0
   19cca:	d03b      	beq.n	19d44 <bt_hci_le_adv_set_terminated+0xa4>
		return &adv_pool[handle];
   19ccc:	4444      	add	r4, r8
	if (!adv) {
		BT_ERR("No valid adv");
		return;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   19cce:	4620      	mov	r0, r4
	conn_handle = sys_le16_to_cpu(evt->conn_handle);
   19cd0:	887e      	ldrh	r6, [r7, #2]
	(void)bt_le_lim_adv_cancel_timeout(adv);
   19cd2:	f00d ff20 	bl	27b16 <bt_le_lim_adv_cancel_timeout>
   19cd6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   19cda:	4628      	mov	r0, r5
   19cdc:	f00d fd12 	bl	27704 <atomic_and>
			bt_dev.cached_conn_complete[i].valid = false;
		}
	}
#endif

	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19ce0:	783b      	ldrb	r3, [r7, #0]
   19ce2:	2b00      	cmp	r3, #0
   19ce4:	d135      	bne.n	19d52 <bt_hci_le_adv_set_terminated+0xb2>
		 */
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
	}

	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
		struct bt_conn *conn = bt_conn_lookup_handle(conn_handle);
   19ce6:	4630      	mov	r0, r6
   19ce8:	f000 fb7e 	bl	1a3e8 <bt_conn_lookup_handle>

		if (conn) {
   19cec:	4606      	mov	r6, r0
   19cee:	2800      	cmp	r0, #0
   19cf0:	d141      	bne.n	19d76 <bt_hci_le_adv_set_terminated+0xd6>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19cf2:	f06f 0120 	mvn.w	r1, #32
   19cf6:	4628      	mov	r0, r5
   19cf8:	f00d fd04 	bl	27704 <atomic_and>

			bt_conn_unref(conn);
		}
	}

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_LIMITED)) {
   19cfc:	0683      	lsls	r3, r0, #26
   19cfe:	d512      	bpl.n	19d26 <bt_hci_le_adv_set_terminated+0x86>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19d00:	f06f 0110 	mvn.w	r1, #16
   19d04:	4628      	mov	r0, r5
   19d06:	f00d fcfd 	bl	27704 <atomic_and>

#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif

		if (adv->cb && adv->cb->sent) {
   19d0a:	2350      	movs	r3, #80	; 0x50
   19d0c:	fb03 8809 	mla	r8, r3, r9, r8
   19d10:	f8d8 3014 	ldr.w	r3, [r8, #20]
   19d14:	b13b      	cbz	r3, 19d26 <bt_hci_le_adv_set_terminated+0x86>
   19d16:	681b      	ldr	r3, [r3, #0]
   19d18:	b12b      	cbz	r3, 19d26 <bt_hci_le_adv_set_terminated+0x86>
			struct bt_le_ext_adv_sent_info info = {
   19d1a:	793a      	ldrb	r2, [r7, #4]
   19d1c:	f88d 2004 	strb.w	r2, [sp, #4]
				.num_sent = evt->num_completed_ext_adv_evts,
			};

			adv->cb->sent(adv, &info);
   19d20:	a901      	add	r1, sp, #4
   19d22:	4620      	mov	r0, r4
   19d24:	4798      	blx	r3
		}
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST) && adv == bt_dev.adv) {
   19d26:	210d      	movs	r1, #13
   19d28:	4628      	mov	r0, r5
   19d2a:	f00d fce2 	bl	276f2 <atomic_test_bit>
   19d2e:	2800      	cmp	r0, #0
   19d30:	d138      	bne.n	19da4 <bt_hci_le_adv_set_terminated+0x104>
   19d32:	4b1f      	ldr	r3, [pc, #124]	; (19db0 <bt_hci_le_adv_set_terminated+0x110>)
   19d34:	699b      	ldr	r3, [r3, #24]
   19d36:	42a3      	cmp	r3, r4
   19d38:	d134      	bne.n	19da4 <bt_hci_le_adv_set_terminated+0x104>
		bt_le_adv_delete_legacy();
	}
}
   19d3a:	b003      	add	sp, #12
   19d3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_le_adv_delete_legacy();
   19d40:	f7ff bece 	b.w	19ae0 <bt_le_adv_delete_legacy>
		BT_ERR("No valid adv");
   19d44:	481b      	ldr	r0, [pc, #108]	; (19db4 <bt_hci_le_adv_set_terminated+0x114>)
   19d46:	2145      	movs	r1, #69	; 0x45
}
   19d48:	b003      	add	sp, #12
   19d4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_ERR("No valid adv");
   19d4e:	f00d b839 	b.w	26dc4 <z_log_minimal_printk>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   19d52:	2109      	movs	r1, #9
   19d54:	4628      	mov	r0, r5
   19d56:	f00d fccc 	bl	276f2 <atomic_test_bit>
	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19d5a:	b140      	cbz	r0, 19d6e <bt_hci_le_adv_set_terminated+0xce>
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
   19d5c:	4b14      	ldr	r3, [pc, #80]	; (19db0 <bt_hci_le_adv_set_terminated+0x110>)
   19d5e:	699b      	ldr	r3, [r3, #24]
   19d60:	42a3      	cmp	r3, r4
   19d62:	bf0c      	ite	eq
   19d64:	7839      	ldrbeq	r1, [r7, #0]
   19d66:	2100      	movne	r1, #0
   19d68:	4620      	mov	r0, r4
   19d6a:	f7ff fe25 	bl	199b8 <le_adv_stop_free_conn>
	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
   19d6e:	783b      	ldrb	r3, [r7, #0]
   19d70:	2b00      	cmp	r3, #0
   19d72:	d1be      	bne.n	19cf2 <bt_hci_le_adv_set_terminated+0x52>
   19d74:	e7b7      	b.n	19ce6 <bt_hci_le_adv_set_terminated+0x46>
					&bt_dev.id_addr[conn->id]);
   19d76:	7a01      	ldrb	r1, [r0, #8]
				bt_addr_le_copy(&conn->le.resp_addr,
   19d78:	4b0d      	ldr	r3, [pc, #52]	; (19db0 <bt_hci_le_adv_set_terminated+0x110>)
					&bt_dev.id_addr[conn->id]);
   19d7a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   19d7e:	4419      	add	r1, r3
   19d80:	309e      	adds	r0, #158	; 0x9e
   19d82:	f00d fcce 	bl	27722 <bt_addr_le_copy>
			if (adv->cb && adv->cb->connected) {
   19d86:	2350      	movs	r3, #80	; 0x50
   19d88:	fb03 8309 	mla	r3, r3, r9, r8
   19d8c:	695b      	ldr	r3, [r3, #20]
   19d8e:	b12b      	cbz	r3, 19d9c <bt_hci_le_adv_set_terminated+0xfc>
   19d90:	685b      	ldr	r3, [r3, #4]
   19d92:	b11b      	cbz	r3, 19d9c <bt_hci_le_adv_set_terminated+0xfc>
				struct bt_le_ext_adv_connected_info info = {
   19d94:	9601      	str	r6, [sp, #4]
				adv->cb->connected(adv, &info);
   19d96:	a901      	add	r1, sp, #4
   19d98:	4620      	mov	r0, r4
   19d9a:	4798      	blx	r3
			bt_conn_unref(conn);
   19d9c:	4630      	mov	r0, r6
   19d9e:	f000 faf3 	bl	1a388 <bt_conn_unref>
   19da2:	e7a6      	b.n	19cf2 <bt_hci_le_adv_set_terminated+0x52>
}
   19da4:	b003      	add	sp, #12
   19da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19daa:	bf00      	nop
   19dac:	20001c78 	.word	0x20001c78
   19db0:	200004f8 	.word	0x200004f8
   19db4:	0002b61c 	.word	0x0002b61c

00019db8 <bt_hci_le_scan_req_received>:

void bt_hci_le_scan_req_received(struct net_buf *buf)
{
   19db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_scan_req_received *evt;
	struct bt_le_ext_adv *adv;

	evt = (void *)buf->data;
   19dba:	6882      	ldr	r2, [r0, #8]
	adv = bt_adv_lookup_handle(evt->handle);
   19dbc:	7814      	ldrb	r4, [r2, #0]
	if (handle < ARRAY_SIZE(adv_pool) &&
   19dbe:	2c3f      	cmp	r4, #63	; 0x3f
{
   19dc0:	b085      	sub	sp, #20
	if (handle < ARRAY_SIZE(adv_pool) &&
   19dc2:	d811      	bhi.n	19de8 <bt_hci_le_scan_req_received+0x30>
static struct bt_le_ext_adv *bt_adv_lookup_handle(uint8_t handle)
   19dc4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
	    atomic_test_bit(adv_pool[handle].flags, BT_ADV_CREATED)) {
   19dc8:	4d1c      	ldr	r5, [pc, #112]	; (19e3c <bt_hci_le_scan_req_received+0x84>)
   19dca:	0136      	lsls	r6, r6, #4
   19dcc:	f106 0010 	add.w	r0, r6, #16
   19dd0:	2100      	movs	r1, #0
   19dd2:	4428      	add	r0, r5
   19dd4:	f00d fc8d 	bl	276f2 <atomic_test_bit>
	if (handle < ARRAY_SIZE(adv_pool) &&
   19dd8:	b130      	cbz	r0, 19de8 <bt_hci_le_scan_req_received+0x30>
	if (!adv) {
		BT_ERR("No valid adv");
		return;
	}

	if (adv->cb && adv->cb->scanned) {
   19dda:	2350      	movs	r3, #80	; 0x50
   19ddc:	4363      	muls	r3, r4
   19dde:	18e9      	adds	r1, r5, r3
   19de0:	6949      	ldr	r1, [r1, #20]
   19de2:	b941      	cbnz	r1, 19df6 <bt_hci_le_scan_req_received+0x3e>
		}

		info.addr = &id_addr;
		adv->cb->scanned(adv, &info);
	}
}
   19de4:	b005      	add	sp, #20
   19de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No valid adv");
   19de8:	4815      	ldr	r0, [pc, #84]	; (19e40 <bt_hci_le_scan_req_received+0x88>)
   19dea:	2145      	movs	r1, #69	; 0x45
}
   19dec:	b005      	add	sp, #20
   19dee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("No valid adv");
   19df2:	f00c bfe7 	b.w	26dc4 <z_log_minimal_printk>
	if (adv->cb && adv->cb->scanned) {
   19df6:	6889      	ldr	r1, [r1, #8]
   19df8:	2900      	cmp	r1, #0
   19dfa:	d0f3      	beq.n	19de4 <bt_hci_le_scan_req_received+0x2c>
			bt_addr_le_copy(&id_addr, &evt->addr);
   19dfc:	1c51      	adds	r1, r2, #1
		if (evt->addr.type == BT_ADDR_LE_PUBLIC_ID ||
   19dfe:	7852      	ldrb	r2, [r2, #1]
   19e00:	3a02      	subs	r2, #2
   19e02:	2a01      	cmp	r2, #1
   19e04:	af02      	add	r7, sp, #8
   19e06:	d811      	bhi.n	19e2c <bt_hci_le_scan_req_received+0x74>
			bt_addr_le_copy(&id_addr, &evt->addr);
   19e08:	4638      	mov	r0, r7
   19e0a:	f00d fc8a 	bl	27722 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19e0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   19e12:	3b02      	subs	r3, #2
   19e14:	f88d 3008 	strb.w	r3, [sp, #8]
		adv->cb->scanned(adv, &info);
   19e18:	2350      	movs	r3, #80	; 0x50
   19e1a:	fb03 5404 	mla	r4, r3, r4, r5
		info.addr = &id_addr;
   19e1e:	9701      	str	r7, [sp, #4]
		adv->cb->scanned(adv, &info);
   19e20:	6963      	ldr	r3, [r4, #20]
   19e22:	a901      	add	r1, sp, #4
   19e24:	689b      	ldr	r3, [r3, #8]
   19e26:	19a8      	adds	r0, r5, r6
   19e28:	4798      	blx	r3
   19e2a:	e7db      	b.n	19de4 <bt_hci_le_scan_req_received+0x2c>
			bt_addr_le_copy(&id_addr,
   19e2c:	5ce8      	ldrb	r0, [r5, r3]
   19e2e:	f00d fbf2 	bl	27616 <bt_lookup_id_addr>
   19e32:	4601      	mov	r1, r0
   19e34:	4638      	mov	r0, r7
   19e36:	f00d fc74 	bl	27722 <bt_addr_le_copy>
   19e3a:	e7ed      	b.n	19e18 <bt_hci_le_scan_req_received+0x60>
   19e3c:	20001c78 	.word	0x20001c78
   19e40:	0002b61c 	.word	0x0002b61c

00019e44 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   19e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   19e46:	4b12      	ldr	r3, [pc, #72]	; (19e90 <notify_connected+0x4c>)
   19e48:	681d      	ldr	r5, [r3, #0]
{
   19e4a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   19e4c:	b995      	cbnz	r5, 19e74 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19e4e:	4d11      	ldr	r5, [pc, #68]	; (19e94 <notify_connected+0x50>)
   19e50:	4e11      	ldr	r6, [pc, #68]	; (19e98 <notify_connected+0x54>)
   19e52:	4f12      	ldr	r7, [pc, #72]	; (19e9c <notify_connected+0x58>)
   19e54:	42b5      	cmp	r5, r6
   19e56:	d90a      	bls.n	19e6e <notify_connected+0x2a>
   19e58:	4811      	ldr	r0, [pc, #68]	; (19ea0 <notify_connected+0x5c>)
   19e5a:	4639      	mov	r1, r7
   19e5c:	f240 5241 	movw	r2, #1345	; 0x541
   19e60:	f00c ffa2 	bl	26da8 <assert_print>
   19e64:	f240 5141 	movw	r1, #1345	; 0x541
   19e68:	4638      	mov	r0, r7
   19e6a:	f00c ff96 	bl	26d9a <assert_post_action>
   19e6e:	42b5      	cmp	r5, r6
   19e70:	d307      	bcc.n	19e82 <notify_connected+0x3e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   19e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->connected) {
   19e74:	682b      	ldr	r3, [r5, #0]
   19e76:	b113      	cbz	r3, 19e7e <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   19e78:	7a61      	ldrb	r1, [r4, #9]
   19e7a:	4620      	mov	r0, r4
   19e7c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19e7e:	692d      	ldr	r5, [r5, #16]
   19e80:	e7e4      	b.n	19e4c <notify_connected+0x8>
		if (cb->connected) {
   19e82:	682b      	ldr	r3, [r5, #0]
   19e84:	b113      	cbz	r3, 19e8c <notify_connected+0x48>
			cb->connected(conn, conn->err);
   19e86:	7a61      	ldrb	r1, [r4, #9]
   19e88:	4620      	mov	r0, r4
   19e8a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19e8c:	3514      	adds	r5, #20
   19e8e:	e7e1      	b.n	19e54 <notify_connected+0x10>
   19e90:	20003b94 	.word	0x20003b94
   19e94:	00029a50 	.word	0x00029a50
   19e98:	00029a64 	.word	0x00029a64
   19e9c:	0002b635 	.word	0x0002b635
   19ea0:	0002a576 	.word	0x0002a576

00019ea4 <tx_notify>:
{
   19ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   19ea8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 19ef8 <tx_notify+0x54>
{
   19eac:	4604      	mov	r4, r0
	tx->cb = NULL;
   19eae:	2700      	movs	r7, #0
	__asm__ volatile(
   19eb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   19eb4:	f3ef 8211 	mrs	r2, BASEPRI
   19eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   19ebc:	f3bf 8f6f 	isb	sy
	return list->head;
   19ec0:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   19ec2:	b129      	cbz	r1, 19ed0 <tx_notify+0x2c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ec4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   19ec6:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   19ec8:	6223      	str	r3, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19eca:	4281      	cmp	r1, r0
	list->tail = node;
   19ecc:	bf08      	it	eq
   19ece:	6263      	streq	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   19ed0:	f382 8811 	msr	BASEPRI, r2
   19ed4:	f3bf 8f6f 	isb	sy
		if (!tx) {
   19ed8:	b161      	cbz	r1, 19ef4 <tx_notify+0x50>
		user_data = tx->user_data;
   19eda:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   19ede:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
   19ee0:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
   19ee4:	4640      	mov	r0, r8
   19ee6:	f00f fa74 	bl	293d2 <k_queue_append>
		cb(conn, user_data, 0);
   19eea:	2200      	movs	r2, #0
   19eec:	4631      	mov	r1, r6
   19eee:	4620      	mov	r0, r4
   19ef0:	47a8      	blx	r5
	while (1) {
   19ef2:	e7dd      	b.n	19eb0 <tx_notify+0xc>
}
   19ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ef8:	20000aac 	.word	0x20000aac

00019efc <conn_tx_destroy>:
{
   19efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f00:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(tx);
   19f02:	460c      	mov	r4, r1
   19f04:	b941      	cbnz	r1, 19f18 <conn_tx_destroy+0x1c>
   19f06:	490d      	ldr	r1, [pc, #52]	; (19f3c <conn_tx_destroy+0x40>)
   19f08:	480d      	ldr	r0, [pc, #52]	; (19f40 <conn_tx_destroy+0x44>)
   19f0a:	2237      	movs	r2, #55	; 0x37
   19f0c:	f00c ff4c 	bl	26da8 <assert_print>
   19f10:	480a      	ldr	r0, [pc, #40]	; (19f3c <conn_tx_destroy+0x40>)
   19f12:	2137      	movs	r1, #55	; 0x37
   19f14:	f00c ff41 	bl	26d9a <assert_post_action>
	void *user_data = tx->user_data;
   19f18:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
	tx->cb = NULL;
   19f1c:	2300      	movs	r3, #0
	tx->user_data = NULL;
   19f1e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	tx->pending_no_cb = 0U;
   19f22:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   19f24:	4621      	mov	r1, r4
   19f26:	4807      	ldr	r0, [pc, #28]	; (19f44 <conn_tx_destroy+0x48>)
   19f28:	f00f fa53 	bl	293d2 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   19f2c:	4639      	mov	r1, r7
   19f2e:	4628      	mov	r0, r5
   19f30:	4633      	mov	r3, r6
   19f32:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   19f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cb(conn, user_data, -ESHUTDOWN);
   19f3a:	4718      	bx	r3
   19f3c:	0002b635 	.word	0x0002b635
   19f40:	0002a576 	.word	0x0002a576
   19f44:	20000aac 	.word	0x20000aac

00019f48 <send_frag>:
{
   19f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   19f4c:	694d      	ldr	r5, [r1, #20]
{
   19f4e:	4604      	mov	r4, r0
   19f50:	460e      	mov	r6, r1
   19f52:	4691      	mov	r9, r2
   19f54:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   19f56:	f04f 33ff 	mov.w	r3, #4294967295
   19f5a:	4849      	ldr	r0, [pc, #292]	; (1a080 <send_frag+0x138>)
   19f5c:	f04f 32ff 	mov.w	r2, #4294967295
   19f60:	f007 fa1e 	bl	213a0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   19f64:	7aa3      	ldrb	r3, [r4, #10]
   19f66:	2b07      	cmp	r3, #7
   19f68:	d14b      	bne.n	1a002 <send_frag+0xba>
	__asm__ volatile(
   19f6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   19f6e:	f3ef 8211 	mrs	r2, BASEPRI
   19f72:	f383 8812 	msr	BASEPRI_MAX, r3
   19f76:	f3bf 8f6f 	isb	sy
	if (tx) {
   19f7a:	69a3      	ldr	r3, [r4, #24]
   19f7c:	2d00      	cmp	r5, #0
   19f7e:	d055      	beq.n	1a02c <send_frag+0xe4>
	parent->next = child;
   19f80:	2100      	movs	r1, #0
   19f82:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   19f84:	2b00      	cmp	r3, #0
   19f86:	d14e      	bne.n	1a026 <send_frag+0xde>
	list->head = node;
   19f88:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   19f8c:	f382 8811 	msr	BASEPRI, r2
   19f90:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   19f94:	2104      	movs	r1, #4
   19f96:	f106 0008 	add.w	r0, r6, #8
   19f9a:	f003 f9cb 	bl	1d334 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   19f9e:	8823      	ldrh	r3, [r4, #0]
   19fa0:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   19fa4:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19fa8:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   19faa:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19fae:	3b04      	subs	r3, #4
   19fb0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19fb2:	2302      	movs	r3, #2
   19fb4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   19fb6:	4630      	mov	r0, r6
   19fb8:	f7fe fc60 	bl	1887c <bt_send>
	if (err) {
   19fbc:	4602      	mov	r2, r0
   19fbe:	2800      	cmp	r0, #0
   19fc0:	d05c      	beq.n	1a07c <send_frag+0x134>
		BT_ERR("Unable to send to driver (err %d)", err);
   19fc2:	4830      	ldr	r0, [pc, #192]	; (1a084 <send_frag+0x13c>)
   19fc4:	2145      	movs	r1, #69	; 0x45
   19fc6:	f00c fefd 	bl	26dc4 <z_log_minimal_printk>
	__asm__ volatile(
   19fca:	f04f 0340 	mov.w	r3, #64	; 0x40
   19fce:	f3ef 8911 	mrs	r9, BASEPRI
   19fd2:	f383 8812 	msr	BASEPRI_MAX, r3
   19fd6:	f3bf 8f6f 	isb	sy
		if (tx) {
   19fda:	2d00      	cmp	r5, #0
   19fdc:	d03a      	beq.n	1a054 <send_frag+0x10c>
	return list->head;
   19fde:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19fe0:	2200      	movs	r2, #0
   19fe2:	b153      	cbz	r3, 19ffa <send_frag+0xb2>
   19fe4:	429d      	cmp	r5, r3
   19fe6:	d132      	bne.n	1a04e <send_frag+0x106>
	return node->next;
   19fe8:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   19fea:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   19fec:	bb52      	cbnz	r2, 1a044 <send_frag+0xfc>
   19fee:	42a9      	cmp	r1, r5
	list->head = node;
   19ff0:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   19ff2:	d100      	bne.n	19ff6 <send_frag+0xae>
	list->tail = node;
   19ff4:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   19ff6:	2300      	movs	r3, #0
   19ff8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   19ffa:	f389 8811 	msr	BASEPRI, r9
   19ffe:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1a002:	481f      	ldr	r0, [pc, #124]	; (1a080 <send_frag+0x138>)
   1a004:	f007 f992 	bl	2132c <z_impl_k_sem_give>
	if (tx) {
   1a008:	b12d      	cbz	r5, 1a016 <send_frag+0xce>
		tx_data(buf)->tx = NULL;
   1a00a:	2300      	movs	r3, #0
   1a00c:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   1a00e:	4629      	mov	r1, r5
   1a010:	4620      	mov	r0, r4
   1a012:	f7ff ff73 	bl	19efc <conn_tx_destroy>
	if (always_consume) {
   1a016:	b11f      	cbz	r7, 1a020 <send_frag+0xd8>
		net_buf_unref(buf);
   1a018:	4630      	mov	r0, r6
   1a01a:	f003 f8cd 	bl	1d1b8 <net_buf_unref>
	return false;
   1a01e:	2700      	movs	r7, #0
}
   1a020:	4638      	mov	r0, r7
   1a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a026:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1a028:	61a5      	str	r5, [r4, #24]
}
   1a02a:	e7af      	b.n	19f8c <send_frag+0x44>
		if (tail_tx) {
   1a02c:	b133      	cbz	r3, 1a03c <send_frag+0xf4>
			pending_no_cb = &tail_tx->pending_no_cb;
   1a02e:	f103 080c 	add.w	r8, r3, #12
   1a032:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1a034:	3301      	adds	r3, #1
   1a036:	f8c8 3000 	str.w	r3, [r8]
   1a03a:	e7a7      	b.n	19f8c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1a03c:	69e3      	ldr	r3, [r4, #28]
   1a03e:	f104 081c 	add.w	r8, r4, #28
   1a042:	e7f7      	b.n	1a034 <send_frag+0xec>
Z_GENLIST_REMOVE(slist, snode)
   1a044:	42a9      	cmp	r1, r5
	parent->next = child;
   1a046:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a048:	bf08      	it	eq
   1a04a:	61a2      	streq	r2, [r4, #24]
}
   1a04c:	e7d3      	b.n	19ff6 <send_frag+0xae>
	return node->next;
   1a04e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a050:	681b      	ldr	r3, [r3, #0]
   1a052:	e7c6      	b.n	19fe2 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1a054:	f8d8 3000 	ldr.w	r3, [r8]
   1a058:	b953      	cbnz	r3, 1a070 <send_frag+0x128>
   1a05a:	490b      	ldr	r1, [pc, #44]	; (1a088 <send_frag+0x140>)
   1a05c:	480b      	ldr	r0, [pc, #44]	; (1a08c <send_frag+0x144>)
   1a05e:	f44f 720a 	mov.w	r2, #552	; 0x228
   1a062:	f00c fea1 	bl	26da8 <assert_print>
   1a066:	4808      	ldr	r0, [pc, #32]	; (1a088 <send_frag+0x140>)
   1a068:	f44f 710a 	mov.w	r1, #552	; 0x228
   1a06c:	f00c fe95 	bl	26d9a <assert_post_action>
			(*pending_no_cb)--;
   1a070:	f8d8 3000 	ldr.w	r3, [r8]
   1a074:	3b01      	subs	r3, #1
   1a076:	f8c8 3000 	str.w	r3, [r8]
   1a07a:	e7be      	b.n	19ffa <send_frag+0xb2>
	return true;
   1a07c:	2701      	movs	r7, #1
   1a07e:	e7cf      	b.n	1a020 <send_frag+0xd8>
   1a080:	200005b8 	.word	0x200005b8
   1a084:	0002b25b 	.word	0x0002b25b
   1a088:	0002b635 	.word	0x0002b635
   1a08c:	0002a576 	.word	0x0002a576

0001a090 <bt_conn_get_pkts>:
}
   1a090:	4800      	ldr	r0, [pc, #0]	; (1a094 <bt_conn_get_pkts+0x4>)
   1a092:	4770      	bx	lr
   1a094:	200005b8 	.word	0x200005b8

0001a098 <bt_conn_new>:
{
   1a098:	b538      	push	{r3, r4, r5, lr}
   1a09a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1a09c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a09e:	2501      	movs	r5, #1
   1a0a0:	428b      	cmp	r3, r1
   1a0a2:	d102      	bne.n	1a0aa <bt_conn_new+0x12>
		return NULL;
   1a0a4:	2400      	movs	r4, #0
}
   1a0a6:	4620      	mov	r0, r4
   1a0a8:	bd38      	pop	{r3, r4, r5, pc}
   1a0aa:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   1a0ae:	f3bf 8f5b 	dmb	ish
   1a0b2:	e852 0f00 	ldrex	r0, [r2]
   1a0b6:	2800      	cmp	r0, #0
   1a0b8:	d104      	bne.n	1a0c4 <bt_conn_new+0x2c>
   1a0ba:	e842 5c00 	strex	ip, r5, [r2]
   1a0be:	f1bc 0f00 	cmp.w	ip, #0
   1a0c2:	d1f6      	bne.n	1a0b2 <bt_conn_new+0x1a>
   1a0c4:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1a0c8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   1a0cc:	d002      	beq.n	1a0d4 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1a0ce:	3301      	adds	r3, #1
   1a0d0:	4604      	mov	r4, r0
   1a0d2:	e7e5      	b.n	1a0a0 <bt_conn_new+0x8>
	if (!conn) {
   1a0d4:	2c00      	cmp	r4, #0
   1a0d6:	d0e6      	beq.n	1a0a6 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1a0d8:	22c0      	movs	r2, #192	; 0xc0
   1a0da:	2100      	movs	r1, #0
   1a0dc:	4620      	mov	r0, r4
   1a0de:	f00d f941 	bl	27364 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1a0e2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1a0e6:	4904      	ldr	r1, [pc, #16]	; (1a0f8 <bt_conn_new+0x60>)
   1a0e8:	f007 fcb4 	bl	21a54 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1a0ec:	4903      	ldr	r1, [pc, #12]	; (1a0fc <bt_conn_new+0x64>)
   1a0ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a0f2:	f007 fb87 	bl	21804 <k_work_init>
	return conn;
   1a0f6:	e7d6      	b.n	1a0a6 <bt_conn_new+0xe>
   1a0f8:	0001a8f9 	.word	0x0001a8f9
   1a0fc:	00027b75 	.word	0x00027b75

0001a100 <conn_cleanup>:
{
   1a100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a104:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1a106:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1a108:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1a10c:	2300      	movs	r3, #0
   1a10e:	2200      	movs	r2, #0
   1a110:	4630      	mov	r0, r6
   1a112:	f002 ff01 	bl	1cf18 <net_buf_get>
   1a116:	4603      	mov	r3, r0
   1a118:	bb20      	cbnz	r0, 1a164 <conn_cleanup+0x64>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1a11a:	6963      	ldr	r3, [r4, #20]
   1a11c:	b153      	cbz	r3, 1a134 <conn_cleanup+0x34>
   1a11e:	4917      	ldr	r1, [pc, #92]	; (1a17c <conn_cleanup+0x7c>)
   1a120:	4817      	ldr	r0, [pc, #92]	; (1a180 <conn_cleanup+0x80>)
   1a122:	f240 22b5 	movw	r2, #693	; 0x2b5
   1a126:	f00c fe3f 	bl	26da8 <assert_print>
   1a12a:	4814      	ldr	r0, [pc, #80]	; (1a17c <conn_cleanup+0x7c>)
   1a12c:	f240 21b5 	movw	r1, #693	; 0x2b5
   1a130:	f00c fe33 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1a134:	69e3      	ldr	r3, [r4, #28]
   1a136:	b153      	cbz	r3, 1a14e <conn_cleanup+0x4e>
   1a138:	4910      	ldr	r1, [pc, #64]	; (1a17c <conn_cleanup+0x7c>)
   1a13a:	4811      	ldr	r0, [pc, #68]	; (1a180 <conn_cleanup+0x80>)
   1a13c:	f240 22b6 	movw	r2, #694	; 0x2b6
   1a140:	f00c fe32 	bl	26da8 <assert_print>
   1a144:	480d      	ldr	r0, [pc, #52]	; (1a17c <conn_cleanup+0x7c>)
   1a146:	f240 21b6 	movw	r1, #694	; 0x2b6
   1a14a:	f00c fe26 	bl	26d9a <assert_post_action>
	bt_conn_reset_rx_state(conn);
   1a14e:	4620      	mov	r0, r4
   1a150:	f00d fd13 	bl	27b7a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1a154:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1a158:	2200      	movs	r2, #0
}
   1a15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1a15e:	2300      	movs	r3, #0
   1a160:	f007 bd6e 	b.w	21c40 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a164:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   1a166:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   1a168:	f003 f826 	bl	1d1b8 <net_buf_unref>
		if (tx) {
   1a16c:	2d00      	cmp	r5, #0
   1a16e:	d0cd      	beq.n	1a10c <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1a170:	4629      	mov	r1, r5
   1a172:	4620      	mov	r0, r4
   1a174:	f7ff fec2 	bl	19efc <conn_tx_destroy>
   1a178:	e7c6      	b.n	1a108 <conn_cleanup+0x8>
   1a17a:	bf00      	nop
   1a17c:	0002b635 	.word	0x0002b635
   1a180:	0002a576 	.word	0x0002a576

0001a184 <bt_conn_recv>:
{
   1a184:	b570      	push	{r4, r5, r6, lr}
   1a186:	4616      	mov	r6, r2
   1a188:	4604      	mov	r4, r0
   1a18a:	460d      	mov	r5, r1
	tx_notify(conn);
   1a18c:	f7ff fe8a 	bl	19ea4 <tx_notify>
	switch (flags) {
   1a190:	2e01      	cmp	r6, #1
   1a192:	d01f      	beq.n	1a1d4 <bt_conn_recv+0x50>
   1a194:	2e02      	cmp	r6, #2
   1a196:	d149      	bne.n	1a22c <bt_conn_recv+0xa8>
		if (conn->rx) {
   1a198:	6923      	ldr	r3, [r4, #16]
   1a19a:	b133      	cbz	r3, 1a1aa <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   1a19c:	482b      	ldr	r0, [pc, #172]	; (1a24c <bt_conn_recv+0xc8>)
   1a19e:	2145      	movs	r1, #69	; 0x45
   1a1a0:	f00c fe10 	bl	26dc4 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   1a1a4:	4620      	mov	r0, r4
   1a1a6:	f00d fce8 	bl	27b7a <bt_conn_reset_rx_state>
		conn->rx = buf;
   1a1aa:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1a1ac:	6921      	ldr	r1, [r4, #16]
   1a1ae:	898a      	ldrh	r2, [r1, #12]
   1a1b0:	2a01      	cmp	r2, #1
   1a1b2:	d949      	bls.n	1a248 <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1a1b4:	688b      	ldr	r3, [r1, #8]
   1a1b6:	881b      	ldrh	r3, [r3, #0]
   1a1b8:	3304      	adds	r3, #4
   1a1ba:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1a1bc:	429a      	cmp	r2, r3
   1a1be:	d343      	bcc.n	1a248 <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   1a1c0:	d93a      	bls.n	1a238 <bt_conn_recv+0xb4>
		BT_ERR("ACL len mismatch (%u > %u)",
   1a1c2:	4823      	ldr	r0, [pc, #140]	; (1a250 <bt_conn_recv+0xcc>)
   1a1c4:	2145      	movs	r1, #69	; 0x45
   1a1c6:	f00c fdfd 	bl	26dc4 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   1a1ca:	4620      	mov	r0, r4
}
   1a1cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1a1d0:	f00d bcd3 	b.w	27b7a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1a1d4:	6920      	ldr	r0, [r4, #16]
   1a1d6:	b938      	cbnz	r0, 1a1e8 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   1a1d8:	481e      	ldr	r0, [pc, #120]	; (1a254 <bt_conn_recv+0xd0>)
   1a1da:	2145      	movs	r1, #69	; 0x45
   1a1dc:	f00c fdf2 	bl	26dc4 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   1a1e0:	4620      	mov	r0, r4
   1a1e2:	f00d fcca 	bl	27b7a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1a1e6:	e001      	b.n	1a1ec <bt_conn_recv+0x68>
		if (!buf->len) {
   1a1e8:	89ae      	ldrh	r6, [r5, #12]
   1a1ea:	b926      	cbnz	r6, 1a1f6 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   1a1ec:	4628      	mov	r0, r5
}
   1a1ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1a1f2:	f002 bfe1 	b.w	1d1b8 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1a1f6:	3008      	adds	r0, #8
   1a1f8:	f00e fd17 	bl	28c2a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1a1fc:	4286      	cmp	r6, r0
   1a1fe:	d90b      	bls.n	1a218 <bt_conn_recv+0x94>
			BT_ERR("Not enough buffer space for L2CAP data");
   1a200:	4815      	ldr	r0, [pc, #84]	; (1a258 <bt_conn_recv+0xd4>)
   1a202:	2145      	movs	r1, #69	; 0x45
   1a204:	f00c fdde 	bl	26dc4 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   1a208:	6921      	ldr	r1, [r4, #16]
   1a20a:	2200      	movs	r2, #0
   1a20c:	4620      	mov	r0, r4
   1a20e:	f000 fda5 	bl	1ad5c <bt_l2cap_recv>
			conn->rx = NULL;
   1a212:	2300      	movs	r3, #0
   1a214:	6123      	str	r3, [r4, #16]
   1a216:	e7e9      	b.n	1a1ec <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a218:	6920      	ldr	r0, [r4, #16]
   1a21a:	89aa      	ldrh	r2, [r5, #12]
   1a21c:	68a9      	ldr	r1, [r5, #8]
   1a21e:	3008      	adds	r0, #8
   1a220:	f00e fd0b 	bl	28c3a <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1a224:	4628      	mov	r0, r5
   1a226:	f002 ffc7 	bl	1d1b8 <net_buf_unref>
		break;
   1a22a:	e7bf      	b.n	1a1ac <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1a22c:	480b      	ldr	r0, [pc, #44]	; (1a25c <bt_conn_recv+0xd8>)
   1a22e:	4632      	mov	r2, r6
   1a230:	2145      	movs	r1, #69	; 0x45
   1a232:	f00c fdc7 	bl	26dc4 <z_log_minimal_printk>
   1a236:	e7d3      	b.n	1a1e0 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   1a238:	2300      	movs	r3, #0
   1a23a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1a23c:	4620      	mov	r0, r4
   1a23e:	2201      	movs	r2, #1
}
   1a240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1a244:	f000 bd8a 	b.w	1ad5c <bt_l2cap_recv>
}
   1a248:	bd70      	pop	{r4, r5, r6, pc}
   1a24a:	bf00      	nop
   1a24c:	0002b665 	.word	0x0002b665
   1a250:	0002b6f9 	.word	0x0002b6f9
   1a254:	0002b687 	.word	0x0002b687
   1a258:	0002b6aa 	.word	0x0002b6aa
   1a25c:	0002b6d6 	.word	0x0002b6d6

0001a260 <bt_conn_send_cb>:
{
   1a260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a264:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1a266:	7a83      	ldrb	r3, [r0, #10]
   1a268:	2b07      	cmp	r3, #7
{
   1a26a:	4605      	mov	r5, r0
   1a26c:	460e      	mov	r6, r1
   1a26e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1a270:	d006      	beq.n	1a280 <bt_conn_send_cb+0x20>
		BT_ERR("not connected!");
   1a272:	4820      	ldr	r0, [pc, #128]	; (1a2f4 <bt_conn_send_cb+0x94>)
   1a274:	2145      	movs	r1, #69	; 0x45
   1a276:	f00c fda5 	bl	26dc4 <z_log_minimal_printk>
			return -ENOTCONN;
   1a27a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1a27e:	e017      	b.n	1a2b0 <bt_conn_send_cb+0x50>
	if (cb) {
   1a280:	2a00      	cmp	r2, #0
   1a282:	d035      	beq.n	1a2f0 <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   1a284:	f008 fc84 	bl	22b90 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a288:	4b1b      	ldr	r3, [pc, #108]	; (1a2f8 <bt_conn_send_cb+0x98>)
   1a28a:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1a28c:	481b      	ldr	r0, [pc, #108]	; (1a2fc <bt_conn_send_cb+0x9c>)
   1a28e:	bf07      	ittee	eq
   1a290:	2200      	moveq	r2, #0
   1a292:	2300      	moveq	r3, #0
   1a294:	f04f 32ff 	movne.w	r2, #4294967295
   1a298:	f04f 33ff 	movne.w	r3, #4294967295
   1a29c:	f006 ffec 	bl	21278 <z_impl_k_queue_get>
   1a2a0:	4604      	mov	r4, r0
		if (!tx) {
   1a2a2:	b938      	cbnz	r0, 1a2b4 <bt_conn_send_cb+0x54>
			BT_ERR("Unable to allocate TX context");
   1a2a4:	4816      	ldr	r0, [pc, #88]	; (1a300 <bt_conn_send_cb+0xa0>)
   1a2a6:	2145      	movs	r1, #69	; 0x45
   1a2a8:	f00c fd8c 	bl	26dc4 <z_log_minimal_printk>
			return -ENOBUFS;
   1a2ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1a2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1a2b4:	7aab      	ldrb	r3, [r5, #10]
   1a2b6:	2b07      	cmp	r3, #7
   1a2b8:	f04f 0800 	mov.w	r8, #0
   1a2bc:	d00c      	beq.n	1a2d8 <bt_conn_send_cb+0x78>
			BT_WARN("Disconnected while allocating context");
   1a2be:	4811      	ldr	r0, [pc, #68]	; (1a304 <bt_conn_send_cb+0xa4>)
   1a2c0:	2157      	movs	r1, #87	; 0x57
   1a2c2:	f00c fd7f 	bl	26dc4 <z_log_minimal_printk>
	tx->user_data = NULL;
   1a2c6:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1a2ca:	480c      	ldr	r0, [pc, #48]	; (1a2fc <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   1a2cc:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1a2d0:	4621      	mov	r1, r4
   1a2d2:	f00f f87e 	bl	293d2 <k_queue_append>
   1a2d6:	e7d0      	b.n	1a27a <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   1a2d8:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   1a2dc:	f8c0 800c 	str.w	r8, [r0, #12]
		tx_data(buf)->tx = tx;
   1a2e0:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1a2e2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1a2e6:	4631      	mov	r1, r6
   1a2e8:	f002 ff38 	bl	1d15c <net_buf_put>
	return 0;
   1a2ec:	2000      	movs	r0, #0
   1a2ee:	e7df      	b.n	1a2b0 <bt_conn_send_cb+0x50>
		tx_data(buf)->tx = NULL;
   1a2f0:	614a      	str	r2, [r1, #20]
   1a2f2:	e7f6      	b.n	1a2e2 <bt_conn_send_cb+0x82>
   1a2f4:	0002b719 	.word	0x0002b719
   1a2f8:	20003440 	.word	0x20003440
   1a2fc:	20000aac 	.word	0x20000aac
   1a300:	0002b72d 	.word	0x0002b72d
   1a304:	0002b750 	.word	0x0002b750

0001a308 <bt_conn_prepare_events>:
{
   1a308:	b510      	push	{r4, lr}
   1a30a:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   1a30c:	481b      	ldr	r0, [pc, #108]	; (1a37c <bt_conn_prepare_events+0x74>)
   1a30e:	f00f f9e8 	bl	296e2 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1a312:	4b1a      	ldr	r3, [pc, #104]	; (1a37c <bt_conn_prepare_events+0x74>)
   1a314:	2200      	movs	r2, #0
   1a316:	4620      	mov	r0, r4
   1a318:	2101      	movs	r1, #1
   1a31a:	f009 f97b 	bl	23614 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a31e:	f3bf 8f5b 	dmb	ish
   1a322:	4b17      	ldr	r3, [pc, #92]	; (1a380 <bt_conn_prepare_events+0x78>)
   1a324:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1a328:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1a32c:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   1a330:	b90a      	cbnz	r2, 1a336 <bt_conn_prepare_events+0x2e>
		conn_cleanup(conn);
   1a332:	2001      	movs	r0, #1
}
   1a334:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a336:	7a9a      	ldrb	r2, [r3, #10]
   1a338:	b99a      	cbnz	r2, 1a362 <bt_conn_prepare_events+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a33a:	f3bf 8f5b 	dmb	ish
   1a33e:	1d1a      	adds	r2, r3, #4
   1a340:	e852 1f00 	ldrex	r1, [r2]
   1a344:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
   1a348:	e842 ce00 	strex	lr, ip, [r2]
   1a34c:	f1be 0f00 	cmp.w	lr, #0
   1a350:	d1f6      	bne.n	1a340 <bt_conn_prepare_events+0x38>
   1a352:	f3bf 8f5b 	dmb	ish
   1a356:	064a      	lsls	r2, r1, #25
   1a358:	d503      	bpl.n	1a362 <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   1a35a:	4618      	mov	r0, r3
   1a35c:	f7ff fed0 	bl	1a100 <conn_cleanup>
   1a360:	e7e7      	b.n	1a332 <bt_conn_prepare_events+0x2a>
	if (conn->state != BT_CONN_CONNECTED) {
   1a362:	7a9b      	ldrb	r3, [r3, #10]
   1a364:	2b07      	cmp	r3, #7
   1a366:	d1e4      	bne.n	1a332 <bt_conn_prepare_events+0x2a>
	k_poll_event_init(&events[0],
   1a368:	4b06      	ldr	r3, [pc, #24]	; (1a384 <bt_conn_prepare_events+0x7c>)
   1a36a:	2200      	movs	r2, #0
   1a36c:	2104      	movs	r1, #4
   1a36e:	f009 f951 	bl	23614 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1a372:	2301      	movs	r3, #1
   1a374:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1a378:	2002      	movs	r0, #2
	return ev_count;
   1a37a:	e7db      	b.n	1a334 <bt_conn_prepare_events+0x2c>
   1a37c:	2000072c 	.word	0x2000072c
   1a380:	20003078 	.word	0x20003078
   1a384:	200030b0 	.word	0x200030b0

0001a388 <bt_conn_unref>:
{
   1a388:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   1a38a:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
{
   1a38e:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a390:	f3bf 8f5b 	dmb	ish
   1a394:	e853 2f00 	ldrex	r2, [r3]
   1a398:	1e51      	subs	r1, r2, #1
   1a39a:	e843 1000 	strex	r0, r1, [r3]
   1a39e:	2800      	cmp	r0, #0
   1a3a0:	d1f8      	bne.n	1a394 <bt_conn_unref+0xc>
   1a3a2:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   1a3a6:	2a00      	cmp	r2, #0
   1a3a8:	dc0a      	bgt.n	1a3c0 <bt_conn_unref+0x38>
   1a3aa:	490d      	ldr	r1, [pc, #52]	; (1a3e0 <bt_conn_unref+0x58>)
   1a3ac:	480d      	ldr	r0, [pc, #52]	; (1a3e4 <bt_conn_unref+0x5c>)
   1a3ae:	f240 427e 	movw	r2, #1150	; 0x47e
   1a3b2:	f00c fcf9 	bl	26da8 <assert_print>
   1a3b6:	480a      	ldr	r0, [pc, #40]	; (1a3e0 <bt_conn_unref+0x58>)
   1a3b8:	f240 417e 	movw	r1, #1150	; 0x47e
   1a3bc:	f00c fced 	bl	26d9a <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1a3c0:	78a3      	ldrb	r3, [r4, #2]
   1a3c2:	2b01      	cmp	r3, #1
   1a3c4:	d10a      	bne.n	1a3dc <bt_conn_unref+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a3c6:	f3bf 8f5b 	dmb	ish
   1a3ca:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1a3ce:	f3bf 8f5b 	dmb	ish
   1a3d2:	b91b      	cbnz	r3, 1a3dc <bt_conn_unref+0x54>
}
   1a3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1a3d8:	f7ff bb90 	b.w	19afc <bt_le_adv_resume>
}
   1a3dc:	bd10      	pop	{r4, pc}
   1a3de:	bf00      	nop
   1a3e0:	0002b635 	.word	0x0002b635
   1a3e4:	0002a576 	.word	0x0002a576

0001a3e8 <bt_conn_lookup_handle>:
{
   1a3e8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1a3ea:	2101      	movs	r1, #1
   1a3ec:	4801      	ldr	r0, [pc, #4]	; (1a3f4 <bt_conn_lookup_handle+0xc>)
   1a3ee:	f00d bbe8 	b.w	27bc2 <conn_lookup_handle>
   1a3f2:	bf00      	nop
   1a3f4:	20003078 	.word	0x20003078

0001a3f8 <bt_conn_set_state>:
{
   1a3f8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1a3fa:	7a86      	ldrb	r6, [r0, #10]
   1a3fc:	428e      	cmp	r6, r1
{
   1a3fe:	4604      	mov	r4, r0
   1a400:	460d      	mov	r5, r1
	if (conn->state == state) {
   1a402:	d10b      	bne.n	1a41c <bt_conn_set_state+0x24>
	switch (state) {
   1a404:	2e08      	cmp	r6, #8
   1a406:	bf96      	itet	ls
   1a408:	4b60      	ldrls	r3, [pc, #384]	; (1a58c <bt_conn_set_state+0x194>)
	if (conn->state == state) {
   1a40a:	4a61      	ldrhi	r2, [pc, #388]	; (1a590 <bt_conn_set_state+0x198>)
   1a40c:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   1a410:	4860      	ldr	r0, [pc, #384]	; (1a594 <bt_conn_set_state+0x19c>)
   1a412:	2157      	movs	r1, #87	; 0x57
}
   1a414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   1a418:	f00c bcd4 	b.w	26dc4 <z_log_minimal_printk>
	conn->state = state;
   1a41c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1a41e:	b926      	cbnz	r6, 1a42a <bt_conn_set_state+0x32>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1a420:	7883      	ldrb	r3, [r0, #2]
   1a422:	2b08      	cmp	r3, #8
   1a424:	d001      	beq.n	1a42a <bt_conn_set_state+0x32>
			bt_conn_ref(conn);
   1a426:	f00d fbb1 	bl	27b8c <bt_conn_ref>
	switch (conn->state) {
   1a42a:	7aa3      	ldrb	r3, [r4, #10]
   1a42c:	2b08      	cmp	r3, #8
   1a42e:	f200 80a8 	bhi.w	1a582 <bt_conn_set_state+0x18a>
   1a432:	e8df f003 	tbb	[pc, r3]
   1a436:	0537      	.short	0x0537
   1a438:	aaaaaaaa 	.word	0xaaaaaaaa
   1a43c:	1caa      	.short	0x1caa
   1a43e:	aa          	.byte	0xaa
   1a43f:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   1a440:	4d55      	ldr	r5, [pc, #340]	; (1a598 <bt_conn_set_state+0x1a0>)
		tx->pending_no_cb = 0U;
   1a442:	2600      	movs	r6, #0
	__asm__ volatile(
   1a444:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a448:	f3ef 8211 	mrs	r2, BASEPRI
   1a44c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a450:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1a454:	69e3      	ldr	r3, [r4, #28]
   1a456:	2b00      	cmp	r3, #0
   1a458:	d073      	beq.n	1a542 <bt_conn_set_state+0x14a>
			conn->pending_no_cb--;
   1a45a:	3b01      	subs	r3, #1
   1a45c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1a45e:	f382 8811 	msr	BASEPRI, r2
   1a462:	f3bf 8f6f 	isb	sy
   1a466:	4628      	mov	r0, r5
   1a468:	f006 ff60 	bl	2132c <z_impl_k_sem_give>
}
   1a46c:	e7ea      	b.n	1a444 <bt_conn_set_state+0x4c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a46e:	78a3      	ldrb	r3, [r4, #2]
   1a470:	2b04      	cmp	r3, #4
   1a472:	f000 808a 	beq.w	1a58a <bt_conn_set_state+0x192>
	z_impl_k_queue_init(queue);
   1a476:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1a47a:	f00e ff9d 	bl	293b8 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1a47e:	4847      	ldr	r0, [pc, #284]	; (1a59c <bt_conn_set_state+0x1a4>)
   1a480:	2100      	movs	r1, #0
   1a482:	f009 f9d3 	bl	2382c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1a486:	2300      	movs	r3, #0
	list->tail = NULL;
   1a488:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a48c:	78e3      	ldrb	r3, [r4, #3]
   1a48e:	2b01      	cmp	r3, #1
   1a490:	d17b      	bne.n	1a58a <bt_conn_set_state+0x192>
			k_work_schedule(&conn->deferred_work,
   1a492:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1a496:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   1a49a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1a49e:	2300      	movs	r3, #0
   1a4a0:	f007 bb66 	b.w	21b70 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a4a4:	78a3      	ldrb	r3, [r4, #2]
   1a4a6:	2b04      	cmp	r3, #4
   1a4a8:	d104      	bne.n	1a4b4 <bt_conn_set_state+0xbc>
			bt_conn_unref(conn);
   1a4aa:	4620      	mov	r0, r4
}
   1a4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1a4b0:	f7ff bf6a 	b.w	1a388 <bt_conn_unref>
		switch (old_state) {
   1a4b4:	2e08      	cmp	r6, #8
   1a4b6:	d868      	bhi.n	1a58a <bt_conn_set_state+0x192>
   1a4b8:	a301      	add	r3, pc, #4	; (adr r3, 1a4c0 <bt_conn_set_state+0xc8>)
   1a4ba:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1a4be:	bf00      	nop
   1a4c0:	0001a53b 	.word	0x0001a53b
   1a4c4:	0001a4e5 	.word	0x0001a4e5
   1a4c8:	0001a52d 	.word	0x0001a52d
   1a4cc:	0001a4ab 	.word	0x0001a4ab
   1a4d0:	0001a4ab 	.word	0x0001a4ab
   1a4d4:	0001a52d 	.word	0x0001a52d
   1a4d8:	0001a52d 	.word	0x0001a52d
   1a4dc:	0001a53b 	.word	0x0001a53b
   1a4e0:	0001a53b 	.word	0x0001a53b
			tx_notify(conn);
   1a4e4:	4620      	mov	r0, r4
   1a4e6:	f7ff fcdd 	bl	19ea4 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1a4ea:	78a3      	ldrb	r3, [r4, #2]
   1a4ec:	2b01      	cmp	r3, #1
   1a4ee:	d10a      	bne.n	1a506 <bt_conn_set_state+0x10e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1a4f0:	f104 0560 	add.w	r5, r4, #96	; 0x60
   1a4f4:	4628      	mov	r0, r5
   1a4f6:	f00e fff3 	bl	294e0 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1a4fa:	f010 0f0c 	tst.w	r0, #12
   1a4fe:	d002      	beq.n	1a506 <bt_conn_set_state+0x10e>
				k_work_cancel_delayable(&conn->deferred_work);
   1a500:	4628      	mov	r0, r5
   1a502:	f007 fba3 	bl	21c4c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a506:	f3bf 8f5b 	dmb	ish
   1a50a:	3404      	adds	r4, #4
   1a50c:	e854 3f00 	ldrex	r3, [r4]
   1a510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a514:	e844 3200 	strex	r2, r3, [r4]
   1a518:	2a00      	cmp	r2, #0
   1a51a:	d1f7      	bne.n	1a50c <bt_conn_set_state+0x114>
   1a51c:	f3bf 8f5b 	dmb	ish
   1a520:	481e      	ldr	r0, [pc, #120]	; (1a59c <bt_conn_set_state+0x1a4>)
}
   1a522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a526:	2100      	movs	r1, #0
   1a528:	f009 b980 	b.w	2382c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1a52c:	7a63      	ldrb	r3, [r4, #9]
   1a52e:	2b00      	cmp	r3, #0
   1a530:	d0bb      	beq.n	1a4aa <bt_conn_set_state+0xb2>
				notify_connected(conn);
   1a532:	4620      	mov	r0, r4
   1a534:	f7ff fc86 	bl	19e44 <notify_connected>
   1a538:	e7b7      	b.n	1a4aa <bt_conn_set_state+0xb2>
			BT_WARN("Invalid (%u) old state", state);
   1a53a:	4819      	ldr	r0, [pc, #100]	; (1a5a0 <bt_conn_set_state+0x1a8>)
   1a53c:	462a      	mov	r2, r5
   1a53e:	2157      	movs	r1, #87	; 0x57
   1a540:	e768      	b.n	1a414 <bt_conn_set_state+0x1c>
	return list->head;
   1a542:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1a544:	b129      	cbz	r1, 1a552 <bt_conn_set_state+0x15a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a546:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1a548:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1a54a:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a54c:	4281      	cmp	r1, r0
	list->tail = node;
   1a54e:	bf08      	it	eq
   1a550:	61a3      	streq	r3, [r4, #24]
   1a552:	f382 8811 	msr	BASEPRI, r2
   1a556:	f3bf 8f6f 	isb	sy
		if (!node) {
   1a55a:	b1b1      	cbz	r1, 1a58a <bt_conn_set_state+0x192>
	__asm__ volatile(
   1a55c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a560:	f3ef 8311 	mrs	r3, BASEPRI
   1a564:	f382 8812 	msr	BASEPRI_MAX, r2
   1a568:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1a56c:	68ca      	ldr	r2, [r1, #12]
   1a56e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1a570:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   1a572:	f383 8811 	msr	BASEPRI, r3
   1a576:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1a57a:	4620      	mov	r0, r4
   1a57c:	f7ff fcbe 	bl	19efc <conn_tx_destroy>
   1a580:	e771      	b.n	1a466 <bt_conn_set_state+0x6e>
		BT_WARN("no valid (%u) state was set", state);
   1a582:	4808      	ldr	r0, [pc, #32]	; (1a5a4 <bt_conn_set_state+0x1ac>)
   1a584:	462a      	mov	r2, r5
   1a586:	2157      	movs	r1, #87	; 0x57
   1a588:	e744      	b.n	1a414 <bt_conn_set_state+0x1c>
}
   1a58a:	bd70      	pop	{r4, r5, r6, pc}
   1a58c:	00029d88 	.word	0x00029d88
   1a590:	0002b77b 	.word	0x0002b77b
   1a594:	0002b785 	.word	0x0002b785
   1a598:	200005b8 	.word	0x200005b8
   1a59c:	2000072c 	.word	0x2000072c
   1a5a0:	0002b79b 	.word	0x0002b79b
   1a5a4:	0002b7b7 	.word	0x0002b7b7

0001a5a8 <bt_conn_index>:
		index = conn - acl_conns;
   1a5a8:	4b0a      	ldr	r3, [pc, #40]	; (1a5d4 <bt_conn_index+0x2c>)
   1a5aa:	4a0b      	ldr	r2, [pc, #44]	; (1a5d8 <bt_conn_index+0x30>)
{
   1a5ac:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   1a5ae:	1ac4      	subs	r4, r0, r3
   1a5b0:	10e4      	asrs	r4, r4, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1a5b2:	4298      	cmp	r0, r3
		index = conn - acl_conns;
   1a5b4:	fb02 f404 	mul.w	r4, r2, r4
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1a5b8:	d00a      	beq.n	1a5d0 <bt_conn_index+0x28>
   1a5ba:	4908      	ldr	r1, [pc, #32]	; (1a5dc <bt_conn_index+0x34>)
   1a5bc:	4808      	ldr	r0, [pc, #32]	; (1a5e0 <bt_conn_index+0x38>)
   1a5be:	f240 429c 	movw	r2, #1180	; 0x49c
   1a5c2:	f00c fbf1 	bl	26da8 <assert_print>
   1a5c6:	4805      	ldr	r0, [pc, #20]	; (1a5dc <bt_conn_index+0x34>)
   1a5c8:	f240 419c 	movw	r1, #1180	; 0x49c
   1a5cc:	f00c fbe5 	bl	26d9a <assert_post_action>
}
   1a5d0:	b2e0      	uxtb	r0, r4
   1a5d2:	bd10      	pop	{r4, pc}
   1a5d4:	20003078 	.word	0x20003078
   1a5d8:	c28f5c29 	.word	0xc28f5c29
   1a5dc:	0002b635 	.word	0x0002b635
   1a5e0:	0002a576 	.word	0x0002a576

0001a5e4 <bt_conn_create_pdu_timeout>:
{
   1a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5e6:	4604      	mov	r4, r0
   1a5e8:	460d      	mov	r5, r1
   1a5ea:	4617      	mov	r7, r2
   1a5ec:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1a5ee:	f00e feb4 	bl	2935a <k_is_in_isr>
   1a5f2:	b150      	cbz	r0, 1a60a <bt_conn_create_pdu_timeout+0x26>
   1a5f4:	490f      	ldr	r1, [pc, #60]	; (1a634 <bt_conn_create_pdu_timeout+0x50>)
   1a5f6:	4810      	ldr	r0, [pc, #64]	; (1a638 <bt_conn_create_pdu_timeout+0x54>)
   1a5f8:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
   1a5fc:	f00c fbd4 	bl	26da8 <assert_print>
   1a600:	480c      	ldr	r0, [pc, #48]	; (1a634 <bt_conn_create_pdu_timeout+0x50>)
   1a602:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
   1a606:	f00c fbc8 	bl	26d9a <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1a60a:	480c      	ldr	r0, [pc, #48]	; (1a63c <bt_conn_create_pdu_timeout+0x58>)
   1a60c:	463a      	mov	r2, r7
   1a60e:	2c00      	cmp	r4, #0
   1a610:	bf18      	it	ne
   1a612:	4620      	movne	r0, r4
   1a614:	4633      	mov	r3, r6
   1a616:	f00e faf7 	bl	28c08 <net_buf_alloc_fixed>
	if (!buf) {
   1a61a:	4604      	mov	r4, r0
   1a61c:	b928      	cbnz	r0, 1a62a <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   1a61e:	4808      	ldr	r0, [pc, #32]	; (1a640 <bt_conn_create_pdu_timeout+0x5c>)
   1a620:	2157      	movs	r1, #87	; 0x57
   1a622:	f00c fbcf 	bl	26dc4 <z_log_minimal_printk>
}
   1a626:	4620      	mov	r0, r4
   1a628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1a62a:	1d29      	adds	r1, r5, #4
   1a62c:	3008      	adds	r0, #8
   1a62e:	f002 fca3 	bl	1cf78 <net_buf_simple_reserve>
	return buf;
   1a632:	e7f8      	b.n	1a626 <bt_conn_create_pdu_timeout+0x42>
   1a634:	0002b635 	.word	0x0002b635
   1a638:	0002a576 	.word	0x0002a576
   1a63c:	20000ac8 	.word	0x20000ac8
   1a640:	0002b7d8 	.word	0x0002b7d8

0001a644 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a648:	f3bf 8f5b 	dmb	ish
   1a64c:	6842      	ldr	r2, [r0, #4]
   1a64e:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1a652:	05d2      	lsls	r2, r2, #23
{
   1a654:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1a656:	f100 0304 	add.w	r3, r0, #4
   1a65a:	d519      	bpl.n	1a690 <notify_le_param_updated+0x4c>
	    conn->le.interval >= conn->le.interval_min &&
   1a65c:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1a660:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   1a664:	4291      	cmp	r1, r2
   1a666:	d813      	bhi.n	1a690 <notify_le_param_updated+0x4c>
	    conn->le.interval >= conn->le.interval_min &&
   1a668:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   1a66c:	4291      	cmp	r1, r2
   1a66e:	d30f      	bcc.n	1a690 <notify_le_param_updated+0x4c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1a670:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   1a674:	4291      	cmp	r1, r2
   1a676:	d10b      	bne.n	1a690 <notify_le_param_updated+0x4c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a678:	f3bf 8f5b 	dmb	ish
   1a67c:	e853 2f00 	ldrex	r2, [r3]
   1a680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1a684:	e843 2100 	strex	r1, r2, [r3]
   1a688:	2900      	cmp	r1, #0
   1a68a:	d1f7      	bne.n	1a67c <notify_le_param_updated+0x38>
   1a68c:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1a690:	4b18      	ldr	r3, [pc, #96]	; (1a6f4 <notify_le_param_updated+0xb0>)
   1a692:	681d      	ldr	r5, [r3, #0]
   1a694:	b99d      	cbnz	r5, 1a6be <notify_le_param_updated+0x7a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a696:	4d18      	ldr	r5, [pc, #96]	; (1a6f8 <notify_le_param_updated+0xb4>)
   1a698:	4e18      	ldr	r6, [pc, #96]	; (1a6fc <notify_le_param_updated+0xb8>)
   1a69a:	4f19      	ldr	r7, [pc, #100]	; (1a700 <notify_le_param_updated+0xbc>)
   1a69c:	42b5      	cmp	r5, r6
   1a69e:	d90a      	bls.n	1a6b6 <notify_le_param_updated+0x72>
   1a6a0:	4818      	ldr	r0, [pc, #96]	; (1a704 <notify_le_param_updated+0xc0>)
   1a6a2:	4639      	mov	r1, r7
   1a6a4:	f240 528b 	movw	r2, #1419	; 0x58b
   1a6a8:	f00c fb7e 	bl	26da8 <assert_print>
   1a6ac:	f240 518b 	movw	r1, #1419	; 0x58b
   1a6b0:	4638      	mov	r0, r7
   1a6b2:	f00c fb72 	bl	26d9a <assert_post_action>
   1a6b6:	42b5      	cmp	r5, r6
   1a6b8:	d30d      	bcc.n	1a6d6 <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1a6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->le_param_updated) {
   1a6be:	68ee      	ldr	r6, [r5, #12]
   1a6c0:	b13e      	cbz	r6, 1a6d2 <notify_le_param_updated+0x8e>
			cb->le_param_updated(conn, conn->le.interval,
   1a6c2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1a6c6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1a6ca:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1a6ce:	4620      	mov	r0, r4
   1a6d0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1a6d2:	692d      	ldr	r5, [r5, #16]
   1a6d4:	e7de      	b.n	1a694 <notify_le_param_updated+0x50>
		if (cb->le_param_updated) {
   1a6d6:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1a6da:	f1b8 0f00 	cmp.w	r8, #0
   1a6de:	d007      	beq.n	1a6f0 <notify_le_param_updated+0xac>
			cb->le_param_updated(conn, conn->le.interval,
   1a6e0:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1a6e4:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1a6e8:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1a6ec:	4620      	mov	r0, r4
   1a6ee:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a6f0:	3514      	adds	r5, #20
   1a6f2:	e7d3      	b.n	1a69c <notify_le_param_updated+0x58>
   1a6f4:	20003b94 	.word	0x20003b94
   1a6f8:	00029a50 	.word	0x00029a50
   1a6fc:	00029a64 	.word	0x00029a64
   1a700:	0002b635 	.word	0x0002b635
   1a704:	0002a576 	.word	0x0002a576

0001a708 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1a708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a70c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1a70e:	4608      	mov	r0, r1
{
   1a710:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1a712:	f00c ff5a 	bl	275ca <bt_le_conn_params_valid>
   1a716:	4605      	mov	r5, r0
   1a718:	b918      	cbnz	r0, 1a722 <le_param_req+0x1a>
		return false;
   1a71a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1a71c:	4628      	mov	r0, r5
   1a71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1a722:	4b1a      	ldr	r3, [pc, #104]	; (1a78c <le_param_req+0x84>)
   1a724:	681e      	ldr	r6, [r3, #0]
   1a726:	b9be      	cbnz	r6, 1a758 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a728:	4e19      	ldr	r6, [pc, #100]	; (1a790 <le_param_req+0x88>)
   1a72a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1a794 <le_param_req+0x8c>
   1a72e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1a798 <le_param_req+0x90>
   1a732:	4546      	cmp	r6, r8
   1a734:	d90a      	bls.n	1a74c <le_param_req+0x44>
   1a736:	4819      	ldr	r0, [pc, #100]	; (1a79c <le_param_req+0x94>)
   1a738:	4649      	mov	r1, r9
   1a73a:	f240 52d3 	movw	r2, #1491	; 0x5d3
   1a73e:	f00c fb33 	bl	26da8 <assert_print>
   1a742:	f240 51d3 	movw	r1, #1491	; 0x5d3
   1a746:	4648      	mov	r0, r9
   1a748:	f00c fb27 	bl	26d9a <assert_post_action>
   1a74c:	4546      	cmp	r6, r8
   1a74e:	d2e5      	bcs.n	1a71c <le_param_req+0x14>
		if (!cb->le_param_req) {
   1a750:	68b3      	ldr	r3, [r6, #8]
   1a752:	b983      	cbnz	r3, 1a776 <le_param_req+0x6e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a754:	3614      	adds	r6, #20
   1a756:	e7ec      	b.n	1a732 <le_param_req+0x2a>
		if (!cb->le_param_req) {
   1a758:	68b3      	ldr	r3, [r6, #8]
   1a75a:	b90b      	cbnz	r3, 1a760 <le_param_req+0x58>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a75c:	6936      	ldr	r6, [r6, #16]
   1a75e:	e7e2      	b.n	1a726 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1a760:	4621      	mov	r1, r4
   1a762:	4638      	mov	r0, r7
   1a764:	4798      	blx	r3
   1a766:	2800      	cmp	r0, #0
   1a768:	d0d7      	beq.n	1a71a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1a76a:	4620      	mov	r0, r4
   1a76c:	f00c ff2d 	bl	275ca <bt_le_conn_params_valid>
   1a770:	2800      	cmp	r0, #0
   1a772:	d1f3      	bne.n	1a75c <le_param_req+0x54>
   1a774:	e7d1      	b.n	1a71a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1a776:	4621      	mov	r1, r4
   1a778:	4638      	mov	r0, r7
   1a77a:	4798      	blx	r3
   1a77c:	2800      	cmp	r0, #0
   1a77e:	d0cc      	beq.n	1a71a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1a780:	4620      	mov	r0, r4
   1a782:	f00c ff22 	bl	275ca <bt_le_conn_params_valid>
   1a786:	2800      	cmp	r0, #0
   1a788:	d1e4      	bne.n	1a754 <le_param_req+0x4c>
   1a78a:	e7c6      	b.n	1a71a <le_param_req+0x12>
   1a78c:	20003b94 	.word	0x20003b94
   1a790:	00029a50 	.word	0x00029a50
   1a794:	00029a64 	.word	0x00029a64
   1a798:	0002b635 	.word	0x0002b635
   1a79c:	0002a576 	.word	0x0002a576

0001a7a0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1a7a0:	b570      	push	{r4, r5, r6, lr}
   1a7a2:	4606      	mov	r6, r0
   1a7a4:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1a7a6:	4809      	ldr	r0, [pc, #36]	; (1a7cc <bt_conn_add_le+0x2c>)
   1a7a8:	2101      	movs	r1, #1
   1a7aa:	f7ff fc75 	bl	1a098 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1a7ae:	4604      	mov	r4, r0
   1a7b0:	b150      	cbz	r0, 1a7c8 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   1a7b2:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   1a7b4:	2207      	movs	r2, #7
   1a7b6:	4629      	mov	r1, r5
   1a7b8:	3090      	adds	r0, #144	; 0x90
   1a7ba:	f00c fdc8 	bl	2734e <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1a7be:	2301      	movs	r3, #1
   1a7c0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1a7c2:	4b03      	ldr	r3, [pc, #12]	; (1a7d0 <bt_conn_add_le+0x30>)
   1a7c4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1a7c8:	4620      	mov	r0, r4
   1a7ca:	bd70      	pop	{r4, r5, r6, pc}
   1a7cc:	20003078 	.word	0x20003078
   1a7d0:	00280018 	.word	0x00280018

0001a7d4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1a7d4:	b570      	push	{r4, r5, r6, lr}
   1a7d6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a7d8:	480c      	ldr	r0, [pc, #48]	; (1a80c <bt_conn_lookup_addr_le+0x38>)
{
   1a7da:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a7dc:	f00d f9d6 	bl	27b8c <bt_conn_ref>

		if (!conn) {
   1a7e0:	4604      	mov	r4, r0
   1a7e2:	b128      	cbz	r0, 1a7f0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1a7e4:	7883      	ldrb	r3, [r0, #2]
   1a7e6:	2b01      	cmp	r3, #1
   1a7e8:	d004      	beq.n	1a7f4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1a7ea:	f7ff fdcd 	bl	1a388 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1a7ee:	2400      	movs	r4, #0
}
   1a7f0:	4620      	mov	r0, r4
   1a7f2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a7f4:	4629      	mov	r1, r5
   1a7f6:	4632      	mov	r2, r6
   1a7f8:	f00d fa10 	bl	27c1c <bt_conn_is_peer_addr_le>
   1a7fc:	4605      	mov	r5, r0
   1a7fe:	2800      	cmp	r0, #0
   1a800:	d1f6      	bne.n	1a7f0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1a802:	4620      	mov	r0, r4
   1a804:	f7ff fdc0 	bl	1a388 <bt_conn_unref>
	return NULL;
   1a808:	462c      	mov	r4, r5
			continue;
   1a80a:	e7f1      	b.n	1a7f0 <bt_conn_lookup_addr_le+0x1c>
   1a80c:	20003078 	.word	0x20003078

0001a810 <bt_conn_exists_le>:
{
   1a810:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1a812:	f7ff ffdf 	bl	1a7d4 <bt_conn_lookup_addr_le>
	if (conn) {
   1a816:	4604      	mov	r4, r0
   1a818:	b170      	cbz	r0, 1a838 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   1a81a:	7a83      	ldrb	r3, [r0, #10]
   1a81c:	4807      	ldr	r0, [pc, #28]	; (1a83c <bt_conn_exists_le+0x2c>)
   1a81e:	2b08      	cmp	r3, #8
   1a820:	bf96      	itet	ls
   1a822:	4a07      	ldrls	r2, [pc, #28]	; (1a840 <bt_conn_exists_le+0x30>)
   1a824:	4a07      	ldrhi	r2, [pc, #28]	; (1a844 <bt_conn_exists_le+0x34>)
   1a826:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1a82a:	2157      	movs	r1, #87	; 0x57
   1a82c:	f00c faca 	bl	26dc4 <z_log_minimal_printk>
		bt_conn_unref(conn);
   1a830:	4620      	mov	r0, r4
   1a832:	f7ff fda9 	bl	1a388 <bt_conn_unref>
		return true;
   1a836:	2001      	movs	r0, #1
}
   1a838:	bd10      	pop	{r4, pc}
   1a83a:	bf00      	nop
   1a83c:	0002b806 	.word	0x0002b806
   1a840:	00029d88 	.word	0x00029d88
   1a844:	0002b77b 	.word	0x0002b77b

0001a848 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a84a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a84c:	480e      	ldr	r0, [pc, #56]	; (1a888 <bt_conn_lookup_state_le+0x40>)
{
   1a84e:	460e      	mov	r6, r1
   1a850:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a852:	f00d f99b 	bl	27b8c <bt_conn_ref>

		if (!conn) {
   1a856:	4604      	mov	r4, r0
   1a858:	b1a0      	cbz	r0, 1a884 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1a85a:	7883      	ldrb	r3, [r0, #2]
   1a85c:	2b01      	cmp	r3, #1
   1a85e:	d003      	beq.n	1a868 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1a860:	f7ff fd92 	bl	1a388 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1a864:	2400      	movs	r4, #0
			continue;
   1a866:	e00d      	b.n	1a884 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a868:	b136      	cbz	r6, 1a878 <bt_conn_lookup_state_le+0x30>
   1a86a:	4632      	mov	r2, r6
   1a86c:	4629      	mov	r1, r5
   1a86e:	f00d f9d5 	bl	27c1c <bt_conn_is_peer_addr_le>
   1a872:	b908      	cbnz	r0, 1a878 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1a874:	4620      	mov	r0, r4
   1a876:	e7f3      	b.n	1a860 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1a878:	7aa3      	ldrb	r3, [r4, #10]
   1a87a:	42bb      	cmp	r3, r7
   1a87c:	d1fa      	bne.n	1a874 <bt_conn_lookup_state_le+0x2c>
   1a87e:	7a23      	ldrb	r3, [r4, #8]
   1a880:	42ab      	cmp	r3, r5
   1a882:	d1f7      	bne.n	1a874 <bt_conn_lookup_state_le+0x2c>
}
   1a884:	4620      	mov	r0, r4
   1a886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a888:	20003078 	.word	0x20003078

0001a88c <send_conn_le_param_update>:
{
   1a88c:	b538      	push	{r3, r4, r5, lr}
   1a88e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1a890:	4608      	mov	r0, r1
{
   1a892:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a894:	f00c fe99 	bl	275ca <bt_le_conn_params_valid>
   1a898:	b348      	cbz	r0, 1a8ee <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a89a:	4b16      	ldr	r3, [pc, #88]	; (1a8f4 <send_conn_le_param_update+0x68>)
   1a89c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   1a8a0:	0799      	lsls	r1, r3, #30
   1a8a2:	d407      	bmi.n	1a8b4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a8a4:	78e3      	ldrb	r3, [r4, #3]
   1a8a6:	b183      	cbz	r3, 1a8ca <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   1a8a8:	4629      	mov	r1, r5
   1a8aa:	4620      	mov	r0, r4
}
   1a8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1a8b0:	f000 ba7c 	b.w	1adac <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a8b4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1a8b8:	079a      	lsls	r2, r3, #30
   1a8ba:	d5f3      	bpl.n	1a8a4 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a8bc:	f3bf 8f5b 	dmb	ish
   1a8c0:	6863      	ldr	r3, [r4, #4]
   1a8c2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a8c6:	059b      	lsls	r3, r3, #22
   1a8c8:	d4ec      	bmi.n	1a8a4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1a8ca:	4629      	mov	r1, r5
   1a8cc:	4620      	mov	r0, r4
   1a8ce:	f00d f9c7 	bl	27c60 <bt_conn_le_conn_update>
		if (rc == 0) {
   1a8d2:	b958      	cbnz	r0, 1a8ec <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   1a8d4:	882b      	ldrh	r3, [r5, #0]
   1a8d6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1a8da:	886b      	ldrh	r3, [r5, #2]
   1a8dc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   1a8e0:	88ab      	ldrh	r3, [r5, #4]
   1a8e2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1a8e6:	88eb      	ldrh	r3, [r5, #6]
   1a8e8:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1a8ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a8ee:	f06f 0015 	mvn.w	r0, #21
   1a8f2:	e7fb      	b.n	1a8ec <send_conn_le_param_update+0x60>
   1a8f4:	200004f8 	.word	0x200004f8

0001a8f8 <deferred_work>:
{
   1a8f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a8fc:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   1a900:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1a902:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a906:	bb73      	cbnz	r3, 1a966 <deferred_work+0x6e>
		bt_l2cap_disconnected(conn);
   1a908:	4628      	mov	r0, r5
   1a90a:	f00d f9e8 	bl	27cde <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a90e:	4b34      	ldr	r3, [pc, #208]	; (1a9e0 <deferred_work+0xe8>)
   1a910:	681e      	ldr	r6, [r3, #0]
   1a912:	b9c6      	cbnz	r6, 1a946 <deferred_work+0x4e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a914:	4e33      	ldr	r6, [pc, #204]	; (1a9e4 <deferred_work+0xec>)
   1a916:	4f34      	ldr	r7, [pc, #208]	; (1a9e8 <deferred_work+0xf0>)
   1a918:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1a9ec <deferred_work+0xf4>
   1a91c:	42be      	cmp	r6, r7
   1a91e:	d90a      	bls.n	1a936 <deferred_work+0x3e>
   1a920:	4833      	ldr	r0, [pc, #204]	; (1a9f0 <deferred_work+0xf8>)
   1a922:	4641      	mov	r1, r8
   1a924:	f240 5252 	movw	r2, #1362	; 0x552
   1a928:	f00c fa3e 	bl	26da8 <assert_print>
   1a92c:	f240 5152 	movw	r1, #1362	; 0x552
   1a930:	4640      	mov	r0, r8
   1a932:	f00c fa32 	bl	26d9a <assert_post_action>
   1a936:	42be      	cmp	r6, r7
   1a938:	d30d      	bcc.n	1a956 <deferred_work+0x5e>
		bt_conn_unref(conn);
   1a93a:	4628      	mov	r0, r5
}
   1a93c:	b002      	add	sp, #8
   1a93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1a942:	f7ff bd21 	b.w	1a388 <bt_conn_unref>
		if (cb->disconnected) {
   1a946:	6873      	ldr	r3, [r6, #4]
   1a948:	b11b      	cbz	r3, 1a952 <deferred_work+0x5a>
			cb->disconnected(conn, conn->err);
   1a94a:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1a94e:	4628      	mov	r0, r5
   1a950:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a952:	6936      	ldr	r6, [r6, #16]
   1a954:	e7dd      	b.n	1a912 <deferred_work+0x1a>
		if (cb->disconnected) {
   1a956:	6873      	ldr	r3, [r6, #4]
   1a958:	b11b      	cbz	r3, 1a962 <deferred_work+0x6a>
			cb->disconnected(conn, conn->err);
   1a95a:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1a95e:	4628      	mov	r0, r5
   1a960:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a962:	3614      	adds	r6, #20
   1a964:	e7da      	b.n	1a91c <deferred_work+0x24>
	if (conn->type != BT_CONN_TYPE_LE) {
   1a966:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1a96a:	2b01      	cmp	r3, #1
   1a96c:	d12f      	bne.n	1a9ce <deferred_work+0xd6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a96e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   1a972:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
   1a976:	e856 3f00 	ldrex	r3, [r6]
   1a97a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   1a97e:	e846 2100 	strex	r1, r2, [r6]
   1a982:	2900      	cmp	r1, #0
   1a984:	d1f7      	bne.n	1a976 <deferred_work+0x7e>
   1a986:	f3bf 8f5b 	dmb	ish
   1a98a:	05db      	lsls	r3, r3, #23
   1a98c:	d522      	bpl.n	1a9d4 <deferred_work+0xdc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a98e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1a992:	f8ad 3000 	strh.w	r3, [sp]
   1a996:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1a99a:	f8ad 3002 	strh.w	r3, [sp, #2]
   1a99e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1a9a2:	f8ad 3004 	strh.w	r3, [sp, #4]
   1a9a6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1a9aa:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1a9ae:	4669      	mov	r1, sp
   1a9b0:	4628      	mov	r0, r5
   1a9b2:	f7ff ff6b 	bl	1a88c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a9b6:	f3bf 8f5b 	dmb	ish
   1a9ba:	e856 3f00 	ldrex	r3, [r6]
   1a9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a9c2:	e846 3200 	strex	r2, r3, [r6]
   1a9c6:	2a00      	cmp	r2, #0
   1a9c8:	d1f7      	bne.n	1a9ba <deferred_work+0xc2>
   1a9ca:	f3bf 8f5b 	dmb	ish
}
   1a9ce:	b002      	add	sp, #8
   1a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		param = BT_LE_CONN_PARAM(
   1a9d4:	4a07      	ldr	r2, [pc, #28]	; (1a9f4 <deferred_work+0xfc>)
   1a9d6:	6810      	ldr	r0, [r2, #0]
   1a9d8:	6851      	ldr	r1, [r2, #4]
   1a9da:	466b      	mov	r3, sp
   1a9dc:	c303      	stmia	r3!, {r0, r1}
   1a9de:	e7e6      	b.n	1a9ae <deferred_work+0xb6>
   1a9e0:	20003b94 	.word	0x20003b94
   1a9e4:	00029a50 	.word	0x00029a50
   1a9e8:	00029a64 	.word	0x00029a64
   1a9ec:	0002b635 	.word	0x0002b635
   1a9f0:	0002a576 	.word	0x0002a576
   1a9f4:	00029b7c 	.word	0x00029b7c

0001a9f8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1a9f8:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1a9fa:	4801      	ldr	r0, [pc, #4]	; (1aa00 <bt_conn_create_frag_timeout+0x8>)
   1a9fc:	f7ff bdf2 	b.w	1a5e4 <bt_conn_create_pdu_timeout>
   1aa00:	20000b30 	.word	0x20000b30

0001aa04 <create_frag>:
{
   1aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa08:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1aa0a:	f04f 33ff 	mov.w	r3, #4294967295
   1aa0e:	f04f 32ff 	mov.w	r2, #4294967295
   1aa12:	2000      	movs	r0, #0
{
   1aa14:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1aa16:	f7ff ffef 	bl	1a9f8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1aa1a:	7ab3      	ldrb	r3, [r6, #10]
   1aa1c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1aa1e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1aa20:	f04f 0600 	mov.w	r6, #0
   1aa24:	d005      	beq.n	1aa32 <create_frag+0x2e>
		net_buf_unref(frag);
   1aa26:	f002 fbc7 	bl	1d1b8 <net_buf_unref>
		return NULL;
   1aa2a:	4635      	mov	r5, r6
}
   1aa2c:	4628      	mov	r0, r5
   1aa2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1aa32:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   1aa34:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   1aa38:	4e0c      	ldr	r6, [pc, #48]	; (1aa6c <create_frag+0x68>)
   1aa3a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1aa3c:	f8b6 80bc 	ldrh.w	r8, [r6, #188]	; 0xbc
   1aa40:	f00e f8f3 	bl	28c2a <net_buf_simple_tailroom>
   1aa44:	4580      	cmp	r8, r0
   1aa46:	d20c      	bcs.n	1aa62 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1aa48:	f8b6 60bc 	ldrh.w	r6, [r6, #188]	; 0xbc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1aa4c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1aa50:	4632      	mov	r2, r6
   1aa52:	4638      	mov	r0, r7
   1aa54:	f00e f8f1 	bl	28c3a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1aa58:	4631      	mov	r1, r6
   1aa5a:	4620      	mov	r0, r4
   1aa5c:	f002 fc88 	bl	1d370 <net_buf_simple_pull>
   1aa60:	e7e4      	b.n	1aa2c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1aa62:	4638      	mov	r0, r7
   1aa64:	f00e f8e1 	bl	28c2a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1aa68:	b286      	uxth	r6, r0
   1aa6a:	e7ef      	b.n	1aa4c <create_frag+0x48>
   1aa6c:	200004f8 	.word	0x200004f8

0001aa70 <bt_conn_process_tx>:
{
   1aa70:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1aa72:	7a83      	ldrb	r3, [r0, #10]
{
   1aa74:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1aa76:	b993      	cbnz	r3, 1aa9e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1aa78:	f3bf 8f5b 	dmb	ish
   1aa7c:	1d03      	adds	r3, r0, #4
   1aa7e:	e853 2f00 	ldrex	r2, [r3]
   1aa82:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1aa86:	e843 1500 	strex	r5, r1, [r3]
   1aa8a:	2d00      	cmp	r5, #0
   1aa8c:	d1f7      	bne.n	1aa7e <bt_conn_process_tx+0xe>
   1aa8e:	f3bf 8f5b 	dmb	ish
   1aa92:	0653      	lsls	r3, r2, #25
   1aa94:	d503      	bpl.n	1aa9e <bt_conn_process_tx+0x2e>
}
   1aa96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1aa9a:	f7ff bb31 	b.w	1a100 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1aa9e:	2200      	movs	r2, #0
   1aaa0:	2300      	movs	r3, #0
   1aaa2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1aaa6:	f002 fa37 	bl	1cf18 <net_buf_get>
	BT_ASSERT(buf);
   1aaaa:	4605      	mov	r5, r0
   1aaac:	b958      	cbnz	r0, 1aac6 <bt_conn_process_tx+0x56>
   1aaae:	4923      	ldr	r1, [pc, #140]	; (1ab3c <bt_conn_process_tx+0xcc>)
   1aab0:	4823      	ldr	r0, [pc, #140]	; (1ab40 <bt_conn_process_tx+0xd0>)
   1aab2:	f240 320b 	movw	r2, #779	; 0x30b
   1aab6:	f00c f977 	bl	26da8 <assert_print>
   1aaba:	4040      	eors	r0, r0
   1aabc:	f380 8811 	msr	BASEPRI, r0
   1aac0:	f04f 0003 	mov.w	r0, #3
   1aac4:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1aac6:	4e1f      	ldr	r6, [pc, #124]	; (1ab44 <bt_conn_process_tx+0xd4>)
	if (buf->len <= conn_mtu(conn)) {
   1aac8:	89aa      	ldrh	r2, [r5, #12]
   1aaca:	f8b6 30bc 	ldrh.w	r3, [r6, #188]	; 0xbc
   1aace:	429a      	cmp	r2, r3
   1aad0:	d807      	bhi.n	1aae2 <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1aad2:	2300      	movs	r3, #0
   1aad4:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1aad6:	4629      	mov	r1, r5
   1aad8:	4620      	mov	r0, r4
   1aada:	f7ff fa35 	bl	19f48 <send_frag>
	if (!send_buf(conn, buf)) {
   1aade:	b968      	cbnz	r0, 1aafc <bt_conn_process_tx+0x8c>
   1aae0:	e005      	b.n	1aaee <bt_conn_process_tx+0x7e>
	frag = create_frag(conn, buf);
   1aae2:	4629      	mov	r1, r5
   1aae4:	4620      	mov	r0, r4
   1aae6:	f7ff ff8d 	bl	1aa04 <create_frag>
	if (!frag) {
   1aaea:	4601      	mov	r1, r0
   1aaec:	b938      	cbnz	r0, 1aafe <bt_conn_process_tx+0x8e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1aaee:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   1aaf0:	2300      	movs	r3, #0
   1aaf2:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   1aaf4:	4628      	mov	r0, r5
   1aaf6:	f002 fb5f 	bl	1d1b8 <net_buf_unref>
		if (tx) {
   1aafa:	b9ce      	cbnz	r6, 1ab30 <bt_conn_process_tx+0xc0>
}
   1aafc:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1aafe:	2301      	movs	r3, #1
   1ab00:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1ab02:	4620      	mov	r0, r4
   1ab04:	f7ff fa20 	bl	19f48 <send_frag>
   1ab08:	2800      	cmp	r0, #0
   1ab0a:	d0f0      	beq.n	1aaee <bt_conn_process_tx+0x7e>
	while (buf->len > conn_mtu(conn)) {
   1ab0c:	89aa      	ldrh	r2, [r5, #12]
   1ab0e:	f8b6 30bc 	ldrh.w	r3, [r6, #188]	; 0xbc
   1ab12:	429a      	cmp	r2, r3
   1ab14:	d802      	bhi.n	1ab1c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   1ab16:	2300      	movs	r3, #0
   1ab18:	2203      	movs	r2, #3
   1ab1a:	e7dc      	b.n	1aad6 <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
   1ab1c:	4629      	mov	r1, r5
   1ab1e:	4620      	mov	r0, r4
   1ab20:	f7ff ff70 	bl	1aa04 <create_frag>
		if (!frag) {
   1ab24:	4601      	mov	r1, r0
   1ab26:	2800      	cmp	r0, #0
   1ab28:	d0e1      	beq.n	1aaee <bt_conn_process_tx+0x7e>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1ab2a:	2301      	movs	r3, #1
   1ab2c:	461a      	mov	r2, r3
   1ab2e:	e7e8      	b.n	1ab02 <bt_conn_process_tx+0x92>
			conn_tx_destroy(conn, tx);
   1ab30:	4631      	mov	r1, r6
   1ab32:	4620      	mov	r0, r4
}
   1ab34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   1ab38:	f7ff b9e0 	b.w	19efc <conn_tx_destroy>
   1ab3c:	0002b635 	.word	0x0002b635
   1ab40:	0002a576 	.word	0x0002a576
   1ab44:	200004f8 	.word	0x200004f8

0001ab48 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1ab48:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1ab4a:	490b      	ldr	r1, [pc, #44]	; (1ab78 <bt_conn_init+0x30>)
   1ab4c:	480b      	ldr	r0, [pc, #44]	; (1ab7c <bt_conn_init+0x34>)
   1ab4e:	f00e fc40 	bl	293d2 <k_queue_append>
   1ab52:	490b      	ldr	r1, [pc, #44]	; (1ab80 <bt_conn_init+0x38>)
   1ab54:	4809      	ldr	r0, [pc, #36]	; (1ab7c <bt_conn_init+0x34>)
   1ab56:	f00e fc3c 	bl	293d2 <k_queue_append>
   1ab5a:	490a      	ldr	r1, [pc, #40]	; (1ab84 <bt_conn_init+0x3c>)
   1ab5c:	4807      	ldr	r0, [pc, #28]	; (1ab7c <bt_conn_init+0x34>)
   1ab5e:	f00e fc38 	bl	293d2 <k_queue_append>
	}

	bt_att_init();
   1ab62:	f001 f82d 	bl	1bbc0 <bt_att_init>

	err = bt_smp_init();
   1ab66:	f00e f84c 	bl	28c02 <bt_smp_init>
	if (err) {
   1ab6a:	4604      	mov	r4, r0
   1ab6c:	b908      	cbnz	r0, 1ab72 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   1ab6e:	f00d f8ed 	bl	27d4c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1ab72:	4620      	mov	r0, r4
   1ab74:	bd10      	pop	{r4, pc}
   1ab76:	bf00      	nop
   1ab78:	20003b98 	.word	0x20003b98
   1ab7c:	20000aac 	.word	0x20000aac
   1ab80:	20003ba8 	.word	0x20003ba8
   1ab84:	20003bb8 	.word	0x20003bb8

0001ab88 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1ab88:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1ab8a:	4b07      	ldr	r3, [pc, #28]	; (1aba8 <l2cap_accept+0x20>)
{
   1ab8c:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   1ab8e:	6818      	ldr	r0, [r3, #0]
   1ab90:	b918      	cbnz	r0, 1ab9a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1ab92:	4a06      	ldr	r2, [pc, #24]	; (1abac <l2cap_accept+0x24>)
   1ab94:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1ab96:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1ab98:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   1ab9a:	4805      	ldr	r0, [pc, #20]	; (1abb0 <l2cap_accept+0x28>)
   1ab9c:	2145      	movs	r1, #69	; 0x45
   1ab9e:	f00c f911 	bl	26dc4 <z_log_minimal_printk>
   1aba2:	f06f 000b 	mvn.w	r0, #11
   1aba6:	e7f7      	b.n	1ab98 <l2cap_accept+0x10>
   1aba8:	20003bc8 	.word	0x20003bc8
   1abac:	00029dcc 	.word	0x00029dcc
   1abb0:	0002b8a7 	.word	0x0002b8a7

0001abb4 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abb6:	4605      	mov	r5, r0
   1abb8:	460f      	mov	r7, r1
   1abba:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1abbc:	2300      	movs	r3, #0
   1abbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1abc2:	2104      	movs	r1, #4
   1abc4:	2000      	movs	r0, #0
   1abc6:	f7ff fd0d 	bl	1a5e4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1abca:	4604      	mov	r4, r0
   1abcc:	b930      	cbnz	r0, 1abdc <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1abce:	4807      	ldr	r0, [pc, #28]	; (1abec <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   1abd0:	462a      	mov	r2, r5
   1abd2:	2145      	movs	r1, #69	; 0x45
   1abd4:	f00c f8f6 	bl	26dc4 <z_log_minimal_printk>
}
   1abd8:	4620      	mov	r0, r4
   1abda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1abdc:	2104      	movs	r1, #4
   1abde:	3008      	adds	r0, #8
   1abe0:	f002 fc00 	bl	1d3e4 <net_buf_simple_add>
	hdr->code = code;
   1abe4:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1abe6:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1abe8:	8046      	strh	r6, [r0, #2]
	return buf;
   1abea:	e7f5      	b.n	1abd8 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1abec:	0002b8d3 	.word	0x0002b8d3

0001abf0 <bt_l2cap_connected>:
{
   1abf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1abf2:	4d2b      	ldr	r5, [pc, #172]	; (1aca0 <bt_l2cap_connected+0xb0>)
   1abf4:	4e2b      	ldr	r6, [pc, #172]	; (1aca4 <bt_l2cap_connected+0xb4>)
   1abf6:	4f2c      	ldr	r7, [pc, #176]	; (1aca8 <bt_l2cap_connected+0xb8>)
{
   1abf8:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1abfa:	42b5      	cmp	r5, r6
   1abfc:	d90a      	bls.n	1ac14 <bt_l2cap_connected+0x24>
   1abfe:	482b      	ldr	r0, [pc, #172]	; (1acac <bt_l2cap_connected+0xbc>)
   1ac00:	4639      	mov	r1, r7
   1ac02:	f240 1281 	movw	r2, #385	; 0x181
   1ac06:	f00c f8cf 	bl	26da8 <assert_print>
   1ac0a:	f240 1181 	movw	r1, #385	; 0x181
   1ac0e:	4638      	mov	r0, r7
   1ac10:	f00c f8c3 	bl	26d9a <assert_post_action>
   1ac14:	42b5      	cmp	r5, r6
   1ac16:	d301      	bcc.n	1ac1c <bt_l2cap_connected+0x2c>
}
   1ac18:	b003      	add	sp, #12
   1ac1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1ac1c:	686b      	ldr	r3, [r5, #4]
   1ac1e:	a901      	add	r1, sp, #4
   1ac20:	4620      	mov	r0, r4
   1ac22:	4798      	blx	r3
   1ac24:	2800      	cmp	r0, #0
   1ac26:	db35      	blt.n	1ac94 <bt_l2cap_connected+0xa4>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1ac28:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1ac2a:	882a      	ldrh	r2, [r5, #0]
   1ac2c:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1ac2e:	849a      	strh	r2, [r3, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ac30:	2100      	movs	r1, #0
   1ac32:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1ac36:	68a8      	ldr	r0, [r5, #8]
   1ac38:	f3bf 8f5b 	dmb	ish
   1ac3c:	e852 cf00 	ldrex	ip, [r2]
   1ac40:	e842 1e00 	strex	lr, r1, [r2]
   1ac44:	f1be 0f00 	cmp.w	lr, #0
   1ac48:	d1f8      	bne.n	1ac3c <bt_l2cap_connected+0x4c>
   1ac4a:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1ac4e:	6099      	str	r1, [r3, #8]
	return list->tail;
   1ac50:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1ac52:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1ac56:	b9f9      	cbnz	r1, 1ac98 <bt_l2cap_connected+0xa8>
	list->head = node;
   1ac58:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->destroy = destroy;
   1ac5c:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1ac5e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1ac60:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   1ac62:	6843      	ldr	r3, [r0, #4]
   1ac64:	681b      	ldr	r3, [r3, #0]
   1ac66:	b103      	cbz	r3, 1ac6a <bt_l2cap_connected+0x7a>
			chan->ops->connected(chan);
   1ac68:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ac6a:	9b01      	ldr	r3, [sp, #4]
   1ac6c:	f3bf 8f5b 	dmb	ish
   1ac70:	3310      	adds	r3, #16
   1ac72:	e853 2f00 	ldrex	r2, [r3]
   1ac76:	f042 0201 	orr.w	r2, r2, #1
   1ac7a:	e843 2100 	strex	r1, r2, [r3]
   1ac7e:	2900      	cmp	r1, #0
   1ac80:	d1f7      	bne.n	1ac72 <bt_l2cap_connected+0x82>
   1ac82:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1ac86:	9801      	ldr	r0, [sp, #4]
   1ac88:	6843      	ldr	r3, [r0, #4]
   1ac8a:	699b      	ldr	r3, [r3, #24]
   1ac8c:	b113      	cbz	r3, 1ac94 <bt_l2cap_connected+0xa4>
			chan->ops->status(chan, chan->status);
   1ac8e:	f100 0110 	add.w	r1, r0, #16
   1ac92:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1ac94:	350c      	adds	r5, #12
   1ac96:	e7b0      	b.n	1abfa <bt_l2cap_connected+0xa>
	parent->next = child;
   1ac98:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1ac9a:	65a2      	str	r2, [r4, #88]	; 0x58
}
   1ac9c:	e7de      	b.n	1ac5c <bt_l2cap_connected+0x6c>
   1ac9e:	bf00      	nop
   1aca0:	00029a2c 	.word	0x00029a2c
   1aca4:	00029a50 	.word	0x00029a50
   1aca8:	0002b900 	.word	0x0002b900
   1acac:	0002a576 	.word	0x0002a576

0001acb0 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1acb0:	898b      	ldrh	r3, [r1, #12]
   1acb2:	2b03      	cmp	r3, #3
{
   1acb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1acb6:	4606      	mov	r6, r0
   1acb8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1acba:	d804      	bhi.n	1acc6 <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
   1acbc:	4822      	ldr	r0, [pc, #136]	; (1ad48 <l2cap_recv+0x98>)
   1acbe:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   1acc0:	f00c f880 	bl	26dc4 <z_log_minimal_printk>
		return 0;
   1acc4:	e00d      	b.n	1ace2 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   1acc6:	2104      	movs	r1, #4
   1acc8:	f105 0008 	add.w	r0, r5, #8
   1accc:	f002 fb6c 	bl	1d3a8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1acd0:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1acd2:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   1acd4:	4293      	cmp	r3, r2
   1acd6:	4604      	mov	r4, r0
   1acd8:	d006      	beq.n	1ace8 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1acda:	481c      	ldr	r0, [pc, #112]	; (1ad4c <l2cap_recv+0x9c>)
   1acdc:	2145      	movs	r1, #69	; 0x45
   1acde:	f00c f871 	bl	26dc4 <z_log_minimal_printk>
}
   1ace2:	2000      	movs	r0, #0
   1ace4:	b002      	add	sp, #8
   1ace6:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   1ace8:	7842      	ldrb	r2, [r0, #1]
   1acea:	b912      	cbnz	r2, 1acf2 <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1acec:	4818      	ldr	r0, [pc, #96]	; (1ad50 <l2cap_recv+0xa0>)
   1acee:	2145      	movs	r1, #69	; 0x45
   1acf0:	e7e6      	b.n	1acc0 <l2cap_recv+0x10>
	switch (hdr->code) {
   1acf2:	7802      	ldrb	r2, [r0, #0]
   1acf4:	2a01      	cmp	r2, #1
   1acf6:	d0f4      	beq.n	1ace2 <l2cap_recv+0x32>
   1acf8:	2a13      	cmp	r2, #19
   1acfa:	d104      	bne.n	1ad06 <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   1acfc:	2b01      	cmp	r3, #1
   1acfe:	d8f0      	bhi.n	1ace2 <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
   1ad00:	4814      	ldr	r0, [pc, #80]	; (1ad54 <l2cap_recv+0xa4>)
   1ad02:	2145      	movs	r1, #69	; 0x45
   1ad04:	e7dc      	b.n	1acc0 <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1ad06:	4814      	ldr	r0, [pc, #80]	; (1ad58 <l2cap_recv+0xa8>)
   1ad08:	2157      	movs	r1, #87	; 0x57
   1ad0a:	f00c f85b 	bl	26dc4 <z_log_minimal_printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ad0e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   1ad10:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ad12:	2202      	movs	r2, #2
   1ad14:	2001      	movs	r0, #1
   1ad16:	f7ff ff4d 	bl	1abb4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1ad1a:	4604      	mov	r4, r0
   1ad1c:	2800      	cmp	r0, #0
   1ad1e:	d0e0      	beq.n	1ace2 <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
   1ad20:	2102      	movs	r1, #2
   1ad22:	3008      	adds	r0, #8
   1ad24:	f002 fb5e 	bl	1d3e4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ad28:	2300      	movs	r3, #0
   1ad2a:	7003      	strb	r3, [r0, #0]
   1ad2c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1ad2e:	4622      	mov	r2, r4
   1ad30:	9300      	str	r3, [sp, #0]
   1ad32:	2105      	movs	r1, #5
   1ad34:	4628      	mov	r0, r5
   1ad36:	f00c ffe6 	bl	27d06 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1ad3a:	2800      	cmp	r0, #0
   1ad3c:	d0d1      	beq.n	1ace2 <l2cap_recv+0x32>
		net_buf_unref(buf);
   1ad3e:	4620      	mov	r0, r4
   1ad40:	f002 fa3a 	bl	1d1b8 <net_buf_unref>
   1ad44:	e7cd      	b.n	1ace2 <l2cap_recv+0x32>
   1ad46:	bf00      	nop
   1ad48:	0002b931 	.word	0x0002b931
   1ad4c:	0002b954 	.word	0x0002b954
   1ad50:	0002b97a 	.word	0x0002b97a
   1ad54:	0002b9a0 	.word	0x0002b9a0
   1ad58:	0002b9c1 	.word	0x0002b9c1

0001ad5c <bt_l2cap_recv>:
{
   1ad5c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1ad5e:	898b      	ldrh	r3, [r1, #12]
   1ad60:	2b03      	cmp	r3, #3
{
   1ad62:	4605      	mov	r5, r0
   1ad64:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1ad66:	d808      	bhi.n	1ad7a <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   1ad68:	480e      	ldr	r0, [pc, #56]	; (1ada4 <bt_l2cap_recv+0x48>)
   1ad6a:	2145      	movs	r1, #69	; 0x45
   1ad6c:	f00c f82a 	bl	26dc4 <z_log_minimal_printk>
	net_buf_unref(buf);
   1ad70:	4620      	mov	r0, r4
}
   1ad72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1ad76:	f002 ba1f 	b.w	1d1b8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ad7a:	2104      	movs	r1, #4
   1ad7c:	f104 0008 	add.w	r0, r4, #8
   1ad80:	f002 fb12 	bl	1d3a8 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1ad84:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1ad86:	4628      	mov	r0, r5
   1ad88:	4611      	mov	r1, r2
   1ad8a:	f00c ffd5 	bl	27d38 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ad8e:	b920      	cbnz	r0, 1ad9a <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1ad90:	4805      	ldr	r0, [pc, #20]	; (1ada8 <bt_l2cap_recv+0x4c>)
   1ad92:	2157      	movs	r1, #87	; 0x57
   1ad94:	f00c f816 	bl	26dc4 <z_log_minimal_printk>
		net_buf_unref(buf);
   1ad98:	e7ea      	b.n	1ad70 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   1ad9a:	6843      	ldr	r3, [r0, #4]
   1ad9c:	4621      	mov	r1, r4
   1ad9e:	691b      	ldr	r3, [r3, #16]
   1ada0:	4798      	blx	r3
   1ada2:	e7e5      	b.n	1ad70 <bt_l2cap_recv+0x14>
   1ada4:	0002b9e4 	.word	0x0002b9e4
   1ada8:	0002ba06 	.word	0x0002ba06

0001adac <bt_l2cap_update_conn_param>:
{
   1adac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1adae:	460d      	mov	r5, r1
	ident++;
   1adb0:	4916      	ldr	r1, [pc, #88]	; (1ae0c <bt_l2cap_update_conn_param+0x60>)
   1adb2:	780b      	ldrb	r3, [r1, #0]
   1adb4:	3301      	adds	r3, #1
	if (!ident) {
   1adb6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1adba:	bf08      	it	eq
   1adbc:	2301      	moveq	r3, #1
   1adbe:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1adc0:	7809      	ldrb	r1, [r1, #0]
{
   1adc2:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1adc4:	2208      	movs	r2, #8
   1adc6:	2012      	movs	r0, #18
   1adc8:	f7ff fef4 	bl	1abb4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1adcc:	4604      	mov	r4, r0
   1adce:	b1d0      	cbz	r0, 1ae06 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1add0:	2108      	movs	r1, #8
   1add2:	4408      	add	r0, r1
   1add4:	f002 fb06 	bl	1d3e4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1add8:	882b      	ldrh	r3, [r5, #0]
   1adda:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1addc:	886b      	ldrh	r3, [r5, #2]
   1adde:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1ade0:	88ab      	ldrh	r3, [r5, #4]
   1ade2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1ade4:	88eb      	ldrh	r3, [r5, #6]
   1ade6:	80c3      	strh	r3, [r0, #6]
   1ade8:	2300      	movs	r3, #0
   1adea:	9300      	str	r3, [sp, #0]
   1adec:	4622      	mov	r2, r4
   1adee:	2105      	movs	r1, #5
   1adf0:	4630      	mov	r0, r6
   1adf2:	f00c ff88 	bl	27d06 <bt_l2cap_send_cb>
	if (err) {
   1adf6:	4605      	mov	r5, r0
   1adf8:	b110      	cbz	r0, 1ae00 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1adfa:	4620      	mov	r0, r4
   1adfc:	f002 f9dc 	bl	1d1b8 <net_buf_unref>
}
   1ae00:	4628      	mov	r0, r5
   1ae02:	b002      	add	sp, #8
   1ae04:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1ae06:	f06f 050b 	mvn.w	r5, #11
   1ae0a:	e7f9      	b.n	1ae00 <bt_l2cap_update_conn_param+0x54>
   1ae0c:	20004b1c 	.word	0x20004b1c

0001ae10 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1ae10:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1ae12:	7a83      	ldrb	r3, [r0, #10]
   1ae14:	2b07      	cmp	r3, #7
   1ae16:	d006      	beq.n	1ae26 <att_get+0x16>
		BT_WARN("Not connected");
   1ae18:	4811      	ldr	r0, [pc, #68]	; (1ae60 <att_get+0x50>)
   1ae1a:	2157      	movs	r1, #87	; 0x57
   1ae1c:	f00b ffd2 	bl	26dc4 <z_log_minimal_printk>
		return NULL;
   1ae20:	2400      	movs	r4, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   1ae22:	4620      	mov	r0, r4
   1ae24:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1ae26:	2104      	movs	r1, #4
   1ae28:	f00c ff86 	bl	27d38 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ae2c:	4604      	mov	r4, r0
   1ae2e:	b920      	cbnz	r0, 1ae3a <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1ae30:	480c      	ldr	r0, [pc, #48]	; (1ae64 <att_get+0x54>)
   1ae32:	2145      	movs	r1, #69	; 0x45
   1ae34:	f00b ffc6 	bl	26dc4 <z_log_minimal_printk>
		return NULL;
   1ae38:	e7f3      	b.n	1ae22 <att_get+0x12>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   1ae3a:	2102      	movs	r1, #2
   1ae3c:	3094      	adds	r0, #148	; 0x94
   1ae3e:	f00c ffef 	bl	27e20 <atomic_test_bit>
   1ae42:	b950      	cbnz	r0, 1ae5a <att_get+0x4a>
   1ae44:	4908      	ldr	r1, [pc, #32]	; (1ae68 <att_get+0x58>)
   1ae46:	4809      	ldr	r0, [pc, #36]	; (1ae6c <att_get+0x5c>)
   1ae48:	f640 322d 	movw	r2, #2861	; 0xb2d
   1ae4c:	f00b ffac 	bl	26da8 <assert_print>
   1ae50:	4805      	ldr	r0, [pc, #20]	; (1ae68 <att_get+0x58>)
   1ae52:	f640 312d 	movw	r1, #2861	; 0xb2d
   1ae56:	f00b ffa0 	bl	26d9a <assert_post_action>
	return att_chan->att;
   1ae5a:	f854 4c04 	ldr.w	r4, [r4, #-4]
   1ae5e:	e7e0      	b.n	1ae22 <att_get+0x12>
   1ae60:	0002ba47 	.word	0x0002ba47
   1ae64:	0002ba5a 	.word	0x0002ba5a
   1ae68:	0002ba7a 	.word	0x0002ba7a
   1ae6c:	0002a576 	.word	0x0002a576

0001ae70 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1ae70:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1ae72:	3804      	subs	r0, #4
   1ae74:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1ae76:	a901      	add	r1, sp, #4
   1ae78:	4802      	ldr	r0, [pc, #8]	; (1ae84 <bt_att_released+0x14>)
   1ae7a:	f005 fe15 	bl	20aa8 <k_mem_slab_free>
}
   1ae7e:	b003      	add	sp, #12
   1ae80:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae84:	200009ec 	.word	0x200009ec

0001ae88 <tx_meta_data_free>:
{
   1ae88:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   1ae8a:	4604      	mov	r4, r0
   1ae8c:	b940      	cbnz	r0, 1aea0 <tx_meta_data_free+0x18>
   1ae8e:	490a      	ldr	r1, [pc, #40]	; (1aeb8 <tx_meta_data_free+0x30>)
   1ae90:	480a      	ldr	r0, [pc, #40]	; (1aebc <tx_meta_data_free+0x34>)
   1ae92:	22a4      	movs	r2, #164	; 0xa4
   1ae94:	f00b ff88 	bl	26da8 <assert_print>
   1ae98:	4807      	ldr	r0, [pc, #28]	; (1aeb8 <tx_meta_data_free+0x30>)
   1ae9a:	21a4      	movs	r1, #164	; 0xa4
   1ae9c:	f00b ff7d 	bl	26d9a <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   1aea0:	2100      	movs	r1, #0
   1aea2:	4620      	mov	r0, r4
   1aea4:	2214      	movs	r2, #20
   1aea6:	f00c fa5d 	bl	27364 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1aeaa:	4621      	mov	r1, r4
   1aeac:	4804      	ldr	r0, [pc, #16]	; (1aec0 <tx_meta_data_free+0x38>)
}
   1aeae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1aeb2:	f00e ba8e 	b.w	293d2 <k_queue_append>
   1aeb6:	bf00      	nop
   1aeb8:	0002ba7a 	.word	0x0002ba7a
   1aebc:	0002a576 	.word	0x0002a576
   1aec0:	20000a90 	.word	0x20000a90

0001aec4 <find_type_cb>:
{
   1aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1aec8:	f8d2 9000 	ldr.w	r9, [r2]
{
   1aecc:	b091      	sub	sp, #68	; 0x44
   1aece:	4607      	mov	r7, r0
   1aed0:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aed2:	2500      	movs	r5, #0
   1aed4:	f642 0301 	movw	r3, #10241	; 0x2801
   1aed8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1aeda:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aede:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1aee2:	a90b      	add	r1, sp, #44	; 0x2c
{
   1aee4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aee6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1aeea:	f00c fa59 	bl	273a0 <bt_uuid_cmp>
   1aeee:	2800      	cmp	r0, #0
   1aef0:	d060      	beq.n	1afb4 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1aef2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aef6:	6838      	ldr	r0, [r7, #0]
   1aef8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1aefc:	a90b      	add	r1, sp, #44	; 0x2c
   1aefe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1af02:	f00c fa4d 	bl	273a0 <bt_uuid_cmp>
   1af06:	b138      	cbz	r0, 1af18 <find_type_cb+0x54>
		if (data->group &&
   1af08:	68a3      	ldr	r3, [r4, #8]
   1af0a:	b11b      	cbz	r3, 1af14 <find_type_cb+0x50>
   1af0c:	885a      	ldrh	r2, [r3, #2]
   1af0e:	42b2      	cmp	r2, r6
   1af10:	d200      	bcs.n	1af14 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1af12:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1af14:	2001      	movs	r0, #1
   1af16:	e009      	b.n	1af2c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1af18:	6861      	ldr	r1, [r4, #4]
   1af1a:	4608      	mov	r0, r1
   1af1c:	f00c ff21 	bl	27d62 <net_buf_frags_len>
   1af20:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1af24:	1a1b      	subs	r3, r3, r0
   1af26:	2b03      	cmp	r3, #3
   1af28:	d803      	bhi.n	1af32 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1af2a:	2000      	movs	r0, #0
}
   1af2c:	b011      	add	sp, #68	; 0x44
   1af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1af32:	4608      	mov	r0, r1
   1af34:	f002 f99c 	bl	1d270 <net_buf_frag_last>
   1af38:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1af3a:	6860      	ldr	r0, [r4, #4]
   1af3c:	f00c ff11 	bl	27d62 <net_buf_frags_len>
   1af40:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1af44:	f105 0b08 	add.w	fp, r5, #8
   1af48:	ebaa 0a00 	sub.w	sl, sl, r0
   1af4c:	4658      	mov	r0, fp
   1af4e:	f00d fe6c 	bl	28c2a <net_buf_simple_tailroom>
   1af52:	4582      	cmp	sl, r0
   1af54:	d231      	bcs.n	1afba <find_type_cb+0xf6>
   1af56:	6860      	ldr	r0, [r4, #4]
   1af58:	f00c ff03 	bl	27d62 <net_buf_frags_len>
   1af5c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1af60:	1a18      	subs	r0, r3, r0
	if (!len) {
   1af62:	b970      	cbnz	r0, 1af82 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1af64:	6863      	ldr	r3, [r4, #4]
   1af66:	7998      	ldrb	r0, [r3, #6]
   1af68:	f001 fe94 	bl	1cc94 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1af6c:	2200      	movs	r2, #0
   1af6e:	2300      	movs	r3, #0
   1af70:	f00d fe4a 	bl	28c08 <net_buf_alloc_fixed>
		if (!frag) {
   1af74:	4605      	mov	r5, r0
   1af76:	2800      	cmp	r0, #0
   1af78:	d0d7      	beq.n	1af2a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1af7a:	4601      	mov	r1, r0
   1af7c:	6860      	ldr	r0, [r4, #4]
   1af7e:	f002 f9b7 	bl	1d2f0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1af82:	2300      	movs	r3, #0
   1af84:	9300      	str	r3, [sp, #0]
   1af86:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1af8a:	4639      	mov	r1, r7
   1af8c:	2310      	movs	r3, #16
   1af8e:	aa02      	add	r2, sp, #8
   1af90:	4640      	mov	r0, r8
   1af92:	47c8      	blx	r9
	if (read < 0) {
   1af94:	1e07      	subs	r7, r0, #0
   1af96:	db0d      	blt.n	1afb4 <find_type_cb+0xf0>
	if (read != data->value_len) {
   1af98:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1af9a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1af9c:	42ba      	cmp	r2, r7
   1af9e:	d02b      	beq.n	1aff8 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1afa0:	4601      	mov	r1, r0
   1afa2:	a80b      	add	r0, sp, #44	; 0x2c
   1afa4:	f00c fa2a 	bl	273fc <bt_uuid_create>
   1afa8:	b958      	cbnz	r0, 1afc2 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1afaa:	7c22      	ldrb	r2, [r4, #16]
   1afac:	4814      	ldr	r0, [pc, #80]	; (1b000 <find_type_cb+0x13c>)
   1afae:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   1afb0:	f00b ff08 	bl	26dc4 <z_log_minimal_printk>
	data->group = NULL;
   1afb4:	2300      	movs	r3, #0
   1afb6:	60a3      	str	r3, [r4, #8]
   1afb8:	e7ac      	b.n	1af14 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1afba:	4658      	mov	r0, fp
   1afbc:	f00d fe35 	bl	28c2a <net_buf_simple_tailroom>
   1afc0:	e7cf      	b.n	1af62 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1afc2:	b2fa      	uxtb	r2, r7
   1afc4:	a902      	add	r1, sp, #8
   1afc6:	a806      	add	r0, sp, #24
   1afc8:	f00c fa18 	bl	273fc <bt_uuid_create>
   1afcc:	b918      	cbnz	r0, 1afd6 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   1afce:	480d      	ldr	r0, [pc, #52]	; (1b004 <find_type_cb+0x140>)
   1afd0:	463a      	mov	r2, r7
   1afd2:	2157      	movs	r1, #87	; 0x57
   1afd4:	e7ec      	b.n	1afb0 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1afd6:	a906      	add	r1, sp, #24
   1afd8:	a80b      	add	r0, sp, #44	; 0x2c
   1afda:	f00c f9e1 	bl	273a0 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1afde:	2800      	cmp	r0, #0
   1afe0:	d1e8      	bne.n	1afb4 <find_type_cb+0xf0>
	data->err = 0x00;
   1afe2:	2300      	movs	r3, #0
   1afe4:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1afe6:	2104      	movs	r1, #4
   1afe8:	f105 0008 	add.w	r0, r5, #8
   1afec:	f002 f9fa 	bl	1d3e4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1aff0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1aff2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1aff4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1aff6:	e78d      	b.n	1af14 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1aff8:	a902      	add	r1, sp, #8
   1affa:	f00c f97f 	bl	272fc <memcmp>
   1affe:	e7ee      	b.n	1afde <find_type_cb+0x11a>
   1b000:	0002baa9 	.word	0x0002baa9
   1b004:	0002bacd 	.word	0x0002bacd

0001b008 <bt_att_connected>:
{
   1b008:	b510      	push	{r4, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1b00a:	1f02      	subs	r2, r0, #4
{
   1b00c:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1b00e:	3094      	adds	r0, #148	; 0x94
   1b010:	f3bf 8f5b 	dmb	ish
   1b014:	e850 3f00 	ldrex	r3, [r0]
   1b018:	f043 0304 	orr.w	r3, r3, #4
   1b01c:	e840 3100 	strex	r1, r3, [r0]
   1b020:	2900      	cmp	r1, #0
   1b022:	d1f7      	bne.n	1b014 <bt_att_connected+0xc>
   1b024:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1b028:	2103      	movs	r1, #3
   1b02a:	f00c fef9 	bl	27e20 <atomic_test_bit>
   1b02e:	b910      	cbnz	r0, 1b036 <bt_att_connected+0x2e>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b030:	2317      	movs	r3, #23
   1b032:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b034:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1b036:	4610      	mov	r0, r2
   1b038:	f00c ff50 	bl	27edc <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1b03c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1b040:	4903      	ldr	r1, [pc, #12]	; (1b050 <bt_att_connected+0x48>)
   1b042:	f006 fd07 	bl	21a54 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1b046:	6820      	ldr	r0, [r4, #0]
}
   1b048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1b04c:	f001 bdc4 	b.w	1cbd8 <bt_gatt_connected>
   1b050:	0001bda1 	.word	0x0001bda1

0001b054 <read_group_cb>:
{
   1b054:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b058:	4605      	mov	r5, r0
   1b05a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b05c:	f04f 0800 	mov.w	r8, #0
   1b060:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b064:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1b066:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b068:	f88d 8008 	strb.w	r8, [sp, #8]
   1b06c:	a902      	add	r1, sp, #8
{
   1b06e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b070:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b074:	f00c f994 	bl	273a0 <bt_uuid_cmp>
   1b078:	b1a0      	cbz	r0, 1b0a4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b07a:	f642 0301 	movw	r3, #10241	; 0x2801
   1b07e:	6828      	ldr	r0, [r5, #0]
   1b080:	f88d 800c 	strb.w	r8, [sp, #12]
   1b084:	a903      	add	r1, sp, #12
   1b086:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b08a:	f00c f989 	bl	273a0 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b08e:	b148      	cbz	r0, 1b0a4 <read_group_cb+0x50>
		if (data->group &&
   1b090:	6923      	ldr	r3, [r4, #16]
   1b092:	b11b      	cbz	r3, 1b09c <read_group_cb+0x48>
   1b094:	885a      	ldrh	r2, [r3, #2]
   1b096:	42b2      	cmp	r2, r6
   1b098:	d200      	bcs.n	1b09c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1b09a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1b09c:	2001      	movs	r0, #1
}
   1b09e:	b004      	add	sp, #16
   1b0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b0a4:	6861      	ldr	r1, [r4, #4]
   1b0a6:	6828      	ldr	r0, [r5, #0]
   1b0a8:	f00c f97a 	bl	273a0 <bt_uuid_cmp>
   1b0ac:	b110      	cbz	r0, 1b0b4 <read_group_cb+0x60>
		data->group = NULL;
   1b0ae:	2300      	movs	r3, #0
   1b0b0:	6123      	str	r3, [r4, #16]
   1b0b2:	e7f3      	b.n	1b09c <read_group_cb+0x48>
	if (data->rsp->len &&
   1b0b4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1b0b6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1b0b8:	781a      	ldrb	r2, [r3, #0]
   1b0ba:	b132      	cbz	r2, 1b0ca <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1b0bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1b0be:	8981      	ldrh	r1, [r0, #12]
   1b0c0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1b0c2:	4293      	cmp	r3, r2
   1b0c4:	da01      	bge.n	1b0ca <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1b0c6:	2000      	movs	r0, #0
   1b0c8:	e7e9      	b.n	1b09e <read_group_cb+0x4a>
   1b0ca:	2104      	movs	r1, #4
   1b0cc:	3008      	adds	r0, #8
   1b0ce:	f002 f989 	bl	1d3e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1b0d2:	4b09      	ldr	r3, [pc, #36]	; (1b0f8 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1b0d4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1b0d6:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1b0d8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1b0da:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1b0dc:	4629      	mov	r1, r5
   1b0de:	9300      	str	r3, [sp, #0]
   1b0e0:	9401      	str	r4, [sp, #4]
   1b0e2:	2300      	movs	r3, #0
   1b0e4:	4638      	mov	r0, r7
   1b0e6:	f00c ff6c 	bl	27fc2 <att_chan_read>
	if (read < 0) {
   1b0ea:	2800      	cmp	r0, #0
   1b0ec:	dbeb      	blt.n	1b0c6 <read_group_cb+0x72>
	if (!data->group) {
   1b0ee:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1b0f0:	3800      	subs	r0, #0
   1b0f2:	bf18      	it	ne
   1b0f4:	2001      	movne	r0, #1
   1b0f6:	e7d2      	b.n	1b09e <read_group_cb+0x4a>
   1b0f8:	00027f3d 	.word	0x00027f3d

0001b0fc <chan_send>:
{
   1b0fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   1b100:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1b102:	f8d1 8014 	ldr.w	r8, [r1, #20]
{
   1b106:	4606      	mov	r6, r0
   1b108:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1b10a:	3098      	adds	r0, #152	; 0x98
   1b10c:	2102      	movs	r1, #2
   1b10e:	f00c fe87 	bl	27e20 <atomic_test_bit>
   1b112:	2800      	cmp	r0, #0
   1b114:	d049      	beq.n	1b1aa <chan_send+0xae>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1b116:	781b      	ldrb	r3, [r3, #0]
   1b118:	2bd2      	cmp	r3, #210	; 0xd2
   1b11a:	d114      	bne.n	1b146 <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   1b11c:	6833      	ldr	r3, [r6, #0]
   1b11e:	4621      	mov	r1, r4
   1b120:	6818      	ldr	r0, [r3, #0]
   1b122:	f00d fd6b 	bl	28bfc <bt_smp_sign>
		if (err) {
   1b126:	4605      	mov	r5, r0
   1b128:	b168      	cbz	r0, 1b146 <chan_send+0x4a>
			BT_ERR("Error signing data");
   1b12a:	4821      	ldr	r0, [pc, #132]	; (1b1b0 <chan_send+0xb4>)
   1b12c:	2145      	movs	r1, #69	; 0x45
   1b12e:	f00b fe49 	bl	26dc4 <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b132:	6960      	ldr	r0, [r4, #20]
   1b134:	f7ff fea8 	bl	1ae88 <tx_meta_data_free>
			net_buf_unref(buf);
   1b138:	4620      	mov	r0, r4
   1b13a:	f002 f83d 	bl	1d1b8 <net_buf_unref>
}
   1b13e:	4628      	mov	r0, r5
   1b140:	b003      	add	sp, #12
   1b142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1b146:	f104 0008 	add.w	r0, r4, #8
   1b14a:	f00d fd6a 	bl	28c22 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1b14e:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
   1b150:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   1b154:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1b156:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
   1b158:	f8c8 6000 	str.w	r6, [r8]
	state->offset = net_buf_simple_headroom(buf);
   1b15c:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1b15e:	7818      	ldrb	r0, [r3, #0]
   1b160:	f00c fe19 	bl	27d96 <att_op_get_type>
	switch (op_type) {
   1b164:	2805      	cmp	r0, #5
   1b166:	d813      	bhi.n	1b190 <chan_send+0x94>
   1b168:	4b12      	ldr	r3, [pc, #72]	; (1b1b4 <chan_send+0xb8>)
   1b16a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1b16e:	f8cd 8000 	str.w	r8, [sp]
   1b172:	4628      	mov	r0, r5
   1b174:	4622      	mov	r2, r4
   1b176:	2104      	movs	r1, #4
   1b178:	f00c fdc5 	bl	27d06 <bt_l2cap_send_cb>
	if (err) {
   1b17c:	4605      	mov	r5, r0
   1b17e:	2800      	cmp	r0, #0
   1b180:	d0dd      	beq.n	1b13e <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   1b182:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1b184:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1b188:	fa10 f787 	uxtah	r7, r0, r7
   1b18c:	60a7      	str	r7, [r4, #8]
}
   1b18e:	e7d6      	b.n	1b13e <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   1b190:	4909      	ldr	r1, [pc, #36]	; (1b1b8 <chan_send+0xbc>)
   1b192:	480a      	ldr	r0, [pc, #40]	; (1b1bc <chan_send+0xc0>)
   1b194:	f240 2256 	movw	r2, #598	; 0x256
   1b198:	f00b fe06 	bl	26da8 <assert_print>
   1b19c:	4806      	ldr	r0, [pc, #24]	; (1b1b8 <chan_send+0xbc>)
   1b19e:	f240 2156 	movw	r1, #598	; 0x256
   1b1a2:	f00b fdfa 	bl	26d9a <assert_post_action>
	return att_unknown;
   1b1a6:	4b06      	ldr	r3, [pc, #24]	; (1b1c0 <chan_send+0xc4>)
   1b1a8:	e7e1      	b.n	1b16e <chan_send+0x72>
		return -EINVAL;
   1b1aa:	f06f 0515 	mvn.w	r5, #21
   1b1ae:	e7c6      	b.n	1b13e <chan_send+0x42>
   1b1b0:	0002baf1 	.word	0x0002baf1
   1b1b4:	00029df0 	.word	0x00029df0
   1b1b8:	0002ba7a 	.word	0x0002ba7a
   1b1bc:	0002a576 	.word	0x0002a576
   1b1c0:	000283b7 	.word	0x000283b7

0001b1c4 <bt_att_chan_req_send>:
{
   1b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1c6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   1b1c8:	4604      	mov	r4, r0
   1b1ca:	b950      	cbnz	r0, 1b1e2 <bt_att_chan_req_send+0x1e>
   1b1cc:	4924      	ldr	r1, [pc, #144]	; (1b260 <bt_att_chan_req_send+0x9c>)
   1b1ce:	4825      	ldr	r0, [pc, #148]	; (1b264 <bt_att_chan_req_send+0xa0>)
   1b1d0:	f240 3217 	movw	r2, #791	; 0x317
   1b1d4:	f00b fde8 	bl	26da8 <assert_print>
   1b1d8:	4821      	ldr	r0, [pc, #132]	; (1b260 <bt_att_chan_req_send+0x9c>)
   1b1da:	f240 3117 	movw	r1, #791	; 0x317
   1b1de:	f00b fddc 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(req);
   1b1e2:	b955      	cbnz	r5, 1b1fa <bt_att_chan_req_send+0x36>
   1b1e4:	491e      	ldr	r1, [pc, #120]	; (1b260 <bt_att_chan_req_send+0x9c>)
   1b1e6:	481f      	ldr	r0, [pc, #124]	; (1b264 <bt_att_chan_req_send+0xa0>)
   1b1e8:	f44f 7246 	mov.w	r2, #792	; 0x318
   1b1ec:	f00b fddc 	bl	26da8 <assert_print>
   1b1f0:	481b      	ldr	r0, [pc, #108]	; (1b260 <bt_att_chan_req_send+0x9c>)
   1b1f2:	f44f 7146 	mov.w	r1, #792	; 0x318
   1b1f6:	f00b fdd0 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1b1fa:	686b      	ldr	r3, [r5, #4]
   1b1fc:	b953      	cbnz	r3, 1b214 <bt_att_chan_req_send+0x50>
   1b1fe:	4918      	ldr	r1, [pc, #96]	; (1b260 <bt_att_chan_req_send+0x9c>)
   1b200:	4818      	ldr	r0, [pc, #96]	; (1b264 <bt_att_chan_req_send+0xa0>)
   1b202:	f240 3219 	movw	r2, #793	; 0x319
   1b206:	f00b fdcf 	bl	26da8 <assert_print>
   1b20a:	4815      	ldr	r0, [pc, #84]	; (1b260 <bt_att_chan_req_send+0x9c>)
   1b20c:	f240 3119 	movw	r1, #793	; 0x319
   1b210:	f00b fdc3 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1b214:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   1b218:	b153      	cbz	r3, 1b230 <bt_att_chan_req_send+0x6c>
   1b21a:	4911      	ldr	r1, [pc, #68]	; (1b260 <bt_att_chan_req_send+0x9c>)
   1b21c:	4811      	ldr	r0, [pc, #68]	; (1b264 <bt_att_chan_req_send+0xa0>)
   1b21e:	f240 321a 	movw	r2, #794	; 0x31a
   1b222:	f00b fdc1 	bl	26da8 <assert_print>
   1b226:	480e      	ldr	r0, [pc, #56]	; (1b260 <bt_att_chan_req_send+0x9c>)
   1b228:	f240 311a 	movw	r1, #794	; 0x31a
   1b22c:	f00b fdb5 	bl	26d9a <assert_post_action>
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b230:	68ae      	ldr	r6, [r5, #8]
   1b232:	4630      	mov	r0, r6
   1b234:	f00c fd95 	bl	27d62 <net_buf_frags_len>
   1b238:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1b23a:	4283      	cmp	r3, r0
   1b23c:	d30c      	bcc.n	1b258 <bt_att_chan_req_send+0x94>
	req->buf = NULL;
   1b23e:	2700      	movs	r7, #0
	chan->req = req;
   1b240:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	return chan_send(chan, buf);
   1b244:	4631      	mov	r1, r6
	req->buf = NULL;
   1b246:	60af      	str	r7, [r5, #8]
	return chan_send(chan, buf);
   1b248:	4620      	mov	r0, r4
   1b24a:	f7ff ff57 	bl	1b0fc <chan_send>
	if (err) {
   1b24e:	b110      	cbz	r0, 1b256 <bt_att_chan_req_send+0x92>
		req->buf = buf;
   1b250:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   1b252:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
}
   1b256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1b258:	f06f 0079 	mvn.w	r0, #121	; 0x79
	return chan_req_send(chan, req);
   1b25c:	e7fb      	b.n	1b256 <bt_att_chan_req_send+0x92>
   1b25e:	bf00      	nop
   1b260:	0002ba7a 	.word	0x0002ba7a
   1b264:	0002a576 	.word	0x0002a576

0001b268 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1b268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1b26a:	2300      	movs	r3, #0
{
   1b26c:	4607      	mov	r7, r0
   1b26e:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1b270:	482d      	ldr	r0, [pc, #180]	; (1b328 <bt_att_accept+0xc0>)
   1b272:	2200      	movs	r2, #0
   1b274:	4669      	mov	r1, sp
   1b276:	f005 fbbd 	bl	209f4 <k_mem_slab_alloc>
   1b27a:	4605      	mov	r5, r0
   1b27c:	b138      	cbz	r0, 1b28e <bt_att_accept+0x26>
		BT_ERR("No available ATT context for conn %p", conn);
   1b27e:	482b      	ldr	r0, [pc, #172]	; (1b32c <bt_att_accept+0xc4>)
   1b280:	463a      	mov	r2, r7
   1b282:	2145      	movs	r1, #69	; 0x45
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1b284:	f00b fd9e 	bl	26dc4 <z_log_minimal_printk>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1b288:	f06f 050b 	mvn.w	r5, #11
   1b28c:	e048      	b.n	1b320 <bt_att_accept+0xb8>
	return z_impl_z_current_get();
   1b28e:	f007 fc7f 	bl	22b90 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1b292:	4b27      	ldr	r3, [pc, #156]	; (1b330 <bt_att_accept+0xc8>)
	(void)memset(att, 0, sizeof(*att));
   1b294:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1b296:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1b298:	2230      	movs	r2, #48	; 0x30
   1b29a:	9800      	ldr	r0, [sp, #0]
   1b29c:	f00c f862 	bl	27364 <memset>
	att->conn = conn;
   1b2a0:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1b2a2:	4824      	ldr	r0, [pc, #144]	; (1b334 <bt_att_accept+0xcc>)
	list->tail = NULL;
   1b2a4:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   1b2a6:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   1b2aa:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   1b2ae:	2200      	movs	r2, #0
   1b2b0:	2300      	movs	r3, #0
   1b2b2:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b2b4:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1b2b6:	f005 fb9d 	bl	209f4 <k_mem_slab_alloc>
   1b2ba:	4605      	mov	r5, r0
   1b2bc:	b118      	cbz	r0, 1b2c6 <bt_att_accept+0x5e>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1b2be:	6822      	ldr	r2, [r4, #0]
   1b2c0:	481d      	ldr	r0, [pc, #116]	; (1b338 <bt_att_accept+0xd0>)
   1b2c2:	2157      	movs	r1, #87	; 0x57
   1b2c4:	e7de      	b.n	1b284 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   1b2c6:	4601      	mov	r1, r0
   1b2c8:	22f8      	movs	r2, #248	; 0xf8
   1b2ca:	9801      	ldr	r0, [sp, #4]
   1b2cc:	f00c f84a 	bl	27364 <memset>
	chan->chan.chan.ops = &ops;
   1b2d0:	9801      	ldr	r0, [sp, #4]
   1b2d2:	4b1a      	ldr	r3, [pc, #104]	; (1b33c <bt_att_accept+0xd4>)
   1b2d4:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1b2d6:	30a0      	adds	r0, #160	; 0xa0
   1b2d8:	f00e f86e 	bl	293b8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b2dc:	9b01      	ldr	r3, [sp, #4]
   1b2de:	f3bf 8f5b 	dmb	ish
   1b2e2:	3398      	adds	r3, #152	; 0x98
   1b2e4:	e853 2f00 	ldrex	r2, [r3]
   1b2e8:	e843 5100 	strex	r1, r5, [r3]
   1b2ec:	2900      	cmp	r1, #0
   1b2ee:	d1f9      	bne.n	1b2e4 <bt_att_accept+0x7c>
   1b2f0:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1b2f4:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1b2f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	chan->att = att;
   1b2f8:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1b2fa:	b91b      	cbnz	r3, 1b304 <bt_att_accept+0x9c>
   1b2fc:	f104 000c 	add.w	r0, r4, #12
   1b300:	f00e f85a 	bl	293b8 <z_impl_k_queue_init>
	parent->next = child;
   1b304:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1b306:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   1b30a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   1b30c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   1b310:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1b312:	b902      	cbnz	r2, 1b316 <bt_att_accept+0xae>
	list->tail = node;
   1b314:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   1b316:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   1b318:	2b00      	cmp	r3, #0
   1b31a:	d0b5      	beq.n	1b288 <bt_att_accept+0x20>
	}

	*ch = &chan->chan.chan;
   1b31c:	3304      	adds	r3, #4
   1b31e:	6033      	str	r3, [r6, #0]

	return 0;
}
   1b320:	4628      	mov	r0, r5
   1b322:	b003      	add	sp, #12
   1b324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b326:	bf00      	nop
   1b328:	200009cc 	.word	0x200009cc
   1b32c:	0002bb09 	.word	0x0002bb09
   1b330:	20003c5c 	.word	0x20003c5c
   1b334:	200009ec 	.word	0x200009ec
   1b338:	0002bb33 	.word	0x0002bb33
   1b33c:	2000073c 	.word	0x2000073c

0001b340 <read_type_cb>:
{
   1b340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1b344:	f8d2 8000 	ldr.w	r8, [r2]
{
   1b348:	4606      	mov	r6, r0
   1b34a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b34c:	6800      	ldr	r0, [r0, #0]
   1b34e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b350:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   1b354:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b356:	f00c f823 	bl	273a0 <bt_uuid_cmp>
   1b35a:	4607      	mov	r7, r0
   1b35c:	2800      	cmp	r0, #0
   1b35e:	d13e      	bne.n	1b3de <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b360:	4628      	mov	r0, r5
   1b362:	2295      	movs	r2, #149	; 0x95
   1b364:	4631      	mov	r1, r6
   1b366:	f00d fbae 	bl	28ac6 <bt_gatt_check_perm>
   1b36a:	4605      	mov	r5, r0
   1b36c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b36e:	b148      	cbz	r0, 1b384 <read_type_cb+0x44>
		if (data->rsp->len) {
   1b370:	68e3      	ldr	r3, [r4, #12]
   1b372:	781b      	ldrb	r3, [r3, #0]
   1b374:	b923      	cbnz	r3, 1b380 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1b376:	2500      	movs	r5, #0
}
   1b378:	4628      	mov	r0, r5
   1b37a:	b003      	add	sp, #12
   1b37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1b380:	7527      	strb	r7, [r4, #20]
   1b382:	e7f8      	b.n	1b376 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1b384:	68a0      	ldr	r0, [r4, #8]
   1b386:	f001 ff73 	bl	1d270 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1b38a:	2102      	movs	r1, #2
   1b38c:	3008      	adds	r0, #8
   1b38e:	f002 f829 	bl	1d3e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1b392:	4b14      	ldr	r3, [pc, #80]	; (1b3e4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1b394:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1b396:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   1b398:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1b39c:	4631      	mov	r1, r6
   1b39e:	9300      	str	r3, [sp, #0]
   1b3a0:	9401      	str	r4, [sp, #4]
   1b3a2:	462b      	mov	r3, r5
   1b3a4:	4640      	mov	r0, r8
   1b3a6:	f00c fe0c 	bl	27fc2 <att_chan_read>
	if (read < 0) {
   1b3aa:	2800      	cmp	r0, #0
   1b3ac:	da07      	bge.n	1b3be <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1b3ae:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1b3b2:	bf26      	itte	cs
   1b3b4:	4240      	negcs	r0, r0
   1b3b6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1b3b8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1b3ba:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1b3bc:	e7dc      	b.n	1b378 <read_type_cb+0x38>
	if (!data->item) {
   1b3be:	6923      	ldr	r3, [r4, #16]
   1b3c0:	2b00      	cmp	r3, #0
   1b3c2:	d0d8      	beq.n	1b376 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1b3c4:	68a0      	ldr	r0, [r4, #8]
   1b3c6:	f00c fccc 	bl	27d62 <net_buf_frags_len>
   1b3ca:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b3ce:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1b3d0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b3d2:	7818      	ldrb	r0, [r3, #0]
   1b3d4:	4285      	cmp	r5, r0
   1b3d6:	bf94      	ite	ls
   1b3d8:	2500      	movls	r5, #0
   1b3da:	2501      	movhi	r5, #1
   1b3dc:	e7cc      	b.n	1b378 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1b3de:	2501      	movs	r5, #1
   1b3e0:	e7ca      	b.n	1b378 <read_type_cb+0x38>
   1b3e2:	bf00      	nop
   1b3e4:	00027d73 	.word	0x00027d73

0001b3e8 <bt_att_chan_create_pdu>:
{
   1b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b3ea:	1c53      	adds	r3, r2, #1
   1b3ec:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   1b3ee:	4293      	cmp	r3, r2
{
   1b3f0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b3f2:	d906      	bls.n	1b402 <bt_att_chan_create_pdu+0x1a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1b3f4:	481c      	ldr	r0, [pc, #112]	; (1b468 <bt_att_chan_create_pdu+0x80>)
   1b3f6:	2157      	movs	r1, #87	; 0x57
   1b3f8:	f00b fce4 	bl	26dc4 <z_log_minimal_printk>
		return NULL;
   1b3fc:	2400      	movs	r4, #0
}
   1b3fe:	4620      	mov	r0, r4
   1b400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   1b402:	4608      	mov	r0, r1
   1b404:	f00c fcc7 	bl	27d96 <att_op_get_type>
   1b408:	2802      	cmp	r0, #2
   1b40a:	d001      	beq.n	1b410 <bt_att_chan_create_pdu+0x28>
   1b40c:	2804      	cmp	r0, #4
   1b40e:	d110      	bne.n	1b432 <bt_att_chan_create_pdu+0x4a>
   1b410:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1b414:	2700      	movs	r7, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1b416:	2100      	movs	r1, #0
   1b418:	4632      	mov	r2, r6
   1b41a:	463b      	mov	r3, r7
   1b41c:	4608      	mov	r0, r1
   1b41e:	f00c fc6f 	bl	27d00 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1b422:	4604      	mov	r4, r0
   1b424:	b950      	cbnz	r0, 1b43c <bt_att_chan_create_pdu+0x54>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1b426:	4811      	ldr	r0, [pc, #68]	; (1b46c <bt_att_chan_create_pdu+0x84>)
   1b428:	462a      	mov	r2, r5
   1b42a:	2145      	movs	r1, #69	; 0x45
   1b42c:	f00b fcca 	bl	26dc4 <z_log_minimal_printk>
		return NULL;
   1b430:	e7e5      	b.n	1b3fe <bt_att_chan_create_pdu+0x16>
		timeout = K_FOREVER;
   1b432:	f04f 36ff 	mov.w	r6, #4294967295
   1b436:	f04f 37ff 	mov.w	r7, #4294967295
   1b43a:	e7ec      	b.n	1b416 <bt_att_chan_create_pdu+0x2e>
	return z_impl_k_queue_get(queue, timeout);
   1b43c:	480c      	ldr	r0, [pc, #48]	; (1b470 <bt_att_chan_create_pdu+0x88>)
   1b43e:	4632      	mov	r2, r6
   1b440:	463b      	mov	r3, r7
   1b442:	f005 ff19 	bl	21278 <z_impl_k_queue_get>
	if (!data) {
   1b446:	b938      	cbnz	r0, 1b458 <bt_att_chan_create_pdu+0x70>
		BT_WARN("Unable to allocate ATT TX meta");
   1b448:	480a      	ldr	r0, [pc, #40]	; (1b474 <bt_att_chan_create_pdu+0x8c>)
   1b44a:	2157      	movs	r1, #87	; 0x57
   1b44c:	f00b fcba 	bl	26dc4 <z_log_minimal_printk>
		net_buf_unref(buf);
   1b450:	4620      	mov	r0, r4
   1b452:	f001 feb1 	bl	1d1b8 <net_buf_unref>
		return NULL;
   1b456:	e7d1      	b.n	1b3fc <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   1b458:	6160      	str	r0, [r4, #20]
   1b45a:	2101      	movs	r1, #1
   1b45c:	f104 0008 	add.w	r0, r4, #8
   1b460:	f001 ffc0 	bl	1d3e4 <net_buf_simple_add>
	hdr->code = op;
   1b464:	7005      	strb	r5, [r0, #0]
	return buf;
   1b466:	e7ca      	b.n	1b3fe <bt_att_chan_create_pdu+0x16>
   1b468:	0002bb5d 	.word	0x0002bb5d
   1b46c:	0002b8d3 	.word	0x0002b8d3
   1b470:	20000a90 	.word	0x20000a90
   1b474:	0002bb87 	.word	0x0002bb87

0001b478 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1b478:	898b      	ldrh	r3, [r1, #12]
{
   1b47a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b47e:	4607      	mov	r7, r0
   1b480:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1b482:	b933      	cbnz	r3, 1b492 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   1b484:	4835      	ldr	r0, [pc, #212]	; (1b55c <bt_att_recv+0xe4>)
   1b486:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
   1b488:	f00b fc9c 	bl	26dc4 <z_log_minimal_printk>
}
   1b48c:	2000      	movs	r0, #0
   1b48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b492:	2101      	movs	r1, #1
   1b494:	f105 0008 	add.w	r0, r5, #8
   1b498:	f001 ff86 	bl	1d3a8 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1b49c:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1b4a0:	4604      	mov	r4, r0
   1b4a2:	2b00      	cmp	r3, #0
   1b4a4:	d0f2      	beq.n	1b48c <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   1b4a6:	7802      	ldrb	r2, [r0, #0]
   1b4a8:	4e2d      	ldr	r6, [pc, #180]	; (1b560 <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1b4aa:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b4ae:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1b4b0:	f816 1033 	ldrb.w	r1, [r6, r3, lsl #3]
   1b4b4:	4291      	cmp	r1, r2
   1b4b6:	d111      	bne.n	1b4dc <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   1b4b8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1b4bc:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1b4c0:	f893 a002 	ldrb.w	sl, [r3, #2]
   1b4c4:	f1ba 0f01 	cmp.w	sl, #1
   1b4c8:	d11f      	bne.n	1b50a <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1b4ca:	2100      	movs	r1, #0
   1b4cc:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1b4d0:	f00c fe43 	bl	2815a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1b4d4:	b328      	cbz	r0, 1b522 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected request");
   1b4d6:	4823      	ldr	r0, [pc, #140]	; (1b564 <bt_att_recv+0xec>)
   1b4d8:	2157      	movs	r1, #87	; 0x57
   1b4da:	e7d5      	b.n	1b488 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b4dc:	3301      	adds	r3, #1
   1b4de:	2b0e      	cmp	r3, #14
   1b4e0:	d1e6      	bne.n	1b4b0 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1b4e2:	4821      	ldr	r0, [pc, #132]	; (1b568 <bt_att_recv+0xf0>)
   1b4e4:	2157      	movs	r1, #87	; 0x57
   1b4e6:	f00b fc6d 	bl	26dc4 <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1b4ea:	7821      	ldrb	r1, [r4, #0]
   1b4ec:	4608      	mov	r0, r1
   1b4ee:	f00c fc52 	bl	27d96 <att_op_get_type>
   1b4f2:	2800      	cmp	r0, #0
   1b4f4:	d0ca      	beq.n	1b48c <bt_att_recv+0x14>
   1b4f6:	2805      	cmp	r0, #5
   1b4f8:	d0c8      	beq.n	1b48c <bt_att_recv+0x14>
	if (!req) {
   1b4fa:	2900      	cmp	r1, #0
   1b4fc:	d0c6      	beq.n	1b48c <bt_att_recv+0x14>
   1b4fe:	2306      	movs	r3, #6
   1b500:	2200      	movs	r2, #0
   1b502:	4640      	mov	r0, r8
   1b504:	f00c ffc1 	bl	2848a <send_err_rsp.part.0>
   1b508:	e7c0      	b.n	1b48c <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   1b50a:	f1ba 0f05 	cmp.w	sl, #5
   1b50e:	d108      	bne.n	1b522 <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   1b510:	2101      	movs	r1, #1
   1b512:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1b516:	f00c fe20 	bl	2815a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1b51a:	b110      	cbz	r0, 1b522 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected indication");
   1b51c:	4813      	ldr	r0, [pc, #76]	; (1b56c <bt_att_recv+0xf4>)
   1b51e:	2157      	movs	r1, #87	; 0x57
   1b520:	e7b2      	b.n	1b488 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   1b522:	444e      	add	r6, r9
   1b524:	89aa      	ldrh	r2, [r5, #12]
   1b526:	7873      	ldrb	r3, [r6, #1]
   1b528:	4293      	cmp	r3, r2
   1b52a:	d909      	bls.n	1b540 <bt_att_recv+0xc8>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b52c:	7823      	ldrb	r3, [r4, #0]
   1b52e:	4810      	ldr	r0, [pc, #64]	; (1b570 <bt_att_recv+0xf8>)
   1b530:	2145      	movs	r1, #69	; 0x45
   1b532:	f00b fc47 	bl	26dc4 <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   1b536:	f1ba 0f01 	cmp.w	sl, #1
   1b53a:	d1a7      	bne.n	1b48c <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   1b53c:	2304      	movs	r3, #4
   1b53e:	e009      	b.n	1b554 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   1b540:	6873      	ldr	r3, [r6, #4]
   1b542:	4629      	mov	r1, r5
   1b544:	4640      	mov	r0, r8
   1b546:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1b548:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   1b54c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1b54e:	d19d      	bne.n	1b48c <bt_att_recv+0x14>
   1b550:	2800      	cmp	r0, #0
   1b552:	d09b      	beq.n	1b48c <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1b554:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1b556:	2900      	cmp	r1, #0
   1b558:	d098      	beq.n	1b48c <bt_att_recv+0x14>
   1b55a:	e7d1      	b.n	1b500 <bt_att_recv+0x88>
   1b55c:	0002bbab 	.word	0x0002bbab
   1b560:	00029e08 	.word	0x00029e08
   1b564:	0002bbcb 	.word	0x0002bbcb
   1b568:	0002bc34 	.word	0x0002bc34
   1b56c:	0002bbec 	.word	0x0002bbec
   1b570:	0002bc10 	.word	0x0002bc10

0001b574 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1b574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b578:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b57a:	6803      	ldr	r3, [r0, #0]
   1b57c:	460e      	mov	r6, r1
   1b57e:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1b580:	b087      	sub	sp, #28
   1b582:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b584:	bf18      	it	ne
   1b586:	2101      	movne	r1, #1
   1b588:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1b58a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b58c:	f00d fac3 	bl	28b16 <bt_gatt_change_aware>
   1b590:	b958      	cbnz	r0, 1b5aa <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b592:	2105      	movs	r1, #5
   1b594:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b598:	f00c fddf 	bl	2815a <atomic_test_and_set_bit>
   1b59c:	2800      	cmp	r0, #0
   1b59e:	d04e      	beq.n	1b63e <att_write_rsp.constprop.0+0xca>
			return 0;
   1b5a0:	2500      	movs	r5, #0
}
   1b5a2:	4628      	mov	r0, r5
   1b5a4:	b007      	add	sp, #28
   1b5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
   1b5aa:	2f00      	cmp	r7, #0
   1b5ac:	d049      	beq.n	1b642 <att_write_rsp.constprop.0+0xce>
	(void)memset(&data, 0, sizeof(data));
   1b5ae:	2218      	movs	r2, #24
   1b5b0:	2100      	movs	r1, #0
   1b5b2:	4668      	mov	r0, sp
   1b5b4:	f00b fed6 	bl	27364 <memset>
	if (rsp) {
   1b5b8:	f1b8 0f00 	cmp.w	r8, #0
   1b5bc:	d12e      	bne.n	1b61c <att_write_rsp.constprop.0+0xa8>
	data.conn = chan->att->conn;
   1b5be:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b5c0:	4a21      	ldr	r2, [pc, #132]	; (1b648 <att_write_rsp.constprop.0+0xd4>)
	data.conn = chan->att->conn;
   1b5c2:	681b      	ldr	r3, [r3, #0]
   1b5c4:	9300      	str	r3, [sp, #0]
	data.value = value;
   1b5c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b5c8:	9303      	str	r3, [sp, #12]
	data.len = len;
   1b5ca:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1b5ce:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b5d2:	2301      	movs	r3, #1
   1b5d4:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   1b5d8:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b5dc:	466b      	mov	r3, sp
   1b5de:	4639      	mov	r1, r7
   1b5e0:	4638      	mov	r0, r7
	data.req = req;
   1b5e2:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   1b5e6:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b5ea:	f00c fc22 	bl	27e32 <bt_gatt_foreach_attr>
	if (data.err) {
   1b5ee:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1b5f2:	b1ed      	cbz	r5, 1b630 <att_write_rsp.constprop.0+0xbc>
		if (rsp) {
   1b5f4:	f1b8 0f00 	cmp.w	r8, #0
   1b5f8:	d0d2      	beq.n	1b5a0 <att_write_rsp.constprop.0+0x2c>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b5fa:	9b01      	ldr	r3, [sp, #4]
   1b5fc:	6958      	ldr	r0, [r3, #20]
   1b5fe:	f7ff fc43 	bl	1ae88 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b602:	9801      	ldr	r0, [sp, #4]
   1b604:	f001 fdd8 	bl	1d1b8 <net_buf_unref>
	if (!req) {
   1b608:	2e00      	cmp	r6, #0
   1b60a:	d0c9      	beq.n	1b5a0 <att_write_rsp.constprop.0+0x2c>
   1b60c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b610:	463a      	mov	r2, r7
   1b612:	4631      	mov	r1, r6
   1b614:	4620      	mov	r0, r4
   1b616:	f00c ff38 	bl	2848a <send_err_rsp.part.0>
   1b61a:	e7c1      	b.n	1b5a0 <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1b61c:	2200      	movs	r2, #0
   1b61e:	4641      	mov	r1, r8
   1b620:	4620      	mov	r0, r4
   1b622:	f7ff fee1 	bl	1b3e8 <bt_att_chan_create_pdu>
   1b626:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1b628:	2800      	cmp	r0, #0
   1b62a:	d1c8      	bne.n	1b5be <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   1b62c:	250e      	movs	r5, #14
   1b62e:	e7b8      	b.n	1b5a2 <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
   1b630:	9901      	ldr	r1, [sp, #4]
   1b632:	2900      	cmp	r1, #0
   1b634:	d0b4      	beq.n	1b5a0 <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
   1b636:	4620      	mov	r0, r4
   1b638:	f00c fd67 	bl	2810a <bt_att_chan_send_rsp>
   1b63c:	e7b1      	b.n	1b5a2 <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b63e:	2512      	movs	r5, #18
   1b640:	e7af      	b.n	1b5a2 <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b642:	2501      	movs	r5, #1
   1b644:	e7ad      	b.n	1b5a2 <att_write_rsp.constprop.0+0x2e>
   1b646:	bf00      	nop
   1b648:	00027f5d 	.word	0x00027f5d

0001b64c <bt_att_create_pdu>:
{
   1b64c:	b570      	push	{r4, r5, r6, lr}
   1b64e:	460e      	mov	r6, r1
   1b650:	4615      	mov	r5, r2
	att = att_get(conn);
   1b652:	f7ff fbdd 	bl	1ae10 <att_get>
	if (!att) {
   1b656:	b170      	cbz	r0, 1b676 <bt_att_create_pdu+0x2a>
	return list->head;
   1b658:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1b65a:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b65c:	b138      	cbz	r0, 1b66e <bt_att_create_pdu+0x22>
	return node->next;
   1b65e:	f850 39f0 	ldr.w	r3, [r0], #-240
   1b662:	b103      	cbz	r3, 1b666 <bt_att_create_pdu+0x1a>
   1b664:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b666:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b668:	428a      	cmp	r2, r1
   1b66a:	d906      	bls.n	1b67a <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b66c:	b95b      	cbnz	r3, 1b686 <bt_att_create_pdu+0x3a>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1b66e:	4809      	ldr	r0, [pc, #36]	; (1b694 <bt_att_create_pdu+0x48>)
   1b670:	2157      	movs	r1, #87	; 0x57
   1b672:	f00b fba7 	bl	26dc4 <z_log_minimal_printk>
}
   1b676:	2000      	movs	r0, #0
   1b678:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1b67a:	462a      	mov	r2, r5
   1b67c:	4631      	mov	r1, r6
}
   1b67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1b682:	f7ff beb1 	b.w	1b3e8 <bt_att_chan_create_pdu>
   1b686:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b68a:	b104      	cbz	r4, 1b68e <bt_att_create_pdu+0x42>
   1b68c:	3cf0      	subs	r4, #240	; 0xf0
{
   1b68e:	4618      	mov	r0, r3
   1b690:	4623      	mov	r3, r4
   1b692:	e7e8      	b.n	1b666 <bt_att_create_pdu+0x1a>
   1b694:	0002bc53 	.word	0x0002bc53

0001b698 <att_read_group_req>:
{
   1b698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b69c:	898c      	ldrh	r4, [r1, #12]
   1b69e:	3c04      	subs	r4, #4
   1b6a0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b6a2:	2c02      	cmp	r4, #2
{
   1b6a4:	4605      	mov	r5, r0
   1b6a6:	b08c      	sub	sp, #48	; 0x30
   1b6a8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b6aa:	d001      	beq.n	1b6b0 <att_read_group_req+0x18>
   1b6ac:	2c10      	cmp	r4, #16
   1b6ae:	d172      	bne.n	1b796 <att_read_group_req+0xfe>
   1b6b0:	2104      	movs	r1, #4
   1b6b2:	3008      	adds	r0, #8
   1b6b4:	f001 fe78 	bl	1d3a8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b6b8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b6bc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b6be:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b6c0:	1d01      	adds	r1, r0, #4
   1b6c2:	4622      	mov	r2, r4
   1b6c4:	4640      	mov	r0, r8
   1b6c6:	f00b fe99 	bl	273fc <bt_uuid_create>
   1b6ca:	2800      	cmp	r0, #0
   1b6cc:	d065      	beq.n	1b79a <att_read_group_req+0x102>
	if (!start || !end) {
   1b6ce:	2e00      	cmp	r6, #0
   1b6d0:	d03e      	beq.n	1b750 <att_read_group_req+0xb8>
   1b6d2:	2400      	movs	r4, #0
   1b6d4:	2f00      	cmp	r7, #0
   1b6d6:	d03a      	beq.n	1b74e <att_read_group_req+0xb6>
	if (start > end) {
   1b6d8:	42b7      	cmp	r7, r6
   1b6da:	d339      	bcc.n	1b750 <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b6dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b6e0:	a901      	add	r1, sp, #4
   1b6e2:	4640      	mov	r0, r8
   1b6e4:	f88d 4004 	strb.w	r4, [sp, #4]
   1b6e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b6ec:	f00b fe58 	bl	273a0 <bt_uuid_cmp>
   1b6f0:	2800      	cmp	r0, #0
   1b6f2:	d138      	bne.n	1b766 <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b6f4:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1b6f6:	2214      	movs	r2, #20
   1b6f8:	2100      	movs	r1, #0
   1b6fa:	a807      	add	r0, sp, #28
   1b6fc:	f00b fe32 	bl	27364 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1b700:	2201      	movs	r2, #1
   1b702:	2111      	movs	r1, #17
   1b704:	4620      	mov	r0, r4
   1b706:	f7ff ffa1 	bl	1b64c <bt_att_create_pdu>
   1b70a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1b70c:	2800      	cmp	r0, #0
   1b70e:	d044      	beq.n	1b79a <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b710:	2101      	movs	r1, #1
   1b712:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b714:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1b718:	f001 fe64 	bl	1d3e4 <net_buf_simple_add>
	data.rsp->len = 0U;
   1b71c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b720:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b722:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1b724:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b728:	4a1d      	ldr	r2, [pc, #116]	; (1b7a0 <att_read_group_req+0x108>)
	data.group = NULL;
   1b72a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b72e:	4639      	mov	r1, r7
   1b730:	4630      	mov	r0, r6
   1b732:	f00c fb7e 	bl	27e32 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1b736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b738:	781c      	ldrb	r4, [r3, #0]
   1b73a:	bb3c      	cbnz	r4, 1b78c <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b73e:	6958      	ldr	r0, [r3, #20]
   1b740:	f7ff fba2 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b744:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b746:	f001 fd37 	bl	1d1b8 <net_buf_unref>
	if (!req) {
   1b74a:	230a      	movs	r3, #10
   1b74c:	e018      	b.n	1b780 <att_read_group_req+0xe8>
			*err = 0U;
   1b74e:	463e      	mov	r6, r7
	if (!req) {
   1b750:	2301      	movs	r3, #1
   1b752:	4632      	mov	r2, r6
   1b754:	2110      	movs	r1, #16
   1b756:	4628      	mov	r0, r5
   1b758:	f00c fe97 	bl	2848a <send_err_rsp.part.0>
		return 0;
   1b75c:	2400      	movs	r4, #0
}
   1b75e:	4620      	mov	r0, r4
   1b760:	b00c      	add	sp, #48	; 0x30
   1b762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1b766:	f642 0301 	movw	r3, #10241	; 0x2801
   1b76a:	a907      	add	r1, sp, #28
   1b76c:	4640      	mov	r0, r8
   1b76e:	f88d 401c 	strb.w	r4, [sp, #28]
   1b772:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b776:	f00b fe13 	bl	273a0 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b77a:	2800      	cmp	r0, #0
   1b77c:	d0ba      	beq.n	1b6f4 <att_read_group_req+0x5c>
	if (!req) {
   1b77e:	2310      	movs	r3, #16
   1b780:	4632      	mov	r2, r6
   1b782:	2110      	movs	r1, #16
   1b784:	4628      	mov	r0, r5
   1b786:	f00c fe80 	bl	2848a <send_err_rsp.part.0>
		return 0;
   1b78a:	e7e8      	b.n	1b75e <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
   1b78c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b78e:	4628      	mov	r0, r5
   1b790:	f00c fcbb 	bl	2810a <bt_att_chan_send_rsp>
	return 0;
   1b794:	e7e2      	b.n	1b75c <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
   1b796:	2404      	movs	r4, #4
   1b798:	e7e1      	b.n	1b75e <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
   1b79a:	240e      	movs	r4, #14
   1b79c:	e7df      	b.n	1b75e <att_read_group_req+0xc6>
   1b79e:	bf00      	nop
   1b7a0:	0001b055 	.word	0x0001b055

0001b7a4 <att_read_mult_vl_req>:
{
   1b7a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b7a8:	6846      	ldr	r6, [r0, #4]
{
   1b7aa:	b085      	sub	sp, #20
   1b7ac:	4604      	mov	r4, r0
   1b7ae:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b7b0:	4630      	mov	r0, r6
   1b7b2:	2101      	movs	r1, #1
   1b7b4:	f00d f9af 	bl	28b16 <bt_gatt_change_aware>
   1b7b8:	b958      	cbnz	r0, 1b7d2 <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b7ba:	2105      	movs	r1, #5
   1b7bc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b7c0:	f00c fccb 	bl	2815a <atomic_test_and_set_bit>
			return 0;
   1b7c4:	2800      	cmp	r0, #0
   1b7c6:	bf0c      	ite	eq
   1b7c8:	2012      	moveq	r0, #18
   1b7ca:	2000      	movne	r0, #0
}
   1b7cc:	b005      	add	sp, #20
   1b7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1b7d2:	2210      	movs	r2, #16
   1b7d4:	2100      	movs	r1, #0
   1b7d6:	4668      	mov	r0, sp
   1b7d8:	f00b fdc4 	bl	27364 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1b7dc:	2200      	movs	r2, #0
   1b7de:	2121      	movs	r1, #33	; 0x21
   1b7e0:	4630      	mov	r0, r6
   1b7e2:	f7ff ff33 	bl	1b64c <bt_att_create_pdu>
   1b7e6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b7e8:	b368      	cbz	r0, 1b846 <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b7ea:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1b84c <att_read_mult_vl_req+0xa8>
	data.chan = chan;
   1b7ee:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1b7f0:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b7f4:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1b7f8:	89ab      	ldrh	r3, [r5, #12]
   1b7fa:	2b01      	cmp	r3, #1
   1b7fc:	d804      	bhi.n	1b808 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   1b7fe:	9902      	ldr	r1, [sp, #8]
   1b800:	4620      	mov	r0, r4
   1b802:	f00c fc82 	bl	2810a <bt_att_chan_send_rsp>
   1b806:	e01c      	b.n	1b842 <att_read_mult_vl_req+0x9e>
   1b808:	4638      	mov	r0, r7
   1b80a:	f00d fa02 	bl	28c12 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b80e:	466b      	mov	r3, sp
   1b810:	464a      	mov	r2, r9
   1b812:	4601      	mov	r1, r0
   1b814:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b816:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b81a:	f00c fb0a 	bl	27e32 <bt_gatt_foreach_attr>
		if (data.err) {
   1b81e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b822:	2b00      	cmp	r3, #0
   1b824:	d0e8      	beq.n	1b7f8 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b826:	9b02      	ldr	r3, [sp, #8]
   1b828:	6958      	ldr	r0, [r3, #20]
   1b82a:	f7ff fb2d 	bl	1ae88 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b82e:	9802      	ldr	r0, [sp, #8]
   1b830:	f001 fcc2 	bl	1d1b8 <net_buf_unref>
	if (!req) {
   1b834:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b838:	4632      	mov	r2, r6
   1b83a:	2120      	movs	r1, #32
   1b83c:	4620      	mov	r0, r4
   1b83e:	f00c fe24 	bl	2848a <send_err_rsp.part.0>
	return 0;
   1b842:	2000      	movs	r0, #0
   1b844:	e7c2      	b.n	1b7cc <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1b846:	200e      	movs	r0, #14
   1b848:	e7c0      	b.n	1b7cc <att_read_mult_vl_req+0x28>
   1b84a:	bf00      	nop
   1b84c:	000281d9 	.word	0x000281d9

0001b850 <att_read_mult_req>:
{
   1b850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b854:	6846      	ldr	r6, [r0, #4]
{
   1b856:	b085      	sub	sp, #20
   1b858:	4604      	mov	r4, r0
   1b85a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b85c:	4630      	mov	r0, r6
   1b85e:	2101      	movs	r1, #1
   1b860:	f00d f959 	bl	28b16 <bt_gatt_change_aware>
   1b864:	b958      	cbnz	r0, 1b87e <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b866:	2105      	movs	r1, #5
   1b868:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b86c:	f00c fc75 	bl	2815a <atomic_test_and_set_bit>
			return 0;
   1b870:	2800      	cmp	r0, #0
   1b872:	bf0c      	ite	eq
   1b874:	2012      	moveq	r0, #18
   1b876:	2000      	movne	r0, #0
}
   1b878:	b005      	add	sp, #20
   1b87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1b87e:	2210      	movs	r2, #16
   1b880:	2100      	movs	r1, #0
   1b882:	4668      	mov	r0, sp
   1b884:	f00b fd6e 	bl	27364 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1b888:	2200      	movs	r2, #0
   1b88a:	210f      	movs	r1, #15
   1b88c:	4630      	mov	r0, r6
   1b88e:	f7ff fedd 	bl	1b64c <bt_att_create_pdu>
   1b892:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b894:	b368      	cbz	r0, 1b8f2 <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b896:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1b8f8 <att_read_mult_req+0xa8>
	data.chan = chan;
   1b89a:	9400      	str	r4, [sp, #0]
   1b89c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b8a0:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1b8a4:	89ab      	ldrh	r3, [r5, #12]
   1b8a6:	2b01      	cmp	r3, #1
   1b8a8:	d804      	bhi.n	1b8b4 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   1b8aa:	9902      	ldr	r1, [sp, #8]
   1b8ac:	4620      	mov	r0, r4
   1b8ae:	f00c fc2c 	bl	2810a <bt_att_chan_send_rsp>
   1b8b2:	e01c      	b.n	1b8ee <att_read_mult_req+0x9e>
   1b8b4:	4638      	mov	r0, r7
   1b8b6:	f00d f9ac 	bl	28c12 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b8ba:	466b      	mov	r3, sp
   1b8bc:	464a      	mov	r2, r9
   1b8be:	4601      	mov	r1, r0
   1b8c0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b8c2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b8c6:	f00c fab4 	bl	27e32 <bt_gatt_foreach_attr>
		if (data.err) {
   1b8ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b8ce:	2b00      	cmp	r3, #0
   1b8d0:	d0e8      	beq.n	1b8a4 <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b8d2:	9b02      	ldr	r3, [sp, #8]
   1b8d4:	6958      	ldr	r0, [r3, #20]
   1b8d6:	f7ff fad7 	bl	1ae88 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b8da:	9802      	ldr	r0, [sp, #8]
   1b8dc:	f001 fc6c 	bl	1d1b8 <net_buf_unref>
	if (!req) {
   1b8e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b8e4:	4632      	mov	r2, r6
   1b8e6:	210e      	movs	r1, #14
   1b8e8:	4620      	mov	r0, r4
   1b8ea:	f00c fdce 	bl	2848a <send_err_rsp.part.0>
	return 0;
   1b8ee:	2000      	movs	r0, #0
   1b8f0:	e7c2      	b.n	1b878 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1b8f2:	200e      	movs	r0, #14
   1b8f4:	e7c0      	b.n	1b878 <att_read_mult_req+0x28>
   1b8f6:	bf00      	nop
   1b8f8:	00028185 	.word	0x00028185

0001b8fc <att_read_rsp>:
{
   1b8fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b900:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1b904:	4604      	mov	r4, r0
   1b906:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b908:	4640      	mov	r0, r8
   1b90a:	2101      	movs	r1, #1
{
   1b90c:	4615      	mov	r5, r2
   1b90e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1b910:	f00d f901 	bl	28b16 <bt_gatt_change_aware>
   1b914:	b960      	cbnz	r0, 1b930 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b916:	2105      	movs	r1, #5
   1b918:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b91c:	f00c fc1d 	bl	2815a <atomic_test_and_set_bit>
			return 0;
   1b920:	2800      	cmp	r0, #0
   1b922:	bf0c      	ite	eq
   1b924:	2512      	moveq	r5, #18
   1b926:	2500      	movne	r5, #0
}
   1b928:	4628      	mov	r0, r5
   1b92a:	b004      	add	sp, #16
   1b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1b930:	b38e      	cbz	r6, 1b996 <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
   1b932:	2210      	movs	r2, #16
   1b934:	2100      	movs	r1, #0
   1b936:	4668      	mov	r0, sp
   1b938:	f00b fd14 	bl	27364 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1b93c:	2200      	movs	r2, #0
   1b93e:	4629      	mov	r1, r5
   1b940:	4640      	mov	r0, r8
   1b942:	f7ff fe83 	bl	1b64c <bt_att_create_pdu>
   1b946:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b948:	b338      	cbz	r0, 1b99a <att_read_rsp+0x9e>
	data.offset = offset;
   1b94a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b94e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b952:	2301      	movs	r3, #1
   1b954:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b958:	4a11      	ldr	r2, [pc, #68]	; (1b9a0 <att_read_rsp+0xa4>)
	data.chan = chan;
   1b95a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b95c:	466b      	mov	r3, sp
   1b95e:	4631      	mov	r1, r6
   1b960:	4630      	mov	r0, r6
   1b962:	f00c fa66 	bl	27e32 <bt_gatt_foreach_attr>
	if (data.err) {
   1b966:	f89d 500c 	ldrb.w	r5, [sp, #12]
   1b96a:	b17d      	cbz	r5, 1b98c <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b96c:	9b02      	ldr	r3, [sp, #8]
   1b96e:	6958      	ldr	r0, [r3, #20]
   1b970:	f7ff fa8a 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b974:	9802      	ldr	r0, [sp, #8]
   1b976:	f001 fc1f 	bl	1d1b8 <net_buf_unref>
	if (!req) {
   1b97a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b97e:	4632      	mov	r2, r6
   1b980:	4639      	mov	r1, r7
   1b982:	4620      	mov	r0, r4
   1b984:	f00c fd81 	bl	2848a <send_err_rsp.part.0>
		return 0;
   1b988:	2500      	movs	r5, #0
   1b98a:	e7cd      	b.n	1b928 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
   1b98c:	9902      	ldr	r1, [sp, #8]
   1b98e:	4620      	mov	r0, r4
   1b990:	f00c fbbb 	bl	2810a <bt_att_chan_send_rsp>
	return 0;
   1b994:	e7c8      	b.n	1b928 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b996:	2501      	movs	r5, #1
   1b998:	e7c6      	b.n	1b928 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   1b99a:	250e      	movs	r5, #14
   1b99c:	e7c4      	b.n	1b928 <att_read_rsp+0x2c>
   1b99e:	bf00      	nop
   1b9a0:	00028185 	.word	0x00028185

0001b9a4 <att_read_type_req>:
{
   1b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b9a8:	898c      	ldrh	r4, [r1, #12]
   1b9aa:	3c04      	subs	r4, #4
   1b9ac:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b9ae:	2c02      	cmp	r4, #2
{
   1b9b0:	4605      	mov	r5, r0
   1b9b2:	b08c      	sub	sp, #48	; 0x30
   1b9b4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b9b6:	d001      	beq.n	1b9bc <att_read_type_req+0x18>
   1b9b8:	2c10      	cmp	r4, #16
   1b9ba:	d153      	bne.n	1ba64 <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b9bc:	2104      	movs	r1, #4
   1b9be:	3008      	adds	r0, #8
   1b9c0:	f001 fcf2 	bl	1d3a8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b9c4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b9c8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b9ca:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b9cc:	1d01      	adds	r1, r0, #4
   1b9ce:	4622      	mov	r2, r4
   1b9d0:	4640      	mov	r0, r8
   1b9d2:	f00b fd13 	bl	273fc <bt_uuid_create>
   1b9d6:	b188      	cbz	r0, 1b9fc <att_read_type_req+0x58>
	if (!start || !end) {
   1b9d8:	b19e      	cbz	r6, 1ba02 <att_read_type_req+0x5e>
   1b9da:	b18f      	cbz	r7, 1ba00 <att_read_type_req+0x5c>
	if (start > end) {
   1b9dc:	42b7      	cmp	r7, r6
   1b9de:	d310      	bcc.n	1ba02 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1b9e0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1b9e2:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1b9e4:	2100      	movs	r1, #0
   1b9e6:	eb0d 0002 	add.w	r0, sp, r2
   1b9ea:	f00b fcbb 	bl	27364 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1b9ee:	2201      	movs	r2, #1
   1b9f0:	2109      	movs	r1, #9
   1b9f2:	4620      	mov	r0, r4
   1b9f4:	f7ff fe2a 	bl	1b64c <bt_att_create_pdu>
   1b9f8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1b9fa:	b968      	cbnz	r0, 1ba18 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1b9fc:	240e      	movs	r4, #14
   1b9fe:	e007      	b.n	1ba10 <att_read_type_req+0x6c>
			*err = 0U;
   1ba00:	463e      	mov	r6, r7
	if (!req) {
   1ba02:	2301      	movs	r3, #1
   1ba04:	4632      	mov	r2, r6
   1ba06:	2108      	movs	r1, #8
   1ba08:	4628      	mov	r0, r5
   1ba0a:	f00c fd3e 	bl	2848a <send_err_rsp.part.0>
		return 0;
   1ba0e:	2400      	movs	r4, #0
}
   1ba10:	4620      	mov	r0, r4
   1ba12:	b00c      	add	sp, #48	; 0x30
   1ba14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1ba18:	2101      	movs	r1, #1
   1ba1a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1ba1c:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1ba20:	f001 fce0 	bl	1d3e4 <net_buf_simple_add>
	data.rsp->len = 0U;
   1ba24:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1ba28:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1ba2a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1ba2c:	4a0e      	ldr	r2, [pc, #56]	; (1ba68 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
   1ba2e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1ba32:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1ba34:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1ba38:	4630      	mov	r0, r6
   1ba3a:	ab06      	add	r3, sp, #24
   1ba3c:	f00c f9f9 	bl	27e32 <bt_gatt_foreach_attr>
	if (data.err) {
   1ba40:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1ba44:	b14c      	cbz	r4, 1ba5a <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ba46:	9b08      	ldr	r3, [sp, #32]
   1ba48:	6958      	ldr	r0, [r3, #20]
   1ba4a:	f7ff fa1d 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1ba4e:	9808      	ldr	r0, [sp, #32]
   1ba50:	f001 fbb2 	bl	1d1b8 <net_buf_unref>
	if (!req) {
   1ba54:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1ba58:	e7d4      	b.n	1ba04 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1ba5a:	9908      	ldr	r1, [sp, #32]
   1ba5c:	4628      	mov	r0, r5
   1ba5e:	f00c fb54 	bl	2810a <bt_att_chan_send_rsp>
	return 0;
   1ba62:	e7d5      	b.n	1ba10 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1ba64:	2404      	movs	r4, #4
   1ba66:	e7d3      	b.n	1ba10 <att_read_type_req+0x6c>
   1ba68:	0001b341 	.word	0x0001b341

0001ba6c <att_find_type_req>:
{
   1ba6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba70:	4688      	mov	r8, r1
   1ba72:	b086      	sub	sp, #24
   1ba74:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1ba76:	2106      	movs	r1, #6
   1ba78:	f108 0008 	add.w	r0, r8, #8
   1ba7c:	f001 fc94 	bl	1d3a8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1ba80:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1ba82:	b317      	cbz	r7, 1baca <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1ba84:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1ba88:	f1b9 0f00 	cmp.w	r9, #0
   1ba8c:	d01c      	beq.n	1bac8 <att_find_type_req+0x5c>
	if (start > end) {
   1ba8e:	454f      	cmp	r7, r9
   1ba90:	d81b      	bhi.n	1baca <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1ba92:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1ba94:	f8ad 3002 	strh.w	r3, [sp, #2]
   1ba98:	2400      	movs	r4, #0
   1ba9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ba9e:	a901      	add	r1, sp, #4
   1baa0:	4668      	mov	r0, sp
	value = buf->data;
   1baa2:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1baa6:	f88d 4000 	strb.w	r4, [sp]
   1baaa:	f88d 4004 	strb.w	r4, [sp, #4]
   1baae:	f8ad 3006 	strh.w	r3, [sp, #6]
   1bab2:	f00b fc75 	bl	273a0 <bt_uuid_cmp>
   1bab6:	4606      	mov	r6, r0
   1bab8:	b190      	cbz	r0, 1bae0 <att_find_type_req+0x74>
	if (!req) {
   1baba:	230a      	movs	r3, #10
   1babc:	463a      	mov	r2, r7
   1babe:	2106      	movs	r1, #6
   1bac0:	4628      	mov	r0, r5
   1bac2:	f00c fce2 	bl	2848a <send_err_rsp.part.0>
		return 0;
   1bac6:	e007      	b.n	1bad8 <att_find_type_req+0x6c>
			*err = 0U;
   1bac8:	464f      	mov	r7, r9
	if (!req) {
   1baca:	2301      	movs	r3, #1
   1bacc:	463a      	mov	r2, r7
   1bace:	2106      	movs	r1, #6
   1bad0:	4628      	mov	r0, r5
   1bad2:	f00c fcda 	bl	2848a <send_err_rsp.part.0>
		return 0;
   1bad6:	2400      	movs	r4, #0
}
   1bad8:	4620      	mov	r0, r4
   1bada:	b006      	add	sp, #24
   1badc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1bae0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1bae4:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1bae8:	4601      	mov	r1, r0
   1baea:	2214      	movs	r2, #20
   1baec:	a801      	add	r0, sp, #4
   1baee:	f00b fc39 	bl	27364 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1baf2:	4632      	mov	r2, r6
   1baf4:	2107      	movs	r1, #7
   1baf6:	4640      	mov	r0, r8
   1baf8:	f7ff fda8 	bl	1b64c <bt_att_create_pdu>
   1bafc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1bafe:	b1f8      	cbz	r0, 1bb40 <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1bb00:	230a      	movs	r3, #10
   1bb02:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1bb06:	4a0f      	ldr	r2, [pc, #60]	; (1bb44 <att_find_type_req+0xd8>)
	data.value_len = value_len;
   1bb08:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1bb0c:	ab01      	add	r3, sp, #4
   1bb0e:	4649      	mov	r1, r9
   1bb10:	4638      	mov	r0, r7
	data.value = value;
   1bb12:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1bb16:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1bb18:	f00c f98b 	bl	27e32 <bt_gatt_foreach_attr>
	if (data.err) {
   1bb1c:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1bb20:	b14c      	cbz	r4, 1bb36 <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1bb22:	9b02      	ldr	r3, [sp, #8]
   1bb24:	6958      	ldr	r0, [r3, #20]
   1bb26:	f7ff f9af 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1bb2a:	9802      	ldr	r0, [sp, #8]
   1bb2c:	f001 fb44 	bl	1d1b8 <net_buf_unref>
	if (!req) {
   1bb30:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1bb34:	e7ca      	b.n	1bacc <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1bb36:	9902      	ldr	r1, [sp, #8]
   1bb38:	4628      	mov	r0, r5
   1bb3a:	f00c fae6 	bl	2810a <bt_att_chan_send_rsp>
	return 0;
   1bb3e:	e7cb      	b.n	1bad8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1bb40:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1bb42:	e7c9      	b.n	1bad8 <att_find_type_req+0x6c>
   1bb44:	0001aec5 	.word	0x0001aec5

0001bb48 <att_find_info_req>:
{
   1bb48:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1bb4a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1bb4c:	881e      	ldrh	r6, [r3, #0]
{
   1bb4e:	b085      	sub	sp, #20
   1bb50:	4605      	mov	r5, r0
	if (!start || !end) {
   1bb52:	b19e      	cbz	r6, 1bb7c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1bb54:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1bb56:	b184      	cbz	r4, 1bb7a <att_find_info_req+0x32>
	if (start > end) {
   1bb58:	42a6      	cmp	r6, r4
   1bb5a:	d80f      	bhi.n	1bb7c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1bb5c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1bb5e:	2210      	movs	r2, #16
   1bb60:	2100      	movs	r1, #0
   1bb62:	4668      	mov	r0, sp
   1bb64:	f00b fbfe 	bl	27364 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1bb68:	2200      	movs	r2, #0
   1bb6a:	2105      	movs	r1, #5
   1bb6c:	4638      	mov	r0, r7
   1bb6e:	f7ff fd6d 	bl	1b64c <bt_att_create_pdu>
   1bb72:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1bb74:	b958      	cbnz	r0, 1bb8e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1bb76:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1bb78:	e007      	b.n	1bb8a <att_find_info_req+0x42>
			*err = 0U;
   1bb7a:	4626      	mov	r6, r4
	if (!req) {
   1bb7c:	2301      	movs	r3, #1
   1bb7e:	4632      	mov	r2, r6
   1bb80:	2104      	movs	r1, #4
   1bb82:	4628      	mov	r0, r5
   1bb84:	f00c fc81 	bl	2848a <send_err_rsp.part.0>
	return 0;
   1bb88:	2000      	movs	r0, #0
}
   1bb8a:	b005      	add	sp, #20
   1bb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1bb8e:	4621      	mov	r1, r4
   1bb90:	4a0a      	ldr	r2, [pc, #40]	; (1bbbc <att_find_info_req+0x74>)
	data.chan = chan;
   1bb92:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1bb94:	466b      	mov	r3, sp
   1bb96:	4630      	mov	r0, r6
   1bb98:	f00c f94b 	bl	27e32 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1bb9c:	9c02      	ldr	r4, [sp, #8]
   1bb9e:	b944      	cbnz	r4, 1bbb2 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1bba0:	9b01      	ldr	r3, [sp, #4]
   1bba2:	6958      	ldr	r0, [r3, #20]
   1bba4:	f7ff f970 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1bba8:	9801      	ldr	r0, [sp, #4]
   1bbaa:	f001 fb05 	bl	1d1b8 <net_buf_unref>
	if (!req) {
   1bbae:	230a      	movs	r3, #10
   1bbb0:	e7e5      	b.n	1bb7e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1bbb2:	9901      	ldr	r1, [sp, #4]
   1bbb4:	4628      	mov	r0, r5
   1bbb6:	f00c faa8 	bl	2810a <bt_att_chan_send_rsp>
   1bbba:	e7e5      	b.n	1bb88 <att_find_info_req+0x40>
   1bbbc:	00027e49 	.word	0x00027e49

0001bbc0 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1bbc0:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1bbc2:	4d0a      	ldr	r5, [pc, #40]	; (1bbec <bt_att_init+0x2c>)
   1bbc4:	4c0a      	ldr	r4, [pc, #40]	; (1bbf0 <bt_att_init+0x30>)
   1bbc6:	4629      	mov	r1, r5
   1bbc8:	4620      	mov	r0, r4
   1bbca:	f00d fc02 	bl	293d2 <k_queue_append>
   1bbce:	f105 0114 	add.w	r1, r5, #20
   1bbd2:	4620      	mov	r0, r4
   1bbd4:	f00d fbfd 	bl	293d2 <k_queue_append>
   1bbd8:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1bbdc:	4620      	mov	r0, r4
   1bbde:	f00d fbf8 	bl	293d2 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1bbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1bbe6:	f000 bb03 	b.w	1c1f0 <bt_gatt_init>
   1bbea:	bf00      	nop
   1bbec:	20003c70 	.word	0x20003c70
   1bbf0:	20000a90 	.word	0x20000a90

0001bbf4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1bbf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1bbf6:	2300      	movs	r3, #0
{
   1bbf8:	4605      	mov	r5, r0
   1bbfa:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1bbfc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1bbfe:	f006 ffc7 	bl	22b90 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1bc02:	4b0b      	ldr	r3, [pc, #44]	; (1bc30 <bt_att_req_alloc+0x3c>)
   1bc04:	681b      	ldr	r3, [r3, #0]
   1bc06:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1bc08:	bf04      	itt	eq
   1bc0a:	2500      	moveq	r5, #0
   1bc0c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1bc0e:	a901      	add	r1, sp, #4
   1bc10:	4808      	ldr	r0, [pc, #32]	; (1bc34 <bt_att_req_alloc+0x40>)
   1bc12:	462a      	mov	r2, r5
   1bc14:	4623      	mov	r3, r4
   1bc16:	f004 feed 	bl	209f4 <k_mem_slab_alloc>
   1bc1a:	4601      	mov	r1, r0
   1bc1c:	b930      	cbnz	r0, 1bc2c <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1bc1e:	9801      	ldr	r0, [sp, #4]
   1bc20:	2210      	movs	r2, #16
   1bc22:	f00b fb9f 	bl	27364 <memset>

	return req;
   1bc26:	9801      	ldr	r0, [sp, #4]
}
   1bc28:	b003      	add	sp, #12
   1bc2a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1bc2c:	2000      	movs	r0, #0
   1bc2e:	e7fb      	b.n	1bc28 <bt_att_req_alloc+0x34>
   1bc30:	20003c5c 	.word	0x20003c5c
   1bc34:	20000a0c 	.word	0x20000a0c

0001bc38 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1bc38:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   1bc3a:	6883      	ldr	r3, [r0, #8]
{
   1bc3c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1bc3e:	b14b      	cbz	r3, 1bc54 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1bc40:	6958      	ldr	r0, [r3, #20]
   1bc42:	f7ff f921 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1bc46:	9b01      	ldr	r3, [sp, #4]
   1bc48:	6898      	ldr	r0, [r3, #8]
   1bc4a:	f001 fab5 	bl	1d1b8 <net_buf_unref>
		req->buf = NULL;
   1bc4e:	9b01      	ldr	r3, [sp, #4]
   1bc50:	2200      	movs	r2, #0
   1bc52:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1bc54:	4803      	ldr	r0, [pc, #12]	; (1bc64 <bt_att_req_free+0x2c>)
   1bc56:	a901      	add	r1, sp, #4
   1bc58:	f004 ff26 	bl	20aa8 <k_mem_slab_free>
}
   1bc5c:	b003      	add	sp, #12
   1bc5e:	f85d fb04 	ldr.w	pc, [sp], #4
   1bc62:	bf00      	nop
   1bc64:	20000a0c 	.word	0x20000a0c

0001bc68 <att_handle_rsp>:
{
   1bc68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc6c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1bc6e:	30c0      	adds	r0, #192	; 0xc0
{
   1bc70:	4689      	mov	r9, r1
   1bc72:	4692      	mov	sl, r2
   1bc74:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1bc76:	f005 ffe9 	bl	21c4c <k_work_cancel_delayable>
	if (!chan->req) {
   1bc7a:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   1bc7e:	2700      	movs	r7, #0
   1bc80:	b9a5      	cbnz	r5, 1bcac <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   1bc82:	4813      	ldr	r0, [pc, #76]	; (1bcd0 <att_handle_rsp+0x68>)
   1bc84:	2157      	movs	r1, #87	; 0x57
   1bc86:	f00b f89d 	bl	26dc4 <z_log_minimal_printk>
	bt_att_func_t func = NULL;
   1bc8a:	462e      	mov	r6, r5
	att_req_send_process(chan->att);
   1bc8c:	6820      	ldr	r0, [r4, #0]
   1bc8e:	f00c fb26 	bl	282de <att_req_send_process>
	if (func) {
   1bc92:	b13e      	cbz	r6, 1bca4 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   1bc94:	6820      	ldr	r0, [r4, #0]
   1bc96:	f8cd b000 	str.w	fp, [sp]
   1bc9a:	6800      	ldr	r0, [r0, #0]
   1bc9c:	4653      	mov	r3, sl
   1bc9e:	464a      	mov	r2, r9
   1bca0:	4641      	mov	r1, r8
   1bca2:	47b0      	blx	r6
}
   1bca4:	2000      	movs	r0, #0
   1bca6:	b003      	add	sp, #12
   1bca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1bcac:	4b09      	ldr	r3, [pc, #36]	; (1bcd4 <att_handle_rsp+0x6c>)
   1bcae:	429d      	cmp	r5, r3
   1bcb0:	d103      	bne.n	1bcba <att_handle_rsp+0x52>
		chan->req = NULL;
   1bcb2:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	bt_att_func_t func = NULL;
   1bcb6:	463e      	mov	r6, r7
		goto process;
   1bcb8:	e7e8      	b.n	1bc8c <att_handle_rsp+0x24>
	func = chan->req->func;
   1bcba:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   1bcbc:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   1bcbe:	4628      	mov	r0, r5
	params = chan->req->user_data;
   1bcc0:	f8d5 b00c 	ldr.w	fp, [r5, #12]
	bt_att_req_free(chan->req);
   1bcc4:	f7ff ffb8 	bl	1bc38 <bt_att_req_free>
	chan->req = NULL;
   1bcc8:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
   1bccc:	e7de      	b.n	1bc8c <att_handle_rsp+0x24>
   1bcce:	bf00      	nop
   1bcd0:	0002bc73 	.word	0x0002bc73
   1bcd4:	20003c60 	.word	0x20003c60

0001bcd8 <bt_att_disconnected>:
{
   1bcd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1bcdc:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1bce0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1bce2:	2e00      	cmp	r6, #0
   1bce4:	d056      	beq.n	1bd94 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1bce6:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   1bcea:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1bcee:	f00c fa1a 	bl	28126 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1bcf2:	1f27      	subs	r7, r4, #4
   1bcf4:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   1bcf8:	2200      	movs	r2, #0
   1bcfa:	2300      	movs	r3, #0
   1bcfc:	4640      	mov	r0, r8
   1bcfe:	f001 f90b 	bl	1cf18 <net_buf_get>
   1bd02:	4605      	mov	r5, r0
   1bd04:	bb28      	cbnz	r0, 1bd52 <bt_att_disconnected+0x7a>
	if (chan->req) {
   1bd06:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1bd0a:	b12b      	cbz	r3, 1bd18 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1bd0c:	4602      	mov	r2, r0
   1bd0e:	4601      	mov	r1, r0
   1bd10:	230e      	movs	r3, #14
   1bd12:	4638      	mov	r0, r7
   1bd14:	f7ff ffa8 	bl	1bc68 <att_handle_rsp>
	chan->att = NULL;
   1bd18:	2300      	movs	r3, #0
   1bd1a:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1bd1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1bd20:	2b00      	cmp	r3, #0
   1bd22:	d137      	bne.n	1bd94 <bt_att_disconnected+0xbc>
	att_reset(att);
   1bd24:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1bd26:	9803      	ldr	r0, [sp, #12]
   1bd28:	2200      	movs	r2, #0
   1bd2a:	2300      	movs	r3, #0
   1bd2c:	300c      	adds	r0, #12
   1bd2e:	f001 f8f3 	bl	1cf18 <net_buf_get>
   1bd32:	4605      	mov	r5, r0
   1bd34:	b9a0      	cbnz	r0, 1bd60 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1bd36:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1bd38:	6845      	ldr	r5, [r0, #4]
   1bd3a:	b9c5      	cbnz	r5, 1bd6e <bt_att_disconnected+0x96>
	att->conn = NULL;
   1bd3c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1bd3e:	a903      	add	r1, sp, #12
   1bd40:	4816      	ldr	r0, [pc, #88]	; (1bd9c <bt_att_disconnected+0xc4>)
   1bd42:	f004 feb1 	bl	20aa8 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1bd46:	6820      	ldr	r0, [r4, #0]
}
   1bd48:	b004      	add	sp, #16
   1bd4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1bd4e:	f000 bf67 	b.w	1cc20 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1bd52:	6968      	ldr	r0, [r5, #20]
   1bd54:	f7ff f898 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(buf);
   1bd58:	4628      	mov	r0, r5
   1bd5a:	f001 fa2d 	bl	1d1b8 <net_buf_unref>
   1bd5e:	e7cb      	b.n	1bcf8 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1bd60:	6968      	ldr	r0, [r5, #20]
   1bd62:	f7ff f891 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(buf);
   1bd66:	4628      	mov	r0, r5
   1bd68:	f001 fa26 	bl	1d1b8 <net_buf_unref>
   1bd6c:	e7db      	b.n	1bd26 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bd6e:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   1bd70:	686e      	ldr	r6, [r5, #4]
	return node->next;
   1bd72:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1bd74:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bd76:	4295      	cmp	r5, r2
	list->tail = node;
   1bd78:	bf08      	it	eq
   1bd7a:	6083      	streq	r3, [r0, #8]
   1bd7c:	b136      	cbz	r6, 1bd8c <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1bd7e:	68eb      	ldr	r3, [r5, #12]
   1bd80:	9300      	str	r3, [sp, #0]
   1bd82:	2300      	movs	r3, #0
   1bd84:	6800      	ldr	r0, [r0, #0]
   1bd86:	461a      	mov	r2, r3
   1bd88:	210e      	movs	r1, #14
   1bd8a:	47b0      	blx	r6
		bt_att_req_free(req);
   1bd8c:	4628      	mov	r0, r5
   1bd8e:	f7ff ff53 	bl	1bc38 <bt_att_req_free>
   1bd92:	e7d0      	b.n	1bd36 <bt_att_disconnected+0x5e>
}
   1bd94:	b004      	add	sp, #16
   1bd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd9a:	bf00      	nop
   1bd9c:	200009cc 	.word	0x200009cc

0001bda0 <att_timeout>:
{
   1bda0:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
   1bda2:	2145      	movs	r1, #69	; 0x45
{
   1bda4:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1bda6:	4804      	ldr	r0, [pc, #16]	; (1bdb8 <att_timeout+0x18>)
   1bda8:	f00b f80c 	bl	26dc4 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   1bdac:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   1bdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1bdb4:	f7ff bf90 	b.w	1bcd8 <bt_att_disconnected>
   1bdb8:	0002bc8f 	.word	0x0002bc8f

0001bdbc <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdbe:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1bdc0:	4605      	mov	r5, r0
   1bdc2:	b950      	cbnz	r0, 1bdda <bt_att_send+0x1e>
   1bdc4:	492c      	ldr	r1, [pc, #176]	; (1be78 <bt_att_send+0xbc>)
   1bdc6:	482d      	ldr	r0, [pc, #180]	; (1be7c <bt_att_send+0xc0>)
   1bdc8:	f640 6288 	movw	r2, #3720	; 0xe88
   1bdcc:	f00a ffec 	bl	26da8 <assert_print>
   1bdd0:	4829      	ldr	r0, [pc, #164]	; (1be78 <bt_att_send+0xbc>)
   1bdd2:	f640 6188 	movw	r1, #3720	; 0xe88
   1bdd6:	f00a ffe0 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1bdda:	b954      	cbnz	r4, 1bdf2 <bt_att_send+0x36>
   1bddc:	4926      	ldr	r1, [pc, #152]	; (1be78 <bt_att_send+0xbc>)
   1bdde:	4827      	ldr	r0, [pc, #156]	; (1be7c <bt_att_send+0xc0>)
   1bde0:	f640 6289 	movw	r2, #3721	; 0xe89
   1bde4:	f00a ffe0 	bl	26da8 <assert_print>
   1bde8:	4823      	ldr	r0, [pc, #140]	; (1be78 <bt_att_send+0xbc>)
   1bdea:	f640 6189 	movw	r1, #3721	; 0xe89
   1bdee:	f00a ffd4 	bl	26d9a <assert_post_action>

	att = att_get(conn);
   1bdf2:	4628      	mov	r0, r5
   1bdf4:	f7ff f80c 	bl	1ae10 <att_get>
	if (!att) {
   1bdf8:	4605      	mov	r5, r0
   1bdfa:	b940      	cbnz	r0, 1be0e <bt_att_send+0x52>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1bdfc:	6960      	ldr	r0, [r4, #20]
   1bdfe:	f7ff f843 	bl	1ae88 <tx_meta_data_free>
		net_buf_unref(buf);
   1be02:	4620      	mov	r0, r4
   1be04:	f001 f9d8 	bl	1d1b8 <net_buf_unref>
		return -ENOTCONN;
   1be08:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1be0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1be0e:	f100 060c 	add.w	r6, r0, #12
   1be12:	4621      	mov	r1, r4
   1be14:	4630      	mov	r0, r6
   1be16:	f001 f9a1 	bl	1d15c <net_buf_put>
	return list->head;
   1be1a:	6aac      	ldr	r4, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1be1c:	4625      	mov	r5, r4
   1be1e:	b11c      	cbz	r4, 1be28 <bt_att_send+0x6c>
	return node->next;
   1be20:	f855 49f0 	ldr.w	r4, [r5], #-240
   1be24:	b104      	cbz	r4, 1be28 <bt_att_send+0x6c>
   1be26:	3cf0      	subs	r4, #240	; 0xf0
   1be28:	2300      	movs	r3, #0
   1be2a:	461f      	mov	r7, r3
   1be2c:	b13d      	cbz	r5, 1be3e <bt_att_send+0x82>
		if (err == -ENOENT && prev &&
   1be2e:	1c9a      	adds	r2, r3, #2
   1be30:	d007      	beq.n	1be42 <bt_att_send+0x86>
		err = process_queue(chan, &att->tx_queue);
   1be32:	4631      	mov	r1, r6
   1be34:	4628      	mov	r0, r5
   1be36:	f00c f94f 	bl	280d8 <process_queue>
		if (!err) {
   1be3a:	4603      	mov	r3, r0
   1be3c:	b980      	cbnz	r0, 1be60 <bt_att_send+0xa4>
	return 0;
   1be3e:	2000      	movs	r0, #0
   1be40:	e7e4      	b.n	1be0c <bt_att_send+0x50>
		if (err == -ENOENT && prev &&
   1be42:	2f00      	cmp	r7, #0
   1be44:	d0f5      	beq.n	1be32 <bt_att_send+0x76>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1be46:	2103      	movs	r1, #3
   1be48:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1be4c:	f00b ffe8 	bl	27e20 <atomic_test_bit>
   1be50:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1be52:	f107 0098 	add.w	r0, r7, #152	; 0x98
   1be56:	f00b ffe3 	bl	27e20 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1be5a:	4282      	cmp	r2, r0
   1be5c:	d1e9      	bne.n	1be32 <bt_att_send+0x76>
   1be5e:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1be60:	b13c      	cbz	r4, 1be72 <bt_att_send+0xb6>
   1be62:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   1be66:	b102      	cbz	r2, 1be6a <bt_att_send+0xae>
   1be68:	3af0      	subs	r2, #240	; 0xf0
   1be6a:	462f      	mov	r7, r5
   1be6c:	4625      	mov	r5, r4
   1be6e:	4614      	mov	r4, r2
   1be70:	e7dc      	b.n	1be2c <bt_att_send+0x70>
   1be72:	4622      	mov	r2, r4
   1be74:	e7f9      	b.n	1be6a <bt_att_send+0xae>
   1be76:	bf00      	nop
   1be78:	0002ba7a 	.word	0x0002ba7a
   1be7c:	0002a576 	.word	0x0002a576

0001be80 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1be80:	b538      	push	{r3, r4, r5, lr}
   1be82:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1be84:	4605      	mov	r5, r0
   1be86:	b950      	cbnz	r0, 1be9e <bt_att_req_send+0x1e>
   1be88:	4915      	ldr	r1, [pc, #84]	; (1bee0 <bt_att_req_send+0x60>)
   1be8a:	4816      	ldr	r0, [pc, #88]	; (1bee4 <bt_att_req_send+0x64>)
   1be8c:	f640 629e 	movw	r2, #3742	; 0xe9e
   1be90:	f00a ff8a 	bl	26da8 <assert_print>
   1be94:	4812      	ldr	r0, [pc, #72]	; (1bee0 <bt_att_req_send+0x60>)
   1be96:	f640 619e 	movw	r1, #3742	; 0xe9e
   1be9a:	f00a ff7e 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(req);
   1be9e:	b954      	cbnz	r4, 1beb6 <bt_att_req_send+0x36>
   1bea0:	490f      	ldr	r1, [pc, #60]	; (1bee0 <bt_att_req_send+0x60>)
   1bea2:	4810      	ldr	r0, [pc, #64]	; (1bee4 <bt_att_req_send+0x64>)
   1bea4:	f640 629f 	movw	r2, #3743	; 0xe9f
   1bea8:	f00a ff7e 	bl	26da8 <assert_print>
   1beac:	480c      	ldr	r0, [pc, #48]	; (1bee0 <bt_att_req_send+0x60>)
   1beae:	f640 619f 	movw	r1, #3743	; 0xe9f
   1beb2:	f00a ff72 	bl	26d9a <assert_post_action>

	att = att_get(conn);
   1beb6:	4628      	mov	r0, r5
   1beb8:	f7fe ffaa 	bl	1ae10 <att_get>
	if (!att) {
   1bebc:	b160      	cbz	r0, 1bed8 <bt_att_req_send+0x58>
	parent->next = child;
   1bebe:	2300      	movs	r3, #0
   1bec0:	6023      	str	r3, [r4, #0]
	return list->tail;
   1bec2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1bec4:	b92b      	cbnz	r3, 1bed2 <bt_att_req_send+0x52>
	list->head = node;
   1bec6:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1beca:	f00c fa08 	bl	282de <att_req_send_process>

	return 0;
   1bece:	2000      	movs	r0, #0
}
   1bed0:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1bed2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bed4:	6084      	str	r4, [r0, #8]
}
   1bed6:	e7f8      	b.n	1beca <bt_att_req_send+0x4a>
		return -ENOTCONN;
   1bed8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bedc:	e7f8      	b.n	1bed0 <bt_att_req_send+0x50>
   1bede:	bf00      	nop
   1bee0:	0002ba7a 	.word	0x0002ba7a
   1bee4:	0002a576 	.word	0x0002a576

0001bee8 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1bee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1beea:	4d0d      	ldr	r5, [pc, #52]	; (1bf20 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1beec:	4604      	mov	r4, r0
   1beee:	b968      	cbnz	r0, 1bf0c <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bef0:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   1bef2:	2207      	movs	r2, #7
   1bef4:	f8cd 0003 	str.w	r0, [sp, #3]
   1bef8:	4669      	mov	r1, sp
   1befa:	1c68      	adds	r0, r5, #1
   1befc:	f00b f9fe 	bl	272fc <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1bf00:	2800      	cmp	r0, #0
   1bf02:	bf08      	it	eq
   1bf04:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1bf06:	4620      	mov	r0, r4
   1bf08:	b003      	add	sp, #12
   1bf0a:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bf0c:	462a      	mov	r2, r5
   1bf0e:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bf12:	f00b fe83 	bl	27c1c <bt_conn_is_peer_addr_le>
	return NULL;
   1bf16:	2800      	cmp	r0, #0
   1bf18:	bf14      	ite	ne
   1bf1a:	462c      	movne	r4, r5
   1bf1c:	2400      	moveq	r4, #0
   1bf1e:	e7f2      	b.n	1bf06 <find_cf_cfg+0x1e>
   1bf20:	20003cb4 	.word	0x20003cb4

0001bf24 <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   1bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf28:	4698      	mov	r8, r3
   1bf2a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
   1bf2e:	2b01      	cmp	r3, #1
{
   1bf30:	4606      	mov	r6, r0
   1bf32:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1bf34:	d837      	bhi.n	1bfa6 <cf_write+0x82>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
   1bf36:	4443      	add	r3, r8
   1bf38:	2b01      	cmp	r3, #1
   1bf3a:	4645      	mov	r5, r8
   1bf3c:	dc36      	bgt.n	1bfac <cf_write+0x88>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
   1bf3e:	f7ff ffd3 	bl	1bee8 <find_cf_cfg>
	if (!cfg) {
   1bf42:	4604      	mov	r4, r0
   1bf44:	b918      	cbnz	r0, 1bf4e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1bf46:	f7ff ffcf 	bl	1bee8 <find_cf_cfg>
	}

	if (!cfg) {
   1bf4a:	4604      	mov	r4, r0
   1bf4c:	b180      	cbz	r0, 1bf70 <cf_write+0x4c>
{
   1bf4e:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1bf50:	f1b8 0f00 	cmp.w	r8, #0
   1bf54:	d115      	bne.n	1bf82 <cf_write+0x5e>

	if (!cf_set_value(cfg, value, len)) {
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bf56:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1bf5a:	1c60      	adds	r0, r4, #1
   1bf5c:	f00c fb74 	bl	28648 <bt_addr_le_copy>
	cfg->id = conn->id;
   1bf60:	4620      	mov	r0, r4
   1bf62:	7a33      	ldrb	r3, [r6, #8]
   1bf64:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bf68:	2100      	movs	r1, #0
   1bf6a:	f00c fc04 	bl	28776 <atomic_set_bit>

	return len;
   1bf6e:	e005      	b.n	1bf7c <cf_write+0x58>
		BT_WARN("No space to store Client Supported Features");
   1bf70:	4811      	ldr	r0, [pc, #68]	; (1bfb8 <cf_write+0x94>)
   1bf72:	2157      	movs	r1, #87	; 0x57
   1bf74:	f00a ff26 	bl	26dc4 <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bf78:	f06f 0510 	mvn.w	r5, #16
}
   1bf7c:	4628      	mov	r0, r5
   1bf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1bf82:	7a20      	ldrb	r0, [r4, #8]
   1bf84:	fa20 f301 	lsr.w	r3, r0, r1
   1bf88:	07da      	lsls	r2, r3, #31
   1bf8a:	d503      	bpl.n	1bf94 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   1bf8c:	783b      	ldrb	r3, [r7, #0]
   1bf8e:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1bf90:	07db      	lsls	r3, r3, #31
   1bf92:	d50e      	bpl.n	1bfb2 <cf_write+0x8e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1bf94:	3101      	adds	r1, #1
   1bf96:	2903      	cmp	r1, #3
   1bf98:	d1da      	bne.n	1bf50 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1bf9a:	783b      	ldrb	r3, [r7, #0]
   1bf9c:	f003 0307 	and.w	r3, r3, #7
   1bfa0:	4318      	orrs	r0, r3
   1bfa2:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1bfa4:	e7d7      	b.n	1bf56 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bfa6:	f06f 0506 	mvn.w	r5, #6
   1bfaa:	e7e7      	b.n	1bf7c <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1bfac:	f06f 050c 	mvn.w	r5, #12
   1bfb0:	e7e4      	b.n	1bf7c <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1bfb2:	f06f 0512 	mvn.w	r5, #18
   1bfb6:	e7e1      	b.n	1bf7c <cf_write+0x58>
   1bfb8:	0002bca7 	.word	0x0002bca7

0001bfbc <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1bfbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bfc0:	461f      	mov	r7, r3
   1bfc2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1bfc6:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1bfca:	4606      	mov	r6, r0
   1bfcc:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1bfce:	2b00      	cmp	r3, #0
   1bfd0:	d148      	bne.n	1c064 <bt_gatt_attr_write_ccc+0xa8>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1bfd2:	1e7b      	subs	r3, r7, #1
   1bfd4:	2b01      	cmp	r3, #1
   1bfd6:	d848      	bhi.n	1c06a <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
		value = *(uint8_t *)buf;
   1bfd8:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1bfda:	2f01      	cmp	r7, #1
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1bfdc:	4649      	mov	r1, r9
   1bfde:	bf14      	ite	ne
   1bfe0:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   1bfe2:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   1bfe4:	f00c fc80 	bl	288e8 <find_ccc_cfg>
	if (!cfg) {
   1bfe8:	4604      	mov	r4, r0
   1bfea:	b9b8      	cbnz	r0, 1c01c <bt_gatt_attr_write_ccc+0x60>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1bfec:	b91d      	cbnz	r5, 1bff6 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1bfee:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1bff0:	b003      	add	sp, #12
   1bff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1bff6:	4649      	mov	r1, r9
   1bff8:	f00c fc76 	bl	288e8 <find_ccc_cfg>
		if (!cfg) {
   1bffc:	4604      	mov	r4, r0
   1bffe:	b930      	cbnz	r0, 1c00e <bt_gatt_attr_write_ccc+0x52>
			BT_WARN("No space to store CCC cfg");
   1c000:	481b      	ldr	r0, [pc, #108]	; (1c070 <bt_gatt_attr_write_ccc+0xb4>)
   1c002:	2157      	movs	r1, #87	; 0x57
   1c004:	f00a fede 	bl	26dc4 <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c008:	f06f 0010 	mvn.w	r0, #16
   1c00c:	e7f0      	b.n	1bff0 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c00e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1c012:	3001      	adds	r0, #1
   1c014:	f00c fb18 	bl	28648 <bt_addr_le_copy>
		cfg->id = conn->id;
   1c018:	7a33      	ldrb	r3, [r6, #8]
   1c01a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1c01c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1c020:	b9a3      	cbnz	r3, 1c04c <bt_gatt_attr_write_ccc+0x90>
	if (cfg->value != ccc->value) {
   1c022:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1c026:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1c028:	42ab      	cmp	r3, r5
   1c02a:	d003      	beq.n	1c034 <bt_gatt_attr_write_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
   1c02c:	4649      	mov	r1, r9
   1c02e:	4640      	mov	r0, r8
   1c030:	f00c fae9 	bl	28606 <gatt_ccc_changed>
	if (!value) {
   1c034:	2d00      	cmp	r5, #0
   1c036:	d1da      	bne.n	1bfee <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c038:	4669      	mov	r1, sp
   1c03a:	1c60      	adds	r0, r4, #1
   1c03c:	9500      	str	r5, [sp, #0]
   1c03e:	f8cd 5003 	str.w	r5, [sp, #3]
   1c042:	f00c fb01 	bl	28648 <bt_addr_le_copy>
	cfg->id = 0U;
   1c046:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1c048:	8125      	strh	r5, [r4, #8]
}
   1c04a:	e7d0      	b.n	1bfee <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1c04c:	462a      	mov	r2, r5
   1c04e:	4641      	mov	r1, r8
   1c050:	4630      	mov	r0, r6
   1c052:	4798      	blx	r3
		if (write < 0) {
   1c054:	2800      	cmp	r0, #0
   1c056:	dbcb      	blt.n	1bff0 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1c058:	3801      	subs	r0, #1
   1c05a:	2801      	cmp	r0, #1
   1c05c:	d9e1      	bls.n	1c022 <bt_gatt_attr_write_ccc+0x66>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1c05e:	f06f 000d 	mvn.w	r0, #13
   1c062:	e7c5      	b.n	1bff0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c064:	f06f 0006 	mvn.w	r0, #6
   1c068:	e7c2      	b.n	1bff0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c06a:	f06f 000c 	mvn.w	r0, #12
   1c06e:	e7bf      	b.n	1bff0 <bt_gatt_attr_write_ccc+0x34>
   1c070:	0002bcd8 	.word	0x0002bcd8

0001c074 <find_sc_cfg>:
{
   1c074:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1c076:	4c06      	ldr	r4, [pc, #24]	; (1c090 <find_sc_cfg+0x1c>)
   1c078:	7823      	ldrb	r3, [r4, #0]
   1c07a:	4283      	cmp	r3, r0
   1c07c:	d104      	bne.n	1c088 <find_sc_cfg+0x14>
   1c07e:	2207      	movs	r2, #7
   1c080:	1c60      	adds	r0, r4, #1
   1c082:	f00b f93b 	bl	272fc <memcmp>
   1c086:	b108      	cbz	r0, 1c08c <find_sc_cfg+0x18>
	return NULL;
   1c088:	2000      	movs	r0, #0
}
   1c08a:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1c08c:	4620      	mov	r0, r4
   1c08e:	e7fc      	b.n	1c08a <find_sc_cfg+0x16>
   1c090:	20004a70 	.word	0x20004a70

0001c094 <sc_save>:
{
   1c094:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c098:	4680      	mov	r8, r0
   1c09a:	460f      	mov	r7, r1
   1c09c:	4616      	mov	r6, r2
   1c09e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1c0a0:	f7ff ffe8 	bl	1c074 <find_sc_cfg>
	if (!cfg) {
   1c0a4:	4604      	mov	r4, r0
   1c0a6:	b998      	cbnz	r0, 1c0d0 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c0a8:	4669      	mov	r1, sp
   1c0aa:	9000      	str	r0, [sp, #0]
   1c0ac:	f8cd 0003 	str.w	r0, [sp, #3]
   1c0b0:	f7ff ffe0 	bl	1c074 <find_sc_cfg>
		if (!cfg) {
   1c0b4:	4604      	mov	r4, r0
   1c0b6:	b930      	cbnz	r0, 1c0c6 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   1c0b8:	480c      	ldr	r0, [pc, #48]	; (1c0ec <sc_save+0x58>)
   1c0ba:	2145      	movs	r1, #69	; 0x45
   1c0bc:	f00a fe82 	bl	26dc4 <z_log_minimal_printk>
}
   1c0c0:	b002      	add	sp, #8
   1c0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1c0c6:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1c0ca:	4639      	mov	r1, r7
   1c0cc:	f00c fabc 	bl	28648 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1c0d0:	8922      	ldrh	r2, [r4, #8]
   1c0d2:	8963      	ldrh	r3, [r4, #10]
   1c0d4:	b91a      	cbnz	r2, 1c0de <sc_save+0x4a>
   1c0d6:	b923      	cbnz	r3, 1c0e2 <sc_save+0x4e>
		cfg->data.start = start;
   1c0d8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1c0da:	8165      	strh	r5, [r4, #10]
   1c0dc:	e7f0      	b.n	1c0c0 <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
   1c0de:	4296      	cmp	r6, r2
   1c0e0:	d302      	bcc.n	1c0e8 <sc_save+0x54>
   1c0e2:	429d      	cmp	r5, r3
   1c0e4:	d9ec      	bls.n	1c0c0 <sc_save+0x2c>
   1c0e6:	e7f8      	b.n	1c0da <sc_save+0x46>
		*start = new_start;
   1c0e8:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1c0ea:	e7fa      	b.n	1c0e2 <sc_save+0x4e>
   1c0ec:	0002bcf7 	.word	0x0002bcf7

0001c0f0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1c0f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c0f4:	4b23      	ldr	r3, [pc, #140]	; (1c184 <disconnected_cb+0x94>)
{
   1c0f6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c0f8:	6882      	ldr	r2, [r0, #8]
   1c0fa:	429a      	cmp	r2, r3
{
   1c0fc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c0fe:	d102      	bne.n	1c106 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1c100:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1c102:	8963      	ldrh	r3, [r4, #10]
   1c104:	bb03      	cbnz	r3, 1c148 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1c106:	2001      	movs	r0, #1
   1c108:	b002      	add	sp, #8
   1c10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c10e:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1c112:	7a28      	ldrb	r0, [r5, #8]
   1c114:	4641      	mov	r1, r8
   1c116:	f00b fa7c 	bl	27612 <bt_addr_le_is_bonded>
   1c11a:	b980      	cbnz	r0, 1c13e <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   1c11c:	4b1a      	ldr	r3, [pc, #104]	; (1c188 <disconnected_cb+0x98>)
   1c11e:	429c      	cmp	r4, r3
   1c120:	d102      	bne.n	1c128 <disconnected_cb+0x38>
					sc_clear(conn);
   1c122:	4628      	mov	r0, r5
   1c124:	f00c fc1a 	bl	2895c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c128:	2500      	movs	r5, #0
   1c12a:	4669      	mov	r1, sp
   1c12c:	4630      	mov	r0, r6
   1c12e:	9500      	str	r5, [sp, #0]
   1c130:	f8cd 5003 	str.w	r5, [sp, #3]
   1c134:	f00c fa88 	bl	28648 <bt_addr_le_copy>
	cfg->id = 0U;
   1c138:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1c13a:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   1c13c:	e019      	b.n	1c172 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c13e:	4641      	mov	r1, r8
   1c140:	4630      	mov	r0, r6
   1c142:	f00c fa81 	bl	28648 <bt_addr_le_copy>
	if (!value_used) {
   1c146:	e014      	b.n	1c172 <disconnected_cb+0x82>
		if (!cfg->value) {
   1c148:	8923      	ldrh	r3, [r4, #8]
   1c14a:	b193      	cbz	r3, 1c172 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c14c:	4626      	mov	r6, r4
   1c14e:	4628      	mov	r0, r5
   1c150:	f816 1b01 	ldrb.w	r1, [r6], #1
   1c154:	4632      	mov	r2, r6
   1c156:	f00b fd61 	bl	27c1c <bt_conn_is_peer_addr_le>
   1c15a:	2800      	cmp	r0, #0
   1c15c:	d1d7      	bne.n	1c10e <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c15e:	7820      	ldrb	r0, [r4, #0]
   1c160:	4631      	mov	r1, r6
   1c162:	f7fe fb37 	bl	1a7d4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1c166:	b120      	cbz	r0, 1c172 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   1c168:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1c16a:	f7fe f90d 	bl	1a388 <bt_conn_unref>
	if (!value_used) {
   1c16e:	2d07      	cmp	r5, #7
   1c170:	d0c9      	beq.n	1c106 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1c172:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1c174:	2100      	movs	r1, #0
   1c176:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1c178:	2b00      	cmp	r3, #0
   1c17a:	d0c4      	beq.n	1c106 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1c17c:	4638      	mov	r0, r7
   1c17e:	4798      	blx	r3
   1c180:	e7c1      	b.n	1c106 <disconnected_cb+0x16>
   1c182:	bf00      	nop
   1c184:	0001bfbd 	.word	0x0001bfbd
   1c188:	20000790 	.word	0x20000790

0001c18c <sc_indicate_rsp>:
{
   1c18c:	b510      	push	{r4, lr}
   1c18e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c190:	4816      	ldr	r0, [pc, #88]	; (1c1ec <sc_indicate_rsp+0x60>)
   1c192:	f3bf 8f5b 	dmb	ish
   1c196:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1c19a:	e853 2f00 	ldrex	r2, [r3]
   1c19e:	f022 0202 	bic.w	r2, r2, #2
   1c1a2:	e843 2100 	strex	r1, r2, [r3]
   1c1a6:	2900      	cmp	r1, #0
   1c1a8:	d1f7      	bne.n	1c19a <sc_indicate_rsp+0xe>
   1c1aa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c1ae:	f3bf 8f5b 	dmb	ish
   1c1b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1c1b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c1b8:	07da      	lsls	r2, r3, #31
   1c1ba:	d504      	bpl.n	1c1c6 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c1bc:	2200      	movs	r2, #0
   1c1be:	2300      	movs	r3, #0
   1c1c0:	3020      	adds	r0, #32
   1c1c2:	f005 fd3d 	bl	21c40 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1c1c6:	4620      	mov	r0, r4
   1c1c8:	f00c f9ec 	bl	285a4 <bt_att_fixed_chan_only>
   1c1cc:	b160      	cbz	r0, 1c1e8 <sc_indicate_rsp+0x5c>
		cfg = find_cf_cfg(conn);
   1c1ce:	4620      	mov	r0, r4
   1c1d0:	f7ff fe8a 	bl	1bee8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c1d4:	b140      	cbz	r0, 1c1e8 <sc_indicate_rsp+0x5c>
   1c1d6:	7a03      	ldrb	r3, [r0, #8]
   1c1d8:	07db      	lsls	r3, r3, #31
   1c1da:	d505      	bpl.n	1c1e8 <sc_indicate_rsp+0x5c>
}
   1c1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1c1e0:	2100      	movs	r1, #0
   1c1e2:	300c      	adds	r0, #12
   1c1e4:	f00c bac7 	b.w	28776 <atomic_set_bit>
}
   1c1e8:	bd10      	pop	{r4, pc}
   1c1ea:	bf00      	nop
   1c1ec:	200031a8 	.word	0x200031a8

0001c1f0 <bt_gatt_init>:
{
   1c1f0:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c1f2:	4b26      	ldr	r3, [pc, #152]	; (1c28c <bt_gatt_init+0x9c>)
   1c1f4:	f3bf 8f5b 	dmb	ish
   1c1f8:	2201      	movs	r2, #1
   1c1fa:	e853 1f00 	ldrex	r1, [r3]
   1c1fe:	2900      	cmp	r1, #0
   1c200:	d103      	bne.n	1c20a <bt_gatt_init+0x1a>
   1c202:	e843 2000 	strex	r0, r2, [r3]
   1c206:	2800      	cmp	r0, #0
   1c208:	d1f7      	bne.n	1c1fa <bt_gatt_init+0xa>
   1c20a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1c20e:	d13b      	bne.n	1c288 <bt_gatt_init+0x98>
   1c210:	f3bf 8f5b 	dmb	ish
   1c214:	4b1e      	ldr	r3, [pc, #120]	; (1c290 <bt_gatt_init+0xa0>)
   1c216:	e853 1f00 	ldrex	r1, [r3]
   1c21a:	2900      	cmp	r1, #0
   1c21c:	d103      	bne.n	1c226 <bt_gatt_init+0x36>
   1c21e:	e843 2000 	strex	r0, r2, [r3]
   1c222:	2800      	cmp	r0, #0
   1c224:	d1f7      	bne.n	1c216 <bt_gatt_init+0x26>
   1c226:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1c22a:	d029      	beq.n	1c280 <bt_gatt_init+0x90>
	list->head = NULL;
   1c22c:	4b19      	ldr	r3, [pc, #100]	; (1c294 <bt_gatt_init+0xa4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1c22e:	491a      	ldr	r1, [pc, #104]	; (1c298 <bt_gatt_init+0xa8>)
   1c230:	481a      	ldr	r0, [pc, #104]	; (1c29c <bt_gatt_init+0xac>)
   1c232:	2200      	movs	r2, #0
	list->tail = NULL;
   1c234:	e9c3 2200 	strd	r2, r2, [r3]
   1c238:	f005 fc0c 	bl	21a54 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1c23c:	4817      	ldr	r0, [pc, #92]	; (1c29c <bt_gatt_init+0xac>)
   1c23e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c242:	2300      	movs	r3, #0
   1c244:	f7fb fd2a 	bl	17c9c <bt_long_wq_schedule>
}
   1c248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1c24c:	4914      	ldr	r1, [pc, #80]	; (1c2a0 <bt_gatt_init+0xb0>)
   1c24e:	4815      	ldr	r0, [pc, #84]	; (1c2a4 <bt_gatt_init+0xb4>)
   1c250:	f005 bc00 	b.w	21a54 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1c254:	4a14      	ldr	r2, [pc, #80]	; (1c2a8 <bt_gatt_init+0xb8>)
   1c256:	6863      	ldr	r3, [r4, #4]
   1c258:	8811      	ldrh	r1, [r2, #0]
   1c25a:	440b      	add	r3, r1
   1c25c:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c25e:	3408      	adds	r4, #8
   1c260:	42ac      	cmp	r4, r5
   1c262:	d90a      	bls.n	1c27a <bt_gatt_init+0x8a>
   1c264:	4811      	ldr	r0, [pc, #68]	; (1c2ac <bt_gatt_init+0xbc>)
   1c266:	4631      	mov	r1, r6
   1c268:	f240 520e 	movw	r2, #1294	; 0x50e
   1c26c:	f00a fd9c 	bl	26da8 <assert_print>
   1c270:	f240 510e 	movw	r1, #1294	; 0x50e
   1c274:	4630      	mov	r0, r6
   1c276:	f00a fd90 	bl	26d9a <assert_post_action>
   1c27a:	42ac      	cmp	r4, r5
   1c27c:	d3ea      	bcc.n	1c254 <bt_gatt_init+0x64>
   1c27e:	e7d5      	b.n	1c22c <bt_gatt_init+0x3c>
   1c280:	4c0b      	ldr	r4, [pc, #44]	; (1c2b0 <bt_gatt_init+0xc0>)
   1c282:	4d0c      	ldr	r5, [pc, #48]	; (1c2b4 <bt_gatt_init+0xc4>)
   1c284:	4e0c      	ldr	r6, [pc, #48]	; (1c2b8 <bt_gatt_init+0xc8>)
   1c286:	e7eb      	b.n	1c260 <bt_gatt_init+0x70>
}
   1c288:	bd70      	pop	{r4, r5, r6, pc}
   1c28a:	bf00      	nop
   1c28c:	20003cc4 	.word	0x20003cc4
   1c290:	20003ce0 	.word	0x20003ce0
   1c294:	20003cac 	.word	0x20003cac
   1c298:	00028ac3 	.word	0x00028ac3
   1c29c:	20003150 	.word	0x20003150
   1c2a0:	0001c8d1 	.word	0x0001c8d1
   1c2a4:	200031c8 	.word	0x200031c8
   1c2a8:	20004a6e 	.word	0x20004a6e
   1c2ac:	0002a576 	.word	0x0002a576
   1c2b0:	00029a64 	.word	0x00029a64
   1c2b4:	00029a7c 	.word	0x00029a7c
   1c2b8:	0002bd1b 	.word	0x0002bd1b

0001c2bc <bt_gatt_attr_get_handle>:
{
   1c2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1c2c0:	4604      	mov	r4, r0
   1c2c2:	b910      	cbnz	r0, 1c2ca <bt_gatt_attr_get_handle+0xe>
		return 0;
   1c2c4:	2000      	movs	r0, #0
}
   1c2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   1c2ca:	8a00      	ldrh	r0, [r0, #16]
   1c2cc:	2800      	cmp	r0, #0
   1c2ce:	d1fa      	bne.n	1c2c6 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c2d0:	4d18      	ldr	r5, [pc, #96]	; (1c334 <bt_gatt_attr_get_handle+0x78>)
   1c2d2:	4e19      	ldr	r6, [pc, #100]	; (1c338 <bt_gatt_attr_get_handle+0x7c>)
   1c2d4:	4f19      	ldr	r7, [pc, #100]	; (1c33c <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   1c2d6:	f04f 0801 	mov.w	r8, #1
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c2da:	42b5      	cmp	r5, r6
   1c2dc:	d90a      	bls.n	1c2f4 <bt_gatt_attr_get_handle+0x38>
   1c2de:	4818      	ldr	r0, [pc, #96]	; (1c340 <bt_gatt_attr_get_handle+0x84>)
   1c2e0:	4639      	mov	r1, r7
   1c2e2:	f240 6265 	movw	r2, #1637	; 0x665
   1c2e6:	f00a fd5f 	bl	26da8 <assert_print>
   1c2ea:	f240 6165 	movw	r1, #1637	; 0x665
   1c2ee:	4638      	mov	r0, r7
   1c2f0:	f00a fd53 	bl	26d9a <assert_post_action>
   1c2f4:	42b5      	cmp	r5, r6
   1c2f6:	d2e5      	bcs.n	1c2c4 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c2f8:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   1c2fc:	4564      	cmp	r4, ip
   1c2fe:	d306      	bcc.n	1c30e <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c300:	f04f 0e14 	mov.w	lr, #20
   1c304:	fb0e c301 	mla	r3, lr, r1, ip
   1c308:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1c30a:	429c      	cmp	r4, r3
   1c30c:	d910      	bls.n	1c330 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   1c30e:	eb08 0001 	add.w	r0, r8, r1
   1c312:	b280      	uxth	r0, r0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c314:	3508      	adds	r5, #8
   1c316:	4680      	mov	r8, r0
   1c318:	e7df      	b.n	1c2da <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   1c31a:	fb0e c302 	mla	r3, lr, r2, ip
   1c31e:	429c      	cmp	r4, r3
   1c320:	d0d1      	beq.n	1c2c6 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c322:	3201      	adds	r2, #1
   1c324:	eb08 0302 	add.w	r3, r8, r2
   1c328:	4291      	cmp	r1, r2
   1c32a:	b298      	uxth	r0, r3
   1c32c:	d1f5      	bne.n	1c31a <bt_gatt_attr_get_handle+0x5e>
   1c32e:	e7f1      	b.n	1c314 <bt_gatt_attr_get_handle+0x58>
   1c330:	2200      	movs	r2, #0
   1c332:	e7f7      	b.n	1c324 <bt_gatt_attr_get_handle+0x68>
   1c334:	00029a64 	.word	0x00029a64
   1c338:	00029a7c 	.word	0x00029a7c
   1c33c:	0002bd1b 	.word	0x0002bd1b
   1c340:	0002a576 	.word	0x0002a576

0001c344 <bt_gatt_foreach_attr_type>:
{
   1c344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c348:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1c34c:	9100      	str	r1, [sp, #0]
   1c34e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1c350:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c354:	2d00      	cmp	r5, #0
   1c356:	bf08      	it	eq
   1c358:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1c35a:	4b2b      	ldr	r3, [pc, #172]	; (1c408 <bt_gatt_foreach_attr_type+0xc4>)
   1c35c:	881b      	ldrh	r3, [r3, #0]
   1c35e:	4283      	cmp	r3, r0
{
   1c360:	4607      	mov	r7, r0
   1c362:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1c364:	d24b      	bcs.n	1c3fe <bt_gatt_foreach_attr_type+0xba>
}
   1c366:	b003      	add	sp, #12
   1c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1c36c:	6873      	ldr	r3, [r6, #4]
   1c36e:	4423      	add	r3, r4
   1c370:	42bb      	cmp	r3, r7
   1c372:	d241      	bcs.n	1c3f8 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   1c374:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c376:	3608      	adds	r6, #8
   1c378:	4b24      	ldr	r3, [pc, #144]	; (1c40c <bt_gatt_foreach_attr_type+0xc8>)
   1c37a:	429e      	cmp	r6, r3
   1c37c:	d90a      	bls.n	1c394 <bt_gatt_foreach_attr_type+0x50>
   1c37e:	4824      	ldr	r0, [pc, #144]	; (1c410 <bt_gatt_foreach_attr_type+0xcc>)
   1c380:	4659      	mov	r1, fp
   1c382:	f240 7229 	movw	r2, #1833	; 0x729
   1c386:	f00a fd0f 	bl	26da8 <assert_print>
   1c38a:	f240 7129 	movw	r1, #1833	; 0x729
   1c38e:	4658      	mov	r0, fp
   1c390:	f00a fd03 	bl	26d9a <assert_post_action>
   1c394:	4b1d      	ldr	r3, [pc, #116]	; (1c40c <bt_gatt_foreach_attr_type+0xc8>)
   1c396:	429e      	cmp	r6, r3
   1c398:	d3e8      	bcc.n	1c36c <bt_gatt_foreach_attr_type+0x28>
   1c39a:	e7e4      	b.n	1c366 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c39c:	5889      	ldr	r1, [r1, r2]
   1c39e:	9301      	str	r3, [sp, #4]
   1c3a0:	4640      	mov	r0, r8
   1c3a2:	f00a fffd 	bl	273a0 <bt_uuid_cmp>
   1c3a6:	9b01      	ldr	r3, [sp, #4]
   1c3a8:	b198      	cbz	r0, 1c3d2 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c3aa:	3401      	adds	r4, #1
   1c3ac:	f10a 0a01 	add.w	sl, sl, #1
   1c3b0:	b2a4      	uxth	r4, r4
   1c3b2:	6873      	ldr	r3, [r6, #4]
   1c3b4:	4553      	cmp	r3, sl
   1c3b6:	d9de      	bls.n	1c376 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1c3b8:	9b00      	ldr	r3, [sp, #0]
   1c3ba:	429c      	cmp	r4, r3
   1c3bc:	d8d3      	bhi.n	1c366 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1c3be:	42bc      	cmp	r4, r7
   1c3c0:	d3f3      	bcc.n	1c3aa <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c3c2:	2314      	movs	r3, #20
   1c3c4:	6831      	ldr	r1, [r6, #0]
   1c3c6:	fb03 f20a 	mul.w	r2, r3, sl
   1c3ca:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c3cc:	f1b8 0f00 	cmp.w	r8, #0
   1c3d0:	d1e4      	bne.n	1c39c <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   1c3d2:	f1b9 0f00 	cmp.w	r9, #0
   1c3d6:	d10b      	bne.n	1c3f0 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   1c3d8:	3d01      	subs	r5, #1
   1c3da:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1c3dc:	4618      	mov	r0, r3
   1c3de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c3e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c3e2:	4621      	mov	r1, r4
   1c3e4:	4798      	blx	r3
	if (!*num_matches) {
   1c3e6:	2d00      	cmp	r5, #0
   1c3e8:	d0bd      	beq.n	1c366 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c3ea:	2800      	cmp	r0, #0
   1c3ec:	d1dd      	bne.n	1c3aa <bt_gatt_foreach_attr_type+0x66>
   1c3ee:	e7ba      	b.n	1c366 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1c3f0:	68da      	ldr	r2, [r3, #12]
   1c3f2:	4591      	cmp	r9, r2
   1c3f4:	d1d9      	bne.n	1c3aa <bt_gatt_foreach_attr_type+0x66>
   1c3f6:	e7ef      	b.n	1c3d8 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c3f8:	f04f 0a00 	mov.w	sl, #0
   1c3fc:	e7d9      	b.n	1c3b2 <bt_gatt_foreach_attr_type+0x6e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c3fe:	4e05      	ldr	r6, [pc, #20]	; (1c414 <bt_gatt_foreach_attr_type+0xd0>)
   1c400:	f8df b014 	ldr.w	fp, [pc, #20]	; 1c418 <bt_gatt_foreach_attr_type+0xd4>
		uint16_t handle = 1;
   1c404:	2401      	movs	r4, #1
   1c406:	e7b7      	b.n	1c378 <bt_gatt_foreach_attr_type+0x34>
   1c408:	20004a6e 	.word	0x20004a6e
   1c40c:	00029a7c 	.word	0x00029a7c
   1c410:	0002a576 	.word	0x0002a576
   1c414:	00029a64 	.word	0x00029a64
   1c418:	0002bd1b 	.word	0x0002bd1b

0001c41c <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   1c41c:	b510      	push	{r4, lr}
   1c41e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   1c420:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c422:	aa1c      	add	r2, sp, #112	; 0x70
   1c424:	4669      	mov	r1, sp
   1c426:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1c428:	e9cd 3300 	strd	r3, r3, [sp]
   1c42c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c430:	f00a fe4e 	bl	270d0 <tc_cmac_setup>
   1c434:	b928      	cbnz	r0, 1c442 <db_hash_gen.constprop.0+0x26>
		BT_ERR("Unable to setup AES CMAC");
   1c436:	4817      	ldr	r0, [pc, #92]	; (1c494 <db_hash_gen.constprop.0+0x78>)
   1c438:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   1c43a:	f00a fcc3 	bl	26dc4 <z_log_minimal_printk>
}
   1c43e:	b048      	add	sp, #288	; 0x120
   1c440:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1c442:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c446:	2001      	movs	r0, #1
   1c448:	4a13      	ldr	r2, [pc, #76]	; (1c498 <db_hash_gen.constprop.0+0x7c>)
   1c44a:	ab04      	add	r3, sp, #16
   1c44c:	f00c fb2e 	bl	28aac <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c450:	4812      	ldr	r0, [pc, #72]	; (1c49c <db_hash_gen.constprop.0+0x80>)
   1c452:	a904      	add	r1, sp, #16
   1c454:	f00a fed2 	bl	271fc <tc_cmac_final>
   1c458:	b910      	cbnz	r0, 1c460 <db_hash_gen.constprop.0+0x44>
		BT_ERR("Unable to calculate hash");
   1c45a:	4811      	ldr	r0, [pc, #68]	; (1c4a0 <db_hash_gen.constprop.0+0x84>)
   1c45c:	2145      	movs	r1, #69	; 0x45
   1c45e:	e7ec      	b.n	1c43a <db_hash_gen.constprop.0+0x1e>
   1c460:	4b0e      	ldr	r3, [pc, #56]	; (1c49c <db_hash_gen.constprop.0+0x80>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c462:	2208      	movs	r2, #8
   1c464:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c468:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c46a:	780c      	ldrb	r4, [r1, #0]
   1c46c:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1c470:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c472:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1c476:	d1f7      	bne.n	1c468 <db_hash_gen.constprop.0+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c478:	f3bf 8f5b 	dmb	ish
   1c47c:	4b09      	ldr	r3, [pc, #36]	; (1c4a4 <db_hash_gen.constprop.0+0x88>)
   1c47e:	e853 2f00 	ldrex	r2, [r3]
   1c482:	f042 0204 	orr.w	r2, r2, #4
   1c486:	e843 2100 	strex	r1, r2, [r3]
   1c48a:	2900      	cmp	r1, #0
   1c48c:	d1f7      	bne.n	1c47e <db_hash_gen.constprop.0+0x62>
   1c48e:	f3bf 8f5b 	dmb	ish
   1c492:	e7d4      	b.n	1c43e <db_hash_gen.constprop.0+0x22>
   1c494:	0002bd4b 	.word	0x0002bd4b
   1c498:	00028693 	.word	0x00028693
   1c49c:	20003140 	.word	0x20003140
   1c4a0:	0002bd69 	.word	0x0002bd69
   1c4a4:	200031f8 	.word	0x200031f8

0001c4a8 <db_hash_read>:
{
   1c4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c4ac:	491d      	ldr	r1, [pc, #116]	; (1c524 <db_hash_read+0x7c>)
{
   1c4ae:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1c4b2:	4680      	mov	r8, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c4b4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1c4b8:	461f      	mov	r7, r3
   1c4ba:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c4bc:	f005 fc0e 	bl	21cdc <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c4c0:	f3bf 8f5b 	dmb	ish
   1c4c4:	4b18      	ldr	r3, [pc, #96]	; (1c528 <db_hash_read+0x80>)
   1c4c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c4c8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c4cc:	0759      	lsls	r1, r3, #29
   1c4ce:	d401      	bmi.n	1c4d4 <db_hash_read+0x2c>
		db_hash_gen(true);
   1c4d0:	f7ff ffa4 	bl	1c41c <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   1c4d4:	4640      	mov	r0, r8
   1c4d6:	f7ff fd07 	bl	1bee8 <find_cf_cfg>
	if (cfg &&
   1c4da:	4601      	mov	r1, r0
   1c4dc:	b170      	cbz	r0, 1c4fc <db_hash_read+0x54>
   1c4de:	7a03      	ldrb	r3, [r0, #8]
   1c4e0:	07da      	lsls	r2, r3, #31
   1c4e2:	d50b      	bpl.n	1c4fc <db_hash_read+0x54>
   1c4e4:	f3bf 8f5b 	dmb	ish
   1c4e8:	68cb      	ldr	r3, [r1, #12]
   1c4ea:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   1c4ee:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c4f0:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   1c4f4:	d402      	bmi.n	1c4fc <db_hash_read+0x54>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1c4f6:	2101      	movs	r1, #1
   1c4f8:	f00c f93d 	bl	28776 <atomic_set_bit>
	if (offset > value_len) {
   1c4fc:	2e10      	cmp	r6, #16
   1c4fe:	d80d      	bhi.n	1c51c <db_hash_read+0x74>
	len = MIN(buf_len, value_len - offset);
   1c500:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1c504:	4909      	ldr	r1, [pc, #36]	; (1c52c <db_hash_read+0x84>)
	len = MIN(buf_len, value_len - offset);
   1c506:	42bc      	cmp	r4, r7
   1c508:	bfa8      	it	ge
   1c50a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c50c:	4622      	mov	r2, r4
   1c50e:	4431      	add	r1, r6
   1c510:	4628      	mov	r0, r5
   1c512:	f00a ff1c 	bl	2734e <memcpy>
}
   1c516:	4620      	mov	r0, r4
   1c518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c51c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1c520:	e7f9      	b.n	1c516 <db_hash_read+0x6e>
   1c522:	bf00      	nop
   1c524:	20003180 	.word	0x20003180
   1c528:	200031a8 	.word	0x200031a8
   1c52c:	20003140 	.word	0x20003140

0001c530 <bt_gatt_attr_next>:
{
   1c530:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1c532:	2300      	movs	r3, #0
   1c534:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1c536:	f7ff fec1 	bl	1c2bc <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1c53a:	1c41      	adds	r1, r0, #1
   1c53c:	b289      	uxth	r1, r1
   1c53e:	4608      	mov	r0, r1
   1c540:	4a03      	ldr	r2, [pc, #12]	; (1c550 <bt_gatt_attr_next+0x20>)
   1c542:	ab01      	add	r3, sp, #4
   1c544:	f00c fab2 	bl	28aac <bt_gatt_foreach_attr>
}
   1c548:	9801      	ldr	r0, [sp, #4]
   1c54a:	b003      	add	sp, #12
   1c54c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c550:	00028601 	.word	0x00028601

0001c554 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   1c554:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c558:	460c      	mov	r4, r1
   1c55a:	4617      	mov	r7, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   1c55c:	4606      	mov	r6, r0
   1c55e:	b950      	cbnz	r0, 1c576 <bt_gatt_is_subscribed+0x22>
   1c560:	4957      	ldr	r1, [pc, #348]	; (1c6c0 <bt_gatt_is_subscribed+0x16c>)
   1c562:	4858      	ldr	r0, [pc, #352]	; (1c6c4 <bt_gatt_is_subscribed+0x170>)
   1c564:	f640 424b 	movw	r2, #3147	; 0xc4b
   1c568:	f00a fc1e 	bl	26da8 <assert_print>
   1c56c:	4854      	ldr	r0, [pc, #336]	; (1c6c0 <bt_gatt_is_subscribed+0x16c>)
   1c56e:	f640 414b 	movw	r1, #3147	; 0xc4b
   1c572:	f00a fc12 	bl	26d9a <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1c576:	b954      	cbnz	r4, 1c58e <bt_gatt_is_subscribed+0x3a>
   1c578:	4951      	ldr	r1, [pc, #324]	; (1c6c0 <bt_gatt_is_subscribed+0x16c>)
   1c57a:	4852      	ldr	r0, [pc, #328]	; (1c6c4 <bt_gatt_is_subscribed+0x170>)
   1c57c:	f640 424c 	movw	r2, #3148	; 0xc4c
   1c580:	f00a fc12 	bl	26da8 <assert_print>
   1c584:	484e      	ldr	r0, [pc, #312]	; (1c6c0 <bt_gatt_is_subscribed+0x16c>)
   1c586:	f640 414c 	movw	r1, #3148	; 0xc4c
   1c58a:	f00a fc06 	bl	26d9a <assert_post_action>

	if (conn->state != BT_CONN_CONNECTED) {
   1c58e:	7ab3      	ldrb	r3, [r6, #10]
   1c590:	2b07      	cmp	r3, #7
   1c592:	d003      	beq.n	1c59c <bt_gatt_is_subscribed+0x48>
		return false;
   1c594:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   1c596:	b004      	add	sp, #16
   1c598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1c59c:	2300      	movs	r3, #0
   1c59e:	f88d 300c 	strb.w	r3, [sp, #12]
   1c5a2:	6820      	ldr	r0, [r4, #0]
   1c5a4:	f642 0303 	movw	r3, #10243	; 0x2803
   1c5a8:	a903      	add	r1, sp, #12
   1c5aa:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c5ae:	f00a fef7 	bl	273a0 <bt_uuid_cmp>
   1c5b2:	b9b0      	cbnz	r0, 1c5e2 <bt_gatt_is_subscribed+0x8e>
		if (!(chrc->properties &
   1c5b4:	68e3      	ldr	r3, [r4, #12]
   1c5b6:	7999      	ldrb	r1, [r3, #6]
   1c5b8:	f011 0030 	ands.w	r0, r1, #48	; 0x30
   1c5bc:	d0eb      	beq.n	1c596 <bt_gatt_is_subscribed+0x42>
		attr = bt_gatt_attr_next(attr);
   1c5be:	4620      	mov	r0, r4
   1c5c0:	f7ff ffb6 	bl	1c530 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1c5c4:	4604      	mov	r4, r0
   1c5c6:	b960      	cbnz	r0, 1c5e2 <bt_gatt_is_subscribed+0x8e>
   1c5c8:	f640 425d 	movw	r2, #3165	; 0xc5d
   1c5cc:	493c      	ldr	r1, [pc, #240]	; (1c6c0 <bt_gatt_is_subscribed+0x16c>)
   1c5ce:	483d      	ldr	r0, [pc, #244]	; (1c6c4 <bt_gatt_is_subscribed+0x170>)
   1c5d0:	f00a fbea 	bl	26da8 <assert_print>
   1c5d4:	483a      	ldr	r0, [pc, #232]	; (1c6c0 <bt_gatt_is_subscribed+0x16c>)
   1c5d6:	f640 415d 	movw	r1, #3165	; 0xc5d
   1c5da:	f00a fbde 	bl	26d9a <assert_post_action>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1c5de:	6823      	ldr	r3, [r4, #0]
   1c5e0:	deff      	udf	#255	; 0xff
   1c5e2:	2300      	movs	r3, #0
   1c5e4:	6820      	ldr	r0, [r4, #0]
   1c5e6:	f88d 300c 	strb.w	r3, [sp, #12]
   1c5ea:	a903      	add	r1, sp, #12
   1c5ec:	f642 1302 	movw	r3, #10498	; 0x2902
   1c5f0:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c5f4:	f00a fed4 	bl	273a0 <bt_uuid_cmp>
   1c5f8:	b178      	cbz	r0, 1c61a <bt_gatt_is_subscribed+0xc6>
		attr = bt_gatt_attr_next(attr);
   1c5fa:	4620      	mov	r0, r4
   1c5fc:	f7ff ff98 	bl	1c530 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1c600:	4604      	mov	r4, r0
   1c602:	b950      	cbnz	r0, 1c61a <bt_gatt_is_subscribed+0xc6>
   1c604:	492e      	ldr	r1, [pc, #184]	; (1c6c0 <bt_gatt_is_subscribed+0x16c>)
   1c606:	482f      	ldr	r0, [pc, #188]	; (1c6c4 <bt_gatt_is_subscribed+0x170>)
   1c608:	f640 4263 	movw	r2, #3171	; 0xc63
   1c60c:	f00a fbcc 	bl	26da8 <assert_print>
   1c610:	482b      	ldr	r0, [pc, #172]	; (1c6c0 <bt_gatt_is_subscribed+0x16c>)
   1c612:	f640 4163 	movw	r1, #3171	; 0xc63
   1c616:	f00a fbc0 	bl	26d9a <assert_post_action>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1c61a:	2500      	movs	r5, #0
   1c61c:	f642 1802 	movw	r8, #10498	; 0x2902
   1c620:	6820      	ldr	r0, [r4, #0]
   1c622:	f88d 5000 	strb.w	r5, [sp]
   1c626:	4669      	mov	r1, sp
   1c628:	f8ad 8002 	strh.w	r8, [sp, #2]
   1c62c:	f00a feb8 	bl	273a0 <bt_uuid_cmp>
   1c630:	b9d8      	cbnz	r0, 1c66a <bt_gatt_is_subscribed+0x116>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1c632:	6820      	ldr	r0, [r4, #0]
   1c634:	2500      	movs	r5, #0
   1c636:	f642 1302 	movw	r3, #10498	; 0x2902
   1c63a:	a903      	add	r1, sp, #12
   1c63c:	f88d 500c 	strb.w	r5, [sp, #12]
   1c640:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c644:	f00a feac 	bl	273a0 <bt_uuid_cmp>
   1c648:	2800      	cmp	r0, #0
   1c64a:	d1a3      	bne.n	1c594 <bt_gatt_is_subscribed+0x40>
	ccc = attr->user_data;
   1c64c:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1c64e:	4622      	mov	r2, r4
   1c650:	4630      	mov	r0, r6
   1c652:	f812 1b01 	ldrb.w	r1, [r2], #1
   1c656:	f00b fae1 	bl	27c1c <bt_conn_is_peer_addr_le>
   1c65a:	2800      	cmp	r0, #0
   1c65c:	d09a      	beq.n	1c594 <bt_gatt_is_subscribed+0x40>
   1c65e:	8923      	ldrh	r3, [r4, #8]
   1c660:	421f      	tst	r7, r3
   1c662:	bf14      	ite	ne
   1c664:	2001      	movne	r0, #1
   1c666:	2000      	moveq	r0, #0
   1c668:	e795      	b.n	1c596 <bt_gatt_is_subscribed+0x42>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1c66a:	6820      	ldr	r0, [r4, #0]
   1c66c:	f88d 5004 	strb.w	r5, [sp, #4]
   1c670:	f642 0303 	movw	r3, #10243	; 0x2803
   1c674:	a901      	add	r1, sp, #4
   1c676:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c67a:	f00a fe91 	bl	273a0 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1c67e:	2800      	cmp	r0, #0
   1c680:	d0d7      	beq.n	1c632 <bt_gatt_is_subscribed+0xde>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c682:	6820      	ldr	r0, [r4, #0]
   1c684:	f88d 5008 	strb.w	r5, [sp, #8]
   1c688:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c68c:	a902      	add	r1, sp, #8
   1c68e:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c692:	f00a fe85 	bl	273a0 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1c696:	2800      	cmp	r0, #0
   1c698:	d0cb      	beq.n	1c632 <bt_gatt_is_subscribed+0xde>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c69a:	6820      	ldr	r0, [r4, #0]
   1c69c:	f88d 500c 	strb.w	r5, [sp, #12]
   1c6a0:	f642 0301 	movw	r3, #10241	; 0x2801
   1c6a4:	a903      	add	r1, sp, #12
   1c6a6:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c6aa:	f00a fe79 	bl	273a0 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c6ae:	2800      	cmp	r0, #0
   1c6b0:	d0bf      	beq.n	1c632 <bt_gatt_is_subscribed+0xde>
		attr = bt_gatt_attr_next(attr);
   1c6b2:	4620      	mov	r0, r4
   1c6b4:	f7ff ff3c 	bl	1c530 <bt_gatt_attr_next>
		if (!attr) {
   1c6b8:	4604      	mov	r4, r0
   1c6ba:	2800      	cmp	r0, #0
   1c6bc:	d1b0      	bne.n	1c620 <bt_gatt_is_subscribed+0xcc>
   1c6be:	e769      	b.n	1c594 <bt_gatt_is_subscribed+0x40>
   1c6c0:	0002bd1b 	.word	0x0002bd1b
   1c6c4:	0002a576 	.word	0x0002a576

0001c6c8 <gatt_indicate>:
{
   1c6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c6cc:	4615      	mov	r5, r2
   1c6ce:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c6d0:	2294      	movs	r2, #148	; 0x94
   1c6d2:	6869      	ldr	r1, [r5, #4]
{
   1c6d4:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c6d6:	f00c f9f6 	bl	28ac6 <bt_gatt_check_perm>
   1c6da:	4680      	mov	r8, r0
   1c6dc:	b140      	cbz	r0, 1c6f0 <gatt_indicate+0x28>
		BT_WARN("Link is not encrypted");
   1c6de:	482b      	ldr	r0, [pc, #172]	; (1c78c <gatt_indicate+0xc4>)
   1c6e0:	2157      	movs	r1, #87	; 0x57
   1c6e2:	f00a fb6f 	bl	26dc4 <z_log_minimal_printk>
		return -EPERM;
   1c6e6:	f04f 35ff 	mov.w	r5, #4294967295
}
   1c6ea:	4628      	mov	r0, r5
   1c6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1c6f0:	6869      	ldr	r1, [r5, #4]
   1c6f2:	2202      	movs	r2, #2
   1c6f4:	4630      	mov	r0, r6
   1c6f6:	f7ff ff2d 	bl	1c554 <bt_gatt_is_subscribed>
   1c6fa:	b930      	cbnz	r0, 1c70a <gatt_indicate+0x42>
			BT_WARN("Device is not subscribed to characteristic");
   1c6fc:	4824      	ldr	r0, [pc, #144]	; (1c790 <gatt_indicate+0xc8>)
   1c6fe:	2157      	movs	r1, #87	; 0x57
   1c700:	f00a fb60 	bl	26dc4 <z_log_minimal_printk>
			return -EINVAL;
   1c704:	f06f 0515 	mvn.w	r5, #21
   1c708:	e7ef      	b.n	1c6ea <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c70a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1c70e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1c710:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c712:	f7ff fa6f 	bl	1bbf4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1c716:	3702      	adds	r7, #2
	if (!req) {
   1c718:	4604      	mov	r4, r0
   1c71a:	b910      	cbnz	r0, 1c722 <gatt_indicate+0x5a>
		return -ENOMEM;
   1c71c:	f06f 050b 	mvn.w	r5, #11
   1c720:	e7e3      	b.n	1c6ea <gatt_indicate+0x22>
	req->func = func;
   1c722:	4b1c      	ldr	r3, [pc, #112]	; (1c794 <gatt_indicate+0xcc>)
   1c724:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1c726:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1c728:	463a      	mov	r2, r7
   1c72a:	211d      	movs	r1, #29
   1c72c:	4630      	mov	r0, r6
   1c72e:	f7fe ff8d 	bl	1b64c <bt_att_create_pdu>
	if (!buf) {
   1c732:	4607      	mov	r7, r0
   1c734:	b938      	cbnz	r0, 1c746 <gatt_indicate+0x7e>
		BT_WARN("No buffer available to send indication");
   1c736:	4818      	ldr	r0, [pc, #96]	; (1c798 <gatt_indicate+0xd0>)
   1c738:	2157      	movs	r1, #87	; 0x57
   1c73a:	f00a fb43 	bl	26dc4 <z_log_minimal_printk>
		bt_att_req_free(req);
   1c73e:	4620      	mov	r0, r4
   1c740:	f7ff fa7a 	bl	1bc38 <bt_att_req_free>
   1c744:	e7ea      	b.n	1c71c <gatt_indicate+0x54>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1c746:	2301      	movs	r3, #1
   1c748:	4642      	mov	r2, r8
   1c74a:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1c74c:	f107 0a08 	add.w	sl, r7, #8
   1c750:	f00b ff4f 	bl	285f2 <bt_att_set_tx_meta_data>
   1c754:	2102      	movs	r1, #2
   1c756:	4650      	mov	r0, sl
   1c758:	f000 fe44 	bl	1d3e4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1c75c:	4680      	mov	r8, r0
   1c75e:	8aa9      	ldrh	r1, [r5, #20]
   1c760:	f828 9b02 	strh.w	r9, [r8], #2
   1c764:	4650      	mov	r0, sl
   1c766:	f000 fe3d 	bl	1d3e4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1c76a:	8aaa      	ldrh	r2, [r5, #20]
   1c76c:	6929      	ldr	r1, [r5, #16]
   1c76e:	4640      	mov	r0, r8
   1c770:	f00a fded 	bl	2734e <memcpy>
	req->buf = buf;
   1c774:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1c776:	4621      	mov	r1, r4
   1c778:	4630      	mov	r0, r6
   1c77a:	f7ff fb81 	bl	1be80 <bt_att_req_send>
	if (err) {
   1c77e:	4605      	mov	r5, r0
   1c780:	2800      	cmp	r0, #0
   1c782:	d0b2      	beq.n	1c6ea <gatt_indicate+0x22>
		bt_att_req_free(req);
   1c784:	4620      	mov	r0, r4
   1c786:	f7ff fa57 	bl	1bc38 <bt_att_req_free>
   1c78a:	e7ae      	b.n	1c6ea <gatt_indicate+0x22>
   1c78c:	0002bd87 	.word	0x0002bd87
   1c790:	0002bda2 	.word	0x0002bda2
   1c794:	0002861b 	.word	0x0002861b
   1c798:	0002bdd2 	.word	0x0002bdd2

0001c79c <bt_gatt_indicate>:
{
   1c79c:	b530      	push	{r4, r5, lr}
   1c79e:	4605      	mov	r5, r0
   1c7a0:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1c7a2:	460c      	mov	r4, r1
   1c7a4:	b951      	cbnz	r1, 1c7bc <bt_gatt_indicate+0x20>
   1c7a6:	4945      	ldr	r1, [pc, #276]	; (1c8bc <bt_gatt_indicate+0x120>)
   1c7a8:	4845      	ldr	r0, [pc, #276]	; (1c8c0 <bt_gatt_indicate+0x124>)
   1c7aa:	f640 320b 	movw	r2, #2827	; 0xb0b
   1c7ae:	f00a fafb 	bl	26da8 <assert_print>
   1c7b2:	4842      	ldr	r0, [pc, #264]	; (1c8bc <bt_gatt_indicate+0x120>)
   1c7b4:	f640 310b 	movw	r1, #2827	; 0xb0b
   1c7b8:	f00a faef 	bl	26d9a <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1c7bc:	6863      	ldr	r3, [r4, #4]
   1c7be:	b963      	cbnz	r3, 1c7da <bt_gatt_indicate+0x3e>
   1c7c0:	6823      	ldr	r3, [r4, #0]
   1c7c2:	b953      	cbnz	r3, 1c7da <bt_gatt_indicate+0x3e>
   1c7c4:	493d      	ldr	r1, [pc, #244]	; (1c8bc <bt_gatt_indicate+0x120>)
   1c7c6:	483e      	ldr	r0, [pc, #248]	; (1c8c0 <bt_gatt_indicate+0x124>)
   1c7c8:	f640 320c 	movw	r2, #2828	; 0xb0c
   1c7cc:	f00a faec 	bl	26da8 <assert_print>
   1c7d0:	483a      	ldr	r0, [pc, #232]	; (1c8bc <bt_gatt_indicate+0x120>)
   1c7d2:	f640 310c 	movw	r1, #2828	; 0xb0c
   1c7d6:	f00a fae0 	bl	26d9a <assert_post_action>
   1c7da:	f3bf 8f5b 	dmb	ish
   1c7de:	4b39      	ldr	r3, [pc, #228]	; (1c8c4 <bt_gatt_indicate+0x128>)
   1c7e0:	681b      	ldr	r3, [r3, #0]
   1c7e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c7e6:	075a      	lsls	r2, r3, #29
   1c7e8:	d561      	bpl.n	1c8ae <bt_gatt_indicate+0x112>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1c7ea:	b115      	cbz	r5, 1c7f2 <bt_gatt_indicate+0x56>
   1c7ec:	7aab      	ldrb	r3, [r5, #10]
   1c7ee:	2b07      	cmp	r3, #7
   1c7f0:	d160      	bne.n	1c8b4 <bt_gatt_indicate+0x118>
	data.attr = params->attr;
   1c7f2:	6860      	ldr	r0, [r4, #4]
   1c7f4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c7f6:	f7ff fd61 	bl	1c2bc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1c7fa:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c7fc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1c800:	b33a      	cbz	r2, 1c852 <bt_gatt_indicate+0xb6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c802:	a905      	add	r1, sp, #20
   1c804:	9102      	str	r1, [sp, #8]
   1c806:	4930      	ldr	r1, [pc, #192]	; (1c8c8 <bt_gatt_indicate+0x12c>)
   1c808:	9101      	str	r1, [sp, #4]
   1c80a:	2101      	movs	r1, #1
	found->attr = NULL;
   1c80c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c80e:	9100      	str	r1, [sp, #0]
   1c810:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1c814:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c816:	f7ff fd95 	bl	1c344 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1c81a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1c81c:	b91b      	cbnz	r3, 1c826 <bt_gatt_indicate+0x8a>
			return -ENOENT;
   1c81e:	f06f 0001 	mvn.w	r0, #1
}
   1c822:	b00b      	add	sp, #44	; 0x2c
   1c824:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1c826:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1c828:	9b05      	ldr	r3, [sp, #20]
   1c82a:	6818      	ldr	r0, [r3, #0]
   1c82c:	2300      	movs	r3, #0
   1c82e:	f88d 3010 	strb.w	r3, [sp, #16]
   1c832:	a904      	add	r1, sp, #16
   1c834:	f642 0303 	movw	r3, #10243	; 0x2803
   1c838:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c83c:	f00a fdb0 	bl	273a0 <bt_uuid_cmp>
   1c840:	b970      	cbnz	r0, 1c860 <bt_gatt_indicate+0xc4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1c842:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1c844:	68c3      	ldr	r3, [r0, #12]
   1c846:	799b      	ldrb	r3, [r3, #6]
   1c848:	069b      	lsls	r3, r3, #26
   1c84a:	d405      	bmi.n	1c858 <bt_gatt_indicate+0xbc>
			return -EINVAL;
   1c84c:	f06f 0015 	mvn.w	r0, #21
   1c850:	e7e7      	b.n	1c822 <bt_gatt_indicate+0x86>
		if (!data.handle) {
   1c852:	2800      	cmp	r0, #0
   1c854:	d1e8      	bne.n	1c828 <bt_gatt_indicate+0x8c>
   1c856:	e7e2      	b.n	1c81e <bt_gatt_indicate+0x82>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1c858:	f00c f8da 	bl	28a10 <bt_gatt_attr_value_handle>
   1c85c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1c860:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1c864:	b13d      	cbz	r5, 1c876 <bt_gatt_indicate+0xda>
		params->_ref = 1;
   1c866:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1c868:	4601      	mov	r1, r0
		params->_ref = 1;
   1c86a:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1c86c:	4622      	mov	r2, r4
   1c86e:	4628      	mov	r0, r5
   1c870:	f7ff ff2a 	bl	1c6c8 <gatt_indicate>
   1c874:	e7d5      	b.n	1c822 <bt_gatt_indicate+0x86>
	data.err = -ENOTCONN;
   1c876:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c87a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1c87c:	2302      	movs	r3, #2
   1c87e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c882:	f642 1302 	movw	r3, #10498	; 0x2902
   1c886:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c88a:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1c88c:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c88e:	9302      	str	r3, [sp, #8]
   1c890:	4b0e      	ldr	r3, [pc, #56]	; (1c8cc <bt_gatt_indicate+0x130>)
   1c892:	9301      	str	r3, [sp, #4]
   1c894:	2301      	movs	r3, #1
   1c896:	9300      	str	r3, [sp, #0]
   1c898:	aa04      	add	r2, sp, #16
   1c89a:	462b      	mov	r3, r5
   1c89c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1c8a0:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c8a2:	f88d 5010 	strb.w	r5, [sp, #16]
   1c8a6:	f7ff fd4d 	bl	1c344 <bt_gatt_foreach_attr_type>
	return data.err;
   1c8aa:	9807      	ldr	r0, [sp, #28]
   1c8ac:	e7b9      	b.n	1c822 <bt_gatt_indicate+0x86>
		return -EAGAIN;
   1c8ae:	f06f 000a 	mvn.w	r0, #10
   1c8b2:	e7b6      	b.n	1c822 <bt_gatt_indicate+0x86>
		return -ENOTCONN;
   1c8b4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c8b8:	e7b3      	b.n	1c822 <bt_gatt_indicate+0x86>
   1c8ba:	bf00      	nop
   1c8bc:	0002bd1b 	.word	0x0002bd1b
   1c8c0:	0002a576 	.word	0x0002a576
   1c8c4:	20000580 	.word	0x20000580
   1c8c8:	00028641 	.word	0x00028641
   1c8cc:	0001cad9 	.word	0x0001cad9

0001c8d0 <sc_process>:
{
   1c8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c8d2:	f3bf 8f5b 	dmb	ish
   1c8d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1c8d8:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1c8dc:	079b      	lsls	r3, r3, #30
{
   1c8de:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1c8e0:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1c8e4:	d50a      	bpl.n	1c8fc <sc_process+0x2c>
   1c8e6:	491d      	ldr	r1, [pc, #116]	; (1c95c <sc_process+0x8c>)
   1c8e8:	481d      	ldr	r0, [pc, #116]	; (1c960 <sc_process+0x90>)
   1c8ea:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   1c8ee:	f00a fa5b 	bl	26da8 <assert_print>
   1c8f2:	481a      	ldr	r0, [pc, #104]	; (1c95c <sc_process+0x8c>)
   1c8f4:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   1c8f8:	f00a fa4f 	bl	26d9a <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1c8fc:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1c900:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1c904:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1c908:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c90c:	f3bf 8f5b 	dmb	ish
   1c910:	e855 3f00 	ldrex	r3, [r5]
   1c914:	f023 0301 	bic.w	r3, r3, #1
   1c918:	e845 3200 	strex	r2, r3, [r5]
   1c91c:	2a00      	cmp	r2, #0
   1c91e:	d1f7      	bne.n	1c910 <sc_process+0x40>
   1c920:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1c924:	4b0f      	ldr	r3, [pc, #60]	; (1c964 <sc_process+0x94>)
   1c926:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1c92a:	4b0f      	ldr	r3, [pc, #60]	; (1c968 <sc_process+0x98>)
   1c92c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1c930:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1c932:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1c934:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1c938:	2304      	movs	r3, #4
	sc->start = 0U;
   1c93a:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1c93e:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1c942:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1c946:	f1a4 0120 	sub.w	r1, r4, #32
   1c94a:	f7ff ff27 	bl	1c79c <bt_gatt_indicate>
   1c94e:	b918      	cbnz	r0, 1c958 <sc_process+0x88>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1c950:	2101      	movs	r1, #1
   1c952:	4628      	mov	r0, r5
   1c954:	f00b ff0f 	bl	28776 <atomic_set_bit>
}
   1c958:	b003      	add	sp, #12
   1c95a:	bd30      	pop	{r4, r5, pc}
   1c95c:	0002bd1b 	.word	0x0002bd1b
   1c960:	0002a576 	.word	0x0002a576
   1c964:	00029ea0 	.word	0x00029ea0
   1c968:	0001c18d 	.word	0x0001c18d

0001c96c <update_ccc>:
{
   1c96c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c96e:	4b2a      	ldr	r3, [pc, #168]	; (1ca18 <update_ccc+0xac>)
	struct bt_conn *conn = data->conn;
   1c970:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c972:	6882      	ldr	r2, [r0, #8]
   1c974:	429a      	cmp	r2, r3
{
   1c976:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c978:	d116      	bne.n	1c9a8 <update_ccc+0x3c>
	ccc = attr->user_data;
   1c97a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1c97c:	8933      	ldrh	r3, [r6, #8]
   1c97e:	b19b      	cbz	r3, 1c9a8 <update_ccc+0x3c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c980:	4632      	mov	r2, r6
   1c982:	4628      	mov	r0, r5
   1c984:	f812 1b01 	ldrb.w	r1, [r2], #1
   1c988:	f00b f948 	bl	27c1c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1c98c:	b160      	cbz	r0, 1c9a8 <update_ccc+0x3c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1c98e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1c992:	4621      	mov	r1, r4
   1c994:	4628      	mov	r0, r5
   1c996:	f00c f896 	bl	28ac6 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1c99a:	2803      	cmp	r0, #3
   1c99c:	d107      	bne.n	1c9ae <update_ccc+0x42>
				BT_WARN("CCC %p not writable", attr);
   1c99e:	481f      	ldr	r0, [pc, #124]	; (1ca1c <update_ccc+0xb0>)
   1c9a0:	4622      	mov	r2, r4
   1c9a2:	2157      	movs	r1, #87	; 0x57
   1c9a4:	f00a fa0e 	bl	26dc4 <z_log_minimal_printk>
}
   1c9a8:	2001      	movs	r0, #1
   1c9aa:	b002      	add	sp, #8
   1c9ac:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   1c9ae:	4631      	mov	r1, r6
   1c9b0:	4620      	mov	r0, r4
   1c9b2:	f00b fe28 	bl	28606 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1c9b6:	4b1a      	ldr	r3, [pc, #104]	; (1ca20 <update_ccc+0xb4>)
   1c9b8:	429e      	cmp	r6, r3
   1c9ba:	d1f5      	bne.n	1c9a8 <update_ccc+0x3c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c9bc:	7a28      	ldrb	r0, [r5, #8]
   1c9be:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1c9c2:	f7ff fb57 	bl	1c074 <find_sc_cfg>
	if (!cfg) {
   1c9c6:	2800      	cmp	r0, #0
   1c9c8:	d0ee      	beq.n	1c9a8 <update_ccc+0x3c>
	if (!(cfg->data.start || cfg->data.end)) {
   1c9ca:	8902      	ldrh	r2, [r0, #8]
   1c9cc:	8943      	ldrh	r3, [r0, #10]
   1c9ce:	ea53 0102 	orrs.w	r1, r3, r2
   1c9d2:	d0e9      	beq.n	1c9a8 <update_ccc+0x3c>
	index = bt_conn_index(conn);
   1c9d4:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1c9d6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1c9da:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1c9de:	f7fd fde3 	bl	1a5a8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1c9e2:	4910      	ldr	r1, [pc, #64]	; (1ca24 <update_ccc+0xb8>)
   1c9e4:	4a10      	ldr	r2, [pc, #64]	; (1ca28 <update_ccc+0xbc>)
   1c9e6:	2318      	movs	r3, #24
   1c9e8:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c9ec:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1c9ee:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1c9f0:	4a0e      	ldr	r2, [pc, #56]	; (1ca2c <update_ccc+0xc0>)
   1c9f2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1c9f4:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c9f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1c9fa:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1c9fc:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c9fe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1ca02:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ca04:	4628      	mov	r0, r5
   1ca06:	f7ff fec9 	bl	1c79c <bt_gatt_indicate>
   1ca0a:	2800      	cmp	r0, #0
   1ca0c:	d0cc      	beq.n	1c9a8 <update_ccc+0x3c>
		BT_ERR("SC restore indication failed");
   1ca0e:	4808      	ldr	r0, [pc, #32]	; (1ca30 <update_ccc+0xc4>)
   1ca10:	2145      	movs	r1, #69	; 0x45
   1ca12:	f00a f9d7 	bl	26dc4 <z_log_minimal_printk>
   1ca16:	e7c7      	b.n	1c9a8 <update_ccc+0x3c>
   1ca18:	0001bfbd 	.word	0x0001bfbd
   1ca1c:	0002bdfe 	.word	0x0002bdfe
   1ca20:	20000790 	.word	0x20000790
   1ca24:	20003cc8 	.word	0x20003cc8
   1ca28:	00029ea0 	.word	0x00029ea0
   1ca2c:	000289a3 	.word	0x000289a3
   1ca30:	0002be17 	.word	0x0002be17

0001ca34 <gatt_notify>:
{
   1ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ca38:	4614      	mov	r4, r2
   1ca3a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ca3c:	2294      	movs	r2, #148	; 0x94
   1ca3e:	6861      	ldr	r1, [r4, #4]
{
   1ca40:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ca42:	f00c f840 	bl	28ac6 <bt_gatt_check_perm>
   1ca46:	b138      	cbz	r0, 1ca58 <gatt_notify+0x24>
		BT_WARN("Link is not encrypted");
   1ca48:	4820      	ldr	r0, [pc, #128]	; (1cacc <gatt_notify+0x98>)
   1ca4a:	2157      	movs	r1, #87	; 0x57
   1ca4c:	f00a f9ba 	bl	26dc4 <z_log_minimal_printk>
		return -EPERM;
   1ca50:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ca54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1ca58:	6861      	ldr	r1, [r4, #4]
   1ca5a:	2201      	movs	r2, #1
   1ca5c:	4630      	mov	r0, r6
   1ca5e:	f7ff fd79 	bl	1c554 <bt_gatt_is_subscribed>
   1ca62:	b930      	cbnz	r0, 1ca72 <gatt_notify+0x3e>
			BT_WARN("Device is not subscribed to characteristic");
   1ca64:	481a      	ldr	r0, [pc, #104]	; (1cad0 <gatt_notify+0x9c>)
   1ca66:	2157      	movs	r1, #87	; 0x57
   1ca68:	f00a f9ac 	bl	26dc4 <z_log_minimal_printk>
			return -EINVAL;
   1ca6c:	f06f 0015 	mvn.w	r0, #21
   1ca70:	e7f0      	b.n	1ca54 <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   1ca72:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1ca74:	211b      	movs	r1, #27
   1ca76:	3202      	adds	r2, #2
   1ca78:	4630      	mov	r0, r6
   1ca7a:	f7fe fde7 	bl	1b64c <bt_att_create_pdu>
	if (!buf) {
   1ca7e:	4605      	mov	r5, r0
   1ca80:	b930      	cbnz	r0, 1ca90 <gatt_notify+0x5c>
		BT_WARN("No buffer available to send notification");
   1ca82:	4814      	ldr	r0, [pc, #80]	; (1cad4 <gatt_notify+0xa0>)
   1ca84:	2157      	movs	r1, #87	; 0x57
   1ca86:	f00a f99d 	bl	26dc4 <z_log_minimal_printk>
		return -ENOMEM;
   1ca8a:	f06f 000b 	mvn.w	r0, #11
   1ca8e:	e7e1      	b.n	1ca54 <gatt_notify+0x20>
   1ca90:	f100 0908 	add.w	r9, r0, #8
   1ca94:	2102      	movs	r1, #2
   1ca96:	4648      	mov	r0, r9
   1ca98:	f000 fca4 	bl	1d3e4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1ca9c:	4607      	mov	r7, r0
   1ca9e:	89a1      	ldrh	r1, [r4, #12]
   1caa0:	f827 8b02 	strh.w	r8, [r7], #2
   1caa4:	4648      	mov	r0, r9
   1caa6:	f000 fc9d 	bl	1d3e4 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1caaa:	89a2      	ldrh	r2, [r4, #12]
   1caac:	68a1      	ldr	r1, [r4, #8]
   1caae:	4638      	mov	r0, r7
   1cab0:	f00a fc4d 	bl	2734e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1cab4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1cab8:	4628      	mov	r0, r5
   1caba:	2301      	movs	r3, #1
   1cabc:	f00b fd99 	bl	285f2 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1cac0:	4629      	mov	r1, r5
   1cac2:	4630      	mov	r0, r6
}
   1cac4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1cac8:	f7ff b978 	b.w	1bdbc <bt_att_send>
   1cacc:	0002bd87 	.word	0x0002bd87
   1cad0:	0002bda2 	.word	0x0002bda2
   1cad4:	0002be39 	.word	0x0002be39

0001cad8 <notify_cb>:
{
   1cad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cada:	4b3b      	ldr	r3, [pc, #236]	; (1cbc8 <notify_cb+0xf0>)
{
   1cadc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cade:	6882      	ldr	r2, [r0, #8]
   1cae0:	429a      	cmp	r2, r3
{
   1cae2:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cae4:	d129      	bne.n	1cb3a <notify_cb+0x62>
	ccc = attr->user_data;
   1cae6:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1cae8:	4b38      	ldr	r3, [pc, #224]	; (1cbcc <notify_cb+0xf4>)
   1caea:	429d      	cmp	r5, r3
   1caec:	d11a      	bne.n	1cb24 <notify_cb+0x4c>
   1caee:	4e38      	ldr	r6, [pc, #224]	; (1cbd0 <notify_cb+0xf8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1caf0:	2300      	movs	r3, #0
   1caf2:	2207      	movs	r2, #7
   1caf4:	4669      	mov	r1, sp
   1caf6:	1c70      	adds	r0, r6, #1
   1caf8:	9300      	str	r3, [sp, #0]
   1cafa:	f8cd 3003 	str.w	r3, [sp, #3]
   1cafe:	f00a fbfd 	bl	272fc <memcmp>
   1cb02:	b178      	cbz	r0, 1cb24 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1cb04:	4631      	mov	r1, r6
   1cb06:	2207      	movs	r2, #7
   1cb08:	f811 0b01 	ldrb.w	r0, [r1], #1
   1cb0c:	f7fd fe9c 	bl	1a848 <bt_conn_lookup_state_le>
			if (!conn) {
   1cb10:	b9b8      	cbnz	r0, 1cb42 <notify_cb+0x6a>
				sc = (struct sc_data *)data->ind_params->data;
   1cb12:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1cb14:	4631      	mov	r1, r6
				sc = (struct sc_data *)data->ind_params->data;
   1cb16:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1cb18:	f811 0b01 	ldrb.w	r0, [r1], #1
   1cb1c:	8853      	ldrh	r3, [r2, #2]
   1cb1e:	8812      	ldrh	r2, [r2, #0]
   1cb20:	f7ff fab8 	bl	1c094 <sc_save>
		if (cfg->value != data->type) {
   1cb24:	892a      	ldrh	r2, [r5, #8]
   1cb26:	89a3      	ldrh	r3, [r4, #12]
   1cb28:	429a      	cmp	r2, r3
   1cb2a:	d106      	bne.n	1cb3a <notify_cb+0x62>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1cb2c:	4629      	mov	r1, r5
   1cb2e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1cb32:	f7fd fe4f 	bl	1a7d4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1cb36:	4606      	mov	r6, r0
   1cb38:	b930      	cbnz	r0, 1cb48 <notify_cb+0x70>
	return BT_GATT_ITER_CONTINUE;
   1cb3a:	2701      	movs	r7, #1
}
   1cb3c:	4638      	mov	r0, r7
   1cb3e:	b003      	add	sp, #12
   1cb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1cb42:	f7fd fc21 	bl	1a388 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1cb46:	e7ed      	b.n	1cb24 <notify_cb+0x4c>
		if (conn->state != BT_CONN_CONNECTED) {
   1cb48:	7a83      	ldrb	r3, [r0, #10]
   1cb4a:	2b07      	cmp	r3, #7
   1cb4c:	d002      	beq.n	1cb54 <notify_cb+0x7c>
			bt_conn_unref(conn);
   1cb4e:	f7fd fc1b 	bl	1a388 <bt_conn_unref>
			continue;
   1cb52:	e7f2      	b.n	1cb3a <notify_cb+0x62>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1cb54:	696b      	ldr	r3, [r5, #20]
   1cb56:	b123      	cbz	r3, 1cb62 <notify_cb+0x8a>
   1cb58:	4639      	mov	r1, r7
   1cb5a:	4798      	blx	r3
   1cb5c:	b908      	cbnz	r0, 1cb62 <notify_cb+0x8a>
			bt_conn_unref(conn);
   1cb5e:	4630      	mov	r0, r6
   1cb60:	e7f5      	b.n	1cb4e <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cb62:	4639      	mov	r1, r7
   1cb64:	2294      	movs	r2, #148	; 0x94
   1cb66:	4630      	mov	r0, r6
   1cb68:	f00b ffad 	bl	28ac6 <bt_gatt_check_perm>
   1cb6c:	4607      	mov	r7, r0
   1cb6e:	b120      	cbz	r0, 1cb7a <notify_cb+0xa2>
			BT_WARN("Link is not encrypted");
   1cb70:	4818      	ldr	r0, [pc, #96]	; (1cbd4 <notify_cb+0xfc>)
   1cb72:	2157      	movs	r1, #87	; 0x57
   1cb74:	f00a f926 	bl	26dc4 <z_log_minimal_printk>
   1cb78:	e7f1      	b.n	1cb5e <notify_cb+0x86>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1cb7a:	89a3      	ldrh	r3, [r4, #12]
   1cb7c:	2b02      	cmp	r3, #2
   1cb7e:	d115      	bne.n	1cbac <notify_cb+0xd4>
   1cb80:	892b      	ldrh	r3, [r5, #8]
   1cb82:	079a      	lsls	r2, r3, #30
   1cb84:	d51e      	bpl.n	1cbc4 <notify_cb+0xec>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1cb86:	6922      	ldr	r2, [r4, #16]
   1cb88:	88a1      	ldrh	r1, [r4, #4]
   1cb8a:	4630      	mov	r0, r6
   1cb8c:	f7ff fd9c 	bl	1c6c8 <gatt_indicate>
			if (err == 0) {
   1cb90:	4605      	mov	r5, r0
   1cb92:	b918      	cbnz	r0, 1cb9c <notify_cb+0xc4>
				data->ind_params->_ref++;
   1cb94:	6922      	ldr	r2, [r4, #16]
   1cb96:	7d93      	ldrb	r3, [r2, #22]
   1cb98:	3301      	adds	r3, #1
   1cb9a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1cb9c:	4630      	mov	r0, r6
   1cb9e:	f7fd fbf3 	bl	1a388 <bt_conn_unref>
		if (err < 0) {
   1cba2:	2d00      	cmp	r5, #0
   1cba4:	dbca      	blt.n	1cb3c <notify_cb+0x64>
		data->err = 0;
   1cba6:	2300      	movs	r3, #0
   1cba8:	60a3      	str	r3, [r4, #8]
   1cbaa:	e7c6      	b.n	1cb3a <notify_cb+0x62>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1cbac:	2b01      	cmp	r3, #1
   1cbae:	d109      	bne.n	1cbc4 <notify_cb+0xec>
   1cbb0:	892b      	ldrh	r3, [r5, #8]
   1cbb2:	07db      	lsls	r3, r3, #31
   1cbb4:	d506      	bpl.n	1cbc4 <notify_cb+0xec>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1cbb6:	6922      	ldr	r2, [r4, #16]
   1cbb8:	88a1      	ldrh	r1, [r4, #4]
   1cbba:	4630      	mov	r0, r6
   1cbbc:	f7ff ff3a 	bl	1ca34 <gatt_notify>
   1cbc0:	4605      	mov	r5, r0
   1cbc2:	e7eb      	b.n	1cb9c <notify_cb+0xc4>
			err = 0;
   1cbc4:	463d      	mov	r5, r7
   1cbc6:	e7e9      	b.n	1cb9c <notify_cb+0xc4>
   1cbc8:	0001bfbd 	.word	0x0001bfbd
   1cbcc:	20000790 	.word	0x20000790
   1cbd0:	20004a70 	.word	0x20004a70
   1cbd4:	0002bd87 	.word	0x0002bd87

0001cbd8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1cbd8:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cbda:	4a06      	ldr	r2, [pc, #24]	; (1cbf4 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1cbdc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cbde:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1cbe0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cbe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1cbe6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cbea:	f00b ff5f 	bl	28aac <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1cbee:	b003      	add	sp, #12
   1cbf0:	f85d fb04 	ldr.w	pc, [sp], #4
   1cbf4:	0001c96d 	.word	0x0001c96d

0001cbf8 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1cbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1cbfa:	4b08      	ldr	r3, [pc, #32]	; (1cc1c <bt_gatt_att_max_mtu_changed+0x24>)
   1cbfc:	681c      	ldr	r4, [r3, #0]
   1cbfe:	4605      	mov	r5, r0
   1cc00:	460e      	mov	r6, r1
   1cc02:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1cc04:	b14c      	cbz	r4, 1cc1a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1cc06:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1cc0a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1cc0c:	b11b      	cbz	r3, 1cc16 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1cc0e:	463a      	mov	r2, r7
   1cc10:	4631      	mov	r1, r6
   1cc12:	4628      	mov	r0, r5
   1cc14:	4798      	blx	r3
	return node->next;
   1cc16:	6864      	ldr	r4, [r4, #4]
   1cc18:	e7f4      	b.n	1cc04 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1cc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cc1c:	20003cac 	.word	0x20003cac

0001cc20 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1cc20:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1cc22:	4603      	mov	r3, r0
   1cc24:	4a0f      	ldr	r2, [pc, #60]	; (1cc64 <bt_gatt_disconnected+0x44>)
{
   1cc26:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1cc28:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cc2c:	2001      	movs	r0, #1
   1cc2e:	f00b ff3d 	bl	28aac <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1cc32:	4620      	mov	r0, r4
   1cc34:	f7ff f958 	bl	1bee8 <find_cf_cfg>
	if (!cfg) {
   1cc38:	4605      	mov	r5, r0
   1cc3a:	b188      	cbz	r0, 1cc60 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cc3c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1cc40:	7a20      	ldrb	r0, [r4, #8]
   1cc42:	4631      	mov	r1, r6
   1cc44:	f00a fce5 	bl	27612 <bt_addr_le_is_bonded>
   1cc48:	b920      	cbnz	r0, 1cc54 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1cc4a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1cc4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1cc50:	f00b bd74 	b.w	2873c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cc54:	4631      	mov	r1, r6
   1cc56:	1c68      	adds	r0, r5, #1
}
   1cc58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cc5c:	f00b bcf4 	b.w	28648 <bt_addr_le_copy>
}
   1cc60:	bd70      	pop	{r4, r5, r6, pc}
   1cc62:	bf00      	nop
   1cc64:	0001c0f1 	.word	0x0001c0f1

0001cc68 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1cc68:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1cc6a:	4b07      	ldr	r3, [pc, #28]	; (1cc88 <bt_smp_accept+0x20>)
{
   1cc6c:	4602      	mov	r2, r0
		if (smp->chan.conn) {
   1cc6e:	6818      	ldr	r0, [r3, #0]
   1cc70:	b918      	cbnz	r0, 1cc7a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   1cc72:	4a06      	ldr	r2, [pc, #24]	; (1cc8c <bt_smp_accept+0x24>)
   1cc74:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   1cc76:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1cc78:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1cc7a:	4805      	ldr	r0, [pc, #20]	; (1cc90 <bt_smp_accept+0x28>)
   1cc7c:	2145      	movs	r1, #69	; 0x45
   1cc7e:	f00a f8a1 	bl	26dc4 <z_log_minimal_printk>
   1cc82:	f06f 000b 	mvn.w	r0, #11
   1cc86:	e7f7      	b.n	1cc78 <bt_smp_accept+0x10>
   1cc88:	20003ce4 	.word	0x20003ce4
   1cc8c:	00029fa4 	.word	0x00029fa4
   1cc90:	0002be76 	.word	0x0002be76

0001cc94 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1cc94:	4b02      	ldr	r3, [pc, #8]	; (1cca0 <net_buf_pool_get+0xc>)
   1cc96:	2234      	movs	r2, #52	; 0x34
   1cc98:	fb02 3000 	mla	r0, r2, r0, r3
   1cc9c:	4770      	bx	lr
   1cc9e:	bf00      	nop
   1cca0:	20000ac8 	.word	0x20000ac8

0001cca4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cca4:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1cca6:	4b07      	ldr	r3, [pc, #28]	; (1ccc4 <net_buf_id+0x20>)
   1cca8:	2134      	movs	r1, #52	; 0x34
   1ccaa:	fb01 3302 	mla	r3, r1, r2, r3
   1ccae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ccb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1ccb4:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ccb6:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ccb8:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1ccbc:	fbb0 f0f3 	udiv	r0, r0, r3
   1ccc0:	4770      	bx	lr
   1ccc2:	bf00      	nop
   1ccc4:	20000ac8 	.word	0x20000ac8

0001ccc8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ccc8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ccca:	4b0a      	ldr	r3, [pc, #40]	; (1ccf4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cccc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ccce:	2434      	movs	r4, #52	; 0x34
   1ccd0:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1ccd4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ccd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ccd8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ccda:	6823      	ldr	r3, [r4, #0]
   1ccdc:	429a      	cmp	r2, r3
   1ccde:	bf94      	ite	ls
   1cce0:	600a      	strls	r2, [r1, #0]
   1cce2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1cce4:	f7ff ffde 	bl	1cca4 <net_buf_id>
   1cce8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1ccec:	fb02 3000 	mla	r0, r2, r0, r3
   1ccf0:	bd10      	pop	{r4, pc}
   1ccf2:	bf00      	nop
   1ccf4:	20000ac8 	.word	0x20000ac8

0001ccf8 <net_buf_reset>:
{
   1ccf8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ccfa:	7943      	ldrb	r3, [r0, #5]
{
   1ccfc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ccfe:	b143      	cbz	r3, 1cd12 <net_buf_reset+0x1a>
   1cd00:	490c      	ldr	r1, [pc, #48]	; (1cd34 <net_buf_reset+0x3c>)
   1cd02:	480d      	ldr	r0, [pc, #52]	; (1cd38 <net_buf_reset+0x40>)
   1cd04:	2256      	movs	r2, #86	; 0x56
   1cd06:	f00a f84f 	bl	26da8 <assert_print>
   1cd0a:	480a      	ldr	r0, [pc, #40]	; (1cd34 <net_buf_reset+0x3c>)
   1cd0c:	2156      	movs	r1, #86	; 0x56
   1cd0e:	f00a f844 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1cd12:	6823      	ldr	r3, [r4, #0]
   1cd14:	b143      	cbz	r3, 1cd28 <net_buf_reset+0x30>
   1cd16:	4907      	ldr	r1, [pc, #28]	; (1cd34 <net_buf_reset+0x3c>)
   1cd18:	4807      	ldr	r0, [pc, #28]	; (1cd38 <net_buf_reset+0x40>)
   1cd1a:	2257      	movs	r2, #87	; 0x57
   1cd1c:	f00a f844 	bl	26da8 <assert_print>
   1cd20:	4804      	ldr	r0, [pc, #16]	; (1cd34 <net_buf_reset+0x3c>)
   1cd22:	2157      	movs	r1, #87	; 0x57
   1cd24:	f00a f839 	bl	26d9a <assert_post_action>
	buf->len  = 0U;
   1cd28:	2300      	movs	r3, #0
   1cd2a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1cd2c:	6923      	ldr	r3, [r4, #16]
   1cd2e:	60a3      	str	r3, [r4, #8]
}
   1cd30:	bd10      	pop	{r4, pc}
   1cd32:	bf00      	nop
   1cd34:	0002bea7 	.word	0x0002bea7
   1cd38:	0002a576 	.word	0x0002a576

0001cd3c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd40:	b085      	sub	sp, #20
   1cd42:	4605      	mov	r5, r0
   1cd44:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1cd46:	4610      	mov	r0, r2
   1cd48:	4619      	mov	r1, r3
{
   1cd4a:	4691      	mov	r9, r2
   1cd4c:	4698      	mov	r8, r3
   1cd4e:	4617      	mov	r7, r2
   1cd50:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1cd52:	f00c fc04 	bl	2955e <sys_clock_timeout_end_calc>
   1cd56:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1cd5a:	b945      	cbnz	r5, 1cd6e <net_buf_alloc_len+0x32>
   1cd5c:	4969      	ldr	r1, [pc, #420]	; (1cf04 <net_buf_alloc_len+0x1c8>)
   1cd5e:	486a      	ldr	r0, [pc, #424]	; (1cf08 <net_buf_alloc_len+0x1cc>)
   1cd60:	22f4      	movs	r2, #244	; 0xf4
   1cd62:	f00a f821 	bl	26da8 <assert_print>
   1cd66:	4867      	ldr	r0, [pc, #412]	; (1cf04 <net_buf_alloc_len+0x1c8>)
   1cd68:	21f4      	movs	r1, #244	; 0xf4
   1cd6a:	f00a f816 	bl	26d9a <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1cd6e:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1cd72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd76:	f3ef 8b11 	mrs	fp, BASEPRI
   1cd7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cd82:	4650      	mov	r0, sl
   1cd84:	f003 fffe 	bl	20d84 <z_spin_lock_valid>
   1cd88:	b940      	cbnz	r0, 1cd9c <net_buf_alloc_len+0x60>
   1cd8a:	4960      	ldr	r1, [pc, #384]	; (1cf0c <net_buf_alloc_len+0x1d0>)
   1cd8c:	485e      	ldr	r0, [pc, #376]	; (1cf08 <net_buf_alloc_len+0x1cc>)
   1cd8e:	228e      	movs	r2, #142	; 0x8e
   1cd90:	f00a f80a 	bl	26da8 <assert_print>
   1cd94:	485d      	ldr	r0, [pc, #372]	; (1cf0c <net_buf_alloc_len+0x1d0>)
   1cd96:	218e      	movs	r1, #142	; 0x8e
   1cd98:	f009 ffff 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   1cd9c:	4650      	mov	r0, sl
   1cd9e:	f004 f80f 	bl	20dc0 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1cda2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1cda4:	2b00      	cmp	r3, #0
   1cda6:	d076      	beq.n	1ce96 <net_buf_alloc_len+0x15a>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1cda8:	8c2a      	ldrh	r2, [r5, #32]
   1cdaa:	429a      	cmp	r2, r3
   1cdac:	d94c      	bls.n	1ce48 <net_buf_alloc_len+0x10c>
	return z_impl_k_queue_get(queue, timeout);
   1cdae:	2200      	movs	r2, #0
   1cdb0:	2300      	movs	r3, #0
   1cdb2:	4628      	mov	r0, r5
   1cdb4:	f004 fa60 	bl	21278 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1cdb8:	4604      	mov	r4, r0
   1cdba:	2800      	cmp	r0, #0
   1cdbc:	d044      	beq.n	1ce48 <net_buf_alloc_len+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cdbe:	4650      	mov	r0, sl
   1cdc0:	f003 ffee 	bl	20da0 <z_spin_unlock_valid>
   1cdc4:	b940      	cbnz	r0, 1cdd8 <net_buf_alloc_len+0x9c>
   1cdc6:	4951      	ldr	r1, [pc, #324]	; (1cf0c <net_buf_alloc_len+0x1d0>)
   1cdc8:	484f      	ldr	r0, [pc, #316]	; (1cf08 <net_buf_alloc_len+0x1cc>)
   1cdca:	22b9      	movs	r2, #185	; 0xb9
   1cdcc:	f009 ffec 	bl	26da8 <assert_print>
   1cdd0:	484e      	ldr	r0, [pc, #312]	; (1cf0c <net_buf_alloc_len+0x1d0>)
   1cdd2:	21b9      	movs	r1, #185	; 0xb9
   1cdd4:	f009 ffe1 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   1cdd8:	f38b 8811 	msr	BASEPRI, fp
   1cddc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1cde0:	9d03      	ldr	r5, [sp, #12]
   1cde2:	2d00      	cmp	r5, #0
   1cde4:	f000 808c 	beq.w	1cf00 <net_buf_alloc_len+0x1c4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cde8:	ea58 0309 	orrs.w	r3, r8, r9
   1cdec:	d010      	beq.n	1ce10 <net_buf_alloc_len+0xd4>
   1cdee:	f1b8 3fff 	cmp.w	r8, #4294967295
   1cdf2:	bf08      	it	eq
   1cdf4:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1cdf8:	d00a      	beq.n	1ce10 <net_buf_alloc_len+0xd4>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1cdfa:	f006 fa47 	bl	2328c <sys_clock_tick_get>
   1cdfe:	9b01      	ldr	r3, [sp, #4]
   1ce00:	1a1f      	subs	r7, r3, r0
   1ce02:	9b02      	ldr	r3, [sp, #8]
   1ce04:	eb63 0601 	sbc.w	r6, r3, r1
   1ce08:	2e00      	cmp	r6, #0
   1ce0a:	bfbc      	itt	lt
   1ce0c:	2700      	movlt	r7, #0
   1ce0e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ce10:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ce12:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1cf10 <net_buf_alloc_len+0x1d4>
   1ce16:	f04f 0934 	mov.w	r9, #52	; 0x34
   1ce1a:	fb09 8303 	mla	r3, r9, r3, r8
   1ce1e:	463a      	mov	r2, r7
   1ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce22:	681b      	ldr	r3, [r3, #0]
   1ce24:	a903      	add	r1, sp, #12
   1ce26:	f8d3 a000 	ldr.w	sl, [r3]
   1ce2a:	4620      	mov	r0, r4
   1ce2c:	4633      	mov	r3, r6
   1ce2e:	47d0      	blx	sl
   1ce30:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ce32:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1ce34:	2800      	cmp	r0, #0
   1ce36:	d14b      	bne.n	1ced0 <net_buf_alloc_len+0x194>
	k_lifo_put(&pool->free, buf);
   1ce38:	79a0      	ldrb	r0, [r4, #6]
   1ce3a:	4621      	mov	r1, r4
   1ce3c:	fb00 8009 	mla	r0, r0, r9, r8
   1ce40:	f00c fad2 	bl	293e8 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1ce44:	4634      	mov	r4, r6
}
   1ce46:	e03f      	b.n	1cec8 <net_buf_alloc_len+0x18c>
		uninit_count = pool->uninit_count--;
   1ce48:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1ce4a:	1e63      	subs	r3, r4, #1
   1ce4c:	846b      	strh	r3, [r5, #34]	; 0x22
   1ce4e:	4650      	mov	r0, sl
   1ce50:	f003 ffa6 	bl	20da0 <z_spin_unlock_valid>
   1ce54:	b940      	cbnz	r0, 1ce68 <net_buf_alloc_len+0x12c>
   1ce56:	492d      	ldr	r1, [pc, #180]	; (1cf0c <net_buf_alloc_len+0x1d0>)
   1ce58:	482b      	ldr	r0, [pc, #172]	; (1cf08 <net_buf_alloc_len+0x1cc>)
   1ce5a:	22b9      	movs	r2, #185	; 0xb9
   1ce5c:	f009 ffa4 	bl	26da8 <assert_print>
   1ce60:	482a      	ldr	r0, [pc, #168]	; (1cf0c <net_buf_alloc_len+0x1d0>)
   1ce62:	21b9      	movs	r1, #185	; 0xb9
   1ce64:	f009 ff99 	bl	26d9a <assert_post_action>
   1ce68:	f38b 8811 	msr	BASEPRI, fp
   1ce6c:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ce70:	8c28      	ldrh	r0, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ce72:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ce76:	1b04      	subs	r4, r0, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ce78:	f102 0317 	add.w	r3, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ce7c:	6b28      	ldr	r0, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ce7e:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ce82:	fb04 0403 	mla	r4, r4, r3, r0
	return pool - _net_buf_pool_list;
   1ce86:	4822      	ldr	r0, [pc, #136]	; (1cf10 <net_buf_alloc_len+0x1d4>)
   1ce88:	4b22      	ldr	r3, [pc, #136]	; (1cf14 <net_buf_alloc_len+0x1d8>)
	buf->user_data_size = pool->user_data_size;
   1ce8a:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1ce8c:	1a2d      	subs	r5, r5, r0
   1ce8e:	10ad      	asrs	r5, r5, #2
   1ce90:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1ce92:	71a5      	strb	r5, [r4, #6]
		goto success;
   1ce94:	e7a4      	b.n	1cde0 <net_buf_alloc_len+0xa4>
   1ce96:	4650      	mov	r0, sl
   1ce98:	f003 ff82 	bl	20da0 <z_spin_unlock_valid>
   1ce9c:	b940      	cbnz	r0, 1ceb0 <net_buf_alloc_len+0x174>
   1ce9e:	491b      	ldr	r1, [pc, #108]	; (1cf0c <net_buf_alloc_len+0x1d0>)
   1cea0:	4819      	ldr	r0, [pc, #100]	; (1cf08 <net_buf_alloc_len+0x1cc>)
   1cea2:	22b9      	movs	r2, #185	; 0xb9
   1cea4:	f009 ff80 	bl	26da8 <assert_print>
   1cea8:	4818      	ldr	r0, [pc, #96]	; (1cf0c <net_buf_alloc_len+0x1d0>)
   1ceaa:	21b9      	movs	r1, #185	; 0xb9
   1ceac:	f009 ff75 	bl	26d9a <assert_post_action>
   1ceb0:	f38b 8811 	msr	BASEPRI, fp
   1ceb4:	f3bf 8f6f 	isb	sy
   1ceb8:	464a      	mov	r2, r9
   1ceba:	4643      	mov	r3, r8
   1cebc:	4628      	mov	r0, r5
   1cebe:	f004 f9db 	bl	21278 <z_impl_k_queue_get>
	if (!buf) {
   1cec2:	4604      	mov	r4, r0
   1cec4:	2800      	cmp	r0, #0
   1cec6:	d18b      	bne.n	1cde0 <net_buf_alloc_len+0xa4>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1cec8:	4620      	mov	r0, r4
   1ceca:	b005      	add	sp, #20
   1cecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1ced0:	9b03      	ldr	r3, [sp, #12]
   1ced2:	429d      	cmp	r5, r3
   1ced4:	d90a      	bls.n	1ceec <net_buf_alloc_len+0x1b0>
   1ced6:	490b      	ldr	r1, [pc, #44]	; (1cf04 <net_buf_alloc_len+0x1c8>)
   1ced8:	480b      	ldr	r0, [pc, #44]	; (1cf08 <net_buf_alloc_len+0x1cc>)
   1ceda:	f240 1255 	movw	r2, #341	; 0x155
   1cede:	f009 ff63 	bl	26da8 <assert_print>
   1cee2:	4808      	ldr	r0, [pc, #32]	; (1cf04 <net_buf_alloc_len+0x1c8>)
   1cee4:	f240 1155 	movw	r1, #341	; 0x155
   1cee8:	f009 ff57 	bl	26d9a <assert_post_action>
	buf->frags = NULL;
   1ceec:	2300      	movs	r3, #0
   1ceee:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1cef0:	2301      	movs	r3, #1
   1cef2:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1cef4:	9b03      	ldr	r3, [sp, #12]
   1cef6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1cef8:	4620      	mov	r0, r4
   1cefa:	f7ff fefd 	bl	1ccf8 <net_buf_reset>
	return buf;
   1cefe:	e7e3      	b.n	1cec8 <net_buf_alloc_len+0x18c>
		buf->__buf = NULL;
   1cf00:	6125      	str	r5, [r4, #16]
   1cf02:	e7f3      	b.n	1ceec <net_buf_alloc_len+0x1b0>
   1cf04:	0002bea7 	.word	0x0002bea7
   1cf08:	0002a576 	.word	0x0002a576
   1cf0c:	0002a705 	.word	0x0002a705
   1cf10:	20000ac8 	.word	0x20000ac8
   1cf14:	c4ec4ec5 	.word	0xc4ec4ec5

0001cf18 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1cf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf1c:	4606      	mov	r6, r0
   1cf1e:	f004 f9ab 	bl	21278 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1cf22:	4605      	mov	r5, r0
   1cf24:	b140      	cbz	r0, 1cf38 <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1cf26:	4f12      	ldr	r7, [pc, #72]	; (1cf70 <net_buf_get+0x58>)
   1cf28:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1cf74 <net_buf_get+0x5c>
   1cf2c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cf2e:	7963      	ldrb	r3, [r4, #5]
   1cf30:	f013 0301 	ands.w	r3, r3, #1
   1cf34:	d103      	bne.n	1cf3e <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1cf36:	6023      	str	r3, [r4, #0]

	return buf;
}
   1cf38:	4628      	mov	r0, r5
   1cf3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cf3e:	2200      	movs	r2, #0
   1cf40:	2300      	movs	r3, #0
   1cf42:	4630      	mov	r0, r6
   1cf44:	f004 f998 	bl	21278 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1cf48:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1cf4a:	b950      	cbnz	r0, 1cf62 <net_buf_get+0x4a>
   1cf4c:	4639      	mov	r1, r7
   1cf4e:	4640      	mov	r0, r8
   1cf50:	f240 12ad 	movw	r2, #429	; 0x1ad
   1cf54:	f009 ff28 	bl	26da8 <assert_print>
   1cf58:	f240 11ad 	movw	r1, #429	; 0x1ad
   1cf5c:	4638      	mov	r0, r7
   1cf5e:	f009 ff1c 	bl	26d9a <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1cf62:	7963      	ldrb	r3, [r4, #5]
   1cf64:	f023 0301 	bic.w	r3, r3, #1
   1cf68:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cf6a:	6824      	ldr	r4, [r4, #0]
   1cf6c:	e7df      	b.n	1cf2e <net_buf_get+0x16>
   1cf6e:	bf00      	nop
   1cf70:	0002bea7 	.word	0x0002bea7
   1cf74:	0002a576 	.word	0x0002a576

0001cf78 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1cf78:	b538      	push	{r3, r4, r5, lr}
   1cf7a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1cf7c:	4604      	mov	r4, r0
   1cf7e:	b950      	cbnz	r0, 1cf96 <net_buf_simple_reserve+0x1e>
   1cf80:	490d      	ldr	r1, [pc, #52]	; (1cfb8 <net_buf_simple_reserve+0x40>)
   1cf82:	480e      	ldr	r0, [pc, #56]	; (1cfbc <net_buf_simple_reserve+0x44>)
   1cf84:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1cf88:	f009 ff0e 	bl	26da8 <assert_print>
   1cf8c:	480a      	ldr	r0, [pc, #40]	; (1cfb8 <net_buf_simple_reserve+0x40>)
   1cf8e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1cf92:	f009 ff02 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1cf96:	88a3      	ldrh	r3, [r4, #4]
   1cf98:	b153      	cbz	r3, 1cfb0 <net_buf_simple_reserve+0x38>
   1cf9a:	4907      	ldr	r1, [pc, #28]	; (1cfb8 <net_buf_simple_reserve+0x40>)
   1cf9c:	4807      	ldr	r0, [pc, #28]	; (1cfbc <net_buf_simple_reserve+0x44>)
   1cf9e:	f240 12c5 	movw	r2, #453	; 0x1c5
   1cfa2:	f009 ff01 	bl	26da8 <assert_print>
   1cfa6:	4804      	ldr	r0, [pc, #16]	; (1cfb8 <net_buf_simple_reserve+0x40>)
   1cfa8:	f240 11c5 	movw	r1, #453	; 0x1c5
   1cfac:	f009 fef5 	bl	26d9a <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1cfb0:	68a3      	ldr	r3, [r4, #8]
   1cfb2:	442b      	add	r3, r5
   1cfb4:	6023      	str	r3, [r4, #0]
}
   1cfb6:	bd38      	pop	{r3, r4, r5, pc}
   1cfb8:	0002bea7 	.word	0x0002bea7
   1cfbc:	0002a576 	.word	0x0002a576

0001cfc0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cfc2:	460c      	mov	r4, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1cfc4:	4605      	mov	r5, r0
   1cfc6:	b950      	cbnz	r0, 1cfde <net_buf_slist_put+0x1e>
   1cfc8:	4928      	ldr	r1, [pc, #160]	; (1d06c <net_buf_slist_put+0xac>)
   1cfca:	4829      	ldr	r0, [pc, #164]	; (1d070 <net_buf_slist_put+0xb0>)
   1cfcc:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1cfd0:	f009 feea 	bl	26da8 <assert_print>
   1cfd4:	4825      	ldr	r0, [pc, #148]	; (1d06c <net_buf_slist_put+0xac>)
   1cfd6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1cfda:	f009 fede 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1cfde:	b954      	cbnz	r4, 1cff6 <net_buf_slist_put+0x36>
   1cfe0:	4922      	ldr	r1, [pc, #136]	; (1d06c <net_buf_slist_put+0xac>)
   1cfe2:	4823      	ldr	r0, [pc, #140]	; (1d070 <net_buf_slist_put+0xb0>)
   1cfe4:	f240 12d3 	movw	r2, #467	; 0x1d3
   1cfe8:	f009 fede 	bl	26da8 <assert_print>
   1cfec:	481f      	ldr	r0, [pc, #124]	; (1d06c <net_buf_slist_put+0xac>)
   1cfee:	f240 11d3 	movw	r1, #467	; 0x1d3
   1cff2:	f009 fed2 	bl	26d9a <assert_post_action>
{
   1cff6:	4626      	mov	r6, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1cff8:	6832      	ldr	r2, [r6, #0]
   1cffa:	bb72      	cbnz	r2, 1d05a <net_buf_slist_put+0x9a>
	__asm__ volatile(
   1cffc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d000:	f3ef 8711 	mrs	r7, BASEPRI
   1d004:	f383 8812 	msr	BASEPRI_MAX, r3
   1d008:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d00c:	4819      	ldr	r0, [pc, #100]	; (1d074 <net_buf_slist_put+0xb4>)
   1d00e:	f003 feb9 	bl	20d84 <z_spin_lock_valid>
   1d012:	b940      	cbnz	r0, 1d026 <net_buf_slist_put+0x66>
   1d014:	4918      	ldr	r1, [pc, #96]	; (1d078 <net_buf_slist_put+0xb8>)
   1d016:	4816      	ldr	r0, [pc, #88]	; (1d070 <net_buf_slist_put+0xb0>)
   1d018:	228e      	movs	r2, #142	; 0x8e
   1d01a:	f009 fec5 	bl	26da8 <assert_print>
   1d01e:	4816      	ldr	r0, [pc, #88]	; (1d078 <net_buf_slist_put+0xb8>)
   1d020:	218e      	movs	r1, #142	; 0x8e
   1d022:	f009 feba 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   1d026:	4813      	ldr	r0, [pc, #76]	; (1d074 <net_buf_slist_put+0xb4>)
   1d028:	f003 feca 	bl	20dc0 <z_spin_lock_set_owner>
Z_GENLIST_APPEND_LIST(slist, snode)
   1d02c:	b11c      	cbz	r4, 1d036 <net_buf_slist_put+0x76>
	return list->tail;
   1d02e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1d030:	b9cb      	cbnz	r3, 1d066 <net_buf_slist_put+0xa6>
	list->head = node;
   1d032:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1d034:	606e      	str	r6, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d036:	480f      	ldr	r0, [pc, #60]	; (1d074 <net_buf_slist_put+0xb4>)
   1d038:	f003 feb2 	bl	20da0 <z_spin_unlock_valid>
   1d03c:	b940      	cbnz	r0, 1d050 <net_buf_slist_put+0x90>
   1d03e:	490e      	ldr	r1, [pc, #56]	; (1d078 <net_buf_slist_put+0xb8>)
   1d040:	480b      	ldr	r0, [pc, #44]	; (1d070 <net_buf_slist_put+0xb0>)
   1d042:	22b9      	movs	r2, #185	; 0xb9
   1d044:	f009 feb0 	bl	26da8 <assert_print>
   1d048:	480b      	ldr	r0, [pc, #44]	; (1d078 <net_buf_slist_put+0xb8>)
   1d04a:	21b9      	movs	r1, #185	; 0xb9
   1d04c:	f009 fea5 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   1d050:	f387 8811 	msr	BASEPRI, r7
   1d054:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1d058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tail->flags |= NET_BUF_FRAGS;
   1d05a:	7973      	ldrb	r3, [r6, #5]
   1d05c:	f043 0301 	orr.w	r3, r3, #1
   1d060:	7173      	strb	r3, [r6, #5]
   1d062:	4616      	mov	r6, r2
   1d064:	e7c8      	b.n	1cff8 <net_buf_slist_put+0x38>
	parent->next = child;
   1d066:	601c      	str	r4, [r3, #0]
}
   1d068:	e7e4      	b.n	1d034 <net_buf_slist_put+0x74>
   1d06a:	bf00      	nop
   1d06c:	0002bea7 	.word	0x0002bea7
   1d070:	0002a576 	.word	0x0002a576
   1d074:	20003d78 	.word	0x20003d78
   1d078:	0002a705 	.word	0x0002a705

0001d07c <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1d07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1d080:	4604      	mov	r4, r0
   1d082:	b950      	cbnz	r0, 1d09a <net_buf_slist_get+0x1e>
   1d084:	4931      	ldr	r1, [pc, #196]	; (1d14c <net_buf_slist_get+0xd0>)
   1d086:	4832      	ldr	r0, [pc, #200]	; (1d150 <net_buf_slist_get+0xd4>)
   1d088:	f240 12e3 	movw	r2, #483	; 0x1e3
   1d08c:	f009 fe8c 	bl	26da8 <assert_print>
   1d090:	482e      	ldr	r0, [pc, #184]	; (1d14c <net_buf_slist_get+0xd0>)
   1d092:	f240 11e3 	movw	r1, #483	; 0x1e3
   1d096:	f009 fe80 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   1d09a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d09e:	f3ef 8811 	mrs	r8, BASEPRI
   1d0a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d0aa:	482a      	ldr	r0, [pc, #168]	; (1d154 <net_buf_slist_get+0xd8>)
   1d0ac:	f003 fe6a 	bl	20d84 <z_spin_lock_valid>
   1d0b0:	b940      	cbnz	r0, 1d0c4 <net_buf_slist_get+0x48>
   1d0b2:	4929      	ldr	r1, [pc, #164]	; (1d158 <net_buf_slist_get+0xdc>)
   1d0b4:	4826      	ldr	r0, [pc, #152]	; (1d150 <net_buf_slist_get+0xd4>)
   1d0b6:	228e      	movs	r2, #142	; 0x8e
   1d0b8:	f009 fe76 	bl	26da8 <assert_print>
   1d0bc:	4826      	ldr	r0, [pc, #152]	; (1d158 <net_buf_slist_get+0xdc>)
   1d0be:	218e      	movs	r1, #142	; 0x8e
   1d0c0:	f009 fe6b 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   1d0c4:	4823      	ldr	r0, [pc, #140]	; (1d154 <net_buf_slist_get+0xd8>)
   1d0c6:	f003 fe7b 	bl	20dc0 <z_spin_lock_set_owner>
	return list->head;
   1d0ca:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d0cc:	b176      	cbz	r6, 1d0ec <net_buf_slist_get+0x70>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d0ce:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1d0d0:	6833      	ldr	r3, [r6, #0]

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   1d0d2:	4f1e      	ldr	r7, [pc, #120]	; (1d14c <net_buf_slist_get+0xd0>)
   1d0d4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1d150 <net_buf_slist_get+0xd4>
	list->head = node;
   1d0d8:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d0da:	4296      	cmp	r6, r2
	list->tail = node;
   1d0dc:	bf08      	it	eq
   1d0de:	6063      	streq	r3, [r4, #4]
{
   1d0e0:	4635      	mov	r5, r6
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d0e2:	796b      	ldrb	r3, [r5, #5]
   1d0e4:	f013 0301 	ands.w	r3, r3, #1
   1d0e8:	d114      	bne.n	1d114 <net_buf_slist_get+0x98>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1d0ea:	602b      	str	r3, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d0ec:	4819      	ldr	r0, [pc, #100]	; (1d154 <net_buf_slist_get+0xd8>)
   1d0ee:	f003 fe57 	bl	20da0 <z_spin_unlock_valid>
   1d0f2:	b940      	cbnz	r0, 1d106 <net_buf_slist_get+0x8a>
   1d0f4:	4918      	ldr	r1, [pc, #96]	; (1d158 <net_buf_slist_get+0xdc>)
   1d0f6:	4816      	ldr	r0, [pc, #88]	; (1d150 <net_buf_slist_get+0xd4>)
   1d0f8:	22b9      	movs	r2, #185	; 0xb9
   1d0fa:	f009 fe55 	bl	26da8 <assert_print>
   1d0fe:	4816      	ldr	r0, [pc, #88]	; (1d158 <net_buf_slist_get+0xdc>)
   1d100:	21b9      	movs	r1, #185	; 0xb9
   1d102:	f009 fe4a 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   1d106:	f388 8811 	msr	BASEPRI, r8
   1d10a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1d10e:	4630      	mov	r0, r6
   1d110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   1d114:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d116:	b98b      	cbnz	r3, 1d13c <net_buf_slist_get+0xc0>
			__ASSERT_NO_MSG(frag->frags);
   1d118:	4639      	mov	r1, r7
   1d11a:	4648      	mov	r0, r9
			frag->frags = (void *)sys_slist_get(list);
   1d11c:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1d11e:	f240 12ed 	movw	r2, #493	; 0x1ed
   1d122:	f009 fe41 	bl	26da8 <assert_print>
   1d126:	f240 11ed 	movw	r1, #493	; 0x1ed
   1d12a:	4638      	mov	r0, r7
   1d12c:	f009 fe35 	bl	26d9a <assert_post_action>
			frag->flags &= ~NET_BUF_FRAGS;
   1d130:	796b      	ldrb	r3, [r5, #5]
   1d132:	f023 0301 	bic.w	r3, r3, #1
   1d136:	716b      	strb	r3, [r5, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d138:	682d      	ldr	r5, [r5, #0]
   1d13a:	e7d2      	b.n	1d0e2 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d13c:	6861      	ldr	r1, [r4, #4]
	return node->next;
   1d13e:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1d140:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d142:	428b      	cmp	r3, r1
	list->tail = node;
   1d144:	bf08      	it	eq
   1d146:	6062      	streq	r2, [r4, #4]
			frag->frags = (void *)sys_slist_get(list);
   1d148:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1d14a:	e7f1      	b.n	1d130 <net_buf_slist_get+0xb4>
   1d14c:	0002bea7 	.word	0x0002bea7
   1d150:	0002a576 	.word	0x0002a576
   1d154:	20003d78 	.word	0x20003d78
   1d158:	0002a705 	.word	0x0002a705

0001d15c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1d15c:	b538      	push	{r3, r4, r5, lr}
   1d15e:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1d160:	4605      	mov	r5, r0
   1d162:	b950      	cbnz	r0, 1d17a <net_buf_put+0x1e>
   1d164:	4912      	ldr	r1, [pc, #72]	; (1d1b0 <net_buf_put+0x54>)
   1d166:	4813      	ldr	r0, [pc, #76]	; (1d1b4 <net_buf_put+0x58>)
   1d168:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d16c:	f009 fe1c 	bl	26da8 <assert_print>
   1d170:	480f      	ldr	r0, [pc, #60]	; (1d1b0 <net_buf_put+0x54>)
   1d172:	f44f 7100 	mov.w	r1, #512	; 0x200
   1d176:	f009 fe10 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1d17a:	b954      	cbnz	r4, 1d192 <net_buf_put+0x36>
   1d17c:	490c      	ldr	r1, [pc, #48]	; (1d1b0 <net_buf_put+0x54>)
   1d17e:	480d      	ldr	r0, [pc, #52]	; (1d1b4 <net_buf_put+0x58>)
   1d180:	f240 2201 	movw	r2, #513	; 0x201
   1d184:	f009 fe10 	bl	26da8 <assert_print>
   1d188:	4809      	ldr	r0, [pc, #36]	; (1d1b0 <net_buf_put+0x54>)
   1d18a:	f240 2101 	movw	r1, #513	; 0x201
   1d18e:	f009 fe04 	bl	26d9a <assert_post_action>
{
   1d192:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1d194:	6811      	ldr	r1, [r2, #0]
   1d196:	b929      	cbnz	r1, 1d1a4 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1d198:	4621      	mov	r1, r4
   1d19a:	4628      	mov	r0, r5
}
   1d19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1d1a0:	f004 b816 	b.w	211d0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1d1a4:	7953      	ldrb	r3, [r2, #5]
   1d1a6:	f043 0301 	orr.w	r3, r3, #1
   1d1aa:	7153      	strb	r3, [r2, #5]
   1d1ac:	460a      	mov	r2, r1
   1d1ae:	e7f1      	b.n	1d194 <net_buf_put+0x38>
   1d1b0:	0002bea7 	.word	0x0002bea7
   1d1b4:	0002a576 	.word	0x0002a576

0001d1b8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1d1bc:	4605      	mov	r5, r0
   1d1be:	b328      	cbz	r0, 1d20c <net_buf_unref+0x54>
   1d1c0:	4e1c      	ldr	r6, [pc, #112]	; (1d234 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d1c2:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1d1c4:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1d1c8:	462c      	mov	r4, r5
   1d1ca:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1d1cc:	7923      	ldrb	r3, [r4, #4]
   1d1ce:	3b01      	subs	r3, #1
   1d1d0:	b2db      	uxtb	r3, r3
   1d1d2:	7123      	strb	r3, [r4, #4]
   1d1d4:	b9c3      	cbnz	r3, 1d208 <net_buf_unref+0x50>
		if (buf->__buf) {
   1d1d6:	6921      	ldr	r1, [r4, #16]
   1d1d8:	b159      	cbz	r1, 1d1f2 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d1da:	7963      	ldrb	r3, [r4, #5]
   1d1dc:	079b      	lsls	r3, r3, #30
   1d1de:	d407      	bmi.n	1d1f0 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d1e0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1d1e2:	fb08 6303 	mla	r3, r8, r3, r6
   1d1e6:	4620      	mov	r0, r4
   1d1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d1ea:	681b      	ldr	r3, [r3, #0]
   1d1ec:	689b      	ldr	r3, [r3, #8]
   1d1ee:	4798      	blx	r3
			buf->__buf = NULL;
   1d1f0:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1d1f2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d1f4:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1d1f6:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1d1fa:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1d1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d1fe:	b193      	cbz	r3, 1d226 <net_buf_unref+0x6e>
			pool->destroy(buf);
   1d200:	4620      	mov	r0, r4
   1d202:	4798      	blx	r3
	while (buf) {
   1d204:	2d00      	cmp	r5, #0
   1d206:	d1df      	bne.n	1d1c8 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1d20c:	490a      	ldr	r1, [pc, #40]	; (1d238 <net_buf_unref+0x80>)
   1d20e:	480b      	ldr	r0, [pc, #44]	; (1d23c <net_buf_unref+0x84>)
   1d210:	f44f 7204 	mov.w	r2, #528	; 0x210
   1d214:	f009 fdc8 	bl	26da8 <assert_print>
}
   1d218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1d21c:	4806      	ldr	r0, [pc, #24]	; (1d238 <net_buf_unref+0x80>)
   1d21e:	f44f 7104 	mov.w	r1, #528	; 0x210
   1d222:	f009 bdba 	b.w	26d9a <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1d226:	4621      	mov	r1, r4
   1d228:	fb00 6008 	mla	r0, r0, r8, r6
   1d22c:	f00c f8dc 	bl	293e8 <k_queue_prepend>
}
   1d230:	e7e8      	b.n	1d204 <net_buf_unref+0x4c>
   1d232:	bf00      	nop
   1d234:	20000ac8 	.word	0x20000ac8
   1d238:	0002bea7 	.word	0x0002bea7
   1d23c:	0002a576 	.word	0x0002a576

0001d240 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1d240:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1d242:	4604      	mov	r4, r0
   1d244:	b950      	cbnz	r0, 1d25c <net_buf_ref+0x1c>
   1d246:	4908      	ldr	r1, [pc, #32]	; (1d268 <net_buf_ref+0x28>)
   1d248:	4808      	ldr	r0, [pc, #32]	; (1d26c <net_buf_ref+0x2c>)
   1d24a:	f240 223f 	movw	r2, #575	; 0x23f
   1d24e:	f009 fdab 	bl	26da8 <assert_print>
   1d252:	4805      	ldr	r0, [pc, #20]	; (1d268 <net_buf_ref+0x28>)
   1d254:	f240 213f 	movw	r1, #575	; 0x23f
   1d258:	f009 fd9f 	bl	26d9a <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1d25c:	7923      	ldrb	r3, [r4, #4]
   1d25e:	3301      	adds	r3, #1
   1d260:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1d262:	4620      	mov	r0, r4
   1d264:	bd10      	pop	{r4, pc}
   1d266:	bf00      	nop
   1d268:	0002bea7 	.word	0x0002bea7
   1d26c:	0002a576 	.word	0x0002a576

0001d270 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1d270:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1d272:	4604      	mov	r4, r0
   1d274:	b950      	cbnz	r0, 1d28c <net_buf_frag_last+0x1c>
   1d276:	4908      	ldr	r1, [pc, #32]	; (1d298 <net_buf_frag_last+0x28>)
   1d278:	4808      	ldr	r0, [pc, #32]	; (1d29c <net_buf_frag_last+0x2c>)
   1d27a:	f44f 721f 	mov.w	r2, #636	; 0x27c
   1d27e:	f009 fd93 	bl	26da8 <assert_print>
   1d282:	4805      	ldr	r0, [pc, #20]	; (1d298 <net_buf_frag_last+0x28>)
   1d284:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1d288:	f009 fd87 	bl	26d9a <assert_post_action>

	while (buf->frags) {
   1d28c:	4620      	mov	r0, r4
   1d28e:	6824      	ldr	r4, [r4, #0]
   1d290:	2c00      	cmp	r4, #0
   1d292:	d1fb      	bne.n	1d28c <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1d294:	bd10      	pop	{r4, pc}
   1d296:	bf00      	nop
   1d298:	0002bea7 	.word	0x0002bea7
   1d29c:	0002a576 	.word	0x0002a576

0001d2a0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1d2a0:	b538      	push	{r3, r4, r5, lr}
   1d2a2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1d2a4:	4604      	mov	r4, r0
   1d2a6:	b950      	cbnz	r0, 1d2be <net_buf_frag_insert+0x1e>
   1d2a8:	490f      	ldr	r1, [pc, #60]	; (1d2e8 <net_buf_frag_insert+0x48>)
   1d2aa:	4810      	ldr	r0, [pc, #64]	; (1d2ec <net_buf_frag_insert+0x4c>)
   1d2ac:	f240 2287 	movw	r2, #647	; 0x287
   1d2b0:	f009 fd7a 	bl	26da8 <assert_print>
   1d2b4:	480c      	ldr	r0, [pc, #48]	; (1d2e8 <net_buf_frag_insert+0x48>)
   1d2b6:	f240 2187 	movw	r1, #647	; 0x287
   1d2ba:	f009 fd6e 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1d2be:	b955      	cbnz	r5, 1d2d6 <net_buf_frag_insert+0x36>
   1d2c0:	4909      	ldr	r1, [pc, #36]	; (1d2e8 <net_buf_frag_insert+0x48>)
   1d2c2:	480a      	ldr	r0, [pc, #40]	; (1d2ec <net_buf_frag_insert+0x4c>)
   1d2c4:	f44f 7222 	mov.w	r2, #648	; 0x288
   1d2c8:	f009 fd6e 	bl	26da8 <assert_print>
   1d2cc:	4806      	ldr	r0, [pc, #24]	; (1d2e8 <net_buf_frag_insert+0x48>)
   1d2ce:	f44f 7122 	mov.w	r1, #648	; 0x288
   1d2d2:	f009 fd62 	bl	26d9a <assert_post_action>

	if (parent->frags) {
   1d2d6:	6823      	ldr	r3, [r4, #0]
   1d2d8:	b123      	cbz	r3, 1d2e4 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1d2da:	4628      	mov	r0, r5
   1d2dc:	f7ff ffc8 	bl	1d270 <net_buf_frag_last>
   1d2e0:	6823      	ldr	r3, [r4, #0]
   1d2e2:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1d2e4:	6025      	str	r5, [r4, #0]
}
   1d2e6:	bd38      	pop	{r3, r4, r5, pc}
   1d2e8:	0002bea7 	.word	0x0002bea7
   1d2ec:	0002a576 	.word	0x0002a576

0001d2f0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1d2f0:	b538      	push	{r3, r4, r5, lr}
   1d2f2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1d2f4:	460d      	mov	r5, r1
   1d2f6:	b951      	cbnz	r1, 1d30e <net_buf_frag_add+0x1e>
   1d2f8:	490c      	ldr	r1, [pc, #48]	; (1d32c <net_buf_frag_add+0x3c>)
   1d2fa:	480d      	ldr	r0, [pc, #52]	; (1d330 <net_buf_frag_add+0x40>)
   1d2fc:	f240 2293 	movw	r2, #659	; 0x293
   1d300:	f009 fd52 	bl	26da8 <assert_print>
   1d304:	4809      	ldr	r0, [pc, #36]	; (1d32c <net_buf_frag_add+0x3c>)
   1d306:	f240 2193 	movw	r1, #659	; 0x293
   1d30a:	f009 fd46 	bl	26d9a <assert_post_action>

	if (!head) {
   1d30e:	b924      	cbnz	r4, 1d31a <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1d310:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1d312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1d316:	f7ff bf93 	b.w	1d240 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1d31a:	4620      	mov	r0, r4
   1d31c:	f7ff ffa8 	bl	1d270 <net_buf_frag_last>
   1d320:	4629      	mov	r1, r5
   1d322:	f7ff ffbd 	bl	1d2a0 <net_buf_frag_insert>
}
   1d326:	4620      	mov	r0, r4
   1d328:	bd38      	pop	{r3, r4, r5, pc}
   1d32a:	bf00      	nop
   1d32c:	0002bea7 	.word	0x0002bea7
   1d330:	0002a576 	.word	0x0002a576

0001d334 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1d334:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1d336:	6882      	ldr	r2, [r0, #8]
   1d338:	6803      	ldr	r3, [r0, #0]
   1d33a:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d33c:	4299      	cmp	r1, r3
{
   1d33e:	4604      	mov	r4, r0
   1d340:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d342:	d90a      	bls.n	1d35a <net_buf_simple_push+0x26>
   1d344:	4908      	ldr	r1, [pc, #32]	; (1d368 <net_buf_simple_push+0x34>)
   1d346:	4809      	ldr	r0, [pc, #36]	; (1d36c <net_buf_simple_push+0x38>)
   1d348:	f240 4217 	movw	r2, #1047	; 0x417
   1d34c:	f009 fd2c 	bl	26da8 <assert_print>
   1d350:	4805      	ldr	r0, [pc, #20]	; (1d368 <net_buf_simple_push+0x34>)
   1d352:	f240 4117 	movw	r1, #1047	; 0x417
   1d356:	f009 fd20 	bl	26d9a <assert_post_action>
	buf->data -= len;
   1d35a:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1d35c:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1d35e:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1d360:	440d      	add	r5, r1
	buf->data -= len;
   1d362:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1d364:	80a5      	strh	r5, [r4, #4]
}
   1d366:	bd38      	pop	{r3, r4, r5, pc}
   1d368:	0002bea7 	.word	0x0002bea7
   1d36c:	0002a576 	.word	0x0002a576

0001d370 <net_buf_simple_pull>:
{
   1d370:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1d372:	8883      	ldrh	r3, [r0, #4]
   1d374:	428b      	cmp	r3, r1
{
   1d376:	4604      	mov	r4, r0
   1d378:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d37a:	d20a      	bcs.n	1d392 <net_buf_simple_pull+0x22>
   1d37c:	4908      	ldr	r1, [pc, #32]	; (1d3a0 <net_buf_simple_pull+0x30>)
   1d37e:	4809      	ldr	r0, [pc, #36]	; (1d3a4 <net_buf_simple_pull+0x34>)
   1d380:	f240 4277 	movw	r2, #1143	; 0x477
   1d384:	f009 fd10 	bl	26da8 <assert_print>
   1d388:	4805      	ldr	r0, [pc, #20]	; (1d3a0 <net_buf_simple_pull+0x30>)
   1d38a:	f240 4177 	movw	r1, #1143	; 0x477
   1d38e:	f009 fd04 	bl	26d9a <assert_post_action>
	buf->len -= len;
   1d392:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1d394:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1d396:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1d398:	4428      	add	r0, r5
	buf->len -= len;
   1d39a:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1d39c:	6020      	str	r0, [r4, #0]
}
   1d39e:	bd38      	pop	{r3, r4, r5, pc}
   1d3a0:	0002bea7 	.word	0x0002bea7
   1d3a4:	0002a576 	.word	0x0002a576

0001d3a8 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1d3a8:	8883      	ldrh	r3, [r0, #4]
   1d3aa:	428b      	cmp	r3, r1
{
   1d3ac:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1d3ae:	6806      	ldr	r6, [r0, #0]
{
   1d3b0:	4604      	mov	r4, r0
   1d3b2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d3b4:	d20a      	bcs.n	1d3cc <net_buf_simple_pull_mem+0x24>
   1d3b6:	4909      	ldr	r1, [pc, #36]	; (1d3dc <net_buf_simple_pull_mem+0x34>)
   1d3b8:	4809      	ldr	r0, [pc, #36]	; (1d3e0 <net_buf_simple_pull_mem+0x38>)
   1d3ba:	f240 4283 	movw	r2, #1155	; 0x483
   1d3be:	f009 fcf3 	bl	26da8 <assert_print>
   1d3c2:	4806      	ldr	r0, [pc, #24]	; (1d3dc <net_buf_simple_pull_mem+0x34>)
   1d3c4:	f240 4183 	movw	r1, #1155	; 0x483
   1d3c8:	f009 fce7 	bl	26d9a <assert_post_action>
	buf->len -= len;
   1d3cc:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1d3ce:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1d3d0:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1d3d2:	4429      	add	r1, r5
	buf->len -= len;
   1d3d4:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1d3d6:	6021      	str	r1, [r4, #0]
}
   1d3d8:	4630      	mov	r0, r6
   1d3da:	bd70      	pop	{r4, r5, r6, pc}
   1d3dc:	0002bea7 	.word	0x0002bea7
   1d3e0:	0002a576 	.word	0x0002a576

0001d3e4 <net_buf_simple_add>:
{
   1d3e4:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1d3e6:	6803      	ldr	r3, [r0, #0]
   1d3e8:	8886      	ldrh	r6, [r0, #4]
   1d3ea:	4604      	mov	r4, r0
   1d3ec:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d3ee:	f00b fc1c 	bl	28c2a <net_buf_simple_tailroom>
   1d3f2:	4288      	cmp	r0, r1
{
   1d3f4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d3f6:	d20a      	bcs.n	1d40e <net_buf_simple_add+0x2a>
   1d3f8:	4907      	ldr	r1, [pc, #28]	; (1d418 <net_buf_simple_add+0x34>)
   1d3fa:	4808      	ldr	r0, [pc, #32]	; (1d41c <net_buf_simple_add+0x38>)
   1d3fc:	f44f 724a 	mov.w	r2, #808	; 0x328
   1d400:	f009 fcd2 	bl	26da8 <assert_print>
   1d404:	4804      	ldr	r0, [pc, #16]	; (1d418 <net_buf_simple_add+0x34>)
   1d406:	f44f 714a 	mov.w	r1, #808	; 0x328
   1d40a:	f009 fcc6 	bl	26d9a <assert_post_action>
	buf->len += len;
   1d40e:	88a1      	ldrh	r1, [r4, #4]
   1d410:	440d      	add	r5, r1
   1d412:	80a5      	strh	r5, [r4, #4]
}
   1d414:	4630      	mov	r0, r6
   1d416:	bd70      	pop	{r4, r5, r6, pc}
   1d418:	0002bea7 	.word	0x0002bea7
   1d41c:	0002a576 	.word	0x0002a576

0001d420 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1d420:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1d422:	4b05      	ldr	r3, [pc, #20]	; (1d438 <xoshiro128_initialize+0x18>)
   1d424:	4805      	ldr	r0, [pc, #20]	; (1d43c <xoshiro128_initialize+0x1c>)
   1d426:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1d428:	f00b ff65 	bl	292f6 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1d42c:	2800      	cmp	r0, #0
	}
	return 0;
}
   1d42e:	bf0c      	ite	eq
   1d430:	f06f 0012 	mvneq.w	r0, #18
   1d434:	2000      	movne	r0, #0
   1d436:	bd08      	pop	{r3, pc}
   1d438:	20003d7c 	.word	0x20003d7c
   1d43c:	00029834 	.word	0x00029834

0001d440 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d440:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d442:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1d444:	490a      	ldr	r1, [pc, #40]	; (1d470 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d446:	4a0b      	ldr	r2, [pc, #44]	; (1d474 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d448:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d44a:	2340      	movs	r3, #64	; 0x40
   1d44c:	9300      	str	r3, [sp, #0]
   1d44e:	1149      	asrs	r1, r1, #5
{
   1d450:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d452:	4623      	mov	r3, r4
   1d454:	4808      	ldr	r0, [pc, #32]	; (1d478 <onoff_start+0x38>)
   1d456:	f00b fc1f 	bl	28c98 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d45a:	1e01      	subs	r1, r0, #0
   1d45c:	da05      	bge.n	1d46a <onoff_start+0x2a>
		notify(mgr, err);
   1d45e:	4628      	mov	r0, r5
   1d460:	4623      	mov	r3, r4
	}
}
   1d462:	b003      	add	sp, #12
   1d464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1d468:	4718      	bx	r3
}
   1d46a:	b003      	add	sp, #12
   1d46c:	bd30      	pop	{r4, r5, pc}
   1d46e:	bf00      	nop
   1d470:	20003d90 	.word	0x20003d90
   1d474:	00028d07 	.word	0x00028d07
   1d478:	000297bc 	.word	0x000297bc

0001d47c <get_status>:
{
   1d47c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d47e:	b2cc      	uxtb	r4, r1
   1d480:	2c01      	cmp	r4, #1
{
   1d482:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d484:	d908      	bls.n	1d498 <get_status+0x1c>
   1d486:	4908      	ldr	r1, [pc, #32]	; (1d4a8 <get_status+0x2c>)
   1d488:	4808      	ldr	r0, [pc, #32]	; (1d4ac <get_status+0x30>)
   1d48a:	2279      	movs	r2, #121	; 0x79
   1d48c:	f009 fc8c 	bl	26da8 <assert_print>
   1d490:	4805      	ldr	r0, [pc, #20]	; (1d4a8 <get_status+0x2c>)
   1d492:	2179      	movs	r1, #121	; 0x79
   1d494:	f009 fc81 	bl	26d9a <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d498:	6929      	ldr	r1, [r5, #16]
   1d49a:	230c      	movs	r3, #12
   1d49c:	fb04 1403 	mla	r4, r4, r3, r1
   1d4a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1d4a2:	f000 0007 	and.w	r0, r0, #7
   1d4a6:	bd38      	pop	{r3, r4, r5, pc}
   1d4a8:	0002bed3 	.word	0x0002bed3
   1d4ac:	0002a576 	.word	0x0002a576

0001d4b0 <stop>:
{
   1d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4b2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d4b4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
   1d4b6:	6906      	ldr	r6, [r0, #16]
{
   1d4b8:	4605      	mov	r5, r0
   1d4ba:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d4bc:	d90a      	bls.n	1d4d4 <stop+0x24>
   1d4be:	4918      	ldr	r1, [pc, #96]	; (1d520 <stop+0x70>)
   1d4c0:	4818      	ldr	r0, [pc, #96]	; (1d524 <stop+0x74>)
   1d4c2:	f240 124d 	movw	r2, #333	; 0x14d
   1d4c6:	f009 fc6f 	bl	26da8 <assert_print>
   1d4ca:	4815      	ldr	r0, [pc, #84]	; (1d520 <stop+0x70>)
   1d4cc:	f240 114d 	movw	r1, #333	; 0x14d
   1d4d0:	f009 fc63 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   1d4d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d4d8:	f3ef 8111 	mrs	r1, BASEPRI
   1d4dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d4e4:	220c      	movs	r2, #12
   1d4e6:	fb02 6304 	mla	r3, r2, r4, r6
   1d4ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d4ec:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1d4f0:	d001      	beq.n	1d4f6 <stop+0x46>
   1d4f2:	429f      	cmp	r7, r3
   1d4f4:	d111      	bne.n	1d51a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d4f6:	fb02 6604 	mla	r6, r2, r4, r6
   1d4fa:	2301      	movs	r3, #1
   1d4fc:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
   1d4fe:	2000      	movs	r0, #0
	__asm__ volatile(
   1d500:	f381 8811 	msr	BASEPRI, r1
   1d504:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d508:	b930      	cbnz	r0, 1d518 <stop+0x68>
	get_sub_config(dev, type)->stop();
   1d50a:	6869      	ldr	r1, [r5, #4]
   1d50c:	230c      	movs	r3, #12
   1d50e:	fb03 1404 	mla	r4, r3, r4, r1
   1d512:	6863      	ldr	r3, [r4, #4]
   1d514:	4798      	blx	r3
	return 0;
   1d516:	2000      	movs	r0, #0
}
   1d518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1d51a:	f04f 30ff 	mov.w	r0, #4294967295
   1d51e:	e7ef      	b.n	1d500 <stop+0x50>
   1d520:	0002bed3 	.word	0x0002bed3
   1d524:	0002a576 	.word	0x0002a576

0001d528 <onoff_stop>:
{
   1d528:	b570      	push	{r4, r5, r6, lr}
   1d52a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1d52c:	4906      	ldr	r1, [pc, #24]	; (1d548 <onoff_stop+0x20>)
   1d52e:	1a41      	subs	r1, r0, r1
{
   1d530:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d532:	1149      	asrs	r1, r1, #5
   1d534:	4805      	ldr	r0, [pc, #20]	; (1d54c <onoff_stop+0x24>)
   1d536:	2240      	movs	r2, #64	; 0x40
   1d538:	f7ff ffba 	bl	1d4b0 <stop>
	notify(mgr, res);
   1d53c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d53e:	4601      	mov	r1, r0
	notify(mgr, res);
   1d540:	4620      	mov	r0, r4
}
   1d542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d546:	4718      	bx	r3
   1d548:	20003d90 	.word	0x20003d90
   1d54c:	000297bc 	.word	0x000297bc

0001d550 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d550:	2200      	movs	r2, #0
{
   1d552:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d554:	2101      	movs	r1, #1
{
   1d556:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d558:	4610      	mov	r0, r2
   1d55a:	f7f9 fdd1 	bl	17100 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d55e:	480f      	ldr	r0, [pc, #60]	; (1d59c <clk_init+0x4c>)
   1d560:	f002 fa6a 	bl	1fa38 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d564:	4b0e      	ldr	r3, [pc, #56]	; (1d5a0 <clk_init+0x50>)
   1d566:	4298      	cmp	r0, r3
   1d568:	d115      	bne.n	1d596 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d56a:	f00b fe28 	bl	291be <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1d56e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d570:	490c      	ldr	r1, [pc, #48]	; (1d5a4 <clk_init+0x54>)
   1d572:	4630      	mov	r0, r6
   1d574:	f009 fa82 	bl	26a7c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d578:	2800      	cmp	r0, #0
   1d57a:	db0b      	blt.n	1d594 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1d57c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d57e:	4909      	ldr	r1, [pc, #36]	; (1d5a4 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d580:	2501      	movs	r5, #1
   1d582:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d584:	f104 0020 	add.w	r0, r4, #32
   1d588:	f009 fa78 	bl	26a7c <onoff_manager_init>
		if (err < 0) {
   1d58c:	2800      	cmp	r0, #0
   1d58e:	db01      	blt.n	1d594 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d590:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1d592:	2000      	movs	r0, #0
}
   1d594:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d596:	f06f 0004 	mvn.w	r0, #4
   1d59a:	e7fb      	b.n	1d594 <clk_init+0x44>
   1d59c:	0001d5dd 	.word	0x0001d5dd
   1d5a0:	0bad0000 	.word	0x0bad0000
   1d5a4:	0002a008 	.word	0x0002a008

0001d5a8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d5a8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d5aa:	230c      	movs	r3, #12
   1d5ac:	4809      	ldr	r0, [pc, #36]	; (1d5d4 <clkstarted_handle.constprop.0+0x2c>)
   1d5ae:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1d5b0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d5b2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1d5b4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1d5b8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1d5ba:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1d5bc:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1d5be:	4418      	add	r0, r3
   1d5c0:	f00b fb57 	bl	28c72 <set_on_state>
	if (callback) {
   1d5c4:	b12d      	cbz	r5, 1d5d2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d5c6:	4632      	mov	r2, r6
   1d5c8:	462b      	mov	r3, r5
   1d5ca:	4803      	ldr	r0, [pc, #12]	; (1d5d8 <clkstarted_handle.constprop.0+0x30>)
}
   1d5cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d5d0:	4718      	bx	r3
}
   1d5d2:	bd70      	pop	{r4, r5, r6, pc}
   1d5d4:	20003d90 	.word	0x20003d90
   1d5d8:	000297bc 	.word	0x000297bc

0001d5dc <clock_event_handler>:
	switch (event) {
   1d5dc:	2801      	cmp	r0, #1
{
   1d5de:	b508      	push	{r3, lr}
	switch (event) {
   1d5e0:	d006      	beq.n	1d5f0 <clock_event_handler+0x14>
   1d5e2:	2803      	cmp	r0, #3
   1d5e4:	d008      	beq.n	1d5f8 <clock_event_handler+0x1c>
   1d5e6:	b9a0      	cbnz	r0, 1d612 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d5e8:	4b0f      	ldr	r3, [pc, #60]	; (1d628 <clock_event_handler+0x4c>)
   1d5ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d5ec:	075b      	lsls	r3, r3, #29
   1d5ee:	d119      	bne.n	1d624 <clock_event_handler+0x48>
}
   1d5f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d5f4:	f7ff bfd8 	b.w	1d5a8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1d5f8:	490c      	ldr	r1, [pc, #48]	; (1d62c <clock_event_handler+0x50>)
   1d5fa:	480d      	ldr	r0, [pc, #52]	; (1d630 <clock_event_handler+0x54>)
   1d5fc:	f240 225e 	movw	r2, #606	; 0x25e
   1d600:	f009 fbd2 	bl	26da8 <assert_print>
   1d604:	f240 215e 	movw	r1, #606	; 0x25e
}
   1d608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1d60c:	4807      	ldr	r0, [pc, #28]	; (1d62c <clock_event_handler+0x50>)
   1d60e:	f009 bbc4 	b.w	26d9a <assert_post_action>
   1d612:	4906      	ldr	r1, [pc, #24]	; (1d62c <clock_event_handler+0x50>)
   1d614:	4806      	ldr	r0, [pc, #24]	; (1d630 <clock_event_handler+0x54>)
   1d616:	f240 2262 	movw	r2, #610	; 0x262
   1d61a:	f009 fbc5 	bl	26da8 <assert_print>
   1d61e:	f240 2162 	movw	r1, #610	; 0x262
   1d622:	e7f1      	b.n	1d608 <clock_event_handler+0x2c>
}
   1d624:	bd08      	pop	{r3, pc}
   1d626:	bf00      	nop
   1d628:	20003d90 	.word	0x20003d90
   1d62c:	0002bed3 	.word	0x0002bed3
   1d630:	0002a576 	.word	0x0002a576

0001d634 <generic_hfclk_start>:
{
   1d634:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d636:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d63a:	f3ef 8111 	mrs	r1, BASEPRI
   1d63e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d642:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d646:	4a12      	ldr	r2, [pc, #72]	; (1d690 <generic_hfclk_start+0x5c>)
   1d648:	6813      	ldr	r3, [r2, #0]
   1d64a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1d64e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1d652:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d654:	d00c      	beq.n	1d670 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d65a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d65e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d662:	f013 0301 	ands.w	r3, r3, #1
   1d666:	d003      	beq.n	1d670 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1d668:	480a      	ldr	r0, [pc, #40]	; (1d694 <generic_hfclk_start+0x60>)
   1d66a:	f00b fb02 	bl	28c72 <set_on_state>
			already_started = true;
   1d66e:	2301      	movs	r3, #1
	__asm__ volatile(
   1d670:	f381 8811 	msr	BASEPRI, r1
   1d674:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d678:	b123      	cbz	r3, 1d684 <generic_hfclk_start+0x50>
}
   1d67a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d67e:	2000      	movs	r0, #0
   1d680:	f7ff bf92 	b.w	1d5a8 <clkstarted_handle.constprop.0>
}
   1d684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d688:	2001      	movs	r0, #1
   1d68a:	f002 b99b 	b.w	1f9c4 <nrfx_clock_start>
   1d68e:	bf00      	nop
   1d690:	20003de8 	.word	0x20003de8
   1d694:	20003dd8 	.word	0x20003dd8

0001d698 <api_blocking_start>:
{
   1d698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d69a:	2200      	movs	r2, #0
   1d69c:	2301      	movs	r3, #1
   1d69e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d6a2:	ab04      	add	r3, sp, #16
   1d6a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d6a8:	4a09      	ldr	r2, [pc, #36]	; (1d6d0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d6aa:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d6ae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d6b0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d6b4:	f00b fb20 	bl	28cf8 <api_start>
	if (err < 0) {
   1d6b8:	2800      	cmp	r0, #0
   1d6ba:	db05      	blt.n	1d6c8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d6bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d6c0:	2300      	movs	r3, #0
   1d6c2:	4668      	mov	r0, sp
   1d6c4:	f003 fe6c 	bl	213a0 <z_impl_k_sem_take>
}
   1d6c8:	b007      	add	sp, #28
   1d6ca:	f85d fb04 	ldr.w	pc, [sp], #4
   1d6ce:	bf00      	nop
   1d6d0:	00028d25 	.word	0x00028d25

0001d6d4 <generic_hfclk_stop>:
   1d6d4:	4b09      	ldr	r3, [pc, #36]	; (1d6fc <generic_hfclk_stop+0x28>)
   1d6d6:	f3bf 8f5b 	dmb	ish
   1d6da:	e853 2f00 	ldrex	r2, [r3]
   1d6de:	f022 0102 	bic.w	r1, r2, #2
   1d6e2:	e843 1000 	strex	r0, r1, [r3]
   1d6e6:	2800      	cmp	r0, #0
   1d6e8:	d1f7      	bne.n	1d6da <generic_hfclk_stop+0x6>
   1d6ea:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d6ee:	07d3      	lsls	r3, r2, #31
   1d6f0:	d402      	bmi.n	1d6f8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d6f2:	2001      	movs	r0, #1
   1d6f4:	f002 b988 	b.w	1fa08 <nrfx_clock_stop>
}
   1d6f8:	4770      	bx	lr
   1d6fa:	bf00      	nop
   1d6fc:	20003de8 	.word	0x20003de8

0001d700 <z_nrf_clock_control_lf_on>:
{
   1d700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d704:	4946      	ldr	r1, [pc, #280]	; (1d820 <z_nrf_clock_control_lf_on+0x120>)
   1d706:	f3bf 8f5b 	dmb	ish
   1d70a:	4606      	mov	r6, r0
   1d70c:	2201      	movs	r2, #1
   1d70e:	e851 3f00 	ldrex	r3, [r1]
   1d712:	e841 2000 	strex	r0, r2, [r1]
   1d716:	2800      	cmp	r0, #0
   1d718:	d1f9      	bne.n	1d70e <z_nrf_clock_control_lf_on+0xe>
   1d71a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1d71e:	b99b      	cbnz	r3, 1d748 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d720:	4940      	ldr	r1, [pc, #256]	; (1d824 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   1d722:	4841      	ldr	r0, [pc, #260]	; (1d828 <z_nrf_clock_control_lf_on+0x128>)
   1d724:	604b      	str	r3, [r1, #4]
   1d726:	60cb      	str	r3, [r1, #12]
   1d728:	608a      	str	r2, [r1, #8]
   1d72a:	f7f8 fbcb 	bl	15ec4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1d72e:	2800      	cmp	r0, #0
   1d730:	da0a      	bge.n	1d748 <z_nrf_clock_control_lf_on+0x48>
   1d732:	493e      	ldr	r1, [pc, #248]	; (1d82c <z_nrf_clock_control_lf_on+0x12c>)
   1d734:	483e      	ldr	r0, [pc, #248]	; (1d830 <z_nrf_clock_control_lf_on+0x130>)
   1d736:	f44f 7208 	mov.w	r2, #544	; 0x220
   1d73a:	f009 fb35 	bl	26da8 <assert_print>
   1d73e:	483b      	ldr	r0, [pc, #236]	; (1d82c <z_nrf_clock_control_lf_on+0x12c>)
   1d740:	f44f 7108 	mov.w	r1, #544	; 0x220
   1d744:	f009 fb29 	bl	26d9a <assert_post_action>
	switch (start_mode) {
   1d748:	b396      	cbz	r6, 1d7b0 <z_nrf_clock_control_lf_on+0xb0>
   1d74a:	1e73      	subs	r3, r6, #1
   1d74c:	2b01      	cmp	r3, #1
   1d74e:	d853      	bhi.n	1d7f8 <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d750:	2e01      	cmp	r6, #1
   1d752:	d107      	bne.n	1d764 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d758:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1d75c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d760:	2b01      	cmp	r3, #1
   1d762:	d025      	beq.n	1d7b0 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d764:	f00b fdf9 	bl	2935a <k_is_in_isr>
   1d768:	4604      	mov	r4, r0
   1d76a:	b918      	cbnz	r0, 1d774 <z_nrf_clock_control_lf_on+0x74>
	return !z_sys_post_kernel;
   1d76c:	4b31      	ldr	r3, [pc, #196]	; (1d834 <z_nrf_clock_control_lf_on+0x134>)
	int key = isr_mode ? irq_lock() : 0;
   1d76e:	781b      	ldrb	r3, [r3, #0]
   1d770:	2b00      	cmp	r3, #0
   1d772:	d14e      	bne.n	1d812 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   1d774:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d778:	f3ef 8711 	mrs	r7, BASEPRI
   1d77c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d780:	f3bf 8f6f 	isb	sy
   1d784:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d786:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1d838 <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d78a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1d78e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d792:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1d796:	03d2      	lsls	r2, r2, #15
   1d798:	d50c      	bpl.n	1d7b4 <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1d79a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d79e:	2b01      	cmp	r3, #1
   1d7a0:	d001      	beq.n	1d7a6 <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d7a2:	2e01      	cmp	r6, #1
   1d7a4:	d106      	bne.n	1d7b4 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1d7a6:	b30c      	cbz	r4, 1d7ec <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
   1d7a8:	f387 8811 	msr	BASEPRI, r7
   1d7ac:	f3bf 8f6f 	isb	sy
}
   1d7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d7b4:	b1ac      	cbz	r4, 1d7e2 <z_nrf_clock_control_lf_on+0xe2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d7b6:	4638      	mov	r0, r7
   1d7b8:	f7f9 fc38 	bl	1702c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d7bc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d7c0:	2b00      	cmp	r3, #0
   1d7c2:	d1e4      	bne.n	1d78e <z_nrf_clock_control_lf_on+0x8e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d7c4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1d7c8:	2a00      	cmp	r2, #0
   1d7ca:	d0e0      	beq.n	1d78e <z_nrf_clock_control_lf_on+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d7cc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d7d0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d7d4:	2301      	movs	r3, #1
   1d7d6:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1d7da:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7de:	60ab      	str	r3, [r5, #8]
}
   1d7e0:	e7d5      	b.n	1d78e <z_nrf_clock_control_lf_on+0x8e>
	return z_impl_k_sleep(timeout);
   1d7e2:	2100      	movs	r1, #0
   1d7e4:	2021      	movs	r0, #33	; 0x21
   1d7e6:	f005 f9a3 	bl	22b30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d7ea:	e7e7      	b.n	1d7bc <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1d7ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d7f0:	2202      	movs	r2, #2
   1d7f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d7f6:	e7db      	b.n	1d7b0 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
   1d7f8:	490c      	ldr	r1, [pc, #48]	; (1d82c <z_nrf_clock_control_lf_on+0x12c>)
   1d7fa:	480d      	ldr	r0, [pc, #52]	; (1d830 <z_nrf_clock_control_lf_on+0x130>)
   1d7fc:	f240 2232 	movw	r2, #562	; 0x232
   1d800:	f009 fad2 	bl	26da8 <assert_print>
}
   1d804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   1d808:	4808      	ldr	r0, [pc, #32]	; (1d82c <z_nrf_clock_control_lf_on+0x12c>)
   1d80a:	f240 2132 	movw	r1, #562	; 0x232
   1d80e:	f009 bac4 	b.w	26d9a <assert_post_action>
    p_reg->INTENCLR = mask;
   1d812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d816:	2202      	movs	r2, #2
   1d818:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1d81c:	4607      	mov	r7, r0
}
   1d81e:	e7b2      	b.n	1d786 <z_nrf_clock_control_lf_on+0x86>
   1d820:	20003dec 	.word	0x20003dec
   1d824:	20003d80 	.word	0x20003d80
   1d828:	20003db0 	.word	0x20003db0
   1d82c:	0002bed3 	.word	0x0002bed3
   1d830:	0002a576 	.word	0x0002a576
   1d834:	2000db98 	.word	0x2000db98
   1d838:	e000e100 	.word	0xe000e100

0001d83c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1d83c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1d83e:	4b08      	ldr	r3, [pc, #32]	; (1d860 <uart_console_init+0x24>)
   1d840:	4808      	ldr	r0, [pc, #32]	; (1d864 <uart_console_init+0x28>)
   1d842:	6018      	str	r0, [r3, #0]
   1d844:	f00b fd57 	bl	292f6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1d848:	b138      	cbz	r0, 1d85a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1d84a:	4807      	ldr	r0, [pc, #28]	; (1d868 <uart_console_init+0x2c>)
   1d84c:	f7fa f954 	bl	17af8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1d850:	4805      	ldr	r0, [pc, #20]	; (1d868 <uart_console_init+0x2c>)
   1d852:	f7f8 f92d 	bl	15ab0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1d856:	2000      	movs	r0, #0
}
   1d858:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d85a:	f06f 0012 	mvn.w	r0, #18
   1d85e:	e7fb      	b.n	1d858 <uart_console_init+0x1c>
   1d860:	20003df0 	.word	0x20003df0
   1d864:	00029864 	.word	0x00029864
   1d868:	0001d86d 	.word	0x0001d86d

0001d86c <console_out>:
	if ('\n' == c) {
   1d86c:	280a      	cmp	r0, #10
{
   1d86e:	b538      	push	{r3, r4, r5, lr}
   1d870:	4d07      	ldr	r5, [pc, #28]	; (1d890 <console_out+0x24>)
   1d872:	4604      	mov	r4, r0
	if ('\n' == c) {
   1d874:	d104      	bne.n	1d880 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1d876:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1d878:	6883      	ldr	r3, [r0, #8]
   1d87a:	210d      	movs	r1, #13
   1d87c:	685b      	ldr	r3, [r3, #4]
   1d87e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1d880:	6828      	ldr	r0, [r5, #0]
   1d882:	6883      	ldr	r3, [r0, #8]
   1d884:	b2e1      	uxtb	r1, r4
   1d886:	685b      	ldr	r3, [r3, #4]
   1d888:	4798      	blx	r3
}
   1d88a:	4620      	mov	r0, r4
   1d88c:	bd38      	pop	{r3, r4, r5, pc}
   1d88e:	bf00      	nop
   1d890:	20003df0 	.word	0x20003df0

0001d894 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1d894:	b570      	push	{r4, r5, r6, lr}
	return port->data;
   1d896:	6905      	ldr	r5, [r0, #16]
{
   1d898:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d89a:	460c      	mov	r4, r1
   1d89c:	b941      	cbnz	r1, 1d8b0 <gpio_nrfx_manage_callback+0x1c>
   1d89e:	491e      	ldr	r1, [pc, #120]	; (1d918 <gpio_nrfx_manage_callback+0x84>)
   1d8a0:	481e      	ldr	r0, [pc, #120]	; (1d91c <gpio_nrfx_manage_callback+0x88>)
   1d8a2:	2224      	movs	r2, #36	; 0x24
   1d8a4:	f009 fa80 	bl	26da8 <assert_print>
   1d8a8:	481b      	ldr	r0, [pc, #108]	; (1d918 <gpio_nrfx_manage_callback+0x84>)
   1d8aa:	2124      	movs	r1, #36	; 0x24
   1d8ac:	f009 fa75 	bl	26d9a <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1d8b0:	6863      	ldr	r3, [r4, #4]
   1d8b2:	b943      	cbnz	r3, 1d8c6 <gpio_nrfx_manage_callback+0x32>
   1d8b4:	4918      	ldr	r1, [pc, #96]	; (1d918 <gpio_nrfx_manage_callback+0x84>)
   1d8b6:	4819      	ldr	r0, [pc, #100]	; (1d91c <gpio_nrfx_manage_callback+0x88>)
   1d8b8:	2225      	movs	r2, #37	; 0x25
   1d8ba:	f009 fa75 	bl	26da8 <assert_print>
   1d8be:	4816      	ldr	r0, [pc, #88]	; (1d918 <gpio_nrfx_manage_callback+0x84>)
   1d8c0:	2125      	movs	r1, #37	; 0x25
   1d8c2:	f009 fa6a 	bl	26d9a <assert_post_action>
	return list->head;
   1d8c6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d8c8:	b15b      	cbz	r3, 1d8e2 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d8ca:	2200      	movs	r2, #0
   1d8cc:	429c      	cmp	r4, r3
   1d8ce:	d112      	bne.n	1d8f6 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   1d8d0:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1d8d2:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   1d8d4:	b952      	cbnz	r2, 1d8ec <gpio_nrfx_manage_callback+0x58>
   1d8d6:	42a1      	cmp	r1, r4
	list->head = node;
   1d8d8:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d8da:	d100      	bne.n	1d8de <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1d8dc:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1d8de:	2300      	movs	r3, #0
   1d8e0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d8e2:	b96e      	cbnz	r6, 1d900 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d8e4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   1d8e6:	bd70      	pop	{r4, r5, r6, pc}
   1d8e8:	460b      	mov	r3, r1
   1d8ea:	e7ef      	b.n	1d8cc <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   1d8ec:	42a1      	cmp	r1, r4
	parent->next = child;
   1d8ee:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1d8f0:	bf08      	it	eq
   1d8f2:	60aa      	streq	r2, [r5, #8]
}
   1d8f4:	e7f3      	b.n	1d8de <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   1d8f6:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d8f8:	461a      	mov	r2, r3
   1d8fa:	2900      	cmp	r1, #0
   1d8fc:	d1f4      	bne.n	1d8e8 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1d8fe:	b13e      	cbz	r6, 1d910 <gpio_nrfx_manage_callback+0x7c>
Z_GENLIST_PREPEND(slist, snode)
   1d900:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   1d902:	686b      	ldr	r3, [r5, #4]
   1d904:	6023      	str	r3, [r4, #0]
	list->head = node;
   1d906:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d908:	2800      	cmp	r0, #0
   1d90a:	d1eb      	bne.n	1d8e4 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1d90c:	60ac      	str	r4, [r5, #8]
}
   1d90e:	e7ea      	b.n	1d8e6 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1d910:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d914:	e7e7      	b.n	1d8e6 <gpio_nrfx_manage_callback+0x52>
   1d916:	bf00      	nop
   1d918:	0002bf39 	.word	0x0002bf39
   1d91c:	0002a576 	.word	0x0002a576

0001d920 <gpio_nrfx_pin_interrupt_configure>:
{
   1d920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   1d922:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d924:	7b05      	ldrb	r5, [r0, #12]
   1d926:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d92a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d92e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d932:	f04f 0500 	mov.w	r5, #0
   1d936:	d105      	bne.n	1d944 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1d938:	4620      	mov	r0, r4
   1d93a:	f002 fc95 	bl	20268 <nrfx_gpiote_trigger_disable>
	return 0;
   1d93e:	2000      	movs	r0, #0
}
   1d940:	b004      	add	sp, #16
   1d942:	bd70      	pop	{r4, r5, r6, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d944:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d948:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d94c:	d154      	bne.n	1d9f8 <gpio_nrfx_pin_interrupt_configure+0xd8>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d94e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1d952:	bf0c      	ite	eq
   1d954:	2304      	moveq	r3, #4
   1d956:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d958:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d95c:	6883      	ldr	r3, [r0, #8]
   1d95e:	fa23 f101 	lsr.w	r1, r3, r1
   1d962:	f011 0101 	ands.w	r1, r1, #1
   1d966:	d139      	bne.n	1d9dc <gpio_nrfx_pin_interrupt_configure+0xbc>
   1d968:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1d96c:	d136      	bne.n	1d9dc <gpio_nrfx_pin_interrupt_configure+0xbc>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1d96e:	0966      	lsrs	r6, r4, #5
   1d970:	d04d      	beq.n	1da0e <gpio_nrfx_pin_interrupt_configure+0xee>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
   1d972:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d976:	2e01      	cmp	r6, #1
   1d978:	bf08      	it	eq
   1d97a:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
   1d97c:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1d980:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d982:	07ca      	lsls	r2, r1, #31
   1d984:	d40a      	bmi.n	1d99c <gpio_nrfx_pin_interrupt_configure+0x7c>
   1d986:	492a      	ldr	r1, [pc, #168]	; (1da30 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1d988:	482a      	ldr	r0, [pc, #168]	; (1da34 <gpio_nrfx_pin_interrupt_configure+0x114>)
   1d98a:	f240 2247 	movw	r2, #583	; 0x247
   1d98e:	f009 fa0b 	bl	26da8 <assert_print>
   1d992:	4827      	ldr	r0, [pc, #156]	; (1da30 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1d994:	f240 2147 	movw	r1, #583	; 0x247
   1d998:	f009 f9ff 	bl	26d9a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d99c:	b166      	cbz	r6, 1d9b8 <gpio_nrfx_pin_interrupt_configure+0x98>
   1d99e:	2e01      	cmp	r6, #1
   1d9a0:	d038      	beq.n	1da14 <gpio_nrfx_pin_interrupt_configure+0xf4>
            NRFX_ASSERT(0);
   1d9a2:	4923      	ldr	r1, [pc, #140]	; (1da30 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1d9a4:	4823      	ldr	r0, [pc, #140]	; (1da34 <gpio_nrfx_pin_interrupt_configure+0x114>)
   1d9a6:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1d9aa:	f009 f9fd 	bl	26da8 <assert_print>
   1d9ae:	4820      	ldr	r0, [pc, #128]	; (1da30 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1d9b0:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1d9b4:	f009 f9f1 	bl	26d9a <assert_post_action>
        case 0: return NRF_P0;
   1d9b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d9bc:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1d9c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d9c4:	07db      	lsls	r3, r3, #31
   1d9c6:	d409      	bmi.n	1d9dc <gpio_nrfx_pin_interrupt_configure+0xbc>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d9c8:	f10d 0507 	add.w	r5, sp, #7
   1d9cc:	4629      	mov	r1, r5
   1d9ce:	4620      	mov	r0, r4
   1d9d0:	f002 fb76 	bl	200c0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d9d4:	4b18      	ldr	r3, [pc, #96]	; (1da38 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1d9d6:	4298      	cmp	r0, r3
   1d9d8:	d01e      	beq.n	1da18 <gpio_nrfx_pin_interrupt_configure+0xf8>
		trigger_config.p_in_channel = &ch;
   1d9da:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d9dc:	2300      	movs	r3, #0
   1d9de:	4619      	mov	r1, r3
   1d9e0:	aa02      	add	r2, sp, #8
   1d9e2:	4620      	mov	r0, r4
   1d9e4:	f002 fa44 	bl	1fe70 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d9e8:	4b14      	ldr	r3, [pc, #80]	; (1da3c <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1d9ea:	4298      	cmp	r0, r3
   1d9ec:	d11d      	bne.n	1da2a <gpio_nrfx_pin_interrupt_configure+0x10a>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d9ee:	2101      	movs	r1, #1
   1d9f0:	4620      	mov	r0, r4
   1d9f2:	f002 fbcb 	bl	2018c <nrfx_gpiote_trigger_enable>
   1d9f6:	e7a2      	b.n	1d93e <gpio_nrfx_pin_interrupt_configure+0x1e>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d9f8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1d9fc:	d005      	beq.n	1da0a <gpio_nrfx_pin_interrupt_configure+0xea>
   1d9fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1da02:	bf0c      	ite	eq
   1da04:	2302      	moveq	r3, #2
   1da06:	2301      	movne	r3, #1
   1da08:	e7a6      	b.n	1d958 <gpio_nrfx_pin_interrupt_configure+0x38>
   1da0a:	2303      	movs	r3, #3
   1da0c:	e7a4      	b.n	1d958 <gpio_nrfx_pin_interrupt_configure+0x38>
            mask = P0_FEATURE_PINS_PRESENT;
   1da0e:	f04f 31ff 	mov.w	r1, #4294967295
   1da12:	e7b3      	b.n	1d97c <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1da14:	4b0a      	ldr	r3, [pc, #40]	; (1da40 <gpio_nrfx_pin_interrupt_configure+0x120>)
   1da16:	e7d1      	b.n	1d9bc <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1da18:	4628      	mov	r0, r5
   1da1a:	f002 fbb1 	bl	20180 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1da1e:	4b07      	ldr	r3, [pc, #28]	; (1da3c <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1da20:	4298      	cmp	r0, r3
   1da22:	d0da      	beq.n	1d9da <gpio_nrfx_pin_interrupt_configure+0xba>
				return -ENOMEM;
   1da24:	f06f 000b 	mvn.w	r0, #11
   1da28:	e78a      	b.n	1d940 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EINVAL;
   1da2a:	f06f 0015 	mvn.w	r0, #21
   1da2e:	e787      	b.n	1d940 <gpio_nrfx_pin_interrupt_configure+0x20>
   1da30:	0002bf66 	.word	0x0002bf66
   1da34:	0002a576 	.word	0x0002a576
   1da38:	0bad0004 	.word	0x0bad0004
   1da3c:	0bad0000 	.word	0x0bad0000
   1da40:	50000300 	.word	0x50000300

0001da44 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1da44:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1da46:	f002 fb8b 	bl	20160 <nrfx_gpiote_is_init>
   1da4a:	4604      	mov	r4, r0
   1da4c:	b968      	cbnz	r0, 1da6a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1da4e:	f002 fb5f 	bl	20110 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1da52:	4b08      	ldr	r3, [pc, #32]	; (1da74 <gpio_nrfx_init+0x30>)
   1da54:	4298      	cmp	r0, r3
   1da56:	d10a      	bne.n	1da6e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1da58:	4807      	ldr	r0, [pc, #28]	; (1da78 <gpio_nrfx_init+0x34>)
   1da5a:	4621      	mov	r1, r4
   1da5c:	f002 fb2a 	bl	200b4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1da60:	4622      	mov	r2, r4
   1da62:	2105      	movs	r1, #5
   1da64:	2006      	movs	r0, #6
   1da66:	f7f9 fb4b 	bl	17100 <z_arm_irq_priority_set>
		return 0;
   1da6a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1da6c:	bd10      	pop	{r4, pc}
		return -EIO;
   1da6e:	f06f 0004 	mvn.w	r0, #4
   1da72:	e7fb      	b.n	1da6c <gpio_nrfx_init+0x28>
   1da74:	0bad0000 	.word	0x0bad0000
   1da78:	0001da7d 	.word	0x0001da7d

0001da7c <nrfx_gpio_handler>:
{
   1da7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1da80:	0943      	lsrs	r3, r0, #5
   1da82:	d003      	beq.n	1da8c <nrfx_gpio_handler+0x10>
   1da84:	2b01      	cmp	r3, #1
   1da86:	d028      	beq.n	1dada <nrfx_gpio_handler+0x5e>
}
   1da88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1da8c:	4f14      	ldr	r7, [pc, #80]	; (1dae0 <nrfx_gpio_handler+0x64>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1da8e:	693b      	ldr	r3, [r7, #16]
   1da90:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1da92:	2c00      	cmp	r4, #0
   1da94:	d0f8      	beq.n	1da88 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1da96:	f000 001f 	and.w	r0, r0, #31
   1da9a:	2601      	movs	r6, #1
	return node->next;
   1da9c:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1da9e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1dae4 <nrfx_gpio_handler+0x68>
   1daa2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1dae8 <nrfx_gpio_handler+0x6c>
   1daa6:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   1daa8:	68a3      	ldr	r3, [r4, #8]
   1daaa:	421e      	tst	r6, r3
   1daac:	d010      	beq.n	1dad0 <nrfx_gpio_handler+0x54>
			__ASSERT(cb->handler, "No callback handler!");
   1daae:	6863      	ldr	r3, [r4, #4]
   1dab0:	b943      	cbnz	r3, 1dac4 <nrfx_gpio_handler+0x48>
   1dab2:	4641      	mov	r1, r8
   1dab4:	4648      	mov	r0, r9
   1dab6:	2245      	movs	r2, #69	; 0x45
   1dab8:	f009 f976 	bl	26da8 <assert_print>
   1dabc:	2145      	movs	r1, #69	; 0x45
   1dabe:	4640      	mov	r0, r8
   1dac0:	f009 f96b 	bl	26d9a <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1dac4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1dac8:	4621      	mov	r1, r4
   1daca:	4032      	ands	r2, r6
   1dacc:	4638      	mov	r0, r7
   1dace:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dad0:	2d00      	cmp	r5, #0
   1dad2:	d0d9      	beq.n	1da88 <nrfx_gpio_handler+0xc>
   1dad4:	462c      	mov	r4, r5
   1dad6:	682d      	ldr	r5, [r5, #0]
   1dad8:	e7e6      	b.n	1daa8 <nrfx_gpio_handler+0x2c>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dada:	4f04      	ldr	r7, [pc, #16]	; (1daec <nrfx_gpio_handler+0x70>)
   1dadc:	e7d7      	b.n	1da8e <nrfx_gpio_handler+0x12>
   1dade:	bf00      	nop
   1dae0:	000297d4 	.word	0x000297d4
   1dae4:	0002bf39 	.word	0x0002bf39
   1dae8:	0002a576 	.word	0x0002a576
   1daec:	000297ec 	.word	0x000297ec

0001daf0 <gpio_nrfx_pin_configure>:
{
   1daf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1daf4:	f8d0 9004 	ldr.w	r9, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1daf8:	f899 300c 	ldrb.w	r3, [r9, #12]
   1dafc:	f001 061f 	and.w	r6, r1, #31
{
   1db00:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1db02:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1db06:	4688      	mov	r8, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1db08:	4630      	mov	r0, r6
   1db0a:	f10d 0103 	add.w	r1, sp, #3
{
   1db0e:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1db10:	f002 fad6 	bl	200c0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1db14:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1db18:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1db1a:	d116      	bne.n	1db4a <gpio_nrfx_pin_configure+0x5a>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1db1c:	4630      	mov	r0, r6
   1db1e:	f002 fbcd 	bl	202bc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1db22:	4b4e      	ldr	r3, [pc, #312]	; (1dc5c <gpio_nrfx_pin_configure+0x16c>)
   1db24:	429f      	cmp	r7, r3
   1db26:	d10e      	bne.n	1db46 <gpio_nrfx_pin_configure+0x56>
			err = nrfx_gpiote_channel_free(ch);
   1db28:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1db2c:	f002 fb22 	bl	20174 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1db30:	42b8      	cmp	r0, r7
   1db32:	d008      	beq.n	1db46 <gpio_nrfx_pin_configure+0x56>
   1db34:	494a      	ldr	r1, [pc, #296]	; (1dc60 <gpio_nrfx_pin_configure+0x170>)
   1db36:	484b      	ldr	r0, [pc, #300]	; (1dc64 <gpio_nrfx_pin_configure+0x174>)
   1db38:	2268      	movs	r2, #104	; 0x68
   1db3a:	f009 f935 	bl	26da8 <assert_print>
   1db3e:	4848      	ldr	r0, [pc, #288]	; (1dc60 <gpio_nrfx_pin_configure+0x170>)
   1db40:	2168      	movs	r1, #104	; 0x68
   1db42:	f009 f92a 	bl	26d9a <assert_post_action>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1db46:	2000      	movs	r0, #0
   1db48:	e062      	b.n	1dc10 <gpio_nrfx_pin_configure+0x120>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1db4a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1db4c:	4619      	mov	r1, r3
   1db4e:	aa02      	add	r2, sp, #8
   1db50:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1db52:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1db56:	f002 f98b 	bl	1fe70 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1db5a:	4b40      	ldr	r3, [pc, #256]	; (1dc5c <gpio_nrfx_pin_configure+0x16c>)
   1db5c:	4298      	cmp	r0, r3
   1db5e:	d002      	beq.n	1db66 <gpio_nrfx_pin_configure+0x76>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1db60:	f06f 0015 	mvn.w	r0, #21
   1db64:	e054      	b.n	1dc10 <gpio_nrfx_pin_configure+0x120>
	if (free_ch) {
   1db66:	4287      	cmp	r7, r0
   1db68:	d10e      	bne.n	1db88 <gpio_nrfx_pin_configure+0x98>
		err = nrfx_gpiote_channel_free(ch);
   1db6a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1db6e:	f002 fb01 	bl	20174 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1db72:	42b8      	cmp	r0, r7
   1db74:	d008      	beq.n	1db88 <gpio_nrfx_pin_configure+0x98>
   1db76:	493a      	ldr	r1, [pc, #232]	; (1dc60 <gpio_nrfx_pin_configure+0x170>)
   1db78:	483a      	ldr	r0, [pc, #232]	; (1dc64 <gpio_nrfx_pin_configure+0x174>)
   1db7a:	227a      	movs	r2, #122	; 0x7a
   1db7c:	f009 f914 	bl	26da8 <assert_print>
   1db80:	4837      	ldr	r0, [pc, #220]	; (1dc60 <gpio_nrfx_pin_configure+0x170>)
   1db82:	217a      	movs	r1, #122	; 0x7a
   1db84:	f009 f909 	bl	26d9a <assert_post_action>
	if (flags & GPIO_OUTPUT) {
   1db88:	03a5      	lsls	r5, r4, #14
   1db8a:	d554      	bpl.n	1dc36 <gpio_nrfx_pin_configure+0x146>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1db8c:	f240 3306 	movw	r3, #774	; 0x306
   1db90:	4023      	ands	r3, r4
   1db92:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1db96:	d03e      	beq.n	1dc16 <gpio_nrfx_pin_configure+0x126>
   1db98:	d80c      	bhi.n	1dbb4 <gpio_nrfx_pin_configure+0xc4>
   1db9a:	2b06      	cmp	r3, #6
   1db9c:	d015      	beq.n	1dbca <gpio_nrfx_pin_configure+0xda>
   1db9e:	d804      	bhi.n	1dbaa <gpio_nrfx_pin_configure+0xba>
   1dba0:	b19b      	cbz	r3, 1dbca <gpio_nrfx_pin_configure+0xda>
   1dba2:	2b02      	cmp	r3, #2
   1dba4:	d1dc      	bne.n	1db60 <gpio_nrfx_pin_configure+0x70>
   1dba6:	2304      	movs	r3, #4
   1dba8:	e00f      	b.n	1dbca <gpio_nrfx_pin_configure+0xda>
   1dbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1dbae:	d1d7      	bne.n	1db60 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_H0S1;
   1dbb0:	2301      	movs	r3, #1
   1dbb2:	e00a      	b.n	1dbca <gpio_nrfx_pin_configure+0xda>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1dbb4:	f240 2202 	movw	r2, #514	; 0x202
   1dbb8:	4293      	cmp	r3, r2
   1dbba:	d02e      	beq.n	1dc1a <gpio_nrfx_pin_configure+0x12a>
   1dbbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1dbc0:	d02d      	beq.n	1dc1e <gpio_nrfx_pin_configure+0x12e>
   1dbc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dbc6:	d1cb      	bne.n	1db60 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_S0H1;
   1dbc8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1dbca:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1dbce:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1dbd2:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1dbd6:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1dbd8:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1dbdc:	bf54      	ite	pl
   1dbde:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1dbe2:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1dbe4:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1dbe6:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1dbea:	d51a      	bpl.n	1dc22 <gpio_nrfx_pin_configure+0x132>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1dbec:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1dbf0:	2101      	movs	r1, #1
   1dbf2:	fa01 f108 	lsl.w	r1, r1, r8
    p_reg->OUTSET = set_mask;
   1dbf6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1dbfa:	2200      	movs	r2, #0
   1dbfc:	a901      	add	r1, sp, #4
   1dbfe:	4630      	mov	r0, r6
   1dc00:	f002 f9e4 	bl	1ffcc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1dc04:	4b15      	ldr	r3, [pc, #84]	; (1dc5c <gpio_nrfx_pin_configure+0x16c>)
   1dc06:	4298      	cmp	r0, r3
   1dc08:	bf14      	ite	ne
   1dc0a:	f06f 0015 	mvnne.w	r0, #21
   1dc0e:	2000      	moveq	r0, #0
}
   1dc10:	b005      	add	sp, #20
   1dc12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1dc16:	2307      	movs	r3, #7
   1dc18:	e7d7      	b.n	1dbca <gpio_nrfx_pin_configure+0xda>
		*drive = NRF_GPIO_PIN_D0H1;
   1dc1a:	2305      	movs	r3, #5
   1dc1c:	e7d5      	b.n	1dbca <gpio_nrfx_pin_configure+0xda>
		*drive = NRF_GPIO_PIN_H0H1;
   1dc1e:	2303      	movs	r3, #3
   1dc20:	e7d3      	b.n	1dbca <gpio_nrfx_pin_configure+0xda>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1dc22:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1dc24:	bf41      	itttt	mi
   1dc26:	2101      	movmi	r1, #1
   1dc28:	f8d9 3004 	ldrmi.w	r3, [r9, #4]
   1dc2c:	fa01 f108 	lslmi.w	r1, r1, r8
    p_reg->OUTCLR = clr_mask;
   1dc30:	f8c3 150c 	strmi.w	r1, [r3, #1292]	; 0x50c
}
   1dc34:	e7e1      	b.n	1dbfa <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
   1dc36:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1dc38:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1dc3c:	bf54      	ite	pl
   1dc3e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1dc42:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1dc44:	461a      	mov	r2, r3
   1dc46:	a901      	add	r1, sp, #4
   1dc48:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1dc4a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1dc4e:	f002 f90f 	bl	1fe70 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1dc52:	4b02      	ldr	r3, [pc, #8]	; (1dc5c <gpio_nrfx_pin_configure+0x16c>)
   1dc54:	4298      	cmp	r0, r3
   1dc56:	f43f af76 	beq.w	1db46 <gpio_nrfx_pin_configure+0x56>
   1dc5a:	e781      	b.n	1db60 <gpio_nrfx_pin_configure+0x70>
   1dc5c:	0bad0000 	.word	0x0bad0000
   1dc60:	0002bf99 	.word	0x0002bf99
   1dc64:	0002a576 	.word	0x0002a576

0001dc68 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1dc6a:	794b      	ldrb	r3, [r1, #5]
   1dc6c:	2b01      	cmp	r3, #1
   1dc6e:	d026      	beq.n	1dcbe <uarte_nrfx_configure+0x56>
   1dc70:	2b03      	cmp	r3, #3
   1dc72:	d121      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1dc74:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1dc76:	798b      	ldrb	r3, [r1, #6]
   1dc78:	2b03      	cmp	r3, #3
   1dc7a:	d11d      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1dc7c:	79cc      	ldrb	r4, [r1, #7]
   1dc7e:	b10c      	cbz	r4, 1dc84 <uarte_nrfx_configure+0x1c>
   1dc80:	2c01      	cmp	r4, #1
   1dc82:	d119      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1dc84:	790a      	ldrb	r2, [r1, #4]
   1dc86:	b112      	cbz	r2, 1dc8e <uarte_nrfx_configure+0x26>
   1dc88:	2a02      	cmp	r2, #2
   1dc8a:	d115      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1dc8c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1dc8e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1dc90:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1dc92:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1dc96:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1dc98:	d065      	beq.n	1dd66 <uarte_nrfx_configure+0xfe>
   1dc9a:	d82d      	bhi.n	1dcf8 <uarte_nrfx_configure+0x90>
   1dc9c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1dca0:	d064      	beq.n	1dd6c <uarte_nrfx_configure+0x104>
   1dca2:	d816      	bhi.n	1dcd2 <uarte_nrfx_configure+0x6a>
   1dca4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1dca8:	d062      	beq.n	1dd70 <uarte_nrfx_configure+0x108>
   1dcaa:	d80a      	bhi.n	1dcc2 <uarte_nrfx_configure+0x5a>
   1dcac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1dcb0:	d061      	beq.n	1dd76 <uarte_nrfx_configure+0x10e>
   1dcb2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1dcb6:	d061      	beq.n	1dd7c <uarte_nrfx_configure+0x114>
   1dcb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dcbc:	e052      	b.n	1dd64 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   1dcbe:	2600      	movs	r6, #0
   1dcc0:	e7d9      	b.n	1dc76 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1dcc2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1dcc6:	d05c      	beq.n	1dd82 <uarte_nrfx_configure+0x11a>
   1dcc8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1dccc:	d1f4      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1dcce:	4b37      	ldr	r3, [pc, #220]	; (1ddac <uarte_nrfx_configure+0x144>)
   1dcd0:	e03c      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1dcd2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1dcd6:	d057      	beq.n	1dd88 <uarte_nrfx_configure+0x120>
   1dcd8:	d807      	bhi.n	1dcea <uarte_nrfx_configure+0x82>
   1dcda:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1dcde:	d055      	beq.n	1dd8c <uarte_nrfx_configure+0x124>
   1dce0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1dce4:	d1e8      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1dce6:	4b32      	ldr	r3, [pc, #200]	; (1ddb0 <uarte_nrfx_configure+0x148>)
   1dce8:	e030      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1dcea:	f647 2712 	movw	r7, #31250	; 0x7a12
   1dcee:	42bb      	cmp	r3, r7
   1dcf0:	d1e2      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1dcf2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1dcf6:	e029      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1dcf8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1dcfc:	d048      	beq.n	1dd90 <uarte_nrfx_configure+0x128>
   1dcfe:	d813      	bhi.n	1dd28 <uarte_nrfx_configure+0xc0>
   1dd00:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1dd04:	d047      	beq.n	1dd96 <uarte_nrfx_configure+0x12e>
   1dd06:	d809      	bhi.n	1dd1c <uarte_nrfx_configure+0xb4>
   1dd08:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1dd0c:	42bb      	cmp	r3, r7
   1dd0e:	d044      	beq.n	1dd9a <uarte_nrfx_configure+0x132>
   1dd10:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1dd14:	d1d0      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1dd16:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1dd1a:	e017      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1dd1c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1dd20:	d1ca      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1dd22:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1dd26:	e011      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1dd28:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1dd2c:	d038      	beq.n	1dda0 <uarte_nrfx_configure+0x138>
   1dd2e:	d808      	bhi.n	1dd42 <uarte_nrfx_configure+0xda>
   1dd30:	4f20      	ldr	r7, [pc, #128]	; (1ddb4 <uarte_nrfx_configure+0x14c>)
   1dd32:	42bb      	cmp	r3, r7
   1dd34:	d037      	beq.n	1dda6 <uarte_nrfx_configure+0x13e>
   1dd36:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1dd3a:	d1bd      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1dd3c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1dd40:	e004      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1dd42:	4f1d      	ldr	r7, [pc, #116]	; (1ddb8 <uarte_nrfx_configure+0x150>)
   1dd44:	42bb      	cmp	r3, r7
   1dd46:	d1b7      	bne.n	1dcb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1dd48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1dd4c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1dd4e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1dd52:	1d03      	adds	r3, r0, #4
   1dd54:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1dd56:	4334      	orrs	r4, r6
   1dd58:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1dd5a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1dd5e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1dd62:	2000      	movs	r0, #0
}
   1dd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1dd66:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1dd6a:	e7ef      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1dd6c:	4b13      	ldr	r3, [pc, #76]	; (1ddbc <uarte_nrfx_configure+0x154>)
   1dd6e:	e7ed      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1dd70:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1dd74:	e7ea      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1dd76:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1dd7a:	e7e7      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1dd7c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1dd80:	e7e4      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1dd82:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1dd86:	e7e1      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1dd88:	4b0d      	ldr	r3, [pc, #52]	; (1ddc0 <uarte_nrfx_configure+0x158>)
   1dd8a:	e7df      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1dd8c:	4b0d      	ldr	r3, [pc, #52]	; (1ddc4 <uarte_nrfx_configure+0x15c>)
   1dd8e:	e7dd      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1dd90:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1dd94:	e7da      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1dd96:	4b0c      	ldr	r3, [pc, #48]	; (1ddc8 <uarte_nrfx_configure+0x160>)
   1dd98:	e7d8      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1dd9a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1dd9e:	e7d5      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1dda0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1dda4:	e7d2      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1dda6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ddaa:	e7cf      	b.n	1dd4c <uarte_nrfx_configure+0xe4>
   1ddac:	0013b000 	.word	0x0013b000
   1ddb0:	004ea000 	.word	0x004ea000
   1ddb4:	0003d090 	.word	0x0003d090
   1ddb8:	000f4240 	.word	0x000f4240
   1ddbc:	00275000 	.word	0x00275000
   1ddc0:	0075c000 	.word	0x0075c000
   1ddc4:	003af000 	.word	0x003af000
   1ddc8:	013a9000 	.word	0x013a9000

0001ddcc <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1ddcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1ddd0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1ddd4:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1ddd6:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1ddda:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1ddde:	2100      	movs	r1, #0
   1dde0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   1dde4:	4607      	mov	r7, r0
	data->dev = dev;
   1dde6:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1dde8:	aa01      	add	r2, sp, #4
   1ddea:	4648      	mov	r0, r9
   1ddec:	f00b f870 	bl	28ed0 <pinctrl_lookup_state>
	if (ret < 0) {
   1ddf0:	1e05      	subs	r5, r0, #0
   1ddf2:	db1f      	blt.n	1de34 <uarte_instance_init.constprop.0+0x68>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1ddf4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1ddf6:	f8d9 2000 	ldr.w	r2, [r9]
   1ddfa:	7919      	ldrb	r1, [r3, #4]
   1ddfc:	6818      	ldr	r0, [r3, #0]
   1ddfe:	f00b f8be 	bl	28f7e <pinctrl_configure_pins>
	if (err < 0) {
   1de02:	1e05      	subs	r5, r0, #0
   1de04:	db16      	blt.n	1de34 <uarte_instance_init.constprop.0+0x68>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1de06:	1d31      	adds	r1, r6, #4
   1de08:	4638      	mov	r0, r7
   1de0a:	f7ff ff2d 	bl	1dc68 <uarte_nrfx_configure>
	if (err) {
   1de0e:	4605      	mov	r5, r0
   1de10:	b980      	cbnz	r0, 1de34 <uarte_instance_init.constprop.0+0x68>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1de12:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1de16:	0799      	lsls	r1, r3, #30
   1de18:	d523      	bpl.n	1de62 <uarte_instance_init.constprop.0+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1de1a:	f106 0018 	add.w	r0, r6, #24
   1de1e:	f002 fb49 	bl	204b4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1de22:	4b24      	ldr	r3, [pc, #144]	; (1deb4 <uarte_instance_init.constprop.0+0xe8>)
   1de24:	4298      	cmp	r0, r3
   1de26:	d009      	beq.n	1de3c <uarte_instance_init.constprop.0+0x70>
		LOG_ERR("Failed to allocate PPI Channel");
   1de28:	4823      	ldr	r0, [pc, #140]	; (1deb8 <uarte_instance_init.constprop.0+0xec>)
   1de2a:	2145      	movs	r1, #69	; 0x45
   1de2c:	f008 ffca 	bl	26dc4 <z_log_minimal_printk>
		return -EIO;
   1de30:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1de34:	4628      	mov	r0, r5
   1de36:	b003      	add	sp, #12
   1de38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1de3c:	7e30      	ldrb	r0, [r6, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1de3e:	00c3      	lsls	r3, r0, #3
   1de40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1de44:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1de48:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1de4c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1de50:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1de54:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1de58:	4a18      	ldr	r2, [pc, #96]	; (1debc <uarte_instance_init.constprop.0+0xf0>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1de5a:	2301      	movs	r3, #1
   1de5c:	4083      	lsls	r3, r0
   1de5e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1de62:	2308      	movs	r3, #8
   1de64:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1de68:	f898 3008 	ldrb.w	r3, [r8, #8]
   1de6c:	b953      	cbnz	r3, 1de84 <uarte_instance_init.constprop.0+0xb8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de6e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1de72:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1de76:	6973      	ldr	r3, [r6, #20]
   1de78:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1de7c:	2301      	movs	r3, #1
   1de7e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de82:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1de84:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1de88:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1de8a:	bf5c      	itt	pl
   1de8c:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1de90:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1de94:	06db      	lsls	r3, r3, #27
   1de96:	bf44      	itt	mi
   1de98:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1de9c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1dea0:	6933      	ldr	r3, [r6, #16]
   1dea2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1dea6:	2300      	movs	r3, #0
   1dea8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1deac:	2301      	movs	r3, #1
   1deae:	60a3      	str	r3, [r4, #8]
   1deb0:	60e3      	str	r3, [r4, #12]
	return 0;
   1deb2:	e7bf      	b.n	1de34 <uarte_instance_init.constprop.0+0x68>
   1deb4:	0bad0000 	.word	0x0bad0000
   1deb8:	0002bfe1 	.word	0x0002bfe1
   1debc:	4001f000 	.word	0x4001f000

0001dec0 <uarte_nrfx_poll_out>:
{
   1dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1dec2:	6907      	ldr	r7, [r0, #16]
{
   1dec4:	4604      	mov	r4, r0
   1dec6:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1dec8:	f00b fa47 	bl	2935a <k_is_in_isr>
   1decc:	b910      	cbnz	r0, 1ded4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1dece:	4b2d      	ldr	r3, [pc, #180]	; (1df84 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
   1ded0:	781b      	ldrb	r3, [r3, #0]
   1ded2:	b98b      	cbnz	r3, 1def8 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
   1ded4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ded8:	f3ef 8611 	mrs	r6, BASEPRI
   1dedc:	f383 8812 	msr	BASEPRI_MAX, r3
   1dee0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1dee4:	6860      	ldr	r0, [r4, #4]
   1dee6:	4631      	mov	r1, r6
   1dee8:	f00a ff6e 	bl	28dc8 <is_tx_ready.isra.0>
   1deec:	bb30      	cbnz	r0, 1df3c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1deee:	f386 8811 	msr	BASEPRI, r6
   1def2:	f3bf 8f6f 	isb	sy
}
   1def6:	e7ed      	b.n	1ded4 <uarte_nrfx_poll_out+0x14>
{
   1def8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1defa:	6860      	ldr	r0, [r4, #4]
   1defc:	f00a ff64 	bl	28dc8 <is_tx_ready.isra.0>
   1df00:	b970      	cbnz	r0, 1df20 <uarte_nrfx_poll_out+0x60>
   1df02:	2001      	movs	r0, #1
   1df04:	f00b f973 	bl	291ee <nrfx_busy_wait>
   1df08:	3e01      	subs	r6, #1
   1df0a:	d1f6      	bne.n	1defa <uarte_nrfx_poll_out+0x3a>
   1df0c:	2100      	movs	r1, #0
   1df0e:	2021      	movs	r0, #33	; 0x21
   1df10:	f004 fe0e 	bl	22b30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1df14:	e7f0      	b.n	1def8 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
   1df16:	f386 8811 	msr	BASEPRI, r6
   1df1a:	f3bf 8f6f 	isb	sy
}
   1df1e:	e7f5      	b.n	1df0c <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
   1df20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1df24:	f3ef 8611 	mrs	r6, BASEPRI
   1df28:	f383 8812 	msr	BASEPRI_MAX, r3
   1df2c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1df30:	6860      	ldr	r0, [r4, #4]
   1df32:	4631      	mov	r1, r6
   1df34:	f00a ff48 	bl	28dc8 <is_tx_ready.isra.0>
   1df38:	2800      	cmp	r0, #0
   1df3a:	d0ec      	beq.n	1df16 <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
   1df3c:	693b      	ldr	r3, [r7, #16]
   1df3e:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1df40:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1df42:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1df44:	6813      	ldr	r3, [r2, #0]
   1df46:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1df4a:	2001      	movs	r0, #1
   1df4c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1df50:	2000      	movs	r0, #0
   1df52:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1df56:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
   1df5a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1df5e:	6852      	ldr	r2, [r2, #4]
   1df60:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1df64:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1df66:	bf41      	itttt	mi
   1df68:	2208      	movmi	r2, #8
   1df6a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1df6e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1df72:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1df76:	2201      	movs	r2, #1
   1df78:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1df7a:	f381 8811 	msr	BASEPRI, r1
   1df7e:	f3bf 8f6f 	isb	sy
}
   1df82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1df84:	2000db98 	.word	0x2000db98

0001df88 <random_byte_get>:
	__asm__ volatile(
   1df88:	f04f 0340 	mov.w	r3, #64	; 0x40
   1df8c:	f3ef 8211 	mrs	r2, BASEPRI
   1df90:	f383 8812 	msr	BASEPRI_MAX, r3
   1df94:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1df98:	4b09      	ldr	r3, [pc, #36]	; (1dfc0 <random_byte_get+0x38>)
   1df9a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1df9e:	b161      	cbz	r1, 1dfba <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1dfa0:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1dfa2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1dfa6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1dfaa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1dfae:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1dfb0:	f382 8811 	msr	BASEPRI, r2
   1dfb4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1dfb8:	4770      	bx	lr
	int retval = -EAGAIN;
   1dfba:	f06f 000a 	mvn.w	r0, #10
   1dfbe:	e7f7      	b.n	1dfb0 <random_byte_get+0x28>
   1dfc0:	4000d000 	.word	0x4000d000

0001dfc4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1dfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfc6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1dfc8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1dfca:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1dfcc:	f04f 0040 	mov.w	r0, #64	; 0x40
   1dfd0:	f3ef 8e11 	mrs	lr, BASEPRI
   1dfd4:	f380 8812 	msr	BASEPRI_MAX, r0
   1dfd8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1dfdc:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1dfde:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1dfe2:	1ba4      	subs	r4, r4, r6
   1dfe4:	403c      	ands	r4, r7
	if (available < len) {
   1dfe6:	42a2      	cmp	r2, r4
		len = available;
   1dfe8:	bf88      	it	hi
   1dfea:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1dfec:	18b0      	adds	r0, r6, r2
   1dfee:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1dff0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1dff2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1dff4:	f38e 8811 	msr	BASEPRI, lr
   1dff8:	f3bf 8f6f 	isb	sy
   1dffc:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1dffe:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e000:	4290      	cmp	r0, r2
   1e002:	d119      	bne.n	1e038 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e004:	4566      	cmp	r6, ip
   1e006:	d10d      	bne.n	1e024 <rng_pool_get+0x60>
	__asm__ volatile(
   1e008:	f04f 0540 	mov.w	r5, #64	; 0x40
   1e00c:	f3ef 8011 	mrs	r0, BASEPRI
   1e010:	f385 8812 	msr	BASEPRI_MAX, r5
   1e014:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e018:	781d      	ldrb	r5, [r3, #0]
   1e01a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e01c:	f380 8811 	msr	BASEPRI, r0
   1e020:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e024:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e026:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e028:	b290      	uxth	r0, r2
	available = available - len;
   1e02a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1e02c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e02e:	bf22      	ittt	cs
   1e030:	4b06      	ldrcs	r3, [pc, #24]	; (1e04c <rng_pool_get+0x88>)
   1e032:	2201      	movcs	r2, #1
   1e034:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e036:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e038:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1e03c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e03e:	f89e e005 	ldrb.w	lr, [lr, #5]
   1e042:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1e046:	403d      	ands	r5, r7
   1e048:	e7da      	b.n	1e000 <rng_pool_get+0x3c>
   1e04a:	bf00      	nop
   1e04c:	4000d000 	.word	0x4000d000

0001e050 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1e050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e054:	4614      	mov	r4, r2
   1e056:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e058:	6902      	ldr	r2, [r0, #16]
   1e05a:	4b2c      	ldr	r3, [pc, #176]	; (1e10c <entropy_nrf5_get_entropy_isr+0xbc>)
   1e05c:	429a      	cmp	r2, r3
{
   1e05e:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e060:	d00a      	beq.n	1e078 <entropy_nrf5_get_entropy_isr+0x28>
   1e062:	492b      	ldr	r1, [pc, #172]	; (1e110 <entropy_nrf5_get_entropy_isr+0xc0>)
   1e064:	482b      	ldr	r0, [pc, #172]	; (1e114 <entropy_nrf5_get_entropy_isr+0xc4>)
   1e066:	f240 1205 	movw	r2, #261	; 0x105
   1e06a:	f008 fe9d 	bl	26da8 <assert_print>
   1e06e:	4828      	ldr	r0, [pc, #160]	; (1e110 <entropy_nrf5_get_entropy_isr+0xc0>)
   1e070:	f240 1105 	movw	r1, #261	; 0x105
   1e074:	f008 fe91 	bl	26d9a <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e078:	43eb      	mvns	r3, r5
   1e07a:	f013 0501 	ands.w	r5, r3, #1
   1e07e:	d006      	beq.n	1e08e <entropy_nrf5_get_entropy_isr+0x3e>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e080:	4825      	ldr	r0, [pc, #148]	; (1e118 <entropy_nrf5_get_entropy_isr+0xc8>)
   1e082:	4622      	mov	r2, r4
   1e084:	4631      	mov	r1, r6
   1e086:	f7ff ff9d 	bl	1dfc4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e08e:	b3a4      	cbz	r4, 1e0fa <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   1e090:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e094:	f3ef 8811 	mrs	r8, BASEPRI
   1e098:	f383 8812 	msr	BASEPRI_MAX, r3
   1e09c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e0a0:	200d      	movs	r0, #13
   1e0a2:	f7f9 f81f 	bl	170e4 <arch_irq_is_enabled>
   1e0a6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e0a8:	200d      	movs	r0, #13
   1e0aa:	f7f9 f807 	bl	170bc <arch_irq_disable>
	__asm__ volatile(
   1e0ae:	f388 8811 	msr	BASEPRI, r8
   1e0b2:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e0b6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1e11c <entropy_nrf5_get_entropy_isr+0xcc>
   1e0ba:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1e120 <entropy_nrf5_get_entropy_isr+0xd0>
   1e0be:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1e0c2:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1e0c6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e0ca:	2301      	movs	r3, #1
   1e0cc:	f8c8 3000 	str.w	r3, [r8]
   1e0d0:	4625      	mov	r5, r4
   1e0d2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e0d6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1e0da:	b183      	cbz	r3, 1e0fe <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   1e0dc:	f7ff ff54 	bl	1df88 <random_byte_get>
			if (byte < 0) {
   1e0e0:	1e03      	subs	r3, r0, #0
   1e0e2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1e0e6:	dbf6      	blt.n	1e0d6 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1e0e8:	3d01      	subs	r5, #1
   1e0ea:	b2ad      	uxth	r5, r5
   1e0ec:	5573      	strb	r3, [r6, r5]
		} while (len);
   1e0ee:	2d00      	cmp	r5, #0
   1e0f0:	d1f1      	bne.n	1e0d6 <entropy_nrf5_get_entropy_isr+0x86>
		if (irq_enabled) {
   1e0f2:	b117      	cbz	r7, 1e0fa <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   1e0f4:	200d      	movs	r0, #13
   1e0f6:	f7f8 ffd1 	bl	1709c <arch_irq_enable>
	return cnt;
   1e0fa:	4620      	mov	r0, r4
   1e0fc:	e7c5      	b.n	1e08a <entropy_nrf5_get_entropy_isr+0x3a>
   1e0fe:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e102:	bf20      	wfe
				__SEV();
   1e104:	bf40      	sev
				__WFE();
   1e106:	bf20      	wfe
   1e108:	e7e5      	b.n	1e0d6 <entropy_nrf5_get_entropy_isr+0x86>
   1e10a:	bf00      	nop
   1e10c:	20003e0c 	.word	0x20003e0c
   1e110:	0002c031 	.word	0x0002c031
   1e114:	0002a576 	.word	0x0002a576
   1e118:	20003e3c 	.word	0x20003e3c
   1e11c:	4000d000 	.word	0x4000d000
   1e120:	e000e100 	.word	0xe000e100

0001e124 <entropy_nrf5_get_entropy>:
{
   1e124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e128:	4b1a      	ldr	r3, [pc, #104]	; (1e194 <entropy_nrf5_get_entropy+0x70>)
{
   1e12a:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e12c:	6902      	ldr	r2, [r0, #16]
   1e12e:	429a      	cmp	r2, r3
{
   1e130:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e132:	d008      	beq.n	1e146 <entropy_nrf5_get_entropy+0x22>
   1e134:	4918      	ldr	r1, [pc, #96]	; (1e198 <entropy_nrf5_get_entropy+0x74>)
   1e136:	4819      	ldr	r0, [pc, #100]	; (1e19c <entropy_nrf5_get_entropy+0x78>)
   1e138:	22e7      	movs	r2, #231	; 0xe7
   1e13a:	f008 fe35 	bl	26da8 <assert_print>
   1e13e:	4816      	ldr	r0, [pc, #88]	; (1e198 <entropy_nrf5_get_entropy+0x74>)
   1e140:	21e7      	movs	r1, #231	; 0xe7
   1e142:	f008 fe2a 	bl	26d9a <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1e146:	4e13      	ldr	r6, [pc, #76]	; (1e194 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e148:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1e14c:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1e150:	b914      	cbnz	r4, 1e158 <entropy_nrf5_get_entropy+0x34>
}
   1e152:	4620      	mov	r0, r4
   1e154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e158:	f04f 33ff 	mov.w	r3, #4294967295
   1e15c:	f04f 32ff 	mov.w	r2, #4294967295
   1e160:	4630      	mov	r0, r6
   1e162:	f003 f91d 	bl	213a0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e166:	4622      	mov	r2, r4
   1e168:	4649      	mov	r1, r9
   1e16a:	4638      	mov	r0, r7
   1e16c:	f7ff ff2a 	bl	1dfc4 <rng_pool_get>
   1e170:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1e172:	4630      	mov	r0, r6
   1e174:	f003 f8da 	bl	2132c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e178:	b93d      	cbnz	r5, 1e18a <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1e17a:	f04f 32ff 	mov.w	r2, #4294967295
   1e17e:	f04f 33ff 	mov.w	r3, #4294967295
   1e182:	4640      	mov	r0, r8
   1e184:	f003 f90c 	bl	213a0 <z_impl_k_sem_take>
			continue;
   1e188:	e7e2      	b.n	1e150 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1e18a:	1b64      	subs	r4, r4, r5
   1e18c:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e18e:	44a9      	add	r9, r5
   1e190:	e7de      	b.n	1e150 <entropy_nrf5_get_entropy+0x2c>
   1e192:	bf00      	nop
   1e194:	20003e0c 	.word	0x20003e0c
   1e198:	0002c031 	.word	0x0002c031
   1e19c:	0002a576 	.word	0x0002a576

0001e1a0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1e1a0:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1e1a2:	4c20      	ldr	r4, [pc, #128]	; (1e224 <entropy_nrf5_init+0x84>)
   1e1a4:	6903      	ldr	r3, [r0, #16]
   1e1a6:	42a3      	cmp	r3, r4
   1e1a8:	d00a      	beq.n	1e1c0 <entropy_nrf5_init+0x20>
   1e1aa:	491f      	ldr	r1, [pc, #124]	; (1e228 <entropy_nrf5_init+0x88>)
   1e1ac:	481f      	ldr	r0, [pc, #124]	; (1e22c <entropy_nrf5_init+0x8c>)
   1e1ae:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1e1b2:	f008 fdf9 	bl	26da8 <assert_print>
   1e1b6:	481c      	ldr	r0, [pc, #112]	; (1e228 <entropy_nrf5_init+0x88>)
   1e1b8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1e1bc:	f008 fded 	bl	26d9a <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e1c0:	2201      	movs	r2, #1
   1e1c2:	4611      	mov	r1, r2
   1e1c4:	4817      	ldr	r0, [pc, #92]	; (1e224 <entropy_nrf5_init+0x84>)
   1e1c6:	f00b f919 	bl	293fc <z_impl_k_sem_init>
   1e1ca:	2201      	movs	r2, #1
   1e1cc:	2100      	movs	r1, #0
   1e1ce:	4818      	ldr	r0, [pc, #96]	; (1e230 <entropy_nrf5_init+0x90>)
   1e1d0:	f00b f914 	bl	293fc <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1e1d4:	f240 4307 	movw	r3, #1031	; 0x407
   1e1d8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1e1dc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e1e0:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1e1e2:	230c      	movs	r3, #12
   1e1e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1e1e8:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1e1ea:	4b12      	ldr	r3, [pc, #72]	; (1e234 <entropy_nrf5_init+0x94>)
   1e1ec:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1e1f0:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1e1f4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e1f8:	f022 0201 	bic.w	r2, r2, #1
   1e1fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1e200:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e202:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1e206:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e20a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e20e:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e210:	6019      	str	r1, [r3, #0]
   1e212:	200d      	movs	r0, #13
   1e214:	f7f8 ff74 	bl	17100 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e218:	200d      	movs	r0, #13
   1e21a:	f7f8 ff3f 	bl	1709c <arch_irq_enable>

	return 0;
}
   1e21e:	4628      	mov	r0, r5
   1e220:	bd38      	pop	{r3, r4, r5, pc}
   1e222:	bf00      	nop
   1e224:	20003e0c 	.word	0x20003e0c
   1e228:	0002c031 	.word	0x0002c031
   1e22c:	0002a576 	.word	0x0002a576
   1e230:	20003e24 	.word	0x20003e24
   1e234:	4000d000 	.word	0x4000d000

0001e238 <isr>:
{
   1e238:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e23a:	f7ff fea5 	bl	1df88 <random_byte_get>
	if (byte < 0) {
   1e23e:	2800      	cmp	r0, #0
   1e240:	db20      	blt.n	1e284 <isr+0x4c>
	uint8_t last  = rngp->last;
   1e242:	4b17      	ldr	r3, [pc, #92]	; (1e2a0 <isr+0x68>)
   1e244:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1e248:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1e24c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1e250:	1a51      	subs	r1, r2, r1
   1e252:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e256:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1e258:	d10d      	bne.n	1e276 <isr+0x3e>
	uint8_t last  = rngp->last;
   1e25a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1e25e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1e262:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1e266:	1a51      	subs	r1, r2, r1
   1e268:	ea34 0101 	bics.w	r1, r4, r1
   1e26c:	d10b      	bne.n	1e286 <isr+0x4e>
   1e26e:	4b0d      	ldr	r3, [pc, #52]	; (1e2a4 <isr+0x6c>)
   1e270:	2201      	movs	r2, #1
   1e272:	605a      	str	r2, [r3, #4]
}
   1e274:	e00e      	b.n	1e294 <isr+0x5c>
	rngp->buffer[last] = byte;
   1e276:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e278:	3201      	adds	r2, #1
   1e27a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e27c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1e280:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1e284:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1e286:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e288:	3201      	adds	r2, #1
   1e28a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e28c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1e290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1e294:	4804      	ldr	r0, [pc, #16]	; (1e2a8 <isr+0x70>)
}
   1e296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e29a:	f003 b847 	b.w	2132c <z_impl_k_sem_give>
   1e29e:	bf00      	nop
   1e2a0:	20003e0c 	.word	0x20003e0c
   1e2a4:	4000d000 	.word	0x4000d000
   1e2a8:	20003e24 	.word	0x20003e24

0001e2ac <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1e2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e2ae:	460f      	mov	r7, r1
   1e2b0:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   1e2b2:	b940      	cbnz	r0, 1e2c6 <entropy_cc3xx_rng_get_entropy+0x1a>
   1e2b4:	4918      	ldr	r1, [pc, #96]	; (1e318 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e2b6:	4819      	ldr	r0, [pc, #100]	; (1e31c <entropy_cc3xx_rng_get_entropy+0x70>)
   1e2b8:	2220      	movs	r2, #32
   1e2ba:	f008 fd75 	bl	26da8 <assert_print>
   1e2be:	4816      	ldr	r0, [pc, #88]	; (1e318 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e2c0:	2120      	movs	r1, #32
   1e2c2:	f008 fd6a 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1e2c6:	b947      	cbnz	r7, 1e2da <entropy_cc3xx_rng_get_entropy+0x2e>
   1e2c8:	4913      	ldr	r1, [pc, #76]	; (1e318 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e2ca:	4814      	ldr	r0, [pc, #80]	; (1e31c <entropy_cc3xx_rng_get_entropy+0x70>)
   1e2cc:	2221      	movs	r2, #33	; 0x21
   1e2ce:	f008 fd6b 	bl	26da8 <assert_print>
   1e2d2:	4811      	ldr	r0, [pc, #68]	; (1e318 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e2d4:	2121      	movs	r1, #33	; 0x21
   1e2d6:	f008 fd60 	bl	26d9a <assert_post_action>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e2da:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1e2de:	2400      	movs	r4, #0
	while (offset < length) {
   1e2e0:	42a6      	cmp	r6, r4
   1e2e2:	d803      	bhi.n	1e2ec <entropy_cc3xx_rng_get_entropy+0x40>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   1e2e4:	d116      	bne.n	1e314 <entropy_cc3xx_rng_get_entropy+0x68>
		err = 0;
   1e2e6:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1e2e8:	b003      	add	sp, #12
   1e2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e2ec:	1b33      	subs	r3, r6, r4
   1e2ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e2f2:	bf38      	it	cc
   1e2f4:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1e2f6:	462a      	mov	r2, r5
   1e2f8:	ab01      	add	r3, sp, #4
   1e2fa:	1939      	adds	r1, r7, r4
   1e2fc:	2000      	movs	r0, #0
   1e2fe:	f005 ff09 	bl	24114 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   1e302:	b920      	cbnz	r0, 1e30e <entropy_cc3xx_rng_get_entropy+0x62>
		if (olen != chunk_size) {
   1e304:	9b01      	ldr	r3, [sp, #4]
   1e306:	42ab      	cmp	r3, r5
   1e308:	d101      	bne.n	1e30e <entropy_cc3xx_rng_get_entropy+0x62>
		offset += chunk_size;
   1e30a:	442c      	add	r4, r5
   1e30c:	e7e8      	b.n	1e2e0 <entropy_cc3xx_rng_get_entropy+0x34>
			return -EINVAL;
   1e30e:	f06f 0015 	mvn.w	r0, #21
   1e312:	e7e9      	b.n	1e2e8 <entropy_cc3xx_rng_get_entropy+0x3c>
	int err = EINVAL;
   1e314:	2016      	movs	r0, #22
   1e316:	e7e7      	b.n	1e2e8 <entropy_cc3xx_rng_get_entropy+0x3c>
   1e318:	0002c082 	.word	0x0002c082
   1e31c:	0002a576 	.word	0x0002a576

0001e320 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1e320:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e322:	2301      	movs	r3, #1
   1e324:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e326:	4a11      	ldr	r2, [pc, #68]	; (1e36c <compare_int_lock+0x4c>)
   1e328:	f3bf 8f5b 	dmb	ish
   1e32c:	43dc      	mvns	r4, r3
   1e32e:	e852 1f00 	ldrex	r1, [r2]
   1e332:	ea01 0c04 	and.w	ip, r1, r4
   1e336:	e842 ce00 	strex	lr, ip, [r2]
   1e33a:	f1be 0f00 	cmp.w	lr, #0
   1e33e:	d1f6      	bne.n	1e32e <compare_int_lock+0xe>
   1e340:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e348:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1e34c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e350:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1e354:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1e358:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e35c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e360:	420b      	tst	r3, r1
}
   1e362:	bf14      	ite	ne
   1e364:	2001      	movne	r0, #1
   1e366:	2000      	moveq	r0, #0
   1e368:	bd10      	pop	{r4, pc}
   1e36a:	bf00      	nop
   1e36c:	20003e64 	.word	0x20003e64

0001e370 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e370:	4919      	ldr	r1, [pc, #100]	; (1e3d8 <sys_clock_timeout_handler+0x68>)
{
   1e372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e374:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1e376:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e37a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1e37c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e380:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e384:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1e386:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e38a:	d222      	bcs.n	1e3d2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e38c:	4b13      	ldr	r3, [pc, #76]	; (1e3dc <sys_clock_timeout_handler+0x6c>)
   1e38e:	681b      	ldr	r3, [r3, #0]
   1e390:	0a1a      	lsrs	r2, r3, #8
   1e392:	061b      	lsls	r3, r3, #24
   1e394:	195e      	adds	r6, r3, r5
   1e396:	4b12      	ldr	r3, [pc, #72]	; (1e3e0 <sys_clock_timeout_handler+0x70>)
   1e398:	f142 0700 	adc.w	r7, r2, #0
   1e39c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1e3a0:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e3a2:	f004 fecf 	bl	23144 <sys_clock_announce>
    return p_reg->CC[ch];
   1e3a6:	00a3      	lsls	r3, r4, #2
   1e3a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e3ac:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1e3b0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1e3b4:	42aa      	cmp	r2, r5
   1e3b6:	d10b      	bne.n	1e3d0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1e3b8:	b91e      	cbnz	r6, 1e3c2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1e3ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e3be:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e3c2:	4b08      	ldr	r3, [pc, #32]	; (1e3e4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e3c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1e3c8:	fa00 f404 	lsl.w	r4, r0, r4
   1e3cc:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1e3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1e3d2:	2600      	movs	r6, #0
   1e3d4:	e7e5      	b.n	1e3a2 <sys_clock_timeout_handler+0x32>
   1e3d6:	bf00      	nop
   1e3d8:	20003218 	.word	0x20003218
   1e3dc:	20003e68 	.word	0x20003e68
   1e3e0:	20003200 	.word	0x20003200
   1e3e4:	40011000 	.word	0x40011000

0001e3e8 <compare_int_unlock>:
	if (key) {
   1e3e8:	b319      	cbz	r1, 1e432 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e3ea:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1e3ee:	2301      	movs	r3, #1
   1e3f0:	4a10      	ldr	r2, [pc, #64]	; (1e434 <compare_int_unlock+0x4c>)
   1e3f2:	4083      	lsls	r3, r0
   1e3f4:	e852 1f00 	ldrex	r1, [r2]
   1e3f8:	4319      	orrs	r1, r3
   1e3fa:	e842 1c00 	strex	ip, r1, [r2]
   1e3fe:	f1bc 0f00 	cmp.w	ip, #0
   1e402:	d1f7      	bne.n	1e3f4 <compare_int_unlock+0xc>
   1e404:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1e408:	4a0b      	ldr	r2, [pc, #44]	; (1e438 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e40a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e40e:	4083      	lsls	r3, r0
   1e410:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e414:	4b09      	ldr	r3, [pc, #36]	; (1e43c <compare_int_unlock+0x54>)
   1e416:	f3bf 8f5b 	dmb	ish
   1e41a:	681b      	ldr	r3, [r3, #0]
   1e41c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e420:	fa23 f000 	lsr.w	r0, r3, r0
   1e424:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e426:	bf42      	ittt	mi
   1e428:	4b05      	ldrmi	r3, [pc, #20]	; (1e440 <compare_int_unlock+0x58>)
   1e42a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1e42e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e432:	4770      	bx	lr
   1e434:	20003e64 	.word	0x20003e64
   1e438:	40011000 	.word	0x40011000
   1e43c:	20003e60 	.word	0x20003e60
   1e440:	e000e100 	.word	0xe000e100

0001e444 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e444:	4b0d      	ldr	r3, [pc, #52]	; (1e47c <z_nrf_rtc_timer_read+0x38>)
   1e446:	6818      	ldr	r0, [r3, #0]
   1e448:	0a01      	lsrs	r1, r0, #8
   1e44a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e44c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1e450:	4b0b      	ldr	r3, [pc, #44]	; (1e480 <z_nrf_rtc_timer_read+0x3c>)
   1e452:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e456:	1818      	adds	r0, r3, r0
   1e458:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e45c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e460:	d20a      	bcs.n	1e478 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e462:	4b08      	ldr	r3, [pc, #32]	; (1e484 <z_nrf_rtc_timer_read+0x40>)
   1e464:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e468:	4290      	cmp	r0, r2
   1e46a:	eb71 0303 	sbcs.w	r3, r1, r3
   1e46e:	d203      	bcs.n	1e478 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e470:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e474:	f141 0100 	adc.w	r1, r1, #0
}
   1e478:	4770      	bx	lr
   1e47a:	bf00      	nop
   1e47c:	20003e68 	.word	0x20003e68
   1e480:	40011000 	.word	0x40011000
   1e484:	20003200 	.word	0x20003200

0001e488 <compare_set>:
{
   1e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e48c:	b085      	sub	sp, #20
   1e48e:	4616      	mov	r6, r2
   1e490:	4698      	mov	r8, r3
   1e492:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1e494:	f7ff ff44 	bl	1e320 <compare_int_lock>
   1e498:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e49a:	f7ff ffd3 	bl	1e444 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e49e:	42b0      	cmp	r0, r6
   1e4a0:	eb71 0308 	sbcs.w	r3, r1, r8
   1e4a4:	d278      	bcs.n	1e598 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e4a6:	4b46      	ldr	r3, [pc, #280]	; (1e5c0 <compare_set+0x138>)
   1e4a8:	1a30      	subs	r0, r6, r0
   1e4aa:	eb68 0101 	sbc.w	r1, r8, r1
   1e4ae:	4298      	cmp	r0, r3
   1e4b0:	f171 0300 	sbcs.w	r3, r1, #0
   1e4b4:	f080 8081 	bcs.w	1e5ba <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1e4b8:	4b42      	ldr	r3, [pc, #264]	; (1e5c4 <compare_set+0x13c>)
   1e4ba:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1e4be:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1e4c2:	45d8      	cmp	r8, fp
   1e4c4:	bf08      	it	eq
   1e4c6:	4556      	cmpeq	r6, sl
   1e4c8:	d051      	beq.n	1e56e <compare_set+0xe6>
   1e4ca:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1e4ce:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e4d2:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1e4d6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1e4da:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e4dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1e4e0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e4e4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1e4e6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1e4ea:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e4ee:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1e4f0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e4f4:	4b34      	ldr	r3, [pc, #208]	; (1e5c8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e4f6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e4fa:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1e4fc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e500:	1a40      	subs	r0, r0, r1
   1e502:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e506:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1e50a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1e50c:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1e510:	d107      	bne.n	1e522 <compare_set+0x9a>
   1e512:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1e516:	2013      	movs	r0, #19
   1e518:	f00b f81d 	bl	29556 <z_impl_k_busy_wait>
   1e51c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1e520:	4b29      	ldr	r3, [pc, #164]	; (1e5c8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e522:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1e526:	eba4 000c 	sub.w	r0, r4, ip
   1e52a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1e52e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e532:	bf88      	it	hi
   1e534:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e536:	2000      	movs	r0, #0
   1e538:	6038      	str	r0, [r7, #0]
   1e53a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1e53c:	9801      	ldr	r0, [sp, #4]
   1e53e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e542:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1e546:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e54a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1e54e:	4281      	cmp	r1, r0
   1e550:	d006      	beq.n	1e560 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1e552:	1a20      	subs	r0, r4, r0
   1e554:	3802      	subs	r0, #2
   1e556:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1e55a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e55e:	d819      	bhi.n	1e594 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1e560:	1aa4      	subs	r4, r4, r2
   1e562:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1e566:	eb14 0a06 	adds.w	sl, r4, r6
   1e56a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1e56e:	4915      	ldr	r1, [pc, #84]	; (1e5c4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1e570:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1e572:	012b      	lsls	r3, r5, #4
   1e574:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1e578:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1e57c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1e57e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e580:	6053      	str	r3, [r2, #4]
	return ret;
   1e582:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1e584:	4628      	mov	r0, r5
   1e586:	9900      	ldr	r1, [sp, #0]
   1e588:	f7ff ff2e 	bl	1e3e8 <compare_int_unlock>
}
   1e58c:	4620      	mov	r0, r4
   1e58e:	b005      	add	sp, #20
   1e590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e594:	4620      	mov	r0, r4
   1e596:	e7b1      	b.n	1e4fc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1e598:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e59a:	4a0c      	ldr	r2, [pc, #48]	; (1e5cc <compare_set+0x144>)
   1e59c:	f3bf 8f5b 	dmb	ish
   1e5a0:	40ab      	lsls	r3, r5
   1e5a2:	e852 1f00 	ldrex	r1, [r2]
   1e5a6:	4319      	orrs	r1, r3
   1e5a8:	e842 1000 	strex	r0, r1, [r2]
   1e5ac:	2800      	cmp	r0, #0
   1e5ae:	d1f8      	bne.n	1e5a2 <compare_set+0x11a>
   1e5b0:	f3bf 8f5b 	dmb	ish
   1e5b4:	46b2      	mov	sl, r6
   1e5b6:	46c3      	mov	fp, r8
   1e5b8:	e7d9      	b.n	1e56e <compare_set+0xe6>
			return -EINVAL;
   1e5ba:	f06f 0415 	mvn.w	r4, #21
   1e5be:	e7e1      	b.n	1e584 <compare_set+0xfc>
   1e5c0:	01000001 	.word	0x01000001
   1e5c4:	20003208 	.word	0x20003208
   1e5c8:	40011000 	.word	0x40011000
   1e5cc:	20003e60 	.word	0x20003e60

0001e5d0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e5d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e5d2:	4b19      	ldr	r3, [pc, #100]	; (1e638 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1e5d4:	4d19      	ldr	r5, [pc, #100]	; (1e63c <sys_clock_driver_init+0x6c>)
   1e5d6:	2400      	movs	r4, #0
   1e5d8:	f04f 30ff 	mov.w	r0, #4294967295
   1e5dc:	f04f 31ff 	mov.w	r1, #4294967295
   1e5e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1e5e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1e5e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e5ec:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e5f0:	4b13      	ldr	r3, [pc, #76]	; (1e640 <sys_clock_driver_init+0x70>)
   1e5f2:	2602      	movs	r6, #2
   1e5f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e5f8:	2101      	movs	r1, #1
   1e5fa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1e5fe:	2011      	movs	r0, #17
   1e600:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e604:	4622      	mov	r2, r4
   1e606:	f7f8 fd7b 	bl	17100 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e60a:	2011      	movs	r0, #17
   1e60c:	f7f8 fd46 	bl	1709c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e610:	4a0c      	ldr	r2, [pc, #48]	; (1e644 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e612:	2301      	movs	r3, #1
   1e614:	60ab      	str	r3, [r5, #8]
   1e616:	602b      	str	r3, [r5, #0]
   1e618:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e61a:	4b0b      	ldr	r3, [pc, #44]	; (1e648 <sys_clock_driver_init+0x78>)
   1e61c:	4a0b      	ldr	r2, [pc, #44]	; (1e64c <sys_clock_driver_init+0x7c>)
   1e61e:	9300      	str	r3, [sp, #0]
   1e620:	9401      	str	r4, [sp, #4]
   1e622:	2300      	movs	r3, #0
   1e624:	4620      	mov	r0, r4
   1e626:	f7ff ff2f 	bl	1e488 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e62a:	4630      	mov	r0, r6
   1e62c:	f7ff f868 	bl	1d700 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e630:	4620      	mov	r0, r4
   1e632:	b002      	add	sp, #8
   1e634:	bd70      	pop	{r4, r5, r6, pc}
   1e636:	bf00      	nop
   1e638:	20003208 	.word	0x20003208
   1e63c:	40011000 	.word	0x40011000
   1e640:	e000e100 	.word	0xe000e100
   1e644:	20003e64 	.word	0x20003e64
   1e648:	0001e371 	.word	0x0001e371
   1e64c:	007fffff 	.word	0x007fffff

0001e650 <rtc_nrf_isr>:
{
   1e650:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1e654:	4c2c      	ldr	r4, [pc, #176]	; (1e708 <rtc_nrf_isr+0xb8>)
   1e656:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e65a:	0799      	lsls	r1, r3, #30
   1e65c:	d50b      	bpl.n	1e676 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e65e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1e662:	b143      	cbz	r3, 1e676 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1e664:	4a29      	ldr	r2, [pc, #164]	; (1e70c <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e666:	2300      	movs	r3, #0
   1e668:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1e66c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1e670:	6813      	ldr	r3, [r2, #0]
   1e672:	3301      	adds	r3, #1
   1e674:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1e676:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e67a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1e67c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e680:	03d2      	lsls	r2, r2, #15
   1e682:	d52d      	bpl.n	1e6e0 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e684:	f3bf 8f5b 	dmb	ish
   1e688:	4a21      	ldr	r2, [pc, #132]	; (1e710 <rtc_nrf_isr+0xc0>)
   1e68a:	e852 1f00 	ldrex	r1, [r2]
   1e68e:	f021 0001 	bic.w	r0, r1, #1
   1e692:	e842 0500 	strex	r5, r0, [r2]
   1e696:	2d00      	cmp	r5, #0
   1e698:	d1f7      	bne.n	1e68a <rtc_nrf_isr+0x3a>
   1e69a:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e69e:	b911      	cbnz	r1, 1e6a6 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e6a0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1e6a4:	b1e2      	cbz	r2, 1e6e0 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e6a6:	2500      	movs	r5, #0
   1e6a8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1e6ac:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1e6b0:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1e6b4:	f7ff fec6 	bl	1e444 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1e6b8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e6bc:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1e6be:	4b15      	ldr	r3, [pc, #84]	; (1e714 <rtc_nrf_isr+0xc4>)
   1e6c0:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1e6c4:	42b0      	cmp	r0, r6
   1e6c6:	41b9      	sbcs	r1, r7
   1e6c8:	d20f      	bcs.n	1e6ea <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1e6ca:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1e6cc:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1e6d0:	b141      	cbz	r1, 1e6e4 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1e6d2:	f8cd 8000 	str.w	r8, [sp]
   1e6d6:	4632      	mov	r2, r6
   1e6d8:	463b      	mov	r3, r7
   1e6da:	2000      	movs	r0, #0
   1e6dc:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e6de:	e001      	b.n	1e6e4 <rtc_nrf_isr+0x94>
   1e6e0:	f383 8810 	msr	PRIMASK, r3
}
   1e6e4:	b002      	add	sp, #8
   1e6e6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6ea:	f04f 3aff 	mov.w	sl, #4294967295
   1e6ee:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1e6f2:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6f6:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1e6fa:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e6fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e700:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1e704:	e7e2      	b.n	1e6cc <rtc_nrf_isr+0x7c>
   1e706:	bf00      	nop
   1e708:	40011000 	.word	0x40011000
   1e70c:	20003e68 	.word	0x20003e68
   1e710:	20003e60 	.word	0x20003e60
   1e714:	20003208 	.word	0x20003208

0001e718 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e718:	1c43      	adds	r3, r0, #1
{
   1e71a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e71c:	d021      	beq.n	1e762 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e71e:	2801      	cmp	r0, #1
   1e720:	dd21      	ble.n	1e766 <sys_clock_set_timeout+0x4e>
   1e722:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e726:	da20      	bge.n	1e76a <sys_clock_set_timeout+0x52>
   1e728:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e72a:	f7ff fe8b 	bl	1e444 <z_nrf_rtc_timer_read>
   1e72e:	4b10      	ldr	r3, [pc, #64]	; (1e770 <sys_clock_set_timeout+0x58>)
   1e730:	e9d3 1300 	ldrd	r1, r3, [r3]
   1e734:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1e736:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e73a:	bf28      	it	cs
   1e73c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e73e:	3001      	adds	r0, #1
   1e740:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1e742:	480c      	ldr	r0, [pc, #48]	; (1e774 <sys_clock_set_timeout+0x5c>)
   1e744:	4282      	cmp	r2, r0
   1e746:	bf28      	it	cs
   1e748:	4602      	movcs	r2, r0
   1e74a:	1852      	adds	r2, r2, r1
   1e74c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e750:	4909      	ldr	r1, [pc, #36]	; (1e778 <sys_clock_set_timeout+0x60>)
   1e752:	9001      	str	r0, [sp, #4]
   1e754:	9100      	str	r1, [sp, #0]
   1e756:	f143 0300 	adc.w	r3, r3, #0
   1e75a:	f7ff fe95 	bl	1e488 <compare_set>
}
   1e75e:	b002      	add	sp, #8
   1e760:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e762:	4804      	ldr	r0, [pc, #16]	; (1e774 <sys_clock_set_timeout+0x5c>)
   1e764:	e7e0      	b.n	1e728 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e766:	2400      	movs	r4, #0
   1e768:	e7df      	b.n	1e72a <sys_clock_set_timeout+0x12>
   1e76a:	4c02      	ldr	r4, [pc, #8]	; (1e774 <sys_clock_set_timeout+0x5c>)
   1e76c:	e7dd      	b.n	1e72a <sys_clock_set_timeout+0x12>
   1e76e:	bf00      	nop
   1e770:	20003218 	.word	0x20003218
   1e774:	007fffff 	.word	0x007fffff
   1e778:	0001e371 	.word	0x0001e371

0001e77c <sys_clock_elapsed>:
{
   1e77c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e77e:	f7ff fe61 	bl	1e444 <z_nrf_rtc_timer_read>
   1e782:	4b02      	ldr	r3, [pc, #8]	; (1e78c <sys_clock_elapsed+0x10>)
   1e784:	681b      	ldr	r3, [r3, #0]
}
   1e786:	1ac0      	subs	r0, r0, r3
   1e788:	bd08      	pop	{r3, pc}
   1e78a:	bf00      	nop
   1e78c:	20003218 	.word	0x20003218

0001e790 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e790:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1e792:	0953      	lsrs	r3, r2, #5
{
   1e794:	b510      	push	{r4, lr}
   1e796:	4604      	mov	r4, r0
    switch (port)
   1e798:	d02a      	beq.n	1e7f0 <nrf_gpio_pin_port_decode+0x60>
    uint32_t mask = 0;
   1e79a:	2b01      	cmp	r3, #1
   1e79c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e7a0:	bf18      	it	ne
   1e7a2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1e7a4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e7a8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e7aa:	07db      	lsls	r3, r3, #31
   1e7ac:	d40a      	bmi.n	1e7c4 <nrf_gpio_pin_port_decode+0x34>
   1e7ae:	4913      	ldr	r1, [pc, #76]	; (1e7fc <nrf_gpio_pin_port_decode+0x6c>)
   1e7b0:	4813      	ldr	r0, [pc, #76]	; (1e800 <nrf_gpio_pin_port_decode+0x70>)
   1e7b2:	f240 2247 	movw	r2, #583	; 0x247
   1e7b6:	f008 faf7 	bl	26da8 <assert_print>
   1e7ba:	4810      	ldr	r0, [pc, #64]	; (1e7fc <nrf_gpio_pin_port_decode+0x6c>)
   1e7bc:	f240 2147 	movw	r1, #583	; 0x247
   1e7c0:	f008 faeb 	bl	26d9a <assert_post_action>
    uint32_t pin_number = *p_pin;
   1e7c4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1e7c6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e7ca:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1e7cc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e7ce:	d00c      	beq.n	1e7ea <nrf_gpio_pin_port_decode+0x5a>
   1e7d0:	2b01      	cmp	r3, #1
   1e7d2:	d010      	beq.n	1e7f6 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   1e7d4:	4909      	ldr	r1, [pc, #36]	; (1e7fc <nrf_gpio_pin_port_decode+0x6c>)
   1e7d6:	480a      	ldr	r0, [pc, #40]	; (1e800 <nrf_gpio_pin_port_decode+0x70>)
   1e7d8:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1e7dc:	f008 fae4 	bl	26da8 <assert_print>
   1e7e0:	4806      	ldr	r0, [pc, #24]	; (1e7fc <nrf_gpio_pin_port_decode+0x6c>)
   1e7e2:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1e7e6:	f008 fad8 	bl	26d9a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e7ea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1e7ee:	bd10      	pop	{r4, pc}
    switch (port)
   1e7f0:	f04f 33ff 	mov.w	r3, #4294967295
   1e7f4:	e7d6      	b.n	1e7a4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1e7f6:	4803      	ldr	r0, [pc, #12]	; (1e804 <nrf_gpio_pin_port_decode+0x74>)
   1e7f8:	e7f9      	b.n	1e7ee <nrf_gpio_pin_port_decode+0x5e>
   1e7fa:	bf00      	nop
   1e7fc:	0002bf66 	.word	0x0002bf66
   1e800:	0002a576 	.word	0x0002a576
   1e804:	50000300 	.word	0x50000300

0001e808 <z_impl_gpio_pin_configure>:
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1e808:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   1e80c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__unused const struct gpio_driver_config *const cfg =
   1e810:	e9d0 b901 	ldrd	fp, r9, [r0, #4]
	struct gpio_driver_data *data =
   1e814:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
   1e818:	4605      	mov	r5, r0
   1e81a:	460f      	mov	r7, r1
   1e81c:	4614      	mov	r4, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1e81e:	d00a      	beq.n	1e836 <z_impl_gpio_pin_configure+0x2e>
   1e820:	4940      	ldr	r1, [pc, #256]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e822:	4841      	ldr	r0, [pc, #260]	; (1e928 <z_impl_gpio_pin_configure+0x120>)
   1e824:	f44f 722f 	mov.w	r2, #700	; 0x2bc
   1e828:	f008 fabe 	bl	26da8 <assert_print>
   1e82c:	483d      	ldr	r0, [pc, #244]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e82e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
   1e832:	f008 fab2 	bl	26d9a <assert_post_action>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1e836:	f004 0330 	and.w	r3, r4, #48	; 0x30
   1e83a:	2b30      	cmp	r3, #48	; 0x30
   1e83c:	d10a      	bne.n	1e854 <z_impl_gpio_pin_configure+0x4c>
   1e83e:	4939      	ldr	r1, [pc, #228]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e840:	4839      	ldr	r0, [pc, #228]	; (1e928 <z_impl_gpio_pin_configure+0x120>)
   1e842:	f240 22bf 	movw	r2, #703	; 0x2bf
   1e846:	f008 faaf 	bl	26da8 <assert_print>
   1e84a:	4836      	ldr	r0, [pc, #216]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e84c:	f240 21bf 	movw	r1, #703	; 0x2bf
   1e850:	f008 faa3 	bl	26d9a <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1e854:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
   1e858:	2b02      	cmp	r3, #2
   1e85a:	d10a      	bne.n	1e872 <z_impl_gpio_pin_configure+0x6a>
   1e85c:	4931      	ldr	r1, [pc, #196]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e85e:	4832      	ldr	r0, [pc, #200]	; (1e928 <z_impl_gpio_pin_configure+0x120>)
   1e860:	f240 22c3 	movw	r2, #707	; 0x2c3
   1e864:	f008 faa0 	bl	26da8 <assert_print>
   1e868:	482e      	ldr	r0, [pc, #184]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e86a:	f240 21c3 	movw	r1, #707	; 0x2c3
   1e86e:	f008 fa94 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1e872:	f004 0306 	and.w	r3, r4, #6
   1e876:	2b04      	cmp	r3, #4
   1e878:	d10a      	bne.n	1e890 <z_impl_gpio_pin_configure+0x88>
   1e87a:	492a      	ldr	r1, [pc, #168]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e87c:	482a      	ldr	r0, [pc, #168]	; (1e928 <z_impl_gpio_pin_configure+0x120>)
   1e87e:	f240 22c7 	movw	r2, #711	; 0x2c7
   1e882:	f008 fa91 	bl	26da8 <assert_print>
   1e886:	4827      	ldr	r0, [pc, #156]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e888:	f240 21c7 	movw	r1, #711	; 0x2c7
   1e88c:	f008 fa85 	bl	26d9a <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1e890:	f414 2640 	ands.w	r6, r4, #786432	; 0xc0000
   1e894:	d01a      	beq.n	1e8cc <z_impl_gpio_pin_configure+0xc4>
   1e896:	03a3      	lsls	r3, r4, #14
   1e898:	d40a      	bmi.n	1e8b0 <z_impl_gpio_pin_configure+0xa8>
   1e89a:	4922      	ldr	r1, [pc, #136]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e89c:	4822      	ldr	r0, [pc, #136]	; (1e928 <z_impl_gpio_pin_configure+0x120>)
   1e89e:	f240 22ca 	movw	r2, #714	; 0x2ca
   1e8a2:	f008 fa81 	bl	26da8 <assert_print>
   1e8a6:	481f      	ldr	r0, [pc, #124]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e8a8:	f240 21ca 	movw	r1, #714	; 0x2ca
   1e8ac:	f008 fa75 	bl	26d9a <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1e8b0:	f5b6 2f40 	cmp.w	r6, #786432	; 0xc0000
   1e8b4:	d10a      	bne.n	1e8cc <z_impl_gpio_pin_configure+0xc4>
   1e8b6:	491b      	ldr	r1, [pc, #108]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e8b8:	481b      	ldr	r0, [pc, #108]	; (1e928 <z_impl_gpio_pin_configure+0x120>)
   1e8ba:	f240 22ce 	movw	r2, #718	; 0x2ce
   1e8be:	f008 fa73 	bl	26da8 <assert_print>
   1e8c2:	4818      	ldr	r0, [pc, #96]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e8c4:	f240 21ce 	movw	r1, #718	; 0x2ce
   1e8c8:	f008 fa67 	bl	26d9a <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1e8cc:	02e0      	lsls	r0, r4, #11
   1e8ce:	d504      	bpl.n	1e8da <z_impl_gpio_pin_configure+0xd2>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1e8d0:	b11e      	cbz	r6, 1e8da <z_impl_gpio_pin_configure+0xd2>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1e8d2:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1e8d4:	bf48      	it	mi
   1e8d6:	f484 2440 	eormi.w	r4, r4, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e8da:	2301      	movs	r3, #1
   1e8dc:	fa03 f607 	lsl.w	r6, r3, r7
   1e8e0:	f8db 3000 	ldr.w	r3, [fp]
   1e8e4:	421e      	tst	r6, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1e8e6:	f424 1a80 	bic.w	sl, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e8ea:	d10a      	bne.n	1e902 <z_impl_gpio_pin_configure+0xfa>
   1e8ec:	490d      	ldr	r1, [pc, #52]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e8ee:	480e      	ldr	r0, [pc, #56]	; (1e928 <z_impl_gpio_pin_configure+0x120>)
   1e8f0:	f240 22da 	movw	r2, #730	; 0x2da
   1e8f4:	f008 fa58 	bl	26da8 <assert_print>
   1e8f8:	480a      	ldr	r0, [pc, #40]	; (1e924 <z_impl_gpio_pin_configure+0x11c>)
   1e8fa:	f240 21da 	movw	r1, #730	; 0x2da
   1e8fe:	f008 fa4c 	bl	26d9a <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e902:	f8d8 3000 	ldr.w	r3, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1e906:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e908:	bf4c      	ite	mi
   1e90a:	4333      	orrmi	r3, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e90c:	43b3      	bicpl	r3, r6
   1e90e:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
   1e912:	f8d9 3000 	ldr.w	r3, [r9]
   1e916:	4652      	mov	r2, sl
   1e918:	4639      	mov	r1, r7
   1e91a:	4628      	mov	r0, r5
}
   1e91c:	b001      	add	sp, #4
   1e91e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->pin_configure(port, pin, flags);
   1e922:	4718      	bx	r3
   1e924:	0002a545 	.word	0x0002a545
   1e928:	0002a576 	.word	0x0002a576

0001e92c <gpio_pin_set>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e92c:	6843      	ldr	r3, [r0, #4]
{
   1e92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e932:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
   1e934:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e936:	2501      	movs	r5, #1
   1e938:	408d      	lsls	r5, r1
   1e93a:	421d      	tst	r5, r3
{
   1e93c:	4604      	mov	r4, r0
   1e93e:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e940:	d10a      	bne.n	1e958 <gpio_pin_set+0x2c>
   1e942:	4915      	ldr	r1, [pc, #84]	; (1e998 <gpio_pin_set+0x6c>)
   1e944:	4815      	ldr	r0, [pc, #84]	; (1e99c <gpio_pin_set+0x70>)
   1e946:	f240 5225 	movw	r2, #1317	; 0x525
   1e94a:	f008 fa2d 	bl	26da8 <assert_print>
   1e94e:	4812      	ldr	r0, [pc, #72]	; (1e998 <gpio_pin_set+0x6c>)
   1e950:	f240 5125 	movw	r1, #1317	; 0x525
   1e954:	f008 fa21 	bl	26d9a <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1e958:	683b      	ldr	r3, [r7, #0]
   1e95a:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e95c:	6863      	ldr	r3, [r4, #4]
   1e95e:	681b      	ldr	r3, [r3, #0]
		value = (value != 0) ? 0 : 1;
   1e960:	bf1c      	itt	ne
   1e962:	fab6 f686 	clzne	r6, r6
   1e966:	0976      	lsrne	r6, r6, #5
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e968:	421d      	tst	r5, r3
   1e96a:	d10a      	bne.n	1e982 <gpio_pin_set+0x56>
   1e96c:	490a      	ldr	r1, [pc, #40]	; (1e998 <gpio_pin_set+0x6c>)
   1e96e:	480b      	ldr	r0, [pc, #44]	; (1e99c <gpio_pin_set+0x70>)
   1e970:	f240 42fc 	movw	r2, #1276	; 0x4fc
   1e974:	f008 fa18 	bl	26da8 <assert_print>
   1e978:	4807      	ldr	r0, [pc, #28]	; (1e998 <gpio_pin_set+0x6c>)
   1e97a:	f240 41fc 	movw	r1, #1276	; 0x4fc
   1e97e:	f008 fa0c 	bl	26d9a <assert_post_action>
	if (value != 0)	{
   1e982:	b136      	cbz	r6, 1e992 <gpio_pin_set+0x66>
	return api->port_set_bits_raw(port, pins);
   1e984:	68a3      	ldr	r3, [r4, #8]
   1e986:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1e988:	4629      	mov	r1, r5
   1e98a:	4620      	mov	r0, r4
}
   1e98c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1e990:	4718      	bx	r3
   1e992:	68a3      	ldr	r3, [r4, #8]
   1e994:	691b      	ldr	r3, [r3, #16]
   1e996:	e7f7      	b.n	1e988 <gpio_pin_set+0x5c>
   1e998:	0002a545 	.word	0x0002a545
   1e99c:	0002a576 	.word	0x0002a576

0001e9a0 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1e9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e9a4:	4e11      	ldr	r6, [pc, #68]	; (1e9ec <dk_set_leds_state.part.0+0x4c>)
   1e9a6:	4607      	mov	r7, r0
   1e9a8:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e9aa:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1e9ac:	fa27 f205 	lsr.w	r2, r7, r5
   1e9b0:	f012 0201 	ands.w	r2, r2, #1
   1e9b4:	d110      	bne.n	1e9d8 <dk_set_leds_state.part.0+0x38>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1e9b6:	fa28 f305 	lsr.w	r3, r8, r5
   1e9ba:	07db      	lsls	r3, r3, #31
   1e9bc:	d50e      	bpl.n	1e9dc <dk_set_leds_state.part.0+0x3c>
	return gpio_pin_set(spec->port, spec->pin, value);
   1e9be:	7931      	ldrb	r1, [r6, #4]
   1e9c0:	6830      	ldr	r0, [r6, #0]
   1e9c2:	f7ff ffb3 	bl	1e92c <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1e9c6:	4604      	mov	r4, r0
   1e9c8:	b140      	cbz	r0, 1e9dc <dk_set_leds_state.part.0+0x3c>
			LOG_ERR("Cannot write LED gpio");
   1e9ca:	4809      	ldr	r0, [pc, #36]	; (1e9f0 <dk_set_leds_state.part.0+0x50>)
   1e9cc:	2145      	movs	r1, #69	; 0x45
   1e9ce:	f008 f9f9 	bl	26dc4 <z_log_minimal_printk>
			return err;
		}
	}

	return 0;
}
   1e9d2:	4620      	mov	r0, r4
   1e9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1e9d8:	2201      	movs	r2, #1
   1e9da:	e7f0      	b.n	1e9be <dk_set_leds_state.part.0+0x1e>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e9dc:	3501      	adds	r5, #1
   1e9de:	2d04      	cmp	r5, #4
   1e9e0:	f106 0608 	add.w	r6, r6, #8
   1e9e4:	d1e2      	bne.n	1e9ac <dk_set_leds_state.part.0+0xc>
	return 0;
   1e9e6:	2400      	movs	r4, #0
   1e9e8:	e7f3      	b.n	1e9d2 <dk_set_leds_state.part.0+0x32>
   1e9ea:	bf00      	nop
   1e9ec:	0002a0e4 	.word	0x0002a0e4
   1e9f0:	0002c0c2 	.word	0x0002c0c2

0001e9f4 <dk_leds_init>:
{
   1e9f4:	b570      	push	{r4, r5, r6, lr}
   1e9f6:	4c0d      	ldr	r4, [pc, #52]	; (1ea2c <dk_leds_init+0x38>)
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e9f8:	2600      	movs	r6, #0
				  spec->dt_flags | extra_flags);
   1e9fa:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   1e9fc:	6820      	ldr	r0, [r4, #0]
   1e9fe:	7921      	ldrb	r1, [r4, #4]
   1ea00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1ea04:	f7ff ff00 	bl	1e808 <z_impl_gpio_pin_configure>
		if (err) {
   1ea08:	4605      	mov	r5, r0
   1ea0a:	b948      	cbnz	r0, 1ea20 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1ea0c:	3601      	adds	r6, #1
   1ea0e:	2e04      	cmp	r6, #4
   1ea10:	f104 0408 	add.w	r4, r4, #8
   1ea14:	d1f1      	bne.n	1e9fa <dk_leds_init+0x6>
}
   1ea16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ea1a:	210f      	movs	r1, #15
   1ea1c:	f7ff bfc0 	b.w	1e9a0 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1ea20:	4803      	ldr	r0, [pc, #12]	; (1ea30 <dk_leds_init+0x3c>)
   1ea22:	2145      	movs	r1, #69	; 0x45
   1ea24:	f008 f9ce 	bl	26dc4 <z_log_minimal_printk>
}
   1ea28:	4628      	mov	r0, r5
   1ea2a:	bd70      	pop	{r4, r5, r6, pc}
   1ea2c:	0002a0e4 	.word	0x0002a0e4
   1ea30:	0002c0dd 	.word	0x0002c0dd

0001ea34 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1ea34:	2803      	cmp	r0, #3
{
   1ea36:	b510      	push	{r4, lr}
   1ea38:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1ea3a:	d907      	bls.n	1ea4c <dk_set_led+0x18>
		LOG_ERR("LED index out of the range");
   1ea3c:	480b      	ldr	r0, [pc, #44]	; (1ea6c <dk_set_led+0x38>)
   1ea3e:	2145      	movs	r1, #69	; 0x45
   1ea40:	f008 f9c0 	bl	26dc4 <z_log_minimal_printk>
   1ea44:	f06f 0415 	mvn.w	r4, #21
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1ea48:	4620      	mov	r0, r4
   1ea4a:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1ea4c:	4b08      	ldr	r3, [pc, #32]	; (1ea70 <dk_set_led+0x3c>)
   1ea4e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1ea52:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1ea56:	7909      	ldrb	r1, [r1, #4]
   1ea58:	f7ff ff68 	bl	1e92c <gpio_pin_set>
	if (err) {
   1ea5c:	4604      	mov	r4, r0
   1ea5e:	2800      	cmp	r0, #0
   1ea60:	d0f2      	beq.n	1ea48 <dk_set_led+0x14>
		LOG_ERR("Cannot write LED gpio");
   1ea62:	4804      	ldr	r0, [pc, #16]	; (1ea74 <dk_set_led+0x40>)
   1ea64:	2145      	movs	r1, #69	; 0x45
   1ea66:	f008 f9ad 	bl	26dc4 <z_log_minimal_printk>
   1ea6a:	e7ed      	b.n	1ea48 <dk_set_led+0x14>
   1ea6c:	0002c0fc 	.word	0x0002c0fc
   1ea70:	0002a0e4 	.word	0x0002a0e4
   1ea74:	0002c0c2 	.word	0x0002c0c2

0001ea78 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1ea78:	4602      	mov	r2, r0
   1ea7a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1ea7c:	4801      	ldr	r0, [pc, #4]	; (1ea84 <multithreading_lock_acquire+0xc>)
   1ea7e:	f002 b9d5 	b.w	20e2c <z_impl_k_mutex_lock>
   1ea82:	bf00      	nop
   1ea84:	20000a40 	.word	0x20000a40

0001ea88 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1ea88:	4801      	ldr	r0, [pc, #4]	; (1ea90 <multithreading_lock_release+0x8>)
   1ea8a:	f002 baa1 	b.w	20fd0 <z_impl_k_mutex_unlock>
   1ea8e:	bf00      	nop
   1ea90:	20000a40 	.word	0x20000a40

0001ea94 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1ea94:	4803      	ldr	r0, [pc, #12]	; (1eaa4 <k_sys_fatal_error_handler+0x10>)
{
   1ea96:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   1ea98:	2145      	movs	r1, #69	; 0x45
   1ea9a:	f008 f993 	bl	26dc4 <z_log_minimal_printk>
		sys_arch_reboot(0);
   1ea9e:	2000      	movs	r0, #0
   1eaa0:	f7f9 f860 	bl	17b64 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1eaa4:	0002c130 	.word	0x0002c130

0001eaa8 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1eaa8:	b508      	push	{r3, lr}
   1eaaa:	4602      	mov	r2, r0
   1eaac:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1eaae:	4805      	ldr	r0, [pc, #20]	; (1eac4 <sdc_assertion_handler+0x1c>)
   1eab0:	2145      	movs	r1, #69	; 0x45
   1eab2:	f008 f987 	bl	26dc4 <z_log_minimal_printk>
	k_oops();
   1eab6:	4040      	eors	r0, r0
   1eab8:	f380 8811 	msr	BASEPRI, r0
   1eabc:	f04f 0003 	mov.w	r0, #3
   1eac0:	df02      	svc	2
}
   1eac2:	bd08      	pop	{r3, pc}
   1eac4:	0002c152 	.word	0x0002c152

0001eac8 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1eac8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1eaca:	4804      	ldr	r0, [pc, #16]	; (1eadc <hci_driver_init+0x14>)
   1eacc:	f7fa f89a 	bl	18c04 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1ead0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1ead4:	4802      	ldr	r0, [pc, #8]	; (1eae0 <hci_driver_init+0x18>)
   1ead6:	f7e5 bda7 	b.w	4628 <sdc_init>
   1eada:	bf00      	nop
   1eadc:	0002a104 	.word	0x0002a104
   1eae0:	0001eaa9 	.word	0x0001eaa9

0001eae4 <rand_prio_low_vector_get_blocking>:
{
   1eae4:	b570      	push	{r4, r5, r6, lr}
   1eae6:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1eae8:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1eaea:	4b10      	ldr	r3, [pc, #64]	; (1eb2c <rand_prio_low_vector_get_blocking+0x48>)
   1eaec:	689e      	ldr	r6, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1eaee:	6833      	ldr	r3, [r6, #0]
   1eaf0:	b943      	cbnz	r3, 1eb04 <rand_prio_low_vector_get_blocking+0x20>
   1eaf2:	490f      	ldr	r1, [pc, #60]	; (1eb30 <rand_prio_low_vector_get_blocking+0x4c>)
   1eaf4:	480f      	ldr	r0, [pc, #60]	; (1eb34 <rand_prio_low_vector_get_blocking+0x50>)
   1eaf6:	224b      	movs	r2, #75	; 0x4b
   1eaf8:	f008 f956 	bl	26da8 <assert_print>
   1eafc:	480c      	ldr	r0, [pc, #48]	; (1eb30 <rand_prio_low_vector_get_blocking+0x4c>)
   1eafe:	214b      	movs	r1, #75	; 0x4b
   1eb00:	f008 f94b 	bl	26d9a <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1eb04:	6833      	ldr	r3, [r6, #0]
   1eb06:	4809      	ldr	r0, [pc, #36]	; (1eb2c <rand_prio_low_vector_get_blocking+0x48>)
   1eb08:	462a      	mov	r2, r5
   1eb0a:	4621      	mov	r1, r4
   1eb0c:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1eb0e:	b160      	cbz	r0, 1eb2a <rand_prio_low_vector_get_blocking+0x46>
   1eb10:	4909      	ldr	r1, [pc, #36]	; (1eb38 <rand_prio_low_vector_get_blocking+0x54>)
   1eb12:	4808      	ldr	r0, [pc, #32]	; (1eb34 <rand_prio_low_vector_get_blocking+0x50>)
   1eb14:	f240 12d9 	movw	r2, #473	; 0x1d9
   1eb18:	f008 f946 	bl	26da8 <assert_print>
}
   1eb1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1eb20:	4805      	ldr	r0, [pc, #20]	; (1eb38 <rand_prio_low_vector_get_blocking+0x54>)
   1eb22:	f240 11d9 	movw	r1, #473	; 0x1d9
   1eb26:	f008 b938 	b.w	26d9a <assert_post_action>
}
   1eb2a:	bd70      	pop	{r4, r5, r6, pc}
   1eb2c:	00029804 	.word	0x00029804
   1eb30:	0002c17c 	.word	0x0002c17c
   1eb34:	0002a576 	.word	0x0002a576
   1eb38:	0002c1b0 	.word	0x0002c1b0

0001eb3c <hci_driver_open>:
{
   1eb3c:	b530      	push	{r4, r5, lr}
   1eb3e:	b089      	sub	sp, #36	; 0x24
		hci_ecdh_init();
   1eb40:	f000 fe44 	bl	1f7cc <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1eb44:	a803      	add	r0, sp, #12
   1eb46:	f7e5 fccf 	bl	44e8 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1eb4a:	4a50      	ldr	r2, [pc, #320]	; (1ec8c <hci_driver_open+0x150>)
   1eb4c:	4850      	ldr	r0, [pc, #320]	; (1ec90 <hci_driver_open+0x154>)
   1eb4e:	2149      	movs	r1, #73	; 0x49
   1eb50:	f008 f938 	bl	26dc4 <z_log_minimal_printk>
   1eb54:	2214      	movs	r2, #20
   1eb56:	a903      	add	r1, sp, #12
   1eb58:	2003      	movs	r0, #3
   1eb5a:	f7f7 ff41 	bl	169e0 <z_log_minimal_hexdump_print>
			err = sdc_support_ext_adv();
   1eb5e:	f7e5 fdf1 	bl	4744 <sdc_support_ext_adv>
			if (err) {
   1eb62:	b118      	cbz	r0, 1eb6c <hci_driver_open+0x30>
				return -ENOTSUP;
   1eb64:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1eb68:	b009      	add	sp, #36	; 0x24
   1eb6a:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_peripheral();
   1eb6c:	f7e5 fe0e 	bl	478c <sdc_support_peripheral>
		if (err) {
   1eb70:	2800      	cmp	r0, #0
   1eb72:	d1f7      	bne.n	1eb64 <hci_driver_open+0x28>
			err = sdc_support_dle_peripheral();
   1eb74:	f7e5 fdd6 	bl	4724 <sdc_support_dle_peripheral>
			if (err) {
   1eb78:	2800      	cmp	r0, #0
   1eb7a:	d1f3      	bne.n	1eb64 <hci_driver_open+0x28>
		err = sdc_support_le_2m_phy();
   1eb7c:	f7e5 fdf2 	bl	4764 <sdc_support_le_2m_phy>
		if (err) {
   1eb80:	2800      	cmp	r0, #0
   1eb82:	d1ef      	bne.n	1eb64 <hci_driver_open+0x28>
			err = sdc_support_phy_update_peripheral();
   1eb84:	f7e5 fe12 	bl	47ac <sdc_support_phy_update_peripheral>
			if (err) {
   1eb88:	4605      	mov	r5, r0
   1eb8a:	2800      	cmp	r0, #0
   1eb8c:	d1ea      	bne.n	1eb64 <hci_driver_open+0x28>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1eb8e:	466c      	mov	r4, sp
   1eb90:	4622      	mov	r2, r4
   1eb92:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1eb94:	f88d 0000 	strb.w	r0, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1eb98:	f7e5 fcb4 	bl	4504 <sdc_cfg_set>
	if (required_memory < 0) {
   1eb9c:	2800      	cmp	r0, #0
   1eb9e:	dbe3      	blt.n	1eb68 <hci_driver_open+0x2c>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1eba0:	2301      	movs	r3, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1eba2:	4622      	mov	r2, r4
   1eba4:	2102      	movs	r1, #2
   1eba6:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1eba8:	f88d 3000 	strb.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebac:	f7e5 fcaa 	bl	4504 <sdc_cfg_set>
	if (required_memory < 0) {
   1ebb0:	2800      	cmp	r0, #0
   1ebb2:	dbd9      	blt.n	1eb68 <hci_driver_open+0x2c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1ebb4:	4b37      	ldr	r3, [pc, #220]	; (1ec94 <hci_driver_open+0x158>)
   1ebb6:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebb8:	4622      	mov	r2, r4
   1ebba:	2103      	movs	r1, #3
   1ebbc:	4628      	mov	r0, r5
   1ebbe:	f7e5 fca1 	bl	4504 <sdc_cfg_set>
	if (required_memory < 0) {
   1ebc2:	2800      	cmp	r0, #0
   1ebc4:	dbd0      	blt.n	1eb68 <hci_driver_open+0x2c>
	cfg.event_length.event_length_us =
   1ebc6:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebca:	4622      	mov	r2, r4
   1ebcc:	2104      	movs	r1, #4
   1ebce:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1ebd0:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebd2:	f7e5 fc97 	bl	4504 <sdc_cfg_set>
	if (required_memory < 0) {
   1ebd6:	2800      	cmp	r0, #0
   1ebd8:	dbc6      	blt.n	1eb68 <hci_driver_open+0x2c>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1ebda:	2340      	movs	r3, #64	; 0x40
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebdc:	4622      	mov	r2, r4
   1ebde:	2105      	movs	r1, #5
   1ebe0:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1ebe2:	f88d 3000 	strb.w	r3, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebe6:	f7e5 fc8d 	bl	4504 <sdc_cfg_set>
	if (required_memory < 0) {
   1ebea:	2800      	cmp	r0, #0
   1ebec:	dbbc      	blt.n	1eb68 <hci_driver_open+0x2c>
		cfg.adv_buffer_cfg.max_adv_data = CONFIG_BT_CTLR_ADV_DATA_LEN_MAX;
   1ebee:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebf0:	4622      	mov	r2, r4
   1ebf2:	2107      	movs	r1, #7
   1ebf4:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = CONFIG_BT_CTLR_ADV_DATA_LEN_MAX;
   1ebf6:	f8ad 3000 	strh.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebfa:	f7e5 fc83 	bl	4504 <sdc_cfg_set>
		if (required_memory < 0) {
   1ebfe:	2800      	cmp	r0, #0
   1ec00:	dbb2      	blt.n	1eb68 <hci_driver_open+0x2c>
	if (required_memory > sizeof(sdc_mempool)) {
   1ec02:	f648 327a 	movw	r2, #35706	; 0x8b7a
   1ec06:	4290      	cmp	r0, r2
   1ec08:	dd0d      	ble.n	1ec26 <hci_driver_open+0xea>
		BT_ERR("Allocated memory too low: %u < %u",
   1ec0a:	4603      	mov	r3, r0
   1ec0c:	2145      	movs	r1, #69	; 0x45
   1ec0e:	4822      	ldr	r0, [pc, #136]	; (1ec98 <hci_driver_open+0x15c>)
   1ec10:	f008 f8d8 	bl	26dc4 <z_log_minimal_printk>
		k_panic();
   1ec14:	4040      	eors	r0, r0
   1ec16:	f380 8811 	msr	BASEPRI, r0
   1ec1a:	f04f 0004 	mov.w	r0, #4
   1ec1e:	df02      	svc	2
		return -ENOMEM;
   1ec20:	f06f 000b 	mvn.w	r0, #11
   1ec24:	e7a0      	b.n	1eb68 <hci_driver_open+0x2c>
   1ec26:	481d      	ldr	r0, [pc, #116]	; (1ec9c <hci_driver_open+0x160>)
   1ec28:	f00a fb65 	bl	292f6 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1ec2c:	b930      	cbnz	r0, 1ec3c <hci_driver_open+0x100>
		BT_ERR("Entropy source device not ready");
   1ec2e:	481c      	ldr	r0, [pc, #112]	; (1eca0 <hci_driver_open+0x164>)
   1ec30:	2145      	movs	r1, #69	; 0x45
   1ec32:	f008 f8c7 	bl	26dc4 <z_log_minimal_printk>
		return -ENODEV;
   1ec36:	f06f 0012 	mvn.w	r0, #18
   1ec3a:	e795      	b.n	1eb68 <hci_driver_open+0x2c>
	sdc_rand_source_t rand_functions = {
   1ec3c:	4b19      	ldr	r3, [pc, #100]	; (1eca4 <hci_driver_open+0x168>)
   1ec3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1ec42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1ec46:	4620      	mov	r0, r4
   1ec48:	f7e5 fe02 	bl	4850 <sdc_rand_source_register>
	if (err) {
   1ec4c:	4602      	mov	r2, r0
   1ec4e:	b130      	cbz	r0, 1ec5e <hci_driver_open+0x122>
		BT_ERR("Failed to register rand source (%d)", err);
   1ec50:	4815      	ldr	r0, [pc, #84]	; (1eca8 <hci_driver_open+0x16c>)
   1ec52:	2145      	movs	r1, #69	; 0x45
   1ec54:	f008 f8b6 	bl	26dc4 <z_log_minimal_printk>
		return -EINVAL;
   1ec58:	f06f 0015 	mvn.w	r0, #21
   1ec5c:	e784      	b.n	1eb68 <hci_driver_open+0x2c>
	k_work_init(&receive_work, receive_work_handler);
   1ec5e:	4913      	ldr	r1, [pc, #76]	; (1ecac <hci_driver_open+0x170>)
   1ec60:	4813      	ldr	r0, [pc, #76]	; (1ecb0 <hci_driver_open+0x174>)
   1ec62:	f002 fdcf 	bl	21804 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1ec66:	f04f 30ff 	mov.w	r0, #4294967295
   1ec6a:	f04f 31ff 	mov.w	r1, #4294967295
   1ec6e:	f7ff ff03 	bl	1ea78 <multithreading_lock_acquire>
	if (!err) {
   1ec72:	4604      	mov	r4, r0
   1ec74:	b930      	cbnz	r0, 1ec84 <hci_driver_open+0x148>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1ec76:	490f      	ldr	r1, [pc, #60]	; (1ecb4 <hci_driver_open+0x178>)
   1ec78:	480f      	ldr	r0, [pc, #60]	; (1ecb8 <hci_driver_open+0x17c>)
   1ec7a:	f7e5 fcad 	bl	45d8 <sdc_enable>
   1ec7e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ec80:	f7ff ff02 	bl	1ea88 <multithreading_lock_release>
	if (err < 0) {
   1ec84:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1ec88:	e76e      	b.n	1eb68 <hci_driver_open+0x2c>
   1ec8a:	bf00      	nop
   1ec8c:	0002c1e9 	.word	0x0002c1e9
   1ec90:	0002c210 	.word	0x0002c210
   1ec94:	02031b1b 	.word	0x02031b1b
   1ec98:	0002c218 	.word	0x0002c218
   1ec9c:	00029804 	.word	0x00029804
   1eca0:	0002c23f 	.word	0x0002c23f
   1eca4:	00029b6c 	.word	0x00029b6c
   1eca8:	0002c264 	.word	0x0002c264
   1ecac:	0002914f 	.word	0x0002914f
   1ecb0:	20003e6c 	.word	0x20003e6c
   1ecb4:	20004b67 	.word	0x20004b67
   1ecb8:	0001edd9 	.word	0x0001edd9

0001ecbc <rand_prio_low_vector_get>:
{
   1ecbc:	b538      	push	{r3, r4, r5, lr}
   1ecbe:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1ecc0:	480d      	ldr	r0, [pc, #52]	; (1ecf8 <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1ecc2:	6883      	ldr	r3, [r0, #8]
   1ecc4:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1ecc6:	460a      	mov	r2, r1
   1ecc8:	b19d      	cbz	r5, 1ecf2 <rand_prio_low_vector_get+0x36>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1ecca:	4621      	mov	r1, r4
   1eccc:	2300      	movs	r3, #0
   1ecce:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1ecd0:	1e04      	subs	r4, r0, #0
   1ecd2:	da0a      	bge.n	1ecea <rand_prio_low_vector_get+0x2e>
   1ecd4:	4909      	ldr	r1, [pc, #36]	; (1ecfc <rand_prio_low_vector_get+0x40>)
   1ecd6:	480a      	ldr	r0, [pc, #40]	; (1ed00 <rand_prio_low_vector_get+0x44>)
   1ecd8:	f240 12c9 	movw	r2, #457	; 0x1c9
   1ecdc:	f008 f864 	bl	26da8 <assert_print>
   1ece0:	4806      	ldr	r0, [pc, #24]	; (1ecfc <rand_prio_low_vector_get+0x40>)
   1ece2:	f240 11c9 	movw	r1, #457	; 0x1c9
   1ece6:	f008 f858 	bl	26d9a <assert_post_action>
	return ret >= 0 ? ret : 0;
   1ecea:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1ecee:	b2c0      	uxtb	r0, r0
   1ecf0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1ecf2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1ecf6:	e7ed      	b.n	1ecd4 <rand_prio_low_vector_get+0x18>
   1ecf8:	00029804 	.word	0x00029804
   1ecfc:	0002c1b0 	.word	0x0002c1b0
   1ed00:	0002a576 	.word	0x0002a576

0001ed04 <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   1ed04:	b570      	push	{r4, r5, r6, lr}
	switch (hdr->evt) {
   1ed06:	4d1e      	ldr	r5, [pc, #120]	; (1ed80 <event_packet_process.constprop.0+0x7c>)
   1ed08:	7828      	ldrb	r0, [r5, #0]
   1ed0a:	283e      	cmp	r0, #62	; 0x3e
   1ed0c:	d012      	beq.n	1ed34 <event_packet_process.constprop.0+0x30>
   1ed0e:	28ff      	cmp	r0, #255	; 0xff
   1ed10:	d020      	beq.n	1ed54 <event_packet_process.constprop.0+0x50>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ed12:	f04f 32ff 	mov.w	r2, #4294967295
   1ed16:	f04f 33ff 	mov.w	r3, #4294967295
   1ed1a:	2400      	movs	r4, #0
   1ed1c:	4621      	mov	r1, r4
   1ed1e:	f7f9 f83b 	bl	17d98 <bt_buf_get_evt>
	if (!evt_buf) {
   1ed22:	4606      	mov	r6, r0
   1ed24:	b9f8      	cbnz	r0, 1ed66 <event_packet_process.constprop.0+0x62>
		if (discardable) {
   1ed26:	bb4c      	cbnz	r4, 1ed7c <event_packet_process.constprop.0+0x78>
}
   1ed28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("No event buffer available");
   1ed2c:	4815      	ldr	r0, [pc, #84]	; (1ed84 <event_packet_process.constprop.0+0x80>)
   1ed2e:	2145      	movs	r1, #69	; 0x45
   1ed30:	f008 b848 	b.w	26dc4 <z_log_minimal_printk>
		switch (me->subevent) {
   1ed34:	78ab      	ldrb	r3, [r5, #2]
   1ed36:	2b02      	cmp	r3, #2
   1ed38:	d008      	beq.n	1ed4c <event_packet_process.constprop.0+0x48>
   1ed3a:	2b0d      	cmp	r3, #13
   1ed3c:	d1e9      	bne.n	1ed12 <event_packet_process.constprop.0+0xe>
			return (ext_adv->num_reports == 1) &&
   1ed3e:	78ee      	ldrb	r6, [r5, #3]
   1ed40:	2e01      	cmp	r6, #1
   1ed42:	d1e6      	bne.n	1ed12 <event_packet_process.constprop.0+0xe>
				   ((ext_adv->adv_info->evt_type &
   1ed44:	88a9      	ldrh	r1, [r5, #4]
			return (ext_adv->num_reports == 1) &&
   1ed46:	f011 0410 	ands.w	r4, r1, #16
   1ed4a:	d007      	beq.n	1ed5c <event_packet_process.constprop.0+0x58>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ed4c:	2200      	movs	r2, #0
   1ed4e:	2300      	movs	r3, #0
		switch (subevent) {
   1ed50:	2401      	movs	r4, #1
   1ed52:	e7e3      	b.n	1ed1c <event_packet_process.constprop.0+0x18>
   1ed54:	78ab      	ldrb	r3, [r5, #2]
   1ed56:	2b80      	cmp	r3, #128	; 0x80
   1ed58:	d1db      	bne.n	1ed12 <event_packet_process.constprop.0+0xe>
   1ed5a:	e7f7      	b.n	1ed4c <event_packet_process.constprop.0+0x48>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ed5c:	f04f 32ff 	mov.w	r2, #4294967295
   1ed60:	f04f 33ff 	mov.w	r3, #4294967295
   1ed64:	e7da      	b.n	1ed1c <event_packet_process.constprop.0+0x18>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1ed66:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ed68:	4905      	ldr	r1, [pc, #20]	; (1ed80 <event_packet_process.constprop.0+0x7c>)
   1ed6a:	3202      	adds	r2, #2
   1ed6c:	3008      	adds	r0, #8
   1ed6e:	f009 ff64 	bl	28c3a <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1ed72:	4630      	mov	r0, r6
}
   1ed74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_recv(evt_buf);
   1ed78:	f7f9 bf1e 	b.w	18bb8 <bt_recv>
}
   1ed7c:	bd70      	pop	{r4, r5, r6, pc}
   1ed7e:	bf00      	nop
   1ed80:	20004b21 	.word	0x20004b21
   1ed84:	0002c28d 	.word	0x0002c28d

0001ed88 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1ed88:	4901      	ldr	r1, [pc, #4]	; (1ed90 <receive_signal_raise+0x8>)
   1ed8a:	4802      	ldr	r0, [pc, #8]	; (1ed94 <receive_signal_raise+0xc>)
   1ed8c:	f00a bb97 	b.w	294be <k_work_submit_to_queue>
   1ed90:	20003e6c 	.word	0x20003e6c
   1ed94:	200032a0 	.word	0x200032a0

0001ed98 <data_packet_process.constprop.0>:
static void data_packet_process(uint8_t *hci_buf)
   1ed98:	b510      	push	{r4, lr}
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1ed9a:	f04f 32ff 	mov.w	r2, #4294967295
   1ed9e:	f04f 33ff 	mov.w	r3, #4294967295
   1eda2:	2003      	movs	r0, #3
   1eda4:	f7f8 ffb6 	bl	17d14 <bt_buf_get_rx>
	if (!data_buf) {
   1eda8:	4604      	mov	r4, r0
   1edaa:	b928      	cbnz	r0, 1edb8 <data_packet_process.constprop.0+0x20>
}
   1edac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("No data buffer available");
   1edb0:	4807      	ldr	r0, [pc, #28]	; (1edd0 <data_packet_process.constprop.0+0x38>)
   1edb2:	2145      	movs	r1, #69	; 0x45
   1edb4:	f008 b806 	b.w	26dc4 <z_log_minimal_printk>
	len = sys_le16_to_cpu(hdr->len);
   1edb8:	4906      	ldr	r1, [pc, #24]	; (1edd4 <data_packet_process.constprop.0+0x3c>)
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1edba:	884a      	ldrh	r2, [r1, #2]
   1edbc:	3008      	adds	r0, #8
   1edbe:	3204      	adds	r2, #4
   1edc0:	f009 ff3b 	bl	28c3a <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1edc4:	4620      	mov	r0, r4
}
   1edc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_recv(data_buf);
   1edca:	f7f9 bef5 	b.w	18bb8 <bt_recv>
   1edce:	bf00      	nop
   1edd0:	0002c2ac 	.word	0x0002c2ac
   1edd4:	20004b21 	.word	0x20004b21

0001edd8 <hci_driver_receive_process>:
{
   1edd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1edda:	f04f 30ff 	mov.w	r0, #4294967295
   1edde:	f04f 31ff 	mov.w	r1, #4294967295
   1ede2:	f7ff fe49 	bl	1ea78 <multithreading_lock_acquire>
	if (!errcode) {
   1ede6:	b1c8      	cbz	r0, 1ee1c <hci_driver_receive_process+0x44>
		return false;
   1ede8:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1edea:	f04f 30ff 	mov.w	r0, #4294967295
   1edee:	f04f 31ff 	mov.w	r1, #4294967295
   1edf2:	f7ff fe41 	bl	1ea78 <multithreading_lock_acquire>
	if (!errcode) {
   1edf6:	b1e8      	cbz	r0, 1ee34 <hci_driver_receive_process+0x5c>
		return false;
   1edf8:	2500      	movs	r5, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1edfa:	f04f 30ff 	mov.w	r0, #4294967295
   1edfe:	f04f 31ff 	mov.w	r1, #4294967295
   1ee02:	f7ff fe39 	bl	1ea78 <multithreading_lock_acquire>
	if (!errcode) {
   1ee06:	b308      	cbz	r0, 1ee4c <hci_driver_receive_process+0x74>
		return false;
   1ee08:	2400      	movs	r4, #0
	if (received_evt || received_data || received_msg) {
   1ee0a:	b916      	cbnz	r6, 1ee12 <hci_driver_receive_process+0x3a>
   1ee0c:	b90d      	cbnz	r5, 1ee12 <hci_driver_receive_process+0x3a>
   1ee0e:	2c00      	cmp	r4, #0
   1ee10:	d03f      	beq.n	1ee92 <hci_driver_receive_process+0xba>
}
   1ee12:	b002      	add	sp, #8
   1ee14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1ee18:	f7ff bfb6 	b.w	1ed88 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1ee1c:	481e      	ldr	r0, [pc, #120]	; (1ee98 <hci_driver_receive_process+0xc0>)
   1ee1e:	f000 fb7d 	bl	1f51c <hci_internal_evt_get>
   1ee22:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ee24:	f7ff fe30 	bl	1ea88 <multithreading_lock_release>
	if (errcode) {
   1ee28:	2c00      	cmp	r4, #0
   1ee2a:	d1dd      	bne.n	1ede8 <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   1ee2c:	f7ff ff6a 	bl	1ed04 <event_packet_process.constprop.0>
	return true;
   1ee30:	2601      	movs	r6, #1
   1ee32:	e7da      	b.n	1edea <hci_driver_receive_process+0x12>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1ee34:	4818      	ldr	r0, [pc, #96]	; (1ee98 <hci_driver_receive_process+0xc0>)
   1ee36:	f7f2 fce7 	bl	11808 <sdc_hci_data_get>
   1ee3a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ee3c:	f7ff fe24 	bl	1ea88 <multithreading_lock_release>
	if (errcode) {
   1ee40:	2c00      	cmp	r4, #0
   1ee42:	d1d9      	bne.n	1edf8 <hci_driver_receive_process+0x20>
	data_packet_process(p_hci_buffer);
   1ee44:	f7ff ffa8 	bl	1ed98 <data_packet_process.constprop.0>
	return true;
   1ee48:	2501      	movs	r5, #1
   1ee4a:	e7d6      	b.n	1edfa <hci_driver_receive_process+0x22>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1ee4c:	4812      	ldr	r0, [pc, #72]	; (1ee98 <hci_driver_receive_process+0xc0>)
   1ee4e:	f10d 0107 	add.w	r1, sp, #7
   1ee52:	f000 fb75 	bl	1f540 <hci_internal_msg_get>
   1ee56:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ee58:	f7ff fe16 	bl	1ea88 <multithreading_lock_release>
	if (errcode) {
   1ee5c:	2c00      	cmp	r4, #0
   1ee5e:	d1d3      	bne.n	1ee08 <hci_driver_receive_process+0x30>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1ee60:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ee64:	2b04      	cmp	r3, #4
   1ee66:	d103      	bne.n	1ee70 <hci_driver_receive_process+0x98>
		event_packet_process(p_hci_buffer);
   1ee68:	f7ff ff4c 	bl	1ed04 <event_packet_process.constprop.0>
	return true;
   1ee6c:	2401      	movs	r4, #1
   1ee6e:	e7cc      	b.n	1ee0a <hci_driver_receive_process+0x32>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1ee70:	2b02      	cmp	r3, #2
   1ee72:	d102      	bne.n	1ee7a <hci_driver_receive_process+0xa2>
		data_packet_process(p_hci_buffer);
   1ee74:	f7ff ff90 	bl	1ed98 <data_packet_process.constprop.0>
   1ee78:	e7f8      	b.n	1ee6c <hci_driver_receive_process+0x94>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   1ee7a:	4908      	ldr	r1, [pc, #32]	; (1ee9c <hci_driver_receive_process+0xc4>)
   1ee7c:	4808      	ldr	r0, [pc, #32]	; (1eea0 <hci_driver_receive_process+0xc8>)
   1ee7e:	f44f 72cd 	mov.w	r2, #410	; 0x19a
   1ee82:	f007 ff91 	bl	26da8 <assert_print>
   1ee86:	4805      	ldr	r0, [pc, #20]	; (1ee9c <hci_driver_receive_process+0xc4>)
   1ee88:	f44f 71cd 	mov.w	r1, #410	; 0x19a
   1ee8c:	f007 ff85 	bl	26d9a <assert_post_action>
		return false;
   1ee90:	e7bb      	b.n	1ee0a <hci_driver_receive_process+0x32>
}
   1ee92:	b002      	add	sp, #8
   1ee94:	bd70      	pop	{r4, r5, r6, pc}
   1ee96:	bf00      	nop
   1ee98:	20004b21 	.word	0x20004b21
   1ee9c:	0002c1b0 	.word	0x0002c1b0
   1eea0:	0002a576 	.word	0x0002a576

0001eea4 <rand_prio_high_vector_get>:
{
   1eea4:	b538      	push	{r3, r4, r5, lr}
   1eea6:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1eea8:	480d      	ldr	r0, [pc, #52]	; (1eee0 <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1eeaa:	6883      	ldr	r3, [r0, #8]
   1eeac:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1eeae:	460a      	mov	r2, r1
   1eeb0:	b19d      	cbz	r5, 1eeda <rand_prio_high_vector_get+0x36>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1eeb2:	4621      	mov	r1, r4
   1eeb4:	2300      	movs	r3, #0
   1eeb6:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1eeb8:	1e04      	subs	r4, r0, #0
   1eeba:	da0a      	bge.n	1eed2 <rand_prio_high_vector_get+0x2e>
   1eebc:	4909      	ldr	r1, [pc, #36]	; (1eee4 <rand_prio_high_vector_get+0x40>)
   1eebe:	480a      	ldr	r0, [pc, #40]	; (1eee8 <rand_prio_high_vector_get+0x44>)
   1eec0:	f240 12d1 	movw	r2, #465	; 0x1d1
   1eec4:	f007 ff70 	bl	26da8 <assert_print>
   1eec8:	4806      	ldr	r0, [pc, #24]	; (1eee4 <rand_prio_high_vector_get+0x40>)
   1eeca:	f240 11d1 	movw	r1, #465	; 0x1d1
   1eece:	f007 ff64 	bl	26d9a <assert_post_action>
	return ret >= 0 ? ret : 0;
   1eed2:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1eed6:	b2c0      	uxtb	r0, r0
   1eed8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1eeda:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1eede:	e7ed      	b.n	1eebc <rand_prio_high_vector_get+0x18>
   1eee0:	00029804 	.word	0x00029804
   1eee4:	0002c1b0 	.word	0x0002c1b0
   1eee8:	0002a576 	.word	0x0002a576

0001eeec <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1eeec:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1eeee:	4c8a      	ldr	r4, [pc, #552]	; (1f118 <hci_internal_cmd_put+0x22c>)
   1eef0:	7823      	ldrb	r3, [r4, #0]
   1eef2:	2b00      	cmp	r3, #0
   1eef4:	f040 830c 	bne.w	1f510 <hci_internal_cmd_put+0x624>
	return ((uint16_t)src[1] << 8) | src[0];
   1eef8:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1eefa:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1eefe:	b22b      	sxth	r3, r5
   1ef00:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1ef04:	d20d      	bcs.n	1ef22 <hci_internal_cmd_put+0x36>
   1ef06:	b17a      	cbz	r2, 1ef28 <hci_internal_cmd_put+0x3c>
   1ef08:	3a01      	subs	r2, #1
   1ef0a:	2a07      	cmp	r2, #7
   1ef0c:	d80c      	bhi.n	1ef28 <hci_internal_cmd_put+0x3c>
   1ef0e:	e8df f012 	tbh	[pc, r2, lsl #1]
   1ef12:	000d      	.short	0x000d
   1ef14:	0029000b 	.word	0x0029000b
   1ef18:	000b005d 	.word	0x000b005d
   1ef1c:	000b000b 	.word	0x000b000b
   1ef20:	0107      	.short	0x0107
   1ef22:	2a3f      	cmp	r2, #63	; 0x3f
   1ef24:	f000 8269 	beq.w	1f3fa <hci_internal_cmd_put+0x50e>
	switch (opcode)	{
   1ef28:	2001      	movs	r0, #1
   1ef2a:	e00e      	b.n	1ef4a <hci_internal_cmd_put+0x5e>
	switch (opcode)	{
   1ef2c:	f240 4206 	movw	r2, #1030	; 0x406
   1ef30:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ef32:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1ef36:	d006      	beq.n	1ef46 <hci_internal_cmd_put+0x5a>
   1ef38:	f240 421d 	movw	r2, #1053	; 0x41d
   1ef3c:	4293      	cmp	r3, r2
   1ef3e:	d1f3      	bne.n	1ef28 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1ef40:	f7f2 fddf 	bl	11b02 <sdc_hci_cmd_lc_read_remote_version_information>
   1ef44:	e001      	b.n	1ef4a <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1ef46:	f7f2 fdda 	bl	11afe <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ef4a:	230f      	movs	r3, #15
   1ef4c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ef4e:	2304      	movs	r3, #4
   1ef50:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1ef52:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1ef54:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1ef56:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1ef58:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1ef5c:	2301      	movs	r3, #1
   1ef5e:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1ef60:	2000      	movs	r0, #0
}
   1ef62:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   1ef64:	f640 4263 	movw	r2, #3171	; 0xc63
   1ef68:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ef6a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1ef6e:	d025      	beq.n	1efbc <hci_internal_cmd_put+0xd0>
   1ef70:	dc0f      	bgt.n	1ef92 <hci_internal_cmd_put+0xa6>
   1ef72:	f640 4203 	movw	r2, #3075	; 0xc03
   1ef76:	4293      	cmp	r3, r2
   1ef78:	d018      	beq.n	1efac <hci_internal_cmd_put+0xc0>
   1ef7a:	f640 422d 	movw	r2, #3117	; 0xc2d
   1ef7e:	4293      	cmp	r3, r2
   1ef80:	d017      	beq.n	1efb2 <hci_internal_cmd_put+0xc6>
   1ef82:	f640 4201 	movw	r2, #3073	; 0xc01
   1ef86:	4293      	cmp	r3, r2
   1ef88:	d1ce      	bne.n	1ef28 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1ef8a:	f7f2 fc6e 	bl	1186a <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1ef8e:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1ef90:	e0bd      	b.n	1f10e <hci_internal_cmd_put+0x222>
	switch (opcode)	{
   1ef92:	f640 427b 	movw	r2, #3195	; 0xc7b
   1ef96:	4293      	cmp	r3, r2
   1ef98:	d013      	beq.n	1efc2 <hci_internal_cmd_put+0xd6>
   1ef9a:	f640 427c 	movw	r2, #3196	; 0xc7c
   1ef9e:	4293      	cmp	r3, r2
   1efa0:	d1c2      	bne.n	1ef28 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1efa2:	495e      	ldr	r1, [pc, #376]	; (1f11c <hci_internal_cmd_put+0x230>)
   1efa4:	f7f2 fc6b 	bl	1187e <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1efa8:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1efaa:	e0b0      	b.n	1f10e <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_cb_reset();
   1efac:	f7e5 fd60 	bl	4a70 <sdc_hci_cmd_cb_reset>
   1efb0:	e7ed      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1efb2:	495a      	ldr	r1, [pc, #360]	; (1f11c <hci_internal_cmd_put+0x230>)
   1efb4:	f7f2 fc57 	bl	11866 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1efb8:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1efba:	e0a8      	b.n	1f10e <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1efbc:	f7f2 fc5a 	bl	11874 <sdc_hci_cmd_cb_set_event_mask_page_2>
   1efc0:	e7e5      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1efc2:	4956      	ldr	r1, [pc, #344]	; (1f11c <hci_internal_cmd_put+0x230>)
   1efc4:	f7f2 fc4d 	bl	11862 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1efc8:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1efca:	e0a0      	b.n	1f10e <hci_internal_cmd_put+0x222>
	switch (opcode)	{
   1efcc:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   1efd0:	3b01      	subs	r3, #1
   1efd2:	2b08      	cmp	r3, #8
   1efd4:	d8a8      	bhi.n	1ef28 <hci_internal_cmd_put+0x3c>
   1efd6:	a201      	add	r2, pc, #4	; (adr r2, 1efdc <hci_internal_cmd_put+0xf0>)
   1efd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1efdc:	0001f001 	.word	0x0001f001
   1efe0:	0001f00b 	.word	0x0001f00b
   1efe4:	0001f0ef 	.word	0x0001f0ef
   1efe8:	0001ef29 	.word	0x0001ef29
   1efec:	0001ef29 	.word	0x0001ef29
   1eff0:	0001ef29 	.word	0x0001ef29
   1eff4:	0001ef29 	.word	0x0001ef29
   1eff8:	0001ef29 	.word	0x0001ef29
   1effc:	0001f107 	.word	0x0001f107
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1f000:	4846      	ldr	r0, [pc, #280]	; (1f11c <hci_internal_cmd_put+0x230>)
   1f002:	f7f2 fd23 	bl	11a4c <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1f006:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f008:	e081      	b.n	1f10e <hci_internal_cmd_put+0x222>
	memset(cmds, 0, sizeof(*cmds));
   1f00a:	4844      	ldr	r0, [pc, #272]	; (1f11c <hci_internal_cmd_put+0x230>)
   1f00c:	222f      	movs	r2, #47	; 0x2f
   1f00e:	2100      	movs	r1, #0
   1f010:	f008 f9a8 	bl	27364 <memset>
	cmds->hci_disconnect = 1;
   1f014:	79e3      	ldrb	r3, [r4, #7]
   1f016:	f043 0320 	orr.w	r3, r3, #32
   1f01a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1f01c:	7a63      	ldrb	r3, [r4, #9]
   1f01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f022:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1f024:	7b23      	ldrb	r3, [r4, #12]
   1f026:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f02a:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1f02c:	7c63      	ldrb	r3, [r4, #17]
   1f02e:	f043 0304 	orr.w	r3, r3, #4
   1f032:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1f034:	7d63      	ldrb	r3, [r4, #21]
   1f036:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1f03a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1f03e:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1f040:	7da3      	ldrb	r3, [r4, #22]
   1f042:	f043 0302 	orr.w	r3, r3, #2
   1f046:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1f048:	7f63      	ldrb	r3, [r4, #29]
   1f04a:	f043 0304 	orr.w	r3, r3, #4
   1f04e:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1f050:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f054:	f063 0308 	orn	r3, r3, #8
   1f058:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1f05c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1f060:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1f064:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1f068:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1f06c:	f063 0304 	orn	r3, r3, #4
   1f070:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1f074:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f078:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1f07c:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1f080:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1f084:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1f088:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f08c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1f090:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1f094:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f098:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f09c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1f0a0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f0a4:	f023 0307 	bic.w	r3, r3, #7
   1f0a8:	f043 0307 	orr.w	r3, r3, #7
   1f0ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1f0b0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1f0b4:	f063 0307 	orn	r3, r3, #7
   1f0b8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1f0bc:	23ff      	movs	r3, #255	; 0xff
   1f0be:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_remove_advertising_set = 1;
   1f0c2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1f0c6:	f023 0303 	bic.w	r3, r3, #3
   1f0ca:	f043 0303 	orr.w	r3, r3, #3
   1f0ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	cmds->hci_le_read_transmit_power = 1;
   1f0d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1f0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f0da:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1f0de:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1f0e2:	f043 0304 	orr.w	r3, r3, #4
   1f0e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   1f0ea:	2344      	movs	r3, #68	; 0x44
   1f0ec:	e0f7      	b.n	1f2de <hci_internal_cmd_put+0x3f2>
	memset(features, 0, sizeof(*features));
   1f0ee:	480b      	ldr	r0, [pc, #44]	; (1f11c <hci_internal_cmd_put+0x230>)
   1f0f0:	2208      	movs	r2, #8
   1f0f2:	2100      	movs	r1, #0
   1f0f4:	f008 f936 	bl	27364 <memset>
	features->bdedr_not_supported = 1;
   1f0f8:	7ae3      	ldrb	r3, [r4, #11]
   1f0fa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1f0fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1f102:	72e3      	strb	r3, [r4, #11]
   1f104:	e0ea      	b.n	1f2dc <hci_internal_cmd_put+0x3f0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1f106:	4805      	ldr	r0, [pc, #20]	; (1f11c <hci_internal_cmd_put+0x230>)
   1f108:	f7f2 fc9e 	bl	11a48 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1f10c:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1f10e:	2801      	cmp	r0, #1
   1f110:	f040 80e6 	bne.w	1f2e0 <hci_internal_cmd_put+0x3f4>
   1f114:	e719      	b.n	1ef4a <hci_internal_cmd_put+0x5e>
   1f116:	bf00      	nop
   1f118:	2000d6e1 	.word	0x2000d6e1
   1f11c:	2000d6e8 	.word	0x2000d6e8
	switch (opcode)	{
   1f120:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1f124:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f126:	3003      	adds	r0, #3
	switch (opcode)	{
   1f128:	2b5d      	cmp	r3, #93	; 0x5d
   1f12a:	f63f aefd 	bhi.w	1ef28 <hci_internal_cmd_put+0x3c>
   1f12e:	a201      	add	r2, pc, #4	; (adr r2, 1f134 <hci_internal_cmd_put+0x248>)
   1f130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f134:	0001f2ad 	.word	0x0001f2ad
   1f138:	0001f2b3 	.word	0x0001f2b3
   1f13c:	0001f2bb 	.word	0x0001f2bb
   1f140:	0001ef29 	.word	0x0001ef29
   1f144:	0001f2f1 	.word	0x0001f2f1
   1f148:	0001f2f7 	.word	0x0001f2f7
   1f14c:	0001f2fd 	.word	0x0001f2fd
   1f150:	0001f307 	.word	0x0001f307
   1f154:	0001f30d 	.word	0x0001f30d
   1f158:	0001f313 	.word	0x0001f313
   1f15c:	0001ef29 	.word	0x0001ef29
   1f160:	0001ef29 	.word	0x0001ef29
   1f164:	0001ef29 	.word	0x0001ef29
   1f168:	0001ef29 	.word	0x0001ef29
   1f16c:	0001f319 	.word	0x0001f319
   1f170:	0001f321 	.word	0x0001f321
   1f174:	0001f327 	.word	0x0001f327
   1f178:	0001f32d 	.word	0x0001f32d
   1f17c:	0001ef29 	.word	0x0001ef29
   1f180:	0001f333 	.word	0x0001f333
   1f184:	0001f339 	.word	0x0001f339
   1f188:	0001f343 	.word	0x0001f343
   1f18c:	0001f349 	.word	0x0001f349
   1f190:	0001f353 	.word	0x0001f353
   1f194:	0001ef29 	.word	0x0001ef29
   1f198:	0001f35b 	.word	0x0001f35b
   1f19c:	0001f363 	.word	0x0001f363
   1f1a0:	0001f36b 	.word	0x0001f36b
   1f1a4:	0001ef29 	.word	0x0001ef29
   1f1a8:	0001ef29 	.word	0x0001ef29
   1f1ac:	0001ef29 	.word	0x0001ef29
   1f1b0:	0001ef29 	.word	0x0001ef29
   1f1b4:	0001ef29 	.word	0x0001ef29
   1f1b8:	0001f373 	.word	0x0001f373
   1f1bc:	0001f37b 	.word	0x0001f37b
   1f1c0:	0001f383 	.word	0x0001f383
   1f1c4:	0001f389 	.word	0x0001f389
   1f1c8:	0001f38f 	.word	0x0001f38f
   1f1cc:	0001ef29 	.word	0x0001ef29
   1f1d0:	0001ef29 	.word	0x0001ef29
   1f1d4:	0001ef29 	.word	0x0001ef29
   1f1d8:	0001ef29 	.word	0x0001ef29
   1f1dc:	0001ef29 	.word	0x0001ef29
   1f1e0:	0001ef29 	.word	0x0001ef29
   1f1e4:	0001ef29 	.word	0x0001ef29
   1f1e8:	0001ef29 	.word	0x0001ef29
   1f1ec:	0001f39b 	.word	0x0001f39b
   1f1f0:	0001f3a3 	.word	0x0001f3a3
   1f1f4:	0001f3ab 	.word	0x0001f3ab
   1f1f8:	0001f3b1 	.word	0x0001f3b1
   1f1fc:	0001ef29 	.word	0x0001ef29
   1f200:	0001ef29 	.word	0x0001ef29
   1f204:	0001f3b7 	.word	0x0001f3b7
   1f208:	0001f3bd 	.word	0x0001f3bd
   1f20c:	0001f3c5 	.word	0x0001f3c5
   1f210:	0001f3cb 	.word	0x0001f3cb
   1f214:	0001f3d1 	.word	0x0001f3d1
   1f218:	0001f3d7 	.word	0x0001f3d7
   1f21c:	0001f3df 	.word	0x0001f3df
   1f220:	0001f3e7 	.word	0x0001f3e7
   1f224:	0001f3ed 	.word	0x0001f3ed
   1f228:	0001ef29 	.word	0x0001ef29
   1f22c:	0001ef29 	.word	0x0001ef29
   1f230:	0001ef29 	.word	0x0001ef29
   1f234:	0001ef29 	.word	0x0001ef29
   1f238:	0001ef29 	.word	0x0001ef29
   1f23c:	0001ef29 	.word	0x0001ef29
   1f240:	0001ef29 	.word	0x0001ef29
   1f244:	0001ef29 	.word	0x0001ef29
   1f248:	0001ef29 	.word	0x0001ef29
   1f24c:	0001ef29 	.word	0x0001ef29
   1f250:	0001ef29 	.word	0x0001ef29
   1f254:	0001ef29 	.word	0x0001ef29
   1f258:	0001ef29 	.word	0x0001ef29
   1f25c:	0001f3f3 	.word	0x0001f3f3
   1f260:	0001ef29 	.word	0x0001ef29
   1f264:	0001ef29 	.word	0x0001ef29
   1f268:	0001ef29 	.word	0x0001ef29
   1f26c:	0001ef29 	.word	0x0001ef29
   1f270:	0001ef29 	.word	0x0001ef29
   1f274:	0001ef29 	.word	0x0001ef29
   1f278:	0001ef29 	.word	0x0001ef29
   1f27c:	0001ef29 	.word	0x0001ef29
   1f280:	0001ef29 	.word	0x0001ef29
   1f284:	0001ef29 	.word	0x0001ef29
   1f288:	0001ef29 	.word	0x0001ef29
   1f28c:	0001ef29 	.word	0x0001ef29
   1f290:	0001ef29 	.word	0x0001ef29
   1f294:	0001ef29 	.word	0x0001ef29
   1f298:	0001ef29 	.word	0x0001ef29
   1f29c:	0001ef29 	.word	0x0001ef29
   1f2a0:	0001ef29 	.word	0x0001ef29
   1f2a4:	0001ef29 	.word	0x0001ef29
   1f2a8:	0001f395 	.word	0x0001f395
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1f2ac:	f7f2 fc08 	bl	11ac0 <sdc_hci_cmd_le_set_event_mask>
   1f2b0:	e66d      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f2b2:	4899      	ldr	r0, [pc, #612]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f2b4:	f7f2 fbe0 	bl	11a78 <sdc_hci_cmd_le_read_buffer_size>
   1f2b8:	e67e      	b.n	1efb8 <hci_internal_cmd_put+0xcc>
	memset(features, 0, sizeof(*features));
   1f2ba:	4897      	ldr	r0, [pc, #604]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f2bc:	2205      	movs	r2, #5
   1f2be:	2100      	movs	r1, #0
   1f2c0:	f008 f850 	bl	27364 <memset>
	features->le_encryption = 1;
   1f2c4:	79e3      	ldrb	r3, [r4, #7]
   1f2c6:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1f2ca:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1f2ce:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1f2d0:	7a23      	ldrb	r3, [r4, #8]
   1f2d2:	f023 0351 	bic.w	r3, r3, #81	; 0x51
   1f2d6:	f043 0351 	orr.w	r3, r3, #81	; 0x51
   1f2da:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1f2dc:	230c      	movs	r3, #12
		return 0;
   1f2de:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f2e0:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1f2e2:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f2e4:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f2e6:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1f2e8:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1f2ea:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1f2ec:	71a0      	strb	r0, [r4, #6]
}
   1f2ee:	e635      	b.n	1ef5c <hci_internal_cmd_put+0x70>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1f2f0:	f7f2 fbff 	bl	11af2 <sdc_hci_cmd_le_set_random_address>
   1f2f4:	e64b      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1f2f6:	f7f2 fbdb 	bl	11ab0 <sdc_hci_cmd_le_set_adv_params>
   1f2fa:	e648      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1f2fc:	4886      	ldr	r0, [pc, #536]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f2fe:	f7f2 fbb9 	bl	11a74 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out +=
   1f302:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_number_of_supported_adv_sets((void *)event_out_params);
   1f304:	e703      	b.n	1f10e <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1f306:	f7f2 fbcf 	bl	11aa8 <sdc_hci_cmd_le_set_adv_data>
   1f30a:	e640      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1f30c:	f7f2 fbf3 	bl	11af6 <sdc_hci_cmd_le_set_scan_response_data>
   1f310:	e63d      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1f312:	f7f2 fbcb 	bl	11aac <sdc_hci_cmd_le_set_adv_enable>
   1f316:	e63a      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1f318:	487f      	ldr	r0, [pc, #508]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f31a:	f7f2 fbb1 	bl	11a80 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1f31e:	e7f0      	b.n	1f302 <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1f320:	f7f2 fb9a 	bl	11a58 <sdc_hci_cmd_le_clear_filter_accept_list>
   1f324:	e633      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1f326:	f7f2 fb93 	bl	11a50 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1f32a:	e630      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1f32c:	f7f2 fbba 	bl	11aa4 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1f330:	e62d      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   1f332:	f7f2 fbda 	bl	11aea <sdc_hci_cmd_le_set_host_channel_classification>
   1f336:	e62a      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f338:	4977      	ldr	r1, [pc, #476]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f33a:	f7f2 fb9f 	bl	11a7c <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1f33e:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f340:	e6e5      	b.n	1f10e <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1f342:	f7f2 fba7 	bl	11a94 <sdc_hci_cmd_le_read_remote_features>
   1f346:	e600      	b.n	1ef4a <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f348:	4973      	ldr	r1, [pc, #460]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f34a:	f7f2 fb87 	bl	11a5c <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1f34e:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f350:	e6dd      	b.n	1f10e <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1f352:	4871      	ldr	r0, [pc, #452]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f354:	f7f2 fb8c 	bl	11a70 <sdc_hci_cmd_le_rand>
   1f358:	e655      	b.n	1f006 <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1f35a:	496f      	ldr	r1, [pc, #444]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f35c:	f7f2 fb84 	bl	11a68 <sdc_hci_cmd_le_long_term_key_request_reply>
   1f360:	e622      	b.n	1efa8 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1f362:	496d      	ldr	r1, [pc, #436]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f364:	f7f2 fb7c 	bl	11a60 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1f368:	e61e      	b.n	1efa8 <hci_internal_cmd_put+0xbc>
	*buf = states1;
   1f36a:	238f      	movs	r3, #143	; 0x8f
   1f36c:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1f36e:	23c0      	movs	r3, #192	; 0xc0
   1f370:	e6c7      	b.n	1f102 <hci_internal_cmd_put+0x216>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1f372:	4969      	ldr	r1, [pc, #420]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f374:	f7f2 fba0 	bl	11ab8 <sdc_hci_cmd_le_set_data_length>
   1f378:	e616      	b.n	1efa8 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1f37a:	4867      	ldr	r0, [pc, #412]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f37c:	f7f2 fb8c 	bl	11a98 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1f380:	e622      	b.n	1efc8 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1f382:	f7f2 fbba 	bl	11afa <sdc_hci_cmd_le_write_suggested_default_data_length>
   1f386:	e602      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return hci_cmd_le_read_local_p256_public_key();
   1f388:	f000 fa4a 	bl	1f820 <hci_cmd_le_read_local_p256_public_key>
   1f38c:	e5dd      	b.n	1ef4a <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1f38e:	f009 fee0 	bl	29152 <hci_cmd_le_generate_dhkey>
   1f392:	e5da      	b.n	1ef4a <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1f394:	f009 fee0 	bl	29158 <hci_cmd_le_generate_dhkey_v2>
   1f398:	e5f9      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f39a:	485f      	ldr	r0, [pc, #380]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f39c:	f7f2 fb74 	bl	11a88 <sdc_hci_cmd_le_read_max_data_length>
   1f3a0:	e631      	b.n	1f006 <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f3a2:	495d      	ldr	r1, [pc, #372]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f3a4:	f7f2 fb74 	bl	11a90 <sdc_hci_cmd_le_read_phy>
   1f3a8:	e60e      	b.n	1efc8 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1f3aa:	f7f2 fb87 	bl	11abc <sdc_hci_cmd_le_set_default_phy>
   1f3ae:	e5ee      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1f3b0:	f7f2 fb9d 	bl	11aee <sdc_hci_cmd_le_set_phy>
   1f3b4:	e5c9      	b.n	1ef4a <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_set_adv_set_random_address((void *)cmd_params);
   1f3b6:	f7f2 fb7d 	bl	11ab4 <sdc_hci_cmd_le_set_adv_set_random_address>
   1f3ba:	e5e8      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_ext_adv_params((void *)cmd_params,
   1f3bc:	4956      	ldr	r1, [pc, #344]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f3be:	f7f2 fb90 	bl	11ae2 <sdc_hci_cmd_le_set_ext_adv_params>
   1f3c2:	e79e      	b.n	1f302 <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_set_ext_adv_data((void *)cmd_params);
   1f3c4:	f7f2 fb81 	bl	11aca <sdc_hci_cmd_le_set_ext_adv_data>
   1f3c8:	e5e1      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_ext_scan_response_data((void *)cmd_params);
   1f3ca:	f7f2 fb8c 	bl	11ae6 <sdc_hci_cmd_le_set_ext_scan_response_data>
   1f3ce:	e5de      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_ext_adv_enable((void *)cmd_params);
   1f3d0:	f7f2 fb7d 	bl	11ace <sdc_hci_cmd_le_set_ext_adv_enable>
   1f3d4:	e5db      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_max_adv_data_length((void *)event_out_params);
   1f3d6:	4850      	ldr	r0, [pc, #320]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f3d8:	f7f2 fb54 	bl	11a84 <sdc_hci_cmd_le_read_max_adv_data_length>
   1f3dc:	e5e4      	b.n	1efa8 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_number_of_supported_adv_sets((void *)event_out_params);
   1f3de:	484e      	ldr	r0, [pc, #312]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f3e0:	f7f2 fb54 	bl	11a8c <sdc_hci_cmd_le_read_number_of_supported_adv_sets>
   1f3e4:	e78d      	b.n	1f302 <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_remove_adv_set((void *)cmd_params);
   1f3e6:	f7f2 fb5b 	bl	11aa0 <sdc_hci_cmd_le_remove_adv_set>
   1f3ea:	e5d0      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_clear_adv_sets();
   1f3ec:	f7f2 fb32 	bl	11a54 <sdc_hci_cmd_le_clear_adv_sets>
   1f3f0:	e5cd      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f3f2:	4849      	ldr	r0, [pc, #292]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f3f4:	f7f2 fb52 	bl	11a9c <sdc_hci_cmd_le_read_transmit_power>
   1f3f8:	e5d6      	b.n	1efa8 <hci_internal_cmd_put+0xbc>
	switch (opcode)	{
   1f3fa:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1f3fe:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f400:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f404:	d820      	bhi.n	1f448 <hci_internal_cmd_put+0x55c>
   1f406:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1f40a:	f43f ad8d 	beq.w	1ef28 <hci_internal_cmd_put+0x3c>
   1f40e:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1f412:	3b01      	subs	r3, #1
   1f414:	2b09      	cmp	r3, #9
   1f416:	f63f ad87 	bhi.w	1ef28 <hci_internal_cmd_put+0x3c>
   1f41a:	a201      	add	r2, pc, #4	; (adr r2, 1f420 <hci_internal_cmd_put+0x534>)
   1f41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f420:	0001f48d 	.word	0x0001f48d
   1f424:	0001f497 	.word	0x0001f497
   1f428:	0001ef29 	.word	0x0001ef29
   1f42c:	0001ef29 	.word	0x0001ef29
   1f430:	0001ef29 	.word	0x0001ef29
   1f434:	0001f4cf 	.word	0x0001f4cf
   1f438:	0001ef29 	.word	0x0001ef29
   1f43c:	0001ef29 	.word	0x0001ef29
   1f440:	0001f4bb 	.word	0x0001f4bb
   1f444:	0001f4c5 	.word	0x0001f4c5
   1f448:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1f44c:	b29b      	uxth	r3, r3
   1f44e:	2b09      	cmp	r3, #9
   1f450:	f63f ad6a 	bhi.w	1ef28 <hci_internal_cmd_put+0x3c>
   1f454:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1f458:	2b09      	cmp	r3, #9
   1f45a:	f63f ad65 	bhi.w	1ef28 <hci_internal_cmd_put+0x3c>
   1f45e:	a201      	add	r2, pc, #4	; (adr r2, 1f464 <hci_internal_cmd_put+0x578>)
   1f460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f464:	0001f4d5 	.word	0x0001f4d5
   1f468:	0001f4ed 	.word	0x0001f4ed
   1f46c:	0001f4f3 	.word	0x0001f4f3
   1f470:	0001f4f9 	.word	0x0001f4f9
   1f474:	0001f4ff 	.word	0x0001f4ff
   1f478:	0001f505 	.word	0x0001f505
   1f47c:	0001ef29 	.word	0x0001ef29
   1f480:	0001ef29 	.word	0x0001ef29
   1f484:	0001ef29 	.word	0x0001ef29
   1f488:	0001f50b 	.word	0x0001f50b
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1f48c:	4822      	ldr	r0, [pc, #136]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f48e:	f7e5 fb07 	bl	4aa0 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1f492:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1f494:	e63b      	b.n	1f10e <hci_internal_cmd_put+0x222>
	memset(cmds, 0, sizeof(*cmds));
   1f496:	4820      	ldr	r0, [pc, #128]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f498:	2202      	movs	r2, #2
   1f49a:	2100      	movs	r1, #0
   1f49c:	f007 ff62 	bl	27364 <memset>
	cmds->read_version_info = 1;
   1f4a0:	79e3      	ldrb	r3, [r4, #7]
   1f4a2:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1f4a6:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1f4aa:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1f4ac:	7a23      	ldrb	r3, [r4, #8]
   1f4ae:	f023 0307 	bic.w	r3, r3, #7
   1f4b2:	f043 0307 	orr.w	r3, r3, #7
   1f4b6:	7223      	strb	r3, [r4, #8]
}
   1f4b8:	e617      	b.n	1f0ea <hci_internal_cmd_put+0x1fe>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1f4ba:	4817      	ldr	r0, [pc, #92]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f4bc:	f7f2 fa73 	bl	119a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1f4c0:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1f4c2:	e624      	b.n	1f10e <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1f4c4:	4814      	ldr	r0, [pc, #80]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f4c6:	f7f2 fa21 	bl	1190c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1f4ca:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1f4cc:	e61f      	b.n	1f10e <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1f4ce:	f7f2 fab9 	bl	11a44 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1f4d2:	e55c      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
	memset(cmds, 0, sizeof(*cmds));
   1f4d4:	4810      	ldr	r0, [pc, #64]	; (1f518 <hci_internal_cmd_put+0x62c>)
   1f4d6:	2202      	movs	r2, #2
   1f4d8:	2100      	movs	r1, #0
   1f4da:	f007 ff43 	bl	27364 <memset>
	cmds->read_supported_vs_commands = 1;
   1f4de:	79e3      	ldrb	r3, [r4, #7]
   1f4e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1f4e4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1f4e8:	71e3      	strb	r3, [r4, #7]
}
   1f4ea:	e5fe      	b.n	1f0ea <hci_internal_cmd_put+0x1fe>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1f4ec:	f7f2 f9fd 	bl	118ea <sdc_hci_cmd_vs_llpm_mode_set>
   1f4f0:	e54d      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1f4f2:	f7f2 f9ce 	bl	11892 <sdc_hci_cmd_vs_conn_update>
   1f4f6:	e54a      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1f4f8:	f7f2 f9c3 	bl	11882 <sdc_hci_cmd_vs_conn_event_extend>
   1f4fc:	e547      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1f4fe:	f7f2 fa00 	bl	11902 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1f502:	e544      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1f504:	f7f2 f9ef 	bl	118e6 <sdc_hci_cmd_vs_event_length_set>
   1f508:	e541      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1f50a:	f7f2 f9f6 	bl	118fa <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1f50e:	e53e      	b.n	1ef8e <hci_internal_cmd_put+0xa2>
		return -NRF_EPERM;
   1f510:	f04f 30ff 	mov.w	r0, #4294967295
   1f514:	e525      	b.n	1ef62 <hci_internal_cmd_put+0x76>
   1f516:	bf00      	nop
   1f518:	2000d6e8 	.word	0x2000d6e8

0001f51c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1f51c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1f51e:	4c07      	ldr	r4, [pc, #28]	; (1f53c <hci_internal_evt_get+0x20>)
   1f520:	7823      	ldrb	r3, [r4, #0]
   1f522:	b91b      	cbnz	r3, 1f52c <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1f524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1f528:	f7f2 b986 	b.w	11838 <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1f52c:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1f52e:	1c61      	adds	r1, r4, #1
   1f530:	3202      	adds	r2, #2
   1f532:	f007 ff0c 	bl	2734e <memcpy>
		cmd_complete_or_status.occurred = false;
   1f536:	2000      	movs	r0, #0
   1f538:	7020      	strb	r0, [r4, #0]
}
   1f53a:	bd10      	pop	{r4, pc}
   1f53c:	2000d6e1 	.word	0x2000d6e1

0001f540 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1f540:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1f542:	4c09      	ldr	r4, [pc, #36]	; (1f568 <hci_internal_msg_get+0x28>)
   1f544:	7823      	ldrb	r3, [r4, #0]
{
   1f546:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1f548:	b91b      	cbnz	r3, 1f552 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1f54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1f54e:	f7f2 b980 	b.w	11852 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1f552:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1f554:	1c61      	adds	r1, r4, #1
   1f556:	3202      	adds	r2, #2
   1f558:	f007 fef9 	bl	2734e <memcpy>
		cmd_complete_or_status.occurred = false;
   1f55c:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1f55e:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1f560:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1f562:	702b      	strb	r3, [r5, #0]
}
   1f564:	bd38      	pop	{r3, r4, r5, pc}
   1f566:	bf00      	nop
   1f568:	2000d6e1 	.word	0x2000d6e1

0001f56c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1f56c:	b570      	push	{r4, r5, r6, lr}
   1f56e:	4605      	mov	r5, r0
   1f570:	460c      	mov	r4, r1
   1f572:	4e0e      	ldr	r6, [pc, #56]	; (1f5ac <bt_rand+0x40>)
   1f574:	4630      	mov	r0, r6
   1f576:	f009 febe 	bl	292f6 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1f57a:	b198      	cbz	r0, 1f5a4 <bt_rand+0x38>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1f57c:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   1f57e:	68b6      	ldr	r6, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   1f580:	6833      	ldr	r3, [r6, #0]
   1f582:	b943      	cbnz	r3, 1f596 <bt_rand+0x2a>
   1f584:	490a      	ldr	r1, [pc, #40]	; (1f5b0 <bt_rand+0x44>)
   1f586:	480b      	ldr	r0, [pc, #44]	; (1f5b4 <bt_rand+0x48>)
   1f588:	224b      	movs	r2, #75	; 0x4b
   1f58a:	f007 fc0d 	bl	26da8 <assert_print>
   1f58e:	4808      	ldr	r0, [pc, #32]	; (1f5b0 <bt_rand+0x44>)
   1f590:	214b      	movs	r1, #75	; 0x4b
   1f592:	f007 fc02 	bl	26d9a <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1f596:	6833      	ldr	r3, [r6, #0]
   1f598:	4804      	ldr	r0, [pc, #16]	; (1f5ac <bt_rand+0x40>)
   1f59a:	4622      	mov	r2, r4
   1f59c:	4629      	mov	r1, r5
}
   1f59e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f5a2:	4718      	bx	r3
   1f5a4:	f06f 0012 	mvn.w	r0, #18
   1f5a8:	bd70      	pop	{r4, r5, r6, pc}
   1f5aa:	bf00      	nop
   1f5ac:	00029804 	.word	0x00029804
   1f5b0:	0002c17c 	.word	0x0002c17c
   1f5b4:	0002a576 	.word	0x0002a576

0001f5b8 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1f5b8:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1f5ba:	b570      	push	{r4, r5, r6, lr}
   1f5bc:	4604      	mov	r4, r0
   1f5be:	460d      	mov	r5, r1
   1f5c0:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1f5c4:	d915      	bls.n	1f5f2 <sys_memcpy_swap.constprop.0+0x3a>
   1f5c6:	42b0      	cmp	r0, r6
   1f5c8:	d20a      	bcs.n	1f5e0 <sys_memcpy_swap.constprop.0+0x28>
   1f5ca:	490c      	ldr	r1, [pc, #48]	; (1f5fc <sys_memcpy_swap.constprop.0+0x44>)
   1f5cc:	480c      	ldr	r0, [pc, #48]	; (1f600 <sys_memcpy_swap.constprop.0+0x48>)
   1f5ce:	f240 2217 	movw	r2, #535	; 0x217
   1f5d2:	f007 fbe9 	bl	26da8 <assert_print>
   1f5d6:	4809      	ldr	r0, [pc, #36]	; (1f5fc <sys_memcpy_swap.constprop.0+0x44>)
   1f5d8:	f240 2117 	movw	r1, #535	; 0x217
   1f5dc:	f007 fbdd 	bl	26d9a <assert_post_action>
	for (; length > 0; length--) {
   1f5e0:	4633      	mov	r3, r6
   1f5e2:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1f5e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1f5e8:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1f5ec:	42ab      	cmp	r3, r5
   1f5ee:	d1f9      	bne.n	1f5e4 <sys_memcpy_swap.constprop.0+0x2c>
}
   1f5f0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1f5f2:	d0ea      	beq.n	1f5ca <sys_memcpy_swap.constprop.0+0x12>
   1f5f4:	f100 0320 	add.w	r3, r0, #32
   1f5f8:	4299      	cmp	r1, r3
   1f5fa:	e7e5      	b.n	1f5c8 <sys_memcpy_swap.constprop.0+0x10>
   1f5fc:	0002c300 	.word	0x0002c300
   1f600:	0002a576 	.word	0x0002a576

0001f604 <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1f604:	4b1e      	ldr	r3, [pc, #120]	; (1f680 <ecdh_p256_common_secret+0x7c>)
   1f606:	491f      	ldr	r1, [pc, #124]	; (1f684 <ecdh_p256_common_secret+0x80>)
   1f608:	f103 0220 	add.w	r2, r3, #32
   1f60c:	2800      	cmp	r0, #0
   1f60e:	bf08      	it	eq
   1f610:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1f612:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1f614:	4610      	mov	r0, r2
   1f616:	f004 f9a3 	bl	23960 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1f61a:	4602      	mov	r2, r0
   1f61c:	b348      	cbz	r0, 1f672 <ecdh_p256_common_secret+0x6e>
		BT_ERR("public key is not valid (err %d)", err);
   1f61e:	481a      	ldr	r0, [pc, #104]	; (1f688 <ecdh_p256_common_secret+0x84>)
   1f620:	2145      	movs	r1, #69	; 0x45
   1f622:	f007 fbcf 	bl	26dc4 <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   1f626:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1f628:	f04f 32ff 	mov.w	r2, #4294967295
   1f62c:	f04f 33ff 	mov.w	r3, #4294967295
   1f630:	2001      	movs	r0, #1
   1f632:	f7f8 fb6f 	bl	17d14 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1f636:	f100 0608 	add.w	r6, r0, #8
   1f63a:	2102      	movs	r1, #2
   1f63c:	4605      	mov	r5, r0
   1f63e:	4630      	mov	r0, r6
   1f640:	f7fd fed0 	bl	1d3e4 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1f644:	233e      	movs	r3, #62	; 0x3e
   1f646:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1f648:	2322      	movs	r3, #34	; 0x22
   1f64a:	7043      	strb	r3, [r0, #1]
   1f64c:	2101      	movs	r1, #1
   1f64e:	4630      	mov	r0, r6
   1f650:	f7fd fec8 	bl	1d3e4 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1f654:	2309      	movs	r3, #9
   1f656:	7003      	strb	r3, [r0, #0]
   1f658:	2121      	movs	r1, #33	; 0x21
   1f65a:	4630      	mov	r0, r6
   1f65c:	f7fd fec2 	bl	1d3e4 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1f660:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1f664:	b13c      	cbz	r4, 1f676 <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1f666:	2220      	movs	r2, #32
   1f668:	21ff      	movs	r1, #255	; 0xff
   1f66a:	f007 fe7b 	bl	27364 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1f66e:	4628      	mov	r0, r5
   1f670:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1f672:	4604      	mov	r4, r0
   1f674:	e7d8      	b.n	1f628 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1f676:	4905      	ldr	r1, [pc, #20]	; (1f68c <ecdh_p256_common_secret+0x88>)
   1f678:	f7ff ff9e 	bl	1f5b8 <sys_memcpy_swap.constprop.0>
   1f67c:	e7f7      	b.n	1f66e <ecdh_p256_common_secret+0x6a>
   1f67e:	bf00      	nop
   1f680:	2000d728 	.word	0x2000d728
   1f684:	0002c38d 	.word	0x0002c38d
   1f688:	0002c33d 	.word	0x0002c33d
   1f68c:	2000d748 	.word	0x2000d748

0001f690 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1f690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f692:	4e38      	ldr	r6, [pc, #224]	; (1f774 <ecdh_cmd_process+0xe4>)
   1f694:	f3bf 8f5b 	dmb	ish
   1f698:	6833      	ldr	r3, [r6, #0]
   1f69a:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1f69e:	2b02      	cmp	r3, #2
   1f6a0:	d059      	beq.n	1f756 <ecdh_cmd_process+0xc6>
   1f6a2:	2b04      	cmp	r3, #4
   1f6a4:	d05c      	beq.n	1f760 <ecdh_cmd_process+0xd0>
   1f6a6:	2b01      	cmp	r3, #1
   1f6a8:	d15c      	bne.n	1f764 <ecdh_cmd_process+0xd4>
		err = bt_rand(ecdh.private_key_be, 32);
   1f6aa:	4c33      	ldr	r4, [pc, #204]	; (1f778 <ecdh_cmd_process+0xe8>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1f6ac:	4f33      	ldr	r7, [pc, #204]	; (1f77c <ecdh_cmd_process+0xec>)
		err = bt_rand(ecdh.private_key_be, 32);
   1f6ae:	2120      	movs	r1, #32
   1f6b0:	4620      	mov	r0, r4
   1f6b2:	f7ff ff5b 	bl	1f56c <bt_rand>
		if (err) {
   1f6b6:	2800      	cmp	r0, #0
   1f6b8:	d142      	bne.n	1f740 <ecdh_cmd_process+0xb0>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1f6ba:	2220      	movs	r2, #32
   1f6bc:	4639      	mov	r1, r7
   1f6be:	4620      	mov	r0, r4
   1f6c0:	f007 fe1c 	bl	272fc <memcmp>
   1f6c4:	2800      	cmp	r0, #0
   1f6c6:	d0f2      	beq.n	1f6ae <ecdh_cmd_process+0x1e>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1f6c8:	482d      	ldr	r0, [pc, #180]	; (1f780 <ecdh_cmd_process+0xf0>)
   1f6ca:	4621      	mov	r1, r4
   1f6cc:	f004 f934 	bl	23938 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1f6d0:	4605      	mov	r5, r0
   1f6d2:	2800      	cmp	r0, #0
   1f6d4:	d1eb      	bne.n	1f6ae <ecdh_cmd_process+0x1e>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1f6d6:	f04f 32ff 	mov.w	r2, #4294967295
   1f6da:	f04f 33ff 	mov.w	r3, #4294967295
   1f6de:	2001      	movs	r0, #1
   1f6e0:	f7f8 fb18 	bl	17d14 <bt_buf_get_rx>
   1f6e4:	f100 0708 	add.w	r7, r0, #8
   1f6e8:	2102      	movs	r1, #2
   1f6ea:	4604      	mov	r4, r0
   1f6ec:	4638      	mov	r0, r7
   1f6ee:	f7fd fe79 	bl	1d3e4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1f6f2:	233e      	movs	r3, #62	; 0x3e
   1f6f4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1f6f6:	2342      	movs	r3, #66	; 0x42
   1f6f8:	7043      	strb	r3, [r0, #1]
   1f6fa:	2101      	movs	r1, #1
   1f6fc:	4638      	mov	r0, r7
   1f6fe:	f7fd fe71 	bl	1d3e4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1f702:	2308      	movs	r3, #8
   1f704:	7003      	strb	r3, [r0, #0]
   1f706:	2141      	movs	r1, #65	; 0x41
   1f708:	4638      	mov	r0, r7
   1f70a:	f7fd fe6b 	bl	1d3e4 <net_buf_simple_add>
   1f70e:	4607      	mov	r7, r0
	evt->status = status;
   1f710:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1f714:	b1b5      	cbz	r5, 1f744 <ecdh_cmd_process+0xb4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1f716:	2240      	movs	r2, #64	; 0x40
   1f718:	2100      	movs	r1, #0
   1f71a:	f007 fe23 	bl	27364 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f71e:	f3bf 8f5b 	dmb	ish
   1f722:	2300      	movs	r3, #0
   1f724:	e856 2f00 	ldrex	r2, [r6]
   1f728:	e846 3100 	strex	r1, r3, [r6]
   1f72c:	2900      	cmp	r1, #0
   1f72e:	d1f9      	bne.n	1f724 <ecdh_cmd_process+0x94>
   1f730:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1f734:	b1e4      	cbz	r4, 1f770 <ecdh_cmd_process+0xe0>
		bt_recv(buf);
   1f736:	4620      	mov	r0, r4
	}
}
   1f738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   1f73c:	f7f9 ba3c 	b.w	18bb8 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1f740:	251f      	movs	r5, #31
   1f742:	e7c8      	b.n	1f6d6 <ecdh_cmd_process+0x46>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1f744:	490e      	ldr	r1, [pc, #56]	; (1f780 <ecdh_cmd_process+0xf0>)
   1f746:	f7ff ff37 	bl	1f5b8 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1f74a:	490e      	ldr	r1, [pc, #56]	; (1f784 <ecdh_cmd_process+0xf4>)
   1f74c:	f107 0021 	add.w	r0, r7, #33	; 0x21
   1f750:	f7ff ff32 	bl	1f5b8 <sys_memcpy_swap.constprop.0>
		break;
   1f754:	e7e3      	b.n	1f71e <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(false);
   1f756:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1f758:	f7ff ff54 	bl	1f604 <ecdh_p256_common_secret>
   1f75c:	4604      	mov	r4, r0
		break;
   1f75e:	e7de      	b.n	1f71e <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(true);
   1f760:	2001      	movs	r0, #1
   1f762:	e7f9      	b.n	1f758 <ecdh_cmd_process+0xc8>
		BT_WARN("Unknown command");
   1f764:	4808      	ldr	r0, [pc, #32]	; (1f788 <ecdh_cmd_process+0xf8>)
   1f766:	2157      	movs	r1, #87	; 0x57
   1f768:	f007 fb2c 	bl	26dc4 <z_log_minimal_printk>
		buf = NULL;
   1f76c:	2400      	movs	r4, #0
		break;
   1f76e:	e7d6      	b.n	1f71e <ecdh_cmd_process+0x8e>
}
   1f770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f772:	bf00      	nop
   1f774:	20003e7c 	.word	0x20003e7c
   1f778:	2000d728 	.word	0x2000d728
   1f77c:	0002c38d 	.word	0x0002c38d
   1f780:	2000d748 	.word	0x2000d748
   1f784:	2000d768 	.word	0x2000d768
   1f788:	0002c363 	.word	0x0002c363

0001f78c <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1f78c:	b510      	push	{r4, lr}
   1f78e:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1f790:	2210      	movs	r2, #16
   1f792:	2100      	movs	r1, #0
   1f794:	a801      	add	r0, sp, #4
   1f796:	f007 fde5 	bl	27364 <memset>
   1f79a:	4c0b      	ldr	r4, [pc, #44]	; (1f7c8 <ecdh_thread+0x3c>)
   1f79c:	9405      	str	r4, [sp, #20]
   1f79e:	2301      	movs	r3, #1
   1f7a0:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1f7a4:	f04f 32ff 	mov.w	r2, #4294967295
   1f7a8:	f04f 33ff 	mov.w	r3, #4294967295
   1f7ac:	2101      	movs	r1, #1
   1f7ae:	a801      	add	r0, sp, #4
   1f7b0:	f003 ff66 	bl	23680 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1f7b4:	4620      	mov	r0, r4
   1f7b6:	f009 ff99 	bl	296ec <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1f7ba:	9b04      	ldr	r3, [sp, #16]
   1f7bc:	f36f 3352 	bfc	r3, #13, #6
   1f7c0:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1f7c2:	f7ff ff65 	bl	1f690 <ecdh_cmd_process>
	while (true) {
   1f7c6:	e7ed      	b.n	1f7a4 <ecdh_thread+0x18>
   1f7c8:	20003e80 	.word	0x20003e80

0001f7cc <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1f7cc:	b510      	push	{r4, lr}
   1f7ce:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1f7d0:	480e      	ldr	r0, [pc, #56]	; (1f80c <hci_ecdh_init+0x40>)
   1f7d2:	f009 ff86 	bl	296e2 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f7d6:	4c0e      	ldr	r4, [pc, #56]	; (1f810 <hci_ecdh_init+0x44>)
   1f7d8:	490e      	ldr	r1, [pc, #56]	; (1f814 <hci_ecdh_init+0x48>)
   1f7da:	2200      	movs	r2, #0
   1f7dc:	2300      	movs	r3, #0
   1f7de:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f7e2:	2300      	movs	r3, #0
   1f7e4:	220a      	movs	r2, #10
   1f7e6:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1f7ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1f7ee:	9300      	str	r3, [sp, #0]
   1f7f0:	f44f 7262 	mov.w	r2, #904	; 0x388
   1f7f4:	4b08      	ldr	r3, [pc, #32]	; (1f818 <hci_ecdh_init+0x4c>)
   1f7f6:	4620      	mov	r0, r4
   1f7f8:	f001 fa00 	bl	20bfc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f7fc:	4907      	ldr	r1, [pc, #28]	; (1f81c <hci_ecdh_init+0x50>)
   1f7fe:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1f800:	b008      	add	sp, #32
   1f802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f806:	f009 bdae 	b.w	29366 <z_impl_k_thread_name_set>
   1f80a:	bf00      	nop
   1f80c:	20003e80 	.word	0x20003e80
   1f810:	20003220 	.word	0x20003220
   1f814:	2000ebc0 	.word	0x2000ebc0
   1f818:	0001f78d 	.word	0x0001f78d
   1f81c:	0002c378 	.word	0x0002c378

0001f820 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1f820:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f822:	4b0b      	ldr	r3, [pc, #44]	; (1f850 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1f824:	f3bf 8f5b 	dmb	ish
   1f828:	2201      	movs	r2, #1
   1f82a:	e853 1f00 	ldrex	r1, [r3]
   1f82e:	2900      	cmp	r1, #0
   1f830:	d103      	bne.n	1f83a <hci_cmd_le_read_local_p256_public_key+0x1a>
   1f832:	e843 2000 	strex	r0, r2, [r3]
   1f836:	2800      	cmp	r0, #0
   1f838:	d1f7      	bne.n	1f82a <hci_cmd_le_read_local_p256_public_key+0xa>
   1f83a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1f83e:	d105      	bne.n	1f84c <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1f840:	4804      	ldr	r0, [pc, #16]	; (1f854 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1f842:	2100      	movs	r1, #0
   1f844:	f003 fff2 	bl	2382c <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1f848:	2000      	movs	r0, #0
}
   1f84a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1f84c:	200c      	movs	r0, #12
   1f84e:	e7fc      	b.n	1f84a <hci_cmd_le_read_local_p256_public_key+0x2a>
   1f850:	20003e7c 	.word	0x20003e7c
   1f854:	20003e80 	.word	0x20003e80

0001f858 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1f858:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1f85a:	2900      	cmp	r1, #0
   1f85c:	4b11      	ldr	r3, [pc, #68]	; (1f8a4 <cmd_le_generate_dhkey+0x4c>)
   1f85e:	f3bf 8f5b 	dmb	ish
{
   1f862:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1f864:	bf14      	ite	ne
   1f866:	2204      	movne	r2, #4
   1f868:	2202      	moveq	r2, #2
   1f86a:	e853 1f00 	ldrex	r1, [r3]
   1f86e:	2900      	cmp	r1, #0
   1f870:	d103      	bne.n	1f87a <cmd_le_generate_dhkey+0x22>
   1f872:	e843 2000 	strex	r0, r2, [r3]
   1f876:	2800      	cmp	r0, #0
   1f878:	d1f7      	bne.n	1f86a <cmd_le_generate_dhkey+0x12>
   1f87a:	f3bf 8f5b 	dmb	ish
   1f87e:	d10e      	bne.n	1f89e <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1f880:	4621      	mov	r1, r4
   1f882:	4809      	ldr	r0, [pc, #36]	; (1f8a8 <cmd_le_generate_dhkey+0x50>)
   1f884:	f7ff fe98 	bl	1f5b8 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1f888:	4808      	ldr	r0, [pc, #32]	; (1f8ac <cmd_le_generate_dhkey+0x54>)
   1f88a:	f104 0120 	add.w	r1, r4, #32
   1f88e:	f7ff fe93 	bl	1f5b8 <sys_memcpy_swap.constprop.0>
   1f892:	4807      	ldr	r0, [pc, #28]	; (1f8b0 <cmd_le_generate_dhkey+0x58>)
   1f894:	2100      	movs	r1, #0
   1f896:	f003 ffc9 	bl	2382c <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1f89a:	2000      	movs	r0, #0
}
   1f89c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1f89e:	200c      	movs	r0, #12
   1f8a0:	e7fc      	b.n	1f89c <cmd_le_generate_dhkey+0x44>
   1f8a2:	bf00      	nop
   1f8a4:	20003e7c 	.word	0x20003e7c
   1f8a8:	2000d748 	.word	0x2000d748
   1f8ac:	2000d768 	.word	0x2000d768
   1f8b0:	20003e80 	.word	0x20003e80

0001f8b4 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1f8b4:	b508      	push	{r3, lr}
   1f8b6:	4602      	mov	r2, r0
   1f8b8:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1f8ba:	4805      	ldr	r0, [pc, #20]	; (1f8d0 <m_assert_handler+0x1c>)
   1f8bc:	2145      	movs	r1, #69	; 0x45
   1f8be:	f007 fa81 	bl	26dc4 <z_log_minimal_printk>
	k_oops();
   1f8c2:	4040      	eors	r0, r0
   1f8c4:	f380 8811 	msr	BASEPRI, r0
   1f8c8:	f04f 0003 	mov.w	r0, #3
   1f8cc:	df02      	svc	2
}
   1f8ce:	bd08      	pop	{r3, pc}
   1f8d0:	0002c3ad 	.word	0x0002c3ad

0001f8d4 <mpsl_low_prio_work_handler>:
{
   1f8d4:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f8d6:	f04f 30ff 	mov.w	r0, #4294967295
   1f8da:	f04f 31ff 	mov.w	r1, #4294967295
   1f8de:	f7ff f8cb 	bl	1ea78 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1f8e2:	b140      	cbz	r0, 1f8f6 <mpsl_low_prio_work_handler+0x22>
   1f8e4:	4907      	ldr	r1, [pc, #28]	; (1f904 <mpsl_low_prio_work_handler+0x30>)
   1f8e6:	4808      	ldr	r0, [pc, #32]	; (1f908 <mpsl_low_prio_work_handler+0x34>)
   1f8e8:	2247      	movs	r2, #71	; 0x47
   1f8ea:	f007 fa5d 	bl	26da8 <assert_print>
   1f8ee:	4805      	ldr	r0, [pc, #20]	; (1f904 <mpsl_low_prio_work_handler+0x30>)
   1f8f0:	2147      	movs	r1, #71	; 0x47
   1f8f2:	f007 fa52 	bl	26d9a <assert_post_action>
	mpsl_low_priority_process();
   1f8f6:	f7f1 fa68 	bl	10dca <mpsl_low_priority_process>
}
   1f8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1f8fe:	f7ff b8c3 	b.w	1ea88 <multithreading_lock_release>
   1f902:	bf00      	nop
   1f904:	0002c3c6 	.word	0x0002c3c6
   1f908:	0002a576 	.word	0x0002a576

0001f90c <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1f90c:	4901      	ldr	r1, [pc, #4]	; (1f914 <mpsl_low_prio_irq_handler+0x8>)
   1f90e:	4802      	ldr	r0, [pc, #8]	; (1f918 <mpsl_low_prio_irq_handler+0xc>)
   1f910:	f009 bdd5 	b.w	294be <k_work_submit_to_queue>
   1f914:	20003e90 	.word	0x20003e90
   1f918:	200032a0 	.word	0x200032a0

0001f91c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1f91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1f91e:	2332      	movs	r3, #50	; 0x32
   1f920:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f924:	4a10      	ldr	r2, [pc, #64]	; (1f968 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1f926:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1f928:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f92a:	2119      	movs	r1, #25
   1f92c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1f92e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1f932:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1f936:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f93a:	f7e4 fae7 	bl	3f0c <mpsl_init>
	if (err) {
   1f93e:	4604      	mov	r4, r0
   1f940:	b970      	cbnz	r0, 1f960 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f942:	4601      	mov	r1, r0
   1f944:	462a      	mov	r2, r5
   1f946:	2008      	movs	r0, #8
   1f948:	f7f7 fbda 	bl	17100 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f94c:	462a      	mov	r2, r5
   1f94e:	4621      	mov	r1, r4
   1f950:	200b      	movs	r0, #11
   1f952:	f7f7 fbd5 	bl	17100 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f956:	462a      	mov	r2, r5
   1f958:	4621      	mov	r1, r4
   1f95a:	4628      	mov	r0, r5
   1f95c:	f7f7 fbd0 	bl	17100 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   1f960:	4620      	mov	r0, r4
   1f962:	b003      	add	sp, #12
   1f964:	bd30      	pop	{r4, r5, pc}
   1f966:	bf00      	nop
   1f968:	0001f8b5 	.word	0x0001f8b5

0001f96c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1f96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1f96e:	4d0d      	ldr	r5, [pc, #52]	; (1f9a4 <mpsl_low_prio_init+0x38>)
   1f970:	490d      	ldr	r1, [pc, #52]	; (1f9a8 <mpsl_low_prio_init+0x3c>)
   1f972:	2400      	movs	r4, #0
   1f974:	9400      	str	r4, [sp, #0]
   1f976:	f06f 0309 	mvn.w	r3, #9
   1f97a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f97e:	4628      	mov	r0, r5
   1f980:	f001 fffe 	bl	21980 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1f984:	4909      	ldr	r1, [pc, #36]	; (1f9ac <mpsl_low_prio_init+0x40>)
   1f986:	4628      	mov	r0, r5
   1f988:	f009 fced 	bl	29366 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1f98c:	4908      	ldr	r1, [pc, #32]	; (1f9b0 <mpsl_low_prio_init+0x44>)
   1f98e:	4809      	ldr	r0, [pc, #36]	; (1f9b4 <mpsl_low_prio_init+0x48>)
   1f990:	f001 ff38 	bl	21804 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1f994:	4622      	mov	r2, r4
   1f996:	2104      	movs	r1, #4
   1f998:	2019      	movs	r0, #25
   1f99a:	f7f7 fbb1 	bl	17100 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1f99e:	4620      	mov	r0, r4
   1f9a0:	b003      	add	sp, #12
   1f9a2:	bd30      	pop	{r4, r5, pc}
   1f9a4:	200032a0 	.word	0x200032a0
   1f9a8:	2000efc0 	.word	0x2000efc0
   1f9ac:	0002c3f3 	.word	0x0002c3f3
   1f9b0:	0001f8d5 	.word	0x0001f8d5
   1f9b4:	20003e90 	.word	0x20003e90

0001f9b8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f9b8:	4b01      	ldr	r3, [pc, #4]	; (1f9c0 <mpsl_hfclk_callback+0x8>)
   1f9ba:	2000      	movs	r0, #0
   1f9bc:	681b      	ldr	r3, [r3, #0]
   1f9be:	4718      	bx	r3
   1f9c0:	20003ea0 	.word	0x20003ea0

0001f9c4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1f9c4:	b510      	push	{r4, lr}
	switch (domain) {
   1f9c6:	b130      	cbz	r0, 1f9d6 <nrfx_clock_start+0x12>
   1f9c8:	2801      	cmp	r0, #1
   1f9ca:	d10a      	bne.n	1f9e2 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1f9d0:	4809      	ldr	r0, [pc, #36]	; (1f9f8 <nrfx_clock_start+0x34>)
   1f9d2:	f7e4 b911 	b.w	3bf8 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f9d6:	4b09      	ldr	r3, [pc, #36]	; (1f9fc <nrfx_clock_start+0x38>)
}
   1f9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f9dc:	681b      	ldr	r3, [r3, #0]
   1f9de:	2001      	movs	r0, #1
   1f9e0:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1f9e2:	4907      	ldr	r1, [pc, #28]	; (1fa00 <nrfx_clock_start+0x3c>)
   1f9e4:	4807      	ldr	r0, [pc, #28]	; (1fa04 <nrfx_clock_start+0x40>)
   1f9e6:	221c      	movs	r2, #28
   1f9e8:	f007 f9de 	bl	26da8 <assert_print>
}
   1f9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   1f9f0:	4803      	ldr	r0, [pc, #12]	; (1fa00 <nrfx_clock_start+0x3c>)
   1f9f2:	211c      	movs	r1, #28
   1f9f4:	f007 b9d1 	b.w	26d9a <assert_post_action>
   1f9f8:	0001f9b9 	.word	0x0001f9b9
   1f9fc:	20003ea0 	.word	0x20003ea0
   1fa00:	0002c407 	.word	0x0002c407
   1fa04:	0002a576 	.word	0x0002a576

0001fa08 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1fa08:	b508      	push	{r3, lr}
	switch (domain) {
   1fa0a:	b180      	cbz	r0, 1fa2e <nrfx_clock_stop+0x26>
   1fa0c:	2801      	cmp	r0, #1
   1fa0e:	d103      	bne.n	1fa18 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1fa10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1fa14:	f7e4 b8e2 	b.w	3bdc <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1fa18:	4905      	ldr	r1, [pc, #20]	; (1fa30 <nrfx_clock_stop+0x28>)
   1fa1a:	4806      	ldr	r0, [pc, #24]	; (1fa34 <nrfx_clock_stop+0x2c>)
   1fa1c:	222a      	movs	r2, #42	; 0x2a
   1fa1e:	f007 f9c3 	bl	26da8 <assert_print>
}
   1fa22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   1fa26:	4802      	ldr	r0, [pc, #8]	; (1fa30 <nrfx_clock_stop+0x28>)
   1fa28:	212a      	movs	r1, #42	; 0x2a
   1fa2a:	f007 b9b6 	b.w	26d9a <assert_post_action>
}
   1fa2e:	bd08      	pop	{r3, pc}
   1fa30:	0002c407 	.word	0x0002c407
   1fa34:	0002a576 	.word	0x0002a576

0001fa38 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1fa38:	4b01      	ldr	r3, [pc, #4]	; (1fa40 <nrfx_clock_init+0x8>)
   1fa3a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1fa3c:	4801      	ldr	r0, [pc, #4]	; (1fa44 <nrfx_clock_init+0xc>)
   1fa3e:	4770      	bx	lr
   1fa40:	20003ea0 	.word	0x20003ea0
   1fa44:	0bad0000 	.word	0x0bad0000

0001fa48 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1fa48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1fa4c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1fa50:	2a08      	cmp	r2, #8
   1fa52:	d106      	bne.n	1fa62 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1fa54:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1fa58:	2b05      	cmp	r3, #5
   1fa5a:	d802      	bhi.n	1fa62 <nrf52_errata_103+0x1a>
   1fa5c:	4a02      	ldr	r2, [pc, #8]	; (1fa68 <nrf52_errata_103+0x20>)
   1fa5e:	5cd0      	ldrb	r0, [r2, r3]
   1fa60:	4770      	bx	lr
        return false;
   1fa62:	2000      	movs	r0, #0
}
   1fa64:	4770      	bx	lr
   1fa66:	bf00      	nop
   1fa68:	0002c44a 	.word	0x0002c44a

0001fa6c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1fa6c:	4a02      	ldr	r2, [pc, #8]	; (1fa78 <nvmc_wait+0xc>)
   1fa6e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1fa72:	2b00      	cmp	r3, #0
   1fa74:	d0fb      	beq.n	1fa6e <nvmc_wait+0x2>
}
   1fa76:	4770      	bx	lr
   1fa78:	4001e000 	.word	0x4001e000

0001fa7c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1fa7c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1fa7e:	f009 fbac 	bl	291da <nrf52_errata_136>
   1fa82:	b140      	cbz	r0, 1fa96 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1fa84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fa88:	2200      	movs	r2, #0
   1fa8a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1fa8e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1fa92:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1fa96:	f009 fba0 	bl	291da <nrf52_errata_136>
   1fa9a:	2800      	cmp	r0, #0
   1fa9c:	d046      	beq.n	1fb2c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1fa9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1faa2:	4b60      	ldr	r3, [pc, #384]	; (1fc24 <SystemInit+0x1a8>)
   1faa4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1faa8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1faac:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1fab0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1fab4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1fab8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1fabc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1fac0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1fac4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1fac8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1facc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1fad0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1fad4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1fad8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1fadc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1fae0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1fae4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1fae8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1faec:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1faf0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1faf4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1faf8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1fafc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1fb00:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1fb04:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1fb08:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1fb0c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1fb10:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1fb14:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1fb18:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1fb1c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1fb20:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1fb24:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1fb28:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1fb2c:	f7ff ff8c 	bl	1fa48 <nrf52_errata_103>
   1fb30:	b118      	cbz	r0, 1fb3a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1fb32:	4b3d      	ldr	r3, [pc, #244]	; (1fc28 <SystemInit+0x1ac>)
   1fb34:	4a3d      	ldr	r2, [pc, #244]	; (1fc2c <SystemInit+0x1b0>)
   1fb36:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1fb3a:	f7ff ff85 	bl	1fa48 <nrf52_errata_103>
   1fb3e:	b118      	cbz	r0, 1fb48 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1fb40:	4b3b      	ldr	r3, [pc, #236]	; (1fc30 <SystemInit+0x1b4>)
   1fb42:	22fb      	movs	r2, #251	; 0xfb
   1fb44:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1fb48:	f7ff ff7e 	bl	1fa48 <nrf52_errata_103>
   1fb4c:	b170      	cbz	r0, 1fb6c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1fb4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1fb52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fb56:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1fb5a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1fb5e:	f022 020f 	bic.w	r2, r2, #15
   1fb62:	f003 030f 	and.w	r3, r3, #15
   1fb66:	4313      	orrs	r3, r2
   1fb68:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1fb6c:	f7ff ff6c 	bl	1fa48 <nrf52_errata_103>
   1fb70:	b120      	cbz	r0, 1fb7c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1fb72:	4b30      	ldr	r3, [pc, #192]	; (1fc34 <SystemInit+0x1b8>)
   1fb74:	f44f 7200 	mov.w	r2, #512	; 0x200
   1fb78:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1fb7c:	f009 fb2d 	bl	291da <nrf52_errata_136>
   1fb80:	b148      	cbz	r0, 1fb96 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1fb82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fb86:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1fb8a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1fb8c:	bf44      	itt	mi
   1fb8e:	f06f 0201 	mvnmi.w	r2, #1
   1fb92:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1fb96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1fb9a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1fb9e:	2a08      	cmp	r2, #8
   1fba0:	d10e      	bne.n	1fbc0 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1fba2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1fba6:	2b05      	cmp	r3, #5
   1fba8:	d802      	bhi.n	1fbb0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1fbaa:	4a23      	ldr	r2, [pc, #140]	; (1fc38 <SystemInit+0x1bc>)
   1fbac:	5cd3      	ldrb	r3, [r2, r3]
   1fbae:	b13b      	cbz	r3, 1fbc0 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1fbb0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1fbb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1fbb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fbbc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1fbc0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1fbc4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1fbc8:	2a00      	cmp	r2, #0
   1fbca:	db03      	blt.n	1fbd4 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1fbcc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1fbd0:	2b00      	cmp	r3, #0
   1fbd2:	da22      	bge.n	1fc1a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1fbd4:	4919      	ldr	r1, [pc, #100]	; (1fc3c <SystemInit+0x1c0>)
   1fbd6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1fbd8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1fbdc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1fbe0:	2412      	movs	r4, #18
    nvmc_wait();
   1fbe2:	f7ff ff43 	bl	1fa6c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1fbe6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1fbea:	f7ff ff3f 	bl	1fa6c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1fbee:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1fbf2:	f7ff ff3b 	bl	1fa6c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1fbf6:	2300      	movs	r3, #0
   1fbf8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1fbfc:	f7ff ff36 	bl	1fa6c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1fc00:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1fc04:	490e      	ldr	r1, [pc, #56]	; (1fc40 <SystemInit+0x1c4>)
   1fc06:	4b0f      	ldr	r3, [pc, #60]	; (1fc44 <SystemInit+0x1c8>)
   1fc08:	68ca      	ldr	r2, [r1, #12]
   1fc0a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1fc0e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1fc10:	60cb      	str	r3, [r1, #12]
   1fc12:	f3bf 8f4f 	dsb	sy
    __NOP();
   1fc16:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1fc18:	e7fd      	b.n	1fc16 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1fc1a:	4b0b      	ldr	r3, [pc, #44]	; (1fc48 <SystemInit+0x1cc>)
   1fc1c:	4a0b      	ldr	r2, [pc, #44]	; (1fc4c <SystemInit+0x1d0>)
   1fc1e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1fc20:	bd10      	pop	{r4, pc}
   1fc22:	bf00      	nop
   1fc24:	4000c000 	.word	0x4000c000
   1fc28:	40005000 	.word	0x40005000
   1fc2c:	00038148 	.word	0x00038148
   1fc30:	4000f000 	.word	0x4000f000
   1fc34:	40029000 	.word	0x40029000
   1fc38:	0002c444 	.word	0x0002c444
   1fc3c:	4001e000 	.word	0x4001e000
   1fc40:	e000ed00 	.word	0xe000ed00
   1fc44:	05fa0004 	.word	0x05fa0004
   1fc48:	200007e0 	.word	0x200007e0
   1fc4c:	03d09000 	.word	0x03d09000

0001fc50 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1fc50:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1fc52:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1fc54:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1fc56:	fab2 f382 	clz	r3, r2
   1fc5a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1fc5e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   1fc60:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1fc62:	d014      	beq.n	1fc8e <nrfx_flag32_alloc+0x3e>
   1fc64:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1fc68:	fa05 f303 	lsl.w	r3, r5, r3
   1fc6c:	ea22 0303 	bic.w	r3, r2, r3
   1fc70:	e850 6f00 	ldrex	r6, [r0]
   1fc74:	4296      	cmp	r6, r2
   1fc76:	d104      	bne.n	1fc82 <nrfx_flag32_alloc+0x32>
   1fc78:	e840 3c00 	strex	ip, r3, [r0]
   1fc7c:	f1bc 0f00 	cmp.w	ip, #0
   1fc80:	d1f6      	bne.n	1fc70 <nrfx_flag32_alloc+0x20>
   1fc82:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1fc86:	d1e5      	bne.n	1fc54 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1fc88:	4802      	ldr	r0, [pc, #8]	; (1fc94 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1fc8a:	700c      	strb	r4, [r1, #0]
}
   1fc8c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1fc8e:	4802      	ldr	r0, [pc, #8]	; (1fc98 <nrfx_flag32_alloc+0x48>)
   1fc90:	e7fc      	b.n	1fc8c <nrfx_flag32_alloc+0x3c>
   1fc92:	bf00      	nop
   1fc94:	0bad0000 	.word	0x0bad0000
   1fc98:	0bad0002 	.word	0x0bad0002

0001fc9c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1fc9c:	6803      	ldr	r3, [r0, #0]
   1fc9e:	40cb      	lsrs	r3, r1
   1fca0:	07db      	lsls	r3, r3, #31
{
   1fca2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1fca4:	d415      	bmi.n	1fcd2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1fca6:	2301      	movs	r3, #1
   1fca8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1fcac:	6803      	ldr	r3, [r0, #0]
   1fcae:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1fcb2:	ea41 0203 	orr.w	r2, r1, r3
   1fcb6:	e850 4f00 	ldrex	r4, [r0]
   1fcba:	429c      	cmp	r4, r3
   1fcbc:	d104      	bne.n	1fcc8 <nrfx_flag32_free+0x2c>
   1fcbe:	e840 2c00 	strex	ip, r2, [r0]
   1fcc2:	f1bc 0f00 	cmp.w	ip, #0
   1fcc6:	d1f6      	bne.n	1fcb6 <nrfx_flag32_free+0x1a>
   1fcc8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1fccc:	d1ee      	bne.n	1fcac <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1fcce:	4802      	ldr	r0, [pc, #8]	; (1fcd8 <nrfx_flag32_free+0x3c>)
}
   1fcd0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1fcd2:	4802      	ldr	r0, [pc, #8]	; (1fcdc <nrfx_flag32_free+0x40>)
   1fcd4:	e7fc      	b.n	1fcd0 <nrfx_flag32_free+0x34>
   1fcd6:	bf00      	nop
   1fcd8:	0bad0000 	.word	0x0bad0000
   1fcdc:	0bad0004 	.word	0x0bad0004

0001fce0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1fce0:	4b03      	ldr	r3, [pc, #12]	; (1fcf0 <pin_in_use_by_te+0x10>)
   1fce2:	3008      	adds	r0, #8
   1fce4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1fce8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1fcec:	4770      	bx	lr
   1fcee:	bf00      	nop
   1fcf0:	200007e4 	.word	0x200007e4

0001fcf4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1fcf4:	4b04      	ldr	r3, [pc, #16]	; (1fd08 <pin_has_trigger+0x14>)
   1fcf6:	3008      	adds	r0, #8
   1fcf8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1fcfc:	f010 001c 	ands.w	r0, r0, #28
   1fd00:	bf18      	it	ne
   1fd02:	2001      	movne	r0, #1
   1fd04:	4770      	bx	lr
   1fd06:	bf00      	nop
   1fd08:	200007e4 	.word	0x200007e4

0001fd0c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fd0c:	4b03      	ldr	r3, [pc, #12]	; (1fd1c <pin_is_output+0x10>)
   1fd0e:	3008      	adds	r0, #8
   1fd10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1fd14:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1fd18:	4770      	bx	lr
   1fd1a:	bf00      	nop
   1fd1c:	200007e4 	.word	0x200007e4

0001fd20 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1fd20:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fd22:	f100 0308 	add.w	r3, r0, #8
   1fd26:	4c0c      	ldr	r4, [pc, #48]	; (1fd58 <call_handler+0x38>)
   1fd28:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1fd2c:	05da      	lsls	r2, r3, #23
{
   1fd2e:	4605      	mov	r5, r0
   1fd30:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fd32:	d507      	bpl.n	1fd44 <call_handler+0x24>
   1fd34:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1fd38:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1fd3c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1fd40:	6852      	ldr	r2, [r2, #4]
   1fd42:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1fd44:	68a3      	ldr	r3, [r4, #8]
   1fd46:	b12b      	cbz	r3, 1fd54 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1fd48:	68e2      	ldr	r2, [r4, #12]
   1fd4a:	4631      	mov	r1, r6
   1fd4c:	4628      	mov	r0, r5
    }
}
   1fd4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1fd52:	4718      	bx	r3
}
   1fd54:	bd70      	pop	{r4, r5, r6, pc}
   1fd56:	bf00      	nop
   1fd58:	200007e4 	.word	0x200007e4

0001fd5c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fd5c:	4a19      	ldr	r2, [pc, #100]	; (1fdc4 <release_handler+0x68>)
   1fd5e:	3008      	adds	r0, #8
{
   1fd60:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fd62:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1fd66:	05d9      	lsls	r1, r3, #23
   1fd68:	d51d      	bpl.n	1fda6 <release_handler+0x4a>
   1fd6a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1fd6e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1fd72:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1fd76:	f102 0410 	add.w	r4, r2, #16
   1fd7a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1fd7c:	f834 3b02 	ldrh.w	r3, [r4], #2
   1fd80:	f413 7f80 	tst.w	r3, #256	; 0x100
   1fd84:	d003      	beq.n	1fd8e <release_handler+0x32>
   1fd86:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1fd8a:	4299      	cmp	r1, r3
   1fd8c:	d00b      	beq.n	1fda6 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1fd8e:	3001      	adds	r0, #1
   1fd90:	2830      	cmp	r0, #48	; 0x30
   1fd92:	d1f3      	bne.n	1fd7c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1fd94:	2300      	movs	r3, #0
   1fd96:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1fd9a:	480b      	ldr	r0, [pc, #44]	; (1fdc8 <release_handler+0x6c>)
   1fd9c:	f7ff ff7e 	bl	1fc9c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1fda0:	4b0a      	ldr	r3, [pc, #40]	; (1fdcc <release_handler+0x70>)
   1fda2:	4298      	cmp	r0, r3
   1fda4:	d100      	bne.n	1fda8 <release_handler+0x4c>
}
   1fda6:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1fda8:	4909      	ldr	r1, [pc, #36]	; (1fdd0 <release_handler+0x74>)
   1fdaa:	480a      	ldr	r0, [pc, #40]	; (1fdd4 <release_handler+0x78>)
   1fdac:	f44f 7299 	mov.w	r2, #306	; 0x132
   1fdb0:	f006 fffa 	bl	26da8 <assert_print>
}
   1fdb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1fdb8:	4805      	ldr	r0, [pc, #20]	; (1fdd0 <release_handler+0x74>)
   1fdba:	f44f 7199 	mov.w	r1, #306	; 0x132
   1fdbe:	f006 bfec 	b.w	26d9a <assert_post_action>
   1fdc2:	bf00      	nop
   1fdc4:	200007e4 	.word	0x200007e4
   1fdc8:	20000858 	.word	0x20000858
   1fdcc:	0bad0000 	.word	0x0bad0000
   1fdd0:	0002c450 	.word	0x0002c450
   1fdd4:	0002a576 	.word	0x0002a576

0001fdd8 <pin_handler_trigger_uninit>:
{
   1fdd8:	b538      	push	{r3, r4, r5, lr}
   1fdda:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1fddc:	f7ff ff80 	bl	1fce0 <pin_in_use_by_te>
   1fde0:	4c09      	ldr	r4, [pc, #36]	; (1fe08 <pin_handler_trigger_uninit+0x30>)
   1fde2:	f102 0508 	add.w	r5, r2, #8
   1fde6:	b140      	cbz	r0, 1fdfa <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fde8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1fdec:	4907      	ldr	r1, [pc, #28]	; (1fe0c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1fdee:	0b5b      	lsrs	r3, r3, #13
   1fdf0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1fdf4:	2000      	movs	r0, #0
   1fdf6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1fdfa:	4610      	mov	r0, r2
   1fdfc:	f7ff ffae 	bl	1fd5c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1fe00:	2300      	movs	r3, #0
   1fe02:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1fe06:	bd38      	pop	{r3, r4, r5, pc}
   1fe08:	200007e4 	.word	0x200007e4
   1fe0c:	40006000 	.word	0x40006000

0001fe10 <nrf_gpio_pin_port_decode>:
{
   1fe10:	b510      	push	{r4, lr}
   1fe12:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fe14:	6800      	ldr	r0, [r0, #0]
   1fe16:	f009 f9ec 	bl	291f2 <nrf_gpio_pin_present_check>
   1fe1a:	b950      	cbnz	r0, 1fe32 <nrf_gpio_pin_port_decode+0x22>
   1fe1c:	4911      	ldr	r1, [pc, #68]	; (1fe64 <nrf_gpio_pin_port_decode+0x54>)
   1fe1e:	4812      	ldr	r0, [pc, #72]	; (1fe68 <nrf_gpio_pin_port_decode+0x58>)
   1fe20:	f240 2247 	movw	r2, #583	; 0x247
   1fe24:	f006 ffc0 	bl	26da8 <assert_print>
   1fe28:	480e      	ldr	r0, [pc, #56]	; (1fe64 <nrf_gpio_pin_port_decode+0x54>)
   1fe2a:	f240 2147 	movw	r1, #583	; 0x247
   1fe2e:	f006 ffb4 	bl	26d9a <assert_post_action>
    uint32_t pin_number = *p_pin;
   1fe32:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1fe34:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fe38:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1fe3a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fe3c:	d00c      	beq.n	1fe58 <nrf_gpio_pin_port_decode+0x48>
   1fe3e:	2b01      	cmp	r3, #1
   1fe40:	d00d      	beq.n	1fe5e <nrf_gpio_pin_port_decode+0x4e>
            NRFX_ASSERT(0);
   1fe42:	4908      	ldr	r1, [pc, #32]	; (1fe64 <nrf_gpio_pin_port_decode+0x54>)
   1fe44:	4808      	ldr	r0, [pc, #32]	; (1fe68 <nrf_gpio_pin_port_decode+0x58>)
   1fe46:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1fe4a:	f006 ffad 	bl	26da8 <assert_print>
   1fe4e:	4805      	ldr	r0, [pc, #20]	; (1fe64 <nrf_gpio_pin_port_decode+0x54>)
   1fe50:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1fe54:	f006 ffa1 	bl	26d9a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fe58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1fe5c:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   1fe5e:	4803      	ldr	r0, [pc, #12]	; (1fe6c <nrf_gpio_pin_port_decode+0x5c>)
   1fe60:	e7fc      	b.n	1fe5c <nrf_gpio_pin_port_decode+0x4c>
   1fe62:	bf00      	nop
   1fe64:	0002bf66 	.word	0x0002bf66
   1fe68:	0002a576 	.word	0x0002a576
   1fe6c:	50000300 	.word	0x50000300

0001fe70 <nrfx_gpiote_input_configure>:
{
   1fe70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe72:	4604      	mov	r4, r0
   1fe74:	b085      	sub	sp, #20
   1fe76:	4617      	mov	r7, r2
   1fe78:	461d      	mov	r5, r3
    if (p_input_config)
   1fe7a:	b1f1      	cbz	r1, 1feba <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   1fe7c:	f009 f9ca 	bl	29214 <pin_is_task_output>
   1fe80:	b110      	cbz	r0, 1fe88 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   1fe82:	484d      	ldr	r0, [pc, #308]	; (1ffb8 <nrfx_gpiote_input_configure+0x148>)
}
   1fe84:	b005      	add	sp, #20
   1fe86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1fe88:	460b      	mov	r3, r1
   1fe8a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1fe8e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1fe92:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1fe96:	f10d 020f 	add.w	r2, sp, #15
   1fe9a:	f10d 010e 	add.w	r1, sp, #14
   1fe9e:	4620      	mov	r0, r4
   1fea0:	f009 f9c7 	bl	29232 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1fea4:	4a45      	ldr	r2, [pc, #276]	; (1ffbc <nrfx_gpiote_input_configure+0x14c>)
   1fea6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1feaa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1feae:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1feb2:	f043 0301 	orr.w	r3, r3, #1
   1feb6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1feba:	b197      	cbz	r7, 1fee2 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   1febc:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1febe:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1fec0:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1fec2:	f7ff ff23 	bl	1fd0c <pin_is_output>
   1fec6:	b180      	cbz	r0, 1feea <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   1fec8:	2a00      	cmp	r2, #0
   1feca:	d1da      	bne.n	1fe82 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1fecc:	4a3b      	ldr	r2, [pc, #236]	; (1ffbc <nrfx_gpiote_input_configure+0x14c>)
   1fece:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1fed2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1fed6:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1feda:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1fede:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1fee2:	2d00      	cmp	r5, #0
   1fee4:	d13d      	bne.n	1ff62 <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
   1fee6:	4836      	ldr	r0, [pc, #216]	; (1ffc0 <nrfx_gpiote_input_configure+0x150>)
   1fee8:	e7cc      	b.n	1fe84 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1feea:	4f34      	ldr	r7, [pc, #208]	; (1ffbc <nrfx_gpiote_input_configure+0x14c>)
   1feec:	f104 0c08 	add.w	ip, r4, #8
   1fef0:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
   1fef4:	f021 0120 	bic.w	r1, r1, #32
   1fef8:	04c9      	lsls	r1, r1, #19
   1fefa:	0cc9      	lsrs	r1, r1, #19
   1fefc:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
   1ff00:	2a00      	cmp	r2, #0
   1ff02:	d0e3      	beq.n	1fecc <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   1ff04:	2e03      	cmp	r6, #3
   1ff06:	d8bc      	bhi.n	1fe82 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1ff08:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1ff0a:	b92e      	cbnz	r6, 1ff18 <nrfx_gpiote_input_configure+0xa8>
   1ff0c:	4a2d      	ldr	r2, [pc, #180]	; (1ffc4 <nrfx_gpiote_input_configure+0x154>)
   1ff0e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1ff12:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1ff16:	e7d9      	b.n	1fecc <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1ff18:	009a      	lsls	r2, r3, #2
   1ff1a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ff1e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1ff22:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
   1ff26:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ff2a:	f020 0003 	bic.w	r0, r0, #3
   1ff2e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ff32:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ff36:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1ff3a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1ff3e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ff42:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1ff46:	0220      	lsls	r0, r4, #8
   1ff48:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1ff4c:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   1ff50:	ea40 000e 	orr.w	r0, r0, lr
   1ff54:	f041 0120 	orr.w	r1, r1, #32
   1ff58:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
   1ff5c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1ff60:	e7b4      	b.n	1fecc <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1ff62:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1ff66:	4620      	mov	r0, r4
   1ff68:	f7ff fef8 	bl	1fd5c <release_handler>
    if (!handler)
   1ff6c:	2e00      	cmp	r6, #0
   1ff6e:	d0ba      	beq.n	1fee6 <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ff70:	4d12      	ldr	r5, [pc, #72]	; (1ffbc <nrfx_gpiote_input_configure+0x14c>)
   1ff72:	682b      	ldr	r3, [r5, #0]
   1ff74:	429e      	cmp	r6, r3
   1ff76:	d104      	bne.n	1ff82 <nrfx_gpiote_input_configure+0x112>
   1ff78:	686b      	ldr	r3, [r5, #4]
   1ff7a:	429f      	cmp	r7, r3
   1ff7c:	d101      	bne.n	1ff82 <nrfx_gpiote_input_configure+0x112>
   1ff7e:	2200      	movs	r2, #0
   1ff80:	e00a      	b.n	1ff98 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1ff82:	4811      	ldr	r0, [pc, #68]	; (1ffc8 <nrfx_gpiote_input_configure+0x158>)
   1ff84:	f10d 010f 	add.w	r1, sp, #15
   1ff88:	f7ff fe62 	bl	1fc50 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1ff8c:	4b0c      	ldr	r3, [pc, #48]	; (1ffc0 <nrfx_gpiote_input_configure+0x150>)
   1ff8e:	4298      	cmp	r0, r3
   1ff90:	f47f af78 	bne.w	1fe84 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   1ff94:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1ff98:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1ff9c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ffa0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1ffa2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ffa4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1ffa8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1ffac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1ffb0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1ffb4:	e797      	b.n	1fee6 <nrfx_gpiote_input_configure+0x76>
   1ffb6:	bf00      	nop
   1ffb8:	0bad0004 	.word	0x0bad0004
   1ffbc:	200007e4 	.word	0x200007e4
   1ffc0:	0bad0000 	.word	0x0bad0000
   1ffc4:	40006000 	.word	0x40006000
   1ffc8:	20000858 	.word	0x20000858

0001ffcc <nrfx_gpiote_output_configure>:
{
   1ffcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffce:	4604      	mov	r4, r0
   1ffd0:	b085      	sub	sp, #20
   1ffd2:	4615      	mov	r5, r2
    if (p_config)
   1ffd4:	b321      	cbz	r1, 20020 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1ffd6:	f7ff fe99 	bl	1fd0c <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1ffda:	b920      	cbnz	r0, 1ffe6 <nrfx_gpiote_output_configure+0x1a>
   1ffdc:	4620      	mov	r0, r4
   1ffde:	f7ff fe7f 	bl	1fce0 <pin_in_use_by_te>
   1ffe2:	2800      	cmp	r0, #0
   1ffe4:	d15e      	bne.n	200a4 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1ffe6:	4620      	mov	r0, r4
   1ffe8:	f7ff fe84 	bl	1fcf4 <pin_has_trigger>
   1ffec:	b110      	cbz	r0, 1fff4 <nrfx_gpiote_output_configure+0x28>
   1ffee:	784b      	ldrb	r3, [r1, #1]
   1fff0:	2b01      	cmp	r3, #1
   1fff2:	d057      	beq.n	200a4 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1fff4:	2301      	movs	r3, #1
   1fff6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1fffa:	2300      	movs	r3, #0
   1fffc:	e9cd 1300 	strd	r1, r3, [sp]
   20000:	1c4a      	adds	r2, r1, #1
   20002:	1c8b      	adds	r3, r1, #2
   20004:	4620      	mov	r0, r4
   20006:	f10d 010f 	add.w	r1, sp, #15
   2000a:	f009 f912 	bl	29232 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2000e:	4a26      	ldr	r2, [pc, #152]	; (200a8 <nrfx_gpiote_output_configure+0xdc>)
   20010:	f104 0108 	add.w	r1, r4, #8
   20014:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20018:	f043 0303 	orr.w	r3, r3, #3
   2001c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   20020:	b915      	cbnz	r5, 20028 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   20022:	4822      	ldr	r0, [pc, #136]	; (200ac <nrfx_gpiote_output_configure+0xe0>)
}
   20024:	b005      	add	sp, #20
   20026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   20028:	4620      	mov	r0, r4
   2002a:	f7ff fe6f 	bl	1fd0c <pin_is_output>
        if (pin_is_input(pin))
   2002e:	b3c8      	cbz	r0, 200a4 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20030:	4e1d      	ldr	r6, [pc, #116]	; (200a8 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   20032:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20036:	f104 0708 	add.w	r7, r4, #8
   2003a:	4661      	mov	r1, ip
   2003c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   20040:	0089      	lsls	r1, r1, #2
   20042:	f020 0020 	bic.w	r0, r0, #32
   20046:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2004a:	04c0      	lsls	r0, r0, #19
   2004c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   20050:	0cc0      	lsrs	r0, r0, #19
   20052:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   20056:	2300      	movs	r3, #0
   20058:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2005c:	786a      	ldrb	r2, [r5, #1]
   2005e:	2a00      	cmp	r2, #0
   20060:	d0df      	beq.n	20022 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   20062:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   20066:	78ad      	ldrb	r5, [r5, #2]
   20068:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   2006c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20070:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20074:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   20078:	0223      	lsls	r3, r4, #8
   2007a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2007e:	0412      	lsls	r2, r2, #16
   20080:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20084:	ea43 030e 	orr.w	r3, r3, lr
   20088:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2008a:	052a      	lsls	r2, r5, #20
   2008c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20090:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20094:	4313      	orrs	r3, r2
   20096:	f040 0020 	orr.w	r0, r0, #32
   2009a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2009e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   200a2:	e7be      	b.n	20022 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   200a4:	4802      	ldr	r0, [pc, #8]	; (200b0 <nrfx_gpiote_output_configure+0xe4>)
   200a6:	e7bd      	b.n	20024 <nrfx_gpiote_output_configure+0x58>
   200a8:	200007e4 	.word	0x200007e4
   200ac:	0bad0000 	.word	0x0bad0000
   200b0:	0bad0004 	.word	0x0bad0004

000200b4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   200b4:	4b01      	ldr	r3, [pc, #4]	; (200bc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   200b6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   200ba:	4770      	bx	lr
   200bc:	200007e4 	.word	0x200007e4

000200c0 <nrfx_gpiote_channel_get>:
{
   200c0:	b538      	push	{r3, r4, r5, lr}
   200c2:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   200c4:	460d      	mov	r5, r1
   200c6:	b951      	cbnz	r1, 200de <nrfx_gpiote_channel_get+0x1e>
   200c8:	490c      	ldr	r1, [pc, #48]	; (200fc <nrfx_gpiote_channel_get+0x3c>)
   200ca:	480d      	ldr	r0, [pc, #52]	; (20100 <nrfx_gpiote_channel_get+0x40>)
   200cc:	f240 2235 	movw	r2, #565	; 0x235
   200d0:	f006 fe6a 	bl	26da8 <assert_print>
   200d4:	4809      	ldr	r0, [pc, #36]	; (200fc <nrfx_gpiote_channel_get+0x3c>)
   200d6:	f240 2135 	movw	r1, #565	; 0x235
   200da:	f006 fe5e 	bl	26d9a <assert_post_action>
    if (pin_in_use_by_te(pin))
   200de:	4620      	mov	r0, r4
   200e0:	f7ff fdfe 	bl	1fce0 <pin_in_use_by_te>
   200e4:	b138      	cbz	r0, 200f6 <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   200e6:	4b07      	ldr	r3, [pc, #28]	; (20104 <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
   200e8:	4807      	ldr	r0, [pc, #28]	; (20108 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   200ea:	3408      	adds	r4, #8
   200ec:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   200f0:	0b5b      	lsrs	r3, r3, #13
   200f2:	702b      	strb	r3, [r5, #0]
}
   200f4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   200f6:	4805      	ldr	r0, [pc, #20]	; (2010c <nrfx_gpiote_channel_get+0x4c>)
   200f8:	e7fc      	b.n	200f4 <nrfx_gpiote_channel_get+0x34>
   200fa:	bf00      	nop
   200fc:	0002c450 	.word	0x0002c450
   20100:	0002a576 	.word	0x0002a576
   20104:	200007e4 	.word	0x200007e4
   20108:	0bad0000 	.word	0x0bad0000
   2010c:	0bad0004 	.word	0x0bad0004

00020110 <nrfx_gpiote_init>:
{
   20110:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20112:	4c0f      	ldr	r4, [pc, #60]	; (20150 <nrfx_gpiote_init+0x40>)
   20114:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   20118:	b9bd      	cbnz	r5, 2014a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2011a:	2260      	movs	r2, #96	; 0x60
   2011c:	4629      	mov	r1, r5
   2011e:	f104 0010 	add.w	r0, r4, #16
   20122:	f007 f91f 	bl	27364 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   20126:	2006      	movs	r0, #6
   20128:	f7f6 ffb8 	bl	1709c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2012c:	4b09      	ldr	r3, [pc, #36]	; (20154 <nrfx_gpiote_init+0x44>)
    return err_code;
   2012e:	480a      	ldr	r0, [pc, #40]	; (20158 <nrfx_gpiote_init+0x48>)
   20130:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   20134:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   20138:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2013c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20140:	2301      	movs	r3, #1
   20142:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   20146:	6763      	str	r3, [r4, #116]	; 0x74
}
   20148:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2014a:	4804      	ldr	r0, [pc, #16]	; (2015c <nrfx_gpiote_init+0x4c>)
   2014c:	e7fc      	b.n	20148 <nrfx_gpiote_init+0x38>
   2014e:	bf00      	nop
   20150:	200007e4 	.word	0x200007e4
   20154:	40006000 	.word	0x40006000
   20158:	0bad0000 	.word	0x0bad0000
   2015c:	0bad0005 	.word	0x0bad0005

00020160 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   20160:	4b03      	ldr	r3, [pc, #12]	; (20170 <nrfx_gpiote_is_init+0x10>)
   20162:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   20166:	3800      	subs	r0, #0
   20168:	bf18      	it	ne
   2016a:	2001      	movne	r0, #1
   2016c:	4770      	bx	lr
   2016e:	bf00      	nop
   20170:	200007e4 	.word	0x200007e4

00020174 <nrfx_gpiote_channel_free>:
{
   20174:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   20176:	4801      	ldr	r0, [pc, #4]	; (2017c <nrfx_gpiote_channel_free+0x8>)
   20178:	f7ff bd90 	b.w	1fc9c <nrfx_flag32_free>
   2017c:	20000854 	.word	0x20000854

00020180 <nrfx_gpiote_channel_alloc>:
{
   20180:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   20182:	4801      	ldr	r0, [pc, #4]	; (20188 <nrfx_gpiote_channel_alloc+0x8>)
   20184:	f7ff bd64 	b.w	1fc50 <nrfx_flag32_alloc>
   20188:	20000854 	.word	0x20000854

0002018c <nrfx_gpiote_trigger_enable>:
{
   2018c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2018e:	4604      	mov	r4, r0
   20190:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   20192:	f7ff fdaf 	bl	1fcf4 <pin_has_trigger>
   20196:	b950      	cbnz	r0, 201ae <nrfx_gpiote_trigger_enable+0x22>
   20198:	492f      	ldr	r1, [pc, #188]	; (20258 <nrfx_gpiote_trigger_enable+0xcc>)
   2019a:	4830      	ldr	r0, [pc, #192]	; (2025c <nrfx_gpiote_trigger_enable+0xd0>)
   2019c:	f240 32df 	movw	r2, #991	; 0x3df
   201a0:	f006 fe02 	bl	26da8 <assert_print>
   201a4:	482c      	ldr	r0, [pc, #176]	; (20258 <nrfx_gpiote_trigger_enable+0xcc>)
   201a6:	f240 31df 	movw	r1, #991	; 0x3df
   201aa:	f006 fdf6 	bl	26d9a <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   201ae:	4620      	mov	r0, r4
   201b0:	f7ff fd96 	bl	1fce0 <pin_in_use_by_te>
   201b4:	4e2a      	ldr	r6, [pc, #168]	; (20260 <nrfx_gpiote_trigger_enable+0xd4>)
   201b6:	f104 0708 	add.w	r7, r4, #8
   201ba:	b318      	cbz	r0, 20204 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   201bc:	4620      	mov	r0, r4
   201be:	f7ff fda5 	bl	1fd0c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   201c2:	4602      	mov	r2, r0
   201c4:	b9f0      	cbnz	r0, 20204 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   201c6:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   201ca:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   201cc:	4608      	mov	r0, r1
   201ce:	f009 f82c 	bl	2922a <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   201d2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   201d6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   201da:	601a      	str	r2, [r3, #0]
   201dc:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   201de:	008b      	lsls	r3, r1, #2
   201e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   201e4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   201e8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   201ec:	f042 0201 	orr.w	r2, r2, #1
   201f0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   201f4:	b125      	cbz	r5, 20200 <nrfx_gpiote_trigger_enable+0x74>
    p_reg->INTENSET = mask;
   201f6:	4a1b      	ldr	r2, [pc, #108]	; (20264 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   201f8:	2301      	movs	r3, #1
   201fa:	408b      	lsls	r3, r1
   201fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20200:	b003      	add	sp, #12
   20202:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   20204:	b955      	cbnz	r5, 2021c <nrfx_gpiote_trigger_enable+0x90>
   20206:	4914      	ldr	r1, [pc, #80]	; (20258 <nrfx_gpiote_trigger_enable+0xcc>)
   20208:	4814      	ldr	r0, [pc, #80]	; (2025c <nrfx_gpiote_trigger_enable+0xd0>)
   2020a:	f240 32ee 	movw	r2, #1006	; 0x3ee
   2020e:	f006 fdcb 	bl	26da8 <assert_print>
   20212:	4811      	ldr	r0, [pc, #68]	; (20258 <nrfx_gpiote_trigger_enable+0xcc>)
   20214:	f240 31ee 	movw	r1, #1006	; 0x3ee
   20218:	f006 fdbf 	bl	26d9a <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2021c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   20220:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20224:	2b04      	cmp	r3, #4
   20226:	d012      	beq.n	2024e <nrfx_gpiote_trigger_enable+0xc2>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   20228:	2b05      	cmp	r3, #5
   2022a:	d012      	beq.n	20252 <nrfx_gpiote_trigger_enable+0xc6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2022c:	a801      	add	r0, sp, #4
   2022e:	9401      	str	r4, [sp, #4]
   20230:	f7ff fdee 	bl	1fe10 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20234:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   20236:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2023a:	40d9      	lsrs	r1, r3
   2023c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20240:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20242:	4620      	mov	r0, r4
}
   20244:	b003      	add	sp, #12
   20246:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2024a:	f009 b83d 	b.w	292c8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2024e:	2103      	movs	r1, #3
   20250:	e7f7      	b.n	20242 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   20252:	2102      	movs	r1, #2
   20254:	e7f5      	b.n	20242 <nrfx_gpiote_trigger_enable+0xb6>
   20256:	bf00      	nop
   20258:	0002c450 	.word	0x0002c450
   2025c:	0002a576 	.word	0x0002a576
   20260:	200007e4 	.word	0x200007e4
   20264:	40006000 	.word	0x40006000

00020268 <nrfx_gpiote_trigger_disable>:
{
   20268:	b508      	push	{r3, lr}
   2026a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2026c:	f7ff fd38 	bl	1fce0 <pin_in_use_by_te>
   20270:	b1c8      	cbz	r0, 202a6 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   20272:	4610      	mov	r0, r2
   20274:	f7ff fd4a 	bl	1fd0c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20278:	b9a8      	cbnz	r0, 202a6 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2027a:	3208      	adds	r2, #8
   2027c:	4b0d      	ldr	r3, [pc, #52]	; (202b4 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   2027e:	490e      	ldr	r1, [pc, #56]	; (202b8 <nrfx_gpiote_trigger_disable+0x50>)
   20280:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20284:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20286:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20288:	409a      	lsls	r2, r3
   2028a:	009b      	lsls	r3, r3, #2
   2028c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20290:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20294:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20298:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2029c:	f022 0203 	bic.w	r2, r2, #3
   202a0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   202a4:	bd08      	pop	{r3, pc}
   202a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   202aa:	2100      	movs	r1, #0
   202ac:	4610      	mov	r0, r2
   202ae:	f009 b80b 	b.w	292c8 <nrf_gpio_cfg_sense_set>
   202b2:	bf00      	nop
   202b4:	200007e4 	.word	0x200007e4
   202b8:	40006000 	.word	0x40006000

000202bc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   202bc:	4b0e      	ldr	r3, [pc, #56]	; (202f8 <nrfx_gpiote_pin_uninit+0x3c>)
   202be:	f100 0208 	add.w	r2, r0, #8
{
   202c2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   202c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   202c8:	07db      	lsls	r3, r3, #31
{
   202ca:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   202cc:	d511      	bpl.n	202f2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   202ce:	f7ff ffcb 	bl	20268 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   202d2:	4620      	mov	r0, r4
   202d4:	f7ff fd80 	bl	1fdd8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   202d8:	a801      	add	r0, sp, #4
   202da:	9401      	str	r4, [sp, #4]
   202dc:	f7ff fd98 	bl	1fe10 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   202e0:	9b01      	ldr	r3, [sp, #4]
   202e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   202e6:	2202      	movs	r2, #2
   202e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   202ec:	4803      	ldr	r0, [pc, #12]	; (202fc <nrfx_gpiote_pin_uninit+0x40>)
}
   202ee:	b002      	add	sp, #8
   202f0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   202f2:	4803      	ldr	r0, [pc, #12]	; (20300 <nrfx_gpiote_pin_uninit+0x44>)
   202f4:	e7fb      	b.n	202ee <nrfx_gpiote_pin_uninit+0x32>
   202f6:	bf00      	nop
   202f8:	200007e4 	.word	0x200007e4
   202fc:	0bad0000 	.word	0x0bad0000
   20300:	0bad0004 	.word	0x0bad0004

00020304 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   20304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20308:	4b65      	ldr	r3, [pc, #404]	; (204a0 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   2030a:	4866      	ldr	r0, [pc, #408]	; (204a4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2030c:	4966      	ldr	r1, [pc, #408]	; (204a8 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
   2030e:	2600      	movs	r6, #0
{
   20310:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   20312:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20314:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20316:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20318:	b135      	cbz	r5, 20328 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2031a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   2031e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20320:	bf1e      	ittt	ne
   20322:	601c      	strne	r4, [r3, #0]
   20324:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   20326:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20328:	3304      	adds	r3, #4
   2032a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   2032c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20330:	d1f1      	bne.n	20316 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20332:	f8df 8170 	ldr.w	r8, [pc, #368]	; 204a4 <nrfx_gpiote_irq_handler+0x1a0>
   20336:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2033a:	2b00      	cmp	r3, #0
   2033c:	f000 8093 	beq.w	20466 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   20340:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20344:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20348:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2034a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2034e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   20352:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   20354:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   20358:	2700      	movs	r7, #0
            while (latch[i])
   2035a:	f10d 0910 	add.w	r9, sp, #16
   2035e:	017b      	lsls	r3, r7, #5
   20360:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   20362:	f04f 0a01 	mov.w	sl, #1
   20366:	e04b      	b.n	20400 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   20368:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2036a:	4a50      	ldr	r2, [pc, #320]	; (204ac <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   2036c:	fa94 f4a4 	rbit	r4, r4
   20370:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   20374:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20376:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2037a:	08e0      	lsrs	r0, r4, #3
   2037c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   20380:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   20382:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   20386:	fa0a fc02 	lsl.w	ip, sl, r2
   2038a:	f819 2000 	ldrb.w	r2, [r9, r0]
   2038e:	ea22 020c 	bic.w	r2, r2, ip
   20392:	0899      	lsrs	r1, r3, #2
   20394:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20398:	a803      	add	r0, sp, #12
   2039a:	f3c3 0582 	ubfx	r5, r3, #2, #3
   2039e:	9101      	str	r1, [sp, #4]
   203a0:	f7ff fd36 	bl	1fe10 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   203a4:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
   203a6:	9901      	ldr	r1, [sp, #4]
   203a8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   203ac:	074b      	lsls	r3, r1, #29
   203ae:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   203b2:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   203b4:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   203b8:	d529      	bpl.n	2040e <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
   203ba:	4659      	mov	r1, fp
   203bc:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   203be:	b2d5      	uxtb	r5, r2
   203c0:	f7ff fcae 	bl	1fd20 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   203c4:	a803      	add	r0, sp, #12
   203c6:	9403      	str	r4, [sp, #12]
   203c8:	f7ff fd22 	bl	1fe10 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   203cc:	9b03      	ldr	r3, [sp, #12]
   203ce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   203d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   203d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   203da:	429d      	cmp	r5, r3
   203dc:	d107      	bne.n	203ee <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   203de:	2100      	movs	r1, #0
   203e0:	4620      	mov	r0, r4
   203e2:	f008 ff71 	bl	292c8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   203e6:	4629      	mov	r1, r5
   203e8:	4620      	mov	r0, r4
   203ea:	f008 ff6d 	bl	292c8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   203ee:	a803      	add	r0, sp, #12
   203f0:	9403      	str	r4, [sp, #12]
   203f2:	f7ff fd0d 	bl	1fe10 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   203f6:	9b03      	ldr	r3, [sp, #12]
   203f8:	fa0a f303 	lsl.w	r3, sl, r3
   203fc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   20400:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   20404:	2c00      	cmp	r4, #0
   20406:	d1af      	bne.n	20368 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   20408:	b9cf      	cbnz	r7, 2043e <nrfx_gpiote_irq_handler+0x13a>
   2040a:	2701      	movs	r7, #1
   2040c:	e7a7      	b.n	2035e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2040e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20410:	bf0c      	ite	eq
   20412:	2103      	moveq	r1, #3
   20414:	2102      	movne	r1, #2
   20416:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20418:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2041a:	f008 ff55 	bl	292c8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2041e:	2d03      	cmp	r5, #3
   20420:	d004      	beq.n	2042c <nrfx_gpiote_irq_handler+0x128>
   20422:	9a01      	ldr	r2, [sp, #4]
   20424:	2a02      	cmp	r2, #2
   20426:	d106      	bne.n	20436 <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20428:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2042a:	d1e0      	bne.n	203ee <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   2042c:	4659      	mov	r1, fp
   2042e:	4620      	mov	r0, r4
   20430:	f7ff fc76 	bl	1fd20 <call_handler>
   20434:	e7db      	b.n	203ee <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20436:	2a03      	cmp	r2, #3
   20438:	d1d9      	bne.n	203ee <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2043a:	2d02      	cmp	r5, #2
   2043c:	e7f5      	b.n	2042a <nrfx_gpiote_irq_handler+0x126>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2043e:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   20442:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   20446:	491a      	ldr	r1, [pc, #104]	; (204b0 <nrfx_gpiote_irq_handler+0x1ac>)
   20448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2044c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20450:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   20452:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   20456:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   2045a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   2045c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   20460:	4313      	orrs	r3, r2
   20462:	f47f af79 	bne.w	20358 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   20466:	2401      	movs	r4, #1
    while (mask)
   20468:	b916      	cbnz	r6, 20470 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2046a:	b007      	add	sp, #28
   2046c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   20470:	fa96 f3a6 	rbit	r3, r6
   20474:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   20478:	fa04 f203 	lsl.w	r2, r4, r3
   2047c:	009b      	lsls	r3, r3, #2
   2047e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20482:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20486:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2048a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2048e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   20492:	f3c0 2005 	ubfx	r0, r0, #8, #6
   20496:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2049a:	f7ff fc41 	bl	1fd20 <call_handler>
   2049e:	e7e3      	b.n	20468 <nrfx_gpiote_irq_handler+0x164>
   204a0:	40006100 	.word	0x40006100
   204a4:	40006000 	.word	0x40006000
   204a8:	40006120 	.word	0x40006120
   204ac:	200007e4 	.word	0x200007e4
   204b0:	50000300 	.word	0x50000300

000204b4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   204b4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   204b6:	4801      	ldr	r0, [pc, #4]	; (204bc <nrfx_ppi_channel_alloc+0x8>)
   204b8:	f7ff bbca 	b.w	1fc50 <nrfx_flag32_alloc>
   204bc:	20000860 	.word	0x20000860

000204c0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   204c0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   204c2:	4c14      	ldr	r4, [pc, #80]	; (20514 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   204c4:	4a14      	ldr	r2, [pc, #80]	; (20518 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   204c6:	4915      	ldr	r1, [pc, #84]	; (2051c <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   204c8:	2303      	movs	r3, #3
   204ca:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   204cc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   204ce:	4b14      	ldr	r3, [pc, #80]	; (20520 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   204d0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   204d2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   204d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   204d8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   204da:	2300      	movs	r3, #0
   204dc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   204de:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   204e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   204e2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   204e4:	4a0f      	ldr	r2, [pc, #60]	; (20524 <_DoInit+0x64>)
   204e6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   204e8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   204ea:	2210      	movs	r2, #16
   204ec:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   204ee:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   204f0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   204f2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   204f4:	f006 feca 	bl	2728c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   204f8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   204fc:	490a      	ldr	r1, [pc, #40]	; (20528 <_DoInit+0x68>)
   204fe:	4620      	mov	r0, r4
   20500:	f006 fec4 	bl	2728c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   20504:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   20508:	2320      	movs	r3, #32
   2050a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   2050c:	f3bf 8f5f 	dmb	sy
}
   20510:	bd10      	pop	{r4, pc}
   20512:	bf00      	nop
   20514:	20003ea4 	.word	0x20003ea4
   20518:	0002c48e 	.word	0x0002c48e
   2051c:	0002c497 	.word	0x0002c497
   20520:	2000d798 	.word	0x2000d798
   20524:	2000d788 	.word	0x2000d788
   20528:	0002c49b 	.word	0x0002c49b

0002052c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2052c:	4b0e      	ldr	r3, [pc, #56]	; (20568 <z_sys_init_run_level+0x3c>)
{
   2052e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20530:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20534:	3001      	adds	r0, #1
   20536:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2053a:	42a6      	cmp	r6, r4
   2053c:	d800      	bhi.n	20540 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2053e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   20540:	e9d4 3500 	ldrd	r3, r5, [r4]
   20544:	4628      	mov	r0, r5
   20546:	4798      	blx	r3
		if (dev != NULL) {
   20548:	b165      	cbz	r5, 20564 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   2054a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   2054c:	b130      	cbz	r0, 2055c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2054e:	2800      	cmp	r0, #0
   20550:	bfb8      	it	lt
   20552:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   20554:	28ff      	cmp	r0, #255	; 0xff
   20556:	bfa8      	it	ge
   20558:	20ff      	movge	r0, #255	; 0xff
   2055a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2055c:	785a      	ldrb	r2, [r3, #1]
   2055e:	f042 0201 	orr.w	r2, r2, #1
   20562:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20564:	3408      	adds	r4, #8
   20566:	e7e8      	b.n	2053a <z_sys_init_run_level+0xe>
   20568:	0002a11c 	.word	0x0002a11c

0002056c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2056c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2056e:	4604      	mov	r4, r0
   20570:	460e      	mov	r6, r1
	__asm__ volatile(
   20572:	f04f 0340 	mov.w	r3, #64	; 0x40
   20576:	f3ef 8711 	mrs	r7, BASEPRI
   2057a:	f383 8812 	msr	BASEPRI_MAX, r3
   2057e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   20582:	f002 fb05 	bl	22b90 <z_impl_z_current_get>
   20586:	2c04      	cmp	r4, #4
   20588:	bf96      	itet	ls
   2058a:	4b1e      	ldrls	r3, [pc, #120]	; (20604 <z_fatal_error+0x98>)
   2058c:	4b1e      	ldrhi	r3, [pc, #120]	; (20608 <z_fatal_error+0x9c>)
   2058e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20592:	2200      	movs	r2, #0
   20594:	4605      	mov	r5, r0
   20596:	9200      	str	r2, [sp, #0]
   20598:	481c      	ldr	r0, [pc, #112]	; (2060c <z_fatal_error+0xa0>)
   2059a:	4622      	mov	r2, r4
   2059c:	2145      	movs	r1, #69	; 0x45
   2059e:	f006 fc11 	bl	26dc4 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   205a2:	b13e      	cbz	r6, 205b4 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   205a4:	69f3      	ldr	r3, [r6, #28]
   205a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   205aa:	b11b      	cbz	r3, 205b4 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   205ac:	4818      	ldr	r0, [pc, #96]	; (20610 <z_fatal_error+0xa4>)
   205ae:	2145      	movs	r1, #69	; 0x45
   205b0:	f006 fc08 	bl	26dc4 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   205b4:	b135      	cbz	r5, 205c4 <z_fatal_error+0x58>
   205b6:	4628      	mov	r0, r5
   205b8:	f008 fed8 	bl	2936c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   205bc:	4603      	mov	r3, r0
   205be:	b108      	cbz	r0, 205c4 <z_fatal_error+0x58>
   205c0:	7802      	ldrb	r2, [r0, #0]
   205c2:	b902      	cbnz	r2, 205c6 <z_fatal_error+0x5a>
		thread_name = "unknown";
   205c4:	4b13      	ldr	r3, [pc, #76]	; (20614 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   205c6:	4814      	ldr	r0, [pc, #80]	; (20618 <z_fatal_error+0xac>)
   205c8:	462a      	mov	r2, r5
   205ca:	2145      	movs	r1, #69	; 0x45
   205cc:	f006 fbfa 	bl	26dc4 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   205d0:	4631      	mov	r1, r6
   205d2:	4620      	mov	r0, r4
   205d4:	f7fe fa5e 	bl	1ea94 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   205d8:	2c04      	cmp	r4, #4
   205da:	d108      	bne.n	205ee <z_fatal_error+0x82>
   205dc:	490f      	ldr	r1, [pc, #60]	; (2061c <z_fatal_error+0xb0>)
   205de:	4810      	ldr	r0, [pc, #64]	; (20620 <z_fatal_error+0xb4>)
   205e0:	2293      	movs	r2, #147	; 0x93
   205e2:	f006 fbe1 	bl	26da8 <assert_print>
   205e6:	480d      	ldr	r0, [pc, #52]	; (2061c <z_fatal_error+0xb0>)
   205e8:	2193      	movs	r1, #147	; 0x93
   205ea:	f006 fbd6 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   205ee:	f387 8811 	msr	BASEPRI, r7
   205f2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   205f6:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   205f8:	b003      	add	sp, #12
   205fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   205fe:	f7f7 b94b 	b.w	17898 <z_impl_k_thread_abort>
   20602:	bf00      	nop
   20604:	0002a134 	.word	0x0002a134
   20608:	0002c4a2 	.word	0x0002c4a2
   2060c:	0002c4b8 	.word	0x0002c4b8
   20610:	0002c4e5 	.word	0x0002c4e5
   20614:	0002c4b0 	.word	0x0002c4b0
   20618:	0002c50b 	.word	0x0002c50b
   2061c:	0002c528 	.word	0x0002c528
   20620:	0002a576 	.word	0x0002a576

00020624 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20624:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   20626:	4b0a      	ldr	r3, [pc, #40]	; (20650 <bg_thread_main+0x2c>)
   20628:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2062a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2062c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2062e:	f7ff ff7d 	bl	2052c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   20632:	f003 f975 	bl	23920 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   20636:	2003      	movs	r0, #3
   20638:	f7ff ff78 	bl	2052c <z_sys_init_run_level>

	z_init_static_threads();
   2063c:	f000 fb26 	bl	20c8c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   20640:	f7f5 f936 	bl	158b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20644:	4a03      	ldr	r2, [pc, #12]	; (20654 <bg_thread_main+0x30>)
   20646:	7b13      	ldrb	r3, [r2, #12]
   20648:	f023 0301 	bic.w	r3, r3, #1
   2064c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2064e:	bd08      	pop	{r3, pc}
   20650:	2000db98 	.word	0x2000db98
   20654:	200033c0 	.word	0x200033c0

00020658 <z_bss_zero>:
{
   20658:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2065a:	4803      	ldr	r0, [pc, #12]	; (20668 <z_bss_zero+0x10>)
   2065c:	4a03      	ldr	r2, [pc, #12]	; (2066c <z_bss_zero+0x14>)
   2065e:	2100      	movs	r1, #0
   20660:	1a12      	subs	r2, r2, r0
   20662:	f008 fe52 	bl	2930a <z_early_memset>
}
   20666:	bd08      	pop	{r3, pc}
   20668:	20000c00 	.word	0x20000c00
   2066c:	2000db9c 	.word	0x2000db9c

00020670 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   20670:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   20672:	2300      	movs	r3, #0
{
   20674:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   20676:	2201      	movs	r2, #1
   20678:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   2067c:	4e13      	ldr	r6, [pc, #76]	; (206cc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2067e:	4d14      	ldr	r5, [pc, #80]	; (206d0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   20680:	9301      	str	r3, [sp, #4]
   20682:	220f      	movs	r2, #15
   20684:	e9cd 3202 	strd	r3, r2, [sp, #8]
   20688:	4912      	ldr	r1, [pc, #72]	; (206d4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2068a:	2318      	movs	r3, #24
   2068c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   20690:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   20694:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   20696:	f44f 70c0 	mov.w	r0, #384	; 0x180
   2069a:	fb00 1104 	mla	r1, r0, r4, r1
   2069e:	4b0e      	ldr	r3, [pc, #56]	; (206d8 <z_init_cpu+0x68>)
   206a0:	9500      	str	r5, [sp, #0]
   206a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   206a6:	4630      	mov	r0, r6
   206a8:	f000 fa50 	bl	20b4c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   206ac:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   206ae:	480b      	ldr	r0, [pc, #44]	; (206dc <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   206b0:	752c      	strb	r4, [r5, #20]
   206b2:	f023 0304 	bic.w	r3, r3, #4
   206b6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   206b8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   206bc:	fb03 0404 	mla	r4, r3, r4, r0
   206c0:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   206c2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   206c4:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   206c6:	b006      	add	sp, #24
   206c8:	bd70      	pop	{r4, r5, r6, pc}
   206ca:	bf00      	nop
   206cc:	20003340 	.word	0x20003340
   206d0:	20003f4c 	.word	0x20003f4c
   206d4:	2000fc40 	.word	0x2000fc40
   206d8:	00020dd1 	.word	0x00020dd1
   206dc:	2000fdc0 	.word	0x2000fdc0

000206e0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   206e0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   206e2:	4b2e      	ldr	r3, [pc, #184]	; (2079c <z_cstart+0xbc>)
   206e4:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   206e6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   206ea:	4d2d      	ldr	r5, [pc, #180]	; (207a0 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   206ec:	4e2d      	ldr	r6, [pc, #180]	; (207a4 <z_cstart+0xc4>)
   206ee:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   206f0:	4f2d      	ldr	r7, [pc, #180]	; (207a8 <z_cstart+0xc8>)
   206f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   206f6:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   206f8:	23e0      	movs	r3, #224	; 0xe0
   206fa:	2400      	movs	r4, #0
   206fc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20700:	2320      	movs	r3, #32
   20702:	77eb      	strb	r3, [r5, #31]
   20704:	762c      	strb	r4, [r5, #24]
   20706:	766c      	strb	r4, [r5, #25]
   20708:	76ac      	strb	r4, [r5, #26]
   2070a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2070e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20710:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20714:	626b      	str	r3, [r5, #36]	; 0x24
   20716:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2071a:	f7f7 f831 	bl	17780 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2071e:	f7f6 fc71 	bl	17004 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20722:	f04f 33ff 	mov.w	r3, #4294967295
   20726:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20728:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2072a:	f7f7 f995 	bl	17a58 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2072e:	f7f7 f8c9 	bl	178c4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20732:	f240 1301 	movw	r3, #257	; 0x101
   20736:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2073a:	ab06      	add	r3, sp, #24
   2073c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   2073e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   20742:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20744:	f008 fdd6 	bl	292f4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20748:	4620      	mov	r0, r4
   2074a:	f7ff feef 	bl	2052c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2074e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   20750:	4d16      	ldr	r5, [pc, #88]	; (207ac <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20752:	f7ff feeb 	bl	2052c <z_sys_init_run_level>
	z_sched_init();
   20756:	f002 f8d1 	bl	228fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2075a:	4b15      	ldr	r3, [pc, #84]	; (207b0 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   2075c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2075e:	9305      	str	r3, [sp, #20]
   20760:	2301      	movs	r3, #1
   20762:	4914      	ldr	r1, [pc, #80]	; (207b4 <z_cstart+0xd4>)
   20764:	9400      	str	r4, [sp, #0]
   20766:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2076a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2076e:	463b      	mov	r3, r7
   20770:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20774:	4628      	mov	r0, r5
   20776:	f000 f9e9 	bl	20b4c <z_setup_new_thread>
   2077a:	7b6a      	ldrb	r2, [r5, #13]
   2077c:	4606      	mov	r6, r0
   2077e:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   20782:	4628      	mov	r0, r5
   20784:	736a      	strb	r2, [r5, #13]
   20786:	f001 fdbb 	bl	22300 <z_ready_thread>
	z_init_cpu(0);
   2078a:	4620      	mov	r0, r4
   2078c:	f7ff ff70 	bl	20670 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20790:	463a      	mov	r2, r7
   20792:	4631      	mov	r1, r6
   20794:	4628      	mov	r0, r5
   20796:	f7f6 fd93 	bl	172c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2079a:	bf00      	nop
   2079c:	20010600 	.word	0x20010600
   207a0:	e000ed00 	.word	0xe000ed00
   207a4:	20003f4c 	.word	0x20003f4c
   207a8:	00020625 	.word	0x00020625
   207ac:	200033c0 	.word	0x200033c0
   207b0:	0002c594 	.word	0x0002c594
   207b4:	2000f400 	.word	0x2000f400

000207b8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   207b8:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   207ba:	4c0c      	ldr	r4, [pc, #48]	; (207ec <statics_init+0x34>)
   207bc:	4d0c      	ldr	r5, [pc, #48]	; (207f0 <statics_init+0x38>)
   207be:	4e0d      	ldr	r6, [pc, #52]	; (207f4 <statics_init+0x3c>)
   207c0:	42ac      	cmp	r4, r5
   207c2:	d908      	bls.n	207d6 <statics_init+0x1e>
   207c4:	480c      	ldr	r0, [pc, #48]	; (207f8 <statics_init+0x40>)
   207c6:	4631      	mov	r1, r6
   207c8:	2218      	movs	r2, #24
   207ca:	f006 faed 	bl	26da8 <assert_print>
   207ce:	2118      	movs	r1, #24
   207d0:	4630      	mov	r0, r6
   207d2:	f006 fae2 	bl	26d9a <assert_post_action>
   207d6:	42ac      	cmp	r4, r5
   207d8:	d301      	bcc.n	207de <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   207da:	2000      	movs	r0, #0
   207dc:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   207de:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   207e2:	4620      	mov	r0, r4
   207e4:	f008 fd95 	bl	29312 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   207e8:	3418      	adds	r4, #24
   207ea:	e7e9      	b.n	207c0 <statics_init+0x8>
   207ec:	20000a2c 	.word	0x20000a2c
   207f0:	20000a2c 	.word	0x20000a2c
   207f4:	0002c59c 	.word	0x0002c59c
   207f8:	0002a576 	.word	0x0002a576

000207fc <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   207fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20800:	b085      	sub	sp, #20
   20802:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   20806:	4606      	mov	r6, r0
   20808:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2080a:	4648      	mov	r0, r9
   2080c:	4639      	mov	r1, r7
{
   2080e:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20810:	f008 fea5 	bl	2955e <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20814:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20818:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   2081c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20820:	f3ef 8411 	mrs	r4, BASEPRI
   20824:	f383 8812 	msr	BASEPRI_MAX, r3
   20828:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2082c:	4628      	mov	r0, r5
   2082e:	f000 faa9 	bl	20d84 <z_spin_lock_valid>
   20832:	b940      	cbnz	r0, 20846 <k_heap_aligned_alloc+0x4a>
   20834:	4932      	ldr	r1, [pc, #200]	; (20900 <k_heap_aligned_alloc+0x104>)
   20836:	4833      	ldr	r0, [pc, #204]	; (20904 <k_heap_aligned_alloc+0x108>)
   20838:	228e      	movs	r2, #142	; 0x8e
   2083a:	f006 fab5 	bl	26da8 <assert_print>
   2083e:	4830      	ldr	r0, [pc, #192]	; (20900 <k_heap_aligned_alloc+0x104>)
   20840:	218e      	movs	r1, #142	; 0x8e
   20842:	f006 faaa 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   20846:	4628      	mov	r0, r5
   20848:	f000 faba 	bl	20dc0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2084c:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20850:	b15b      	cbz	r3, 2086a <k_heap_aligned_alloc+0x6e>
   20852:	ea59 0307 	orrs.w	r3, r9, r7
   20856:	d008      	beq.n	2086a <k_heap_aligned_alloc+0x6e>
   20858:	492b      	ldr	r1, [pc, #172]	; (20908 <k_heap_aligned_alloc+0x10c>)
   2085a:	482a      	ldr	r0, [pc, #168]	; (20904 <k_heap_aligned_alloc+0x108>)
   2085c:	2249      	movs	r2, #73	; 0x49
   2085e:	f006 faa3 	bl	26da8 <assert_print>
   20862:	4829      	ldr	r0, [pc, #164]	; (20908 <k_heap_aligned_alloc+0x10c>)
   20864:	2149      	movs	r1, #73	; 0x49
   20866:	f006 fa98 	bl	26d9a <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2086a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 20900 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2086e:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20872:	4642      	mov	r2, r8
   20874:	4659      	mov	r1, fp
   20876:	4630      	mov	r0, r6
   20878:	f7f5 fbe0 	bl	1603c <sys_heap_aligned_alloc>
   2087c:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   2087e:	f002 fd05 	bl	2328c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20882:	b1a7      	cbz	r7, 208ae <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20884:	4628      	mov	r0, r5
   20886:	f000 fa8b 	bl	20da0 <z_spin_unlock_valid>
   2088a:	b940      	cbnz	r0, 2089e <k_heap_aligned_alloc+0xa2>
   2088c:	491c      	ldr	r1, [pc, #112]	; (20900 <k_heap_aligned_alloc+0x104>)
   2088e:	481d      	ldr	r0, [pc, #116]	; (20904 <k_heap_aligned_alloc+0x108>)
   20890:	22b9      	movs	r2, #185	; 0xb9
   20892:	f006 fa89 	bl	26da8 <assert_print>
   20896:	481a      	ldr	r0, [pc, #104]	; (20900 <k_heap_aligned_alloc+0x104>)
   20898:	21b9      	movs	r1, #185	; 0xb9
   2089a:	f006 fa7e 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2089e:	f384 8811 	msr	BASEPRI, r4
   208a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   208a6:	4638      	mov	r0, r7
   208a8:	b005      	add	sp, #20
   208aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   208ae:	9b02      	ldr	r3, [sp, #8]
   208b0:	1a18      	subs	r0, r3, r0
   208b2:	9b03      	ldr	r3, [sp, #12]
   208b4:	eb63 0101 	sbc.w	r1, r3, r1
   208b8:	2801      	cmp	r0, #1
   208ba:	f171 0300 	sbcs.w	r3, r1, #0
   208be:	dbe1      	blt.n	20884 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   208c0:	e9cd 0100 	strd	r0, r1, [sp]
   208c4:	4652      	mov	r2, sl
   208c6:	4621      	mov	r1, r4
   208c8:	4628      	mov	r0, r5
   208ca:	f001 fe7d 	bl	225c8 <z_pend_curr>
	__asm__ volatile(
   208ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   208d2:	f3ef 8411 	mrs	r4, BASEPRI
   208d6:	f383 8812 	msr	BASEPRI_MAX, r3
   208da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   208de:	4628      	mov	r0, r5
   208e0:	f000 fa50 	bl	20d84 <z_spin_lock_valid>
   208e4:	b940      	cbnz	r0, 208f8 <k_heap_aligned_alloc+0xfc>
   208e6:	4807      	ldr	r0, [pc, #28]	; (20904 <k_heap_aligned_alloc+0x108>)
   208e8:	4649      	mov	r1, r9
   208ea:	228e      	movs	r2, #142	; 0x8e
   208ec:	f006 fa5c 	bl	26da8 <assert_print>
   208f0:	218e      	movs	r1, #142	; 0x8e
   208f2:	4648      	mov	r0, r9
   208f4:	f006 fa51 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   208f8:	4628      	mov	r0, r5
   208fa:	f000 fa61 	bl	20dc0 <z_spin_lock_set_owner>
	return k;
   208fe:	e7b8      	b.n	20872 <k_heap_aligned_alloc+0x76>
   20900:	0002a705 	.word	0x0002a705
   20904:	0002a576 	.word	0x0002a576
   20908:	0002c59c 	.word	0x0002c59c

0002090c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2090e:	4604      	mov	r4, r0
   20910:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20912:	f100 0514 	add.w	r5, r0, #20
   20916:	f04f 0340 	mov.w	r3, #64	; 0x40
   2091a:	f3ef 8711 	mrs	r7, BASEPRI
   2091e:	f383 8812 	msr	BASEPRI_MAX, r3
   20922:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20926:	4628      	mov	r0, r5
   20928:	f000 fa2c 	bl	20d84 <z_spin_lock_valid>
   2092c:	b940      	cbnz	r0, 20940 <k_heap_free+0x34>
   2092e:	4916      	ldr	r1, [pc, #88]	; (20988 <k_heap_free+0x7c>)
   20930:	4816      	ldr	r0, [pc, #88]	; (2098c <k_heap_free+0x80>)
   20932:	228e      	movs	r2, #142	; 0x8e
   20934:	f006 fa38 	bl	26da8 <assert_print>
   20938:	4813      	ldr	r0, [pc, #76]	; (20988 <k_heap_free+0x7c>)
   2093a:	218e      	movs	r1, #142	; 0x8e
   2093c:	f006 fa2d 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   20940:	4628      	mov	r0, r5
   20942:	f000 fa3d 	bl	20dc0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   20946:	4620      	mov	r0, r4
   20948:	4631      	mov	r1, r6
   2094a:	f7f5 fb3f 	bl	15fcc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2094e:	f104 000c 	add.w	r0, r4, #12
   20952:	f008 fdec 	bl	2952e <z_unpend_all>
   20956:	b128      	cbz	r0, 20964 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   20958:	4639      	mov	r1, r7
   2095a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2095c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   20960:	f001 ba9e 	b.w	21ea0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20964:	4628      	mov	r0, r5
   20966:	f000 fa1b 	bl	20da0 <z_spin_unlock_valid>
   2096a:	b940      	cbnz	r0, 2097e <k_heap_free+0x72>
   2096c:	4906      	ldr	r1, [pc, #24]	; (20988 <k_heap_free+0x7c>)
   2096e:	4807      	ldr	r0, [pc, #28]	; (2098c <k_heap_free+0x80>)
   20970:	22b9      	movs	r2, #185	; 0xb9
   20972:	f006 fa19 	bl	26da8 <assert_print>
   20976:	4804      	ldr	r0, [pc, #16]	; (20988 <k_heap_free+0x7c>)
   20978:	21b9      	movs	r1, #185	; 0xb9
   2097a:	f006 fa0e 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2097e:	f387 8811 	msr	BASEPRI, r7
   20982:	f3bf 8f6f 	isb	sy
}
   20986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20988:	0002a705 	.word	0x0002a705
   2098c:	0002a576 	.word	0x0002a576

00020990 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   20990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20992:	4c14      	ldr	r4, [pc, #80]	; (209e4 <init_mem_slab_module+0x54>)
   20994:	4d14      	ldr	r5, [pc, #80]	; (209e8 <init_mem_slab_module+0x58>)
   20996:	4e15      	ldr	r6, [pc, #84]	; (209ec <init_mem_slab_module+0x5c>)
   20998:	42ac      	cmp	r4, r5
   2099a:	d908      	bls.n	209ae <init_mem_slab_module+0x1e>
   2099c:	4814      	ldr	r0, [pc, #80]	; (209f0 <init_mem_slab_module+0x60>)
   2099e:	4631      	mov	r1, r6
   209a0:	223d      	movs	r2, #61	; 0x3d
   209a2:	f006 fa01 	bl	26da8 <assert_print>
   209a6:	213d      	movs	r1, #61	; 0x3d
   209a8:	4630      	mov	r0, r6
   209aa:	f006 f9f6 	bl	26d9a <assert_post_action>
   209ae:	42ac      	cmp	r4, r5
   209b0:	d301      	bcc.n	209b6 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   209b2:	2000      	movs	r0, #0
	return rc;
}
   209b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   209b6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   209ba:	ea42 0301 	orr.w	r3, r2, r1
   209be:	f013 0303 	ands.w	r3, r3, #3
   209c2:	d10b      	bne.n	209dc <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   209c4:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   209c6:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   209c8:	4283      	cmp	r3, r0
   209ca:	d101      	bne.n	209d0 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   209cc:	3420      	adds	r4, #32
   209ce:	e7e3      	b.n	20998 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   209d0:	69a7      	ldr	r7, [r4, #24]
   209d2:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   209d4:	3301      	adds	r3, #1
		slab->free_list = p;
   209d6:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   209d8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   209da:	e7f5      	b.n	209c8 <init_mem_slab_module+0x38>
	return rc;
   209dc:	f06f 0015 	mvn.w	r0, #21
   209e0:	e7e8      	b.n	209b4 <init_mem_slab_module+0x24>
   209e2:	bf00      	nop
   209e4:	200009cc 	.word	0x200009cc
   209e8:	20000a2c 	.word	0x20000a2c
   209ec:	0002c5be 	.word	0x0002c5be
   209f0:	0002a576 	.word	0x0002a576

000209f4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   209f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   209f8:	4604      	mov	r4, r0
   209fa:	460d      	mov	r5, r1
   209fc:	4690      	mov	r8, r2
   209fe:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20a00:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20a04:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a08:	f3ef 8911 	mrs	r9, BASEPRI
   20a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   20a10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a14:	4630      	mov	r0, r6
   20a16:	f000 f9b5 	bl	20d84 <z_spin_lock_valid>
   20a1a:	b940      	cbnz	r0, 20a2e <k_mem_slab_alloc+0x3a>
   20a1c:	491f      	ldr	r1, [pc, #124]	; (20a9c <k_mem_slab_alloc+0xa8>)
   20a1e:	4820      	ldr	r0, [pc, #128]	; (20aa0 <k_mem_slab_alloc+0xac>)
   20a20:	228e      	movs	r2, #142	; 0x8e
   20a22:	f006 f9c1 	bl	26da8 <assert_print>
   20a26:	481d      	ldr	r0, [pc, #116]	; (20a9c <k_mem_slab_alloc+0xa8>)
   20a28:	218e      	movs	r1, #142	; 0x8e
   20a2a:	f006 f9b6 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   20a2e:	4630      	mov	r0, r6
   20a30:	f000 f9c6 	bl	20dc0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20a34:	69a3      	ldr	r3, [r4, #24]
   20a36:	b1c3      	cbz	r3, 20a6a <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   20a38:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   20a3a:	681b      	ldr	r3, [r3, #0]
   20a3c:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   20a3e:	69e3      	ldr	r3, [r4, #28]
   20a40:	3301      	adds	r3, #1
   20a42:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20a44:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a46:	4630      	mov	r0, r6
   20a48:	f000 f9aa 	bl	20da0 <z_spin_unlock_valid>
   20a4c:	b940      	cbnz	r0, 20a60 <k_mem_slab_alloc+0x6c>
   20a4e:	4913      	ldr	r1, [pc, #76]	; (20a9c <k_mem_slab_alloc+0xa8>)
   20a50:	4813      	ldr	r0, [pc, #76]	; (20aa0 <k_mem_slab_alloc+0xac>)
   20a52:	22b9      	movs	r2, #185	; 0xb9
   20a54:	f006 f9a8 	bl	26da8 <assert_print>
   20a58:	4810      	ldr	r0, [pc, #64]	; (20a9c <k_mem_slab_alloc+0xa8>)
   20a5a:	21b9      	movs	r1, #185	; 0xb9
   20a5c:	f006 f99d 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   20a60:	f389 8811 	msr	BASEPRI, r9
   20a64:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   20a68:	e013      	b.n	20a92 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   20a6a:	ea58 0207 	orrs.w	r2, r8, r7
   20a6e:	d103      	bne.n	20a78 <k_mem_slab_alloc+0x84>
		*mem = NULL;
   20a70:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   20a72:	f06f 040b 	mvn.w	r4, #11
   20a76:	e7e6      	b.n	20a46 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   20a78:	4622      	mov	r2, r4
   20a7a:	e9cd 8700 	strd	r8, r7, [sp]
   20a7e:	4649      	mov	r1, r9
   20a80:	4630      	mov	r0, r6
   20a82:	f001 fda1 	bl	225c8 <z_pend_curr>
		if (result == 0) {
   20a86:	4604      	mov	r4, r0
   20a88:	b918      	cbnz	r0, 20a92 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   20a8a:	4b06      	ldr	r3, [pc, #24]	; (20aa4 <k_mem_slab_alloc+0xb0>)
   20a8c:	689b      	ldr	r3, [r3, #8]
   20a8e:	695b      	ldr	r3, [r3, #20]
   20a90:	602b      	str	r3, [r5, #0]
}
   20a92:	4620      	mov	r0, r4
   20a94:	b003      	add	sp, #12
   20a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20a9a:	bf00      	nop
   20a9c:	0002a705 	.word	0x0002a705
   20aa0:	0002a576 	.word	0x0002a576
   20aa4:	20003f4c 	.word	0x20003f4c

00020aa8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20aac:	4604      	mov	r4, r0
   20aae:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20ab0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20ab4:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ab8:	f3ef 8711 	mrs	r7, BASEPRI
   20abc:	f383 8812 	msr	BASEPRI_MAX, r3
   20ac0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ac4:	4630      	mov	r0, r6
   20ac6:	f000 f95d 	bl	20d84 <z_spin_lock_valid>
   20aca:	b940      	cbnz	r0, 20ade <k_mem_slab_free+0x36>
   20acc:	491d      	ldr	r1, [pc, #116]	; (20b44 <k_mem_slab_free+0x9c>)
   20ace:	481e      	ldr	r0, [pc, #120]	; (20b48 <k_mem_slab_free+0xa0>)
   20ad0:	228e      	movs	r2, #142	; 0x8e
   20ad2:	f006 f969 	bl	26da8 <assert_print>
   20ad6:	481b      	ldr	r0, [pc, #108]	; (20b44 <k_mem_slab_free+0x9c>)
   20ad8:	218e      	movs	r1, #142	; 0x8e
   20ada:	f006 f95e 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   20ade:	4630      	mov	r0, r6
   20ae0:	f000 f96e 	bl	20dc0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20ae4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   20ae8:	f1b8 0f00 	cmp.w	r8, #0
   20aec:	d10f      	bne.n	20b0e <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20aee:	4620      	mov	r0, r4
   20af0:	f001 fec6 	bl	22880 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20af4:	b158      	cbz	r0, 20b0e <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20af6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20af8:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20afa:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20afe:	f001 fbff 	bl	22300 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20b02:	4639      	mov	r1, r7
   20b04:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   20b0a:	f001 b9c9 	b.w	21ea0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20b0e:	682b      	ldr	r3, [r5, #0]
   20b10:	69a2      	ldr	r2, [r4, #24]
   20b12:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20b14:	682b      	ldr	r3, [r5, #0]
   20b16:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   20b18:	69e3      	ldr	r3, [r4, #28]
   20b1a:	3b01      	subs	r3, #1
   20b1c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b1e:	4630      	mov	r0, r6
   20b20:	f000 f93e 	bl	20da0 <z_spin_unlock_valid>
   20b24:	b940      	cbnz	r0, 20b38 <k_mem_slab_free+0x90>
   20b26:	4907      	ldr	r1, [pc, #28]	; (20b44 <k_mem_slab_free+0x9c>)
   20b28:	4807      	ldr	r0, [pc, #28]	; (20b48 <k_mem_slab_free+0xa0>)
   20b2a:	22b9      	movs	r2, #185	; 0xb9
   20b2c:	f006 f93c 	bl	26da8 <assert_print>
   20b30:	4804      	ldr	r0, [pc, #16]	; (20b44 <k_mem_slab_free+0x9c>)
   20b32:	21b9      	movs	r1, #185	; 0xb9
   20b34:	f006 f931 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   20b38:	f387 8811 	msr	BASEPRI, r7
   20b3c:	f3bf 8f6f 	isb	sy
}
   20b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20b44:	0002a705 	.word	0x0002a705
   20b48:	0002a576 	.word	0x0002a576

00020b4c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20b50:	b085      	sub	sp, #20
   20b52:	4604      	mov	r4, r0
   20b54:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   20b58:	f1b8 0f0f 	cmp.w	r8, #15
{
   20b5c:	460f      	mov	r7, r1
   20b5e:	4615      	mov	r5, r2
   20b60:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   20b62:	d132      	bne.n	20bca <z_setup_new_thread+0x7e>
   20b64:	4b21      	ldr	r3, [pc, #132]	; (20bec <z_setup_new_thread+0xa0>)
   20b66:	4599      	cmp	r9, r3
   20b68:	d133      	bne.n	20bd2 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   20b6a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   20b6e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   20b72:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20b74:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20b76:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   20b78:	2304      	movs	r3, #4
   20b7a:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20b7c:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   20b80:	f107 0340 	add.w	r3, r7, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   20b84:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   20b8a:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20b8e:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20b90:	f105 0840 	add.w	r8, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20b96:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   20b98:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20b9c:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   20b9e:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20ba0:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   20ba2:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   20ba6:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   20ba8:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   20baa:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20bac:	4642      	mov	r2, r8
   20bae:	4639      	mov	r1, r7
   20bb0:	4620      	mov	r0, r4
   20bb2:	f7f6 fb53 	bl	1725c <arch_new_thread>
	if (!_current) {
   20bb6:	4b0e      	ldr	r3, [pc, #56]	; (20bf0 <z_setup_new_thread+0xa4>)
	new_thread->init_data = NULL;
   20bb8:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   20bba:	689b      	ldr	r3, [r3, #8]
   20bbc:	b103      	cbz	r3, 20bc0 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   20bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   20bc0:	6763      	str	r3, [r4, #116]	; 0x74
}
   20bc2:	4640      	mov	r0, r8
   20bc4:	b005      	add	sp, #20
   20bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   20bca:	f108 0310 	add.w	r3, r8, #16
   20bce:	2b1e      	cmp	r3, #30
   20bd0:	d9cb      	bls.n	20b6a <z_setup_new_thread+0x1e>
   20bd2:	4908      	ldr	r1, [pc, #32]	; (20bf4 <z_setup_new_thread+0xa8>)
   20bd4:	4808      	ldr	r0, [pc, #32]	; (20bf8 <z_setup_new_thread+0xac>)
   20bd6:	f44f 7206 	mov.w	r2, #536	; 0x218
   20bda:	f006 f8e5 	bl	26da8 <assert_print>
   20bde:	4805      	ldr	r0, [pc, #20]	; (20bf4 <z_setup_new_thread+0xa8>)
   20be0:	f44f 7106 	mov.w	r1, #536	; 0x218
   20be4:	f006 f8d9 	bl	26d9a <assert_post_action>
   20be8:	e7bf      	b.n	20b6a <z_setup_new_thread+0x1e>
   20bea:	bf00      	nop
   20bec:	00020dd1 	.word	0x00020dd1
   20bf0:	20003f4c 	.word	0x20003f4c
   20bf4:	0002c5e3 	.word	0x0002c5e3
   20bf8:	0002a576 	.word	0x0002a576

00020bfc <z_impl_k_thread_create>:
{
   20bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20c00:	b087      	sub	sp, #28
   20c02:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   20c06:	4604      	mov	r4, r0
   20c08:	460f      	mov	r7, r1
   20c0a:	4690      	mov	r8, r2
   20c0c:	4699      	mov	r9, r3
   20c0e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   20c12:	b153      	cbz	r3, 20c2a <z_impl_k_thread_create+0x2e>
   20c14:	491a      	ldr	r1, [pc, #104]	; (20c80 <z_impl_k_thread_create+0x84>)
   20c16:	481b      	ldr	r0, [pc, #108]	; (20c84 <z_impl_k_thread_create+0x88>)
   20c18:	f240 2287 	movw	r2, #647	; 0x287
   20c1c:	f006 f8c4 	bl	26da8 <assert_print>
   20c20:	4817      	ldr	r0, [pc, #92]	; (20c80 <z_impl_k_thread_create+0x84>)
   20c22:	f240 2187 	movw	r1, #647	; 0x287
   20c26:	f006 f8b8 	bl	26d9a <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20c2a:	2300      	movs	r3, #0
   20c2c:	9305      	str	r3, [sp, #20]
   20c2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20c30:	9304      	str	r3, [sp, #16]
   20c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20c34:	9303      	str	r3, [sp, #12]
   20c36:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20c38:	9302      	str	r3, [sp, #8]
   20c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20c3c:	9301      	str	r3, [sp, #4]
   20c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20c40:	9300      	str	r3, [sp, #0]
   20c42:	4642      	mov	r2, r8
   20c44:	464b      	mov	r3, r9
   20c46:	4639      	mov	r1, r7
   20c48:	4620      	mov	r0, r4
   20c4a:	f7ff ff7f 	bl	20b4c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20c4e:	f1b5 3fff 	cmp.w	r5, #4294967295
   20c52:	bf08      	it	eq
   20c54:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   20c58:	d005      	beq.n	20c66 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20c5a:	ea55 0306 	orrs.w	r3, r5, r6
   20c5e:	d106      	bne.n	20c6e <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   20c60:	4620      	mov	r0, r4
   20c62:	f001 fb83 	bl	2236c <z_sched_start>
}
   20c66:	4620      	mov	r0, r4
   20c68:	b007      	add	sp, #28
   20c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   20c6e:	4906      	ldr	r1, [pc, #24]	; (20c88 <z_impl_k_thread_create+0x8c>)
   20c70:	4632      	mov	r2, r6
   20c72:	462b      	mov	r3, r5
   20c74:	f104 0018 	add.w	r0, r4, #24
   20c78:	f002 f906 	bl	22e88 <z_add_timeout>
   20c7c:	e7f3      	b.n	20c66 <z_impl_k_thread_create+0x6a>
   20c7e:	bf00      	nop
   20c80:	0002c5e3 	.word	0x0002c5e3
   20c84:	0002a576 	.word	0x0002a576
   20c88:	000223f1 	.word	0x000223f1

00020c8c <z_init_static_threads>:
{
   20c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20c90:	4c37      	ldr	r4, [pc, #220]	; (20d70 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   20c92:	4d38      	ldr	r5, [pc, #224]	; (20d74 <z_init_static_threads+0xe8>)
   20c94:	4f38      	ldr	r7, [pc, #224]	; (20d78 <z_init_static_threads+0xec>)
{
   20c96:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   20c98:	42ac      	cmp	r4, r5
   20c9a:	4626      	mov	r6, r4
   20c9c:	d90a      	bls.n	20cb4 <z_init_static_threads+0x28>
   20c9e:	4837      	ldr	r0, [pc, #220]	; (20d7c <z_init_static_threads+0xf0>)
   20ca0:	4639      	mov	r1, r7
   20ca2:	f240 22ee 	movw	r2, #750	; 0x2ee
   20ca6:	f006 f87f 	bl	26da8 <assert_print>
   20caa:	f240 21ee 	movw	r1, #750	; 0x2ee
   20cae:	4638      	mov	r0, r7
   20cb0:	f006 f873 	bl	26d9a <assert_post_action>
   20cb4:	42ae      	cmp	r6, r5
   20cb6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   20cba:	d31b      	bcc.n	20cf4 <z_init_static_threads+0x68>
	k_sched_lock();
   20cbc:	f001 f926 	bl	21f0c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   20cc0:	4c2b      	ldr	r4, [pc, #172]	; (20d70 <z_init_static_threads+0xe4>)
   20cc2:	4e2d      	ldr	r6, [pc, #180]	; (20d78 <z_init_static_threads+0xec>)
   20cc4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 20d7c <z_init_static_threads+0xf0>
   20cc8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 20d80 <z_init_static_threads+0xf4>
   20ccc:	42ac      	cmp	r4, r5
   20cce:	d90a      	bls.n	20ce6 <z_init_static_threads+0x5a>
   20cd0:	4631      	mov	r1, r6
   20cd2:	4640      	mov	r0, r8
   20cd4:	f240 320d 	movw	r2, #781	; 0x30d
   20cd8:	f006 f866 	bl	26da8 <assert_print>
   20cdc:	f240 310d 	movw	r1, #781	; 0x30d
   20ce0:	4630      	mov	r0, r6
   20ce2:	f006 f85a 	bl	26d9a <assert_post_action>
   20ce6:	42ac      	cmp	r4, r5
   20ce8:	d320      	bcc.n	20d2c <z_init_static_threads+0xa0>
}
   20cea:	b007      	add	sp, #28
   20cec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   20cf0:	f001 bd6a 	b.w	227c8 <k_sched_unlock>
		z_setup_new_thread(
   20cf4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20cf8:	9305      	str	r3, [sp, #20]
   20cfa:	f854 3c10 	ldr.w	r3, [r4, #-16]
   20cfe:	9304      	str	r3, [sp, #16]
   20d00:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20d04:	9303      	str	r3, [sp, #12]
   20d06:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20d0a:	9302      	str	r3, [sp, #8]
   20d0c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   20d10:	9301      	str	r3, [sp, #4]
   20d12:	f854 3c20 	ldr.w	r3, [r4, #-32]
   20d16:	9300      	str	r3, [sp, #0]
   20d18:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   20d1c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   20d20:	f7ff ff14 	bl	20b4c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   20d24:	f854 3c30 	ldr.w	r3, [r4, #-48]
   20d28:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   20d2a:	e7b5      	b.n	20c98 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20d2e:	1c5a      	adds	r2, r3, #1
   20d30:	d00f      	beq.n	20d52 <z_init_static_threads+0xc6>
					    K_MSEC(thread_data->init_delay));
   20d32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   20d36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   20d3a:	f240 30e7 	movw	r0, #999	; 0x3e7
   20d3e:	2100      	movs	r1, #0
   20d40:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20d44:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   20d48:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20d4a:	d104      	bne.n	20d56 <z_init_static_threads+0xca>
	z_sched_start(thread);
   20d4c:	4638      	mov	r0, r7
   20d4e:	f001 fb0d 	bl	2236c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20d52:	3430      	adds	r4, #48	; 0x30
   20d54:	e7ba      	b.n	20ccc <z_init_static_threads+0x40>
   20d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20d5a:	2300      	movs	r3, #0
   20d5c:	f7df f9d0 	bl	100 <__aeabi_uldivmod>
   20d60:	4602      	mov	r2, r0
   20d62:	460b      	mov	r3, r1
   20d64:	f107 0018 	add.w	r0, r7, #24
   20d68:	4649      	mov	r1, r9
   20d6a:	f002 f88d 	bl	22e88 <z_add_timeout>
   20d6e:	e7f0      	b.n	20d52 <z_init_static_threads+0xc6>
   20d70:	200009cc 	.word	0x200009cc
   20d74:	200009cc 	.word	0x200009cc
   20d78:	0002c5e3 	.word	0x0002c5e3
   20d7c:	0002a576 	.word	0x0002a576
   20d80:	000223f1 	.word	0x000223f1

00020d84 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   20d84:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   20d86:	b138      	cbz	r0, 20d98 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   20d88:	4b04      	ldr	r3, [pc, #16]	; (20d9c <z_spin_lock_valid+0x18>)
   20d8a:	7d1b      	ldrb	r3, [r3, #20]
   20d8c:	f000 0003 	and.w	r0, r0, #3
   20d90:	1ac0      	subs	r0, r0, r3
   20d92:	bf18      	it	ne
   20d94:	2001      	movne	r0, #1
   20d96:	4770      	bx	lr
			return false;
		}
	}
	return true;
   20d98:	2001      	movs	r0, #1
}
   20d9a:	4770      	bx	lr
   20d9c:	20003f4c 	.word	0x20003f4c

00020da0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20da0:	4906      	ldr	r1, [pc, #24]	; (20dbc <z_spin_unlock_valid+0x1c>)
{
   20da2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20da4:	688a      	ldr	r2, [r1, #8]
   20da6:	7d08      	ldrb	r0, [r1, #20]
   20da8:	6819      	ldr	r1, [r3, #0]
   20daa:	4302      	orrs	r2, r0
   20dac:	4291      	cmp	r1, r2
   20dae:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   20db2:	bf04      	itt	eq
   20db4:	6018      	streq	r0, [r3, #0]
	return true;
   20db6:	2001      	moveq	r0, #1
}
   20db8:	4770      	bx	lr
   20dba:	bf00      	nop
   20dbc:	20003f4c 	.word	0x20003f4c

00020dc0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   20dc0:	4a02      	ldr	r2, [pc, #8]	; (20dcc <z_spin_lock_set_owner+0xc>)
   20dc2:	7d11      	ldrb	r1, [r2, #20]
   20dc4:	6893      	ldr	r3, [r2, #8]
   20dc6:	430b      	orrs	r3, r1
   20dc8:	6003      	str	r3, [r0, #0]
}
   20dca:	4770      	bx	lr
   20dcc:	20003f4c 	.word	0x20003f4c

00020dd0 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20dd0:	4c12      	ldr	r4, [pc, #72]	; (20e1c <idle+0x4c>)
{
   20dd2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20dd4:	68a3      	ldr	r3, [r4, #8]
   20dd6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20dda:	2b00      	cmp	r3, #0
   20ddc:	da08      	bge.n	20df0 <idle+0x20>
   20dde:	4910      	ldr	r1, [pc, #64]	; (20e20 <idle+0x50>)
   20de0:	4810      	ldr	r0, [pc, #64]	; (20e24 <idle+0x54>)
   20de2:	2227      	movs	r2, #39	; 0x27
   20de4:	f005 ffe0 	bl	26da8 <assert_print>
   20de8:	480d      	ldr	r0, [pc, #52]	; (20e20 <idle+0x50>)
   20dea:	2127      	movs	r1, #39	; 0x27
   20dec:	f005 ffd5 	bl	26d9a <assert_post_action>
	return !z_sys_post_kernel;
   20df0:	4d0d      	ldr	r5, [pc, #52]	; (20e28 <idle+0x58>)
	__asm__ volatile(
   20df2:	f04f 0240 	mov.w	r2, #64	; 0x40
   20df6:	f3ef 8311 	mrs	r3, BASEPRI
   20dfa:	f382 8812 	msr	BASEPRI_MAX, r2
   20dfe:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   20e02:	f002 f92b 	bl	2305c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20e06:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   20e08:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20e0a:	b913      	cbnz	r3, 20e12 <idle+0x42>
	arch_cpu_idle();
   20e0c:	f7f6 f900 	bl	17010 <arch_cpu_idle>
}
   20e10:	e7ef      	b.n	20df2 <idle+0x22>
   20e12:	f7f5 fee3 	bl	16bdc <pm_system_suspend>
   20e16:	2800      	cmp	r0, #0
   20e18:	d1eb      	bne.n	20df2 <idle+0x22>
   20e1a:	e7f7      	b.n	20e0c <idle+0x3c>
   20e1c:	20003f4c 	.word	0x20003f4c
   20e20:	0002c606 	.word	0x0002c606
   20e24:	0002a576 	.word	0x0002a576
   20e28:	2000db98 	.word	0x2000db98

00020e2c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20e2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20e30:	4604      	mov	r4, r0
   20e32:	4617      	mov	r7, r2
   20e34:	461e      	mov	r6, r3
   20e36:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20e3a:	b143      	cbz	r3, 20e4e <z_impl_k_mutex_lock+0x22>
   20e3c:	495f      	ldr	r1, [pc, #380]	; (20fbc <z_impl_k_mutex_lock+0x190>)
   20e3e:	4860      	ldr	r0, [pc, #384]	; (20fc0 <z_impl_k_mutex_lock+0x194>)
   20e40:	2265      	movs	r2, #101	; 0x65
   20e42:	f005 ffb1 	bl	26da8 <assert_print>
   20e46:	485d      	ldr	r0, [pc, #372]	; (20fbc <z_impl_k_mutex_lock+0x190>)
   20e48:	2165      	movs	r1, #101	; 0x65
   20e4a:	f005 ffa6 	bl	26d9a <assert_post_action>
   20e4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e52:	f3ef 8811 	mrs	r8, BASEPRI
   20e56:	f383 8812 	msr	BASEPRI_MAX, r3
   20e5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e5e:	4859      	ldr	r0, [pc, #356]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
   20e60:	f7ff ff90 	bl	20d84 <z_spin_lock_valid>
   20e64:	b940      	cbnz	r0, 20e78 <z_impl_k_mutex_lock+0x4c>
   20e66:	4958      	ldr	r1, [pc, #352]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20e68:	4855      	ldr	r0, [pc, #340]	; (20fc0 <z_impl_k_mutex_lock+0x194>)
   20e6a:	228e      	movs	r2, #142	; 0x8e
   20e6c:	f005 ff9c 	bl	26da8 <assert_print>
   20e70:	4855      	ldr	r0, [pc, #340]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20e72:	218e      	movs	r1, #142	; 0x8e
   20e74:	f005 ff91 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   20e78:	4852      	ldr	r0, [pc, #328]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
   20e7a:	f7ff ffa1 	bl	20dc0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20e7e:	68e3      	ldr	r3, [r4, #12]
   20e80:	4a52      	ldr	r2, [pc, #328]	; (20fcc <z_impl_k_mutex_lock+0x1a0>)
   20e82:	b1d3      	cbz	r3, 20eba <z_impl_k_mutex_lock+0x8e>
   20e84:	68a0      	ldr	r0, [r4, #8]
   20e86:	6891      	ldr	r1, [r2, #8]
   20e88:	4288      	cmp	r0, r1
   20e8a:	d033      	beq.n	20ef4 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20e8c:	ea57 0306 	orrs.w	r3, r7, r6
   20e90:	d132      	bne.n	20ef8 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e92:	484c      	ldr	r0, [pc, #304]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
   20e94:	f7ff ff84 	bl	20da0 <z_spin_unlock_valid>
   20e98:	b940      	cbnz	r0, 20eac <z_impl_k_mutex_lock+0x80>
   20e9a:	494b      	ldr	r1, [pc, #300]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20e9c:	4848      	ldr	r0, [pc, #288]	; (20fc0 <z_impl_k_mutex_lock+0x194>)
   20e9e:	22b9      	movs	r2, #185	; 0xb9
   20ea0:	f005 ff82 	bl	26da8 <assert_print>
   20ea4:	4848      	ldr	r0, [pc, #288]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20ea6:	21b9      	movs	r1, #185	; 0xb9
   20ea8:	f005 ff77 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   20eac:	f388 8811 	msr	BASEPRI, r8
   20eb0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   20eb4:	f06f 000f 	mvn.w	r0, #15
   20eb8:	e019      	b.n	20eee <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   20eba:	6891      	ldr	r1, [r2, #8]
   20ebc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20ec0:	4840      	ldr	r0, [pc, #256]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20ec2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   20ec4:	3301      	adds	r3, #1
   20ec6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   20ec8:	6893      	ldr	r3, [r2, #8]
   20eca:	60a3      	str	r3, [r4, #8]
   20ecc:	f7ff ff68 	bl	20da0 <z_spin_unlock_valid>
   20ed0:	b940      	cbnz	r0, 20ee4 <z_impl_k_mutex_lock+0xb8>
   20ed2:	493d      	ldr	r1, [pc, #244]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20ed4:	483a      	ldr	r0, [pc, #232]	; (20fc0 <z_impl_k_mutex_lock+0x194>)
   20ed6:	22b9      	movs	r2, #185	; 0xb9
   20ed8:	f005 ff66 	bl	26da8 <assert_print>
   20edc:	483a      	ldr	r0, [pc, #232]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20ede:	21b9      	movs	r1, #185	; 0xb9
   20ee0:	f005 ff5b 	bl	26d9a <assert_post_action>
   20ee4:	f388 8811 	msr	BASEPRI, r8
   20ee8:	f3bf 8f6f 	isb	sy
		return 0;
   20eec:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   20eee:	b002      	add	sp, #8
   20ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20ef4:	6921      	ldr	r1, [r4, #16]
   20ef6:	e7e3      	b.n	20ec0 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20ef8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20efc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   20f00:	4299      	cmp	r1, r3
   20f02:	bfa8      	it	ge
   20f04:	4619      	movge	r1, r3
   20f06:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   20f0a:	4291      	cmp	r1, r2
   20f0c:	bfb8      	it	lt
   20f0e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20f10:	428b      	cmp	r3, r1
   20f12:	dd3e      	ble.n	20f92 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   20f14:	f008 fa35 	bl	29382 <adjust_owner_prio.isra.0>
   20f18:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20f1a:	e9cd 7600 	strd	r7, r6, [sp]
   20f1e:	4829      	ldr	r0, [pc, #164]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
   20f20:	4622      	mov	r2, r4
   20f22:	4641      	mov	r1, r8
   20f24:	f001 fb50 	bl	225c8 <z_pend_curr>
	if (got_mutex == 0) {
   20f28:	2800      	cmp	r0, #0
   20f2a:	d0e0      	beq.n	20eee <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   20f2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f30:	f3ef 8611 	mrs	r6, BASEPRI
   20f34:	f383 8812 	msr	BASEPRI_MAX, r3
   20f38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f3c:	4821      	ldr	r0, [pc, #132]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
   20f3e:	f7ff ff21 	bl	20d84 <z_spin_lock_valid>
   20f42:	b940      	cbnz	r0, 20f56 <z_impl_k_mutex_lock+0x12a>
   20f44:	4920      	ldr	r1, [pc, #128]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20f46:	481e      	ldr	r0, [pc, #120]	; (20fc0 <z_impl_k_mutex_lock+0x194>)
   20f48:	228e      	movs	r2, #142	; 0x8e
   20f4a:	f005 ff2d 	bl	26da8 <assert_print>
   20f4e:	481e      	ldr	r0, [pc, #120]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20f50:	218e      	movs	r1, #142	; 0x8e
   20f52:	f005 ff22 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   20f56:	481b      	ldr	r0, [pc, #108]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
   20f58:	f7ff ff32 	bl	20dc0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20f5c:	6823      	ldr	r3, [r4, #0]
   20f5e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20f60:	429c      	cmp	r4, r3
   20f62:	d00a      	beq.n	20f7a <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20f64:	b14b      	cbz	r3, 20f7a <z_impl_k_mutex_lock+0x14e>
   20f66:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20f6a:	4299      	cmp	r1, r3
   20f6c:	bfa8      	it	ge
   20f6e:	4619      	movge	r1, r3
   20f70:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   20f74:	4299      	cmp	r1, r3
   20f76:	bfb8      	it	lt
   20f78:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20f7a:	68a0      	ldr	r0, [r4, #8]
   20f7c:	f008 fa01 	bl	29382 <adjust_owner_prio.isra.0>
   20f80:	b900      	cbnz	r0, 20f84 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   20f82:	b145      	cbz	r5, 20f96 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   20f84:	480f      	ldr	r0, [pc, #60]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
   20f86:	4631      	mov	r1, r6
   20f88:	f000 ff8a 	bl	21ea0 <z_reschedule>
	return -EAGAIN;
   20f8c:	f06f 000a 	mvn.w	r0, #10
   20f90:	e7ad      	b.n	20eee <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   20f92:	2500      	movs	r5, #0
   20f94:	e7c1      	b.n	20f1a <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f96:	480b      	ldr	r0, [pc, #44]	; (20fc4 <z_impl_k_mutex_lock+0x198>)
   20f98:	f7ff ff02 	bl	20da0 <z_spin_unlock_valid>
   20f9c:	b940      	cbnz	r0, 20fb0 <z_impl_k_mutex_lock+0x184>
   20f9e:	490a      	ldr	r1, [pc, #40]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20fa0:	4807      	ldr	r0, [pc, #28]	; (20fc0 <z_impl_k_mutex_lock+0x194>)
   20fa2:	22b9      	movs	r2, #185	; 0xb9
   20fa4:	f005 ff00 	bl	26da8 <assert_print>
   20fa8:	4807      	ldr	r0, [pc, #28]	; (20fc8 <z_impl_k_mutex_lock+0x19c>)
   20faa:	21b9      	movs	r1, #185	; 0xb9
   20fac:	f005 fef5 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   20fb0:	f386 8811 	msr	BASEPRI, r6
   20fb4:	f3bf 8f6f 	isb	sy
   20fb8:	e7e8      	b.n	20f8c <z_impl_k_mutex_lock+0x160>
   20fba:	bf00      	nop
   20fbc:	0002c627 	.word	0x0002c627
   20fc0:	0002a576 	.word	0x0002a576
   20fc4:	20003f74 	.word	0x20003f74
   20fc8:	0002a705 	.word	0x0002a705
   20fcc:	20003f4c 	.word	0x20003f4c

00020fd0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20fd0:	b538      	push	{r3, r4, r5, lr}
   20fd2:	4604      	mov	r4, r0
   20fd4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20fd8:	b143      	cbz	r3, 20fec <z_impl_k_mutex_unlock+0x1c>
   20fda:	4934      	ldr	r1, [pc, #208]	; (210ac <z_impl_k_mutex_unlock+0xdc>)
   20fdc:	4834      	ldr	r0, [pc, #208]	; (210b0 <z_impl_k_mutex_unlock+0xe0>)
   20fde:	22c7      	movs	r2, #199	; 0xc7
   20fe0:	f005 fee2 	bl	26da8 <assert_print>
   20fe4:	4831      	ldr	r0, [pc, #196]	; (210ac <z_impl_k_mutex_unlock+0xdc>)
   20fe6:	21c7      	movs	r1, #199	; 0xc7
   20fe8:	f005 fed7 	bl	26d9a <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   20fec:	68a3      	ldr	r3, [r4, #8]
   20fee:	2b00      	cmp	r3, #0
   20ff0:	d055      	beq.n	2109e <z_impl_k_mutex_unlock+0xce>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   20ff2:	4a30      	ldr	r2, [pc, #192]	; (210b4 <z_impl_k_mutex_unlock+0xe4>)
   20ff4:	6892      	ldr	r2, [r2, #8]
   20ff6:	4293      	cmp	r3, r2
   20ff8:	d154      	bne.n	210a4 <z_impl_k_mutex_unlock+0xd4>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20ffa:	68e3      	ldr	r3, [r4, #12]
   20ffc:	b943      	cbnz	r3, 21010 <z_impl_k_mutex_unlock+0x40>
   20ffe:	492b      	ldr	r1, [pc, #172]	; (210ac <z_impl_k_mutex_unlock+0xdc>)
   21000:	482b      	ldr	r0, [pc, #172]	; (210b0 <z_impl_k_mutex_unlock+0xe0>)
   21002:	22df      	movs	r2, #223	; 0xdf
   21004:	f005 fed0 	bl	26da8 <assert_print>
   21008:	4828      	ldr	r0, [pc, #160]	; (210ac <z_impl_k_mutex_unlock+0xdc>)
   2100a:	21df      	movs	r1, #223	; 0xdf
   2100c:	f005 fec5 	bl	26d9a <assert_post_action>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   21010:	68e3      	ldr	r3, [r4, #12]
   21012:	2b01      	cmp	r3, #1
   21014:	d903      	bls.n	2101e <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count--;
   21016:	3b01      	subs	r3, #1
   21018:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2101a:	2000      	movs	r0, #0
}
   2101c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2101e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21022:	f3ef 8511 	mrs	r5, BASEPRI
   21026:	f383 8812 	msr	BASEPRI_MAX, r3
   2102a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2102e:	4822      	ldr	r0, [pc, #136]	; (210b8 <z_impl_k_mutex_unlock+0xe8>)
   21030:	f7ff fea8 	bl	20d84 <z_spin_lock_valid>
   21034:	b940      	cbnz	r0, 21048 <z_impl_k_mutex_unlock+0x78>
   21036:	4921      	ldr	r1, [pc, #132]	; (210bc <z_impl_k_mutex_unlock+0xec>)
   21038:	481d      	ldr	r0, [pc, #116]	; (210b0 <z_impl_k_mutex_unlock+0xe0>)
   2103a:	228e      	movs	r2, #142	; 0x8e
   2103c:	f005 feb4 	bl	26da8 <assert_print>
   21040:	481e      	ldr	r0, [pc, #120]	; (210bc <z_impl_k_mutex_unlock+0xec>)
   21042:	218e      	movs	r1, #142	; 0x8e
   21044:	f005 fea9 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21048:	481b      	ldr	r0, [pc, #108]	; (210b8 <z_impl_k_mutex_unlock+0xe8>)
   2104a:	f7ff feb9 	bl	20dc0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2104e:	6921      	ldr	r1, [r4, #16]
   21050:	68a0      	ldr	r0, [r4, #8]
   21052:	f008 f996 	bl	29382 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   21056:	4620      	mov	r0, r4
   21058:	f001 fc12 	bl	22880 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2105c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2105e:	b158      	cbz	r0, 21078 <z_impl_k_mutex_unlock+0xa8>
		mutex->owner_orig_prio = new_owner->base.prio;
   21060:	f990 200e 	ldrsb.w	r2, [r0, #14]
   21064:	6122      	str	r2, [r4, #16]
   21066:	2400      	movs	r4, #0
   21068:	67c4      	str	r4, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2106a:	f001 f949 	bl	22300 <z_ready_thread>
		z_reschedule(&lock, key);
   2106e:	4812      	ldr	r0, [pc, #72]	; (210b8 <z_impl_k_mutex_unlock+0xe8>)
   21070:	4629      	mov	r1, r5
   21072:	f000 ff15 	bl	21ea0 <z_reschedule>
   21076:	e7d0      	b.n	2101a <z_impl_k_mutex_unlock+0x4a>
		mutex->lock_count = 0U;
   21078:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2107a:	480f      	ldr	r0, [pc, #60]	; (210b8 <z_impl_k_mutex_unlock+0xe8>)
   2107c:	f7ff fe90 	bl	20da0 <z_spin_unlock_valid>
   21080:	b940      	cbnz	r0, 21094 <z_impl_k_mutex_unlock+0xc4>
   21082:	490e      	ldr	r1, [pc, #56]	; (210bc <z_impl_k_mutex_unlock+0xec>)
   21084:	480a      	ldr	r0, [pc, #40]	; (210b0 <z_impl_k_mutex_unlock+0xe0>)
   21086:	22b9      	movs	r2, #185	; 0xb9
   21088:	f005 fe8e 	bl	26da8 <assert_print>
   2108c:	480b      	ldr	r0, [pc, #44]	; (210bc <z_impl_k_mutex_unlock+0xec>)
   2108e:	21b9      	movs	r1, #185	; 0xb9
   21090:	f005 fe83 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21094:	f385 8811 	msr	BASEPRI, r5
   21098:	f3bf 8f6f 	isb	sy
   2109c:	e7bd      	b.n	2101a <z_impl_k_mutex_unlock+0x4a>
		return -EINVAL;
   2109e:	f06f 0015 	mvn.w	r0, #21
   210a2:	e7bb      	b.n	2101c <z_impl_k_mutex_unlock+0x4c>
		return -EPERM;
   210a4:	f04f 30ff 	mov.w	r0, #4294967295
   210a8:	e7b8      	b.n	2101c <z_impl_k_mutex_unlock+0x4c>
   210aa:	bf00      	nop
   210ac:	0002c627 	.word	0x0002c627
   210b0:	0002a576 	.word	0x0002a576
   210b4:	20003f4c 	.word	0x20003f4c
   210b8:	20003f74 	.word	0x20003f74
   210bc:	0002a705 	.word	0x0002a705

000210c0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   210c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   210c4:	4604      	mov	r4, r0
   210c6:	f89d a020 	ldrb.w	sl, [sp, #32]
   210ca:	460d      	mov	r5, r1
   210cc:	4690      	mov	r8, r2
   210ce:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   210d0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   210d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   210d8:	f3ef 8711 	mrs	r7, BASEPRI
   210dc:	f383 8812 	msr	BASEPRI_MAX, r3
   210e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   210e4:	4630      	mov	r0, r6
   210e6:	f7ff fe4d 	bl	20d84 <z_spin_lock_valid>
   210ea:	b940      	cbnz	r0, 210fe <queue_insert+0x3e>
   210ec:	4936      	ldr	r1, [pc, #216]	; (211c8 <queue_insert+0x108>)
   210ee:	4837      	ldr	r0, [pc, #220]	; (211cc <queue_insert+0x10c>)
   210f0:	228e      	movs	r2, #142	; 0x8e
   210f2:	f005 fe59 	bl	26da8 <assert_print>
   210f6:	4834      	ldr	r0, [pc, #208]	; (211c8 <queue_insert+0x108>)
   210f8:	218e      	movs	r1, #142	; 0x8e
   210fa:	f005 fe4e 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   210fe:	4630      	mov	r0, r6
   21100:	f7ff fe5e 	bl	20dc0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   21104:	f1ba 0f00 	cmp.w	sl, #0
   21108:	d000      	beq.n	2110c <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2110a:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2110c:	f104 000c 	add.w	r0, r4, #12
   21110:	f001 fbb6 	bl	22880 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   21114:	b158      	cbz	r0, 2112e <queue_insert+0x6e>
   21116:	2400      	movs	r4, #0
   21118:	67c4      	str	r4, [r0, #124]	; 0x7c
   2111a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2111e:	f001 f8ef 	bl	22300 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   21122:	4630      	mov	r0, r6
   21124:	4639      	mov	r1, r7
   21126:	f000 febb 	bl	21ea0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   2112a:	2000      	movs	r0, #0
   2112c:	e019      	b.n	21162 <queue_insert+0xa2>
	if (alloc) {
   2112e:	f1b9 0f00 	cmp.w	r9, #0
   21132:	d028      	beq.n	21186 <queue_insert+0xc6>
	return z_thread_aligned_alloc(0, size);
   21134:	2108      	movs	r1, #8
   21136:	f002 fbc3 	bl	238c0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2113a:	b9a0      	cbnz	r0, 21166 <queue_insert+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2113c:	4630      	mov	r0, r6
   2113e:	f7ff fe2f 	bl	20da0 <z_spin_unlock_valid>
   21142:	b940      	cbnz	r0, 21156 <queue_insert+0x96>
   21144:	4920      	ldr	r1, [pc, #128]	; (211c8 <queue_insert+0x108>)
   21146:	4821      	ldr	r0, [pc, #132]	; (211cc <queue_insert+0x10c>)
   21148:	22b9      	movs	r2, #185	; 0xb9
   2114a:	f005 fe2d 	bl	26da8 <assert_print>
   2114e:	481e      	ldr	r0, [pc, #120]	; (211c8 <queue_insert+0x108>)
   21150:	21b9      	movs	r1, #185	; 0xb9
   21152:	f005 fe22 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21156:	f387 8811 	msr	BASEPRI, r7
   2115a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2115e:	f06f 000b 	mvn.w	r0, #11
}
   21162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   21166:	2301      	movs	r3, #1
		anode->data = data;
   21168:	f8c0 8004 	str.w	r8, [r0, #4]
   2116c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2116e:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21170:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   21174:	b95d      	cbnz	r5, 2118e <queue_insert+0xce>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21176:	6823      	ldr	r3, [r4, #0]
   21178:	4313      	orrs	r3, r2
   2117a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2117c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2117e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21180:	b973      	cbnz	r3, 211a0 <queue_insert+0xe0>
	list->tail = node;
   21182:	6060      	str	r0, [r4, #4]
}
   21184:	e00c      	b.n	211a0 <queue_insert+0xe0>
	node->next_and_flags = flags;
   21186:	f8c8 9000 	str.w	r9, [r8]
}
   2118a:	4640      	mov	r0, r8
   2118c:	e7ef      	b.n	2116e <queue_insert+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2118e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   21190:	f033 0303 	bics.w	r3, r3, #3
   21194:	d110      	bne.n	211b8 <queue_insert+0xf8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21196:	6002      	str	r2, [r0, #0]
	return list->tail;
   21198:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2119a:	b93a      	cbnz	r2, 211ac <queue_insert+0xec>
	list->head = node;
   2119c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   211a0:	2104      	movs	r1, #4
   211a2:	f104 0014 	add.w	r0, r4, #20
   211a6:	f008 fa8e 	bl	296c6 <z_handle_obj_poll_events>
   211aa:	e7ba      	b.n	21122 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   211ac:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   211ae:	f003 0303 	and.w	r3, r3, #3
   211b2:	4303      	orrs	r3, r0
   211b4:	6013      	str	r3, [r2, #0]
   211b6:	e7e4      	b.n	21182 <queue_insert+0xc2>
   211b8:	4313      	orrs	r3, r2
   211ba:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   211bc:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   211be:	f003 0303 	and.w	r3, r3, #3
   211c2:	4303      	orrs	r3, r0
   211c4:	602b      	str	r3, [r5, #0]
}
   211c6:	e7eb      	b.n	211a0 <queue_insert+0xe0>
   211c8:	0002a705 	.word	0x0002a705
   211cc:	0002a576 	.word	0x0002a576

000211d0 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   211d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   211d4:	4605      	mov	r5, r0
   211d6:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   211d8:	460c      	mov	r4, r1
   211da:	2900      	cmp	r1, #0
   211dc:	d045      	beq.n	2126a <k_queue_append_list+0x9a>
   211de:	2a00      	cmp	r2, #0
   211e0:	d043      	beq.n	2126a <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   211e2:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   211e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   211ea:	f3ef 8911 	mrs	r9, BASEPRI
   211ee:	f383 8812 	msr	BASEPRI_MAX, r3
   211f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   211f6:	4638      	mov	r0, r7
   211f8:	f7ff fdc4 	bl	20d84 <z_spin_lock_valid>
   211fc:	b940      	cbnz	r0, 21210 <k_queue_append_list+0x40>
   211fe:	491c      	ldr	r1, [pc, #112]	; (21270 <k_queue_append_list+0xa0>)
   21200:	481c      	ldr	r0, [pc, #112]	; (21274 <k_queue_append_list+0xa4>)
   21202:	228e      	movs	r2, #142	; 0x8e
   21204:	f005 fdd0 	bl	26da8 <assert_print>
   21208:	4819      	ldr	r0, [pc, #100]	; (21270 <k_queue_append_list+0xa0>)
   2120a:	218e      	movs	r1, #142	; 0x8e
   2120c:	f005 fdc5 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21210:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   21212:	f105 080c 	add.w	r8, r5, #12
   21216:	f7ff fdd3 	bl	20dc0 <z_spin_lock_set_owner>
   2121a:	4640      	mov	r0, r8
   2121c:	f001 fb30 	bl	22880 <z_unpend_first_thread>
   21220:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   21224:	b920      	cbnz	r0, 21230 <k_queue_append_list+0x60>
	return list->tail;
   21226:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   21228:	b9ca      	cbnz	r2, 2125e <k_queue_append_list+0x8e>
	list->head = node;
   2122a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2122c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2122e:	e00a      	b.n	21246 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   21230:	6144      	str	r4, [r0, #20]
   21232:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   21236:	f001 f863 	bl	22300 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   2123a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2123c:	4640      	mov	r0, r8
   2123e:	f001 fb1f 	bl	22880 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   21242:	2c00      	cmp	r4, #0
   21244:	d1ee      	bne.n	21224 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   21246:	2104      	movs	r1, #4
   21248:	f105 0014 	add.w	r0, r5, #20
   2124c:	f008 fa3b 	bl	296c6 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   21250:	4638      	mov	r0, r7
   21252:	4649      	mov	r1, r9
   21254:	f000 fe24 	bl	21ea0 <z_reschedule>
	return 0;
   21258:	2000      	movs	r0, #0
}
   2125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2125e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21260:	f003 0303 	and.w	r3, r3, #3
   21264:	431c      	orrs	r4, r3
   21266:	6014      	str	r4, [r2, #0]
}
   21268:	e7e0      	b.n	2122c <k_queue_append_list+0x5c>
		return -EINVAL;
   2126a:	f06f 0015 	mvn.w	r0, #21
   2126e:	e7f4      	b.n	2125a <k_queue_append_list+0x8a>
   21270:	0002a705 	.word	0x0002a705
   21274:	0002a576 	.word	0x0002a576

00021278 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   21278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2127c:	4605      	mov	r5, r0
   2127e:	4690      	mov	r8, r2
   21280:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21282:	f100 0608 	add.w	r6, r0, #8
   21286:	f04f 0340 	mov.w	r3, #64	; 0x40
   2128a:	f3ef 8911 	mrs	r9, BASEPRI
   2128e:	f383 8812 	msr	BASEPRI_MAX, r3
   21292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21296:	4630      	mov	r0, r6
   21298:	f7ff fd74 	bl	20d84 <z_spin_lock_valid>
   2129c:	b940      	cbnz	r0, 212b0 <z_impl_k_queue_get+0x38>
   2129e:	4920      	ldr	r1, [pc, #128]	; (21320 <z_impl_k_queue_get+0xa8>)
   212a0:	4820      	ldr	r0, [pc, #128]	; (21324 <z_impl_k_queue_get+0xac>)
   212a2:	228e      	movs	r2, #142	; 0x8e
   212a4:	f005 fd80 	bl	26da8 <assert_print>
   212a8:	481d      	ldr	r0, [pc, #116]	; (21320 <z_impl_k_queue_get+0xa8>)
   212aa:	218e      	movs	r1, #142	; 0x8e
   212ac:	f005 fd75 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   212b0:	4630      	mov	r0, r6
   212b2:	f7ff fd85 	bl	20dc0 <z_spin_lock_set_owner>
	return list->head;
   212b6:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   212b8:	b30c      	cbz	r4, 212fe <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   212ba:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   212bc:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   212be:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   212c2:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   212c4:	4620      	mov	r0, r4
	list->head = node;
   212c6:	602b      	str	r3, [r5, #0]
	list->tail = node;
   212c8:	bf08      	it	eq
   212ca:	606b      	streq	r3, [r5, #4]
   212cc:	2101      	movs	r1, #1
   212ce:	f008 f867 	bl	293a0 <z_queue_node_peek>
   212d2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212d4:	4630      	mov	r0, r6
   212d6:	f7ff fd63 	bl	20da0 <z_spin_unlock_valid>
   212da:	b940      	cbnz	r0, 212ee <z_impl_k_queue_get+0x76>
   212dc:	4910      	ldr	r1, [pc, #64]	; (21320 <z_impl_k_queue_get+0xa8>)
   212de:	4811      	ldr	r0, [pc, #68]	; (21324 <z_impl_k_queue_get+0xac>)
   212e0:	22b9      	movs	r2, #185	; 0xb9
   212e2:	f005 fd61 	bl	26da8 <assert_print>
   212e6:	480e      	ldr	r0, [pc, #56]	; (21320 <z_impl_k_queue_get+0xa8>)
   212e8:	21b9      	movs	r1, #185	; 0xb9
   212ea:	f005 fd56 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   212ee:	f389 8811 	msr	BASEPRI, r9
   212f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   212f6:	4620      	mov	r0, r4
   212f8:	b003      	add	sp, #12
   212fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   212fe:	ea58 0307 	orrs.w	r3, r8, r7
   21302:	d0e7      	beq.n	212d4 <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   21304:	e9cd 8700 	strd	r8, r7, [sp]
   21308:	f105 020c 	add.w	r2, r5, #12
   2130c:	4649      	mov	r1, r9
   2130e:	4630      	mov	r0, r6
   21310:	f001 f95a 	bl	225c8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   21314:	2800      	cmp	r0, #0
   21316:	d1ee      	bne.n	212f6 <z_impl_k_queue_get+0x7e>
   21318:	4b03      	ldr	r3, [pc, #12]	; (21328 <z_impl_k_queue_get+0xb0>)
   2131a:	689b      	ldr	r3, [r3, #8]
   2131c:	695c      	ldr	r4, [r3, #20]
   2131e:	e7ea      	b.n	212f6 <z_impl_k_queue_get+0x7e>
   21320:	0002a705 	.word	0x0002a705
   21324:	0002a576 	.word	0x0002a576
   21328:	20003f4c 	.word	0x20003f4c

0002132c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2132c:	b538      	push	{r3, r4, r5, lr}
   2132e:	4604      	mov	r4, r0
	__asm__ volatile(
   21330:	f04f 0340 	mov.w	r3, #64	; 0x40
   21334:	f3ef 8511 	mrs	r5, BASEPRI
   21338:	f383 8812 	msr	BASEPRI_MAX, r3
   2133c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21340:	4814      	ldr	r0, [pc, #80]	; (21394 <z_impl_k_sem_give+0x68>)
   21342:	f7ff fd1f 	bl	20d84 <z_spin_lock_valid>
   21346:	b940      	cbnz	r0, 2135a <z_impl_k_sem_give+0x2e>
   21348:	4913      	ldr	r1, [pc, #76]	; (21398 <z_impl_k_sem_give+0x6c>)
   2134a:	4814      	ldr	r0, [pc, #80]	; (2139c <z_impl_k_sem_give+0x70>)
   2134c:	228e      	movs	r2, #142	; 0x8e
   2134e:	f005 fd2b 	bl	26da8 <assert_print>
   21352:	4811      	ldr	r0, [pc, #68]	; (21398 <z_impl_k_sem_give+0x6c>)
   21354:	218e      	movs	r1, #142	; 0x8e
   21356:	f005 fd20 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   2135a:	480e      	ldr	r0, [pc, #56]	; (21394 <z_impl_k_sem_give+0x68>)
   2135c:	f7ff fd30 	bl	20dc0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   21360:	4620      	mov	r0, r4
   21362:	f001 fa8d 	bl	22880 <z_unpend_first_thread>

	if (thread != NULL) {
   21366:	b148      	cbz	r0, 2137c <z_impl_k_sem_give+0x50>
   21368:	2200      	movs	r2, #0
   2136a:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2136c:	f000 ffc8 	bl	22300 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21370:	4629      	mov	r1, r5
   21372:	4808      	ldr	r0, [pc, #32]	; (21394 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21378:	f000 bd92 	b.w	21ea0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2137c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21380:	429a      	cmp	r2, r3
   21382:	bf18      	it	ne
   21384:	3301      	addne	r3, #1
   21386:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21388:	2102      	movs	r1, #2
   2138a:	f104 0010 	add.w	r0, r4, #16
   2138e:	f008 f99a 	bl	296c6 <z_handle_obj_poll_events>
}
   21392:	e7ed      	b.n	21370 <z_impl_k_sem_give+0x44>
   21394:	20003f78 	.word	0x20003f78
   21398:	0002a705 	.word	0x0002a705
   2139c:	0002a576 	.word	0x0002a576

000213a0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   213a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   213a2:	4604      	mov	r4, r0
   213a4:	4616      	mov	r6, r2
   213a6:	461d      	mov	r5, r3
   213a8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   213ac:	b15b      	cbz	r3, 213c6 <z_impl_k_sem_take+0x26>
   213ae:	ea52 0305 	orrs.w	r3, r2, r5
   213b2:	d008      	beq.n	213c6 <z_impl_k_sem_take+0x26>
   213b4:	492b      	ldr	r1, [pc, #172]	; (21464 <z_impl_k_sem_take+0xc4>)
   213b6:	482c      	ldr	r0, [pc, #176]	; (21468 <z_impl_k_sem_take+0xc8>)
   213b8:	2279      	movs	r2, #121	; 0x79
   213ba:	f005 fcf5 	bl	26da8 <assert_print>
   213be:	4829      	ldr	r0, [pc, #164]	; (21464 <z_impl_k_sem_take+0xc4>)
   213c0:	2179      	movs	r1, #121	; 0x79
   213c2:	f005 fcea 	bl	26d9a <assert_post_action>
   213c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   213ca:	f3ef 8711 	mrs	r7, BASEPRI
   213ce:	f383 8812 	msr	BASEPRI_MAX, r3
   213d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   213d6:	4825      	ldr	r0, [pc, #148]	; (2146c <z_impl_k_sem_take+0xcc>)
   213d8:	f7ff fcd4 	bl	20d84 <z_spin_lock_valid>
   213dc:	b940      	cbnz	r0, 213f0 <z_impl_k_sem_take+0x50>
   213de:	4924      	ldr	r1, [pc, #144]	; (21470 <z_impl_k_sem_take+0xd0>)
   213e0:	4821      	ldr	r0, [pc, #132]	; (21468 <z_impl_k_sem_take+0xc8>)
   213e2:	228e      	movs	r2, #142	; 0x8e
   213e4:	f005 fce0 	bl	26da8 <assert_print>
   213e8:	4821      	ldr	r0, [pc, #132]	; (21470 <z_impl_k_sem_take+0xd0>)
   213ea:	218e      	movs	r1, #142	; 0x8e
   213ec:	f005 fcd5 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   213f0:	481e      	ldr	r0, [pc, #120]	; (2146c <z_impl_k_sem_take+0xcc>)
   213f2:	f7ff fce5 	bl	20dc0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   213f6:	68a3      	ldr	r3, [r4, #8]
   213f8:	b1ab      	cbz	r3, 21426 <z_impl_k_sem_take+0x86>
		sem->count--;
   213fa:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213fc:	481b      	ldr	r0, [pc, #108]	; (2146c <z_impl_k_sem_take+0xcc>)
   213fe:	60a3      	str	r3, [r4, #8]
   21400:	f7ff fcce 	bl	20da0 <z_spin_unlock_valid>
   21404:	b940      	cbnz	r0, 21418 <z_impl_k_sem_take+0x78>
   21406:	491a      	ldr	r1, [pc, #104]	; (21470 <z_impl_k_sem_take+0xd0>)
   21408:	4817      	ldr	r0, [pc, #92]	; (21468 <z_impl_k_sem_take+0xc8>)
   2140a:	22b9      	movs	r2, #185	; 0xb9
   2140c:	f005 fccc 	bl	26da8 <assert_print>
   21410:	4817      	ldr	r0, [pc, #92]	; (21470 <z_impl_k_sem_take+0xd0>)
   21412:	21b9      	movs	r1, #185	; 0xb9
   21414:	f005 fcc1 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21418:	f387 8811 	msr	BASEPRI, r7
   2141c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21420:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21422:	b003      	add	sp, #12
   21424:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21426:	ea56 0305 	orrs.w	r3, r6, r5
   2142a:	d113      	bne.n	21454 <z_impl_k_sem_take+0xb4>
   2142c:	480f      	ldr	r0, [pc, #60]	; (2146c <z_impl_k_sem_take+0xcc>)
   2142e:	f7ff fcb7 	bl	20da0 <z_spin_unlock_valid>
   21432:	b940      	cbnz	r0, 21446 <z_impl_k_sem_take+0xa6>
   21434:	490e      	ldr	r1, [pc, #56]	; (21470 <z_impl_k_sem_take+0xd0>)
   21436:	480c      	ldr	r0, [pc, #48]	; (21468 <z_impl_k_sem_take+0xc8>)
   21438:	22b9      	movs	r2, #185	; 0xb9
   2143a:	f005 fcb5 	bl	26da8 <assert_print>
   2143e:	480c      	ldr	r0, [pc, #48]	; (21470 <z_impl_k_sem_take+0xd0>)
   21440:	21b9      	movs	r1, #185	; 0xb9
   21442:	f005 fcaa 	bl	26d9a <assert_post_action>
   21446:	f387 8811 	msr	BASEPRI, r7
   2144a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2144e:	f06f 000f 	mvn.w	r0, #15
   21452:	e7e6      	b.n	21422 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21454:	e9cd 6500 	strd	r6, r5, [sp]
   21458:	4622      	mov	r2, r4
   2145a:	4639      	mov	r1, r7
   2145c:	4803      	ldr	r0, [pc, #12]	; (2146c <z_impl_k_sem_take+0xcc>)
   2145e:	f001 f8b3 	bl	225c8 <z_pend_curr>
	return ret;
   21462:	e7de      	b.n	21422 <z_impl_k_sem_take+0x82>
   21464:	0002c649 	.word	0x0002c649
   21468:	0002a576 	.word	0x0002a576
   2146c:	20003f78 	.word	0x20003f78
   21470:	0002a705 	.word	0x0002a705

00021474 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21476:	4b09      	ldr	r3, [pc, #36]	; (2149c <k_sys_work_q_init+0x28>)
   21478:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2147a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   2147c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2147e:	9300      	str	r3, [sp, #0]
   21480:	4907      	ldr	r1, [pc, #28]	; (214a0 <k_sys_work_q_init+0x2c>)
   21482:	4808      	ldr	r0, [pc, #32]	; (214a4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   21484:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21488:	f04f 33ff 	mov.w	r3, #4294967295
   2148c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21490:	f000 fa76 	bl	21980 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21494:	4620      	mov	r0, r4
   21496:	b004      	add	sp, #16
   21498:	bd10      	pop	{r4, pc}
   2149a:	bf00      	nop
   2149c:	0002c669 	.word	0x0002c669
   214a0:	20010600 	.word	0x20010600
   214a4:	20003440 	.word	0x20003440

000214a8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   214a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214ac:	4e70      	ldr	r6, [pc, #448]	; (21670 <work_queue_main+0x1c8>)
	return list->head;
   214ae:	4f71      	ldr	r7, [pc, #452]	; (21674 <work_queue_main+0x1cc>)
   214b0:	b085      	sub	sp, #20
   214b2:	4604      	mov	r4, r0
	__asm__ volatile(
   214b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   214b8:	f3ef 8811 	mrs	r8, BASEPRI
   214bc:	f383 8812 	msr	BASEPRI_MAX, r3
   214c0:	f3bf 8f6f 	isb	sy
   214c4:	4630      	mov	r0, r6
   214c6:	f7ff fc5d 	bl	20d84 <z_spin_lock_valid>
   214ca:	b940      	cbnz	r0, 214de <work_queue_main+0x36>
   214cc:	496a      	ldr	r1, [pc, #424]	; (21678 <work_queue_main+0x1d0>)
   214ce:	486b      	ldr	r0, [pc, #428]	; (2167c <work_queue_main+0x1d4>)
   214d0:	228e      	movs	r2, #142	; 0x8e
   214d2:	f005 fc69 	bl	26da8 <assert_print>
   214d6:	4868      	ldr	r0, [pc, #416]	; (21678 <work_queue_main+0x1d0>)
   214d8:	218e      	movs	r1, #142	; 0x8e
   214da:	f005 fc5e 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   214de:	4630      	mov	r0, r6
   214e0:	f7ff fc6e 	bl	20dc0 <z_spin_lock_set_owner>
   214e4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   214e8:	b9b5      	cbnz	r5, 21518 <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   214ea:	2102      	movs	r1, #2
   214ec:	f104 0098 	add.w	r0, r4, #152	; 0x98
   214f0:	f007 ff94 	bl	2941c <flag_test_and_clear>
   214f4:	2800      	cmp	r0, #0
   214f6:	f040 8084 	bne.w	21602 <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   214fa:	2300      	movs	r3, #0
   214fc:	9302      	str	r3, [sp, #8]
   214fe:	f04f 32ff 	mov.w	r2, #4294967295
   21502:	f04f 33ff 	mov.w	r3, #4294967295
   21506:	e9cd 2300 	strd	r2, r3, [sp]
   2150a:	4641      	mov	r1, r8
   2150c:	f104 0288 	add.w	r2, r4, #136	; 0x88
   21510:	4630      	mov	r0, r6
   21512:	f001 fc43 	bl	22d9c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   21516:	e7cd      	b.n	214b4 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21518:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   2151c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2151e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21522:	4295      	cmp	r5, r2
   21524:	d101      	bne.n	2152a <work_queue_main+0x82>
	list->tail = node;
   21526:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2152a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
			handler = work->handler;
   2152e:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp |= BIT(bit);
   21532:	f043 0302 	orr.w	r3, r3, #2
   21536:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2153a:	68eb      	ldr	r3, [r5, #12]
   2153c:	f023 0304 	bic.w	r3, r3, #4
   21540:	f043 0301 	orr.w	r3, r3, #1
   21544:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21546:	4630      	mov	r0, r6
   21548:	f7ff fc2a 	bl	20da0 <z_spin_unlock_valid>
   2154c:	b940      	cbnz	r0, 21560 <work_queue_main+0xb8>
   2154e:	494a      	ldr	r1, [pc, #296]	; (21678 <work_queue_main+0x1d0>)
   21550:	484a      	ldr	r0, [pc, #296]	; (2167c <work_queue_main+0x1d4>)
   21552:	22b9      	movs	r2, #185	; 0xb9
   21554:	f005 fc28 	bl	26da8 <assert_print>
   21558:	4847      	ldr	r0, [pc, #284]	; (21678 <work_queue_main+0x1d0>)
   2155a:	21b9      	movs	r1, #185	; 0xb9
   2155c:	f005 fc1d 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21560:	f388 8811 	msr	BASEPRI, r8
   21564:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   21568:	f1b9 0f00 	cmp.w	r9, #0
   2156c:	d10a      	bne.n	21584 <work_queue_main+0xdc>
   2156e:	4944      	ldr	r1, [pc, #272]	; (21680 <work_queue_main+0x1d8>)
   21570:	4842      	ldr	r0, [pc, #264]	; (2167c <work_queue_main+0x1d4>)
   21572:	f240 229b 	movw	r2, #667	; 0x29b
   21576:	f005 fc17 	bl	26da8 <assert_print>
   2157a:	4841      	ldr	r0, [pc, #260]	; (21680 <work_queue_main+0x1d8>)
   2157c:	f240 219b 	movw	r1, #667	; 0x29b
   21580:	f005 fc0b 	bl	26d9a <assert_post_action>
		handler(work);
   21584:	4628      	mov	r0, r5
   21586:	47c8      	blx	r9
	__asm__ volatile(
   21588:	f04f 0340 	mov.w	r3, #64	; 0x40
   2158c:	f3ef 8a11 	mrs	sl, BASEPRI
   21590:	f383 8812 	msr	BASEPRI_MAX, r3
   21594:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21598:	4630      	mov	r0, r6
   2159a:	f7ff fbf3 	bl	20d84 <z_spin_lock_valid>
   2159e:	b940      	cbnz	r0, 215b2 <work_queue_main+0x10a>
   215a0:	4935      	ldr	r1, [pc, #212]	; (21678 <work_queue_main+0x1d0>)
   215a2:	4836      	ldr	r0, [pc, #216]	; (2167c <work_queue_main+0x1d4>)
   215a4:	228e      	movs	r2, #142	; 0x8e
   215a6:	f005 fbff 	bl	26da8 <assert_print>
   215aa:	4833      	ldr	r0, [pc, #204]	; (21678 <work_queue_main+0x1d0>)
   215ac:	218e      	movs	r1, #142	; 0x8e
   215ae:	f005 fbf4 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   215b2:	4630      	mov	r0, r6
   215b4:	f7ff fc04 	bl	20dc0 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   215b8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   215ba:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   215bc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   215c0:	d429      	bmi.n	21616 <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   215c2:	60ea      	str	r2, [r5, #12]
   215c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   215c8:	f023 0302 	bic.w	r3, r3, #2
   215cc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215d0:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   215d2:	f3c3 2500 	ubfx	r5, r3, #8, #1
   215d6:	f7ff fbe3 	bl	20da0 <z_spin_unlock_valid>
   215da:	b940      	cbnz	r0, 215ee <work_queue_main+0x146>
   215dc:	4926      	ldr	r1, [pc, #152]	; (21678 <work_queue_main+0x1d0>)
   215de:	4827      	ldr	r0, [pc, #156]	; (2167c <work_queue_main+0x1d4>)
   215e0:	22b9      	movs	r2, #185	; 0xb9
   215e2:	f005 fbe1 	bl	26da8 <assert_print>
   215e6:	4824      	ldr	r0, [pc, #144]	; (21678 <work_queue_main+0x1d0>)
   215e8:	21b9      	movs	r1, #185	; 0xb9
   215ea:	f005 fbd6 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   215ee:	f38a 8811 	msr	BASEPRI, sl
   215f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   215f6:	2d00      	cmp	r5, #0
   215f8:	f47f af5c 	bne.w	214b4 <work_queue_main+0xc>
	z_impl_k_yield();
   215fc:	f001 f98a 	bl	22914 <z_impl_k_yield>
}
   21600:	e758      	b.n	214b4 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21602:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21606:	2200      	movs	r2, #0
   21608:	2101      	movs	r1, #1
   2160a:	4628      	mov	r0, r5
   2160c:	f001 fb80 	bl	22d10 <z_sched_wake>
   21610:	2800      	cmp	r0, #0
   21612:	d1f8      	bne.n	21606 <work_queue_main+0x15e>
   21614:	e771      	b.n	214fa <work_queue_main+0x52>
	return list->head;
   21616:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   21618:	f023 0303 	bic.w	r3, r3, #3
   2161c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2161e:	2800      	cmp	r0, #0
   21620:	d0d0      	beq.n	215c4 <work_queue_main+0x11c>
	return node->next;
   21622:	f04f 0800 	mov.w	r8, #0
   21626:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   2162a:	46c3      	mov	fp, r8
		if (wc->work == work) {
   2162c:	6843      	ldr	r3, [r0, #4]
   2162e:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   21630:	4602      	mov	r2, r0
		if (wc->work == work) {
   21632:	d10d      	bne.n	21650 <work_queue_main+0x1a8>
	return node->next;
   21634:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21636:	f1b8 0f00 	cmp.w	r8, #0
   2163a:	d111      	bne.n	21660 <work_queue_main+0x1b8>
   2163c:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   2163e:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   21640:	4283      	cmp	r3, r0
   21642:	d100      	bne.n	21646 <work_queue_main+0x19e>
	list->tail = node;
   21644:	607a      	str	r2, [r7, #4]
	parent->next = child;
   21646:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2164a:	f7ff fe6f 	bl	2132c <z_impl_k_sem_give>
}
   2164e:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21650:	f1b9 0f00 	cmp.w	r9, #0
   21654:	d0b6      	beq.n	215c4 <work_queue_main+0x11c>
	return node->next;
   21656:	4648      	mov	r0, r9
   21658:	4690      	mov	r8, r2
   2165a:	f8d9 9000 	ldr.w	r9, [r9]
   2165e:	e7e5      	b.n	2162c <work_queue_main+0x184>
	return list->tail;
   21660:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   21662:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   21666:	4298      	cmp	r0, r3
	list->tail = node;
   21668:	bf08      	it	eq
   2166a:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   2166e:	e7ea      	b.n	21646 <work_queue_main+0x19e>
   21670:	20003f7c 	.word	0x20003f7c
   21674:	20003f80 	.word	0x20003f80
   21678:	0002a705 	.word	0x0002a705
   2167c:	0002a576 	.word	0x0002a576
   21680:	0002c672 	.word	0x0002c672

00021684 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   21684:	68c3      	ldr	r3, [r0, #12]
{
   21686:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21688:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2168c:	079b      	lsls	r3, r3, #30
{
   2168e:	4605      	mov	r5, r0
   21690:	460c      	mov	r4, r1
	if (ret) {
   21692:	d50d      	bpl.n	216b0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21694:	2201      	movs	r2, #1
   21696:	2100      	movs	r1, #0
   21698:	f104 0008 	add.w	r0, r4, #8
   2169c:	f007 feae 	bl	293fc <z_impl_k_sem_init>
	parent->next = child;
   216a0:	2300      	movs	r3, #0
   216a2:	6023      	str	r3, [r4, #0]
	return list->tail;
   216a4:	4b05      	ldr	r3, [pc, #20]	; (216bc <cancel_sync_locked+0x38>)
	canceler->work = work;
   216a6:	6065      	str	r5, [r4, #4]
   216a8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   216aa:	b91a      	cbnz	r2, 216b4 <cancel_sync_locked+0x30>
	list->head = node;
   216ac:	e9c3 4400 	strd	r4, r4, [r3]
}
   216b0:	4630      	mov	r0, r6
   216b2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   216b4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   216b6:	605c      	str	r4, [r3, #4]
}
   216b8:	e7fa      	b.n	216b0 <cancel_sync_locked+0x2c>
   216ba:	bf00      	nop
   216bc:	20003f80 	.word	0x20003f80

000216c0 <submit_to_queue_locked>:
{
   216c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   216c2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   216c4:	079a      	lsls	r2, r3, #30
{
   216c6:	4604      	mov	r4, r0
   216c8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   216ca:	f3c3 0540 	ubfx	r5, r3, #1, #1
   216ce:	d42a      	bmi.n	21726 <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   216d0:	075f      	lsls	r7, r3, #29
   216d2:	d42a      	bmi.n	2172a <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   216d4:	680a      	ldr	r2, [r1, #0]
   216d6:	b90a      	cbnz	r2, 216dc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   216d8:	6882      	ldr	r2, [r0, #8]
   216da:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   216dc:	07d8      	lsls	r0, r3, #31
   216de:	d527      	bpl.n	21730 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   216e0:	68a3      	ldr	r3, [r4, #8]
   216e2:	b953      	cbnz	r3, 216fa <submit_to_queue_locked+0x3a>
   216e4:	4923      	ldr	r1, [pc, #140]	; (21774 <submit_to_queue_locked+0xb4>)
   216e6:	4824      	ldr	r0, [pc, #144]	; (21778 <submit_to_queue_locked+0xb8>)
   216e8:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   216ec:	f005 fb5c 	bl	26da8 <assert_print>
   216f0:	4820      	ldr	r0, [pc, #128]	; (21774 <submit_to_queue_locked+0xb4>)
   216f2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   216f6:	f005 fb50 	bl	26d9a <assert_post_action>
			*queuep = work->queue;
   216fa:	68a3      	ldr	r3, [r4, #8]
   216fc:	6033      	str	r3, [r6, #0]
			ret = 2;
   216fe:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   21700:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   21702:	b38f      	cbz	r7, 21768 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21704:	4b1d      	ldr	r3, [pc, #116]	; (2177c <submit_to_queue_locked+0xbc>)
   21706:	689b      	ldr	r3, [r3, #8]
   21708:	42bb      	cmp	r3, r7
   2170a:	d113      	bne.n	21734 <submit_to_queue_locked+0x74>
   2170c:	f007 fe25 	bl	2935a <k_is_in_isr>
   21710:	f080 0001 	eor.w	r0, r0, #1
   21714:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   21716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2171a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2171c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21720:	d525      	bpl.n	2176e <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   21722:	b14a      	cbz	r2, 21738 <submit_to_queue_locked+0x78>
   21724:	b950      	cbnz	r0, 2173c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   21726:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   2172a:	2300      	movs	r3, #0
   2172c:	6033      	str	r3, [r6, #0]
	return ret;
   2172e:	e015      	b.n	2175c <submit_to_queue_locked+0x9c>
		ret = 1;
   21730:	2501      	movs	r5, #1
   21732:	e7e5      	b.n	21700 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21734:	2000      	movs	r0, #0
   21736:	e7ee      	b.n	21716 <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   21738:	071b      	lsls	r3, r3, #28
   2173a:	d4f4      	bmi.n	21726 <submit_to_queue_locked+0x66>
	parent->next = child;
   2173c:	2300      	movs	r3, #0
   2173e:	6023      	str	r3, [r4, #0]
	return list->tail;
   21740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   21744:	b963      	cbnz	r3, 21760 <submit_to_queue_locked+0xa0>
	list->head = node;
   21746:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2174a:	4638      	mov	r0, r7
   2174c:	f007 fe7f 	bl	2944e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   21750:	68e3      	ldr	r3, [r4, #12]
   21752:	f043 0304 	orr.w	r3, r3, #4
   21756:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21758:	6833      	ldr	r3, [r6, #0]
   2175a:	60a3      	str	r3, [r4, #8]
}
   2175c:	4628      	mov	r0, r5
   2175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   21760:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21762:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   21766:	e7f0      	b.n	2174a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   21768:	f06f 0515 	mvn.w	r5, #21
   2176c:	e7dd      	b.n	2172a <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   2176e:	f06f 0512 	mvn.w	r5, #18
   21772:	e7da      	b.n	2172a <submit_to_queue_locked+0x6a>
   21774:	0002c672 	.word	0x0002c672
   21778:	0002a576 	.word	0x0002a576
   2177c:	20003f4c 	.word	0x20003f4c

00021780 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   21780:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21782:	4604      	mov	r4, r0
	__asm__ volatile(
   21784:	f04f 0340 	mov.w	r3, #64	; 0x40
   21788:	f3ef 8511 	mrs	r5, BASEPRI
   2178c:	f383 8812 	msr	BASEPRI_MAX, r3
   21790:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21794:	4818      	ldr	r0, [pc, #96]	; (217f8 <work_timeout+0x78>)
   21796:	f7ff faf5 	bl	20d84 <z_spin_lock_valid>
   2179a:	b940      	cbnz	r0, 217ae <work_timeout+0x2e>
   2179c:	4917      	ldr	r1, [pc, #92]	; (217fc <work_timeout+0x7c>)
   2179e:	4818      	ldr	r0, [pc, #96]	; (21800 <work_timeout+0x80>)
   217a0:	228e      	movs	r2, #142	; 0x8e
   217a2:	f005 fb01 	bl	26da8 <assert_print>
   217a6:	4815      	ldr	r0, [pc, #84]	; (217fc <work_timeout+0x7c>)
   217a8:	218e      	movs	r1, #142	; 0x8e
   217aa:	f005 faf6 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   217ae:	4812      	ldr	r0, [pc, #72]	; (217f8 <work_timeout+0x78>)
   217b0:	f7ff fb06 	bl	20dc0 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   217b4:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   217b6:	2103      	movs	r1, #3
   217b8:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   217ba:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   217bc:	f1a4 0610 	sub.w	r6, r4, #16
   217c0:	f007 fe2c 	bl	2941c <flag_test_and_clear>
   217c4:	b128      	cbz	r0, 217d2 <work_timeout+0x52>
		queue = dw->queue;
   217c6:	69a3      	ldr	r3, [r4, #24]
   217c8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   217ca:	a901      	add	r1, sp, #4
   217cc:	4630      	mov	r0, r6
   217ce:	f7ff ff77 	bl	216c0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217d2:	4809      	ldr	r0, [pc, #36]	; (217f8 <work_timeout+0x78>)
   217d4:	f7ff fae4 	bl	20da0 <z_spin_unlock_valid>
   217d8:	b940      	cbnz	r0, 217ec <work_timeout+0x6c>
   217da:	4908      	ldr	r1, [pc, #32]	; (217fc <work_timeout+0x7c>)
   217dc:	4808      	ldr	r0, [pc, #32]	; (21800 <work_timeout+0x80>)
   217de:	22b9      	movs	r2, #185	; 0xb9
   217e0:	f005 fae2 	bl	26da8 <assert_print>
   217e4:	4805      	ldr	r0, [pc, #20]	; (217fc <work_timeout+0x7c>)
   217e6:	21b9      	movs	r1, #185	; 0xb9
   217e8:	f005 fad7 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   217ec:	f385 8811 	msr	BASEPRI, r5
   217f0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   217f4:	b002      	add	sp, #8
   217f6:	bd70      	pop	{r4, r5, r6, pc}
   217f8:	20003f7c 	.word	0x20003f7c
   217fc:	0002a705 	.word	0x0002a705
   21800:	0002a576 	.word	0x0002a576

00021804 <k_work_init>:
{
   21804:	b538      	push	{r3, r4, r5, lr}
   21806:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   21808:	4604      	mov	r4, r0
   2180a:	b940      	cbnz	r0, 2181e <k_work_init+0x1a>
   2180c:	490c      	ldr	r1, [pc, #48]	; (21840 <k_work_init+0x3c>)
   2180e:	480d      	ldr	r0, [pc, #52]	; (21844 <k_work_init+0x40>)
   21810:	2289      	movs	r2, #137	; 0x89
   21812:	f005 fac9 	bl	26da8 <assert_print>
   21816:	480a      	ldr	r0, [pc, #40]	; (21840 <k_work_init+0x3c>)
   21818:	2189      	movs	r1, #137	; 0x89
   2181a:	f005 fabe 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   2181e:	b945      	cbnz	r5, 21832 <k_work_init+0x2e>
   21820:	4907      	ldr	r1, [pc, #28]	; (21840 <k_work_init+0x3c>)
   21822:	4808      	ldr	r0, [pc, #32]	; (21844 <k_work_init+0x40>)
   21824:	228a      	movs	r2, #138	; 0x8a
   21826:	f005 fabf 	bl	26da8 <assert_print>
   2182a:	4805      	ldr	r0, [pc, #20]	; (21840 <k_work_init+0x3c>)
   2182c:	218a      	movs	r1, #138	; 0x8a
   2182e:	f005 fab4 	bl	26d9a <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21832:	2210      	movs	r2, #16
   21834:	2100      	movs	r1, #0
   21836:	4620      	mov	r0, r4
   21838:	f005 fd94 	bl	27364 <memset>
   2183c:	6065      	str	r5, [r4, #4]
}
   2183e:	bd38      	pop	{r3, r4, r5, pc}
   21840:	0002c672 	.word	0x0002c672
   21844:	0002a576 	.word	0x0002a576

00021848 <k_work_busy_get>:
{
   21848:	b538      	push	{r3, r4, r5, lr}
   2184a:	4604      	mov	r4, r0
	__asm__ volatile(
   2184c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21850:	f3ef 8511 	mrs	r5, BASEPRI
   21854:	f383 8812 	msr	BASEPRI_MAX, r3
   21858:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2185c:	4812      	ldr	r0, [pc, #72]	; (218a8 <k_work_busy_get+0x60>)
   2185e:	f7ff fa91 	bl	20d84 <z_spin_lock_valid>
   21862:	b940      	cbnz	r0, 21876 <k_work_busy_get+0x2e>
   21864:	4911      	ldr	r1, [pc, #68]	; (218ac <k_work_busy_get+0x64>)
   21866:	4812      	ldr	r0, [pc, #72]	; (218b0 <k_work_busy_get+0x68>)
   21868:	228e      	movs	r2, #142	; 0x8e
   2186a:	f005 fa9d 	bl	26da8 <assert_print>
   2186e:	480f      	ldr	r0, [pc, #60]	; (218ac <k_work_busy_get+0x64>)
   21870:	218e      	movs	r1, #142	; 0x8e
   21872:	f005 fa92 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21876:	480c      	ldr	r0, [pc, #48]	; (218a8 <k_work_busy_get+0x60>)
   21878:	f7ff faa2 	bl	20dc0 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2187c:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2187e:	480a      	ldr	r0, [pc, #40]	; (218a8 <k_work_busy_get+0x60>)
   21880:	f004 040f 	and.w	r4, r4, #15
   21884:	f7ff fa8c 	bl	20da0 <z_spin_unlock_valid>
   21888:	b940      	cbnz	r0, 2189c <k_work_busy_get+0x54>
   2188a:	4908      	ldr	r1, [pc, #32]	; (218ac <k_work_busy_get+0x64>)
   2188c:	4808      	ldr	r0, [pc, #32]	; (218b0 <k_work_busy_get+0x68>)
   2188e:	22b9      	movs	r2, #185	; 0xb9
   21890:	f005 fa8a 	bl	26da8 <assert_print>
   21894:	4805      	ldr	r0, [pc, #20]	; (218ac <k_work_busy_get+0x64>)
   21896:	21b9      	movs	r1, #185	; 0xb9
   21898:	f005 fa7f 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2189c:	f385 8811 	msr	BASEPRI, r5
   218a0:	f3bf 8f6f 	isb	sy
}
   218a4:	4620      	mov	r0, r4
   218a6:	bd38      	pop	{r3, r4, r5, pc}
   218a8:	20003f7c 	.word	0x20003f7c
   218ac:	0002a705 	.word	0x0002a705
   218b0:	0002a576 	.word	0x0002a576

000218b4 <z_work_submit_to_queue>:
{
   218b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   218b6:	460c      	mov	r4, r1
{
   218b8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   218ba:	b951      	cbnz	r1, 218d2 <z_work_submit_to_queue+0x1e>
   218bc:	491d      	ldr	r1, [pc, #116]	; (21934 <z_work_submit_to_queue+0x80>)
   218be:	481e      	ldr	r0, [pc, #120]	; (21938 <z_work_submit_to_queue+0x84>)
   218c0:	f44f 72ba 	mov.w	r2, #372	; 0x174
   218c4:	f005 fa70 	bl	26da8 <assert_print>
   218c8:	481a      	ldr	r0, [pc, #104]	; (21934 <z_work_submit_to_queue+0x80>)
   218ca:	f44f 71ba 	mov.w	r1, #372	; 0x174
   218ce:	f005 fa64 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   218d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   218d6:	f3ef 8511 	mrs	r5, BASEPRI
   218da:	f383 8812 	msr	BASEPRI_MAX, r3
   218de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218e2:	4816      	ldr	r0, [pc, #88]	; (2193c <z_work_submit_to_queue+0x88>)
   218e4:	f7ff fa4e 	bl	20d84 <z_spin_lock_valid>
   218e8:	b940      	cbnz	r0, 218fc <z_work_submit_to_queue+0x48>
   218ea:	4915      	ldr	r1, [pc, #84]	; (21940 <z_work_submit_to_queue+0x8c>)
   218ec:	4812      	ldr	r0, [pc, #72]	; (21938 <z_work_submit_to_queue+0x84>)
   218ee:	228e      	movs	r2, #142	; 0x8e
   218f0:	f005 fa5a 	bl	26da8 <assert_print>
   218f4:	4812      	ldr	r0, [pc, #72]	; (21940 <z_work_submit_to_queue+0x8c>)
   218f6:	218e      	movs	r1, #142	; 0x8e
   218f8:	f005 fa4f 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   218fc:	480f      	ldr	r0, [pc, #60]	; (2193c <z_work_submit_to_queue+0x88>)
   218fe:	f7ff fa5f 	bl	20dc0 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   21902:	4620      	mov	r0, r4
   21904:	a901      	add	r1, sp, #4
   21906:	f7ff fedb 	bl	216c0 <submit_to_queue_locked>
   2190a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2190c:	480b      	ldr	r0, [pc, #44]	; (2193c <z_work_submit_to_queue+0x88>)
   2190e:	f7ff fa47 	bl	20da0 <z_spin_unlock_valid>
   21912:	b940      	cbnz	r0, 21926 <z_work_submit_to_queue+0x72>
   21914:	490a      	ldr	r1, [pc, #40]	; (21940 <z_work_submit_to_queue+0x8c>)
   21916:	4808      	ldr	r0, [pc, #32]	; (21938 <z_work_submit_to_queue+0x84>)
   21918:	22b9      	movs	r2, #185	; 0xb9
   2191a:	f005 fa45 	bl	26da8 <assert_print>
   2191e:	4808      	ldr	r0, [pc, #32]	; (21940 <z_work_submit_to_queue+0x8c>)
   21920:	21b9      	movs	r1, #185	; 0xb9
   21922:	f005 fa3a 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21926:	f385 8811 	msr	BASEPRI, r5
   2192a:	f3bf 8f6f 	isb	sy
}
   2192e:	4620      	mov	r0, r4
   21930:	b003      	add	sp, #12
   21932:	bd30      	pop	{r4, r5, pc}
   21934:	0002c672 	.word	0x0002c672
   21938:	0002a576 	.word	0x0002a576
   2193c:	20003f7c 	.word	0x20003f7c
   21940:	0002a705 	.word	0x0002a705

00021944 <k_work_submit>:
{
   21944:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   21946:	4801      	ldr	r0, [pc, #4]	; (2194c <k_work_submit+0x8>)
   21948:	f007 bdb9 	b.w	294be <k_work_submit_to_queue>
   2194c:	20003440 	.word	0x20003440

00021950 <k_work_queue_init>:
{
   21950:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(queue != NULL);
   21952:	4604      	mov	r4, r0
   21954:	b950      	cbnz	r0, 2196c <k_work_queue_init+0x1c>
   21956:	4908      	ldr	r1, [pc, #32]	; (21978 <k_work_queue_init+0x28>)
   21958:	4808      	ldr	r0, [pc, #32]	; (2197c <k_work_queue_init+0x2c>)
   2195a:	f240 22b9 	movw	r2, #697	; 0x2b9
   2195e:	f005 fa23 	bl	26da8 <assert_print>
   21962:	4805      	ldr	r0, [pc, #20]	; (21978 <k_work_queue_init+0x28>)
   21964:	f240 21b9 	movw	r1, #697	; 0x2b9
   21968:	f005 fa17 	bl	26d9a <assert_post_action>
	*queue = (struct k_work_q) {
   2196c:	22a0      	movs	r2, #160	; 0xa0
   2196e:	2100      	movs	r1, #0
   21970:	4620      	mov	r0, r4
   21972:	f005 fcf7 	bl	27364 <memset>
}
   21976:	bd10      	pop	{r4, pc}
   21978:	0002c672 	.word	0x0002c672
   2197c:	0002a576 	.word	0x0002a576

00021980 <k_work_queue_start>:
{
   21980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21984:	b088      	sub	sp, #32
   21986:	460e      	mov	r6, r1
   21988:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2198a:	4617      	mov	r7, r2
   2198c:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   2198e:	4604      	mov	r4, r0
   21990:	b950      	cbnz	r0, 219a8 <k_work_queue_start+0x28>
   21992:	492d      	ldr	r1, [pc, #180]	; (21a48 <k_work_queue_start+0xc8>)
   21994:	482d      	ldr	r0, [pc, #180]	; (21a4c <k_work_queue_start+0xcc>)
   21996:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   2199a:	f005 fa05 	bl	26da8 <assert_print>
   2199e:	482a      	ldr	r0, [pc, #168]	; (21a48 <k_work_queue_start+0xc8>)
   219a0:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   219a4:	f005 f9f9 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(stack);
   219a8:	b956      	cbnz	r6, 219c0 <k_work_queue_start+0x40>
   219aa:	4927      	ldr	r1, [pc, #156]	; (21a48 <k_work_queue_start+0xc8>)
   219ac:	4827      	ldr	r0, [pc, #156]	; (21a4c <k_work_queue_start+0xcc>)
   219ae:	f240 22c9 	movw	r2, #713	; 0x2c9
   219b2:	f005 f9f9 	bl	26da8 <assert_print>
   219b6:	4824      	ldr	r0, [pc, #144]	; (21a48 <k_work_queue_start+0xc8>)
   219b8:	f240 21c9 	movw	r1, #713	; 0x2c9
   219bc:	f005 f9ed 	bl	26d9a <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   219c0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   219c4:	07db      	lsls	r3, r3, #31
   219c6:	d50a      	bpl.n	219de <k_work_queue_start+0x5e>
   219c8:	491f      	ldr	r1, [pc, #124]	; (21a48 <k_work_queue_start+0xc8>)
   219ca:	4820      	ldr	r0, [pc, #128]	; (21a4c <k_work_queue_start+0xcc>)
   219cc:	f240 22ca 	movw	r2, #714	; 0x2ca
   219d0:	f005 f9ea 	bl	26da8 <assert_print>
   219d4:	481c      	ldr	r0, [pc, #112]	; (21a48 <k_work_queue_start+0xc8>)
   219d6:	f240 21ca 	movw	r1, #714	; 0x2ca
   219da:	f005 f9de 	bl	26d9a <assert_post_action>
	list->head = NULL;
   219de:	2300      	movs	r3, #0
	list->tail = NULL;
   219e0:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   219e4:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   219e8:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   219ec:	f104 0390 	add.w	r3, r4, #144	; 0x90
   219f0:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   219f4:	b32d      	cbz	r5, 21a42 <k_work_queue_start+0xc2>
   219f6:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   219f8:	2b00      	cmp	r3, #0
   219fa:	f240 1101 	movw	r1, #257	; 0x101
   219fe:	bf08      	it	eq
   21a00:	2101      	moveq	r1, #1
	*flagp = flags;
   21a02:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21a06:	f04f 32ff 	mov.w	r2, #4294967295
   21a0a:	f04f 33ff 	mov.w	r3, #4294967295
   21a0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21a12:	2200      	movs	r2, #0
   21a14:	e9cd 8203 	strd	r8, r2, [sp, #12]
   21a18:	e9cd 2201 	strd	r2, r2, [sp, #4]
   21a1c:	4b0c      	ldr	r3, [pc, #48]	; (21a50 <k_work_queue_start+0xd0>)
   21a1e:	9400      	str	r4, [sp, #0]
   21a20:	463a      	mov	r2, r7
   21a22:	4631      	mov	r1, r6
   21a24:	4620      	mov	r0, r4
   21a26:	f7ff f8e9 	bl	20bfc <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   21a2a:	b125      	cbz	r5, 21a36 <k_work_queue_start+0xb6>
   21a2c:	6829      	ldr	r1, [r5, #0]
   21a2e:	b111      	cbz	r1, 21a36 <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   21a30:	4620      	mov	r0, r4
   21a32:	f007 fc98 	bl	29366 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   21a36:	4620      	mov	r0, r4
}
   21a38:	b008      	add	sp, #32
   21a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21a3e:	f007 bc97 	b.w	29370 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   21a42:	2101      	movs	r1, #1
   21a44:	e7dd      	b.n	21a02 <k_work_queue_start+0x82>
   21a46:	bf00      	nop
   21a48:	0002c672 	.word	0x0002c672
   21a4c:	0002a576 	.word	0x0002a576
   21a50:	000214a9 	.word	0x000214a9

00021a54 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   21a54:	b538      	push	{r3, r4, r5, lr}
   21a56:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21a58:	4604      	mov	r4, r0
   21a5a:	b950      	cbnz	r0, 21a72 <k_work_init_delayable+0x1e>
   21a5c:	4910      	ldr	r1, [pc, #64]	; (21aa0 <k_work_init_delayable+0x4c>)
   21a5e:	4811      	ldr	r0, [pc, #68]	; (21aa4 <k_work_init_delayable+0x50>)
   21a60:	f44f 7250 	mov.w	r2, #832	; 0x340
   21a64:	f005 f9a0 	bl	26da8 <assert_print>
   21a68:	480d      	ldr	r0, [pc, #52]	; (21aa0 <k_work_init_delayable+0x4c>)
   21a6a:	f44f 7150 	mov.w	r1, #832	; 0x340
   21a6e:	f005 f994 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   21a72:	b955      	cbnz	r5, 21a8a <k_work_init_delayable+0x36>
   21a74:	490a      	ldr	r1, [pc, #40]	; (21aa0 <k_work_init_delayable+0x4c>)
   21a76:	480b      	ldr	r0, [pc, #44]	; (21aa4 <k_work_init_delayable+0x50>)
   21a78:	f240 3241 	movw	r2, #833	; 0x341
   21a7c:	f005 f994 	bl	26da8 <assert_print>
   21a80:	4807      	ldr	r0, [pc, #28]	; (21aa0 <k_work_init_delayable+0x4c>)
   21a82:	f240 3141 	movw	r1, #833	; 0x341
   21a86:	f005 f988 	bl	26d9a <assert_post_action>

	*dwork = (struct k_work_delayable){
   21a8a:	2230      	movs	r2, #48	; 0x30
   21a8c:	2100      	movs	r1, #0
   21a8e:	4620      	mov	r0, r4
   21a90:	f005 fc68 	bl	27364 <memset>
   21a94:	f44f 7380 	mov.w	r3, #256	; 0x100
   21a98:	6065      	str	r5, [r4, #4]
   21a9a:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   21a9c:	bd38      	pop	{r3, r4, r5, pc}
   21a9e:	bf00      	nop
   21aa0:	0002c672 	.word	0x0002c672
   21aa4:	0002a576 	.word	0x0002a576

00021aa8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   21aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21aaa:	4616      	mov	r6, r2
   21aac:	9001      	str	r0, [sp, #4]
   21aae:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   21ab0:	460c      	mov	r4, r1
   21ab2:	b951      	cbnz	r1, 21aca <k_work_schedule_for_queue+0x22>
   21ab4:	4929      	ldr	r1, [pc, #164]	; (21b5c <k_work_schedule_for_queue+0xb4>)
   21ab6:	482a      	ldr	r0, [pc, #168]	; (21b60 <k_work_schedule_for_queue+0xb8>)
   21ab8:	f240 32b7 	movw	r2, #951	; 0x3b7
   21abc:	f005 f974 	bl	26da8 <assert_print>
   21ac0:	4826      	ldr	r0, [pc, #152]	; (21b5c <k_work_schedule_for_queue+0xb4>)
   21ac2:	f240 31b7 	movw	r1, #951	; 0x3b7
   21ac6:	f005 f968 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21aca:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ace:	f3ef 8711 	mrs	r7, BASEPRI
   21ad2:	f383 8812 	msr	BASEPRI_MAX, r3
   21ad6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ada:	4822      	ldr	r0, [pc, #136]	; (21b64 <k_work_schedule_for_queue+0xbc>)
   21adc:	f7ff f952 	bl	20d84 <z_spin_lock_valid>
   21ae0:	b940      	cbnz	r0, 21af4 <k_work_schedule_for_queue+0x4c>
   21ae2:	4921      	ldr	r1, [pc, #132]	; (21b68 <k_work_schedule_for_queue+0xc0>)
   21ae4:	481e      	ldr	r0, [pc, #120]	; (21b60 <k_work_schedule_for_queue+0xb8>)
   21ae6:	228e      	movs	r2, #142	; 0x8e
   21ae8:	f005 f95e 	bl	26da8 <assert_print>
   21aec:	481e      	ldr	r0, [pc, #120]	; (21b68 <k_work_schedule_for_queue+0xc0>)
   21aee:	218e      	movs	r1, #142	; 0x8e
   21af0:	f005 f953 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21af4:	481b      	ldr	r0, [pc, #108]	; (21b64 <k_work_schedule_for_queue+0xbc>)
   21af6:	f7ff f963 	bl	20dc0 <z_spin_lock_set_owner>
	return *flagp;
   21afa:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   21afc:	f013 0f0e 	tst.w	r3, #14
   21b00:	d129      	bne.n	21b56 <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21b02:	ea55 0206 	orrs.w	r2, r5, r6
   21b06:	d118      	bne.n	21b3a <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   21b08:	4620      	mov	r0, r4
   21b0a:	a901      	add	r1, sp, #4
   21b0c:	f7ff fdd8 	bl	216c0 <submit_to_queue_locked>
   21b10:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b12:	4814      	ldr	r0, [pc, #80]	; (21b64 <k_work_schedule_for_queue+0xbc>)
   21b14:	f7ff f944 	bl	20da0 <z_spin_unlock_valid>
   21b18:	b940      	cbnz	r0, 21b2c <k_work_schedule_for_queue+0x84>
   21b1a:	4913      	ldr	r1, [pc, #76]	; (21b68 <k_work_schedule_for_queue+0xc0>)
   21b1c:	4810      	ldr	r0, [pc, #64]	; (21b60 <k_work_schedule_for_queue+0xb8>)
   21b1e:	22b9      	movs	r2, #185	; 0xb9
   21b20:	f005 f942 	bl	26da8 <assert_print>
   21b24:	4810      	ldr	r0, [pc, #64]	; (21b68 <k_work_schedule_for_queue+0xc0>)
   21b26:	21b9      	movs	r1, #185	; 0xb9
   21b28:	f005 f937 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21b2c:	f387 8811 	msr	BASEPRI, r7
   21b30:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21b34:	4620      	mov	r0, r4
   21b36:	b003      	add	sp, #12
   21b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   21b3a:	f043 0308 	orr.w	r3, r3, #8
   21b3e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21b40:	9b01      	ldr	r3, [sp, #4]
   21b42:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21b44:	f104 0010 	add.w	r0, r4, #16
   21b48:	4908      	ldr	r1, [pc, #32]	; (21b6c <k_work_schedule_for_queue+0xc4>)
   21b4a:	4632      	mov	r2, r6
   21b4c:	462b      	mov	r3, r5
   21b4e:	f001 f99b 	bl	22e88 <z_add_timeout>
	return ret;
   21b52:	2401      	movs	r4, #1
   21b54:	e7dd      	b.n	21b12 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   21b56:	2400      	movs	r4, #0
   21b58:	e7db      	b.n	21b12 <k_work_schedule_for_queue+0x6a>
   21b5a:	bf00      	nop
   21b5c:	0002c672 	.word	0x0002c672
   21b60:	0002a576 	.word	0x0002a576
   21b64:	20003f7c 	.word	0x20003f7c
   21b68:	0002a705 	.word	0x0002a705
   21b6c:	00021781 	.word	0x00021781

00021b70 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   21b70:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   21b72:	4801      	ldr	r0, [pc, #4]	; (21b78 <k_work_schedule+0x8>)
   21b74:	f7ff bf98 	b.w	21aa8 <k_work_schedule_for_queue>
   21b78:	20003440 	.word	0x20003440

00021b7c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   21b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21b7e:	4616      	mov	r6, r2
   21b80:	9001      	str	r0, [sp, #4]
   21b82:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   21b84:	460c      	mov	r4, r1
   21b86:	b951      	cbnz	r1, 21b9e <k_work_reschedule_for_queue+0x22>
   21b88:	4928      	ldr	r1, [pc, #160]	; (21c2c <k_work_reschedule_for_queue+0xb0>)
   21b8a:	4829      	ldr	r0, [pc, #164]	; (21c30 <k_work_reschedule_for_queue+0xb4>)
   21b8c:	f240 32db 	movw	r2, #987	; 0x3db
   21b90:	f005 f90a 	bl	26da8 <assert_print>
   21b94:	4825      	ldr	r0, [pc, #148]	; (21c2c <k_work_reschedule_for_queue+0xb0>)
   21b96:	f240 31db 	movw	r1, #987	; 0x3db
   21b9a:	f005 f8fe 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21b9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ba2:	f3ef 8711 	mrs	r7, BASEPRI
   21ba6:	f383 8812 	msr	BASEPRI_MAX, r3
   21baa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bae:	4821      	ldr	r0, [pc, #132]	; (21c34 <k_work_reschedule_for_queue+0xb8>)
   21bb0:	f7ff f8e8 	bl	20d84 <z_spin_lock_valid>
   21bb4:	b940      	cbnz	r0, 21bc8 <k_work_reschedule_for_queue+0x4c>
   21bb6:	4920      	ldr	r1, [pc, #128]	; (21c38 <k_work_reschedule_for_queue+0xbc>)
   21bb8:	481d      	ldr	r0, [pc, #116]	; (21c30 <k_work_reschedule_for_queue+0xb4>)
   21bba:	228e      	movs	r2, #142	; 0x8e
   21bbc:	f005 f8f4 	bl	26da8 <assert_print>
   21bc0:	481d      	ldr	r0, [pc, #116]	; (21c38 <k_work_reschedule_for_queue+0xbc>)
   21bc2:	218e      	movs	r1, #142	; 0x8e
   21bc4:	f005 f8e9 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21bc8:	481a      	ldr	r0, [pc, #104]	; (21c34 <k_work_reschedule_for_queue+0xb8>)
   21bca:	f7ff f8f9 	bl	20dc0 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   21bce:	4620      	mov	r0, r4
   21bd0:	f007 fc2f 	bl	29432 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21bd4:	ea55 0306 	orrs.w	r3, r5, r6
   21bd8:	d118      	bne.n	21c0c <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   21bda:	4620      	mov	r0, r4
   21bdc:	a901      	add	r1, sp, #4
   21bde:	f7ff fd6f 	bl	216c0 <submit_to_queue_locked>
   21be2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21be4:	4813      	ldr	r0, [pc, #76]	; (21c34 <k_work_reschedule_for_queue+0xb8>)
   21be6:	f7ff f8db 	bl	20da0 <z_spin_unlock_valid>
   21bea:	b940      	cbnz	r0, 21bfe <k_work_reschedule_for_queue+0x82>
   21bec:	4912      	ldr	r1, [pc, #72]	; (21c38 <k_work_reschedule_for_queue+0xbc>)
   21bee:	4810      	ldr	r0, [pc, #64]	; (21c30 <k_work_reschedule_for_queue+0xb4>)
   21bf0:	22b9      	movs	r2, #185	; 0xb9
   21bf2:	f005 f8d9 	bl	26da8 <assert_print>
   21bf6:	4810      	ldr	r0, [pc, #64]	; (21c38 <k_work_reschedule_for_queue+0xbc>)
   21bf8:	21b9      	movs	r1, #185	; 0xb9
   21bfa:	f005 f8ce 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21bfe:	f387 8811 	msr	BASEPRI, r7
   21c02:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21c06:	4620      	mov	r0, r4
   21c08:	b003      	add	sp, #12
   21c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   21c0c:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21c0e:	490b      	ldr	r1, [pc, #44]	; (21c3c <k_work_reschedule_for_queue+0xc0>)
	*flagp |= BIT(bit);
   21c10:	f043 0308 	orr.w	r3, r3, #8
   21c14:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21c16:	9b01      	ldr	r3, [sp, #4]
   21c18:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21c1a:	f104 0010 	add.w	r0, r4, #16
   21c1e:	4632      	mov	r2, r6
   21c20:	462b      	mov	r3, r5
   21c22:	f001 f931 	bl	22e88 <z_add_timeout>
	return ret;
   21c26:	2401      	movs	r4, #1
   21c28:	e7dc      	b.n	21be4 <k_work_reschedule_for_queue+0x68>
   21c2a:	bf00      	nop
   21c2c:	0002c672 	.word	0x0002c672
   21c30:	0002a576 	.word	0x0002a576
   21c34:	20003f7c 	.word	0x20003f7c
   21c38:	0002a705 	.word	0x0002a705
   21c3c:	00021781 	.word	0x00021781

00021c40 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21c40:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   21c42:	4801      	ldr	r0, [pc, #4]	; (21c48 <k_work_reschedule+0x8>)
   21c44:	f7ff bf9a 	b.w	21b7c <k_work_reschedule_for_queue>
   21c48:	20003440 	.word	0x20003440

00021c4c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   21c4c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   21c4e:	4604      	mov	r4, r0
   21c50:	b950      	cbnz	r0, 21c68 <k_work_cancel_delayable+0x1c>
   21c52:	491e      	ldr	r1, [pc, #120]	; (21ccc <k_work_cancel_delayable+0x80>)
   21c54:	481e      	ldr	r0, [pc, #120]	; (21cd0 <k_work_cancel_delayable+0x84>)
   21c56:	f240 32fd 	movw	r2, #1021	; 0x3fd
   21c5a:	f005 f8a5 	bl	26da8 <assert_print>
   21c5e:	481b      	ldr	r0, [pc, #108]	; (21ccc <k_work_cancel_delayable+0x80>)
   21c60:	f240 31fd 	movw	r1, #1021	; 0x3fd
   21c64:	f005 f899 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21c68:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c6c:	f3ef 8511 	mrs	r5, BASEPRI
   21c70:	f383 8812 	msr	BASEPRI_MAX, r3
   21c74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c78:	4816      	ldr	r0, [pc, #88]	; (21cd4 <k_work_cancel_delayable+0x88>)
   21c7a:	f7ff f883 	bl	20d84 <z_spin_lock_valid>
   21c7e:	b940      	cbnz	r0, 21c92 <k_work_cancel_delayable+0x46>
   21c80:	4915      	ldr	r1, [pc, #84]	; (21cd8 <k_work_cancel_delayable+0x8c>)
   21c82:	4813      	ldr	r0, [pc, #76]	; (21cd0 <k_work_cancel_delayable+0x84>)
   21c84:	228e      	movs	r2, #142	; 0x8e
   21c86:	f005 f88f 	bl	26da8 <assert_print>
   21c8a:	4813      	ldr	r0, [pc, #76]	; (21cd8 <k_work_cancel_delayable+0x8c>)
   21c8c:	218e      	movs	r1, #142	; 0x8e
   21c8e:	f005 f884 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21c92:	4810      	ldr	r0, [pc, #64]	; (21cd4 <k_work_cancel_delayable+0x88>)
   21c94:	f7ff f894 	bl	20dc0 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   21c98:	4620      	mov	r0, r4
   21c9a:	f007 fbca 	bl	29432 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21c9e:	4620      	mov	r0, r4
   21ca0:	f007 fbdc 	bl	2945c <cancel_async_locked>
   21ca4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ca6:	480b      	ldr	r0, [pc, #44]	; (21cd4 <k_work_cancel_delayable+0x88>)
   21ca8:	f7ff f87a 	bl	20da0 <z_spin_unlock_valid>
   21cac:	b940      	cbnz	r0, 21cc0 <k_work_cancel_delayable+0x74>
   21cae:	490a      	ldr	r1, [pc, #40]	; (21cd8 <k_work_cancel_delayable+0x8c>)
   21cb0:	4807      	ldr	r0, [pc, #28]	; (21cd0 <k_work_cancel_delayable+0x84>)
   21cb2:	22b9      	movs	r2, #185	; 0xb9
   21cb4:	f005 f878 	bl	26da8 <assert_print>
   21cb8:	4807      	ldr	r0, [pc, #28]	; (21cd8 <k_work_cancel_delayable+0x8c>)
   21cba:	21b9      	movs	r1, #185	; 0xb9
   21cbc:	f005 f86d 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21cc0:	f385 8811 	msr	BASEPRI, r5
   21cc4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   21cc8:	4620      	mov	r0, r4
   21cca:	bd38      	pop	{r3, r4, r5, pc}
   21ccc:	0002c672 	.word	0x0002c672
   21cd0:	0002a576 	.word	0x0002a576
   21cd4:	20003f7c 	.word	0x20003f7c
   21cd8:	0002a705 	.word	0x0002a705

00021cdc <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   21cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ce0:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21ce2:	4605      	mov	r5, r0
   21ce4:	b950      	cbnz	r0, 21cfc <k_work_cancel_delayable_sync+0x20>
   21ce6:	4936      	ldr	r1, [pc, #216]	; (21dc0 <k_work_cancel_delayable_sync+0xe4>)
   21ce8:	4836      	ldr	r0, [pc, #216]	; (21dc4 <k_work_cancel_delayable_sync+0xe8>)
   21cea:	f240 420e 	movw	r2, #1038	; 0x40e
   21cee:	f005 f85b 	bl	26da8 <assert_print>
   21cf2:	4833      	ldr	r0, [pc, #204]	; (21dc0 <k_work_cancel_delayable_sync+0xe4>)
   21cf4:	f240 410e 	movw	r1, #1038	; 0x40e
   21cf8:	f005 f84f 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   21cfc:	b956      	cbnz	r6, 21d14 <k_work_cancel_delayable_sync+0x38>
   21cfe:	4930      	ldr	r1, [pc, #192]	; (21dc0 <k_work_cancel_delayable_sync+0xe4>)
   21d00:	4830      	ldr	r0, [pc, #192]	; (21dc4 <k_work_cancel_delayable_sync+0xe8>)
   21d02:	f240 420f 	movw	r2, #1039	; 0x40f
   21d06:	f005 f84f 	bl	26da8 <assert_print>
   21d0a:	482d      	ldr	r0, [pc, #180]	; (21dc0 <k_work_cancel_delayable_sync+0xe4>)
   21d0c:	f240 410f 	movw	r1, #1039	; 0x40f
   21d10:	f005 f843 	bl	26d9a <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   21d14:	f007 fb21 	bl	2935a <k_is_in_isr>
   21d18:	b150      	cbz	r0, 21d30 <k_work_cancel_delayable_sync+0x54>
   21d1a:	4929      	ldr	r1, [pc, #164]	; (21dc0 <k_work_cancel_delayable_sync+0xe4>)
   21d1c:	4829      	ldr	r0, [pc, #164]	; (21dc4 <k_work_cancel_delayable_sync+0xe8>)
   21d1e:	f44f 6282 	mov.w	r2, #1040	; 0x410
   21d22:	f005 f841 	bl	26da8 <assert_print>
   21d26:	4826      	ldr	r0, [pc, #152]	; (21dc0 <k_work_cancel_delayable_sync+0xe4>)
   21d28:	f44f 6182 	mov.w	r1, #1040	; 0x410
   21d2c:	f005 f835 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21d30:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d34:	f3ef 8811 	mrs	r8, BASEPRI
   21d38:	f383 8812 	msr	BASEPRI_MAX, r3
   21d3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d40:	4821      	ldr	r0, [pc, #132]	; (21dc8 <k_work_cancel_delayable_sync+0xec>)
   21d42:	f7ff f81f 	bl	20d84 <z_spin_lock_valid>
   21d46:	b940      	cbnz	r0, 21d5a <k_work_cancel_delayable_sync+0x7e>
   21d48:	4920      	ldr	r1, [pc, #128]	; (21dcc <k_work_cancel_delayable_sync+0xf0>)
   21d4a:	481e      	ldr	r0, [pc, #120]	; (21dc4 <k_work_cancel_delayable_sync+0xe8>)
   21d4c:	228e      	movs	r2, #142	; 0x8e
   21d4e:	f005 f82b 	bl	26da8 <assert_print>
   21d52:	481e      	ldr	r0, [pc, #120]	; (21dcc <k_work_cancel_delayable_sync+0xf0>)
   21d54:	218e      	movs	r1, #142	; 0x8e
   21d56:	f005 f820 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21d5a:	481b      	ldr	r0, [pc, #108]	; (21dc8 <k_work_cancel_delayable_sync+0xec>)
   21d5c:	f7ff f830 	bl	20dc0 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   21d60:	68ec      	ldr	r4, [r5, #12]
   21d62:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   21d66:	2c00      	cmp	r4, #0
   21d68:	bf14      	ite	ne
   21d6a:	2701      	movne	r7, #1
   21d6c:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   21d6e:	d00a      	beq.n	21d86 <k_work_cancel_delayable_sync+0xaa>
	(void)unschedule_locked(dwork);
   21d70:	4628      	mov	r0, r5
   21d72:	f007 fb5e 	bl	29432 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21d76:	4628      	mov	r0, r5
   21d78:	f007 fb70 	bl	2945c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   21d7c:	4631      	mov	r1, r6
   21d7e:	4628      	mov	r0, r5
   21d80:	f7ff fc80 	bl	21684 <cancel_sync_locked>
   21d84:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d86:	4810      	ldr	r0, [pc, #64]	; (21dc8 <k_work_cancel_delayable_sync+0xec>)
   21d88:	f7ff f80a 	bl	20da0 <z_spin_unlock_valid>
   21d8c:	b940      	cbnz	r0, 21da0 <k_work_cancel_delayable_sync+0xc4>
   21d8e:	490f      	ldr	r1, [pc, #60]	; (21dcc <k_work_cancel_delayable_sync+0xf0>)
   21d90:	480c      	ldr	r0, [pc, #48]	; (21dc4 <k_work_cancel_delayable_sync+0xe8>)
   21d92:	22b9      	movs	r2, #185	; 0xb9
   21d94:	f005 f808 	bl	26da8 <assert_print>
   21d98:	480c      	ldr	r0, [pc, #48]	; (21dcc <k_work_cancel_delayable_sync+0xf0>)
   21d9a:	21b9      	movs	r1, #185	; 0xb9
   21d9c:	f004 fffd 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21da0:	f388 8811 	msr	BASEPRI, r8
   21da4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   21da8:	b13c      	cbz	r4, 21dba <k_work_cancel_delayable_sync+0xde>
	return z_impl_k_sem_take(sem, timeout);
   21daa:	f04f 32ff 	mov.w	r2, #4294967295
   21dae:	f04f 33ff 	mov.w	r3, #4294967295
   21db2:	f106 0008 	add.w	r0, r6, #8
   21db6:	f7ff faf3 	bl	213a0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   21dba:	4638      	mov	r0, r7
   21dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21dc0:	0002c672 	.word	0x0002c672
   21dc4:	0002a576 	.word	0x0002a576
   21dc8:	20003f7c 	.word	0x20003f7c
   21dcc:	0002a705 	.word	0x0002a705

00021dd0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   21dd0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   21dd2:	4d07      	ldr	r5, [pc, #28]	; (21df0 <z_reset_time_slice+0x20>)
   21dd4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   21dd6:	b154      	cbz	r4, 21dee <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   21dd8:	f7fc fcd0 	bl	1e77c <sys_clock_elapsed>
   21ddc:	4b05      	ldr	r3, [pc, #20]	; (21df4 <z_reset_time_slice+0x24>)
   21dde:	4404      	add	r4, r0
   21de0:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   21de2:	6828      	ldr	r0, [r5, #0]
   21de4:	2100      	movs	r1, #0
	}
}
   21de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   21dea:	f001 b96d 	b.w	230c8 <z_set_timeout_expiry>
}
   21dee:	bd38      	pop	{r3, r4, r5, pc}
   21df0:	20003f94 	.word	0x20003f94
   21df4:	20003f4c 	.word	0x20003f4c

00021df8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   21df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21dfa:	4604      	mov	r4, r0
   21dfc:	460d      	mov	r5, r1
	__asm__ volatile(
   21dfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e02:	f3ef 8711 	mrs	r7, BASEPRI
   21e06:	f383 8812 	msr	BASEPRI_MAX, r3
   21e0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e0e:	481e      	ldr	r0, [pc, #120]	; (21e88 <k_sched_time_slice_set+0x90>)
   21e10:	f7fe ffb8 	bl	20d84 <z_spin_lock_valid>
   21e14:	b940      	cbnz	r0, 21e28 <k_sched_time_slice_set+0x30>
   21e16:	491d      	ldr	r1, [pc, #116]	; (21e8c <k_sched_time_slice_set+0x94>)
   21e18:	481d      	ldr	r0, [pc, #116]	; (21e90 <k_sched_time_slice_set+0x98>)
   21e1a:	228e      	movs	r2, #142	; 0x8e
   21e1c:	f004 ffc4 	bl	26da8 <assert_print>
   21e20:	481a      	ldr	r0, [pc, #104]	; (21e8c <k_sched_time_slice_set+0x94>)
   21e22:	218e      	movs	r1, #142	; 0x8e
   21e24:	f004 ffb9 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21e28:	4817      	ldr	r0, [pc, #92]	; (21e88 <k_sched_time_slice_set+0x90>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   21e2a:	4e1a      	ldr	r6, [pc, #104]	; (21e94 <k_sched_time_slice_set+0x9c>)
   21e2c:	f7fe ffc8 	bl	20dc0 <z_spin_lock_set_owner>
   21e30:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   21e32:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   21e36:	f240 30e7 	movw	r0, #999	; 0x3e7
   21e3a:	6131      	str	r1, [r6, #16]
   21e3c:	2300      	movs	r3, #0
   21e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21e42:	fbe4 010c 	umlal	r0, r1, r4, ip
   21e46:	f7de f95b 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21e4a:	2c00      	cmp	r4, #0
   21e4c:	4b12      	ldr	r3, [pc, #72]	; (21e98 <k_sched_time_slice_set+0xa0>)
   21e4e:	dc17      	bgt.n	21e80 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   21e50:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   21e52:	4b12      	ldr	r3, [pc, #72]	; (21e9c <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   21e54:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   21e56:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   21e58:	f7ff ffba 	bl	21dd0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e5c:	480a      	ldr	r0, [pc, #40]	; (21e88 <k_sched_time_slice_set+0x90>)
   21e5e:	f7fe ff9f 	bl	20da0 <z_spin_unlock_valid>
   21e62:	b940      	cbnz	r0, 21e76 <k_sched_time_slice_set+0x7e>
   21e64:	4909      	ldr	r1, [pc, #36]	; (21e8c <k_sched_time_slice_set+0x94>)
   21e66:	480a      	ldr	r0, [pc, #40]	; (21e90 <k_sched_time_slice_set+0x98>)
   21e68:	22b9      	movs	r2, #185	; 0xb9
   21e6a:	f004 ff9d 	bl	26da8 <assert_print>
   21e6e:	4807      	ldr	r0, [pc, #28]	; (21e8c <k_sched_time_slice_set+0x94>)
   21e70:	21b9      	movs	r1, #185	; 0xb9
   21e72:	f004 ff92 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21e76:	f387 8811 	msr	BASEPRI, r7
   21e7a:	f3bf 8f6f 	isb	sy
	}
}
   21e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   21e80:	2802      	cmp	r0, #2
   21e82:	bfb8      	it	lt
   21e84:	2002      	movlt	r0, #2
   21e86:	e7e3      	b.n	21e50 <k_sched_time_slice_set+0x58>
   21e88:	20003f8c 	.word	0x20003f8c
   21e8c:	0002a705 	.word	0x0002a705
   21e90:	0002a576 	.word	0x0002a576
   21e94:	20003f4c 	.word	0x20003f4c
   21e98:	20003f94 	.word	0x20003f94
   21e9c:	20003f90 	.word	0x20003f90

00021ea0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   21ea0:	b510      	push	{r4, lr}
   21ea2:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21ea4:	460c      	mov	r4, r1
   21ea6:	b9c1      	cbnz	r1, 21eda <z_reschedule+0x3a>
   21ea8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   21eac:	b9aa      	cbnz	r2, 21eda <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   21eae:	4a14      	ldr	r2, [pc, #80]	; (21f00 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   21eb0:	69d1      	ldr	r1, [r2, #28]
   21eb2:	6892      	ldr	r2, [r2, #8]
   21eb4:	4291      	cmp	r1, r2
   21eb6:	d010      	beq.n	21eda <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eb8:	f7fe ff72 	bl	20da0 <z_spin_unlock_valid>
   21ebc:	b940      	cbnz	r0, 21ed0 <z_reschedule+0x30>
   21ebe:	4911      	ldr	r1, [pc, #68]	; (21f04 <z_reschedule+0x64>)
   21ec0:	4811      	ldr	r0, [pc, #68]	; (21f08 <z_reschedule+0x68>)
   21ec2:	22d0      	movs	r2, #208	; 0xd0
   21ec4:	f004 ff70 	bl	26da8 <assert_print>
   21ec8:	480e      	ldr	r0, [pc, #56]	; (21f04 <z_reschedule+0x64>)
   21eca:	21d0      	movs	r1, #208	; 0xd0
   21ecc:	f004 ff65 	bl	26d9a <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   21ed4:	2000      	movs	r0, #0
   21ed6:	f7f5 b96d 	b.w	171b4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eda:	4618      	mov	r0, r3
   21edc:	f7fe ff60 	bl	20da0 <z_spin_unlock_valid>
   21ee0:	b940      	cbnz	r0, 21ef4 <z_reschedule+0x54>
   21ee2:	4908      	ldr	r1, [pc, #32]	; (21f04 <z_reschedule+0x64>)
   21ee4:	4808      	ldr	r0, [pc, #32]	; (21f08 <z_reschedule+0x68>)
   21ee6:	22b9      	movs	r2, #185	; 0xb9
   21ee8:	f004 ff5e 	bl	26da8 <assert_print>
   21eec:	4805      	ldr	r0, [pc, #20]	; (21f04 <z_reschedule+0x64>)
   21eee:	21b9      	movs	r1, #185	; 0xb9
   21ef0:	f004 ff53 	bl	26d9a <assert_post_action>
   21ef4:	f384 8811 	msr	BASEPRI, r4
   21ef8:	f3bf 8f6f 	isb	sy
   21efc:	bd10      	pop	{r4, pc}
   21efe:	bf00      	nop
   21f00:	20003f4c 	.word	0x20003f4c
   21f04:	0002a705 	.word	0x0002a705
   21f08:	0002a576 	.word	0x0002a576

00021f0c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   21f0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21f0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f12:	f3ef 8511 	mrs	r5, BASEPRI
   21f16:	f383 8812 	msr	BASEPRI_MAX, r3
   21f1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f1e:	4820      	ldr	r0, [pc, #128]	; (21fa0 <k_sched_lock+0x94>)
   21f20:	f7fe ff30 	bl	20d84 <z_spin_lock_valid>
   21f24:	b940      	cbnz	r0, 21f38 <k_sched_lock+0x2c>
   21f26:	491f      	ldr	r1, [pc, #124]	; (21fa4 <k_sched_lock+0x98>)
   21f28:	481f      	ldr	r0, [pc, #124]	; (21fa8 <k_sched_lock+0x9c>)
   21f2a:	228e      	movs	r2, #142	; 0x8e
   21f2c:	f004 ff3c 	bl	26da8 <assert_print>
   21f30:	481c      	ldr	r0, [pc, #112]	; (21fa4 <k_sched_lock+0x98>)
   21f32:	218e      	movs	r1, #142	; 0x8e
   21f34:	f004 ff31 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   21f38:	4819      	ldr	r0, [pc, #100]	; (21fa0 <k_sched_lock+0x94>)
   21f3a:	f7fe ff41 	bl	20dc0 <z_spin_lock_set_owner>
   21f3e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21f42:	b143      	cbz	r3, 21f56 <k_sched_lock+0x4a>
   21f44:	4919      	ldr	r1, [pc, #100]	; (21fac <k_sched_lock+0xa0>)
   21f46:	4818      	ldr	r0, [pc, #96]	; (21fa8 <k_sched_lock+0x9c>)
   21f48:	22fd      	movs	r2, #253	; 0xfd
   21f4a:	f004 ff2d 	bl	26da8 <assert_print>
   21f4e:	4817      	ldr	r0, [pc, #92]	; (21fac <k_sched_lock+0xa0>)
   21f50:	21fd      	movs	r1, #253	; 0xfd
   21f52:	f004 ff22 	bl	26d9a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   21f56:	4c16      	ldr	r4, [pc, #88]	; (21fb0 <k_sched_lock+0xa4>)
   21f58:	68a3      	ldr	r3, [r4, #8]
   21f5a:	7bdb      	ldrb	r3, [r3, #15]
   21f5c:	2b01      	cmp	r3, #1
   21f5e:	d108      	bne.n	21f72 <k_sched_lock+0x66>
   21f60:	4912      	ldr	r1, [pc, #72]	; (21fac <k_sched_lock+0xa0>)
   21f62:	4811      	ldr	r0, [pc, #68]	; (21fa8 <k_sched_lock+0x9c>)
   21f64:	22fe      	movs	r2, #254	; 0xfe
   21f66:	f004 ff1f 	bl	26da8 <assert_print>
   21f6a:	4810      	ldr	r0, [pc, #64]	; (21fac <k_sched_lock+0xa0>)
   21f6c:	21fe      	movs	r1, #254	; 0xfe
   21f6e:	f004 ff14 	bl	26d9a <assert_post_action>
	--_current->base.sched_locked;
   21f72:	68a2      	ldr	r2, [r4, #8]
   21f74:	7bd3      	ldrb	r3, [r2, #15]
   21f76:	3b01      	subs	r3, #1
   21f78:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f7a:	4809      	ldr	r0, [pc, #36]	; (21fa0 <k_sched_lock+0x94>)
   21f7c:	f7fe ff10 	bl	20da0 <z_spin_unlock_valid>
   21f80:	b940      	cbnz	r0, 21f94 <k_sched_lock+0x88>
   21f82:	4908      	ldr	r1, [pc, #32]	; (21fa4 <k_sched_lock+0x98>)
   21f84:	4808      	ldr	r0, [pc, #32]	; (21fa8 <k_sched_lock+0x9c>)
   21f86:	22b9      	movs	r2, #185	; 0xb9
   21f88:	f004 ff0e 	bl	26da8 <assert_print>
   21f8c:	4805      	ldr	r0, [pc, #20]	; (21fa4 <k_sched_lock+0x98>)
   21f8e:	21b9      	movs	r1, #185	; 0xb9
   21f90:	f004 ff03 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   21f94:	f385 8811 	msr	BASEPRI, r5
   21f98:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21f9c:	bd38      	pop	{r3, r4, r5, pc}
   21f9e:	bf00      	nop
   21fa0:	20003f8c 	.word	0x20003f8c
   21fa4:	0002a705 	.word	0x0002a705
   21fa8:	0002a576 	.word	0x0002a576
   21fac:	0002c693 	.word	0x0002c693
   21fb0:	20003f4c 	.word	0x20003f4c

00021fb4 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21fb4:	4b0b      	ldr	r3, [pc, #44]	; (21fe4 <z_priq_dumb_remove+0x30>)
   21fb6:	4299      	cmp	r1, r3
{
   21fb8:	b510      	push	{r4, lr}
   21fba:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21fbc:	d10a      	bne.n	21fd4 <z_priq_dumb_remove+0x20>
   21fbe:	490a      	ldr	r1, [pc, #40]	; (21fe8 <z_priq_dumb_remove+0x34>)
   21fc0:	480a      	ldr	r0, [pc, #40]	; (21fec <z_priq_dumb_remove+0x38>)
   21fc2:	f240 4262 	movw	r2, #1122	; 0x462
   21fc6:	f004 feef 	bl	26da8 <assert_print>
   21fca:	4807      	ldr	r0, [pc, #28]	; (21fe8 <z_priq_dumb_remove+0x34>)
   21fcc:	f240 4162 	movw	r1, #1122	; 0x462
   21fd0:	f004 fee3 	bl	26d9a <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   21fd4:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   21fd8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21fda:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21fdc:	2300      	movs	r3, #0
	node->prev = NULL;
   21fde:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   21fe2:	bd10      	pop	{r4, pc}
   21fe4:	20003340 	.word	0x20003340
   21fe8:	0002c6be 	.word	0x0002c6be
   21fec:	0002a576 	.word	0x0002a576

00021ff0 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   21ff0:	6883      	ldr	r3, [r0, #8]
{
   21ff2:	b510      	push	{r4, lr}
   21ff4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   21ff6:	b953      	cbnz	r3, 2200e <unpend_thread_no_timeout+0x1e>
   21ff8:	490a      	ldr	r1, [pc, #40]	; (22024 <unpend_thread_no_timeout+0x34>)
   21ffa:	480b      	ldr	r0, [pc, #44]	; (22028 <unpend_thread_no_timeout+0x38>)
   21ffc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
   22000:	f004 fed2 	bl	26da8 <assert_print>
   22004:	4807      	ldr	r0, [pc, #28]	; (22024 <unpend_thread_no_timeout+0x34>)
   22006:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   2200a:	f004 fec6 	bl	26d9a <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2200e:	68a0      	ldr	r0, [r4, #8]
   22010:	4621      	mov	r1, r4
   22012:	f7ff ffcf 	bl	21fb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22016:	7b63      	ldrb	r3, [r4, #13]
   22018:	f023 0302 	bic.w	r3, r3, #2
   2201c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2201e:	2300      	movs	r3, #0
   22020:	60a3      	str	r3, [r4, #8]
}
   22022:	bd10      	pop	{r4, pc}
   22024:	0002c6be 	.word	0x0002c6be
   22028:	0002a576 	.word	0x0002a576

0002202c <z_unpend_thread>:
{
   2202c:	b538      	push	{r3, r4, r5, lr}
   2202e:	4604      	mov	r4, r0
	__asm__ volatile(
   22030:	f04f 0340 	mov.w	r3, #64	; 0x40
   22034:	f3ef 8511 	mrs	r5, BASEPRI
   22038:	f383 8812 	msr	BASEPRI_MAX, r3
   2203c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22040:	4814      	ldr	r0, [pc, #80]	; (22094 <z_unpend_thread+0x68>)
   22042:	f7fe fe9f 	bl	20d84 <z_spin_lock_valid>
   22046:	b940      	cbnz	r0, 2205a <z_unpend_thread+0x2e>
   22048:	4913      	ldr	r1, [pc, #76]	; (22098 <z_unpend_thread+0x6c>)
   2204a:	4814      	ldr	r0, [pc, #80]	; (2209c <z_unpend_thread+0x70>)
   2204c:	228e      	movs	r2, #142	; 0x8e
   2204e:	f004 feab 	bl	26da8 <assert_print>
   22052:	4811      	ldr	r0, [pc, #68]	; (22098 <z_unpend_thread+0x6c>)
   22054:	218e      	movs	r1, #142	; 0x8e
   22056:	f004 fea0 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   2205a:	480e      	ldr	r0, [pc, #56]	; (22094 <z_unpend_thread+0x68>)
   2205c:	f7fe feb0 	bl	20dc0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   22060:	4620      	mov	r0, r4
   22062:	f7ff ffc5 	bl	21ff0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22066:	480b      	ldr	r0, [pc, #44]	; (22094 <z_unpend_thread+0x68>)
   22068:	f7fe fe9a 	bl	20da0 <z_spin_unlock_valid>
   2206c:	b940      	cbnz	r0, 22080 <z_unpend_thread+0x54>
   2206e:	490a      	ldr	r1, [pc, #40]	; (22098 <z_unpend_thread+0x6c>)
   22070:	480a      	ldr	r0, [pc, #40]	; (2209c <z_unpend_thread+0x70>)
   22072:	22b9      	movs	r2, #185	; 0xb9
   22074:	f004 fe98 	bl	26da8 <assert_print>
   22078:	4807      	ldr	r0, [pc, #28]	; (22098 <z_unpend_thread+0x6c>)
   2207a:	21b9      	movs	r1, #185	; 0xb9
   2207c:	f004 fe8d 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   22080:	f385 8811 	msr	BASEPRI, r5
   22084:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   22088:	f104 0018 	add.w	r0, r4, #24
}
   2208c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22090:	f000 bfa8 	b.w	22fe4 <z_abort_timeout>
   22094:	20003f8c 	.word	0x20003f8c
   22098:	0002a705 	.word	0x0002a705
   2209c:	0002a576 	.word	0x0002a576

000220a0 <update_cache>:
{
   220a0:	b538      	push	{r3, r4, r5, lr}
   220a2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   220a4:	4812      	ldr	r0, [pc, #72]	; (220f0 <update_cache+0x50>)
   220a6:	4d13      	ldr	r5, [pc, #76]	; (220f4 <update_cache+0x54>)
   220a8:	f007 fa3b 	bl	29522 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   220ac:	4604      	mov	r4, r0
   220ae:	b900      	cbnz	r0, 220b2 <update_cache+0x12>
   220b0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   220b2:	b9aa      	cbnz	r2, 220e0 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   220b4:	68ab      	ldr	r3, [r5, #8]
   220b6:	b943      	cbnz	r3, 220ca <update_cache+0x2a>
   220b8:	490f      	ldr	r1, [pc, #60]	; (220f8 <update_cache+0x58>)
   220ba:	4810      	ldr	r0, [pc, #64]	; (220fc <update_cache+0x5c>)
   220bc:	2289      	movs	r2, #137	; 0x89
   220be:	f004 fe73 	bl	26da8 <assert_print>
   220c2:	480d      	ldr	r0, [pc, #52]	; (220f8 <update_cache+0x58>)
   220c4:	2189      	movs	r1, #137	; 0x89
   220c6:	f004 fe68 	bl	26d9a <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   220ca:	68ab      	ldr	r3, [r5, #8]
   220cc:	7b5a      	ldrb	r2, [r3, #13]
   220ce:	06d2      	lsls	r2, r2, #27
   220d0:	d106      	bne.n	220e0 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   220d2:	69a2      	ldr	r2, [r4, #24]
   220d4:	b922      	cbnz	r2, 220e0 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   220d6:	89da      	ldrh	r2, [r3, #14]
   220d8:	2a7f      	cmp	r2, #127	; 0x7f
   220da:	d901      	bls.n	220e0 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   220dc:	61eb      	str	r3, [r5, #28]
}
   220de:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   220e0:	68ab      	ldr	r3, [r5, #8]
   220e2:	42a3      	cmp	r3, r4
   220e4:	d002      	beq.n	220ec <update_cache+0x4c>
			z_reset_time_slice(thread);
   220e6:	4620      	mov	r0, r4
   220e8:	f7ff fe72 	bl	21dd0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   220ec:	61ec      	str	r4, [r5, #28]
}
   220ee:	e7f6      	b.n	220de <update_cache+0x3e>
   220f0:	20003f6c 	.word	0x20003f6c
   220f4:	20003f4c 	.word	0x20003f4c
   220f8:	0002c6be 	.word	0x0002c6be
   220fc:	0002a576 	.word	0x0002a576

00022100 <move_thread_to_end_of_prio_q>:
{
   22100:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   22102:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   22106:	7b43      	ldrb	r3, [r0, #13]
   22108:	2a00      	cmp	r2, #0
{
   2210a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2210c:	da06      	bge.n	2211c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2210e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22112:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22114:	4601      	mov	r1, r0
   22116:	481d      	ldr	r0, [pc, #116]	; (2218c <move_thread_to_end_of_prio_q+0x8c>)
   22118:	f7ff ff4c 	bl	21fb4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2211c:	7b63      	ldrb	r3, [r4, #13]
   2211e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22122:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22124:	4b1a      	ldr	r3, [pc, #104]	; (22190 <move_thread_to_end_of_prio_q+0x90>)
   22126:	429c      	cmp	r4, r3
   22128:	d108      	bne.n	2213c <move_thread_to_end_of_prio_q+0x3c>
   2212a:	491a      	ldr	r1, [pc, #104]	; (22194 <move_thread_to_end_of_prio_q+0x94>)
   2212c:	481a      	ldr	r0, [pc, #104]	; (22198 <move_thread_to_end_of_prio_q+0x98>)
   2212e:	22ba      	movs	r2, #186	; 0xba
   22130:	f004 fe3a 	bl	26da8 <assert_print>
   22134:	4817      	ldr	r0, [pc, #92]	; (22194 <move_thread_to_end_of_prio_q+0x94>)
   22136:	21ba      	movs	r1, #186	; 0xba
   22138:	f004 fe2f 	bl	26d9a <assert_post_action>
	return list->head == list;
   2213c:	4a17      	ldr	r2, [pc, #92]	; (2219c <move_thread_to_end_of_prio_q+0x9c>)
	return (node == list->tail) ? NULL : node->next;
   2213e:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22142:	f102 0520 	add.w	r5, r2, #32
   22146:	42ab      	cmp	r3, r5
   22148:	d01b      	beq.n	22182 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2214a:	b1d3      	cbz	r3, 22182 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   2214c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22150:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   22154:	428e      	cmp	r6, r1
   22156:	d00f      	beq.n	22178 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   22158:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2215a:	2900      	cmp	r1, #0
   2215c:	dd0c      	ble.n	22178 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   2215e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22160:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   22164:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22166:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   22168:	6890      	ldr	r0, [r2, #8]
   2216a:	1b03      	subs	r3, r0, r4
   2216c:	4258      	negs	r0, r3
}
   2216e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   22172:	4158      	adcs	r0, r3
   22174:	f7ff bf94 	b.w	220a0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22178:	4283      	cmp	r3, r0
   2217a:	d002      	beq.n	22182 <move_thread_to_end_of_prio_q+0x82>
   2217c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2217e:	2b00      	cmp	r3, #0
   22180:	d1e6      	bne.n	22150 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   22182:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   22186:	6004      	str	r4, [r0, #0]
	list->tail = node;
   22188:	6254      	str	r4, [r2, #36]	; 0x24
}
   2218a:	e7ed      	b.n	22168 <move_thread_to_end_of_prio_q+0x68>
   2218c:	20003f6c 	.word	0x20003f6c
   22190:	20003340 	.word	0x20003340
   22194:	0002c6be 	.word	0x0002c6be
   22198:	0002a576 	.word	0x0002a576
   2219c:	20003f4c 	.word	0x20003f4c

000221a0 <z_time_slice>:
{
   221a0:	b570      	push	{r4, r5, r6, lr}
   221a2:	4605      	mov	r5, r0
	__asm__ volatile(
   221a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   221a8:	f3ef 8611 	mrs	r6, BASEPRI
   221ac:	f383 8812 	msr	BASEPRI_MAX, r3
   221b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   221b4:	4825      	ldr	r0, [pc, #148]	; (2224c <z_time_slice+0xac>)
   221b6:	f7fe fde5 	bl	20d84 <z_spin_lock_valid>
   221ba:	b940      	cbnz	r0, 221ce <z_time_slice+0x2e>
   221bc:	4924      	ldr	r1, [pc, #144]	; (22250 <z_time_slice+0xb0>)
   221be:	4825      	ldr	r0, [pc, #148]	; (22254 <z_time_slice+0xb4>)
   221c0:	228e      	movs	r2, #142	; 0x8e
   221c2:	f004 fdf1 	bl	26da8 <assert_print>
   221c6:	4822      	ldr	r0, [pc, #136]	; (22250 <z_time_slice+0xb0>)
   221c8:	218e      	movs	r1, #142	; 0x8e
   221ca:	f004 fde6 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   221ce:	481f      	ldr	r0, [pc, #124]	; (2224c <z_time_slice+0xac>)
   221d0:	f7fe fdf6 	bl	20dc0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   221d4:	4b20      	ldr	r3, [pc, #128]	; (22258 <z_time_slice+0xb8>)
   221d6:	4a21      	ldr	r2, [pc, #132]	; (2225c <z_time_slice+0xbc>)
   221d8:	689c      	ldr	r4, [r3, #8]
   221da:	6811      	ldr	r1, [r2, #0]
   221dc:	428c      	cmp	r4, r1
   221de:	d114      	bne.n	2220a <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   221e0:	4620      	mov	r0, r4
   221e2:	f7ff fdf5 	bl	21dd0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221e6:	4819      	ldr	r0, [pc, #100]	; (2224c <z_time_slice+0xac>)
   221e8:	f7fe fdda 	bl	20da0 <z_spin_unlock_valid>
   221ec:	b940      	cbnz	r0, 22200 <z_time_slice+0x60>
   221ee:	4918      	ldr	r1, [pc, #96]	; (22250 <z_time_slice+0xb0>)
   221f0:	4818      	ldr	r0, [pc, #96]	; (22254 <z_time_slice+0xb4>)
   221f2:	22b9      	movs	r2, #185	; 0xb9
   221f4:	f004 fdd8 	bl	26da8 <assert_print>
   221f8:	4815      	ldr	r0, [pc, #84]	; (22250 <z_time_slice+0xb0>)
   221fa:	21b9      	movs	r1, #185	; 0xb9
   221fc:	f004 fdcd 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   22200:	f386 8811 	msr	BASEPRI, r6
   22204:	f3bf 8f6f 	isb	sy
}
   22208:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   2220a:	2100      	movs	r1, #0
   2220c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2220e:	4a14      	ldr	r2, [pc, #80]	; (22260 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   22210:	6812      	ldr	r2, [r2, #0]
   22212:	b1c2      	cbz	r2, 22246 <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   22214:	89e2      	ldrh	r2, [r4, #14]
   22216:	2a7f      	cmp	r2, #127	; 0x7f
   22218:	d815      	bhi.n	22246 <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   2221a:	7b62      	ldrb	r2, [r4, #13]
   2221c:	06d2      	lsls	r2, r2, #27
   2221e:	d112      	bne.n	22246 <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   22220:	4a10      	ldr	r2, [pc, #64]	; (22264 <z_time_slice+0xc4>)
   22222:	f994 100e 	ldrsb.w	r1, [r4, #14]
   22226:	6812      	ldr	r2, [r2, #0]
   22228:	4291      	cmp	r1, r2
   2222a:	db0c      	blt.n	22246 <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   2222c:	4a0e      	ldr	r2, [pc, #56]	; (22268 <z_time_slice+0xc8>)
   2222e:	4294      	cmp	r4, r2
   22230:	d009      	beq.n	22246 <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   22232:	691a      	ldr	r2, [r3, #16]
   22234:	42aa      	cmp	r2, r5
   22236:	dc03      	bgt.n	22240 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   22238:	4620      	mov	r0, r4
   2223a:	f7ff ff61 	bl	22100 <move_thread_to_end_of_prio_q>
   2223e:	e7cf      	b.n	221e0 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   22240:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   22242:	611a      	str	r2, [r3, #16]
   22244:	e7cf      	b.n	221e6 <z_time_slice+0x46>
   22246:	2200      	movs	r2, #0
   22248:	e7fb      	b.n	22242 <z_time_slice+0xa2>
   2224a:	bf00      	nop
   2224c:	20003f8c 	.word	0x20003f8c
   22250:	0002a705 	.word	0x0002a705
   22254:	0002a576 	.word	0x0002a576
   22258:	20003f4c 	.word	0x20003f4c
   2225c:	20003f88 	.word	0x20003f88
   22260:	20003f94 	.word	0x20003f94
   22264:	20003f90 	.word	0x20003f90
   22268:	20003340 	.word	0x20003340

0002226c <ready_thread>:
{
   2226c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2226e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   22272:	7b43      	ldrb	r3, [r0, #13]
   22274:	2a00      	cmp	r2, #0
{
   22276:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22278:	db38      	blt.n	222ec <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2227a:	06da      	lsls	r2, r3, #27
   2227c:	d136      	bne.n	222ec <ready_thread+0x80>
   2227e:	6982      	ldr	r2, [r0, #24]
   22280:	2a00      	cmp	r2, #0
   22282:	d133      	bne.n	222ec <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   22284:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22288:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2228a:	4b19      	ldr	r3, [pc, #100]	; (222f0 <ready_thread+0x84>)
   2228c:	4298      	cmp	r0, r3
   2228e:	d108      	bne.n	222a2 <ready_thread+0x36>
   22290:	4918      	ldr	r1, [pc, #96]	; (222f4 <ready_thread+0x88>)
   22292:	4819      	ldr	r0, [pc, #100]	; (222f8 <ready_thread+0x8c>)
   22294:	22ba      	movs	r2, #186	; 0xba
   22296:	f004 fd87 	bl	26da8 <assert_print>
   2229a:	4816      	ldr	r0, [pc, #88]	; (222f4 <ready_thread+0x88>)
   2229c:	21ba      	movs	r1, #186	; 0xba
   2229e:	f004 fd7c 	bl	26d9a <assert_post_action>
	return list->head == list;
   222a2:	4a16      	ldr	r2, [pc, #88]	; (222fc <ready_thread+0x90>)
	return (node == list->tail) ? NULL : node->next;
   222a4:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222a8:	f102 0520 	add.w	r5, r2, #32
   222ac:	42ab      	cmp	r3, r5
   222ae:	d018      	beq.n	222e2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   222b0:	b1bb      	cbz	r3, 222e2 <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   222b2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   222b6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   222ba:	428e      	cmp	r6, r1
   222bc:	d00c      	beq.n	222d8 <ready_thread+0x6c>
		return b2 - b1;
   222be:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   222c0:	2900      	cmp	r1, #0
   222c2:	dd09      	ble.n	222d8 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   222c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   222c6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   222ca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   222cc:	605c      	str	r4, [r3, #4]
}
   222ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   222d2:	2000      	movs	r0, #0
   222d4:	f7ff bee4 	b.w	220a0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   222d8:	4298      	cmp	r0, r3
   222da:	d002      	beq.n	222e2 <ready_thread+0x76>
   222dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   222de:	2b00      	cmp	r3, #0
   222e0:	d1e9      	bne.n	222b6 <ready_thread+0x4a>
	node->prev = tail;
   222e2:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   222e6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   222e8:	6254      	str	r4, [r2, #36]	; 0x24
}
   222ea:	e7f0      	b.n	222ce <ready_thread+0x62>
}
   222ec:	bd70      	pop	{r4, r5, r6, pc}
   222ee:	bf00      	nop
   222f0:	20003340 	.word	0x20003340
   222f4:	0002c6be 	.word	0x0002c6be
   222f8:	0002a576 	.word	0x0002a576
   222fc:	20003f4c 	.word	0x20003f4c

00022300 <z_ready_thread>:
{
   22300:	b538      	push	{r3, r4, r5, lr}
   22302:	4604      	mov	r4, r0
	__asm__ volatile(
   22304:	f04f 0340 	mov.w	r3, #64	; 0x40
   22308:	f3ef 8511 	mrs	r5, BASEPRI
   2230c:	f383 8812 	msr	BASEPRI_MAX, r3
   22310:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22314:	4812      	ldr	r0, [pc, #72]	; (22360 <z_ready_thread+0x60>)
   22316:	f7fe fd35 	bl	20d84 <z_spin_lock_valid>
   2231a:	b940      	cbnz	r0, 2232e <z_ready_thread+0x2e>
   2231c:	4911      	ldr	r1, [pc, #68]	; (22364 <z_ready_thread+0x64>)
   2231e:	4812      	ldr	r0, [pc, #72]	; (22368 <z_ready_thread+0x68>)
   22320:	228e      	movs	r2, #142	; 0x8e
   22322:	f004 fd41 	bl	26da8 <assert_print>
   22326:	480f      	ldr	r0, [pc, #60]	; (22364 <z_ready_thread+0x64>)
   22328:	218e      	movs	r1, #142	; 0x8e
   2232a:	f004 fd36 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   2232e:	480c      	ldr	r0, [pc, #48]	; (22360 <z_ready_thread+0x60>)
   22330:	f7fe fd46 	bl	20dc0 <z_spin_lock_set_owner>
			ready_thread(thread);
   22334:	4620      	mov	r0, r4
   22336:	f7ff ff99 	bl	2226c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2233a:	4809      	ldr	r0, [pc, #36]	; (22360 <z_ready_thread+0x60>)
   2233c:	f7fe fd30 	bl	20da0 <z_spin_unlock_valid>
   22340:	b940      	cbnz	r0, 22354 <z_ready_thread+0x54>
   22342:	4908      	ldr	r1, [pc, #32]	; (22364 <z_ready_thread+0x64>)
   22344:	4808      	ldr	r0, [pc, #32]	; (22368 <z_ready_thread+0x68>)
   22346:	22b9      	movs	r2, #185	; 0xb9
   22348:	f004 fd2e 	bl	26da8 <assert_print>
   2234c:	4805      	ldr	r0, [pc, #20]	; (22364 <z_ready_thread+0x64>)
   2234e:	21b9      	movs	r1, #185	; 0xb9
   22350:	f004 fd23 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   22354:	f385 8811 	msr	BASEPRI, r5
   22358:	f3bf 8f6f 	isb	sy
}
   2235c:	bd38      	pop	{r3, r4, r5, pc}
   2235e:	bf00      	nop
   22360:	20003f8c 	.word	0x20003f8c
   22364:	0002a705 	.word	0x0002a705
   22368:	0002a576 	.word	0x0002a576

0002236c <z_sched_start>:
{
   2236c:	b538      	push	{r3, r4, r5, lr}
   2236e:	4604      	mov	r4, r0
	__asm__ volatile(
   22370:	f04f 0340 	mov.w	r3, #64	; 0x40
   22374:	f3ef 8511 	mrs	r5, BASEPRI
   22378:	f383 8812 	msr	BASEPRI_MAX, r3
   2237c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22380:	4818      	ldr	r0, [pc, #96]	; (223e4 <z_sched_start+0x78>)
   22382:	f7fe fcff 	bl	20d84 <z_spin_lock_valid>
   22386:	b940      	cbnz	r0, 2239a <z_sched_start+0x2e>
   22388:	4917      	ldr	r1, [pc, #92]	; (223e8 <z_sched_start+0x7c>)
   2238a:	4818      	ldr	r0, [pc, #96]	; (223ec <z_sched_start+0x80>)
   2238c:	228e      	movs	r2, #142	; 0x8e
   2238e:	f004 fd0b 	bl	26da8 <assert_print>
   22392:	4815      	ldr	r0, [pc, #84]	; (223e8 <z_sched_start+0x7c>)
   22394:	218e      	movs	r1, #142	; 0x8e
   22396:	f004 fd00 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   2239a:	4812      	ldr	r0, [pc, #72]	; (223e4 <z_sched_start+0x78>)
   2239c:	f7fe fd10 	bl	20dc0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   223a0:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   223a2:	075a      	lsls	r2, r3, #29
   223a4:	d411      	bmi.n	223ca <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223a6:	480f      	ldr	r0, [pc, #60]	; (223e4 <z_sched_start+0x78>)
   223a8:	f7fe fcfa 	bl	20da0 <z_spin_unlock_valid>
   223ac:	b940      	cbnz	r0, 223c0 <z_sched_start+0x54>
   223ae:	490e      	ldr	r1, [pc, #56]	; (223e8 <z_sched_start+0x7c>)
   223b0:	480e      	ldr	r0, [pc, #56]	; (223ec <z_sched_start+0x80>)
   223b2:	22b9      	movs	r2, #185	; 0xb9
   223b4:	f004 fcf8 	bl	26da8 <assert_print>
   223b8:	480b      	ldr	r0, [pc, #44]	; (223e8 <z_sched_start+0x7c>)
   223ba:	21b9      	movs	r1, #185	; 0xb9
   223bc:	f004 fced 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   223c0:	f385 8811 	msr	BASEPRI, r5
   223c4:	f3bf 8f6f 	isb	sy
}
   223c8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   223ca:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   223ce:	4620      	mov	r0, r4
   223d0:	7363      	strb	r3, [r4, #13]
   223d2:	f7ff ff4b 	bl	2226c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   223d6:	4629      	mov	r1, r5
   223d8:	4802      	ldr	r0, [pc, #8]	; (223e4 <z_sched_start+0x78>)
}
   223da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   223de:	f7ff bd5f 	b.w	21ea0 <z_reschedule>
   223e2:	bf00      	nop
   223e4:	20003f8c 	.word	0x20003f8c
   223e8:	0002a705 	.word	0x0002a705
   223ec:	0002a576 	.word	0x0002a576

000223f0 <z_thread_timeout>:
{
   223f0:	b570      	push	{r4, r5, r6, lr}
   223f2:	4604      	mov	r4, r0
	__asm__ volatile(
   223f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   223f8:	f3ef 8611 	mrs	r6, BASEPRI
   223fc:	f383 8812 	msr	BASEPRI_MAX, r3
   22400:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22404:	481b      	ldr	r0, [pc, #108]	; (22474 <z_thread_timeout+0x84>)
   22406:	f7fe fcbd 	bl	20d84 <z_spin_lock_valid>
   2240a:	b940      	cbnz	r0, 2241e <z_thread_timeout+0x2e>
   2240c:	491a      	ldr	r1, [pc, #104]	; (22478 <z_thread_timeout+0x88>)
   2240e:	481b      	ldr	r0, [pc, #108]	; (2247c <z_thread_timeout+0x8c>)
   22410:	228e      	movs	r2, #142	; 0x8e
   22412:	f004 fcc9 	bl	26da8 <assert_print>
   22416:	4818      	ldr	r0, [pc, #96]	; (22478 <z_thread_timeout+0x88>)
   22418:	218e      	movs	r1, #142	; 0x8e
   2241a:	f004 fcbe 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   2241e:	4815      	ldr	r0, [pc, #84]	; (22474 <z_thread_timeout+0x84>)
   22420:	f7fe fcce 	bl	20dc0 <z_spin_lock_set_owner>
		if (!killed) {
   22424:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22428:	f013 0f28 	tst.w	r3, #40	; 0x28
   2242c:	d110      	bne.n	22450 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   2242e:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   22432:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   22436:	b113      	cbz	r3, 2243e <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   22438:	4628      	mov	r0, r5
   2243a:	f7ff fdd9 	bl	21ff0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2243e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22442:	f023 0314 	bic.w	r3, r3, #20
   22446:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2244a:	4628      	mov	r0, r5
   2244c:	f7ff ff0e 	bl	2226c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22450:	4808      	ldr	r0, [pc, #32]	; (22474 <z_thread_timeout+0x84>)
   22452:	f7fe fca5 	bl	20da0 <z_spin_unlock_valid>
   22456:	b940      	cbnz	r0, 2246a <z_thread_timeout+0x7a>
   22458:	4907      	ldr	r1, [pc, #28]	; (22478 <z_thread_timeout+0x88>)
   2245a:	4808      	ldr	r0, [pc, #32]	; (2247c <z_thread_timeout+0x8c>)
   2245c:	22b9      	movs	r2, #185	; 0xb9
   2245e:	f004 fca3 	bl	26da8 <assert_print>
   22462:	4805      	ldr	r0, [pc, #20]	; (22478 <z_thread_timeout+0x88>)
   22464:	21b9      	movs	r1, #185	; 0xb9
   22466:	f004 fc98 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2246a:	f386 8811 	msr	BASEPRI, r6
   2246e:	f3bf 8f6f 	isb	sy
}
   22472:	bd70      	pop	{r4, r5, r6, pc}
   22474:	20003f8c 	.word	0x20003f8c
   22478:	0002a705 	.word	0x0002a705
   2247c:	0002a576 	.word	0x0002a576

00022480 <unready_thread>:
{
   22480:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   22482:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   22486:	7b43      	ldrb	r3, [r0, #13]
   22488:	2a00      	cmp	r2, #0
{
   2248a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2248c:	da06      	bge.n	2249c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2248e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22492:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22494:	4601      	mov	r1, r0
   22496:	4806      	ldr	r0, [pc, #24]	; (224b0 <unready_thread+0x30>)
   22498:	f7ff fd8c 	bl	21fb4 <z_priq_dumb_remove>
	update_cache(thread == _current);
   2249c:	4b05      	ldr	r3, [pc, #20]	; (224b4 <unready_thread+0x34>)
   2249e:	6898      	ldr	r0, [r3, #8]
   224a0:	1b03      	subs	r3, r0, r4
   224a2:	4258      	negs	r0, r3
}
   224a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   224a8:	4158      	adcs	r0, r3
   224aa:	f7ff bdf9 	b.w	220a0 <update_cache>
   224ae:	bf00      	nop
   224b0:	20003f6c 	.word	0x20003f6c
   224b4:	20003f4c 	.word	0x20003f4c

000224b8 <add_to_waitq_locked>:
{
   224b8:	b538      	push	{r3, r4, r5, lr}
   224ba:	4604      	mov	r4, r0
   224bc:	460d      	mov	r5, r1
	unready_thread(thread);
   224be:	f7ff ffdf 	bl	22480 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   224c2:	7b63      	ldrb	r3, [r4, #13]
   224c4:	f043 0302 	orr.w	r3, r3, #2
   224c8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   224ca:	b1f5      	cbz	r5, 2250a <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   224cc:	4b15      	ldr	r3, [pc, #84]	; (22524 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   224ce:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   224d0:	429c      	cmp	r4, r3
   224d2:	d108      	bne.n	224e6 <add_to_waitq_locked+0x2e>
   224d4:	4914      	ldr	r1, [pc, #80]	; (22528 <add_to_waitq_locked+0x70>)
   224d6:	4815      	ldr	r0, [pc, #84]	; (2252c <add_to_waitq_locked+0x74>)
   224d8:	22ba      	movs	r2, #186	; 0xba
   224da:	f004 fc65 	bl	26da8 <assert_print>
   224de:	4812      	ldr	r0, [pc, #72]	; (22528 <add_to_waitq_locked+0x70>)
   224e0:	21ba      	movs	r1, #186	; 0xba
   224e2:	f004 fc5a 	bl	26d9a <assert_post_action>
	return list->head == list;
   224e6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   224e8:	429d      	cmp	r5, r3
   224ea:	d015      	beq.n	22518 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   224ec:	b1a3      	cbz	r3, 22518 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   224ee:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   224f2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   224f6:	4291      	cmp	r1, r2
   224f8:	d008      	beq.n	2250c <add_to_waitq_locked+0x54>
		return b2 - b1;
   224fa:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   224fc:	2a00      	cmp	r2, #0
   224fe:	dd05      	ble.n	2250c <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   22500:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22502:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22506:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22508:	605c      	str	r4, [r3, #4]
}
   2250a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2250c:	686a      	ldr	r2, [r5, #4]
   2250e:	4293      	cmp	r3, r2
   22510:	d002      	beq.n	22518 <add_to_waitq_locked+0x60>
   22512:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22514:	2b00      	cmp	r3, #0
   22516:	d1ec      	bne.n	224f2 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   22518:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2251a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2251e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22520:	606c      	str	r4, [r5, #4]
}
   22522:	e7f2      	b.n	2250a <add_to_waitq_locked+0x52>
   22524:	20003340 	.word	0x20003340
   22528:	0002c6be 	.word	0x0002c6be
   2252c:	0002a576 	.word	0x0002a576

00022530 <pend>:
{
   22530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22534:	4604      	mov	r4, r0
   22536:	4688      	mov	r8, r1
   22538:	4616      	mov	r6, r2
   2253a:	461d      	mov	r5, r3
	__asm__ volatile(
   2253c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22540:	f3ef 8711 	mrs	r7, BASEPRI
   22544:	f383 8812 	msr	BASEPRI_MAX, r3
   22548:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2254c:	481a      	ldr	r0, [pc, #104]	; (225b8 <pend+0x88>)
   2254e:	f7fe fc19 	bl	20d84 <z_spin_lock_valid>
   22552:	b940      	cbnz	r0, 22566 <pend+0x36>
   22554:	4919      	ldr	r1, [pc, #100]	; (225bc <pend+0x8c>)
   22556:	481a      	ldr	r0, [pc, #104]	; (225c0 <pend+0x90>)
   22558:	228e      	movs	r2, #142	; 0x8e
   2255a:	f004 fc25 	bl	26da8 <assert_print>
   2255e:	4817      	ldr	r0, [pc, #92]	; (225bc <pend+0x8c>)
   22560:	218e      	movs	r1, #142	; 0x8e
   22562:	f004 fc1a 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   22566:	4814      	ldr	r0, [pc, #80]	; (225b8 <pend+0x88>)
   22568:	f7fe fc2a 	bl	20dc0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   2256c:	4620      	mov	r0, r4
   2256e:	4641      	mov	r1, r8
   22570:	f7ff ffa2 	bl	224b8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22574:	4810      	ldr	r0, [pc, #64]	; (225b8 <pend+0x88>)
   22576:	f7fe fc13 	bl	20da0 <z_spin_unlock_valid>
   2257a:	b940      	cbnz	r0, 2258e <pend+0x5e>
   2257c:	490f      	ldr	r1, [pc, #60]	; (225bc <pend+0x8c>)
   2257e:	4810      	ldr	r0, [pc, #64]	; (225c0 <pend+0x90>)
   22580:	22b9      	movs	r2, #185	; 0xb9
   22582:	f004 fc11 	bl	26da8 <assert_print>
   22586:	480d      	ldr	r0, [pc, #52]	; (225bc <pend+0x8c>)
   22588:	21b9      	movs	r1, #185	; 0xb9
   2258a:	f004 fc06 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2258e:	f387 8811 	msr	BASEPRI, r7
   22592:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22596:	f1b5 3fff 	cmp.w	r5, #4294967295
   2259a:	bf08      	it	eq
   2259c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   225a0:	d008      	beq.n	225b4 <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   225a2:	4632      	mov	r2, r6
   225a4:	462b      	mov	r3, r5
   225a6:	f104 0018 	add.w	r0, r4, #24
   225aa:	4906      	ldr	r1, [pc, #24]	; (225c4 <pend+0x94>)
}
   225ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   225b0:	f000 bc6a 	b.w	22e88 <z_add_timeout>
   225b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   225b8:	20003f8c 	.word	0x20003f8c
   225bc:	0002a705 	.word	0x0002a705
   225c0:	0002a576 	.word	0x0002a576
   225c4:	000223f1 	.word	0x000223f1

000225c8 <z_pend_curr>:
{
   225c8:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   225ca:	4b0e      	ldr	r3, [pc, #56]	; (22604 <z_pend_curr+0x3c>)
{
   225cc:	4605      	mov	r5, r0
	pending_current = _current;
   225ce:	6898      	ldr	r0, [r3, #8]
   225d0:	4b0d      	ldr	r3, [pc, #52]	; (22608 <z_pend_curr+0x40>)
{
   225d2:	460c      	mov	r4, r1
	pending_current = _current;
   225d4:	6018      	str	r0, [r3, #0]
{
   225d6:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   225d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   225dc:	f7ff ffa8 	bl	22530 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225e0:	4628      	mov	r0, r5
   225e2:	f7fe fbdd 	bl	20da0 <z_spin_unlock_valid>
   225e6:	b940      	cbnz	r0, 225fa <z_pend_curr+0x32>
   225e8:	4908      	ldr	r1, [pc, #32]	; (2260c <z_pend_curr+0x44>)
   225ea:	4809      	ldr	r0, [pc, #36]	; (22610 <z_pend_curr+0x48>)
   225ec:	22d0      	movs	r2, #208	; 0xd0
   225ee:	f004 fbdb 	bl	26da8 <assert_print>
   225f2:	4806      	ldr	r0, [pc, #24]	; (2260c <z_pend_curr+0x44>)
   225f4:	21d0      	movs	r1, #208	; 0xd0
   225f6:	f004 fbd0 	bl	26d9a <assert_post_action>
   225fa:	4620      	mov	r0, r4
}
   225fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22600:	f7f4 bdd8 	b.w	171b4 <arch_swap>
   22604:	20003f4c 	.word	0x20003f4c
   22608:	20003f88 	.word	0x20003f88
   2260c:	0002a705 	.word	0x0002a705
   22610:	0002a576 	.word	0x0002a576

00022614 <z_set_prio>:
{
   22614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22616:	4604      	mov	r4, r0
   22618:	460d      	mov	r5, r1
	__asm__ volatile(
   2261a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2261e:	f3ef 8611 	mrs	r6, BASEPRI
   22622:	f383 8812 	msr	BASEPRI_MAX, r3
   22626:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2262a:	4834      	ldr	r0, [pc, #208]	; (226fc <z_set_prio+0xe8>)
   2262c:	f7fe fbaa 	bl	20d84 <z_spin_lock_valid>
   22630:	b940      	cbnz	r0, 22644 <z_set_prio+0x30>
   22632:	4933      	ldr	r1, [pc, #204]	; (22700 <z_set_prio+0xec>)
   22634:	4833      	ldr	r0, [pc, #204]	; (22704 <z_set_prio+0xf0>)
   22636:	228e      	movs	r2, #142	; 0x8e
   22638:	f004 fbb6 	bl	26da8 <assert_print>
   2263c:	4830      	ldr	r0, [pc, #192]	; (22700 <z_set_prio+0xec>)
   2263e:	218e      	movs	r1, #142	; 0x8e
   22640:	f004 fbab 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   22644:	482d      	ldr	r0, [pc, #180]	; (226fc <z_set_prio+0xe8>)
   22646:	f7fe fbbb 	bl	20dc0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2264a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2264c:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2264e:	b26d      	sxtb	r5, r5
   22650:	d151      	bne.n	226f6 <z_set_prio+0xe2>
		if (need_sched) {
   22652:	69a2      	ldr	r2, [r4, #24]
   22654:	2a00      	cmp	r2, #0
   22656:	d14e      	bne.n	226f6 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2265c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2265e:	482a      	ldr	r0, [pc, #168]	; (22708 <z_set_prio+0xf4>)
   22660:	4621      	mov	r1, r4
   22662:	f7ff fca7 	bl	21fb4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22666:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   22668:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2266a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2266e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22670:	4b26      	ldr	r3, [pc, #152]	; (2270c <z_set_prio+0xf8>)
   22672:	429c      	cmp	r4, r3
   22674:	d108      	bne.n	22688 <z_set_prio+0x74>
   22676:	4926      	ldr	r1, [pc, #152]	; (22710 <z_set_prio+0xfc>)
   22678:	4822      	ldr	r0, [pc, #136]	; (22704 <z_set_prio+0xf0>)
   2267a:	22ba      	movs	r2, #186	; 0xba
   2267c:	f004 fb94 	bl	26da8 <assert_print>
   22680:	4823      	ldr	r0, [pc, #140]	; (22710 <z_set_prio+0xfc>)
   22682:	21ba      	movs	r1, #186	; 0xba
   22684:	f004 fb89 	bl	26d9a <assert_post_action>
	return list->head == list;
   22688:	4a22      	ldr	r2, [pc, #136]	; (22714 <z_set_prio+0x100>)
	return (node == list->tail) ? NULL : node->next;
   2268a:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2268e:	f102 0520 	add.w	r5, r2, #32
   22692:	42ab      	cmp	r3, r5
   22694:	d02a      	beq.n	226ec <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22696:	b34b      	cbz	r3, 226ec <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   22698:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2269c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   226a0:	428f      	cmp	r7, r1
   226a2:	d01e      	beq.n	226e2 <z_set_prio+0xce>
		return b2 - b1;
   226a4:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   226a6:	2900      	cmp	r1, #0
   226a8:	dd1b      	ble.n	226e2 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   226aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   226ac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   226b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   226b2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   226b4:	2001      	movs	r0, #1
   226b6:	f7ff fcf3 	bl	220a0 <update_cache>
   226ba:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226bc:	480f      	ldr	r0, [pc, #60]	; (226fc <z_set_prio+0xe8>)
   226be:	f7fe fb6f 	bl	20da0 <z_spin_unlock_valid>
   226c2:	b940      	cbnz	r0, 226d6 <z_set_prio+0xc2>
   226c4:	490e      	ldr	r1, [pc, #56]	; (22700 <z_set_prio+0xec>)
   226c6:	480f      	ldr	r0, [pc, #60]	; (22704 <z_set_prio+0xf0>)
   226c8:	22b9      	movs	r2, #185	; 0xb9
   226ca:	f004 fb6d 	bl	26da8 <assert_print>
   226ce:	480c      	ldr	r0, [pc, #48]	; (22700 <z_set_prio+0xec>)
   226d0:	21b9      	movs	r1, #185	; 0xb9
   226d2:	f004 fb62 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   226d6:	f386 8811 	msr	BASEPRI, r6
   226da:	f3bf 8f6f 	isb	sy
}
   226de:	4620      	mov	r0, r4
   226e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   226e2:	4283      	cmp	r3, r0
   226e4:	d002      	beq.n	226ec <z_set_prio+0xd8>
   226e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   226e8:	2b00      	cmp	r3, #0
   226ea:	d1d7      	bne.n	2269c <z_set_prio+0x88>
	node->prev = tail;
   226ec:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   226f0:	6004      	str	r4, [r0, #0]
	list->tail = node;
   226f2:	6254      	str	r4, [r2, #36]	; 0x24
}
   226f4:	e7de      	b.n	226b4 <z_set_prio+0xa0>
			thread->base.prio = prio;
   226f6:	73a5      	strb	r5, [r4, #14]
   226f8:	2400      	movs	r4, #0
   226fa:	e7df      	b.n	226bc <z_set_prio+0xa8>
   226fc:	20003f8c 	.word	0x20003f8c
   22700:	0002a705 	.word	0x0002a705
   22704:	0002a576 	.word	0x0002a576
   22708:	20003f6c 	.word	0x20003f6c
   2270c:	20003340 	.word	0x20003340
   22710:	0002c6be 	.word	0x0002c6be
   22714:	20003f4c 	.word	0x20003f4c

00022718 <z_impl_k_thread_suspend>:
{
   22718:	b570      	push	{r4, r5, r6, lr}
   2271a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   2271c:	3018      	adds	r0, #24
   2271e:	f000 fc61 	bl	22fe4 <z_abort_timeout>
	__asm__ volatile(
   22722:	f04f 0340 	mov.w	r3, #64	; 0x40
   22726:	f3ef 8611 	mrs	r6, BASEPRI
   2272a:	f383 8812 	msr	BASEPRI_MAX, r3
   2272e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22732:	4820      	ldr	r0, [pc, #128]	; (227b4 <z_impl_k_thread_suspend+0x9c>)
   22734:	f7fe fb26 	bl	20d84 <z_spin_lock_valid>
   22738:	b940      	cbnz	r0, 2274c <z_impl_k_thread_suspend+0x34>
   2273a:	491f      	ldr	r1, [pc, #124]	; (227b8 <z_impl_k_thread_suspend+0xa0>)
   2273c:	481f      	ldr	r0, [pc, #124]	; (227bc <z_impl_k_thread_suspend+0xa4>)
   2273e:	228e      	movs	r2, #142	; 0x8e
   22740:	f004 fb32 	bl	26da8 <assert_print>
   22744:	481c      	ldr	r0, [pc, #112]	; (227b8 <z_impl_k_thread_suspend+0xa0>)
   22746:	218e      	movs	r1, #142	; 0x8e
   22748:	f004 fb27 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   2274c:	4819      	ldr	r0, [pc, #100]	; (227b4 <z_impl_k_thread_suspend+0x9c>)
   2274e:	f7fe fb37 	bl	20dc0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   22752:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   22756:	7b63      	ldrb	r3, [r4, #13]
   22758:	2a00      	cmp	r2, #0
   2275a:	da06      	bge.n	2276a <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2275c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   22760:	4817      	ldr	r0, [pc, #92]	; (227c0 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22762:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22764:	4621      	mov	r1, r4
   22766:	f7ff fc25 	bl	21fb4 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2276a:	4d16      	ldr	r5, [pc, #88]	; (227c4 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2276c:	7b63      	ldrb	r3, [r4, #13]
   2276e:	68a8      	ldr	r0, [r5, #8]
   22770:	f043 0310 	orr.w	r3, r3, #16
   22774:	7363      	strb	r3, [r4, #13]
   22776:	1b03      	subs	r3, r0, r4
   22778:	4258      	negs	r0, r3
   2277a:	4158      	adcs	r0, r3
   2277c:	f7ff fc90 	bl	220a0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22780:	480c      	ldr	r0, [pc, #48]	; (227b4 <z_impl_k_thread_suspend+0x9c>)
   22782:	f7fe fb0d 	bl	20da0 <z_spin_unlock_valid>
   22786:	b940      	cbnz	r0, 2279a <z_impl_k_thread_suspend+0x82>
   22788:	490b      	ldr	r1, [pc, #44]	; (227b8 <z_impl_k_thread_suspend+0xa0>)
   2278a:	480c      	ldr	r0, [pc, #48]	; (227bc <z_impl_k_thread_suspend+0xa4>)
   2278c:	22b9      	movs	r2, #185	; 0xb9
   2278e:	f004 fb0b 	bl	26da8 <assert_print>
   22792:	4809      	ldr	r0, [pc, #36]	; (227b8 <z_impl_k_thread_suspend+0xa0>)
   22794:	21b9      	movs	r1, #185	; 0xb9
   22796:	f004 fb00 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2279a:	f386 8811 	msr	BASEPRI, r6
   2279e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   227a2:	68ab      	ldr	r3, [r5, #8]
   227a4:	42a3      	cmp	r3, r4
   227a6:	d103      	bne.n	227b0 <z_impl_k_thread_suspend+0x98>
}
   227a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   227ac:	f006 beaf 	b.w	2950e <z_reschedule_unlocked>
}
   227b0:	bd70      	pop	{r4, r5, r6, pc}
   227b2:	bf00      	nop
   227b4:	20003f8c 	.word	0x20003f8c
   227b8:	0002a705 	.word	0x0002a705
   227bc:	0002a576 	.word	0x0002a576
   227c0:	20003f6c 	.word	0x20003f6c
   227c4:	20003f4c 	.word	0x20003f4c

000227c8 <k_sched_unlock>:
{
   227c8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   227ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   227ce:	f3ef 8511 	mrs	r5, BASEPRI
   227d2:	f383 8812 	msr	BASEPRI_MAX, r3
   227d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227da:	4824      	ldr	r0, [pc, #144]	; (2286c <k_sched_unlock+0xa4>)
   227dc:	f7fe fad2 	bl	20d84 <z_spin_lock_valid>
   227e0:	b940      	cbnz	r0, 227f4 <k_sched_unlock+0x2c>
   227e2:	4923      	ldr	r1, [pc, #140]	; (22870 <k_sched_unlock+0xa8>)
   227e4:	4823      	ldr	r0, [pc, #140]	; (22874 <k_sched_unlock+0xac>)
   227e6:	228e      	movs	r2, #142	; 0x8e
   227e8:	f004 fade 	bl	26da8 <assert_print>
   227ec:	4820      	ldr	r0, [pc, #128]	; (22870 <k_sched_unlock+0xa8>)
   227ee:	218e      	movs	r1, #142	; 0x8e
   227f0:	f004 fad3 	bl	26d9a <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   227f4:	4c20      	ldr	r4, [pc, #128]	; (22878 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   227f6:	481d      	ldr	r0, [pc, #116]	; (2286c <k_sched_unlock+0xa4>)
   227f8:	f7fe fae2 	bl	20dc0 <z_spin_lock_set_owner>
   227fc:	68a3      	ldr	r3, [r4, #8]
   227fe:	7bdb      	ldrb	r3, [r3, #15]
   22800:	b953      	cbnz	r3, 22818 <k_sched_unlock+0x50>
   22802:	491e      	ldr	r1, [pc, #120]	; (2287c <k_sched_unlock+0xb4>)
   22804:	481b      	ldr	r0, [pc, #108]	; (22874 <k_sched_unlock+0xac>)
   22806:	f240 32d6 	movw	r2, #982	; 0x3d6
   2280a:	f004 facd 	bl	26da8 <assert_print>
   2280e:	481b      	ldr	r0, [pc, #108]	; (2287c <k_sched_unlock+0xb4>)
   22810:	f240 31d6 	movw	r1, #982	; 0x3d6
   22814:	f004 fac1 	bl	26d9a <assert_post_action>
   22818:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2281c:	b153      	cbz	r3, 22834 <k_sched_unlock+0x6c>
   2281e:	4917      	ldr	r1, [pc, #92]	; (2287c <k_sched_unlock+0xb4>)
   22820:	4814      	ldr	r0, [pc, #80]	; (22874 <k_sched_unlock+0xac>)
   22822:	f240 32d7 	movw	r2, #983	; 0x3d7
   22826:	f004 fabf 	bl	26da8 <assert_print>
   2282a:	4814      	ldr	r0, [pc, #80]	; (2287c <k_sched_unlock+0xb4>)
   2282c:	f240 31d7 	movw	r1, #983	; 0x3d7
   22830:	f004 fab3 	bl	26d9a <assert_post_action>
		++_current->base.sched_locked;
   22834:	68a2      	ldr	r2, [r4, #8]
   22836:	7bd3      	ldrb	r3, [r2, #15]
   22838:	3301      	adds	r3, #1
		update_cache(0);
   2283a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2283c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2283e:	f7ff fc2f 	bl	220a0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22842:	480a      	ldr	r0, [pc, #40]	; (2286c <k_sched_unlock+0xa4>)
   22844:	f7fe faac 	bl	20da0 <z_spin_unlock_valid>
   22848:	b940      	cbnz	r0, 2285c <k_sched_unlock+0x94>
   2284a:	4909      	ldr	r1, [pc, #36]	; (22870 <k_sched_unlock+0xa8>)
   2284c:	4809      	ldr	r0, [pc, #36]	; (22874 <k_sched_unlock+0xac>)
   2284e:	22b9      	movs	r2, #185	; 0xb9
   22850:	f004 faaa 	bl	26da8 <assert_print>
   22854:	4806      	ldr	r0, [pc, #24]	; (22870 <k_sched_unlock+0xa8>)
   22856:	21b9      	movs	r1, #185	; 0xb9
   22858:	f004 fa9f 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2285c:	f385 8811 	msr	BASEPRI, r5
   22860:	f3bf 8f6f 	isb	sy
}
   22864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   22868:	f006 be51 	b.w	2950e <z_reschedule_unlocked>
   2286c:	20003f8c 	.word	0x20003f8c
   22870:	0002a705 	.word	0x0002a705
   22874:	0002a576 	.word	0x0002a576
   22878:	20003f4c 	.word	0x20003f4c
   2287c:	0002c6be 	.word	0x0002c6be

00022880 <z_unpend_first_thread>:
{
   22880:	b538      	push	{r3, r4, r5, lr}
   22882:	4604      	mov	r4, r0
	__asm__ volatile(
   22884:	f04f 0340 	mov.w	r3, #64	; 0x40
   22888:	f3ef 8511 	mrs	r5, BASEPRI
   2288c:	f383 8812 	msr	BASEPRI_MAX, r3
   22890:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22894:	4816      	ldr	r0, [pc, #88]	; (228f0 <z_unpend_first_thread+0x70>)
   22896:	f7fe fa75 	bl	20d84 <z_spin_lock_valid>
   2289a:	b940      	cbnz	r0, 228ae <z_unpend_first_thread+0x2e>
   2289c:	4915      	ldr	r1, [pc, #84]	; (228f4 <z_unpend_first_thread+0x74>)
   2289e:	4816      	ldr	r0, [pc, #88]	; (228f8 <z_unpend_first_thread+0x78>)
   228a0:	228e      	movs	r2, #142	; 0x8e
   228a2:	f004 fa81 	bl	26da8 <assert_print>
   228a6:	4813      	ldr	r0, [pc, #76]	; (228f4 <z_unpend_first_thread+0x74>)
   228a8:	218e      	movs	r1, #142	; 0x8e
   228aa:	f004 fa76 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   228ae:	4810      	ldr	r0, [pc, #64]	; (228f0 <z_unpend_first_thread+0x70>)
   228b0:	f7fe fa86 	bl	20dc0 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   228b4:	4620      	mov	r0, r4
   228b6:	f006 fe34 	bl	29522 <z_priq_dumb_best>
		if (thread != NULL) {
   228ba:	4604      	mov	r4, r0
   228bc:	b128      	cbz	r0, 228ca <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   228be:	f7ff fb97 	bl	21ff0 <unpend_thread_no_timeout>
   228c2:	f104 0018 	add.w	r0, r4, #24
   228c6:	f000 fb8d 	bl	22fe4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228ca:	4809      	ldr	r0, [pc, #36]	; (228f0 <z_unpend_first_thread+0x70>)
   228cc:	f7fe fa68 	bl	20da0 <z_spin_unlock_valid>
   228d0:	b940      	cbnz	r0, 228e4 <z_unpend_first_thread+0x64>
   228d2:	4908      	ldr	r1, [pc, #32]	; (228f4 <z_unpend_first_thread+0x74>)
   228d4:	4808      	ldr	r0, [pc, #32]	; (228f8 <z_unpend_first_thread+0x78>)
   228d6:	22b9      	movs	r2, #185	; 0xb9
   228d8:	f004 fa66 	bl	26da8 <assert_print>
   228dc:	4805      	ldr	r0, [pc, #20]	; (228f4 <z_unpend_first_thread+0x74>)
   228de:	21b9      	movs	r1, #185	; 0xb9
   228e0:	f004 fa5b 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   228e4:	f385 8811 	msr	BASEPRI, r5
   228e8:	f3bf 8f6f 	isb	sy
}
   228ec:	4620      	mov	r0, r4
   228ee:	bd38      	pop	{r3, r4, r5, pc}
   228f0:	20003f8c 	.word	0x20003f8c
   228f4:	0002a705 	.word	0x0002a705
   228f8:	0002a576 	.word	0x0002a576

000228fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   228fc:	4b04      	ldr	r3, [pc, #16]	; (22910 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   228fe:	2100      	movs	r1, #0
   22900:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   22904:	e9c3 2208 	strd	r2, r2, [r3, #32]
   22908:	4608      	mov	r0, r1
   2290a:	f7ff ba75 	b.w	21df8 <k_sched_time_slice_set>
   2290e:	bf00      	nop
   22910:	20003f4c 	.word	0x20003f4c

00022914 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   22914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22916:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2291a:	b153      	cbz	r3, 22932 <z_impl_k_yield+0x1e>
   2291c:	4938      	ldr	r1, [pc, #224]	; (22a00 <z_impl_k_yield+0xec>)
   2291e:	4839      	ldr	r0, [pc, #228]	; (22a04 <z_impl_k_yield+0xf0>)
   22920:	f240 525d 	movw	r2, #1373	; 0x55d
   22924:	f004 fa40 	bl	26da8 <assert_print>
   22928:	4835      	ldr	r0, [pc, #212]	; (22a00 <z_impl_k_yield+0xec>)
   2292a:	f240 515d 	movw	r1, #1373	; 0x55d
   2292e:	f004 fa34 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   22932:	f04f 0340 	mov.w	r3, #64	; 0x40
   22936:	f3ef 8611 	mrs	r6, BASEPRI
   2293a:	f383 8812 	msr	BASEPRI_MAX, r3
   2293e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22942:	4831      	ldr	r0, [pc, #196]	; (22a08 <z_impl_k_yield+0xf4>)
   22944:	f7fe fa1e 	bl	20d84 <z_spin_lock_valid>
   22948:	b940      	cbnz	r0, 2295c <z_impl_k_yield+0x48>
   2294a:	4930      	ldr	r1, [pc, #192]	; (22a0c <z_impl_k_yield+0xf8>)
   2294c:	482d      	ldr	r0, [pc, #180]	; (22a04 <z_impl_k_yield+0xf0>)
   2294e:	228e      	movs	r2, #142	; 0x8e
   22950:	f004 fa2a 	bl	26da8 <assert_print>
   22954:	482d      	ldr	r0, [pc, #180]	; (22a0c <z_impl_k_yield+0xf8>)
   22956:	218e      	movs	r1, #142	; 0x8e
   22958:	f004 fa1f 	bl	26d9a <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2295c:	4d2c      	ldr	r5, [pc, #176]	; (22a10 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   2295e:	482a      	ldr	r0, [pc, #168]	; (22a08 <z_impl_k_yield+0xf4>)
   22960:	f7fe fa2e 	bl	20dc0 <z_spin_lock_set_owner>
   22964:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22966:	7b4b      	ldrb	r3, [r1, #13]
   22968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2296c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2296e:	f105 0020 	add.w	r0, r5, #32
   22972:	f7ff fb1f 	bl	21fb4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   22976:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   22978:	7b63      	ldrb	r3, [r4, #13]
   2297a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2297e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22980:	4b24      	ldr	r3, [pc, #144]	; (22a14 <z_impl_k_yield+0x100>)
   22982:	429c      	cmp	r4, r3
   22984:	d108      	bne.n	22998 <z_impl_k_yield+0x84>
   22986:	491e      	ldr	r1, [pc, #120]	; (22a00 <z_impl_k_yield+0xec>)
   22988:	481e      	ldr	r0, [pc, #120]	; (22a04 <z_impl_k_yield+0xf0>)
   2298a:	22ba      	movs	r2, #186	; 0xba
   2298c:	f004 fa0c 	bl	26da8 <assert_print>
   22990:	481b      	ldr	r0, [pc, #108]	; (22a00 <z_impl_k_yield+0xec>)
   22992:	21ba      	movs	r1, #186	; 0xba
   22994:	f004 fa01 	bl	26d9a <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   22998:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2299c:	481e      	ldr	r0, [pc, #120]	; (22a18 <z_impl_k_yield+0x104>)
   2299e:	4283      	cmp	r3, r0
   229a0:	d028      	beq.n	229f4 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   229a2:	b33b      	cbz	r3, 229f4 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   229a4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   229a8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   229ac:	4297      	cmp	r7, r2
   229ae:	d01c      	beq.n	229ea <z_impl_k_yield+0xd6>
		return b2 - b1;
   229b0:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   229b2:	2a00      	cmp	r2, #0
   229b4:	dd19      	ble.n	229ea <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   229b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   229b8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   229bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   229be:	605c      	str	r4, [r3, #4]
	update_cache(1);
   229c0:	2001      	movs	r0, #1
   229c2:	f7ff fb6d 	bl	220a0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229c6:	4810      	ldr	r0, [pc, #64]	; (22a08 <z_impl_k_yield+0xf4>)
   229c8:	f7fe f9ea 	bl	20da0 <z_spin_unlock_valid>
   229cc:	b940      	cbnz	r0, 229e0 <z_impl_k_yield+0xcc>
   229ce:	490f      	ldr	r1, [pc, #60]	; (22a0c <z_impl_k_yield+0xf8>)
   229d0:	480c      	ldr	r0, [pc, #48]	; (22a04 <z_impl_k_yield+0xf0>)
   229d2:	22d0      	movs	r2, #208	; 0xd0
   229d4:	f004 f9e8 	bl	26da8 <assert_print>
   229d8:	480c      	ldr	r0, [pc, #48]	; (22a0c <z_impl_k_yield+0xf8>)
   229da:	21d0      	movs	r1, #208	; 0xd0
   229dc:	f004 f9dd 	bl	26d9a <assert_post_action>
   229e0:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   229e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   229e6:	f7f4 bbe5 	b.w	171b4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   229ea:	428b      	cmp	r3, r1
   229ec:	d002      	beq.n	229f4 <z_impl_k_yield+0xe0>
   229ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   229f0:	2b00      	cmp	r3, #0
   229f2:	d1d9      	bne.n	229a8 <z_impl_k_yield+0x94>
	node->prev = tail;
   229f4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   229f8:	600c      	str	r4, [r1, #0]
	list->tail = node;
   229fa:	626c      	str	r4, [r5, #36]	; 0x24
}
   229fc:	e7e0      	b.n	229c0 <z_impl_k_yield+0xac>
   229fe:	bf00      	nop
   22a00:	0002c6be 	.word	0x0002c6be
   22a04:	0002a576 	.word	0x0002a576
   22a08:	20003f8c 	.word	0x20003f8c
   22a0c:	0002a705 	.word	0x0002a705
   22a10:	20003f4c 	.word	0x20003f4c
   22a14:	20003340 	.word	0x20003340
   22a18:	20003f6c 	.word	0x20003f6c

00022a1c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   22a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a20:	4605      	mov	r5, r0
   22a22:	460e      	mov	r6, r1
   22a24:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   22a28:	b153      	cbz	r3, 22a40 <z_tick_sleep+0x24>
   22a2a:	493a      	ldr	r1, [pc, #232]	; (22b14 <z_tick_sleep+0xf8>)
   22a2c:	483a      	ldr	r0, [pc, #232]	; (22b18 <z_tick_sleep+0xfc>)
   22a2e:	f240 5279 	movw	r2, #1401	; 0x579
   22a32:	f004 f9b9 	bl	26da8 <assert_print>
   22a36:	4837      	ldr	r0, [pc, #220]	; (22b14 <z_tick_sleep+0xf8>)
   22a38:	f240 5179 	movw	r1, #1401	; 0x579
   22a3c:	f004 f9ad 	bl	26d9a <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   22a40:	ea55 0306 	orrs.w	r3, r5, r6
   22a44:	d103      	bne.n	22a4e <z_tick_sleep+0x32>
	z_impl_k_yield();
   22a46:	f7ff ff65 	bl	22914 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   22a4a:	2000      	movs	r0, #0
   22a4c:	e05f      	b.n	22b0e <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   22a4e:	f06f 0401 	mvn.w	r4, #1
   22a52:	1b64      	subs	r4, r4, r5
   22a54:	f04f 33ff 	mov.w	r3, #4294967295
   22a58:	eb63 0306 	sbc.w	r3, r3, r6
   22a5c:	2c01      	cmp	r4, #1
   22a5e:	f173 0300 	sbcs.w	r3, r3, #0
   22a62:	da02      	bge.n	22a6a <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   22a64:	f006 fd73 	bl	2954e <sys_clock_tick_get_32>
   22a68:	1944      	adds	r4, r0, r5
   22a6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a6e:	f3ef 8811 	mrs	r8, BASEPRI
   22a72:	f383 8812 	msr	BASEPRI_MAX, r3
   22a76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a7a:	4828      	ldr	r0, [pc, #160]	; (22b1c <z_tick_sleep+0x100>)
   22a7c:	f7fe f982 	bl	20d84 <z_spin_lock_valid>
   22a80:	b940      	cbnz	r0, 22a94 <z_tick_sleep+0x78>
   22a82:	4927      	ldr	r1, [pc, #156]	; (22b20 <z_tick_sleep+0x104>)
   22a84:	4824      	ldr	r0, [pc, #144]	; (22b18 <z_tick_sleep+0xfc>)
   22a86:	228e      	movs	r2, #142	; 0x8e
   22a88:	f004 f98e 	bl	26da8 <assert_print>
   22a8c:	4824      	ldr	r0, [pc, #144]	; (22b20 <z_tick_sleep+0x104>)
   22a8e:	218e      	movs	r1, #142	; 0x8e
   22a90:	f004 f983 	bl	26d9a <assert_post_action>
	pending_current = _current;
   22a94:	4f23      	ldr	r7, [pc, #140]	; (22b24 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   22a96:	4821      	ldr	r0, [pc, #132]	; (22b1c <z_tick_sleep+0x100>)
   22a98:	f7fe f992 	bl	20dc0 <z_spin_lock_set_owner>
   22a9c:	4b22      	ldr	r3, [pc, #136]	; (22b28 <z_tick_sleep+0x10c>)
   22a9e:	68b8      	ldr	r0, [r7, #8]
   22aa0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22aa2:	f7ff fced 	bl	22480 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   22aa6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22aa8:	4920      	ldr	r1, [pc, #128]	; (22b2c <z_tick_sleep+0x110>)
   22aaa:	462a      	mov	r2, r5
   22aac:	4633      	mov	r3, r6
   22aae:	3018      	adds	r0, #24
   22ab0:	f000 f9ea 	bl	22e88 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22ab4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ab6:	4819      	ldr	r0, [pc, #100]	; (22b1c <z_tick_sleep+0x100>)
   22ab8:	7b53      	ldrb	r3, [r2, #13]
   22aba:	f043 0310 	orr.w	r3, r3, #16
   22abe:	7353      	strb	r3, [r2, #13]
   22ac0:	f7fe f96e 	bl	20da0 <z_spin_unlock_valid>
   22ac4:	b940      	cbnz	r0, 22ad8 <z_tick_sleep+0xbc>
   22ac6:	4916      	ldr	r1, [pc, #88]	; (22b20 <z_tick_sleep+0x104>)
   22ac8:	4813      	ldr	r0, [pc, #76]	; (22b18 <z_tick_sleep+0xfc>)
   22aca:	22d0      	movs	r2, #208	; 0xd0
   22acc:	f004 f96c 	bl	26da8 <assert_print>
   22ad0:	4813      	ldr	r0, [pc, #76]	; (22b20 <z_tick_sleep+0x104>)
   22ad2:	21d0      	movs	r1, #208	; 0xd0
   22ad4:	f004 f961 	bl	26d9a <assert_post_action>
   22ad8:	4640      	mov	r0, r8
   22ada:	f7f4 fb6b 	bl	171b4 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   22ade:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22ae0:	7b5b      	ldrb	r3, [r3, #13]
   22ae2:	06db      	lsls	r3, r3, #27
   22ae4:	d50a      	bpl.n	22afc <z_tick_sleep+0xe0>
   22ae6:	490b      	ldr	r1, [pc, #44]	; (22b14 <z_tick_sleep+0xf8>)
   22ae8:	480b      	ldr	r0, [pc, #44]	; (22b18 <z_tick_sleep+0xfc>)
   22aea:	f240 529a 	movw	r2, #1434	; 0x59a
   22aee:	f004 f95b 	bl	26da8 <assert_print>
   22af2:	4808      	ldr	r0, [pc, #32]	; (22b14 <z_tick_sleep+0xf8>)
   22af4:	f240 519a 	movw	r1, #1434	; 0x59a
   22af8:	f004 f94f 	bl	26d9a <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22afc:	f006 fd27 	bl	2954e <sys_clock_tick_get_32>
   22b00:	1a20      	subs	r0, r4, r0
   22b02:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   22b06:	2801      	cmp	r0, #1
   22b08:	f173 0300 	sbcs.w	r3, r3, #0
   22b0c:	db9d      	blt.n	22a4a <z_tick_sleep+0x2e>
}
   22b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b12:	bf00      	nop
   22b14:	0002c6be 	.word	0x0002c6be
   22b18:	0002a576 	.word	0x0002a576
   22b1c:	20003f8c 	.word	0x20003f8c
   22b20:	0002a705 	.word	0x0002a705
   22b24:	20003f4c 	.word	0x20003f4c
   22b28:	20003f88 	.word	0x20003f88
   22b2c:	000223f1 	.word	0x000223f1

00022b30 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   22b30:	b538      	push	{r3, r4, r5, lr}
   22b32:	4605      	mov	r5, r0
   22b34:	460c      	mov	r4, r1
   22b36:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   22b3a:	b153      	cbz	r3, 22b52 <z_impl_k_sleep+0x22>
   22b3c:	4911      	ldr	r1, [pc, #68]	; (22b84 <z_impl_k_sleep+0x54>)
   22b3e:	4812      	ldr	r0, [pc, #72]	; (22b88 <z_impl_k_sleep+0x58>)
   22b40:	f240 52a9 	movw	r2, #1449	; 0x5a9
   22b44:	f004 f930 	bl	26da8 <assert_print>
   22b48:	480e      	ldr	r0, [pc, #56]	; (22b84 <z_impl_k_sleep+0x54>)
   22b4a:	f240 51a9 	movw	r1, #1449	; 0x5a9
   22b4e:	f004 f924 	bl	26d9a <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22b52:	f1b4 3fff 	cmp.w	r4, #4294967295
   22b56:	bf08      	it	eq
   22b58:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   22b5c:	d106      	bne.n	22b6c <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   22b5e:	4b0b      	ldr	r3, [pc, #44]	; (22b8c <z_impl_k_sleep+0x5c>)
   22b60:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   22b62:	f7ff fdd9 	bl	22718 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   22b66:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   22b6a:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   22b6c:	4628      	mov	r0, r5
   22b6e:	4621      	mov	r1, r4
   22b70:	f7ff ff54 	bl	22a1c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   22b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22b78:	fb80 0303 	smull	r0, r3, r0, r3
   22b7c:	0bc0      	lsrs	r0, r0, #15
   22b7e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   22b82:	e7f2      	b.n	22b6a <z_impl_k_sleep+0x3a>
   22b84:	0002c6be 	.word	0x0002c6be
   22b88:	0002a576 	.word	0x0002a576
   22b8c:	20003f4c 	.word	0x20003f4c

00022b90 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22b90:	4b01      	ldr	r3, [pc, #4]	; (22b98 <z_impl_z_current_get+0x8>)
   22b92:	6898      	ldr	r0, [r3, #8]
   22b94:	4770      	bx	lr
   22b96:	bf00      	nop
   22b98:	20003f4c 	.word	0x20003f4c

00022b9c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ba0:	4604      	mov	r4, r0
   22ba2:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ba6:	f3ef 8611 	mrs	r6, BASEPRI
   22baa:	f383 8812 	msr	BASEPRI_MAX, r3
   22bae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bb2:	4851      	ldr	r0, [pc, #324]	; (22cf8 <z_thread_abort+0x15c>)
   22bb4:	f7fe f8e6 	bl	20d84 <z_spin_lock_valid>
   22bb8:	b940      	cbnz	r0, 22bcc <z_thread_abort+0x30>
   22bba:	4950      	ldr	r1, [pc, #320]	; (22cfc <z_thread_abort+0x160>)
   22bbc:	4850      	ldr	r0, [pc, #320]	; (22d00 <z_thread_abort+0x164>)
   22bbe:	228e      	movs	r2, #142	; 0x8e
   22bc0:	f004 f8f2 	bl	26da8 <assert_print>
   22bc4:	484d      	ldr	r0, [pc, #308]	; (22cfc <z_thread_abort+0x160>)
   22bc6:	218e      	movs	r1, #142	; 0x8e
   22bc8:	f004 f8e7 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   22bcc:	484a      	ldr	r0, [pc, #296]	; (22cf8 <z_thread_abort+0x15c>)
   22bce:	f7fe f8f7 	bl	20dc0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22bd2:	7b23      	ldrb	r3, [r4, #12]
   22bd4:	07d9      	lsls	r1, r3, #31
   22bd6:	d523      	bpl.n	22c20 <z_thread_abort+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bd8:	4847      	ldr	r0, [pc, #284]	; (22cf8 <z_thread_abort+0x15c>)
   22bda:	f7fe f8e1 	bl	20da0 <z_spin_unlock_valid>
   22bde:	b940      	cbnz	r0, 22bf2 <z_thread_abort+0x56>
   22be0:	4946      	ldr	r1, [pc, #280]	; (22cfc <z_thread_abort+0x160>)
   22be2:	4847      	ldr	r0, [pc, #284]	; (22d00 <z_thread_abort+0x164>)
   22be4:	22b9      	movs	r2, #185	; 0xb9
   22be6:	f004 f8df 	bl	26da8 <assert_print>
   22bea:	4844      	ldr	r0, [pc, #272]	; (22cfc <z_thread_abort+0x160>)
   22bec:	21b9      	movs	r1, #185	; 0xb9
   22bee:	f004 f8d4 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   22bf2:	f386 8811 	msr	BASEPRI, r6
   22bf6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   22bfa:	f240 62b5 	movw	r2, #1717	; 0x6b5
   22bfe:	4941      	ldr	r1, [pc, #260]	; (22d04 <z_thread_abort+0x168>)
   22c00:	483f      	ldr	r0, [pc, #252]	; (22d00 <z_thread_abort+0x164>)
   22c02:	f004 f8d1 	bl	26da8 <assert_print>
   22c06:	483f      	ldr	r0, [pc, #252]	; (22d04 <z_thread_abort+0x168>)
   22c08:	f240 61b5 	movw	r1, #1717	; 0x6b5
   22c0c:	f004 f8c5 	bl	26d9a <assert_post_action>
		k_panic();
   22c10:	4040      	eors	r0, r0
   22c12:	f380 8811 	msr	BASEPRI, r0
   22c16:	f04f 0004 	mov.w	r0, #4
   22c1a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22c20:	7b63      	ldrb	r3, [r4, #13]
   22c22:	071a      	lsls	r2, r3, #28
   22c24:	d511      	bpl.n	22c4a <z_thread_abort+0xae>
   22c26:	4834      	ldr	r0, [pc, #208]	; (22cf8 <z_thread_abort+0x15c>)
   22c28:	f7fe f8ba 	bl	20da0 <z_spin_unlock_valid>
   22c2c:	b940      	cbnz	r0, 22c40 <z_thread_abort+0xa4>
   22c2e:	4933      	ldr	r1, [pc, #204]	; (22cfc <z_thread_abort+0x160>)
   22c30:	4833      	ldr	r0, [pc, #204]	; (22d00 <z_thread_abort+0x164>)
   22c32:	22b9      	movs	r2, #185	; 0xb9
   22c34:	f004 f8b8 	bl	26da8 <assert_print>
   22c38:	4830      	ldr	r0, [pc, #192]	; (22cfc <z_thread_abort+0x160>)
   22c3a:	21b9      	movs	r1, #185	; 0xb9
   22c3c:	f004 f8ad 	bl	26d9a <assert_post_action>
   22c40:	f386 8811 	msr	BASEPRI, r6
   22c44:	f3bf 8f6f 	isb	sy
   22c48:	e7e8      	b.n	22c1c <z_thread_abort+0x80>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22c4a:	f023 0220 	bic.w	r2, r3, #32
   22c4e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   22c52:	09d2      	lsrs	r2, r2, #7
   22c54:	d138      	bne.n	22cc8 <z_thread_abort+0x12c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22c56:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   22c58:	68a3      	ldr	r3, [r4, #8]
   22c5a:	b113      	cbz	r3, 22c62 <z_thread_abort+0xc6>
			unpend_thread_no_timeout(thread);
   22c5c:	4620      	mov	r0, r4
   22c5e:	f7ff f9c7 	bl	21ff0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   22c62:	f104 0018 	add.w	r0, r4, #24
   22c66:	f000 f9bd 	bl	22fe4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22c6a:	f104 0758 	add.w	r7, r4, #88	; 0x58
   22c6e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   22c72:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c74:	42bd      	cmp	r5, r7
   22c76:	d000      	beq.n	22c7a <z_thread_abort+0xde>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22c78:	bb85      	cbnz	r5, 22cdc <z_thread_abort+0x140>
		update_cache(1);
   22c7a:	2001      	movs	r0, #1
   22c7c:	f7ff fa10 	bl	220a0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   22c80:	4b21      	ldr	r3, [pc, #132]	; (22d08 <z_thread_abort+0x16c>)
   22c82:	689b      	ldr	r3, [r3, #8]
   22c84:	42a3      	cmp	r3, r4
   22c86:	d1ce      	bne.n	22c26 <z_thread_abort+0x8a>
   22c88:	f3ef 8305 	mrs	r3, IPSR
   22c8c:	2b00      	cmp	r3, #0
   22c8e:	d1ca      	bne.n	22c26 <z_thread_abort+0x8a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c90:	4819      	ldr	r0, [pc, #100]	; (22cf8 <z_thread_abort+0x15c>)
   22c92:	f7fe f885 	bl	20da0 <z_spin_unlock_valid>
   22c96:	b940      	cbnz	r0, 22caa <z_thread_abort+0x10e>
   22c98:	4918      	ldr	r1, [pc, #96]	; (22cfc <z_thread_abort+0x160>)
   22c9a:	4819      	ldr	r0, [pc, #100]	; (22d00 <z_thread_abort+0x164>)
   22c9c:	22d0      	movs	r2, #208	; 0xd0
   22c9e:	f004 f883 	bl	26da8 <assert_print>
   22ca2:	4816      	ldr	r0, [pc, #88]	; (22cfc <z_thread_abort+0x160>)
   22ca4:	21d0      	movs	r1, #208	; 0xd0
   22ca6:	f004 f878 	bl	26d9a <assert_post_action>
   22caa:	4630      	mov	r0, r6
   22cac:	f7f4 fa82 	bl	171b4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   22cb0:	4914      	ldr	r1, [pc, #80]	; (22d04 <z_thread_abort+0x168>)
   22cb2:	4813      	ldr	r0, [pc, #76]	; (22d00 <z_thread_abort+0x164>)
   22cb4:	f240 62e4 	movw	r2, #1764	; 0x6e4
   22cb8:	f004 f876 	bl	26da8 <assert_print>
   22cbc:	4811      	ldr	r0, [pc, #68]	; (22d04 <z_thread_abort+0x168>)
   22cbe:	f240 61e4 	movw	r1, #1764	; 0x6e4
   22cc2:	f004 f86a 	bl	26d9a <assert_post_action>
   22cc6:	e7ae      	b.n	22c26 <z_thread_abort+0x8a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22cc8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22ccc:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   22cd0:	480e      	ldr	r0, [pc, #56]	; (22d0c <z_thread_abort+0x170>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22cd2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22cd4:	4621      	mov	r1, r4
   22cd6:	f7ff f96d 	bl	21fb4 <z_priq_dumb_remove>
}
   22cda:	e7bd      	b.n	22c58 <z_thread_abort+0xbc>
		unpend_thread_no_timeout(thread);
   22cdc:	4628      	mov	r0, r5
   22cde:	f7ff f987 	bl	21ff0 <unpend_thread_no_timeout>
   22ce2:	f105 0018 	add.w	r0, r5, #24
   22ce6:	f000 f97d 	bl	22fe4 <z_abort_timeout>
   22cea:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   22cee:	4628      	mov	r0, r5
   22cf0:	f7ff fabc 	bl	2226c <ready_thread>
   22cf4:	e7bd      	b.n	22c72 <z_thread_abort+0xd6>
   22cf6:	bf00      	nop
   22cf8:	20003f8c 	.word	0x20003f8c
   22cfc:	0002a705 	.word	0x0002a705
   22d00:	0002a576 	.word	0x0002a576
   22d04:	0002c6be 	.word	0x0002c6be
   22d08:	20003f4c 	.word	0x20003f4c
   22d0c:	20003f6c 	.word	0x20003f6c

00022d10 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   22d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d12:	4604      	mov	r4, r0
   22d14:	460e      	mov	r6, r1
   22d16:	4615      	mov	r5, r2
	__asm__ volatile(
   22d18:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d1c:	f3ef 8711 	mrs	r7, BASEPRI
   22d20:	f383 8812 	msr	BASEPRI_MAX, r3
   22d24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d28:	4819      	ldr	r0, [pc, #100]	; (22d90 <z_sched_wake+0x80>)
   22d2a:	f7fe f82b 	bl	20d84 <z_spin_lock_valid>
   22d2e:	b940      	cbnz	r0, 22d42 <z_sched_wake+0x32>
   22d30:	4918      	ldr	r1, [pc, #96]	; (22d94 <z_sched_wake+0x84>)
   22d32:	4819      	ldr	r0, [pc, #100]	; (22d98 <z_sched_wake+0x88>)
   22d34:	228e      	movs	r2, #142	; 0x8e
   22d36:	f004 f837 	bl	26da8 <assert_print>
   22d3a:	4816      	ldr	r0, [pc, #88]	; (22d94 <z_sched_wake+0x84>)
   22d3c:	218e      	movs	r1, #142	; 0x8e
   22d3e:	f004 f82c 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   22d42:	4813      	ldr	r0, [pc, #76]	; (22d90 <z_sched_wake+0x80>)
   22d44:	f7fe f83c 	bl	20dc0 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   22d48:	4620      	mov	r0, r4
   22d4a:	f006 fbea 	bl	29522 <z_priq_dumb_best>

		if (thread != NULL) {
   22d4e:	4604      	mov	r4, r0
   22d50:	b158      	cbz	r0, 22d6a <z_sched_wake+0x5a>
   22d52:	67c6      	str	r6, [r0, #124]	; 0x7c
   22d54:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   22d56:	f7ff f94b 	bl	21ff0 <unpend_thread_no_timeout>
   22d5a:	f104 0018 	add.w	r0, r4, #24
   22d5e:	f000 f941 	bl	22fe4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   22d62:	4620      	mov	r0, r4
   22d64:	f7ff fa82 	bl	2226c <ready_thread>
			ret = true;
   22d68:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d6a:	4809      	ldr	r0, [pc, #36]	; (22d90 <z_sched_wake+0x80>)
   22d6c:	f7fe f818 	bl	20da0 <z_spin_unlock_valid>
   22d70:	b940      	cbnz	r0, 22d84 <z_sched_wake+0x74>
   22d72:	4908      	ldr	r1, [pc, #32]	; (22d94 <z_sched_wake+0x84>)
   22d74:	4808      	ldr	r0, [pc, #32]	; (22d98 <z_sched_wake+0x88>)
   22d76:	22b9      	movs	r2, #185	; 0xb9
   22d78:	f004 f816 	bl	26da8 <assert_print>
   22d7c:	4805      	ldr	r0, [pc, #20]	; (22d94 <z_sched_wake+0x84>)
   22d7e:	21b9      	movs	r1, #185	; 0xb9
   22d80:	f004 f80b 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   22d84:	f387 8811 	msr	BASEPRI, r7
   22d88:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   22d8c:	4620      	mov	r0, r4
   22d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d90:	20003f8c 	.word	0x20003f8c
   22d94:	0002a705 	.word	0x0002a705
   22d98:	0002a576 	.word	0x0002a576

00022d9c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22d9c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22d9e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22da2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22da4:	e9cd 6700 	strd	r6, r7, [sp]
   22da8:	f7ff fc0e 	bl	225c8 <z_pend_curr>

	if (data != NULL) {
   22dac:	b11c      	cbz	r4, 22db6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22dae:	4b03      	ldr	r3, [pc, #12]	; (22dbc <z_sched_wait+0x20>)
   22db0:	689b      	ldr	r3, [r3, #8]
   22db2:	695b      	ldr	r3, [r3, #20]
   22db4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22db6:	b002      	add	sp, #8
   22db8:	bdd0      	pop	{r4, r6, r7, pc}
   22dba:	bf00      	nop
   22dbc:	20003f4c 	.word	0x20003f4c

00022dc0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22dc0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22dc2:	4806      	ldr	r0, [pc, #24]	; (22ddc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22dc4:	4a06      	ldr	r2, [pc, #24]	; (22de0 <z_data_copy+0x20>)
   22dc6:	4907      	ldr	r1, [pc, #28]	; (22de4 <z_data_copy+0x24>)
   22dc8:	1a12      	subs	r2, r2, r0
   22dca:	f006 faa0 	bl	2930e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22dce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   22dd2:	4a05      	ldr	r2, [pc, #20]	; (22de8 <z_data_copy+0x28>)
   22dd4:	4905      	ldr	r1, [pc, #20]	; (22dec <z_data_copy+0x2c>)
   22dd6:	4806      	ldr	r0, [pc, #24]	; (22df0 <z_data_copy+0x30>)
   22dd8:	f006 ba99 	b.w	2930e <z_early_memcpy>
   22ddc:	20000000 	.word	0x20000000
   22de0:	20000c00 	.word	0x20000c00
   22de4:	0002c780 	.word	0x0002c780
   22de8:	00000000 	.word	0x00000000
   22dec:	0002c780 	.word	0x0002c780
   22df0:	20000000 	.word	0x20000000

00022df4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22df4:	4b03      	ldr	r3, [pc, #12]	; (22e04 <elapsed+0x10>)
   22df6:	681b      	ldr	r3, [r3, #0]
   22df8:	b90b      	cbnz	r3, 22dfe <elapsed+0xa>
   22dfa:	f7fb bcbf 	b.w	1e77c <sys_clock_elapsed>
}
   22dfe:	2000      	movs	r0, #0
   22e00:	4770      	bx	lr
   22e02:	bf00      	nop
   22e04:	20003f98 	.word	0x20003f98

00022e08 <next_timeout>:
	return list->head == list;
   22e08:	4b10      	ldr	r3, [pc, #64]	; (22e4c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   22e0a:	b510      	push	{r4, lr}
   22e0c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e0e:	429c      	cmp	r4, r3
   22e10:	bf08      	it	eq
   22e12:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22e14:	f7ff ffee 	bl	22df4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   22e18:	b1a4      	cbz	r4, 22e44 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22e1a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22e1e:	1a1b      	subs	r3, r3, r0
   22e20:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   22e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22e28:	f170 0200 	sbcs.w	r2, r0, #0
   22e2c:	da0a      	bge.n	22e44 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   22e2e:	2800      	cmp	r0, #0
   22e30:	bfac      	ite	ge
   22e32:	4618      	movge	r0, r3
   22e34:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22e36:	4b06      	ldr	r3, [pc, #24]	; (22e50 <next_timeout+0x48>)
   22e38:	691b      	ldr	r3, [r3, #16]
   22e3a:	b113      	cbz	r3, 22e42 <next_timeout+0x3a>
   22e3c:	4298      	cmp	r0, r3
   22e3e:	bfa8      	it	ge
   22e40:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22e42:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   22e44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22e48:	e7f5      	b.n	22e36 <next_timeout+0x2e>
   22e4a:	bf00      	nop
   22e4c:	20000864 	.word	0x20000864
   22e50:	20003f4c 	.word	0x20003f4c

00022e54 <remove_timeout>:
{
   22e54:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   22e56:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22e58:	b168      	cbz	r0, 22e76 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22e5a:	4a0a      	ldr	r2, [pc, #40]	; (22e84 <remove_timeout+0x30>)
   22e5c:	6852      	ldr	r2, [r2, #4]
   22e5e:	4290      	cmp	r0, r2
   22e60:	d009      	beq.n	22e76 <remove_timeout+0x22>
	if (next(t) != NULL) {
   22e62:	b143      	cbz	r3, 22e76 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22e64:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22e68:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22e6c:	1912      	adds	r2, r2, r4
   22e6e:	eb41 0105 	adc.w	r1, r1, r5
   22e72:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   22e76:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   22e78:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22e7a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22e7c:	2300      	movs	r3, #0
	node->prev = NULL;
   22e7e:	e9c0 3300 	strd	r3, r3, [r0]
}
   22e82:	bd30      	pop	{r4, r5, pc}
   22e84:	20000864 	.word	0x20000864

00022e88 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e88:	f1b3 3fff 	cmp.w	r3, #4294967295
   22e8c:	bf08      	it	eq
   22e8e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e96:	4604      	mov	r4, r0
   22e98:	460e      	mov	r6, r1
   22e9a:	4698      	mov	r8, r3
   22e9c:	4615      	mov	r5, r2
   22e9e:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22ea0:	f000 8090 	beq.w	22fc4 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22ea4:	6803      	ldr	r3, [r0, #0]
   22ea6:	b143      	cbz	r3, 22eba <z_add_timeout+0x32>
   22ea8:	4947      	ldr	r1, [pc, #284]	; (22fc8 <z_add_timeout+0x140>)
   22eaa:	4848      	ldr	r0, [pc, #288]	; (22fcc <z_add_timeout+0x144>)
   22eac:	2263      	movs	r2, #99	; 0x63
   22eae:	f003 ff7b 	bl	26da8 <assert_print>
   22eb2:	4845      	ldr	r0, [pc, #276]	; (22fc8 <z_add_timeout+0x140>)
   22eb4:	2163      	movs	r1, #99	; 0x63
   22eb6:	f003 ff70 	bl	26d9a <assert_post_action>
	to->fn = fn;
   22eba:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   22ebc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ec0:	f3ef 8611 	mrs	r6, BASEPRI
   22ec4:	f383 8812 	msr	BASEPRI_MAX, r3
   22ec8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ecc:	4840      	ldr	r0, [pc, #256]	; (22fd0 <z_add_timeout+0x148>)
   22ece:	f7fd ff59 	bl	20d84 <z_spin_lock_valid>
   22ed2:	b940      	cbnz	r0, 22ee6 <z_add_timeout+0x5e>
   22ed4:	493f      	ldr	r1, [pc, #252]	; (22fd4 <z_add_timeout+0x14c>)
   22ed6:	483d      	ldr	r0, [pc, #244]	; (22fcc <z_add_timeout+0x144>)
   22ed8:	228e      	movs	r2, #142	; 0x8e
   22eda:	f003 ff65 	bl	26da8 <assert_print>
   22ede:	483d      	ldr	r0, [pc, #244]	; (22fd4 <z_add_timeout+0x14c>)
   22ee0:	218e      	movs	r1, #142	; 0x8e
   22ee2:	f003 ff5a 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   22ee6:	483a      	ldr	r0, [pc, #232]	; (22fd0 <z_add_timeout+0x148>)
   22ee8:	f7fd ff6a 	bl	20dc0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   22eec:	f06f 0201 	mvn.w	r2, #1
   22ef0:	1b53      	subs	r3, r2, r5
   22ef2:	f04f 30ff 	mov.w	r0, #4294967295
   22ef6:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22efa:	2b00      	cmp	r3, #0
   22efc:	db1b      	blt.n	22f36 <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22efe:	4b36      	ldr	r3, [pc, #216]	; (22fd8 <z_add_timeout+0x150>)
   22f00:	e9d3 1300 	ldrd	r1, r3, [r3]
   22f04:	1a52      	subs	r2, r2, r1
   22f06:	eb60 0303 	sbc.w	r3, r0, r3
   22f0a:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   22f0c:	eb63 0707 	sbc.w	r7, r3, r7
   22f10:	2d01      	cmp	r5, #1
   22f12:	f177 0300 	sbcs.w	r3, r7, #0
   22f16:	bfbc      	itt	lt
   22f18:	2501      	movlt	r5, #1
   22f1a:	2700      	movlt	r7, #0
   22f1c:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   22f20:	4a2e      	ldr	r2, [pc, #184]	; (22fdc <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   22f22:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f26:	4293      	cmp	r3, r2
   22f28:	d118      	bne.n	22f5c <z_add_timeout+0xd4>
	node->prev = tail;
   22f2a:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   22f2e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   22f32:	6054      	str	r4, [r2, #4]
}
   22f34:	e026      	b.n	22f84 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   22f36:	f7ff ff5d 	bl	22df4 <elapsed>
   22f3a:	3501      	adds	r5, #1
   22f3c:	f148 0800 	adc.w	r8, r8, #0
   22f40:	182d      	adds	r5, r5, r0
   22f42:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   22f46:	e9c4 5004 	strd	r5, r0, [r4, #16]
   22f4a:	e7e9      	b.n	22f20 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   22f4c:	1a09      	subs	r1, r1, r0
   22f4e:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   22f52:	459c      	cmp	ip, r3
   22f54:	e9c4 1504 	strd	r1, r5, [r4, #16]
   22f58:	d0e7      	beq.n	22f2a <z_add_timeout+0xa2>
   22f5a:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   22f5c:	2b00      	cmp	r3, #0
   22f5e:	d0e4      	beq.n	22f2a <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   22f60:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   22f64:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   22f68:	4281      	cmp	r1, r0
   22f6a:	eb75 0e07 	sbcs.w	lr, r5, r7
   22f6e:	daed      	bge.n	22f4c <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   22f70:	1a41      	subs	r1, r0, r1
   22f72:	eb67 0505 	sbc.w	r5, r7, r5
   22f76:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   22f7a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22f7c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   22f80:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22f82:	605c      	str	r4, [r3, #4]
	return list->head == list;
   22f84:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f86:	4293      	cmp	r3, r2
   22f88:	d00b      	beq.n	22fa2 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22f8a:	429c      	cmp	r4, r3
   22f8c:	d109      	bne.n	22fa2 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22f8e:	f7ff ff3b 	bl	22e08 <next_timeout>

			if (next_time == 0 ||
   22f92:	b118      	cbz	r0, 22f9c <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   22f94:	4b12      	ldr	r3, [pc, #72]	; (22fe0 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   22f96:	691b      	ldr	r3, [r3, #16]
   22f98:	4283      	cmp	r3, r0
   22f9a:	d002      	beq.n	22fa2 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   22f9c:	2100      	movs	r1, #0
   22f9e:	f7fb fbbb 	bl	1e718 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fa2:	480b      	ldr	r0, [pc, #44]	; (22fd0 <z_add_timeout+0x148>)
   22fa4:	f7fd fefc 	bl	20da0 <z_spin_unlock_valid>
   22fa8:	b940      	cbnz	r0, 22fbc <z_add_timeout+0x134>
   22faa:	490a      	ldr	r1, [pc, #40]	; (22fd4 <z_add_timeout+0x14c>)
   22fac:	4807      	ldr	r0, [pc, #28]	; (22fcc <z_add_timeout+0x144>)
   22fae:	22b9      	movs	r2, #185	; 0xb9
   22fb0:	f003 fefa 	bl	26da8 <assert_print>
   22fb4:	4807      	ldr	r0, [pc, #28]	; (22fd4 <z_add_timeout+0x14c>)
   22fb6:	21b9      	movs	r1, #185	; 0xb9
   22fb8:	f003 feef 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   22fbc:	f386 8811 	msr	BASEPRI, r6
   22fc0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22fc8:	0002c6e0 	.word	0x0002c6e0
   22fcc:	0002a576 	.word	0x0002a576
   22fd0:	20003f9c 	.word	0x20003f9c
   22fd4:	0002a705 	.word	0x0002a705
   22fd8:	200034e0 	.word	0x200034e0
   22fdc:	20000864 	.word	0x20000864
   22fe0:	20003f4c 	.word	0x20003f4c

00022fe4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   22fe4:	b538      	push	{r3, r4, r5, lr}
   22fe6:	4604      	mov	r4, r0
	__asm__ volatile(
   22fe8:	f04f 0340 	mov.w	r3, #64	; 0x40
   22fec:	f3ef 8511 	mrs	r5, BASEPRI
   22ff0:	f383 8812 	msr	BASEPRI_MAX, r3
   22ff4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ff8:	4815      	ldr	r0, [pc, #84]	; (23050 <z_abort_timeout+0x6c>)
   22ffa:	f7fd fec3 	bl	20d84 <z_spin_lock_valid>
   22ffe:	b940      	cbnz	r0, 23012 <z_abort_timeout+0x2e>
   23000:	4914      	ldr	r1, [pc, #80]	; (23054 <z_abort_timeout+0x70>)
   23002:	4815      	ldr	r0, [pc, #84]	; (23058 <z_abort_timeout+0x74>)
   23004:	228e      	movs	r2, #142	; 0x8e
   23006:	f003 fecf 	bl	26da8 <assert_print>
   2300a:	4812      	ldr	r0, [pc, #72]	; (23054 <z_abort_timeout+0x70>)
   2300c:	218e      	movs	r1, #142	; 0x8e
   2300e:	f003 fec4 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   23012:	480f      	ldr	r0, [pc, #60]	; (23050 <z_abort_timeout+0x6c>)
   23014:	f7fd fed4 	bl	20dc0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   23018:	6823      	ldr	r3, [r4, #0]
   2301a:	b1b3      	cbz	r3, 2304a <z_abort_timeout+0x66>
			remove_timeout(to);
   2301c:	4620      	mov	r0, r4
   2301e:	f7ff ff19 	bl	22e54 <remove_timeout>
			ret = 0;
   23022:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23024:	480a      	ldr	r0, [pc, #40]	; (23050 <z_abort_timeout+0x6c>)
   23026:	f7fd febb 	bl	20da0 <z_spin_unlock_valid>
   2302a:	b940      	cbnz	r0, 2303e <z_abort_timeout+0x5a>
   2302c:	4909      	ldr	r1, [pc, #36]	; (23054 <z_abort_timeout+0x70>)
   2302e:	480a      	ldr	r0, [pc, #40]	; (23058 <z_abort_timeout+0x74>)
   23030:	22b9      	movs	r2, #185	; 0xb9
   23032:	f003 feb9 	bl	26da8 <assert_print>
   23036:	4807      	ldr	r0, [pc, #28]	; (23054 <z_abort_timeout+0x70>)
   23038:	21b9      	movs	r1, #185	; 0xb9
   2303a:	f003 feae 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2303e:	f385 8811 	msr	BASEPRI, r5
   23042:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   23046:	4620      	mov	r0, r4
   23048:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2304a:	f06f 0415 	mvn.w	r4, #21
   2304e:	e7e9      	b.n	23024 <z_abort_timeout+0x40>
   23050:	20003f9c 	.word	0x20003f9c
   23054:	0002a705 	.word	0x0002a705
   23058:	0002a576 	.word	0x0002a576

0002305c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2305c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2305e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23062:	f3ef 8511 	mrs	r5, BASEPRI
   23066:	f383 8812 	msr	BASEPRI_MAX, r3
   2306a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2306e:	4813      	ldr	r0, [pc, #76]	; (230bc <z_get_next_timeout_expiry+0x60>)
   23070:	f7fd fe88 	bl	20d84 <z_spin_lock_valid>
   23074:	b940      	cbnz	r0, 23088 <z_get_next_timeout_expiry+0x2c>
   23076:	4912      	ldr	r1, [pc, #72]	; (230c0 <z_get_next_timeout_expiry+0x64>)
   23078:	4812      	ldr	r0, [pc, #72]	; (230c4 <z_get_next_timeout_expiry+0x68>)
   2307a:	228e      	movs	r2, #142	; 0x8e
   2307c:	f003 fe94 	bl	26da8 <assert_print>
   23080:	480f      	ldr	r0, [pc, #60]	; (230c0 <z_get_next_timeout_expiry+0x64>)
   23082:	218e      	movs	r1, #142	; 0x8e
   23084:	f003 fe89 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   23088:	480c      	ldr	r0, [pc, #48]	; (230bc <z_get_next_timeout_expiry+0x60>)
   2308a:	f7fd fe99 	bl	20dc0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2308e:	f7ff febb 	bl	22e08 <next_timeout>
   23092:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23094:	4809      	ldr	r0, [pc, #36]	; (230bc <z_get_next_timeout_expiry+0x60>)
   23096:	f7fd fe83 	bl	20da0 <z_spin_unlock_valid>
   2309a:	b940      	cbnz	r0, 230ae <z_get_next_timeout_expiry+0x52>
   2309c:	4908      	ldr	r1, [pc, #32]	; (230c0 <z_get_next_timeout_expiry+0x64>)
   2309e:	4809      	ldr	r0, [pc, #36]	; (230c4 <z_get_next_timeout_expiry+0x68>)
   230a0:	22b9      	movs	r2, #185	; 0xb9
   230a2:	f003 fe81 	bl	26da8 <assert_print>
   230a6:	4806      	ldr	r0, [pc, #24]	; (230c0 <z_get_next_timeout_expiry+0x64>)
   230a8:	21b9      	movs	r1, #185	; 0xb9
   230aa:	f003 fe76 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   230ae:	f385 8811 	msr	BASEPRI, r5
   230b2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   230b6:	4620      	mov	r0, r4
   230b8:	bd38      	pop	{r3, r4, r5, pc}
   230ba:	bf00      	nop
   230bc:	20003f9c 	.word	0x20003f9c
   230c0:	0002a705 	.word	0x0002a705
   230c4:	0002a576 	.word	0x0002a576

000230c8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   230c8:	b570      	push	{r4, r5, r6, lr}
   230ca:	4604      	mov	r4, r0
   230cc:	460d      	mov	r5, r1
	__asm__ volatile(
   230ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   230d2:	f3ef 8611 	mrs	r6, BASEPRI
   230d6:	f383 8812 	msr	BASEPRI_MAX, r3
   230da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230de:	4816      	ldr	r0, [pc, #88]	; (23138 <z_set_timeout_expiry+0x70>)
   230e0:	f7fd fe50 	bl	20d84 <z_spin_lock_valid>
   230e4:	b940      	cbnz	r0, 230f8 <z_set_timeout_expiry+0x30>
   230e6:	4915      	ldr	r1, [pc, #84]	; (2313c <z_set_timeout_expiry+0x74>)
   230e8:	4815      	ldr	r0, [pc, #84]	; (23140 <z_set_timeout_expiry+0x78>)
   230ea:	228e      	movs	r2, #142	; 0x8e
   230ec:	f003 fe5c 	bl	26da8 <assert_print>
   230f0:	4812      	ldr	r0, [pc, #72]	; (2313c <z_set_timeout_expiry+0x74>)
   230f2:	218e      	movs	r1, #142	; 0x8e
   230f4:	f003 fe51 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   230f8:	480f      	ldr	r0, [pc, #60]	; (23138 <z_set_timeout_expiry+0x70>)
   230fa:	f7fd fe61 	bl	20dc0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   230fe:	f7ff fe83 	bl	22e08 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   23102:	2801      	cmp	r0, #1
   23104:	dd05      	ble.n	23112 <z_set_timeout_expiry+0x4a>
   23106:	42a0      	cmp	r0, r4
   23108:	db03      	blt.n	23112 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2310a:	4629      	mov	r1, r5
   2310c:	4620      	mov	r0, r4
   2310e:	f7fb fb03 	bl	1e718 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23112:	4809      	ldr	r0, [pc, #36]	; (23138 <z_set_timeout_expiry+0x70>)
   23114:	f7fd fe44 	bl	20da0 <z_spin_unlock_valid>
   23118:	b940      	cbnz	r0, 2312c <z_set_timeout_expiry+0x64>
   2311a:	4908      	ldr	r1, [pc, #32]	; (2313c <z_set_timeout_expiry+0x74>)
   2311c:	4808      	ldr	r0, [pc, #32]	; (23140 <z_set_timeout_expiry+0x78>)
   2311e:	22b9      	movs	r2, #185	; 0xb9
   23120:	f003 fe42 	bl	26da8 <assert_print>
   23124:	4805      	ldr	r0, [pc, #20]	; (2313c <z_set_timeout_expiry+0x74>)
   23126:	21b9      	movs	r1, #185	; 0xb9
   23128:	f003 fe37 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2312c:	f386 8811 	msr	BASEPRI, r6
   23130:	f3bf 8f6f 	isb	sy
		}
	}
}
   23134:	bd70      	pop	{r4, r5, r6, pc}
   23136:	bf00      	nop
   23138:	20003f9c 	.word	0x20003f9c
   2313c:	0002a705 	.word	0x0002a705
   23140:	0002a576 	.word	0x0002a576

00023144 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   23144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23148:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2314a:	f7ff f829 	bl	221a0 <z_time_slice>
	__asm__ volatile(
   2314e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23152:	f3ef 8611 	mrs	r6, BASEPRI
   23156:	f383 8812 	msr	BASEPRI_MAX, r3
   2315a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2315e:	4845      	ldr	r0, [pc, #276]	; (23274 <sys_clock_announce+0x130>)
   23160:	f7fd fe10 	bl	20d84 <z_spin_lock_valid>
   23164:	b940      	cbnz	r0, 23178 <sys_clock_announce+0x34>
   23166:	4944      	ldr	r1, [pc, #272]	; (23278 <sys_clock_announce+0x134>)
   23168:	4844      	ldr	r0, [pc, #272]	; (2327c <sys_clock_announce+0x138>)
   2316a:	228e      	movs	r2, #142	; 0x8e
   2316c:	f003 fe1c 	bl	26da8 <assert_print>
   23170:	4841      	ldr	r0, [pc, #260]	; (23278 <sys_clock_announce+0x134>)
   23172:	218e      	movs	r1, #142	; 0x8e
   23174:	f003 fe11 	bl	26d9a <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   23178:	f8df 8104 	ldr.w	r8, [pc, #260]	; 23280 <sys_clock_announce+0x13c>
	z_spin_lock_set_owner(l);
   2317c:	483d      	ldr	r0, [pc, #244]	; (23274 <sys_clock_announce+0x130>)
	return list->head == list;
   2317e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 23284 <sys_clock_announce+0x140>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   23182:	4f41      	ldr	r7, [pc, #260]	; (23288 <sys_clock_announce+0x144>)
   23184:	f7fd fe1c 	bl	20dc0 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   23188:	f8c8 4000 	str.w	r4, [r8]
   2318c:	f8d9 4000 	ldr.w	r4, [r9]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   23190:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23194:	454c      	cmp	r4, r9
		curr_tick += dt;
   23196:	e9d7 2c00 	ldrd	r2, ip, [r7]
   2319a:	ea4f 71e3 	mov.w	r1, r3, asr #31
   2319e:	d00b      	beq.n	231b8 <sys_clock_announce+0x74>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   231a0:	b154      	cbz	r4, 231b8 <sys_clock_announce+0x74>
   231a2:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   231a6:	42ab      	cmp	r3, r5
   231a8:	eb71 0e00 	sbcs.w	lr, r1, r0
   231ac:	da24      	bge.n	231f8 <sys_clock_announce+0xb4>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   231ae:	1aed      	subs	r5, r5, r3
   231b0:	eb60 0001 	sbc.w	r0, r0, r1
   231b4:	e9c4 5004 	strd	r5, r0, [r4, #16]
	}

	curr_tick += announce_remaining;
   231b8:	189b      	adds	r3, r3, r2
   231ba:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   231be:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   231c0:	e9c7 3100 	strd	r3, r1, [r7]
	announce_remaining = 0;
   231c4:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   231c8:	f7ff fe1e 	bl	22e08 <next_timeout>
   231cc:	4621      	mov	r1, r4
   231ce:	f7fb faa3 	bl	1e718 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231d2:	4828      	ldr	r0, [pc, #160]	; (23274 <sys_clock_announce+0x130>)
   231d4:	f7fd fde4 	bl	20da0 <z_spin_unlock_valid>
   231d8:	b940      	cbnz	r0, 231ec <sys_clock_announce+0xa8>
   231da:	4927      	ldr	r1, [pc, #156]	; (23278 <sys_clock_announce+0x134>)
   231dc:	4827      	ldr	r0, [pc, #156]	; (2327c <sys_clock_announce+0x138>)
   231de:	22b9      	movs	r2, #185	; 0xb9
   231e0:	f003 fde2 	bl	26da8 <assert_print>
   231e4:	4824      	ldr	r0, [pc, #144]	; (23278 <sys_clock_announce+0x134>)
   231e6:	21b9      	movs	r1, #185	; 0xb9
   231e8:	f003 fdd7 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   231ec:	f386 8811 	msr	BASEPRI, r6
   231f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   231f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   231f8:	18aa      	adds	r2, r5, r2
   231fa:	eb4c 71e5 	adc.w	r1, ip, r5, asr #31
   231fe:	e9c7 2100 	strd	r2, r1, [r7]
		t->dticks = 0;
   23202:	2300      	movs	r3, #0
   23204:	2200      	movs	r2, #0
		remove_timeout(t);
   23206:	4620      	mov	r0, r4
		t->dticks = 0;
   23208:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   2320c:	f7ff fe22 	bl	22e54 <remove_timeout>
   23210:	4818      	ldr	r0, [pc, #96]	; (23274 <sys_clock_announce+0x130>)
   23212:	f7fd fdc5 	bl	20da0 <z_spin_unlock_valid>
   23216:	b940      	cbnz	r0, 2322a <sys_clock_announce+0xe6>
   23218:	4917      	ldr	r1, [pc, #92]	; (23278 <sys_clock_announce+0x134>)
   2321a:	4818      	ldr	r0, [pc, #96]	; (2327c <sys_clock_announce+0x138>)
   2321c:	22b9      	movs	r2, #185	; 0xb9
   2321e:	f003 fdc3 	bl	26da8 <assert_print>
   23222:	4815      	ldr	r0, [pc, #84]	; (23278 <sys_clock_announce+0x134>)
   23224:	21b9      	movs	r1, #185	; 0xb9
   23226:	f003 fdb8 	bl	26d9a <assert_post_action>
   2322a:	f386 8811 	msr	BASEPRI, r6
   2322e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   23232:	68a3      	ldr	r3, [r4, #8]
   23234:	4620      	mov	r0, r4
   23236:	4798      	blx	r3
	__asm__ volatile(
   23238:	f04f 0340 	mov.w	r3, #64	; 0x40
   2323c:	f3ef 8611 	mrs	r6, BASEPRI
   23240:	f383 8812 	msr	BASEPRI_MAX, r3
   23244:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23248:	480a      	ldr	r0, [pc, #40]	; (23274 <sys_clock_announce+0x130>)
   2324a:	f7fd fd9b 	bl	20d84 <z_spin_lock_valid>
   2324e:	b940      	cbnz	r0, 23262 <sys_clock_announce+0x11e>
   23250:	4909      	ldr	r1, [pc, #36]	; (23278 <sys_clock_announce+0x134>)
   23252:	480a      	ldr	r0, [pc, #40]	; (2327c <sys_clock_announce+0x138>)
   23254:	228e      	movs	r2, #142	; 0x8e
   23256:	f003 fda7 	bl	26da8 <assert_print>
   2325a:	4807      	ldr	r0, [pc, #28]	; (23278 <sys_clock_announce+0x134>)
   2325c:	218e      	movs	r1, #142	; 0x8e
   2325e:	f003 fd9c 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   23262:	4804      	ldr	r0, [pc, #16]	; (23274 <sys_clock_announce+0x130>)
   23264:	f7fd fdac 	bl	20dc0 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   23268:	f8d8 3000 	ldr.w	r3, [r8]
   2326c:	1b5b      	subs	r3, r3, r5
   2326e:	f8c8 3000 	str.w	r3, [r8]
   23272:	e78b      	b.n	2318c <sys_clock_announce+0x48>
   23274:	20003f9c 	.word	0x20003f9c
   23278:	0002a705 	.word	0x0002a705
   2327c:	0002a576 	.word	0x0002a576
   23280:	20003f98 	.word	0x20003f98
   23284:	20000864 	.word	0x20000864
   23288:	200034e0 	.word	0x200034e0

0002328c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2328c:	b570      	push	{r4, r5, r6, lr}
   2328e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23292:	f3ef 8611 	mrs	r6, BASEPRI
   23296:	f383 8812 	msr	BASEPRI_MAX, r3
   2329a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2329e:	4816      	ldr	r0, [pc, #88]	; (232f8 <sys_clock_tick_get+0x6c>)
   232a0:	f7fd fd70 	bl	20d84 <z_spin_lock_valid>
   232a4:	b940      	cbnz	r0, 232b8 <sys_clock_tick_get+0x2c>
   232a6:	4915      	ldr	r1, [pc, #84]	; (232fc <sys_clock_tick_get+0x70>)
   232a8:	4815      	ldr	r0, [pc, #84]	; (23300 <sys_clock_tick_get+0x74>)
   232aa:	228e      	movs	r2, #142	; 0x8e
   232ac:	f003 fd7c 	bl	26da8 <assert_print>
   232b0:	4812      	ldr	r0, [pc, #72]	; (232fc <sys_clock_tick_get+0x70>)
   232b2:	218e      	movs	r1, #142	; 0x8e
   232b4:	f003 fd71 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   232b8:	480f      	ldr	r0, [pc, #60]	; (232f8 <sys_clock_tick_get+0x6c>)
   232ba:	f7fd fd81 	bl	20dc0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   232be:	f7ff fd99 	bl	22df4 <elapsed>
   232c2:	4a10      	ldr	r2, [pc, #64]	; (23304 <sys_clock_tick_get+0x78>)
   232c4:	e9d2 4500 	ldrd	r4, r5, [r2]
   232c8:	1904      	adds	r4, r0, r4
   232ca:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232ce:	480a      	ldr	r0, [pc, #40]	; (232f8 <sys_clock_tick_get+0x6c>)
   232d0:	f7fd fd66 	bl	20da0 <z_spin_unlock_valid>
   232d4:	b940      	cbnz	r0, 232e8 <sys_clock_tick_get+0x5c>
   232d6:	4909      	ldr	r1, [pc, #36]	; (232fc <sys_clock_tick_get+0x70>)
   232d8:	4809      	ldr	r0, [pc, #36]	; (23300 <sys_clock_tick_get+0x74>)
   232da:	22b9      	movs	r2, #185	; 0xb9
   232dc:	f003 fd64 	bl	26da8 <assert_print>
   232e0:	4806      	ldr	r0, [pc, #24]	; (232fc <sys_clock_tick_get+0x70>)
   232e2:	21b9      	movs	r1, #185	; 0xb9
   232e4:	f003 fd59 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   232e8:	f386 8811 	msr	BASEPRI, r6
   232ec:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   232f0:	4620      	mov	r0, r4
   232f2:	4629      	mov	r1, r5
   232f4:	bd70      	pop	{r4, r5, r6, pc}
   232f6:	bf00      	nop
   232f8:	20003f9c 	.word	0x20003f9c
   232fc:	0002a705 	.word	0x0002a705
   23300:	0002a576 	.word	0x0002a576
   23304:	200034e0 	.word	0x200034e0

00023308 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   23308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2330c:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2330e:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 234d8 <register_events+0x1d0>
   23312:	4f72      	ldr	r7, [pc, #456]	; (234dc <register_events+0x1d4>)
   23314:	4d72      	ldr	r5, [pc, #456]	; (234e0 <register_events+0x1d8>)
{
   23316:	9100      	str	r1, [sp, #0]
   23318:	4614      	mov	r4, r2
   2331a:	9301      	str	r3, [sp, #4]
   2331c:	4681      	mov	r9, r0
	int events_registered = 0;
   2331e:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   23320:	9b00      	ldr	r3, [sp, #0]
   23322:	429e      	cmp	r6, r3
   23324:	db03      	blt.n	2332e <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   23326:	4640      	mov	r0, r8
   23328:	b003      	add	sp, #12
   2332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2332e:	f04f 0240 	mov.w	r2, #64	; 0x40
   23332:	f3ef 8b11 	mrs	fp, BASEPRI
   23336:	f382 8812 	msr	BASEPRI_MAX, r2
   2333a:	f3bf 8f6f 	isb	sy
   2333e:	4650      	mov	r0, sl
   23340:	f7fd fd20 	bl	20d84 <z_spin_lock_valid>
   23344:	b940      	cbnz	r0, 23358 <register_events+0x50>
   23346:	4639      	mov	r1, r7
   23348:	4628      	mov	r0, r5
   2334a:	228e      	movs	r2, #142	; 0x8e
   2334c:	f003 fd2c 	bl	26da8 <assert_print>
   23350:	218e      	movs	r1, #142	; 0x8e
   23352:	4638      	mov	r0, r7
   23354:	f003 fd21 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   23358:	4650      	mov	r0, sl
   2335a:	f7fd fd31 	bl	20dc0 <z_spin_lock_set_owner>
	switch (event->type) {
   2335e:	f899 200d 	ldrb.w	r2, [r9, #13]
   23362:	f002 021f 	and.w	r2, r2, #31
   23366:	2a08      	cmp	r2, #8
   23368:	d853      	bhi.n	23412 <register_events+0x10a>
   2336a:	e8df f002 	tbb	[pc, r2]
   2336e:	4431      	.short	0x4431
   23370:	522d5205 	.word	0x522d5205
   23374:	5252      	.short	0x5252
   23376:	4b          	.byte	0x4b
   23377:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   23378:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2337c:	6892      	ldr	r2, [r2, #8]
   2337e:	b33a      	cbz	r2, 233d0 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   23380:	2202      	movs	r2, #2
	event->state |= state;
   23382:	f8d9 100c 	ldr.w	r1, [r9, #12]
   23386:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   2338a:	ea42 020c 	orr.w	r2, r2, ip
	event->poller = NULL;
   2338e:	2000      	movs	r0, #0
	event->state |= state;
   23390:	f362 3152 	bfi	r1, r2, #13, #6
	event->poller = NULL;
   23394:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   23398:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   2339c:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2339e:	4650      	mov	r0, sl
   233a0:	f7fd fcfe 	bl	20da0 <z_spin_unlock_valid>
   233a4:	b940      	cbnz	r0, 233b8 <register_events+0xb0>
   233a6:	4639      	mov	r1, r7
   233a8:	4628      	mov	r0, r5
   233aa:	22b9      	movs	r2, #185	; 0xb9
   233ac:	f003 fcfc 	bl	26da8 <assert_print>
   233b0:	21b9      	movs	r1, #185	; 0xb9
   233b2:	4638      	mov	r0, r7
   233b4:	f003 fcf1 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   233b8:	f38b 8811 	msr	BASEPRI, fp
   233bc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   233c0:	3601      	adds	r6, #1
   233c2:	f109 0914 	add.w	r9, r9, #20
   233c6:	e7ab      	b.n	23320 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   233c8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   233cc:	6812      	ldr	r2, [r2, #0]
   233ce:	bb52      	cbnz	r2, 23426 <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   233d0:	9b01      	ldr	r3, [sp, #4]
   233d2:	2b00      	cmp	r3, #0
   233d4:	d1e3      	bne.n	2339e <register_events+0x96>
   233d6:	7822      	ldrb	r2, [r4, #0]
   233d8:	2a00      	cmp	r2, #0
   233da:	d0e0      	beq.n	2339e <register_events+0x96>
	switch (event->type) {
   233dc:	f899 200d 	ldrb.w	r2, [r9, #13]
   233e0:	f002 021f 	and.w	r2, r2, #31
   233e4:	2a08      	cmp	r2, #8
   233e6:	d86d      	bhi.n	234c4 <register_events+0x1bc>
   233e8:	e8df f002 	tbb	[pc, r2]
   233ec:	6c1f4932 	.word	0x6c1f4932
   233f0:	6c6c6c37 	.word	0x6c6c6c37
   233f4:	5a          	.byte	0x5a
   233f5:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   233f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
   233fa:	6892      	ldr	r2, [r2, #8]
   233fc:	2a00      	cmp	r2, #0
   233fe:	d0e7      	beq.n	233d0 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   23400:	2201      	movs	r2, #1
   23402:	e7be      	b.n	23382 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   23404:	f8d9 2010 	ldr.w	r2, [r9, #16]
   23408:	6a52      	ldr	r2, [r2, #36]	; 0x24
   2340a:	2a00      	cmp	r2, #0
   2340c:	d0e0      	beq.n	233d0 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2340e:	2210      	movs	r2, #16
   23410:	e7b7      	b.n	23382 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   23412:	4628      	mov	r0, r5
   23414:	4933      	ldr	r1, [pc, #204]	; (234e4 <register_events+0x1dc>)
   23416:	225c      	movs	r2, #92	; 0x5c
   23418:	f003 fcc6 	bl	26da8 <assert_print>
   2341c:	4831      	ldr	r0, [pc, #196]	; (234e4 <register_events+0x1dc>)
   2341e:	215c      	movs	r1, #92	; 0x5c
   23420:	f003 fcbb 	bl	26d9a <assert_post_action>
		break;
   23424:	e7d4      	b.n	233d0 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23426:	2204      	movs	r2, #4
   23428:	e7ab      	b.n	23382 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2342a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2342e:	b942      	cbnz	r2, 23442 <register_events+0x13a>
   23430:	492c      	ldr	r1, [pc, #176]	; (234e4 <register_events+0x1dc>)
   23432:	4628      	mov	r0, r5
   23434:	2286      	movs	r2, #134	; 0x86
   23436:	f003 fcb7 	bl	26da8 <assert_print>
   2343a:	482a      	ldr	r0, [pc, #168]	; (234e4 <register_events+0x1dc>)
   2343c:	2186      	movs	r1, #134	; 0x86
   2343e:	f003 fcac 	bl	26d9a <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   23442:	f8d9 0010 	ldr.w	r0, [r9, #16]
   23446:	4622      	mov	r2, r4
   23448:	4649      	mov	r1, r9
   2344a:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2344c:	f006 f8b2 	bl	295b4 <add_event>
	event->poller = poller;
   23450:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   23454:	f108 0801 	add.w	r8, r8, #1
   23458:	e7a1      	b.n	2339e <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2345a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2345e:	b942      	cbnz	r2, 23472 <register_events+0x16a>
   23460:	4920      	ldr	r1, [pc, #128]	; (234e4 <register_events+0x1dc>)
   23462:	4628      	mov	r0, r5
   23464:	228a      	movs	r2, #138	; 0x8a
   23466:	f003 fc9f 	bl	26da8 <assert_print>
   2346a:	481e      	ldr	r0, [pc, #120]	; (234e4 <register_events+0x1dc>)
   2346c:	218a      	movs	r1, #138	; 0x8a
   2346e:	f003 fc94 	bl	26d9a <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   23472:	f8d9 0010 	ldr.w	r0, [r9, #16]
   23476:	4622      	mov	r2, r4
   23478:	4649      	mov	r1, r9
   2347a:	3014      	adds	r0, #20
   2347c:	e7e6      	b.n	2344c <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2347e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   23482:	b942      	cbnz	r2, 23496 <register_events+0x18e>
   23484:	4917      	ldr	r1, [pc, #92]	; (234e4 <register_events+0x1dc>)
   23486:	4628      	mov	r0, r5
   23488:	228e      	movs	r2, #142	; 0x8e
   2348a:	f003 fc8d 	bl	26da8 <assert_print>
   2348e:	4815      	ldr	r0, [pc, #84]	; (234e4 <register_events+0x1dc>)
   23490:	218e      	movs	r1, #142	; 0x8e
   23492:	f003 fc82 	bl	26d9a <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   23496:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2349a:	4622      	mov	r2, r4
   2349c:	4649      	mov	r1, r9
   2349e:	e7d5      	b.n	2344c <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   234a0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   234a4:	b942      	cbnz	r2, 234b8 <register_events+0x1b0>
   234a6:	490f      	ldr	r1, [pc, #60]	; (234e4 <register_events+0x1dc>)
   234a8:	4628      	mov	r0, r5
   234aa:	2292      	movs	r2, #146	; 0x92
   234ac:	f003 fc7c 	bl	26da8 <assert_print>
   234b0:	480c      	ldr	r0, [pc, #48]	; (234e4 <register_events+0x1dc>)
   234b2:	2192      	movs	r1, #146	; 0x92
   234b4:	f003 fc71 	bl	26d9a <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   234b8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   234bc:	4622      	mov	r2, r4
   234be:	4649      	mov	r1, r9
   234c0:	3028      	adds	r0, #40	; 0x28
   234c2:	e7c3      	b.n	2344c <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   234c4:	4628      	mov	r0, r5
   234c6:	4907      	ldr	r1, [pc, #28]	; (234e4 <register_events+0x1dc>)
   234c8:	2299      	movs	r2, #153	; 0x99
   234ca:	f003 fc6d 	bl	26da8 <assert_print>
   234ce:	4805      	ldr	r0, [pc, #20]	; (234e4 <register_events+0x1dc>)
   234d0:	2199      	movs	r1, #153	; 0x99
   234d2:	f003 fc62 	bl	26d9a <assert_post_action>
		break;
   234d6:	e7bb      	b.n	23450 <register_events+0x148>
   234d8:	20003fa0 	.word	0x20003fa0
   234dc:	0002a705 	.word	0x0002a705
   234e0:	0002a576 	.word	0x0002a576
   234e4:	0002c704 	.word	0x0002c704

000234e8 <clear_event_registrations>:
{
   234e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   234ec:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   234ee:	4d45      	ldr	r5, [pc, #276]	; (23604 <clear_event_registrations+0x11c>)
   234f0:	4e45      	ldr	r6, [pc, #276]	; (23608 <clear_event_registrations+0x120>)
   234f2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 2360c <clear_event_registrations+0x124>
{
   234f6:	4690      	mov	r8, r2
	while (num_events--) {
   234f8:	460f      	mov	r7, r1
   234fa:	fb04 0401 	mla	r4, r4, r1, r0
   234fe:	b90f      	cbnz	r7, 23504 <clear_event_registrations+0x1c>
}
   23500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   23504:	2300      	movs	r3, #0
   23506:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2350a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2350e:	f003 031f 	and.w	r3, r3, #31
   23512:	f1a4 0a14 	sub.w	sl, r4, #20
   23516:	2b08      	cmp	r3, #8
   23518:	d83e      	bhi.n	23598 <clear_event_registrations+0xb0>
   2351a:	e8df f003 	tbb	[pc, r3]
   2351e:	2746      	.short	0x2746
   23520:	3d1c3d05 	.word	0x3d1c3d05
   23524:	3d3d      	.short	0x3d3d
   23526:	32          	.byte	0x32
   23527:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   23528:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2352c:	b943      	cbnz	r3, 23540 <clear_event_registrations+0x58>
   2352e:	4629      	mov	r1, r5
   23530:	22a9      	movs	r2, #169	; 0xa9
   23532:	4630      	mov	r0, r6
   23534:	f003 fc38 	bl	26da8 <assert_print>
   23538:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2353a:	4628      	mov	r0, r5
   2353c:	f003 fc2d 	bl	26d9a <assert_post_action>
	return node->next != NULL;
   23540:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23544:	b38b      	cbz	r3, 235aa <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   23546:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   2354a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2354c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2354e:	2300      	movs	r3, #0
	node->prev = NULL;
   23550:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   23554:	e029      	b.n	235aa <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   23556:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2355a:	2b00      	cmp	r3, #0
   2355c:	d1f0      	bne.n	23540 <clear_event_registrations+0x58>
   2355e:	4629      	mov	r1, r5
   23560:	22ad      	movs	r2, #173	; 0xad
   23562:	4630      	mov	r0, r6
   23564:	f003 fc20 	bl	26da8 <assert_print>
   23568:	21ad      	movs	r1, #173	; 0xad
   2356a:	e7e6      	b.n	2353a <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2356c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23570:	2b00      	cmp	r3, #0
   23572:	d1e5      	bne.n	23540 <clear_event_registrations+0x58>
   23574:	4629      	mov	r1, r5
   23576:	22b1      	movs	r2, #177	; 0xb1
   23578:	4630      	mov	r0, r6
   2357a:	f003 fc15 	bl	26da8 <assert_print>
   2357e:	21b1      	movs	r1, #177	; 0xb1
   23580:	e7db      	b.n	2353a <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   23582:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23586:	2b00      	cmp	r3, #0
   23588:	d1da      	bne.n	23540 <clear_event_registrations+0x58>
   2358a:	4629      	mov	r1, r5
   2358c:	22b5      	movs	r2, #181	; 0xb5
   2358e:	4630      	mov	r0, r6
   23590:	f003 fc0a 	bl	26da8 <assert_print>
   23594:	21b5      	movs	r1, #181	; 0xb5
   23596:	e7d0      	b.n	2353a <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   23598:	4629      	mov	r1, r5
   2359a:	4630      	mov	r0, r6
   2359c:	22bc      	movs	r2, #188	; 0xbc
   2359e:	f003 fc03 	bl	26da8 <assert_print>
   235a2:	21bc      	movs	r1, #188	; 0xbc
   235a4:	4628      	mov	r0, r5
   235a6:	f003 fbf8 	bl	26d9a <assert_post_action>
   235aa:	4648      	mov	r0, r9
   235ac:	f7fd fbf8 	bl	20da0 <z_spin_unlock_valid>
   235b0:	b940      	cbnz	r0, 235c4 <clear_event_registrations+0xdc>
   235b2:	4917      	ldr	r1, [pc, #92]	; (23610 <clear_event_registrations+0x128>)
   235b4:	4630      	mov	r0, r6
   235b6:	22b9      	movs	r2, #185	; 0xb9
   235b8:	f003 fbf6 	bl	26da8 <assert_print>
   235bc:	4814      	ldr	r0, [pc, #80]	; (23610 <clear_event_registrations+0x128>)
   235be:	21b9      	movs	r1, #185	; 0xb9
   235c0:	f003 fbeb 	bl	26d9a <assert_post_action>
   235c4:	f388 8811 	msr	BASEPRI, r8
   235c8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   235cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   235d0:	f3ef 8811 	mrs	r8, BASEPRI
   235d4:	f383 8812 	msr	BASEPRI_MAX, r3
   235d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   235dc:	4648      	mov	r0, r9
   235de:	f7fd fbd1 	bl	20d84 <z_spin_lock_valid>
   235e2:	b940      	cbnz	r0, 235f6 <clear_event_registrations+0x10e>
   235e4:	490a      	ldr	r1, [pc, #40]	; (23610 <clear_event_registrations+0x128>)
   235e6:	4630      	mov	r0, r6
   235e8:	228e      	movs	r2, #142	; 0x8e
   235ea:	f003 fbdd 	bl	26da8 <assert_print>
   235ee:	4808      	ldr	r0, [pc, #32]	; (23610 <clear_event_registrations+0x128>)
   235f0:	218e      	movs	r1, #142	; 0x8e
   235f2:	f003 fbd2 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   235f6:	4648      	mov	r0, r9
   235f8:	f7fd fbe2 	bl	20dc0 <z_spin_lock_set_owner>
	return k;
   235fc:	3f01      	subs	r7, #1
   235fe:	4654      	mov	r4, sl
   23600:	e77d      	b.n	234fe <clear_event_registrations+0x16>
   23602:	bf00      	nop
   23604:	0002c704 	.word	0x0002c704
   23608:	0002a576 	.word	0x0002a576
   2360c:	20003fa0 	.word	0x20003fa0
   23610:	0002a705 	.word	0x0002a705

00023614 <k_poll_event_init>:
{
   23614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23616:	4605      	mov	r5, r0
   23618:	460f      	mov	r7, r1
   2361a:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2361c:	4614      	mov	r4, r2
   2361e:	b142      	cbz	r2, 23632 <k_poll_event_init+0x1e>
   23620:	4915      	ldr	r1, [pc, #84]	; (23678 <k_poll_event_init+0x64>)
   23622:	4816      	ldr	r0, [pc, #88]	; (2367c <k_poll_event_init+0x68>)
   23624:	222d      	movs	r2, #45	; 0x2d
   23626:	f003 fbbf 	bl	26da8 <assert_print>
   2362a:	4813      	ldr	r0, [pc, #76]	; (23678 <k_poll_event_init+0x64>)
   2362c:	212d      	movs	r1, #45	; 0x2d
   2362e:	f003 fbb4 	bl	26d9a <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   23632:	2f1f      	cmp	r7, #31
   23634:	d908      	bls.n	23648 <k_poll_event_init+0x34>
   23636:	4910      	ldr	r1, [pc, #64]	; (23678 <k_poll_event_init+0x64>)
   23638:	4810      	ldr	r0, [pc, #64]	; (2367c <k_poll_event_init+0x68>)
   2363a:	222f      	movs	r2, #47	; 0x2f
   2363c:	f003 fbb4 	bl	26da8 <assert_print>
   23640:	480d      	ldr	r0, [pc, #52]	; (23678 <k_poll_event_init+0x64>)
   23642:	212f      	movs	r1, #47	; 0x2f
   23644:	f003 fba9 	bl	26d9a <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   23648:	b946      	cbnz	r6, 2365c <k_poll_event_init+0x48>
   2364a:	490b      	ldr	r1, [pc, #44]	; (23678 <k_poll_event_init+0x64>)
   2364c:	480b      	ldr	r0, [pc, #44]	; (2367c <k_poll_event_init+0x68>)
   2364e:	2230      	movs	r2, #48	; 0x30
   23650:	f003 fbaa 	bl	26da8 <assert_print>
   23654:	4808      	ldr	r0, [pc, #32]	; (23678 <k_poll_event_init+0x64>)
   23656:	2130      	movs	r1, #48	; 0x30
   23658:	f003 fb9f 	bl	26d9a <assert_post_action>
	event->poller = NULL;
   2365c:	2300      	movs	r3, #0
	event->type = type;
   2365e:	04e4      	lsls	r4, r4, #19
   23660:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   23662:	60ab      	str	r3, [r5, #8]
	event->type = type;
   23664:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   23668:	7b2b      	ldrb	r3, [r5, #12]
   2366a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   2366e:	433c      	orrs	r4, r7
   23670:	431c      	orrs	r4, r3
	event->obj = obj;
   23672:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   23676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23678:	0002c704 	.word	0x0002c704
   2367c:	0002a576 	.word	0x0002a576

00023680 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   23680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23684:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   23686:	4b63      	ldr	r3, [pc, #396]	; (23814 <z_impl_k_poll+0x194>)
   23688:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   2368a:	2301      	movs	r3, #1
{
   2368c:	4604      	mov	r4, r0
   2368e:	4688      	mov	r8, r1
   23690:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   23692:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   23696:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2369a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   2369e:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   236a2:	b153      	cbz	r3, 236ba <z_impl_k_poll+0x3a>
   236a4:	495c      	ldr	r1, [pc, #368]	; (23818 <z_impl_k_poll+0x198>)
   236a6:	485d      	ldr	r0, [pc, #372]	; (2381c <z_impl_k_poll+0x19c>)
   236a8:	f44f 728d 	mov.w	r2, #282	; 0x11a
   236ac:	f003 fb7c 	bl	26da8 <assert_print>
   236b0:	4859      	ldr	r0, [pc, #356]	; (23818 <z_impl_k_poll+0x198>)
   236b2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   236b6:	f003 fb70 	bl	26d9a <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   236ba:	b954      	cbnz	r4, 236d2 <z_impl_k_poll+0x52>
   236bc:	4956      	ldr	r1, [pc, #344]	; (23818 <z_impl_k_poll+0x198>)
   236be:	4857      	ldr	r0, [pc, #348]	; (2381c <z_impl_k_poll+0x19c>)
   236c0:	f240 121b 	movw	r2, #283	; 0x11b
   236c4:	f003 fb70 	bl	26da8 <assert_print>
   236c8:	4853      	ldr	r0, [pc, #332]	; (23818 <z_impl_k_poll+0x198>)
   236ca:	f240 111b 	movw	r1, #283	; 0x11b
   236ce:	f003 fb64 	bl	26d9a <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   236d2:	f1b8 0f00 	cmp.w	r8, #0
   236d6:	da0a      	bge.n	236ee <z_impl_k_poll+0x6e>
   236d8:	494f      	ldr	r1, [pc, #316]	; (23818 <z_impl_k_poll+0x198>)
   236da:	4850      	ldr	r0, [pc, #320]	; (2381c <z_impl_k_poll+0x19c>)
   236dc:	f44f 728e 	mov.w	r2, #284	; 0x11c
   236e0:	f003 fb62 	bl	26da8 <assert_print>
   236e4:	484c      	ldr	r0, [pc, #304]	; (23818 <z_impl_k_poll+0x198>)
   236e6:	f44f 718e 	mov.w	r1, #284	; 0x11c
   236ea:	f003 fb56 	bl	26d9a <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   236ee:	ea56 0305 	orrs.w	r3, r6, r5
   236f2:	bf0c      	ite	eq
   236f4:	2301      	moveq	r3, #1
   236f6:	2300      	movne	r3, #0
   236f8:	4641      	mov	r1, r8
   236fa:	464a      	mov	r2, r9
   236fc:	4620      	mov	r0, r4
   236fe:	f7ff fe03 	bl	23308 <register_events>
   23702:	4680      	mov	r8, r0
   23704:	f04f 0340 	mov.w	r3, #64	; 0x40
   23708:	f3ef 8911 	mrs	r9, BASEPRI
   2370c:	f383 8812 	msr	BASEPRI_MAX, r3
   23710:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23714:	4842      	ldr	r0, [pc, #264]	; (23820 <z_impl_k_poll+0x1a0>)
   23716:	f7fd fb35 	bl	20d84 <z_spin_lock_valid>
   2371a:	b940      	cbnz	r0, 2372e <z_impl_k_poll+0xae>
   2371c:	4941      	ldr	r1, [pc, #260]	; (23824 <z_impl_k_poll+0x1a4>)
   2371e:	483f      	ldr	r0, [pc, #252]	; (2381c <z_impl_k_poll+0x19c>)
   23720:	228e      	movs	r2, #142	; 0x8e
   23722:	f003 fb41 	bl	26da8 <assert_print>
   23726:	483f      	ldr	r0, [pc, #252]	; (23824 <z_impl_k_poll+0x1a4>)
   23728:	218e      	movs	r1, #142	; 0x8e
   2372a:	f003 fb36 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   2372e:	483c      	ldr	r0, [pc, #240]	; (23820 <z_impl_k_poll+0x1a0>)
   23730:	f7fd fb46 	bl	20dc0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23734:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   23738:	b9d3      	cbnz	r3, 23770 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   2373a:	4620      	mov	r0, r4
   2373c:	464a      	mov	r2, r9
   2373e:	4641      	mov	r1, r8
   23740:	f7ff fed2 	bl	234e8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23744:	4836      	ldr	r0, [pc, #216]	; (23820 <z_impl_k_poll+0x1a0>)
   23746:	f7fd fb2b 	bl	20da0 <z_spin_unlock_valid>
   2374a:	b940      	cbnz	r0, 2375e <z_impl_k_poll+0xde>
   2374c:	4935      	ldr	r1, [pc, #212]	; (23824 <z_impl_k_poll+0x1a4>)
   2374e:	4833      	ldr	r0, [pc, #204]	; (2381c <z_impl_k_poll+0x19c>)
   23750:	22b9      	movs	r2, #185	; 0xb9
   23752:	f003 fb29 	bl	26da8 <assert_print>
   23756:	4833      	ldr	r0, [pc, #204]	; (23824 <z_impl_k_poll+0x1a4>)
   23758:	21b9      	movs	r1, #185	; 0xb9
   2375a:	f003 fb1e 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   2375e:	f389 8811 	msr	BASEPRI, r9
   23762:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   23766:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23768:	4628      	mov	r0, r5
   2376a:	b003      	add	sp, #12
   2376c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   23770:	2300      	movs	r3, #0
   23772:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23776:	ea56 0305 	orrs.w	r3, r6, r5
   2377a:	d113      	bne.n	237a4 <z_impl_k_poll+0x124>
   2377c:	4828      	ldr	r0, [pc, #160]	; (23820 <z_impl_k_poll+0x1a0>)
   2377e:	f7fd fb0f 	bl	20da0 <z_spin_unlock_valid>
   23782:	b940      	cbnz	r0, 23796 <z_impl_k_poll+0x116>
   23784:	4927      	ldr	r1, [pc, #156]	; (23824 <z_impl_k_poll+0x1a4>)
   23786:	4825      	ldr	r0, [pc, #148]	; (2381c <z_impl_k_poll+0x19c>)
   23788:	22b9      	movs	r2, #185	; 0xb9
   2378a:	f003 fb0d 	bl	26da8 <assert_print>
   2378e:	4825      	ldr	r0, [pc, #148]	; (23824 <z_impl_k_poll+0x1a4>)
   23790:	21b9      	movs	r1, #185	; 0xb9
   23792:	f003 fb02 	bl	26d9a <assert_post_action>
   23796:	f389 8811 	msr	BASEPRI, r9
   2379a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2379e:	f06f 050a 	mvn.w	r5, #10
   237a2:	e7e1      	b.n	23768 <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   237a4:	e9cd 6500 	strd	r6, r5, [sp]
   237a8:	4a1f      	ldr	r2, [pc, #124]	; (23828 <z_impl_k_poll+0x1a8>)
   237aa:	481d      	ldr	r0, [pc, #116]	; (23820 <z_impl_k_poll+0x1a0>)
   237ac:	4649      	mov	r1, r9
   237ae:	f7fe ff0b 	bl	225c8 <z_pend_curr>
   237b2:	4605      	mov	r5, r0
	__asm__ volatile(
   237b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   237b8:	f3ef 8611 	mrs	r6, BASEPRI
   237bc:	f383 8812 	msr	BASEPRI_MAX, r3
   237c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237c4:	4816      	ldr	r0, [pc, #88]	; (23820 <z_impl_k_poll+0x1a0>)
   237c6:	f7fd fadd 	bl	20d84 <z_spin_lock_valid>
   237ca:	b940      	cbnz	r0, 237de <z_impl_k_poll+0x15e>
   237cc:	4915      	ldr	r1, [pc, #84]	; (23824 <z_impl_k_poll+0x1a4>)
   237ce:	4813      	ldr	r0, [pc, #76]	; (2381c <z_impl_k_poll+0x19c>)
   237d0:	228e      	movs	r2, #142	; 0x8e
   237d2:	f003 fae9 	bl	26da8 <assert_print>
   237d6:	4813      	ldr	r0, [pc, #76]	; (23824 <z_impl_k_poll+0x1a4>)
   237d8:	218e      	movs	r1, #142	; 0x8e
   237da:	f003 fade 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   237de:	4810      	ldr	r0, [pc, #64]	; (23820 <z_impl_k_poll+0x1a0>)
   237e0:	f7fd faee 	bl	20dc0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   237e4:	4620      	mov	r0, r4
   237e6:	4632      	mov	r2, r6
   237e8:	4641      	mov	r1, r8
   237ea:	f7ff fe7d 	bl	234e8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237ee:	480c      	ldr	r0, [pc, #48]	; (23820 <z_impl_k_poll+0x1a0>)
   237f0:	f7fd fad6 	bl	20da0 <z_spin_unlock_valid>
   237f4:	b940      	cbnz	r0, 23808 <z_impl_k_poll+0x188>
   237f6:	490b      	ldr	r1, [pc, #44]	; (23824 <z_impl_k_poll+0x1a4>)
   237f8:	4808      	ldr	r0, [pc, #32]	; (2381c <z_impl_k_poll+0x19c>)
   237fa:	22b9      	movs	r2, #185	; 0xb9
   237fc:	f003 fad4 	bl	26da8 <assert_print>
   23800:	4808      	ldr	r0, [pc, #32]	; (23824 <z_impl_k_poll+0x1a4>)
   23802:	21b9      	movs	r1, #185	; 0xb9
   23804:	f003 fac9 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   23808:	f386 8811 	msr	BASEPRI, r6
   2380c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   23810:	e7aa      	b.n	23768 <z_impl_k_poll+0xe8>
   23812:	bf00      	nop
   23814:	20003f4c 	.word	0x20003f4c
   23818:	0002c704 	.word	0x0002c704
   2381c:	0002a576 	.word	0x0002a576
   23820:	20003fa0 	.word	0x20003fa0
   23824:	0002a705 	.word	0x0002a705
   23828:	2000086c 	.word	0x2000086c

0002382c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2382c:	b570      	push	{r4, r5, r6, lr}
   2382e:	4604      	mov	r4, r0
   23830:	460d      	mov	r5, r1
	__asm__ volatile(
   23832:	f04f 0340 	mov.w	r3, #64	; 0x40
   23836:	f3ef 8611 	mrs	r6, BASEPRI
   2383a:	f383 8812 	msr	BASEPRI_MAX, r3
   2383e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23842:	481c      	ldr	r0, [pc, #112]	; (238b4 <z_impl_k_poll_signal_raise+0x88>)
   23844:	f7fd fa9e 	bl	20d84 <z_spin_lock_valid>
   23848:	b940      	cbnz	r0, 2385c <z_impl_k_poll_signal_raise+0x30>
   2384a:	491b      	ldr	r1, [pc, #108]	; (238b8 <z_impl_k_poll_signal_raise+0x8c>)
   2384c:	481b      	ldr	r0, [pc, #108]	; (238bc <z_impl_k_poll_signal_raise+0x90>)
   2384e:	228e      	movs	r2, #142	; 0x8e
   23850:	f003 faaa 	bl	26da8 <assert_print>
   23854:	4818      	ldr	r0, [pc, #96]	; (238b8 <z_impl_k_poll_signal_raise+0x8c>)
   23856:	218e      	movs	r1, #142	; 0x8e
   23858:	f003 fa9f 	bl	26d9a <assert_post_action>
	z_spin_lock_set_owner(l);
   2385c:	4815      	ldr	r0, [pc, #84]	; (238b4 <z_impl_k_poll_signal_raise+0x88>)
   2385e:	f7fd faaf 	bl	20dc0 <z_spin_lock_set_owner>
	return list->head == list;
   23862:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   23864:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   23866:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23868:	4284      	cmp	r4, r0
   2386a:	60a1      	str	r1, [r4, #8]
   2386c:	d112      	bne.n	23894 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2386e:	4811      	ldr	r0, [pc, #68]	; (238b4 <z_impl_k_poll_signal_raise+0x88>)
   23870:	f7fd fa96 	bl	20da0 <z_spin_unlock_valid>
   23874:	b940      	cbnz	r0, 23888 <z_impl_k_poll_signal_raise+0x5c>
   23876:	4910      	ldr	r1, [pc, #64]	; (238b8 <z_impl_k_poll_signal_raise+0x8c>)
   23878:	4810      	ldr	r0, [pc, #64]	; (238bc <z_impl_k_poll_signal_raise+0x90>)
   2387a:	22b9      	movs	r2, #185	; 0xb9
   2387c:	f003 fa94 	bl	26da8 <assert_print>
   23880:	480d      	ldr	r0, [pc, #52]	; (238b8 <z_impl_k_poll_signal_raise+0x8c>)
   23882:	21b9      	movs	r1, #185	; 0xb9
   23884:	f003 fa89 	bl	26d9a <assert_post_action>
	__asm__ volatile(
   23888:	f386 8811 	msr	BASEPRI, r6
   2388c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   23890:	2400      	movs	r4, #0
   23892:	e00d      	b.n	238b0 <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   23894:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23898:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2389a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2389c:	2300      	movs	r3, #0
	node->prev = NULL;
   2389e:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   238a2:	f005 feb6 	bl	29612 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   238a6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   238a8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   238aa:	4802      	ldr	r0, [pc, #8]	; (238b4 <z_impl_k_poll_signal_raise+0x88>)
   238ac:	f7fe faf8 	bl	21ea0 <z_reschedule>
	return rc;
}
   238b0:	4620      	mov	r0, r4
   238b2:	bd70      	pop	{r4, r5, r6, pc}
   238b4:	20003fa0 	.word	0x20003fa0
   238b8:	0002a705 	.word	0x0002a705
   238bc:	0002a576 	.word	0x0002a576

000238c0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   238c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   238c2:	4605      	mov	r5, r0
   238c4:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   238c6:	f005 fd48 	bl	2935a <k_is_in_isr>
   238ca:	b978      	cbnz	r0, 238ec <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   238cc:	4b11      	ldr	r3, [pc, #68]	; (23914 <z_thread_aligned_alloc+0x54>)
   238ce:	689b      	ldr	r3, [r3, #8]
   238d0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   238d2:	b1e4      	cbz	r4, 2390e <z_thread_aligned_alloc+0x4e>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   238d4:	1d32      	adds	r2, r6, #4
   238d6:	d209      	bcs.n	238ec <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   238d8:	2000      	movs	r0, #0
   238da:	2100      	movs	r1, #0
   238dc:	e9cd 0100 	strd	r0, r1, [sp]
   238e0:	f045 0104 	orr.w	r1, r5, #4
   238e4:	4620      	mov	r0, r4
   238e6:	f7fc ff89 	bl	207fc <k_heap_aligned_alloc>
	if (mem == NULL) {
   238ea:	b908      	cbnz	r0, 238f0 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   238ec:	2400      	movs	r4, #0
	}

	return ret;
   238ee:	e00e      	b.n	2390e <z_thread_aligned_alloc+0x4e>
	*heap_ref = heap;
   238f0:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   238f2:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   238f4:	b15d      	cbz	r5, 2390e <z_thread_aligned_alloc+0x4e>
   238f6:	3d01      	subs	r5, #1
   238f8:	422c      	tst	r4, r5
   238fa:	d008      	beq.n	2390e <z_thread_aligned_alloc+0x4e>
   238fc:	4906      	ldr	r1, [pc, #24]	; (23918 <z_thread_aligned_alloc+0x58>)
   238fe:	4807      	ldr	r0, [pc, #28]	; (2391c <z_thread_aligned_alloc+0x5c>)
   23900:	2225      	movs	r2, #37	; 0x25
   23902:	f003 fa51 	bl	26da8 <assert_print>
   23906:	4804      	ldr	r0, [pc, #16]	; (23918 <z_thread_aligned_alloc+0x58>)
   23908:	2125      	movs	r1, #37	; 0x25
   2390a:	f003 fa46 	bl	26d9a <assert_post_action>
}
   2390e:	4620      	mov	r0, r4
   23910:	b002      	add	sp, #8
   23912:	bd70      	pop	{r4, r5, r6, pc}
   23914:	20003f4c 	.word	0x20003f4c
   23918:	0002c725 	.word	0x0002c725
   2391c:	0002a576 	.word	0x0002a576

00023920 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   23920:	4a02      	ldr	r2, [pc, #8]	; (2392c <boot_banner+0xc>)
   23922:	4903      	ldr	r1, [pc, #12]	; (23930 <boot_banner+0x10>)
   23924:	4803      	ldr	r0, [pc, #12]	; (23934 <boot_banner+0x14>)
   23926:	f003 b84e 	b.w	269c6 <printk>
   2392a:	bf00      	nop
   2392c:	0002c50a 	.word	0x0002c50a
   23930:	0002c749 	.word	0x0002c749
   23934:	0002c758 	.word	0x0002c758

00023938 <ocrypto_ecdh_p256_public_key>:
   23938:	b530      	push	{r4, r5, lr}
   2393a:	b099      	sub	sp, #100	; 0x64
   2393c:	4605      	mov	r5, r0
   2393e:	4668      	mov	r0, sp
   23940:	f000 f828 	bl	23994 <ocrypto_sc_p256_from32bytes>
   23944:	4669      	mov	r1, sp
   23946:	4604      	mov	r4, r0
   23948:	a808      	add	r0, sp, #32
   2394a:	f000 fa53 	bl	23df4 <ocrypto_curve_p256_scalarmult_base>
   2394e:	a908      	add	r1, sp, #32
   23950:	4304      	orrs	r4, r0
   23952:	4628      	mov	r0, r5
   23954:	f000 f98a 	bl	23c6c <ocrypto_curve_p256_to64bytes>
   23958:	4620      	mov	r0, r4
   2395a:	b019      	add	sp, #100	; 0x64
   2395c:	bd30      	pop	{r4, r5, pc}
   2395e:	bf00      	nop

00023960 <ocrypto_ecdh_p256_common_secret>:
   23960:	b570      	push	{r4, r5, r6, lr}
   23962:	b098      	sub	sp, #96	; 0x60
   23964:	4605      	mov	r5, r0
   23966:	4668      	mov	r0, sp
   23968:	4616      	mov	r6, r2
   2396a:	f000 f813 	bl	23994 <ocrypto_sc_p256_from32bytes>
   2396e:	4631      	mov	r1, r6
   23970:	4604      	mov	r4, r0
   23972:	a808      	add	r0, sp, #32
   23974:	f000 f946 	bl	23c04 <ocrypto_curve_p256_from64bytes>
   23978:	a908      	add	r1, sp, #32
   2397a:	466a      	mov	r2, sp
   2397c:	4304      	orrs	r4, r0
   2397e:	4608      	mov	r0, r1
   23980:	f000 f982 	bl	23c88 <ocrypto_curve_p256_scalarmult>
   23984:	a908      	add	r1, sp, #32
   23986:	4304      	orrs	r4, r0
   23988:	4628      	mov	r0, r5
   2398a:	f000 f96d 	bl	23c68 <ocrypto_curve_p256_to32bytes>
   2398e:	4620      	mov	r0, r4
   23990:	b018      	add	sp, #96	; 0x60
   23992:	bd70      	pop	{r4, r5, r6, pc}

00023994 <ocrypto_sc_p256_from32bytes>:
   23994:	b570      	push	{r4, r5, r6, lr}
   23996:	680b      	ldr	r3, [r1, #0]
   23998:	4e12      	ldr	r6, [pc, #72]	; (239e4 <ocrypto_sc_p256_from32bytes+0x50>)
   2399a:	ba1b      	rev	r3, r3
   2399c:	61c3      	str	r3, [r0, #28]
   2399e:	684b      	ldr	r3, [r1, #4]
   239a0:	ba1b      	rev	r3, r3
   239a2:	6183      	str	r3, [r0, #24]
   239a4:	688b      	ldr	r3, [r1, #8]
   239a6:	ba1b      	rev	r3, r3
   239a8:	6143      	str	r3, [r0, #20]
   239aa:	68cb      	ldr	r3, [r1, #12]
   239ac:	ba1b      	rev	r3, r3
   239ae:	6103      	str	r3, [r0, #16]
   239b0:	690b      	ldr	r3, [r1, #16]
   239b2:	ba1b      	rev	r3, r3
   239b4:	60c3      	str	r3, [r0, #12]
   239b6:	694b      	ldr	r3, [r1, #20]
   239b8:	ba1b      	rev	r3, r3
   239ba:	6083      	str	r3, [r0, #8]
   239bc:	698b      	ldr	r3, [r1, #24]
   239be:	ba1b      	rev	r3, r3
   239c0:	6043      	str	r3, [r0, #4]
   239c2:	69cb      	ldr	r3, [r1, #28]
   239c4:	ba1b      	rev	r3, r3
   239c6:	4632      	mov	r2, r6
   239c8:	6003      	str	r3, [r0, #0]
   239ca:	4601      	mov	r1, r0
   239cc:	4604      	mov	r4, r0
   239ce:	f7dc fbd1 	bl	174 <ocrypto_bigint_sub256>
   239d2:	4631      	mov	r1, r6
   239d4:	4605      	mov	r5, r0
   239d6:	4602      	mov	r2, r0
   239d8:	4620      	mov	r0, r4
   239da:	f7dc fbeb 	bl	1b4 <ocrypto_bigint_cadd256>
   239de:	1e68      	subs	r0, r5, #1
   239e0:	bd70      	pop	{r4, r5, r6, pc}
   239e2:	bf00      	nop
   239e4:	0002a148 	.word	0x0002a148

000239e8 <p256_zdblu>:
   239e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239ec:	b088      	sub	sp, #32
   239ee:	460c      	mov	r4, r1
   239f0:	4606      	mov	r6, r0
   239f2:	f102 0120 	add.w	r1, r2, #32
   239f6:	4668      	mov	r0, sp
   239f8:	f106 0720 	add.w	r7, r6, #32
   239fc:	4690      	mov	r8, r2
   239fe:	f7dc fec3 	bl	788 <ocrypto_mod_p256_sqr>
   23a02:	466a      	mov	r2, sp
   23a04:	4669      	mov	r1, sp
   23a06:	4668      	mov	r0, sp
   23a08:	f7dc fdd0 	bl	5ac <ocrypto_mod_p256_add>
   23a0c:	4669      	mov	r1, sp
   23a0e:	4638      	mov	r0, r7
   23a10:	f7dc feba 	bl	788 <ocrypto_mod_p256_sqr>
   23a14:	463a      	mov	r2, r7
   23a16:	4639      	mov	r1, r7
   23a18:	4638      	mov	r0, r7
   23a1a:	f104 0520 	add.w	r5, r4, #32
   23a1e:	f7dc fdc5 	bl	5ac <ocrypto_mod_p256_add>
   23a22:	466a      	mov	r2, sp
   23a24:	4669      	mov	r1, sp
   23a26:	4668      	mov	r0, sp
   23a28:	f7dc fdc0 	bl	5ac <ocrypto_mod_p256_add>
   23a2c:	4641      	mov	r1, r8
   23a2e:	4628      	mov	r0, r5
   23a30:	f7dc feaa 	bl	788 <ocrypto_mod_p256_sqr>
   23a34:	466a      	mov	r2, sp
   23a36:	4641      	mov	r1, r8
   23a38:	4630      	mov	r0, r6
   23a3a:	f7dc fe8d 	bl	758 <ocrypto_mod_p256_mul>
   23a3e:	462a      	mov	r2, r5
   23a40:	4629      	mov	r1, r5
   23a42:	4668      	mov	r0, sp
   23a44:	f7dc fdb2 	bl	5ac <ocrypto_mod_p256_add>
   23a48:	462a      	mov	r2, r5
   23a4a:	4669      	mov	r1, sp
   23a4c:	4668      	mov	r0, sp
   23a4e:	f7dc fdad 	bl	5ac <ocrypto_mod_p256_add>
   23a52:	4a12      	ldr	r2, [pc, #72]	; (23a9c <p256_zdblu+0xb4>)
   23a54:	4669      	mov	r1, sp
   23a56:	4668      	mov	r0, sp
   23a58:	f7dc fda8 	bl	5ac <ocrypto_mod_p256_add>
   23a5c:	4669      	mov	r1, sp
   23a5e:	4620      	mov	r0, r4
   23a60:	f7dc fe92 	bl	788 <ocrypto_mod_p256_sqr>
   23a64:	4632      	mov	r2, r6
   23a66:	4621      	mov	r1, r4
   23a68:	4620      	mov	r0, r4
   23a6a:	f7dc fddd 	bl	628 <ocrypto_mod_p256_sub>
   23a6e:	4632      	mov	r2, r6
   23a70:	4621      	mov	r1, r4
   23a72:	4620      	mov	r0, r4
   23a74:	f7dc fdd8 	bl	628 <ocrypto_mod_p256_sub>
   23a78:	4622      	mov	r2, r4
   23a7a:	4631      	mov	r1, r6
   23a7c:	4628      	mov	r0, r5
   23a7e:	f7dc fdd3 	bl	628 <ocrypto_mod_p256_sub>
   23a82:	466a      	mov	r2, sp
   23a84:	4629      	mov	r1, r5
   23a86:	4628      	mov	r0, r5
   23a88:	f7dc fe66 	bl	758 <ocrypto_mod_p256_mul>
   23a8c:	463a      	mov	r2, r7
   23a8e:	4629      	mov	r1, r5
   23a90:	4628      	mov	r0, r5
   23a92:	f7dc fdc9 	bl	628 <ocrypto_mod_p256_sub>
   23a96:	b008      	add	sp, #32
   23a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23a9c:	0002a1e8 	.word	0x0002a1e8

00023aa0 <p256_zaddc>:
   23aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   23aa2:	b099      	sub	sp, #100	; 0x64
   23aa4:	4604      	mov	r4, r0
   23aa6:	460d      	mov	r5, r1
   23aa8:	460a      	mov	r2, r1
   23aaa:	4601      	mov	r1, r0
   23aac:	4668      	mov	r0, sp
   23aae:	f7dc fdbb 	bl	628 <ocrypto_mod_p256_sub>
   23ab2:	4669      	mov	r1, sp
   23ab4:	4668      	mov	r0, sp
   23ab6:	f7dc fe67 	bl	788 <ocrypto_mod_p256_sqr>
   23aba:	466a      	mov	r2, sp
   23abc:	4621      	mov	r1, r4
   23abe:	a808      	add	r0, sp, #32
   23ac0:	f105 0620 	add.w	r6, r5, #32
   23ac4:	f104 0720 	add.w	r7, r4, #32
   23ac8:	f7dc fe46 	bl	758 <ocrypto_mod_p256_mul>
   23acc:	466a      	mov	r2, sp
   23ace:	4629      	mov	r1, r5
   23ad0:	4668      	mov	r0, sp
   23ad2:	f7dc fe41 	bl	758 <ocrypto_mod_p256_mul>
   23ad6:	4632      	mov	r2, r6
   23ad8:	4639      	mov	r1, r7
   23ada:	a810      	add	r0, sp, #64	; 0x40
   23adc:	f7dc fd66 	bl	5ac <ocrypto_mod_p256_add>
   23ae0:	4632      	mov	r2, r6
   23ae2:	4639      	mov	r1, r7
   23ae4:	4630      	mov	r0, r6
   23ae6:	f7dc fd9f 	bl	628 <ocrypto_mod_p256_sub>
   23aea:	4631      	mov	r1, r6
   23aec:	4628      	mov	r0, r5
   23aee:	f7dc fe4b 	bl	788 <ocrypto_mod_p256_sqr>
   23af2:	466a      	mov	r2, sp
   23af4:	a908      	add	r1, sp, #32
   23af6:	4620      	mov	r0, r4
   23af8:	f7dc fd58 	bl	5ac <ocrypto_mod_p256_add>
   23afc:	4622      	mov	r2, r4
   23afe:	4629      	mov	r1, r5
   23b00:	4628      	mov	r0, r5
   23b02:	f7dc fd91 	bl	628 <ocrypto_mod_p256_sub>
   23b06:	466a      	mov	r2, sp
   23b08:	a908      	add	r1, sp, #32
   23b0a:	4668      	mov	r0, sp
   23b0c:	f7dc fd8c 	bl	628 <ocrypto_mod_p256_sub>
   23b10:	466a      	mov	r2, sp
   23b12:	4639      	mov	r1, r7
   23b14:	4638      	mov	r0, r7
   23b16:	f7dc fe1f 	bl	758 <ocrypto_mod_p256_mul>
   23b1a:	462a      	mov	r2, r5
   23b1c:	a908      	add	r1, sp, #32
   23b1e:	4668      	mov	r0, sp
   23b20:	f7dc fd82 	bl	628 <ocrypto_mod_p256_sub>
   23b24:	466a      	mov	r2, sp
   23b26:	4631      	mov	r1, r6
   23b28:	4630      	mov	r0, r6
   23b2a:	f7dc fe15 	bl	758 <ocrypto_mod_p256_mul>
   23b2e:	463a      	mov	r2, r7
   23b30:	4631      	mov	r1, r6
   23b32:	4630      	mov	r0, r6
   23b34:	f7dc fd78 	bl	628 <ocrypto_mod_p256_sub>
   23b38:	a910      	add	r1, sp, #64	; 0x40
   23b3a:	4668      	mov	r0, sp
   23b3c:	f7dc fe24 	bl	788 <ocrypto_mod_p256_sqr>
   23b40:	4622      	mov	r2, r4
   23b42:	4669      	mov	r1, sp
   23b44:	4620      	mov	r0, r4
   23b46:	f7dc fd6f 	bl	628 <ocrypto_mod_p256_sub>
   23b4a:	a908      	add	r1, sp, #32
   23b4c:	4622      	mov	r2, r4
   23b4e:	4608      	mov	r0, r1
   23b50:	f7dc fd6a 	bl	628 <ocrypto_mod_p256_sub>
   23b54:	a910      	add	r1, sp, #64	; 0x40
   23b56:	aa08      	add	r2, sp, #32
   23b58:	4608      	mov	r0, r1
   23b5a:	f7dc fdfd 	bl	758 <ocrypto_mod_p256_mul>
   23b5e:	463a      	mov	r2, r7
   23b60:	a910      	add	r1, sp, #64	; 0x40
   23b62:	4638      	mov	r0, r7
   23b64:	f7dc fd60 	bl	628 <ocrypto_mod_p256_sub>
   23b68:	b019      	add	sp, #100	; 0x64
   23b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023b6c <p256_zaddu>:
   23b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b70:	b088      	sub	sp, #32
   23b72:	460c      	mov	r4, r1
   23b74:	4605      	mov	r5, r0
   23b76:	4690      	mov	r8, r2
   23b78:	460a      	mov	r2, r1
   23b7a:	4601      	mov	r1, r0
   23b7c:	4668      	mov	r0, sp
   23b7e:	f7dc fd53 	bl	628 <ocrypto_mod_p256_sub>
   23b82:	4669      	mov	r1, sp
   23b84:	4668      	mov	r0, sp
   23b86:	f7dc fdff 	bl	788 <ocrypto_mod_p256_sqr>
   23b8a:	466a      	mov	r2, sp
   23b8c:	4629      	mov	r1, r5
   23b8e:	4628      	mov	r0, r5
   23b90:	f104 0620 	add.w	r6, r4, #32
   23b94:	f7dc fde0 	bl	758 <ocrypto_mod_p256_mul>
   23b98:	f105 0720 	add.w	r7, r5, #32
   23b9c:	466a      	mov	r2, sp
   23b9e:	4621      	mov	r1, r4
   23ba0:	4668      	mov	r0, sp
   23ba2:	f7dc fdd9 	bl	758 <ocrypto_mod_p256_mul>
   23ba6:	4632      	mov	r2, r6
   23ba8:	4639      	mov	r1, r7
   23baa:	4630      	mov	r0, r6
   23bac:	f7dc fd3c 	bl	628 <ocrypto_mod_p256_sub>
   23bb0:	4631      	mov	r1, r6
   23bb2:	4620      	mov	r0, r4
   23bb4:	f7dc fde8 	bl	788 <ocrypto_mod_p256_sqr>
   23bb8:	462a      	mov	r2, r5
   23bba:	4621      	mov	r1, r4
   23bbc:	4620      	mov	r0, r4
   23bbe:	f7dc fd33 	bl	628 <ocrypto_mod_p256_sub>
   23bc2:	466a      	mov	r2, sp
   23bc4:	4621      	mov	r1, r4
   23bc6:	4620      	mov	r0, r4
   23bc8:	f7dc fd2e 	bl	628 <ocrypto_mod_p256_sub>
   23bcc:	466a      	mov	r2, sp
   23bce:	4629      	mov	r1, r5
   23bd0:	4640      	mov	r0, r8
   23bd2:	f7dc fd29 	bl	628 <ocrypto_mod_p256_sub>
   23bd6:	4642      	mov	r2, r8
   23bd8:	4639      	mov	r1, r7
   23bda:	4638      	mov	r0, r7
   23bdc:	f7dc fdbc 	bl	758 <ocrypto_mod_p256_mul>
   23be0:	4622      	mov	r2, r4
   23be2:	4629      	mov	r1, r5
   23be4:	4668      	mov	r0, sp
   23be6:	f7dc fd1f 	bl	628 <ocrypto_mod_p256_sub>
   23bea:	466a      	mov	r2, sp
   23bec:	4631      	mov	r1, r6
   23bee:	4630      	mov	r0, r6
   23bf0:	f7dc fdb2 	bl	758 <ocrypto_mod_p256_mul>
   23bf4:	463a      	mov	r2, r7
   23bf6:	4631      	mov	r1, r6
   23bf8:	4630      	mov	r0, r6
   23bfa:	f7dc fd15 	bl	628 <ocrypto_mod_p256_sub>
   23bfe:	b008      	add	sp, #32
   23c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023c04 <ocrypto_curve_p256_from64bytes>:
   23c04:	b570      	push	{r4, r5, r6, lr}
   23c06:	f100 0620 	add.w	r6, r0, #32
   23c0a:	b090      	sub	sp, #64	; 0x40
   23c0c:	460d      	mov	r5, r1
   23c0e:	4604      	mov	r4, r0
   23c10:	f000 f914 	bl	23e3c <ocrypto_mod_p256_from_bytes>
   23c14:	f105 0120 	add.w	r1, r5, #32
   23c18:	4630      	mov	r0, r6
   23c1a:	f000 f90f 	bl	23e3c <ocrypto_mod_p256_from_bytes>
   23c1e:	4621      	mov	r1, r4
   23c20:	a808      	add	r0, sp, #32
   23c22:	f7dc fdb1 	bl	788 <ocrypto_mod_p256_sqr>
   23c26:	a908      	add	r1, sp, #32
   23c28:	4608      	mov	r0, r1
   23c2a:	4a0d      	ldr	r2, [pc, #52]	; (23c60 <ocrypto_curve_p256_from64bytes+0x5c>)
   23c2c:	f7dc fcbe 	bl	5ac <ocrypto_mod_p256_add>
   23c30:	a908      	add	r1, sp, #32
   23c32:	4622      	mov	r2, r4
   23c34:	4608      	mov	r0, r1
   23c36:	f7dc fd8f 	bl	758 <ocrypto_mod_p256_mul>
   23c3a:	a908      	add	r1, sp, #32
   23c3c:	4a09      	ldr	r2, [pc, #36]	; (23c64 <ocrypto_curve_p256_from64bytes+0x60>)
   23c3e:	4608      	mov	r0, r1
   23c40:	f7dc fcb4 	bl	5ac <ocrypto_mod_p256_add>
   23c44:	4631      	mov	r1, r6
   23c46:	4668      	mov	r0, sp
   23c48:	f7dc fd9e 	bl	788 <ocrypto_mod_p256_sqr>
   23c4c:	2220      	movs	r2, #32
   23c4e:	4669      	mov	r1, sp
   23c50:	eb0d 0002 	add.w	r0, sp, r2
   23c54:	f7dc fc7c 	bl	550 <ocrypto_constant_time_equal>
   23c58:	3801      	subs	r0, #1
   23c5a:	b010      	add	sp, #64	; 0x40
   23c5c:	bd70      	pop	{r4, r5, r6, pc}
   23c5e:	bf00      	nop
   23c60:	0002a1e8 	.word	0x0002a1e8
   23c64:	0002a208 	.word	0x0002a208

00023c68 <ocrypto_curve_p256_to32bytes>:
   23c68:	f000 b902 	b.w	23e70 <ocrypto_mod_p256_to_bytes>

00023c6c <ocrypto_curve_p256_to64bytes>:
   23c6c:	b538      	push	{r3, r4, r5, lr}
   23c6e:	4604      	mov	r4, r0
   23c70:	460d      	mov	r5, r1
   23c72:	f000 f8fd 	bl	23e70 <ocrypto_mod_p256_to_bytes>
   23c76:	f105 0120 	add.w	r1, r5, #32
   23c7a:	f104 0020 	add.w	r0, r4, #32
   23c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23c82:	f000 b8f5 	b.w	23e70 <ocrypto_mod_p256_to_bytes>
   23c86:	bf00      	nop

00023c88 <ocrypto_curve_p256_scalarmult>:
   23c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23c8c:	4613      	mov	r3, r2
   23c8e:	b0b8      	sub	sp, #224	; 0xe0
   23c90:	4a54      	ldr	r2, [pc, #336]	; (23de4 <ocrypto_curve_p256_scalarmult+0x15c>)
   23c92:	4689      	mov	r9, r1
   23c94:	4680      	mov	r8, r0
   23c96:	4619      	mov	r1, r3
   23c98:	a810      	add	r0, sp, #64	; 0x40
   23c9a:	f7dc fa6b 	bl	174 <ocrypto_bigint_sub256>
   23c9e:	4952      	ldr	r1, [pc, #328]	; (23de8 <ocrypto_curve_p256_scalarmult+0x160>)
   23ca0:	4602      	mov	r2, r0
   23ca2:	a810      	add	r0, sp, #64	; 0x40
   23ca4:	f7dc fa86 	bl	1b4 <ocrypto_bigint_cadd256>
   23ca8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   23caa:	494e      	ldr	r1, [pc, #312]	; (23de4 <ocrypto_curve_p256_scalarmult+0x15c>)
   23cac:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   23cb0:	4607      	mov	r7, r0
   23cb2:	f1c6 0201 	rsb	r2, r6, #1
   23cb6:	a810      	add	r0, sp, #64	; 0x40
   23cb8:	f7dc fa7c 	bl	1b4 <ocrypto_bigint_cadd256>
   23cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   23cbe:	464a      	mov	r2, r9
   23cc0:	ea6f 0a03 	mvn.w	sl, r3
   23cc4:	a928      	add	r1, sp, #160	; 0xa0
   23cc6:	a818      	add	r0, sp, #96	; 0x60
   23cc8:	f7ff fe8e 	bl	239e8 <p256_zdblu>
   23ccc:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   23cd0:	a920      	add	r1, sp, #128	; 0x80
   23cd2:	f1ca 0201 	rsb	r2, sl, #1
   23cd6:	4608      	mov	r0, r1
   23cd8:	f000 f892 	bl	23e00 <ocrypto_mod_p256_cneg>
   23cdc:	f1c7 0701 	rsb	r7, r7, #1
   23ce0:	24fe      	movs	r4, #254	; 0xfe
   23ce2:	466a      	mov	r2, sp
   23ce4:	a918      	add	r1, sp, #96	; 0x60
   23ce6:	a828      	add	r0, sp, #160	; 0xa0
   23ce8:	f7ff ff40 	bl	23b6c <p256_zaddu>
   23cec:	1162      	asrs	r2, r4, #5
   23cee:	ab38      	add	r3, sp, #224	; 0xe0
   23cf0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23cf4:	f004 011f 	and.w	r1, r4, #31
   23cf8:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   23cfc:	40cb      	lsrs	r3, r1
   23cfe:	4655      	mov	r5, sl
   23d00:	f003 0a01 	and.w	sl, r3, #1
   23d04:	ea8a 0505 	eor.w	r5, sl, r5
   23d08:	462a      	mov	r2, r5
   23d0a:	a928      	add	r1, sp, #160	; 0xa0
   23d0c:	a818      	add	r0, sp, #96	; 0x60
   23d0e:	f7dc faad 	bl	26c <ocrypto_bigint_cswap256>
   23d12:	462a      	mov	r2, r5
   23d14:	a930      	add	r1, sp, #192	; 0xc0
   23d16:	a820      	add	r0, sp, #128	; 0x80
   23d18:	f7dc faa8 	bl	26c <ocrypto_bigint_cswap256>
   23d1c:	3c01      	subs	r4, #1
   23d1e:	a928      	add	r1, sp, #160	; 0xa0
   23d20:	a818      	add	r0, sp, #96	; 0x60
   23d22:	f7ff febd 	bl	23aa0 <p256_zaddc>
   23d26:	1c63      	adds	r3, r4, #1
   23d28:	d1db      	bne.n	23ce2 <ocrypto_curve_p256_scalarmult+0x5a>
   23d2a:	f1ca 0201 	rsb	r2, sl, #1
   23d2e:	a920      	add	r1, sp, #128	; 0x80
   23d30:	a808      	add	r0, sp, #32
   23d32:	f000 f865 	bl	23e00 <ocrypto_mod_p256_cneg>
   23d36:	ea86 060a 	eor.w	r6, r6, sl
   23d3a:	466a      	mov	r2, sp
   23d3c:	a918      	add	r1, sp, #96	; 0x60
   23d3e:	a828      	add	r0, sp, #160	; 0xa0
   23d40:	f7ff ff14 	bl	23b6c <p256_zaddu>
   23d44:	a928      	add	r1, sp, #160	; 0xa0
   23d46:	4632      	mov	r2, r6
   23d48:	a818      	add	r0, sp, #96	; 0x60
   23d4a:	f7dc fa8f 	bl	26c <ocrypto_bigint_cswap256>
   23d4e:	4632      	mov	r2, r6
   23d50:	a930      	add	r1, sp, #192	; 0xc0
   23d52:	a820      	add	r0, sp, #128	; 0x80
   23d54:	f7dc fa8a 	bl	26c <ocrypto_bigint_cswap256>
   23d58:	a908      	add	r1, sp, #32
   23d5a:	466a      	mov	r2, sp
   23d5c:	4608      	mov	r0, r1
   23d5e:	f7dc fcfb 	bl	758 <ocrypto_mod_p256_mul>
   23d62:	a908      	add	r1, sp, #32
   23d64:	4608      	mov	r0, r1
   23d66:	f000 f89d 	bl	23ea4 <ocrypto_mod_p256_inv>
   23d6a:	a908      	add	r1, sp, #32
   23d6c:	f108 0420 	add.w	r4, r8, #32
   23d70:	f109 0220 	add.w	r2, r9, #32
   23d74:	4608      	mov	r0, r1
   23d76:	f7dc fcef 	bl	758 <ocrypto_mod_p256_mul>
   23d7a:	a920      	add	r1, sp, #128	; 0x80
   23d7c:	aa08      	add	r2, sp, #32
   23d7e:	4620      	mov	r0, r4
   23d80:	f7dc fcea 	bl	758 <ocrypto_mod_p256_mul>
   23d84:	aa08      	add	r2, sp, #32
   23d86:	a918      	add	r1, sp, #96	; 0x60
   23d88:	4668      	mov	r0, sp
   23d8a:	f7dc fce5 	bl	758 <ocrypto_mod_p256_mul>
   23d8e:	4669      	mov	r1, sp
   23d90:	4668      	mov	r0, sp
   23d92:	f7dc fcf9 	bl	788 <ocrypto_mod_p256_sqr>
   23d96:	aa18      	add	r2, sp, #96	; 0x60
   23d98:	4669      	mov	r1, sp
   23d9a:	a808      	add	r0, sp, #32
   23d9c:	f7dc fcdc 	bl	758 <ocrypto_mod_p256_mul>
   23da0:	4621      	mov	r1, r4
   23da2:	4668      	mov	r0, sp
   23da4:	f7dc fcf0 	bl	788 <ocrypto_mod_p256_sqr>
   23da8:	aa08      	add	r2, sp, #32
   23daa:	4669      	mov	r1, sp
   23dac:	4610      	mov	r0, r2
   23dae:	f7dc fc3b 	bl	628 <ocrypto_mod_p256_sub>
   23db2:	4a0e      	ldr	r2, [pc, #56]	; (23dec <ocrypto_curve_p256_scalarmult+0x164>)
   23db4:	a908      	add	r1, sp, #32
   23db6:	4668      	mov	r0, sp
   23db8:	f7dc fc36 	bl	628 <ocrypto_mod_p256_sub>
   23dbc:	4620      	mov	r0, r4
   23dbe:	2120      	movs	r1, #32
   23dc0:	f7dc fbda 	bl	578 <ocrypto_constant_time_is_zero>
   23dc4:	a908      	add	r1, sp, #32
   23dc6:	4243      	negs	r3, r0
   23dc8:	4602      	mov	r2, r0
   23dca:	4668      	mov	r0, sp
   23dcc:	431f      	orrs	r7, r3
   23dce:	f7dc fa4d 	bl	26c <ocrypto_bigint_cswap256>
   23dd2:	4640      	mov	r0, r8
   23dd4:	4a06      	ldr	r2, [pc, #24]	; (23df0 <ocrypto_curve_p256_scalarmult+0x168>)
   23dd6:	4669      	mov	r1, sp
   23dd8:	f7dc fcbe 	bl	758 <ocrypto_mod_p256_mul>
   23ddc:	4638      	mov	r0, r7
   23dde:	b038      	add	sp, #224	; 0xe0
   23de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23de4:	0002a228 	.word	0x0002a228
   23de8:	0002a1a8 	.word	0x0002a1a8
   23dec:	0002a208 	.word	0x0002a208
   23df0:	0002a1c8 	.word	0x0002a1c8

00023df4 <ocrypto_curve_p256_scalarmult_base>:
   23df4:	460a      	mov	r2, r1
   23df6:	4901      	ldr	r1, [pc, #4]	; (23dfc <ocrypto_curve_p256_scalarmult_base+0x8>)
   23df8:	f7ff bf46 	b.w	23c88 <ocrypto_curve_p256_scalarmult>
   23dfc:	0002a168 	.word	0x0002a168

00023e00 <ocrypto_mod_p256_cneg>:
   23e00:	b570      	push	{r4, r5, r6, lr}
   23e02:	b088      	sub	sp, #32
   23e04:	4604      	mov	r4, r0
   23e06:	460d      	mov	r5, r1
   23e08:	4616      	mov	r6, r2
   23e0a:	2100      	movs	r1, #0
   23e0c:	2220      	movs	r2, #32
   23e0e:	4668      	mov	r0, sp
   23e10:	f003 faa8 	bl	27364 <memset>
   23e14:	2300      	movs	r3, #0
   23e16:	4629      	mov	r1, r5
   23e18:	2220      	movs	r2, #32
   23e1a:	4620      	mov	r0, r4
   23e1c:	9300      	str	r3, [sp, #0]
   23e1e:	f003 fa96 	bl	2734e <memcpy>
   23e22:	462a      	mov	r2, r5
   23e24:	4669      	mov	r1, sp
   23e26:	4668      	mov	r0, sp
   23e28:	f7dc fbfe 	bl	628 <ocrypto_mod_p256_sub>
   23e2c:	4632      	mov	r2, r6
   23e2e:	4669      	mov	r1, sp
   23e30:	4620      	mov	r0, r4
   23e32:	f7dc fa1b 	bl	26c <ocrypto_bigint_cswap256>
   23e36:	b008      	add	sp, #32
   23e38:	bd70      	pop	{r4, r5, r6, pc}
   23e3a:	bf00      	nop

00023e3c <ocrypto_mod_p256_from_bytes>:
   23e3c:	680b      	ldr	r3, [r1, #0]
   23e3e:	ba1b      	rev	r3, r3
   23e40:	61c3      	str	r3, [r0, #28]
   23e42:	684b      	ldr	r3, [r1, #4]
   23e44:	ba1b      	rev	r3, r3
   23e46:	6183      	str	r3, [r0, #24]
   23e48:	688b      	ldr	r3, [r1, #8]
   23e4a:	ba1b      	rev	r3, r3
   23e4c:	6143      	str	r3, [r0, #20]
   23e4e:	68cb      	ldr	r3, [r1, #12]
   23e50:	ba1b      	rev	r3, r3
   23e52:	6103      	str	r3, [r0, #16]
   23e54:	690b      	ldr	r3, [r1, #16]
   23e56:	ba1b      	rev	r3, r3
   23e58:	60c3      	str	r3, [r0, #12]
   23e5a:	694b      	ldr	r3, [r1, #20]
   23e5c:	ba1b      	rev	r3, r3
   23e5e:	6083      	str	r3, [r0, #8]
   23e60:	698b      	ldr	r3, [r1, #24]
   23e62:	ba1b      	rev	r3, r3
   23e64:	6043      	str	r3, [r0, #4]
   23e66:	69cb      	ldr	r3, [r1, #28]
   23e68:	ba1b      	rev	r3, r3
   23e6a:	6003      	str	r3, [r0, #0]
   23e6c:	4770      	bx	lr
   23e6e:	bf00      	nop

00023e70 <ocrypto_mod_p256_to_bytes>:
   23e70:	69cb      	ldr	r3, [r1, #28]
   23e72:	ba1b      	rev	r3, r3
   23e74:	6003      	str	r3, [r0, #0]
   23e76:	698b      	ldr	r3, [r1, #24]
   23e78:	ba1b      	rev	r3, r3
   23e7a:	6043      	str	r3, [r0, #4]
   23e7c:	694b      	ldr	r3, [r1, #20]
   23e7e:	ba1b      	rev	r3, r3
   23e80:	6083      	str	r3, [r0, #8]
   23e82:	690b      	ldr	r3, [r1, #16]
   23e84:	ba1b      	rev	r3, r3
   23e86:	60c3      	str	r3, [r0, #12]
   23e88:	68cb      	ldr	r3, [r1, #12]
   23e8a:	ba1b      	rev	r3, r3
   23e8c:	6103      	str	r3, [r0, #16]
   23e8e:	688b      	ldr	r3, [r1, #8]
   23e90:	ba1b      	rev	r3, r3
   23e92:	6143      	str	r3, [r0, #20]
   23e94:	684b      	ldr	r3, [r1, #4]
   23e96:	ba1b      	rev	r3, r3
   23e98:	6183      	str	r3, [r0, #24]
   23e9a:	680b      	ldr	r3, [r1, #0]
   23e9c:	ba1b      	rev	r3, r3
   23e9e:	61c3      	str	r3, [r0, #28]
   23ea0:	4770      	bx	lr
   23ea2:	bf00      	nop

00023ea4 <ocrypto_mod_p256_inv>:
   23ea4:	b570      	push	{r4, r5, r6, lr}
   23ea6:	b098      	sub	sp, #96	; 0x60
   23ea8:	460d      	mov	r5, r1
   23eaa:	4606      	mov	r6, r0
   23eac:	a810      	add	r0, sp, #64	; 0x40
   23eae:	f7dc fc6b 	bl	788 <ocrypto_mod_p256_sqr>
   23eb2:	462a      	mov	r2, r5
   23eb4:	a910      	add	r1, sp, #64	; 0x40
   23eb6:	4668      	mov	r0, sp
   23eb8:	f7dc fc4e 	bl	758 <ocrypto_mod_p256_mul>
   23ebc:	4669      	mov	r1, sp
   23ebe:	a810      	add	r0, sp, #64	; 0x40
   23ec0:	f7dc fc62 	bl	788 <ocrypto_mod_p256_sqr>
   23ec4:	a910      	add	r1, sp, #64	; 0x40
   23ec6:	4608      	mov	r0, r1
   23ec8:	f7dc fc5e 	bl	788 <ocrypto_mod_p256_sqr>
   23ecc:	466a      	mov	r2, sp
   23ece:	a910      	add	r1, sp, #64	; 0x40
   23ed0:	a808      	add	r0, sp, #32
   23ed2:	f7dc fc41 	bl	758 <ocrypto_mod_p256_mul>
   23ed6:	a908      	add	r1, sp, #32
   23ed8:	a810      	add	r0, sp, #64	; 0x40
   23eda:	f7dc fc55 	bl	788 <ocrypto_mod_p256_sqr>
   23ede:	a910      	add	r1, sp, #64	; 0x40
   23ee0:	4608      	mov	r0, r1
   23ee2:	f7dc fc51 	bl	788 <ocrypto_mod_p256_sqr>
   23ee6:	a910      	add	r1, sp, #64	; 0x40
   23ee8:	4608      	mov	r0, r1
   23eea:	f7dc fc4d 	bl	788 <ocrypto_mod_p256_sqr>
   23eee:	a910      	add	r1, sp, #64	; 0x40
   23ef0:	4608      	mov	r0, r1
   23ef2:	f7dc fc49 	bl	788 <ocrypto_mod_p256_sqr>
   23ef6:	a910      	add	r1, sp, #64	; 0x40
   23ef8:	aa08      	add	r2, sp, #32
   23efa:	4608      	mov	r0, r1
   23efc:	f7dc fc2c 	bl	758 <ocrypto_mod_p256_mul>
   23f00:	a910      	add	r1, sp, #64	; 0x40
   23f02:	4608      	mov	r0, r1
   23f04:	f7dc fc40 	bl	788 <ocrypto_mod_p256_sqr>
   23f08:	a910      	add	r1, sp, #64	; 0x40
   23f0a:	4608      	mov	r0, r1
   23f0c:	f7dc fc3c 	bl	788 <ocrypto_mod_p256_sqr>
   23f10:	a910      	add	r1, sp, #64	; 0x40
   23f12:	466a      	mov	r2, sp
   23f14:	a808      	add	r0, sp, #32
   23f16:	f7dc fc1f 	bl	758 <ocrypto_mod_p256_mul>
   23f1a:	2405      	movs	r4, #5
   23f1c:	a908      	add	r1, sp, #32
   23f1e:	a810      	add	r0, sp, #64	; 0x40
   23f20:	f7dc fc32 	bl	788 <ocrypto_mod_p256_sqr>
   23f24:	a910      	add	r1, sp, #64	; 0x40
   23f26:	4608      	mov	r0, r1
   23f28:	f7dc fc2e 	bl	788 <ocrypto_mod_p256_sqr>
   23f2c:	3c01      	subs	r4, #1
   23f2e:	a910      	add	r1, sp, #64	; 0x40
   23f30:	d1f5      	bne.n	23f1e <ocrypto_mod_p256_inv+0x7a>
   23f32:	aa08      	add	r2, sp, #32
   23f34:	4608      	mov	r0, r1
   23f36:	f7dc fc0f 	bl	758 <ocrypto_mod_p256_mul>
   23f3a:	2405      	movs	r4, #5
   23f3c:	a910      	add	r1, sp, #64	; 0x40
   23f3e:	4608      	mov	r0, r1
   23f40:	f7dc fc22 	bl	788 <ocrypto_mod_p256_sqr>
   23f44:	a910      	add	r1, sp, #64	; 0x40
   23f46:	4608      	mov	r0, r1
   23f48:	f7dc fc1e 	bl	788 <ocrypto_mod_p256_sqr>
   23f4c:	3c01      	subs	r4, #1
   23f4e:	d1f5      	bne.n	23f3c <ocrypto_mod_p256_inv+0x98>
   23f50:	a910      	add	r1, sp, #64	; 0x40
   23f52:	aa08      	add	r2, sp, #32
   23f54:	4608      	mov	r0, r1
   23f56:	f7dc fbff 	bl	758 <ocrypto_mod_p256_mul>
   23f5a:	a910      	add	r1, sp, #64	; 0x40
   23f5c:	a808      	add	r0, sp, #32
   23f5e:	f7dc fc13 	bl	788 <ocrypto_mod_p256_sqr>
   23f62:	a908      	add	r1, sp, #32
   23f64:	4608      	mov	r0, r1
   23f66:	f7dc fc0f 	bl	788 <ocrypto_mod_p256_sqr>
   23f6a:	a908      	add	r1, sp, #32
   23f6c:	466a      	mov	r2, sp
   23f6e:	4668      	mov	r0, sp
   23f70:	f7dc fbf2 	bl	758 <ocrypto_mod_p256_mul>
   23f74:	2410      	movs	r4, #16
   23f76:	4669      	mov	r1, sp
   23f78:	a810      	add	r0, sp, #64	; 0x40
   23f7a:	f7dc fc05 	bl	788 <ocrypto_mod_p256_sqr>
   23f7e:	a910      	add	r1, sp, #64	; 0x40
   23f80:	4608      	mov	r0, r1
   23f82:	f7dc fc01 	bl	788 <ocrypto_mod_p256_sqr>
   23f86:	3c01      	subs	r4, #1
   23f88:	a910      	add	r1, sp, #64	; 0x40
   23f8a:	d1f5      	bne.n	23f78 <ocrypto_mod_p256_inv+0xd4>
   23f8c:	462a      	mov	r2, r5
   23f8e:	4608      	mov	r0, r1
   23f90:	f7dc fbe2 	bl	758 <ocrypto_mod_p256_mul>
   23f94:	2440      	movs	r4, #64	; 0x40
   23f96:	a910      	add	r1, sp, #64	; 0x40
   23f98:	4608      	mov	r0, r1
   23f9a:	f7dc fbf5 	bl	788 <ocrypto_mod_p256_sqr>
   23f9e:	a910      	add	r1, sp, #64	; 0x40
   23fa0:	4608      	mov	r0, r1
   23fa2:	f7dc fbf1 	bl	788 <ocrypto_mod_p256_sqr>
   23fa6:	3c01      	subs	r4, #1
   23fa8:	d1f5      	bne.n	23f96 <ocrypto_mod_p256_inv+0xf2>
   23faa:	a910      	add	r1, sp, #64	; 0x40
   23fac:	466a      	mov	r2, sp
   23fae:	4608      	mov	r0, r1
   23fb0:	f7dc fbd2 	bl	758 <ocrypto_mod_p256_mul>
   23fb4:	2410      	movs	r4, #16
   23fb6:	a910      	add	r1, sp, #64	; 0x40
   23fb8:	4608      	mov	r0, r1
   23fba:	f7dc fbe5 	bl	788 <ocrypto_mod_p256_sqr>
   23fbe:	a910      	add	r1, sp, #64	; 0x40
   23fc0:	4608      	mov	r0, r1
   23fc2:	f7dc fbe1 	bl	788 <ocrypto_mod_p256_sqr>
   23fc6:	3c01      	subs	r4, #1
   23fc8:	d1f5      	bne.n	23fb6 <ocrypto_mod_p256_inv+0x112>
   23fca:	a910      	add	r1, sp, #64	; 0x40
   23fcc:	466a      	mov	r2, sp
   23fce:	4608      	mov	r0, r1
   23fd0:	f7dc fbc2 	bl	758 <ocrypto_mod_p256_mul>
   23fd4:	2410      	movs	r4, #16
   23fd6:	a910      	add	r1, sp, #64	; 0x40
   23fd8:	4608      	mov	r0, r1
   23fda:	f7dc fbd5 	bl	788 <ocrypto_mod_p256_sqr>
   23fde:	a910      	add	r1, sp, #64	; 0x40
   23fe0:	4608      	mov	r0, r1
   23fe2:	f7dc fbd1 	bl	788 <ocrypto_mod_p256_sqr>
   23fe6:	3c01      	subs	r4, #1
   23fe8:	d1f5      	bne.n	23fd6 <ocrypto_mod_p256_inv+0x132>
   23fea:	a910      	add	r1, sp, #64	; 0x40
   23fec:	aa08      	add	r2, sp, #32
   23fee:	4608      	mov	r0, r1
   23ff0:	f7dc fbb2 	bl	758 <ocrypto_mod_p256_mul>
   23ff4:	462a      	mov	r2, r5
   23ff6:	a910      	add	r1, sp, #64	; 0x40
   23ff8:	4630      	mov	r0, r6
   23ffa:	f7dc fbad 	bl	758 <ocrypto_mod_p256_mul>
   23ffe:	b018      	add	sp, #96	; 0x60
   24000:	bd70      	pop	{r4, r5, r6, pc}
   24002:	bf00      	nop

00024004 <nrf_cc3xx_platform_init>:
   24004:	b510      	push	{r4, lr}
   24006:	4c0c      	ldr	r4, [pc, #48]	; (24038 <nrf_cc3xx_platform_init+0x34>)
   24008:	6823      	ldr	r3, [r4, #0]
   2400a:	b113      	cbz	r3, 24012 <nrf_cc3xx_platform_init+0xe>
   2400c:	4b0b      	ldr	r3, [pc, #44]	; (2403c <nrf_cc3xx_platform_init+0x38>)
   2400e:	681b      	ldr	r3, [r3, #0]
   24010:	b92b      	cbnz	r3, 2401e <nrf_cc3xx_platform_init+0x1a>
   24012:	f000 fe7d 	bl	24d10 <CC_LibInit>
   24016:	b930      	cbnz	r0, 24026 <nrf_cc3xx_platform_init+0x22>
   24018:	4b08      	ldr	r3, [pc, #32]	; (2403c <nrf_cc3xx_platform_init+0x38>)
   2401a:	2201      	movs	r2, #1
   2401c:	601a      	str	r2, [r3, #0]
   2401e:	2301      	movs	r3, #1
   24020:	6023      	str	r3, [r4, #0]
   24022:	2000      	movs	r0, #0
   24024:	bd10      	pop	{r4, pc}
   24026:	3801      	subs	r0, #1
   24028:	2806      	cmp	r0, #6
   2402a:	d901      	bls.n	24030 <nrf_cc3xx_platform_init+0x2c>
   2402c:	4804      	ldr	r0, [pc, #16]	; (24040 <nrf_cc3xx_platform_init+0x3c>)
   2402e:	bd10      	pop	{r4, pc}
   24030:	4b04      	ldr	r3, [pc, #16]	; (24044 <nrf_cc3xx_platform_init+0x40>)
   24032:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24036:	bd10      	pop	{r4, pc}
   24038:	20003fa4 	.word	0x20003fa4
   2403c:	20003fa8 	.word	0x20003fa8
   24040:	ffff8ffe 	.word	0xffff8ffe
   24044:	0002a248 	.word	0x0002a248

00024048 <nrf_cc3xx_platform_abort>:
   24048:	f3bf 8f4f 	dsb	sy
   2404c:	4905      	ldr	r1, [pc, #20]	; (24064 <nrf_cc3xx_platform_abort+0x1c>)
   2404e:	4b06      	ldr	r3, [pc, #24]	; (24068 <nrf_cc3xx_platform_abort+0x20>)
   24050:	68ca      	ldr	r2, [r1, #12]
   24052:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   24056:	4313      	orrs	r3, r2
   24058:	60cb      	str	r3, [r1, #12]
   2405a:	f3bf 8f4f 	dsb	sy
   2405e:	bf00      	nop
   24060:	e7fd      	b.n	2405e <nrf_cc3xx_platform_abort+0x16>
   24062:	bf00      	nop
   24064:	e000ed00 	.word	0xe000ed00
   24068:	05fa0004 	.word	0x05fa0004

0002406c <CC_PalAbort>:
   2406c:	b410      	push	{r4}
   2406e:	4b09      	ldr	r3, [pc, #36]	; (24094 <CC_PalAbort+0x28>)
   24070:	4909      	ldr	r1, [pc, #36]	; (24098 <CC_PalAbort+0x2c>)
   24072:	4c0a      	ldr	r4, [pc, #40]	; (2409c <CC_PalAbort+0x30>)
   24074:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   24078:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2407c:	6849      	ldr	r1, [r1, #4]
   2407e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   24082:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   24086:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2408a:	2300      	movs	r3, #0
   2408c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   24090:	bc10      	pop	{r4}
   24092:	4708      	bx	r1
   24094:	5002b000 	.word	0x5002b000
   24098:	20000874 	.word	0x20000874
   2409c:	5002a000 	.word	0x5002a000

000240a0 <nrf_cc3xx_platform_set_abort>:
   240a0:	e9d0 1200 	ldrd	r1, r2, [r0]
   240a4:	4b01      	ldr	r3, [pc, #4]	; (240ac <nrf_cc3xx_platform_set_abort+0xc>)
   240a6:	e9c3 1200 	strd	r1, r2, [r3]
   240aa:	4770      	bx	lr
   240ac:	20000874 	.word	0x20000874

000240b0 <nrf_cc3xx_platform_ctr_drbg_init>:
   240b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   240b4:	4c14      	ldr	r4, [pc, #80]	; (24108 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   240b6:	4e15      	ldr	r6, [pc, #84]	; (2410c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   240b8:	2800      	cmp	r0, #0
   240ba:	bf18      	it	ne
   240bc:	4604      	movne	r4, r0
   240be:	b083      	sub	sp, #12
   240c0:	6823      	ldr	r3, [r4, #0]
   240c2:	42b3      	cmp	r3, r6
   240c4:	d01c      	beq.n	24100 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   240c6:	460d      	mov	r5, r1
   240c8:	4620      	mov	r0, r4
   240ca:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   240ce:	f104 0904 	add.w	r9, r4, #4
   240d2:	4617      	mov	r7, r2
   240d4:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   240d8:	f000 f8d0 	bl	2427c <mbedtls_platform_zeroize>
   240dc:	4648      	mov	r0, r9
   240de:	f000 fd05 	bl	24aec <cc_mbedtls_entropy_init>
   240e2:	4640      	mov	r0, r8
   240e4:	f000 fb32 	bl	2474c <cc_mbedtls_ctr_drbg_init>
   240e8:	4909      	ldr	r1, [pc, #36]	; (24110 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   240ea:	9700      	str	r7, [sp, #0]
   240ec:	462b      	mov	r3, r5
   240ee:	464a      	mov	r2, r9
   240f0:	4640      	mov	r0, r8
   240f2:	f000 fb41 	bl	24778 <cc_mbedtls_ctr_drbg_seed>
   240f6:	b900      	cbnz	r0, 240fa <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   240f8:	6026      	str	r6, [r4, #0]
   240fa:	b003      	add	sp, #12
   240fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24100:	2000      	movs	r0, #0
   24102:	b003      	add	sp, #12
   24104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24108:	20003fac 	.word	0x20003fac
   2410c:	5ac9bca5 	.word	0x5ac9bca5
   24110:	00024b6d 	.word	0x00024b6d

00024114 <nrf_cc3xx_platform_ctr_drbg_get>:
   24114:	b570      	push	{r4, r5, r6, lr}
   24116:	4d0d      	ldr	r5, [pc, #52]	; (2414c <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   24118:	2800      	cmp	r0, #0
   2411a:	bf18      	it	ne
   2411c:	4605      	movne	r5, r0
   2411e:	461e      	mov	r6, r3
   24120:	6828      	ldr	r0, [r5, #0]
   24122:	4b0b      	ldr	r3, [pc, #44]	; (24150 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   24124:	4298      	cmp	r0, r3
   24126:	b082      	sub	sp, #8
   24128:	d10d      	bne.n	24146 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   2412a:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   2412e:	2500      	movs	r5, #0
   24130:	9500      	str	r5, [sp, #0]
   24132:	462b      	mov	r3, r5
   24134:	4614      	mov	r4, r2
   24136:	f000 fb6d 	bl	24814 <cc_mbedtls_ctr_drbg_random_with_add>
   2413a:	2800      	cmp	r0, #0
   2413c:	bf18      	it	ne
   2413e:	462c      	movne	r4, r5
   24140:	6034      	str	r4, [r6, #0]
   24142:	b002      	add	sp, #8
   24144:	bd70      	pop	{r4, r5, r6, pc}
   24146:	4803      	ldr	r0, [pc, #12]	; (24154 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   24148:	e7fb      	b.n	24142 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   2414a:	bf00      	nop
   2414c:	20003fac 	.word	0x20003fac
   24150:	5ac9bca5 	.word	0x5ac9bca5
   24154:	ffff8fe8 	.word	0xffff8fe8

00024158 <mutex_free>:
   24158:	b510      	push	{r4, lr}
   2415a:	4604      	mov	r4, r0
   2415c:	b130      	cbz	r0, 2416c <mutex_free+0x14>
   2415e:	6863      	ldr	r3, [r4, #4]
   24160:	06db      	lsls	r3, r3, #27
   24162:	d502      	bpl.n	2416a <mutex_free+0x12>
   24164:	2300      	movs	r3, #0
   24166:	6023      	str	r3, [r4, #0]
   24168:	6063      	str	r3, [r4, #4]
   2416a:	bd10      	pop	{r4, pc}
   2416c:	4b02      	ldr	r3, [pc, #8]	; (24178 <mutex_free+0x20>)
   2416e:	4803      	ldr	r0, [pc, #12]	; (2417c <mutex_free+0x24>)
   24170:	685b      	ldr	r3, [r3, #4]
   24172:	4798      	blx	r3
   24174:	e7f3      	b.n	2415e <mutex_free+0x6>
   24176:	bf00      	nop
   24178:	20000874 	.word	0x20000874
   2417c:	0002a264 	.word	0x0002a264

00024180 <mutex_lock>:
   24180:	b1b0      	cbz	r0, 241b0 <mutex_lock+0x30>
   24182:	6843      	ldr	r3, [r0, #4]
   24184:	b193      	cbz	r3, 241ac <mutex_lock+0x2c>
   24186:	06db      	lsls	r3, r3, #27
   24188:	d50e      	bpl.n	241a8 <mutex_lock+0x28>
   2418a:	2301      	movs	r3, #1
   2418c:	e850 2f00 	ldrex	r2, [r0]
   24190:	4619      	mov	r1, r3
   24192:	e840 1c00 	strex	ip, r1, [r0]
   24196:	f09c 0f00 	teq	ip, #0
   2419a:	d1f7      	bne.n	2418c <mutex_lock+0xc>
   2419c:	2a01      	cmp	r2, #1
   2419e:	d0f5      	beq.n	2418c <mutex_lock+0xc>
   241a0:	f3bf 8f5f 	dmb	sy
   241a4:	2000      	movs	r0, #0
   241a6:	4770      	bx	lr
   241a8:	4803      	ldr	r0, [pc, #12]	; (241b8 <mutex_lock+0x38>)
   241aa:	4770      	bx	lr
   241ac:	4803      	ldr	r0, [pc, #12]	; (241bc <mutex_lock+0x3c>)
   241ae:	4770      	bx	lr
   241b0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   241b4:	4770      	bx	lr
   241b6:	bf00      	nop
   241b8:	ffff8fe9 	.word	0xffff8fe9
   241bc:	ffff8fea 	.word	0xffff8fea

000241c0 <mutex_unlock>:
   241c0:	b168      	cbz	r0, 241de <mutex_unlock+0x1e>
   241c2:	6843      	ldr	r3, [r0, #4]
   241c4:	b13b      	cbz	r3, 241d6 <mutex_unlock+0x16>
   241c6:	06db      	lsls	r3, r3, #27
   241c8:	d507      	bpl.n	241da <mutex_unlock+0x1a>
   241ca:	f3bf 8f5f 	dmb	sy
   241ce:	2300      	movs	r3, #0
   241d0:	6003      	str	r3, [r0, #0]
   241d2:	4618      	mov	r0, r3
   241d4:	4770      	bx	lr
   241d6:	4803      	ldr	r0, [pc, #12]	; (241e4 <mutex_unlock+0x24>)
   241d8:	4770      	bx	lr
   241da:	4803      	ldr	r0, [pc, #12]	; (241e8 <mutex_unlock+0x28>)
   241dc:	4770      	bx	lr
   241de:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   241e2:	4770      	bx	lr
   241e4:	ffff8fea 	.word	0xffff8fea
   241e8:	ffff8fe9 	.word	0xffff8fe9

000241ec <mutex_init>:
   241ec:	b510      	push	{r4, lr}
   241ee:	4604      	mov	r4, r0
   241f0:	b120      	cbz	r0, 241fc <mutex_init+0x10>
   241f2:	2200      	movs	r2, #0
   241f4:	2311      	movs	r3, #17
   241f6:	6022      	str	r2, [r4, #0]
   241f8:	6063      	str	r3, [r4, #4]
   241fa:	bd10      	pop	{r4, pc}
   241fc:	4801      	ldr	r0, [pc, #4]	; (24204 <mutex_init+0x18>)
   241fe:	f7ff ff35 	bl	2406c <CC_PalAbort>
   24202:	e7f6      	b.n	241f2 <mutex_init+0x6>
   24204:	0002a28c 	.word	0x0002a28c

00024208 <nrf_cc3xx_platform_set_mutexes>:
   24208:	b570      	push	{r4, r5, r6, lr}
   2420a:	e9d0 2300 	ldrd	r2, r3, [r0]
   2420e:	4c13      	ldr	r4, [pc, #76]	; (2425c <nrf_cc3xx_platform_set_mutexes+0x54>)
   24210:	4d13      	ldr	r5, [pc, #76]	; (24260 <nrf_cc3xx_platform_set_mutexes+0x58>)
   24212:	6063      	str	r3, [r4, #4]
   24214:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   24218:	e9c4 3002 	strd	r3, r0, [r4, #8]
   2421c:	6022      	str	r2, [r4, #0]
   2421e:	4b11      	ldr	r3, [pc, #68]	; (24264 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   24220:	6808      	ldr	r0, [r1, #0]
   24222:	6018      	str	r0, [r3, #0]
   24224:	6848      	ldr	r0, [r1, #4]
   24226:	6058      	str	r0, [r3, #4]
   24228:	6888      	ldr	r0, [r1, #8]
   2422a:	6098      	str	r0, [r3, #8]
   2422c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   24230:	60d8      	str	r0, [r3, #12]
   24232:	6119      	str	r1, [r3, #16]
   24234:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   24238:	06db      	lsls	r3, r3, #27
   2423a:	d50d      	bpl.n	24258 <nrf_cc3xx_platform_set_mutexes+0x50>
   2423c:	2300      	movs	r3, #0
   2423e:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   24242:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   24246:	f505 708a 	add.w	r0, r5, #276	; 0x114
   2424a:	4790      	blx	r2
   2424c:	6823      	ldr	r3, [r4, #0]
   2424e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   24252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24256:	4718      	bx	r3
   24258:	bd70      	pop	{r4, r5, r6, pc}
   2425a:	bf00      	nop
   2425c:	20000884 	.word	0x20000884
   24260:	20003fac 	.word	0x20003fac
   24264:	20000894 	.word	0x20000894

00024268 <mbedtls_zeroize_internal>:
   24268:	b138      	cbz	r0, 2427a <mbedtls_zeroize_internal+0x12>
   2426a:	b131      	cbz	r1, 2427a <mbedtls_zeroize_internal+0x12>
   2426c:	4401      	add	r1, r0
   2426e:	2200      	movs	r2, #0
   24270:	4603      	mov	r3, r0
   24272:	3001      	adds	r0, #1
   24274:	4281      	cmp	r1, r0
   24276:	701a      	strb	r2, [r3, #0]
   24278:	d1fa      	bne.n	24270 <mbedtls_zeroize_internal+0x8>
   2427a:	4770      	bx	lr

0002427c <mbedtls_platform_zeroize>:
   2427c:	b138      	cbz	r0, 2428e <mbedtls_platform_zeroize+0x12>
   2427e:	b131      	cbz	r1, 2428e <mbedtls_platform_zeroize+0x12>
   24280:	4401      	add	r1, r0
   24282:	2200      	movs	r2, #0
   24284:	4603      	mov	r3, r0
   24286:	3001      	adds	r0, #1
   24288:	4288      	cmp	r0, r1
   2428a:	701a      	strb	r2, [r3, #0]
   2428c:	d1fa      	bne.n	24284 <mbedtls_platform_zeroize+0x8>
   2428e:	4770      	bx	lr

00024290 <block_cipher_df>:
   24290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24294:	b0b7      	sub	sp, #220	; 0xdc
   24296:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   2429a:	9005      	str	r0, [sp, #20]
   2429c:	f200 8147 	bhi.w	2452e <block_cipher_df+0x29e>
   242a0:	4614      	mov	r4, r2
   242a2:	460d      	mov	r5, r1
   242a4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   242a8:	2100      	movs	r1, #0
   242aa:	48a2      	ldr	r0, [pc, #648]	; (24534 <block_cipher_df+0x2a4>)
   242ac:	f003 f85a 	bl	27364 <memset>
   242b0:	a819      	add	r0, sp, #100	; 0x64
   242b2:	f001 f9cb 	bl	2564c <cc_mbedtls_aes_init>
   242b6:	489f      	ldr	r0, [pc, #636]	; (24534 <block_cipher_df+0x2a4>)
   242b8:	2300      	movs	r3, #0
   242ba:	8203      	strh	r3, [r0, #16]
   242bc:	ba63      	rev16	r3, r4
   242be:	8243      	strh	r3, [r0, #18]
   242c0:	2320      	movs	r3, #32
   242c2:	4629      	mov	r1, r5
   242c4:	75c3      	strb	r3, [r0, #23]
   242c6:	4605      	mov	r5, r0
   242c8:	4622      	mov	r2, r4
   242ca:	3018      	adds	r0, #24
   242cc:	f003 f83f 	bl	2734e <memcpy>
   242d0:	462b      	mov	r3, r5
   242d2:	4423      	add	r3, r4
   242d4:	2280      	movs	r2, #128	; 0x80
   242d6:	761a      	strb	r2, [r3, #24]
   242d8:	4b97      	ldr	r3, [pc, #604]	; (24538 <block_cipher_df+0x2a8>)
   242da:	930d      	str	r3, [sp, #52]	; 0x34
   242dc:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   242e0:	930e      	str	r3, [sp, #56]	; 0x38
   242e2:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   242e6:	930f      	str	r3, [sp, #60]	; 0x3c
   242e8:	a90d      	add	r1, sp, #52	; 0x34
   242ea:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   242ee:	a819      	add	r0, sp, #100	; 0x64
   242f0:	9310      	str	r3, [sp, #64]	; 0x40
   242f2:	f001 f9c1 	bl	25678 <cc_mbedtls_aes_setkey_enc>
   242f6:	4605      	mov	r5, r0
   242f8:	2800      	cmp	r0, #0
   242fa:	f040 80f4 	bne.w	244e6 <block_cipher_df+0x256>
   242fe:	f104 0319 	add.w	r3, r4, #25
   24302:	9306      	str	r3, [sp, #24]
   24304:	f10d 0820 	add.w	r8, sp, #32
   24308:	ab11      	add	r3, sp, #68	; 0x44
   2430a:	9304      	str	r3, [sp, #16]
   2430c:	9307      	str	r3, [sp, #28]
   2430e:	46c1      	mov	r9, r8
   24310:	2210      	movs	r2, #16
   24312:	2100      	movs	r1, #0
   24314:	4648      	mov	r0, r9
   24316:	f003 f825 	bl	27364 <memset>
   2431a:	f8df a220 	ldr.w	sl, [pc, #544]	; 2453c <block_cipher_df+0x2ac>
   2431e:	9b06      	ldr	r3, [sp, #24]
   24320:	9300      	str	r3, [sp, #0]
   24322:	f8cd 900c 	str.w	r9, [sp, #12]
   24326:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   2432a:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   2432e:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   24332:	f89d 5020 	ldrb.w	r5, [sp, #32]
   24336:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   2433a:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   2433e:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   24342:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   24346:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   2434a:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   2434e:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   24352:	406a      	eors	r2, r5
   24354:	ea8e 0e00 	eor.w	lr, lr, r0
   24358:	9d00      	ldr	r5, [sp, #0]
   2435a:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   2435e:	9202      	str	r2, [sp, #8]
   24360:	ea8c 0c03 	eor.w	ip, ip, r3
   24364:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   24368:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   2436c:	2d10      	cmp	r5, #16
   2436e:	ea80 0003 	eor.w	r0, r0, r3
   24372:	462b      	mov	r3, r5
   24374:	bf8c      	ite	hi
   24376:	3b10      	subhi	r3, #16
   24378:	1b6b      	subls	r3, r5, r5
   2437a:	9300      	str	r3, [sp, #0]
   2437c:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   24380:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   24384:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   24388:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   2438c:	4061      	eors	r1, r4
   2438e:	405f      	eors	r7, r3
   24390:	2400      	movs	r4, #0
   24392:	406a      	eors	r2, r5
   24394:	ea8b 0b06 	eor.w	fp, fp, r6
   24398:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   2439c:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   243a0:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   243a4:	9601      	str	r6, [sp, #4]
   243a6:	4626      	mov	r6, r4
   243a8:	406b      	eors	r3, r5
   243aa:	f36b 0607 	bfi	r6, fp, #0, #8
   243ae:	4625      	mov	r5, r4
   243b0:	f367 260f 	bfi	r6, r7, #8, #8
   243b4:	462f      	mov	r7, r5
   243b6:	f361 0707 	bfi	r7, r1, #0, #8
   243ba:	9902      	ldr	r1, [sp, #8]
   243bc:	f361 0507 	bfi	r5, r1, #0, #8
   243c0:	f362 250f 	bfi	r5, r2, #8, #8
   243c4:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   243c8:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   243cc:	f363 270f 	bfi	r7, r3, #8, #8
   243d0:	ea82 0909 	eor.w	r9, r2, r9
   243d4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   243d8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   243dc:	ea83 0808 	eor.w	r8, r3, r8
   243e0:	404a      	eors	r2, r1
   243e2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   243e6:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   243ea:	f36e 0407 	bfi	r4, lr, #0, #8
   243ee:	404b      	eors	r3, r1
   243f0:	f368 4717 	bfi	r7, r8, #16, #8
   243f4:	f36c 240f 	bfi	r4, ip, #8, #8
   243f8:	f363 671f 	bfi	r7, r3, #24, #8
   243fc:	9b03      	ldr	r3, [sp, #12]
   243fe:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   24402:	f8dd e004 	ldr.w	lr, [sp, #4]
   24406:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   2440a:	ea8c 0c0e 	eor.w	ip, ip, lr
   2440e:	f36c 4617 	bfi	r6, ip, #16, #8
   24412:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   24416:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   2441a:	ea8c 0c08 	eor.w	ip, ip, r8
   2441e:	f36c 661f 	bfi	r6, ip, #24, #8
   24422:	f369 4517 	bfi	r5, r9, #16, #8
   24426:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   2442a:	960b      	str	r6, [sp, #44]	; 0x2c
   2442c:	f362 651f 	bfi	r5, r2, #24, #8
   24430:	f360 4417 	bfi	r4, r0, #16, #8
   24434:	9508      	str	r5, [sp, #32]
   24436:	ea8c 050e 	eor.w	r5, ip, lr
   2443a:	f365 641f 	bfi	r4, r5, #24, #8
   2443e:	461a      	mov	r2, r3
   24440:	2101      	movs	r1, #1
   24442:	a819      	add	r0, sp, #100	; 0x64
   24444:	f10a 0a10 	add.w	sl, sl, #16
   24448:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   2444c:	f001 f92e 	bl	256ac <cc_mbedtls_aes_crypt_ecb>
   24450:	2800      	cmp	r0, #0
   24452:	d168      	bne.n	24526 <block_cipher_df+0x296>
   24454:	9b00      	ldr	r3, [sp, #0]
   24456:	2b00      	cmp	r3, #0
   24458:	f47f af65 	bne.w	24326 <block_cipher_df+0x96>
   2445c:	9c07      	ldr	r4, [sp, #28]
   2445e:	f8dd 900c 	ldr.w	r9, [sp, #12]
   24462:	4620      	mov	r0, r4
   24464:	2210      	movs	r2, #16
   24466:	3410      	adds	r4, #16
   24468:	4649      	mov	r1, r9
   2446a:	9407      	str	r4, [sp, #28]
   2446c:	f002 ff6f 	bl	2734e <memcpy>
   24470:	4a30      	ldr	r2, [pc, #192]	; (24534 <block_cipher_df+0x2a4>)
   24472:	78d3      	ldrb	r3, [r2, #3]
   24474:	3301      	adds	r3, #1
   24476:	70d3      	strb	r3, [r2, #3]
   24478:	ab19      	add	r3, sp, #100	; 0x64
   2447a:	429c      	cmp	r4, r3
   2447c:	f47f af48 	bne.w	24310 <block_cipher_df+0x80>
   24480:	9904      	ldr	r1, [sp, #16]
   24482:	2280      	movs	r2, #128	; 0x80
   24484:	4618      	mov	r0, r3
   24486:	f001 f8f7 	bl	25678 <cc_mbedtls_aes_setkey_enc>
   2448a:	46c8      	mov	r8, r9
   2448c:	4605      	mov	r5, r0
   2448e:	bb70      	cbnz	r0, 244ee <block_cipher_df+0x25e>
   24490:	9c05      	ldr	r4, [sp, #20]
   24492:	f104 0620 	add.w	r6, r4, #32
   24496:	ab15      	add	r3, sp, #84	; 0x54
   24498:	461a      	mov	r2, r3
   2449a:	2101      	movs	r1, #1
   2449c:	a819      	add	r0, sp, #100	; 0x64
   2449e:	f001 f905 	bl	256ac <cc_mbedtls_aes_crypt_ecb>
   244a2:	2210      	movs	r2, #16
   244a4:	4605      	mov	r5, r0
   244a6:	bb10      	cbnz	r0, 244ee <block_cipher_df+0x25e>
   244a8:	4620      	mov	r0, r4
   244aa:	a915      	add	r1, sp, #84	; 0x54
   244ac:	3410      	adds	r4, #16
   244ae:	f002 ff4e 	bl	2734e <memcpy>
   244b2:	42b4      	cmp	r4, r6
   244b4:	d1ef      	bne.n	24496 <block_cipher_df+0x206>
   244b6:	a819      	add	r0, sp, #100	; 0x64
   244b8:	f001 f8d8 	bl	2566c <cc_mbedtls_aes_free>
   244bc:	481d      	ldr	r0, [pc, #116]	; (24534 <block_cipher_df+0x2a4>)
   244be:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   244c2:	f7ff fedb 	bl	2427c <mbedtls_platform_zeroize>
   244c6:	9804      	ldr	r0, [sp, #16]
   244c8:	2120      	movs	r1, #32
   244ca:	f7ff fed7 	bl	2427c <mbedtls_platform_zeroize>
   244ce:	a80d      	add	r0, sp, #52	; 0x34
   244d0:	2110      	movs	r1, #16
   244d2:	f7ff fed3 	bl	2427c <mbedtls_platform_zeroize>
   244d6:	4640      	mov	r0, r8
   244d8:	2110      	movs	r1, #16
   244da:	f7ff fecf 	bl	2427c <mbedtls_platform_zeroize>
   244de:	4628      	mov	r0, r5
   244e0:	b037      	add	sp, #220	; 0xdc
   244e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244e6:	ab11      	add	r3, sp, #68	; 0x44
   244e8:	9304      	str	r3, [sp, #16]
   244ea:	f10d 0820 	add.w	r8, sp, #32
   244ee:	a819      	add	r0, sp, #100	; 0x64
   244f0:	f001 f8bc 	bl	2566c <cc_mbedtls_aes_free>
   244f4:	480f      	ldr	r0, [pc, #60]	; (24534 <block_cipher_df+0x2a4>)
   244f6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   244fa:	f7ff febf 	bl	2427c <mbedtls_platform_zeroize>
   244fe:	9804      	ldr	r0, [sp, #16]
   24500:	2120      	movs	r1, #32
   24502:	f7ff febb 	bl	2427c <mbedtls_platform_zeroize>
   24506:	a80d      	add	r0, sp, #52	; 0x34
   24508:	2110      	movs	r1, #16
   2450a:	f7ff feb7 	bl	2427c <mbedtls_platform_zeroize>
   2450e:	4640      	mov	r0, r8
   24510:	2110      	movs	r1, #16
   24512:	f7ff feb3 	bl	2427c <mbedtls_platform_zeroize>
   24516:	9805      	ldr	r0, [sp, #20]
   24518:	2120      	movs	r1, #32
   2451a:	f7ff feaf 	bl	2427c <mbedtls_platform_zeroize>
   2451e:	4628      	mov	r0, r5
   24520:	b037      	add	sp, #220	; 0xdc
   24522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24526:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2452a:	4605      	mov	r5, r0
   2452c:	e7df      	b.n	244ee <block_cipher_df+0x25e>
   2452e:	f06f 0537 	mvn.w	r5, #55	; 0x37
   24532:	e7f4      	b.n	2451e <block_cipher_df+0x28e>
   24534:	2000417c 	.word	0x2000417c
   24538:	03020100 	.word	0x03020100
   2453c:	2000418c 	.word	0x2000418c

00024540 <ctr_drbg_update_internal>:
   24540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24544:	b088      	sub	sp, #32
   24546:	4604      	mov	r4, r0
   24548:	460d      	mov	r5, r1
   2454a:	2220      	movs	r2, #32
   2454c:	2100      	movs	r1, #0
   2454e:	4668      	mov	r0, sp
   24550:	f002 ff08 	bl	27364 <memset>
   24554:	f104 0620 	add.w	r6, r4, #32
   24558:	466f      	mov	r7, sp
   2455a:	7be2      	ldrb	r2, [r4, #15]
   2455c:	3201      	adds	r2, #1
   2455e:	b2d2      	uxtb	r2, r2
   24560:	73e2      	strb	r2, [r4, #15]
   24562:	2a00      	cmp	r2, #0
   24564:	d14d      	bne.n	24602 <ctr_drbg_update_internal+0xc2>
   24566:	7ba2      	ldrb	r2, [r4, #14]
   24568:	3201      	adds	r2, #1
   2456a:	b2d2      	uxtb	r2, r2
   2456c:	73a2      	strb	r2, [r4, #14]
   2456e:	2a00      	cmp	r2, #0
   24570:	d147      	bne.n	24602 <ctr_drbg_update_internal+0xc2>
   24572:	7b63      	ldrb	r3, [r4, #13]
   24574:	3301      	adds	r3, #1
   24576:	b2db      	uxtb	r3, r3
   24578:	7363      	strb	r3, [r4, #13]
   2457a:	2b00      	cmp	r3, #0
   2457c:	d141      	bne.n	24602 <ctr_drbg_update_internal+0xc2>
   2457e:	7b23      	ldrb	r3, [r4, #12]
   24580:	3301      	adds	r3, #1
   24582:	b2db      	uxtb	r3, r3
   24584:	7323      	strb	r3, [r4, #12]
   24586:	2b00      	cmp	r3, #0
   24588:	d13b      	bne.n	24602 <ctr_drbg_update_internal+0xc2>
   2458a:	7ae3      	ldrb	r3, [r4, #11]
   2458c:	3301      	adds	r3, #1
   2458e:	b2db      	uxtb	r3, r3
   24590:	72e3      	strb	r3, [r4, #11]
   24592:	2b00      	cmp	r3, #0
   24594:	d135      	bne.n	24602 <ctr_drbg_update_internal+0xc2>
   24596:	7aa3      	ldrb	r3, [r4, #10]
   24598:	3301      	adds	r3, #1
   2459a:	b2db      	uxtb	r3, r3
   2459c:	72a3      	strb	r3, [r4, #10]
   2459e:	2b00      	cmp	r3, #0
   245a0:	d12f      	bne.n	24602 <ctr_drbg_update_internal+0xc2>
   245a2:	7a63      	ldrb	r3, [r4, #9]
   245a4:	3301      	adds	r3, #1
   245a6:	b2db      	uxtb	r3, r3
   245a8:	7263      	strb	r3, [r4, #9]
   245aa:	bb53      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245ac:	7a23      	ldrb	r3, [r4, #8]
   245ae:	3301      	adds	r3, #1
   245b0:	b2db      	uxtb	r3, r3
   245b2:	7223      	strb	r3, [r4, #8]
   245b4:	bb2b      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245b6:	79e3      	ldrb	r3, [r4, #7]
   245b8:	3301      	adds	r3, #1
   245ba:	b2db      	uxtb	r3, r3
   245bc:	71e3      	strb	r3, [r4, #7]
   245be:	bb03      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245c0:	79a3      	ldrb	r3, [r4, #6]
   245c2:	3301      	adds	r3, #1
   245c4:	b2db      	uxtb	r3, r3
   245c6:	71a3      	strb	r3, [r4, #6]
   245c8:	b9db      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245ca:	7963      	ldrb	r3, [r4, #5]
   245cc:	3301      	adds	r3, #1
   245ce:	b2db      	uxtb	r3, r3
   245d0:	7163      	strb	r3, [r4, #5]
   245d2:	b9b3      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245d4:	7923      	ldrb	r3, [r4, #4]
   245d6:	3301      	adds	r3, #1
   245d8:	b2db      	uxtb	r3, r3
   245da:	7123      	strb	r3, [r4, #4]
   245dc:	b98b      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245de:	78e3      	ldrb	r3, [r4, #3]
   245e0:	3301      	adds	r3, #1
   245e2:	b2db      	uxtb	r3, r3
   245e4:	70e3      	strb	r3, [r4, #3]
   245e6:	b963      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245e8:	78a3      	ldrb	r3, [r4, #2]
   245ea:	3301      	adds	r3, #1
   245ec:	b2db      	uxtb	r3, r3
   245ee:	70a3      	strb	r3, [r4, #2]
   245f0:	b93b      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245f2:	7863      	ldrb	r3, [r4, #1]
   245f4:	3301      	adds	r3, #1
   245f6:	b2db      	uxtb	r3, r3
   245f8:	7063      	strb	r3, [r4, #1]
   245fa:	b913      	cbnz	r3, 24602 <ctr_drbg_update_internal+0xc2>
   245fc:	7823      	ldrb	r3, [r4, #0]
   245fe:	3301      	adds	r3, #1
   24600:	7023      	strb	r3, [r4, #0]
   24602:	463b      	mov	r3, r7
   24604:	4622      	mov	r2, r4
   24606:	2101      	movs	r1, #1
   24608:	4630      	mov	r0, r6
   2460a:	f001 f84f 	bl	256ac <cc_mbedtls_aes_crypt_ecb>
   2460e:	4680      	mov	r8, r0
   24610:	bb50      	cbnz	r0, 24668 <ctr_drbg_update_internal+0x128>
   24612:	3710      	adds	r7, #16
   24614:	ab08      	add	r3, sp, #32
   24616:	429f      	cmp	r7, r3
   24618:	d19f      	bne.n	2455a <ctr_drbg_update_internal+0x1a>
   2461a:	9a00      	ldr	r2, [sp, #0]
   2461c:	682b      	ldr	r3, [r5, #0]
   2461e:	9906      	ldr	r1, [sp, #24]
   24620:	4053      	eors	r3, r2
   24622:	9300      	str	r3, [sp, #0]
   24624:	9a01      	ldr	r2, [sp, #4]
   24626:	686b      	ldr	r3, [r5, #4]
   24628:	4053      	eors	r3, r2
   2462a:	9301      	str	r3, [sp, #4]
   2462c:	9a02      	ldr	r2, [sp, #8]
   2462e:	68ab      	ldr	r3, [r5, #8]
   24630:	4053      	eors	r3, r2
   24632:	9302      	str	r3, [sp, #8]
   24634:	9a03      	ldr	r2, [sp, #12]
   24636:	68eb      	ldr	r3, [r5, #12]
   24638:	4053      	eors	r3, r2
   2463a:	9303      	str	r3, [sp, #12]
   2463c:	9a04      	ldr	r2, [sp, #16]
   2463e:	692b      	ldr	r3, [r5, #16]
   24640:	4053      	eors	r3, r2
   24642:	9304      	str	r3, [sp, #16]
   24644:	9a05      	ldr	r2, [sp, #20]
   24646:	696b      	ldr	r3, [r5, #20]
   24648:	4053      	eors	r3, r2
   2464a:	69aa      	ldr	r2, [r5, #24]
   2464c:	9305      	str	r3, [sp, #20]
   2464e:	404a      	eors	r2, r1
   24650:	69eb      	ldr	r3, [r5, #28]
   24652:	9206      	str	r2, [sp, #24]
   24654:	9a07      	ldr	r2, [sp, #28]
   24656:	4630      	mov	r0, r6
   24658:	4053      	eors	r3, r2
   2465a:	4669      	mov	r1, sp
   2465c:	2280      	movs	r2, #128	; 0x80
   2465e:	9307      	str	r3, [sp, #28]
   24660:	f001 f80a 	bl	25678 <cc_mbedtls_aes_setkey_enc>
   24664:	4680      	mov	r8, r0
   24666:	b138      	cbz	r0, 24678 <ctr_drbg_update_internal+0x138>
   24668:	4668      	mov	r0, sp
   2466a:	2120      	movs	r1, #32
   2466c:	f7ff fe06 	bl	2427c <mbedtls_platform_zeroize>
   24670:	4640      	mov	r0, r8
   24672:	b008      	add	sp, #32
   24674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24678:	2210      	movs	r2, #16
   2467a:	eb0d 0102 	add.w	r1, sp, r2
   2467e:	4620      	mov	r0, r4
   24680:	f002 fe65 	bl	2734e <memcpy>
   24684:	e7f0      	b.n	24668 <ctr_drbg_update_internal+0x128>
   24686:	bf00      	nop

00024688 <mbedtls_ctr_drbg_reseed_internal>:
   24688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2468c:	4604      	mov	r4, r0
   2468e:	6980      	ldr	r0, [r0, #24]
   24690:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   24694:	d852      	bhi.n	2473c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   24696:	461d      	mov	r5, r3
   24698:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   2469c:	42ab      	cmp	r3, r5
   2469e:	d34d      	bcc.n	2473c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   246a0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   246a4:	1a18      	subs	r0, r3, r0
   246a6:	4290      	cmp	r0, r2
   246a8:	4616      	mov	r6, r2
   246aa:	d347      	bcc.n	2473c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   246ac:	f8df 9098 	ldr.w	r9, [pc, #152]	; 24748 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   246b0:	f44f 72c0 	mov.w	r2, #384	; 0x180
   246b4:	460f      	mov	r7, r1
   246b6:	4648      	mov	r0, r9
   246b8:	2100      	movs	r1, #0
   246ba:	f002 fe53 	bl	27364 <memset>
   246be:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   246c2:	69a2      	ldr	r2, [r4, #24]
   246c4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   246c8:	4649      	mov	r1, r9
   246ca:	4798      	blx	r3
   246cc:	2800      	cmp	r0, #0
   246ce:	d138      	bne.n	24742 <mbedtls_ctr_drbg_reseed_internal+0xba>
   246d0:	f8d4 8018 	ldr.w	r8, [r4, #24]
   246d4:	b13d      	cbz	r5, 246e6 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   246d6:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   246da:	462a      	mov	r2, r5
   246dc:	eb09 0108 	add.w	r1, r9, r8
   246e0:	4798      	blx	r3
   246e2:	bb70      	cbnz	r0, 24742 <mbedtls_ctr_drbg_reseed_internal+0xba>
   246e4:	44a8      	add	r8, r5
   246e6:	b107      	cbz	r7, 246ea <mbedtls_ctr_drbg_reseed_internal+0x62>
   246e8:	b9c6      	cbnz	r6, 2471c <mbedtls_ctr_drbg_reseed_internal+0x94>
   246ea:	4917      	ldr	r1, [pc, #92]	; (24748 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   246ec:	4642      	mov	r2, r8
   246ee:	4608      	mov	r0, r1
   246f0:	f7ff fdce 	bl	24290 <block_cipher_df>
   246f4:	4605      	mov	r5, r0
   246f6:	b138      	cbz	r0, 24708 <mbedtls_ctr_drbg_reseed_internal+0x80>
   246f8:	4813      	ldr	r0, [pc, #76]	; (24748 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   246fa:	f44f 71c0 	mov.w	r1, #384	; 0x180
   246fe:	f7ff fdbd 	bl	2427c <mbedtls_platform_zeroize>
   24702:	4628      	mov	r0, r5
   24704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24708:	490f      	ldr	r1, [pc, #60]	; (24748 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2470a:	4620      	mov	r0, r4
   2470c:	f7ff ff18 	bl	24540 <ctr_drbg_update_internal>
   24710:	4605      	mov	r5, r0
   24712:	2800      	cmp	r0, #0
   24714:	d1f0      	bne.n	246f8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   24716:	2301      	movs	r3, #1
   24718:	6123      	str	r3, [r4, #16]
   2471a:	e7ed      	b.n	246f8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2471c:	eb09 0008 	add.w	r0, r9, r8
   24720:	4639      	mov	r1, r7
   24722:	4632      	mov	r2, r6
   24724:	f002 fe13 	bl	2734e <memcpy>
   24728:	4907      	ldr	r1, [pc, #28]	; (24748 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2472a:	44b0      	add	r8, r6
   2472c:	4642      	mov	r2, r8
   2472e:	4608      	mov	r0, r1
   24730:	f7ff fdae 	bl	24290 <block_cipher_df>
   24734:	4605      	mov	r5, r0
   24736:	2800      	cmp	r0, #0
   24738:	d1de      	bne.n	246f8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2473a:	e7e5      	b.n	24708 <mbedtls_ctr_drbg_reseed_internal+0x80>
   2473c:	f06f 0537 	mvn.w	r5, #55	; 0x37
   24740:	e7df      	b.n	24702 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   24742:	f06f 0533 	mvn.w	r5, #51	; 0x33
   24746:	e7dc      	b.n	24702 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   24748:	2000431c 	.word	0x2000431c

0002474c <cc_mbedtls_ctr_drbg_init>:
   2474c:	b510      	push	{r4, lr}
   2474e:	22a4      	movs	r2, #164	; 0xa4
   24750:	4604      	mov	r4, r0
   24752:	2100      	movs	r1, #0
   24754:	f002 fe06 	bl	27364 <memset>
   24758:	4b06      	ldr	r3, [pc, #24]	; (24774 <cc_mbedtls_ctr_drbg_init+0x28>)
   2475a:	f04f 31ff 	mov.w	r1, #4294967295
   2475e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   24762:	6121      	str	r1, [r4, #16]
   24764:	61e2      	str	r2, [r4, #28]
   24766:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2476a:	681b      	ldr	r3, [r3, #0]
   2476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24770:	4718      	bx	r3
   24772:	bf00      	nop
   24774:	200008d8 	.word	0x200008d8

00024778 <cc_mbedtls_ctr_drbg_seed>:
   24778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2477c:	b085      	sub	sp, #20
   2477e:	4605      	mov	r5, r0
   24780:	460f      	mov	r7, r1
   24782:	4616      	mov	r6, r2
   24784:	2100      	movs	r1, #0
   24786:	2210      	movs	r2, #16
   24788:	4668      	mov	r0, sp
   2478a:	4699      	mov	r9, r3
   2478c:	f002 fdea 	bl	27364 <memset>
   24790:	4b1e      	ldr	r3, [pc, #120]	; (2480c <cc_mbedtls_ctr_drbg_seed+0x94>)
   24792:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   24796:	681b      	ldr	r3, [r3, #0]
   24798:	4640      	mov	r0, r8
   2479a:	4798      	blx	r3
   2479c:	b120      	cbz	r0, 247a8 <cc_mbedtls_ctr_drbg_seed+0x30>
   2479e:	4604      	mov	r4, r0
   247a0:	4620      	mov	r0, r4
   247a2:	b005      	add	sp, #20
   247a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   247a8:	f105 0420 	add.w	r4, r5, #32
   247ac:	4620      	mov	r0, r4
   247ae:	f000 ff4d 	bl	2564c <cc_mbedtls_aes_init>
   247b2:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   247b6:	69ae      	ldr	r6, [r5, #24]
   247b8:	692b      	ldr	r3, [r5, #16]
   247ba:	b9ee      	cbnz	r6, 247f8 <cc_mbedtls_ctr_drbg_seed+0x80>
   247bc:	2220      	movs	r2, #32
   247be:	2b00      	cmp	r3, #0
   247c0:	61aa      	str	r2, [r5, #24]
   247c2:	db20      	blt.n	24806 <cc_mbedtls_ctr_drbg_seed+0x8e>
   247c4:	461e      	mov	r6, r3
   247c6:	4620      	mov	r0, r4
   247c8:	4669      	mov	r1, sp
   247ca:	2280      	movs	r2, #128	; 0x80
   247cc:	f000 ff54 	bl	25678 <cc_mbedtls_aes_setkey_enc>
   247d0:	4604      	mov	r4, r0
   247d2:	b930      	cbnz	r0, 247e2 <cc_mbedtls_ctr_drbg_seed+0x6a>
   247d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   247d6:	4633      	mov	r3, r6
   247d8:	4649      	mov	r1, r9
   247da:	4628      	mov	r0, r5
   247dc:	f7ff ff54 	bl	24688 <mbedtls_ctr_drbg_reseed_internal>
   247e0:	4604      	mov	r4, r0
   247e2:	4b0b      	ldr	r3, [pc, #44]	; (24810 <cc_mbedtls_ctr_drbg_seed+0x98>)
   247e4:	4640      	mov	r0, r8
   247e6:	681b      	ldr	r3, [r3, #0]
   247e8:	4798      	blx	r3
   247ea:	2800      	cmp	r0, #0
   247ec:	bf18      	it	ne
   247ee:	4604      	movne	r4, r0
   247f0:	4620      	mov	r0, r4
   247f2:	b005      	add	sp, #20
   247f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   247f8:	2b00      	cmp	r3, #0
   247fa:	dae3      	bge.n	247c4 <cc_mbedtls_ctr_drbg_seed+0x4c>
   247fc:	2e17      	cmp	r6, #23
   247fe:	d802      	bhi.n	24806 <cc_mbedtls_ctr_drbg_seed+0x8e>
   24800:	3601      	adds	r6, #1
   24802:	0876      	lsrs	r6, r6, #1
   24804:	e7df      	b.n	247c6 <cc_mbedtls_ctr_drbg_seed+0x4e>
   24806:	2600      	movs	r6, #0
   24808:	e7dd      	b.n	247c6 <cc_mbedtls_ctr_drbg_seed+0x4e>
   2480a:	bf00      	nop
   2480c:	200008dc 	.word	0x200008dc
   24810:	200008e0 	.word	0x200008e0

00024814 <cc_mbedtls_ctr_drbg_random_with_add>:
   24814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24818:	b08d      	sub	sp, #52	; 0x34
   2481a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2481e:	9f16      	ldr	r7, [sp, #88]	; 0x58
   24820:	f200 80e3 	bhi.w	249ea <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   24824:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   24828:	f200 80dc 	bhi.w	249e4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   2482c:	4604      	mov	r4, r0
   2482e:	4615      	mov	r5, r2
   24830:	460e      	mov	r6, r1
   24832:	2220      	movs	r2, #32
   24834:	2100      	movs	r1, #0
   24836:	a804      	add	r0, sp, #16
   24838:	4698      	mov	r8, r3
   2483a:	f002 fd93 	bl	27364 <memset>
   2483e:	4b6c      	ldr	r3, [pc, #432]	; (249f0 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   24840:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   24844:	681b      	ldr	r3, [r3, #0]
   24846:	4648      	mov	r0, r9
   24848:	4798      	blx	r3
   2484a:	4683      	mov	fp, r0
   2484c:	2800      	cmp	r0, #0
   2484e:	f040 8092 	bne.w	24976 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   24852:	6922      	ldr	r2, [r4, #16]
   24854:	69e3      	ldr	r3, [r4, #28]
   24856:	429a      	cmp	r2, r3
   24858:	f300 8091 	bgt.w	2497e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   2485c:	6963      	ldr	r3, [r4, #20]
   2485e:	2b00      	cmp	r3, #0
   24860:	f040 808d 	bne.w	2497e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   24864:	2f00      	cmp	r7, #0
   24866:	f040 80a9 	bne.w	249bc <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   2486a:	f8df a188 	ldr.w	sl, [pc, #392]	; 249f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2486e:	466f      	mov	r7, sp
   24870:	2d00      	cmp	r5, #0
   24872:	f000 8098 	beq.w	249a6 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   24876:	f104 0820 	add.w	r8, r4, #32
   2487a:	466f      	mov	r7, sp
   2487c:	e00e      	b.n	2489c <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2487e:	2d10      	cmp	r5, #16
   24880:	46ab      	mov	fp, r5
   24882:	bf28      	it	cs
   24884:	f04f 0b10 	movcs.w	fp, #16
   24888:	4630      	mov	r0, r6
   2488a:	465a      	mov	r2, fp
   2488c:	4639      	mov	r1, r7
   2488e:	f002 fd5e 	bl	2734e <memcpy>
   24892:	ebb5 050b 	subs.w	r5, r5, fp
   24896:	445e      	add	r6, fp
   24898:	f000 8085 	beq.w	249a6 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2489c:	7be3      	ldrb	r3, [r4, #15]
   2489e:	3301      	adds	r3, #1
   248a0:	b2db      	uxtb	r3, r3
   248a2:	73e3      	strb	r3, [r4, #15]
   248a4:	2b00      	cmp	r3, #0
   248a6:	d14d      	bne.n	24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248a8:	7ba3      	ldrb	r3, [r4, #14]
   248aa:	3301      	adds	r3, #1
   248ac:	b2db      	uxtb	r3, r3
   248ae:	73a3      	strb	r3, [r4, #14]
   248b0:	2b00      	cmp	r3, #0
   248b2:	d147      	bne.n	24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248b4:	7b63      	ldrb	r3, [r4, #13]
   248b6:	3301      	adds	r3, #1
   248b8:	b2db      	uxtb	r3, r3
   248ba:	7363      	strb	r3, [r4, #13]
   248bc:	2b00      	cmp	r3, #0
   248be:	d141      	bne.n	24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248c0:	7b23      	ldrb	r3, [r4, #12]
   248c2:	3301      	adds	r3, #1
   248c4:	b2db      	uxtb	r3, r3
   248c6:	7323      	strb	r3, [r4, #12]
   248c8:	2b00      	cmp	r3, #0
   248ca:	d13b      	bne.n	24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248cc:	7ae3      	ldrb	r3, [r4, #11]
   248ce:	3301      	adds	r3, #1
   248d0:	b2db      	uxtb	r3, r3
   248d2:	72e3      	strb	r3, [r4, #11]
   248d4:	2b00      	cmp	r3, #0
   248d6:	d135      	bne.n	24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248d8:	7aa3      	ldrb	r3, [r4, #10]
   248da:	3301      	adds	r3, #1
   248dc:	b2db      	uxtb	r3, r3
   248de:	72a3      	strb	r3, [r4, #10]
   248e0:	2b00      	cmp	r3, #0
   248e2:	d12f      	bne.n	24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248e4:	7a63      	ldrb	r3, [r4, #9]
   248e6:	3301      	adds	r3, #1
   248e8:	b2db      	uxtb	r3, r3
   248ea:	7263      	strb	r3, [r4, #9]
   248ec:	bb53      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248ee:	7a23      	ldrb	r3, [r4, #8]
   248f0:	3301      	adds	r3, #1
   248f2:	b2db      	uxtb	r3, r3
   248f4:	7223      	strb	r3, [r4, #8]
   248f6:	bb2b      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248f8:	79e3      	ldrb	r3, [r4, #7]
   248fa:	3301      	adds	r3, #1
   248fc:	b2db      	uxtb	r3, r3
   248fe:	71e3      	strb	r3, [r4, #7]
   24900:	bb03      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24902:	79a3      	ldrb	r3, [r4, #6]
   24904:	3301      	adds	r3, #1
   24906:	b2db      	uxtb	r3, r3
   24908:	71a3      	strb	r3, [r4, #6]
   2490a:	b9db      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2490c:	7963      	ldrb	r3, [r4, #5]
   2490e:	3301      	adds	r3, #1
   24910:	b2db      	uxtb	r3, r3
   24912:	7163      	strb	r3, [r4, #5]
   24914:	b9b3      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24916:	7923      	ldrb	r3, [r4, #4]
   24918:	3301      	adds	r3, #1
   2491a:	b2db      	uxtb	r3, r3
   2491c:	7123      	strb	r3, [r4, #4]
   2491e:	b98b      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24920:	78e3      	ldrb	r3, [r4, #3]
   24922:	3301      	adds	r3, #1
   24924:	b2db      	uxtb	r3, r3
   24926:	70e3      	strb	r3, [r4, #3]
   24928:	b963      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2492a:	78a3      	ldrb	r3, [r4, #2]
   2492c:	3301      	adds	r3, #1
   2492e:	b2db      	uxtb	r3, r3
   24930:	70a3      	strb	r3, [r4, #2]
   24932:	b93b      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24934:	7863      	ldrb	r3, [r4, #1]
   24936:	3301      	adds	r3, #1
   24938:	b2db      	uxtb	r3, r3
   2493a:	7063      	strb	r3, [r4, #1]
   2493c:	b913      	cbnz	r3, 24944 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2493e:	7823      	ldrb	r3, [r4, #0]
   24940:	3301      	adds	r3, #1
   24942:	7023      	strb	r3, [r4, #0]
   24944:	463b      	mov	r3, r7
   24946:	4622      	mov	r2, r4
   24948:	2101      	movs	r1, #1
   2494a:	4640      	mov	r0, r8
   2494c:	f000 feae 	bl	256ac <cc_mbedtls_aes_crypt_ecb>
   24950:	4683      	mov	fp, r0
   24952:	2800      	cmp	r0, #0
   24954:	d093      	beq.n	2487e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   24956:	f8da 3000 	ldr.w	r3, [sl]
   2495a:	4648      	mov	r0, r9
   2495c:	4798      	blx	r3
   2495e:	2120      	movs	r1, #32
   24960:	4603      	mov	r3, r0
   24962:	a804      	add	r0, sp, #16
   24964:	2b00      	cmp	r3, #0
   24966:	bf18      	it	ne
   24968:	469b      	movne	fp, r3
   2496a:	f7ff fc87 	bl	2427c <mbedtls_platform_zeroize>
   2496e:	2110      	movs	r1, #16
   24970:	4638      	mov	r0, r7
   24972:	f7ff fc83 	bl	2427c <mbedtls_platform_zeroize>
   24976:	4658      	mov	r0, fp
   24978:	b00d      	add	sp, #52	; 0x34
   2497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2497e:	463a      	mov	r2, r7
   24980:	4641      	mov	r1, r8
   24982:	2300      	movs	r3, #0
   24984:	4620      	mov	r0, r4
   24986:	f7ff fe7f 	bl	24688 <mbedtls_ctr_drbg_reseed_internal>
   2498a:	f8df a068 	ldr.w	sl, [pc, #104]	; 249f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2498e:	2800      	cmp	r0, #0
   24990:	f43f af6d 	beq.w	2486e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   24994:	f8da 3000 	ldr.w	r3, [sl]
   24998:	4648      	mov	r0, r9
   2499a:	4798      	blx	r3
   2499c:	4683      	mov	fp, r0
   2499e:	2800      	cmp	r0, #0
   249a0:	f43f af65 	beq.w	2486e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   249a4:	e7e7      	b.n	24976 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   249a6:	a904      	add	r1, sp, #16
   249a8:	4620      	mov	r0, r4
   249aa:	f7ff fdc9 	bl	24540 <ctr_drbg_update_internal>
   249ae:	4683      	mov	fp, r0
   249b0:	2800      	cmp	r0, #0
   249b2:	d1d0      	bne.n	24956 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   249b4:	6923      	ldr	r3, [r4, #16]
   249b6:	3301      	adds	r3, #1
   249b8:	6123      	str	r3, [r4, #16]
   249ba:	e7cc      	b.n	24956 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   249bc:	463a      	mov	r2, r7
   249be:	4641      	mov	r1, r8
   249c0:	a804      	add	r0, sp, #16
   249c2:	f7ff fc65 	bl	24290 <block_cipher_df>
   249c6:	4683      	mov	fp, r0
   249c8:	b118      	cbz	r0, 249d2 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   249ca:	f8df a028 	ldr.w	sl, [pc, #40]	; 249f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   249ce:	466f      	mov	r7, sp
   249d0:	e7c1      	b.n	24956 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   249d2:	a904      	add	r1, sp, #16
   249d4:	4620      	mov	r0, r4
   249d6:	f7ff fdb3 	bl	24540 <ctr_drbg_update_internal>
   249da:	4683      	mov	fp, r0
   249dc:	2800      	cmp	r0, #0
   249de:	f43f af44 	beq.w	2486a <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   249e2:	e7f2      	b.n	249ca <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   249e4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   249e8:	e7c5      	b.n	24976 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   249ea:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   249ee:	e7c2      	b.n	24976 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   249f0:	200008dc 	.word	0x200008dc
   249f4:	200008e0 	.word	0x200008e0

000249f8 <entropy_update>:
   249f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   249fc:	2b20      	cmp	r3, #32
   249fe:	b08b      	sub	sp, #44	; 0x2c
   24a00:	461d      	mov	r5, r3
   24a02:	4606      	mov	r6, r0
   24a04:	4688      	mov	r8, r1
   24a06:	4691      	mov	r9, r2
   24a08:	d826      	bhi.n	24a58 <entropy_update+0x60>
   24a0a:	b2db      	uxtb	r3, r3
   24a0c:	af02      	add	r7, sp, #8
   24a0e:	f88d 8004 	strb.w	r8, [sp, #4]
   24a12:	46b0      	mov	r8, r6
   24a14:	f88d 3005 	strb.w	r3, [sp, #5]
   24a18:	f858 1b04 	ldr.w	r1, [r8], #4
   24a1c:	b921      	cbnz	r1, 24a28 <entropy_update+0x30>
   24a1e:	4640      	mov	r0, r8
   24a20:	f000 fe88 	bl	25734 <cc_mbedtls_sha256_starts>
   24a24:	4604      	mov	r4, r0
   24a26:	b940      	cbnz	r0, 24a3a <entropy_update+0x42>
   24a28:	2301      	movs	r3, #1
   24a2a:	6033      	str	r3, [r6, #0]
   24a2c:	2202      	movs	r2, #2
   24a2e:	a901      	add	r1, sp, #4
   24a30:	4640      	mov	r0, r8
   24a32:	f000 fe93 	bl	2575c <cc_mbedtls_sha256_update>
   24a36:	4604      	mov	r4, r0
   24a38:	b138      	cbz	r0, 24a4a <entropy_update+0x52>
   24a3a:	4638      	mov	r0, r7
   24a3c:	2120      	movs	r1, #32
   24a3e:	f7ff fc1d 	bl	2427c <mbedtls_platform_zeroize>
   24a42:	4620      	mov	r0, r4
   24a44:	b00b      	add	sp, #44	; 0x2c
   24a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24a4a:	462a      	mov	r2, r5
   24a4c:	4649      	mov	r1, r9
   24a4e:	4640      	mov	r0, r8
   24a50:	f000 fe84 	bl	2575c <cc_mbedtls_sha256_update>
   24a54:	4604      	mov	r4, r0
   24a56:	e7f0      	b.n	24a3a <entropy_update+0x42>
   24a58:	af02      	add	r7, sp, #8
   24a5a:	4619      	mov	r1, r3
   24a5c:	4610      	mov	r0, r2
   24a5e:	2300      	movs	r3, #0
   24a60:	463a      	mov	r2, r7
   24a62:	f001 f803 	bl	25a6c <cc_mbedtls_sha256>
   24a66:	4604      	mov	r4, r0
   24a68:	2800      	cmp	r0, #0
   24a6a:	d1e6      	bne.n	24a3a <entropy_update+0x42>
   24a6c:	2320      	movs	r3, #32
   24a6e:	46b9      	mov	r9, r7
   24a70:	461d      	mov	r5, r3
   24a72:	e7cc      	b.n	24a0e <entropy_update+0x16>

00024a74 <entropy_gather_internal.part.0>:
   24a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   24a76:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   24a7a:	b0a7      	sub	sp, #156	; 0x9c
   24a7c:	2b00      	cmp	r3, #0
   24a7e:	bfd8      	it	le
   24a80:	ae02      	addle	r6, sp, #8
   24a82:	dd2c      	ble.n	24ade <entropy_gather_internal.part.0+0x6a>
   24a84:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   24a88:	4605      	mov	r5, r0
   24a8a:	2300      	movs	r3, #0
   24a8c:	ae02      	add	r6, sp, #8
   24a8e:	9301      	str	r3, [sp, #4]
   24a90:	f1a4 0701 	sub.w	r7, r4, #1
   24a94:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   24a98:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   24a9c:	ab01      	add	r3, sp, #4
   24a9e:	2290      	movs	r2, #144	; 0x90
   24aa0:	4631      	mov	r1, r6
   24aa2:	47a0      	blx	r4
   24aa4:	fab7 f787 	clz	r7, r7
   24aa8:	097f      	lsrs	r7, r7, #5
   24aaa:	4604      	mov	r4, r0
   24aac:	b910      	cbnz	r0, 24ab4 <entropy_gather_internal.part.0+0x40>
   24aae:	9b01      	ldr	r3, [sp, #4]
   24ab0:	b93b      	cbnz	r3, 24ac2 <entropy_gather_internal.part.0+0x4e>
   24ab2:	b1a7      	cbz	r7, 24ade <entropy_gather_internal.part.0+0x6a>
   24ab4:	4630      	mov	r0, r6
   24ab6:	2190      	movs	r1, #144	; 0x90
   24ab8:	f7ff fbe0 	bl	2427c <mbedtls_platform_zeroize>
   24abc:	4620      	mov	r0, r4
   24abe:	b027      	add	sp, #156	; 0x9c
   24ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24ac2:	4601      	mov	r1, r0
   24ac4:	4632      	mov	r2, r6
   24ac6:	4628      	mov	r0, r5
   24ac8:	f7ff ff96 	bl	249f8 <entropy_update>
   24acc:	b950      	cbnz	r0, 24ae4 <entropy_gather_internal.part.0+0x70>
   24ace:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   24ad2:	9a01      	ldr	r2, [sp, #4]
   24ad4:	4413      	add	r3, r2
   24ad6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   24ada:	2f00      	cmp	r7, #0
   24adc:	d1ea      	bne.n	24ab4 <entropy_gather_internal.part.0+0x40>
   24ade:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   24ae2:	e7e7      	b.n	24ab4 <entropy_gather_internal.part.0+0x40>
   24ae4:	4604      	mov	r4, r0
   24ae6:	4620      	mov	r0, r4
   24ae8:	b027      	add	sp, #156	; 0x9c
   24aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024aec <cc_mbedtls_entropy_init>:
   24aec:	b570      	push	{r4, r5, r6, lr}
   24aee:	2500      	movs	r5, #0
   24af0:	4604      	mov	r4, r0
   24af2:	2214      	movs	r2, #20
   24af4:	4629      	mov	r1, r5
   24af6:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   24afa:	30fc      	adds	r0, #252	; 0xfc
   24afc:	f002 fc32 	bl	27364 <memset>
   24b00:	4b16      	ldr	r3, [pc, #88]	; (24b5c <cc_mbedtls_entropy_init+0x70>)
   24b02:	f504 7688 	add.w	r6, r4, #272	; 0x110
   24b06:	681b      	ldr	r3, [r3, #0]
   24b08:	4630      	mov	r0, r6
   24b0a:	4798      	blx	r3
   24b0c:	4620      	mov	r0, r4
   24b0e:	f840 5b04 	str.w	r5, [r0], #4
   24b12:	f000 fdf5 	bl	25700 <cc_mbedtls_sha256_init>
   24b16:	4b12      	ldr	r3, [pc, #72]	; (24b60 <cc_mbedtls_entropy_init+0x74>)
   24b18:	4630      	mov	r0, r6
   24b1a:	681b      	ldr	r3, [r3, #0]
   24b1c:	4798      	blx	r3
   24b1e:	b9d8      	cbnz	r0, 24b58 <cc_mbedtls_entropy_init+0x6c>
   24b20:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24b24:	42ab      	cmp	r3, r5
   24b26:	dc11      	bgt.n	24b4c <cc_mbedtls_entropy_init+0x60>
   24b28:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   24b2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   24b30:	2120      	movs	r1, #32
   24b32:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   24b36:	2101      	movs	r1, #1
   24b38:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   24b3c:	3301      	adds	r3, #1
   24b3e:	4909      	ldr	r1, [pc, #36]	; (24b64 <cc_mbedtls_entropy_init+0x78>)
   24b40:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   24b44:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   24b48:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   24b4c:	4b06      	ldr	r3, [pc, #24]	; (24b68 <cc_mbedtls_entropy_init+0x7c>)
   24b4e:	4630      	mov	r0, r6
   24b50:	681b      	ldr	r3, [r3, #0]
   24b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24b56:	4718      	bx	r3
   24b58:	bd70      	pop	{r4, r5, r6, pc}
   24b5a:	bf00      	nop
   24b5c:	200008d8 	.word	0x200008d8
   24b60:	200008dc 	.word	0x200008dc
   24b64:	00025551 	.word	0x00025551
   24b68:	200008e0 	.word	0x200008e0

00024b6c <cc_mbedtls_entropy_func>:
   24b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24b70:	2a20      	cmp	r2, #32
   24b72:	b088      	sub	sp, #32
   24b74:	d876      	bhi.n	24c64 <cc_mbedtls_entropy_func+0xf8>
   24b76:	4b3d      	ldr	r3, [pc, #244]	; (24c6c <cc_mbedtls_entropy_func+0x100>)
   24b78:	f500 7988 	add.w	r9, r0, #272	; 0x110
   24b7c:	681b      	ldr	r3, [r3, #0]
   24b7e:	4604      	mov	r4, r0
   24b80:	4648      	mov	r0, r9
   24b82:	4617      	mov	r7, r2
   24b84:	4688      	mov	r8, r1
   24b86:	4798      	blx	r3
   24b88:	4605      	mov	r5, r0
   24b8a:	bba0      	cbnz	r0, 24bf6 <cc_mbedtls_entropy_func+0x8a>
   24b8c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24b90:	f240 1601 	movw	r6, #257	; 0x101
   24b94:	e001      	b.n	24b9a <cc_mbedtls_entropy_func+0x2e>
   24b96:	3e01      	subs	r6, #1
   24b98:	d060      	beq.n	24c5c <cc_mbedtls_entropy_func+0xf0>
   24b9a:	4620      	mov	r0, r4
   24b9c:	b37b      	cbz	r3, 24bfe <cc_mbedtls_entropy_func+0x92>
   24b9e:	f7ff ff69 	bl	24a74 <entropy_gather_internal.part.0>
   24ba2:	4605      	mov	r5, r0
   24ba4:	bb68      	cbnz	r0, 24c02 <cc_mbedtls_entropy_func+0x96>
   24ba6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24baa:	2b00      	cmp	r3, #0
   24bac:	ddf3      	ble.n	24b96 <cc_mbedtls_entropy_func+0x2a>
   24bae:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   24bb2:	4290      	cmp	r0, r2
   24bb4:	d3ef      	bcc.n	24b96 <cc_mbedtls_entropy_func+0x2a>
   24bb6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   24bba:	2a01      	cmp	r2, #1
   24bbc:	d1eb      	bne.n	24b96 <cc_mbedtls_entropy_func+0x2a>
   24bbe:	281f      	cmp	r0, #31
   24bc0:	d9e9      	bls.n	24b96 <cc_mbedtls_entropy_func+0x2a>
   24bc2:	466e      	mov	r6, sp
   24bc4:	4629      	mov	r1, r5
   24bc6:	2220      	movs	r2, #32
   24bc8:	4630      	mov	r0, r6
   24bca:	f104 0a04 	add.w	sl, r4, #4
   24bce:	f002 fbc9 	bl	27364 <memset>
   24bd2:	4631      	mov	r1, r6
   24bd4:	4650      	mov	r0, sl
   24bd6:	f000 fdeb 	bl	257b0 <cc_mbedtls_sha256_finish>
   24bda:	4605      	mov	r5, r0
   24bdc:	b198      	cbz	r0, 24c06 <cc_mbedtls_entropy_func+0x9a>
   24bde:	2120      	movs	r1, #32
   24be0:	4630      	mov	r0, r6
   24be2:	f7ff fb4b 	bl	2427c <mbedtls_platform_zeroize>
   24be6:	4b22      	ldr	r3, [pc, #136]	; (24c70 <cc_mbedtls_entropy_func+0x104>)
   24be8:	4648      	mov	r0, r9
   24bea:	681b      	ldr	r3, [r3, #0]
   24bec:	4798      	blx	r3
   24bee:	2800      	cmp	r0, #0
   24bf0:	bf18      	it	ne
   24bf2:	f06f 051d 	mvnne.w	r5, #29
   24bf6:	4628      	mov	r0, r5
   24bf8:	b008      	add	sp, #32
   24bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24bfe:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   24c02:	466e      	mov	r6, sp
   24c04:	e7eb      	b.n	24bde <cc_mbedtls_entropy_func+0x72>
   24c06:	4650      	mov	r0, sl
   24c08:	f000 fd8e 	bl	25728 <cc_mbedtls_sha256_free>
   24c0c:	4650      	mov	r0, sl
   24c0e:	f000 fd77 	bl	25700 <cc_mbedtls_sha256_init>
   24c12:	4629      	mov	r1, r5
   24c14:	4650      	mov	r0, sl
   24c16:	f000 fd8d 	bl	25734 <cc_mbedtls_sha256_starts>
   24c1a:	4605      	mov	r5, r0
   24c1c:	2800      	cmp	r0, #0
   24c1e:	d1de      	bne.n	24bde <cc_mbedtls_entropy_func+0x72>
   24c20:	4650      	mov	r0, sl
   24c22:	2220      	movs	r2, #32
   24c24:	4631      	mov	r1, r6
   24c26:	f000 fd99 	bl	2575c <cc_mbedtls_sha256_update>
   24c2a:	4605      	mov	r5, r0
   24c2c:	2800      	cmp	r0, #0
   24c2e:	d1d6      	bne.n	24bde <cc_mbedtls_entropy_func+0x72>
   24c30:	4603      	mov	r3, r0
   24c32:	4632      	mov	r2, r6
   24c34:	2120      	movs	r1, #32
   24c36:	4630      	mov	r0, r6
   24c38:	f000 ff18 	bl	25a6c <cc_mbedtls_sha256>
   24c3c:	4605      	mov	r5, r0
   24c3e:	2800      	cmp	r0, #0
   24c40:	d1cd      	bne.n	24bde <cc_mbedtls_entropy_func+0x72>
   24c42:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24c46:	2b00      	cmp	r3, #0
   24c48:	bfc4      	itt	gt
   24c4a:	2300      	movgt	r3, #0
   24c4c:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   24c50:	463a      	mov	r2, r7
   24c52:	4640      	mov	r0, r8
   24c54:	4631      	mov	r1, r6
   24c56:	f002 fb7a 	bl	2734e <memcpy>
   24c5a:	e7c0      	b.n	24bde <cc_mbedtls_entropy_func+0x72>
   24c5c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   24c60:	466e      	mov	r6, sp
   24c62:	e7bc      	b.n	24bde <cc_mbedtls_entropy_func+0x72>
   24c64:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   24c68:	e7c5      	b.n	24bf6 <cc_mbedtls_entropy_func+0x8a>
   24c6a:	bf00      	nop
   24c6c:	200008dc 	.word	0x200008dc
   24c70:	200008e0 	.word	0x200008e0

00024c74 <RndStartupTest.constprop.0>:
   24c74:	b530      	push	{r4, r5, lr}
   24c76:	b08d      	sub	sp, #52	; 0x34
   24c78:	2100      	movs	r1, #0
   24c7a:	2228      	movs	r2, #40	; 0x28
   24c7c:	a802      	add	r0, sp, #8
   24c7e:	9101      	str	r1, [sp, #4]
   24c80:	f002 fb70 	bl	27364 <memset>
   24c84:	a802      	add	r0, sp, #8
   24c86:	f000 ff19 	bl	25abc <RNG_PLAT_SetUserRngParameters>
   24c8a:	4604      	mov	r4, r0
   24c8c:	b110      	cbz	r0, 24c94 <RndStartupTest.constprop.0+0x20>
   24c8e:	4620      	mov	r0, r4
   24c90:	b00d      	add	sp, #52	; 0x34
   24c92:	bd30      	pop	{r4, r5, pc}
   24c94:	4d18      	ldr	r5, [pc, #96]	; (24cf8 <RndStartupTest.constprop.0+0x84>)
   24c96:	f04f 31ff 	mov.w	r1, #4294967295
   24c9a:	6828      	ldr	r0, [r5, #0]
   24c9c:	f000 f946 	bl	24f2c <CC_PalMutexLock>
   24ca0:	4604      	mov	r4, r0
   24ca2:	b9c0      	cbnz	r0, 24cd6 <RndStartupTest.constprop.0+0x62>
   24ca4:	2000      	movs	r0, #0
   24ca6:	f000 f971 	bl	24f8c <CC_PalPowerSaveModeSelect>
   24caa:	bb00      	cbnz	r0, 24cee <RndStartupTest.constprop.0+0x7a>
   24cac:	4a13      	ldr	r2, [pc, #76]	; (24cfc <RndStartupTest.constprop.0+0x88>)
   24cae:	a902      	add	r1, sp, #8
   24cb0:	a801      	add	r0, sp, #4
   24cb2:	f000 fc3f 	bl	25534 <LLF_RND_RunTrngStartupTest>
   24cb6:	4604      	mov	r4, r0
   24cb8:	2001      	movs	r0, #1
   24cba:	f000 f967 	bl	24f8c <CC_PalPowerSaveModeSelect>
   24cbe:	b990      	cbnz	r0, 24ce6 <RndStartupTest.constprop.0+0x72>
   24cc0:	6828      	ldr	r0, [r5, #0]
   24cc2:	f000 f93b 	bl	24f3c <CC_PalMutexUnlock>
   24cc6:	2800      	cmp	r0, #0
   24cc8:	d0e1      	beq.n	24c8e <RndStartupTest.constprop.0+0x1a>
   24cca:	480d      	ldr	r0, [pc, #52]	; (24d00 <RndStartupTest.constprop.0+0x8c>)
   24ccc:	f7ff f9ce 	bl	2406c <CC_PalAbort>
   24cd0:	4620      	mov	r0, r4
   24cd2:	b00d      	add	sp, #52	; 0x34
   24cd4:	bd30      	pop	{r4, r5, pc}
   24cd6:	480b      	ldr	r0, [pc, #44]	; (24d04 <RndStartupTest.constprop.0+0x90>)
   24cd8:	f7ff f9c8 	bl	2406c <CC_PalAbort>
   24cdc:	2c01      	cmp	r4, #1
   24cde:	bf08      	it	eq
   24ce0:	2405      	moveq	r4, #5
   24ce2:	d0ed      	beq.n	24cc0 <RndStartupTest.constprop.0+0x4c>
   24ce4:	e7de      	b.n	24ca4 <RndStartupTest.constprop.0+0x30>
   24ce6:	4808      	ldr	r0, [pc, #32]	; (24d08 <RndStartupTest.constprop.0+0x94>)
   24ce8:	f7ff f9c0 	bl	2406c <CC_PalAbort>
   24cec:	e7e8      	b.n	24cc0 <RndStartupTest.constprop.0+0x4c>
   24cee:	4807      	ldr	r0, [pc, #28]	; (24d0c <RndStartupTest.constprop.0+0x98>)
   24cf0:	f7ff f9bc 	bl	2406c <CC_PalAbort>
   24cf4:	e7da      	b.n	24cac <RndStartupTest.constprop.0+0x38>
   24cf6:	bf00      	nop
   24cf8:	200008d4 	.word	0x200008d4
   24cfc:	20004508 	.word	0x20004508
   24d00:	0002a308 	.word	0x0002a308
   24d04:	0002a2b0 	.word	0x0002a2b0
   24d08:	0002a2e8 	.word	0x0002a2e8
   24d0c:	0002a2c8 	.word	0x0002a2c8

00024d10 <CC_LibInit>:
   24d10:	b530      	push	{r4, r5, lr}
   24d12:	b083      	sub	sp, #12
   24d14:	f000 f85c 	bl	24dd0 <CC_HalInit>
   24d18:	b128      	cbz	r0, 24d26 <CC_LibInit+0x16>
   24d1a:	f000 f8ab 	bl	24e74 <CC_PalTerminate>
   24d1e:	2403      	movs	r4, #3
   24d20:	4620      	mov	r0, r4
   24d22:	b003      	add	sp, #12
   24d24:	bd30      	pop	{r4, r5, pc}
   24d26:	f000 f877 	bl	24e18 <CC_PalInit>
   24d2a:	b9d8      	cbnz	r0, 24d64 <CC_LibInit+0x54>
   24d2c:	f000 f92e 	bl	24f8c <CC_PalPowerSaveModeSelect>
   24d30:	b9e0      	cbnz	r0, 24d6c <CC_LibInit+0x5c>
   24d32:	4c22      	ldr	r4, [pc, #136]	; (24dbc <CC_LibInit+0xac>)
   24d34:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   24d38:	0e1b      	lsrs	r3, r3, #24
   24d3a:	2bf0      	cmp	r3, #240	; 0xf0
   24d3c:	d10a      	bne.n	24d54 <CC_LibInit+0x44>
   24d3e:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   24d42:	4b1f      	ldr	r3, [pc, #124]	; (24dc0 <CC_LibInit+0xb0>)
   24d44:	429a      	cmp	r2, r3
   24d46:	d031      	beq.n	24dac <CC_LibInit+0x9c>
   24d48:	f000 f844 	bl	24dd4 <CC_HalTerminate>
   24d4c:	2407      	movs	r4, #7
   24d4e:	f000 f891 	bl	24e74 <CC_PalTerminate>
   24d52:	e7e5      	b.n	24d20 <CC_LibInit+0x10>
   24d54:	f000 f83e 	bl	24dd4 <CC_HalTerminate>
   24d58:	f000 f88c 	bl	24e74 <CC_PalTerminate>
   24d5c:	2406      	movs	r4, #6
   24d5e:	4620      	mov	r0, r4
   24d60:	b003      	add	sp, #12
   24d62:	bd30      	pop	{r4, r5, pc}
   24d64:	2404      	movs	r4, #4
   24d66:	4620      	mov	r0, r4
   24d68:	b003      	add	sp, #12
   24d6a:	bd30      	pop	{r4, r5, pc}
   24d6c:	f000 f832 	bl	24dd4 <CC_HalTerminate>
   24d70:	f000 f880 	bl	24e74 <CC_PalTerminate>
   24d74:	f7ff ff7e 	bl	24c74 <RndStartupTest.constprop.0>
   24d78:	4604      	mov	r4, r0
   24d7a:	b998      	cbnz	r0, 24da4 <CC_LibInit+0x94>
   24d7c:	4d11      	ldr	r5, [pc, #68]	; (24dc4 <CC_LibInit+0xb4>)
   24d7e:	682b      	ldr	r3, [r5, #0]
   24d80:	2b00      	cmp	r3, #0
   24d82:	d1cd      	bne.n	24d20 <CC_LibInit+0x10>
   24d84:	4602      	mov	r2, r0
   24d86:	4601      	mov	r1, r0
   24d88:	f7ff f992 	bl	240b0 <nrf_cc3xx_platform_ctr_drbg_init>
   24d8c:	b950      	cbnz	r0, 24da4 <CC_LibInit+0x94>
   24d8e:	490e      	ldr	r1, [pc, #56]	; (24dc8 <CC_LibInit+0xb8>)
   24d90:	ab01      	add	r3, sp, #4
   24d92:	2268      	movs	r2, #104	; 0x68
   24d94:	f7ff f9be 	bl	24114 <nrf_cc3xx_platform_ctr_drbg_get>
   24d98:	b920      	cbnz	r0, 24da4 <CC_LibInit+0x94>
   24d9a:	4b0c      	ldr	r3, [pc, #48]	; (24dcc <CC_LibInit+0xbc>)
   24d9c:	602b      	str	r3, [r5, #0]
   24d9e:	4620      	mov	r0, r4
   24da0:	b003      	add	sp, #12
   24da2:	bd30      	pop	{r4, r5, pc}
   24da4:	2405      	movs	r4, #5
   24da6:	4620      	mov	r0, r4
   24da8:	b003      	add	sp, #12
   24daa:	bd30      	pop	{r4, r5, pc}
   24dac:	2001      	movs	r0, #1
   24dae:	f000 f8ed 	bl	24f8c <CC_PalPowerSaveModeSelect>
   24db2:	2800      	cmp	r0, #0
   24db4:	d1da      	bne.n	24d6c <CC_LibInit+0x5c>
   24db6:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   24dba:	e7db      	b.n	24d74 <CC_LibInit+0x64>
   24dbc:	5002b000 	.word	0x5002b000
   24dc0:	20e00000 	.word	0x20e00000
   24dc4:	20004504 	.word	0x20004504
   24dc8:	2000449c 	.word	0x2000449c
   24dcc:	5a5aea5a 	.word	0x5a5aea5a

00024dd0 <CC_HalInit>:
   24dd0:	2000      	movs	r0, #0
   24dd2:	4770      	bx	lr

00024dd4 <CC_HalTerminate>:
   24dd4:	2000      	movs	r0, #0
   24dd6:	4770      	bx	lr

00024dd8 <CC_HalClearInterruptBit>:
   24dd8:	0543      	lsls	r3, r0, #21
   24dda:	d504      	bpl.n	24de6 <CC_HalClearInterruptBit+0xe>
   24ddc:	4b04      	ldr	r3, [pc, #16]	; (24df0 <CC_HalClearInterruptBit+0x18>)
   24dde:	f04f 32ff 	mov.w	r2, #4294967295
   24de2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   24de6:	4b02      	ldr	r3, [pc, #8]	; (24df0 <CC_HalClearInterruptBit+0x18>)
   24de8:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   24dec:	4770      	bx	lr
   24dee:	bf00      	nop
   24df0:	5002b000 	.word	0x5002b000

00024df4 <CC_HalMaskInterrupt>:
   24df4:	4b01      	ldr	r3, [pc, #4]	; (24dfc <CC_HalMaskInterrupt+0x8>)
   24df6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   24dfa:	4770      	bx	lr
   24dfc:	5002b000 	.word	0x5002b000

00024e00 <CC_HalWaitInterrupt>:
   24e00:	b108      	cbz	r0, 24e06 <CC_HalWaitInterrupt+0x6>
   24e02:	f000 b86b 	b.w	24edc <CC_PalWaitInterrupt>
   24e06:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   24e0a:	4770      	bx	lr

00024e0c <CC_HalWaitInterruptRND>:
   24e0c:	b108      	cbz	r0, 24e12 <CC_HalWaitInterruptRND+0x6>
   24e0e:	f000 b84f 	b.w	24eb0 <CC_PalWaitInterruptRND>
   24e12:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   24e16:	4770      	bx	lr

00024e18 <CC_PalInit>:
   24e18:	b510      	push	{r4, lr}
   24e1a:	4811      	ldr	r0, [pc, #68]	; (24e60 <CC_PalInit+0x48>)
   24e1c:	f000 f872 	bl	24f04 <CC_PalMutexCreate>
   24e20:	b100      	cbz	r0, 24e24 <CC_PalInit+0xc>
   24e22:	bd10      	pop	{r4, pc}
   24e24:	480f      	ldr	r0, [pc, #60]	; (24e64 <CC_PalInit+0x4c>)
   24e26:	f000 f86d 	bl	24f04 <CC_PalMutexCreate>
   24e2a:	2800      	cmp	r0, #0
   24e2c:	d1f9      	bne.n	24e22 <CC_PalInit+0xa>
   24e2e:	4c0e      	ldr	r4, [pc, #56]	; (24e68 <CC_PalInit+0x50>)
   24e30:	4620      	mov	r0, r4
   24e32:	f000 f867 	bl	24f04 <CC_PalMutexCreate>
   24e36:	2800      	cmp	r0, #0
   24e38:	d1f3      	bne.n	24e22 <CC_PalInit+0xa>
   24e3a:	4b0c      	ldr	r3, [pc, #48]	; (24e6c <CC_PalInit+0x54>)
   24e3c:	480c      	ldr	r0, [pc, #48]	; (24e70 <CC_PalInit+0x58>)
   24e3e:	601c      	str	r4, [r3, #0]
   24e40:	f000 f860 	bl	24f04 <CC_PalMutexCreate>
   24e44:	4601      	mov	r1, r0
   24e46:	2800      	cmp	r0, #0
   24e48:	d1eb      	bne.n	24e22 <CC_PalInit+0xa>
   24e4a:	f000 f82d 	bl	24ea8 <CC_PalDmaInit>
   24e4e:	4604      	mov	r4, r0
   24e50:	b108      	cbz	r0, 24e56 <CC_PalInit+0x3e>
   24e52:	4620      	mov	r0, r4
   24e54:	bd10      	pop	{r4, pc}
   24e56:	f000 f87b 	bl	24f50 <CC_PalPowerSaveModeInit>
   24e5a:	4620      	mov	r0, r4
   24e5c:	e7fa      	b.n	24e54 <CC_PalInit+0x3c>
   24e5e:	bf00      	nop
   24e60:	200008d0 	.word	0x200008d0
   24e64:	200008c4 	.word	0x200008c4
   24e68:	200008cc 	.word	0x200008cc
   24e6c:	200008d4 	.word	0x200008d4
   24e70:	200008c8 	.word	0x200008c8

00024e74 <CC_PalTerminate>:
   24e74:	b508      	push	{r3, lr}
   24e76:	4808      	ldr	r0, [pc, #32]	; (24e98 <CC_PalTerminate+0x24>)
   24e78:	f000 f84e 	bl	24f18 <CC_PalMutexDestroy>
   24e7c:	4807      	ldr	r0, [pc, #28]	; (24e9c <CC_PalTerminate+0x28>)
   24e7e:	f000 f84b 	bl	24f18 <CC_PalMutexDestroy>
   24e82:	4807      	ldr	r0, [pc, #28]	; (24ea0 <CC_PalTerminate+0x2c>)
   24e84:	f000 f848 	bl	24f18 <CC_PalMutexDestroy>
   24e88:	4806      	ldr	r0, [pc, #24]	; (24ea4 <CC_PalTerminate+0x30>)
   24e8a:	f000 f845 	bl	24f18 <CC_PalMutexDestroy>
   24e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24e92:	f000 b80b 	b.w	24eac <CC_PalDmaTerminate>
   24e96:	bf00      	nop
   24e98:	200008d0 	.word	0x200008d0
   24e9c:	200008c4 	.word	0x200008c4
   24ea0:	200008cc 	.word	0x200008cc
   24ea4:	200008c8 	.word	0x200008c8

00024ea8 <CC_PalDmaInit>:
   24ea8:	2000      	movs	r0, #0
   24eaa:	4770      	bx	lr

00024eac <CC_PalDmaTerminate>:
   24eac:	4770      	bx	lr
   24eae:	bf00      	nop

00024eb0 <CC_PalWaitInterruptRND>:
   24eb0:	b410      	push	{r4}
   24eb2:	4c09      	ldr	r4, [pc, #36]	; (24ed8 <CC_PalWaitInterruptRND+0x28>)
   24eb4:	4602      	mov	r2, r0
   24eb6:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   24eba:	4213      	tst	r3, r2
   24ebc:	d0fb      	beq.n	24eb6 <CC_PalWaitInterruptRND+0x6>
   24ebe:	b121      	cbz	r1, 24eca <CC_PalWaitInterruptRND+0x1a>
   24ec0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   24ec4:	600b      	str	r3, [r1, #0]
   24ec6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   24eca:	4b03      	ldr	r3, [pc, #12]	; (24ed8 <CC_PalWaitInterruptRND+0x28>)
   24ecc:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   24ed0:	2000      	movs	r0, #0
   24ed2:	bc10      	pop	{r4}
   24ed4:	4770      	bx	lr
   24ed6:	bf00      	nop
   24ed8:	5002b000 	.word	0x5002b000

00024edc <CC_PalWaitInterrupt>:
   24edc:	4a04      	ldr	r2, [pc, #16]	; (24ef0 <CC_PalWaitInterrupt+0x14>)
   24ede:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   24ee2:	4218      	tst	r0, r3
   24ee4:	d0fb      	beq.n	24ede <CC_PalWaitInterrupt+0x2>
   24ee6:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   24eea:	2000      	movs	r0, #0
   24eec:	4770      	bx	lr
   24eee:	bf00      	nop
   24ef0:	5002b000 	.word	0x5002b000

00024ef4 <CC_PalMemCopyPlat>:
   24ef4:	f002 ba13 	b.w	2731e <memmove>

00024ef8 <CC_PalMemSetPlat>:
   24ef8:	f002 ba34 	b.w	27364 <memset>

00024efc <CC_PalMemSetZeroPlat>:
   24efc:	460a      	mov	r2, r1
   24efe:	2100      	movs	r1, #0
   24f00:	f002 ba30 	b.w	27364 <memset>

00024f04 <CC_PalMutexCreate>:
   24f04:	b508      	push	{r3, lr}
   24f06:	4b03      	ldr	r3, [pc, #12]	; (24f14 <CC_PalMutexCreate+0x10>)
   24f08:	6802      	ldr	r2, [r0, #0]
   24f0a:	681b      	ldr	r3, [r3, #0]
   24f0c:	6810      	ldr	r0, [r2, #0]
   24f0e:	4798      	blx	r3
   24f10:	2000      	movs	r0, #0
   24f12:	bd08      	pop	{r3, pc}
   24f14:	20000884 	.word	0x20000884

00024f18 <CC_PalMutexDestroy>:
   24f18:	b508      	push	{r3, lr}
   24f1a:	4b03      	ldr	r3, [pc, #12]	; (24f28 <CC_PalMutexDestroy+0x10>)
   24f1c:	6802      	ldr	r2, [r0, #0]
   24f1e:	685b      	ldr	r3, [r3, #4]
   24f20:	6810      	ldr	r0, [r2, #0]
   24f22:	4798      	blx	r3
   24f24:	2000      	movs	r0, #0
   24f26:	bd08      	pop	{r3, pc}
   24f28:	20000884 	.word	0x20000884

00024f2c <CC_PalMutexLock>:
   24f2c:	4b02      	ldr	r3, [pc, #8]	; (24f38 <CC_PalMutexLock+0xc>)
   24f2e:	6802      	ldr	r2, [r0, #0]
   24f30:	689b      	ldr	r3, [r3, #8]
   24f32:	6810      	ldr	r0, [r2, #0]
   24f34:	4718      	bx	r3
   24f36:	bf00      	nop
   24f38:	20000884 	.word	0x20000884

00024f3c <CC_PalMutexUnlock>:
   24f3c:	b508      	push	{r3, lr}
   24f3e:	4b03      	ldr	r3, [pc, #12]	; (24f4c <CC_PalMutexUnlock+0x10>)
   24f40:	6802      	ldr	r2, [r0, #0]
   24f42:	68db      	ldr	r3, [r3, #12]
   24f44:	6810      	ldr	r0, [r2, #0]
   24f46:	4798      	blx	r3
   24f48:	2000      	movs	r0, #0
   24f4a:	bd08      	pop	{r3, pc}
   24f4c:	20000884 	.word	0x20000884

00024f50 <CC_PalPowerSaveModeInit>:
   24f50:	b570      	push	{r4, r5, r6, lr}
   24f52:	4c09      	ldr	r4, [pc, #36]	; (24f78 <CC_PalPowerSaveModeInit+0x28>)
   24f54:	4d09      	ldr	r5, [pc, #36]	; (24f7c <CC_PalPowerSaveModeInit+0x2c>)
   24f56:	6920      	ldr	r0, [r4, #16]
   24f58:	68ab      	ldr	r3, [r5, #8]
   24f5a:	4798      	blx	r3
   24f5c:	b118      	cbz	r0, 24f66 <CC_PalPowerSaveModeInit+0x16>
   24f5e:	4b08      	ldr	r3, [pc, #32]	; (24f80 <CC_PalPowerSaveModeInit+0x30>)
   24f60:	4808      	ldr	r0, [pc, #32]	; (24f84 <CC_PalPowerSaveModeInit+0x34>)
   24f62:	685b      	ldr	r3, [r3, #4]
   24f64:	4798      	blx	r3
   24f66:	4a08      	ldr	r2, [pc, #32]	; (24f88 <CC_PalPowerSaveModeInit+0x38>)
   24f68:	68eb      	ldr	r3, [r5, #12]
   24f6a:	6920      	ldr	r0, [r4, #16]
   24f6c:	2100      	movs	r1, #0
   24f6e:	6011      	str	r1, [r2, #0]
   24f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24f74:	4718      	bx	r3
   24f76:	bf00      	nop
   24f78:	20000894 	.word	0x20000894
   24f7c:	20000884 	.word	0x20000884
   24f80:	20000874 	.word	0x20000874
   24f84:	0002a320 	.word	0x0002a320
   24f88:	20004728 	.word	0x20004728

00024f8c <CC_PalPowerSaveModeSelect>:
   24f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f8e:	4d1a      	ldr	r5, [pc, #104]	; (24ff8 <CC_PalPowerSaveModeSelect+0x6c>)
   24f90:	4e1a      	ldr	r6, [pc, #104]	; (24ffc <CC_PalPowerSaveModeSelect+0x70>)
   24f92:	4604      	mov	r4, r0
   24f94:	68b2      	ldr	r2, [r6, #8]
   24f96:	6928      	ldr	r0, [r5, #16]
   24f98:	4790      	blx	r2
   24f9a:	b9e8      	cbnz	r0, 24fd8 <CC_PalPowerSaveModeSelect+0x4c>
   24f9c:	4f18      	ldr	r7, [pc, #96]	; (25000 <CC_PalPowerSaveModeSelect+0x74>)
   24f9e:	683b      	ldr	r3, [r7, #0]
   24fa0:	b14c      	cbz	r4, 24fb6 <CC_PalPowerSaveModeSelect+0x2a>
   24fa2:	b1a3      	cbz	r3, 24fce <CC_PalPowerSaveModeSelect+0x42>
   24fa4:	2b01      	cmp	r3, #1
   24fa6:	d019      	beq.n	24fdc <CC_PalPowerSaveModeSelect+0x50>
   24fa8:	3b01      	subs	r3, #1
   24faa:	603b      	str	r3, [r7, #0]
   24fac:	6928      	ldr	r0, [r5, #16]
   24fae:	68f3      	ldr	r3, [r6, #12]
   24fb0:	4798      	blx	r3
   24fb2:	2000      	movs	r0, #0
   24fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24fb6:	b943      	cbnz	r3, 24fca <CC_PalPowerSaveModeSelect+0x3e>
   24fb8:	4a12      	ldr	r2, [pc, #72]	; (25004 <CC_PalPowerSaveModeSelect+0x78>)
   24fba:	2101      	movs	r1, #1
   24fbc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   24fc0:	4911      	ldr	r1, [pc, #68]	; (25008 <CC_PalPowerSaveModeSelect+0x7c>)
   24fc2:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   24fc6:	2a00      	cmp	r2, #0
   24fc8:	d1fb      	bne.n	24fc2 <CC_PalPowerSaveModeSelect+0x36>
   24fca:	3301      	adds	r3, #1
   24fcc:	603b      	str	r3, [r7, #0]
   24fce:	68f3      	ldr	r3, [r6, #12]
   24fd0:	6928      	ldr	r0, [r5, #16]
   24fd2:	4798      	blx	r3
   24fd4:	2000      	movs	r0, #0
   24fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24fd8:	480c      	ldr	r0, [pc, #48]	; (2500c <CC_PalPowerSaveModeSelect+0x80>)
   24fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24fdc:	4a0a      	ldr	r2, [pc, #40]	; (25008 <CC_PalPowerSaveModeSelect+0x7c>)
   24fde:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24fe2:	2b00      	cmp	r3, #0
   24fe4:	d1fb      	bne.n	24fde <CC_PalPowerSaveModeSelect+0x52>
   24fe6:	4a07      	ldr	r2, [pc, #28]	; (25004 <CC_PalPowerSaveModeSelect+0x78>)
   24fe8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   24fec:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   24ff0:	f7ff ff00 	bl	24df4 <CC_HalMaskInterrupt>
   24ff4:	683b      	ldr	r3, [r7, #0]
   24ff6:	e7d7      	b.n	24fa8 <CC_PalPowerSaveModeSelect+0x1c>
   24ff8:	20000894 	.word	0x20000894
   24ffc:	20000884 	.word	0x20000884
   25000:	20004728 	.word	0x20004728
   25004:	5002a000 	.word	0x5002a000
   25008:	5002b000 	.word	0x5002b000
   2500c:	ffff8fe9 	.word	0xffff8fe9

00025010 <mutex_init>:
   25010:	4b01      	ldr	r3, [pc, #4]	; (25018 <mutex_init+0x8>)
   25012:	681b      	ldr	r3, [r3, #0]
   25014:	4718      	bx	r3
   25016:	bf00      	nop
   25018:	20000884 	.word	0x20000884

0002501c <mutex_lock>:
   2501c:	4b01      	ldr	r3, [pc, #4]	; (25024 <mutex_lock+0x8>)
   2501e:	689b      	ldr	r3, [r3, #8]
   25020:	4718      	bx	r3
   25022:	bf00      	nop
   25024:	20000884 	.word	0x20000884

00025028 <mutex_unlock>:
   25028:	4b01      	ldr	r3, [pc, #4]	; (25030 <mutex_unlock+0x8>)
   2502a:	68db      	ldr	r3, [r3, #12]
   2502c:	4718      	bx	r3
   2502e:	bf00      	nop
   25030:	20000884 	.word	0x20000884

00025034 <startTrngHW>:
   25034:	2800      	cmp	r0, #0
   25036:	f000 8084 	beq.w	25142 <startTrngHW+0x10e>
   2503a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2503e:	460c      	mov	r4, r1
   25040:	b083      	sub	sp, #12
   25042:	2900      	cmp	r1, #0
   25044:	d078      	beq.n	25138 <startTrngHW+0x104>
   25046:	461d      	mov	r5, r3
   25048:	2b00      	cmp	r3, #0
   2504a:	d075      	beq.n	25138 <startTrngHW+0x104>
   2504c:	4607      	mov	r7, r0
   2504e:	b11a      	cbz	r2, 25058 <startTrngHW+0x24>
   25050:	2201      	movs	r2, #1
   25052:	2300      	movs	r3, #0
   25054:	602a      	str	r2, [r5, #0]
   25056:	6003      	str	r3, [r0, #0]
   25058:	682b      	ldr	r3, [r5, #0]
   2505a:	2b00      	cmp	r3, #0
   2505c:	d067      	beq.n	2512e <startTrngHW+0xfa>
   2505e:	4629      	mov	r1, r5
   25060:	4620      	mov	r0, r4
   25062:	f000 fde9 	bl	25c38 <LLF_RND_GetFastestRosc>
   25066:	4603      	mov	r3, r0
   25068:	2800      	cmp	r0, #0
   2506a:	d161      	bne.n	25130 <startTrngHW+0xfc>
   2506c:	6828      	ldr	r0, [r5, #0]
   2506e:	4621      	mov	r1, r4
   25070:	f000 fdc4 	bl	25bfc <LLF_RND_GetRoscSampleCnt>
   25074:	4603      	mov	r3, r0
   25076:	2800      	cmp	r0, #0
   25078:	d15a      	bne.n	25130 <startTrngHW+0xfc>
   2507a:	682a      	ldr	r2, [r5, #0]
   2507c:	2a08      	cmp	r2, #8
   2507e:	d072      	beq.n	25166 <startTrngHW+0x132>
   25080:	2a04      	cmp	r2, #4
   25082:	d073      	beq.n	2516c <startTrngHW+0x138>
   25084:	f1a2 0802 	sub.w	r8, r2, #2
   25088:	fab8 f888 	clz	r8, r8
   2508c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   25090:	4e38      	ldr	r6, [pc, #224]	; (25174 <startTrngHW+0x140>)
   25092:	2001      	movs	r0, #1
   25094:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   25098:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   2509c:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   250a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   250a2:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   250a6:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   250aa:	428a      	cmp	r2, r1
   250ac:	d1f6      	bne.n	2509c <startTrngHW+0x68>
   250ae:	f04f 0900 	mov.w	r9, #0
   250b2:	9301      	str	r3, [sp, #4]
   250b4:	f04f 30ff 	mov.w	r0, #4294967295
   250b8:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   250bc:	f7ff fe8c 	bl	24dd8 <CC_HalClearInterruptBit>
   250c0:	f06f 021b 	mvn.w	r2, #27
   250c4:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   250c8:	4648      	mov	r0, r9
   250ca:	f7ff fe93 	bl	24df4 <CC_HalMaskInterrupt>
   250ce:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   250d2:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   250d6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   250da:	f7ff fe8b 	bl	24df4 <CC_HalMaskInterrupt>
   250de:	220a      	movs	r2, #10
   250e0:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   250e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   250e6:	2b01      	cmp	r3, #1
   250e8:	9b01      	ldr	r3, [sp, #4]
   250ea:	d02d      	beq.n	25148 <startTrngHW+0x114>
   250ec:	6922      	ldr	r2, [r4, #16]
   250ee:	4922      	ldr	r1, [pc, #136]	; (25178 <startTrngHW+0x144>)
   250f0:	fba1 1202 	umull	r1, r2, r1, r2
   250f4:	0912      	lsrs	r2, r2, #4
   250f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   250f8:	fb01 f202 	mul.w	r2, r1, r2
   250fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   25100:	491c      	ldr	r1, [pc, #112]	; (25174 <startTrngHW+0x140>)
   25102:	03d2      	lsls	r2, r2, #15
   25104:	0992      	lsrs	r2, r2, #6
   25106:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   2510a:	2201      	movs	r2, #1
   2510c:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   25110:	683a      	ldr	r2, [r7, #0]
   25112:	6829      	ldr	r1, [r5, #0]
   25114:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   25118:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   2511c:	603a      	str	r2, [r7, #0]
   2511e:	6829      	ldr	r1, [r5, #0]
   25120:	4618      	mov	r0, r3
   25122:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25126:	603a      	str	r2, [r7, #0]
   25128:	b003      	add	sp, #12
   2512a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2512e:	4b13      	ldr	r3, [pc, #76]	; (2517c <startTrngHW+0x148>)
   25130:	4618      	mov	r0, r3
   25132:	b003      	add	sp, #12
   25134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25138:	4b11      	ldr	r3, [pc, #68]	; (25180 <startTrngHW+0x14c>)
   2513a:	4618      	mov	r0, r3
   2513c:	b003      	add	sp, #12
   2513e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25142:	4b0f      	ldr	r3, [pc, #60]	; (25180 <startTrngHW+0x14c>)
   25144:	4618      	mov	r0, r3
   25146:	4770      	bx	lr
   25148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2514c:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   25150:	3101      	adds	r1, #1
   25152:	d006      	beq.n	25162 <startTrngHW+0x12e>
   25154:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   25158:	4907      	ldr	r1, [pc, #28]	; (25178 <startTrngHW+0x144>)
   2515a:	fba1 1202 	umull	r1, r2, r1, r2
   2515e:	0912      	lsrs	r2, r2, #4
   25160:	e7c9      	b.n	250f6 <startTrngHW+0xc2>
   25162:	2216      	movs	r2, #22
   25164:	e7c7      	b.n	250f6 <startTrngHW+0xc2>
   25166:	f04f 0803 	mov.w	r8, #3
   2516a:	e791      	b.n	25090 <startTrngHW+0x5c>
   2516c:	f04f 0802 	mov.w	r8, #2
   25170:	e78e      	b.n	25090 <startTrngHW+0x5c>
   25172:	bf00      	nop
   25174:	5002b000 	.word	0x5002b000
   25178:	aaaaaaab 	.word	0xaaaaaaab
   2517c:	00f10c31 	.word	0x00f10c31
   25180:	00f10c35 	.word	0x00f10c35

00025184 <LLF_RND_RepetitionCounterTest.part.0>:
   25184:	b570      	push	{r4, r5, r6, lr}
   25186:	00c9      	lsls	r1, r1, #3
   25188:	2400      	movs	r4, #0
   2518a:	1e4e      	subs	r6, r1, #1
   2518c:	f04f 0c01 	mov.w	ip, #1
   25190:	4625      	mov	r5, r4
   25192:	46a6      	mov	lr, r4
   25194:	e008      	b.n	251a8 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   25196:	459e      	cmp	lr, r3
   25198:	d015      	beq.n	251c6 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   2519a:	2501      	movs	r5, #1
   2519c:	45b4      	cmp	ip, r6
   2519e:	d817      	bhi.n	251d0 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   251a0:	3401      	adds	r4, #1
   251a2:	f10c 0c01 	add.w	ip, ip, #1
   251a6:	469e      	mov	lr, r3
   251a8:	0963      	lsrs	r3, r4, #5
   251aa:	f004 011f 	and.w	r1, r4, #31
   251ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   251b2:	291f      	cmp	r1, #31
   251b4:	fa23 f301 	lsr.w	r3, r3, r1
   251b8:	bf18      	it	ne
   251ba:	f003 0301 	andne.w	r3, r3, #1
   251be:	2c00      	cmp	r4, #0
   251c0:	d1e9      	bne.n	25196 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   251c2:	2501      	movs	r5, #1
   251c4:	e7ec      	b.n	251a0 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   251c6:	3501      	adds	r5, #1
   251c8:	4295      	cmp	r5, r2
   251ca:	d1e7      	bne.n	2519c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   251cc:	4801      	ldr	r0, [pc, #4]	; (251d4 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   251ce:	bd70      	pop	{r4, r5, r6, pc}
   251d0:	2000      	movs	r0, #0
   251d2:	bd70      	pop	{r4, r5, r6, pc}
   251d4:	00f10c36 	.word	0x00f10c36

000251d8 <LLF_RND_AdaptiveProportionTest>:
   251d8:	2800      	cmp	r0, #0
   251da:	d03f      	beq.n	2525c <LLF_RND_AdaptiveProportionTest+0x84>
   251dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251e0:	1e4c      	subs	r4, r1, #1
   251e2:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   251e6:	d228      	bcs.n	2523a <LLF_RND_AdaptiveProportionTest+0x62>
   251e8:	b33b      	cbz	r3, 2523a <LLF_RND_AdaptiveProportionTest+0x62>
   251ea:	b332      	cbz	r2, 2523a <LLF_RND_AdaptiveProportionTest+0x62>
   251ec:	f04f 0e00 	mov.w	lr, #0
   251f0:	00cf      	lsls	r7, r1, #3
   251f2:	4676      	mov	r6, lr
   251f4:	4675      	mov	r5, lr
   251f6:	4674      	mov	r4, lr
   251f8:	f103 38ff 	add.w	r8, r3, #4294967295
   251fc:	0961      	lsrs	r1, r4, #5
   251fe:	f004 0c1f 	and.w	ip, r4, #31
   25202:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   25206:	f1bc 0f1f 	cmp.w	ip, #31
   2520a:	fa21 f10c 	lsr.w	r1, r1, ip
   2520e:	bf18      	it	ne
   25210:	f001 0101 	andne.w	r1, r1, #1
   25214:	b1a4      	cbz	r4, 25240 <LLF_RND_AdaptiveProportionTest+0x68>
   25216:	42ab      	cmp	r3, r5
   25218:	d018      	beq.n	2524c <LLF_RND_AdaptiveProportionTest+0x74>
   2521a:	428e      	cmp	r6, r1
   2521c:	bf08      	it	eq
   2521e:	f10e 0e01 	addeq.w	lr, lr, #1
   25222:	45a8      	cmp	r8, r5
   25224:	d015      	beq.n	25252 <LLF_RND_AdaptiveProportionTest+0x7a>
   25226:	3501      	adds	r5, #1
   25228:	4631      	mov	r1, r6
   2522a:	3401      	adds	r4, #1
   2522c:	42bc      	cmp	r4, r7
   2522e:	d001      	beq.n	25234 <LLF_RND_AdaptiveProportionTest+0x5c>
   25230:	460e      	mov	r6, r1
   25232:	e7e3      	b.n	251fc <LLF_RND_AdaptiveProportionTest+0x24>
   25234:	2000      	movs	r0, #0
   25236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2523a:	4809      	ldr	r0, [pc, #36]	; (25260 <LLF_RND_AdaptiveProportionTest+0x88>)
   2523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25240:	f04f 0e01 	mov.w	lr, #1
   25244:	4674      	mov	r4, lr
   25246:	4675      	mov	r5, lr
   25248:	460e      	mov	r6, r1
   2524a:	e7d7      	b.n	251fc <LLF_RND_AdaptiveProportionTest+0x24>
   2524c:	2501      	movs	r5, #1
   2524e:	46ae      	mov	lr, r5
   25250:	e7eb      	b.n	2522a <LLF_RND_AdaptiveProportionTest+0x52>
   25252:	4572      	cmp	r2, lr
   25254:	d3f1      	bcc.n	2523a <LLF_RND_AdaptiveProportionTest+0x62>
   25256:	4631      	mov	r1, r6
   25258:	461d      	mov	r5, r3
   2525a:	e7e6      	b.n	2522a <LLF_RND_AdaptiveProportionTest+0x52>
   2525c:	4800      	ldr	r0, [pc, #0]	; (25260 <LLF_RND_AdaptiveProportionTest+0x88>)
   2525e:	4770      	bx	lr
   25260:	00f10c37 	.word	0x00f10c37

00025264 <getTrngSource>:
   25264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25268:	b091      	sub	sp, #68	; 0x44
   2526a:	460d      	mov	r5, r1
   2526c:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   25270:	4681      	mov	r9, r0
   25272:	2900      	cmp	r1, #0
   25274:	d14c      	bne.n	25310 <getTrngSource+0xac>
   25276:	6928      	ldr	r0, [r5, #16]
   25278:	9006      	str	r0, [sp, #24]
   2527a:	981a      	ldr	r0, [sp, #104]	; 0x68
   2527c:	601c      	str	r4, [r3, #0]
   2527e:	2300      	movs	r3, #0
   25280:	6003      	str	r3, [r0, #0]
   25282:	2a00      	cmp	r2, #0
   25284:	f000 8124 	beq.w	254d0 <getTrngSource+0x26c>
   25288:	4b9d      	ldr	r3, [pc, #628]	; (25500 <getTrngSource+0x29c>)
   2528a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2528c:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   25290:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25294:	429a      	cmp	r2, r3
   25296:	d147      	bne.n	25328 <getTrngSource+0xc4>
   25298:	290a      	cmp	r1, #10
   2529a:	d145      	bne.n	25328 <getTrngSource+0xc4>
   2529c:	f899 3003 	ldrb.w	r3, [r9, #3]
   252a0:	9308      	str	r3, [sp, #32]
   252a2:	f104 0308 	add.w	r3, r4, #8
   252a6:	9a06      	ldr	r2, [sp, #24]
   252a8:	9307      	str	r3, [sp, #28]
   252aa:	4b96      	ldr	r3, [pc, #600]	; (25504 <getTrngSource+0x2a0>)
   252ac:	4c94      	ldr	r4, [pc, #592]	; (25500 <getTrngSource+0x29c>)
   252ae:	fba3 1302 	umull	r1, r3, r3, r2
   252b2:	089b      	lsrs	r3, r3, #2
   252b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   252b8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   252bc:	9303      	str	r3, [sp, #12]
   252be:	2304      	movs	r3, #4
   252c0:	9305      	str	r3, [sp, #20]
   252c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   252c4:	9e06      	ldr	r6, [sp, #24]
   252c6:	601e      	str	r6, [r3, #0]
   252c8:	2e00      	cmp	r6, #0
   252ca:	d033      	beq.n	25334 <getTrngSource+0xd0>
   252cc:	f8dd 801c 	ldr.w	r8, [sp, #28]
   252d0:	2700      	movs	r7, #0
   252d2:	f04f 0a01 	mov.w	sl, #1
   252d6:	f000 fcbf 	bl	25c58 <LLF_RND_TurnOffTrng>
   252da:	2300      	movs	r3, #0
   252dc:	9309      	str	r3, [sp, #36]	; 0x24
   252de:	f1b9 0f00 	cmp.w	r9, #0
   252e2:	f000 80df 	beq.w	254a4 <getTrngSource+0x240>
   252e6:	2d00      	cmp	r5, #0
   252e8:	f000 80dc 	beq.w	254a4 <getTrngSource+0x240>
   252ec:	9b08      	ldr	r3, [sp, #32]
   252ee:	b1eb      	cbz	r3, 2532c <getTrngSource+0xc8>
   252f0:	a908      	add	r1, sp, #32
   252f2:	4628      	mov	r0, r5
   252f4:	f000 fca0 	bl	25c38 <LLF_RND_GetFastestRosc>
   252f8:	2800      	cmp	r0, #0
   252fa:	d03e      	beq.n	2537a <getTrngSource+0x116>
   252fc:	4b82      	ldr	r3, [pc, #520]	; (25508 <getTrngSource+0x2a4>)
   252fe:	4298      	cmp	r0, r3
   25300:	d118      	bne.n	25334 <getTrngSource+0xd0>
   25302:	9003      	str	r0, [sp, #12]
   25304:	f000 fca8 	bl	25c58 <LLF_RND_TurnOffTrng>
   25308:	9803      	ldr	r0, [sp, #12]
   2530a:	b011      	add	sp, #68	; 0x44
   2530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25310:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   25314:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   25318:	3601      	adds	r6, #1
   2531a:	bf14      	ite	ne
   2531c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   25320:	f44f 7004 	moveq.w	r0, #528	; 0x210
   25324:	9006      	str	r0, [sp, #24]
   25326:	e7a8      	b.n	2527a <getTrngSource+0x16>
   25328:	4878      	ldr	r0, [pc, #480]	; (2550c <getTrngSource+0x2a8>)
   2532a:	e7ea      	b.n	25302 <getTrngSource+0x9e>
   2532c:	4878      	ldr	r0, [pc, #480]	; (25510 <getTrngSource+0x2ac>)
   2532e:	4b76      	ldr	r3, [pc, #472]	; (25508 <getTrngSource+0x2a4>)
   25330:	4298      	cmp	r0, r3
   25332:	d0e6      	beq.n	25302 <getTrngSource+0x9e>
   25334:	9b08      	ldr	r3, [sp, #32]
   25336:	2b08      	cmp	r3, #8
   25338:	f000 80c8 	beq.w	254cc <getTrngSource+0x268>
   2533c:	005b      	lsls	r3, r3, #1
   2533e:	2200      	movs	r2, #0
   25340:	9308      	str	r3, [sp, #32]
   25342:	9200      	str	r2, [sp, #0]
   25344:	ab08      	add	r3, sp, #32
   25346:	4629      	mov	r1, r5
   25348:	4648      	mov	r0, r9
   2534a:	f7ff fe73 	bl	25034 <startTrngHW>
   2534e:	4b70      	ldr	r3, [pc, #448]	; (25510 <getTrngSource+0x2ac>)
   25350:	4298      	cmp	r0, r3
   25352:	f000 80b7 	beq.w	254c4 <getTrngSource+0x260>
   25356:	2800      	cmp	r0, #0
   25358:	d1d3      	bne.n	25302 <getTrngSource+0x9e>
   2535a:	f8d9 2000 	ldr.w	r2, [r9]
   2535e:	0a13      	lsrs	r3, r2, #8
   25360:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   25364:	4313      	orrs	r3, r2
   25366:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2536a:	f8c9 3000 	str.w	r3, [r9]
   2536e:	9b05      	ldr	r3, [sp, #20]
   25370:	3b01      	subs	r3, #1
   25372:	9305      	str	r3, [sp, #20]
   25374:	d1a5      	bne.n	252c2 <getTrngSource+0x5e>
   25376:	2000      	movs	r0, #0
   25378:	e7c3      	b.n	25302 <getTrngSource+0x9e>
   2537a:	9808      	ldr	r0, [sp, #32]
   2537c:	4629      	mov	r1, r5
   2537e:	f000 fc3d 	bl	25bfc <LLF_RND_GetRoscSampleCnt>
   25382:	2800      	cmp	r0, #0
   25384:	d1ba      	bne.n	252fc <getTrngSource+0x98>
   25386:	9b08      	ldr	r3, [sp, #32]
   25388:	2b08      	cmp	r3, #8
   2538a:	f000 8095 	beq.w	254b8 <getTrngSource+0x254>
   2538e:	2b04      	cmp	r3, #4
   25390:	f000 8095 	beq.w	254be <getTrngSource+0x25a>
   25394:	f1a3 0302 	sub.w	r3, r3, #2
   25398:	fab3 f383 	clz	r3, r3
   2539c:	095b      	lsrs	r3, r3, #5
   2539e:	9304      	str	r3, [sp, #16]
   253a0:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   253a4:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   253a8:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   253ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   253ae:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   253b2:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   253b6:	4293      	cmp	r3, r2
   253b8:	d1f6      	bne.n	253a8 <getTrngSource+0x144>
   253ba:	f04f 0b00 	mov.w	fp, #0
   253be:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   253c2:	f04f 30ff 	mov.w	r0, #4294967295
   253c6:	f7ff fd07 	bl	24dd8 <CC_HalClearInterruptBit>
   253ca:	f06f 031b 	mvn.w	r3, #27
   253ce:	4658      	mov	r0, fp
   253d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   253d4:	f7ff fd0e 	bl	24df4 <CC_HalMaskInterrupt>
   253d8:	9b04      	ldr	r3, [sp, #16]
   253da:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   253de:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   253e2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   253e6:	f7ff fd05 	bl	24df4 <CC_HalMaskInterrupt>
   253ea:	230a      	movs	r3, #10
   253ec:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   253f0:	692b      	ldr	r3, [r5, #16]
   253f2:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   253f6:	fbab 2303 	umull	r2, r3, fp, r3
   253fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   253fc:	091b      	lsrs	r3, r3, #4
   253fe:	fb02 f303 	mul.w	r3, r2, r3
   25402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25406:	03db      	lsls	r3, r3, #15
   25408:	099b      	lsrs	r3, r3, #6
   2540a:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   2540e:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   25412:	9908      	ldr	r1, [sp, #32]
   25414:	f8d9 2000 	ldr.w	r2, [r9]
   25418:	020b      	lsls	r3, r1, #8
   2541a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2541e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   25422:	4313      	orrs	r3, r2
   25424:	f8c9 3000 	str.w	r3, [r9]
   25428:	a809      	add	r0, sp, #36	; 0x24
   2542a:	f000 fbd7 	bl	25bdc <LLF_RND_WaitRngInterrupt>
   2542e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25430:	f003 031a 	and.w	r3, r3, #26
   25434:	4303      	orrs	r3, r0
   25436:	f47f af7d 	bne.w	25334 <getTrngSource+0xd0>
   2543a:	fbab 3b06 	umull	r3, fp, fp, r6
   2543e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   25442:	930a      	str	r3, [sp, #40]	; 0x28
   25444:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   25448:	930b      	str	r3, [sp, #44]	; 0x2c
   2544a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   2544e:	930c      	str	r3, [sp, #48]	; 0x30
   25450:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   25454:	930d      	str	r3, [sp, #52]	; 0x34
   25456:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2545a:	930e      	str	r3, [sp, #56]	; 0x38
   2545c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   25460:	930f      	str	r3, [sp, #60]	; 0x3c
   25462:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   25466:	d101      	bne.n	2546c <getTrngSource+0x208>
   25468:	9b03      	ldr	r3, [sp, #12]
   2546a:	b9eb      	cbnz	r3, 254a8 <getTrngSource+0x244>
   2546c:	4640      	mov	r0, r8
   2546e:	2218      	movs	r2, #24
   25470:	a90a      	add	r1, sp, #40	; 0x28
   25472:	3e18      	subs	r6, #24
   25474:	f108 0818 	add.w	r8, r8, #24
   25478:	f7ff fd3c 	bl	24ef4 <CC_PalMemCopyPlat>
   2547c:	3701      	adds	r7, #1
   2547e:	2e00      	cmp	r6, #0
   25480:	f47f af29 	bne.w	252d6 <getTrngSource+0x72>
   25484:	9b06      	ldr	r3, [sp, #24]
   25486:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   2548a:	d836      	bhi.n	254fa <getTrngSource+0x296>
   2548c:	9e07      	ldr	r6, [sp, #28]
   2548e:	696a      	ldr	r2, [r5, #20]
   25490:	4619      	mov	r1, r3
   25492:	4630      	mov	r0, r6
   25494:	461f      	mov	r7, r3
   25496:	f7ff fe75 	bl	25184 <LLF_RND_RepetitionCounterTest.part.0>
   2549a:	b320      	cbz	r0, 254e6 <getTrngSource+0x282>
   2549c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2549e:	2300      	movs	r3, #0
   254a0:	6013      	str	r3, [r2, #0]
   254a2:	e72b      	b.n	252fc <getTrngSource+0x98>
   254a4:	481b      	ldr	r0, [pc, #108]	; (25514 <getTrngSource+0x2b0>)
   254a6:	e729      	b.n	252fc <getTrngSource+0x98>
   254a8:	4640      	mov	r0, r8
   254aa:	461a      	mov	r2, r3
   254ac:	a90a      	add	r1, sp, #40	; 0x28
   254ae:	1af6      	subs	r6, r6, r3
   254b0:	4498      	add	r8, r3
   254b2:	f7ff fd1f 	bl	24ef4 <CC_PalMemCopyPlat>
   254b6:	e7e1      	b.n	2547c <getTrngSource+0x218>
   254b8:	2303      	movs	r3, #3
   254ba:	9304      	str	r3, [sp, #16]
   254bc:	e770      	b.n	253a0 <getTrngSource+0x13c>
   254be:	2302      	movs	r3, #2
   254c0:	9304      	str	r3, [sp, #16]
   254c2:	e76d      	b.n	253a0 <getTrngSource+0x13c>
   254c4:	6a2b      	ldr	r3, [r5, #32]
   254c6:	2b00      	cmp	r3, #0
   254c8:	f43f af1b 	beq.w	25302 <getTrngSource+0x9e>
   254cc:	4812      	ldr	r0, [pc, #72]	; (25518 <getTrngSource+0x2b4>)
   254ce:	e718      	b.n	25302 <getTrngSource+0x9e>
   254d0:	9100      	str	r1, [sp, #0]
   254d2:	ab08      	add	r3, sp, #32
   254d4:	2201      	movs	r2, #1
   254d6:	4629      	mov	r1, r5
   254d8:	4648      	mov	r0, r9
   254da:	f7ff fdab 	bl	25034 <startTrngHW>
   254de:	2800      	cmp	r0, #0
   254e0:	f43f aedf 	beq.w	252a2 <getTrngSource+0x3e>
   254e4:	e70d      	b.n	25302 <getTrngSource+0x9e>
   254e6:	69aa      	ldr	r2, [r5, #24]
   254e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   254ec:	4639      	mov	r1, r7
   254ee:	4630      	mov	r0, r6
   254f0:	f7ff fe72 	bl	251d8 <LLF_RND_AdaptiveProportionTest>
   254f4:	2800      	cmp	r0, #0
   254f6:	d1d1      	bne.n	2549c <getTrngSource+0x238>
   254f8:	e73d      	b.n	25376 <getTrngSource+0x112>
   254fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   254fc:	601e      	str	r6, [r3, #0]
   254fe:	e719      	b.n	25334 <getTrngSource+0xd0>
   25500:	5002b000 	.word	0x5002b000
   25504:	aaaaaaab 	.word	0xaaaaaaab
   25508:	00f10c02 	.word	0x00f10c02
   2550c:	00f10c30 	.word	0x00f10c30
   25510:	00f10c31 	.word	0x00f10c31
   25514:	00f10c35 	.word	0x00f10c35
   25518:	00f10c32 	.word	0x00f10c32

0002551c <LLF_RND_GetTrngSource>:
   2551c:	b410      	push	{r4}
   2551e:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   25522:	9401      	str	r4, [sp, #4]
   25524:	9c03      	ldr	r4, [sp, #12]
   25526:	9402      	str	r4, [sp, #8]
   25528:	2400      	movs	r4, #0
   2552a:	9403      	str	r4, [sp, #12]
   2552c:	bc10      	pop	{r4}
   2552e:	f7ff be99 	b.w	25264 <getTrngSource>
   25532:	bf00      	nop

00025534 <LLF_RND_RunTrngStartupTest>:
   25534:	b510      	push	{r4, lr}
   25536:	b086      	sub	sp, #24
   25538:	ab05      	add	r3, sp, #20
   2553a:	2401      	movs	r4, #1
   2553c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   25540:	9300      	str	r3, [sp, #0]
   25542:	2200      	movs	r2, #0
   25544:	ab04      	add	r3, sp, #16
   25546:	f7ff fe8d 	bl	25264 <getTrngSource>
   2554a:	b006      	add	sp, #24
   2554c:	bd10      	pop	{r4, pc}
   2554e:	bf00      	nop

00025550 <mbedtls_hardware_poll>:
   25550:	b5f0      	push	{r4, r5, r6, r7, lr}
   25552:	b089      	sub	sp, #36	; 0x24
   25554:	9205      	str	r2, [sp, #20]
   25556:	2900      	cmp	r1, #0
   25558:	d064      	beq.n	25624 <mbedtls_hardware_poll+0xd4>
   2555a:	461c      	mov	r4, r3
   2555c:	2b00      	cmp	r3, #0
   2555e:	d061      	beq.n	25624 <mbedtls_hardware_poll+0xd4>
   25560:	4615      	mov	r5, r2
   25562:	2a00      	cmp	r2, #0
   25564:	d05e      	beq.n	25624 <mbedtls_hardware_poll+0xd4>
   25566:	4f31      	ldr	r7, [pc, #196]	; (2562c <mbedtls_hardware_poll+0xdc>)
   25568:	460e      	mov	r6, r1
   2556a:	6838      	ldr	r0, [r7, #0]
   2556c:	f04f 31ff 	mov.w	r1, #4294967295
   25570:	f7ff fcdc 	bl	24f2c <CC_PalMutexLock>
   25574:	2800      	cmp	r0, #0
   25576:	d14b      	bne.n	25610 <mbedtls_hardware_poll+0xc0>
   25578:	2000      	movs	r0, #0
   2557a:	f7ff fd07 	bl	24f8c <CC_PalPowerSaveModeSelect>
   2557e:	2800      	cmp	r0, #0
   25580:	d142      	bne.n	25608 <mbedtls_hardware_poll+0xb8>
   25582:	482b      	ldr	r0, [pc, #172]	; (25630 <mbedtls_hardware_poll+0xe0>)
   25584:	f000 fa9a 	bl	25abc <RNG_PLAT_SetUserRngParameters>
   25588:	b1d8      	cbz	r0, 255c2 <mbedtls_hardware_poll+0x72>
   2558a:	2001      	movs	r0, #1
   2558c:	f04f 36ff 	mov.w	r6, #4294967295
   25590:	f7ff fcfc 	bl	24f8c <CC_PalPowerSaveModeSelect>
   25594:	2800      	cmp	r0, #0
   25596:	d133      	bne.n	25600 <mbedtls_hardware_poll+0xb0>
   25598:	4826      	ldr	r0, [pc, #152]	; (25634 <mbedtls_hardware_poll+0xe4>)
   2559a:	f44f 7108 	mov.w	r1, #544	; 0x220
   2559e:	f7fe fe63 	bl	24268 <mbedtls_zeroize_internal>
   255a2:	4825      	ldr	r0, [pc, #148]	; (25638 <mbedtls_hardware_poll+0xe8>)
   255a4:	2104      	movs	r1, #4
   255a6:	f7fe fe5f 	bl	24268 <mbedtls_zeroize_internal>
   255aa:	4821      	ldr	r0, [pc, #132]	; (25630 <mbedtls_hardware_poll+0xe0>)
   255ac:	2128      	movs	r1, #40	; 0x28
   255ae:	f7fe fe5b 	bl	24268 <mbedtls_zeroize_internal>
   255b2:	6838      	ldr	r0, [r7, #0]
   255b4:	f7ff fcc2 	bl	24f3c <CC_PalMutexUnlock>
   255b8:	2800      	cmp	r0, #0
   255ba:	d12d      	bne.n	25618 <mbedtls_hardware_poll+0xc8>
   255bc:	4630      	mov	r0, r6
   255be:	b009      	add	sp, #36	; 0x24
   255c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   255c2:	4b1c      	ldr	r3, [pc, #112]	; (25634 <mbedtls_hardware_poll+0xe4>)
   255c4:	9302      	str	r3, [sp, #8]
   255c6:	ab07      	add	r3, sp, #28
   255c8:	9003      	str	r0, [sp, #12]
   255ca:	4602      	mov	r2, r0
   255cc:	9300      	str	r3, [sp, #0]
   255ce:	4918      	ldr	r1, [pc, #96]	; (25630 <mbedtls_hardware_poll+0xe0>)
   255d0:	4819      	ldr	r0, [pc, #100]	; (25638 <mbedtls_hardware_poll+0xe8>)
   255d2:	9401      	str	r4, [sp, #4]
   255d4:	ab05      	add	r3, sp, #20
   255d6:	f7ff ffa1 	bl	2551c <LLF_RND_GetTrngSource>
   255da:	4603      	mov	r3, r0
   255dc:	2800      	cmp	r0, #0
   255de:	d1d4      	bne.n	2558a <mbedtls_hardware_poll+0x3a>
   255e0:	6822      	ldr	r2, [r4, #0]
   255e2:	42aa      	cmp	r2, r5
   255e4:	d3d1      	bcc.n	2558a <mbedtls_hardware_poll+0x3a>
   255e6:	9907      	ldr	r1, [sp, #28]
   255e8:	4630      	mov	r0, r6
   255ea:	3108      	adds	r1, #8
   255ec:	462a      	mov	r2, r5
   255ee:	461e      	mov	r6, r3
   255f0:	f7ff fc80 	bl	24ef4 <CC_PalMemCopyPlat>
   255f4:	6025      	str	r5, [r4, #0]
   255f6:	2001      	movs	r0, #1
   255f8:	f7ff fcc8 	bl	24f8c <CC_PalPowerSaveModeSelect>
   255fc:	2800      	cmp	r0, #0
   255fe:	d0cb      	beq.n	25598 <mbedtls_hardware_poll+0x48>
   25600:	480e      	ldr	r0, [pc, #56]	; (2563c <mbedtls_hardware_poll+0xec>)
   25602:	f7fe fd33 	bl	2406c <CC_PalAbort>
   25606:	e7c7      	b.n	25598 <mbedtls_hardware_poll+0x48>
   25608:	480d      	ldr	r0, [pc, #52]	; (25640 <mbedtls_hardware_poll+0xf0>)
   2560a:	f7fe fd2f 	bl	2406c <CC_PalAbort>
   2560e:	e7b8      	b.n	25582 <mbedtls_hardware_poll+0x32>
   25610:	480c      	ldr	r0, [pc, #48]	; (25644 <mbedtls_hardware_poll+0xf4>)
   25612:	f7fe fd2b 	bl	2406c <CC_PalAbort>
   25616:	e7af      	b.n	25578 <mbedtls_hardware_poll+0x28>
   25618:	480b      	ldr	r0, [pc, #44]	; (25648 <mbedtls_hardware_poll+0xf8>)
   2561a:	f7fe fd27 	bl	2406c <CC_PalAbort>
   2561e:	4630      	mov	r0, r6
   25620:	b009      	add	sp, #36	; 0x24
   25622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25624:	f04f 36ff 	mov.w	r6, #4294967295
   25628:	e7c8      	b.n	255bc <mbedtls_hardware_poll+0x6c>
   2562a:	bf00      	nop
   2562c:	200008d4 	.word	0x200008d4
   25630:	20004950 	.word	0x20004950
   25634:	20004730 	.word	0x20004730
   25638:	2000472c 	.word	0x2000472c
   2563c:	0002a2e8 	.word	0x0002a2e8
   25640:	0002a2c8 	.word	0x0002a2c8
   25644:	0002a2b0 	.word	0x0002a2b0
   25648:	0002a340 	.word	0x0002a340

0002564c <cc_mbedtls_aes_init>:
   2564c:	b510      	push	{r4, lr}
   2564e:	4604      	mov	r4, r0
   25650:	b130      	cbz	r0, 25660 <cc_mbedtls_aes_init+0x14>
   25652:	2200      	movs	r2, #0
   25654:	2301      	movs	r3, #1
   25656:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   2565a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2565e:	bd10      	pop	{r4, pc}
   25660:	4801      	ldr	r0, [pc, #4]	; (25668 <cc_mbedtls_aes_init+0x1c>)
   25662:	f7fe fd03 	bl	2406c <CC_PalAbort>
   25666:	e7f4      	b.n	25652 <cc_mbedtls_aes_init+0x6>
   25668:	0002a358 	.word	0x0002a358

0002566c <cc_mbedtls_aes_free>:
   2566c:	b118      	cbz	r0, 25676 <cc_mbedtls_aes_free+0xa>
   2566e:	2274      	movs	r2, #116	; 0x74
   25670:	2100      	movs	r1, #0
   25672:	f7ff bc41 	b.w	24ef8 <CC_PalMemSetPlat>
   25676:	4770      	bx	lr

00025678 <cc_mbedtls_aes_setkey_enc>:
   25678:	b190      	cbz	r0, 256a0 <cc_mbedtls_aes_setkey_enc+0x28>
   2567a:	b1a1      	cbz	r1, 256a6 <cc_mbedtls_aes_setkey_enc+0x2e>
   2567c:	b510      	push	{r4, lr}
   2567e:	2a80      	cmp	r2, #128	; 0x80
   25680:	f04f 0400 	mov.w	r4, #0
   25684:	6384      	str	r4, [r0, #56]	; 0x38
   25686:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   2568a:	d106      	bne.n	2569a <cc_mbedtls_aes_setkey_enc+0x22>
   2568c:	2210      	movs	r2, #16
   2568e:	6304      	str	r4, [r0, #48]	; 0x30
   25690:	4410      	add	r0, r2
   25692:	f7ff fc2f 	bl	24ef4 <CC_PalMemCopyPlat>
   25696:	4620      	mov	r0, r4
   25698:	bd10      	pop	{r4, pc}
   2569a:	f06f 001f 	mvn.w	r0, #31
   2569e:	bd10      	pop	{r4, pc}
   256a0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   256a4:	4770      	bx	lr
   256a6:	f06f 001f 	mvn.w	r0, #31
   256aa:	4770      	bx	lr

000256ac <cc_mbedtls_aes_crypt_ecb>:
   256ac:	b328      	cbz	r0, 256fa <cc_mbedtls_aes_crypt_ecb+0x4e>
   256ae:	b322      	cbz	r2, 256fa <cc_mbedtls_aes_crypt_ecb+0x4e>
   256b0:	b31b      	cbz	r3, 256fa <cc_mbedtls_aes_crypt_ecb+0x4e>
   256b2:	2901      	cmp	r1, #1
   256b4:	d821      	bhi.n	256fa <cc_mbedtls_aes_crypt_ecb+0x4e>
   256b6:	b570      	push	{r4, r5, r6, lr}
   256b8:	4604      	mov	r4, r0
   256ba:	6b81      	ldr	r1, [r0, #56]	; 0x38
   256bc:	b086      	sub	sp, #24
   256be:	d017      	beq.n	256f0 <cc_mbedtls_aes_crypt_ecb+0x44>
   256c0:	2901      	cmp	r1, #1
   256c2:	d117      	bne.n	256f4 <cc_mbedtls_aes_crypt_ecb+0x48>
   256c4:	2510      	movs	r5, #16
   256c6:	2100      	movs	r1, #0
   256c8:	eb0d 0605 	add.w	r6, sp, r5
   256cc:	6361      	str	r1, [r4, #52]	; 0x34
   256ce:	4610      	mov	r0, r2
   256d0:	9500      	str	r5, [sp, #0]
   256d2:	9601      	str	r6, [sp, #4]
   256d4:	aa02      	add	r2, sp, #8
   256d6:	4629      	mov	r1, r5
   256d8:	f000 faca 	bl	25c70 <SetDataBuffersInfo>
   256dc:	b950      	cbnz	r0, 256f4 <cc_mbedtls_aes_crypt_ecb+0x48>
   256de:	462b      	mov	r3, r5
   256e0:	4632      	mov	r2, r6
   256e2:	a902      	add	r1, sp, #8
   256e4:	4620      	mov	r0, r4
   256e6:	f000 fd4b 	bl	26180 <ProcessAesDrv>
   256ea:	b918      	cbnz	r0, 256f4 <cc_mbedtls_aes_crypt_ecb+0x48>
   256ec:	b006      	add	sp, #24
   256ee:	bd70      	pop	{r4, r5, r6, pc}
   256f0:	2900      	cmp	r1, #0
   256f2:	d0e7      	beq.n	256c4 <cc_mbedtls_aes_crypt_ecb+0x18>
   256f4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   256f8:	e7f8      	b.n	256ec <cc_mbedtls_aes_crypt_ecb+0x40>
   256fa:	f06f 0021 	mvn.w	r0, #33	; 0x21
   256fe:	4770      	bx	lr

00025700 <cc_mbedtls_sha256_init>:
   25700:	b510      	push	{r4, lr}
   25702:	4604      	mov	r4, r0
   25704:	b128      	cbz	r0, 25712 <cc_mbedtls_sha256_init+0x12>
   25706:	4620      	mov	r0, r4
   25708:	21f4      	movs	r1, #244	; 0xf4
   2570a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2570e:	f7ff bbf5 	b.w	24efc <CC_PalMemSetZeroPlat>
   25712:	4804      	ldr	r0, [pc, #16]	; (25724 <cc_mbedtls_sha256_init+0x24>)
   25714:	f7fe fcaa 	bl	2406c <CC_PalAbort>
   25718:	4620      	mov	r0, r4
   2571a:	21f4      	movs	r1, #244	; 0xf4
   2571c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25720:	f7ff bbec 	b.w	24efc <CC_PalMemSetZeroPlat>
   25724:	0002a36c 	.word	0x0002a36c

00025728 <cc_mbedtls_sha256_free>:
   25728:	b110      	cbz	r0, 25730 <cc_mbedtls_sha256_free+0x8>
   2572a:	21f4      	movs	r1, #244	; 0xf4
   2572c:	f7fe bd9c 	b.w	24268 <mbedtls_zeroize_internal>
   25730:	4770      	bx	lr
   25732:	bf00      	nop

00025734 <cc_mbedtls_sha256_starts>:
   25734:	b508      	push	{r3, lr}
   25736:	b161      	cbz	r1, 25752 <cc_mbedtls_sha256_starts+0x1e>
   25738:	2901      	cmp	r1, #1
   2573a:	d107      	bne.n	2574c <cc_mbedtls_sha256_starts+0x18>
   2573c:	2102      	movs	r1, #2
   2573e:	f000 f85b 	bl	257f8 <mbedtls_sha_starts_internal>
   25742:	2800      	cmp	r0, #0
   25744:	bf18      	it	ne
   25746:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   2574a:	bd08      	pop	{r3, pc}
   2574c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   25750:	bd08      	pop	{r3, pc}
   25752:	2101      	movs	r1, #1
   25754:	f000 f850 	bl	257f8 <mbedtls_sha_starts_internal>
   25758:	e7f3      	b.n	25742 <cc_mbedtls_sha256_starts+0xe>
   2575a:	bf00      	nop

0002575c <cc_mbedtls_sha256_update>:
   2575c:	b530      	push	{r4, r5, lr}
   2575e:	4605      	mov	r5, r0
   25760:	1888      	adds	r0, r1, r2
   25762:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   25766:	b0a1      	sub	sp, #132	; 0x84
   25768:	460b      	mov	r3, r1
   2576a:	4614      	mov	r4, r2
   2576c:	d801      	bhi.n	25772 <cc_mbedtls_sha256_update+0x16>
   2576e:	2a80      	cmp	r2, #128	; 0x80
   25770:	d90c      	bls.n	2578c <cc_mbedtls_sha256_update+0x30>
   25772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25776:	d917      	bls.n	257a8 <cc_mbedtls_sha256_update+0x4c>
   25778:	4622      	mov	r2, r4
   2577a:	4619      	mov	r1, r3
   2577c:	4628      	mov	r0, r5
   2577e:	f000 f87d 	bl	2587c <mbedtls_sha_update_internal>
   25782:	4604      	mov	r4, r0
   25784:	b984      	cbnz	r4, 257a8 <cc_mbedtls_sha256_update+0x4c>
   25786:	4620      	mov	r0, r4
   25788:	b021      	add	sp, #132	; 0x84
   2578a:	bd30      	pop	{r4, r5, pc}
   2578c:	4668      	mov	r0, sp
   2578e:	f7ff fbb1 	bl	24ef4 <CC_PalMemCopyPlat>
   25792:	4622      	mov	r2, r4
   25794:	4669      	mov	r1, sp
   25796:	4628      	mov	r0, r5
   25798:	f000 f870 	bl	2587c <mbedtls_sha_update_internal>
   2579c:	2180      	movs	r1, #128	; 0x80
   2579e:	4604      	mov	r4, r0
   257a0:	4668      	mov	r0, sp
   257a2:	f7ff fbab 	bl	24efc <CC_PalMemSetZeroPlat>
   257a6:	e7ed      	b.n	25784 <cc_mbedtls_sha256_update+0x28>
   257a8:	f06f 0436 	mvn.w	r4, #54	; 0x36
   257ac:	e7eb      	b.n	25786 <cc_mbedtls_sha256_update+0x2a>
   257ae:	bf00      	nop

000257b0 <cc_mbedtls_sha256_finish>:
   257b0:	b570      	push	{r4, r5, r6, lr}
   257b2:	b1e8      	cbz	r0, 257f0 <cc_mbedtls_sha256_finish+0x40>
   257b4:	460e      	mov	r6, r1
   257b6:	b1d9      	cbz	r1, 257f0 <cc_mbedtls_sha256_finish+0x40>
   257b8:	4604      	mov	r4, r0
   257ba:	f000 f831 	bl	25820 <mbedtls_sha_finish_internal>
   257be:	4605      	mov	r5, r0
   257c0:	b9b0      	cbnz	r0, 257f0 <cc_mbedtls_sha256_finish+0x40>
   257c2:	6823      	ldr	r3, [r4, #0]
   257c4:	2b01      	cmp	r3, #1
   257c6:	d00b      	beq.n	257e0 <cc_mbedtls_sha256_finish+0x30>
   257c8:	2b02      	cmp	r3, #2
   257ca:	d001      	beq.n	257d0 <cc_mbedtls_sha256_finish+0x20>
   257cc:	4628      	mov	r0, r5
   257ce:	bd70      	pop	{r4, r5, r6, pc}
   257d0:	221c      	movs	r2, #28
   257d2:	f104 0108 	add.w	r1, r4, #8
   257d6:	4630      	mov	r0, r6
   257d8:	f7ff fb8c 	bl	24ef4 <CC_PalMemCopyPlat>
   257dc:	4628      	mov	r0, r5
   257de:	bd70      	pop	{r4, r5, r6, pc}
   257e0:	2220      	movs	r2, #32
   257e2:	f104 0108 	add.w	r1, r4, #8
   257e6:	4630      	mov	r0, r6
   257e8:	f7ff fb84 	bl	24ef4 <CC_PalMemCopyPlat>
   257ec:	4628      	mov	r0, r5
   257ee:	bd70      	pop	{r4, r5, r6, pc}
   257f0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   257f4:	e7ea      	b.n	257cc <cc_mbedtls_sha256_finish+0x1c>
   257f6:	bf00      	nop

000257f8 <mbedtls_sha_starts_internal>:
   257f8:	b178      	cbz	r0, 2581a <mbedtls_sha_starts_internal+0x22>
   257fa:	b538      	push	{r3, r4, r5, lr}
   257fc:	4604      	mov	r4, r0
   257fe:	460d      	mov	r5, r1
   25800:	21f0      	movs	r1, #240	; 0xf0
   25802:	f7ff fb7b 	bl	24efc <CC_PalMemSetZeroPlat>
   25806:	2340      	movs	r3, #64	; 0x40
   25808:	6025      	str	r5, [r4, #0]
   2580a:	65e3      	str	r3, [r4, #92]	; 0x5c
   2580c:	4620      	mov	r0, r4
   2580e:	f000 fa63 	bl	25cd8 <InitHashDrv>
   25812:	3800      	subs	r0, #0
   25814:	bf18      	it	ne
   25816:	2001      	movne	r0, #1
   25818:	bd38      	pop	{r3, r4, r5, pc}
   2581a:	2001      	movs	r0, #1
   2581c:	4770      	bx	lr
   2581e:	bf00      	nop

00025820 <mbedtls_sha_finish_internal>:
   25820:	b570      	push	{r4, r5, r6, lr}
   25822:	6e05      	ldr	r5, [r0, #96]	; 0x60
   25824:	b0a4      	sub	sp, #144	; 0x90
   25826:	4604      	mov	r4, r0
   25828:	ae04      	add	r6, sp, #16
   2582a:	b9e5      	cbnz	r5, 25866 <mbedtls_sha_finish_internal+0x46>
   2582c:	2201      	movs	r2, #1
   2582e:	2300      	movs	r3, #0
   25830:	6062      	str	r2, [r4, #4]
   25832:	4630      	mov	r0, r6
   25834:	e9cd 3300 	strd	r3, r3, [sp]
   25838:	aa02      	add	r2, sp, #8
   2583a:	4629      	mov	r1, r5
   2583c:	f000 fa18 	bl	25c70 <SetDataBuffersInfo>
   25840:	b110      	cbz	r0, 25848 <mbedtls_sha_finish_internal+0x28>
   25842:	2001      	movs	r0, #1
   25844:	b024      	add	sp, #144	; 0x90
   25846:	bd70      	pop	{r4, r5, r6, pc}
   25848:	462a      	mov	r2, r5
   2584a:	a902      	add	r1, sp, #8
   2584c:	4620      	mov	r0, r4
   2584e:	f000 fa6d 	bl	25d2c <ProcessHashDrv>
   25852:	2800      	cmp	r0, #0
   25854:	d1f5      	bne.n	25842 <mbedtls_sha_finish_internal+0x22>
   25856:	4620      	mov	r0, r4
   25858:	f000 fb7e 	bl	25f58 <FinishHashDrv>
   2585c:	2800      	cmp	r0, #0
   2585e:	d1f0      	bne.n	25842 <mbedtls_sha_finish_internal+0x22>
   25860:	6620      	str	r0, [r4, #96]	; 0x60
   25862:	b024      	add	sp, #144	; 0x90
   25864:	bd70      	pop	{r4, r5, r6, pc}
   25866:	2d80      	cmp	r5, #128	; 0x80
   25868:	462a      	mov	r2, r5
   2586a:	f100 0164 	add.w	r1, r0, #100	; 0x64
   2586e:	bf28      	it	cs
   25870:	2280      	movcs	r2, #128	; 0x80
   25872:	4630      	mov	r0, r6
   25874:	f7ff fb3e 	bl	24ef4 <CC_PalMemCopyPlat>
   25878:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2587a:	e7d7      	b.n	2582c <mbedtls_sha_finish_internal+0xc>

0002587c <mbedtls_sha_update_internal>:
   2587c:	2800      	cmp	r0, #0
   2587e:	f000 80cd 	beq.w	25a1c <mbedtls_sha_update_internal+0x1a0>
   25882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25886:	4615      	mov	r5, r2
   25888:	b0a5      	sub	sp, #148	; 0x94
   2588a:	2a00      	cmp	r2, #0
   2588c:	f000 80b4 	beq.w	259f8 <mbedtls_sha_update_internal+0x17c>
   25890:	460f      	mov	r7, r1
   25892:	2900      	cmp	r1, #0
   25894:	f000 80ac 	beq.w	259f0 <mbedtls_sha_update_internal+0x174>
   25898:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   2589c:	4606      	mov	r6, r0
   2589e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   258a0:	d37d      	bcc.n	2599e <mbedtls_sha_update_internal+0x122>
   258a2:	f64f 78ff 	movw	r8, #65535	; 0xffff
   258a6:	f106 0964 	add.w	r9, r6, #100	; 0x64
   258aa:	e014      	b.n	258d6 <mbedtls_sha_update_internal+0x5a>
   258ac:	4283      	cmp	r3, r0
   258ae:	46ba      	mov	sl, r7
   258b0:	f64f 74ff 	movw	r4, #65535	; 0xffff
   258b4:	d029      	beq.n	2590a <mbedtls_sha_update_internal+0x8e>
   258b6:	fbb4 fbf3 	udiv	fp, r4, r3
   258ba:	fb03 fb0b 	mul.w	fp, r3, fp
   258be:	f1bb 0f00 	cmp.w	fp, #0
   258c2:	d144      	bne.n	2594e <mbedtls_sha_update_internal+0xd2>
   258c4:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   258c8:	4447      	add	r7, r8
   258ca:	3dff      	subs	r5, #255	; 0xff
   258cc:	2c00      	cmp	r4, #0
   258ce:	d159      	bne.n	25984 <mbedtls_sha_update_internal+0x108>
   258d0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   258d4:	d363      	bcc.n	2599e <mbedtls_sha_update_internal+0x122>
   258d6:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   258d8:	1a1c      	subs	r4, r3, r0
   258da:	fbb4 f2f3 	udiv	r2, r4, r3
   258de:	fb03 4412 	mls	r4, r3, r2, r4
   258e2:	2c00      	cmp	r4, #0
   258e4:	d0e2      	beq.n	258ac <mbedtls_sha_update_internal+0x30>
   258e6:	4544      	cmp	r4, r8
   258e8:	bf28      	it	cs
   258ea:	4644      	movcs	r4, r8
   258ec:	4622      	mov	r2, r4
   258ee:	4448      	add	r0, r9
   258f0:	4639      	mov	r1, r7
   258f2:	f7ff faff 	bl	24ef4 <CC_PalMemCopyPlat>
   258f6:	6e30      	ldr	r0, [r6, #96]	; 0x60
   258f8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   258fa:	4420      	add	r0, r4
   258fc:	4283      	cmp	r3, r0
   258fe:	eb07 0a04 	add.w	sl, r7, r4
   25902:	6630      	str	r0, [r6, #96]	; 0x60
   25904:	eba8 0404 	sub.w	r4, r8, r4
   25908:	d1d5      	bne.n	258b6 <mbedtls_sha_update_internal+0x3a>
   2590a:	2b80      	cmp	r3, #128	; 0x80
   2590c:	bf28      	it	cs
   2590e:	2380      	movcs	r3, #128	; 0x80
   25910:	461a      	mov	r2, r3
   25912:	4649      	mov	r1, r9
   25914:	a804      	add	r0, sp, #16
   25916:	f7ff faed 	bl	24ef4 <CC_PalMemCopyPlat>
   2591a:	2300      	movs	r3, #0
   2591c:	e9cd 3300 	strd	r3, r3, [sp]
   25920:	aa02      	add	r2, sp, #8
   25922:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   25924:	a804      	add	r0, sp, #16
   25926:	f000 f9a3 	bl	25c70 <SetDataBuffersInfo>
   2592a:	2800      	cmp	r0, #0
   2592c:	d160      	bne.n	259f0 <mbedtls_sha_update_internal+0x174>
   2592e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   25930:	a902      	add	r1, sp, #8
   25932:	4630      	mov	r0, r6
   25934:	f000 f9fa 	bl	25d2c <ProcessHashDrv>
   25938:	2800      	cmp	r0, #0
   2593a:	d159      	bne.n	259f0 <mbedtls_sha_update_internal+0x174>
   2593c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2593e:	fbb4 fbf3 	udiv	fp, r4, r3
   25942:	fb03 fb0b 	mul.w	fp, r3, fp
   25946:	6630      	str	r0, [r6, #96]	; 0x60
   25948:	f1bb 0f00 	cmp.w	fp, #0
   2594c:	d0ba      	beq.n	258c4 <mbedtls_sha_update_internal+0x48>
   2594e:	2300      	movs	r3, #0
   25950:	e9cd 3300 	strd	r3, r3, [sp]
   25954:	aa02      	add	r2, sp, #8
   25956:	4659      	mov	r1, fp
   25958:	4650      	mov	r0, sl
   2595a:	f000 f989 	bl	25c70 <SetDataBuffersInfo>
   2595e:	2800      	cmp	r0, #0
   25960:	d146      	bne.n	259f0 <mbedtls_sha_update_internal+0x174>
   25962:	a902      	add	r1, sp, #8
   25964:	465a      	mov	r2, fp
   25966:	4630      	mov	r0, r6
   25968:	f000 f9e0 	bl	25d2c <ProcessHashDrv>
   2596c:	2800      	cmp	r0, #0
   2596e:	d13f      	bne.n	259f0 <mbedtls_sha_update_internal+0x174>
   25970:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   25974:	eba4 040b 	sub.w	r4, r4, fp
   25978:	6e30      	ldr	r0, [r6, #96]	; 0x60
   2597a:	44da      	add	sl, fp
   2597c:	4447      	add	r7, r8
   2597e:	3dff      	subs	r5, #255	; 0xff
   25980:	2c00      	cmp	r4, #0
   25982:	d0a5      	beq.n	258d0 <mbedtls_sha_update_internal+0x54>
   25984:	3019      	adds	r0, #25
   25986:	4651      	mov	r1, sl
   25988:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   2598c:	4622      	mov	r2, r4
   2598e:	f7ff fab1 	bl	24ef4 <CC_PalMemCopyPlat>
   25992:	6e30      	ldr	r0, [r6, #96]	; 0x60
   25994:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   25998:	4420      	add	r0, r4
   2599a:	6630      	str	r0, [r6, #96]	; 0x60
   2599c:	d29b      	bcs.n	258d6 <mbedtls_sha_update_internal+0x5a>
   2599e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   259a0:	1a14      	subs	r4, r2, r0
   259a2:	fbb4 f3f2 	udiv	r3, r4, r2
   259a6:	fb02 4413 	mls	r4, r2, r3, r4
   259aa:	42ac      	cmp	r4, r5
   259ac:	bf28      	it	cs
   259ae:	462c      	movcs	r4, r5
   259b0:	bb34      	cbnz	r4, 25a00 <mbedtls_sha_update_internal+0x184>
   259b2:	4290      	cmp	r0, r2
   259b4:	d034      	beq.n	25a20 <mbedtls_sha_update_internal+0x1a4>
   259b6:	fbb5 f4f2 	udiv	r4, r5, r2
   259ba:	fb02 f404 	mul.w	r4, r2, r4
   259be:	b96c      	cbnz	r4, 259dc <mbedtls_sha_update_internal+0x160>
   259c0:	b1d5      	cbz	r5, 259f8 <mbedtls_sha_update_internal+0x17c>
   259c2:	6e33      	ldr	r3, [r6, #96]	; 0x60
   259c4:	3319      	adds	r3, #25
   259c6:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   259ca:	462a      	mov	r2, r5
   259cc:	4639      	mov	r1, r7
   259ce:	f7ff fa91 	bl	24ef4 <CC_PalMemCopyPlat>
   259d2:	6e33      	ldr	r3, [r6, #96]	; 0x60
   259d4:	442b      	add	r3, r5
   259d6:	2000      	movs	r0, #0
   259d8:	6633      	str	r3, [r6, #96]	; 0x60
   259da:	e00a      	b.n	259f2 <mbedtls_sha_update_internal+0x176>
   259dc:	2300      	movs	r3, #0
   259de:	e9cd 3300 	strd	r3, r3, [sp]
   259e2:	aa02      	add	r2, sp, #8
   259e4:	4621      	mov	r1, r4
   259e6:	4638      	mov	r0, r7
   259e8:	f000 f942 	bl	25c70 <SetDataBuffersInfo>
   259ec:	2800      	cmp	r0, #0
   259ee:	d033      	beq.n	25a58 <mbedtls_sha_update_internal+0x1dc>
   259f0:	2001      	movs	r0, #1
   259f2:	b025      	add	sp, #148	; 0x94
   259f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259f8:	4628      	mov	r0, r5
   259fa:	b025      	add	sp, #148	; 0x94
   259fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a00:	f106 0364 	add.w	r3, r6, #100	; 0x64
   25a04:	4639      	mov	r1, r7
   25a06:	4622      	mov	r2, r4
   25a08:	4418      	add	r0, r3
   25a0a:	f7ff fa73 	bl	24ef4 <CC_PalMemCopyPlat>
   25a0e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   25a10:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   25a12:	4420      	add	r0, r4
   25a14:	1b2d      	subs	r5, r5, r4
   25a16:	4427      	add	r7, r4
   25a18:	6630      	str	r0, [r6, #96]	; 0x60
   25a1a:	e7ca      	b.n	259b2 <mbedtls_sha_update_internal+0x136>
   25a1c:	2001      	movs	r0, #1
   25a1e:	4770      	bx	lr
   25a20:	2a80      	cmp	r2, #128	; 0x80
   25a22:	bf28      	it	cs
   25a24:	2280      	movcs	r2, #128	; 0x80
   25a26:	f106 0164 	add.w	r1, r6, #100	; 0x64
   25a2a:	a804      	add	r0, sp, #16
   25a2c:	f7ff fa62 	bl	24ef4 <CC_PalMemCopyPlat>
   25a30:	2300      	movs	r3, #0
   25a32:	e9cd 3300 	strd	r3, r3, [sp]
   25a36:	a804      	add	r0, sp, #16
   25a38:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   25a3a:	aa02      	add	r2, sp, #8
   25a3c:	f000 f918 	bl	25c70 <SetDataBuffersInfo>
   25a40:	2800      	cmp	r0, #0
   25a42:	d1d5      	bne.n	259f0 <mbedtls_sha_update_internal+0x174>
   25a44:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   25a46:	a902      	add	r1, sp, #8
   25a48:	4630      	mov	r0, r6
   25a4a:	f000 f96f 	bl	25d2c <ProcessHashDrv>
   25a4e:	2800      	cmp	r0, #0
   25a50:	d1ce      	bne.n	259f0 <mbedtls_sha_update_internal+0x174>
   25a52:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   25a54:	6630      	str	r0, [r6, #96]	; 0x60
   25a56:	e7ae      	b.n	259b6 <mbedtls_sha_update_internal+0x13a>
   25a58:	a902      	add	r1, sp, #8
   25a5a:	4622      	mov	r2, r4
   25a5c:	4630      	mov	r0, r6
   25a5e:	f000 f965 	bl	25d2c <ProcessHashDrv>
   25a62:	2800      	cmp	r0, #0
   25a64:	d1c4      	bne.n	259f0 <mbedtls_sha_update_internal+0x174>
   25a66:	4427      	add	r7, r4
   25a68:	1b2d      	subs	r5, r5, r4
   25a6a:	e7a9      	b.n	259c0 <mbedtls_sha_update_internal+0x144>

00025a6c <cc_mbedtls_sha256>:
   25a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a6e:	461c      	mov	r4, r3
   25a70:	4605      	mov	r5, r0
   25a72:	4811      	ldr	r0, [pc, #68]	; (25ab8 <cc_mbedtls_sha256+0x4c>)
   25a74:	460e      	mov	r6, r1
   25a76:	4617      	mov	r7, r2
   25a78:	f7ff fe42 	bl	25700 <cc_mbedtls_sha256_init>
   25a7c:	4621      	mov	r1, r4
   25a7e:	480e      	ldr	r0, [pc, #56]	; (25ab8 <cc_mbedtls_sha256+0x4c>)
   25a80:	f7ff fe58 	bl	25734 <cc_mbedtls_sha256_starts>
   25a84:	4604      	mov	r4, r0
   25a86:	b120      	cbz	r0, 25a92 <cc_mbedtls_sha256+0x26>
   25a88:	480b      	ldr	r0, [pc, #44]	; (25ab8 <cc_mbedtls_sha256+0x4c>)
   25a8a:	f7ff fe4d 	bl	25728 <cc_mbedtls_sha256_free>
   25a8e:	4620      	mov	r0, r4
   25a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25a92:	4809      	ldr	r0, [pc, #36]	; (25ab8 <cc_mbedtls_sha256+0x4c>)
   25a94:	4632      	mov	r2, r6
   25a96:	4629      	mov	r1, r5
   25a98:	f7ff fe60 	bl	2575c <cc_mbedtls_sha256_update>
   25a9c:	4604      	mov	r4, r0
   25a9e:	2800      	cmp	r0, #0
   25aa0:	d1f2      	bne.n	25a88 <cc_mbedtls_sha256+0x1c>
   25aa2:	4639      	mov	r1, r7
   25aa4:	4804      	ldr	r0, [pc, #16]	; (25ab8 <cc_mbedtls_sha256+0x4c>)
   25aa6:	f7ff fe83 	bl	257b0 <cc_mbedtls_sha256_finish>
   25aaa:	4604      	mov	r4, r0
   25aac:	4802      	ldr	r0, [pc, #8]	; (25ab8 <cc_mbedtls_sha256+0x4c>)
   25aae:	f7ff fe3b 	bl	25728 <cc_mbedtls_sha256_free>
   25ab2:	4620      	mov	r0, r4
   25ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25ab6:	bf00      	nop
   25ab8:	20004978 	.word	0x20004978

00025abc <RNG_PLAT_SetUserRngParameters>:
   25abc:	b530      	push	{r4, r5, lr}
   25abe:	b083      	sub	sp, #12
   25ac0:	231c      	movs	r3, #28
   25ac2:	a901      	add	r1, sp, #4
   25ac4:	4604      	mov	r4, r0
   25ac6:	9301      	str	r3, [sp, #4]
   25ac8:	f000 f834 	bl	25b34 <CC_PalTrngParamGet>
   25acc:	4605      	mov	r5, r0
   25ace:	b938      	cbnz	r0, 25ae0 <RNG_PLAT_SetUserRngParameters+0x24>
   25ad0:	9b01      	ldr	r3, [sp, #4]
   25ad2:	2b1c      	cmp	r3, #28
   25ad4:	d007      	beq.n	25ae6 <RNG_PLAT_SetUserRngParameters+0x2a>
   25ad6:	4d15      	ldr	r5, [pc, #84]	; (25b2c <RNG_PLAT_SetUserRngParameters+0x70>)
   25ad8:	211c      	movs	r1, #28
   25ada:	4620      	mov	r0, r4
   25adc:	f7ff fa0e 	bl	24efc <CC_PalMemSetZeroPlat>
   25ae0:	4628      	mov	r0, r5
   25ae2:	b003      	add	sp, #12
   25ae4:	bd30      	pop	{r4, r5, pc}
   25ae6:	e9d4 3200 	ldrd	r3, r2, [r4]
   25aea:	2101      	movs	r1, #1
   25aec:	3b00      	subs	r3, #0
   25aee:	61e1      	str	r1, [r4, #28]
   25af0:	bf18      	it	ne
   25af2:	2301      	movne	r3, #1
   25af4:	b10a      	cbz	r2, 25afa <RNG_PLAT_SetUserRngParameters+0x3e>
   25af6:	f043 0302 	orr.w	r3, r3, #2
   25afa:	68a2      	ldr	r2, [r4, #8]
   25afc:	b932      	cbnz	r2, 25b0c <RNG_PLAT_SetUserRngParameters+0x50>
   25afe:	68e2      	ldr	r2, [r4, #12]
   25b00:	b942      	cbnz	r2, 25b14 <RNG_PLAT_SetUserRngParameters+0x58>
   25b02:	e9c4 3208 	strd	r3, r2, [r4, #32]
   25b06:	b97b      	cbnz	r3, 25b28 <RNG_PLAT_SetUserRngParameters+0x6c>
   25b08:	4d09      	ldr	r5, [pc, #36]	; (25b30 <RNG_PLAT_SetUserRngParameters+0x74>)
   25b0a:	e7e5      	b.n	25ad8 <RNG_PLAT_SetUserRngParameters+0x1c>
   25b0c:	68e2      	ldr	r2, [r4, #12]
   25b0e:	f043 0304 	orr.w	r3, r3, #4
   25b12:	b13a      	cbz	r2, 25b24 <RNG_PLAT_SetUserRngParameters+0x68>
   25b14:	f043 0308 	orr.w	r3, r3, #8
   25b18:	2200      	movs	r2, #0
   25b1a:	4628      	mov	r0, r5
   25b1c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   25b20:	b003      	add	sp, #12
   25b22:	bd30      	pop	{r4, r5, pc}
   25b24:	e9c4 3208 	strd	r3, r2, [r4, #32]
   25b28:	4615      	mov	r5, r2
   25b2a:	e7d9      	b.n	25ae0 <RNG_PLAT_SetUserRngParameters+0x24>
   25b2c:	00f00c37 	.word	0x00f00c37
   25b30:	00f00c0e 	.word	0x00f00c0e

00025b34 <CC_PalTrngParamGet>:
   25b34:	b118      	cbz	r0, 25b3e <CC_PalTrngParamGet+0xa>
   25b36:	b111      	cbz	r1, 25b3e <CC_PalTrngParamGet+0xa>
   25b38:	680b      	ldr	r3, [r1, #0]
   25b3a:	2b1c      	cmp	r3, #28
   25b3c:	d001      	beq.n	25b42 <CC_PalTrngParamGet+0xe>
   25b3e:	2001      	movs	r0, #1
   25b40:	4770      	bx	lr
   25b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b46:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   25b4a:	3201      	adds	r2, #1
   25b4c:	bf14      	ite	ne
   25b4e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   25b52:	f241 225c 	movweq	r2, #4700	; 0x125c
   25b56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b5a:	6002      	str	r2, [r0, #0]
   25b5c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   25b60:	3201      	adds	r2, #1
   25b62:	bf14      	ite	ne
   25b64:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   25b68:	f641 1264 	movweq	r2, #6500	; 0x1964
   25b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b70:	6042      	str	r2, [r0, #4]
   25b72:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   25b76:	3201      	adds	r2, #1
   25b78:	bf14      	ite	ne
   25b7a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   25b7e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   25b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b86:	6082      	str	r2, [r0, #8]
   25b88:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   25b8c:	3201      	adds	r2, #1
   25b8e:	bf14      	ite	ne
   25b90:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   25b94:	f241 3288 	movweq	r2, #5000	; 0x1388
   25b98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b9c:	60c2      	str	r2, [r0, #12]
   25b9e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   25ba2:	3201      	adds	r2, #1
   25ba4:	bf14      	ite	ne
   25ba6:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   25baa:	2290      	moveq	r2, #144	; 0x90
   25bac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25bb0:	6102      	str	r2, [r0, #16]
   25bb2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   25bb6:	3201      	adds	r2, #1
   25bb8:	bf14      	ite	ne
   25bba:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   25bbe:	2251      	moveq	r2, #81	; 0x51
   25bc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25bc4:	6142      	str	r2, [r0, #20]
   25bc6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   25bca:	3201      	adds	r2, #1
   25bcc:	bf14      	ite	ne
   25bce:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   25bd2:	f240 3337 	movweq	r3, #823	; 0x337
   25bd6:	6183      	str	r3, [r0, #24]
   25bd8:	2000      	movs	r0, #0
   25bda:	4770      	bx	lr

00025bdc <LLF_RND_WaitRngInterrupt>:
   25bdc:	b508      	push	{r3, lr}
   25bde:	4601      	mov	r1, r0
   25be0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   25be4:	f7ff f912 	bl	24e0c <CC_HalWaitInterruptRND>
   25be8:	4b03      	ldr	r3, [pc, #12]	; (25bf8 <LLF_RND_WaitRngInterrupt+0x1c>)
   25bea:	2200      	movs	r2, #0
   25bec:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   25bf0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   25bf4:	bd08      	pop	{r3, pc}
   25bf6:	bf00      	nop
   25bf8:	5002b000 	.word	0x5002b000

00025bfc <LLF_RND_GetRoscSampleCnt>:
   25bfc:	3801      	subs	r0, #1
   25bfe:	2807      	cmp	r0, #7
   25c00:	d805      	bhi.n	25c0e <LLF_RND_GetRoscSampleCnt+0x12>
   25c02:	e8df f000 	tbb	[pc, r0]
   25c06:	0e12      	.short	0x0e12
   25c08:	04040a04 	.word	0x04040a04
   25c0c:	0604      	.short	0x0604
   25c0e:	4809      	ldr	r0, [pc, #36]	; (25c34 <LLF_RND_GetRoscSampleCnt+0x38>)
   25c10:	4770      	bx	lr
   25c12:	68cb      	ldr	r3, [r1, #12]
   25c14:	624b      	str	r3, [r1, #36]	; 0x24
   25c16:	2000      	movs	r0, #0
   25c18:	4770      	bx	lr
   25c1a:	688b      	ldr	r3, [r1, #8]
   25c1c:	624b      	str	r3, [r1, #36]	; 0x24
   25c1e:	2000      	movs	r0, #0
   25c20:	4770      	bx	lr
   25c22:	684b      	ldr	r3, [r1, #4]
   25c24:	624b      	str	r3, [r1, #36]	; 0x24
   25c26:	2000      	movs	r0, #0
   25c28:	4770      	bx	lr
   25c2a:	680b      	ldr	r3, [r1, #0]
   25c2c:	624b      	str	r3, [r1, #36]	; 0x24
   25c2e:	2000      	movs	r0, #0
   25c30:	4770      	bx	lr
   25c32:	bf00      	nop
   25c34:	00f10c31 	.word	0x00f10c31

00025c38 <LLF_RND_GetFastestRosc>:
   25c38:	680b      	ldr	r3, [r1, #0]
   25c3a:	e002      	b.n	25c42 <LLF_RND_GetFastestRosc+0xa>
   25c3c:	2b08      	cmp	r3, #8
   25c3e:	600b      	str	r3, [r1, #0]
   25c40:	d806      	bhi.n	25c50 <LLF_RND_GetFastestRosc+0x18>
   25c42:	6a02      	ldr	r2, [r0, #32]
   25c44:	4213      	tst	r3, r2
   25c46:	ea4f 0343 	mov.w	r3, r3, lsl #1
   25c4a:	d0f7      	beq.n	25c3c <LLF_RND_GetFastestRosc+0x4>
   25c4c:	2000      	movs	r0, #0
   25c4e:	4770      	bx	lr
   25c50:	4800      	ldr	r0, [pc, #0]	; (25c54 <LLF_RND_GetFastestRosc+0x1c>)
   25c52:	4770      	bx	lr
   25c54:	00f10c31 	.word	0x00f10c31

00025c58 <LLF_RND_TurnOffTrng>:
   25c58:	4b04      	ldr	r3, [pc, #16]	; (25c6c <LLF_RND_TurnOffTrng+0x14>)
   25c5a:	2200      	movs	r2, #0
   25c5c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   25c60:	f44f 6080 	mov.w	r0, #1024	; 0x400
   25c64:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   25c68:	f7ff b8b6 	b.w	24dd8 <CC_HalClearInterruptBit>
   25c6c:	5002b000 	.word	0x5002b000

00025c70 <SetDataBuffersInfo>:
   25c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c72:	b083      	sub	sp, #12
   25c74:	461d      	mov	r5, r3
   25c76:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   25c7a:	f04f 0300 	mov.w	r3, #0
   25c7e:	f88d 3007 	strb.w	r3, [sp, #7]
   25c82:	d324      	bcc.n	25cce <SetDataBuffersInfo+0x5e>
   25c84:	468c      	mov	ip, r1
   25c86:	4484      	add	ip, r0
   25c88:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   25c8c:	4604      	mov	r4, r0
   25c8e:	d81e      	bhi.n	25cce <SetDataBuffersInfo+0x5e>
   25c90:	4617      	mov	r7, r2
   25c92:	f10d 0307 	add.w	r3, sp, #7
   25c96:	2201      	movs	r2, #1
   25c98:	f000 fe68 	bl	2696c <CC_PalDataBufferAttrGet>
   25c9c:	4606      	mov	r6, r0
   25c9e:	b9b0      	cbnz	r0, 25cce <SetDataBuffersInfo+0x5e>
   25ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25ca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25ca6:	603c      	str	r4, [r7, #0]
   25ca8:	713b      	strb	r3, [r7, #4]
   25caa:	b192      	cbz	r2, 25cd2 <SetDataBuffersInfo+0x62>
   25cac:	b14d      	cbz	r5, 25cc2 <SetDataBuffersInfo+0x52>
   25cae:	4602      	mov	r2, r0
   25cb0:	9908      	ldr	r1, [sp, #32]
   25cb2:	f10d 0307 	add.w	r3, sp, #7
   25cb6:	4628      	mov	r0, r5
   25cb8:	f000 fe58 	bl	2696c <CC_PalDataBufferAttrGet>
   25cbc:	b938      	cbnz	r0, 25cce <SetDataBuffersInfo+0x5e>
   25cbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25cc4:	4630      	mov	r0, r6
   25cc6:	6015      	str	r5, [r2, #0]
   25cc8:	7113      	strb	r3, [r2, #4]
   25cca:	b003      	add	sp, #12
   25ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25cce:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   25cd2:	4630      	mov	r0, r6
   25cd4:	b003      	add	sp, #12
   25cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025cd8 <InitHashDrv>:
   25cd8:	b1e8      	cbz	r0, 25d16 <InitHashDrv+0x3e>
   25cda:	b510      	push	{r4, lr}
   25cdc:	6804      	ldr	r4, [r0, #0]
   25cde:	2c01      	cmp	r4, #1
   25ce0:	d004      	beq.n	25cec <InitHashDrv+0x14>
   25ce2:	2c02      	cmp	r4, #2
   25ce4:	d010      	beq.n	25d08 <InitHashDrv+0x30>
   25ce6:	b144      	cbz	r4, 25cfa <InitHashDrv+0x22>
   25ce8:	480c      	ldr	r0, [pc, #48]	; (25d1c <InitHashDrv+0x44>)
   25cea:	bd10      	pop	{r4, pc}
   25cec:	490c      	ldr	r1, [pc, #48]	; (25d20 <InitHashDrv+0x48>)
   25cee:	2220      	movs	r2, #32
   25cf0:	3008      	adds	r0, #8
   25cf2:	f7ff f8ff 	bl	24ef4 <CC_PalMemCopyPlat>
   25cf6:	2000      	movs	r0, #0
   25cf8:	bd10      	pop	{r4, pc}
   25cfa:	490a      	ldr	r1, [pc, #40]	; (25d24 <InitHashDrv+0x4c>)
   25cfc:	2214      	movs	r2, #20
   25cfe:	3008      	adds	r0, #8
   25d00:	f7ff f8f8 	bl	24ef4 <CC_PalMemCopyPlat>
   25d04:	4620      	mov	r0, r4
   25d06:	bd10      	pop	{r4, pc}
   25d08:	4907      	ldr	r1, [pc, #28]	; (25d28 <InitHashDrv+0x50>)
   25d0a:	2220      	movs	r2, #32
   25d0c:	3008      	adds	r0, #8
   25d0e:	f7ff f8f1 	bl	24ef4 <CC_PalMemCopyPlat>
   25d12:	2000      	movs	r0, #0
   25d14:	bd10      	pop	{r4, pc}
   25d16:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   25d1a:	4770      	bx	lr
   25d1c:	00f30001 	.word	0x00f30001
   25d20:	0002a3b0 	.word	0x0002a3b0
   25d24:	0002a37c 	.word	0x0002a37c
   25d28:	0002a390 	.word	0x0002a390

00025d2c <ProcessHashDrv>:
   25d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25d30:	2900      	cmp	r1, #0
   25d32:	f000 80f9 	beq.w	25f28 <ProcessHashDrv+0x1fc>
   25d36:	4604      	mov	r4, r0
   25d38:	2800      	cmp	r0, #0
   25d3a:	f000 80f9 	beq.w	25f30 <ProcessHashDrv+0x204>
   25d3e:	6803      	ldr	r3, [r0, #0]
   25d40:	4690      	mov	r8, r2
   25d42:	460f      	mov	r7, r1
   25d44:	2b00      	cmp	r3, #0
   25d46:	f000 80c3 	beq.w	25ed0 <ProcessHashDrv+0x1a4>
   25d4a:	3b01      	subs	r3, #1
   25d4c:	2b01      	cmp	r3, #1
   25d4e:	f200 80d7 	bhi.w	25f00 <ProcessHashDrv+0x1d4>
   25d52:	4879      	ldr	r0, [pc, #484]	; (25f38 <ProcessHashDrv+0x20c>)
   25d54:	f04f 31ff 	mov.w	r1, #4294967295
   25d58:	f04f 0902 	mov.w	r9, #2
   25d5c:	f7ff f8e6 	bl	24f2c <CC_PalMutexLock>
   25d60:	2800      	cmp	r0, #0
   25d62:	f040 80bf 	bne.w	25ee4 <ProcessHashDrv+0x1b8>
   25d66:	2000      	movs	r0, #0
   25d68:	f7ff f910 	bl	24f8c <CC_PalPowerSaveModeSelect>
   25d6c:	4606      	mov	r6, r0
   25d6e:	2800      	cmp	r0, #0
   25d70:	f040 80c2 	bne.w	25ef8 <ProcessHashDrv+0x1cc>
   25d74:	4a71      	ldr	r2, [pc, #452]	; (25f3c <ProcessHashDrv+0x210>)
   25d76:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   25d7a:	2b00      	cmp	r3, #0
   25d7c:	d1fb      	bne.n	25d76 <ProcessHashDrv+0x4a>
   25d7e:	4d6f      	ldr	r5, [pc, #444]	; (25f3c <ProcessHashDrv+0x210>)
   25d80:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   25d84:	2b00      	cmp	r3, #0
   25d86:	d1fb      	bne.n	25d80 <ProcessHashDrv+0x54>
   25d88:	f04f 30ff 	mov.w	r0, #4294967295
   25d8c:	f7ff f824 	bl	24dd8 <CC_HalClearInterruptBit>
   25d90:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   25d94:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   25d98:	f7ff f82c 	bl	24df4 <CC_HalMaskInterrupt>
   25d9c:	2301      	movs	r3, #1
   25d9e:	2207      	movs	r2, #7
   25da0:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   25da4:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   25da8:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   25dac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   25dae:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   25db2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   25db4:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   25db8:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   25dbc:	6823      	ldr	r3, [r4, #0]
   25dbe:	b15b      	cbz	r3, 25dd8 <ProcessHashDrv+0xac>
   25dc0:	3b01      	subs	r3, #1
   25dc2:	2b01      	cmp	r3, #1
   25dc4:	d818      	bhi.n	25df8 <ProcessHashDrv+0xcc>
   25dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25dc8:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   25dcc:	6a23      	ldr	r3, [r4, #32]
   25dce:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   25dd2:	69e3      	ldr	r3, [r4, #28]
   25dd4:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   25dd8:	4b58      	ldr	r3, [pc, #352]	; (25f3c <ProcessHashDrv+0x210>)
   25dda:	69a2      	ldr	r2, [r4, #24]
   25ddc:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   25de0:	6962      	ldr	r2, [r4, #20]
   25de2:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   25de6:	6922      	ldr	r2, [r4, #16]
   25de8:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   25dec:	68e2      	ldr	r2, [r4, #12]
   25dee:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   25df2:	68a2      	ldr	r2, [r4, #8]
   25df4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   25df8:	4a50      	ldr	r2, [pc, #320]	; (25f3c <ProcessHashDrv+0x210>)
   25dfa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25dfe:	2b00      	cmp	r3, #0
   25e00:	d1fb      	bne.n	25dfa <ProcessHashDrv+0xce>
   25e02:	f1b8 0f00 	cmp.w	r8, #0
   25e06:	d05f      	beq.n	25ec8 <ProcessHashDrv+0x19c>
   25e08:	6863      	ldr	r3, [r4, #4]
   25e0a:	2b01      	cmp	r3, #1
   25e0c:	bf08      	it	eq
   25e0e:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   25e12:	4b4a      	ldr	r3, [pc, #296]	; (25f3c <ProcessHashDrv+0x210>)
   25e14:	683a      	ldr	r2, [r7, #0]
   25e16:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   25e1a:	2040      	movs	r0, #64	; 0x40
   25e1c:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   25e20:	f7fe ffee 	bl	24e00 <CC_HalWaitInterrupt>
   25e24:	4606      	mov	r6, r0
   25e26:	4a45      	ldr	r2, [pc, #276]	; (25f3c <ProcessHashDrv+0x210>)
   25e28:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25e2c:	2b00      	cmp	r3, #0
   25e2e:	d1fb      	bne.n	25e28 <ProcessHashDrv+0xfc>
   25e30:	4a42      	ldr	r2, [pc, #264]	; (25f3c <ProcessHashDrv+0x210>)
   25e32:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   25e36:	2b00      	cmp	r3, #0
   25e38:	d1fb      	bne.n	25e32 <ProcessHashDrv+0x106>
   25e3a:	6823      	ldr	r3, [r4, #0]
   25e3c:	b15b      	cbz	r3, 25e56 <ProcessHashDrv+0x12a>
   25e3e:	3b01      	subs	r3, #1
   25e40:	2b01      	cmp	r3, #1
   25e42:	d818      	bhi.n	25e76 <ProcessHashDrv+0x14a>
   25e44:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   25e48:	6263      	str	r3, [r4, #36]	; 0x24
   25e4a:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   25e4e:	6223      	str	r3, [r4, #32]
   25e50:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   25e54:	61e3      	str	r3, [r4, #28]
   25e56:	4b39      	ldr	r3, [pc, #228]	; (25f3c <ProcessHashDrv+0x210>)
   25e58:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   25e5c:	61a2      	str	r2, [r4, #24]
   25e5e:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   25e62:	6162      	str	r2, [r4, #20]
   25e64:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   25e68:	6122      	str	r2, [r4, #16]
   25e6a:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   25e6e:	60e2      	str	r2, [r4, #12]
   25e70:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   25e74:	60a3      	str	r3, [r4, #8]
   25e76:	4a31      	ldr	r2, [pc, #196]	; (25f3c <ProcessHashDrv+0x210>)
   25e78:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   25e7c:	64a1      	str	r1, [r4, #72]	; 0x48
   25e7e:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   25e82:	64e1      	str	r1, [r4, #76]	; 0x4c
   25e84:	2300      	movs	r3, #0
   25e86:	2101      	movs	r1, #1
   25e88:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   25e8c:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   25e90:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   25e94:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25e98:	2b00      	cmp	r3, #0
   25e9a:	d1fb      	bne.n	25e94 <ProcessHashDrv+0x168>
   25e9c:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   25ea0:	2e00      	cmp	r6, #0
   25ea2:	d13b      	bne.n	25f1c <ProcessHashDrv+0x1f0>
   25ea4:	4b25      	ldr	r3, [pc, #148]	; (25f3c <ProcessHashDrv+0x210>)
   25ea6:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   25eaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   25eae:	f7fe ffa1 	bl	24df4 <CC_HalMaskInterrupt>
   25eb2:	2001      	movs	r0, #1
   25eb4:	f7ff f86a 	bl	24f8c <CC_PalPowerSaveModeSelect>
   25eb8:	bb60      	cbnz	r0, 25f14 <ProcessHashDrv+0x1e8>
   25eba:	481f      	ldr	r0, [pc, #124]	; (25f38 <ProcessHashDrv+0x20c>)
   25ebc:	f7ff f83e 	bl	24f3c <CC_PalMutexUnlock>
   25ec0:	bb10      	cbnz	r0, 25f08 <ProcessHashDrv+0x1dc>
   25ec2:	4630      	mov	r0, r6
   25ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25ec8:	2304      	movs	r3, #4
   25eca:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   25ece:	e7aa      	b.n	25e26 <ProcessHashDrv+0xfa>
   25ed0:	4819      	ldr	r0, [pc, #100]	; (25f38 <ProcessHashDrv+0x20c>)
   25ed2:	f04f 31ff 	mov.w	r1, #4294967295
   25ed6:	f04f 0901 	mov.w	r9, #1
   25eda:	f7ff f827 	bl	24f2c <CC_PalMutexLock>
   25ede:	2800      	cmp	r0, #0
   25ee0:	f43f af41 	beq.w	25d66 <ProcessHashDrv+0x3a>
   25ee4:	4816      	ldr	r0, [pc, #88]	; (25f40 <ProcessHashDrv+0x214>)
   25ee6:	f7fe f8c1 	bl	2406c <CC_PalAbort>
   25eea:	2000      	movs	r0, #0
   25eec:	f7ff f84e 	bl	24f8c <CC_PalPowerSaveModeSelect>
   25ef0:	4606      	mov	r6, r0
   25ef2:	2800      	cmp	r0, #0
   25ef4:	f43f af3e 	beq.w	25d74 <ProcessHashDrv+0x48>
   25ef8:	4812      	ldr	r0, [pc, #72]	; (25f44 <ProcessHashDrv+0x218>)
   25efa:	f7fe f8b7 	bl	2406c <CC_PalAbort>
   25efe:	e739      	b.n	25d74 <ProcessHashDrv+0x48>
   25f00:	4e11      	ldr	r6, [pc, #68]	; (25f48 <ProcessHashDrv+0x21c>)
   25f02:	4630      	mov	r0, r6
   25f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25f08:	4810      	ldr	r0, [pc, #64]	; (25f4c <ProcessHashDrv+0x220>)
   25f0a:	f7fe f8af 	bl	2406c <CC_PalAbort>
   25f0e:	4630      	mov	r0, r6
   25f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25f14:	480e      	ldr	r0, [pc, #56]	; (25f50 <ProcessHashDrv+0x224>)
   25f16:	f7fe f8a9 	bl	2406c <CC_PalAbort>
   25f1a:	e7ce      	b.n	25eba <ProcessHashDrv+0x18e>
   25f1c:	2110      	movs	r1, #16
   25f1e:	f104 0008 	add.w	r0, r4, #8
   25f22:	f7fe ffeb 	bl	24efc <CC_PalMemSetZeroPlat>
   25f26:	e7bd      	b.n	25ea4 <ProcessHashDrv+0x178>
   25f28:	4e0a      	ldr	r6, [pc, #40]	; (25f54 <ProcessHashDrv+0x228>)
   25f2a:	4630      	mov	r0, r6
   25f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25f30:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   25f34:	e7c5      	b.n	25ec2 <ProcessHashDrv+0x196>
   25f36:	bf00      	nop
   25f38:	200008d0 	.word	0x200008d0
   25f3c:	5002b000 	.word	0x5002b000
   25f40:	0002a2b0 	.word	0x0002a2b0
   25f44:	0002a2c8 	.word	0x0002a2c8
   25f48:	00f30001 	.word	0x00f30001
   25f4c:	0002a308 	.word	0x0002a308
   25f50:	0002a2e8 	.word	0x0002a2e8
   25f54:	00f30003 	.word	0x00f30003

00025f58 <FinishHashDrv>:
   25f58:	b398      	cbz	r0, 25fc2 <FinishHashDrv+0x6a>
   25f5a:	b470      	push	{r4, r5, r6}
   25f5c:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   25f60:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   25f64:	ba26      	rev	r6, r4
   25f66:	ba0d      	rev	r5, r1
   25f68:	ba14      	rev	r4, r2
   25f6a:	ba19      	rev	r1, r3
   25f6c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   25f70:	ba12      	rev	r2, r2
   25f72:	e9c0 4104 	strd	r4, r1, [r0, #16]
   25f76:	6182      	str	r2, [r0, #24]
   25f78:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   25f7c:	e9c0 6502 	strd	r6, r5, [r0, #8]
   25f80:	ba1b      	rev	r3, r3
   25f82:	ba25      	rev	r5, r4
   25f84:	e9c0 3507 	strd	r3, r5, [r0, #28]
   25f88:	ba14      	rev	r4, r2
   25f8a:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   25f8e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   25f90:	ba12      	rev	r2, r2
   25f92:	ba09      	rev	r1, r1
   25f94:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   25f98:	62c2      	str	r2, [r0, #44]	; 0x2c
   25f9a:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   25f9e:	ba1b      	rev	r3, r3
   25fa0:	ba25      	rev	r5, r4
   25fa2:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   25fa6:	ba14      	rev	r4, r2
   25fa8:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   25fac:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   25fae:	ba12      	rev	r2, r2
   25fb0:	ba09      	rev	r1, r1
   25fb2:	ba1b      	rev	r3, r3
   25fb4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   25fb8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   25fbc:	2000      	movs	r0, #0
   25fbe:	bc70      	pop	{r4, r5, r6}
   25fc0:	4770      	bx	lr
   25fc2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   25fc6:	4770      	bx	lr

00025fc8 <LoadAesKey>:
   25fc8:	2800      	cmp	r0, #0
   25fca:	d046      	beq.n	2605a <LoadAesKey+0x92>
   25fcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   25fd0:	2b00      	cmp	r3, #0
   25fd2:	d033      	beq.n	2603c <LoadAesKey+0x74>
   25fd4:	2b03      	cmp	r3, #3
   25fd6:	b510      	push	{r4, lr}
   25fd8:	d013      	beq.n	26002 <LoadAesKey+0x3a>
   25fda:	4821      	ldr	r0, [pc, #132]	; (26060 <LoadAesKey+0x98>)
   25fdc:	4c21      	ldr	r4, [pc, #132]	; (26064 <LoadAesKey+0x9c>)
   25fde:	6822      	ldr	r2, [r4, #0]
   25fe0:	4b21      	ldr	r3, [pc, #132]	; (26068 <LoadAesKey+0xa0>)
   25fe2:	6812      	ldr	r2, [r2, #0]
   25fe4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   25fe8:	6822      	ldr	r2, [r4, #0]
   25fea:	6852      	ldr	r2, [r2, #4]
   25fec:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   25ff0:	6822      	ldr	r2, [r4, #0]
   25ff2:	6892      	ldr	r2, [r2, #8]
   25ff4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   25ff8:	6822      	ldr	r2, [r4, #0]
   25ffa:	68d2      	ldr	r2, [r2, #12]
   25ffc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   26000:	bd10      	pop	{r4, pc}
   26002:	6b01      	ldr	r1, [r0, #48]	; 0x30
   26004:	6c00      	ldr	r0, [r0, #64]	; 0x40
   26006:	4c17      	ldr	r4, [pc, #92]	; (26064 <LoadAesKey+0x9c>)
   26008:	f000 fbac 	bl	26764 <kmu_validate_kdr_slot_and_size>
   2600c:	2800      	cmp	r0, #0
   2600e:	d1e6      	bne.n	25fde <LoadAesKey+0x16>
   26010:	6822      	ldr	r2, [r4, #0]
   26012:	4b15      	ldr	r3, [pc, #84]	; (26068 <LoadAesKey+0xa0>)
   26014:	6812      	ldr	r2, [r2, #0]
   26016:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2601a:	6822      	ldr	r2, [r4, #0]
   2601c:	6852      	ldr	r2, [r2, #4]
   2601e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   26022:	6822      	ldr	r2, [r4, #0]
   26024:	6892      	ldr	r2, [r2, #8]
   26026:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2602a:	6822      	ldr	r2, [r4, #0]
   2602c:	68d2      	ldr	r2, [r2, #12]
   2602e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   26032:	f000 fba3 	bl	2677c <kmu_use_kdr_key>
   26036:	2800      	cmp	r0, #0
   26038:	d1d1      	bne.n	25fde <LoadAesKey+0x16>
   2603a:	bd10      	pop	{r4, pc}
   2603c:	4a0a      	ldr	r2, [pc, #40]	; (26068 <LoadAesKey+0xa0>)
   2603e:	6901      	ldr	r1, [r0, #16]
   26040:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   26044:	6941      	ldr	r1, [r0, #20]
   26046:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   2604a:	6981      	ldr	r1, [r0, #24]
   2604c:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   26050:	69c1      	ldr	r1, [r0, #28]
   26052:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   26056:	4618      	mov	r0, r3
   26058:	4770      	bx	lr
   2605a:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2605e:	4770      	bx	lr
   26060:	00f10009 	.word	0x00f10009
   26064:	200008c0 	.word	0x200008c0
   26068:	5002b000 	.word	0x5002b000

0002606c <InitAes.part.0>:
   2606c:	4a37      	ldr	r2, [pc, #220]	; (2614c <InitAes.part.0+0xe0>)
   2606e:	b538      	push	{r3, r4, r5, lr}
   26070:	4604      	mov	r4, r0
   26072:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26076:	2b00      	cmp	r3, #0
   26078:	d1fb      	bne.n	26072 <InitAes.part.0+0x6>
   2607a:	4a34      	ldr	r2, [pc, #208]	; (2614c <InitAes.part.0+0xe0>)
   2607c:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   26080:	2b00      	cmp	r3, #0
   26082:	d1fb      	bne.n	2607c <InitAes.part.0+0x10>
   26084:	4a31      	ldr	r2, [pc, #196]	; (2614c <InitAes.part.0+0xe0>)
   26086:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   2608a:	2b00      	cmp	r3, #0
   2608c:	d1fb      	bne.n	26086 <InitAes.part.0+0x1a>
   2608e:	4a2f      	ldr	r2, [pc, #188]	; (2614c <InitAes.part.0+0xe0>)
   26090:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   26094:	2b00      	cmp	r3, #0
   26096:	d1fb      	bne.n	26090 <InitAes.part.0+0x24>
   26098:	4a2c      	ldr	r2, [pc, #176]	; (2614c <InitAes.part.0+0xe0>)
   2609a:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   2609e:	2b00      	cmp	r3, #0
   260a0:	d1fb      	bne.n	2609a <InitAes.part.0+0x2e>
   260a2:	4d2a      	ldr	r5, [pc, #168]	; (2614c <InitAes.part.0+0xe0>)
   260a4:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   260a8:	2b00      	cmp	r3, #0
   260aa:	d1fb      	bne.n	260a4 <InitAes.part.0+0x38>
   260ac:	f04f 30ff 	mov.w	r0, #4294967295
   260b0:	f7fe fe92 	bl	24dd8 <CC_HalClearInterruptBit>
   260b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   260b6:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   260ba:	f023 0304 	bic.w	r3, r3, #4
   260be:	2b03      	cmp	r3, #3
   260c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   260c2:	d039      	beq.n	26138 <InitAes.part.0+0xcc>
   260c4:	2b01      	cmp	r3, #1
   260c6:	bf0c      	ite	eq
   260c8:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   260cc:	f020 0020 	bicne.w	r0, r0, #32
   260d0:	f7fe fe90 	bl	24df4 <CC_HalMaskInterrupt>
   260d4:	4a1d      	ldr	r2, [pc, #116]	; (2614c <InitAes.part.0+0xe0>)
   260d6:	2301      	movs	r3, #1
   260d8:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   260dc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   260e0:	2b00      	cmp	r3, #0
   260e2:	d1fb      	bne.n	260dc <InitAes.part.0+0x70>
   260e4:	4a19      	ldr	r2, [pc, #100]	; (2614c <InitAes.part.0+0xe0>)
   260e6:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   260ea:	2b00      	cmp	r3, #0
   260ec:	d1fb      	bne.n	260e6 <InitAes.part.0+0x7a>
   260ee:	4917      	ldr	r1, [pc, #92]	; (2614c <InitAes.part.0+0xe0>)
   260f0:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   260f4:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   260f8:	2b00      	cmp	r3, #0
   260fa:	d1fb      	bne.n	260f4 <InitAes.part.0+0x88>
   260fc:	4a13      	ldr	r2, [pc, #76]	; (2614c <InitAes.part.0+0xe0>)
   260fe:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   26102:	2b00      	cmp	r3, #0
   26104:	d1fb      	bne.n	260fe <InitAes.part.0+0x92>
   26106:	6b62      	ldr	r2, [r4, #52]	; 0x34
   26108:	f022 0104 	bic.w	r1, r2, #4
   2610c:	2903      	cmp	r1, #3
   2610e:	bf18      	it	ne
   26110:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   26112:	490e      	ldr	r1, [pc, #56]	; (2614c <InitAes.part.0+0xe0>)
   26114:	ea4f 0282 	mov.w	r2, r2, lsl #2
   26118:	bf18      	it	ne
   2611a:	f003 0301 	andne.w	r3, r3, #1
   2611e:	f002 021c 	and.w	r2, r2, #28
   26122:	4313      	orrs	r3, r2
   26124:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   26128:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2612a:	2b07      	cmp	r3, #7
   2612c:	bf04      	itt	eq
   2612e:	2301      	moveq	r3, #1
   26130:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   26134:	2000      	movs	r0, #0
   26136:	bd38      	pop	{r3, r4, r5, pc}
   26138:	2b01      	cmp	r3, #1
   2613a:	bf0c      	ite	eq
   2613c:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   26140:	f020 0010 	bicne.w	r0, r0, #16
   26144:	f7fe fe56 	bl	24df4 <CC_HalMaskInterrupt>
   26148:	e7c4      	b.n	260d4 <InitAes.part.0+0x68>
   2614a:	bf00      	nop
   2614c:	5002b000 	.word	0x5002b000

00026150 <write_invalid_key>:
   26150:	4a09      	ldr	r2, [pc, #36]	; (26178 <write_invalid_key+0x28>)
   26152:	4b0a      	ldr	r3, [pc, #40]	; (2617c <write_invalid_key+0x2c>)
   26154:	6811      	ldr	r1, [r2, #0]
   26156:	6809      	ldr	r1, [r1, #0]
   26158:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   2615c:	6811      	ldr	r1, [r2, #0]
   2615e:	6849      	ldr	r1, [r1, #4]
   26160:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   26164:	6811      	ldr	r1, [r2, #0]
   26166:	6889      	ldr	r1, [r1, #8]
   26168:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   2616c:	6812      	ldr	r2, [r2, #0]
   2616e:	68d2      	ldr	r2, [r2, #12]
   26170:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   26174:	4770      	bx	lr
   26176:	bf00      	nop
   26178:	200008c0 	.word	0x200008c0
   2617c:	5002b000 	.word	0x5002b000

00026180 <ProcessAesDrv>:
   26180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26184:	b085      	sub	sp, #20
   26186:	2900      	cmp	r1, #0
   26188:	f000 80a3 	beq.w	262d2 <ProcessAesDrv+0x152>
   2618c:	4690      	mov	r8, r2
   2618e:	2a00      	cmp	r2, #0
   26190:	f000 809f 	beq.w	262d2 <ProcessAesDrv+0x152>
   26194:	4605      	mov	r5, r0
   26196:	2800      	cmp	r0, #0
   26198:	f000 813c 	beq.w	26414 <ProcessAesDrv+0x294>
   2619c:	4699      	mov	r9, r3
   2619e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   261a0:	460e      	mov	r6, r1
   261a2:	2b00      	cmp	r3, #0
   261a4:	d151      	bne.n	2624a <ProcessAesDrv+0xca>
   261a6:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   261aa:	d253      	bcs.n	26254 <ProcessAesDrv+0xd4>
   261ac:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   261b0:	2b04      	cmp	r3, #4
   261b2:	f000 8112 	beq.w	263da <ProcessAesDrv+0x25a>
   261b6:	2700      	movs	r7, #0
   261b8:	48a6      	ldr	r0, [pc, #664]	; (26454 <ProcessAesDrv+0x2d4>)
   261ba:	f04f 31ff 	mov.w	r1, #4294967295
   261be:	f7fe feb5 	bl	24f2c <CC_PalMutexLock>
   261c2:	2800      	cmp	r0, #0
   261c4:	f040 80e8 	bne.w	26398 <ProcessAesDrv+0x218>
   261c8:	2000      	movs	r0, #0
   261ca:	f7fe fedf 	bl	24f8c <CC_PalPowerSaveModeSelect>
   261ce:	2800      	cmp	r0, #0
   261d0:	f040 80eb 	bne.w	263aa <ProcessAesDrv+0x22a>
   261d4:	48a0      	ldr	r0, [pc, #640]	; (26458 <ProcessAesDrv+0x2d8>)
   261d6:	2301      	movs	r3, #1
   261d8:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   261dc:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   261e0:	2c00      	cmp	r4, #0
   261e2:	d1fb      	bne.n	261dc <ProcessAesDrv+0x5c>
   261e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   261e6:	2b03      	cmp	r3, #3
   261e8:	dc39      	bgt.n	2625e <ProcessAesDrv+0xde>
   261ea:	2b00      	cmp	r3, #0
   261ec:	da3a      	bge.n	26264 <ProcessAesDrv+0xe4>
   261ee:	4c9b      	ldr	r4, [pc, #620]	; (2645c <ProcessAesDrv+0x2dc>)
   261f0:	4a99      	ldr	r2, [pc, #612]	; (26458 <ProcessAesDrv+0x2d8>)
   261f2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   261f6:	2b00      	cmp	r3, #0
   261f8:	d1fb      	bne.n	261f2 <ProcessAesDrv+0x72>
   261fa:	2f00      	cmp	r7, #0
   261fc:	f040 80e4 	bne.w	263c8 <ProcessAesDrv+0x248>
   26200:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26202:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   26204:	f023 0304 	bic.w	r3, r3, #4
   26208:	2b03      	cmp	r3, #3
   2620a:	4b93      	ldr	r3, [pc, #588]	; (26458 <ProcessAesDrv+0x2d8>)
   2620c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   26210:	d056      	beq.n	262c0 <ProcessAesDrv+0x140>
   26212:	2a01      	cmp	r2, #1
   26214:	bf0c      	ite	eq
   26216:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2621a:	f040 0020 	orrne.w	r0, r0, #32
   2621e:	f7fe fde9 	bl	24df4 <CC_HalMaskInterrupt>
   26222:	4b8d      	ldr	r3, [pc, #564]	; (26458 <ProcessAesDrv+0x2d8>)
   26224:	2200      	movs	r2, #0
   26226:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   2622a:	2001      	movs	r0, #1
   2622c:	f7fe feae 	bl	24f8c <CC_PalPowerSaveModeSelect>
   26230:	2800      	cmp	r0, #0
   26232:	f040 80c5 	bne.w	263c0 <ProcessAesDrv+0x240>
   26236:	4887      	ldr	r0, [pc, #540]	; (26454 <ProcessAesDrv+0x2d4>)
   26238:	f7fe fe80 	bl	24f3c <CC_PalMutexUnlock>
   2623c:	2800      	cmp	r0, #0
   2623e:	f040 80b8 	bne.w	263b2 <ProcessAesDrv+0x232>
   26242:	4620      	mov	r0, r4
   26244:	b005      	add	sp, #20
   26246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2624a:	2b01      	cmp	r3, #1
   2624c:	d1ae      	bne.n	261ac <ProcessAesDrv+0x2c>
   2624e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   26252:	d3ab      	bcc.n	261ac <ProcessAesDrv+0x2c>
   26254:	4c82      	ldr	r4, [pc, #520]	; (26460 <ProcessAesDrv+0x2e0>)
   26256:	4620      	mov	r0, r4
   26258:	b005      	add	sp, #20
   2625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2625e:	3b06      	subs	r3, #6
   26260:	2b01      	cmp	r3, #1
   26262:	d8c4      	bhi.n	261ee <ProcessAesDrv+0x6e>
   26264:	6bab      	ldr	r3, [r5, #56]	; 0x38
   26266:	2b01      	cmp	r3, #1
   26268:	f200 80d2 	bhi.w	26410 <ProcessAesDrv+0x290>
   2626c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2626e:	2b01      	cmp	r3, #1
   26270:	d834      	bhi.n	262dc <ProcessAesDrv+0x15c>
   26272:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   26274:	2b01      	cmp	r3, #1
   26276:	f200 8122 	bhi.w	264be <ProcessAesDrv+0x33e>
   2627a:	4628      	mov	r0, r5
   2627c:	f7ff fef6 	bl	2606c <InitAes.part.0>
   26280:	4604      	mov	r4, r0
   26282:	2800      	cmp	r0, #0
   26284:	d1b4      	bne.n	261f0 <ProcessAesDrv+0x70>
   26286:	4628      	mov	r0, r5
   26288:	f7ff fe9e 	bl	25fc8 <LoadAesKey>
   2628c:	4604      	mov	r4, r0
   2628e:	2800      	cmp	r0, #0
   26290:	d1ae      	bne.n	261f0 <ProcessAesDrv+0x70>
   26292:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26294:	2b07      	cmp	r3, #7
   26296:	d8aa      	bhi.n	261ee <ProcessAesDrv+0x6e>
   26298:	a201      	add	r2, pc, #4	; (adr r2, 262a0 <ProcessAesDrv+0x120>)
   2629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2629e:	bf00      	nop
   262a0:	000262fd 	.word	0x000262fd
   262a4:	000262e1 	.word	0x000262e1
   262a8:	00026485 	.word	0x00026485
   262ac:	000262e1 	.word	0x000262e1
   262b0:	000261ef 	.word	0x000261ef
   262b4:	000261ef 	.word	0x000261ef
   262b8:	00026485 	.word	0x00026485
   262bc:	000262e1 	.word	0x000262e1
   262c0:	2a01      	cmp	r2, #1
   262c2:	bf0c      	ite	eq
   262c4:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   262c8:	f040 0010 	orrne.w	r0, r0, #16
   262cc:	f7fe fd92 	bl	24df4 <CC_HalMaskInterrupt>
   262d0:	e7a7      	b.n	26222 <ProcessAesDrv+0xa2>
   262d2:	4c64      	ldr	r4, [pc, #400]	; (26464 <ProcessAesDrv+0x2e4>)
   262d4:	4620      	mov	r0, r4
   262d6:	b005      	add	sp, #20
   262d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262dc:	4c62      	ldr	r4, [pc, #392]	; (26468 <ProcessAesDrv+0x2e8>)
   262de:	e787      	b.n	261f0 <ProcessAesDrv+0x70>
   262e0:	4b5d      	ldr	r3, [pc, #372]	; (26458 <ProcessAesDrv+0x2d8>)
   262e2:	682a      	ldr	r2, [r5, #0]
   262e4:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   262e8:	686a      	ldr	r2, [r5, #4]
   262ea:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   262ee:	68aa      	ldr	r2, [r5, #8]
   262f0:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   262f4:	68ea      	ldr	r2, [r5, #12]
   262f6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   262fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   262fc:	6832      	ldr	r2, [r6, #0]
   262fe:	f023 0304 	bic.w	r3, r3, #4
   26302:	2b03      	cmp	r3, #3
   26304:	d00d      	beq.n	26322 <ProcessAesDrv+0x1a2>
   26306:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   26308:	f8d8 1000 	ldr.w	r1, [r8]
   2630c:	2b01      	cmp	r3, #1
   2630e:	4b52      	ldr	r3, [pc, #328]	; (26458 <ProcessAesDrv+0x2d8>)
   26310:	bf0b      	itete	eq
   26312:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   26316:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   2631a:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   2631e:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   26322:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   26324:	2b01      	cmp	r3, #1
   26326:	4b4c      	ldr	r3, [pc, #304]	; (26458 <ProcessAesDrv+0x2d8>)
   26328:	bf0b      	itete	eq
   2632a:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   2632e:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   26332:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   26336:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   2633a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2633c:	f023 0304 	bic.w	r3, r3, #4
   26340:	2b03      	cmp	r3, #3
   26342:	d06a      	beq.n	2641a <ProcessAesDrv+0x29a>
   26344:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   26346:	2b01      	cmp	r3, #1
   26348:	bf0c      	ite	eq
   2634a:	2080      	moveq	r0, #128	; 0x80
   2634c:	2020      	movne	r0, #32
   2634e:	f7fe fd57 	bl	24e00 <CC_HalWaitInterrupt>
   26352:	4604      	mov	r4, r0
   26354:	2800      	cmp	r0, #0
   26356:	f47f af4b 	bne.w	261f0 <ProcessAesDrv+0x70>
   2635a:	4b3f      	ldr	r3, [pc, #252]	; (26458 <ProcessAesDrv+0x2d8>)
   2635c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   26360:	2c00      	cmp	r4, #0
   26362:	d1fb      	bne.n	2635c <ProcessAesDrv+0x1dc>
   26364:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26366:	3b01      	subs	r3, #1
   26368:	2b06      	cmp	r3, #6
   2636a:	d812      	bhi.n	26392 <ProcessAesDrv+0x212>
   2636c:	e8df f003 	tbb	[pc, r3]
   26370:	11049904 	.word	0x11049904
   26374:	9911      	.short	0x9911
   26376:	04          	.byte	0x04
   26377:	00          	.byte	0x00
   26378:	4b37      	ldr	r3, [pc, #220]	; (26458 <ProcessAesDrv+0x2d8>)
   2637a:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2637e:	602a      	str	r2, [r5, #0]
   26380:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   26384:	606a      	str	r2, [r5, #4]
   26386:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   2638a:	60aa      	str	r2, [r5, #8]
   2638c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   26390:	60eb      	str	r3, [r5, #12]
   26392:	2301      	movs	r3, #1
   26394:	65ab      	str	r3, [r5, #88]	; 0x58
   26396:	e72b      	b.n	261f0 <ProcessAesDrv+0x70>
   26398:	4834      	ldr	r0, [pc, #208]	; (2646c <ProcessAesDrv+0x2ec>)
   2639a:	f7fd fe67 	bl	2406c <CC_PalAbort>
   2639e:	2000      	movs	r0, #0
   263a0:	f7fe fdf4 	bl	24f8c <CC_PalPowerSaveModeSelect>
   263a4:	2800      	cmp	r0, #0
   263a6:	f43f af15 	beq.w	261d4 <ProcessAesDrv+0x54>
   263aa:	4831      	ldr	r0, [pc, #196]	; (26470 <ProcessAesDrv+0x2f0>)
   263ac:	f7fd fe5e 	bl	2406c <CC_PalAbort>
   263b0:	e710      	b.n	261d4 <ProcessAesDrv+0x54>
   263b2:	4830      	ldr	r0, [pc, #192]	; (26474 <ProcessAesDrv+0x2f4>)
   263b4:	f7fd fe5a 	bl	2406c <CC_PalAbort>
   263b8:	4620      	mov	r0, r4
   263ba:	b005      	add	sp, #20
   263bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263c0:	482d      	ldr	r0, [pc, #180]	; (26478 <ProcessAesDrv+0x2f8>)
   263c2:	f7fd fe53 	bl	2406c <CC_PalAbort>
   263c6:	e736      	b.n	26236 <ProcessAesDrv+0xb6>
   263c8:	2304      	movs	r3, #4
   263ca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   263ce:	2120      	movs	r1, #32
   263d0:	f105 0010 	add.w	r0, r5, #16
   263d4:	f7fe fd92 	bl	24efc <CC_PalMemSetZeroPlat>
   263d8:	e712      	b.n	26200 <ProcessAesDrv+0x80>
   263da:	6b29      	ldr	r1, [r5, #48]	; 0x30
   263dc:	6c28      	ldr	r0, [r5, #64]	; 0x40
   263de:	f000 f9b5 	bl	2674c <kmu_validate_slot_and_size>
   263e2:	b998      	cbnz	r0, 2640c <ProcessAesDrv+0x28c>
   263e4:	4f25      	ldr	r7, [pc, #148]	; (2647c <ProcessAesDrv+0x2fc>)
   263e6:	4c1c      	ldr	r4, [pc, #112]	; (26458 <ProcessAesDrv+0x2d8>)
   263e8:	683b      	ldr	r3, [r7, #0]
   263ea:	681b      	ldr	r3, [r3, #0]
   263ec:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   263f0:	683b      	ldr	r3, [r7, #0]
   263f2:	685b      	ldr	r3, [r3, #4]
   263f4:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   263f8:	683b      	ldr	r3, [r7, #0]
   263fa:	689b      	ldr	r3, [r3, #8]
   263fc:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   26400:	683b      	ldr	r3, [r7, #0]
   26402:	68db      	ldr	r3, [r3, #12]
   26404:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   26408:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2640a:	b161      	cbz	r1, 26426 <ProcessAesDrv+0x2a6>
   2640c:	2701      	movs	r7, #1
   2640e:	e6d3      	b.n	261b8 <ProcessAesDrv+0x38>
   26410:	4c1b      	ldr	r4, [pc, #108]	; (26480 <ProcessAesDrv+0x300>)
   26412:	e6ed      	b.n	261f0 <ProcessAesDrv+0x70>
   26414:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   26418:	e713      	b.n	26242 <ProcessAesDrv+0xc2>
   2641a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2641c:	2b01      	cmp	r3, #1
   2641e:	bf0c      	ite	eq
   26420:	2040      	moveq	r0, #64	; 0x40
   26422:	2010      	movne	r0, #16
   26424:	e793      	b.n	2634e <ProcessAesDrv+0x1ce>
   26426:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   26428:	9301      	str	r3, [sp, #4]
   2642a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2642c:	9300      	str	r3, [sp, #0]
   2642e:	f105 0a10 	add.w	sl, r5, #16
   26432:	f04f 0b10 	mov.w	fp, #16
   26436:	f8cd a008 	str.w	sl, [sp, #8]
   2643a:	f8cd b00c 	str.w	fp, [sp, #12]
   2643e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   26442:	6c28      	ldr	r0, [r5, #64]	; 0x40
   26444:	f000 f9a4 	bl	26790 <kmu_derive_cmac>
   26448:	2800      	cmp	r0, #0
   2644a:	d13a      	bne.n	264c2 <ProcessAesDrv+0x342>
   2644c:	2300      	movs	r3, #0
   2644e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   26452:	e7db      	b.n	2640c <ProcessAesDrv+0x28c>
   26454:	200008d0 	.word	0x200008d0
   26458:	5002b000 	.word	0x5002b000
   2645c:	00f10001 	.word	0x00f10001
   26460:	00f10005 	.word	0x00f10005
   26464:	00f1000b 	.word	0x00f1000b
   26468:	00f10003 	.word	0x00f10003
   2646c:	0002a2b0 	.word	0x0002a2b0
   26470:	0002a2c8 	.word	0x0002a2c8
   26474:	0002a308 	.word	0x0002a308
   26478:	0002a2e8 	.word	0x0002a2e8
   2647c:	200008c0 	.word	0x200008c0
   26480:	00f10002 	.word	0x00f10002
   26484:	4b19      	ldr	r3, [pc, #100]	; (264ec <ProcessAesDrv+0x36c>)
   26486:	682a      	ldr	r2, [r5, #0]
   26488:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2648c:	686a      	ldr	r2, [r5, #4]
   2648e:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   26492:	68aa      	ldr	r2, [r5, #8]
   26494:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   26498:	68ea      	ldr	r2, [r5, #12]
   2649a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2649e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   264a0:	e72c      	b.n	262fc <ProcessAesDrv+0x17c>
   264a2:	4b12      	ldr	r3, [pc, #72]	; (264ec <ProcessAesDrv+0x36c>)
   264a4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   264a8:	602a      	str	r2, [r5, #0]
   264aa:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   264ae:	606a      	str	r2, [r5, #4]
   264b0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   264b4:	60aa      	str	r2, [r5, #8]
   264b6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   264ba:	60eb      	str	r3, [r5, #12]
   264bc:	e769      	b.n	26392 <ProcessAesDrv+0x212>
   264be:	4c0c      	ldr	r4, [pc, #48]	; (264f0 <ProcessAesDrv+0x370>)
   264c0:	e696      	b.n	261f0 <ProcessAesDrv+0x70>
   264c2:	683b      	ldr	r3, [r7, #0]
   264c4:	681b      	ldr	r3, [r3, #0]
   264c6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   264ca:	683b      	ldr	r3, [r7, #0]
   264cc:	685b      	ldr	r3, [r3, #4]
   264ce:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   264d2:	683b      	ldr	r3, [r7, #0]
   264d4:	689b      	ldr	r3, [r3, #8]
   264d6:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   264da:	683b      	ldr	r3, [r7, #0]
   264dc:	68db      	ldr	r3, [r3, #12]
   264de:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   264e2:	4659      	mov	r1, fp
   264e4:	4650      	mov	r0, sl
   264e6:	f7fe fd09 	bl	24efc <CC_PalMemSetZeroPlat>
   264ea:	e7af      	b.n	2644c <ProcessAesDrv+0x2cc>
   264ec:	5002b000 	.word	0x5002b000
   264f0:	00f10004 	.word	0x00f10004

000264f4 <FinishAesDrv>:
   264f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264f8:	b301      	cbz	r1, 2653c <FinishAesDrv+0x48>
   264fa:	b1fa      	cbz	r2, 2653c <FinishAesDrv+0x48>
   264fc:	4604      	mov	r4, r0
   264fe:	2800      	cmp	r0, #0
   26500:	d07c      	beq.n	265fc <FinishAesDrv+0x108>
   26502:	461d      	mov	r5, r3
   26504:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26506:	2b07      	cmp	r3, #7
   26508:	460e      	mov	r6, r1
   2650a:	d01b      	beq.n	26544 <FinishAesDrv+0x50>
   2650c:	b95d      	cbnz	r5, 26526 <FinishAesDrv+0x32>
   2650e:	2b03      	cmp	r3, #3
   26510:	d110      	bne.n	26534 <FinishAesDrv+0x40>
   26512:	6d83      	ldr	r3, [r0, #88]	; 0x58
   26514:	b973      	cbnz	r3, 26534 <FinishAesDrv+0x40>
   26516:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2651a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2651e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   26522:	600b      	str	r3, [r1, #0]
   26524:	2510      	movs	r5, #16
   26526:	462b      	mov	r3, r5
   26528:	4631      	mov	r1, r6
   2652a:	4620      	mov	r0, r4
   2652c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26530:	f7ff be26 	b.w	26180 <ProcessAesDrv>
   26534:	462f      	mov	r7, r5
   26536:	4638      	mov	r0, r7
   26538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2653c:	4f77      	ldr	r7, [pc, #476]	; (2671c <FinishAesDrv+0x228>)
   2653e:	4638      	mov	r0, r7
   26540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26544:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   26546:	2b00      	cmp	r3, #0
   26548:	d15b      	bne.n	26602 <FinishAesDrv+0x10e>
   2654a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2654e:	d25d      	bcs.n	2660c <FinishAesDrv+0x118>
   26550:	b915      	cbnz	r5, 26558 <FinishAesDrv+0x64>
   26552:	6da3      	ldr	r3, [r4, #88]	; 0x58
   26554:	2b00      	cmp	r3, #0
   26556:	d159      	bne.n	2660c <FinishAesDrv+0x118>
   26558:	4871      	ldr	r0, [pc, #452]	; (26720 <FinishAesDrv+0x22c>)
   2655a:	f04f 31ff 	mov.w	r1, #4294967295
   2655e:	f7fe fce5 	bl	24f2c <CC_PalMutexLock>
   26562:	2800      	cmp	r0, #0
   26564:	f040 80b8 	bne.w	266d8 <FinishAesDrv+0x1e4>
   26568:	2000      	movs	r0, #0
   2656a:	f7fe fd0f 	bl	24f8c <CC_PalPowerSaveModeSelect>
   2656e:	2800      	cmp	r0, #0
   26570:	f040 80ae 	bne.w	266d0 <FinishAesDrv+0x1dc>
   26574:	4a6b      	ldr	r2, [pc, #428]	; (26724 <FinishAesDrv+0x230>)
   26576:	2301      	movs	r3, #1
   26578:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   2657c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26580:	2b00      	cmp	r3, #0
   26582:	d1fb      	bne.n	2657c <FinishAesDrv+0x88>
   26584:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26586:	2b03      	cmp	r3, #3
   26588:	dd20      	ble.n	265cc <FinishAesDrv+0xd8>
   2658a:	3b06      	subs	r3, #6
   2658c:	2b01      	cmp	r3, #1
   2658e:	d81f      	bhi.n	265d0 <FinishAesDrv+0xdc>
   26590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26592:	2b01      	cmp	r3, #1
   26594:	d83c      	bhi.n	26610 <FinishAesDrv+0x11c>
   26596:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26598:	2b01      	cmp	r3, #1
   2659a:	f200 80a5 	bhi.w	266e8 <FinishAesDrv+0x1f4>
   2659e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   265a0:	2b01      	cmp	r3, #1
   265a2:	f200 80a3 	bhi.w	266ec <FinishAesDrv+0x1f8>
   265a6:	4620      	mov	r0, r4
   265a8:	f7ff fd60 	bl	2606c <InitAes.part.0>
   265ac:	4607      	mov	r7, r0
   265ae:	b980      	cbnz	r0, 265d2 <FinishAesDrv+0xde>
   265b0:	4620      	mov	r0, r4
   265b2:	f7ff fd09 	bl	25fc8 <LoadAesKey>
   265b6:	4607      	mov	r7, r0
   265b8:	b958      	cbnz	r0, 265d2 <FinishAesDrv+0xde>
   265ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   265bc:	2b07      	cmp	r3, #7
   265be:	d807      	bhi.n	265d0 <FinishAesDrv+0xdc>
   265c0:	e8df f003 	tbb	[pc, r3]
   265c4:	285c2835 	.word	0x285c2835
   265c8:	285c0606 	.word	0x285c0606
   265cc:	2b00      	cmp	r3, #0
   265ce:	dadf      	bge.n	26590 <FinishAesDrv+0x9c>
   265d0:	4f55      	ldr	r7, [pc, #340]	; (26728 <FinishAesDrv+0x234>)
   265d2:	4a54      	ldr	r2, [pc, #336]	; (26724 <FinishAesDrv+0x230>)
   265d4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   265d8:	2b00      	cmp	r3, #0
   265da:	d1fb      	bne.n	265d4 <FinishAesDrv+0xe0>
   265dc:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   265e0:	2001      	movs	r0, #1
   265e2:	f7fe fcd3 	bl	24f8c <CC_PalPowerSaveModeSelect>
   265e6:	2800      	cmp	r0, #0
   265e8:	d17a      	bne.n	266e0 <FinishAesDrv+0x1ec>
   265ea:	484d      	ldr	r0, [pc, #308]	; (26720 <FinishAesDrv+0x22c>)
   265ec:	f7fe fca6 	bl	24f3c <CC_PalMutexUnlock>
   265f0:	2800      	cmp	r0, #0
   265f2:	d0a0      	beq.n	26536 <FinishAesDrv+0x42>
   265f4:	484d      	ldr	r0, [pc, #308]	; (2672c <FinishAesDrv+0x238>)
   265f6:	f7fd fd39 	bl	2406c <CC_PalAbort>
   265fa:	e79c      	b.n	26536 <FinishAesDrv+0x42>
   265fc:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   26600:	e799      	b.n	26536 <FinishAesDrv+0x42>
   26602:	2b01      	cmp	r3, #1
   26604:	d1a4      	bne.n	26550 <FinishAesDrv+0x5c>
   26606:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2660a:	d3a1      	bcc.n	26550 <FinishAesDrv+0x5c>
   2660c:	4f48      	ldr	r7, [pc, #288]	; (26730 <FinishAesDrv+0x23c>)
   2660e:	e792      	b.n	26536 <FinishAesDrv+0x42>
   26610:	4f48      	ldr	r7, [pc, #288]	; (26734 <FinishAesDrv+0x240>)
   26612:	e7de      	b.n	265d2 <FinishAesDrv+0xde>
   26614:	4b43      	ldr	r3, [pc, #268]	; (26724 <FinishAesDrv+0x230>)
   26616:	6822      	ldr	r2, [r4, #0]
   26618:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   2661c:	6862      	ldr	r2, [r4, #4]
   2661e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   26622:	68a2      	ldr	r2, [r4, #8]
   26624:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   26628:	68e2      	ldr	r2, [r4, #12]
   2662a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2662e:	4b3d      	ldr	r3, [pc, #244]	; (26724 <FinishAesDrv+0x230>)
   26630:	2201      	movs	r2, #1
   26632:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   26636:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   2663a:	2d00      	cmp	r5, #0
   2663c:	d158      	bne.n	266f0 <FinishAesDrv+0x1fc>
   2663e:	6da1      	ldr	r1, [r4, #88]	; 0x58
   26640:	b909      	cbnz	r1, 26646 <FinishAesDrv+0x152>
   26642:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   26646:	4b37      	ldr	r3, [pc, #220]	; (26724 <FinishAesDrv+0x230>)
   26648:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   2664c:	2f00      	cmp	r7, #0
   2664e:	d1fb      	bne.n	26648 <FinishAesDrv+0x154>
   26650:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26652:	3b01      	subs	r3, #1
   26654:	2b06      	cmp	r3, #6
   26656:	d8bc      	bhi.n	265d2 <FinishAesDrv+0xde>
   26658:	a201      	add	r2, pc, #4	; (adr r2, 26660 <FinishAesDrv+0x16c>)
   2665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2665e:	bf00      	nop
   26660:	00026699 	.word	0x00026699
   26664:	000266b5 	.word	0x000266b5
   26668:	00026699 	.word	0x00026699
   2666c:	000265d3 	.word	0x000265d3
   26670:	000265d3 	.word	0x000265d3
   26674:	000266b5 	.word	0x000266b5
   26678:	00026699 	.word	0x00026699
   2667c:	4b29      	ldr	r3, [pc, #164]	; (26724 <FinishAesDrv+0x230>)
   2667e:	6822      	ldr	r2, [r4, #0]
   26680:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   26684:	6862      	ldr	r2, [r4, #4]
   26686:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2668a:	68a2      	ldr	r2, [r4, #8]
   2668c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   26690:	68e2      	ldr	r2, [r4, #12]
   26692:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   26696:	e7ca      	b.n	2662e <FinishAesDrv+0x13a>
   26698:	4b22      	ldr	r3, [pc, #136]	; (26724 <FinishAesDrv+0x230>)
   2669a:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2669e:	6022      	str	r2, [r4, #0]
   266a0:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   266a4:	6062      	str	r2, [r4, #4]
   266a6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   266aa:	60a2      	str	r2, [r4, #8]
   266ac:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   266b0:	60e3      	str	r3, [r4, #12]
   266b2:	e78e      	b.n	265d2 <FinishAesDrv+0xde>
   266b4:	4b1b      	ldr	r3, [pc, #108]	; (26724 <FinishAesDrv+0x230>)
   266b6:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   266ba:	6022      	str	r2, [r4, #0]
   266bc:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   266c0:	6062      	str	r2, [r4, #4]
   266c2:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   266c6:	60a2      	str	r2, [r4, #8]
   266c8:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   266cc:	60e3      	str	r3, [r4, #12]
   266ce:	e780      	b.n	265d2 <FinishAesDrv+0xde>
   266d0:	4819      	ldr	r0, [pc, #100]	; (26738 <FinishAesDrv+0x244>)
   266d2:	f7fd fccb 	bl	2406c <CC_PalAbort>
   266d6:	e74d      	b.n	26574 <FinishAesDrv+0x80>
   266d8:	4818      	ldr	r0, [pc, #96]	; (2673c <FinishAesDrv+0x248>)
   266da:	f7fd fcc7 	bl	2406c <CC_PalAbort>
   266de:	e743      	b.n	26568 <FinishAesDrv+0x74>
   266e0:	4817      	ldr	r0, [pc, #92]	; (26740 <FinishAesDrv+0x24c>)
   266e2:	f7fd fcc3 	bl	2406c <CC_PalAbort>
   266e6:	e780      	b.n	265ea <FinishAesDrv+0xf6>
   266e8:	4f16      	ldr	r7, [pc, #88]	; (26744 <FinishAesDrv+0x250>)
   266ea:	e772      	b.n	265d2 <FinishAesDrv+0xde>
   266ec:	4f16      	ldr	r7, [pc, #88]	; (26748 <FinishAesDrv+0x254>)
   266ee:	e770      	b.n	265d2 <FinishAesDrv+0xde>
   266f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   266f2:	6832      	ldr	r2, [r6, #0]
   266f4:	2901      	cmp	r1, #1
   266f6:	d00a      	beq.n	2670e <FinishAesDrv+0x21a>
   266f8:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   266fc:	2010      	movs	r0, #16
   266fe:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   26702:	f7fe fb7d 	bl	24e00 <CC_HalWaitInterrupt>
   26706:	4607      	mov	r7, r0
   26708:	2800      	cmp	r0, #0
   2670a:	d09c      	beq.n	26646 <FinishAesDrv+0x152>
   2670c:	e761      	b.n	265d2 <FinishAesDrv+0xde>
   2670e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   26712:	2040      	movs	r0, #64	; 0x40
   26714:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   26718:	e7f3      	b.n	26702 <FinishAesDrv+0x20e>
   2671a:	bf00      	nop
   2671c:	00f1000b 	.word	0x00f1000b
   26720:	200008d0 	.word	0x200008d0
   26724:	5002b000 	.word	0x5002b000
   26728:	00f10001 	.word	0x00f10001
   2672c:	0002a308 	.word	0x0002a308
   26730:	00f10005 	.word	0x00f10005
   26734:	00f10002 	.word	0x00f10002
   26738:	0002a2c8 	.word	0x0002a2c8
   2673c:	0002a2b0 	.word	0x0002a2b0
   26740:	0002a2e8 	.word	0x0002a2e8
   26744:	00f10003 	.word	0x00f10003
   26748:	00f10004 	.word	0x00f10004

0002674c <kmu_validate_slot_and_size>:
   2674c:	b921      	cbnz	r1, 26758 <kmu_validate_slot_and_size+0xc>
   2674e:	4b03      	ldr	r3, [pc, #12]	; (2675c <kmu_validate_slot_and_size+0x10>)
   26750:	2800      	cmp	r0, #0
   26752:	bf18      	it	ne
   26754:	4618      	movne	r0, r3
   26756:	4770      	bx	lr
   26758:	4801      	ldr	r0, [pc, #4]	; (26760 <kmu_validate_slot_and_size+0x14>)
   2675a:	4770      	bx	lr
   2675c:	00f70001 	.word	0x00f70001
   26760:	00f70003 	.word	0x00f70003

00026764 <kmu_validate_kdr_slot_and_size>:
   26764:	b921      	cbnz	r1, 26770 <kmu_validate_kdr_slot_and_size+0xc>
   26766:	4b03      	ldr	r3, [pc, #12]	; (26774 <kmu_validate_kdr_slot_and_size+0x10>)
   26768:	2800      	cmp	r0, #0
   2676a:	bf18      	it	ne
   2676c:	4618      	movne	r0, r3
   2676e:	4770      	bx	lr
   26770:	4801      	ldr	r0, [pc, #4]	; (26778 <kmu_validate_kdr_slot_and_size+0x14>)
   26772:	4770      	bx	lr
   26774:	00f70001 	.word	0x00f70001
   26778:	00f70003 	.word	0x00f70003

0002677c <kmu_use_kdr_key>:
   2677c:	4b03      	ldr	r3, [pc, #12]	; (2678c <kmu_use_kdr_key+0x10>)
   2677e:	2000      	movs	r0, #0
   26780:	2201      	movs	r2, #1
   26782:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   26786:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   2678a:	4770      	bx	lr
   2678c:	5002b000 	.word	0x5002b000

00026790 <kmu_derive_cmac>:
   26790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26794:	b0cc      	sub	sp, #304	; 0x130
   26796:	2400      	movs	r4, #0
   26798:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   2679a:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2679e:	4682      	mov	sl, r0
   267a0:	4689      	mov	r9, r1
   267a2:	4616      	mov	r6, r2
   267a4:	4621      	mov	r1, r4
   267a6:	2274      	movs	r2, #116	; 0x74
   267a8:	a80e      	add	r0, sp, #56	; 0x38
   267aa:	461f      	mov	r7, r3
   267ac:	f000 fdda 	bl	27364 <memset>
   267b0:	2280      	movs	r2, #128	; 0x80
   267b2:	4621      	mov	r1, r4
   267b4:	a82c      	add	r0, sp, #176	; 0xb0
   267b6:	942b      	str	r4, [sp, #172]	; 0xac
   267b8:	f000 fdd4 	bl	27364 <memset>
   267bc:	2384      	movs	r3, #132	; 0x84
   267be:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   267c2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   267c6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   267ca:	9305      	str	r3, [sp, #20]
   267cc:	d863      	bhi.n	26896 <kmu_derive_cmac+0x106>
   267ce:	f7ff fcbf 	bl	26150 <write_invalid_key>
   267d2:	ab05      	add	r3, sp, #20
   267d4:	4630      	mov	r0, r6
   267d6:	ae2b      	add	r6, sp, #172	; 0xac
   267d8:	9301      	str	r3, [sp, #4]
   267da:	9502      	str	r5, [sp, #8]
   267dc:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   267e0:	4639      	mov	r1, r7
   267e2:	9600      	str	r6, [sp, #0]
   267e4:	f000 f862 	bl	268ac <UtilCmacBuildDataForDerivation>
   267e8:	2800      	cmp	r0, #0
   267ea:	d14f      	bne.n	2688c <kmu_derive_cmac+0xfc>
   267ec:	2303      	movs	r3, #3
   267ee:	f88d 3013 	strb.w	r3, [sp, #19]
   267f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   267f6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   267fa:	2307      	movs	r3, #7
   267fc:	2200      	movs	r2, #0
   267fe:	901c      	str	r0, [sp, #112]	; 0x70
   26800:	2110      	movs	r1, #16
   26802:	a80e      	add	r0, sp, #56	; 0x38
   26804:	931b      	str	r3, [sp, #108]	; 0x6c
   26806:	2401      	movs	r4, #1
   26808:	2301      	movs	r3, #1
   2680a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2680e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   26812:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   26816:	9426      	str	r4, [sp, #152]	; 0x98
   26818:	f10d 0920 	add.w	r9, sp, #32
   2681c:	f7fe fb6e 	bl	24efc <CC_PalMemSetZeroPlat>
   26820:	2210      	movs	r2, #16
   26822:	9200      	str	r2, [sp, #0]
   26824:	9905      	ldr	r1, [sp, #20]
   26826:	f8cd 9004 	str.w	r9, [sp, #4]
   2682a:	ab0a      	add	r3, sp, #40	; 0x28
   2682c:	4630      	mov	r0, r6
   2682e:	aa06      	add	r2, sp, #24
   26830:	f7ff fa1e 	bl	25c70 <SetDataBuffersInfo>
   26834:	4607      	mov	r7, r0
   26836:	b170      	cbz	r0, 26856 <kmu_derive_cmac+0xc6>
   26838:	e01d      	b.n	26876 <kmu_derive_cmac+0xe6>
   2683a:	a90e      	add	r1, sp, #56	; 0x38
   2683c:	eb08 0007 	add.w	r0, r8, r7
   26840:	f7fe fb58 	bl	24ef4 <CC_PalMemCopyPlat>
   26844:	2110      	movs	r1, #16
   26846:	a80e      	add	r0, sp, #56	; 0x38
   26848:	f7fe fb58 	bl	24efc <CC_PalMemSetZeroPlat>
   2684c:	3401      	adds	r4, #1
   2684e:	1bad      	subs	r5, r5, r6
   26850:	4437      	add	r7, r6
   26852:	b2e4      	uxtb	r4, r4
   26854:	d024      	beq.n	268a0 <kmu_derive_cmac+0x110>
   26856:	2d10      	cmp	r5, #16
   26858:	464a      	mov	r2, r9
   2685a:	9b05      	ldr	r3, [sp, #20]
   2685c:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   26860:	a906      	add	r1, sp, #24
   26862:	a80e      	add	r0, sp, #56	; 0x38
   26864:	462e      	mov	r6, r5
   26866:	bf28      	it	cs
   26868:	2610      	movcs	r6, #16
   2686a:	f7ff fe43 	bl	264f4 <FinishAesDrv>
   2686e:	4632      	mov	r2, r6
   26870:	2800      	cmp	r0, #0
   26872:	d0e2      	beq.n	2683a <kmu_derive_cmac+0xaa>
   26874:	4607      	mov	r7, r0
   26876:	a80e      	add	r0, sp, #56	; 0x38
   26878:	2274      	movs	r2, #116	; 0x74
   2687a:	2100      	movs	r1, #0
   2687c:	f7fe fb3c 	bl	24ef8 <CC_PalMemSetPlat>
   26880:	f7ff fc66 	bl	26150 <write_invalid_key>
   26884:	4638      	mov	r0, r7
   26886:	b04c      	add	sp, #304	; 0x130
   26888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2688c:	4f05      	ldr	r7, [pc, #20]	; (268a4 <kmu_derive_cmac+0x114>)
   2688e:	4638      	mov	r0, r7
   26890:	b04c      	add	sp, #304	; 0x130
   26892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26896:	4f04      	ldr	r7, [pc, #16]	; (268a8 <kmu_derive_cmac+0x118>)
   26898:	4638      	mov	r0, r7
   2689a:	b04c      	add	sp, #304	; 0x130
   2689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   268a0:	462f      	mov	r7, r5
   268a2:	e7e8      	b.n	26876 <kmu_derive_cmac+0xe6>
   268a4:	00f1000e 	.word	0x00f1000e
   268a8:	00f1000f 	.word	0x00f1000f

000268ac <UtilCmacBuildDataForDerivation>:
   268ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268b0:	b082      	sub	sp, #8
   268b2:	461e      	mov	r6, r3
   268b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   268b6:	2300      	movs	r3, #0
   268b8:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   268bc:	9301      	str	r3, [sp, #4]
   268be:	d83e      	bhi.n	2693e <UtilCmacBuildDataForDerivation+0x92>
   268c0:	00e4      	lsls	r4, r4, #3
   268c2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   268c6:	4617      	mov	r7, r2
   268c8:	f101 32ff 	add.w	r2, r1, #4294967295
   268cc:	bf34      	ite	cc
   268ce:	2303      	movcc	r3, #3
   268d0:	2304      	movcs	r3, #4
   268d2:	2a3f      	cmp	r2, #63	; 0x3f
   268d4:	460d      	mov	r5, r1
   268d6:	9300      	str	r3, [sp, #0]
   268d8:	d831      	bhi.n	2693e <UtilCmacBuildDataForDerivation+0x92>
   268da:	b380      	cbz	r0, 2693e <UtilCmacBuildDataForDerivation+0x92>
   268dc:	b116      	cbz	r6, 268e4 <UtilCmacBuildDataForDerivation+0x38>
   268de:	b377      	cbz	r7, 2693e <UtilCmacBuildDataForDerivation+0x92>
   268e0:	2e40      	cmp	r6, #64	; 0x40
   268e2:	d82c      	bhi.n	2693e <UtilCmacBuildDataForDerivation+0x92>
   268e4:	9a08      	ldr	r2, [sp, #32]
   268e6:	b352      	cbz	r2, 2693e <UtilCmacBuildDataForDerivation+0x92>
   268e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   268ea:	6811      	ldr	r1, [r2, #0]
   268ec:	b339      	cbz	r1, 2693e <UtilCmacBuildDataForDerivation+0x92>
   268ee:	19aa      	adds	r2, r5, r6
   268f0:	4413      	add	r3, r2
   268f2:	4299      	cmp	r1, r3
   268f4:	d323      	bcc.n	2693e <UtilCmacBuildDataForDerivation+0x92>
   268f6:	9b08      	ldr	r3, [sp, #32]
   268f8:	4601      	mov	r1, r0
   268fa:	462a      	mov	r2, r5
   268fc:	1c58      	adds	r0, r3, #1
   268fe:	f7fe faf9 	bl	24ef4 <CC_PalMemCopyPlat>
   26902:	9b08      	ldr	r3, [sp, #32]
   26904:	f105 0802 	add.w	r8, r5, #2
   26908:	441d      	add	r5, r3
   2690a:	2300      	movs	r3, #0
   2690c:	706b      	strb	r3, [r5, #1]
   2690e:	bb0e      	cbnz	r6, 26954 <UtilCmacBuildDataForDerivation+0xa8>
   26910:	9b08      	ldr	r3, [sp, #32]
   26912:	9400      	str	r4, [sp, #0]
   26914:	2cff      	cmp	r4, #255	; 0xff
   26916:	eb03 0008 	add.w	r0, r3, r8
   2691a:	d914      	bls.n	26946 <UtilCmacBuildDataForDerivation+0x9a>
   2691c:	0223      	lsls	r3, r4, #8
   2691e:	b29b      	uxth	r3, r3
   26920:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   26924:	2202      	movs	r2, #2
   26926:	a901      	add	r1, sp, #4
   26928:	9401      	str	r4, [sp, #4]
   2692a:	f7fe fae3 	bl	24ef4 <CC_PalMemCopyPlat>
   2692e:	f108 0302 	add.w	r3, r8, #2
   26932:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26934:	2000      	movs	r0, #0
   26936:	6013      	str	r3, [r2, #0]
   26938:	b002      	add	sp, #8
   2693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2693e:	480a      	ldr	r0, [pc, #40]	; (26968 <UtilCmacBuildDataForDerivation+0xbc>)
   26940:	b002      	add	sp, #8
   26942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26946:	2201      	movs	r2, #1
   26948:	4669      	mov	r1, sp
   2694a:	f7fe fad3 	bl	24ef4 <CC_PalMemCopyPlat>
   2694e:	f108 0301 	add.w	r3, r8, #1
   26952:	e7ee      	b.n	26932 <UtilCmacBuildDataForDerivation+0x86>
   26954:	9b08      	ldr	r3, [sp, #32]
   26956:	4632      	mov	r2, r6
   26958:	eb03 0008 	add.w	r0, r3, r8
   2695c:	4639      	mov	r1, r7
   2695e:	f7fe fac9 	bl	24ef4 <CC_PalMemCopyPlat>
   26962:	44b0      	add	r8, r6
   26964:	e7d4      	b.n	26910 <UtilCmacBuildDataForDerivation+0x64>
   26966:	bf00      	nop
   26968:	80000006 	.word	0x80000006

0002696c <CC_PalDataBufferAttrGet>:
   2696c:	2000      	movs	r0, #0
   2696e:	7018      	strb	r0, [r3, #0]
   26970:	4770      	bx	lr
   26972:	bf00      	nop

00026974 <sys_notify_validate>:
	if (notify == NULL) {
   26974:	4603      	mov	r3, r0
   26976:	b140      	cbz	r0, 2698a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   26978:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2697a:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2697e:	2a02      	cmp	r2, #2
   26980:	d006      	beq.n	26990 <sys_notify_validate+0x1c>
   26982:	2a03      	cmp	r2, #3
   26984:	d004      	beq.n	26990 <sys_notify_validate+0x1c>
   26986:	2a01      	cmp	r2, #1
   26988:	d005      	beq.n	26996 <sys_notify_validate+0x22>
		return -EINVAL;
   2698a:	f06f 0015 	mvn.w	r0, #21
}
   2698e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   26990:	681a      	ldr	r2, [r3, #0]
   26992:	2a00      	cmp	r2, #0
   26994:	d0f9      	beq.n	2698a <sys_notify_validate+0x16>
		notify->result = 0;
   26996:	2000      	movs	r0, #0
   26998:	6098      	str	r0, [r3, #8]
   2699a:	4770      	bx	lr

0002699c <arch_printk_char_out>:
}
   2699c:	2000      	movs	r0, #0
   2699e:	4770      	bx	lr

000269a0 <str_out>:
{
   269a0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   269a2:	688a      	ldr	r2, [r1, #8]
   269a4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   269a6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   269a8:	b114      	cbz	r4, 269b0 <str_out+0x10>
   269aa:	684b      	ldr	r3, [r1, #4]
   269ac:	4293      	cmp	r3, r2
   269ae:	dc01      	bgt.n	269b4 <str_out+0x14>
		ctx->count++;
   269b0:	608d      	str	r5, [r1, #8]
}
   269b2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   269b4:	3b01      	subs	r3, #1
   269b6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   269b8:	bf08      	it	eq
   269ba:	2200      	moveq	r2, #0
   269bc:	608d      	str	r5, [r1, #8]
   269be:	bf0c      	ite	eq
   269c0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   269c2:	54a0      	strbne	r0, [r4, r2]
   269c4:	e7f5      	b.n	269b2 <str_out+0x12>

000269c6 <printk>:
{
   269c6:	b40f      	push	{r0, r1, r2, r3}
   269c8:	b507      	push	{r0, r1, r2, lr}
   269ca:	a904      	add	r1, sp, #16
   269cc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   269d0:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   269d2:	f7ef f873 	bl	15abc <vprintk>
}
   269d6:	b003      	add	sp, #12
   269d8:	f85d eb04 	ldr.w	lr, [sp], #4
   269dc:	b004      	add	sp, #16
   269de:	4770      	bx	lr

000269e0 <snprintk>:
{
   269e0:	b40c      	push	{r2, r3}
   269e2:	b507      	push	{r0, r1, r2, lr}
   269e4:	ab04      	add	r3, sp, #16
   269e6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   269ea:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   269ec:	f7ef f874 	bl	15ad8 <vsnprintk>
}
   269f0:	b003      	add	sp, #12
   269f2:	f85d eb04 	ldr.w	lr, [sp], #4
   269f6:	b002      	add	sp, #8
   269f8:	4770      	bx	lr

000269fa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   269fa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   269fc:	f013 0307 	ands.w	r3, r3, #7
   26a00:	d105      	bne.n	26a0e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   26a02:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   26a04:	2b00      	cmp	r3, #0
   26a06:	bf0c      	ite	eq
   26a08:	2000      	moveq	r0, #0
   26a0a:	2003      	movne	r0, #3
   26a0c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26a0e:	2b02      	cmp	r3, #2
   26a10:	d105      	bne.n	26a1e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   26a12:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   26a14:	2b00      	cmp	r3, #0
   26a16:	bf14      	ite	ne
   26a18:	2000      	movne	r0, #0
   26a1a:	2004      	moveq	r0, #4
   26a1c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26a1e:	2b01      	cmp	r3, #1
   26a20:	d105      	bne.n	26a2e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   26a22:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   26a24:	2b00      	cmp	r3, #0
   26a26:	bf0c      	ite	eq
   26a28:	2000      	moveq	r0, #0
   26a2a:	2005      	movne	r0, #5
   26a2c:	4770      	bx	lr
	int evt = EVT_NOP;
   26a2e:	2000      	movs	r0, #0
}
   26a30:	4770      	bx	lr

00026a32 <notify_one>:
{
   26a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a36:	460d      	mov	r5, r1
   26a38:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26a3a:	4619      	mov	r1, r3
   26a3c:	1d28      	adds	r0, r5, #4
{
   26a3e:	4690      	mov	r8, r2
   26a40:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26a42:	f7ef f803 	bl	15a4c <sys_notify_finalize>
	if (cb) {
   26a46:	4604      	mov	r4, r0
   26a48:	b138      	cbz	r0, 26a5a <notify_one+0x28>
		cb(mgr, cli, state, res);
   26a4a:	4633      	mov	r3, r6
   26a4c:	4642      	mov	r2, r8
   26a4e:	4629      	mov	r1, r5
   26a50:	4638      	mov	r0, r7
   26a52:	46a4      	mov	ip, r4
}
   26a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   26a58:	4760      	bx	ip
}
   26a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026a5e <validate_args>:
{
   26a5e:	b510      	push	{r4, lr}
   26a60:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   26a62:	b140      	cbz	r0, 26a76 <validate_args+0x18>
   26a64:	b139      	cbz	r1, 26a76 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   26a66:	1d08      	adds	r0, r1, #4
   26a68:	f7ff ff84 	bl	26974 <sys_notify_validate>
	if ((rv == 0)
   26a6c:	b928      	cbnz	r0, 26a7a <validate_args+0x1c>
	    && ((cli->notify.flags
   26a6e:	68a3      	ldr	r3, [r4, #8]
   26a70:	f033 0303 	bics.w	r3, r3, #3
   26a74:	d001      	beq.n	26a7a <validate_args+0x1c>
		rv = -EINVAL;
   26a76:	f06f 0015 	mvn.w	r0, #21
}
   26a7a:	bd10      	pop	{r4, pc}

00026a7c <onoff_manager_init>:
{
   26a7c:	b538      	push	{r3, r4, r5, lr}
   26a7e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   26a80:	4605      	mov	r5, r0
   26a82:	b158      	cbz	r0, 26a9c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   26a84:	b151      	cbz	r1, 26a9c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   26a86:	680b      	ldr	r3, [r1, #0]
   26a88:	b143      	cbz	r3, 26a9c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   26a8a:	684b      	ldr	r3, [r1, #4]
   26a8c:	b133      	cbz	r3, 26a9c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   26a8e:	2220      	movs	r2, #32
   26a90:	2100      	movs	r1, #0
   26a92:	f000 fc67 	bl	27364 <memset>
   26a96:	612c      	str	r4, [r5, #16]
	return 0;
   26a98:	2000      	movs	r0, #0
}
   26a9a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26a9c:	f06f 0015 	mvn.w	r0, #21
   26aa0:	e7fb      	b.n	26a9a <onoff_manager_init+0x1e>

00026aa2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   26aa2:	4604      	mov	r4, r0
   26aa4:	b508      	push	{r3, lr}
   26aa6:	4608      	mov	r0, r1
   26aa8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   26aaa:	461a      	mov	r2, r3
   26aac:	47a0      	blx	r4
	return z_impl_z_current_get();
   26aae:	f7fc f86f 	bl	22b90 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   26ab2:	f7f0 fef1 	bl	17898 <z_impl_k_thread_abort>

00026ab6 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   26ab6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   26aba:	8840      	ldrh	r0, [r0, #2]
}
   26abc:	0840      	lsrs	r0, r0, #1
   26abe:	4770      	bx	lr

00026ac0 <free_list_add>:
{
   26ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ac2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   26ac4:	f7ff fff7 	bl	26ab6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26ac8:	fab0 f080 	clz	r0, r0
   26acc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   26ad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   26ad4:	00ca      	lsls	r2, r1, #3
   26ad6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   26ada:	1d17      	adds	r7, r2, #4
{
   26adc:	460c      	mov	r4, r1
   26ade:	3206      	adds	r2, #6
   26ae0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   26ae2:	b956      	cbnz	r6, 26afa <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   26ae4:	2101      	movs	r1, #1
   26ae6:	fa01 f000 	lsl.w	r0, r1, r0
   26aea:	68d9      	ldr	r1, [r3, #12]
   26aec:	4301      	orrs	r1, r0
   26aee:	60d9      	str	r1, [r3, #12]
		b->next = c;
   26af0:	f8cc 4010 	str.w	r4, [ip, #16]
   26af4:	53dd      	strh	r5, [r3, r7]
   26af6:	529d      	strh	r5, [r3, r2]
}
   26af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   26afa:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   26afc:	3104      	adds	r1, #4
   26afe:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   26b00:	53d8      	strh	r0, [r3, r7]
   26b02:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   26b06:	529e      	strh	r6, [r3, r2]
   26b08:	80c5      	strh	r5, [r0, #6]
   26b0a:	525d      	strh	r5, [r3, r1]
   26b0c:	e7f4      	b.n	26af8 <free_list_add+0x38>

00026b0e <free_list_remove_bidx>:
{
   26b0e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   26b10:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   26b14:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   26b16:	4299      	cmp	r1, r3
   26b18:	f102 0104 	add.w	r1, r2, #4
   26b1c:	d10a      	bne.n	26b34 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   26b1e:	2301      	movs	r3, #1
   26b20:	fa03 f202 	lsl.w	r2, r3, r2
   26b24:	68c3      	ldr	r3, [r0, #12]
   26b26:	ea23 0302 	bic.w	r3, r3, r2
   26b2a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   26b2c:	2300      	movs	r3, #0
   26b2e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   26b32:	bd10      	pop	{r4, pc}
   26b34:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   26b36:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   26b3a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   26b3e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26b42:	80cb      	strh	r3, [r1, #6]
   26b44:	8082      	strh	r2, [r0, #4]
}
   26b46:	e7f4      	b.n	26b32 <free_list_remove_bidx+0x24>

00026b48 <free_list_remove>:
{
   26b48:	b508      	push	{r3, lr}
   26b4a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   26b4c:	f7ff ffb3 	bl	26ab6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26b50:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   26b54:	f1c2 021f 	rsb	r2, r2, #31
   26b58:	4618      	mov	r0, r3
}
   26b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   26b5e:	f7ff bfd6 	b.w	26b0e <free_list_remove_bidx>

00026b62 <alloc_chunk>:
{
   26b62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26b66:	fab1 f581 	clz	r5, r1
   26b6a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   26b6e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   26b72:	4603      	mov	r3, r0
	if (b->next) {
   26b74:	693a      	ldr	r2, [r7, #16]
{
   26b76:	460e      	mov	r6, r1
	if (b->next) {
   26b78:	b1c2      	cbz	r2, 26bac <alloc_chunk+0x4a>
   26b7a:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   26b7e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   26b80:	4618      	mov	r0, r3
   26b82:	4621      	mov	r1, r4
   26b84:	f7ff ff97 	bl	26ab6 <chunk_size>
   26b88:	42b0      	cmp	r0, r6
   26b8a:	d306      	bcc.n	26b9a <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   26b8c:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   26b8e:	4618      	mov	r0, r3
   26b90:	f7ff ffbd 	bl	26b0e <free_list_remove_bidx>
}
   26b94:	4620      	mov	r0, r4
   26b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   26b9a:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   26b9e:	f1b8 0801 	subs.w	r8, r8, #1
   26ba2:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   26ba4:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   26ba6:	d001      	beq.n	26bac <alloc_chunk+0x4a>
   26ba8:	4282      	cmp	r2, r0
   26baa:	d1e8      	bne.n	26b7e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   26bac:	f1c5 0220 	rsb	r2, r5, #32
   26bb0:	f04f 34ff 	mov.w	r4, #4294967295
   26bb4:	4094      	lsls	r4, r2
   26bb6:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   26bb8:	4014      	ands	r4, r2
   26bba:	d0eb      	beq.n	26b94 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   26bbc:	fa94 f2a4 	rbit	r2, r4
   26bc0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   26bc4:	1d11      	adds	r1, r2, #4
   26bc6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   26bca:	4621      	mov	r1, r4
   26bcc:	e7df      	b.n	26b8e <alloc_chunk+0x2c>

00026bce <merge_chunks>:
{
   26bce:	b538      	push	{r3, r4, r5, lr}
   26bd0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26bd2:	f7ff ff70 	bl	26ab6 <chunk_size>
{
   26bd6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26bd8:	4604      	mov	r4, r0
   26bda:	4611      	mov	r1, r2
   26bdc:	4618      	mov	r0, r3
   26bde:	f7ff ff6a 	bl	26ab6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   26be2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   26be6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26be8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   26bea:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   26bec:	4618      	mov	r0, r3
   26bee:	f7ff ff62 	bl	26ab6 <chunk_size>
	void *cmem = &buf[c];
   26bf2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26bf4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   26bf8:	bd38      	pop	{r3, r4, r5, pc}

00026bfa <split_chunks>:
{
   26bfa:	b538      	push	{r3, r4, r5, lr}
   26bfc:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   26bfe:	f7ff ff5a 	bl	26ab6 <chunk_size>
{
   26c02:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   26c04:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   26c06:	1a51      	subs	r1, r2, r1
   26c08:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   26c0c:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26c0e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   26c10:	8060      	strh	r0, [r4, #2]
   26c12:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26c16:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   26c18:	8044      	strh	r4, [r0, #2]
   26c1a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   26c1e:	4618      	mov	r0, r3
   26c20:	4611      	mov	r1, r2
   26c22:	f7ff ff48 	bl	26ab6 <chunk_size>
	void *cmem = &buf[c];
   26c26:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26c28:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   26c2c:	bd38      	pop	{r3, r4, r5, pc}

00026c2e <free_chunk>:
{
   26c2e:	b538      	push	{r3, r4, r5, lr}
   26c30:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   26c32:	f7ff ff40 	bl	26ab6 <chunk_size>
   26c36:	460c      	mov	r4, r1
   26c38:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   26c3a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26c3e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26c40:	07da      	lsls	r2, r3, #31
   26c42:	d40a      	bmi.n	26c5a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   26c44:	4628      	mov	r0, r5
   26c46:	f7ff ff7f 	bl	26b48 <free_list_remove>
	return c + chunk_size(h, c);
   26c4a:	4621      	mov	r1, r4
   26c4c:	4628      	mov	r0, r5
   26c4e:	f7ff ff32 	bl	26ab6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   26c52:	1822      	adds	r2, r4, r0
   26c54:	4628      	mov	r0, r5
   26c56:	f7ff ffba 	bl	26bce <merge_chunks>
		return ((uint16_t *)cmem)[f];
   26c5a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26c5e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   26c60:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26c64:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   26c66:	07db      	lsls	r3, r3, #31
   26c68:	d40c      	bmi.n	26c84 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   26c6a:	4628      	mov	r0, r5
   26c6c:	f7ff ff6c 	bl	26b48 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   26c70:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   26c74:	4622      	mov	r2, r4
   26c76:	1a61      	subs	r1, r4, r1
   26c78:	4628      	mov	r0, r5
   26c7a:	f7ff ffa8 	bl	26bce <merge_chunks>
   26c7e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26c82:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   26c84:	4621      	mov	r1, r4
   26c86:	4628      	mov	r0, r5
}
   26c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   26c8c:	f7ff bf18 	b.w	26ac0 <free_list_add>

00026c90 <sys_heap_alloc>:
{
   26c90:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   26c92:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   26c94:	b909      	cbnz	r1, 26c9a <sys_heap_alloc+0xa>
		return NULL;
   26c96:	2000      	movs	r0, #0
}
   26c98:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   26c9a:	68ab      	ldr	r3, [r5, #8]
   26c9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   26ca0:	d9f9      	bls.n	26c96 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26ca2:	310b      	adds	r1, #11
   26ca4:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   26ca6:	4621      	mov	r1, r4
   26ca8:	4628      	mov	r0, r5
   26caa:	f7ff ff5a 	bl	26b62 <alloc_chunk>
	if (c == 0U) {
   26cae:	4606      	mov	r6, r0
   26cb0:	2800      	cmp	r0, #0
   26cb2:	d0f0      	beq.n	26c96 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   26cb4:	4601      	mov	r1, r0
   26cb6:	4628      	mov	r0, r5
   26cb8:	f7ff fefd 	bl	26ab6 <chunk_size>
   26cbc:	42a0      	cmp	r0, r4
   26cbe:	d907      	bls.n	26cd0 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   26cc0:	1932      	adds	r2, r6, r4
   26cc2:	4628      	mov	r0, r5
   26cc4:	f7ff ff99 	bl	26bfa <split_chunks>
		free_list_add(h, c + chunk_sz);
   26cc8:	4611      	mov	r1, r2
   26cca:	4628      	mov	r0, r5
   26ccc:	f7ff fef8 	bl	26ac0 <free_list_add>
	void *cmem = &buf[c];
   26cd0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26cd4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26cd6:	8853      	ldrh	r3, [r2, #2]
   26cd8:	f043 0301 	orr.w	r3, r3, #1
   26cdc:	8053      	strh	r3, [r2, #2]
   26cde:	3004      	adds	r0, #4
	return mem;
   26ce0:	e7da      	b.n	26c98 <sys_heap_alloc+0x8>

00026ce2 <encode_uint>:
{
   26ce2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ce6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   26ce8:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   26cea:	2b6f      	cmp	r3, #111	; 0x6f
{
   26cec:	4680      	mov	r8, r0
   26cee:	460f      	mov	r7, r1
   26cf0:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26cf2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   26cf6:	d029      	beq.n	26d4c <encode_uint+0x6a>
   26cf8:	d824      	bhi.n	26d44 <encode_uint+0x62>
		return 16;
   26cfa:	2b58      	cmp	r3, #88	; 0x58
   26cfc:	bf14      	ite	ne
   26cfe:	260a      	movne	r6, #10
   26d00:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   26d02:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   26d06:	4632      	mov	r2, r6
   26d08:	2300      	movs	r3, #0
   26d0a:	4640      	mov	r0, r8
   26d0c:	4639      	mov	r1, r7
   26d0e:	f7d9 f9f7 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26d12:	2a09      	cmp	r2, #9
   26d14:	b2d4      	uxtb	r4, r2
   26d16:	d81e      	bhi.n	26d56 <encode_uint+0x74>
   26d18:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   26d1a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26d1c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   26d1e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26d22:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   26d26:	d301      	bcc.n	26d2c <encode_uint+0x4a>
   26d28:	45d1      	cmp	r9, sl
   26d2a:	d811      	bhi.n	26d50 <encode_uint+0x6e>
	if (conv->flag_hash) {
   26d2c:	782b      	ldrb	r3, [r5, #0]
   26d2e:	069b      	lsls	r3, r3, #26
   26d30:	d505      	bpl.n	26d3e <encode_uint+0x5c>
		if (radix == 8) {
   26d32:	2e08      	cmp	r6, #8
   26d34:	d115      	bne.n	26d62 <encode_uint+0x80>
			conv->altform_0 = true;
   26d36:	78ab      	ldrb	r3, [r5, #2]
   26d38:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   26d3c:	70ab      	strb	r3, [r5, #2]
}
   26d3e:	4648      	mov	r0, r9
   26d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   26d44:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   26d48:	2b70      	cmp	r3, #112	; 0x70
   26d4a:	e7d7      	b.n	26cfc <encode_uint+0x1a>
	switch (specifier) {
   26d4c:	2608      	movs	r6, #8
   26d4e:	e7d8      	b.n	26d02 <encode_uint+0x20>
		value /= radix;
   26d50:	4680      	mov	r8, r0
   26d52:	460f      	mov	r7, r1
   26d54:	e7d7      	b.n	26d06 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26d56:	f1bb 0f19 	cmp.w	fp, #25
   26d5a:	bf94      	ite	ls
   26d5c:	3437      	addls	r4, #55	; 0x37
   26d5e:	3457      	addhi	r4, #87	; 0x57
   26d60:	e7db      	b.n	26d1a <encode_uint+0x38>
		} else if (radix == 16) {
   26d62:	2e10      	cmp	r6, #16
   26d64:	d1eb      	bne.n	26d3e <encode_uint+0x5c>
			conv->altform_0c = true;
   26d66:	78ab      	ldrb	r3, [r5, #2]
   26d68:	f043 0310 	orr.w	r3, r3, #16
   26d6c:	e7e6      	b.n	26d3c <encode_uint+0x5a>

00026d6e <outs>:
{
   26d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d72:	4607      	mov	r7, r0
   26d74:	4688      	mov	r8, r1
   26d76:	4615      	mov	r5, r2
   26d78:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   26d7a:	4614      	mov	r4, r2
   26d7c:	42b4      	cmp	r4, r6
   26d7e:	eba4 0005 	sub.w	r0, r4, r5
   26d82:	d302      	bcc.n	26d8a <outs+0x1c>
   26d84:	b93e      	cbnz	r6, 26d96 <outs+0x28>
   26d86:	7823      	ldrb	r3, [r4, #0]
   26d88:	b12b      	cbz	r3, 26d96 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   26d8a:	f814 0b01 	ldrb.w	r0, [r4], #1
   26d8e:	4641      	mov	r1, r8
   26d90:	47b8      	blx	r7
		if (rc < 0) {
   26d92:	2800      	cmp	r0, #0
   26d94:	daf2      	bge.n	26d7c <outs+0xe>
}
   26d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026d9a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   26d9a:	4040      	eors	r0, r0
   26d9c:	f380 8811 	msr	BASEPRI, r0
   26da0:	f04f 0004 	mov.w	r0, #4
   26da4:	df02      	svc	2
}
   26da6:	4770      	bx	lr

00026da8 <assert_print>:

void assert_print(const char *fmt, ...)
{
   26da8:	b40f      	push	{r0, r1, r2, r3}
   26daa:	b507      	push	{r0, r1, r2, lr}
   26dac:	a904      	add	r1, sp, #16
   26dae:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   26db2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   26db4:	f7ee fe82 	bl	15abc <vprintk>

	va_end(ap);
}
   26db8:	b003      	add	sp, #12
   26dba:	f85d eb04 	ldr.w	lr, [sp], #4
   26dbe:	b004      	add	sp, #16
   26dc0:	4770      	bx	lr

00026dc2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   26dc2:	4770      	bx	lr

00026dc4 <z_log_minimal_printk>:
{
   26dc4:	b40f      	push	{r0, r1, r2, r3}
   26dc6:	b507      	push	{r0, r1, r2, lr}
   26dc8:	a904      	add	r1, sp, #16
   26dca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26dce:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   26dd0:	f7ee fe74 	bl	15abc <vprintk>
}
   26dd4:	b003      	add	sp, #12
   26dd6:	f85d eb04 	ldr.w	lr, [sp], #4
   26dda:	b004      	add	sp, #16
   26ddc:	4770      	bx	lr

00026dde <read_str>:
{
   26dde:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   26de2:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   26de6:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   26de8:	4640      	mov	r0, r8
{
   26dea:	461f      	mov	r7, r3
   26dec:	460c      	mov	r4, r1
   26dee:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   26df0:	f000 fa68 	bl	272c4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   26df4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   26df8:	9300      	str	r3, [sp, #0]
   26dfa:	b280      	uxth	r0, r0
   26dfc:	e9cd 8001 	strd	r8, r0, [sp, #4]
   26e00:	463b      	mov	r3, r7
   26e02:	4632      	mov	r2, r6
   26e04:	4621      	mov	r1, r4
   26e06:	4628      	mov	r0, r5
   26e08:	f001 fdeb 	bl	289e2 <bt_gatt_attr_read>
}
   26e0c:	b004      	add	sp, #16
   26e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026e12 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   26e12:	b538      	push	{r3, r4, r5, lr}
   26e14:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   26e16:	42ab      	cmp	r3, r5
{
   26e18:	4611      	mov	r1, r2
   26e1a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   26e1c:	d804      	bhi.n	26e28 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   26e1e:	461a      	mov	r2, r3
   26e20:	f000 fa95 	bl	2734e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   26e24:	4620      	mov	r0, r4
   26e26:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   26e28:	2400      	movs	r4, #0
   26e2a:	e7fb      	b.n	26e24 <_copy+0x12>

00026e2c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   26e2c:	f000 ba9a 	b.w	27364 <memset>

00026e30 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   26e30:	09c3      	lsrs	r3, r0, #7
   26e32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26e36:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   26e3a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   26e3e:	b2c0      	uxtb	r0, r0
   26e40:	4770      	bx	lr

00026e42 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   26e42:	78cb      	ldrb	r3, [r1, #3]
   26e44:	7802      	ldrb	r2, [r0, #0]
   26e46:	4053      	eors	r3, r2
   26e48:	7003      	strb	r3, [r0, #0]
   26e4a:	884b      	ldrh	r3, [r1, #2]
   26e4c:	7842      	ldrb	r2, [r0, #1]
   26e4e:	4053      	eors	r3, r2
   26e50:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   26e52:	680a      	ldr	r2, [r1, #0]
   26e54:	7883      	ldrb	r3, [r0, #2]
   26e56:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26e5a:	7083      	strb	r3, [r0, #2]
   26e5c:	680a      	ldr	r2, [r1, #0]
   26e5e:	78c3      	ldrb	r3, [r0, #3]
   26e60:	4053      	eors	r3, r2
   26e62:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26e64:	79cb      	ldrb	r3, [r1, #7]
   26e66:	7902      	ldrb	r2, [r0, #4]
   26e68:	4053      	eors	r3, r2
   26e6a:	7103      	strb	r3, [r0, #4]
   26e6c:	88cb      	ldrh	r3, [r1, #6]
   26e6e:	7942      	ldrb	r2, [r0, #5]
   26e70:	4053      	eors	r3, r2
   26e72:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26e74:	684a      	ldr	r2, [r1, #4]
   26e76:	7983      	ldrb	r3, [r0, #6]
   26e78:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26e7c:	7183      	strb	r3, [r0, #6]
   26e7e:	684a      	ldr	r2, [r1, #4]
   26e80:	79c3      	ldrb	r3, [r0, #7]
   26e82:	4053      	eors	r3, r2
   26e84:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   26e86:	7acb      	ldrb	r3, [r1, #11]
   26e88:	7a02      	ldrb	r2, [r0, #8]
   26e8a:	4053      	eors	r3, r2
   26e8c:	7203      	strb	r3, [r0, #8]
   26e8e:	7a42      	ldrb	r2, [r0, #9]
   26e90:	894b      	ldrh	r3, [r1, #10]
   26e92:	4053      	eors	r3, r2
   26e94:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   26e96:	688a      	ldr	r2, [r1, #8]
   26e98:	7a83      	ldrb	r3, [r0, #10]
   26e9a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26e9e:	7283      	strb	r3, [r0, #10]
   26ea0:	688a      	ldr	r2, [r1, #8]
   26ea2:	7ac3      	ldrb	r3, [r0, #11]
   26ea4:	4053      	eors	r3, r2
   26ea6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26ea8:	7bcb      	ldrb	r3, [r1, #15]
   26eaa:	7b02      	ldrb	r2, [r0, #12]
   26eac:	4053      	eors	r3, r2
   26eae:	7303      	strb	r3, [r0, #12]
   26eb0:	89cb      	ldrh	r3, [r1, #14]
   26eb2:	7b42      	ldrb	r2, [r0, #13]
   26eb4:	4053      	eors	r3, r2
   26eb6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26eb8:	68ca      	ldr	r2, [r1, #12]
   26eba:	7b83      	ldrb	r3, [r0, #14]
   26ebc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26ec0:	7383      	strb	r3, [r0, #14]
   26ec2:	68ca      	ldr	r2, [r1, #12]
   26ec4:	7bc3      	ldrb	r3, [r0, #15]
   26ec6:	4053      	eors	r3, r2
   26ec8:	73c3      	strb	r3, [r0, #15]
}
   26eca:	4770      	bx	lr

00026ecc <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   26ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   26ece:	7802      	ldrb	r2, [r0, #0]
   26ed0:	f88d 2000 	strb.w	r2, [sp]
   26ed4:	7942      	ldrb	r2, [r0, #5]
   26ed6:	f88d 2001 	strb.w	r2, [sp, #1]
   26eda:	7a82      	ldrb	r2, [r0, #10]
   26edc:	f88d 2002 	strb.w	r2, [sp, #2]
   26ee0:	7bc2      	ldrb	r2, [r0, #15]
   26ee2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26ee6:	7902      	ldrb	r2, [r0, #4]
   26ee8:	f88d 2004 	strb.w	r2, [sp, #4]
   26eec:	7a42      	ldrb	r2, [r0, #9]
   26eee:	f88d 2005 	strb.w	r2, [sp, #5]
   26ef2:	7b82      	ldrb	r2, [r0, #14]
   26ef4:	f88d 2006 	strb.w	r2, [sp, #6]
   26ef8:	78c2      	ldrb	r2, [r0, #3]
   26efa:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   26efe:	7a02      	ldrb	r2, [r0, #8]
   26f00:	f88d 2008 	strb.w	r2, [sp, #8]
   26f04:	7b42      	ldrb	r2, [r0, #13]
   26f06:	f88d 2009 	strb.w	r2, [sp, #9]
   26f0a:	7882      	ldrb	r2, [r0, #2]
   26f0c:	f88d 200a 	strb.w	r2, [sp, #10]
   26f10:	79c2      	ldrb	r2, [r0, #7]
   26f12:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26f16:	7b02      	ldrb	r2, [r0, #12]
   26f18:	f88d 200c 	strb.w	r2, [sp, #12]
   26f1c:	7842      	ldrb	r2, [r0, #1]
   26f1e:	7ac3      	ldrb	r3, [r0, #11]
   26f20:	f88d 200d 	strb.w	r2, [sp, #13]
   26f24:	7982      	ldrb	r2, [r0, #6]
   26f26:	f88d 200e 	strb.w	r2, [sp, #14]
   26f2a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   26f2e:	2310      	movs	r3, #16
   26f30:	466a      	mov	r2, sp
   26f32:	4619      	mov	r1, r3
   26f34:	f7ff ff6d 	bl	26e12 <_copy>
}
   26f38:	b005      	add	sp, #20
   26f3a:	f85d fb04 	ldr.w	pc, [sp], #4

00026f3e <mult_row_column>:
{
   26f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f40:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26f42:	7808      	ldrb	r0, [r1, #0]
{
   26f44:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26f46:	f7ff ff73 	bl	26e30 <_double_byte>
   26f4a:	4605      	mov	r5, r0
   26f4c:	7860      	ldrb	r0, [r4, #1]
   26f4e:	f7ff ff6f 	bl	26e30 <_double_byte>
   26f52:	78a2      	ldrb	r2, [r4, #2]
   26f54:	7863      	ldrb	r3, [r4, #1]
   26f56:	4053      	eors	r3, r2
   26f58:	78e2      	ldrb	r2, [r4, #3]
   26f5a:	4053      	eors	r3, r2
   26f5c:	405d      	eors	r5, r3
   26f5e:	4045      	eors	r5, r0
   26f60:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   26f62:	7860      	ldrb	r0, [r4, #1]
   26f64:	7827      	ldrb	r7, [r4, #0]
   26f66:	f7ff ff63 	bl	26e30 <_double_byte>
   26f6a:	4605      	mov	r5, r0
   26f6c:	78a0      	ldrb	r0, [r4, #2]
   26f6e:	f7ff ff5f 	bl	26e30 <_double_byte>
   26f72:	78a3      	ldrb	r3, [r4, #2]
   26f74:	405f      	eors	r7, r3
   26f76:	78e3      	ldrb	r3, [r4, #3]
   26f78:	405f      	eors	r7, r3
   26f7a:	407d      	eors	r5, r7
   26f7c:	4045      	eors	r5, r0
   26f7e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   26f80:	78a0      	ldrb	r0, [r4, #2]
   26f82:	7865      	ldrb	r5, [r4, #1]
   26f84:	7827      	ldrb	r7, [r4, #0]
   26f86:	f7ff ff53 	bl	26e30 <_double_byte>
   26f8a:	406f      	eors	r7, r5
   26f8c:	4605      	mov	r5, r0
   26f8e:	78e0      	ldrb	r0, [r4, #3]
   26f90:	f7ff ff4e 	bl	26e30 <_double_byte>
   26f94:	78e3      	ldrb	r3, [r4, #3]
   26f96:	405f      	eors	r7, r3
   26f98:	407d      	eors	r5, r7
   26f9a:	4045      	eors	r5, r0
   26f9c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   26f9e:	7820      	ldrb	r0, [r4, #0]
   26fa0:	f7ff ff46 	bl	26e30 <_double_byte>
   26fa4:	7863      	ldrb	r3, [r4, #1]
   26fa6:	7825      	ldrb	r5, [r4, #0]
   26fa8:	405d      	eors	r5, r3
   26faa:	78a3      	ldrb	r3, [r4, #2]
   26fac:	405d      	eors	r5, r3
   26fae:	4045      	eors	r5, r0
   26fb0:	78e0      	ldrb	r0, [r4, #3]
   26fb2:	f7ff ff3d 	bl	26e30 <_double_byte>
   26fb6:	b2ed      	uxtb	r5, r5
   26fb8:	4045      	eors	r5, r0
   26fba:	70f5      	strb	r5, [r6, #3]
}
   26fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026fbe <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   26fbe:	b570      	push	{r4, r5, r6, lr}
   26fc0:	4614      	mov	r4, r2
   26fc2:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   26fc4:	4605      	mov	r5, r0
   26fc6:	2800      	cmp	r0, #0
   26fc8:	d049      	beq.n	2705e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   26fca:	2900      	cmp	r1, #0
   26fcc:	d049      	beq.n	27062 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   26fce:	2a00      	cmp	r2, #0
   26fd0:	d049      	beq.n	27066 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   26fd2:	2310      	movs	r3, #16
   26fd4:	460a      	mov	r2, r1
   26fd6:	4668      	mov	r0, sp
   26fd8:	4619      	mov	r1, r3
   26fda:	f7ff ff1a 	bl	26e12 <_copy>
	add_round_key(state, s->words);
   26fde:	4621      	mov	r1, r4
   26fe0:	4668      	mov	r0, sp
   26fe2:	f7ff ff2e 	bl	26e42 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   26fe6:	3410      	adds	r4, #16
   26fe8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   26fec:	4668      	mov	r0, sp
   26fee:	f7ef fee1 	bl	16db4 <sub_bytes>
		shift_rows(state);
   26ff2:	4668      	mov	r0, sp
   26ff4:	f7ff ff6a 	bl	26ecc <shift_rows>
	mult_row_column(t, s);
   26ff8:	4669      	mov	r1, sp
   26ffa:	a804      	add	r0, sp, #16
   26ffc:	f7ff ff9f 	bl	26f3e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   27000:	a901      	add	r1, sp, #4
   27002:	a805      	add	r0, sp, #20
   27004:	f7ff ff9b 	bl	26f3e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   27008:	a902      	add	r1, sp, #8
   2700a:	a806      	add	r0, sp, #24
   2700c:	f7ff ff97 	bl	26f3e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   27010:	a903      	add	r1, sp, #12
   27012:	a807      	add	r0, sp, #28
   27014:	f7ff ff93 	bl	26f3e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27018:	2310      	movs	r3, #16
   2701a:	4619      	mov	r1, r3
   2701c:	eb0d 0203 	add.w	r2, sp, r3
   27020:	4668      	mov	r0, sp
   27022:	f7ff fef6 	bl	26e12 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   27026:	4621      	mov	r1, r4
   27028:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2702a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2702c:	f7ff ff09 	bl	26e42 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   27030:	42a6      	cmp	r6, r4
   27032:	d1db      	bne.n	26fec <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   27034:	f7ef febe 	bl	16db4 <sub_bytes>
	shift_rows(state);
   27038:	4668      	mov	r0, sp
   2703a:	f7ff ff47 	bl	26ecc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2703e:	4631      	mov	r1, r6
   27040:	4668      	mov	r0, sp
   27042:	f7ff fefe 	bl	26e42 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   27046:	2310      	movs	r3, #16
   27048:	4619      	mov	r1, r3
   2704a:	466a      	mov	r2, sp
   2704c:	4628      	mov	r0, r5
   2704e:	f7ff fee0 	bl	26e12 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   27052:	4668      	mov	r0, sp
   27054:	2210      	movs	r2, #16
   27056:	2100      	movs	r1, #0
   27058:	f7ff fee8 	bl	26e2c <_set>

	return TC_CRYPTO_SUCCESS;
   2705c:	2001      	movs	r0, #1
}
   2705e:	b008      	add	sp, #32
   27060:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27062:	4608      	mov	r0, r1
   27064:	e7fb      	b.n	2705e <tc_aes_encrypt+0xa0>
   27066:	4610      	mov	r0, r2
   27068:	e7f9      	b.n	2705e <tc_aes_encrypt+0xa0>

0002706a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2706a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2706c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2706e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27070:	f912 3b10 	ldrsb.w	r3, [r2], #16
   27074:	2b00      	cmp	r3, #0
   27076:	bfb4      	ite	lt
   27078:	2387      	movlt	r3, #135	; 0x87
   2707a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2707c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27080:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   27084:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   27086:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2708a:	d002      	beq.n	27092 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2708c:	7813      	ldrb	r3, [r2, #0]
   2708e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   27090:	e7f4      	b.n	2707c <gf_double+0x12>
	}
}
   27092:	bd10      	pop	{r4, pc}

00027094 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   27094:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   27096:	b120      	cbz	r0, 270a2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   27098:	2258      	movs	r2, #88	; 0x58
   2709a:	2100      	movs	r1, #0
   2709c:	f7ff fec6 	bl	26e2c <_set>
   270a0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   270a2:	bd08      	pop	{r3, pc}

000270a4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   270a4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   270a6:	4604      	mov	r4, r0
   270a8:	b188      	cbz	r0, 270ce <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   270aa:	2210      	movs	r2, #16
   270ac:	2100      	movs	r1, #0
   270ae:	f7ff febd 	bl	26e2c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   270b2:	2210      	movs	r2, #16
   270b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   270b8:	2100      	movs	r1, #0
   270ba:	f7ff feb7 	bl	26e2c <_set>
	s->leftover_offset = 0;
   270be:	2300      	movs	r3, #0
   270c0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   270c2:	2200      	movs	r2, #0
   270c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   270c8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   270cc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   270ce:	bd10      	pop	{r4, pc}

000270d0 <tc_cmac_setup>:
{
   270d0:	b570      	push	{r4, r5, r6, lr}
   270d2:	460d      	mov	r5, r1
   270d4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   270d6:	4604      	mov	r4, r0
   270d8:	b310      	cbz	r0, 27120 <tc_cmac_setup+0x50>
   270da:	b311      	cbz	r1, 27122 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   270dc:	2258      	movs	r2, #88	; 0x58
   270de:	2100      	movs	r1, #0
   270e0:	f7ff fea4 	bl	26e2c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   270e4:	4629      	mov	r1, r5
	s->sched = sched;
   270e6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   270e8:	4630      	mov	r0, r6
   270ea:	f7ef fe6f 	bl	16dcc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   270ee:	2210      	movs	r2, #16
   270f0:	2100      	movs	r1, #0
   270f2:	4620      	mov	r0, r4
   270f4:	f7ff fe9a 	bl	26e2c <_set>
	gf_double (s->K1, s->iv);
   270f8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   270fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   270fe:	4621      	mov	r1, r4
   27100:	4620      	mov	r0, r4
   27102:	f7ff ff5c 	bl	26fbe <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   27106:	4621      	mov	r1, r4
   27108:	4628      	mov	r0, r5
   2710a:	f7ff ffae 	bl	2706a <gf_double>
	gf_double (s->K2, s->K1);
   2710e:	4629      	mov	r1, r5
   27110:	f104 0020 	add.w	r0, r4, #32
   27114:	f7ff ffa9 	bl	2706a <gf_double>
	tc_cmac_init(s);
   27118:	4620      	mov	r0, r4
   2711a:	f7ff ffc3 	bl	270a4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2711e:	2001      	movs	r0, #1
}
   27120:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27122:	4608      	mov	r0, r1
   27124:	e7fc      	b.n	27120 <tc_cmac_setup+0x50>

00027126 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   27126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2712a:	460d      	mov	r5, r1
   2712c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2712e:	4604      	mov	r4, r0
   27130:	2800      	cmp	r0, #0
   27132:	d061      	beq.n	271f8 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   27134:	b912      	cbnz	r2, 2713c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   27136:	2001      	movs	r0, #1
}
   27138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2713c:	2900      	cmp	r1, #0
   2713e:	d05b      	beq.n	271f8 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   27140:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   27144:	ea53 0102 	orrs.w	r1, r3, r2
   27148:	d056      	beq.n	271f8 <tc_cmac_update+0xd2>
	s->countdown--;
   2714a:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   2714c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   27150:	f142 32ff 	adc.w	r2, r2, #4294967295
   27154:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   27158:	f1b8 0f00 	cmp.w	r8, #0
   2715c:	d02a      	beq.n	271b4 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2715e:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27162:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   27166:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27168:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2716a:	d208      	bcs.n	2717e <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2716c:	462a      	mov	r2, r5
   2716e:	4633      	mov	r3, r6
   27170:	4631      	mov	r1, r6
   27172:	f7ff fe4e 	bl	26e12 <_copy>
			s->leftover_offset += data_length;
   27176:	6c62      	ldr	r2, [r4, #68]	; 0x44
   27178:	4432      	add	r2, r6
   2717a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2717c:	e7db      	b.n	27136 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2717e:	463b      	mov	r3, r7
   27180:	462a      	mov	r2, r5
   27182:	4639      	mov	r1, r7
   27184:	f7ff fe45 	bl	26e12 <_copy>
		data_length -= remaining_space;
   27188:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2718a:	2300      	movs	r3, #0
   2718c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2718e:	4446      	add	r6, r8
		data += remaining_space;
   27190:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27192:	1e63      	subs	r3, r4, #1
   27194:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   27198:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2719c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   271a0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   271a2:	ea82 0200 	eor.w	r2, r2, r0
   271a6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   271a8:	d1f6      	bne.n	27198 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   271aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   271ac:	4621      	mov	r1, r4
   271ae:	4620      	mov	r0, r4
   271b0:	f7ff ff05 	bl	26fbe <tc_aes_encrypt>
   271b4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   271b8:	2e10      	cmp	r6, #16
   271ba:	d80a      	bhi.n	271d2 <tc_cmac_update+0xac>
	if (data_length > 0) {
   271bc:	2e00      	cmp	r6, #0
   271be:	d0ba      	beq.n	27136 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   271c0:	4633      	mov	r3, r6
   271c2:	462a      	mov	r2, r5
   271c4:	4631      	mov	r1, r6
   271c6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   271ca:	f7ff fe22 	bl	26e12 <_copy>
		s->leftover_offset = data_length;
   271ce:	6466      	str	r6, [r4, #68]	; 0x44
   271d0:	e7b1      	b.n	27136 <tc_cmac_update+0x10>
   271d2:	1e63      	subs	r3, r4, #1
   271d4:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   271d6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   271da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   271de:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   271e0:	ea82 0200 	eor.w	r2, r2, r0
   271e4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   271e6:	d1f6      	bne.n	271d6 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   271e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   271ea:	4621      	mov	r1, r4
   271ec:	4620      	mov	r0, r4
   271ee:	f7ff fee6 	bl	26fbe <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   271f2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   271f4:	3e10      	subs	r6, #16
   271f6:	e7df      	b.n	271b8 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   271f8:	2000      	movs	r0, #0
   271fa:	e79d      	b.n	27138 <tc_cmac_update+0x12>

000271fc <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   271fc:	b570      	push	{r4, r5, r6, lr}
   271fe:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   27200:	4605      	mov	r5, r0
   27202:	b1e8      	cbz	r0, 27240 <tc_cmac_final+0x44>
   27204:	b369      	cbz	r1, 27262 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   27206:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   27208:	2a10      	cmp	r2, #16
   2720a:	d11a      	bne.n	27242 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2720c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2720e:	1e63      	subs	r3, r4, #1
   27210:	3901      	subs	r1, #1
   27212:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27216:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2721a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2721e:	4072      	eors	r2, r6
   27220:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27224:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27226:	ea82 0206 	eor.w	r2, r2, r6
   2722a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2722c:	d1f3      	bne.n	27216 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2722e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27230:	4621      	mov	r1, r4
   27232:	4628      	mov	r0, r5
   27234:	f7ff fec3 	bl	26fbe <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   27238:	4620      	mov	r0, r4
   2723a:	f7ff ff2b 	bl	27094 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2723e:	2001      	movs	r0, #1
}
   27240:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   27242:	f102 0030 	add.w	r0, r2, #48	; 0x30
   27246:	2100      	movs	r1, #0
   27248:	f1c2 0210 	rsb	r2, r2, #16
   2724c:	4420      	add	r0, r4
   2724e:	f7ff fded 	bl	26e2c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27252:	6c63      	ldr	r3, [r4, #68]	; 0x44
   27254:	4423      	add	r3, r4
   27256:	2280      	movs	r2, #128	; 0x80
   27258:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2725c:	f104 0120 	add.w	r1, r4, #32
   27260:	e7d5      	b.n	2720e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   27262:	4608      	mov	r0, r1
   27264:	e7ec      	b.n	27240 <tc_cmac_final+0x44>

00027266 <abort_function>:
{
   27266:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   27268:	2000      	movs	r0, #0
   2726a:	f7ef fba3 	bl	169b4 <sys_reboot>

0002726e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2726e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   27270:	6800      	ldr	r0, [r0, #0]
   27272:	f7ef bee5 	b.w	17040 <z_arm_fatal_error>

00027276 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   27276:	2100      	movs	r1, #0
   27278:	2001      	movs	r0, #1
   2727a:	f7ef bee1 	b.w	17040 <z_arm_fatal_error>

0002727e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2727e:	b508      	push	{r3, lr}
	handler();
   27280:	f7ef ff78 	bl	17174 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   27284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   27288:	f7f0 b850 	b.w	1732c <z_arm_exc_exit>

0002728c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2728c:	3901      	subs	r1, #1
   2728e:	4603      	mov	r3, r0
   27290:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   27294:	b90a      	cbnz	r2, 2729a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   27296:	701a      	strb	r2, [r3, #0]

	return dest;
}
   27298:	4770      	bx	lr
		*d = *s;
   2729a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2729e:	e7f7      	b.n	27290 <strcpy+0x4>

000272a0 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   272a0:	b570      	push	{r4, r5, r6, lr}
   272a2:	4605      	mov	r5, r0
   272a4:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   272a6:	b142      	cbz	r2, 272ba <strncpy+0x1a>
   272a8:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   272ac:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   272ae:	b92c      	cbnz	r4, 272bc <strncpy+0x1c>
   272b0:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   272b2:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   272b6:	429a      	cmp	r2, r3
   272b8:	d1fb      	bne.n	272b2 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   272ba:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   272bc:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   272c0:	4632      	mov	r2, r6
   272c2:	e7ef      	b.n	272a4 <strncpy+0x4>

000272c4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   272c4:	4603      	mov	r3, r0
	size_t n = 0;
   272c6:	2000      	movs	r0, #0

	while (*s != '\0') {
   272c8:	5c1a      	ldrb	r2, [r3, r0]
   272ca:	b902      	cbnz	r2, 272ce <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   272cc:	4770      	bx	lr
		n++;
   272ce:	3001      	adds	r0, #1
   272d0:	e7fa      	b.n	272c8 <strlen+0x4>

000272d2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   272d2:	4603      	mov	r3, r0
	size_t n = 0;
   272d4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   272d6:	5c1a      	ldrb	r2, [r3, r0]
   272d8:	b10a      	cbz	r2, 272de <strnlen+0xc>
   272da:	4288      	cmp	r0, r1
   272dc:	d100      	bne.n	272e0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   272de:	4770      	bx	lr
		n++;
   272e0:	3001      	adds	r0, #1
   272e2:	e7f8      	b.n	272d6 <strnlen+0x4>

000272e4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   272e4:	1e43      	subs	r3, r0, #1
   272e6:	3901      	subs	r1, #1
   272e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   272ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   272f0:	4282      	cmp	r2, r0
   272f2:	d101      	bne.n	272f8 <strcmp+0x14>
   272f4:	2a00      	cmp	r2, #0
   272f6:	d1f7      	bne.n	272e8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   272f8:	1a10      	subs	r0, r2, r0
   272fa:	4770      	bx	lr

000272fc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   272fc:	b510      	push	{r4, lr}
   272fe:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   27300:	b15a      	cbz	r2, 2731a <memcmp+0x1e>
   27302:	3901      	subs	r1, #1
   27304:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   27306:	f813 0b01 	ldrb.w	r0, [r3], #1
   2730a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2730e:	42a3      	cmp	r3, r4
   27310:	d001      	beq.n	27316 <memcmp+0x1a>
   27312:	4290      	cmp	r0, r2
   27314:	d0f7      	beq.n	27306 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   27316:	1a80      	subs	r0, r0, r2
}
   27318:	bd10      	pop	{r4, pc}
		return 0;
   2731a:	4610      	mov	r0, r2
   2731c:	e7fc      	b.n	27318 <memcmp+0x1c>

0002731e <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2731e:	1a43      	subs	r3, r0, r1
   27320:	4293      	cmp	r3, r2
{
   27322:	b510      	push	{r4, lr}
   27324:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   27328:	d308      	bcc.n	2733c <memmove+0x1e>
   2732a:	3901      	subs	r1, #1
	char *dest = d;
   2732c:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2732e:	429a      	cmp	r2, r3
   27330:	d007      	beq.n	27342 <memmove+0x24>
			*dest = *src;
   27332:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   27336:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2733a:	e7f8      	b.n	2732e <memmove+0x10>
   2733c:	440a      	add	r2, r1
		while (n > 0) {
   2733e:	428a      	cmp	r2, r1
   27340:	d100      	bne.n	27344 <memmove+0x26>
		}
	}

	return d;
}
   27342:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   27344:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27348:	f803 4d01 	strb.w	r4, [r3, #-1]!
   2734c:	e7f7      	b.n	2733e <memmove+0x20>

0002734e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2734e:	b510      	push	{r4, lr}
   27350:	1e43      	subs	r3, r0, #1
   27352:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   27354:	4291      	cmp	r1, r2
   27356:	d100      	bne.n	2735a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   27358:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2735a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2735e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   27362:	e7f7      	b.n	27354 <memcpy+0x6>

00027364 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   27364:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   27366:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   27368:	4603      	mov	r3, r0
	while (n > 0) {
   2736a:	4293      	cmp	r3, r2
   2736c:	d100      	bne.n	27370 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2736e:	4770      	bx	lr
		*(d_byte++) = c_byte;
   27370:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   27374:	e7f9      	b.n	2736a <memset+0x6>

00027376 <_stdout_hook_default>:
}
   27376:	f04f 30ff 	mov.w	r0, #4294967295
   2737a:	4770      	bx	lr

0002737c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2737c:	2806      	cmp	r0, #6
   2737e:	d108      	bne.n	27392 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   27380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27384:	2201      	movs	r2, #1
   27386:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2738a:	f3bf 8f4f 	dsb	sy
        __WFE();
   2738e:	bf20      	wfe
    while (true)
   27390:	e7fd      	b.n	2738e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   27392:	4770      	bx	lr

00027394 <pm_state_exit_post_ops>:
   27394:	2300      	movs	r3, #0
   27396:	f383 8811 	msr	BASEPRI, r3
   2739a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2739e:	4770      	bx	lr

000273a0 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   273a0:	b510      	push	{r4, lr}
   273a2:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   273a4:	7801      	ldrb	r1, [r0, #0]
   273a6:	7822      	ldrb	r2, [r4, #0]
   273a8:	428a      	cmp	r2, r1
{
   273aa:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   273ac:	d00f      	beq.n	273ce <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   273ae:	4669      	mov	r1, sp
   273b0:	f7f0 fc7a 	bl	17ca8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   273b4:	a905      	add	r1, sp, #20
   273b6:	4620      	mov	r0, r4
   273b8:	f7f0 fc76 	bl	17ca8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   273bc:	2210      	movs	r2, #16
   273be:	f10d 0115 	add.w	r1, sp, #21
   273c2:	f10d 0001 	add.w	r0, sp, #1
   273c6:	f7ff ff99 	bl	272fc <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   273ca:	b00a      	add	sp, #40	; 0x28
   273cc:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   273ce:	2a01      	cmp	r2, #1
   273d0:	d006      	beq.n	273e0 <bt_uuid_cmp+0x40>
   273d2:	2a02      	cmp	r2, #2
   273d4:	d007      	beq.n	273e6 <bt_uuid_cmp+0x46>
   273d6:	b972      	cbnz	r2, 273f6 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   273d8:	8840      	ldrh	r0, [r0, #2]
   273da:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   273dc:	1ac0      	subs	r0, r0, r3
   273de:	e7f4      	b.n	273ca <bt_uuid_cmp+0x2a>
   273e0:	6840      	ldr	r0, [r0, #4]
   273e2:	6863      	ldr	r3, [r4, #4]
   273e4:	e7fa      	b.n	273dc <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   273e6:	2210      	movs	r2, #16
   273e8:	1c61      	adds	r1, r4, #1
   273ea:	3001      	adds	r0, #1
}
   273ec:	b00a      	add	sp, #40	; 0x28
   273ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   273f2:	f7ff bf83 	b.w	272fc <memcmp>
	switch (u1->type) {
   273f6:	f06f 0015 	mvn.w	r0, #21
   273fa:	e7e6      	b.n	273ca <bt_uuid_cmp+0x2a>

000273fc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   273fc:	2a04      	cmp	r2, #4
{
   273fe:	b510      	push	{r4, lr}
	switch (data_len) {
   27400:	d00a      	beq.n	27418 <bt_uuid_create+0x1c>
   27402:	2a10      	cmp	r2, #16
   27404:	d00d      	beq.n	27422 <bt_uuid_create+0x26>
   27406:	2a02      	cmp	r2, #2
   27408:	f04f 0300 	mov.w	r3, #0
   2740c:	d10f      	bne.n	2742e <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2740e:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   27410:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   27412:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   27414:	2001      	movs	r0, #1
}
   27416:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   27418:	2301      	movs	r3, #1
   2741a:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2741c:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2741e:	6042      	str	r2, [r0, #4]
		break;
   27420:	e7f8      	b.n	27414 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   27422:	2302      	movs	r3, #2
   27424:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   27428:	f7ff ff91 	bl	2734e <memcpy>
		break;
   2742c:	e7f2      	b.n	27414 <bt_uuid_create+0x18>
	switch (data_len) {
   2742e:	4618      	mov	r0, r3
   27430:	e7f1      	b.n	27416 <bt_uuid_create+0x1a>

00027432 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   27432:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   27434:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   27436:	2106      	movs	r1, #6
{
   27438:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2743a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2743e:	f7f8 f895 	bl	1f56c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   27442:	b918      	cbnz	r0, 2744c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   27444:	79a3      	ldrb	r3, [r4, #6]
   27446:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2744a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2744c:	bd10      	pop	{r4, pc}

0002744e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2744e:	280f      	cmp	r0, #15
   27450:	d806      	bhi.n	27460 <bt_hci_evt_get_flags+0x12>
   27452:	280d      	cmp	r0, #13
   27454:	d80b      	bhi.n	2746e <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   27456:	2805      	cmp	r0, #5
   27458:	bf14      	ite	ne
   2745a:	2002      	movne	r0, #2
   2745c:	2003      	moveq	r0, #3
   2745e:	4770      	bx	lr
	switch (evt) {
   27460:	2813      	cmp	r0, #19
   27462:	d004      	beq.n	2746e <bt_hci_evt_get_flags+0x20>
   27464:	281a      	cmp	r0, #26
   27466:	bf14      	ite	ne
   27468:	2002      	movne	r0, #2
   2746a:	2001      	moveq	r0, #1
   2746c:	4770      	bx	lr
   2746e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   27470:	4770      	bx	lr

00027472 <hci_vendor_event>:
}
   27472:	4770      	bx	lr

00027474 <atomic_or>:
{
   27474:	4603      	mov	r3, r0
}
   27476:	f3bf 8f5b 	dmb	ish
   2747a:	e853 0f00 	ldrex	r0, [r3]
   2747e:	ea40 0201 	orr.w	r2, r0, r1
   27482:	e843 2c00 	strex	ip, r2, [r3]
   27486:	f1bc 0f00 	cmp.w	ip, #0
   2748a:	d1f6      	bne.n	2747a <atomic_or+0x6>
   2748c:	f3bf 8f5b 	dmb	ish
   27490:	4770      	bx	lr

00027492 <bt_hci_disconnect>:
{
   27492:	b570      	push	{r4, r5, r6, lr}
   27494:	4606      	mov	r6, r0
   27496:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   27498:	f240 4006 	movw	r0, #1030	; 0x406
   2749c:	2103      	movs	r1, #3
   2749e:	f7f0 ffcd 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   274a2:	4604      	mov	r4, r0
   274a4:	b168      	cbz	r0, 274c2 <bt_hci_disconnect+0x30>
   274a6:	2103      	movs	r1, #3
   274a8:	3008      	adds	r0, #8
   274aa:	f7f5 ff9b 	bl	1d3e4 <net_buf_simple_add>
	disconn->reason = reason;
   274ae:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   274b0:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   274b2:	4621      	mov	r1, r4
   274b4:	2200      	movs	r2, #0
}
   274b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   274ba:	f240 4006 	movw	r0, #1030	; 0x406
   274be:	f7f1 b805 	b.w	184cc <bt_hci_cmd_send_sync>
}
   274c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   274c6:	bd70      	pop	{r4, r5, r6, pc}

000274c8 <bt_le_set_data_len>:
{
   274c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   274ca:	4607      	mov	r7, r0
   274cc:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   274ce:	f242 0022 	movw	r0, #8226	; 0x2022
   274d2:	2106      	movs	r1, #6
{
   274d4:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   274d6:	f7f0 ffb1 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   274da:	4604      	mov	r4, r0
   274dc:	b178      	cbz	r0, 274fe <bt_le_set_data_len+0x36>
   274de:	2106      	movs	r1, #6
   274e0:	3008      	adds	r0, #8
   274e2:	f7f5 ff7f 	bl	1d3e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   274e6:	883b      	ldrh	r3, [r7, #0]
   274e8:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   274ea:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   274ec:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   274ee:	4621      	mov	r1, r4
   274f0:	2200      	movs	r2, #0
}
   274f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   274f6:	f242 0022 	movw	r0, #8226	; 0x2022
   274fa:	f7f0 bfe7 	b.w	184cc <bt_hci_cmd_send_sync>
}
   274fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027504 <bt_le_set_phy>:
{
   27504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27508:	4680      	mov	r8, r0
   2750a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2750c:	f242 0032 	movw	r0, #8242	; 0x2032
   27510:	2107      	movs	r1, #7
{
   27512:	f89d 9020 	ldrb.w	r9, [sp, #32]
   27516:	4616      	mov	r6, r2
   27518:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2751a:	f7f0 ff8f 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   2751e:	4604      	mov	r4, r0
   27520:	b198      	cbz	r0, 2754a <bt_le_set_phy+0x46>
   27522:	2107      	movs	r1, #7
   27524:	3008      	adds	r0, #8
   27526:	f7f5 ff5d 	bl	1d3e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2752a:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2752e:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   27530:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   27532:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   27534:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   27536:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2753a:	4621      	mov	r1, r4
   2753c:	2200      	movs	r2, #0
}
   2753e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27542:	f242 0032 	movw	r0, #8242	; 0x2032
   27546:	f7f0 bfc1 	b.w	184cc <bt_hci_cmd_send_sync>
}
   2754a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2754e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027552 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   27552:	6880      	ldr	r0, [r0, #8]
   27554:	f7f1 b868 	b.w	18628 <bt_hci_le_enh_conn_complete>

00027558 <le_legacy_conn_complete>:
{
   27558:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2755a:	6881      	ldr	r1, [r0, #8]
{
   2755c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   2755e:	780b      	ldrb	r3, [r1, #0]
   27560:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   27564:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   27568:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2756c:	78cb      	ldrb	r3, [r1, #3]
   2756e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   27572:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   27576:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2757a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2757e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   27582:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   27586:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2758a:	7c4b      	ldrb	r3, [r1, #17]
   2758c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   27590:	2207      	movs	r2, #7
   27592:	3104      	adds	r1, #4
   27594:	a803      	add	r0, sp, #12
   27596:	f7ff feda 	bl	2734e <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2759a:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   2759c:	4669      	mov	r1, sp
   2759e:	2206      	movs	r2, #6
   275a0:	f10d 0013 	add.w	r0, sp, #19
   275a4:	9400      	str	r4, [sp, #0]
   275a6:	f8ad 4004 	strh.w	r4, [sp, #4]
   275aa:	f7ff fed0 	bl	2734e <memcpy>
   275ae:	2206      	movs	r2, #6
   275b0:	4669      	mov	r1, sp
   275b2:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   275b6:	9400      	str	r4, [sp, #0]
   275b8:	f8ad 4004 	strh.w	r4, [sp, #4]
   275bc:	f7ff fec7 	bl	2734e <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   275c0:	a802      	add	r0, sp, #8
   275c2:	f7f1 f831 	bl	18628 <bt_hci_le_enh_conn_complete>
}
   275c6:	b00a      	add	sp, #40	; 0x28
   275c8:	bd10      	pop	{r4, pc}

000275ca <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   275ca:	8803      	ldrh	r3, [r0, #0]
   275cc:	8842      	ldrh	r2, [r0, #2]
   275ce:	4293      	cmp	r3, r2
{
   275d0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   275d2:	d819      	bhi.n	27608 <bt_le_conn_params_valid+0x3e>
   275d4:	2b05      	cmp	r3, #5
   275d6:	d917      	bls.n	27608 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   275d8:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   275dc:	d814      	bhi.n	27608 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   275de:	8883      	ldrh	r3, [r0, #4]
   275e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   275e4:	d210      	bcs.n	27608 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   275e6:	88c0      	ldrh	r0, [r0, #6]
   275e8:	f1a0 010a 	sub.w	r1, r0, #10
   275ec:	b289      	uxth	r1, r1
   275ee:	f640 4476 	movw	r4, #3190	; 0xc76
   275f2:	42a1      	cmp	r1, r4
   275f4:	d808      	bhi.n	27608 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   275f6:	3301      	adds	r3, #1
   275f8:	b29b      	uxth	r3, r3
   275fa:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   275fc:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   27600:	bf34      	ite	cc
   27602:	2001      	movcc	r0, #1
   27604:	2000      	movcs	r0, #0
}
   27606:	bd10      	pop	{r4, pc}
		return false;
   27608:	2000      	movs	r0, #0
   2760a:	e7fc      	b.n	27606 <bt_le_conn_params_valid+0x3c>

0002760c <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2760c:	f44f 7000 	mov.w	r0, #512	; 0x200
   27610:	4770      	bx	lr

00027612 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   27612:	2000      	movs	r0, #0
   27614:	4770      	bx	lr

00027616 <bt_lookup_id_addr>:
}
   27616:	4608      	mov	r0, r1
   27618:	4770      	bx	lr

0002761a <bt_id_set_adv_random_addr>:
{
   2761a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2761c:	f3bf 8f5b 	dmb	ish
   27620:	6903      	ldr	r3, [r0, #16]
   27622:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_PARAMS_SET)) {
   27626:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2762a:	079b      	lsls	r3, r3, #30
{
   2762c:	4604      	mov	r4, r0
   2762e:	460e      	mov	r6, r1
	if (!atomic_test_bit(adv->flags, BT_ADV_PARAMS_SET)) {
   27630:	f100 0710 	add.w	r7, r0, #16
   27634:	d413      	bmi.n	2765e <bt_id_set_adv_random_addr+0x44>
   27636:	2206      	movs	r2, #6
   27638:	3003      	adds	r0, #3
   2763a:	f7ff fe88 	bl	2734e <memcpy>
		adv->random_addr.type = BT_ADDR_LE_RANDOM;
   2763e:	2301      	movs	r3, #1
   27640:	70a3      	strb	r3, [r4, #2]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27642:	f3bf 8f5b 	dmb	ish
   27646:	e857 3f00 	ldrex	r3, [r7]
   2764a:	f043 0308 	orr.w	r3, r3, #8
   2764e:	e847 3200 	strex	r2, r3, [r7]
   27652:	2a00      	cmp	r2, #0
   27654:	d1f7      	bne.n	27646 <bt_id_set_adv_random_addr+0x2c>
   27656:	f3bf 8f5b 	dmb	ish
}
   2765a:	4628      	mov	r0, r5
   2765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR,
   2765e:	2107      	movs	r1, #7
   27660:	f242 0035 	movw	r0, #8245	; 0x2035
   27664:	f7f0 feea 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   27668:	4605      	mov	r5, r0
   2766a:	b1e8      	cbz	r0, 276a8 <bt_id_set_adv_random_addr+0x8e>
   2766c:	2107      	movs	r1, #7
   2766e:	3008      	adds	r0, #8
   27670:	f7f5 feb8 	bl	1d3e4 <net_buf_simple_add>
	cp->handle = adv->handle;
   27674:	7863      	ldrb	r3, [r4, #1]
   27676:	f800 3b01 	strb.w	r3, [r0], #1
   2767a:	2206      	movs	r2, #6
   2767c:	4631      	mov	r1, r6
   2767e:	f7ff fe66 	bl	2734e <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR, buf,
   27682:	4629      	mov	r1, r5
   27684:	2200      	movs	r2, #0
   27686:	f242 0035 	movw	r0, #8245	; 0x2035
   2768a:	f7f0 ff1f 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   2768e:	4605      	mov	r5, r0
   27690:	2800      	cmp	r0, #0
   27692:	d1e2      	bne.n	2765a <bt_id_set_adv_random_addr+0x40>
	if (&adv->random_addr.a != addr) {
   27694:	1ce0      	adds	r0, r4, #3
   27696:	4286      	cmp	r6, r0
   27698:	d003      	beq.n	276a2 <bt_id_set_adv_random_addr+0x88>
   2769a:	2206      	movs	r2, #6
   2769c:	4631      	mov	r1, r6
   2769e:	f7ff fe56 	bl	2734e <memcpy>
	adv->random_addr.type = BT_ADDR_LE_RANDOM;
   276a2:	2301      	movs	r3, #1
   276a4:	70a3      	strb	r3, [r4, #2]
	return 0;
   276a6:	e7d8      	b.n	2765a <bt_id_set_adv_random_addr+0x40>
		return -ENOBUFS;
   276a8:	f06f 0568 	mvn.w	r5, #104	; 0x68
   276ac:	e7d5      	b.n	2765a <bt_id_set_adv_random_addr+0x40>

000276ae <bt_id_set_adv_private_addr>:
{
   276ae:	b513      	push	{r0, r1, r4, lr}
   276b0:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   276b2:	2106      	movs	r1, #6
   276b4:	4668      	mov	r0, sp
   276b6:	f7f7 ff59 	bl	1f56c <bt_rand>
	if (err) {
   276ba:	b948      	cbnz	r0, 276d0 <bt_id_set_adv_private_addr+0x22>
	BT_ADDR_SET_NRPA(&nrpa);
   276bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   276c0:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   276c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   276c6:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   276c8:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   276cc:	f7ff ffa5 	bl	2761a <bt_id_set_adv_random_addr>
}
   276d0:	b002      	add	sp, #8
   276d2:	bd10      	pop	{r4, pc}

000276d4 <get_adv_channel_map>:
{
   276d4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   276d6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   276da:	bf0c      	ite	eq
   276dc:	2007      	moveq	r0, #7
   276de:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   276e0:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   276e2:	bf48      	it	mi
   276e4:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   276e8:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   276ea:	bf48      	it	mi
   276ec:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   276f0:	4770      	bx	lr

000276f2 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   276f2:	f3bf 8f5b 	dmb	ish
   276f6:	6800      	ldr	r0, [r0, #0]
   276f8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   276fc:	4108      	asrs	r0, r1
}
   276fe:	f000 0001 	and.w	r0, r0, #1
   27702:	4770      	bx	lr

00027704 <atomic_and>:
{
   27704:	4603      	mov	r3, r0
}
   27706:	f3bf 8f5b 	dmb	ish
   2770a:	e853 0f00 	ldrex	r0, [r3]
   2770e:	ea00 0201 	and.w	r2, r0, r1
   27712:	e843 2c00 	strex	ip, r2, [r3]
   27716:	f1bc 0f00 	cmp.w	ip, #0
   2771a:	d1f6      	bne.n	2770a <atomic_and+0x6>
   2771c:	f3bf 8f5b 	dmb	ish
   27720:	4770      	bx	lr

00027722 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   27722:	2207      	movs	r2, #7
   27724:	f7ff be13 	b.w	2734e <memcpy>

00027728 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27728:	2301      	movs	r3, #1
{
   2772a:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2772c:	fa03 f101 	lsl.w	r1, r3, r1
{
   27730:	4604      	mov	r4, r0
	if (val) {
   27732:	b162      	cbz	r2, 2774e <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27734:	f3bf 8f5b 	dmb	ish
   27738:	e854 3f00 	ldrex	r3, [r4]
   2773c:	430b      	orrs	r3, r1
   2773e:	e844 3200 	strex	r2, r3, [r4]
   27742:	2a00      	cmp	r2, #0
   27744:	d1f8      	bne.n	27738 <atomic_set_bit_to+0x10>
   27746:	f3bf 8f5b 	dmb	ish
	}
}
   2774a:	bc10      	pop	{r4}
   2774c:	4770      	bx	lr
   2774e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27750:	43c9      	mvns	r1, r1
   27752:	f7ff bfd7 	b.w	27704 <atomic_and>

00027756 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27756:	2301      	movs	r3, #1
   27758:	408b      	lsls	r3, r1
   2775a:	f3bf 8f5b 	dmb	ish
   2775e:	e850 2f00 	ldrex	r2, [r0]
   27762:	431a      	orrs	r2, r3
   27764:	e840 2100 	strex	r1, r2, [r0]
   27768:	2900      	cmp	r1, #0
   2776a:	d1f8      	bne.n	2775e <atomic_set_bit+0x8>
   2776c:	f3bf 8f5b 	dmb	ish
}
   27770:	4770      	bx	lr

00027772 <le_adv_update>:
{
   27772:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27776:	b087      	sub	sp, #28
   27778:	4605      	mov	r5, r0
   2777a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
   2777e:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   27782:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   27786:	460f      	mov	r7, r1
   27788:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
   2778a:	2100      	movs	r1, #0
   2778c:	2210      	movs	r2, #16
   2778e:	a802      	add	r0, sp, #8
{
   27790:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   27792:	f7ff fde7 	bl	27364 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   27796:	b174      	cbz	r4, 277b6 <le_adv_update+0x44>
		const char *name = bt_get_name();
   27798:	f7f1 fd10 	bl	191bc <bt_get_name>
   2779c:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2779e:	bb47      	cbnz	r7, 277f2 <le_adv_update+0x80>
   277a0:	bb9e      	cbnz	r6, 2780a <le_adv_update+0x98>
		data = (struct bt_data)BT_DATA(
   277a2:	4648      	mov	r0, r9
   277a4:	f7ff fd8e 	bl	272c4 <strlen>
   277a8:	2209      	movs	r2, #9
   277aa:	f88d 2000 	strb.w	r2, [sp]
   277ae:	f88d 0001 	strb.w	r0, [sp, #1]
   277b2:	f8cd 9004 	str.w	r9, [sp, #4]
	if (!(ext_adv && scannable)) {
   277b6:	f1bb 0f00 	cmp.w	fp, #0
   277ba:	d028      	beq.n	2780e <le_adv_update+0x9c>
   277bc:	f1b8 0f00 	cmp.w	r8, #0
   277c0:	d025      	beq.n	2780e <le_adv_update+0x9c>
		d[0].len = sd_len;
   277c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   277c4:	9303      	str	r3, [sp, #12]
		if (name_type == ADV_NAME_TYPE_SD) {
   277c6:	2c02      	cmp	r4, #2
		d[0].data = sd;
   277c8:	9602      	str	r6, [sp, #8]
		if (name_type == ADV_NAME_TYPE_SD) {
   277ca:	f04f 0301 	mov.w	r3, #1
   277ce:	d03b      	beq.n	27848 <le_adv_update+0xd6>
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_SCAN_RSP_DATA,
   277d0:	aa02      	add	r2, sp, #8
   277d2:	f242 0138 	movw	r1, #8248	; 0x2038
   277d6:	4628      	mov	r0, r5
   277d8:	f7f1 ff00 	bl	195dc <hci_set_ad_ext>
		if (err) {
   277dc:	b358      	cbz	r0, 27836 <le_adv_update+0xc4>
   277de:	e030      	b.n	27842 <le_adv_update+0xd0>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   277e0:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   277e4:	3908      	subs	r1, #8
   277e6:	2901      	cmp	r1, #1
   277e8:	d933      	bls.n	27852 <le_adv_update+0xe0>
	for (i = 0; i < ad_len; i++) {
   277ea:	3201      	adds	r2, #1
   277ec:	4592      	cmp	sl, r2
   277ee:	d1f7      	bne.n	277e0 <le_adv_update+0x6e>
   277f0:	e7d6      	b.n	277a0 <le_adv_update+0x2e>
   277f2:	2200      	movs	r2, #0
   277f4:	e7fa      	b.n	277ec <le_adv_update+0x7a>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   277f6:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   277fa:	3908      	subs	r1, #8
   277fc:	2901      	cmp	r1, #1
   277fe:	d928      	bls.n	27852 <le_adv_update+0xe0>
	for (i = 0; i < ad_len; i++) {
   27800:	3201      	adds	r2, #1
   27802:	9b10      	ldr	r3, [sp, #64]	; 0x40
   27804:	4293      	cmp	r3, r2
   27806:	d1f6      	bne.n	277f6 <le_adv_update+0x84>
   27808:	e7cb      	b.n	277a2 <le_adv_update+0x30>
   2780a:	2200      	movs	r2, #0
   2780c:	e7f9      	b.n	27802 <le_adv_update+0x90>
		if (name_type == ADV_NAME_TYPE_AD) {
   2780e:	2c01      	cmp	r4, #1
			d_len = 2;
   27810:	bf0c      	ite	eq
   27812:	2302      	moveq	r3, #2
		d_len = 1;
   27814:	2301      	movne	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_ADV_DATA,
   27816:	aa02      	add	r2, sp, #8
   27818:	f242 0137 	movw	r1, #8247	; 0x2037
   2781c:	4628      	mov	r0, r5
			d[1].data = &data;
   2781e:	bf04      	itt	eq
   27820:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   27824:	9405      	streq	r4, [sp, #20]
		d[0].len = ad_len;
   27826:	e9cd 7a02 	strd	r7, sl, [sp, #8]
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_ADV_DATA,
   2782a:	f7f1 fed7 	bl	195dc <hci_set_ad_ext>
		if (err) {
   2782e:	b940      	cbnz	r0, 27842 <le_adv_update+0xd0>
	if (scannable) {
   27830:	f1b8 0f00 	cmp.w	r8, #0
   27834:	d1c5      	bne.n	277c2 <le_adv_update+0x50>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   27836:	f105 0010 	add.w	r0, r5, #16
   2783a:	2102      	movs	r1, #2
   2783c:	f7ff ff8b 	bl	27756 <atomic_set_bit>
	return 0;
   27840:	2000      	movs	r0, #0
}
   27842:	b007      	add	sp, #28
   27844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d[1].len = 1;
   27848:	9305      	str	r3, [sp, #20]
			d[1].data = &data;
   2784a:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   2784e:	4623      	mov	r3, r4
   27850:	e7be      	b.n	277d0 <le_adv_update+0x5e>
			return -EINVAL;
   27852:	f06f 0015 	mvn.w	r0, #21
   27856:	e7f4      	b.n	27842 <le_adv_update+0xd0>

00027858 <get_adv_name_type>:
{
   27858:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   2785a:	f100 0310 	add.w	r3, r0, #16
   2785e:	2108      	movs	r1, #8
   27860:	4618      	mov	r0, r3
   27862:	f7ff ff46 	bl	276f2 <atomic_test_bit>
   27866:	b928      	cbnz	r0, 27874 <get_adv_name_type+0x1c>
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   27868:	4618      	mov	r0, r3
   2786a:	2107      	movs	r1, #7
}
   2786c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   27870:	f7ff bf3f 	b.w	276f2 <atomic_test_bit>
}
   27874:	2002      	movs	r0, #2
   27876:	bd08      	pop	{r3, pc}

00027878 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   27878:	6843      	ldr	r3, [r0, #4]
   2787a:	f013 0008 	ands.w	r0, r3, #8
   2787e:	d00a      	beq.n	27896 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   27880:	035a      	lsls	r2, r3, #13
   27882:	d407      	bmi.n	27894 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   27884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   27888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2788c:	bf0c      	ite	eq
   2788e:	2001      	moveq	r0, #1
   27890:	2002      	movne	r0, #2
   27892:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   27894:	2001      	movs	r0, #1
}
   27896:	4770      	bx	lr

00027898 <le_ext_adv_param_set>:
{
   27898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool dir_adv = param->peer != NULL, scannable;
   2789c:	f8d1 8010 	ldr.w	r8, [r1, #16]
{
   278a0:	b085      	sub	sp, #20
	bool dir_adv = param->peer != NULL, scannable;
   278a2:	f1b8 0600 	subs.w	r6, r8, #0
{
   278a6:	4607      	mov	r7, r0
   278a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
   278aa:	f242 0036 	movw	r0, #8246	; 0x2036
   278ae:	f04f 0119 	mov.w	r1, #25
{
   278b2:	9201      	str	r2, [sp, #4]
	bool dir_adv = param->peer != NULL, scannable;
   278b4:	bf18      	it	ne
   278b6:	2601      	movne	r6, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
   278b8:	f7f0 fdc0 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   278bc:	4682      	mov	sl, r0
   278be:	2800      	cmp	r0, #0
   278c0:	f000 80e2 	beq.w	27a88 <le_ext_adv_param_set+0x1f0>
   278c4:	2119      	movs	r1, #25
   278c6:	3008      	adds	r0, #8
   278c8:	f7f5 fd8c 	bl	1d3e4 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   278cc:	2219      	movs	r2, #25
   278ce:	4604      	mov	r4, r0
   278d0:	2100      	movs	r1, #0
   278d2:	f7ff fd47 	bl	27364 <memset>
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   278d6:	6869      	ldr	r1, [r5, #4]
   278d8:	f104 030a 	add.w	r3, r4, #10
   278dc:	4632      	mov	r2, r6
   278de:	4638      	mov	r0, r7
   278e0:	f7f1 fe00 	bl	194e4 <bt_id_set_adv_own_addr>
	if (err) {
   278e4:	4683      	mov	fp, r0
   278e6:	2800      	cmp	r0, #0
   278e8:	f040 80b8 	bne.w	27a5c <le_ext_adv_param_set+0x1c4>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   278ec:	f107 0009 	add.w	r0, r7, #9
	if (dir_adv) {
   278f0:	f1b8 0f00 	cmp.w	r8, #0
   278f4:	f000 80b6 	beq.w	27a64 <le_ext_adv_param_set+0x1cc>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   278f8:	6929      	ldr	r1, [r5, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   278fa:	f7ff ff12 	bl	27722 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   278fe:	4628      	mov	r0, r5
   27900:	f7ff ffba 	bl	27878 <get_adv_name_type_param>
	cp->handle = adv->handle;
   27904:	787b      	ldrb	r3, [r7, #1]
   27906:	7023      	strb	r3, [r4, #0]
	sys_put_le24(param->interval_min, cp->prim_min_interval);
   27908:	68ab      	ldr	r3, [r5, #8]
	dst[0] = val;
   2790a:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   2790c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   27910:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   27912:	7122      	strb	r2, [r4, #4]
	dst[2] = val >> 16;
   27914:	7163      	strb	r3, [r4, #5]
	sys_put_le24(param->interval_max, cp->prim_max_interval);
   27916:	68eb      	ldr	r3, [r5, #12]
	dst[0] = val;
   27918:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
   2791a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   2791e:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   27920:	71e2      	strb	r2, [r4, #7]
	dst[2] = val >> 16;
   27922:	7223      	strb	r3, [r4, #8]
	cp->prim_channel_map = get_adv_channel_map(param->options);
   27924:	6869      	ldr	r1, [r5, #4]
	name_type = get_adv_name_type_param(param);
   27926:	4681      	mov	r9, r0
	cp->prim_channel_map = get_adv_channel_map(param->options);
   27928:	4608      	mov	r0, r1
   2792a:	f7ff fed3 	bl	276d4 <get_adv_channel_map>
	cp->filter_policy = get_filter_policy(param->options);
   2792e:	2300      	movs	r3, #0
   27930:	74a3      	strb	r3, [r4, #18]
	cp->tx_power = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
   27932:	237f      	movs	r3, #127	; 0x7f
   27934:	74e3      	strb	r3, [r4, #19]
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   27936:	f411 6280 	ands.w	r2, r1, #1024	; 0x400
	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
   2793a:	f04f 0301 	mov.w	r3, #1
	cp->prim_channel_map = get_adv_channel_map(param->options);
   2793e:	7260      	strb	r0, [r4, #9]
	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
   27940:	7523      	strb	r3, [r4, #20]
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   27942:	d003      	beq.n	2794c <le_ext_adv_param_set+0xb4>
		if (param->options & BT_LE_ADV_OPT_NO_2M) {
   27944:	050e      	lsls	r6, r1, #20
			cp->sec_adv_phy = BT_HCI_LE_PHY_2M;
   27946:	bf58      	it	pl
   27948:	2302      	movpl	r3, #2
   2794a:	75a3      	strb	r3, [r4, #22]
	if (param->options & BT_LE_ADV_OPT_CODED) {
   2794c:	04c8      	lsls	r0, r1, #19
		cp->prim_adv_phy = BT_HCI_LE_PHY_CODED;
   2794e:	bf42      	ittt	mi
   27950:	2303      	movmi	r3, #3
   27952:	7523      	strbmi	r3, [r4, #20]
		cp->sec_adv_phy = BT_HCI_LE_PHY_CODED;
   27954:	75a3      	strbmi	r3, [r4, #22]
		props |= BT_HCI_LE_ADV_PROP_LEGACY;
   27956:	2a00      	cmp	r2, #0
   27958:	bf14      	ite	ne
   2795a:	2300      	movne	r3, #0
   2795c:	2310      	moveq	r3, #16
	if (param->options & BT_LE_ADV_OPT_USE_TX_POWER) {
   2795e:	044e      	lsls	r6, r1, #17
		props |= BT_HCI_LE_ADV_PROP_TX_POWER;
   27960:	bf48      	it	mi
   27962:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
	if (param->options & BT_LE_ADV_OPT_ANONYMOUS) {
   27966:	0488      	lsls	r0, r1, #18
		props |= BT_HCI_LE_ADV_PROP_ANON;
   27968:	bf48      	it	mi
   2796a:	f043 0320 	orrmi.w	r3, r3, #32
	if (param->options & BT_LE_ADV_OPT_NOTIFY_SCAN_REQ) {
   2796e:	05ce      	lsls	r6, r1, #23
		cp->scan_req_notify_enable = BT_HCI_LE_ADV_SCAN_REQ_ENABLE;
   27970:	bf44      	itt	mi
   27972:	2001      	movmi	r0, #1
   27974:	7620      	strbmi	r0, [r4, #24]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   27976:	07c8      	lsls	r0, r1, #31
   27978:	d57a      	bpl.n	27a70 <le_ext_adv_param_set+0x1d8>
		props |= BT_HCI_LE_ADV_PROP_CONN;
   2797a:	f043 0601 	orr.w	r6, r3, #1
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   2797e:	f1b8 0f00 	cmp.w	r8, #0
   27982:	d102      	bne.n	2798a <le_ext_adv_param_set+0xf2>
   27984:	b90a      	cbnz	r2, 2798a <le_ext_adv_param_set+0xf2>
			props |= BT_HCI_LE_ADV_PROP_SCAN;
   27986:	f043 0603 	orr.w	r6, r3, #3
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   2798a:	058a      	lsls	r2, r1, #22
   2798c:	d404      	bmi.n	27998 <le_ext_adv_param_set+0x100>
   2798e:	9b01      	ldr	r3, [sp, #4]
   27990:	b913      	cbnz	r3, 27998 <le_ext_adv_param_set+0x100>
   27992:	f1b9 0f02 	cmp.w	r9, #2
   27996:	d102      	bne.n	2799e <le_ext_adv_param_set+0x106>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   27998:	f046 0602 	orr.w	r6, r6, #2
   2799c:	b2b6      	uxth	r6, r6
	if (dir_adv) {
   2799e:	f1b8 0f00 	cmp.w	r8, #0
   279a2:	d067      	beq.n	27a74 <le_ext_adv_param_set+0x1dc>
		if (!(param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY)) {
   279a4:	06cb      	lsls	r3, r1, #27
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
   279a6:	bf4c      	ite	mi
   279a8:	f046 0804 	orrmi.w	r8, r6, #4
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
   279ac:	f046 080c 	orrpl.w	r8, r6, #12
		bt_addr_le_copy(&cp->peer_addr, param->peer);
   279b0:	6929      	ldr	r1, [r5, #16]
   279b2:	f104 000b 	add.w	r0, r4, #11
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
   279b6:	fa1f f888 	uxth.w	r8, r8
		bt_addr_le_copy(&cp->peer_addr, param->peer);
   279ba:	f7ff feb2 	bl	27722 <bt_addr_le_copy>
	cp->sid = param->sid;
   279be:	786b      	ldrb	r3, [r5, #1]
   279c0:	75e3      	strb	r3, [r4, #23]
	cp->props = sys_cpu_to_le16(props);
   279c2:	f8a4 8001 	strh.w	r8, [r4, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
   279c6:	aa02      	add	r2, sp, #8
   279c8:	4651      	mov	r1, sl
   279ca:	f242 0036 	movw	r0, #8246	; 0x2036
   279ce:	f7f0 fd7d 	bl	184cc <bt_hci_cmd_send_sync>
	if (err) {
   279d2:	4683      	mov	fp, r0
   279d4:	2800      	cmp	r0, #0
   279d6:	d141      	bne.n	27a5c <le_ext_adv_param_set+0x1c4>
	struct bt_hci_rp_le_set_ext_adv_param *rp = (void *)rsp->data;
   279d8:	9802      	ldr	r0, [sp, #8]
	adv->tx_power = rp->tx_power;
   279da:	6882      	ldr	r2, [r0, #8]
   279dc:	7852      	ldrb	r2, [r2, #1]
   279de:	763a      	strb	r2, [r7, #24]
	atomic_set_bit(adv->flags, BT_ADV_PARAMS_SET);
   279e0:	f107 0410 	add.w	r4, r7, #16
	net_buf_unref(rsp);
   279e4:	f7f5 fbe8 	bl	1d1b8 <net_buf_unref>
	atomic_set_bit(adv->flags, BT_ADV_PARAMS_SET);
   279e8:	2101      	movs	r1, #1
   279ea:	4620      	mov	r0, r4
   279ec:	f7ff feb3 	bl	27756 <atomic_set_bit>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   279f0:	f06f 0108 	mvn.w	r1, #8
   279f4:	f7ff fe86 	bl	27704 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_RANDOM_ADDR_PENDING)) {
   279f8:	0700      	lsls	r0, r0, #28
   279fa:	d43d      	bmi.n	27a78 <le_ext_adv_param_set+0x1e0>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   279fc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   27a00:	4620      	mov	r0, r4
   27a02:	f7ff fe7f 	bl	27704 <atomic_and>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   27a06:	f109 33ff 	add.w	r3, r9, #4294967295
   27a0a:	425a      	negs	r2, r3
   27a0c:	415a      	adcs	r2, r3
   27a0e:	2107      	movs	r1, #7
   27a10:	4620      	mov	r0, r4
   27a12:	f7ff fe89 	bl	27728 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   27a16:	f1a9 0102 	sub.w	r1, r9, #2
   27a1a:	424a      	negs	r2, r1
   27a1c:	414a      	adcs	r2, r1
   27a1e:	4620      	mov	r0, r4
   27a20:	2108      	movs	r1, #8
   27a22:	f7ff fe81 	bl	27728 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   27a26:	686a      	ldr	r2, [r5, #4]
   27a28:	2109      	movs	r1, #9
   27a2a:	f002 0201 	and.w	r2, r2, #1
   27a2e:	4620      	mov	r0, r4
   27a30:	f7ff fe7a 	bl	27728 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   27a34:	f3c6 0240 	ubfx	r2, r6, #1, #1
   27a38:	210a      	movs	r1, #10
   27a3a:	4620      	mov	r0, r4
   27a3c:	f7ff fe74 	bl	27728 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   27a40:	686a      	ldr	r2, [r5, #4]
   27a42:	210c      	movs	r1, #12
   27a44:	f3c2 0280 	ubfx	r2, r2, #2, #1
   27a48:	4620      	mov	r0, r4
   27a4a:	f7ff fe6d 	bl	27728 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_EXT_ADV,
   27a4e:	686a      	ldr	r2, [r5, #4]
   27a50:	210b      	movs	r1, #11
   27a52:	f3c2 2280 	ubfx	r2, r2, #10, #1
   27a56:	4620      	mov	r0, r4
   27a58:	f7ff fe66 	bl	27728 <atomic_set_bit_to>
}
   27a5c:	4658      	mov	r0, fp
   27a5e:	b005      	add	sp, #20
   27a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   27a64:	f8cd 8008 	str.w	r8, [sp, #8]
   27a68:	a902      	add	r1, sp, #8
   27a6a:	f8cd 800b 	str.w	r8, [sp, #11]
   27a6e:	e744      	b.n	278fa <le_ext_adv_param_set+0x62>
   27a70:	461e      	mov	r6, r3
   27a72:	e78a      	b.n	2798a <le_ext_adv_param_set+0xf2>
   27a74:	46b0      	mov	r8, r6
   27a76:	e7a2      	b.n	279be <le_ext_adv_param_set+0x126>
		err = bt_id_set_adv_random_addr(adv, &adv->random_addr.a);
   27a78:	1cf9      	adds	r1, r7, #3
   27a7a:	4638      	mov	r0, r7
   27a7c:	f7ff fdcd 	bl	2761a <bt_id_set_adv_random_addr>
		if (err) {
   27a80:	2800      	cmp	r0, #0
   27a82:	d0bb      	beq.n	279fc <le_ext_adv_param_set+0x164>
   27a84:	4683      	mov	fp, r0
   27a86:	e7e9      	b.n	27a5c <le_ext_adv_param_set+0x1c4>
		return -ENOBUFS;
   27a88:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   27a8c:	e7e6      	b.n	27a5c <le_ext_adv_param_set+0x1c4>

00027a8e <bt_le_adv_set_enable_ext>:
{
   27a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a92:	4680      	mov	r8, r0
   27a94:	b086      	sub	sp, #24
   27a96:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   27a98:	f242 0039 	movw	r0, #8249	; 0x2039
   27a9c:	2106      	movs	r1, #6
{
   27a9e:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   27aa0:	f7f0 fccc 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   27aa4:	4605      	mov	r5, r0
   27aa6:	b380      	cbz	r0, 27b0a <bt_le_adv_set_enable_ext+0x7c>
	return net_buf_simple_add_u8(&buf->b, val);
   27aa8:	f100 0608 	add.w	r6, r0, #8
	if (enable) {
   27aac:	b33f      	cbz	r7, 27afe <bt_le_adv_set_enable_ext+0x70>
   27aae:	2101      	movs	r1, #1
   27ab0:	4630      	mov	r0, r6
   27ab2:	f001 f8ce 	bl	28c52 <net_buf_simple_add_u8>
   27ab6:	2101      	movs	r1, #1
   27ab8:	4630      	mov	r0, r6
   27aba:	f001 f8ca 	bl	28c52 <net_buf_simple_add_u8>
   27abe:	f898 1001 	ldrb.w	r1, [r8, #1]
   27ac2:	4630      	mov	r0, r6
   27ac4:	f001 f8c5 	bl	28c52 <net_buf_simple_add_u8>
	net_buf_add_le16(buf, param ? param->timeout : 0);
   27ac8:	b1dc      	cbz	r4, 27b02 <bt_le_adv_set_enable_ext+0x74>
   27aca:	8821      	ldrh	r1, [r4, #0]
	net_buf_simple_add_le16(&buf->b, val);
   27acc:	4630      	mov	r0, r6
   27ace:	f001 f8c7 	bl	28c60 <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   27ad2:	b1c4      	cbz	r4, 27b06 <bt_le_adv_set_enable_ext+0x78>
   27ad4:	78a1      	ldrb	r1, [r4, #2]
	return net_buf_simple_add_u8(&buf->b, val);
   27ad6:	4630      	mov	r0, r6
   27ad8:	f001 f8bb 	bl	28c52 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   27adc:	f108 0210 	add.w	r2, r8, #16
   27ae0:	a903      	add	r1, sp, #12
   27ae2:	4628      	mov	r0, r5
   27ae4:	9700      	str	r7, [sp, #0]
   27ae6:	2306      	movs	r3, #6
   27ae8:	f7f0 fc96 	bl	18418 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
   27aec:	2200      	movs	r2, #0
   27aee:	4629      	mov	r1, r5
   27af0:	f242 0039 	movw	r0, #8249	; 0x2039
   27af4:	f7f0 fcea 	bl	184cc <bt_hci_cmd_send_sync>
}
   27af8:	b006      	add	sp, #24
   27afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27afe:	4639      	mov	r1, r7
   27b00:	e7d6      	b.n	27ab0 <bt_le_adv_set_enable_ext+0x22>
	net_buf_add_le16(buf, param ? param->timeout : 0);
   27b02:	4621      	mov	r1, r4
   27b04:	e7e2      	b.n	27acc <bt_le_adv_set_enable_ext+0x3e>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   27b06:	4621      	mov	r1, r4
   27b08:	e7e5      	b.n	27ad6 <bt_le_adv_set_enable_ext+0x48>
		return -ENOBUFS;
   27b0a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27b0e:	e7f3      	b.n	27af8 <bt_le_adv_set_enable_ext+0x6a>

00027b10 <bt_le_adv_set_enable>:
		return bt_le_adv_set_enable_ext(adv, enable, NULL);
   27b10:	2200      	movs	r2, #0
   27b12:	f7ff bfbc 	b.w	27a8e <bt_le_adv_set_enable_ext>

00027b16 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   27b16:	3020      	adds	r0, #32
   27b18:	f7fa b898 	b.w	21c4c <k_work_cancel_delayable>

00027b1c <bt_le_ext_adv_set_data>:
{
   27b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b20:	4698      	mov	r8, r3
   27b22:	b085      	sub	sp, #20
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   27b24:	f100 0310 	add.w	r3, r0, #16
{
   27b28:	4604      	mov	r4, r0
   27b2a:	460f      	mov	r7, r1
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   27b2c:	4618      	mov	r0, r3
   27b2e:	210b      	movs	r1, #11
{
   27b30:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   27b34:	f7ff fddd 	bl	276f2 <atomic_test_bit>
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   27b38:	210a      	movs	r1, #10
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   27b3a:	4605      	mov	r5, r0
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   27b3c:	4618      	mov	r0, r3
   27b3e:	f7ff fdd8 	bl	276f2 <atomic_test_bit>
   27b42:	4606      	mov	r6, r0
	if (ext_adv) {
   27b44:	b13d      	cbz	r5, 27b56 <bt_le_ext_adv_set_data+0x3a>
		if ((scannable && ad_len) ||
   27b46:	b118      	cbz	r0, 27b50 <bt_le_ext_adv_set_data+0x34>
   27b48:	b12a      	cbz	r2, 27b56 <bt_le_ext_adv_set_data+0x3a>
			return -ENOTSUP;
   27b4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27b4e:	e00e      	b.n	27b6e <bt_le_ext_adv_set_data+0x52>
		    (!scannable && sd_len)) {
   27b50:	f1b9 0f00 	cmp.w	r9, #0
   27b54:	d1f9      	bne.n	27b4a <bt_le_ext_adv_set_data+0x2e>
	return le_adv_update(adv, ad, ad_len, sd, sd_len, ext_adv, scannable,
   27b56:	4620      	mov	r0, r4
   27b58:	f7ff fe7e 	bl	27858 <get_adv_name_type>
   27b5c:	e9cd 9500 	strd	r9, r5, [sp]
   27b60:	e9cd 6002 	strd	r6, r0, [sp, #8]
   27b64:	4643      	mov	r3, r8
   27b66:	4639      	mov	r1, r7
   27b68:	4620      	mov	r0, r4
   27b6a:	f7ff fe02 	bl	27772 <le_adv_update>
}
   27b6e:	b005      	add	sp, #20
   27b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00027b74 <tx_complete_work>:
	tx_notify(conn);
   27b74:	3828      	subs	r0, #40	; 0x28
   27b76:	f7f2 b995 	b.w	19ea4 <tx_notify>

00027b7a <bt_conn_reset_rx_state>:
{
   27b7a:	b510      	push	{r4, lr}
   27b7c:	4604      	mov	r4, r0
	if (!conn->rx) {
   27b7e:	6900      	ldr	r0, [r0, #16]
   27b80:	b118      	cbz	r0, 27b8a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   27b82:	f7f5 fb19 	bl	1d1b8 <net_buf_unref>
	conn->rx = NULL;
   27b86:	2300      	movs	r3, #0
   27b88:	6123      	str	r3, [r4, #16]
}
   27b8a:	bd10      	pop	{r4, pc}

00027b8c <bt_conn_ref>:
{
   27b8c:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   27b8e:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27b92:	f3bf 8f5b 	dmb	ish
   27b96:	6813      	ldr	r3, [r2, #0]
   27b98:	f3bf 8f5b 	dmb	ish
		if (!old) {
   27b9c:	b17b      	cbz	r3, 27bbe <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   27b9e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   27ba2:	1c59      	adds	r1, r3, #1
   27ba4:	e852 4f00 	ldrex	r4, [r2]
   27ba8:	429c      	cmp	r4, r3
   27baa:	d104      	bne.n	27bb6 <bt_conn_ref+0x2a>
   27bac:	e842 1c00 	strex	ip, r1, [r2]
   27bb0:	f1bc 0f00 	cmp.w	ip, #0
   27bb4:	d1f6      	bne.n	27ba4 <bt_conn_ref+0x18>
   27bb6:	f3bf 8f5b 	dmb	ish
   27bba:	d1ea      	bne.n	27b92 <bt_conn_ref+0x6>
}
   27bbc:	bd10      	pop	{r4, pc}
			return NULL;
   27bbe:	4618      	mov	r0, r3
   27bc0:	e7fc      	b.n	27bbc <bt_conn_ref+0x30>

00027bc2 <conn_lookup_handle>:
{
   27bc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27bc6:	4607      	mov	r7, r0
   27bc8:	460e      	mov	r6, r1
   27bca:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   27bcc:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27bce:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   27bd2:	42b4      	cmp	r4, r6
   27bd4:	d103      	bne.n	27bde <conn_lookup_handle+0x1c>
	return NULL;
   27bd6:	2300      	movs	r3, #0
}
   27bd8:	4618      	mov	r0, r3
   27bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27bde:	fb09 7004 	mla	r0, r9, r4, r7
   27be2:	f7ff ffd3 	bl	27b8c <bt_conn_ref>
   27be6:	4603      	mov	r3, r0
		if (!conn) {
   27be8:	b158      	cbz	r0, 27c02 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   27bea:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27bec:	2d01      	cmp	r5, #1
   27bee:	d002      	beq.n	27bf6 <conn_lookup_handle+0x34>
   27bf0:	3d07      	subs	r5, #7
   27bf2:	2d01      	cmp	r5, #1
   27bf4:	d803      	bhi.n	27bfe <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27bf6:	881a      	ldrh	r2, [r3, #0]
   27bf8:	4542      	cmp	r2, r8
   27bfa:	d0ed      	beq.n	27bd8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   27bfc:	4618      	mov	r0, r3
   27bfe:	f7f2 fbc3 	bl	1a388 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27c02:	3401      	adds	r4, #1
   27c04:	e7e5      	b.n	27bd2 <conn_lookup_handle+0x10>

00027c06 <bt_conn_connected>:
{
   27c06:	b510      	push	{r4, lr}
   27c08:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   27c0a:	f7f2 fff1 	bl	1abf0 <bt_l2cap_connected>
	notify_connected(conn);
   27c0e:	4620      	mov	r0, r4
}
   27c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   27c14:	f7f2 b916 	b.w	19e44 <notify_connected>

00027c18 <bt_conn_get_security>:
}
   27c18:	2001      	movs	r0, #1
   27c1a:	4770      	bx	lr

00027c1c <bt_conn_is_peer_addr_le>:
{
   27c1c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27c1e:	7a03      	ldrb	r3, [r0, #8]
   27c20:	428b      	cmp	r3, r1
{
   27c22:	4604      	mov	r4, r0
   27c24:	4615      	mov	r5, r2
	if (id != conn->id) {
   27c26:	d115      	bne.n	27c54 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27c28:	f100 0190 	add.w	r1, r0, #144	; 0x90
   27c2c:	2207      	movs	r2, #7
   27c2e:	4628      	mov	r0, r5
   27c30:	f7ff fb64 	bl	272fc <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   27c34:	b180      	cbz	r0, 27c58 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27c36:	78e3      	ldrb	r3, [r4, #3]
   27c38:	2207      	movs	r2, #7
   27c3a:	b943      	cbnz	r3, 27c4e <bt_conn_is_peer_addr_le+0x32>
   27c3c:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   27c40:	4628      	mov	r0, r5
   27c42:	f7ff fb5b 	bl	272fc <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   27c46:	fab0 f080 	clz	r0, r0
   27c4a:	0940      	lsrs	r0, r0, #5
}
   27c4c:	bd38      	pop	{r3, r4, r5, pc}
   27c4e:	f104 0197 	add.w	r1, r4, #151	; 0x97
   27c52:	e7f5      	b.n	27c40 <bt_conn_is_peer_addr_le+0x24>
		return false;
   27c54:	2000      	movs	r0, #0
   27c56:	e7f9      	b.n	27c4c <bt_conn_is_peer_addr_le+0x30>
		return true;
   27c58:	2001      	movs	r0, #1
   27c5a:	e7f7      	b.n	27c4c <bt_conn_is_peer_addr_le+0x30>

00027c5c <bt_conn_get_dst>:
}
   27c5c:	3090      	adds	r0, #144	; 0x90
   27c5e:	4770      	bx	lr

00027c60 <bt_conn_le_conn_update>:
{
   27c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27c62:	4607      	mov	r7, r0
   27c64:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   27c66:	f242 0013 	movw	r0, #8211	; 0x2013
   27c6a:	210e      	movs	r1, #14
   27c6c:	f7f0 fbe6 	bl	1843c <bt_hci_cmd_create>
	if (!buf) {
   27c70:	4606      	mov	r6, r0
   27c72:	b1d0      	cbz	r0, 27caa <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   27c74:	210e      	movs	r1, #14
   27c76:	3008      	adds	r0, #8
   27c78:	f7f5 fbb4 	bl	1d3e4 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   27c7c:	220e      	movs	r2, #14
   27c7e:	4604      	mov	r4, r0
   27c80:	2100      	movs	r1, #0
   27c82:	f7ff fb6f 	bl	27364 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   27c86:	883b      	ldrh	r3, [r7, #0]
   27c88:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   27c8a:	882b      	ldrh	r3, [r5, #0]
   27c8c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   27c8e:	886b      	ldrh	r3, [r5, #2]
   27c90:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   27c92:	88ab      	ldrh	r3, [r5, #4]
   27c94:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27c96:	88eb      	ldrh	r3, [r5, #6]
   27c98:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27c9a:	4631      	mov	r1, r6
   27c9c:	2200      	movs	r2, #0
}
   27c9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27ca2:	f242 0013 	movw	r0, #8211	; 0x2013
   27ca6:	f7f0 bc11 	b.w	184cc <bt_hci_cmd_send_sync>
}
   27caa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027cb0 <l2cap_connected>:
}
   27cb0:	4770      	bx	lr

00027cb2 <l2cap_disconnected>:
   27cb2:	4770      	bx	lr

00027cb4 <bt_l2cap_chan_del>:
{
   27cb4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   27cb6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   27cba:	4604      	mov	r4, r0
	if (!chan->conn) {
   27cbc:	b123      	cbz	r3, 27cc8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   27cbe:	686b      	ldr	r3, [r5, #4]
   27cc0:	b103      	cbz	r3, 27cc4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   27cc2:	4798      	blx	r3
	chan->conn = NULL;
   27cc4:	2300      	movs	r3, #0
   27cc6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27cc8:	68e3      	ldr	r3, [r4, #12]
   27cca:	b10b      	cbz	r3, 27cd0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27ccc:	4620      	mov	r0, r4
   27cce:	4798      	blx	r3
	if (ops->released) {
   27cd0:	69eb      	ldr	r3, [r5, #28]
   27cd2:	b11b      	cbz	r3, 27cdc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   27cd4:	4620      	mov	r0, r4
}
   27cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   27cda:	4718      	bx	r3
}
   27cdc:	bd70      	pop	{r4, r5, r6, pc}

00027cde <bt_l2cap_disconnected>:
	return list->head;
   27cde:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   27ce0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27ce2:	b160      	cbz	r0, 27cfe <bt_l2cap_disconnected+0x20>
	return node->next;
   27ce4:	f850 4908 	ldr.w	r4, [r0], #-8
   27ce8:	b104      	cbz	r4, 27cec <bt_l2cap_disconnected+0xe>
   27cea:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   27cec:	f7ff ffe2 	bl	27cb4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27cf0:	b12c      	cbz	r4, 27cfe <bt_l2cap_disconnected+0x20>
   27cf2:	68a3      	ldr	r3, [r4, #8]
   27cf4:	b103      	cbz	r3, 27cf8 <bt_l2cap_disconnected+0x1a>
   27cf6:	3b08      	subs	r3, #8
{
   27cf8:	4620      	mov	r0, r4
   27cfa:	461c      	mov	r4, r3
   27cfc:	e7f6      	b.n	27cec <bt_l2cap_disconnected+0xe>
}
   27cfe:	bd10      	pop	{r4, pc}

00027d00 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   27d00:	3104      	adds	r1, #4
   27d02:	f7f2 bc6f 	b.w	1a5e4 <bt_conn_create_pdu_timeout>

00027d06 <bt_l2cap_send_cb>:
{
   27d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27d0a:	4614      	mov	r4, r2
   27d0c:	4605      	mov	r5, r0
   27d0e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   27d10:	f102 0008 	add.w	r0, r2, #8
   27d14:	2104      	movs	r1, #4
   27d16:	461e      	mov	r6, r3
   27d18:	f8dd 8018 	ldr.w	r8, [sp, #24]
   27d1c:	f7f5 fb0a 	bl	1d334 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27d20:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   27d22:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27d24:	3a04      	subs	r2, #4
   27d26:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27d28:	4643      	mov	r3, r8
   27d2a:	4632      	mov	r2, r6
   27d2c:	4621      	mov	r1, r4
   27d2e:	4628      	mov	r0, r5
}
   27d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27d34:	f7f2 ba94 	b.w	1a260 <bt_conn_send_cb>

00027d38 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   27d38:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27d3a:	b130      	cbz	r0, 27d4a <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27d3c:	8983      	ldrh	r3, [r0, #12]
   27d3e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27d40:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27d44:	d001      	beq.n	27d4a <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   27d46:	6880      	ldr	r0, [r0, #8]
   27d48:	e7f7      	b.n	27d3a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   27d4a:	4770      	bx	lr

00027d4c <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   27d4c:	4770      	bx	lr

00027d4e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   27d4e:	4603      	mov	r3, r0
	return list->head;
   27d50:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27d52:	b128      	cbz	r0, 27d60 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27d54:	6859      	ldr	r1, [r3, #4]
	return node->next;
   27d56:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27d58:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27d5a:	4288      	cmp	r0, r1
	list->tail = node;
   27d5c:	bf08      	it	eq
   27d5e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   27d60:	4770      	bx	lr

00027d62 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   27d62:	4603      	mov	r3, r0
	size_t bytes = 0;
   27d64:	2000      	movs	r0, #0

	while (buf) {
   27d66:	b903      	cbnz	r3, 27d6a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   27d68:	4770      	bx	lr
		bytes += buf->len;
   27d6a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   27d6c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   27d6e:	4410      	add	r0, r2
		buf = buf->frags;
   27d70:	e7f9      	b.n	27d66 <net_buf_frags_len+0x4>

00027d72 <attr_read_type_cb>:
{
   27d72:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   27d74:	68d4      	ldr	r4, [r2, #12]
   27d76:	7823      	ldrb	r3, [r4, #0]
   27d78:	3102      	adds	r1, #2
   27d7a:	b913      	cbnz	r3, 27d82 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   27d7c:	7021      	strb	r1, [r4, #0]
	return true;
   27d7e:	2001      	movs	r0, #1
   27d80:	e006      	b.n	27d90 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   27d82:	428b      	cmp	r3, r1
   27d84:	d0fb      	beq.n	27d7e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   27d86:	8983      	ldrh	r3, [r0, #12]
   27d88:	3b02      	subs	r3, #2
   27d8a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   27d8c:	2000      	movs	r0, #0
   27d8e:	6110      	str	r0, [r2, #16]
}
   27d90:	bd10      	pop	{r4, pc}

00027d92 <att_prepare_write_req>:
}
   27d92:	2006      	movs	r0, #6
   27d94:	4770      	bx	lr

00027d96 <att_op_get_type>:
	switch (op) {
   27d96:	2852      	cmp	r0, #82	; 0x52
   27d98:	d830      	bhi.n	27dfc <att_op_get_type+0x66>
   27d9a:	b388      	cbz	r0, 27e00 <att_op_get_type+0x6a>
   27d9c:	1e43      	subs	r3, r0, #1
   27d9e:	2b51      	cmp	r3, #81	; 0x51
   27da0:	d82e      	bhi.n	27e00 <att_op_get_type+0x6a>
   27da2:	e8df f003 	tbb	[pc, r3]
   27da6:	3933      	.short	0x3933
   27da8:	39333933 	.word	0x39333933
   27dac:	39333933 	.word	0x39333933
   27db0:	39333933 	.word	0x39333933
   27db4:	39333933 	.word	0x39333933
   27db8:	392d2d33 	.word	0x392d2d33
   27dbc:	2d333933 	.word	0x2d333933
   27dc0:	29372d35 	.word	0x29372d35
   27dc4:	2d33392d 	.word	0x2d33392d
   27dc8:	2d2d2d35 	.word	0x2d2d2d35
   27dcc:	2d2d2d2d 	.word	0x2d2d2d2d
   27dd0:	2d2d2d2d 	.word	0x2d2d2d2d
   27dd4:	2d2d2d2d 	.word	0x2d2d2d2d
   27dd8:	2d2d2d2d 	.word	0x2d2d2d2d
   27ddc:	2d2d2d2d 	.word	0x2d2d2d2d
   27de0:	2d2d2d2d 	.word	0x2d2d2d2d
   27de4:	2d2d2d2d 	.word	0x2d2d2d2d
   27de8:	2d2d2d2d 	.word	0x2d2d2d2d
   27dec:	2d2d2d2d 	.word	0x2d2d2d2d
   27df0:	2d2d2d2d 	.word	0x2d2d2d2d
   27df4:	3b2d2d2d 	.word	0x3b2d2d2d
   27df8:	2004      	movs	r0, #4
   27dfa:	4770      	bx	lr
   27dfc:	28d2      	cmp	r0, #210	; 0xd2
   27dfe:	d00d      	beq.n	27e1c <att_op_get_type+0x86>
		return ATT_COMMAND;
   27e00:	f010 0f40 	tst.w	r0, #64	; 0x40
   27e04:	bf0c      	ite	eq
   27e06:	2006      	moveq	r0, #6
   27e08:	2000      	movne	r0, #0
   27e0a:	4770      	bx	lr
		return ATT_RESPONSE;
   27e0c:	2002      	movs	r0, #2
   27e0e:	4770      	bx	lr
		return ATT_NOTIFICATION;
   27e10:	2003      	movs	r0, #3
   27e12:	4770      	bx	lr
		return ATT_INDICATION;
   27e14:	2005      	movs	r0, #5
   27e16:	4770      	bx	lr
		return ATT_REQUEST;
   27e18:	2001      	movs	r0, #1
   27e1a:	4770      	bx	lr
		return ATT_COMMAND;
   27e1c:	2000      	movs	r0, #0
}
   27e1e:	4770      	bx	lr

00027e20 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27e20:	f3bf 8f5b 	dmb	ish
   27e24:	6800      	ldr	r0, [r0, #0]
   27e26:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27e2a:	4108      	asrs	r0, r1
}
   27e2c:	f000 0001 	and.w	r0, r0, #1
   27e30:	4770      	bx	lr

00027e32 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   27e32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   27e34:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27e38:	2300      	movs	r3, #0
   27e3a:	9300      	str	r3, [sp, #0]
   27e3c:	461a      	mov	r2, r3
   27e3e:	f7f4 fa81 	bl	1c344 <bt_gatt_foreach_attr_type>
				  user_data);
}
   27e42:	b005      	add	sp, #20
   27e44:	f85d fb04 	ldr.w	pc, [sp], #4

00027e48 <find_info_cb>:
{
   27e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27e4a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   27e4c:	6817      	ldr	r7, [r2, #0]
{
   27e4e:	4605      	mov	r5, r0
   27e50:	460e      	mov	r6, r1
   27e52:	4614      	mov	r4, r2
	if (!data->rsp) {
   27e54:	b963      	cbnz	r3, 27e70 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   27e56:	6850      	ldr	r0, [r2, #4]
   27e58:	2101      	movs	r1, #1
   27e5a:	3008      	adds	r0, #8
   27e5c:	f7f5 fac2 	bl	1d3e4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27e60:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27e62:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27e64:	781b      	ldrb	r3, [r3, #0]
   27e66:	2b00      	cmp	r3, #0
   27e68:	bf0c      	ite	eq
   27e6a:	2301      	moveq	r3, #1
   27e6c:	2302      	movne	r3, #2
   27e6e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27e70:	68a3      	ldr	r3, [r4, #8]
   27e72:	781b      	ldrb	r3, [r3, #0]
   27e74:	2b01      	cmp	r3, #1
   27e76:	d003      	beq.n	27e80 <find_info_cb+0x38>
   27e78:	2b02      	cmp	r3, #2
   27e7a:	d018      	beq.n	27eae <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   27e7c:	2000      	movs	r0, #0
   27e7e:	e015      	b.n	27eac <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27e80:	682b      	ldr	r3, [r5, #0]
   27e82:	781b      	ldrb	r3, [r3, #0]
   27e84:	2b00      	cmp	r3, #0
   27e86:	d1f9      	bne.n	27e7c <find_info_cb+0x34>
   27e88:	6860      	ldr	r0, [r4, #4]
   27e8a:	2104      	movs	r1, #4
   27e8c:	3008      	adds	r0, #8
   27e8e:	f7f5 faa9 	bl	1d3e4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27e92:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27e94:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27e96:	885b      	ldrh	r3, [r3, #2]
   27e98:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27e9a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   27e9c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   27e9e:	899b      	ldrh	r3, [r3, #12]
   27ea0:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   27ea2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   27ea4:	2804      	cmp	r0, #4
   27ea6:	bf94      	ite	ls
   27ea8:	2000      	movls	r0, #0
   27eaa:	2001      	movhi	r0, #1
}
   27eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27eae:	682b      	ldr	r3, [r5, #0]
   27eb0:	781b      	ldrb	r3, [r3, #0]
   27eb2:	2b02      	cmp	r3, #2
   27eb4:	d1e2      	bne.n	27e7c <find_info_cb+0x34>
   27eb6:	6860      	ldr	r0, [r4, #4]
   27eb8:	2112      	movs	r1, #18
   27eba:	3008      	adds	r0, #8
   27ebc:	f7f5 fa92 	bl	1d3e4 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   27ec0:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   27ec2:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   27ec4:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   27ec6:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   27eca:	3101      	adds	r1, #1
   27ecc:	f7ff fa3f 	bl	2734e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   27ed0:	6863      	ldr	r3, [r4, #4]
   27ed2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   27ed4:	899b      	ldrh	r3, [r3, #12]
   27ed6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   27ed8:	2812      	cmp	r0, #18
   27eda:	e7e4      	b.n	27ea6 <find_info_cb+0x5e>

00027edc <att_chan_mtu_updated>:
{
   27edc:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   27ede:	6806      	ldr	r6, [r0, #0]
	return list->head;
   27ee0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27ee2:	b1c3      	cbz	r3, 27f16 <att_chan_mtu_updated+0x3a>
   27ee4:	461a      	mov	r2, r3
	return node->next;
   27ee6:	f852 49f0 	ldr.w	r4, [r2], #-240
   27eea:	b104      	cbz	r4, 27eee <att_chan_mtu_updated+0x12>
   27eec:	3cf0      	subs	r4, #240	; 0xf0
{
   27eee:	2300      	movs	r3, #0
   27ef0:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   27ef2:	4290      	cmp	r0, r2
   27ef4:	d007      	beq.n	27f06 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27ef6:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27ef8:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27efa:	42a9      	cmp	r1, r5
   27efc:	bf38      	it	cc
   27efe:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27f00:	4293      	cmp	r3, r2
   27f02:	bf38      	it	cc
   27f04:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27f06:	b13c      	cbz	r4, 27f18 <att_chan_mtu_updated+0x3c>
   27f08:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   27f0c:	b105      	cbz	r5, 27f10 <att_chan_mtu_updated+0x34>
   27f0e:	3df0      	subs	r5, #240	; 0xf0
{
   27f10:	4622      	mov	r2, r4
   27f12:	462c      	mov	r4, r5
   27f14:	e7ed      	b.n	27ef2 <att_chan_mtu_updated+0x16>
   27f16:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27f18:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   27f1a:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27f1c:	428c      	cmp	r4, r1
   27f1e:	d801      	bhi.n	27f24 <att_chan_mtu_updated+0x48>
   27f20:	429a      	cmp	r2, r3
   27f22:	d909      	bls.n	27f38 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27f24:	429a      	cmp	r2, r3
   27f26:	bf38      	it	cc
   27f28:	461a      	movcc	r2, r3
   27f2a:	42a1      	cmp	r1, r4
   27f2c:	6830      	ldr	r0, [r6, #0]
   27f2e:	bf38      	it	cc
   27f30:	4621      	movcc	r1, r4
}
   27f32:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27f34:	f7f4 be60 	b.w	1cbf8 <bt_gatt_att_max_mtu_changed>
}
   27f38:	bc70      	pop	{r4, r5, r6}
   27f3a:	4770      	bx	lr

00027f3c <attr_read_group_cb>:
	if (!data->rsp->len) {
   27f3c:	68d0      	ldr	r0, [r2, #12]
   27f3e:	7803      	ldrb	r3, [r0, #0]
   27f40:	3104      	adds	r1, #4
   27f42:	b913      	cbnz	r3, 27f4a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   27f44:	7001      	strb	r1, [r0, #0]
	return true;
   27f46:	2001      	movs	r0, #1
}
   27f48:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   27f4a:	428b      	cmp	r3, r1
   27f4c:	d0fb      	beq.n	27f46 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   27f4e:	6891      	ldr	r1, [r2, #8]
   27f50:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   27f52:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   27f54:	3b04      	subs	r3, #4
   27f56:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   27f58:	6110      	str	r0, [r2, #16]
		return false;
   27f5a:	4770      	bx	lr

00027f5c <write_cb>:
{
   27f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27f5e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   27f60:	4601      	mov	r1, r0
{
   27f62:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   27f64:	f44f 7295 	mov.w	r2, #298	; 0x12a
   27f68:	6820      	ldr	r0, [r4, #0]
   27f6a:	f000 fdac 	bl	28ac6 <bt_gatt_check_perm>
   27f6e:	4605      	mov	r5, r0
   27f70:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   27f72:	bb20      	cbnz	r0, 27fbe <write_cb+0x62>
	if (!data->req) {
   27f74:	7a23      	ldrb	r3, [r4, #8]
   27f76:	b1ab      	cbz	r3, 27fa4 <write_cb+0x48>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   27f78:	2b18      	cmp	r3, #24
   27f7a:	bf14      	ite	ne
   27f7c:	2300      	movne	r3, #0
   27f7e:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   27f80:	9301      	str	r3, [sp, #4]
   27f82:	8a63      	ldrh	r3, [r4, #18]
   27f84:	9300      	str	r3, [sp, #0]
   27f86:	68b7      	ldr	r7, [r6, #8]
   27f88:	8a23      	ldrh	r3, [r4, #16]
   27f8a:	68e2      	ldr	r2, [r4, #12]
   27f8c:	6820      	ldr	r0, [r4, #0]
   27f8e:	4631      	mov	r1, r6
   27f90:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   27f92:	1e03      	subs	r3, r0, #0
   27f94:	db08      	blt.n	27fa8 <write_cb+0x4c>
   27f96:	8a22      	ldrh	r2, [r4, #16]
   27f98:	4293      	cmp	r3, r2
   27f9a:	d10e      	bne.n	27fba <write_cb+0x5e>
	data->err = 0U;
   27f9c:	2300      	movs	r3, #0
   27f9e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27fa0:	2501      	movs	r5, #1
   27fa2:	e007      	b.n	27fb4 <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   27fa4:	2302      	movs	r3, #2
   27fa6:	e7eb      	b.n	27f80 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   27fa8:	f113 0fff 	cmn.w	r3, #255	; 0xff
   27fac:	d305      	bcc.n	27fba <write_cb+0x5e>
		return -err;
   27fae:	425b      	negs	r3, r3
   27fb0:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   27fb2:	7523      	strb	r3, [r4, #20]
}
   27fb4:	4628      	mov	r0, r5
   27fb6:	b003      	add	sp, #12
   27fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   27fba:	230e      	movs	r3, #14
   27fbc:	e7f9      	b.n	27fb2 <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   27fbe:	2500      	movs	r5, #0
   27fc0:	e7f8      	b.n	27fb4 <write_cb+0x58>

00027fc2 <att_chan_read>:
{
   27fc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fc6:	4680      	mov	r8, r0
   27fc8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27fca:	4610      	mov	r0, r2
{
   27fcc:	4699      	mov	r9, r3
   27fce:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27fd0:	f7ff fec7 	bl	27d62 <net_buf_frags_len>
   27fd4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   27fd8:	4283      	cmp	r3, r0
{
   27fda:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27fdc:	d97a      	bls.n	280d4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   27fde:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27fe2:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   27fe4:	4630      	mov	r0, r6
   27fe6:	f7f5 f943 	bl	1d270 <net_buf_frag_last>
	size_t len, total = 0;
   27fea:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   27fee:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27ff0:	4630      	mov	r0, r6
   27ff2:	f7ff feb6 	bl	27d62 <net_buf_frags_len>
   27ff6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   27ffa:	f105 0708 	add.w	r7, r5, #8
   27ffe:	1a24      	subs	r4, r4, r0
   28000:	4638      	mov	r0, r7
   28002:	f000 fe12 	bl	28c2a <net_buf_simple_tailroom>
   28006:	4284      	cmp	r4, r0
   28008:	d211      	bcs.n	2802e <att_chan_read+0x6c>
   2800a:	4630      	mov	r0, r6
   2800c:	f7ff fea9 	bl	27d62 <net_buf_frags_len>
   28010:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28014:	1a24      	subs	r4, r4, r0
		if (!len) {
   28016:	bb34      	cbnz	r4, 28066 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   28018:	79b0      	ldrb	r0, [r6, #6]
   2801a:	f7f4 fe3b 	bl	1cc94 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2801e:	2200      	movs	r2, #0
   28020:	2300      	movs	r3, #0
   28022:	f000 fdf1 	bl	28c08 <net_buf_alloc_fixed>
			if (!frag) {
   28026:	4605      	mov	r5, r0
   28028:	b930      	cbnz	r0, 28038 <att_chan_read+0x76>
	return total;
   2802a:	4657      	mov	r7, sl
   2802c:	e02c      	b.n	28088 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2802e:	4638      	mov	r0, r7
   28030:	f000 fdfb 	bl	28c2a <net_buf_simple_tailroom>
   28034:	4604      	mov	r4, r0
   28036:	e7ee      	b.n	28016 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   28038:	4601      	mov	r1, r0
   2803a:	4630      	mov	r0, r6
   2803c:	f7f5 f958 	bl	1d2f0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28040:	4630      	mov	r0, r6
   28042:	f7ff fe8e 	bl	27d62 <net_buf_frags_len>
   28046:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2804a:	f105 0708 	add.w	r7, r5, #8
   2804e:	1a24      	subs	r4, r4, r0
   28050:	4638      	mov	r0, r7
   28052:	f000 fdea 	bl	28c2a <net_buf_simple_tailroom>
   28056:	4284      	cmp	r4, r0
   28058:	d21a      	bcs.n	28090 <att_chan_read+0xce>
   2805a:	4630      	mov	r0, r6
   2805c:	f7ff fe81 	bl	27d62 <net_buf_frags_len>
   28060:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28064:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   28066:	68a9      	ldr	r1, [r5, #8]
   28068:	89aa      	ldrh	r2, [r5, #12]
   2806a:	f8db 7004 	ldr.w	r7, [fp, #4]
   2806e:	9803      	ldr	r0, [sp, #12]
   28070:	f8cd 9000 	str.w	r9, [sp]
   28074:	440a      	add	r2, r1
   28076:	b2a3      	uxth	r3, r4
   28078:	4659      	mov	r1, fp
   2807a:	47b8      	blx	r7
		if (read < 0) {
   2807c:	1e07      	subs	r7, r0, #0
   2807e:	da0c      	bge.n	2809a <att_chan_read+0xd8>
				return total;
   28080:	f1ba 0f00 	cmp.w	sl, #0
   28084:	bf18      	it	ne
   28086:	4657      	movne	r7, sl
}
   28088:	4638      	mov	r0, r7
   2808a:	b005      	add	sp, #20
   2808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28090:	4638      	mov	r0, r7
   28092:	f000 fdca 	bl	28c2a <net_buf_simple_tailroom>
   28096:	4604      	mov	r4, r0
   28098:	e7e5      	b.n	28066 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2809a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2809c:	b993      	cbnz	r3, 280c4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2809e:	4639      	mov	r1, r7
   280a0:	f105 0008 	add.w	r0, r5, #8
   280a4:	f7f5 f99e 	bl	1d3e4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   280a8:	4630      	mov	r0, r6
   280aa:	f7ff fe5a 	bl	27d62 <net_buf_frags_len>
   280ae:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   280b2:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   280b4:	4283      	cmp	r3, r0
		total += read;
   280b6:	44ba      	add	sl, r7
		offset += read;
   280b8:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   280bc:	d9b5      	bls.n	2802a <att_chan_read+0x68>
   280be:	42a7      	cmp	r7, r4
   280c0:	d096      	beq.n	27ff0 <att_chan_read+0x2e>
   280c2:	e7b2      	b.n	2802a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   280c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   280c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   280c8:	4639      	mov	r1, r7
   280ca:	4628      	mov	r0, r5
   280cc:	4798      	blx	r3
   280ce:	2800      	cmp	r0, #0
   280d0:	d1e5      	bne.n	2809e <att_chan_read+0xdc>
   280d2:	e7aa      	b.n	2802a <att_chan_read+0x68>
		return 0;
   280d4:	2700      	movs	r7, #0
   280d6:	e7d7      	b.n	28088 <att_chan_read+0xc6>

000280d8 <process_queue>:
{
   280d8:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   280da:	2200      	movs	r2, #0
{
   280dc:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   280de:	2300      	movs	r3, #0
   280e0:	4608      	mov	r0, r1
{
   280e2:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   280e4:	f7f4 ff18 	bl	1cf18 <net_buf_get>
	if (buf) {
   280e8:	4605      	mov	r5, r0
   280ea:	b158      	cbz	r0, 28104 <process_queue+0x2c>
	return chan_send(chan, buf);
   280ec:	4601      	mov	r1, r0
   280ee:	4620      	mov	r0, r4
   280f0:	f7f3 f804 	bl	1b0fc <chan_send>
		if (err) {
   280f4:	4604      	mov	r4, r0
   280f6:	b118      	cbz	r0, 28100 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   280f8:	4629      	mov	r1, r5
   280fa:	4630      	mov	r0, r6
   280fc:	f001 f974 	bl	293e8 <k_queue_prepend>
}
   28100:	4620      	mov	r0, r4
   28102:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   28104:	f06f 0401 	mvn.w	r4, #1
   28108:	e7fa      	b.n	28100 <process_queue+0x28>

0002810a <bt_att_chan_send_rsp>:
{
   2810a:	b538      	push	{r3, r4, r5, lr}
   2810c:	4604      	mov	r4, r0
   2810e:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   28110:	f7f2 fff4 	bl	1b0fc <chan_send>
	if (err) {
   28114:	b130      	cbz	r0, 28124 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   28116:	4629      	mov	r1, r5
   28118:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2811c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   28120:	f7f5 b81c 	b.w	1d15c <net_buf_put>
}
   28124:	bd38      	pop	{r3, r4, r5, pc}

00028126 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28126:	b510      	push	{r4, lr}
	return list->head;
   28128:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2812a:	2200      	movs	r2, #0
   2812c:	b153      	cbz	r3, 28144 <sys_slist_find_and_remove.isra.0+0x1e>
   2812e:	428b      	cmp	r3, r1
   28130:	d10e      	bne.n	28150 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   28132:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   28134:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28136:	b932      	cbnz	r2, 28146 <sys_slist_find_and_remove.isra.0+0x20>
   28138:	42a1      	cmp	r1, r4
	list->head = node;
   2813a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2813c:	d100      	bne.n	28140 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2813e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   28140:	2300      	movs	r3, #0
   28142:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28144:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   28146:	42a1      	cmp	r1, r4
	parent->next = child;
   28148:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2814a:	bf08      	it	eq
   2814c:	6042      	streq	r2, [r0, #4]
}
   2814e:	e7f7      	b.n	28140 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   28150:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28152:	681b      	ldr	r3, [r3, #0]
   28154:	e7ea      	b.n	2812c <sys_slist_find_and_remove.isra.0+0x6>

00028156 <att_exec_write_req>:
   28156:	2006      	movs	r0, #6
   28158:	4770      	bx	lr

0002815a <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2815a:	2301      	movs	r3, #1
   2815c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28160:	f3bf 8f5b 	dmb	ish
   28164:	e850 3f00 	ldrex	r3, [r0]
   28168:	ea43 0201 	orr.w	r2, r3, r1
   2816c:	e840 2c00 	strex	ip, r2, [r0]
   28170:	f1bc 0f00 	cmp.w	ip, #0
   28174:	d1f6      	bne.n	28164 <atomic_test_and_set_bit+0xa>
   28176:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2817a:	4219      	tst	r1, r3
}
   2817c:	bf14      	ite	ne
   2817e:	2001      	movne	r0, #1
   28180:	2000      	moveq	r0, #0
   28182:	4770      	bx	lr

00028184 <read_cb>:
{
   28184:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   28188:	f8d2 8000 	ldr.w	r8, [r2]
{
   2818c:	4606      	mov	r6, r0
	data->err = 0x00;
   2818e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   28190:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   28194:	7317      	strb	r7, [r2, #12]
{
   28196:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28198:	4631      	mov	r1, r6
   2819a:	2295      	movs	r2, #149	; 0x95
   2819c:	f000 fc93 	bl	28ac6 <bt_gatt_check_perm>
   281a0:	4604      	mov	r4, r0
   281a2:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   281a4:	b9a0      	cbnz	r0, 281d0 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   281a6:	e9cd 0000 	strd	r0, r0, [sp]
   281aa:	88ab      	ldrh	r3, [r5, #4]
   281ac:	68aa      	ldr	r2, [r5, #8]
   281ae:	4631      	mov	r1, r6
   281b0:	4640      	mov	r0, r8
   281b2:	f7ff ff06 	bl	27fc2 <att_chan_read>
	if (ret < 0) {
   281b6:	1e03      	subs	r3, r0, #0
   281b8:	da0c      	bge.n	281d4 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   281ba:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   281be:	bf26      	itte	cs
   281c0:	425b      	negcs	r3, r3
   281c2:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   281c4:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   281c6:	732b      	strb	r3, [r5, #12]
}
   281c8:	4620      	mov	r0, r4
   281ca:	b002      	add	sp, #8
   281cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   281d0:	463c      	mov	r4, r7
   281d2:	e7f9      	b.n	281c8 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   281d4:	2401      	movs	r4, #1
   281d6:	e7f7      	b.n	281c8 <read_cb+0x44>

000281d8 <read_vl_cb>:
{
   281d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   281dc:	f8d2 8000 	ldr.w	r8, [r2]
{
   281e0:	4606      	mov	r6, r0
	data->err = 0x00;
   281e2:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   281e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   281e8:	7317      	strb	r7, [r2, #12]
{
   281ea:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   281ec:	4631      	mov	r1, r6
   281ee:	2295      	movs	r2, #149	; 0x95
   281f0:	f000 fc69 	bl	28ac6 <bt_gatt_check_perm>
   281f4:	4604      	mov	r4, r0
   281f6:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   281f8:	bb18      	cbnz	r0, 28242 <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   281fa:	68a8      	ldr	r0, [r5, #8]
   281fc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   28200:	8982      	ldrh	r2, [r0, #12]
   28202:	1a9b      	subs	r3, r3, r2
   28204:	2b01      	cmp	r3, #1
   28206:	dd15      	ble.n	28234 <read_vl_cb+0x5c>
   28208:	2102      	movs	r1, #2
   2820a:	3008      	adds	r0, #8
   2820c:	f7f5 f8ea 	bl	1d3e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28210:	88ab      	ldrh	r3, [r5, #4]
   28212:	68aa      	ldr	r2, [r5, #8]
   28214:	e9cd 4400 	strd	r4, r4, [sp]
   28218:	4607      	mov	r7, r0
   2821a:	4631      	mov	r1, r6
   2821c:	4640      	mov	r0, r8
   2821e:	f7ff fed0 	bl	27fc2 <att_chan_read>
	if (read < 0) {
   28222:	1e03      	subs	r3, r0, #0
   28224:	da0a      	bge.n	2823c <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   28226:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2822a:	bf26      	itte	cs
   2822c:	425b      	negcs	r3, r3
   2822e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   28230:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   28232:	732b      	strb	r3, [r5, #12]
}
   28234:	4620      	mov	r0, r4
   28236:	b002      	add	sp, #8
   28238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2823c:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2823e:	2401      	movs	r4, #1
   28240:	e7f8      	b.n	28234 <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   28242:	463c      	mov	r4, r7
   28244:	e7f6      	b.n	28234 <read_vl_cb+0x5c>

00028246 <bt_att_sent>:
{
   28246:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2824a:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2824c:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2824e:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   28252:	f850 6c04 	ldr.w	r6, [r0, #-4]
   28256:	f3bf 8f5b 	dmb	ish
   2825a:	e853 2f00 	ldrex	r2, [r3]
   2825e:	f022 0210 	bic.w	r2, r2, #16
   28262:	e843 2100 	strex	r1, r2, [r3]
   28266:	2900      	cmp	r1, #0
   28268:	d1f7      	bne.n	2825a <bt_att_sent+0x14>
   2826a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2826e:	b3a6      	cbz	r6, 282da <bt_att_sent+0x94>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   28270:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
   28274:	f1b8 0f00 	cmp.w	r8, #0
   28278:	d113      	bne.n	282a2 <bt_att_sent+0x5c>
   2827a:	6873      	ldr	r3, [r6, #4]
   2827c:	b18b      	cbz	r3, 282a2 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2827e:	1d30      	adds	r0, r6, #4
   28280:	f7ff fd65 	bl	27d4e <sys_slist_get>
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28284:	f8d0 9008 	ldr.w	r9, [r0, #8]
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28288:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2828a:	4648      	mov	r0, r9
   2828c:	f7ff fd69 	bl	27d62 <net_buf_frags_len>
   28290:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   28292:	4283      	cmp	r3, r0
   28294:	d212      	bcs.n	282bc <bt_att_sent+0x76>
	parent->next = child;
   28296:	6873      	ldr	r3, [r6, #4]
   28298:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2829a:	68b3      	ldr	r3, [r6, #8]
	list->head = node;
   2829c:	6075      	str	r5, [r6, #4]
Z_GENLIST_PREPEND(slist, snode)
   2829e:	b903      	cbnz	r3, 282a2 <bt_att_sent+0x5c>
	list->tail = node;
   282a0:	60b5      	str	r5, [r6, #8]
	err = process_queue(chan, &chan->tx_queue);
   282a2:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   282a6:	4638      	mov	r0, r7
   282a8:	f7ff ff16 	bl	280d8 <process_queue>
	if (!err) {
   282ac:	b1a8      	cbz	r0, 282da <bt_att_sent+0x94>
	(void)process_queue(chan, &att->tx_queue);
   282ae:	f106 010c 	add.w	r1, r6, #12
   282b2:	4638      	mov	r0, r7
}
   282b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	(void)process_queue(chan, &att->tx_queue);
   282b8:	f7ff bf0e 	b.w	280d8 <process_queue>
	chan->req = req;
   282bc:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	return chan_send(chan, buf);
   282c0:	4649      	mov	r1, r9
	req->buf = NULL;
   282c2:	f8c5 8008 	str.w	r8, [r5, #8]
	return chan_send(chan, buf);
   282c6:	4638      	mov	r0, r7
   282c8:	f7f2 ff18 	bl	1b0fc <chan_send>
	if (err) {
   282cc:	2800      	cmp	r0, #0
   282ce:	d004      	beq.n	282da <bt_att_sent+0x94>
		req->buf = buf;
   282d0:	f8c5 9008 	str.w	r9, [r5, #8]
		chan->req = NULL;
   282d4:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   282d8:	dbdd      	blt.n	28296 <bt_att_sent+0x50>
}
   282da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000282de <att_req_send_process>:
{
   282de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   282e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
   282e4:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   282e6:	2c00      	cmp	r4, #0
   282e8:	d03b      	beq.n	28362 <att_req_send_process+0x84>
	return node->next;
   282ea:	f854 59f0 	ldr.w	r5, [r4], #-240
   282ee:	b105      	cbz	r5, 282f2 <att_req_send_process+0x14>
   282f0:	3df0      	subs	r5, #240	; 0xf0
{
   282f2:	2300      	movs	r3, #0
   282f4:	461e      	mov	r6, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   282f6:	f108 0704 	add.w	r7, r8, #4
		if (chan->req) {
   282fa:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   282fe:	b9e2      	cbnz	r2, 2833a <att_req_send_process+0x5c>
		if (!req && prev &&
   28300:	b16e      	cbz	r6, 2831e <att_req_send_process+0x40>
	sys_snode_t *node = sys_slist_get(reqs);
   28302:	4638      	mov	r0, r7
   28304:	f7ff fd23 	bl	27d4e <sys_slist_get>
	if (node) {
   28308:	4606      	mov	r6, r0
   2830a:	b9c0      	cbnz	r0, 2833e <att_req_send_process+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2830c:	b34d      	cbz	r5, 28362 <att_req_send_process+0x84>
   2830e:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
   28312:	b102      	cbz	r2, 28316 <att_req_send_process+0x38>
   28314:	3af0      	subs	r2, #240	; 0xf0
{
   28316:	4623      	mov	r3, r4
   28318:	462c      	mov	r4, r5
   2831a:	4615      	mov	r5, r2
   2831c:	e7ed      	b.n	282fa <att_req_send_process+0x1c>
		if (!req && prev &&
   2831e:	2b00      	cmp	r3, #0
   28320:	d0ef      	beq.n	28302 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   28322:	2103      	movs	r1, #3
   28324:	f104 0098 	add.w	r0, r4, #152	; 0x98
   28328:	f7ff fd7a 	bl	27e20 <atomic_test_bit>
   2832c:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2832e:	f103 0098 	add.w	r0, r3, #152	; 0x98
   28332:	f7ff fd75 	bl	27e20 <atomic_test_bit>
		if (!req && prev &&
   28336:	4282      	cmp	r2, r0
   28338:	d1e3      	bne.n	28302 <att_req_send_process+0x24>
   2833a:	461c      	mov	r4, r3
   2833c:	e7e6      	b.n	2830c <att_req_send_process+0x2e>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2833e:	4601      	mov	r1, r0
   28340:	4620      	mov	r0, r4
   28342:	f7f2 ff3f 	bl	1b1c4 <bt_att_chan_req_send>
   28346:	2800      	cmp	r0, #0
   28348:	da0b      	bge.n	28362 <att_req_send_process+0x84>
	parent->next = child;
   2834a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2834e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   28350:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   28354:	f8c8 6004 	str.w	r6, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   28358:	2b00      	cmp	r3, #0
   2835a:	d1d7      	bne.n	2830c <att_req_send_process+0x2e>
	list->tail = node;
   2835c:	f8c8 6008 	str.w	r6, [r8, #8]
}
   28360:	e7d4      	b.n	2830c <att_req_send_process+0x2e>
}
   28362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028366 <bt_att_status>:
{
   28366:	b538      	push	{r3, r4, r5, lr}
   28368:	4605      	mov	r5, r0
   2836a:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2836c:	2100      	movs	r1, #0
   2836e:	f7ff fd57 	bl	27e20 <atomic_test_bit>
   28372:	b1c0      	cbz	r0, 283a6 <bt_att_status+0x40>
	if (!chan->att) {
   28374:	f855 0c04 	ldr.w	r0, [r5, #-4]
   28378:	b1a8      	cbz	r0, 283a6 <bt_att_status+0x40>
	if (chan->req) {
   2837a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2837e:	b993      	cbnz	r3, 283a6 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   28380:	3004      	adds	r0, #4
   28382:	f7ff fce4 	bl	27d4e <sys_slist_get>
	if (!node) {
   28386:	4604      	mov	r4, r0
   28388:	b168      	cbz	r0, 283a6 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2838a:	4601      	mov	r1, r0
   2838c:	1f28      	subs	r0, r5, #4
   2838e:	f7f2 ff19 	bl	1b1c4 <bt_att_chan_req_send>
   28392:	2800      	cmp	r0, #0
   28394:	da07      	bge.n	283a6 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   28396:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   2839a:	685a      	ldr	r2, [r3, #4]
   2839c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2839e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   283a0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   283a2:	b902      	cbnz	r2, 283a6 <bt_att_status+0x40>
	list->tail = node;
   283a4:	609c      	str	r4, [r3, #8]
}
   283a6:	bd38      	pop	{r3, r4, r5, pc}

000283a8 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   283a8:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   283aa:	6883      	ldr	r3, [r0, #8]
   283ac:	695b      	ldr	r3, [r3, #20]
   283ae:	b10b      	cbz	r3, 283b4 <att_sent+0xc>
		chan->ops->sent(chan);
   283b0:	3004      	adds	r0, #4
   283b2:	4718      	bx	r3
}
   283b4:	4770      	bx	lr

000283b6 <att_unknown>:
{
   283b6:	b510      	push	{r4, lr}
   283b8:	460c      	mov	r4, r1
	if (!err) {
   283ba:	b90a      	cbnz	r2, 283c0 <att_unknown+0xa>
		att_sent(conn, user_data);
   283bc:	f7ff fff4 	bl	283a8 <att_sent>
	tx_meta_data_free(user_data);
   283c0:	4620      	mov	r0, r4
}
   283c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   283c6:	f7f2 bd5f 	b.w	1ae88 <tx_meta_data_free>

000283ca <att_tx_complete>:
{
   283ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   283ce:	4606      	mov	r6, r0
   283d0:	460d      	mov	r5, r1
	if (!err) {
   283d2:	4614      	mov	r4, r2
   283d4:	b90a      	cbnz	r2, 283da <att_tx_complete+0x10>
		att_sent(conn, user_data);
   283d6:	f7ff ffe7 	bl	283a8 <att_sent>
	tx_meta_data_free(data);
   283da:	4628      	mov	r0, r5
	bt_gatt_complete_func_t func = data->func;
   283dc:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   283de:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   283e2:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   283e6:	f7f2 fd4f 	bl	1ae88 <tx_meta_data_free>
	if (!err && func) {
   283ea:	b904      	cbnz	r4, 283ee <att_tx_complete+0x24>
   283ec:	b92f      	cbnz	r7, 283fa <att_tx_complete+0x30>
}
   283ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   283f2:	4649      	mov	r1, r9
   283f4:	4630      	mov	r0, r6
   283f6:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   283f8:	3401      	adds	r4, #1
   283fa:	b2a3      	uxth	r3, r4
   283fc:	4598      	cmp	r8, r3
   283fe:	d8f8      	bhi.n	283f2 <att_tx_complete+0x28>
   28400:	e7f5      	b.n	283ee <att_tx_complete+0x24>

00028402 <att_req_sent>:
{
   28402:	b510      	push	{r4, lr}
   28404:	460c      	mov	r4, r1
	if (!err) {
   28406:	b90a      	cbnz	r2, 2840c <att_req_sent+0xa>
		att_sent(conn, user_data);
   28408:	f7ff ffce 	bl	283a8 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2840c:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2840e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   28412:	b12b      	cbz	r3, 28420 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   28414:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28418:	2300      	movs	r3, #0
   2841a:	30c0      	adds	r0, #192	; 0xc0
   2841c:	f7f9 fc10 	bl	21c40 <k_work_reschedule>
	tx_meta_data_free(user_data);
   28420:	4620      	mov	r0, r4
}
   28422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   28426:	f7f2 bd2f 	b.w	1ae88 <tx_meta_data_free>

0002842a <att_cfm_sent>:
{
   2842a:	b510      	push	{r4, lr}
   2842c:	460c      	mov	r4, r1
	if (!err) {
   2842e:	b90a      	cbnz	r2, 28434 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   28430:	f7ff ffba 	bl	283a8 <att_sent>
   28434:	6823      	ldr	r3, [r4, #0]
   28436:	f3bf 8f5b 	dmb	ish
   2843a:	3398      	adds	r3, #152	; 0x98
   2843c:	e853 2f00 	ldrex	r2, [r3]
   28440:	f022 0202 	bic.w	r2, r2, #2
   28444:	e843 2100 	strex	r1, r2, [r3]
   28448:	2900      	cmp	r1, #0
   2844a:	d1f7      	bne.n	2843c <att_cfm_sent+0x12>
   2844c:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   28450:	4620      	mov	r0, r4
}
   28452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   28456:	f7f2 bd17 	b.w	1ae88 <tx_meta_data_free>

0002845a <att_rsp_sent>:
{
   2845a:	b510      	push	{r4, lr}
   2845c:	460c      	mov	r4, r1
	if (!err) {
   2845e:	b90a      	cbnz	r2, 28464 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   28460:	f7ff ffa2 	bl	283a8 <att_sent>
   28464:	6823      	ldr	r3, [r4, #0]
   28466:	f3bf 8f5b 	dmb	ish
   2846a:	3398      	adds	r3, #152	; 0x98
   2846c:	e853 2f00 	ldrex	r2, [r3]
   28470:	f022 0201 	bic.w	r2, r2, #1
   28474:	e843 2100 	strex	r1, r2, [r3]
   28478:	2900      	cmp	r1, #0
   2847a:	d1f7      	bne.n	2846c <att_rsp_sent+0x12>
   2847c:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   28480:	4620      	mov	r0, r4
}
   28482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   28486:	f7f2 bcff 	b.w	1ae88 <tx_meta_data_free>

0002848a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2848a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2848e:	4688      	mov	r8, r1
   28490:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   28492:	2101      	movs	r1, #1
   28494:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   28496:	4605      	mov	r5, r0
   28498:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2849a:	f7f2 ffa5 	bl	1b3e8 <bt_att_chan_create_pdu>
	if (!buf) {
   2849e:	4604      	mov	r4, r0
   284a0:	b170      	cbz	r0, 284c0 <send_err_rsp.part.0+0x36>
   284a2:	2104      	movs	r1, #4
   284a4:	3008      	adds	r0, #8
   284a6:	f7f4 ff9d 	bl	1d3e4 <net_buf_simple_add>
	rsp->request = req;
   284aa:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   284ae:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   284b0:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   284b4:	4621      	mov	r1, r4
   284b6:	4628      	mov	r0, r5
}
   284b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   284bc:	f7ff be25 	b.w	2810a <bt_att_chan_send_rsp>
}
   284c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000284c4 <att_write_req>:
{
   284c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   284c6:	460c      	mov	r4, r1
   284c8:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   284ca:	f101 0008 	add.w	r0, r1, #8
   284ce:	f000 fba0 	bl	28c12 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   284d2:	89a2      	ldrh	r2, [r4, #12]
   284d4:	9201      	str	r2, [sp, #4]
   284d6:	68a2      	ldr	r2, [r4, #8]
   284d8:	9200      	str	r2, [sp, #0]
   284da:	4603      	mov	r3, r0
   284dc:	2213      	movs	r2, #19
   284de:	2112      	movs	r1, #18
   284e0:	4628      	mov	r0, r5
   284e2:	f7f3 f847 	bl	1b574 <att_write_rsp.constprop.0>
}
   284e6:	b003      	add	sp, #12
   284e8:	bd30      	pop	{r4, r5, pc}

000284ea <att_write_cmd>:
{
   284ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   284ec:	460c      	mov	r4, r1
   284ee:	4605      	mov	r5, r0
   284f0:	f101 0008 	add.w	r0, r1, #8
   284f4:	f000 fb8d 	bl	28c12 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   284f8:	89a2      	ldrh	r2, [r4, #12]
   284fa:	9201      	str	r2, [sp, #4]
   284fc:	68a2      	ldr	r2, [r4, #8]
   284fe:	9200      	str	r2, [sp, #0]
   28500:	2200      	movs	r2, #0
   28502:	4603      	mov	r3, r0
   28504:	4611      	mov	r1, r2
   28506:	4628      	mov	r0, r5
   28508:	f7f3 f834 	bl	1b574 <att_write_rsp.constprop.0>
}
   2850c:	b003      	add	sp, #12
   2850e:	bd30      	pop	{r4, r5, pc}

00028510 <att_read_blob_req>:
{
   28510:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   28512:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   28514:	8813      	ldrh	r3, [r2, #0]
   28516:	8852      	ldrh	r2, [r2, #2]
   28518:	9200      	str	r2, [sp, #0]
   2851a:	210c      	movs	r1, #12
   2851c:	220d      	movs	r2, #13
   2851e:	f7f3 f9ed 	bl	1b8fc <att_read_rsp>
}
   28522:	b003      	add	sp, #12
   28524:	f85d fb04 	ldr.w	pc, [sp], #4

00028528 <att_read_req>:
{
   28528:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2852a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2852c:	2200      	movs	r2, #0
   2852e:	881b      	ldrh	r3, [r3, #0]
   28530:	9200      	str	r2, [sp, #0]
   28532:	210a      	movs	r1, #10
   28534:	220b      	movs	r2, #11
   28536:	f7f3 f9e1 	bl	1b8fc <att_read_rsp>
}
   2853a:	b003      	add	sp, #12
   2853c:	f85d fb04 	ldr.w	pc, [sp], #4

00028540 <att_mtu_req>:
{
   28540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28542:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   28544:	f850 2b98 	ldr.w	r2, [r0], #152
{
   28548:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2854a:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2854c:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2854e:	f7ff fc67 	bl	27e20 <atomic_test_bit>
   28552:	4604      	mov	r4, r0
   28554:	b9d8      	cbnz	r0, 2858e <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   28556:	689b      	ldr	r3, [r3, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   28558:	881b      	ldrh	r3, [r3, #0]
   2855a:	2b16      	cmp	r3, #22
   2855c:	d919      	bls.n	28592 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2855e:	4630      	mov	r0, r6
   28560:	2202      	movs	r2, #2
   28562:	f7f3 f873 	bl	1b64c <bt_att_create_pdu>
	if (!pdu) {
   28566:	4606      	mov	r6, r0
   28568:	b1a8      	cbz	r0, 28596 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   2856a:	2102      	movs	r1, #2
   2856c:	3008      	adds	r0, #8
   2856e:	f7f4 ff39 	bl	1d3e4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   28572:	2717      	movs	r7, #23
   28574:	7007      	strb	r7, [r0, #0]
   28576:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   28578:	4631      	mov	r1, r6
   2857a:	4628      	mov	r0, r5
   2857c:	f7ff fdc5 	bl	2810a <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   28580:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   28582:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   28584:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   28586:	f7ff fca9 	bl	27edc <att_chan_mtu_updated>
	return 0;
   2858a:	4620      	mov	r0, r4
}
   2858c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2858e:	2006      	movs	r0, #6
   28590:	e7fc      	b.n	2858c <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   28592:	2004      	movs	r0, #4
   28594:	e7fa      	b.n	2858c <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   28596:	200e      	movs	r0, #14
   28598:	e7f8      	b.n	2858c <att_mtu_req+0x4c>

0002859a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2859a:	898a      	ldrh	r2, [r1, #12]
   2859c:	6889      	ldr	r1, [r1, #8]
   2859e:	2300      	movs	r3, #0
   285a0:	f7f3 bb62 	b.w	1bc68 <att_handle_rsp>

000285a4 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   285a4:	2001      	movs	r0, #1
   285a6:	4770      	bx	lr

000285a8 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   285a8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   285aa:	f7f2 fc31 	bl	1ae10 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   285ae:	b198      	cbz	r0, 285d8 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   285b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   285b2:	b18b      	cbz	r3, 285d8 <bt_att_clear_out_of_sync_sent+0x30>
   285b4:	f3bf 8f5b 	dmb	ish
   285b8:	3bf0      	subs	r3, #240	; 0xf0
   285ba:	f103 0298 	add.w	r2, r3, #152	; 0x98
   285be:	e852 1f00 	ldrex	r1, [r2]
   285c2:	f021 0120 	bic.w	r1, r1, #32
   285c6:	e842 1000 	strex	r0, r1, [r2]
   285ca:	2800      	cmp	r0, #0
   285cc:	d1f7      	bne.n	285be <bt_att_clear_out_of_sync_sent+0x16>
   285ce:	f3bf 8f5b 	dmb	ish
	return node->next;
   285d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   285d6:	e7ec      	b.n	285b2 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   285d8:	bd08      	pop	{r3, pc}

000285da <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   285da:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   285dc:	2104      	movs	r1, #4
   285de:	f7ff fbab 	bl	27d38 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   285e2:	b128      	cbz	r0, 285f0 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   285e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   285e8:	2105      	movs	r1, #5
   285ea:	3094      	adds	r0, #148	; 0x94
   285ec:	f7ff bc18 	b.w	27e20 <atomic_test_bit>
}
   285f0:	bd08      	pop	{r3, pc}

000285f2 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   285f2:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   285f4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   285f8:	2201      	movs	r2, #1
   285fa:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   285fc:	7403      	strb	r3, [r0, #16]
}
   285fe:	4770      	bx	lr

00028600 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   28600:	6010      	str	r0, [r2, #0]
}
   28602:	2000      	movs	r0, #0
   28604:	4770      	bx	lr

00028606 <gatt_ccc_changed>:
{
   28606:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   28608:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2860a:	895a      	ldrh	r2, [r3, #10]
   2860c:	428a      	cmp	r2, r1
   2860e:	d003      	beq.n	28618 <gatt_ccc_changed+0x12>
		ccc->value = value;
   28610:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   28612:	68db      	ldr	r3, [r3, #12]
   28614:	b103      	cbz	r3, 28618 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   28616:	4718      	bx	r3
}
   28618:	4770      	bx	lr

0002861a <gatt_indicate_rsp>:
{
   2861a:	b510      	push	{r4, lr}
   2861c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2861e:	68a3      	ldr	r3, [r4, #8]
{
   28620:	460a      	mov	r2, r1
	if (params->func) {
   28622:	b10b      	cbz	r3, 28628 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   28624:	4621      	mov	r1, r4
   28626:	4798      	blx	r3
	params->_ref--;
   28628:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2862a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2862c:	3b01      	subs	r3, #1
   2862e:	b2db      	uxtb	r3, r3
   28630:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   28632:	b122      	cbz	r2, 2863e <gatt_indicate_rsp+0x24>
   28634:	b91b      	cbnz	r3, 2863e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   28636:	4620      	mov	r0, r4
}
   28638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2863c:	4710      	bx	r2
}
   2863e:	bd10      	pop	{r4, pc}

00028640 <match_uuid>:
	data->attr = attr;
   28640:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   28642:	8091      	strh	r1, [r2, #4]
}
   28644:	2000      	movs	r0, #0
   28646:	4770      	bx	lr

00028648 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   28648:	2207      	movs	r2, #7
   2864a:	f7fe be80 	b.w	2734e <memcpy>

0002864e <write_name>:
{
   2864e:	b570      	push	{r4, r5, r6, lr}
   28650:	b088      	sub	sp, #32
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28652:	2100      	movs	r1, #0
{
   28654:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28658:	9101      	str	r1, [sp, #4]
{
   2865a:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2865c:	a802      	add	r0, sp, #8
   2865e:	2218      	movs	r2, #24
{
   28660:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28662:	f7fe fe7f 	bl	27364 <memset>
	if (offset >= sizeof(value)) {
   28666:	2d1b      	cmp	r5, #27
   28668:	d80d      	bhi.n	28686 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   2866a:	4425      	add	r5, r4
   2866c:	2d1b      	cmp	r5, #27
   2866e:	dc0d      	bgt.n	2868c <write_name+0x3e>
	memcpy(value, buf, len);
   28670:	4622      	mov	r2, r4
   28672:	4631      	mov	r1, r6
   28674:	a801      	add	r0, sp, #4
   28676:	f7fe fe6a 	bl	2734e <memcpy>
	bt_set_name(value);
   2867a:	a801      	add	r0, sp, #4
   2867c:	f7f0 fcec 	bl	19058 <bt_set_name>
}
   28680:	4620      	mov	r0, r4
   28682:	b008      	add	sp, #32
   28684:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28686:	f06f 0406 	mvn.w	r4, #6
   2868a:	e7f9      	b.n	28680 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2868c:	f06f 040c 	mvn.w	r4, #12
   28690:	e7f6      	b.n	28680 <write_name+0x32>

00028692 <gen_hash_m>:
{
   28692:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28694:	6807      	ldr	r7, [r0, #0]
   28696:	783d      	ldrb	r5, [r7, #0]
{
   28698:	b089      	sub	sp, #36	; 0x24
   2869a:	4606      	mov	r6, r0
   2869c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2869e:	b10d      	cbz	r5, 286a4 <gen_hash_m+0x12>
	switch (u16->val) {
   286a0:	2501      	movs	r5, #1
   286a2:	e014      	b.n	286ce <gen_hash_m+0x3c>
   286a4:	887b      	ldrh	r3, [r7, #2]
   286a6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   286aa:	d004      	beq.n	286b6 <gen_hash_m+0x24>
   286ac:	d812      	bhi.n	286d4 <gen_hash_m+0x42>
   286ae:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   286b2:	2b03      	cmp	r3, #3
   286b4:	d8f4      	bhi.n	286a0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   286b6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   286ba:	2202      	movs	r2, #2
   286bc:	f10d 010a 	add.w	r1, sp, #10
   286c0:	4620      	mov	r0, r4
   286c2:	f7fe fd30 	bl	27126 <tc_cmac_update>
   286c6:	b9e0      	cbnz	r0, 28702 <gen_hash_m+0x70>
			state->err = -EINVAL;
   286c8:	f06f 0315 	mvn.w	r3, #21
   286cc:	65a3      	str	r3, [r4, #88]	; 0x58
}
   286ce:	4628      	mov	r0, r5
   286d0:	b009      	add	sp, #36	; 0x24
   286d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   286d4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   286d8:	33ff      	adds	r3, #255	; 0xff
   286da:	b29b      	uxth	r3, r3
   286dc:	2b04      	cmp	r3, #4
   286de:	d8df      	bhi.n	286a0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   286e0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   286e4:	2202      	movs	r2, #2
   286e6:	f10d 010a 	add.w	r1, sp, #10
   286ea:	4620      	mov	r0, r4
   286ec:	f7fe fd1b 	bl	27126 <tc_cmac_update>
   286f0:	2800      	cmp	r0, #0
   286f2:	d0e9      	beq.n	286c8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   286f4:	887b      	ldrh	r3, [r7, #2]
   286f6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   286fa:	2202      	movs	r2, #2
   286fc:	f10d 010a 	add.w	r1, sp, #10
   28700:	e016      	b.n	28730 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   28702:	887b      	ldrh	r3, [r7, #2]
   28704:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28708:	2202      	movs	r2, #2
   2870a:	f10d 010a 	add.w	r1, sp, #10
   2870e:	4620      	mov	r0, r4
   28710:	f7fe fd09 	bl	27126 <tc_cmac_update>
   28714:	2800      	cmp	r0, #0
   28716:	d0d7      	beq.n	286c8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   28718:	2000      	movs	r0, #0
   2871a:	aa03      	add	r2, sp, #12
   2871c:	6877      	ldr	r7, [r6, #4]
   2871e:	9000      	str	r0, [sp, #0]
   28720:	2313      	movs	r3, #19
   28722:	4631      	mov	r1, r6
   28724:	47b8      	blx	r7
		if (len < 0) {
   28726:	1e02      	subs	r2, r0, #0
   28728:	da01      	bge.n	2872e <gen_hash_m+0x9c>
			state->err = len;
   2872a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2872c:	e7cf      	b.n	286ce <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2872e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28730:	4620      	mov	r0, r4
   28732:	f7fe fcf8 	bl	27126 <tc_cmac_update>
   28736:	2800      	cmp	r0, #0
   28738:	d1b2      	bne.n	286a0 <gen_hash_m+0xe>
   2873a:	e7c5      	b.n	286c8 <gen_hash_m+0x36>

0002873c <clear_cf_cfg>:
{
   2873c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2873e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   28740:	2500      	movs	r5, #0
   28742:	4669      	mov	r1, sp
   28744:	3001      	adds	r0, #1
   28746:	9500      	str	r5, [sp, #0]
   28748:	f8cd 5003 	str.w	r5, [sp, #3]
   2874c:	f7ff ff7c 	bl	28648 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   28750:	f104 0008 	add.w	r0, r4, #8
   28754:	2201      	movs	r2, #1
   28756:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28758:	340c      	adds	r4, #12
   2875a:	f7fe fe03 	bl	27364 <memset>
   2875e:	f3bf 8f5b 	dmb	ish
   28762:	e854 3f00 	ldrex	r3, [r4]
   28766:	e844 5200 	strex	r2, r5, [r4]
   2876a:	2a00      	cmp	r2, #0
   2876c:	d1f9      	bne.n	28762 <clear_cf_cfg+0x26>
   2876e:	f3bf 8f5b 	dmb	ish
}
   28772:	b003      	add	sp, #12
   28774:	bd30      	pop	{r4, r5, pc}

00028776 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28776:	2301      	movs	r3, #1
   28778:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2877a:	f3bf 8f5b 	dmb	ish
   2877e:	e850 2f00 	ldrex	r2, [r0]
   28782:	431a      	orrs	r2, r3
   28784:	e840 2100 	strex	r1, r2, [r0]
   28788:	2900      	cmp	r1, #0
   2878a:	d1f8      	bne.n	2877e <atomic_set_bit+0x8>
   2878c:	f3bf 8f5b 	dmb	ish
}
   28790:	4770      	bx	lr

00028792 <read_ppcp>:
{
   28792:	b513      	push	{r0, r1, r4, lr}
   28794:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   28796:	2218      	movs	r2, #24
{
   28798:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2879c:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   287a0:	2228      	movs	r2, #40	; 0x28
   287a2:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   287a6:	2200      	movs	r2, #0
   287a8:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   287ac:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   287ae:	f04f 022a 	mov.w	r2, #42	; 0x2a
   287b2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   287b6:	d80b      	bhi.n	287d0 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   287b8:	f1c1 0408 	rsb	r4, r1, #8
   287bc:	429c      	cmp	r4, r3
   287be:	bfa8      	it	ge
   287c0:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   287c2:	4622      	mov	r2, r4
   287c4:	4469      	add	r1, sp
   287c6:	f7fe fdc2 	bl	2734e <memcpy>
}
   287ca:	4620      	mov	r0, r4
   287cc:	b002      	add	sp, #8
   287ce:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   287d0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   287d4:	e7f9      	b.n	287ca <read_ppcp+0x38>

000287d6 <read_appearance>:
{
   287d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   287d8:	4615      	mov	r5, r2
   287da:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   287de:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   287e0:	f7fe ff14 	bl	2760c <bt_get_appearance>
	if (offset > value_len) {
   287e4:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   287e6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   287ea:	d80e      	bhi.n	2880a <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   287ec:	f1c6 0402 	rsb	r4, r6, #2
   287f0:	42bc      	cmp	r4, r7
   287f2:	bfa8      	it	ge
   287f4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   287f6:	f10d 0306 	add.w	r3, sp, #6
   287fa:	4622      	mov	r2, r4
   287fc:	1999      	adds	r1, r3, r6
   287fe:	4628      	mov	r0, r5
   28800:	f7fe fda5 	bl	2734e <memcpy>
}
   28804:	4620      	mov	r0, r4
   28806:	b003      	add	sp, #12
   28808:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2880a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2880e:	e7f9      	b.n	28804 <read_appearance+0x2e>

00028810 <read_name>:
{
   28810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28814:	4698      	mov	r8, r3
   28816:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2881a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2881c:	f7f0 fcce 	bl	191bc <bt_get_name>
   28820:	4607      	mov	r7, r0
				 strlen(name));
   28822:	f7fe fd4f 	bl	272c4 <strlen>
	if (offset > value_len) {
   28826:	b283      	uxth	r3, r0
   28828:	42b3      	cmp	r3, r6
   2882a:	d30c      	bcc.n	28846 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2882c:	1b9c      	subs	r4, r3, r6
   2882e:	4544      	cmp	r4, r8
   28830:	bfa8      	it	ge
   28832:	4644      	movge	r4, r8
   28834:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   28836:	4622      	mov	r2, r4
   28838:	19b9      	adds	r1, r7, r6
   2883a:	4628      	mov	r0, r5
   2883c:	f7fe fd87 	bl	2734e <memcpy>
}
   28840:	4620      	mov	r0, r4
   28842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28846:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2884a:	e7f9      	b.n	28840 <read_name+0x30>

0002884c <cf_read>:
{
   2884c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2884e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   28850:	2300      	movs	r3, #0
{
   28852:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   28856:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2885a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2885c:	f7f3 fb44 	bl	1bee8 <find_cf_cfg>
	if (cfg) {
   28860:	b128      	cbz	r0, 2886e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   28862:	f100 0108 	add.w	r1, r0, #8
   28866:	2201      	movs	r2, #1
   28868:	a801      	add	r0, sp, #4
   2886a:	f7fe fd70 	bl	2734e <memcpy>
	if (offset > value_len) {
   2886e:	2e01      	cmp	r6, #1
   28870:	d80d      	bhi.n	2888e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   28872:	f1c6 0401 	rsb	r4, r6, #1
   28876:	42bc      	cmp	r4, r7
   28878:	bfa8      	it	ge
   2887a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2887c:	ab01      	add	r3, sp, #4
   2887e:	4622      	mov	r2, r4
   28880:	1999      	adds	r1, r3, r6
   28882:	4628      	mov	r0, r5
   28884:	f7fe fd63 	bl	2734e <memcpy>
}
   28888:	4620      	mov	r0, r4
   2888a:	b003      	add	sp, #12
   2888c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2888e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   28892:	e7f9      	b.n	28888 <cf_read+0x3c>

00028894 <bt_gatt_attr_read_service>:
{
   28894:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   28896:	68c9      	ldr	r1, [r1, #12]
{
   28898:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2889c:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2889e:	780b      	ldrb	r3, [r1, #0]
{
   288a0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   288a2:	b993      	cbnz	r3, 288ca <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   288a4:	884b      	ldrh	r3, [r1, #2]
   288a6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   288aa:	2d02      	cmp	r5, #2
   288ac:	d819      	bhi.n	288e2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   288ae:	f1c5 0202 	rsb	r2, r5, #2
   288b2:	4294      	cmp	r4, r2
   288b4:	bfa8      	it	ge
   288b6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   288b8:	f10d 0306 	add.w	r3, sp, #6
   288bc:	4622      	mov	r2, r4
   288be:	1959      	adds	r1, r3, r5
   288c0:	f7fe fd45 	bl	2734e <memcpy>
}
   288c4:	4620      	mov	r0, r4
   288c6:	b003      	add	sp, #12
   288c8:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   288ca:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   288cc:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   288d0:	d807      	bhi.n	288e2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   288d2:	f1c5 0210 	rsb	r2, r5, #16
   288d6:	4294      	cmp	r4, r2
   288d8:	bfa8      	it	ge
   288da:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   288dc:	4622      	mov	r2, r4
   288de:	4429      	add	r1, r5
   288e0:	e7ee      	b.n	288c0 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   288e2:	f06f 0406 	mvn.w	r4, #6
   288e6:	e7ed      	b.n	288c4 <bt_gatt_attr_read_service+0x30>

000288e8 <find_ccc_cfg>:
{
   288e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   288ea:	460c      	mov	r4, r1
						    &cfg->peer)) {
   288ec:	1c4d      	adds	r5, r1, #1
		if (conn) {
   288ee:	b148      	cbz	r0, 28904 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   288f0:	7809      	ldrb	r1, [r1, #0]
   288f2:	462a      	mov	r2, r5
   288f4:	f7ff f992 	bl	27c1c <bt_conn_is_peer_addr_le>
	return NULL;
   288f8:	2800      	cmp	r0, #0
   288fa:	bf08      	it	eq
   288fc:	2400      	moveq	r4, #0
}
   288fe:	4620      	mov	r0, r4
   28900:	b003      	add	sp, #12
   28902:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   28904:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   28906:	2207      	movs	r2, #7
   28908:	f8cd 0003 	str.w	r0, [sp, #3]
   2890c:	4669      	mov	r1, sp
   2890e:	4628      	mov	r0, r5
   28910:	f7fe fcf4 	bl	272fc <memcmp>
	return NULL;
   28914:	2800      	cmp	r0, #0
   28916:	bf18      	it	ne
   28918:	2400      	movne	r4, #0
   2891a:	e7f0      	b.n	288fe <find_ccc_cfg+0x16>

0002891c <bt_gatt_attr_read_ccc>:
{
   2891c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2891e:	68c9      	ldr	r1, [r1, #12]
{
   28920:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28924:	4615      	mov	r5, r2
   28926:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   28928:	f7ff ffde 	bl	288e8 <find_ccc_cfg>
	if (cfg) {
   2892c:	b100      	cbz	r0, 28930 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2892e:	8900      	ldrh	r0, [r0, #8]
   28930:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28934:	2e02      	cmp	r6, #2
   28936:	d80e      	bhi.n	28956 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   28938:	f1c6 0402 	rsb	r4, r6, #2
   2893c:	42bc      	cmp	r4, r7
   2893e:	bfa8      	it	ge
   28940:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28942:	f10d 0306 	add.w	r3, sp, #6
   28946:	4622      	mov	r2, r4
   28948:	1999      	adds	r1, r3, r6
   2894a:	4628      	mov	r0, r5
   2894c:	f7fe fcff 	bl	2734e <memcpy>
}
   28950:	4620      	mov	r0, r4
   28952:	b003      	add	sp, #12
   28954:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28956:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2895a:	e7f9      	b.n	28950 <bt_gatt_attr_read_ccc+0x34>

0002895c <sc_clear>:
{
   2895c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2895e:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   28962:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28964:	4631      	mov	r1, r6
   28966:	7a00      	ldrb	r0, [r0, #8]
   28968:	f7fe fe53 	bl	27612 <bt_addr_le_is_bonded>
   2896c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2896e:	4631      	mov	r1, r6
   28970:	f7f3 fb80 	bl	1c074 <find_sc_cfg>
	if (!cfg) {
   28974:	b128      	cbz	r0, 28982 <sc_clear+0x26>
}
   28976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   2897a:	220c      	movs	r2, #12
   2897c:	2100      	movs	r1, #0
   2897e:	f7fe bcf1 	b.w	27364 <memset>
}
   28982:	bd70      	pop	{r4, r5, r6, pc}

00028984 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   28984:	2a02      	cmp	r2, #2
{
   28986:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28988:	d108      	bne.n	2899c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2898a:	2300      	movs	r3, #0
   2898c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   28990:	461a      	mov	r2, r3
   28992:	7a00      	ldrb	r0, [r0, #8]
   28994:	f7f3 fb7e 	bl	1c094 <sc_save>
}
   28998:	2002      	movs	r0, #2
   2899a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2899c:	f7ff ffde 	bl	2895c <sc_clear>
   289a0:	e7fa      	b.n	28998 <sc_ccc_cfg_write+0x14>

000289a2 <sc_restore_rsp>:
{
   289a2:	b538      	push	{r3, r4, r5, lr}
   289a4:	4604      	mov	r4, r0
   289a6:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   289a8:	f7ff fdfc 	bl	285a4 <bt_att_fixed_chan_only>
   289ac:	b150      	cbz	r0, 289c4 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   289ae:	4620      	mov	r0, r4
   289b0:	f7f3 fa9a 	bl	1bee8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   289b4:	b130      	cbz	r0, 289c4 <sc_restore_rsp+0x22>
   289b6:	7a03      	ldrb	r3, [r0, #8]
   289b8:	07db      	lsls	r3, r3, #31
   289ba:	d503      	bpl.n	289c4 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   289bc:	2100      	movs	r1, #0
   289be:	300c      	adds	r0, #12
   289c0:	f7ff fed9 	bl	28776 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   289c4:	b965      	cbnz	r5, 289e0 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   289c6:	7a20      	ldrb	r0, [r4, #8]
   289c8:	f104 0190 	add.w	r1, r4, #144	; 0x90
   289cc:	f7f3 fb52 	bl	1c074 <find_sc_cfg>
		if (sc_cfg) {
   289d0:	b130      	cbz	r0, 289e0 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   289d2:	4629      	mov	r1, r5
   289d4:	2204      	movs	r2, #4
}
   289d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   289da:	3008      	adds	r0, #8
   289dc:	f7fe bcc2 	b.w	27364 <memset>
}
   289e0:	bd38      	pop	{r3, r4, r5, pc}

000289e2 <bt_gatt_attr_read>:
{
   289e2:	b538      	push	{r3, r4, r5, lr}
   289e4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   289e8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   289ec:	42a9      	cmp	r1, r5
{
   289ee:	4610      	mov	r0, r2
	if (offset > value_len) {
   289f0:	d80b      	bhi.n	28a0a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   289f2:	1a6d      	subs	r5, r5, r1
   289f4:	429d      	cmp	r5, r3
   289f6:	bfa8      	it	ge
   289f8:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   289fa:	9b05      	ldr	r3, [sp, #20]
   289fc:	b2ad      	uxth	r5, r5
   289fe:	462a      	mov	r2, r5
   28a00:	4419      	add	r1, r3
   28a02:	f7fe fca4 	bl	2734e <memcpy>
}
   28a06:	4628      	mov	r0, r5
   28a08:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28a0a:	f06f 0506 	mvn.w	r5, #6
   28a0e:	e7fa      	b.n	28a06 <bt_gatt_attr_read+0x24>

00028a10 <bt_gatt_attr_value_handle>:
{
   28a10:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28a12:	4604      	mov	r4, r0
   28a14:	b910      	cbnz	r0, 28a1c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28a16:	2000      	movs	r0, #0
}
   28a18:	b002      	add	sp, #8
   28a1a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28a1c:	2300      	movs	r3, #0
   28a1e:	f88d 3004 	strb.w	r3, [sp, #4]
   28a22:	6800      	ldr	r0, [r0, #0]
   28a24:	f642 0303 	movw	r3, #10243	; 0x2803
   28a28:	a901      	add	r1, sp, #4
   28a2a:	f8ad 3006 	strh.w	r3, [sp, #6]
   28a2e:	f7fe fcb7 	bl	273a0 <bt_uuid_cmp>
   28a32:	2800      	cmp	r0, #0
   28a34:	d1ef      	bne.n	28a16 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   28a36:	68e3      	ldr	r3, [r4, #12]
   28a38:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   28a3a:	2800      	cmp	r0, #0
   28a3c:	d1ec      	bne.n	28a18 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   28a3e:	4620      	mov	r0, r4
   28a40:	f7f3 fc3c 	bl	1c2bc <bt_gatt_attr_get_handle>
   28a44:	3001      	adds	r0, #1
   28a46:	b280      	uxth	r0, r0
	return handle;
   28a48:	e7e6      	b.n	28a18 <bt_gatt_attr_value_handle+0x8>

00028a4a <bt_gatt_attr_read_chrc>:
{
   28a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   28a4c:	68cf      	ldr	r7, [r1, #12]
{
   28a4e:	b087      	sub	sp, #28
   28a50:	4608      	mov	r0, r1
   28a52:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   28a54:	79bb      	ldrb	r3, [r7, #6]
   28a56:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28a5a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   28a5e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28a60:	f7ff ffd6 	bl	28a10 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28a64:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28a66:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28a6a:	780b      	ldrb	r3, [r1, #0]
   28a6c:	b99b      	cbnz	r3, 28a96 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   28a6e:	884b      	ldrh	r3, [r1, #2]
   28a70:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   28a74:	2105      	movs	r1, #5
	if (offset > value_len) {
   28a76:	42b1      	cmp	r1, r6
   28a78:	d315      	bcc.n	28aa6 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   28a7a:	1b89      	subs	r1, r1, r6
   28a7c:	42a1      	cmp	r1, r4
   28a7e:	bfa8      	it	ge
   28a80:	4621      	movge	r1, r4
   28a82:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   28a84:	ab01      	add	r3, sp, #4
   28a86:	4622      	mov	r2, r4
   28a88:	1999      	adds	r1, r3, r6
   28a8a:	4628      	mov	r0, r5
   28a8c:	f7fe fc5f 	bl	2734e <memcpy>
}
   28a90:	4620      	mov	r0, r4
   28a92:	b007      	add	sp, #28
   28a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   28a96:	3101      	adds	r1, #1
   28a98:	2210      	movs	r2, #16
   28a9a:	f10d 0007 	add.w	r0, sp, #7
   28a9e:	f7fe fc56 	bl	2734e <memcpy>
		value_len += 16U;
   28aa2:	2113      	movs	r1, #19
   28aa4:	e7e7      	b.n	28a76 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28aa6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   28aaa:	e7f1      	b.n	28a90 <bt_gatt_attr_read_chrc+0x46>

00028aac <bt_gatt_foreach_attr>:
{
   28aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28aae:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28ab2:	2300      	movs	r3, #0
   28ab4:	9300      	str	r3, [sp, #0]
   28ab6:	461a      	mov	r2, r3
   28ab8:	f7f3 fc44 	bl	1c344 <bt_gatt_foreach_attr_type>
}
   28abc:	b005      	add	sp, #20
   28abe:	f85d fb04 	ldr.w	pc, [sp], #4

00028ac2 <db_hash_process>:
	db_hash_gen(true);
   28ac2:	f7f3 bcab 	b.w	1c41c <db_hash_gen.constprop.0>

00028ac6 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   28ac6:	07d3      	lsls	r3, r2, #31
{
   28ac8:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28aca:	8a4c      	ldrh	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   28acc:	d504      	bpl.n	28ad8 <bt_gatt_check_perm+0x12>
   28ace:	f014 0f95 	tst.w	r4, #149	; 0x95
   28ad2:	d01c      	beq.n	28b0e <bt_gatt_check_perm+0x48>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28ad4:	684b      	ldr	r3, [r1, #4]
   28ad6:	b1d3      	cbz	r3, 28b0e <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   28ad8:	0793      	lsls	r3, r2, #30
   28ada:	d504      	bpl.n	28ae6 <bt_gatt_check_perm+0x20>
   28adc:	f414 7f95 	tst.w	r4, #298	; 0x12a
   28ae0:	d017      	beq.n	28b12 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28ae2:	688b      	ldr	r3, [r1, #8]
   28ae4:	b1ab      	cbz	r3, 28b12 <bt_gatt_check_perm+0x4c>
	mask &= attr->perm;
   28ae6:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   28ae8:	f414 7fc0 	tst.w	r4, #384	; 0x180
   28aec:	d001      	beq.n	28af2 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   28aee:	2005      	movs	r0, #5
}
   28af0:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28af2:	f014 0f30 	tst.w	r4, #48	; 0x30
   28af6:	d105      	bne.n	28b04 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   28af8:	f014 0f0c 	tst.w	r4, #12
   28afc:	bf0c      	ite	eq
   28afe:	2000      	moveq	r0, #0
   28b00:	200f      	movne	r0, #15
   28b02:	e7f5      	b.n	28af0 <bt_gatt_check_perm+0x2a>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   28b04:	f7ff f888 	bl	27c18 <bt_conn_get_security>
   28b08:	2802      	cmp	r0, #2
   28b0a:	d8f5      	bhi.n	28af8 <bt_gatt_check_perm+0x32>
   28b0c:	e7ef      	b.n	28aee <bt_gatt_check_perm+0x28>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28b0e:	2002      	movs	r0, #2
   28b10:	e7ee      	b.n	28af0 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28b12:	2003      	movs	r0, #3
   28b14:	e7ec      	b.n	28af0 <bt_gatt_check_perm+0x2a>

00028b16 <bt_gatt_change_aware>:
{
   28b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b1a:	4606      	mov	r6, r0
   28b1c:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   28b1e:	f7f3 f9e3 	bl	1bee8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28b22:	b918      	cbnz	r0, 28b2c <bt_gatt_change_aware+0x16>
		return true;
   28b24:	2401      	movs	r4, #1
}
   28b26:	4620      	mov	r0, r4
   28b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28b2c:	7a03      	ldrb	r3, [r0, #8]
   28b2e:	07db      	lsls	r3, r3, #31
   28b30:	d5f8      	bpl.n	28b24 <bt_gatt_change_aware+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28b32:	f3bf 8f5b 	dmb	ish
   28b36:	68c1      	ldr	r1, [r0, #12]
   28b38:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   28b3c:	f011 0801 	ands.w	r8, r1, #1
   28b40:	f100 050c 	add.w	r5, r0, #12
   28b44:	d1ee      	bne.n	28b24 <bt_gatt_change_aware+0xe>
	if (!req) {
   28b46:	b90c      	cbnz	r4, 28b4c <bt_gatt_change_aware+0x36>
		return false;
   28b48:	2400      	movs	r4, #0
   28b4a:	e7ec      	b.n	28b26 <bt_gatt_change_aware+0x10>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28b4c:	f3bf 8f5b 	dmb	ish
   28b50:	e855 3f00 	ldrex	r3, [r5]
   28b54:	f023 0202 	bic.w	r2, r3, #2
   28b58:	e845 2100 	strex	r1, r2, [r5]
   28b5c:	2900      	cmp	r1, #0
   28b5e:	d1f7      	bne.n	28b50 <bt_gatt_change_aware+0x3a>
   28b60:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   28b64:	f013 0702 	ands.w	r7, r3, #2
		bt_att_clear_out_of_sync_sent(conn);
   28b68:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   28b6a:	d006      	beq.n	28b7a <bt_gatt_change_aware+0x64>
		bt_att_clear_out_of_sync_sent(conn);
   28b6c:	f7ff fd1c 	bl	285a8 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28b70:	4641      	mov	r1, r8
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28b72:	4628      	mov	r0, r5
   28b74:	f7ff fdff 	bl	28776 <atomic_set_bit>
		return true;
   28b78:	e7d5      	b.n	28b26 <bt_gatt_change_aware+0x10>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   28b7a:	f7ff fd13 	bl	285a4 <bt_att_fixed_chan_only>
   28b7e:	2800      	cmp	r0, #0
   28b80:	d0e2      	beq.n	28b48 <bt_gatt_change_aware+0x32>
   28b82:	4630      	mov	r0, r6
   28b84:	f7ff fd29 	bl	285da <bt_att_out_of_sync_sent_on_fixed>
   28b88:	4604      	mov	r4, r0
   28b8a:	2800      	cmp	r0, #0
   28b8c:	d0dc      	beq.n	28b48 <bt_gatt_change_aware+0x32>
   28b8e:	f3bf 8f5b 	dmb	ish
   28b92:	e855 3f00 	ldrex	r3, [r5]
   28b96:	f023 0302 	bic.w	r3, r3, #2
   28b9a:	e845 3200 	strex	r2, r3, [r5]
   28b9e:	2a00      	cmp	r2, #0
   28ba0:	d1f7      	bne.n	28b92 <bt_gatt_change_aware+0x7c>
   28ba2:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   28ba6:	4630      	mov	r0, r6
   28ba8:	f7ff fcfe 	bl	285a8 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28bac:	4639      	mov	r1, r7
   28bae:	e7e0      	b.n	28b72 <bt_gatt_change_aware+0x5c>

00028bb0 <bt_smp_recv>:
{
   28bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   28bb2:	2100      	movs	r1, #0
   28bb4:	f04f 32ff 	mov.w	r2, #4294967295
   28bb8:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   28bbc:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   28bbe:	4608      	mov	r0, r1
   28bc0:	f7ff f89e 	bl	27d00 <bt_l2cap_create_pdu_timeout>
   28bc4:	f100 0608 	add.w	r6, r0, #8
   28bc8:	4604      	mov	r4, r0
   28bca:	2101      	movs	r1, #1
   28bcc:	4630      	mov	r0, r6
   28bce:	f7f4 fc09 	bl	1d3e4 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   28bd2:	2505      	movs	r5, #5
   28bd4:	7005      	strb	r5, [r0, #0]
   28bd6:	2101      	movs	r1, #1
   28bd8:	4630      	mov	r0, r6
   28bda:	f7f4 fc03 	bl	1d3e4 <net_buf_simple_add>
   28bde:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   28be0:	7005      	strb	r5, [r0, #0]
   28be2:	4622      	mov	r2, r4
   28be4:	9300      	str	r3, [sp, #0]
   28be6:	2106      	movs	r1, #6
   28be8:	4638      	mov	r0, r7
   28bea:	f7ff f88c 	bl	27d06 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   28bee:	b110      	cbz	r0, 28bf6 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   28bf0:	4620      	mov	r0, r4
   28bf2:	f7f4 fae1 	bl	1d1b8 <net_buf_unref>
}
   28bf6:	2000      	movs	r0, #0
   28bf8:	b003      	add	sp, #12
   28bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028bfc <bt_smp_sign>:
   28bfc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28c00:	4770      	bx	lr

00028c02 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   28c02:	2000      	movs	r0, #0
   28c04:	4770      	bx	lr

00028c06 <fixed_data_unref>:
}
   28c06:	4770      	bx	lr

00028c08 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   28c08:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   28c0a:	6849      	ldr	r1, [r1, #4]
   28c0c:	6809      	ldr	r1, [r1, #0]
   28c0e:	f7f4 b895 	b.w	1cd3c <net_buf_alloc_len>

00028c12 <net_buf_simple_pull_le16>:
{
   28c12:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   28c14:	6803      	ldr	r3, [r0, #0]
   28c16:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   28c18:	2102      	movs	r1, #2
   28c1a:	f7f4 fba9 	bl	1d370 <net_buf_simple_pull>
}
   28c1e:	4620      	mov	r0, r4
   28c20:	bd10      	pop	{r4, pc}

00028c22 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   28c22:	6802      	ldr	r2, [r0, #0]
   28c24:	6880      	ldr	r0, [r0, #8]
}
   28c26:	1a10      	subs	r0, r2, r0
   28c28:	4770      	bx	lr

00028c2a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   28c2a:	8883      	ldrh	r3, [r0, #4]
   28c2c:	88c2      	ldrh	r2, [r0, #6]
   28c2e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   28c30:	6803      	ldr	r3, [r0, #0]
   28c32:	6880      	ldr	r0, [r0, #8]
   28c34:	1a18      	subs	r0, r3, r0
}
   28c36:	1a10      	subs	r0, r2, r0
   28c38:	4770      	bx	lr

00028c3a <net_buf_simple_add_mem>:
{
   28c3a:	b538      	push	{r3, r4, r5, lr}
   28c3c:	460d      	mov	r5, r1
   28c3e:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   28c40:	4611      	mov	r1, r2
   28c42:	f7f4 fbcf 	bl	1d3e4 <net_buf_simple_add>
   28c46:	4622      	mov	r2, r4
   28c48:	4629      	mov	r1, r5
}
   28c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   28c4e:	f7fe bb7e 	b.w	2734e <memcpy>

00028c52 <net_buf_simple_add_u8>:
{
   28c52:	b510      	push	{r4, lr}
   28c54:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   28c56:	2101      	movs	r1, #1
   28c58:	f7f4 fbc4 	bl	1d3e4 <net_buf_simple_add>
	*u8 = val;
   28c5c:	7004      	strb	r4, [r0, #0]
}
   28c5e:	bd10      	pop	{r4, pc}

00028c60 <net_buf_simple_add_le16>:
{
   28c60:	b510      	push	{r4, lr}
   28c62:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   28c64:	2102      	movs	r1, #2
   28c66:	f7f4 fbbd 	bl	1d3e4 <net_buf_simple_add>
	dst[0] = val;
   28c6a:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   28c6c:	0a24      	lsrs	r4, r4, #8
   28c6e:	7044      	strb	r4, [r0, #1]
}
   28c70:	bd10      	pop	{r4, pc}

00028c72 <set_on_state>:
	__asm__ volatile(
   28c72:	f04f 0340 	mov.w	r3, #64	; 0x40
   28c76:	f3ef 8211 	mrs	r2, BASEPRI
   28c7a:	f383 8812 	msr	BASEPRI_MAX, r3
   28c7e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   28c82:	6803      	ldr	r3, [r0, #0]
   28c84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28c88:	f043 0302 	orr.w	r3, r3, #2
   28c8c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   28c8e:	f382 8811 	msr	BASEPRI, r2
   28c92:	f3bf 8f6f 	isb	sy
}
   28c96:	4770      	bx	lr

00028c98 <async_start>:
{
   28c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c9a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   28c9c:	6904      	ldr	r4, [r0, #16]
{
   28c9e:	4605      	mov	r5, r0
   28ca0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   28ca2:	f04f 0040 	mov.w	r0, #64	; 0x40
   28ca6:	f3ef 8c11 	mrs	ip, BASEPRI
   28caa:	f380 8812 	msr	BASEPRI_MAX, r0
   28cae:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28cb2:	260c      	movs	r6, #12
   28cb4:	fb06 4601 	mla	r6, r6, r1, r4
   28cb8:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   28cba:	f000 0e07 	and.w	lr, r0, #7
   28cbe:	f1be 0f01 	cmp.w	lr, #1
   28cc2:	d110      	bne.n	28ce6 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   28cc4:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   28cc6:	2600      	movs	r6, #0
	__asm__ volatile(
   28cc8:	f38c 8811 	msr	BASEPRI, ip
   28ccc:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   28cd0:	b93e      	cbnz	r6, 28ce2 <async_start+0x4a>
	subdata->cb = cb;
   28cd2:	200c      	movs	r0, #12
   28cd4:	4341      	muls	r1, r0
   28cd6:	440c      	add	r4, r1
	subdata->user_data = user_data;
   28cd8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   28cdc:	686b      	ldr	r3, [r5, #4]
   28cde:	585b      	ldr	r3, [r3, r1]
   28ce0:	4798      	blx	r3
}
   28ce2:	4630      	mov	r0, r6
   28ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   28ce6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   28cea:	4287      	cmp	r7, r0
   28cec:	bf14      	ite	ne
   28cee:	f04f 36ff 	movne.w	r6, #4294967295
   28cf2:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   28cf6:	e7e7      	b.n	28cc8 <async_start+0x30>

00028cf8 <api_start>:
{
   28cf8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   28cfa:	2480      	movs	r4, #128	; 0x80
   28cfc:	9400      	str	r4, [sp, #0]
   28cfe:	f7ff ffcb 	bl	28c98 <async_start>
}
   28d02:	b002      	add	sp, #8
   28d04:	bd10      	pop	{r4, pc}

00028d06 <onoff_started_callback>:
	return &data->mgr[type];
   28d06:	6900      	ldr	r0, [r0, #16]
   28d08:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   28d0a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   28d0e:	2100      	movs	r1, #0
   28d10:	4710      	bx	r2

00028d12 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   28d12:	2000      	movs	r0, #0
   28d14:	f7f6 be56 	b.w	1f9c4 <nrfx_clock_start>

00028d18 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   28d18:	2000      	movs	r0, #0
   28d1a:	f7f6 be75 	b.w	1fa08 <nrfx_clock_stop>

00028d1e <api_stop>:
	return stop(dev, subsys, CTX_API);
   28d1e:	2280      	movs	r2, #128	; 0x80
   28d20:	f7f4 bbc6 	b.w	1d4b0 <stop>

00028d24 <blocking_start_callback>:
{
   28d24:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   28d26:	f7f8 bb01 	b.w	2132c <z_impl_k_sem_give>

00028d2a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28d2a:	6843      	ldr	r3, [r0, #4]
   28d2c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   28d2e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   28d32:	600b      	str	r3, [r1, #0]
}
   28d34:	2000      	movs	r0, #0
   28d36:	4770      	bx	lr

00028d38 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28d38:	6843      	ldr	r3, [r0, #4]
   28d3a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   28d3c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   28d40:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   28d44:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   28d48:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   28d4c:	2000      	movs	r0, #0
   28d4e:	4770      	bx	lr

00028d50 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28d50:	6843      	ldr	r3, [r0, #4]
   28d52:	685b      	ldr	r3, [r3, #4]
}
   28d54:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   28d56:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   28d5a:	4770      	bx	lr

00028d5c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28d5c:	6843      	ldr	r3, [r0, #4]
   28d5e:	685b      	ldr	r3, [r3, #4]
}
   28d60:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   28d62:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   28d66:	4770      	bx	lr

00028d68 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28d68:	6843      	ldr	r3, [r0, #4]
   28d6a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   28d6c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   28d70:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   28d74:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   28d76:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   28d7a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   28d7e:	2000      	movs	r0, #0
   28d80:	4770      	bx	lr

00028d82 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   28d82:	6902      	ldr	r2, [r0, #16]
{
   28d84:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   28d86:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   28d8a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   28d8e:	2000      	movs	r0, #0
   28d90:	4770      	bx	lr

00028d92 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   28d92:	6843      	ldr	r3, [r0, #4]
   28d94:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   28d96:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   28d9a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   28d9e:	4770      	bx	lr

00028da0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   28da0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   28da2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   28da4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28da6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   28daa:	b150      	cbz	r0, 28dc2 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   28dac:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28dae:	2000      	movs	r0, #0
   28db0:	7812      	ldrb	r2, [r2, #0]
   28db2:	700a      	strb	r2, [r1, #0]
   28db4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   28db8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28dbc:	2201      	movs	r2, #1
   28dbe:	601a      	str	r2, [r3, #0]
	return 0;
   28dc0:	4770      	bx	lr
		return -1;
   28dc2:	f04f 30ff 	mov.w	r0, #4294967295
}
   28dc6:	4770      	bx	lr

00028dc8 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   28dc8:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   28dca:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28dcc:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28dd0:	b940      	cbnz	r0, 28de4 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   28dd2:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28dd4:	079b      	lsls	r3, r3, #30
   28dd6:	d406      	bmi.n	28de6 <is_tx_ready.isra.0+0x1e>
   28dd8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   28ddc:	3800      	subs	r0, #0
   28dde:	bf18      	it	ne
   28de0:	2001      	movne	r0, #1
   28de2:	4770      	bx	lr
   28de4:	2001      	movs	r0, #1
}
   28de6:	4770      	bx	lr

00028de8 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   28de8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   28dea:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   28dec:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   28df0:	05c9      	lsls	r1, r1, #23
   28df2:	d518      	bpl.n	28e26 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28df4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   28df8:	b1a9      	cbz	r1, 28e26 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   28dfa:	f04f 0040 	mov.w	r0, #64	; 0x40
   28dfe:	f3ef 8111 	mrs	r1, BASEPRI
   28e02:	f380 8812 	msr	BASEPRI_MAX, r0
   28e06:	f3bf 8f6f 	isb	sy
   28e0a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   28e0e:	b130      	cbz	r0, 28e1e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28e10:	2000      	movs	r0, #0
   28e12:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   28e16:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28e1a:	2001      	movs	r0, #1
   28e1c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   28e1e:	f381 8811 	msr	BASEPRI, r1
   28e22:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28e26:	6852      	ldr	r2, [r2, #4]
   28e28:	06d2      	lsls	r2, r2, #27
   28e2a:	d515      	bpl.n	28e58 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   28e2c:	f04f 0140 	mov.w	r1, #64	; 0x40
   28e30:	f3ef 8211 	mrs	r2, BASEPRI
   28e34:	f381 8812 	msr	BASEPRI_MAX, r1
   28e38:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28e3c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   28e40:	b111      	cbz	r1, 28e48 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28e42:	2100      	movs	r1, #0
   28e44:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   28e48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   28e4c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   28e50:	f382 8811 	msr	BASEPRI, r2
   28e54:	f3bf 8f6f 	isb	sy
}
   28e58:	4770      	bx	lr

00028e5a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   28e5a:	b510      	push	{r4, lr}
   28e5c:	2200      	movs	r2, #0
   28e5e:	4604      	mov	r4, r0
   28e60:	2101      	movs	r1, #1
   28e62:	2028      	movs	r0, #40	; 0x28
   28e64:	f7ee f94c 	bl	17100 <z_arm_irq_priority_set>
   28e68:	2028      	movs	r0, #40	; 0x28
   28e6a:	f7ee f917 	bl	1709c <arch_irq_enable>
   28e6e:	4620      	mov	r0, r4
   28e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28e74:	f7f4 bfaa 	b.w	1ddcc <uarte_instance_init.constprop.0>

00028e78 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   28e78:	b510      	push	{r4, lr}
   28e7a:	2200      	movs	r2, #0
   28e7c:	4604      	mov	r4, r0
   28e7e:	2101      	movs	r1, #1
   28e80:	2002      	movs	r0, #2
   28e82:	f7ee f93d 	bl	17100 <z_arm_irq_priority_set>
   28e86:	2002      	movs	r0, #2
   28e88:	f7ee f908 	bl	1709c <arch_irq_enable>
   28e8c:	4620      	mov	r0, r4
   28e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28e92:	f7f4 bf9b 	b.w	1ddcc <uarte_instance_init.constprop.0>

00028e96 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   28e96:	2000      	movs	r0, #0
   28e98:	4770      	bx	lr

00028e9a <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   28e9a:	b538      	push	{r3, r4, r5, lr}
   28e9c:	460c      	mov	r4, r1
   28e9e:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   28ea0:	f7f0 f8ce 	bl	19040 <bt_is_ready>
   28ea4:	b128      	cbz	r0, 28eb2 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   28ea6:	4629      	mov	r1, r5
   28ea8:	4620      	mov	r0, r4
}
   28eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   28eae:	f7ef bb8f 	b.w	185d0 <bt_hci_le_rand>
}
   28eb2:	f06f 000a 	mvn.w	r0, #10
   28eb6:	bd38      	pop	{r3, r4, r5, pc}

00028eb8 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   28eb8:	2200      	movs	r2, #0
{
   28eba:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   28ebc:	4611      	mov	r1, r2
   28ebe:	4610      	mov	r0, r2
   28ec0:	f7fb f8f6 	bl	240b0 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   28ec4:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   28ec6:	bf18      	it	ne
   28ec8:	f06f 0015 	mvnne.w	r0, #21
   28ecc:	bd08      	pop	{r3, pc}

00028ece <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   28ece:	4770      	bx	lr

00028ed0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   28ed0:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   28ed2:	6843      	ldr	r3, [r0, #4]
   28ed4:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   28ed6:	7a03      	ldrb	r3, [r0, #8]
   28ed8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   28edc:	3b01      	subs	r3, #1
   28ede:	00db      	lsls	r3, r3, #3
   28ee0:	6845      	ldr	r5, [r0, #4]
   28ee2:	6814      	ldr	r4, [r2, #0]
   28ee4:	441d      	add	r5, r3
   28ee6:	42ac      	cmp	r4, r5
   28ee8:	d902      	bls.n	28ef0 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   28eea:	f06f 0001 	mvn.w	r0, #1
}
   28eee:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   28ef0:	7965      	ldrb	r5, [r4, #5]
   28ef2:	428d      	cmp	r5, r1
   28ef4:	d002      	beq.n	28efc <pinctrl_lookup_state+0x2c>
		(*state)++;
   28ef6:	3408      	adds	r4, #8
   28ef8:	6014      	str	r4, [r2, #0]
   28efa:	e7f1      	b.n	28ee0 <pinctrl_lookup_state+0x10>
			return 0;
   28efc:	2000      	movs	r0, #0
   28efe:	e7f6      	b.n	28eee <pinctrl_lookup_state+0x1e>

00028f00 <nrf_gpio_pin_clear>:
{
   28f00:	b507      	push	{r0, r1, r2, lr}
   28f02:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28f04:	a801      	add	r0, sp, #4
   28f06:	f7f5 fc43 	bl	1e790 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   28f0a:	9a01      	ldr	r2, [sp, #4]
   28f0c:	2301      	movs	r3, #1
   28f0e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   28f10:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   28f14:	b003      	add	sp, #12
   28f16:	f85d fb04 	ldr.w	pc, [sp], #4

00028f1a <nrf_gpio_pin_set>:
{
   28f1a:	b507      	push	{r0, r1, r2, lr}
   28f1c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28f1e:	a801      	add	r0, sp, #4
   28f20:	f7f5 fc36 	bl	1e790 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28f24:	9a01      	ldr	r2, [sp, #4]
   28f26:	2301      	movs	r3, #1
   28f28:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   28f2a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   28f2e:	b003      	add	sp, #12
   28f30:	f85d fb04 	ldr.w	pc, [sp], #4

00028f34 <nrf_gpio_pin_write>:
    if (value == 0)
   28f34:	b909      	cbnz	r1, 28f3a <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   28f36:	f7ff bfe3 	b.w	28f00 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   28f3a:	f7ff bfee 	b.w	28f1a <nrf_gpio_pin_set>

00028f3e <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   28f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28f40:	461c      	mov	r4, r3
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   28f42:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   28f46:	2b00      	cmp	r3, #0
{
   28f48:	4605      	mov	r5, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   28f4a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28f4e:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   28f50:	bf0b      	itete	eq
   28f52:	4616      	moveq	r6, r2
   28f54:	2601      	movne	r6, #1
   28f56:	460f      	moveq	r7, r1
   28f58:	2700      	movne	r7, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   28f5a:	9301      	str	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   28f5c:	0224      	lsls	r4, r4, #8
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28f5e:	f7f5 fc17 	bl	1e790 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   28f62:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28f64:	f3c5 1281 	ubfx	r2, r5, #6, #2
   28f68:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
   28f6c:	433a      	orrs	r2, r7
    reg->PIN_CNF[pin_number] = cnf;
   28f6e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28f72:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   28f76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   28f7a:	b003      	add	sp, #12
   28f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028f7e <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   28f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28f82:	4616      	mov	r6, r2
   28f84:	4605      	mov	r5, r0
   28f86:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   28f8a:	42af      	cmp	r7, r5
   28f8c:	d102      	bne.n	28f94 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   28f8e:	2000      	movs	r0, #0
}
   28f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28f94:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   28f96:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28f98:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   28f9c:	2b22      	cmp	r3, #34	; 0x22
   28f9e:	f200 8097 	bhi.w	290d0 <pinctrl_configure_pins+0x152>
   28fa2:	e8df f003 	tbb	[pc, r3]
   28fa6:	1e12      	.short	0x1e12
   28fa8:	41302b26 	.word	0x41302b26
   28fac:	9595952b 	.word	0x9595952b
   28fb0:	95554b95 	.word	0x95554b95
   28fb4:	95959595 	.word	0x95959595
   28fb8:	95959595 	.word	0x95959595
   28fbc:	706b665a 	.word	0x706b665a
   28fc0:	75959595 	.word	0x75959595
   28fc4:	8b86817c 	.word	0x8b86817c
   28fc8:	90          	.byte	0x90
   28fc9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   28fca:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   28fce:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   28fd2:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_set(pin_number);
   28fd4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   28fd8:	f7ff ff9f 	bl	28f1a <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   28fdc:	4643      	mov	r3, r8
   28fde:	2201      	movs	r2, #1
   28fe0:	e01c      	b.n	2901c <pinctrl_configure_pins+0x9e>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   28fe2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   28fe6:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   28fea:	4643      	mov	r3, r8
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   28fec:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   28fee:	2100      	movs	r1, #0
   28ff0:	e015      	b.n	2901e <pinctrl_configure_pins+0xa0>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   28ff2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   28ff6:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   28ffa:	e7ea      	b.n	28fd2 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   28ffc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29000:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   29004:	e7f1      	b.n	28fea <pinctrl_configure_pins+0x6c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   29006:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2900a:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2900e:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   29010:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   29014:	f7ff ff74 	bl	28f00 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   29018:	4643      	mov	r3, r8
   2901a:	2200      	movs	r2, #0
   2901c:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2901e:	6828      	ldr	r0, [r5, #0]
   29020:	f7ff ff8d 	bl	28f3e <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   29024:	3504      	adds	r5, #4
   29026:	e7b0      	b.n	28f8a <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   29028:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2902c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   29030:	6828      	ldr	r0, [r5, #0]
   29032:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   29036:	f7ff ff63 	bl	28f00 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2903a:	e7cf      	b.n	28fdc <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   2903c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29040:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
   29044:	f1b8 0f00 	cmp.w	r8, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   29048:	bf14      	ite	ne
   2904a:	4643      	movne	r3, r8
   2904c:	2306      	moveq	r3, #6
   2904e:	e7cd      	b.n	28fec <pinctrl_configure_pins+0x6e>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   29050:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29054:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
   29058:	e7f4      	b.n	29044 <pinctrl_configure_pins+0xc6>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   2905a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2905e:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   29062:	6828      	ldr	r0, [r5, #0]
   29064:	f3c0 3140 	ubfx	r1, r0, #13, #1
   29068:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2906c:	f7ff ff62 	bl	28f34 <nrf_gpio_pin_write>
   29070:	e7b4      	b.n	28fdc <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   29072:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29076:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2907a:	e7f2      	b.n	29062 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   2907c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29080:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   29084:	e7ed      	b.n	29062 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   29086:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2908a:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   2908e:	e7e8      	b.n	29062 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   29090:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29094:	f8c6 4524 	str.w	r4, [r6, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   29098:	4643      	mov	r3, r8
   2909a:	2201      	movs	r2, #1
   2909c:	e7a7      	b.n	28fee <pinctrl_configure_pins+0x70>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   2909e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   290a2:	f8c6 4528 	str.w	r4, [r6, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   290a6:	e7f7      	b.n	29098 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   290a8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   290ac:	f8c6 4530 	str.w	r4, [r6, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   290b0:	e7f2      	b.n	29098 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   290b2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   290b6:	f8c6 4534 	str.w	r4, [r6, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   290ba:	e7ed      	b.n	29098 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   290bc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   290c0:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   290c4:	e7e8      	b.n	29098 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   290c6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   290ca:	f8c6 453c 	str.w	r4, [r6, #1340]	; 0x53c
   290ce:	e7e3      	b.n	29098 <pinctrl_configure_pins+0x11a>
		switch (NRF_GET_FUN(pins[i])) {
   290d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   290d4:	e75c      	b.n	28f90 <pinctrl_configure_pins+0x12>

000290d6 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   290d6:	2101      	movs	r1, #1
   290d8:	f7f5 bcac 	b.w	1ea34 <dk_set_led>

000290dc <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   290dc:	2100      	movs	r1, #0
   290de:	f7f5 bca9 	b.w	1ea34 <dk_set_led>

000290e2 <hci_driver_send>:
{
   290e2:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   290e4:	8983      	ldrh	r3, [r0, #12]
{
   290e6:	4605      	mov	r5, r0
	if (!buf->len) {
   290e8:	b373      	cbz	r3, 29148 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   290ea:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   290ec:	b1a3      	cbz	r3, 29118 <hci_driver_send+0x36>
   290ee:	2b02      	cmp	r3, #2
   290f0:	d12a      	bne.n	29148 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   290f2:	f04f 30ff 	mov.w	r0, #4294967295
   290f6:	f04f 31ff 	mov.w	r1, #4294967295
   290fa:	f7f5 fcbd 	bl	1ea78 <multithreading_lock_acquire>
	if (!errcode) {
   290fe:	4604      	mov	r4, r0
   29100:	b940      	cbnz	r0, 29114 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   29102:	68a8      	ldr	r0, [r5, #8]
   29104:	f7e8 fb8d 	bl	11822 <sdc_hci_data_put>
   29108:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2910a:	f7f5 fcbd 	bl	1ea88 <multithreading_lock_release>
		if (errcode) {
   2910e:	b1b4      	cbz	r4, 2913e <hci_driver_send+0x5c>
			receive_signal_raise();
   29110:	f7f5 fe3a 	bl	1ed88 <receive_signal_raise>
}
   29114:	4620      	mov	r0, r4
   29116:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   29118:	f04f 30ff 	mov.w	r0, #4294967295
   2911c:	f04f 31ff 	mov.w	r1, #4294967295
   29120:	f7f5 fcaa 	bl	1ea78 <multithreading_lock_acquire>
	if (!errcode) {
   29124:	4604      	mov	r4, r0
   29126:	2800      	cmp	r0, #0
   29128:	d1f4      	bne.n	29114 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2912a:	68a8      	ldr	r0, [r5, #8]
   2912c:	f7f5 fede 	bl	1eeec <hci_internal_cmd_put>
   29130:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   29132:	f7f5 fca9 	bl	1ea88 <multithreading_lock_release>
	if (errcode) {
   29136:	2c00      	cmp	r4, #0
   29138:	d1ec      	bne.n	29114 <hci_driver_send+0x32>
	receive_signal_raise();
   2913a:	f7f5 fe25 	bl	1ed88 <receive_signal_raise>
		net_buf_unref(buf);
   2913e:	4628      	mov	r0, r5
   29140:	f7f4 f83a 	bl	1d1b8 <net_buf_unref>
   29144:	2400      	movs	r4, #0
   29146:	e7e5      	b.n	29114 <hci_driver_send+0x32>
	switch (type) {
   29148:	f06f 0415 	mvn.w	r4, #21
   2914c:	e7e2      	b.n	29114 <hci_driver_send+0x32>

0002914e <receive_work_handler>:
	hci_driver_receive_process();
   2914e:	f7f5 be43 	b.w	1edd8 <hci_driver_receive_process>

00029152 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   29152:	2100      	movs	r1, #0
   29154:	f7f6 bb80 	b.w	1f858 <cmd_le_generate_dhkey>

00029158 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   29158:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2915c:	2901      	cmp	r1, #1
   2915e:	d801      	bhi.n	29164 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   29160:	f7f6 bb7a 	b.w	1f858 <cmd_le_generate_dhkey>
}
   29164:	2012      	movs	r0, #18
   29166:	4770      	bx	lr

00029168 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29168:	4668      	mov	r0, sp
   2916a:	f020 0107 	bic.w	r1, r0, #7
   2916e:	468d      	mov	sp, r1
   29170:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   29172:	f7d9 febd 	bl	2ef0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   29176:	f7ed ffef 	bl	17158 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2917a:	f7ee f8d7 	bl	1732c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2917e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29182:	4685      	mov	sp, r0
   29184:	4770      	bx	lr

00029186 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29186:	4668      	mov	r0, sp
   29188:	f020 0107 	bic.w	r1, r0, #7
   2918c:	468d      	mov	sp, r1
   2918e:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   29190:	f7d9 fe24 	bl	2ddc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   29194:	f7ed ffe0 	bl	17158 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29198:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2919c:	4685      	mov	sp, r0
   2919e:	4770      	bx	lr

000291a0 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   291a0:	4668      	mov	r0, sp
   291a2:	f020 0107 	bic.w	r1, r0, #7
   291a6:	468d      	mov	sp, r1
   291a8:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   291aa:	f7d7 fb7f 	bl	8ac <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   291ae:	f7ed ffd3 	bl	17158 <_arch_isr_direct_pm>
   291b2:	f7ee f8bb 	bl	1732c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   291b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   291ba:	4685      	mov	sp, r0
   291bc:	4770      	bx	lr

000291be <nrfx_clock_enable>:
}
   291be:	4770      	bx	lr

000291c0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   291c0:	f7da bb20 	b.w	3804 <MPSL_IRQ_CLOCK_Handler>

000291c4 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   291c4:	f7fa bf1e 	b.w	24004 <nrf_cc3xx_platform_init>

000291c8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   291c8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   291ca:	f7ed fe51 	bl	16e70 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   291ce:	f7ed ff03 	bl	16fd8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   291d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   291d6:	f7fa bf15 	b.w	24004 <nrf_cc3xx_platform_init>

000291da <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   291da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   291de:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   291e2:	f1a0 0308 	sub.w	r3, r0, #8
   291e6:	4258      	negs	r0, r3
   291e8:	4158      	adcs	r0, r3
   291ea:	4770      	bx	lr

000291ec <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   291ec:	4700      	bx	r0

000291ee <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   291ee:	f000 b9b2 	b.w	29556 <z_impl_k_busy_wait>

000291f2 <nrf_gpio_pin_present_check>:
    switch (port)
   291f2:	0943      	lsrs	r3, r0, #5
   291f4:	d00b      	beq.n	2920e <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   291f6:	2b01      	cmp	r3, #1
   291f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   291fc:	bf18      	it	ne
   291fe:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   29200:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   29204:	fa23 f000 	lsr.w	r0, r3, r0
}
   29208:	f000 0001 	and.w	r0, r0, #1
   2920c:	4770      	bx	lr
    switch (port)
   2920e:	f04f 33ff 	mov.w	r3, #4294967295
   29212:	e7f5      	b.n	29200 <nrf_gpio_pin_present_check+0xe>

00029214 <pin_is_task_output>:
{
   29214:	b508      	push	{r3, lr}
   29216:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   29218:	f7f6 fd78 	bl	1fd0c <pin_is_output>
   2921c:	b110      	cbz	r0, 29224 <pin_is_task_output+0x10>
   2921e:	4610      	mov	r0, r2
   29220:	f7f6 fd5e 	bl	1fce0 <pin_in_use_by_te>
}
   29224:	f000 0001 	and.w	r0, r0, #1
   29228:	bd08      	pop	{r3, pc}

0002922a <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2922a:	0080      	lsls	r0, r0, #2
}
   2922c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   29230:	4770      	bx	lr

00029232 <nrf_gpio_reconfigure>:
{
   29232:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29236:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29238:	a801      	add	r0, sp, #4
{
   2923a:	460e      	mov	r6, r1
   2923c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   29240:	4690      	mov	r8, r2
   29242:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29244:	f7f6 fde4 	bl	1fe10 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29248:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2924a:	f1b8 0f00 	cmp.w	r8, #0
   2924e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   29252:	bf14      	ite	ne
   29254:	2302      	movne	r3, #2
   29256:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29258:	2e00      	cmp	r6, #0
   2925a:	bf18      	it	ne
   2925c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29260:	2d00      	cmp	r5, #0
   29262:	bf14      	ite	ne
   29264:	210c      	movne	r1, #12
   29266:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29268:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2926a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2926e:	bf14      	ite	ne
   29270:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   29274:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29276:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29278:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2927c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29280:	bf14      	ite	ne
   29282:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   29286:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29288:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2928a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2928e:	b106      	cbz	r6, 29292 <nrf_gpio_reconfigure+0x60>
   29290:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   29292:	f1b8 0f00 	cmp.w	r8, #0
   29296:	d003      	beq.n	292a0 <nrf_gpio_reconfigure+0x6e>
   29298:	f898 8000 	ldrb.w	r8, [r8]
   2929c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   292a0:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   292a2:	b10d      	cbz	r5, 292a8 <nrf_gpio_reconfigure+0x76>
   292a4:	782d      	ldrb	r5, [r5, #0]
   292a6:	00ad      	lsls	r5, r5, #2
   292a8:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   292ac:	b10c      	cbz	r4, 292b2 <nrf_gpio_reconfigure+0x80>
   292ae:	7822      	ldrb	r2, [r4, #0]
   292b0:	0214      	lsls	r4, r2, #8
   292b2:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   292b4:	b10f      	cbz	r7, 292ba <nrf_gpio_reconfigure+0x88>
   292b6:	783f      	ldrb	r7, [r7, #0]
   292b8:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   292ba:	432c      	orrs	r4, r5
   292bc:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   292be:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   292c2:	b002      	add	sp, #8
   292c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000292c8 <nrf_gpio_cfg_sense_set>:
{
   292c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   292ca:	f10d 030f 	add.w	r3, sp, #15
   292ce:	9301      	str	r3, [sp, #4]
   292d0:	2300      	movs	r3, #0
{
   292d2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   292d6:	9300      	str	r3, [sp, #0]
   292d8:	461a      	mov	r2, r3
   292da:	4619      	mov	r1, r3
   292dc:	f7ff ffa9 	bl	29232 <nrf_gpio_reconfigure>
}
   292e0:	b005      	add	sp, #20
   292e2:	f85d fb04 	ldr.w	pc, [sp], #4

000292e6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   292e6:	f7f7 b8eb 	b.w	204c0 <_DoInit>

000292ea <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   292ea:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   292ec:	f7ff fffb 	bl	292e6 <SEGGER_RTT_Init>

	return 0;
}
   292f0:	2000      	movs	r0, #0
   292f2:	bd08      	pop	{r3, pc}

000292f4 <z_device_state_init>:
}
   292f4:	4770      	bx	lr

000292f6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   292f6:	b138      	cbz	r0, 29308 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   292f8:	68c3      	ldr	r3, [r0, #12]
   292fa:	8818      	ldrh	r0, [r3, #0]
   292fc:	f3c0 0008 	ubfx	r0, r0, #0, #9
   29300:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   29304:	4258      	negs	r0, r3
   29306:	4158      	adcs	r0, r3
}
   29308:	4770      	bx	lr

0002930a <z_early_memset>:
	(void) memset(dst, c, n);
   2930a:	f7fe b82b 	b.w	27364 <memset>

0002930e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2930e:	f7fe b81e 	b.w	2734e <memcpy>

00029312 <k_heap_init>:
{
   29312:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   29314:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29318:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2931c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2931e:	f7ec bf09 	b.w	16134 <sys_heap_init>

00029322 <k_mem_slab_init>:
{
   29322:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   29324:	2400      	movs	r4, #0
   29326:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   29328:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2932a:	ea41 0402 	orr.w	r4, r1, r2
   2932e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   29332:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   29336:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   29338:	d10c      	bne.n	29354 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   2933a:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2933c:	42a3      	cmp	r3, r4
   2933e:	d103      	bne.n	29348 <k_mem_slab_init+0x26>
   29340:	e9c0 0000 	strd	r0, r0, [r0]
}
   29344:	2000      	movs	r0, #0
}
   29346:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   29348:	6985      	ldr	r5, [r0, #24]
   2934a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2934c:	3401      	adds	r4, #1
		slab->free_list = p;
   2934e:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   29350:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   29352:	e7f3      	b.n	2933c <k_mem_slab_init+0x1a>
		return -EINVAL;
   29354:	f06f 0015 	mvn.w	r0, #21
	return rc;
   29358:	e7f5      	b.n	29346 <k_mem_slab_init+0x24>

0002935a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2935a:	f3ef 8005 	mrs	r0, IPSR
}
   2935e:	3800      	subs	r0, #0
   29360:	bf18      	it	ne
   29362:	2001      	movne	r0, #1
   29364:	4770      	bx	lr

00029366 <z_impl_k_thread_name_set>:
}
   29366:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2936a:	4770      	bx	lr

0002936c <k_thread_name_get>:
}
   2936c:	2000      	movs	r0, #0
   2936e:	4770      	bx	lr

00029370 <z_impl_k_thread_start>:
	z_sched_start(thread);
   29370:	f7f8 bffc 	b.w	2236c <z_sched_start>

00029374 <z_pm_save_idle_exit>:
{
   29374:	b508      	push	{r3, lr}
	pm_system_resume();
   29376:	f7ed fbf3 	bl	16b60 <pm_system_resume>
}
   2937a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2937e:	f7ff bda6 	b.w	28ece <sys_clock_idle_exit>

00029382 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   29382:	f990 300e 	ldrsb.w	r3, [r0, #14]
   29386:	428b      	cmp	r3, r1
   29388:	d001      	beq.n	2938e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2938a:	f7f9 b943 	b.w	22614 <z_set_prio>
}
   2938e:	2000      	movs	r0, #0
   29390:	4770      	bx	lr

00029392 <z_impl_k_mutex_init>:
{
   29392:	4603      	mov	r3, r0
	mutex->owner = NULL;
   29394:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   29396:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2939a:	e9c3 3300 	strd	r3, r3, [r3]
}
   2939e:	4770      	bx	lr

000293a0 <z_queue_node_peek>:
{
   293a0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   293a2:	4604      	mov	r4, r0
   293a4:	b130      	cbz	r0, 293b4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   293a6:	6802      	ldr	r2, [r0, #0]
   293a8:	0793      	lsls	r3, r2, #30
   293aa:	d003      	beq.n	293b4 <z_queue_node_peek+0x14>
		ret = anode->data;
   293ac:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   293ae:	b109      	cbz	r1, 293b4 <z_queue_node_peek+0x14>
			k_free(anode);
   293b0:	f000 f99f 	bl	296f2 <k_free>
}
   293b4:	4620      	mov	r0, r4
   293b6:	bd10      	pop	{r4, pc}

000293b8 <z_impl_k_queue_init>:
	list->head = NULL;
   293b8:	2300      	movs	r3, #0
	list->tail = NULL;
   293ba:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   293be:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   293c0:	f100 030c 	add.w	r3, r0, #12
   293c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   293c8:	f100 0314 	add.w	r3, r0, #20
   293cc:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   293d0:	4770      	bx	lr

000293d2 <k_queue_append>:
{
   293d2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   293d4:	2301      	movs	r3, #1
   293d6:	9300      	str	r3, [sp, #0]
   293d8:	2300      	movs	r3, #0
{
   293da:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   293dc:	4619      	mov	r1, r3
   293de:	f7f7 fe6f 	bl	210c0 <queue_insert>
}
   293e2:	b003      	add	sp, #12
   293e4:	f85d fb04 	ldr.w	pc, [sp], #4

000293e8 <k_queue_prepend>:
{
   293e8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   293ea:	2300      	movs	r3, #0
{
   293ec:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   293ee:	9300      	str	r3, [sp, #0]
   293f0:	4619      	mov	r1, r3
   293f2:	f7f7 fe65 	bl	210c0 <queue_insert>
}
   293f6:	b003      	add	sp, #12
   293f8:	f85d fb04 	ldr.w	pc, [sp], #4

000293fc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   293fc:	b15a      	cbz	r2, 29416 <z_impl_k_sem_init+0x1a>
   293fe:	428a      	cmp	r2, r1
   29400:	d309      	bcc.n	29416 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   29402:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   29406:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2940a:	e9c0 0000 	strd	r0, r0, [r0]
   2940e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29412:	2000      	movs	r0, #0
   29414:	4770      	bx	lr
		return -EINVAL;
   29416:	f06f 0015 	mvn.w	r0, #21
}
   2941a:	4770      	bx	lr

0002941c <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2941c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2941e:	2301      	movs	r3, #1
   29420:	408b      	lsls	r3, r1
   29422:	ea22 0303 	bic.w	r3, r2, r3
   29426:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   29428:	fa22 f001 	lsr.w	r0, r2, r1
}
   2942c:	f000 0001 	and.w	r0, r0, #1
   29430:	4770      	bx	lr

00029432 <unschedule_locked>:
{
   29432:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29434:	2103      	movs	r1, #3
{
   29436:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29438:	300c      	adds	r0, #12
   2943a:	f7ff ffef 	bl	2941c <flag_test_and_clear>
   2943e:	4604      	mov	r4, r0
   29440:	b118      	cbz	r0, 2944a <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   29442:	f105 0010 	add.w	r0, r5, #16
   29446:	f7f9 fdcd 	bl	22fe4 <z_abort_timeout>
}
   2944a:	4620      	mov	r0, r4
   2944c:	bd38      	pop	{r3, r4, r5, pc}

0002944e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2944e:	b120      	cbz	r0, 2945a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   29450:	2200      	movs	r2, #0
   29452:	4611      	mov	r1, r2
   29454:	3088      	adds	r0, #136	; 0x88
   29456:	f7f9 bc5b 	b.w	22d10 <z_sched_wake>
}
   2945a:	4770      	bx	lr

0002945c <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2945c:	68c3      	ldr	r3, [r0, #12]
{
   2945e:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29460:	f3c3 0540 	ubfx	r5, r3, #1, #1
   29464:	079b      	lsls	r3, r3, #30
{
   29466:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29468:	d416      	bmi.n	29498 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2946a:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2946c:	2102      	movs	r1, #2
   2946e:	300c      	adds	r0, #12
   29470:	f7ff ffd4 	bl	2941c <flag_test_and_clear>
   29474:	b180      	cbz	r0, 29498 <cancel_async_locked+0x3c>
	return list->head;
   29476:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2947a:	b16a      	cbz	r2, 29498 <cancel_async_locked+0x3c>
   2947c:	4294      	cmp	r4, r2
   2947e:	d11b      	bne.n	294b8 <cancel_async_locked+0x5c>
	return node->next;
   29480:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   29482:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   29486:	b98d      	cbnz	r5, 294ac <cancel_async_locked+0x50>
   29488:	428c      	cmp	r4, r1
	list->head = node;
   2948a:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2948e:	d101      	bne.n	29494 <cancel_async_locked+0x38>
	list->tail = node;
   29490:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   29494:	2300      	movs	r3, #0
   29496:	6023      	str	r3, [r4, #0]
	return *flagp;
   29498:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2949a:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2949e:	bf1e      	ittt	ne
   294a0:	f043 0302 	orrne.w	r3, r3, #2
   294a4:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   294a6:	f003 000f 	andne.w	r0, r3, #15
}
   294aa:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   294ac:	428c      	cmp	r4, r1
	parent->next = child;
   294ae:	602a      	str	r2, [r5, #0]
	list->tail = node;
   294b0:	bf08      	it	eq
   294b2:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   294b6:	e7ed      	b.n	29494 <cancel_async_locked+0x38>
	return node->next;
   294b8:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   294ba:	6812      	ldr	r2, [r2, #0]
   294bc:	e7dd      	b.n	2947a <cancel_async_locked+0x1e>

000294be <k_work_submit_to_queue>:
{
   294be:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   294c0:	f7f8 f9f8 	bl	218b4 <z_work_submit_to_queue>
	if (ret > 0) {
   294c4:	1e04      	subs	r4, r0, #0
   294c6:	dd09      	ble.n	294dc <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   294c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   294cc:	f3ef 8011 	mrs	r0, BASEPRI
   294d0:	f383 8812 	msr	BASEPRI_MAX, r3
   294d4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   294d8:	f000 f80d 	bl	294f6 <z_reschedule_irqlock>
}
   294dc:	4620      	mov	r0, r4
   294de:	bd10      	pop	{r4, pc}

000294e0 <k_work_delayable_busy_get>:
   294e0:	f7f8 b9b2 	b.w	21848 <k_work_busy_get>

000294e4 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   294e4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   294e8:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   294ec:	4283      	cmp	r3, r0
		return b2 - b1;
   294ee:	bf14      	ite	ne
   294f0:	1ac0      	subne	r0, r0, r3
	return 0;
   294f2:	2000      	moveq	r0, #0
}
   294f4:	4770      	bx	lr

000294f6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   294f6:	4603      	mov	r3, r0
   294f8:	b920      	cbnz	r0, 29504 <z_reschedule_irqlock+0xe>
   294fa:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   294fe:	b90a      	cbnz	r2, 29504 <z_reschedule_irqlock+0xe>
   29500:	f7ed be58 	b.w	171b4 <arch_swap>
	__asm__ volatile(
   29504:	f383 8811 	msr	BASEPRI, r3
   29508:	f3bf 8f6f 	isb	sy
}
   2950c:	4770      	bx	lr

0002950e <z_reschedule_unlocked>:
	__asm__ volatile(
   2950e:	f04f 0340 	mov.w	r3, #64	; 0x40
   29512:	f3ef 8011 	mrs	r0, BASEPRI
   29516:	f383 8812 	msr	BASEPRI_MAX, r3
   2951a:	f3bf 8f6f 	isb	sy
   2951e:	f7ff bfea 	b.w	294f6 <z_reschedule_irqlock>

00029522 <z_priq_dumb_best>:
{
   29522:	4603      	mov	r3, r0
	return list->head == list;
   29524:	6800      	ldr	r0, [r0, #0]
}
   29526:	4283      	cmp	r3, r0
   29528:	bf08      	it	eq
   2952a:	2000      	moveq	r0, #0
   2952c:	4770      	bx	lr

0002952e <z_unpend_all>:
{
   2952e:	b538      	push	{r3, r4, r5, lr}
   29530:	4605      	mov	r5, r0
	int need_sched = 0;
   29532:	2000      	movs	r0, #0
   29534:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29536:	42a5      	cmp	r5, r4
   29538:	d000      	beq.n	2953c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2953a:	b904      	cbnz	r4, 2953e <z_unpend_all+0x10>
}
   2953c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2953e:	4620      	mov	r0, r4
   29540:	f7f8 fd74 	bl	2202c <z_unpend_thread>
		z_ready_thread(thread);
   29544:	4620      	mov	r0, r4
   29546:	f7f8 fedb 	bl	22300 <z_ready_thread>
		need_sched = 1;
   2954a:	2001      	movs	r0, #1
   2954c:	e7f2      	b.n	29534 <z_unpend_all+0x6>

0002954e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2954e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   29550:	f7f9 fe9c 	bl	2328c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   29554:	bd08      	pop	{r3, pc}

00029556 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   29556:	b108      	cbz	r0, 2955c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   29558:	f7ee bb1a 	b.w	17b90 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2955c:	4770      	bx	lr

0002955e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2955e:	f1b1 3fff 	cmp.w	r1, #4294967295
   29562:	bf08      	it	eq
   29564:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   29568:	b538      	push	{r3, r4, r5, lr}
   2956a:	4605      	mov	r5, r0
   2956c:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2956e:	d01d      	beq.n	295ac <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29570:	ea51 0300 	orrs.w	r3, r1, r0
   29574:	d103      	bne.n	2957e <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   29576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2957a:	f7f9 be87 	b.w	2328c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2957e:	f06f 0301 	mvn.w	r3, #1
   29582:	1a18      	subs	r0, r3, r0
   29584:	f04f 33ff 	mov.w	r3, #4294967295
   29588:	eb63 0101 	sbc.w	r1, r3, r1
   2958c:	2900      	cmp	r1, #0
   2958e:	da0c      	bge.n	295aa <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   29590:	f7f9 fe7c 	bl	2328c <sys_clock_tick_get>
   29594:	2d01      	cmp	r5, #1
   29596:	4622      	mov	r2, r4
   29598:	f174 0400 	sbcs.w	r4, r4, #0
   2959c:	462b      	mov	r3, r5
   2959e:	bfbc      	itt	lt
   295a0:	2301      	movlt	r3, #1
   295a2:	2200      	movlt	r2, #0
   295a4:	1818      	adds	r0, r3, r0
   295a6:	eb41 0102 	adc.w	r1, r1, r2
}
   295aa:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   295ac:	f04f 30ff 	mov.w	r0, #4294967295
   295b0:	4601      	mov	r1, r0
   295b2:	e7fa      	b.n	295aa <sys_clock_timeout_end_calc+0x4c>

000295b4 <add_event>:
{
   295b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   295b6:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   295b8:	e9d0 1300 	ldrd	r1, r3, [r0]
   295bc:	4288      	cmp	r0, r1
   295be:	4604      	mov	r4, r0
   295c0:	d00d      	beq.n	295de <add_event+0x2a>
	if ((pending == NULL) ||
   295c2:	b163      	cbz	r3, 295de <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   295c4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   295c6:	b100      	cbz	r0, 295ca <add_event+0x16>
   295c8:	3860      	subs	r0, #96	; 0x60
   295ca:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   295ce:	4639      	mov	r1, r7
   295d0:	f7ff ff88 	bl	294e4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   295d4:	2800      	cmp	r0, #0
   295d6:	dc02      	bgt.n	295de <add_event+0x2a>
	return list->head == list;
   295d8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   295da:	42b4      	cmp	r4, r6
   295dc:	d109      	bne.n	295f2 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   295de:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   295e0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   295e4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   295e6:	6065      	str	r5, [r4, #4]
}
   295e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   295ea:	6863      	ldr	r3, [r4, #4]
   295ec:	42b3      	cmp	r3, r6
   295ee:	d0f6      	beq.n	295de <add_event+0x2a>
   295f0:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   295f2:	2e00      	cmp	r6, #0
   295f4:	d0f3      	beq.n	295de <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   295f6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   295f8:	b101      	cbz	r1, 295fc <add_event+0x48>
   295fa:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   295fc:	4638      	mov	r0, r7
   295fe:	f7ff ff71 	bl	294e4 <z_sched_prio_cmp>
   29602:	2800      	cmp	r0, #0
   29604:	ddf1      	ble.n	295ea <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   29606:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   29608:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2960c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2960e:	6075      	str	r5, [r6, #4]
			return;
   29610:	e7ea      	b.n	295e8 <add_event+0x34>

00029612 <signal_poll_event>:
{
   29612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   29616:	6884      	ldr	r4, [r0, #8]
{
   29618:	4605      	mov	r5, r0
   2961a:	460e      	mov	r6, r1
	if (poller != NULL) {
   2961c:	b144      	cbz	r4, 29630 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2961e:	7863      	ldrb	r3, [r4, #1]
   29620:	2b01      	cmp	r3, #1
   29622:	d136      	bne.n	29692 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   29624:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29628:	f013 0302 	ands.w	r3, r3, #2
   2962c:	d10a      	bne.n	29644 <signal_poll_event+0x32>
		poller->is_polling = false;
   2962e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   29630:	68eb      	ldr	r3, [r5, #12]
   29632:	f3c3 3145 	ubfx	r1, r3, #13, #6
   29636:	430e      	orrs	r6, r1
	event->poller = NULL;
   29638:	2000      	movs	r0, #0
	event->state |= state;
   2963a:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2963e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   29640:	60eb      	str	r3, [r5, #12]
	return retcode;
   29642:	e00b      	b.n	2965c <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   29644:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   29648:	f1b3 3fff 	cmp.w	r3, #4294967295
   2964c:	bf08      	it	eq
   2964e:	f112 0f02 	cmneq.w	r2, #2
   29652:	d105      	bne.n	29660 <signal_poll_event+0x4e>
		poller->is_polling = false;
   29654:	2300      	movs	r3, #0
   29656:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   29658:	f06f 000a 	mvn.w	r0, #10
}
   2965c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29660:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   29664:	4640      	mov	r0, r8
   29666:	f7f8 fce1 	bl	2202c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2966a:	2e08      	cmp	r6, #8
   2966c:	bf0c      	ite	eq
   2966e:	f06f 0303 	mvneq.w	r3, #3
   29672:	2300      	movne	r3, #0
   29674:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   29676:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2967a:	06db      	lsls	r3, r3, #27
   2967c:	d102      	bne.n	29684 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2967e:	f854 7c48 	ldr.w	r7, [r4, #-72]
   29682:	b10f      	cbz	r7, 29688 <signal_poll_event+0x76>
		poller->is_polling = false;
   29684:	2300      	movs	r3, #0
   29686:	e7d2      	b.n	2962e <signal_poll_event+0x1c>
	z_ready_thread(thread);
   29688:	4640      	mov	r0, r8
   2968a:	f7f8 fe39 	bl	22300 <z_ready_thread>
		poller->is_polling = false;
   2968e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   29690:	e7ce      	b.n	29630 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   29692:	2b02      	cmp	r3, #2
   29694:	d1f6      	bne.n	29684 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   29696:	7823      	ldrb	r3, [r4, #0]
   29698:	2b00      	cmp	r3, #0
   2969a:	d0c9      	beq.n	29630 <signal_poll_event+0x1e>
   2969c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   296a0:	2f00      	cmp	r7, #0
   296a2:	d0f4      	beq.n	2968e <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   296a4:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   296a8:	f1a4 0914 	sub.w	r9, r4, #20
   296ac:	f104 0014 	add.w	r0, r4, #20
   296b0:	f7f9 fc98 	bl	22fe4 <z_abort_timeout>
		twork->poll_result = 0;
   296b4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   296b8:	4649      	mov	r1, r9
   296ba:	4638      	mov	r0, r7
   296bc:	f7f8 f8fa 	bl	218b4 <z_work_submit_to_queue>
		poller->is_polling = false;
   296c0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   296c4:	e7b4      	b.n	29630 <signal_poll_event+0x1e>

000296c6 <z_handle_obj_poll_events>:
{
   296c6:	4603      	mov	r3, r0
	return list->head == list;
   296c8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   296ca:	4283      	cmp	r3, r0
   296cc:	d008      	beq.n	296e0 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   296ce:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   296d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   296d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   296d6:	2300      	movs	r3, #0
	node->prev = NULL;
   296d8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   296dc:	f7ff bf99 	b.w	29612 <signal_poll_event>
}
   296e0:	4770      	bx	lr

000296e2 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   296e2:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   296e4:	e9c0 0000 	strd	r0, r0, [r0]
   296e8:	6083      	str	r3, [r0, #8]
}
   296ea:	4770      	bx	lr

000296ec <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   296ec:	2300      	movs	r3, #0
   296ee:	6083      	str	r3, [r0, #8]
}
   296f0:	4770      	bx	lr

000296f2 <k_free>:
	if (ptr != NULL) {
   296f2:	b120      	cbz	r0, 296fe <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   296f4:	1f01      	subs	r1, r0, #4
   296f6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   296fa:	f7f7 b907 	b.w	2090c <k_heap_free>
}
   296fe:	4770      	bx	lr

00029700 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29700:	4770      	bx	lr
