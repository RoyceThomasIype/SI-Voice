
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	c0 52 00 20 2d 12 01 00 13 b0 01 00 e5 11 01 00     .R. -...........
  10:	e5 11 01 00 e5 11 01 00 e5 11 01 00 00 00 00 00     ................
	...
  2c:	6d 0e 01 00 e5 11 01 00 00 00 00 00 15 0e 01 00     m...............
  3c:	e5 11 01 00                                         ....

00000040 <_irq_vector_table>:
  40:	4d 0f 01 00 61 d6 01 00 4d 0f 01 00 4d 0f 01 00     M...a...M...M...
  50:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  60:	29 d6 01 00 4d 0f 01 00 4d 0f 01 00 47 d6 01 00     )...M...M...G...
  70:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  80:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  90:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  a0:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  b0:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  c0:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  d0:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  e0:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...
  f0:	4d 0f 01 00 4d 0f 01 00 4d 0f 01 00 4d 0f 01 00     M...M...M...M...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c fa26 	bl	c570 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     134:	4801      	ldr	r0, [pc, #4]	; (13c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     136:	7800      	ldrb	r0, [r0, #0]
     138:	4770      	bx	lr
     13a:	0000      	.short	0x0000
     13c:	20000028 	.word	0x20000028

00000140 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     140:	b570      	push	{r4, r5, r6, lr}
     142:	f00c fcaa 	bl	ca9a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     146:	4c13      	ldr	r4, [pc, #76]	; (194 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x27>)
     148:	f06f 0527 	mvn.w	r5, #39	; 0x27
     14c:	b928      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     14e:	f00c fcda 	bl	cb06 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     152:	b910      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     154:	f00c fce1 	bl	cb1a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     158:	b120      	cbz	r0, 164 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     15a:	480f      	ldr	r0, [pc, #60]	; (198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>)
     15c:	6060      	str	r0, [r4, #4]
     15e:	7065      	strb	r5, [r4, #1]
     160:	2008      	movs	r0, #8
     162:	e010      	b.n	186 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19>
     164:	f00c fc6e 	bl	ca44 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     168:	b940      	cbnz	r0, 17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     16a:	f00c fc75 	bl	ca58 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     16e:	b928      	cbnz	r0, 17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     170:	f00c fc89 	bl	ca86 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     174:	b910      	cbnz	r0, 17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	f00c fc9a 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     17a:	b130      	cbz	r0, 18a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d>
     17c:	4806      	ldr	r0, [pc, #24]	; (198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>)
     17e:	3031      	adds	r0, #49	; 0x31
     180:	6060      	str	r0, [r4, #4]
     182:	7065      	strb	r5, [r4, #1]
     184:	2004      	movs	r0, #4
     186:	70a0      	strb	r0, [r4, #2]
     188:	bd70      	pop	{r4, r5, r6, pc}
     18a:	21e8      	movs	r1, #232	; 0xe8
     18c:	2074      	movs	r0, #116	; 0x74
     18e:	f003 fb19 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     192:	0000      	.short	0x0000
     194:	20000028 	.word	0x20000028
     198:	0000f81e 	.word	0x0000f81e

0000019c <mpsl_tx_power_radio_supported_power_adjust>:
     19c:	4907      	ldr	r1, [pc, #28]	; (1bc <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     19e:	f991 2002 	ldrsb.w	r2, [r1, #2]
     1a2:	4290      	cmp	r0, r2
     1a4:	da03      	bge.n	1ae <mpsl_tx_power_radio_supported_power_adjust+0x12>
     1a6:	f991 2001 	ldrsb.w	r2, [r1, #1]
     1aa:	4290      	cmp	r0, r2
     1ac:	dc01      	bgt.n	1b2 <mpsl_tx_power_radio_supported_power_adjust+0x16>
     1ae:	4610      	mov	r0, r2
     1b0:	4770      	bx	lr
     1b2:	6849      	ldr	r1, [r1, #4]
     1b4:	1a80      	subs	r0, r0, r2
     1b6:	5608      	ldrsb	r0, [r1, r0]
     1b8:	4770      	bx	lr
     1ba:	0000      	.short	0x0000
     1bc:	20000028 	.word	0x20000028

000001c0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1c4:	461c      	mov	r4, r3
     1c6:	4690      	mov	r8, r2
     1c8:	460d      	mov	r5, r1
     1ca:	4606      	mov	r6, r0
     1cc:	f06f 0715 	mvn.w	r7, #21
     1d0:	2804      	cmp	r0, #4
     1d2:	d804      	bhi.n	1de <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     1d4:	b11c      	cbz	r4, 1de <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     1d6:	f00c fb1e 	bl	c816 <__udivmoddi4+0x2a6>
     1da:	42a8      	cmp	r0, r5
     1dc:	d802      	bhi.n	1e4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     1de:	4638      	mov	r0, r7
     1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1e4:	4805      	ldr	r0, [pc, #20]	; (1fc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     1e6:	4642      	mov	r2, r8
     1e8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     1ec:	b118      	cbz	r0, 1f6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     1ee:	5740      	ldrsb	r0, [r0, r5]
     1f0:	4282      	cmp	r2, r0
     1f2:	dd00      	ble.n	1f6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     1f4:	4602      	mov	r2, r0
     1f6:	7022      	strb	r2, [r4, #0]
     1f8:	2000      	movs	r0, #0
     1fa:	e7f1      	b.n	1e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     1fc:	20000d48 	.word	0x20000d48

00000200 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     200:	4801      	ldr	r0, [pc, #4]	; (208 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     202:	7800      	ldrb	r0, [r0, #0]
     204:	4770      	bx	lr
     206:	0000      	.short	0x0000
     208:	20000030 	.word	0x20000030

0000020c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     20c:	4905      	ldr	r1, [pc, #20]	; (224 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     20e:	780a      	ldrb	r2, [r1, #0]
     210:	4290      	cmp	r0, r2
     212:	d301      	bcc.n	218 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     214:	2000      	movs	r0, #0
     216:	4770      	bx	lr
     218:	6849      	ldr	r1, [r1, #4]
     21a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     21e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     222:	4770      	bx	lr
     224:	20000030 	.word	0x20000030

00000228 <MPSL_IRQ_RADIO_Handler>:
     228:	490e      	ldr	r1, [pc, #56]	; (264 <MPSL_IRQ_RADIO_Handler+0x3c>)
     22a:	b510      	push	{r4, lr}
     22c:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     230:	2820      	cmp	r0, #32
     232:	d012      	beq.n	25a <MPSL_IRQ_RADIO_Handler+0x32>
     234:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     238:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     23c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     240:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     244:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     248:	6840      	ldr	r0, [r0, #4]
     24a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     24e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     256:	2104      	movs	r1, #4
     258:	4710      	bx	r2
     25a:	f640 0187 	movw	r1, #2183	; 0x887
     25e:	2070      	movs	r0, #112	; 0x70
     260:	f003 fab0 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     264:	2000115c 	.word	0x2000115c
     268:	b570      	push	{r4, r5, r6, lr}
     26a:	4605      	mov	r5, r0
     26c:	2a20      	cmp	r2, #32
     26e:	d028      	beq.n	2c2 <MPSL_IRQ_RADIO_Handler+0x9a>
     270:	4819      	ldr	r0, [pc, #100]	; (2d8 <MPSL_IRQ_RADIO_Handler+0xb0>)
     272:	4c1a      	ldr	r4, [pc, #104]	; (2dc <MPSL_IRQ_RADIO_Handler+0xb4>)
     274:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     27c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     280:	4423      	add	r3, r4
     282:	2920      	cmp	r1, #32
     284:	d022      	beq.n	2cc <MPSL_IRQ_RADIO_Handler+0xa4>
     286:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     28a:	7840      	ldrb	r0, [r0, #1]
     28c:	784c      	ldrb	r4, [r1, #1]
     28e:	7048      	strb	r0, [r1, #1]
     290:	4620      	mov	r0, r4
     292:	4601      	mov	r1, r0
     294:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     298:	4291      	cmp	r1, r2
     29a:	7005      	strb	r5, [r0, #0]
     29c:	7840      	ldrb	r0, [r0, #1]
     29e:	d1f8      	bne.n	292 <MPSL_IRQ_RADIO_Handler+0x6a>
     2a0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     2a4:	2a20      	cmp	r2, #32
     2a6:	bf1a      	itte	ne
     2a8:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     2ac:	7054      	strbne	r4, [r2, #1]
     2ae:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     2b2:	2220      	movs	r2, #32
     2b4:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     2b8:	f88c 2001 	strb.w	r2, [ip, #1]
     2bc:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     2c0:	bd70      	pop	{r4, r5, r6, pc}
     2c2:	f240 2192 	movw	r1, #658	; 0x292
     2c6:	2070      	movs	r0, #112	; 0x70
     2c8:	f003 fa7c 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     2cc:	f893 4020 	ldrb.w	r4, [r3, #32]
     2d0:	7840      	ldrb	r0, [r0, #1]
     2d2:	f883 0020 	strb.w	r0, [r3, #32]
     2d6:	e7db      	b.n	290 <MPSL_IRQ_RADIO_Handler+0x68>
     2d8:	200010dc 	.word	0x200010dc
     2dc:	2000115c 	.word	0x2000115c
     2e0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2e4:	b085      	sub	sp, #20
     2e6:	4615      	mov	r5, r2
     2e8:	460c      	mov	r4, r1
     2ea:	f002 f9cb 	bl	2684 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     2ee:	4428      	add	r0, r5
     2f0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     2f4:	9102      	str	r1, [sp, #8]
     2f6:	6820      	ldr	r0, [r4, #0]
     2f8:	1a40      	subs	r0, r0, r1
     2fa:	0200      	lsls	r0, r0, #8
     2fc:	17c1      	asrs	r1, r0, #31
     2fe:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     302:	1200      	asrs	r0, r0, #8
     304:	2800      	cmp	r0, #0
     306:	f300 80f0 	bgt.w	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
     30a:	f8dd 8020 	ldr.w	r8, [sp, #32]
     30e:	48ca      	ldr	r0, [pc, #808]	; (638 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>)
     310:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     314:	4408      	add	r0, r1
     316:	9003      	str	r0, [sp, #12]
     318:	f890 5020 	ldrb.w	r5, [r0, #32]
     31c:	2020      	movs	r0, #32
     31e:	4ec7      	ldr	r6, [pc, #796]	; (63c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>)
     320:	46ea      	mov	sl, sp
     322:	f10d 0904 	add.w	r9, sp, #4
     326:	f88d 0000 	strb.w	r0, [sp]
     32a:	2d20      	cmp	r5, #32
     32c:	bf1c      	itt	ne
     32e:	48c4      	ldrne	r0, [pc, #784]	; (640 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>)
     330:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     334:	d039      	beq.n	3aa <MPSL_IRQ_RADIO_Handler+0x182>
     336:	bf00      	nop
     338:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     33c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     340:	f100 0108 	add.w	r1, r0, #8
     344:	68c0      	ldr	r0, [r0, #12]
     346:	6827      	ldr	r7, [r4, #0]
     348:	1a38      	subs	r0, r7, r0
     34a:	0200      	lsls	r0, r0, #8
     34c:	17c2      	asrs	r2, r0, #31
     34e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     352:	1200      	asrs	r0, r0, #8
     354:	d429      	bmi.n	3aa <MPSL_IRQ_RADIO_Handler+0x182>
     356:	89e0      	ldrh	r0, [r4, #14]
     358:	b300      	cbz	r0, 39c <MPSL_IRQ_RADIO_Handler+0x174>
     35a:	89c8      	ldrh	r0, [r1, #14]
     35c:	b9f0      	cbnz	r0, 39c <MPSL_IRQ_RADIO_Handler+0x174>
     35e:	6808      	ldr	r0, [r1, #0]
     360:	9004      	str	r0, [sp, #16]
     362:	f003 f8a3 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     366:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     36a:	bf08      	it	eq
     36c:	200d      	moveq	r0, #13
     36e:	d00b      	beq.n	388 <MPSL_IRQ_RADIO_Handler+0x160>
     370:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     374:	3856      	subs	r0, #86	; 0x56
     376:	bf08      	it	eq
     378:	201c      	moveq	r0, #28
     37a:	d005      	beq.n	388 <MPSL_IRQ_RADIO_Handler+0x160>
     37c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     380:	389f      	subs	r0, #159	; 0x9f
     382:	bf14      	ite	ne
     384:	2000      	movne	r0, #0
     386:	2032      	moveq	r0, #50	; 0x32
     388:	1c41      	adds	r1, r0, #1
     38a:	9804      	ldr	r0, [sp, #16]
     38c:	1a38      	subs	r0, r7, r0
     38e:	0200      	lsls	r0, r0, #8
     390:	17c2      	asrs	r2, r0, #31
     392:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     396:	1200      	asrs	r0, r0, #8
     398:	4288      	cmp	r0, r1
     39a:	db06      	blt.n	3aa <MPSL_IRQ_RADIO_Handler+0x182>
     39c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     3a0:	f88a 5000 	strb.w	r5, [sl]
     3a4:	7845      	ldrb	r5, [r0, #1]
     3a6:	2d20      	cmp	r5, #32
     3a8:	d1c6      	bne.n	338 <MPSL_IRQ_RADIO_Handler+0x110>
     3aa:	f89a 0000 	ldrb.w	r0, [sl]
     3ae:	f889 0000 	strb.w	r0, [r9]
     3b2:	2d20      	cmp	r5, #32
     3b4:	bf1c      	itt	ne
     3b6:	48a2      	ldrne	r0, [pc, #648]	; (640 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>)
     3b8:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     3bc:	f000 8138 	beq.w	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     3c0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     3c4:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     3c8:	6860      	ldr	r0, [r4, #4]
     3ca:	f8d7 8008 	ldr.w	r8, [r7, #8]
     3ce:	f107 0108 	add.w	r1, r7, #8
     3d2:	eba8 0000 	sub.w	r0, r8, r0
     3d6:	0200      	lsls	r0, r0, #8
     3d8:	17c2      	asrs	r2, r0, #31
     3da:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     3de:	1200      	asrs	r0, r0, #8
     3e0:	d427      	bmi.n	432 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x32>
     3e2:	89c8      	ldrh	r0, [r1, #14]
     3e4:	2800      	cmp	r0, #0
     3e6:	f000 8123 	beq.w	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     3ea:	89e0      	ldrh	r0, [r4, #14]
     3ec:	2800      	cmp	r0, #0
     3ee:	f040 811f 	bne.w	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     3f2:	f8d4 a000 	ldr.w	sl, [r4]
     3f6:	f003 f859 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     3fa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     3fe:	bf08      	it	eq
     400:	200d      	moveq	r0, #13
     402:	d00b      	beq.n	41c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x1c>
     404:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     408:	3856      	subs	r0, #86	; 0x56
     40a:	bf08      	it	eq
     40c:	201c      	moveq	r0, #28
     40e:	d005      	beq.n	41c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x1c>
     410:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     414:	389f      	subs	r0, #159	; 0x9f
     416:	bf14      	ite	ne
     418:	2000      	movne	r0, #0
     41a:	2032      	moveq	r0, #50	; 0x32
     41c:	1c41      	adds	r1, r0, #1
     41e:	eba8 000a 	sub.w	r0, r8, sl
     422:	0200      	lsls	r0, r0, #8
     424:	17c2      	asrs	r2, r0, #31
     426:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     42a:	1200      	asrs	r0, r0, #8
     42c:	4288      	cmp	r0, r1
     42e:	f280 80ff 	bge.w	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     432:	f889 5000 	strb.w	r5, [r9]
     436:	7e39      	ldrb	r1, [r7, #24]
     438:	7c20      	ldrb	r0, [r4, #16]
     43a:	4281      	cmp	r1, r0
     43c:	d906      	bls.n	44c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4c>
     43e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     442:	7845      	ldrb	r5, [r0, #1]
     444:	2d20      	cmp	r5, #32
     446:	d1bb      	bne.n	3c0 <MPSL_IRQ_RADIO_Handler+0x198>
     448:	f000 b8f2 	b.w	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     44c:	f89d 0004 	ldrb.w	r0, [sp, #4]
     450:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     454:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     458:	8ac1      	ldrh	r1, [r0, #22]
     45a:	68c5      	ldr	r5, [r0, #12]
     45c:	bbe1      	cbnz	r1, 4d8 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xd8>
     45e:	89e1      	ldrh	r1, [r4, #14]
     460:	b3d1      	cbz	r1, 4d8 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xd8>
     462:	6887      	ldr	r7, [r0, #8]
     464:	f003 f822 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     468:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     46c:	bf08      	it	eq
     46e:	200d      	moveq	r0, #13
     470:	d00b      	beq.n	48a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x8a>
     472:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     476:	3856      	subs	r0, #86	; 0x56
     478:	bf08      	it	eq
     47a:	201c      	moveq	r0, #28
     47c:	d005      	beq.n	48a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x8a>
     47e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     482:	389f      	subs	r0, #159	; 0x9f
     484:	bf14      	ite	ne
     486:	2000      	movne	r0, #0
     488:	2032      	moveq	r0, #50	; 0x32
     48a:	1c41      	adds	r1, r0, #1
     48c:	1be8      	subs	r0, r5, r7
     48e:	0200      	lsls	r0, r0, #8
     490:	17c2      	asrs	r2, r0, #31
     492:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     496:	1200      	asrs	r0, r0, #8
     498:	4288      	cmp	r0, r1
     49a:	da1d      	bge.n	4d8 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xd8>
     49c:	f003 f806 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     4a0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     4a4:	bf08      	it	eq
     4a6:	200d      	moveq	r0, #13
     4a8:	d00b      	beq.n	4c2 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xc2>
     4aa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     4ae:	3856      	subs	r0, #86	; 0x56
     4b0:	bf08      	it	eq
     4b2:	201c      	moveq	r0, #28
     4b4:	d005      	beq.n	4c2 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xc2>
     4b6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     4ba:	389f      	subs	r0, #159	; 0x9f
     4bc:	bf14      	ite	ne
     4be:	2000      	movne	r0, #0
     4c0:	2032      	moveq	r0, #50	; 0x32
     4c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
     4c6:	1c40      	adds	r0, r0, #1
     4c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     4cc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     4d0:	6889      	ldr	r1, [r1, #8]
     4d2:	4408      	add	r0, r1
     4d4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     4d8:	9802      	ldr	r0, [sp, #8]
     4da:	1a28      	subs	r0, r5, r0
     4dc:	0200      	lsls	r0, r0, #8
     4de:	17c1      	asrs	r1, r0, #31
     4e0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4e4:	1200      	asrs	r0, r0, #8
     4e6:	2800      	cmp	r0, #0
     4e8:	dd03      	ble.n	4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
     4ea:	b009      	add	sp, #36	; 0x24
     4ec:	2000      	movs	r0, #0
     4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4f2:	e9d4 1000 	ldrd	r1, r0, [r4]
     4f6:	1a40      	subs	r0, r0, r1
     4f8:	4428      	add	r0, r5
     4fa:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     4fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     502:	e9c4 1000 	strd	r1, r0, [r4]
     506:	9808      	ldr	r0, [sp, #32]
     508:	9004      	str	r0, [sp, #16]
     50a:	9803      	ldr	r0, [sp, #12]
     50c:	46ea      	mov	sl, sp
     50e:	f10d 0804 	add.w	r8, sp, #4
     512:	f890 5020 	ldrb.w	r5, [r0, #32]
     516:	2020      	movs	r0, #32
     518:	f88d 0000 	strb.w	r0, [sp]
     51c:	2d20      	cmp	r5, #32
     51e:	d03c      	beq.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     520:	4847      	ldr	r0, [pc, #284]	; (640 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>)
     522:	9904      	ldr	r1, [sp, #16]
     524:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
     528:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     52c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     530:	f100 0108 	add.w	r1, r0, #8
     534:	68c0      	ldr	r0, [r0, #12]
     536:	6827      	ldr	r7, [r4, #0]
     538:	1a38      	subs	r0, r7, r0
     53a:	0200      	lsls	r0, r0, #8
     53c:	17c2      	asrs	r2, r0, #31
     53e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     542:	1200      	asrs	r0, r0, #8
     544:	d429      	bmi.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     546:	89e0      	ldrh	r0, [r4, #14]
     548:	b300      	cbz	r0, 58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
     54a:	89c8      	ldrh	r0, [r1, #14]
     54c:	b9f0      	cbnz	r0, 58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
     54e:	f8d1 9000 	ldr.w	r9, [r1]
     552:	f002 ffab 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     556:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     55a:	bf08      	it	eq
     55c:	200d      	moveq	r0, #13
     55e:	d00b      	beq.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
     560:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     564:	3856      	subs	r0, #86	; 0x56
     566:	bf08      	it	eq
     568:	201c      	moveq	r0, #28
     56a:	d005      	beq.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
     56c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     570:	389f      	subs	r0, #159	; 0x9f
     572:	bf14      	ite	ne
     574:	2000      	movne	r0, #0
     576:	2032      	moveq	r0, #50	; 0x32
     578:	1c41      	adds	r1, r0, #1
     57a:	eba7 0009 	sub.w	r0, r7, r9
     57e:	0200      	lsls	r0, r0, #8
     580:	17c2      	asrs	r2, r0, #31
     582:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     586:	1200      	asrs	r0, r0, #8
     588:	4288      	cmp	r0, r1
     58a:	db06      	blt.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     58c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     590:	f88a 5000 	strb.w	r5, [sl]
     594:	7845      	ldrb	r5, [r0, #1]
     596:	2d20      	cmp	r5, #32
     598:	d1c6      	bne.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     59a:	f89a 0000 	ldrb.w	r0, [sl]
     59e:	f888 0000 	strb.w	r0, [r8]
     5a2:	9804      	ldr	r0, [sp, #16]
     5a4:	2d20      	cmp	r5, #32
     5a6:	bf1c      	itt	ne
     5a8:	4925      	ldrne	r1, [pc, #148]	; (640 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>)
     5aa:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     5ae:	d03f      	beq.n	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     5b0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     5b4:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     5b8:	6861      	ldr	r1, [r4, #4]
     5ba:	f8d7 9008 	ldr.w	r9, [r7, #8]
     5be:	f107 0008 	add.w	r0, r7, #8
     5c2:	eba9 0101 	sub.w	r1, r9, r1
     5c6:	0209      	lsls	r1, r1, #8
     5c8:	17ca      	asrs	r2, r1, #31
     5ca:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     5ce:	1209      	asrs	r1, r1, #8
     5d0:	d422      	bmi.n	618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     5d2:	89c0      	ldrh	r0, [r0, #14]
     5d4:	b360      	cbz	r0, 630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     5d6:	89e0      	ldrh	r0, [r4, #14]
     5d8:	bb50      	cbnz	r0, 630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     5da:	f8d4 a000 	ldr.w	sl, [r4]
     5de:	f002 ff65 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     5e2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     5e6:	bf08      	it	eq
     5e8:	200d      	moveq	r0, #13
     5ea:	d00b      	beq.n	604 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     5ec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     5f0:	3856      	subs	r0, #86	; 0x56
     5f2:	bf08      	it	eq
     5f4:	201c      	moveq	r0, #28
     5f6:	d005      	beq.n	604 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     5f8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     5fc:	389f      	subs	r0, #159	; 0x9f
     5fe:	bf14      	ite	ne
     600:	2000      	movne	r0, #0
     602:	2032      	moveq	r0, #50	; 0x32
     604:	1c41      	adds	r1, r0, #1
     606:	eba9 000a 	sub.w	r0, r9, sl
     60a:	0200      	lsls	r0, r0, #8
     60c:	17c2      	asrs	r2, r0, #31
     60e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     612:	1200      	asrs	r0, r0, #8
     614:	4288      	cmp	r0, r1
     616:	da0b      	bge.n	630 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     618:	f888 5000 	strb.w	r5, [r8]
     61c:	7e38      	ldrb	r0, [r7, #24]
     61e:	7c21      	ldrb	r1, [r4, #16]
     620:	4288      	cmp	r0, r1
     622:	f67f af13 	bls.w	44c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4c>
     626:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     62a:	7845      	ldrb	r5, [r0, #1]
     62c:	2d20      	cmp	r5, #32
     62e:	d1bf      	bne.n	5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>
     630:	b009      	add	sp, #36	; 0x24
     632:	2001      	movs	r0, #1
     634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     638:	2000115c 	.word	0x2000115c
     63c:	20000d5c 	.word	0x20000d5c
     640:	200010dc 	.word	0x200010dc
     644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     648:	460f      	mov	r7, r1
     64a:	4606      	mov	r6, r0
     64c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     650:	494b      	ldr	r1, [pc, #300]	; (780 <CONFIG_BT_HCI_TX_STACK_SIZE+0x180>)
     652:	4699      	mov	r9, r3
     654:	4408      	add	r0, r1
     656:	4692      	mov	sl, r2
     658:	f890 4020 	ldrb.w	r4, [r0, #32]
     65c:	2020      	movs	r0, #32
     65e:	7010      	strb	r0, [r2, #0]
     660:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     664:	2c20      	cmp	r4, #32
     666:	bf1c      	itt	ne
     668:	4846      	ldrne	r0, [pc, #280]	; (784 <CONFIG_BT_HCI_TX_STACK_SIZE+0x184>)
     66a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     66e:	d038      	beq.n	6e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe2>
     670:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     674:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     678:	f100 0108 	add.w	r1, r0, #8
     67c:	68c0      	ldr	r0, [r0, #12]
     67e:	6835      	ldr	r5, [r6, #0]
     680:	1a28      	subs	r0, r5, r0
     682:	0200      	lsls	r0, r0, #8
     684:	17c2      	asrs	r2, r0, #31
     686:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     68a:	1200      	asrs	r0, r0, #8
     68c:	d429      	bmi.n	6e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe2>
     68e:	89f0      	ldrh	r0, [r6, #14]
     690:	b300      	cbz	r0, 6d4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd4>
     692:	89c8      	ldrh	r0, [r1, #14]
     694:	b9f0      	cbnz	r0, 6d4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd4>
     696:	6808      	ldr	r0, [r1, #0]
     698:	9000      	str	r0, [sp, #0]
     69a:	f002 ff07 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     69e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     6a2:	bf08      	it	eq
     6a4:	200d      	moveq	r0, #13
     6a6:	d00b      	beq.n	6c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc0>
     6a8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     6ac:	3856      	subs	r0, #86	; 0x56
     6ae:	bf08      	it	eq
     6b0:	201c      	moveq	r0, #28
     6b2:	d005      	beq.n	6c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc0>
     6b4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     6b8:	389f      	subs	r0, #159	; 0x9f
     6ba:	bf14      	ite	ne
     6bc:	2000      	movne	r0, #0
     6be:	2032      	moveq	r0, #50	; 0x32
     6c0:	1c41      	adds	r1, r0, #1
     6c2:	9800      	ldr	r0, [sp, #0]
     6c4:	1a28      	subs	r0, r5, r0
     6c6:	0200      	lsls	r0, r0, #8
     6c8:	17c2      	asrs	r2, r0, #31
     6ca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6ce:	1200      	asrs	r0, r0, #8
     6d0:	4288      	cmp	r0, r1
     6d2:	db06      	blt.n	6e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe2>
     6d4:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     6d8:	f88a 4000 	strb.w	r4, [sl]
     6dc:	7844      	ldrb	r4, [r0, #1]
     6de:	2c20      	cmp	r4, #32
     6e0:	d1c6      	bne.n	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     6e2:	f89a 0000 	ldrb.w	r0, [sl]
     6e6:	f889 0000 	strb.w	r0, [r9]
     6ea:	2c20      	cmp	r4, #32
     6ec:	bf1c      	itt	ne
     6ee:	4825      	ldrne	r0, [pc, #148]	; (784 <CONFIG_BT_HCI_TX_STACK_SIZE+0x184>)
     6f0:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     6f4:	d040      	beq.n	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     6f6:	bf00      	nop
     6f8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     6fc:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     700:	6870      	ldr	r0, [r6, #4]
     702:	68bd      	ldr	r5, [r7, #8]
     704:	f107 0108 	add.w	r1, r7, #8
     708:	1a28      	subs	r0, r5, r0
     70a:	0200      	lsls	r0, r0, #8
     70c:	17c2      	asrs	r2, r0, #31
     70e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     712:	1200      	asrs	r0, r0, #8
     714:	d422      	bmi.n	75c <CONFIG_BT_HCI_TX_STACK_SIZE+0x15c>
     716:	89c8      	ldrh	r0, [r1, #14]
     718:	b370      	cbz	r0, 778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     71a:	89f0      	ldrh	r0, [r6, #14]
     71c:	bb60      	cbnz	r0, 778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     71e:	f8d6 b000 	ldr.w	fp, [r6]
     722:	f002 fec3 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     726:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     72a:	bf08      	it	eq
     72c:	200d      	moveq	r0, #13
     72e:	d00b      	beq.n	748 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     730:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     734:	3856      	subs	r0, #86	; 0x56
     736:	bf08      	it	eq
     738:	201c      	moveq	r0, #28
     73a:	d005      	beq.n	748 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     73c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     740:	389f      	subs	r0, #159	; 0x9f
     742:	bf14      	ite	ne
     744:	2000      	movne	r0, #0
     746:	2032      	moveq	r0, #50	; 0x32
     748:	1c41      	adds	r1, r0, #1
     74a:	eba5 000b 	sub.w	r0, r5, fp
     74e:	0200      	lsls	r0, r0, #8
     750:	17c2      	asrs	r2, r0, #31
     752:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     756:	1200      	asrs	r0, r0, #8
     758:	4288      	cmp	r0, r1
     75a:	da0d      	bge.n	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     75c:	f889 4000 	strb.w	r4, [r9]
     760:	7e38      	ldrb	r0, [r7, #24]
     762:	7c31      	ldrb	r1, [r6, #16]
     764:	4288      	cmp	r0, r1
     766:	d802      	bhi.n	76e <CONFIG_BT_HCI_TX_STACK_SIZE+0x16e>
     768:	2000      	movs	r0, #0
     76a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     76e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     772:	7844      	ldrb	r4, [r0, #1]
     774:	2c20      	cmp	r4, #32
     776:	d1bf      	bne.n	6f8 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf8>
     778:	2001      	movs	r0, #1
     77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     77e:	0000      	.short	0x0000
     780:	2000115c 	.word	0x2000115c
     784:	200010dc 	.word	0x200010dc
     788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     78c:	b082      	sub	sp, #8
     78e:	4605      	mov	r5, r0
     790:	4614      	mov	r4, r2
     792:	4688      	mov	r8, r1
     794:	89d0      	ldrh	r0, [r2, #14]
     796:	aa01      	add	r2, sp, #4
     798:	4669      	mov	r1, sp
     79a:	f001 ff8f 	bl	26bc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     79e:	f002 fcb7 	bl	3110 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     7a2:	f001 ff6f 	bl	2684 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7a6:	4607      	mov	r7, r0
     7a8:	4820      	ldr	r0, [pc, #128]	; (82c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c>)
     7aa:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
     7ae:	2920      	cmp	r1, #32
     7b0:	d004      	beq.n	7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>
     7b2:	68c0      	ldr	r0, [r0, #12]
     7b4:	1d40      	adds	r0, r0, #5
     7b6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     7ba:	e024      	b.n	806 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6>
     7bc:	89e0      	ldrh	r0, [r4, #14]
     7be:	f105 0609 	add.w	r6, r5, #9
     7c2:	b1b0      	cbz	r0, 7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     7c4:	f002 ff86 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     7c8:	b998      	cbnz	r0, 7f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f2>
     7ca:	f002 fe6f 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     7ce:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     7d2:	bf08      	it	eq
     7d4:	200d      	moveq	r0, #13
     7d6:	d00b      	beq.n	7f0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f0>
     7d8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     7dc:	3856      	subs	r0, #86	; 0x56
     7de:	bf08      	it	eq
     7e0:	201c      	moveq	r0, #28
     7e2:	d005      	beq.n	7f0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f0>
     7e4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     7e8:	389f      	subs	r0, #159	; 0x9f
     7ea:	bf14      	ite	ne
     7ec:	2000      	movne	r0, #0
     7ee:	2032      	moveq	r0, #50	; 0x32
     7f0:	4406      	add	r6, r0
     7f2:	f1b8 0f00 	cmp.w	r8, #0
     7f6:	d104      	bne.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7f8:	9800      	ldr	r0, [sp, #0]
     7fa:	4287      	cmp	r7, r0
     7fc:	bf84      	itt	hi
     7fe:	1a38      	subhi	r0, r7, r0
     800:	4406      	addhi	r6, r0
     802:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     806:	e9d4 2000 	ldrd	r2, r0, [r4]
     80a:	1a80      	subs	r0, r0, r2
     80c:	4408      	add	r0, r1
     80e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     812:	e9c4 1000 	strd	r1, r0, [r4]
     816:	42a9      	cmp	r1, r5
     818:	bf24      	itt	cs
     81a:	b002      	addcs	sp, #8
     81c:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
     820:	68a0      	ldr	r0, [r4, #8]
     822:	1c40      	adds	r0, r0, #1
     824:	60a0      	str	r0, [r4, #8]
     826:	b002      	add	sp, #8
     828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     82c:	2000115c 	.word	0x2000115c
     830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     834:	b097      	sub	sp, #92	; 0x5c
     836:	4617      	mov	r7, r2
     838:	468b      	mov	fp, r1
     83a:	4605      	mov	r5, r0
     83c:	f002 f9d0 	bl	2be0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     840:	4604      	mov	r4, r0
     842:	f002 fc65 	bl	3110 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     846:	4606      	mov	r6, r0
     848:	f1bb 0f01 	cmp.w	fp, #1
     84c:	bf18      	it	ne
     84e:	f1bb 0f02 	cmpne.w	fp, #2
     852:	d005      	beq.n	860 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x60>
     854:	f640 115d 	movw	r1, #2397	; 0x95d
     858:	f04f 0070 	mov.w	r0, #112	; 0x70
     85c:	f002 ffb2 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     860:	49f8      	ldr	r1, [pc, #992]	; (c44 <__data_size+0x2dc>)
     862:	2001      	movs	r0, #1
     864:	6008      	str	r0, [r1, #0]
     866:	49f8      	ldr	r1, [pc, #992]	; (c48 <__data_size+0x2e0>)
     868:	6889      	ldr	r1, [r1, #8]
     86a:	6008      	str	r0, [r1, #0]
     86c:	2000      	movs	r0, #0
     86e:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     872:	900c      	str	r0, [sp, #48]	; 0x30
     874:	1e40      	subs	r0, r0, #1
     876:	900d      	str	r0, [sp, #52]	; 0x34
     878:	49f4      	ldr	r1, [pc, #976]	; (c4c <__data_size+0x2e4>)
     87a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
     87e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     882:	f100 0108 	add.w	r1, r0, #8
     886:	f10d 0838 	add.w	r8, sp, #56	; 0x38
     88a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
     88e:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
     892:	6980      	ldr	r0, [r0, #24]
     894:	9012      	str	r0, [sp, #72]	; 0x48
     896:	a80e      	add	r0, sp, #56	; 0x38
     898:	f000 fbc4 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
     89c:	9007      	str	r0, [sp, #28]
     89e:	48ec      	ldr	r0, [pc, #944]	; (c50 <__data_size+0x2e8>)
     8a0:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
     8a4:	8b80      	ldrh	r0, [r0, #28]
     8a6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     8aa:	f1b8 0f00 	cmp.w	r8, #0
     8ae:	bf04      	itt	eq
     8b0:	2000      	moveq	r0, #0
     8b2:	9006      	streq	r0, [sp, #24]
     8b4:	d00b      	beq.n	8ce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xce>
     8b6:	2001      	movs	r0, #1
     8b8:	9006      	str	r0, [sp, #24]
     8ba:	48e5      	ldr	r0, [pc, #916]	; (c50 <__data_size+0x2e8>)
     8bc:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
     8c0:	b928      	cbnz	r0, 8ce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xce>
     8c2:	f002 ff07 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     8c6:	2800      	cmp	r0, #0
     8c8:	bf08      	it	eq
     8ca:	2701      	moveq	r7, #1
     8cc:	d000      	beq.n	8d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd0>
     8ce:	2700      	movs	r7, #0
     8d0:	f002 fdec 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     8d4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     8d8:	bf08      	it	eq
     8da:	200d      	moveq	r0, #13
     8dc:	d00b      	beq.n	8f6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf6>
     8de:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     8e2:	3856      	subs	r0, #86	; 0x56
     8e4:	bf08      	it	eq
     8e6:	201c      	moveq	r0, #28
     8e8:	d005      	beq.n	8f6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf6>
     8ea:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     8ee:	389f      	subs	r0, #159	; 0x9f
     8f0:	bf14      	ite	ne
     8f2:	2000      	movne	r0, #0
     8f4:	2032      	moveq	r0, #50	; 0x32
     8f6:	f04f 0900 	mov.w	r9, #0
     8fa:	46ca      	mov	sl, r9
     8fc:	900b      	str	r0, [sp, #44]	; 0x2c
     8fe:	4546      	cmp	r6, r8
     900:	d938      	bls.n	974 <__data_size+0xc>
     902:	9907      	ldr	r1, [sp, #28]
     904:	f8df 934c 	ldr.w	r9, [pc, #844]	; c54 <__data_size+0x2ec>
     908:	ea6f 0c06 	mvn.w	ip, r6
     90c:	466b      	mov	r3, sp
     90e:	aa16      	add	r2, sp, #88	; 0x58
     910:	eb01 000c 	add.w	r0, r1, ip
     914:	4549      	cmp	r1, r9
     916:	d904      	bls.n	922 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x122>
     918:	f240 516f 	movw	r1, #1391	; 0x56f
     91c:	2070      	movs	r0, #112	; 0x70
     91e:	f002 ff51 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     922:	49cd      	ldr	r1, [pc, #820]	; (c58 <__data_size+0x2f0>)
     924:	458c      	cmp	ip, r1
     926:	dd04      	ble.n	932 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x132>
     928:	f44f 61ae 	mov.w	r1, #1392	; 0x570
     92c:	2070      	movs	r0, #112	; 0x70
     92e:	f002 ff49 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     932:	49ca      	ldr	r1, [pc, #808]	; (c5c <__data_size+0x2f4>)
     934:	458c      	cmp	ip, r1
     936:	da04      	bge.n	942 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x142>
     938:	f240 5171 	movw	r1, #1393	; 0x571
     93c:	2070      	movs	r0, #112	; 0x70
     93e:	f002 ff41 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     942:	49c7      	ldr	r1, [pc, #796]	; (c60 <__data_size+0x2f8>)
     944:	4281      	cmp	r1, r0
     946:	bfdc      	itt	le
     948:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     94c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     950:	dd05      	ble.n	95e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15e>
     952:	2800      	cmp	r0, #0
     954:	bfbc      	itt	lt
     956:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     95a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     95e:	4619      	mov	r1, r3
     960:	f001 feac 	bl	26bc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     964:	9800      	ldr	r0, [sp, #0]
     966:	990e      	ldr	r1, [sp, #56]	; 0x38
     968:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     96c:	9000      	str	r0, [sp, #0]
     96e:	1a08      	subs	r0, r1, r0
     970:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
     974:	2f00      	cmp	r7, #0
     976:	bf18      	it	ne
     978:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
     97c:	d105      	bne.n	98a <__data_size+0x22>
     97e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     982:	2800      	cmp	r0, #0
     984:	bf18      	it	ne
     986:	f04f 0a02 	movne.w	sl, #2
     98a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     98e:	d008      	beq.n	9a2 <__data_size+0x3a>
     990:	980e      	ldr	r0, [sp, #56]	; 0x38
     992:	1b00      	subs	r0, r0, r4
     994:	0200      	lsls	r0, r0, #8
     996:	17c1      	asrs	r1, r0, #31
     998:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     99c:	1200      	asrs	r0, r0, #8
     99e:	2801      	cmp	r0, #1
     9a0:	da01      	bge.n	9a6 <__data_size+0x3e>
     9a2:	2003      	movs	r0, #3
     9a4:	e00d      	b.n	9c2 <__data_size+0x5a>
     9a6:	b157      	cbz	r7, 9be <__data_size+0x56>
     9a8:	48a9      	ldr	r0, [pc, #676]	; (c50 <__data_size+0x2e8>)
     9aa:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     9ae:	b130      	cbz	r0, 9be <__data_size+0x56>
     9b0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9b4:	f110 0a00 	adds.w	sl, r0, #0
     9b8:	bf18      	it	ne
     9ba:	f04f 0a02 	movne.w	sl, #2
     9be:	4625      	mov	r5, r4
     9c0:	2000      	movs	r0, #0
     9c2:	4482      	add	sl, r0
     9c4:	980e      	ldr	r0, [sp, #56]	; 0x38
     9c6:	eba0 0009 	sub.w	r0, r0, r9
     9ca:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9ce:	1e50      	subs	r0, r2, #1
     9d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9d4:	1b41      	subs	r1, r0, r5
     9d6:	0209      	lsls	r1, r1, #8
     9d8:	17cb      	asrs	r3, r1, #31
     9da:	eb01 6113 	add.w	r1, r1, r3, lsr #24
     9de:	1209      	asrs	r1, r1, #8
     9e0:	4551      	cmp	r1, sl
     9e2:	db04      	blt.n	9ee <__data_size+0x86>
     9e4:	f1b9 0f00 	cmp.w	r9, #0
     9e8:	bf18      	it	ne
     9ea:	920e      	strne	r2, [sp, #56]	; 0x38
     9ec:	e02d      	b.n	a4a <__data_size+0xe2>
     9ee:	f1b9 0f00 	cmp.w	r9, #0
     9f2:	d005      	beq.n	a00 <__data_size+0x98>
     9f4:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
     9f8:	b920      	cbnz	r0, a04 <__data_size+0x9c>
     9fa:	f002 fb7f 	bl	30fc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
     9fe:	b108      	cbz	r0, a04 <__data_size+0x9c>
     a00:	b9af      	cbnz	r7, a2e <__data_size+0xc6>
     a02:	e00c      	b.n	a1e <__data_size+0xb6>
     a04:	b92f      	cbnz	r7, a12 <__data_size+0xaa>
     a06:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a0a:	2800      	cmp	r0, #0
     a0c:	bf18      	it	ne
     a0e:	f1aa 0a02 	subne.w	sl, sl, #2
     a12:	f04f 0900 	mov.w	r9, #0
     a16:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
     a1a:	464e      	mov	r6, r9
     a1c:	e007      	b.n	a2e <__data_size+0xc6>
     a1e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a22:	b120      	cbz	r0, a2e <__data_size+0xc6>
     a24:	2000      	movs	r0, #0
     a26:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     a2a:	f1aa 0a02 	sub.w	sl, sl, #2
     a2e:	980e      	ldr	r0, [sp, #56]	; 0x38
     a30:	eba0 0009 	sub.w	r0, r0, r9
     a34:	1e40      	subs	r0, r0, #1
     a36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a3a:	1b41      	subs	r1, r0, r5
     a3c:	0209      	lsls	r1, r1, #8
     a3e:	17ca      	asrs	r2, r1, #31
     a40:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     a44:	1209      	asrs	r1, r1, #8
     a46:	4551      	cmp	r1, sl
     a48:	db7e      	blt.n	b48 <__data_size+0x1e0>
     a4a:	9714      	str	r7, [sp, #80]	; 0x50
     a4c:	4605      	mov	r5, r0
     a4e:	f04f 0900 	mov.w	r9, #0
     a52:	9f06      	ldr	r7, [sp, #24]
     a54:	f001 ff9c 	bl	2990 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a58:	1a28      	subs	r0, r5, r0
     a5a:	0200      	lsls	r0, r0, #8
     a5c:	17c1      	asrs	r1, r0, #31
     a5e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a62:	ea4f 2a20 	mov.w	sl, r0, asr #8
     a66:	f002 fd21 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     a6a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     a6e:	bf08      	it	eq
     a70:	200d      	moveq	r0, #13
     a72:	d00b      	beq.n	a8c <__data_size+0x124>
     a74:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     a78:	3856      	subs	r0, #86	; 0x56
     a7a:	bf08      	it	eq
     a7c:	201c      	moveq	r0, #28
     a7e:	d005      	beq.n	a8c <__data_size+0x124>
     a80:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     a84:	389f      	subs	r0, #159	; 0x9f
     a86:	bf14      	ite	ne
     a88:	2000      	movne	r0, #0
     a8a:	2032      	moveq	r0, #50	; 0x32
     a8c:	300b      	adds	r0, #11
     a8e:	4582      	cmp	sl, r0
     a90:	da20      	bge.n	ad4 <__data_size+0x16c>
     a92:	f1bb 0f01 	cmp.w	fp, #1
     a96:	d002      	beq.n	a9e <__data_size+0x136>
     a98:	9814      	ldr	r0, [sp, #80]	; 0x50
     a9a:	b140      	cbz	r0, aae <__data_size+0x146>
     a9c:	e012      	b.n	ac4 <__data_size+0x15c>
     a9e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     aa2:	d11c      	bne.n	ade <__data_size+0x176>
     aa4:	f640 01de 	movw	r1, #2270	; 0x8de
     aa8:	2070      	movs	r0, #112	; 0x70
     aaa:	f002 fe8b 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aae:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ab2:	d007      	beq.n	ac4 <__data_size+0x15c>
     ab4:	1b60      	subs	r0, r4, r5
     ab6:	0200      	lsls	r0, r0, #8
     ab8:	17c1      	asrs	r1, r0, #31
     aba:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     abe:	1200      	asrs	r0, r0, #8
     ac0:	2804      	cmp	r0, #4
     ac2:	dd04      	ble.n	ace <__data_size+0x166>
     ac4:	462c      	mov	r4, r5
     ac6:	4620      	mov	r0, r4
     ac8:	f001 ff88 	bl	29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     acc:	e007      	b.n	ade <__data_size+0x176>
     ace:	2800      	cmp	r0, #0
     ad0:	dc63      	bgt.n	b9a <__data_size+0x232>
     ad2:	e004      	b.n	ade <__data_size+0x176>
     ad4:	462c      	mov	r4, r5
     ad6:	4620      	mov	r0, r4
     ad8:	f001 ff80 	bl	29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     adc:	46b9      	mov	r9, r7
     ade:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ae2:	d055      	beq.n	b90 <__data_size+0x228>
     ae4:	980e      	ldr	r0, [sp, #56]	; 0x38
     ae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     ae8:	1b00      	subs	r0, r0, r4
     aea:	1b12      	subs	r2, r2, r4
     aec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     af0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     af4:	2801      	cmp	r0, #1
     af6:	d350      	bcc.n	b9a <__data_size+0x232>
     af8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     afc:	bf98      	it	ls
     afe:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
     b02:	d84a      	bhi.n	b9a <__data_size+0x232>
     b04:	4620      	mov	r0, r4
     b06:	f00b feb6 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b0a:	9907      	ldr	r1, [sp, #28]
     b0c:	4a52      	ldr	r2, [pc, #328]	; (c58 <__data_size+0x2f0>)
     b0e:	1a0d      	subs	r5, r1, r0
     b10:	f04f 0a00 	mov.w	sl, #0
     b14:	1aaa      	subs	r2, r5, r2
     b16:	f17a 0200 	sbcs.w	r2, sl, #0
     b1a:	d318      	bcc.n	b4e <__data_size+0x1e6>
     b1c:	4b4e      	ldr	r3, [pc, #312]	; (c58 <__data_size+0x2f0>)
     b1e:	1a42      	subs	r2, r0, r1
     b20:	1ad3      	subs	r3, r2, r3
     b22:	f17a 0300 	sbcs.w	r3, sl, #0
     b26:	d312      	bcc.n	b4e <__data_size+0x1e6>
     b28:	4b4a      	ldr	r3, [pc, #296]	; (c54 <__data_size+0x2ec>)
     b2a:	42ab      	cmp	r3, r5
     b2c:	bf3e      	ittt	cc
     b2e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
     b32:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
     b36:	1845      	addcc	r5, r0, r1
     b38:	d309      	bcc.n	b4e <__data_size+0x1e6>
     b3a:	4293      	cmp	r3, r2
     b3c:	d231      	bcs.n	ba2 <__data_size+0x23a>
     b3e:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
     b42:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
     b46:	e000      	b.n	b4a <__data_size+0x1e2>
     b48:	e027      	b.n	b9a <__data_size+0x232>
     b4a:	4408      	add	r0, r1
     b4c:	4245      	negs	r5, r0
     b4e:	4f40      	ldr	r7, [pc, #256]	; (c50 <__data_size+0x2e8>)
     b50:	7fb8      	ldrb	r0, [r7, #30]
     b52:	b358      	cbz	r0, bac <__data_size+0x244>
     b54:	f1bb 0f01 	cmp.w	fp, #1
     b58:	d005      	beq.n	b66 <__data_size+0x1fe>
     b5a:	2002      	movs	r0, #2
     b5c:	f002 f97a 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b60:	2001      	movs	r0, #1
     b62:	f002 f977 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b66:	45b0      	cmp	r8, r6
     b68:	d22c      	bcs.n	bc4 <__data_size+0x25c>
     b6a:	eba5 0106 	sub.w	r1, r5, r6
     b6e:	f04f 0002 	mov.w	r0, #2
     b72:	f002 f8b9 	bl	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     b76:	b390      	cbz	r0, bde <__data_size+0x276>
     b78:	f1b8 0f00 	cmp.w	r8, #0
     b7c:	bf1c      	itt	ne
     b7e:	eba5 0108 	subne.w	r1, r5, r8
     b82:	2001      	movne	r0, #1
     b84:	d034      	beq.n	bf0 <__data_size+0x288>
     b86:	bf00      	nop
     b88:	f002 f8ae 	bl	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     b8c:	b338      	cbz	r0, bde <__data_size+0x276>
     b8e:	e02f      	b.n	bf0 <__data_size+0x288>
     b90:	f640 11f1 	movw	r1, #2545	; 0x9f1
     b94:	2070      	movs	r0, #112	; 0x70
     b96:	f002 fe15 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b9a:	b017      	add	sp, #92	; 0x5c
     b9c:	2000      	movs	r0, #0
     b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ba2:	f640 21c2 	movw	r1, #2754	; 0xac2
     ba6:	2070      	movs	r0, #112	; 0x70
     ba8:	f002 fe0c 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bac:	45b0      	cmp	r8, r6
     bae:	bf34      	ite	cc
     bb0:	4630      	movcc	r0, r6
     bb2:	4640      	movcs	r0, r8
     bb4:	301e      	adds	r0, #30
     bb6:	42a8      	cmp	r0, r5
     bb8:	dbcc      	blt.n	b54 <__data_size+0x1ec>
     bba:	f640 2105 	movw	r1, #2565	; 0xa05
     bbe:	2070      	movs	r0, #112	; 0x70
     bc0:	f002 fe00 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bc4:	d90c      	bls.n	be0 <__data_size+0x278>
     bc6:	eba5 0108 	sub.w	r1, r5, r8
     bca:	2001      	movs	r0, #1
     bcc:	f002 f88c 	bl	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bd0:	b128      	cbz	r0, bde <__data_size+0x276>
     bd2:	2e00      	cmp	r6, #0
     bd4:	bf1c      	itt	ne
     bd6:	1ba9      	subne	r1, r5, r6
     bd8:	2002      	movne	r0, #2
     bda:	d009      	beq.n	bf0 <__data_size+0x288>
     bdc:	e7d4      	b.n	b88 <__data_size+0x220>
     bde:	e030      	b.n	c42 <__data_size+0x2da>
     be0:	ea56 0008 	orrs.w	r0, r6, r8
     be4:	d004      	beq.n	bf0 <__data_size+0x288>
     be6:	f640 1141 	movw	r1, #2369	; 0x941
     bea:	2070      	movs	r0, #112	; 0x70
     bec:	f002 fdea 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bf0:	4629      	mov	r1, r5
     bf2:	2000      	movs	r0, #0
     bf4:	f002 f878 	bl	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bf8:	b318      	cbz	r0, c42 <__data_size+0x2da>
     bfa:	9806      	ldr	r0, [sp, #24]
     bfc:	2601      	movs	r6, #1
     bfe:	2800      	cmp	r0, #0
     c00:	bf04      	itt	eq
     c02:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
     c06:	2800      	cmpeq	r0, #0
     c08:	d002      	beq.n	c10 <__data_size+0x2a8>
     c0a:	f1b9 0f00 	cmp.w	r9, #0
     c0e:	d033      	beq.n	c78 <__data_size+0x310>
     c10:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
     c14:	b118      	cbz	r0, c1e <__data_size+0x2b6>
     c16:	f002 fc4f 	bl	34b8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c1a:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
     c1e:	f1b9 0f00 	cmp.w	r9, #0
     c22:	d02c      	beq.n	c7e <__data_size+0x316>
     c24:	980b      	ldr	r0, [sp, #44]	; 0x2c
     c26:	1a20      	subs	r0, r4, r0
     c28:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c2c:	2005      	movs	r0, #5
     c2e:	f002 f85b 	bl	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c32:	b3e0      	cbz	r0, cae <__data_size+0x346>
     c34:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
     c38:	2800      	cmp	r0, #0
     c3a:	bf08      	it	eq
     c3c:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
     c40:	e025      	b.n	c8e <__data_size+0x326>
     c42:	e00f      	b.n	c64 <__data_size+0x2fc>
     c44:	40000508 	.word	0x40000508
     c48:	20000038 	.word	0x20000038
     c4c:	20000d5c 	.word	0x20000d5c
     c50:	2000115c 	.word	0x2000115c
     c54:	1e847fff 	.word	0x1e847fff
     c58:	0f424000 	.word	0x0f424000
     c5c:	f0bdc000 	.word	0xf0bdc000
     c60:	1e848000 	.word	0x1e848000
     c64:	2002      	movs	r0, #2
     c66:	f002 f8f5 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c6a:	2001      	movs	r0, #1
     c6c:	f002 f8f2 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c70:	b017      	add	sp, #92	; 0x5c
     c72:	2000      	movs	r0, #0
     c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c78:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
     c7c:	b190      	cbz	r0, ca4 <__data_size+0x33c>
     c7e:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
     c82:	b120      	cbz	r0, c8e <__data_size+0x326>
     c84:	2005      	movs	r0, #5
     c86:	f002 f8e5 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c8a:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
     c8e:	eba5 0008 	sub.w	r0, r5, r8
     c92:	f1a0 0119 	sub.w	r1, r0, #25
     c96:	2900      	cmp	r1, #0
     c98:	dc0f      	bgt.n	cba <__data_size+0x352>
     c9a:	f640 212e 	movw	r1, #2606	; 0xa2e
     c9e:	2070      	movs	r0, #112	; 0x70
     ca0:	f002 fd90 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ca4:	f002 fc24 	bl	34f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     ca8:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
     cac:	e7b7      	b.n	c1e <__data_size+0x2b6>
     cae:	e7ff      	b.n	cb0 <__data_size+0x348>
     cb0:	f240 21f2 	movw	r1, #754	; 0x2f2
     cb4:	2070      	movs	r0, #112	; 0x70
     cb6:	f002 fd85 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cba:	2003      	movs	r0, #3
     cbc:	f002 f814 	bl	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cc0:	b1c0      	cbz	r0, cf4 <__data_size+0x38c>
     cc2:	480f      	ldr	r0, [pc, #60]	; (d00 <__data_size+0x398>)
     cc4:	6880      	ldr	r0, [r0, #8]
     cc6:	f8c0 a000 	str.w	sl, [r0]
     cca:	480e      	ldr	r0, [pc, #56]	; (d04 <__data_size+0x39c>)
     ccc:	f8c0 a000 	str.w	sl, [r0]
     cd0:	ac0c      	add	r4, sp, #48	; 0x30
     cd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     cd6:	6038      	str	r0, [r7, #0]
     cd8:	6079      	str	r1, [r7, #4]
     cda:	60ba      	str	r2, [r7, #8]
     cdc:	60fb      	str	r3, [r7, #12]
     cde:	ac10      	add	r4, sp, #64	; 0x40
     ce0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     ce4:	6138      	str	r0, [r7, #16]
     ce6:	6179      	str	r1, [r7, #20]
     ce8:	61ba      	str	r2, [r7, #24]
     cea:	61fb      	str	r3, [r7, #28]
     cec:	b017      	add	sp, #92	; 0x5c
     cee:	2001      	movs	r0, #1
     cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cf4:	f640 2136 	movw	r1, #2614	; 0xa36
     cf8:	2070      	movs	r0, #112	; 0x70
     cfa:	f002 fd63 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cfe:	0000      	.short	0x0000
     d00:	20000038 	.word	0x20000038
     d04:	40000508 	.word	0x40000508
     d08:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     d0c:	4606      	mov	r6, r0
     d0e:	7808      	ldrb	r0, [r1, #0]
     d10:	7490      	strb	r0, [r2, #18]
     d12:	7ac8      	ldrb	r0, [r1, #11]
     d14:	7450      	strb	r0, [r2, #17]
     d16:	7a88      	ldrb	r0, [r1, #10]
     d18:	7410      	strb	r0, [r2, #16]
     d1a:	8908      	ldrh	r0, [r1, #8]
     d1c:	81d0      	strh	r0, [r2, #14]
     d1e:	f8df 8198 	ldr.w	r8, [pc, #408]	; eb8 <__data_size+0x550>
     d22:	6870      	ldr	r0, [r6, #4]
     d24:	469a      	mov	sl, r3
     d26:	fba0 7908 	umull	r7, r9, r0, r8
     d2a:	4614      	mov	r4, r2
     d2c:	460d      	mov	r5, r1
     d2e:	6830      	ldr	r0, [r6, #0]
     d30:	f00b fda1 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     d34:	19c1      	adds	r1, r0, r7
     d36:	7828      	ldrb	r0, [r5, #0]
     d38:	ea4f 0c68 	mov.w	ip, r8, asr #1
     d3c:	f149 0200 	adc.w	r2, r9, #0
     d40:	f1a8 0e01 	sub.w	lr, r8, #1
     d44:	f1cc 0b00 	rsb	fp, ip, #0
     d48:	b168      	cbz	r0, d66 <__data_size+0x3fe>
     d4a:	89e0      	ldrh	r0, [r4, #14]
     d4c:	7c67      	ldrb	r7, [r4, #17]
     d4e:	43c0      	mvns	r0, r0
     d50:	f8d5 9004 	ldr.w	r9, [r5, #4]
     d54:	f104 020c 	add.w	r2, r4, #12
     d58:	4560      	cmp	r0, ip
     d5a:	dd5f      	ble.n	e1c <__data_size+0x4b4>
     d5c:	f44f 61ae 	mov.w	r1, #1392	; 0x570
     d60:	2070      	movs	r0, #112	; 0x70
     d62:	f002 fd2f 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d66:	f8df 9154 	ldr.w	r9, [pc, #340]	; ebc <__data_size+0x554>
     d6a:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
     d6e:	eb11 0a09 	adds.w	sl, r1, r9
     d72:	f142 0900 	adc.w	r9, r2, #0
     d76:	ebb0 0a0a 	subs.w	sl, r0, sl
     d7a:	eb73 0909 	sbcs.w	r9, r3, r9
     d7e:	d245      	bcs.n	e0c <__data_size+0x4a4>
     d80:	1a41      	subs	r1, r0, r1
     d82:	eb73 0102 	sbcs.w	r1, r3, r2
     d86:	d341      	bcc.n	e0c <__data_size+0x4a4>
     d88:	1bc7      	subs	r7, r0, r7
     d8a:	6870      	ldr	r0, [r6, #4]
     d8c:	60a0      	str	r0, [r4, #8]
     d8e:	4547      	cmp	r7, r8
     d90:	d305      	bcc.n	d9e <__data_size+0x436>
     d92:	1c40      	adds	r0, r0, #1
     d94:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
     d98:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
     d9c:	60a0      	str	r0, [r4, #8]
     d9e:	89e0      	ldrh	r0, [r4, #14]
     da0:	686d      	ldr	r5, [r5, #4]
     da2:	43c1      	mvns	r1, r0
     da4:	7c66      	ldrb	r6, [r4, #17]
     da6:	1878      	adds	r0, r7, r1
     da8:	f104 020c 	add.w	r2, r4, #12
     dac:	4577      	cmp	r7, lr
     dae:	d904      	bls.n	dba <__data_size+0x452>
     db0:	f240 516f 	movw	r1, #1391	; 0x56f
     db4:	2070      	movs	r0, #112	; 0x70
     db6:	f002 fd05 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dba:	4561      	cmp	r1, ip
     dbc:	dcce      	bgt.n	d5c <__data_size+0x3f4>
     dbe:	4559      	cmp	r1, fp
     dc0:	db2f      	blt.n	e22 <__data_size+0x4ba>
     dc2:	4580      	cmp	r8, r0
     dc4:	bfdc      	itt	le
     dc6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     dca:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     dce:	dd05      	ble.n	ddc <__data_size+0x474>
     dd0:	2800      	cmp	r0, #0
     dd2:	bfbc      	itt	lt
     dd4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     dd8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     ddc:	4621      	mov	r1, r4
     dde:	f001 fc6d 	bl	26bc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     de2:	6820      	ldr	r0, [r4, #0]
     de4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     de8:	1978      	adds	r0, r7, r5
     dea:	1c40      	adds	r0, r0, #1
     dec:	6021      	str	r1, [r4, #0]
     dee:	2e00      	cmp	r6, #0
     df0:	bf08      	it	eq
     df2:	307a      	addeq	r0, #122	; 0x7a
     df4:	d003      	beq.n	dfe <__data_size+0x496>
     df6:	2e01      	cmp	r6, #1
     df8:	bf08      	it	eq
     dfa:	3048      	addeq	r0, #72	; 0x48
     dfc:	d134      	bne.n	e68 <__data_size+0x500>
     dfe:	f001 fc41 	bl	2684 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e06:	6060      	str	r0, [r4, #4]
     e08:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     e0c:	6830      	ldr	r0, [r6, #0]
     e0e:	1e40      	subs	r0, r0, #1
     e10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e14:	6020      	str	r0, [r4, #0]
     e16:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     e1a:	e7f4      	b.n	e06 <__data_size+0x49e>
     e1c:	4601      	mov	r1, r0
     e1e:	4558      	cmp	r0, fp
     e20:	da04      	bge.n	e2c <__data_size+0x4c4>
     e22:	f240 5171 	movw	r1, #1393	; 0x571
     e26:	2070      	movs	r0, #112	; 0x70
     e28:	f002 fccc 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e2c:	4580      	cmp	r8, r0
     e2e:	bfdc      	itt	le
     e30:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     e34:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     e38:	dd05      	ble.n	e46 <__data_size+0x4de>
     e3a:	2800      	cmp	r0, #0
     e3c:	bfbc      	itt	lt
     e3e:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     e42:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     e46:	4621      	mov	r1, r4
     e48:	f001 fc38 	bl	26bc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e4c:	6820      	ldr	r0, [r4, #0]
     e4e:	2f00      	cmp	r7, #0
     e50:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e54:	f109 0001 	add.w	r0, r9, #1
     e58:	6021      	str	r1, [r4, #0]
     e5a:	bf08      	it	eq
     e5c:	307a      	addeq	r0, #122	; 0x7a
     e5e:	d008      	beq.n	e72 <__data_size+0x50a>
     e60:	2f01      	cmp	r7, #1
     e62:	bf08      	it	eq
     e64:	3048      	addeq	r0, #72	; 0x48
     e66:	d004      	beq.n	e72 <__data_size+0x50a>
     e68:	f240 6124 	movw	r1, #1572	; 0x624
     e6c:	2070      	movs	r0, #112	; 0x70
     e6e:	f002 fca9 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e72:	f001 fc07 	bl	2684 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e76:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e7a:	6061      	str	r1, [r4, #4]
     e7c:	6870      	ldr	r0, [r6, #4]
     e7e:	60a0      	str	r0, [r4, #8]
     e80:	2100      	movs	r1, #0
     e82:	4622      	mov	r2, r4
     e84:	6830      	ldr	r0, [r6, #0]
     e86:	f7ff fc7f 	bl	788 <CONFIG_BT_HCI_TX_STACK_SIZE+0x188>
     e8a:	6832      	ldr	r2, [r6, #0]
     e8c:	4653      	mov	r3, sl
     e8e:	4621      	mov	r1, r4
     e90:	6928      	ldr	r0, [r5, #16]
     e92:	f7ff fa25 	bl	2e0 <MPSL_IRQ_RADIO_Handler+0xb8>
     e96:	2800      	cmp	r0, #0
     e98:	bf18      	it	ne
     e9a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     e9e:	e9d4 2100 	ldrd	r2, r1, [r4]
     ea2:	6830      	ldr	r0, [r6, #0]
     ea4:	1a89      	subs	r1, r1, r2
     ea6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     eaa:	4408      	add	r0, r1
     eac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     eb0:	e9c4 2000 	strd	r2, r0, [r4]
     eb4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     eb8:	1e848000 	.word	0x1e848000
     ebc:	0f424000 	.word	0x0f424000
     ec0:	b570      	push	{r4, r5, r6, lr}
     ec2:	4d1e      	ldr	r5, [pc, #120]	; (f3c <__data_size+0x5d4>)
     ec4:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
     ec8:	2820      	cmp	r0, #32
     eca:	bf18      	it	ne
     ecc:	bd70      	popne	{r4, r5, r6, pc}
     ece:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
     ed2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
     ed6:	4428      	add	r0, r5
     ed8:	f890 4020 	ldrb.w	r4, [r0, #32]
     edc:	2c20      	cmp	r4, #32
     ede:	d027      	beq.n	f30 <__data_size+0x5c8>
     ee0:	4b17      	ldr	r3, [pc, #92]	; (f40 <__data_size+0x5d8>)
     ee2:	eb03 1182 	add.w	r1, r3, r2, lsl #6
     ee6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
     eea:	7849      	ldrb	r1, [r1, #1]
     eec:	f880 1020 	strb.w	r1, [r0, #32]
     ef0:	20ff      	movs	r0, #255	; 0xff
     ef2:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
     ef6:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
     efa:	4621      	mov	r1, r4
     efc:	2002      	movs	r0, #2
     efe:	f000 f8cb 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     f02:	2000      	movs	r0, #0
     f04:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
     f08:	77a8      	strb	r0, [r5, #30]
     f0a:	490e      	ldr	r1, [pc, #56]	; (f44 <__data_size+0x5dc>)
     f0c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     f10:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     f14:	7e00      	ldrb	r0, [r0, #24]
     f16:	2800      	cmp	r0, #0
     f18:	bf08      	it	eq
     f1a:	f002 fe5f 	bleq	3bdc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
     f1e:	2000      	movs	r0, #0
     f20:	4909      	ldr	r1, [pc, #36]	; (f48 <__data_size+0x5e0>)
     f22:	6849      	ldr	r1, [r1, #4]
     f24:	2900      	cmp	r1, #0
     f26:	bf08      	it	eq
     f28:	bd70      	popeq	{r4, r5, r6, pc}
     f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     f2e:	4708      	bx	r1
     f30:	f44f 714b 	mov.w	r1, #812	; 0x32c
     f34:	2070      	movs	r0, #112	; 0x70
     f36:	f002 fc45 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f3a:	0000      	.short	0x0000
     f3c:	2000115c 	.word	0x2000115c
     f40:	200010dc 	.word	0x200010dc
     f44:	20000d5c 	.word	0x20000d5c
     f48:	20000038 	.word	0x20000038
     f4c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     f50:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     f54:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
     f58:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     f5c:	4440      	add	r0, r8
     f5e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     f62:	2c20      	cmp	r4, #32
     f64:	bf08      	it	eq
     f66:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     f6a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     f6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     f72:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
     f76:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
     f7a:	2607      	movs	r6, #7
     f7c:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     f80:	2801      	cmp	r0, #1
     f82:	d00e      	beq.n	fa2 <__data_size+0x63a>
     f84:	2804      	cmp	r0, #4
     f86:	bf08      	it	eq
     f88:	2602      	moveq	r6, #2
     f8a:	d00a      	beq.n	fa2 <__data_size+0x63a>
     f8c:	2805      	cmp	r0, #5
     f8e:	bf0c      	ite	eq
     f90:	2603      	moveq	r6, #3
     f92:	2806      	cmpne	r0, #6
     f94:	d005      	beq.n	fa2 <__data_size+0x63a>
     f96:	f640 01a8 	movw	r1, #2216	; 0x8a8
     f9a:	f04f 0070 	mov.w	r0, #112	; 0x70
     f9e:	f002 fc11 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fa2:	f1bb 0f00 	cmp.w	fp, #0
     fa6:	bf18      	it	ne
     fa8:	f3af 8000 	nopne.w
     fac:	f3ef 8010 	mrs	r0, PRIMASK
     fb0:	b672      	cpsid	i
     fb2:	eb07 0144 	add.w	r1, r7, r4, lsl #1
     fb6:	784a      	ldrb	r2, [r1, #1]
     fb8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     fbc:	4441      	add	r1, r8
     fbe:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
     fc2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
     fc6:	42a2      	cmp	r2, r4
     fc8:	bf04      	itt	eq
     fca:	2220      	moveq	r2, #32
     fcc:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
     fd0:	b1c0      	cbz	r0, 1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     fd2:	462a      	mov	r2, r5
     fd4:	4621      	mov	r1, r4
     fd6:	2001      	movs	r0, #1
     fd8:	f000 f85e 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     fdc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
     fe0:	eb09 0081 	add.w	r0, r9, r1, lsl #2
     fe4:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
     fe8:	6840      	ldr	r0, [r0, #4]
     fea:	4631      	mov	r1, r6
     fec:	4790      	blx	r2
     fee:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
     ff2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     ff6:	4440      	add	r0, r8
     ff8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     ffc:	2c20      	cmp	r4, #32
     ffe:	d1ba      	bne.n	f76 <__data_size+0x60e>
    1000:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1004:	4806      	ldr	r0, [pc, #24]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    1006:	2800      	cmp	r0, #0
    1008:	bf18      	it	ne
    100a:	f3af 8000 	nopne.w
    100e:	b662      	cpsie	i
    1010:	e7df      	b.n	fd2 <__data_size+0x66a>
    1012:	0000      	.short	0x0000
    1014:	2000115c 	.word	0x2000115c
    1018:	00000000 	.word	0x00000000
    101c:	200010dc 	.word	0x200010dc
    1020:	00000000 	.word	0x00000000
    1024:	b510      	push	{r4, lr}
    1026:	4604      	mov	r4, r0
    1028:	6800      	ldr	r0, [r0, #0]
    102a:	f00b fc24 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    102e:	4602      	mov	r2, r0
    1030:	89e0      	ldrh	r0, [r4, #14]
    1032:	7b21      	ldrb	r1, [r4, #12]
    1034:	4b14      	ldr	r3, [pc, #80]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    1036:	4408      	add	r0, r1
    1038:	1c41      	adds	r1, r0, #1
    103a:	1850      	adds	r0, r2, r1
    103c:	429a      	cmp	r2, r3
    103e:	d904      	bls.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    1040:	f240 516f 	movw	r1, #1391	; 0x56f
    1044:	2070      	movs	r0, #112	; 0x70
    1046:	f002 fbbd 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    104a:	4a10      	ldr	r2, [pc, #64]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    104c:	4291      	cmp	r1, r2
    104e:	dd04      	ble.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    1050:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1054:	2070      	movs	r0, #112	; 0x70
    1056:	f002 fbb5 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    105a:	4a0d      	ldr	r2, [pc, #52]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    105c:	4291      	cmp	r1, r2
    105e:	da04      	bge.n	106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    1060:	f240 5171 	movw	r1, #1393	; 0x571
    1064:	2070      	movs	r0, #112	; 0x70
    1066:	f002 fbad 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    106a:	490a      	ldr	r1, [pc, #40]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    106c:	4281      	cmp	r1, r0
    106e:	bfde      	ittt	le
    1070:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1074:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1078:	bd10      	pople	{r4, pc}
    107a:	2800      	cmp	r0, #0
    107c:	bfbc      	itt	lt
    107e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1082:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1086:	bd10      	pop	{r4, pc}
    1088:	1e847fff 	.word	0x1e847fff
    108c:	0f424000 	.word	0x0f424000
    1090:	f0bdc000 	.word	0xf0bdc000
    1094:	1e848000 	.word	0x1e848000
    1098:	f8df c058 	ldr.w	ip, [pc, #88]	; 10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    109c:	b510      	push	{r4, lr}
    109e:	2300      	movs	r3, #0
    10a0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    10a4:	2807      	cmp	r0, #7
    10a6:	d21f      	bcs.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10a8:	e8df f000 	tbb	[pc, r0]
    10ac:	05050505 	.word	0x05050505
    10b0:	00040404 	.word	0x00040404
    10b4:	2301      	movs	r3, #1
    10b6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    10ba:	2b00      	cmp	r3, #0
    10bc:	bf08      	it	eq
    10be:	bd10      	popeq	{r4, pc}
    10c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    10c4:	480c      	ldr	r0, [pc, #48]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    10c6:	4402      	add	r2, r0
    10c8:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    10cc:	2820      	cmp	r0, #32
    10ce:	bf0e      	itee	eq
    10d0:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    10d4:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    10d8:	7041      	strbne	r1, [r0, #1]
    10da:	2020      	movs	r0, #32
    10dc:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    10e0:	7058      	strb	r0, [r3, #1]
    10e2:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    10e6:	bd10      	pop	{r4, pc}
    10e8:	f44f 711a 	mov.w	r1, #616	; 0x268
    10ec:	2070      	movs	r0, #112	; 0x70
    10ee:	f002 fb69 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10f2:	0000      	.short	0x0000
    10f4:	200010dc 	.word	0x200010dc
    10f8:	2000115c 	.word	0x2000115c
    10fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1100:	4617      	mov	r7, r2
    1102:	f8df a158 	ldr.w	sl, [pc, #344]	; 125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>
    1106:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    110a:	4450      	add	r0, sl
    110c:	4688      	mov	r8, r1
    110e:	f890 4020 	ldrb.w	r4, [r0, #32]
    1112:	2901      	cmp	r1, #1
    1114:	4625      	mov	r5, r4
    1116:	bf18      	it	ne
    1118:	f1b8 0f02 	cmpne.w	r8, #2
    111c:	d005      	beq.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
    111e:	f640 216c 	movw	r1, #2668	; 0xa6c
    1122:	f04f 0070 	mov.w	r0, #112	; 0x70
    1126:	f002 fb4d 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    112a:	f04f 0b00 	mov.w	fp, #0
    112e:	2d20      	cmp	r5, #32
    1130:	d044      	beq.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    1132:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1136:	2600      	movs	r6, #0
    1138:	2800      	cmp	r0, #0
    113a:	bf08      	it	eq
    113c:	2602      	moveq	r6, #2
    113e:	f001 fc27 	bl	2990 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1142:	4b47      	ldr	r3, [pc, #284]	; (1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>)
    1144:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1148:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    114c:	688a      	ldr	r2, [r1, #8]
    114e:	68c9      	ldr	r1, [r1, #12]
    1150:	1a12      	subs	r2, r2, r0
    1152:	1a09      	subs	r1, r1, r0
    1154:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1158:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    115c:	4296      	cmp	r6, r2
    115e:	bf99      	ittee	ls
    1160:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1164:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1168:	4a3e      	ldrhi	r2, [pc, #248]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    116a:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    116e:	d923      	bls.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    1170:	4622      	mov	r2, r4
    1172:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    1176:	784c      	ldrb	r4, [r1, #1]
    1178:	2c20      	cmp	r4, #32
    117a:	d015      	beq.n	11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
    117c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1180:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    1184:	f8dc 1008 	ldr.w	r1, [ip, #8]
    1188:	f8dc c00c 	ldr.w	ip, [ip, #12]
    118c:	1a09      	subs	r1, r1, r0
    118e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1192:	ebac 0c00 	sub.w	ip, ip, r0
    1196:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    119a:	428e      	cmp	r6, r1
    119c:	bf9c      	itt	ls
    119e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    11a2:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    11a6:	d8e3      	bhi.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    11a8:	2a20      	cmp	r2, #32
    11aa:	d005      	beq.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    11ac:	463b      	mov	r3, r7
    11ae:	2120      	movs	r1, #32
    11b0:	2004      	movs	r0, #4
    11b2:	f7ff f859 	bl	268 <MPSL_IRQ_RADIO_Handler+0x40>
    11b6:	4604      	mov	r4, r0
    11b8:	42ac      	cmp	r4, r5
    11ba:	d10f      	bne.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    11bc:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    11c0:	2820      	cmp	r0, #32
    11c2:	d00f      	beq.n	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
    11c4:	9900      	ldr	r1, [sp, #0]
    11c6:	f8da 0008 	ldr.w	r0, [sl, #8]
    11ca:	1c89      	adds	r1, r1, #2
    11cc:	1a08      	subs	r0, r1, r0
    11ce:	0200      	lsls	r0, r0, #8
    11d0:	17c1      	asrs	r1, r0, #31
    11d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11d6:	1200      	asrs	r0, r0, #8
    11d8:	2800      	cmp	r0, #0
    11da:	dd03      	ble.n	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
    11dc:	b003      	add	sp, #12
    11de:	2000      	movs	r0, #0
    11e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11e4:	2d20      	cmp	r5, #32
    11e6:	d016      	beq.n	1216 <CONFIG_FPROTECT_BLOCK_SIZE+0x216>
    11e8:	462a      	mov	r2, r5
    11ea:	4641      	mov	r1, r8
    11ec:	9800      	ldr	r0, [sp, #0]
    11ee:	f7ff fb1f 	bl	830 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30>
    11f2:	2800      	cmp	r0, #0
    11f4:	bf1f      	itttt	ne
    11f6:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    11fa:	2002      	movne	r0, #2
    11fc:	b003      	addne	sp, #12
    11fe:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1202:	463b      	mov	r3, r7
    1204:	462a      	mov	r2, r5
    1206:	2120      	movs	r1, #32
    1208:	2004      	movs	r0, #4
    120a:	f7ff f82d 	bl	268 <MPSL_IRQ_RADIO_Handler+0x40>
    120e:	b003      	add	sp, #12
    1210:	2000      	movs	r0, #0
    1212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1216:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    121a:	b118      	cbz	r0, 1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    121c:	f002 f94c 	bl	34b8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1220:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1224:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    1228:	b120      	cbz	r0, 1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>
    122a:	2005      	movs	r0, #5
    122c:	f001 fe12 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1230:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1234:	2004      	movs	r0, #4
    1236:	f001 fe0d 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    123a:	f001 fe7b 	bl	2f34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    123e:	2020      	movs	r0, #32
    1240:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1244:	4808      	ldr	r0, [pc, #32]	; (1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
    1246:	6880      	ldr	r0, [r0, #8]
    1248:	f8c0 b000 	str.w	fp, [r0]
    124c:	4807      	ldr	r0, [pc, #28]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    124e:	f8c0 b000 	str.w	fp, [r0]
    1252:	b003      	add	sp, #12
    1254:	2001      	movs	r0, #1
    1256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    125a:	0000      	.short	0x0000
    125c:	2000115c 	.word	0x2000115c
    1260:	20000d5c 	.word	0x20000d5c
    1264:	200010dc 	.word	0x200010dc
    1268:	20000038 	.word	0x20000038
    126c:	40000508 	.word	0x40000508

00001270 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1274:	4e69      	ldr	r6, [pc, #420]	; (141c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1276:	4607      	mov	r7, r0
    1278:	b08d      	sub	sp, #52	; 0x34
    127a:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    127e:	4688      	mov	r8, r1
    1280:	2820      	cmp	r0, #32
    1282:	d055      	beq.n	1330 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1284:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1288:	f106 0408 	add.w	r4, r6, #8
    128c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1290:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1294:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1298:	2020      	movs	r0, #32
    129a:	f88d 0020 	strb.w	r0, [sp, #32]
    129e:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    12a2:	aa0a      	add	r2, sp, #40	; 0x28
    12a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    12a8:	4430      	add	r0, r6
    12aa:	a909      	add	r1, sp, #36	; 0x24
    12ac:	f890 5020 	ldrb.w	r5, [r0, #32]
    12b0:	68f0      	ldr	r0, [r6, #12]
    12b2:	9002      	str	r0, [sp, #8]
    12b4:	6830      	ldr	r0, [r6, #0]
    12b6:	4438      	add	r0, r7
    12b8:	f001 fa00 	bl	26bc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    12bc:	f8da 000c 	ldr.w	r0, [sl, #12]
    12c0:	9909      	ldr	r1, [sp, #36]	; 0x24
    12c2:	2f65      	cmp	r7, #101	; 0x65
    12c4:	4408      	add	r0, r1
    12c6:	d338      	bcc.n	133a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    12c8:	4a55      	ldr	r2, [pc, #340]	; (1420 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    12ca:	2100      	movs	r1, #0
    12cc:	1bd2      	subs	r2, r2, r7
    12ce:	eb71 0201 	sbcs.w	r2, r1, r1
    12d2:	d332      	bcc.n	133a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    12d4:	6822      	ldr	r2, [r4, #0]
    12d6:	1a82      	subs	r2, r0, r2
    12d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    12dc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    12e0:	d82b      	bhi.n	133a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    12e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    12e6:	6060      	str	r0, [r4, #4]
    12e8:	4630      	mov	r0, r6
    12ea:	f884 8010 	strb.w	r8, [r4, #16]
    12ee:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    12f2:	f10d 0a20 	add.w	sl, sp, #32
    12f6:	2d20      	cmp	r5, #32
    12f8:	bf1c      	itt	ne
    12fa:	494a      	ldrne	r1, [pc, #296]	; (1424 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    12fc:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1300:	d050      	beq.n	13a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1302:	bf00      	nop
    1304:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1308:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    130c:	6861      	ldr	r1, [r4, #4]
    130e:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1312:	f108 0008 	add.w	r0, r8, #8
    1316:	1a71      	subs	r1, r6, r1
    1318:	0209      	lsls	r1, r1, #8
    131a:	17ca      	asrs	r2, r1, #31
    131c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1320:	1209      	asrs	r1, r1, #8
    1322:	d42d      	bmi.n	1380 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    1324:	89c0      	ldrh	r0, [r0, #14]
    1326:	2800      	cmp	r0, #0
    1328:	d03c      	beq.n	13a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    132a:	89e0      	ldrh	r0, [r4, #14]
    132c:	b148      	cbz	r0, 1342 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    132e:	e039      	b.n	13a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1330:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    1334:	2070      	movs	r0, #112	; 0x70
    1336:	f002 fa45 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    133a:	b00d      	add	sp, #52	; 0x34
    133c:	2001      	movs	r0, #1
    133e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1342:	6820      	ldr	r0, [r4, #0]
    1344:	900c      	str	r0, [sp, #48]	; 0x30
    1346:	f002 f8b1 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    134a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    134e:	bf08      	it	eq
    1350:	200d      	moveq	r0, #13
    1352:	d00b      	beq.n	136c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1354:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1358:	3856      	subs	r0, #86	; 0x56
    135a:	bf08      	it	eq
    135c:	201c      	moveq	r0, #28
    135e:	d005      	beq.n	136c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1360:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1364:	389f      	subs	r0, #159	; 0x9f
    1366:	bf14      	ite	ne
    1368:	2000      	movne	r0, #0
    136a:	2032      	moveq	r0, #50	; 0x32
    136c:	1c41      	adds	r1, r0, #1
    136e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1370:	1a30      	subs	r0, r6, r0
    1372:	0200      	lsls	r0, r0, #8
    1374:	17c2      	asrs	r2, r0, #31
    1376:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    137a:	1200      	asrs	r0, r0, #8
    137c:	4288      	cmp	r0, r1
    137e:	da11      	bge.n	13a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1380:	f88a 5000 	strb.w	r5, [sl]
    1384:	f898 1018 	ldrb.w	r1, [r8, #24]
    1388:	7c20      	ldrb	r0, [r4, #16]
    138a:	4281      	cmp	r1, r0
    138c:	d805      	bhi.n	139a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    138e:	9802      	ldr	r0, [sp, #8]
    1390:	6060      	str	r0, [r4, #4]
    1392:	b00d      	add	sp, #52	; 0x34
    1394:	2002      	movs	r0, #2
    1396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    139a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    139e:	7845      	ldrb	r5, [r0, #1]
    13a0:	2d20      	cmp	r5, #32
    13a2:	d1af      	bne.n	1304 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    13a4:	2005      	movs	r0, #5
    13a6:	f001 fd55 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13aa:	4c1c      	ldr	r4, [pc, #112]	; (141c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    13ac:	f04f 30ff 	mov.w	r0, #4294967295
    13b0:	6060      	str	r0, [r4, #4]
    13b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    13b6:	f89d 2020 	ldrb.w	r2, [sp, #32]
    13ba:	2120      	movs	r1, #32
    13bc:	2a20      	cmp	r2, #32
    13be:	d003      	beq.n	13c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    13c0:	2005      	movs	r0, #5
    13c2:	f7fe ff51 	bl	268 <MPSL_IRQ_RADIO_Handler+0x40>
    13c6:	e004      	b.n	13d2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    13c8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    13cc:	4420      	add	r0, r4
    13ce:	f890 0020 	ldrb.w	r0, [r0, #32]
    13d2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    13d6:	4913      	ldr	r1, [pc, #76]	; (1424 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    13d8:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    13dc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    13e0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    13e4:	7048      	strb	r0, [r1, #1]
    13e6:	6820      	ldr	r0, [r4, #0]
    13e8:	4438      	add	r0, r7
    13ea:	6020      	str	r0, [r4, #0]
    13ec:	20ff      	movs	r0, #255	; 0xff
    13ee:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    13f2:	7e60      	ldrb	r0, [r4, #25]
    13f4:	2801      	cmp	r0, #1
    13f6:	d105      	bne.n	1404 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    13f8:	68e0      	ldr	r0, [r4, #12]
    13fa:	1e40      	subs	r0, r0, #1
    13fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1400:	f001 fb8c 	bl	2b1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1404:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1408:	2820      	cmp	r0, #32
    140a:	d003      	beq.n	1414 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    140c:	4806      	ldr	r0, [pc, #24]	; (1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    140e:	7840      	ldrb	r0, [r0, #1]
    1410:	f002 faac 	bl	396c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1414:	b00d      	add	sp, #52	; 0x34
    1416:	2000      	movs	r0, #0
    1418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    141c:	2000115c 	.word	0x2000115c
    1420:	0f424000 	.word	0x0f424000
    1424:	200010dc 	.word	0x200010dc
    1428:	20000038 	.word	0x20000038

0000142c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    142c:	b570      	push	{r4, r5, r6, lr}
    142e:	4a24      	ldr	r2, [pc, #144]	; (14c0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    1430:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
    1434:	2920      	cmp	r1, #32
    1436:	d03a      	beq.n	14ae <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    1438:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
    143c:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    1440:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1444:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    1448:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    144c:	f892 402c 	ldrb.w	r4, [r2, #44]	; 0x2c
    1450:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1454:	4411      	add	r1, r2
    1456:	f891 1020 	ldrb.w	r1, [r1, #32]
    145a:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    145e:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    1462:	2920      	cmp	r1, #32
    1464:	d028      	beq.n	14b8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    1466:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    146a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    146e:	7e2d      	ldrb	r5, [r5, #24]
    1470:	4285      	cmp	r5, r0
    1472:	bf84      	itt	hi
    1474:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1478:	7849      	ldrbhi	r1, [r1, #1]
    147a:	d8f2      	bhi.n	1462 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    147c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1480:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1484:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1488:	6889      	ldr	r1, [r1, #8]
    148a:	6814      	ldr	r4, [r2, #0]
    148c:	1a08      	subs	r0, r1, r0
    148e:	0200      	lsls	r0, r0, #8
    1490:	17c1      	asrs	r1, r0, #31
    1492:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1496:	1200      	asrs	r0, r0, #8
    1498:	d407      	bmi.n	14aa <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    149a:	f00b f9ec 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    149e:	f104 0165 	add.w	r1, r4, #101	; 0x65
    14a2:	4288      	cmp	r0, r1
    14a4:	bf24      	itt	cs
    14a6:	1b00      	subcs	r0, r0, r4
    14a8:	bd70      	popcs	{r4, r5, r6, pc}
    14aa:	2000      	movs	r0, #0
    14ac:	bd70      	pop	{r4, r5, r6, pc}
    14ae:	f640 3102 	movw	r1, #2818	; 0xb02
    14b2:	2070      	movs	r0, #112	; 0x70
    14b4:	f002 f986 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14b8:	f04f 30ff 	mov.w	r0, #4294967295
    14bc:	bd70      	pop	{r4, r5, r6, pc}
    14be:	0000      	.short	0x0000
    14c0:	2000115c 	.word	0x2000115c

000014c4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    14c4:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    14c8:	b570      	push	{r4, r5, r6, lr}
    14ca:	4807      	ldr	r0, [pc, #28]	; (14e8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    14cc:	4a07      	ldr	r2, [pc, #28]	; (14ec <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    14ce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    14d2:	6901      	ldr	r1, [r0, #16]
    14d4:	3008      	adds	r0, #8
    14d6:	fba1 4502 	umull	r4, r5, r1, r2
    14da:	f7ff fda3 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    14de:	1900      	adds	r0, r0, r4
    14e0:	f145 0100 	adc.w	r1, r5, #0
    14e4:	bd70      	pop	{r4, r5, r6, pc}
    14e6:	0000      	.short	0x0000
    14e8:	20000d5c 	.word	0x20000d5c
    14ec:	1e848000 	.word	0x1e848000

000014f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    14f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14f2:	4d6b      	ldr	r5, [pc, #428]	; (16a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    14f4:	4a6b      	ldr	r2, [pc, #428]	; (16a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    14f6:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    14fa:	2601      	movs	r6, #1
    14fc:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1500:	2808      	cmp	r0, #8
    1502:	d27c      	bcs.n	15fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    1504:	e8df f000 	tbb	[pc, r0]
    1508:	a9977004 	.word	0xa9977004
    150c:	b3ae41c7 	.word	0xb3ae41c7
    1510:	b919      	cbnz	r1, 151a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1512:	f001 ffed 	bl	34f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1516:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    151a:	8ae0      	ldrh	r0, [r4, #22]
    151c:	b110      	cbz	r0, 1524 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    151e:	f002 f8d9 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1522:	b180      	cbz	r0, 1546 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1524:	f7ff fccc 	bl	ec0 <__data_size+0x558>
    1528:	20ff      	movs	r0, #255	; 0xff
    152a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    152e:	6861      	ldr	r1, [r4, #4]
    1530:	f1b1 3fff 	cmp.w	r1, #4294967295
    1534:	d003      	beq.n	153e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1536:	2005      	movs	r0, #5
    1538:	f001 fbd6 	bl	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    153c:	b140      	cbz	r0, 1550 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    153e:	7e60      	ldrb	r0, [r4, #25]
    1540:	2801      	cmp	r0, #1
    1542:	d110      	bne.n	1566 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1544:	e009      	b.n	155a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1546:	f640 0134 	movw	r1, #2100	; 0x834
    154a:	2070      	movs	r0, #112	; 0x70
    154c:	f002 f93a 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1550:	f640 0139 	movw	r1, #2105	; 0x839
    1554:	2070      	movs	r0, #112	; 0x70
    1556:	f002 f935 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    155a:	68e0      	ldr	r0, [r4, #12]
    155c:	1e40      	subs	r0, r0, #1
    155e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1562:	f001 fadb 	bl	2b1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1566:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    156a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    156e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1572:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1576:	6840      	ldr	r0, [r0, #4]
    1578:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    157c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1580:	b001      	add	sp, #4
    1582:	2101      	movs	r1, #1
    1584:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1588:	4710      	bx	r2
    158a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    158e:	b140      	cbz	r0, 15a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1590:	b919      	cbnz	r1, 159a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    1592:	f001 ffad 	bl	34f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1596:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    159a:	2000      	movs	r0, #0
    159c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    15a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15a2:	f7ff fc8d 	bl	ec0 <__data_size+0x558>
    15a6:	f04f 30ff 	mov.w	r0, #4294967295
    15aa:	6060      	str	r0, [r4, #4]
    15ac:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    15b0:	f88d 0000 	strb.w	r0, [sp]
    15b4:	f89d 0000 	ldrb.w	r0, [sp]
    15b8:	b188      	cbz	r0, 15de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    15ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    15be:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    15c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    15c6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    15ca:	6840      	ldr	r0, [r0, #4]
    15cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    15d0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    15d4:	b001      	add	sp, #4
    15d6:	2106      	movs	r1, #6
    15d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    15dc:	4710      	bx	r2
    15de:	f44f 6105 	mov.w	r1, #2128	; 0x850
    15e2:	2070      	movs	r0, #112	; 0x70
    15e4:	f002 f8ee 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e8:	f7ff fc6a 	bl	ec0 <__data_size+0x558>
    15ec:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    15f0:	f002 f870 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15f4:	b120      	cbz	r0, 1600 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    15f6:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    15fa:	b130      	cbz	r0, 160a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    15fc:	e009      	b.n	1612 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    15fe:	e04a      	b.n	1696 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    1600:	f640 015e 	movw	r1, #2142	; 0x85e
    1604:	2070      	movs	r0, #112	; 0x70
    1606:	f002 f8dd 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    160a:	f001 ff71 	bl	34f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    160e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1612:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1616:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    161a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    161e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1622:	6840      	ldr	r0, [r0, #4]
    1624:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1628:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    162c:	b001      	add	sp, #4
    162e:	2100      	movs	r1, #0
    1630:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1634:	4710      	bx	r2
    1636:	f001 fd4d 	bl	30d4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    163a:	8ae0      	ldrh	r0, [r4, #22]
    163c:	b110      	cbz	r0, 1644 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    163e:	f002 f849 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1642:	b128      	cbz	r0, 1650 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    1644:	f001 fd5a 	bl	30fc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1648:	2800      	cmp	r0, #0
    164a:	bf18      	it	ne
    164c:	7766      	strbne	r6, [r4, #29]
    164e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1650:	f640 0168 	movw	r1, #2152	; 0x868
    1654:	2070      	movs	r0, #112	; 0x70
    1656:	f002 f8b5 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    165a:	4813      	ldr	r0, [pc, #76]	; (16a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    165c:	6006      	str	r6, [r0, #0]
    165e:	6890      	ldr	r0, [r2, #8]
    1660:	6006      	str	r6, [r0, #0]
    1662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1664:	7810      	ldrb	r0, [r2, #0]
    1666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    166a:	f002 b97f 	b.w	396c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    166e:	f7ff fc27 	bl	ec0 <__data_size+0x558>
    1672:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1676:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    167a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    167e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1682:	6840      	ldr	r0, [r0, #4]
    1684:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1688:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    168c:	b001      	add	sp, #4
    168e:	2105      	movs	r1, #5
    1690:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1694:	4710      	bx	r2
    1696:	f640 017b 	movw	r1, #2171	; 0x87b
    169a:	2070      	movs	r0, #112	; 0x70
    169c:	f002 f892 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16a0:	20000d5c 	.word	0x20000d5c
    16a4:	20000038 	.word	0x20000038
    16a8:	40000508 	.word	0x40000508

000016ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    16ac:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16b0:	4682      	mov	sl, r0
    16b2:	48f0      	ldr	r0, [pc, #960]	; (1a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    16b4:	b095      	sub	sp, #84	; 0x54
    16b6:	6800      	ldr	r0, [r0, #0]
    16b8:	4def      	ldr	r5, [pc, #956]	; (1a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    16ba:	05c0      	lsls	r0, r0, #23
    16bc:	0dc0      	lsrs	r0, r0, #23
    16be:	d00e      	beq.n	16de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    16c0:	3810      	subs	r0, #16
    16c2:	b240      	sxtb	r0, r0
    16c4:	2800      	cmp	r0, #0
    16c6:	bfb8      	it	lt
    16c8:	f000 000f 	andlt.w	r0, r0, #15
    16cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    16d0:	bfac      	ite	ge
    16d2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    16d6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    16da:	0940      	lsrs	r0, r0, #5
    16dc:	d00d      	beq.n	16fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    16de:	9816      	ldr	r0, [sp, #88]	; 0x58
    16e0:	f04f 0b00 	mov.w	fp, #0
    16e4:	7800      	ldrb	r0, [r0, #0]
    16e6:	2800      	cmp	r0, #0
    16e8:	bf18      	it	ne
    16ea:	2801      	cmpne	r0, #1
    16ec:	d018      	beq.n	1720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    16ee:	f240 7104 	movw	r1, #1796	; 0x704
    16f2:	f04f 0070 	mov.w	r0, #112	; 0x70
    16f6:	f002 f865 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16fa:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    16fe:	f04f 0b01 	mov.w	fp, #1
    1702:	2820      	cmp	r0, #32
    1704:	d007      	beq.n	1716 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1706:	9816      	ldr	r0, [sp, #88]	; 0x58
    1708:	7800      	ldrb	r0, [r0, #0]
    170a:	b148      	cbz	r0, 1720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    170c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1710:	2070      	movs	r0, #112	; 0x70
    1712:	f002 f857 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1716:	f240 61fd 	movw	r1, #1789	; 0x6fd
    171a:	2070      	movs	r0, #112	; 0x70
    171c:	f002 f852 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1720:	4cd6      	ldr	r4, [pc, #856]	; (1a7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    1722:	b124      	cbz	r4, 172e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1724:	2100      	movs	r1, #0
    1726:	f240 7007 	movw	r0, #1799	; 0x707
    172a:	f3af 8000 	nop.w
    172e:	2000      	movs	r0, #0
    1730:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1734:	49d2      	ldr	r1, [pc, #840]	; (1a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    1736:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    173a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    173e:	f04f 0901 	mov.w	r9, #1
    1742:	9000      	str	r0, [sp, #0]
    1744:	b124      	cbz	r4, 1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1746:	2100      	movs	r1, #0
    1748:	f240 7012 	movw	r0, #1810	; 0x712
    174c:	f3af 8000 	nop.w
    1750:	f1b9 0f00 	cmp.w	r9, #0
    1754:	d00a      	beq.n	176c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    1756:	bf00      	nop
    1758:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    175c:	f04f 0800 	mov.w	r8, #0
    1760:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1764:	f1bb 0f00 	cmp.w	fp, #0
    1768:	d007      	beq.n	177a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    176a:	e038      	b.n	17de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    176c:	48c5      	ldr	r0, [pc, #788]	; (1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    176e:	2800      	cmp	r0, #0
    1770:	bf18      	it	ne
    1772:	f3af 8000 	nopne.w
    1776:	b662      	cpsie	i
    1778:	e7ee      	b.n	1758 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    177a:	4637      	mov	r7, r6
    177c:	2001      	movs	r0, #1
    177e:	ea20 0607 	bic.w	r6, r0, r7
    1782:	48c1      	ldr	r0, [pc, #772]	; (1a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    1784:	2240      	movs	r2, #64	; 0x40
    1786:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    178a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    178e:	f00b f9ce 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1792:	b124      	cbz	r4, 179e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    1794:	2100      	movs	r1, #0
    1796:	f240 502f 	movw	r0, #1327	; 0x52f
    179a:	f3af 8000 	nop.w
    179e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    17a2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    17a6:	4429      	add	r1, r5
    17a8:	4428      	add	r0, r5
    17aa:	8c0a      	ldrh	r2, [r1, #32]
    17ac:	8402      	strh	r2, [r0, #32]
    17ae:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    17b2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    17b6:	b124      	cbz	r4, 17c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    17b8:	2100      	movs	r1, #0
    17ba:	f240 5033 	movw	r0, #1331	; 0x533
    17be:	f3af 8000 	nop.w
    17c2:	b124      	cbz	r4, 17ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    17c4:	2100      	movs	r1, #0
    17c6:	f240 701c 	movw	r0, #1820	; 0x71c
    17ca:	f3af 8000 	nop.w
    17ce:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    17d2:	f88d 0008 	strb.w	r0, [sp, #8]
    17d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    17da:	2800      	cmp	r0, #0
    17dc:	d1b2      	bne.n	1744 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    17de:	b124      	cbz	r4, 17ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    17e0:	2100      	movs	r1, #0
    17e2:	f240 7026 	movw	r0, #1830	; 0x726
    17e6:	f3af 8000 	nop.w
    17ea:	a802      	add	r0, sp, #8
    17ec:	f001 f8d6 	bl	299c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    17f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    17f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    17f8:	4633      	mov	r3, r6
    17fa:	aa09      	add	r2, sp, #36	; 0x24
    17fc:	a80e      	add	r0, sp, #56	; 0x38
    17fe:	9916      	ldr	r1, [sp, #88]	; 0x58
    1800:	f7ff fa82 	bl	d08 <__data_size+0x3a0>
    1804:	b124      	cbz	r4, 1810 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    1806:	2100      	movs	r1, #0
    1808:	f240 702d 	movw	r0, #1837	; 0x72d
    180c:	f3af 8000 	nop.w
    1810:	4a9d      	ldr	r2, [pc, #628]	; (1a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    1812:	990e      	ldr	r1, [sp, #56]	; 0x38
    1814:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1818:	a809      	add	r0, sp, #36	; 0x24
    181a:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    181e:	2a01      	cmp	r2, #1
    1820:	bf18      	it	ne
    1822:	2a02      	cmpne	r2, #2
    1824:	d138      	bne.n	1898 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    1826:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    182a:	eba2 0201 	sub.w	r2, r2, r1
    182e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1832:	eba3 0101 	sub.w	r1, r3, r1
    1836:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    183a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    183e:	2a02      	cmp	r2, #2
    1840:	d364      	bcc.n	190c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    1842:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1846:	bf98      	it	ls
    1848:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    184c:	d85e      	bhi.n	190c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    184e:	f04f 0801 	mov.w	r8, #1
    1852:	ab14      	add	r3, sp, #80	; 0x50
    1854:	aa13      	add	r2, sp, #76	; 0x4c
    1856:	4631      	mov	r1, r6
    1858:	f7fe fef4 	bl	644 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
    185c:	2800      	cmp	r0, #0
    185e:	d05d      	beq.n	191c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1860:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1864:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    1868:	4633      	mov	r3, r6
    186a:	428a      	cmp	r2, r1
    186c:	d05a      	beq.n	1924 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    186e:	2005      	movs	r0, #5
    1870:	f7fe fcfa 	bl	268 <MPSL_IRQ_RADIO_Handler+0x40>
    1874:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1878:	7048      	strb	r0, [r1, #1]
    187a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    187e:	2820      	cmp	r0, #32
    1880:	bf1c      	itt	ne
    1882:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1886:	f880 a001 	strbne.w	sl, [r0, #1]
    188a:	d057      	beq.n	193c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    188c:	4632      	mov	r2, r6
    188e:	4651      	mov	r1, sl
    1890:	f05f 0003 	movs.w	r0, #3
    1894:	f7ff fc00 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1898:	b124      	cbz	r4, 18a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    189a:	2100      	movs	r1, #0
    189c:	f240 7032 	movw	r0, #1842	; 0x732
    18a0:	f3af 8000 	nop.w
    18a4:	4879      	ldr	r0, [pc, #484]	; (1a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    18a6:	2800      	cmp	r0, #0
    18a8:	bf18      	it	ne
    18aa:	f3af 8000 	nopne.w
    18ae:	f3ef 8910 	mrs	r9, PRIMASK
    18b2:	b672      	cpsid	i
    18b4:	b124      	cbz	r4, 18c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    18b6:	2100      	movs	r1, #0
    18b8:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    18bc:	f3af 8000 	nop.w
    18c0:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    18c4:	f88d 0008 	strb.w	r0, [sp, #8]
    18c8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    18cc:	2800      	cmp	r0, #0
    18ce:	f47f af39 	bne.w	1744 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    18d2:	b124      	cbz	r4, 18de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    18d4:	2100      	movs	r1, #0
    18d6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    18da:	f3af 8000 	nop.w
    18de:	af09      	add	r7, sp, #36	; 0x24
    18e0:	9800      	ldr	r0, [sp, #0]
    18e2:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    18e6:	f100 0708 	add.w	r7, r0, #8
    18ea:	f1b8 0f00 	cmp.w	r8, #0
    18ee:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    18f2:	990d      	ldr	r1, [sp, #52]	; 0x34
    18f4:	6181      	str	r1, [r0, #24]
    18f6:	d053      	beq.n	19a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    18f8:	b124      	cbz	r4, 1904 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    18fa:	2100      	movs	r1, #0
    18fc:	f240 704d 	movw	r0, #1869	; 0x74d
    1900:	f3af 8000 	nop.w
    1904:	f1bb 0f00 	cmp.w	fp, #0
    1908:	d13a      	bne.n	1980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    190a:	e01f      	b.n	194c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    190c:	4632      	mov	r2, r6
    190e:	4651      	mov	r1, sl
    1910:	2004      	movs	r0, #4
    1912:	f7ff fbc1 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1916:	f04f 0801 	mov.w	r8, #1
    191a:	e7bd      	b.n	1898 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    191c:	4632      	mov	r2, r6
    191e:	4651      	mov	r1, sl
    1920:	2004      	movs	r0, #4
    1922:	e7b7      	b.n	1894 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    1924:	2920      	cmp	r1, #32
    1926:	bf19      	ittee	ne
    1928:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    192c:	7840      	ldrbne	r0, [r0, #1]
    192e:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    1932:	4428      	addeq	r0, r5
    1934:	bf08      	it	eq
    1936:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    193a:	e79b      	b.n	1874 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    193c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    1940:	4429      	add	r1, r5
    1942:	f881 a020 	strb.w	sl, [r1, #32]
    1946:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    194a:	e79f      	b.n	188c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    194c:	9811      	ldr	r0, [sp, #68]	; 0x44
    194e:	f010 0fff 	tst.w	r0, #255	; 0xff
    1952:	d015      	beq.n	1980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    1954:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1958:	2820      	cmp	r0, #32
    195a:	d111      	bne.n	1980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    195c:	b124      	cbz	r4, 1968 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    195e:	2100      	movs	r1, #0
    1960:	f240 7052 	movw	r0, #1874	; 0x752
    1964:	f3af 8000 	nop.w
    1968:	4632      	mov	r2, r6
    196a:	2102      	movs	r1, #2
    196c:	980e      	ldr	r0, [sp, #56]	; 0x38
    196e:	f7ff fbc5 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1972:	9010      	str	r0, [sp, #64]	; 0x40
    1974:	b920      	cbnz	r0, 1980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    1976:	9816      	ldr	r0, [sp, #88]	; 0x58
    1978:	7800      	ldrb	r0, [r0, #0]
    197a:	b1f0      	cbz	r0, 19ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    197c:	2801      	cmp	r0, #1
    197e:	d02b      	beq.n	19d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    1980:	b124      	cbz	r4, 198c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    1982:	2100      	movs	r1, #0
    1984:	f240 706f 	movw	r0, #1903	; 0x76f
    1988:	f3af 8000 	nop.w
    198c:	20ff      	movs	r0, #255	; 0xff
    198e:	f1bb 0f00 	cmp.w	fp, #0
    1992:	bf18      	it	ne
    1994:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    1998:	d027      	beq.n	19ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    199a:	bf00      	nop
    199c:	f04f 0801 	mov.w	r8, #1
    19a0:	b124      	cbz	r4, 19ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    19a2:	2100      	movs	r1, #0
    19a4:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    19a8:	f3af 8000 	nop.w
    19ac:	9810      	ldr	r0, [sp, #64]	; 0x40
    19ae:	4e38      	ldr	r6, [pc, #224]	; (1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    19b0:	2802      	cmp	r0, #2
    19b2:	d023      	beq.n	19fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    19b4:	2801      	cmp	r0, #1
    19b6:	d029      	beq.n	1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    19b8:	e02d      	b.n	1a16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    19ba:	b124      	cbz	r4, 19c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    19bc:	2100      	movs	r1, #0
    19be:	f240 705a 	movw	r0, #1882	; 0x75a
    19c2:	f3af 8000 	nop.w
    19c6:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    19ca:	4651      	mov	r1, sl
    19cc:	2004      	movs	r0, #4
    19ce:	f7ff fb63 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    19d2:	f04f 0801 	mov.w	r8, #1
    19d6:	e7e3      	b.n	19a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    19d8:	2c00      	cmp	r4, #0
    19da:	f43f aeb3 	beq.w	1744 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    19de:	2100      	movs	r1, #0
    19e0:	f240 7065 	movw	r0, #1893	; 0x765
    19e4:	f3af 8000 	nop.w
    19e8:	e6ac      	b.n	1744 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    19ea:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    19ee:	2101      	movs	r1, #1
    19f0:	4391      	bics	r1, r2
    19f2:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    19f6:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    19fa:	e7cf      	b.n	199c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    19fc:	68a8      	ldr	r0, [r5, #8]
    19fe:	990e      	ldr	r1, [sp, #56]	; 0x38
    1a00:	1a40      	subs	r0, r0, r1
    1a02:	f00a ff38 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1a06:	6871      	ldr	r1, [r6, #4]
    1a08:	b921      	cbnz	r1, 1a14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    1a0a:	e004      	b.n	1a16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1a0c:	6871      	ldr	r1, [r6, #4]
    1a0e:	f04f 30ff 	mov.w	r0, #4294967295
    1a12:	b101      	cbz	r1, 1a16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1a14:	4788      	blx	r1
    1a16:	f1b9 0f00 	cmp.w	r9, #0
    1a1a:	d024      	beq.n	1a66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    1a1c:	b124      	cbz	r4, 1a28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    1a1e:	2100      	movs	r1, #0
    1a20:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    1a24:	f3af 8000 	nop.w
    1a28:	f1b8 0f00 	cmp.w	r8, #0
    1a2c:	d011      	beq.n	1a52 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    1a2e:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1a32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1a36:	4428      	add	r0, r5
    1a38:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1a3c:	2820      	cmp	r0, #32
    1a3e:	d008      	beq.n	1a52 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    1a40:	b124      	cbz	r4, 1a4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    1a42:	2100      	movs	r1, #0
    1a44:	f240 7097 	movw	r0, #1943	; 0x797
    1a48:	f3af 8000 	nop.w
    1a4c:	7870      	ldrb	r0, [r6, #1]
    1a4e:	f001 ff8d 	bl	396c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1a52:	b124      	cbz	r4, 1a5e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    1a54:	2100      	movs	r1, #0
    1a56:	f240 709c 	movw	r0, #1948	; 0x79c
    1a5a:	f3af 8000 	nop.w
    1a5e:	b017      	add	sp, #92	; 0x5c
    1a60:	4640      	mov	r0, r8
    1a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a66:	4807      	ldr	r0, [pc, #28]	; (1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    1a68:	2800      	cmp	r0, #0
    1a6a:	bf18      	it	ne
    1a6c:	f3af 8000 	nopne.w
    1a70:	b662      	cpsie	i
    1a72:	e7d3      	b.n	1a1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    1a74:	e000ed04 	.word	0xe000ed04
    1a78:	2000115c 	.word	0x2000115c
    1a7c:	00000000 	.word	0x00000000
    1a80:	20000d5c 	.word	0x20000d5c
    1a84:	00000000 	.word	0x00000000
    1a88:	200010dc 	.word	0x200010dc
    1a8c:	00000000 	.word	0x00000000
    1a90:	20000038 	.word	0x20000038

00001a94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1a94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a98:	48c9      	ldr	r0, [pc, #804]	; (1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>)
    1a9a:	b08a      	sub	sp, #40	; 0x28
    1a9c:	6800      	ldr	r0, [r0, #0]
    1a9e:	05c0      	lsls	r0, r0, #23
    1aa0:	0dc0      	lsrs	r0, r0, #23
    1aa2:	d011      	beq.n	1ac8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1aa4:	3810      	subs	r0, #16
    1aa6:	b240      	sxtb	r0, r0
    1aa8:	2800      	cmp	r0, #0
    1aaa:	bfb8      	it	lt
    1aac:	f000 000f 	andlt.w	r0, r0, #15
    1ab0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1ab4:	bfac      	ite	ge
    1ab6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1aba:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1abe:	0940      	lsrs	r0, r0, #5
    1ac0:	bf08      	it	eq
    1ac2:	f04f 0b01 	moveq.w	fp, #1
    1ac6:	d001      	beq.n	1acc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1ac8:	f04f 0b00 	mov.w	fp, #0
    1acc:	980a      	ldr	r0, [sp, #40]	; 0x28
    1ace:	7800      	ldrb	r0, [r0, #0]
    1ad0:	2800      	cmp	r0, #0
    1ad2:	bf1e      	ittt	ne
    1ad4:	2000      	movne	r0, #0
    1ad6:	b00b      	addne	sp, #44	; 0x2c
    1ad8:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1adc:	f04f 0a00 	mov.w	sl, #0
    1ae0:	4db8      	ldr	r5, [pc, #736]	; (1dc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>)
    1ae2:	4cb9      	ldr	r4, [pc, #740]	; (1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>)
    1ae4:	46d1      	mov	r9, sl
    1ae6:	b125      	cbz	r5, 1af2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    1ae8:	2100      	movs	r1, #0
    1aea:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1aee:	f3af 8000 	nop.w
    1af2:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    1af6:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    1afa:	f04f 0800 	mov.w	r8, #0
    1afe:	b125      	cbz	r5, 1b0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    1b00:	2100      	movs	r1, #0
    1b02:	f240 50be 	movw	r0, #1470	; 0x5be
    1b06:	f3af 8000 	nop.w
    1b0a:	f1bb 0f00 	cmp.w	fp, #0
    1b0e:	d123      	bne.n	1b58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    1b10:	4637      	mov	r7, r6
    1b12:	2001      	movs	r0, #1
    1b14:	ea20 0607 	bic.w	r6, r0, r7
    1b18:	48ac      	ldr	r0, [pc, #688]	; (1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>)
    1b1a:	2240      	movs	r2, #64	; 0x40
    1b1c:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1b20:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1b24:	f00b f803 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1b28:	b125      	cbz	r5, 1b34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    1b2a:	2100      	movs	r1, #0
    1b2c:	f240 502f 	movw	r0, #1327	; 0x52f
    1b30:	f3af 8000 	nop.w
    1b34:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1b38:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1b3c:	4421      	add	r1, r4
    1b3e:	4420      	add	r0, r4
    1b40:	8c0a      	ldrh	r2, [r1, #32]
    1b42:	8402      	strh	r2, [r0, #32]
    1b44:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1b48:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1b4c:	b125      	cbz	r5, 1b58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    1b4e:	2100      	movs	r1, #0
    1b50:	f240 5033 	movw	r0, #1331	; 0x533
    1b54:	f3af 8000 	nop.w
    1b58:	b125      	cbz	r5, 1b64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    1b5a:	2100      	movs	r1, #0
    1b5c:	f240 50c6 	movw	r0, #1478	; 0x5c6
    1b60:	f3af 8000 	nop.w
    1b64:	a808      	add	r0, sp, #32
    1b66:	f000 ff19 	bl	299c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1b6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1b6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1b72:	4633      	mov	r3, r6
    1b74:	466a      	mov	r2, sp
    1b76:	a806      	add	r0, sp, #24
    1b78:	990a      	ldr	r1, [sp, #40]	; 0x28
    1b7a:	f7ff f8c5 	bl	d08 <__data_size+0x3a0>
    1b7e:	b125      	cbz	r5, 1b8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    1b80:	2100      	movs	r1, #0
    1b82:	f240 50cc 	movw	r0, #1484	; 0x5cc
    1b86:	f3af 8000 	nop.w
    1b8a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1b8e:	2820      	cmp	r0, #32
    1b90:	d019      	beq.n	1bc6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    1b92:	68e0      	ldr	r0, [r4, #12]
    1b94:	9900      	ldr	r1, [sp, #0]
    1b96:	1a09      	subs	r1, r1, r0
    1b98:	0209      	lsls	r1, r1, #8
    1b9a:	17ca      	asrs	r2, r1, #31
    1b9c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1ba0:	1209      	asrs	r1, r1, #8
    1ba2:	d510      	bpl.n	1bc6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    1ba4:	e9dd 2100 	ldrd	r2, r1, [sp]
    1ba8:	1a89      	subs	r1, r1, r2
    1baa:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1bae:	4408      	add	r0, r1
    1bb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bb4:	e9cd 3000 	strd	r3, r0, [sp]
    1bb8:	4293      	cmp	r3, r2
    1bba:	d202      	bcs.n	1bc2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1bbc:	9802      	ldr	r0, [sp, #8]
    1bbe:	1c40      	adds	r0, r0, #1
    1bc0:	9002      	str	r0, [sp, #8]
    1bc2:	f04f 0801 	mov.w	r8, #1
    1bc6:	b14d      	cbz	r5, 1bdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    1bc8:	2100      	movs	r1, #0
    1bca:	f240 50df 	movw	r0, #1503	; 0x5df
    1bce:	f3af 8000 	nop.w
    1bd2:	2100      	movs	r1, #0
    1bd4:	f240 50e5 	movw	r0, #1509	; 0x5e5
    1bd8:	f3af 8000 	nop.w
    1bdc:	9900      	ldr	r1, [sp, #0]
    1bde:	9806      	ldr	r0, [sp, #24]
    1be0:	9a01      	ldr	r2, [sp, #4]
    1be2:	1a09      	subs	r1, r1, r0
    1be4:	1a10      	subs	r0, r2, r0
    1be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1bea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    1bf2:	bf98      	it	ls
    1bf4:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    1bf8:	d803      	bhi.n	1c02 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    1bfa:	f1bb 0f00 	cmp.w	fp, #0
    1bfe:	d10c      	bne.n	1c1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    1c00:	e003      	b.n	1c0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    1c02:	f1bb 0f00 	cmp.w	fp, #0
    1c06:	d039      	beq.n	1c7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    1c08:	e0c0      	b.n	1d8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1c0a:	4633      	mov	r3, r6
    1c0c:	4669      	mov	r1, sp
    1c0e:	4870      	ldr	r0, [pc, #448]	; (1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>)
    1c10:	9a06      	ldr	r2, [sp, #24]
    1c12:	f7fe fb65 	bl	2e0 <MPSL_IRQ_RADIO_Handler+0xb8>
    1c16:	ea48 0800 	orr.w	r8, r8, r0
    1c1a:	f1b8 0f00 	cmp.w	r8, #0
    1c1e:	d023      	beq.n	1c68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    1c20:	9800      	ldr	r0, [sp, #0]
    1c22:	f00a fe28 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c26:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    1c2a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1c2e:	4b69      	ldr	r3, [pc, #420]	; (1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1c30:	4411      	add	r1, r2
    1c32:	1c49      	adds	r1, r1, #1
    1c34:	1842      	adds	r2, r0, r1
    1c36:	4298      	cmp	r0, r3
    1c38:	d856      	bhi.n	1ce8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    1c3a:	4865      	ldr	r0, [pc, #404]	; (1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>)
    1c3c:	4281      	cmp	r1, r0
    1c3e:	dc7c      	bgt.n	1d3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    1c40:	4240      	negs	r0, r0
    1c42:	4281      	cmp	r1, r0
    1c44:	db7a      	blt.n	1d3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    1c46:	1c58      	adds	r0, r3, #1
    1c48:	4290      	cmp	r0, r2
    1c4a:	bfdc      	itt	le
    1c4c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1c50:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1c54:	dd05      	ble.n	1c62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    1c56:	2a00      	cmp	r2, #0
    1c58:	bfbc      	itt	lt
    1c5a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1c5e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1c62:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c64:	e9c0 2904 	strd	r2, r9, [r0, #16]
    1c68:	f04f 0a01 	mov.w	sl, #1
    1c6c:	2d00      	cmp	r5, #0
    1c6e:	d07c      	beq.n	1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1c70:	2100      	movs	r1, #0
    1c72:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    1c76:	f3af 8000 	nop.w
    1c7a:	e087      	b.n	1d8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1c7c:	9807      	ldr	r0, [sp, #28]
    1c7e:	9002      	str	r0, [sp, #8]
    1c80:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    1c84:	aa08      	add	r2, sp, #32
    1c86:	a905      	add	r1, sp, #20
    1c88:	f8dd 8018 	ldr.w	r8, [sp, #24]
    1c8c:	f000 fd16 	bl	26bc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1c90:	f001 fa3e 	bl	3110 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1c94:	f000 fcf6 	bl	2684 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1c98:	4607      	mov	r7, r0
    1c9a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c9e:	2820      	cmp	r0, #32
    1ca0:	d027      	beq.n	1cf2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    1ca2:	68e0      	ldr	r0, [r4, #12]
    1ca4:	1d40      	adds	r0, r0, #5
    1ca6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1caa:	bf00      	nop
    1cac:	e9dd 2100 	ldrd	r2, r1, [sp]
    1cb0:	1a89      	subs	r1, r1, r2
    1cb2:	9000      	str	r0, [sp, #0]
    1cb4:	4408      	add	r0, r1
    1cb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cba:	9001      	str	r0, [sp, #4]
    1cbc:	9800      	ldr	r0, [sp, #0]
    1cbe:	4540      	cmp	r0, r8
    1cc0:	d202      	bcs.n	1cc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    1cc2:	9802      	ldr	r0, [sp, #8]
    1cc4:	1c40      	adds	r0, r0, #1
    1cc6:	9002      	str	r0, [sp, #8]
    1cc8:	201f      	movs	r0, #31
    1cca:	f88d 000c 	strb.w	r0, [sp, #12]
    1cce:	9800      	ldr	r0, [sp, #0]
    1cd0:	f00a fdd1 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1cd4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    1cd8:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1cdc:	4b3d      	ldr	r3, [pc, #244]	; (1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1cde:	4411      	add	r1, r2
    1ce0:	1c49      	adds	r1, r1, #1
    1ce2:	1842      	adds	r2, r0, r1
    1ce4:	4298      	cmp	r0, r3
    1ce6:	d92a      	bls.n	1d3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    1ce8:	f240 516f 	movw	r1, #1391	; 0x56f
    1cec:	2070      	movs	r0, #112	; 0x70
    1cee:	f001 fd69 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cf2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    1cf6:	f108 0609 	add.w	r6, r8, #9
    1cfa:	b1b0      	cbz	r0, 1d2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    1cfc:	f001 fcea 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d00:	b998      	cbnz	r0, 1d2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    1d02:	f001 fbd3 	bl	34ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1d06:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1d0a:	bf08      	it	eq
    1d0c:	200d      	moveq	r0, #13
    1d0e:	d00b      	beq.n	1d28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    1d10:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1d14:	3856      	subs	r0, #86	; 0x56
    1d16:	bf08      	it	eq
    1d18:	201c      	moveq	r0, #28
    1d1a:	d005      	beq.n	1d28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    1d1c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1d20:	389f      	subs	r0, #159	; 0x9f
    1d22:	bf14      	ite	ne
    1d24:	4648      	movne	r0, r9
    1d26:	2032      	moveq	r0, #50	; 0x32
    1d28:	4406      	add	r6, r0
    1d2a:	9805      	ldr	r0, [sp, #20]
    1d2c:	4287      	cmp	r7, r0
    1d2e:	bf84      	itt	hi
    1d30:	1a38      	subhi	r0, r7, r0
    1d32:	4406      	addhi	r6, r0
    1d34:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1d38:	e7b8      	b.n	1cac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    1d3a:	e003      	b.n	1d44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    1d3c:	e00a      	b.n	1d54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>
    1d3e:	4824      	ldr	r0, [pc, #144]	; (1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>)
    1d40:	4281      	cmp	r1, r0
    1d42:	dd04      	ble.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d44:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1d48:	2070      	movs	r0, #112	; 0x70
    1d4a:	f001 fd3b 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d4e:	4822      	ldr	r0, [pc, #136]	; (1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1d50:	4281      	cmp	r1, r0
    1d52:	da04      	bge.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d54:	f240 5171 	movw	r1, #1393	; 0x571
    1d58:	2070      	movs	r0, #112	; 0x70
    1d5a:	f001 fd33 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d5e:	481f      	ldr	r0, [pc, #124]	; (1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>)
    1d60:	4290      	cmp	r0, r2
    1d62:	bfd8      	it	le
    1d64:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d68:	e000      	b.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d6a:	e00f      	b.n	1d8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d6c:	bfd8      	it	le
    1d6e:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d72:	dd05      	ble.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d74:	2a00      	cmp	r2, #0
    1d76:	bfbc      	itt	lt
    1d78:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1d7c:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d80:	980a      	ldr	r0, [sp, #40]	; 0x28
    1d82:	f04f 0a01 	mov.w	sl, #1
    1d86:	46d0      	mov	r8, sl
    1d88:	e9c0 2904 	strd	r2, r9, [r0, #16]
    1d8c:	ea1a 0f08 	tst.w	sl, r8
    1d90:	d009      	beq.n	1da6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a>
    1d92:	980a      	ldr	r0, [sp, #40]	; 0x28
    1d94:	4911      	ldr	r1, [pc, #68]	; (1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>)
    1d96:	9b02      	ldr	r3, [sp, #8]
    1d98:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    1d9c:	fbe3 2001 	umlal	r2, r0, r3, r1
    1da0:	990a      	ldr	r1, [sp, #40]	; 0x28
    1da2:	e9c1 2004 	strd	r2, r0, [r1, #16]
    1da6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1daa:	f88d 0014 	strb.w	r0, [sp, #20]
    1dae:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1db2:	2800      	cmp	r0, #0
    1db4:	f47f ae97 	bne.w	1ae6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    1db8:	b00b      	add	sp, #44	; 0x2c
    1dba:	4650      	mov	r0, sl
    1dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dc0:	e000ed04 	.word	0xe000ed04
    1dc4:	00000000 	.word	0x00000000
    1dc8:	2000115c 	.word	0x2000115c
    1dcc:	200010dc 	.word	0x200010dc
    1dd0:	0f424000 	.word	0x0f424000
    1dd4:	1e847fff 	.word	0x1e847fff
    1dd8:	f0bdc000 	.word	0xf0bdc000
    1ddc:	1e848000 	.word	0x1e848000

00001de0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1de0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1de4:	4d94      	ldr	r5, [pc, #592]	; (2038 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    1de6:	b08c      	sub	sp, #48	; 0x30
    1de8:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1dec:	2000      	movs	r0, #0
    1dee:	9009      	str	r0, [sp, #36]	; 0x24
    1df0:	9006      	str	r0, [sp, #24]
    1df2:	2001      	movs	r0, #1
    1df4:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    1df8:	f04f 0800 	mov.w	r8, #0
    1dfc:	4607      	mov	r7, r0
    1dfe:	4c8f      	ldr	r4, [pc, #572]	; (203c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    1e00:	f8cd 001c 	str.w	r0, [sp, #28]
    1e04:	f000 fdc4 	bl	2990 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1e08:	9008      	str	r0, [sp, #32]
    1e0a:	b124      	cbz	r4, 1e16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    1e0c:	2100      	movs	r1, #0
    1e0e:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    1e12:	f3af 8000 	nop.w
    1e16:	9807      	ldr	r0, [sp, #28]
    1e18:	2800      	cmp	r0, #0
    1e1a:	d03c      	beq.n	1e96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    1e1c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1e20:	b124      	cbz	r4, 1e2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    1e22:	2100      	movs	r1, #0
    1e24:	f240 70b5 	movw	r0, #1973	; 0x7b5
    1e28:	f3af 8000 	nop.w
    1e2c:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    1e30:	2240      	movs	r2, #64	; 0x40
    1e32:	ea27 060a 	bic.w	r6, r7, sl
    1e36:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    1e3a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    1e3e:	4683      	mov	fp, r0
    1e40:	f00a fe75 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1e44:	b124      	cbz	r4, 1e50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    1e46:	2100      	movs	r1, #0
    1e48:	f240 502f 	movw	r0, #1327	; 0x52f
    1e4c:	f3af 8000 	nop.w
    1e50:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1e54:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    1e58:	4428      	add	r0, r5
    1e5a:	4429      	add	r1, r5
    1e5c:	9000      	str	r0, [sp, #0]
    1e5e:	8c0a      	ldrh	r2, [r1, #32]
    1e60:	8402      	strh	r2, [r0, #32]
    1e62:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1e66:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1e6a:	b124      	cbz	r4, 1e76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1e6c:	2100      	movs	r1, #0
    1e6e:	f240 5033 	movw	r0, #1331	; 0x533
    1e72:	f3af 8000 	nop.w
    1e76:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1e7a:	f88d 0008 	strb.w	r0, [sp, #8]
    1e7e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1e82:	b178      	cbz	r0, 1ea4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    1e84:	2c00      	cmp	r4, #0
    1e86:	bf1c      	itt	ne
    1e88:	2100      	movne	r1, #0
    1e8a:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    1e8e:	d0b9      	beq.n	1e04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    1e90:	f3af 8000 	nop.w
    1e94:	e7b6      	b.n	1e04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    1e96:	486a      	ldr	r0, [pc, #424]	; (2040 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    1e98:	2800      	cmp	r0, #0
    1e9a:	bf18      	it	ne
    1e9c:	f3af 8000 	nopne.w
    1ea0:	b662      	cpsie	i
    1ea2:	e7bb      	b.n	1e1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    1ea4:	b124      	cbz	r4, 1eb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    1ea6:	2100      	movs	r1, #0
    1ea8:	f240 70bf 	movw	r0, #1983	; 0x7bf
    1eac:	f3af 8000 	nop.w
    1eb0:	980c      	ldr	r0, [sp, #48]	; 0x30
    1eb2:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1eb6:	2803      	cmp	r0, #3
    1eb8:	d17d      	bne.n	1fb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    1eba:	9a00      	ldr	r2, [sp, #0]
    1ebc:	990c      	ldr	r1, [sp, #48]	; 0x30
    1ebe:	f892 0020 	ldrb.w	r0, [r2, #32]
    1ec2:	4288      	cmp	r0, r1
    1ec4:	bf14      	ite	ne
    1ec6:	f04f 0a00 	movne.w	sl, #0
    1eca:	f04f 0a01 	moveq.w	sl, #1
    1ece:	f102 0c20 	add.w	ip, r2, #32
    1ed2:	4683      	mov	fp, r0
    1ed4:	2220      	movs	r2, #32
    1ed6:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    1eda:	e003      	b.n	1ee4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    1edc:	4602      	mov	r2, r0
    1ede:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1ee2:	7840      	ldrb	r0, [r0, #1]
    1ee4:	4288      	cmp	r0, r1
    1ee6:	d002      	beq.n	1eee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1ee8:	2820      	cmp	r0, #32
    1eea:	d00a      	beq.n	1f02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    1eec:	e7f6      	b.n	1edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    1eee:	2820      	cmp	r0, #32
    1ef0:	d007      	beq.n	1f02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    1ef2:	4583      	cmp	fp, r0
    1ef4:	d107      	bne.n	1f06 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    1ef6:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    1efa:	7840      	ldrb	r0, [r0, #1]
    1efc:	f88c 0000 	strb.w	r0, [ip]
    1f00:	e007      	b.n	1f12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    1f02:	4640      	mov	r0, r8
    1f04:	e00c      	b.n	1f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    1f06:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1f0a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1f0e:	7840      	ldrb	r0, [r0, #1]
    1f10:	7048      	strb	r0, [r1, #1]
    1f12:	b124      	cbz	r4, 1f1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    1f14:	2100      	movs	r1, #0
    1f16:	f240 409a 	movw	r0, #1178	; 0x49a
    1f1a:	f3af 8000 	nop.w
    1f1e:	4638      	mov	r0, r7
    1f20:	46c3      	mov	fp, r8
    1f22:	ea10 0f0a 	tst.w	r0, sl
    1f26:	bf18      	it	ne
    1f28:	46bb      	movne	fp, r7
    1f2a:	2800      	cmp	r0, #0
    1f2c:	d04f      	beq.n	1fce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    1f2e:	b124      	cbz	r4, 1f3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    1f30:	2100      	movs	r1, #0
    1f32:	f240 70c4 	movw	r0, #1988	; 0x7c4
    1f36:	f3af 8000 	nop.w
    1f3a:	4632      	mov	r2, r6
    1f3c:	2001      	movs	r0, #1
    1f3e:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f40:	f7ff f8aa 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1f44:	b124      	cbz	r4, 1f50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    1f46:	2100      	movs	r1, #0
    1f48:	f240 70cd 	movw	r0, #1997	; 0x7cd
    1f4c:	f3af 8000 	nop.w
    1f50:	483c      	ldr	r0, [pc, #240]	; (2044 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    1f52:	2800      	cmp	r0, #0
    1f54:	bf18      	it	ne
    1f56:	f3af 8000 	nopne.w
    1f5a:	f3ef 8010 	mrs	r0, PRIMASK
    1f5e:	b672      	cpsid	i
    1f60:	9007      	str	r0, [sp, #28]
    1f62:	b124      	cbz	r4, 1f6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    1f64:	2100      	movs	r1, #0
    1f66:	f240 70d2 	movw	r0, #2002	; 0x7d2
    1f6a:	f3af 8000 	nop.w
    1f6e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1f72:	f88d 0008 	strb.w	r0, [sp, #8]
    1f76:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f7a:	b138      	cbz	r0, 1f8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    1f7c:	2c00      	cmp	r4, #0
    1f7e:	bf1c      	itt	ne
    1f80:	2100      	movne	r1, #0
    1f82:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    1f86:	f43f af3d 	beq.w	1e04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    1f8a:	e781      	b.n	1e90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1f8c:	f1bb 0f00 	cmp.w	fp, #0
    1f90:	d00a      	beq.n	1fa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    1f92:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1f96:	2820      	cmp	r0, #32
    1f98:	d106      	bne.n	1fa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    1f9a:	4632      	mov	r2, r6
    1f9c:	2102      	movs	r1, #2
    1f9e:	9808      	ldr	r0, [sp, #32]
    1fa0:	f7ff f8ac 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1fa4:	9006      	str	r0, [sp, #24]
    1fa6:	b1f8      	cbz	r0, 1fe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    1fa8:	b124      	cbz	r4, 1fb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    1faa:	2100      	movs	r1, #0
    1fac:	f240 70ea 	movw	r0, #2026	; 0x7ea
    1fb0:	f3af 8000 	nop.w
    1fb4:	e000      	b.n	1fb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    1fb6:	e00a      	b.n	1fce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    1fb8:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1fbc:	ea27 0000 	bic.w	r0, r7, r0
    1fc0:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    1fc4:	20ff      	movs	r0, #255	; 0xff
    1fc6:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1fca:	2001      	movs	r0, #1
    1fcc:	9009      	str	r0, [sp, #36]	; 0x24
    1fce:	b124      	cbz	r4, 1fda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    1fd0:	2100      	movs	r1, #0
    1fd2:	f240 70f3 	movw	r0, #2035	; 0x7f3
    1fd6:	f3af 8000 	nop.w
    1fda:	9806      	ldr	r0, [sp, #24]
    1fdc:	4e1a      	ldr	r6, [pc, #104]	; (2048 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    1fde:	2802      	cmp	r0, #2
    1fe0:	d009      	beq.n	1ff6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    1fe2:	2801      	cmp	r0, #1
    1fe4:	d00f      	beq.n	2006 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    1fe6:	e013      	b.n	2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    1fe8:	b194      	cbz	r4, 2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    1fea:	2100      	movs	r1, #0
    1fec:	f240 70e5 	movw	r0, #2021	; 0x7e5
    1ff0:	f3af 8000 	nop.w
    1ff4:	e7ec      	b.n	1fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    1ff6:	68a9      	ldr	r1, [r5, #8]
    1ff8:	9808      	ldr	r0, [sp, #32]
    1ffa:	1a08      	subs	r0, r1, r0
    1ffc:	f00a fc3b 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2000:	6871      	ldr	r1, [r6, #4]
    2002:	b921      	cbnz	r1, 200e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    2004:	e004      	b.n	2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2006:	6871      	ldr	r1, [r6, #4]
    2008:	f04f 30ff 	mov.w	r0, #4294967295
    200c:	b101      	cbz	r1, 2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    200e:	4788      	blx	r1
    2010:	9807      	ldr	r0, [sp, #28]
    2012:	b148      	cbz	r0, 2028 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    2014:	b124      	cbz	r4, 2020 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2016:	2100      	movs	r1, #0
    2018:	f640 0007 	movw	r0, #2055	; 0x807
    201c:	f3af 8000 	nop.w
    2020:	9809      	ldr	r0, [sp, #36]	; 0x24
    2022:	b00d      	add	sp, #52	; 0x34
    2024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2028:	4805      	ldr	r0, [pc, #20]	; (2040 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    202a:	2800      	cmp	r0, #0
    202c:	bf18      	it	ne
    202e:	f3af 8000 	nopne.w
    2032:	b662      	cpsie	i
    2034:	e7ee      	b.n	2014 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    2036:	0000      	.short	0x0000
    2038:	2000115c 	.word	0x2000115c
	...
    2048:	20000038 	.word	0x20000038

0000204c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    204c:	b510      	push	{r4, lr}
    204e:	2820      	cmp	r0, #32
    2050:	d211      	bcs.n	2076 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2052:	490e      	ldr	r1, [pc, #56]	; (208c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2054:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2058:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    205c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2060:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2064:	b13b      	cbz	r3, 2076 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2066:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    206a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    206e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2072:	2a01      	cmp	r2, #1
    2074:	d001      	beq.n	207a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2076:	2000      	movs	r0, #0
    2078:	bd10      	pop	{r4, pc}
    207a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    207e:	4601      	mov	r1, r0
    2080:	2000      	movs	r0, #0
    2082:	f7ff f809 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    2086:	2001      	movs	r0, #1
    2088:	bd10      	pop	{r4, pc}
    208a:	0000      	.short	0x0000
    208c:	2000115c 	.word	0x2000115c

00002090 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2094:	4e86      	ldr	r6, [pc, #536]	; (22b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    2096:	4680      	mov	r8, r0
    2098:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    209c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    20a0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    20a4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    20a8:	2800      	cmp	r0, #0
    20aa:	d071      	beq.n	2190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    20ac:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    20b0:	4d80      	ldr	r5, [pc, #512]	; (22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    20b2:	b125      	cbz	r5, 20be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    20b4:	2100      	movs	r1, #0
    20b6:	f640 3076 	movw	r0, #2934	; 0xb76
    20ba:	f3af 8000 	nop.w
    20be:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    20c2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    20c6:	2801      	cmp	r0, #1
    20c8:	d018      	beq.n	20fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    20ca:	b2c0      	uxtb	r0, r0
    20cc:	2804      	cmp	r0, #4
    20ce:	bf1c      	itt	ne
    20d0:	2805      	cmpne	r0, #5
    20d2:	2806      	cmpne	r0, #6
    20d4:	d061      	beq.n	219a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    20d6:	b12d      	cbz	r5, 20e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    20d8:	f04f 0100 	mov.w	r1, #0
    20dc:	f640 3082 	movw	r0, #2946	; 0xb82
    20e0:	f3af 8000 	nop.w
    20e4:	f001 fc98 	bl	3a18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    20e8:	b125      	cbz	r5, 20f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    20ea:	2100      	movs	r1, #0
    20ec:	f640 3086 	movw	r0, #2950	; 0xb86
    20f0:	f3af 8000 	nop.w
    20f4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    20f8:	2801      	cmp	r0, #1
    20fa:	d1e6      	bne.n	20ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    20fc:	2401      	movs	r4, #1
    20fe:	b125      	cbz	r5, 210a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2100:	2100      	movs	r1, #0
    2102:	f640 308d 	movw	r0, #2957	; 0xb8d
    2106:	f3af 8000 	nop.w
    210a:	2c00      	cmp	r4, #0
    210c:	d04b      	beq.n	21a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    210e:	2000      	movs	r0, #0
    2110:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2114:	b125      	cbz	r5, 2120 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2116:	2100      	movs	r1, #0
    2118:	f640 3092 	movw	r0, #2962	; 0xb92
    211c:	f3af 8000 	nop.w
    2120:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2124:	2001      	movs	r0, #1
    2126:	ea20 090b 	bic.w	r9, r0, fp
    212a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    212e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2132:	2240      	movs	r2, #64	; 0x40
    2134:	f00a fcfb 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2138:	b125      	cbz	r5, 2144 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    213a:	2100      	movs	r1, #0
    213c:	f240 502f 	movw	r0, #1327	; 0x52f
    2140:	f3af 8000 	nop.w
    2144:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2148:	eb00 0a06 	add.w	sl, r0, r6
    214c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2150:	4430      	add	r0, r6
    2152:	8c01      	ldrh	r1, [r0, #32]
    2154:	f8aa 1020 	strh.w	r1, [sl, #32]
    2158:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    215c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2160:	b125      	cbz	r5, 216c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2162:	2100      	movs	r1, #0
    2164:	f240 5033 	movw	r0, #1331	; 0x533
    2168:	f3af 8000 	nop.w
    216c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2170:	f88d 0000 	strb.w	r0, [sp]
    2174:	f89d 0000 	ldrb.w	r0, [sp]
    2178:	b1e0      	cbz	r0, 21b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    217a:	2d00      	cmp	r5, #0
    217c:	bf1c      	itt	ne
    217e:	2100      	movne	r1, #0
    2180:	f640 3098 	movwne	r0, #2968	; 0xb98
    2184:	d0bb      	beq.n	20fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2186:	bf00      	nop
    2188:	f3af 8000 	nop.w
    218c:	e7b7      	b.n	20fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    218e:	e7ff      	b.n	2190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2190:	f640 316d 	movw	r1, #2925	; 0xb6d
    2194:	2070      	movs	r0, #112	; 0x70
    2196:	f001 fb15 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    219a:	464a      	mov	r2, r9
    219c:	4641      	mov	r1, r8
    219e:	2001      	movs	r0, #1
    21a0:	f7fe ff7a 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    21a4:	e7a0      	b.n	20e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    21a6:	4844      	ldr	r0, [pc, #272]	; (22b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    21a8:	2800      	cmp	r0, #0
    21aa:	bf18      	it	ne
    21ac:	f3af 8000 	nopne.w
    21b0:	b662      	cpsie	i
    21b2:	e7ac      	b.n	210e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    21b4:	b125      	cbz	r5, 21c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    21b6:	2100      	movs	r1, #0
    21b8:	f640 309c 	movw	r0, #2972	; 0xb9c
    21bc:	f3af 8000 	nop.w
    21c0:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    21c4:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    21c8:	4640      	mov	r0, r8
    21ca:	461c      	mov	r4, r3
    21cc:	f04f 0b20 	mov.w	fp, #32
    21d0:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    21d4:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    21d8:	e004      	b.n	21e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    21da:	46a3      	mov	fp, r4
    21dc:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    21e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    21e4:	4284      	cmp	r4, r0
    21e6:	d002      	beq.n	21ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    21e8:	2c20      	cmp	r4, #32
    21ea:	d02b      	beq.n	2244 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    21ec:	e7f5      	b.n	21da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    21ee:	2c20      	cmp	r4, #32
    21f0:	d028      	beq.n	2244 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    21f2:	42a3      	cmp	r3, r4
    21f4:	d104      	bne.n	2200 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    21f6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    21fa:	7840      	ldrb	r0, [r0, #1]
    21fc:	7008      	strb	r0, [r1, #0]
    21fe:	e005      	b.n	220c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2200:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2204:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2208:	7840      	ldrb	r0, [r0, #1]
    220a:	7048      	strb	r0, [r1, #1]
    220c:	f1ba 0f00 	cmp.w	sl, #0
    2210:	d011      	beq.n	2236 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2212:	b125      	cbz	r5, 221e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2214:	2100      	movs	r1, #0
    2216:	f240 4092 	movw	r0, #1170	; 0x492
    221a:	f3af 8000 	nop.w
    221e:	f89a 0000 	ldrb.w	r0, [sl]
    2222:	42a0      	cmp	r0, r4
    2224:	d107      	bne.n	2236 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2226:	b125      	cbz	r5, 2232 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2228:	2100      	movs	r1, #0
    222a:	f240 4095 	movw	r0, #1173	; 0x495
    222e:	f3af 8000 	nop.w
    2232:	f88a b000 	strb.w	fp, [sl]
    2236:	b15d      	cbz	r5, 2250 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2238:	2100      	movs	r1, #0
    223a:	f240 409a 	movw	r0, #1178	; 0x49a
    223e:	f3af 8000 	nop.w
    2242:	e000      	b.n	2246 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2244:	b125      	cbz	r5, 2250 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2246:	2100      	movs	r1, #0
    2248:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    224c:	f3af 8000 	nop.w
    2250:	481a      	ldr	r0, [pc, #104]	; (22bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2252:	2800      	cmp	r0, #0
    2254:	bf18      	it	ne
    2256:	f3af 8000 	nopne.w
    225a:	f3ef 8410 	mrs	r4, PRIMASK
    225e:	b672      	cpsid	i
    2260:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2264:	f88d 0000 	strb.w	r0, [sp]
    2268:	f89d 0000 	ldrb.w	r0, [sp]
    226c:	b138      	cbz	r0, 227e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    226e:	2d00      	cmp	r5, #0
    2270:	bf1c      	itt	ne
    2272:	2100      	movne	r1, #0
    2274:	f640 30a6 	movwne	r0, #2982	; 0xba6
    2278:	f43f af41 	beq.w	20fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    227c:	e784      	b.n	2188 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    227e:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2282:	20ff      	movs	r0, #255	; 0xff
    2284:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2288:	b154      	cbz	r4, 22a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    228a:	2d00      	cmp	r5, #0
    228c:	bf08      	it	eq
    228e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2292:	2100      	movs	r1, #0
    2294:	f640 30b3 	movw	r0, #2995	; 0xbb3
    2298:	f3af 8000 	nop.w
    229c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a0:	4805      	ldr	r0, [pc, #20]	; (22b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    22a2:	2800      	cmp	r0, #0
    22a4:	bf18      	it	ne
    22a6:	f3af 8000 	nopne.w
    22aa:	b662      	cpsie	i
    22ac:	e7ed      	b.n	228a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    22ae:	0000      	.short	0x0000
    22b0:	2000115c 	.word	0x2000115c
	...

000022c0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    22c0:	b570      	push	{r4, r5, r6, lr}
    22c2:	460d      	mov	r5, r1
    22c4:	4606      	mov	r6, r0
    22c6:	f001 f9f3 	bl	36b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    22ca:	480f      	ldr	r0, [pc, #60]	; (2308 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    22cc:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    22d0:	2400      	movs	r4, #0
    22d2:	3880      	subs	r0, #128	; 0x80
    22d4:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    22d8:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    22dc:	b129      	cbz	r1, 22ea <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    22de:	1c61      	adds	r1, r4, #1
    22e0:	b2cc      	uxtb	r4, r1
    22e2:	2c20      	cmp	r4, #32
    22e4:	d3f8      	bcc.n	22d8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    22e6:	2020      	movs	r0, #32
    22e8:	bd70      	pop	{r4, r5, r6, pc}
    22ea:	4808      	ldr	r0, [pc, #32]	; (230c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    22ec:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    22f0:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    22f4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    22f8:	4621      	mov	r1, r4
    22fa:	6045      	str	r5, [r0, #4]
    22fc:	2001      	movs	r0, #1
    22fe:	f7fe fecb 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    2302:	4620      	mov	r0, r4
    2304:	bd70      	pop	{r4, r5, r6, pc}
    2306:	0000      	.short	0x0000
    2308:	2000115c 	.word	0x2000115c
    230c:	20000d5c 	.word	0x20000d5c

00002310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2314:	f000 fb3c 	bl	2990 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2318:	4605      	mov	r5, r0
    231a:	f000 fe0b 	bl	2f34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    231e:	4c60      	ldr	r4, [pc, #384]	; (24a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    2320:	6860      	ldr	r0, [r4, #4]
    2322:	f1b0 3fff 	cmp.w	r0, #4294967295
    2326:	bf1c      	itt	ne
    2328:	f04f 30ff 	movne.w	r0, #4294967295
    232c:	6060      	strne	r0, [r4, #4]
    232e:	7fa0      	ldrb	r0, [r4, #30]
    2330:	4f5c      	ldr	r7, [pc, #368]	; (24a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    2332:	b990      	cbnz	r0, 235a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    2334:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    2338:	1a40      	subs	r0, r0, r1
    233a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    233e:	f44f 710c 	mov.w	r1, #560	; 0x230
    2342:	f00a fac5 	bl	c8d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2346:	68e1      	ldr	r1, [r4, #12]
    2348:	4408      	add	r0, r1
    234a:	1a28      	subs	r0, r5, r0
    234c:	0200      	lsls	r0, r0, #8
    234e:	17c1      	asrs	r1, r0, #31
    2350:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2354:	1200      	asrs	r0, r0, #8
    2356:	0fc0      	lsrs	r0, r0, #31
    2358:	d012      	beq.n	2380 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    235a:	7e60      	ldrb	r0, [r4, #25]
    235c:	b320      	cbz	r0, 23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    235e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2362:	f88d 0000 	strb.w	r0, [sp]
    2366:	f89d 0000 	ldrb.w	r0, [sp]
    236a:	b1e8      	cbz	r0, 23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    236c:	f000 fc3e 	bl	2bec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2370:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2374:	b1f0      	cbz	r0, 23b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2376:	f240 31d5 	movw	r1, #981	; 0x3d5
    237a:	2070      	movs	r0, #112	; 0x70
    237c:	f001 fa22 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2380:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2384:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2388:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    238c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2390:	6840      	ldr	r0, [r0, #4]
    2392:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2396:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    239a:	2108      	movs	r1, #8
    239c:	4790      	blx	r2
    239e:	f240 31bd 	movw	r1, #957	; 0x3bd
    23a2:	2070      	movs	r0, #112	; 0x70
    23a4:	f001 fa0e 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23a8:	1ce8      	adds	r0, r5, #3
    23aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23ae:	f000 fb15 	bl	29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    23b2:	e7dd      	b.n	2370 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    23b4:	2001      	movs	r0, #1
    23b6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    23ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23be:	2820      	cmp	r0, #32
    23c0:	d021      	beq.n	2406 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    23c2:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    23c6:	2020      	movs	r0, #32
    23c8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    23cc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    23d0:	2600      	movs	r6, #0
    23d2:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    23d6:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    23da:	6026      	str	r6, [r4, #0]
    23dc:	f000 fe9e 	bl	311c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    23e0:	7720      	strb	r0, [r4, #28]
    23e2:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    23e6:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    23ea:	eb00 0a04 	add.w	sl, r0, r4
    23ee:	f89a 0020 	ldrb.w	r0, [sl, #32]
    23f2:	2820      	cmp	r0, #32
    23f4:	d012      	beq.n	241c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    23f6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    23fa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    23fe:	7e81      	ldrb	r1, [r0, #26]
    2400:	2901      	cmp	r1, #1
    2402:	d005      	beq.n	2410 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    2404:	e00a      	b.n	241c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    2406:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    240a:	2070      	movs	r0, #112	; 0x70
    240c:	f001 f9da 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2410:	f100 0208 	add.w	r2, r0, #8
    2414:	2101      	movs	r1, #1
    2416:	4628      	mov	r0, r5
    2418:	f7fe f9b6 	bl	788 <CONFIG_BT_HCI_TX_STACK_SIZE+0x188>
    241c:	4642      	mov	r2, r8
    241e:	2101      	movs	r1, #1
    2420:	4628      	mov	r0, r5
    2422:	f7fe fe6b 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    2426:	0007      	movs	r7, r0
    2428:	d0f8      	beq.n	241c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    242a:	481f      	ldr	r0, [pc, #124]	; (24a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    242c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2430:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    2434:	2802      	cmp	r0, #2
    2436:	d104      	bne.n	2442 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    2438:	4642      	mov	r2, r8
    243a:	4649      	mov	r1, r9
    243c:	2006      	movs	r0, #6
    243e:	f7fe fe2b 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    2442:	20ff      	movs	r0, #255	; 0xff
    2444:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2448:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    244c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 24ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    2450:	2820      	cmp	r0, #32
    2452:	bf1c      	itt	ne
    2454:	f898 0001 	ldrbne.w	r0, [r8, #1]
    2458:	f001 fa88 	blne	396c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    245c:	7f20      	ldrb	r0, [r4, #28]
    245e:	b118      	cbz	r0, 2468 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    2460:	f000 fe38 	bl	30d4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2464:	7726      	strb	r6, [r4, #28]
    2466:	7766      	strb	r6, [r4, #29]
    2468:	2f02      	cmp	r7, #2
    246a:	d00f      	beq.n	248c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    246c:	2f01      	cmp	r7, #1
    246e:	bf18      	it	ne
    2470:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2474:	f04f 30ff 	mov.w	r0, #4294967295
    2478:	f8d8 1004 	ldr.w	r1, [r8, #4]
    247c:	2900      	cmp	r1, #0
    247e:	bf08      	it	eq
    2480:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2484:	b001      	add	sp, #4
    2486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    248a:	4708      	bx	r1
    248c:	68a0      	ldr	r0, [r4, #8]
    248e:	1b40      	subs	r0, r0, r5
    2490:	f00a f9f1 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2494:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2498:	2900      	cmp	r1, #0
    249a:	d1f3      	bne.n	2484 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    249c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24a0:	2000115c 	.word	0x2000115c
    24a4:	20000d5c 	.word	0x20000d5c
    24a8:	200010dc 	.word	0x200010dc
    24ac:	20000038 	.word	0x20000038

000024b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    24b0:	b530      	push	{r4, r5, lr}
    24b2:	4c36      	ldr	r4, [pc, #216]	; (258c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    24b4:	4605      	mov	r5, r0
    24b6:	b083      	sub	sp, #12
    24b8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    24bc:	2820      	cmp	r0, #32
    24be:	d008      	beq.n	24d2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    24c0:	6860      	ldr	r0, [r4, #4]
    24c2:	f1b0 3fff 	cmp.w	r0, #4294967295
    24c6:	d009      	beq.n	24dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    24c8:	f640 21a1 	movw	r1, #2721	; 0xaa1
    24cc:	2070      	movs	r0, #112	; 0x70
    24ce:	f001 f979 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24d2:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    24d6:	2070      	movs	r0, #112	; 0x70
    24d8:	f001 f974 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24dc:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    24e0:	492b      	ldr	r1, [pc, #172]	; (2590 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    24e2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    24e6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    24ea:	3008      	adds	r0, #8
    24ec:	f7fe fd9a 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    24f0:	4601      	mov	r1, r0
    24f2:	4a28      	ldr	r2, [pc, #160]	; (2594 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    24f4:	4428      	add	r0, r5
    24f6:	4291      	cmp	r1, r2
    24f8:	d904      	bls.n	2504 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    24fa:	f240 516f 	movw	r1, #1391	; 0x56f
    24fe:	2070      	movs	r0, #112	; 0x70
    2500:	f001 f960 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2504:	4924      	ldr	r1, [pc, #144]	; (2598 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    2506:	428d      	cmp	r5, r1
    2508:	dd04      	ble.n	2514 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    250a:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    250e:	2070      	movs	r0, #112	; 0x70
    2510:	f001 f958 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2514:	4921      	ldr	r1, [pc, #132]	; (259c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    2516:	428d      	cmp	r5, r1
    2518:	da04      	bge.n	2524 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    251a:	f240 5171 	movw	r1, #1393	; 0x571
    251e:	2070      	movs	r0, #112	; 0x70
    2520:	f001 f950 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2524:	491e      	ldr	r1, [pc, #120]	; (25a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    2526:	4281      	cmp	r1, r0
    2528:	bfdc      	itt	le
    252a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    252e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2532:	dd05      	ble.n	2540 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2534:	2800      	cmp	r0, #0
    2536:	bfbc      	itt	lt
    2538:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    253c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2540:	aa01      	add	r2, sp, #4
    2542:	4669      	mov	r1, sp
    2544:	f000 f8ba 	bl	26bc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2548:	f89d 0004 	ldrb.w	r0, [sp, #4]
    254c:	280f      	cmp	r0, #15
    254e:	bf8c      	ite	hi
    2550:	2001      	movhi	r0, #1
    2552:	2000      	movls	r0, #0
    2554:	9900      	ldr	r1, [sp, #0]
    2556:	4408      	add	r0, r1
    2558:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    255c:	6061      	str	r1, [r4, #4]
    255e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2562:	f88d 0000 	strb.w	r0, [sp]
    2566:	f89d 0000 	ldrb.w	r0, [sp]
    256a:	2800      	cmp	r0, #0
    256c:	bf04      	itt	eq
    256e:	b003      	addeq	sp, #12
    2570:	bd30      	popeq	{r4, r5, pc}
    2572:	2005      	movs	r0, #5
    2574:	f000 fbb8 	bl	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2578:	2800      	cmp	r0, #0
    257a:	bf1c      	itt	ne
    257c:	b003      	addne	sp, #12
    257e:	bd30      	popne	{r4, r5, pc}
    2580:	f640 21a8 	movw	r1, #2728	; 0xaa8
    2584:	2070      	movs	r0, #112	; 0x70
    2586:	f001 f91d 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    258a:	0000      	.short	0x0000
    258c:	2000115c 	.word	0x2000115c
    2590:	20000d5c 	.word	0x20000d5c
    2594:	1e847fff 	.word	0x1e847fff
    2598:	0f424000 	.word	0x0f424000
    259c:	f0bdc000 	.word	0xf0bdc000
    25a0:	1e848000 	.word	0x1e848000

000025a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    25a4:	b570      	push	{r4, r5, r6, lr}
    25a6:	4c1c      	ldr	r4, [pc, #112]	; (2618 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    25a8:	2120      	movs	r1, #32
    25aa:	f884 1020 	strb.w	r1, [r4, #32]
    25ae:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    25b2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    25b6:	2000      	movs	r0, #0
    25b8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    25bc:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    25c0:	1e42      	subs	r2, r0, #1
    25c2:	e9c4 0200 	strd	r0, r2, [r4]
    25c6:	77a0      	strb	r0, [r4, #30]
    25c8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    25cc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    25d0:	7720      	strb	r0, [r4, #28]
    25d2:	7760      	strb	r0, [r4, #29]
    25d4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    25d8:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    25dc:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    25e0:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    25e4:	2210      	movs	r2, #16
    25e6:	7088      	strb	r0, [r1, #2]
    25e8:	f801 0f04 	strb.w	r0, [r1, #4]!
    25ec:	1e52      	subs	r2, r2, #1
    25ee:	d1fa      	bne.n	25e6 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    25f0:	f000 fd9e 	bl	3130 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    25f4:	4d09      	ldr	r5, [pc, #36]	; (261c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    25f6:	2601      	movs	r6, #1
    25f8:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    25fc:	20ff      	movs	r0, #255	; 0xff
    25fe:	7028      	strb	r0, [r5, #0]
    2600:	4807      	ldr	r0, [pc, #28]	; (2620 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2602:	f001 f995 	bl	3930 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2606:	7068      	strb	r0, [r5, #1]
    2608:	f001 f9f0 	bl	39ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    260c:	60a8      	str	r0, [r5, #8]
    260e:	f000 fd19 	bl	3044 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2612:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    2616:	bd70      	pop	{r4, r5, r6, pc}
    2618:	2000115c 	.word	0x2000115c
    261c:	20000038 	.word	0x20000038
    2620:	00000f4d 	.word	0x00000f4d

00002624 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2624:	b570      	push	{r4, r5, r6, lr}
    2626:	4605      	mov	r5, r0
    2628:	2001      	movs	r0, #1
    262a:	fa00 f405 	lsl.w	r4, r0, r5
    262e:	460e      	mov	r6, r1
    2630:	2a00      	cmp	r2, #0
    2632:	bf08      	it	eq
    2634:	4808      	ldreq	r0, [pc, #32]	; (2658 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2636:	d00c      	beq.n	2652 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2638:	2000      	movs	r0, #0
    263a:	f000 fce9 	bl	3010 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    263e:	00e9      	lsls	r1, r5, #3
    2640:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2644:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2648:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    264c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2650:	4802      	ldr	r0, [pc, #8]	; (265c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2652:	6004      	str	r4, [r0, #0]
    2654:	bd70      	pop	{r4, r5, r6, pc}
    2656:	0000      	.short	0x0000
    2658:	4001f508 	.word	0x4001f508
    265c:	4001f504 	.word	0x4001f504

00002660 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2660:	b500      	push	{lr}
    2662:	b083      	sub	sp, #12
    2664:	4668      	mov	r0, sp
    2666:	f000 f999 	bl	299c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    266a:	9800      	ldr	r0, [sp, #0]
    266c:	f00a f903 	bl	c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2670:	9a01      	ldr	r2, [sp, #4]
    2672:	4b03      	ldr	r3, [pc, #12]	; (2680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2674:	2100      	movs	r1, #0
    2676:	fbe2 0103 	umlal	r0, r1, r2, r3
    267a:	b003      	add	sp, #12
    267c:	bd00      	pop	{pc}
    267e:	0000      	.short	0x0000
    2680:	1e848000 	.word	0x1e848000

00002684 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2684:	0b41      	lsrs	r1, r0, #13
    2686:	f248 6237 	movw	r2, #34359	; 0x8637
    268a:	4351      	muls	r1, r2
    268c:	0c0a      	lsrs	r2, r1, #16
    268e:	4b09      	ldr	r3, [pc, #36]	; (26b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2690:	0251      	lsls	r1, r2, #9
    2692:	fb02 0203 	mla	r2, r2, r3, r0
    2696:	4808      	ldr	r0, [pc, #32]	; (26b8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2698:	4350      	muls	r0, r2
    269a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    269e:	306e      	adds	r0, #110	; 0x6e
    26a0:	0d40      	lsrs	r0, r0, #21
    26a2:	425b      	negs	r3, r3
    26a4:	fb10 f303 	smulbb	r3, r0, r3
    26a8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    26ac:	bf88      	it	hi
    26ae:	1c49      	addhi	r1, r1, #1
    26b0:	4408      	add	r0, r1
    26b2:	4770      	bx	lr
    26b4:	ffffc2f7 	.word	0xffffc2f7
    26b8:	00010c6f 	.word	0x00010c6f

000026bc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    26bc:	0b43      	lsrs	r3, r0, #13
    26be:	f248 6c37 	movw	ip, #34359	; 0x8637
    26c2:	fb03 f30c 	mul.w	r3, r3, ip
    26c6:	b430      	push	{r4, r5}
    26c8:	0c1b      	lsrs	r3, r3, #16
    26ca:	f8df c044 	ldr.w	ip, [pc, #68]	; 2710 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    26ce:	025c      	lsls	r4, r3, #9
    26d0:	fb03 030c 	mla	r3, r3, ip, r0
    26d4:	480f      	ldr	r0, [pc, #60]	; (2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    26d6:	4358      	muls	r0, r3
    26d8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    26dc:	eb04 000c 	add.w	r0, r4, ip
    26e0:	f643 5409 	movw	r4, #15625	; 0x3d09
    26e4:	fb1c f404 	smulbb	r4, ip, r4
    26e8:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    26ec:	f643 5508 	movw	r5, #15624	; 0x3d08
    26f0:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    26f4:	442c      	add	r4, r5
    26f6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    26fa:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    26fe:	bf84      	itt	hi
    2700:	f04f 0c00 	movhi.w	ip, #0
    2704:	1c40      	addhi	r0, r0, #1
    2706:	6008      	str	r0, [r1, #0]
    2708:	f882 c000 	strb.w	ip, [r2]
    270c:	bc30      	pop	{r4, r5}
    270e:	4770      	bx	lr
    2710:	ffffc2f7 	.word	0xffffc2f7
    2714:	00010c6f 	.word	0x00010c6f

00002718 <MPSL_IRQ_RTC0_Handler>:
    2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    271c:	4d3b      	ldr	r5, [pc, #236]	; (280c <MPSL_IRQ_RTC0_Handler+0xf4>)
    271e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2722:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2810 <MPSL_IRQ_RTC0_Handler+0xf8>
    2726:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    272a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    272e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2732:	f04f 0400 	mov.w	r4, #0
    2736:	d019      	beq.n	276c <MPSL_IRQ_RTC0_Handler+0x54>
    2738:	4836      	ldr	r0, [pc, #216]	; (2814 <MPSL_IRQ_RTC0_Handler+0xfc>)
    273a:	6800      	ldr	r0, [r0, #0]
    273c:	b1b0      	cbz	r0, 276c <MPSL_IRQ_RTC0_Handler+0x54>
    273e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2742:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2746:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    274a:	f8d8 1000 	ldr.w	r1, [r8]
    274e:	1a40      	subs	r0, r0, r1
    2750:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2754:	2802      	cmp	r0, #2
    2756:	d302      	bcc.n	275e <MPSL_IRQ_RTC0_Handler+0x46>
    2758:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    275c:	d906      	bls.n	276c <MPSL_IRQ_RTC0_Handler+0x54>
    275e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2762:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2766:	2004      	movs	r0, #4
    2768:	f7fe fec2 	bl	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    276c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2770:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2774:	d01a      	beq.n	27ac <MPSL_IRQ_RTC0_Handler+0x94>
    2776:	4828      	ldr	r0, [pc, #160]	; (2818 <MPSL_IRQ_RTC0_Handler+0x100>)
    2778:	6800      	ldr	r0, [r0, #0]
    277a:	b1b8      	cbz	r0, 27ac <MPSL_IRQ_RTC0_Handler+0x94>
    277c:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2780:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2784:	4825      	ldr	r0, [pc, #148]	; (281c <MPSL_IRQ_RTC0_Handler+0x104>)
    2786:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    278a:	f8d8 1000 	ldr.w	r1, [r8]
    278e:	1a40      	subs	r0, r0, r1
    2790:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2794:	2802      	cmp	r0, #2
    2796:	d302      	bcc.n	279e <MPSL_IRQ_RTC0_Handler+0x86>
    2798:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    279c:	d906      	bls.n	27ac <MPSL_IRQ_RTC0_Handler+0x94>
    279e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    27a2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    27a6:	2005      	movs	r0, #5
    27a8:	f7fe fea2 	bl	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27ac:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    27b0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    27b4:	d01a      	beq.n	27ec <MPSL_IRQ_RTC0_Handler+0xd4>
    27b6:	481a      	ldr	r0, [pc, #104]	; (2820 <MPSL_IRQ_RTC0_Handler+0x108>)
    27b8:	6800      	ldr	r0, [r0, #0]
    27ba:	b1b8      	cbz	r0, 27ec <MPSL_IRQ_RTC0_Handler+0xd4>
    27bc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    27c0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27c4:	4817      	ldr	r0, [pc, #92]	; (2824 <MPSL_IRQ_RTC0_Handler+0x10c>)
    27c6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    27ca:	f8d8 1000 	ldr.w	r1, [r8]
    27ce:	1a40      	subs	r0, r0, r1
    27d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27d4:	2802      	cmp	r0, #2
    27d6:	d302      	bcc.n	27de <MPSL_IRQ_RTC0_Handler+0xc6>
    27d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    27dc:	d906      	bls.n	27ec <MPSL_IRQ_RTC0_Handler+0xd4>
    27de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    27e2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    27e6:	2006      	movs	r0, #6
    27e8:	f7fe fe82 	bl	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27ec:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    27f0:	2800      	cmp	r0, #0
    27f2:	bf08      	it	eq
    27f4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27f8:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    27fc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2800:	4809      	ldr	r0, [pc, #36]	; (2828 <MPSL_IRQ_RTC0_Handler+0x110>)
    2802:	68c1      	ldr	r1, [r0, #12]
    2804:	1c49      	adds	r1, r1, #1
    2806:	60c1      	str	r1, [r0, #12]
    2808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    280c:	4000b000 	.word	0x4000b000
    2810:	4000b504 	.word	0x4000b504
    2814:	4000b140 	.word	0x4000b140
    2818:	4000b144 	.word	0x4000b144
    281c:	4000b004 	.word	0x4000b004
    2820:	4000b148 	.word	0x4000b148
    2824:	4000b008 	.word	0x4000b008
    2828:	20000044 	.word	0x20000044

0000282c <MPSL_IRQ_TIMER0_Handler>:
    282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2830:	4d38      	ldr	r5, [pc, #224]	; (2914 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2832:	7828      	ldrb	r0, [r5, #0]
    2834:	2804      	cmp	r0, #4
    2836:	d068      	beq.n	290a <MPSL_IRQ_TIMER0_Handler+0xde>
    2838:	1ca8      	adds	r0, r5, #2
    283a:	2201      	movs	r2, #1
    283c:	7801      	ldrb	r1, [r0, #0]
    283e:	b159      	cbz	r1, 2858 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2840:	2901      	cmp	r1, #1
    2842:	bf08      	it	eq
    2844:	706a      	strbeq	r2, [r5, #1]
    2846:	d002      	beq.n	284e <MPSL_IRQ_TIMER0_Handler+0x22>
    2848:	7869      	ldrb	r1, [r5, #1]
    284a:	2900      	cmp	r1, #0
    284c:	d058      	beq.n	2900 <MPSL_IRQ_TIMER0_Handler+0xd4>
    284e:	2102      	movs	r1, #2
    2850:	7001      	strb	r1, [r0, #0]
    2852:	7840      	ldrb	r0, [r0, #1]
    2854:	f000 fafe 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2858:	4c2f      	ldr	r4, [pc, #188]	; (2918 <MPSL_IRQ_TIMER0_Handler+0xec>)
    285a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    285e:	f04f 0800 	mov.w	r8, #0
    2862:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2866:	f44f 7780 	mov.w	r7, #256	; 0x100
    286a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    286e:	d00a      	beq.n	2886 <MPSL_IRQ_TIMER0_Handler+0x5a>
    2870:	482a      	ldr	r0, [pc, #168]	; (291c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2872:	6800      	ldr	r0, [r0, #0]
    2874:	b138      	cbz	r0, 2886 <MPSL_IRQ_TIMER0_Handler+0x5a>
    2876:	2003      	movs	r0, #3
    2878:	f000 faec 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    287c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2880:	2003      	movs	r0, #3
    2882:	f7fe fe35 	bl	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2886:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    288a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    288e:	d00a      	beq.n	28a6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    2890:	4823      	ldr	r0, [pc, #140]	; (2920 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2892:	6800      	ldr	r0, [r0, #0]
    2894:	b138      	cbz	r0, 28a6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    2896:	2002      	movs	r0, #2
    2898:	f000 fadc 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    289c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28a0:	2002      	movs	r0, #2
    28a2:	f7fe fe25 	bl	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28aa:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    28ae:	d00a      	beq.n	28c6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    28b0:	481c      	ldr	r0, [pc, #112]	; (2924 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    28b2:	6800      	ldr	r0, [r0, #0]
    28b4:	b138      	cbz	r0, 28c6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    28b6:	2001      	movs	r0, #1
    28b8:	f000 facc 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28bc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28c0:	2001      	movs	r0, #1
    28c2:	f7fe fe15 	bl	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ca:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    28ce:	bf08      	it	eq
    28d0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28d4:	4814      	ldr	r0, [pc, #80]	; (2928 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    28d6:	6800      	ldr	r0, [r0, #0]
    28d8:	2800      	cmp	r0, #0
    28da:	bf08      	it	eq
    28dc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28e0:	2000      	movs	r0, #0
    28e2:	f000 fab7 	bl	2e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28e6:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28ea:	2004      	movs	r0, #4
    28ec:	7028      	strb	r0, [r5, #0]
    28ee:	f8c5 8004 	str.w	r8, [r5, #4]
    28f2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    28f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28fa:	2000      	movs	r0, #0
    28fc:	f7fe bdf8 	b.w	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2900:	f240 419f 	movw	r1, #1183	; 0x49f
    2904:	206c      	movs	r0, #108	; 0x6c
    2906:	f000 ff5d 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    290a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    290e:	2007      	movs	r0, #7
    2910:	f7fe bdee 	b.w	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2914:	20000044 	.word	0x20000044
    2918:	40008000 	.word	0x40008000
    291c:	4000814c 	.word	0x4000814c
    2920:	40008148 	.word	0x40008148
    2924:	40008144 	.word	0x40008144
    2928:	40008140 	.word	0x40008140
    292c:	2201      	movs	r2, #1
    292e:	0211      	lsls	r1, r2, #8
    2930:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2934:	2000      	movs	r0, #0
    2936:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    293a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    293e:	f3bf 8f4f 	dsb	sy
    2942:	f3bf 8f6f 	isb	sy
    2946:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    294a:	490e      	ldr	r1, [pc, #56]	; (2984 <MPSL_IRQ_TIMER0_Handler+0x158>)
    294c:	f841 2f04 	str.w	r2, [r1, #4]!
    2950:	1e43      	subs	r3, r0, #1
    2952:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2956:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    295a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    295e:	4b0a      	ldr	r3, [pc, #40]	; (2988 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2960:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2964:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2968:	1d1b      	adds	r3, r3, #4
    296a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    296e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2972:	1d1b      	adds	r3, r3, #4
    2974:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2978:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    297c:	60ca      	str	r2, [r1, #12]
    297e:	4903      	ldr	r1, [pc, #12]	; (298c <MPSL_IRQ_TIMER0_Handler+0x160>)
    2980:	7048      	strb	r0, [r1, #1]
    2982:	4770      	bx	lr
    2984:	40008000 	.word	0x40008000
    2988:	40008004 	.word	0x40008004
    298c:	20000044 	.word	0x20000044

00002990 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2990:	4801      	ldr	r0, [pc, #4]	; (2998 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2992:	6800      	ldr	r0, [r0, #0]
    2994:	4770      	bx	lr
    2996:	0000      	.short	0x0000
    2998:	4000b504 	.word	0x4000b504

0000299c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    299c:	b430      	push	{r4, r5}
    299e:	f3ef 8c10 	mrs	ip, PRIMASK
    29a2:	b672      	cpsid	i
    29a4:	2500      	movs	r5, #0
    29a6:	4b0b      	ldr	r3, [pc, #44]	; (29d4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    29a8:	4a0b      	ldr	r2, [pc, #44]	; (29d8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    29aa:	bf00      	nop
    29ac:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    29b0:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    29b4:	b12c      	cbz	r4, 29c2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    29b6:	68d1      	ldr	r1, [r2, #12]
    29b8:	1c49      	adds	r1, r1, #1
    29ba:	60d1      	str	r1, [r2, #12]
    29bc:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    29c0:	e7f4      	b.n	29ac <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    29c2:	68d2      	ldr	r2, [r2, #12]
    29c4:	f1bc 0f00 	cmp.w	ip, #0
    29c8:	d100      	bne.n	29cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    29ca:	b662      	cpsie	i
    29cc:	e9c0 1200 	strd	r1, r2, [r0]
    29d0:	bc30      	pop	{r4, r5}
    29d2:	4770      	bx	lr
    29d4:	4000b000 	.word	0x4000b000
    29d8:	20000044 	.word	0x20000044

000029dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    29dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    29e0:	4e46      	ldr	r6, [pc, #280]	; (2afc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    29e2:	4605      	mov	r5, r0
    29e4:	1eb7      	subs	r7, r6, #2
    29e6:	7833      	ldrb	r3, [r6, #0]
    29e8:	68b9      	ldr	r1, [r7, #8]
    29ea:	2b01      	cmp	r3, #1
    29ec:	bf04      	itt	eq
    29ee:	42a9      	cmpeq	r1, r5
    29f0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29f4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    29f8:	4a41      	ldr	r2, [pc, #260]	; (2b00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    29fa:	6010      	str	r0, [r2, #0]
    29fc:	4a42      	ldr	r2, [pc, #264]	; (2b08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    29fe:	4841      	ldr	r0, [pc, #260]	; (2b04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2a00:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2a04:	f102 0c04 	add.w	ip, r2, #4
    2a08:	f04f 0400 	mov.w	r4, #0
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d062      	beq.n	2ad6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2a10:	483e      	ldr	r0, [pc, #248]	; (2b0c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2a12:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2a16:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    2a1a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2a1e:	bf00      	nop
    2a20:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    2a24:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a28:	f04f 0801 	mov.w	r8, #1
    2a2c:	2800      	cmp	r0, #0
    2a2e:	bf01      	itttt	eq
    2a30:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    2a34:	2800      	cmpeq	r0, #0
    2a36:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    2a3a:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    2a3e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2a42:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2a46:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2a4a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2a4e:	4830      	ldr	r0, [pc, #192]	; (2b10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2a50:	f8d0 c000 	ldr.w	ip, [r0]
    2a54:	eba5 0c0c 	sub.w	ip, r5, ip
    2a58:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    2a5c:	f1bc 0f02 	cmp.w	ip, #2
    2a60:	d344      	bcc.n	2aec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    2a62:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    2a66:	d841      	bhi.n	2aec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    2a68:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    2a6c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    2a70:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    2a74:	b12b      	cbz	r3, 2a82 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    2a76:	6802      	ldr	r2, [r0, #0]
    2a78:	1a8a      	subs	r2, r1, r2
    2a7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a7e:	2a02      	cmp	r2, #2
    2a80:	d3f9      	bcc.n	2a76 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    2a82:	f8c7 8004 	str.w	r8, [r7, #4]
    2a86:	703c      	strb	r4, [r7, #0]
    2a88:	f7ff ff50 	bl	292c <MPSL_IRQ_TIMER0_Handler+0x100>
    2a8c:	4821      	ldr	r0, [pc, #132]	; (2b14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2a8e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2a92:	f364 0101 	bfi	r1, r4, #0, #2
    2a96:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2a9a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2a9e:	2102      	movs	r1, #2
    2aa0:	f361 0201 	bfi	r2, r1, #0, #2
    2aa4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2aa8:	2104      	movs	r1, #4
    2aaa:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    2aae:	f8c0 800c 	str.w	r8, [r0, #12]
    2ab2:	6879      	ldr	r1, [r7, #4]
    2ab4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2ab8:	1580      	asrs	r0, r0, #22
    2aba:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2abe:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2ac2:	4915      	ldr	r1, [pc, #84]	; (2b18 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    2ac4:	05c0      	lsls	r0, r0, #23
    2ac6:	6008      	str	r0, [r1, #0]
    2ac8:	2004      	movs	r0, #4
    2aca:	60bd      	str	r5, [r7, #8]
    2acc:	7070      	strb	r0, [r6, #1]
    2ace:	f886 8000 	strb.w	r8, [r6]
    2ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ad6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2ada:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    2ade:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2ae2:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    2ae6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2aea:	e799      	b.n	2a20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    2aec:	2000      	movs	r0, #0
    2aee:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2af2:	f240 2193 	movw	r1, #659	; 0x293
    2af6:	206c      	movs	r0, #108	; 0x6c
    2af8:	f000 fe64 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2afc:	20000046 	.word	0x20000046
    2b00:	4001f508 	.word	0x4001f508
    2b04:	fffbfffd 	.word	0xfffbfffd
    2b08:	4000b000 	.word	0x4000b000
    2b0c:	fffafffd 	.word	0xfffafffd
    2b10:	4000b504 	.word	0x4000b504
    2b14:	40008000 	.word	0x40008000
    2b18:	4001f504 	.word	0x4001f504

00002b1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b1c:	b570      	push	{r4, r5, r6, lr}
    2b1e:	4c2a      	ldr	r4, [pc, #168]	; (2bc8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    2b20:	68a1      	ldr	r1, [r4, #8]
    2b22:	4281      	cmp	r1, r0
    2b24:	bf14      	ite	ne
    2b26:	2201      	movne	r2, #1
    2b28:	2200      	moveq	r2, #0
    2b2a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 2bcc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    2b2e:	f89c 5000 	ldrb.w	r5, [ip]
    2b32:	2d02      	cmp	r5, #2
    2b34:	d002      	beq.n	2b3c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2b36:	2a00      	cmp	r2, #0
    2b38:	d034      	beq.n	2ba4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    2b3a:	e002      	b.n	2b42 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2b3c:	2a00      	cmp	r2, #0
    2b3e:	bf08      	it	eq
    2b40:	bd70      	popeq	{r4, r5, r6, pc}
    2b42:	7862      	ldrb	r2, [r4, #1]
    2b44:	b39a      	cbz	r2, 2bae <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2b46:	4b22      	ldr	r3, [pc, #136]	; (2bd0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b4c:	601a      	str	r2, [r3, #0]
    2b4e:	4b21      	ldr	r3, [pc, #132]	; (2bd4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    2b50:	1392      	asrs	r2, r2, #14
    2b52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2b56:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    2b5a:	2200      	movs	r2, #0
    2b5c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    2b60:	4a1d      	ldr	r2, [pc, #116]	; (2bd8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b62:	6816      	ldr	r6, [r2, #0]
    2b64:	1b86      	subs	r6, r0, r6
    2b66:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    2b6a:	2e02      	cmp	r6, #2
    2b6c:	d324      	bcc.n	2bb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2b6e:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    2b72:	d821      	bhi.n	2bb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2b74:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2b78:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    2b7c:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    2b80:	b12d      	cbz	r5, 2b8e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    2b82:	6813      	ldr	r3, [r2, #0]
    2b84:	1acb      	subs	r3, r1, r3
    2b86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b8a:	2b02      	cmp	r3, #2
    2b8c:	d3f9      	bcc.n	2b82 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    2b8e:	4b13      	ldr	r3, [pc, #76]	; (2bdc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b90:	2102      	movs	r1, #2
    2b92:	074a      	lsls	r2, r1, #29
    2b94:	601a      	str	r2, [r3, #0]
    2b96:	60a0      	str	r0, [r4, #8]
    2b98:	2004      	movs	r0, #4
    2b9a:	f88c 0001 	strb.w	r0, [ip, #1]
    2b9e:	f88c 1000 	strb.w	r1, [ip]
    2ba2:	bd70      	pop	{r4, r5, r6, pc}
    2ba4:	f240 21a1 	movw	r1, #673	; 0x2a1
    2ba8:	206c      	movs	r0, #108	; 0x6c
    2baa:	f000 fe0b 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bae:	f240 21a5 	movw	r1, #677	; 0x2a5
    2bb2:	206c      	movs	r0, #108	; 0x6c
    2bb4:	f000 fe06 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bb8:	2000      	movs	r0, #0
    2bba:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2bbe:	f240 21b1 	movw	r1, #689	; 0x2b1
    2bc2:	206c      	movs	r0, #108	; 0x6c
    2bc4:	f000 fdfe 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bc8:	20000044 	.word	0x20000044
    2bcc:	20000046 	.word	0x20000046
    2bd0:	4001f508 	.word	0x4001f508
    2bd4:	4000b000 	.word	0x4000b000
    2bd8:	4000b504 	.word	0x4000b504
    2bdc:	4001f504 	.word	0x4001f504

00002be0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2be0:	4801      	ldr	r0, [pc, #4]	; (2be8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2be2:	6880      	ldr	r0, [r0, #8]
    2be4:	4770      	bx	lr
    2be6:	0000      	.short	0x0000
    2be8:	20000044 	.word	0x20000044

00002bec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bf0:	4836      	ldr	r0, [pc, #216]	; (2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2bf2:	4a35      	ldr	r2, [pc, #212]	; (2cc8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2bf4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2bf8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 2cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    2bfc:	1d03      	adds	r3, r0, #4
    2bfe:	2100      	movs	r1, #0
    2c00:	f89c 4000 	ldrb.w	r4, [ip]
    2c04:	b184      	cbz	r4, 2c28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    2c06:	4a33      	ldr	r2, [pc, #204]	; (2cd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2c08:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2c0c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2c10:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c14:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    2c18:	2301      	movs	r3, #1
    2c1a:	2a00      	cmp	r2, #0
    2c1c:	bf04      	itt	eq
    2c1e:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    2c22:	2800      	cmpeq	r0, #0
    2c24:	d111      	bne.n	2c4a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    2c26:	e00a      	b.n	2c3e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    2c28:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2c2c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c30:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2c34:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2c38:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c3c:	e7ea      	b.n	2c14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2c3e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2c42:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2c46:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    2c4a:	2c02      	cmp	r4, #2
    2c4c:	d004      	beq.n	2c58 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    2c4e:	f240 21bd 	movw	r1, #701	; 0x2bd
    2c52:	206c      	movs	r0, #108	; 0x6c
    2c54:	f000 fdb6 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c58:	4e1f      	ldr	r6, [pc, #124]	; (2cd8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c5a:	6830      	ldr	r0, [r6, #0]
    2c5c:	4c1f      	ldr	r4, [pc, #124]	; (2cdc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2c5e:	1cc0      	adds	r0, r0, #3
    2c60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c64:	68a2      	ldr	r2, [r4, #8]
    2c66:	4d1e      	ldr	r5, [pc, #120]	; (2ce0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2c68:	4290      	cmp	r0, r2
    2c6a:	d00b      	beq.n	2c84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2c6c:	6837      	ldr	r7, [r6, #0]
    2c6e:	1bd7      	subs	r7, r2, r7
    2c70:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2c74:	2f04      	cmp	r7, #4
    2c76:	d305      	bcc.n	2c84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2c78:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    2c7c:	d802      	bhi.n	2c84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2c7e:	f7ff fead 	bl	29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c82:	e01b      	b.n	2cbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2c84:	6830      	ldr	r0, [r6, #0]
    2c86:	1a10      	subs	r0, r2, r0
    2c88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c8c:	2802      	cmp	r0, #2
    2c8e:	d313      	bcc.n	2cb8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    2c90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c94:	d810      	bhi.n	2cb8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    2c96:	4a13      	ldr	r2, [pc, #76]	; (2ce4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    2c98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2c9c:	6010      	str	r0, [r2, #0]
    2c9e:	6063      	str	r3, [r4, #4]
    2ca0:	7021      	strb	r1, [r4, #0]
    2ca2:	606b      	str	r3, [r5, #4]
    2ca4:	60eb      	str	r3, [r5, #12]
    2ca6:	0040      	lsls	r0, r0, #1
    2ca8:	1f11      	subs	r1, r2, #4
    2caa:	6008      	str	r0, [r1, #0]
    2cac:	2004      	movs	r0, #4
    2cae:	f88c 0001 	strb.w	r0, [ip, #1]
    2cb2:	f88c 3000 	strb.w	r3, [ip]
    2cb6:	e001      	b.n	2cbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2cb8:	6063      	str	r3, [r4, #4]
    2cba:	7021      	strb	r1, [r4, #0]
    2cbc:	6860      	ldr	r0, [r4, #4]
    2cbe:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cc6:	0000      	.short	0x0000
    2cc8:	fffbfffd 	.word	0xfffbfffd
    2ccc:	4000b000 	.word	0x4000b000
    2cd0:	20000046 	.word	0x20000046
    2cd4:	fffafffd 	.word	0xfffafffd
    2cd8:	4000b504 	.word	0x4000b504
    2cdc:	20000044 	.word	0x20000044
    2ce0:	40008000 	.word	0x40008000
    2ce4:	4001f508 	.word	0x4001f508

00002ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cec:	4a54      	ldr	r2, [pc, #336]	; (2e40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    2cee:	2500      	movs	r5, #0
    2cf0:	2401      	movs	r4, #1
    2cf2:	f892 c000 	ldrb.w	ip, [r2]
    2cf6:	7853      	ldrb	r3, [r2, #1]
    2cf8:	f44f 76a0 	mov.w	r6, #320	; 0x140
    2cfc:	2807      	cmp	r0, #7
    2cfe:	d27d      	bcs.n	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2d00:	e8df f000 	tbb	[pc, r0]
    2d04:	04040404 	.word	0x04040404
    2d08:	00585858 	.word	0x00585858
    2d0c:	4a4d      	ldr	r2, [pc, #308]	; (2e44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    2d0e:	6897      	ldr	r7, [r2, #8]
    2d10:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    2d14:	bf04      	itt	eq
    2d16:	7852      	ldrbeq	r2, [r2, #1]
    2d18:	2a00      	cmpeq	r2, #0
    2d1a:	d003      	beq.n	2d24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2d1c:	f1bc 0f02 	cmp.w	ip, #2
    2d20:	d005      	beq.n	2d2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d22:	e026      	b.n	2d72 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2d24:	f240 314d 	movw	r1, #845	; 0x34d
    2d28:	206c      	movs	r0, #108	; 0x6c
    2d2a:	f000 fd4b 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d2e:	1f1a      	subs	r2, r3, #4
    2d30:	b2d2      	uxtb	r2, r2
    2d32:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    2d36:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    2d3a:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    2d3e:	2200      	movs	r2, #0
    2d40:	f1bc 0f01 	cmp.w	ip, #1
    2d44:	d003      	beq.n	2d4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    2d46:	f1bc 0f02 	cmp.w	ip, #2
    2d4a:	d008      	beq.n	2d5e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    2d4c:	e00e      	b.n	2d6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    2d4e:	2b04      	cmp	r3, #4
    2d50:	bf24      	itt	cs
    2d52:	6837      	ldrcs	r7, [r6, #0]
    2d54:	2f00      	cmpcs	r7, #0
    2d56:	bf08      	it	eq
    2d58:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    2d5c:	e006      	b.n	2d6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    2d5e:	2b04      	cmp	r3, #4
    2d60:	bf24      	itt	cs
    2d62:	6837      	ldrcs	r7, [r6, #0]
    2d64:	2f00      	cmpcs	r7, #0
    2d66:	bf08      	it	eq
    2d68:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    2d6c:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    2d70:	d1e5      	bne.n	2d3e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    2d72:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    2d76:	f100 0210 	add.w	r2, r0, #16
    2d7a:	fa04 f202 	lsl.w	r2, r4, r2
    2d7e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    2d82:	f04f 0340 	mov.w	r3, #64	; 0x40
    2d86:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2d8a:	b2db      	uxtb	r3, r3
    2d8c:	4463      	add	r3, ip
    2d8e:	601c      	str	r4, [r3, #0]
    2d90:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2d94:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    2d98:	eba1 0303 	sub.w	r3, r1, r3
    2d9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2da0:	2b03      	cmp	r3, #3
    2da2:	bf26      	itte	cs
    2da4:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2da8:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    2dac:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    2db0:	d237      	bcs.n	2e22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    2db2:	e03c      	b.n	2e2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    2db4:	f1bc 0f00 	cmp.w	ip, #0
    2db8:	d006      	beq.n	2dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2dba:	4283      	cmp	r3, r0
    2dbc:	d104      	bne.n	2dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2dbe:	f240 316d 	movw	r1, #877	; 0x36d
    2dc2:	206c      	movs	r0, #108	; 0x6c
    2dc4:	f000 fcfe 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dc8:	1f02      	subs	r2, r0, #4
    2dca:	b2d3      	uxtb	r3, r2
    2dcc:	2b03      	cmp	r3, #3
    2dce:	d304      	bcc.n	2dda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    2dd0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    2dd4:	206c      	movs	r0, #108	; 0x6c
    2dd6:	f000 fcf5 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dda:	f8df c070 	ldr.w	ip, [pc, #112]	; 2e4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    2dde:	f103 0210 	add.w	r2, r3, #16
    2de2:	fa04 f202 	lsl.w	r2, r4, r2
    2de6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    2dea:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    2dee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2df2:	f84c 5003 	str.w	r5, [ip, r3]
    2df6:	4b16      	ldr	r3, [pc, #88]	; (2e50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    2df8:	681b      	ldr	r3, [r3, #0]
    2dfa:	e000      	b.n	2dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2dfc:	e01a      	b.n	2e34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    2dfe:	1f00      	subs	r0, r0, #4
    2e00:	1acb      	subs	r3, r1, r3
    2e02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2e06:	b2c0      	uxtb	r0, r0
    2e08:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2e0c:	2b02      	cmp	r3, #2
    2e0e:	d30b      	bcc.n	2e28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    2e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2e14:	d808      	bhi.n	2e28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    2e16:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e1a:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    2e1e:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    2e22:	2001      	movs	r0, #1
    2e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e28:	2100      	movs	r1, #0
    2e2a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e2e:	2000      	movs	r0, #0
    2e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e34:	f240 3171 	movw	r1, #881	; 0x371
    2e38:	206c      	movs	r0, #108	; 0x6c
    2e3a:	f000 fcc3 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e3e:	0000      	.short	0x0000
    2e40:	20000046 	.word	0x20000046
    2e44:	20000044 	.word	0x20000044
    2e48:	40008000 	.word	0x40008000
    2e4c:	4000b000 	.word	0x4000b000
    2e50:	4000b504 	.word	0x4000b504

00002e54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e58:	2601      	movs	r6, #1
    2e5a:	2700      	movs	r7, #0
    2e5c:	f44f 78a0 	mov.w	r8, #320	; 0x140
    2e60:	2807      	cmp	r0, #7
    2e62:	d251      	bcs.n	2f08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    2e64:	e8df f000 	tbb	[pc, r0]
    2e68:	04040404 	.word	0x04040404
    2e6c:	00191919 	.word	0x00191919
    2e70:	f100 0110 	add.w	r1, r0, #16
    2e74:	fa06 f201 	lsl.w	r2, r6, r1
    2e78:	4926      	ldr	r1, [pc, #152]	; (2f14 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2e7a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e7e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2e82:	2200      	movs	r2, #0
    2e84:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2e88:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    2e8c:	508f      	str	r7, [r1, r2]
    2e8e:	4922      	ldr	r1, [pc, #136]	; (2f18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2e90:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2e94:	9000      	str	r0, [sp, #0]
    2e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e9a:	4d20      	ldr	r5, [pc, #128]	; (2f1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2e9c:	1f01      	subs	r1, r0, #4
    2e9e:	b2cc      	uxtb	r4, r1
    2ea0:	7829      	ldrb	r1, [r5, #0]
    2ea2:	b179      	cbz	r1, 2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    2ea4:	786a      	ldrb	r2, [r5, #1]
    2ea6:	4282      	cmp	r2, r0
    2ea8:	d10c      	bne.n	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    2eaa:	4a1d      	ldr	r2, [pc, #116]	; (2f20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2eac:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2eb0:	6010      	str	r0, [r2, #0]
    2eb2:	2901      	cmp	r1, #1
    2eb4:	bf08      	it	eq
    2eb6:	f7ff fd39 	bleq	292c <MPSL_IRQ_TIMER0_Handler+0x100>
    2eba:	702f      	strb	r7, [r5, #0]
    2ebc:	4919      	ldr	r1, [pc, #100]	; (2f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2ebe:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2ec2:	6088      	str	r0, [r1, #8]
    2ec4:	4918      	ldr	r1, [pc, #96]	; (2f28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2ec6:	f104 0010 	add.w	r0, r4, #16
    2eca:	fa06 f000 	lsl.w	r0, r6, r0
    2ece:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2ed2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    2ed6:	00a0      	lsls	r0, r4, #2
    2ed8:	4408      	add	r0, r1
    2eda:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2ede:	4a13      	ldr	r2, [pc, #76]	; (2f2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    2ee0:	6812      	ldr	r2, [r2, #0]
    2ee2:	1a80      	subs	r0, r0, r2
    2ee4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ee8:	2802      	cmp	r0, #2
    2eea:	d307      	bcc.n	2efc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    2eec:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    2ef0:	2000      	movs	r0, #0
    2ef2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2ef6:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    2efa:	500f      	str	r7, [r1, r0]
    2efc:	480c      	ldr	r0, [pc, #48]	; (2f30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    2efe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    2f02:	9000      	str	r0, [sp, #0]
    2f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f08:	f240 31f5 	movw	r1, #1013	; 0x3f5
    2f0c:	206c      	movs	r0, #108	; 0x6c
    2f0e:	f000 fc59 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f12:	0000      	.short	0x0000
    2f14:	40008000 	.word	0x40008000
    2f18:	40008140 	.word	0x40008140
    2f1c:	20000046 	.word	0x20000046
    2f20:	4001f508 	.word	0x4001f508
    2f24:	20000044 	.word	0x20000044
    2f28:	4000b000 	.word	0x4000b000
    2f2c:	4000b504 	.word	0x4000b504
    2f30:	4000b140 	.word	0x4000b140

00002f34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f34:	4825      	ldr	r0, [pc, #148]	; (2fcc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    2f36:	4a24      	ldr	r2, [pc, #144]	; (2fc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    2f38:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2f3c:	4924      	ldr	r1, [pc, #144]	; (2fd0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    2f3e:	1d03      	adds	r3, r0, #4
    2f40:	f891 c000 	ldrb.w	ip, [r1]
    2f44:	2100      	movs	r1, #0
    2f46:	f1bc 0f00 	cmp.w	ip, #0
    2f4a:	d010      	beq.n	2f6e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    2f4c:	4a21      	ldr	r2, [pc, #132]	; (2fd4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    2f4e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2f52:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2f56:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2f5a:	bf00      	nop
    2f5c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    2f60:	2a00      	cmp	r2, #0
    2f62:	bf04      	itt	eq
    2f64:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    2f68:	2800      	cmpeq	r0, #0
    2f6a:	d111      	bne.n	2f90 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    2f6c:	e00a      	b.n	2f84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2f6e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2f72:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2f76:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2f7a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2f7e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2f82:	e7eb      	b.n	2f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2f84:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f88:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2f8c:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    2f90:	4811      	ldr	r0, [pc, #68]	; (2fd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    2f92:	f04f 32ff 	mov.w	r2, #4294967295
    2f96:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2f9a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2f9e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2fa2:	f100 0204 	add.w	r2, r0, #4
    2fa6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2faa:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2fae:	f102 0204 	add.w	r2, r2, #4
    2fb2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2fb6:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    2fba:	f102 0204 	add.w	r2, r2, #4
    2fbe:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2fc2:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    2fc6:	4770      	bx	lr
    2fc8:	fffbfffd 	.word	0xfffbfffd
    2fcc:	4000b000 	.word	0x4000b000
    2fd0:	20000046 	.word	0x20000046
    2fd4:	fffafffd 	.word	0xfffafffd
    2fd8:	40008000 	.word	0x40008000

00002fdc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    2fdc:	b510      	push	{r4, lr}
    2fde:	2807      	cmp	r0, #7
    2fe0:	d20d      	bcs.n	2ffe <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    2fe2:	e8df f000 	tbb	[pc, r0]
    2fe6:	0404      	.short	0x0404
    2fe8:	06060404 	.word	0x06060404
    2fec:	0006      	.short	0x0006
    2fee:	4906      	ldr	r1, [pc, #24]	; (3008 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    2ff0:	e002      	b.n	2ff8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    2ff2:	1f00      	subs	r0, r0, #4
    2ff4:	4905      	ldr	r1, [pc, #20]	; (300c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    2ff6:	b2c0      	uxtb	r0, r0
    2ff8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2ffc:	bd10      	pop	{r4, pc}
    2ffe:	f240 3195 	movw	r1, #917	; 0x395
    3002:	206c      	movs	r0, #108	; 0x6c
    3004:	f000 fbde 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3008:	40008140 	.word	0x40008140
    300c:	4000b140 	.word	0x4000b140

00003010 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3010:	b510      	push	{r4, lr}
    3012:	2807      	cmp	r0, #7
    3014:	d20d      	bcs.n	3032 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3016:	e8df f000 	tbb	[pc, r0]
    301a:	0404      	.short	0x0404
    301c:	06060404 	.word	0x06060404
    3020:	0006      	.short	0x0006
    3022:	4906      	ldr	r1, [pc, #24]	; (303c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3024:	e002      	b.n	302c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3026:	1f00      	subs	r0, r0, #4
    3028:	4905      	ldr	r1, [pc, #20]	; (3040 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    302a:	b2c0      	uxtb	r0, r0
    302c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3030:	bd10      	pop	{r4, pc}
    3032:	f240 3195 	movw	r1, #917	; 0x395
    3036:	206c      	movs	r0, #108	; 0x6c
    3038:	f000 fbc4 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    303c:	40008140 	.word	0x40008140
    3040:	4000b140 	.word	0x4000b140

00003044 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	481f      	ldr	r0, [pc, #124]	; (30c4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    3048:	2400      	movs	r4, #0
    304a:	2104      	movs	r1, #4
    304c:	7004      	strb	r4, [r0, #0]
    304e:	1e80      	subs	r0, r0, #2
    3050:	7001      	strb	r1, [r0, #0]
    3052:	0589      	lsls	r1, r1, #22
    3054:	60c4      	str	r4, [r0, #12]
    3056:	6081      	str	r1, [r0, #8]
    3058:	f7ff fc68 	bl	292c <MPSL_IRQ_TIMER0_Handler+0x100>
    305c:	2501      	movs	r5, #1
    305e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3062:	02eb      	lsls	r3, r5, #11
    3064:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3068:	f3bf 8f4f 	dsb	sy
    306c:	f3bf 8f6f 	isb	sy
    3070:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3074:	4814      	ldr	r0, [pc, #80]	; (30c8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3076:	6045      	str	r5, [r0, #4]
    3078:	6085      	str	r5, [r0, #8]
    307a:	4914      	ldr	r1, [pc, #80]	; (30cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    307c:	680a      	ldr	r2, [r1, #0]
    307e:	2a00      	cmp	r2, #0
    3080:	d1fc      	bne.n	307c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3082:	1e51      	subs	r1, r2, #1
    3084:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3088:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    308c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3090:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3094:	490e      	ldr	r1, [pc, #56]	; (30d0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3096:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    309a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    309e:	1d09      	adds	r1, r1, #4
    30a0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    30a4:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    30a8:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    30ac:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    30b0:	6005      	str	r5, [r0, #0]
    30b2:	f44f 7182 	mov.w	r1, #260	; 0x104
    30b6:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    30ba:	2102      	movs	r1, #2
    30bc:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    30c0:	bd70      	pop	{r4, r5, r6, pc}
    30c2:	0000      	.short	0x0000
    30c4:	20000046 	.word	0x20000046
    30c8:	4000b000 	.word	0x4000b000
    30cc:	4000b504 	.word	0x4000b504
    30d0:	4000b004 	.word	0x4000b004

000030d4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    30d4:	4808      	ldr	r0, [pc, #32]	; (30f8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    30d6:	f990 0000 	ldrsb.w	r0, [r0]
    30da:	2800      	cmp	r0, #0
    30dc:	bfb8      	it	lt
    30de:	4770      	bxlt	lr
    30e0:	f000 011f 	and.w	r1, r0, #31
    30e4:	2201      	movs	r2, #1
    30e6:	fa02 f101 	lsl.w	r1, r2, r1
    30ea:	0940      	lsrs	r0, r0, #5
    30ec:	0080      	lsls	r0, r0, #2
    30ee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    30f2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    30f6:	4770      	bx	lr
    30f8:	20000474 	.word	0x20000474

000030fc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    30fc:	4803      	ldr	r0, [pc, #12]	; (310c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    30fe:	7800      	ldrb	r0, [r0, #0]
    3100:	2803      	cmp	r0, #3
    3102:	bf0c      	ite	eq
    3104:	2001      	moveq	r0, #1
    3106:	2000      	movne	r0, #0
    3108:	4770      	bx	lr
    310a:	0000      	.short	0x0000
    310c:	20000460 	.word	0x20000460

00003110 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3110:	4801      	ldr	r0, [pc, #4]	; (3118 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3112:	8840      	ldrh	r0, [r0, #2]
    3114:	4770      	bx	lr
    3116:	0000      	.short	0x0000
    3118:	20000460 	.word	0x20000460

0000311c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    311c:	4803      	ldr	r0, [pc, #12]	; (312c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    311e:	7800      	ldrb	r0, [r0, #0]
    3120:	2802      	cmp	r0, #2
    3122:	bf16      	itet	ne
    3124:	2803      	cmpne	r0, #3
    3126:	2001      	moveq	r0, #1
    3128:	2000      	movne	r0, #0
    312a:	4770      	bx	lr
    312c:	20000460 	.word	0x20000460

00003130 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    3130:	4802      	ldr	r0, [pc, #8]	; (313c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    3132:	2100      	movs	r1, #0
    3134:	7001      	strb	r1, [r0, #0]
    3136:	8041      	strh	r1, [r0, #2]
    3138:	4770      	bx	lr
    313a:	0000      	.short	0x0000
    313c:	20000460 	.word	0x20000460

00003140 <MPSL_IRQ_CLOCK_Handler>:
    3140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3144:	4c16      	ldr	r4, [pc, #88]	; (31a0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3146:	7a60      	ldrb	r0, [r4, #9]
    3148:	2800      	cmp	r0, #0
    314a:	d027      	beq.n	319c <MPSL_IRQ_CLOCK_Handler+0x5c>
    314c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3150:	058d      	lsls	r5, r1, #22
    3152:	4628      	mov	r0, r5
    3154:	f009 fbe0 	bl	c918 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3158:	4680      	mov	r8, r0
    315a:	f44f 7182 	mov.w	r1, #260	; 0x104
    315e:	4628      	mov	r0, r5
    3160:	f009 fbda 	bl	c918 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3164:	2600      	movs	r6, #0
    3166:	4607      	mov	r7, r0
    3168:	f1b8 0f00 	cmp.w	r8, #0
    316c:	d009      	beq.n	3182 <MPSL_IRQ_CLOCK_Handler+0x42>
    316e:	2001      	movs	r0, #1
    3170:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3174:	7920      	ldrb	r0, [r4, #4]
    3176:	b120      	cbz	r0, 3182 <MPSL_IRQ_CLOCK_Handler+0x42>
    3178:	7126      	strb	r6, [r4, #4]
    317a:	69e0      	ldr	r0, [r4, #28]
    317c:	b108      	cbz	r0, 3182 <MPSL_IRQ_CLOCK_Handler+0x42>
    317e:	4780      	blx	r0
    3180:	61e6      	str	r6, [r4, #28]
    3182:	b137      	cbz	r7, 3192 <MPSL_IRQ_CLOCK_Handler+0x52>
    3184:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3188:	2002      	movs	r0, #2
    318a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    318e:	f000 fa4d 	bl	362c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3192:	4640      	mov	r0, r8
    3194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3198:	f000 b858 	b.w	324c <MPSL_IRQ_CLOCK_Handler+0x10c>
    319c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31a0:	20000054 	.word	0x20000054
    31a4:	b510      	push	{r4, lr}
    31a6:	f009 fc61 	bl	ca6c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    31aa:	b930      	cbnz	r0, 31ba <MPSL_IRQ_CLOCK_Handler+0x7a>
    31ac:	f009 fc7f 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31b0:	b918      	cbnz	r0, 31ba <MPSL_IRQ_CLOCK_Handler+0x7a>
    31b2:	f009 fcb2 	bl	cb1a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    31b6:	2800      	cmp	r0, #0
    31b8:	d002      	beq.n	31c0 <MPSL_IRQ_CLOCK_Handler+0x80>
    31ba:	4902      	ldr	r1, [pc, #8]	; (31c4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    31bc:	2002      	movs	r0, #2
    31be:	6008      	str	r0, [r1, #0]
    31c0:	bd10      	pop	{r4, pc}
    31c2:	0000      	.short	0x0000
    31c4:	40000c34 	.word	0x40000c34
    31c8:	b570      	push	{r4, r5, r6, lr}
    31ca:	f000 f991 	bl	34f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    31ce:	f000 fa81 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31d2:	4c09      	ldr	r4, [pc, #36]	; (31f8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    31d4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31d8:	b130      	cbz	r0, 31e8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    31da:	f7ff ffe3 	bl	31a4 <MPSL_IRQ_CLOCK_Handler+0x64>
    31de:	2001      	movs	r0, #1
    31e0:	6128      	str	r0, [r5, #16]
    31e2:	2004      	movs	r0, #4
    31e4:	72a0      	strb	r0, [r4, #10]
    31e6:	e004      	b.n	31f2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    31e8:	2003      	movs	r0, #3
    31ea:	72a0      	strb	r0, [r4, #10]
    31ec:	2001      	movs	r0, #1
    31ee:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31f2:	2000      	movs	r0, #0
    31f4:	71e0      	strb	r0, [r4, #7]
    31f6:	bd70      	pop	{r4, r5, r6, pc}
    31f8:	20000054 	.word	0x20000054
    31fc:	b570      	push	{r4, r5, r6, lr}
    31fe:	4c12      	ldr	r4, [pc, #72]	; (3248 <MPSL_IRQ_CLOCK_Handler+0x108>)
    3200:	79a0      	ldrb	r0, [r4, #6]
    3202:	b1e0      	cbz	r0, 323e <MPSL_IRQ_CLOCK_Handler+0xfe>
    3204:	79e1      	ldrb	r1, [r4, #7]
    3206:	1e40      	subs	r0, r0, #1
    3208:	4281      	cmp	r1, r0
    320a:	da18      	bge.n	323e <MPSL_IRQ_CLOCK_Handler+0xfe>
    320c:	f000 fa62 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3210:	4605      	mov	r5, r0
    3212:	f000 fb4b 	bl	38ac <mpsl_temperature_get>
    3216:	79a1      	ldrb	r1, [r4, #6]
    3218:	2901      	cmp	r1, #1
    321a:	d902      	bls.n	3222 <MPSL_IRQ_CLOCK_Handler+0xe2>
    321c:	79e1      	ldrb	r1, [r4, #7]
    321e:	1c49      	adds	r1, r1, #1
    3220:	71e1      	strb	r1, [r4, #7]
    3222:	b10d      	cbz	r5, 3228 <MPSL_IRQ_CLOCK_Handler+0xe8>
    3224:	6961      	ldr	r1, [r4, #20]
    3226:	e000      	b.n	322a <MPSL_IRQ_CLOCK_Handler+0xea>
    3228:	6921      	ldr	r1, [r4, #16]
    322a:	1a41      	subs	r1, r0, r1
    322c:	2902      	cmp	r1, #2
    322e:	da02      	bge.n	3236 <MPSL_IRQ_CLOCK_Handler+0xf6>
    3230:	f111 0f02 	cmn.w	r1, #2
    3234:	dc07      	bgt.n	3246 <MPSL_IRQ_CLOCK_Handler+0x106>
    3236:	b10d      	cbz	r5, 323c <MPSL_IRQ_CLOCK_Handler+0xfc>
    3238:	6160      	str	r0, [r4, #20]
    323a:	e000      	b.n	323e <MPSL_IRQ_CLOCK_Handler+0xfe>
    323c:	6120      	str	r0, [r4, #16]
    323e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3242:	f7ff bfc1 	b.w	31c8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3246:	bd70      	pop	{r4, r5, r6, pc}
    3248:	20000054 	.word	0x20000054
    324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3250:	4606      	mov	r6, r0
    3252:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3256:	f44f 7186 	mov.w	r1, #268	; 0x10c
    325a:	4628      	mov	r0, r5
    325c:	f009 fb5c 	bl	c918 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3260:	4680      	mov	r8, r0
    3262:	f44f 7188 	mov.w	r1, #272	; 0x110
    3266:	4628      	mov	r0, r5
    3268:	f009 fb56 	bl	c918 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    326c:	4c27      	ldr	r4, [pc, #156]	; (330c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    326e:	4682      	mov	sl, r0
    3270:	7827      	ldrb	r7, [r4, #0]
    3272:	f104 0008 	add.w	r0, r4, #8
    3276:	f009 fbc3 	bl	ca00 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    327a:	b110      	cbz	r0, 3282 <MPSL_IRQ_CLOCK_Handler+0x142>
    327c:	f240 11b9 	movw	r1, #441	; 0x1b9
    3280:	e016      	b.n	32b0 <MPSL_IRQ_CLOCK_Handler+0x170>
    3282:	f04f 0901 	mov.w	r9, #1
    3286:	b146      	cbz	r6, 329a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3288:	7aa0      	ldrb	r0, [r4, #10]
    328a:	2803      	cmp	r0, #3
    328c:	d105      	bne.n	329a <MPSL_IRQ_CLOCK_Handler+0x15a>
    328e:	2004      	movs	r0, #4
    3290:	72a0      	strb	r0, [r4, #10]
    3292:	f7ff ff87 	bl	31a4 <MPSL_IRQ_CLOCK_Handler+0x64>
    3296:	f8c5 9010 	str.w	r9, [r5, #16]
    329a:	2600      	movs	r6, #0
    329c:	f1b8 0f00 	cmp.w	r8, #0
    32a0:	d018      	beq.n	32d4 <MPSL_IRQ_CLOCK_Handler+0x194>
    32a2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    32a6:	7aa0      	ldrb	r0, [r4, #10]
    32a8:	2804      	cmp	r0, #4
    32aa:	d004      	beq.n	32b6 <MPSL_IRQ_CLOCK_Handler+0x176>
    32ac:	f240 11cb 	movw	r1, #459	; 0x1cb
    32b0:	206d      	movs	r0, #109	; 0x6d
    32b2:	f000 fa87 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32b6:	f009 fbd9 	bl	ca6c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    32ba:	b928      	cbnz	r0, 32c8 <MPSL_IRQ_CLOCK_Handler+0x188>
    32bc:	f009 fbf7 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    32c0:	b910      	cbnz	r0, 32c8 <MPSL_IRQ_CLOCK_Handler+0x188>
    32c2:	f009 fc2a 	bl	cb1a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    32c6:	b108      	cbz	r0, 32cc <MPSL_IRQ_CLOCK_Handler+0x18c>
    32c8:	4811      	ldr	r0, [pc, #68]	; (3310 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32ca:	6006      	str	r6, [r0, #0]
    32cc:	2002      	movs	r0, #2
    32ce:	72a0      	strb	r0, [r4, #10]
    32d0:	f000 f8f2 	bl	34b8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32d4:	f1ba 0f00 	cmp.w	sl, #0
    32d8:	d008      	beq.n	32ec <MPSL_IRQ_CLOCK_Handler+0x1ac>
    32da:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    32de:	7aa0      	ldrb	r0, [r4, #10]
    32e0:	2802      	cmp	r0, #2
    32e2:	d101      	bne.n	32e8 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    32e4:	f7ff ff8a 	bl	31fc <MPSL_IRQ_CLOCK_Handler+0xbc>
    32e8:	f8c5 9014 	str.w	r9, [r5, #20]
    32ec:	b13f      	cbz	r7, 32fe <MPSL_IRQ_CLOCK_Handler+0x1be>
    32ee:	7026      	strb	r6, [r4, #0]
    32f0:	7aa0      	ldrb	r0, [r4, #10]
    32f2:	2802      	cmp	r0, #2
    32f4:	d101      	bne.n	32fa <MPSL_IRQ_CLOCK_Handler+0x1ba>
    32f6:	f7ff ff67 	bl	31c8 <MPSL_IRQ_CLOCK_Handler+0x88>
    32fa:	f000 f8dd 	bl	34b8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3302:	4802      	ldr	r0, [pc, #8]	; (330c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3304:	3008      	adds	r0, #8
    3306:	f009 bb92 	b.w	ca2e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    330a:	0000      	.short	0x0000
    330c:	20000054 	.word	0x20000054
    3310:	40000c34 	.word	0x40000c34
    3314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3318:	4c5f      	ldr	r4, [pc, #380]	; (3498 <MPSL_IRQ_CLOCK_Handler+0x358>)
    331a:	2700      	movs	r7, #0
    331c:	4606      	mov	r6, r0
    331e:	61a7      	str	r7, [r4, #24]
    3320:	7842      	ldrb	r2, [r0, #1]
    3322:	7881      	ldrb	r1, [r0, #2]
    3324:	7800      	ldrb	r0, [r0, #0]
    3326:	72e0      	strb	r0, [r4, #11]
    3328:	7162      	strb	r2, [r4, #5]
    332a:	71a1      	strb	r1, [r4, #6]
    332c:	71e7      	strb	r7, [r4, #7]
    332e:	f04f 0801 	mov.w	r8, #1
    3332:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3336:	2805      	cmp	r0, #5
    3338:	d225      	bcs.n	3386 <MPSL_IRQ_CLOCK_Handler+0x246>
    333a:	e8df f000 	tbb	[pc, r0]
    333e:	0310      	.short	0x0310
    3340:	00222006 	.word	0x00222006
    3344:	f8c4 8018 	str.w	r8, [r4, #24]
    3348:	e009      	b.n	335e <MPSL_IRQ_CLOCK_Handler+0x21e>
    334a:	f000 f8d1 	bl	34f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    334e:	2101      	movs	r1, #1
    3350:	4628      	mov	r0, r5
    3352:	f009 fae6 	bl	c922 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3356:	2800      	cmp	r0, #0
    3358:	d0f9      	beq.n	334e <MPSL_IRQ_CLOCK_Handler+0x20e>
    335a:	2002      	movs	r0, #2
    335c:	61a0      	str	r0, [r4, #24]
    335e:	f009 fb0c 	bl	c97a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3362:	b1b0      	cbz	r0, 3392 <MPSL_IRQ_CLOCK_Handler+0x252>
    3364:	f000 f9d0 	bl	3708 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3368:	7e21      	ldrb	r1, [r4, #24]
    336a:	f001 0103 	and.w	r1, r1, #3
    336e:	4288      	cmp	r0, r1
    3370:	d10f      	bne.n	3392 <MPSL_IRQ_CLOCK_Handler+0x252>
    3372:	79b0      	ldrb	r0, [r6, #6]
    3374:	b150      	cbz	r0, 338c <MPSL_IRQ_CLOCK_Handler+0x24c>
    3376:	2002      	movs	r0, #2
    3378:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    337c:	e070      	b.n	3460 <MPSL_IRQ_CLOCK_Handler+0x320>
    337e:	4847      	ldr	r0, [pc, #284]	; (349c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3380:	e7ec      	b.n	335c <MPSL_IRQ_CLOCK_Handler+0x21c>
    3382:	4847      	ldr	r0, [pc, #284]	; (34a0 <MPSL_IRQ_CLOCK_Handler+0x360>)
    3384:	e7ea      	b.n	335c <MPSL_IRQ_CLOCK_Handler+0x21c>
    3386:	f240 313a 	movw	r1, #826	; 0x33a
    338a:	e04d      	b.n	3428 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    338c:	f000 f990 	bl	36b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3390:	e066      	b.n	3460 <MPSL_IRQ_CLOCK_Handler+0x320>
    3392:	f8c5 800c 	str.w	r8, [r5, #12]
    3396:	f44f 7a82 	mov.w	sl, #260	; 0x104
    339a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    339e:	69a0      	ldr	r0, [r4, #24]
    33a0:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    33a4:	f009 fb4e 	bl	ca44 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    33a8:	b940      	cbnz	r0, 33bc <MPSL_IRQ_CLOCK_Handler+0x27c>
    33aa:	f009 fb55 	bl	ca58 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    33ae:	b928      	cbnz	r0, 33bc <MPSL_IRQ_CLOCK_Handler+0x27c>
    33b0:	f009 fb69 	bl	ca86 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    33b4:	b910      	cbnz	r0, 33bc <MPSL_IRQ_CLOCK_Handler+0x27c>
    33b6:	f009 fb7a 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33ba:	b138      	cbz	r0, 33cc <MPSL_IRQ_CLOCK_Handler+0x28c>
    33bc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    33c0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    33c4:	4937      	ldr	r1, [pc, #220]	; (34a4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    33c6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    33ca:	6008      	str	r0, [r1, #0]
    33cc:	f009 fb3a 	bl	ca44 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    33d0:	b940      	cbnz	r0, 33e4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    33d2:	f009 fb41 	bl	ca58 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    33d6:	b928      	cbnz	r0, 33e4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    33d8:	f009 fb55 	bl	ca86 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    33dc:	b910      	cbnz	r0, 33e4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    33de:	f009 fb66 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33e2:	b118      	cbz	r0, 33ec <MPSL_IRQ_CLOCK_Handler+0x2ac>
    33e4:	492f      	ldr	r1, [pc, #188]	; (34a4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    33e6:	3110      	adds	r1, #16
    33e8:	f8c1 8000 	str.w	r8, [r1]
    33ec:	f8c5 8008 	str.w	r8, [r5, #8]
    33f0:	2002      	movs	r0, #2
    33f2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33f6:	79b0      	ldrb	r0, [r6, #6]
    33f8:	bb90      	cbnz	r0, 3460 <MPSL_IRQ_CLOCK_Handler+0x320>
    33fa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    33fe:	f010 0f02 	tst.w	r0, #2
    3402:	d00f      	beq.n	3424 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3404:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 34a8 <MPSL_IRQ_CLOCK_Handler+0x368>
    3408:	f8d9 1000 	ldr.w	r1, [r9]
    340c:	43c9      	mvns	r1, r1
    340e:	f341 1100 	sbfx	r1, r1, #4, #1
    3412:	f101 0801 	add.w	r8, r1, #1
    3416:	f8d9 1000 	ldr.w	r1, [r9]
    341a:	f041 0110 	orr.w	r1, r1, #16
    341e:	f8c9 1000 	str.w	r1, [r9]
    3422:	e007      	b.n	3434 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    3424:	f240 21fb 	movw	r1, #763	; 0x2fb
    3428:	206d      	movs	r0, #109	; 0x6d
    342a:	f000 f9cb 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    342e:	bf00      	nop
    3430:	f000 faf2 	bl	3a18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3434:	4651      	mov	r1, sl
    3436:	4628      	mov	r0, r5
    3438:	f009 fa6e 	bl	c918 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    343c:	2800      	cmp	r0, #0
    343e:	d0f7      	beq.n	3430 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3440:	f000 f936 	bl	36b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3444:	f1b8 0f00 	cmp.w	r8, #0
    3448:	d105      	bne.n	3456 <MPSL_IRQ_CLOCK_Handler+0x316>
    344a:	f8d9 1000 	ldr.w	r1, [r9]
    344e:	f021 0110 	bic.w	r1, r1, #16
    3452:	f8c9 1000 	str.w	r1, [r9]
    3456:	2002      	movs	r0, #2
    3458:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    345c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3460:	79a0      	ldrb	r0, [r4, #6]
    3462:	b170      	cbz	r0, 3482 <MPSL_IRQ_CLOCK_Handler+0x342>
    3464:	7830      	ldrb	r0, [r6, #0]
    3466:	b960      	cbnz	r0, 3482 <MPSL_IRQ_CLOCK_Handler+0x342>
    3468:	f000 f934 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    346c:	4606      	mov	r6, r0
    346e:	f000 fa1d 	bl	38ac <mpsl_temperature_get>
    3472:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3476:	b116      	cbz	r6, 347e <MPSL_IRQ_CLOCK_Handler+0x33e>
    3478:	e9c4 1004 	strd	r1, r0, [r4, #16]
    347c:	e001      	b.n	3482 <MPSL_IRQ_CLOCK_Handler+0x342>
    347e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3482:	2101      	movs	r1, #1
    3484:	4628      	mov	r0, r5
    3486:	f009 fa4c 	bl	c922 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    348a:	b108      	cbz	r0, 3490 <MPSL_IRQ_CLOCK_Handler+0x350>
    348c:	f000 f91c 	bl	36c8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3490:	72a7      	strb	r7, [r4, #10]
    3492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3496:	0000      	.short	0x0000
    3498:	20000054 	.word	0x20000054
    349c:	00020001 	.word	0x00020001
    34a0:	00030001 	.word	0x00030001
    34a4:	4000053c 	.word	0x4000053c
    34a8:	e000ed10 	.word	0xe000ed10

000034ac <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    34ac:	4801      	ldr	r0, [pc, #4]	; (34b4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    34ae:	89c0      	ldrh	r0, [r0, #14]
    34b0:	4770      	bx	lr
    34b2:	0000      	.short	0x0000
    34b4:	20000054 	.word	0x20000054

000034b8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    34b8:	b510      	push	{r4, lr}
    34ba:	f3ef 8410 	mrs	r4, PRIMASK
    34be:	b672      	cpsid	i
    34c0:	480a      	ldr	r0, [pc, #40]	; (34ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    34c2:	7841      	ldrb	r1, [r0, #1]
    34c4:	b129      	cbz	r1, 34d2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    34c6:	7841      	ldrb	r1, [r0, #1]
    34c8:	1e49      	subs	r1, r1, #1
    34ca:	7041      	strb	r1, [r0, #1]
    34cc:	7841      	ldrb	r1, [r0, #1]
    34ce:	b129      	cbz	r1, 34dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    34d0:	e008      	b.n	34e4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    34d2:	f44f 718e 	mov.w	r1, #284	; 0x11c
    34d6:	206d      	movs	r0, #109	; 0x6d
    34d8:	f000 f974 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34dc:	7880      	ldrb	r0, [r0, #2]
    34de:	b908      	cbnz	r0, 34e4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    34e0:	f000 f906 	bl	36f0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    34e4:	2c00      	cmp	r4, #0
    34e6:	d100      	bne.n	34ea <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    34e8:	b662      	cpsie	i
    34ea:	bd10      	pop	{r4, pc}
    34ec:	20000054 	.word	0x20000054

000034f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    34f0:	b510      	push	{r4, lr}
    34f2:	f3ef 8410 	mrs	r4, PRIMASK
    34f6:	b672      	cpsid	i
    34f8:	4806      	ldr	r0, [pc, #24]	; (3514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    34fa:	7841      	ldrb	r1, [r0, #1]
    34fc:	1c49      	adds	r1, r1, #1
    34fe:	7041      	strb	r1, [r0, #1]
    3500:	7840      	ldrb	r0, [r0, #1]
    3502:	2801      	cmp	r0, #1
    3504:	d101      	bne.n	350a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3506:	f009 fa23 	bl	c950 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    350a:	2c00      	cmp	r4, #0
    350c:	d100      	bne.n	3510 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    350e:	b662      	cpsie	i
    3510:	bd10      	pop	{r4, pc}
    3512:	0000      	.short	0x0000
    3514:	20000054 	.word	0x20000054

00003518 <mpsl_clock_hfclk_release>:
    3518:	4805      	ldr	r0, [pc, #20]	; (3530 <mpsl_clock_hfclk_release+0x18>)
    351a:	b510      	push	{r4, lr}
    351c:	78c1      	ldrb	r1, [r0, #3]
    351e:	b121      	cbz	r1, 352a <mpsl_clock_hfclk_release+0x12>
    3520:	2100      	movs	r1, #0
    3522:	7101      	strb	r1, [r0, #4]
    3524:	70c1      	strb	r1, [r0, #3]
    3526:	f7ff ffc7 	bl	34b8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    352a:	2000      	movs	r0, #0
    352c:	bd10      	pop	{r4, pc}
    352e:	0000      	.short	0x0000
    3530:	20000054 	.word	0x20000054

00003534 <mpsl_clock_hfclk_request>:
    3534:	b570      	push	{r4, r5, r6, lr}
    3536:	4c0c      	ldr	r4, [pc, #48]	; (3568 <mpsl_clock_hfclk_request+0x34>)
    3538:	78e1      	ldrb	r1, [r4, #3]
    353a:	b961      	cbnz	r1, 3556 <mpsl_clock_hfclk_request+0x22>
    353c:	2501      	movs	r5, #1
    353e:	70e5      	strb	r5, [r4, #3]
    3540:	61e0      	str	r0, [r4, #28]
    3542:	f7ff ffd5 	bl	34f0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3546:	f000 f8c5 	bl	36d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    354a:	b130      	cbz	r0, 355a <mpsl_clock_hfclk_request+0x26>
    354c:	69e0      	ldr	r0, [r4, #28]
    354e:	b110      	cbz	r0, 3556 <mpsl_clock_hfclk_request+0x22>
    3550:	4780      	blx	r0
    3552:	2000      	movs	r0, #0
    3554:	61e0      	str	r0, [r4, #28]
    3556:	2000      	movs	r0, #0
    3558:	bd70      	pop	{r4, r5, r6, pc}
    355a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    355e:	7125      	strb	r5, [r4, #4]
    3560:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3564:	e7f7      	b.n	3556 <mpsl_clock_hfclk_request+0x22>
    3566:	0000      	.short	0x0000
    3568:	20000054 	.word	0x20000054

0000356c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3570:	0005      	movs	r5, r0
    3572:	f06f 0015 	mvn.w	r0, #21
    3576:	d03f      	beq.n	35f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3578:	7829      	ldrb	r1, [r5, #0]
    357a:	2904      	cmp	r1, #4
    357c:	d83c      	bhi.n	35f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    357e:	2900      	cmp	r1, #0
    3580:	7869      	ldrb	r1, [r5, #1]
    3582:	d03b      	beq.n	35fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3584:	2900      	cmp	r1, #0
    3586:	d137      	bne.n	35f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3588:	78a9      	ldrb	r1, [r5, #2]
    358a:	2900      	cmp	r1, #0
    358c:	d134      	bne.n	35f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    358e:	2000      	movs	r0, #0
    3590:	f009 f98d 	bl	c8ae <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1e>
    3594:	2000      	movs	r0, #0
    3596:	f009 f97d 	bl	c894 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
    359a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    359e:	f04f 31ff 	mov.w	r1, #4294967295
    35a2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    35a6:	2600      	movs	r6, #0
    35a8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    35ac:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    35b0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    35b4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    35b8:	4c14      	ldr	r4, [pc, #80]	; (360c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    35ba:	7066      	strb	r6, [r4, #1]
    35bc:	88a8      	ldrh	r0, [r5, #4]
    35be:	81a0      	strh	r0, [r4, #12]
    35c0:	f009 f9bd 	bl	c93e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    35c4:	2701      	movs	r7, #1
    35c6:	b108      	cbz	r0, 35cc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    35c8:	70e7      	strb	r7, [r4, #3]
    35ca:	7067      	strb	r7, [r4, #1]
    35cc:	2101      	movs	r1, #1
    35ce:	4640      	mov	r0, r8
    35d0:	f009 f9a7 	bl	c922 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    35d4:	b108      	cbz	r0, 35da <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    35d6:	f000 f877 	bl	36c8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    35da:	f240 50f5 	movw	r0, #1525	; 0x5f5
    35de:	81e0      	strh	r0, [r4, #14]
    35e0:	4628      	mov	r0, r5
    35e2:	f7ff fe97 	bl	3314 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    35e6:	7267      	strb	r7, [r4, #9]
    35e8:	2000      	movs	r0, #0
    35ea:	f009 f953 	bl	c894 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
    35ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35f2:	4630      	mov	r0, r6
    35f4:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    35f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35fc:	2900      	cmp	r1, #0
    35fe:	d0fb      	beq.n	35f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3600:	2920      	cmp	r1, #32
    3602:	d8f9      	bhi.n	35f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3604:	78a9      	ldrb	r1, [r5, #2]
    3606:	2921      	cmp	r1, #33	; 0x21
    3608:	d9c1      	bls.n	358e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    360a:	e7f5      	b.n	35f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    360c:	20000054 	.word	0x20000054

00003610 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3610:	4801      	ldr	r0, [pc, #4]	; (3618 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3612:	8980      	ldrh	r0, [r0, #12]
    3614:	4770      	bx	lr
    3616:	0000      	.short	0x0000
    3618:	20000054 	.word	0x20000054

0000361c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    361c:	4802      	ldr	r0, [pc, #8]	; (3628 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    361e:	7a80      	ldrb	r0, [r0, #10]
    3620:	2800      	cmp	r0, #0
    3622:	d000      	beq.n	3626 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3624:	2001      	movs	r0, #1
    3626:	4770      	bx	lr
    3628:	20000054 	.word	0x20000054

0000362c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    362e:	4d1f      	ldr	r5, [pc, #124]	; (36ac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3630:	7ae8      	ldrb	r0, [r5, #11]
    3632:	2800      	cmp	r0, #0
    3634:	d10f      	bne.n	3656 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3636:	7e28      	ldrb	r0, [r5, #24]
    3638:	f000 0003 	and.w	r0, r0, #3
    363c:	f009 f98d 	bl	c95a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3640:	2800      	cmp	r0, #0
    3642:	d008      	beq.n	3656 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3644:	f3ef 8110 	mrs	r1, PRIMASK
    3648:	b672      	cpsid	i
    364a:	f7ff ffe7 	bl	361c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    364e:	b118      	cbz	r0, 3658 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3650:	2900      	cmp	r1, #0
    3652:	d100      	bne.n	3656 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3654:	b662      	cpsie	i
    3656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3658:	2601      	movs	r6, #1
    365a:	72ae      	strb	r6, [r5, #10]
    365c:	b901      	cbnz	r1, 3660 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    365e:	b662      	cpsie	i
    3660:	2018      	movs	r0, #24
    3662:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3666:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    366a:	61a6      	str	r6, [r4, #24]
    366c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3670:	f8ad 0000 	strh.w	r0, [sp]
    3674:	f8bd 0000 	ldrh.w	r0, [sp]
    3678:	1e41      	subs	r1, r0, #1
    367a:	f8ad 1000 	strh.w	r1, [sp]
    367e:	d2f9      	bcs.n	3674 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3680:	2700      	movs	r7, #0
    3682:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3686:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    368a:	4808      	ldr	r0, [pc, #32]	; (36ac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    368c:	3008      	adds	r0, #8
    368e:	f009 f9ca 	bl	ca26 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3692:	702f      	strb	r7, [r5, #0]
    3694:	f7ff fd98 	bl	31c8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3698:	6166      	str	r6, [r4, #20]
    369a:	7968      	ldrb	r0, [r5, #5]
    369c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    36a0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    36a4:	2018      	movs	r0, #24
    36a6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    36aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36ac:	20000054 	.word	0x20000054

000036b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    36b0:	b510      	push	{r4, lr}
    36b2:	4c04      	ldr	r4, [pc, #16]	; (36c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    36b4:	7e20      	ldrb	r0, [r4, #24]
    36b6:	f000 0003 	and.w	r0, r0, #3
    36ba:	f009 f94e 	bl	c95a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    36be:	2800      	cmp	r0, #0
    36c0:	d0f8      	beq.n	36b4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    36c2:	bd10      	pop	{r4, pc}
    36c4:	20000054 	.word	0x20000054

000036c8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    36c8:	4901      	ldr	r1, [pc, #4]	; (36d0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    36ca:	2001      	movs	r0, #1
    36cc:	7008      	strb	r0, [r1, #0]
    36ce:	4770      	bx	lr
    36d0:	20000475 	.word	0x20000475

000036d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    36d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36d8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    36dc:	b918      	cbnz	r0, 36e6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    36de:	4803      	ldr	r0, [pc, #12]	; (36ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    36e0:	7800      	ldrb	r0, [r0, #0]
    36e2:	2800      	cmp	r0, #0
    36e4:	d000      	beq.n	36e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    36e6:	2001      	movs	r0, #1
    36e8:	4770      	bx	lr
    36ea:	0000      	.short	0x0000
    36ec:	20000475 	.word	0x20000475

000036f0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    36f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36f4:	2101      	movs	r1, #1
    36f6:	6041      	str	r1, [r0, #4]
    36f8:	2100      	movs	r1, #0
    36fa:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    36fe:	4801      	ldr	r0, [pc, #4]	; (3704 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3700:	7001      	strb	r1, [r0, #0]
    3702:	4770      	bx	lr
    3704:	20000475 	.word	0x20000475

00003708 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3708:	4802      	ldr	r0, [pc, #8]	; (3714 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    370a:	6800      	ldr	r0, [r0, #0]
    370c:	f000 0003 	and.w	r0, r0, #3
    3710:	4770      	bx	lr
    3712:	0000      	.short	0x0000
    3714:	4000041c 	.word	0x4000041c
    3718:	b510      	push	{r4, lr}
    371a:	b131      	cbz	r1, 372a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    371c:	2901      	cmp	r1, #1
    371e:	d007      	beq.n	3730 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3720:	f240 3102 	movw	r1, #770	; 0x302
    3724:	a005      	add	r0, pc, #20	; (adr r0, 373c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3726:	f000 f821 	bl	376c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    372a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    372e:	e001      	b.n	3734 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3730:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3734:	f000 0001 	and.w	r0, r0, #1
    3738:	bd10      	pop	{r4, pc}
    373a:	0000      	.short	0x0000
    373c:	5f66726e 	.word	0x5f66726e
    3740:	636f6c63 	.word	0x636f6c63
    3744:	00682e6b 	.word	0x00682e6b
    3748:	f3bf 8f4f 	dsb	sy
    374c:	4805      	ldr	r0, [pc, #20]	; (3764 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    374e:	6801      	ldr	r1, [r0, #0]
    3750:	4a05      	ldr	r2, [pc, #20]	; (3768 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3752:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3756:	4311      	orrs	r1, r2
    3758:	6001      	str	r1, [r0, #0]
    375a:	f3bf 8f4f 	dsb	sy
    375e:	bf00      	nop
    3760:	e7fd      	b.n	375e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3762:	0000      	.short	0x0000
    3764:	e000ed0c 	.word	0xe000ed0c
    3768:	05fa0004 	.word	0x05fa0004

0000376c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    376c:	b672      	cpsid	i
    376e:	4a03      	ldr	r2, [pc, #12]	; (377c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3770:	6852      	ldr	r2, [r2, #4]
    3772:	b102      	cbz	r2, 3776 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3774:	4790      	blx	r2
    3776:	f7ff ffe7 	bl	3748 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    377a:	0000      	.short	0x0000
    377c:	20000074 	.word	0x20000074
    3780:	4806      	ldr	r0, [pc, #24]	; (379c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3782:	b510      	push	{r4, lr}
    3784:	2100      	movs	r1, #0
    3786:	6001      	str	r1, [r0, #0]
    3788:	2101      	movs	r1, #1
    378a:	6001      	str	r1, [r0, #0]
    378c:	4608      	mov	r0, r1
    378e:	f009 f90b 	bl	c9a8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3796:	2001      	movs	r0, #1
    3798:	f009 b8f9 	b.w	c98e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    379c:	40001ffc 	.word	0x40001ffc
    37a0:	4807      	ldr	r0, [pc, #28]	; (37c0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    37a2:	b510      	push	{r4, lr}
    37a4:	2101      	movs	r1, #1
    37a6:	6041      	str	r1, [r0, #4]
    37a8:	1e89      	subs	r1, r1, #2
    37aa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    37ae:	200c      	movs	r0, #12
    37b0:	f009 f8fa 	bl	c9a8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37b8:	200c      	movs	r0, #12
    37ba:	f009 b8e8 	b.w	c98e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37be:	0000      	.short	0x0000
    37c0:	4000c000 	.word	0x4000c000

000037c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    37c4:	b50e      	push	{r1, r2, r3, lr}
    37c6:	b672      	cpsid	i
    37c8:	4a0f      	ldr	r2, [pc, #60]	; (3808 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    37ca:	6855      	ldr	r5, [r2, #4]
    37cc:	b1d5      	cbz	r5, 3804 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    37ce:	2200      	movs	r2, #0
    37d0:	4603      	mov	r3, r0
    37d2:	466e      	mov	r6, sp
    37d4:	240a      	movs	r4, #10
    37d6:	e003      	b.n	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    37d8:	fbb0 f0f4 	udiv	r0, r0, r4
    37dc:	1c52      	adds	r2, r2, #1
    37de:	b2d2      	uxtb	r2, r2
    37e0:	2800      	cmp	r0, #0
    37e2:	d1f9      	bne.n	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    37e4:	54b0      	strb	r0, [r6, r2]
    37e6:	e009      	b.n	37fc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    37e8:	fbb3 f0f4 	udiv	r0, r3, r4
    37ec:	fb04 3010 	mls	r0, r4, r0, r3
    37f0:	fbb3 f3f4 	udiv	r3, r3, r4
    37f4:	1e52      	subs	r2, r2, #1
    37f6:	b2d2      	uxtb	r2, r2
    37f8:	3030      	adds	r0, #48	; 0x30
    37fa:	54b0      	strb	r0, [r6, r2]
    37fc:	2a00      	cmp	r2, #0
    37fe:	d1f3      	bne.n	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3800:	4630      	mov	r0, r6
    3802:	47a8      	blx	r5
    3804:	f7ff ffa0 	bl	3748 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3808:	20000074 	.word	0x20000074

0000380c <mpsl_init>:
    380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3810:	4c18      	ldr	r4, [pc, #96]	; (3874 <mpsl_init+0x68>)
    3812:	4606      	mov	r6, r0
    3814:	4617      	mov	r7, r2
    3816:	7860      	ldrb	r0, [r4, #1]
    3818:	460d      	mov	r5, r1
    381a:	b118      	cbz	r0, 3824 <mpsl_init+0x18>
    381c:	f04f 30ff 	mov.w	r0, #4294967295
    3820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3824:	f7fc fc8c 	bl	140 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    3828:	b906      	cbnz	r6, 382c <mpsl_init+0x20>
    382a:	4e13      	ldr	r6, [pc, #76]	; (3878 <mpsl_init+0x6c>)
    382c:	6067      	str	r7, [r4, #4]
    382e:	7025      	strb	r5, [r4, #0]
    3830:	f7ff ffa6 	bl	3780 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3834:	f7ff ffb4 	bl	37a0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    3838:	4630      	mov	r0, r6
    383a:	f7ff fe97 	bl	356c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    383e:	0006      	movs	r6, r0
    3840:	d1ee      	bne.n	3820 <mpsl_init+0x14>
    3842:	f7fe feaf 	bl	25a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3846:	f7ff fef1 	bl	362c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    384a:	f008 fff7 	bl	c83c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    384e:	4628      	mov	r0, r5
    3850:	f009 f89d 	bl	c98e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3854:	2001      	movs	r0, #1
    3856:	2d00      	cmp	r5, #0
    3858:	db09      	blt.n	386e <mpsl_init+0x62>
    385a:	f005 011f 	and.w	r1, r5, #31
    385e:	fa00 f101 	lsl.w	r1, r0, r1
    3862:	096a      	lsrs	r2, r5, #5
    3864:	0092      	lsls	r2, r2, #2
    3866:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    386a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    386e:	7060      	strb	r0, [r4, #1]
    3870:	4630      	mov	r0, r6
    3872:	e7d5      	b.n	3820 <mpsl_init+0x14>
    3874:	20000074 	.word	0x20000074
    3878:	0000c9ca 	.word	0x0000c9ca

0000387c <mpsl_is_initialized>:
    387c:	4801      	ldr	r0, [pc, #4]	; (3884 <mpsl_is_initialized+0x8>)
    387e:	7840      	ldrb	r0, [r0, #1]
    3880:	4770      	bx	lr
    3882:	0000      	.short	0x0000
    3884:	20000074 	.word	0x20000074

00003888 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3888:	4807      	ldr	r0, [pc, #28]	; (38a8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    388a:	f990 0000 	ldrsb.w	r0, [r0]
    388e:	2800      	cmp	r0, #0
    3890:	db09      	blt.n	38a6 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3892:	f000 021f 	and.w	r2, r0, #31
    3896:	2101      	movs	r1, #1
    3898:	4091      	lsls	r1, r2
    389a:	0940      	lsrs	r0, r0, #5
    389c:	0080      	lsls	r0, r0, #2
    389e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    38a2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38a6:	4770      	bx	lr
    38a8:	20000074 	.word	0x20000074

000038ac <mpsl_temperature_get>:
    38ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b0:	2601      	movs	r6, #1
    38b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    38b6:	0331      	lsls	r1, r6, #12
    38b8:	f04f 0800 	mov.w	r8, #0
    38bc:	4640      	mov	r0, r8
    38be:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    38c2:	f3bf 8f4f 	dsb	sy
    38c6:	f3bf 8f6f 	isb	sy
    38ca:	4c16      	ldr	r4, [pc, #88]	; (3924 <mpsl_temperature_get+0x78>)
    38cc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    38d0:	200c      	movs	r0, #12
    38d2:	f009 f888 	bl	c9e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38d6:	4d14      	ldr	r5, [pc, #80]	; (3928 <mpsl_temperature_get+0x7c>)
    38d8:	6828      	ldr	r0, [r5, #0]
    38da:	43c0      	mvns	r0, r0
    38dc:	f340 1700 	sbfx	r7, r0, #4, #1
    38e0:	6828      	ldr	r0, [r5, #0]
    38e2:	f040 0010 	orr.w	r0, r0, #16
    38e6:	6028      	str	r0, [r5, #0]
    38e8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    38ec:	6026      	str	r6, [r4, #0]
    38ee:	1c7f      	adds	r7, r7, #1
    38f0:	e002      	b.n	38f8 <mpsl_temperature_get+0x4c>
    38f2:	bf00      	nop
    38f4:	f000 f890 	bl	3a18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    38f8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    38fc:	2800      	cmp	r0, #0
    38fe:	d0f9      	beq.n	38f4 <mpsl_temperature_get+0x48>
    3900:	b91f      	cbnz	r7, 390a <mpsl_temperature_get+0x5e>
    3902:	6828      	ldr	r0, [r5, #0]
    3904:	f020 0010 	bic.w	r0, r0, #16
    3908:	6028      	str	r0, [r5, #0]
    390a:	4808      	ldr	r0, [pc, #32]	; (392c <mpsl_temperature_get+0x80>)
    390c:	6805      	ldr	r5, [r0, #0]
    390e:	6066      	str	r6, [r4, #4]
    3910:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3914:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3918:	200c      	movs	r0, #12
    391a:	f009 f864 	bl	c9e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    391e:	4628      	mov	r0, r5
    3920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3924:	4000c000 	.word	0x4000c000
    3928:	e000ed10 	.word	0xe000ed10
    392c:	4000c508 	.word	0x4000c508

00003930 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3930:	b510      	push	{r4, lr}
    3932:	4602      	mov	r2, r0
    3934:	2005      	movs	r0, #5
    3936:	490c      	ldr	r1, [pc, #48]	; (3968 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3938:	e004      	b.n	3944 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    393a:	bf00      	nop
    393c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3940:	791b      	ldrb	r3, [r3, #4]
    3942:	b133      	cbz	r3, 3952 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3944:	1e40      	subs	r0, r0, #1
    3946:	b2c0      	uxtb	r0, r0
    3948:	d2f8      	bcs.n	393c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    394a:	2148      	movs	r1, #72	; 0x48
    394c:	2069      	movs	r0, #105	; 0x69
    394e:	f7ff ff39 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3952:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3956:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    395a:	2200      	movs	r2, #0
    395c:	714a      	strb	r2, [r1, #5]
    395e:	718a      	strb	r2, [r1, #6]
    3960:	2201      	movs	r2, #1
    3962:	710a      	strb	r2, [r1, #4]
    3964:	bd10      	pop	{r4, pc}
    3966:	0000      	.short	0x0000
    3968:	2000118c 	.word	0x2000118c

0000396c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    396c:	b510      	push	{r4, lr}
    396e:	2805      	cmp	r0, #5
    3970:	d301      	bcc.n	3976 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3972:	2158      	movs	r1, #88	; 0x58
    3974:	e006      	b.n	3984 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3976:	490a      	ldr	r1, [pc, #40]	; (39a0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3978:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    397c:	7901      	ldrb	r1, [r0, #4]
    397e:	2901      	cmp	r1, #1
    3980:	d003      	beq.n	398a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3982:	2159      	movs	r1, #89	; 0x59
    3984:	2069      	movs	r0, #105	; 0x69
    3986:	f7ff ff1d 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    398a:	7941      	ldrb	r1, [r0, #5]
    398c:	7982      	ldrb	r2, [r0, #6]
    398e:	1c49      	adds	r1, r1, #1
    3990:	b2c9      	uxtb	r1, r1
    3992:	428a      	cmp	r2, r1
    3994:	d000      	beq.n	3998 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3996:	7141      	strb	r1, [r0, #5]
    3998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    399c:	f7ff bf74 	b.w	3888 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    39a0:	2000118c 	.word	0x2000118c

000039a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    39a4:	b570      	push	{r4, r5, r6, lr}
    39a6:	2505      	movs	r5, #5
    39a8:	4e0e      	ldr	r6, [pc, #56]	; (39e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    39aa:	4c0f      	ldr	r4, [pc, #60]	; (39e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    39ac:	e016      	b.n	39dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39ae:	7821      	ldrb	r1, [r4, #0]
    39b0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    39b4:	7902      	ldrb	r2, [r0, #4]
    39b6:	2a01      	cmp	r2, #1
    39b8:	d108      	bne.n	39cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39ba:	7942      	ldrb	r2, [r0, #5]
    39bc:	7983      	ldrb	r3, [r0, #6]
    39be:	429a      	cmp	r2, r3
    39c0:	d004      	beq.n	39cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39c2:	7942      	ldrb	r2, [r0, #5]
    39c4:	7182      	strb	r2, [r0, #6]
    39c6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    39ca:	4780      	blx	r0
    39cc:	7820      	ldrb	r0, [r4, #0]
    39ce:	1c40      	adds	r0, r0, #1
    39d0:	b2c0      	uxtb	r0, r0
    39d2:	7020      	strb	r0, [r4, #0]
    39d4:	2805      	cmp	r0, #5
    39d6:	d301      	bcc.n	39dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39d8:	2000      	movs	r0, #0
    39da:	7020      	strb	r0, [r4, #0]
    39dc:	1e6d      	subs	r5, r5, #1
    39de:	b2ed      	uxtb	r5, r5
    39e0:	d2e5      	bcs.n	39ae <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    39e2:	bd70      	pop	{r4, r5, r6, pc}
    39e4:	2000118c 	.word	0x2000118c
    39e8:	20000476 	.word	0x20000476

000039ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    39ec:	b500      	push	{lr}
    39ee:	f009 f829 	bl	ca44 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    39f2:	b940      	cbnz	r0, 3a06 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39f4:	f009 f830 	bl	ca58 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    39f8:	b928      	cbnz	r0, 3a06 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39fa:	f009 f844 	bl	ca86 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    39fe:	b910      	cbnz	r0, 3a06 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a00:	f009 f855 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a04:	b108      	cbz	r0, 3a0a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3a06:	4802      	ldr	r0, [pc, #8]	; (3a10 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3a08:	bd00      	pop	{pc}
    3a0a:	4802      	ldr	r0, [pc, #8]	; (3a14 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3a0c:	bd00      	pop	{pc}
    3a0e:	0000      	.short	0x0000
    3a10:	4000050c 	.word	0x4000050c
    3a14:	4001e700 	.word	0x4001e700

00003a18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3a18:	b510      	push	{r4, lr}
    3a1a:	f009 f848 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a1e:	b330      	cbz	r0, 3a6e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3a20:	f3ef 8010 	mrs	r0, PRIMASK
    3a24:	b1c8      	cbz	r0, 3a5a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3a26:	2100      	movs	r1, #0
    3a28:	b672      	cpsid	i
    3a2a:	4812      	ldr	r0, [pc, #72]	; (3a74 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3a2c:	6802      	ldr	r2, [r0, #0]
    3a2e:	6803      	ldr	r3, [r0, #0]
    3a30:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3a34:	f043 0310 	orr.w	r3, r3, #16
    3a38:	6003      	str	r3, [r0, #0]
    3a3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a3e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3a42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3a46:	431c      	orrs	r4, r3
    3a48:	d000      	beq.n	3a4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3a4a:	bf40      	sev
    3a4c:	bf20      	wfe
    3a4e:	bf00      	nop
    3a50:	bf00      	nop
    3a52:	bf00      	nop
    3a54:	bf00      	nop
    3a56:	b112      	cbz	r2, 3a5e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3a58:	e005      	b.n	3a66 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3a5a:	2101      	movs	r1, #1
    3a5c:	e7e4      	b.n	3a28 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3a5e:	6802      	ldr	r2, [r0, #0]
    3a60:	f022 0210 	bic.w	r2, r2, #16
    3a64:	6002      	str	r2, [r0, #0]
    3a66:	2900      	cmp	r1, #0
    3a68:	d000      	beq.n	3a6c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3a6a:	b662      	cpsie	i
    3a6c:	bd10      	pop	{r4, pc}
    3a6e:	bf20      	wfe
    3a70:	bd10      	pop	{r4, pc}
    3a72:	0000      	.short	0x0000
    3a74:	e000ed10 	.word	0xe000ed10

00003a78 <mpsl_cx_granted_ops_get>:
    3a78:	4901      	ldr	r1, [pc, #4]	; (3a80 <mpsl_cx_granted_ops_get+0x8>)
    3a7a:	6809      	ldr	r1, [r1, #0]
    3a7c:	6889      	ldr	r1, [r1, #8]
    3a7e:	4708      	bx	r1
    3a80:	2000007c 	.word	0x2000007c

00003a84 <mpsl_cx_register_callback>:
    3a84:	4901      	ldr	r1, [pc, #4]	; (3a8c <mpsl_cx_register_callback+0x8>)
    3a86:	6809      	ldr	r1, [r1, #0]
    3a88:	6909      	ldr	r1, [r1, #16]
    3a8a:	4708      	bx	r1
    3a8c:	2000007c 	.word	0x2000007c

00003a90 <mpsl_cx_release>:
    3a90:	4801      	ldr	r0, [pc, #4]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a92:	6800      	ldr	r0, [r0, #0]
    3a94:	6840      	ldr	r0, [r0, #4]
    3a96:	4700      	bx	r0
    3a98:	2000007c 	.word	0x2000007c

00003a9c <mpsl_cx_request>:
    3a9c:	4901      	ldr	r1, [pc, #4]	; (3aa4 <mpsl_cx_request+0x8>)
    3a9e:	6809      	ldr	r1, [r1, #0]
    3aa0:	6809      	ldr	r1, [r1, #0]
    3aa2:	4708      	bx	r1
    3aa4:	2000007c 	.word	0x2000007c

00003aa8 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI>:
    3aa8:	0000ccf7 0000ccef 0000cce3 0000ccf3     ................
    3ab8:	0000cceb 4c0eb570 28007860 7820d117     ....p..L`x.(.. x
    3ac8:	28012500 2002d106 69207020 6920b110     .%.(...  p i.. i
    3ad8:	61254780 28037820 7025d109 28006920     .G%a x.(..%p i.(
    3ae8:	6860d005 47806940 47806920 bd706125     ..`h@i.G i.G%ap.
    3af8:	20000080                                ... 

00003afc <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    3afc:	b510      	push	{r4, lr}
    3afe:	4c08      	ldr	r4, [pc, #32]	; (3b20 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    3b00:	7820      	ldrb	r0, [r4, #0]
    3b02:	2802      	cmp	r0, #2
    3b04:	d002      	beq.n	3b0c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    3b06:	7820      	ldrb	r0, [r4, #0]
    3b08:	2803      	cmp	r0, #3
    3b0a:	d102      	bne.n	3b12 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    3b0c:	6860      	ldr	r0, [r4, #4]
    3b0e:	6880      	ldr	r0, [r0, #8]
    3b10:	4780      	blx	r0
    3b12:	2000      	movs	r0, #0
    3b14:	70a0      	strb	r0, [r4, #2]
    3b16:	7060      	strb	r0, [r4, #1]
    3b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b1c:	f7ff bfce 	b.w	3abc <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    3b20:	20000080 	.word	0x20000080

00003b24 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>:
    3b24:	4802      	ldr	r0, [pc, #8]	; (3b30 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xc>)
    3b26:	7800      	ldrb	r0, [r0, #0]
    3b28:	2800      	cmp	r0, #0
    3b2a:	d000      	beq.n	3b2e <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xa>
    3b2c:	2001      	movs	r0, #1
    3b2e:	4770      	bx	lr
    3b30:	20000080 	.word	0x20000080

00003b34 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    3b34:	b538      	push	{r3, r4, r5, lr}
    3b36:	4604      	mov	r4, r0
    3b38:	2805      	cmp	r0, #5
    3b3a:	d304      	bcc.n	3b46 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    3b3c:	f240 113d 	movw	r1, #317	; 0x13d
    3b40:	2068      	movs	r0, #104	; 0x68
    3b42:	f7ff fe3f 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b46:	f7ff ffb9 	bl	3abc <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    3b4a:	4d10      	ldr	r5, [pc, #64]	; (3b8c <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x58>)
    3b4c:	2001      	movs	r0, #1
    3b4e:	7068      	strb	r0, [r5, #1]
    3b50:	7828      	ldrb	r0, [r5, #0]
    3b52:	2802      	cmp	r0, #2
    3b54:	d116      	bne.n	3b84 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>
    3b56:	6868      	ldr	r0, [r5, #4]
    3b58:	68c1      	ldr	r1, [r0, #12]
    3b5a:	4620      	mov	r0, r4
    3b5c:	4788      	blx	r1
    3b5e:	490c      	ldr	r1, [pc, #48]	; (3b90 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x5c>)
    3b60:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    3b64:	7852      	ldrb	r2, [r2, #1]
    3b66:	4282      	cmp	r2, r0
    3b68:	d30d      	bcc.n	3b86 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    3b6a:	78a8      	ldrb	r0, [r5, #2]
    3b6c:	2801      	cmp	r0, #1
    3b6e:	d00a      	beq.n	3b86 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    3b70:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    3b74:	f88d 0000 	strb.w	r0, [sp]
    3b78:	f88d 4001 	strb.w	r4, [sp, #1]
    3b7c:	6868      	ldr	r0, [r5, #4]
    3b7e:	6801      	ldr	r1, [r0, #0]
    3b80:	4668      	mov	r0, sp
    3b82:	4788      	blx	r1
    3b84:	bd38      	pop	{r3, r4, r5, pc}
    3b86:	2001      	movs	r0, #1
    3b88:	e7f4      	b.n	3b74 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x40>
    3b8a:	0000      	.short	0x0000
    3b8c:	20000080 	.word	0x20000080
    3b90:	200014d0 	.word	0x200014d0

00003b94 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    3b94:	4905      	ldr	r1, [pc, #20]	; (3bac <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    3b96:	780a      	ldrb	r2, [r1, #0]
    3b98:	2a02      	cmp	r2, #2
    3b9a:	d004      	beq.n	3ba6 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3b9c:	780a      	ldrb	r2, [r1, #0]
    3b9e:	2a03      	cmp	r2, #3
    3ba0:	d001      	beq.n	3ba6 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3ba2:	2000      	movs	r0, #0
    3ba4:	4770      	bx	lr
    3ba6:	6849      	ldr	r1, [r1, #4]
    3ba8:	6909      	ldr	r1, [r1, #16]
    3baa:	4708      	bx	r1
    3bac:	20000080 	.word	0x20000080

00003bb0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    3bb0:	b510      	push	{r4, lr}
    3bb2:	b158      	cbz	r0, 3bcc <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    3bb4:	4908      	ldr	r1, [pc, #32]	; (3bd8 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    3bb6:	780a      	ldrb	r2, [r1, #0]
    3bb8:	2a02      	cmp	r2, #2
    3bba:	d002      	beq.n	3bc2 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    3bbc:	780a      	ldrb	r2, [r1, #0]
    3bbe:	2a03      	cmp	r2, #3
    3bc0:	d109      	bne.n	3bd6 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    3bc2:	6849      	ldr	r1, [r1, #4]
    3bc4:	6849      	ldr	r1, [r1, #4]
    3bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3bca:	4708      	bx	r1
    3bcc:	f240 1153 	movw	r1, #339	; 0x153
    3bd0:	2068      	movs	r0, #104	; 0x68
    3bd2:	f7ff fdf7 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bd6:	bd10      	pop	{r4, pc}
    3bd8:	20000080 	.word	0x20000080

00003bdc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    3bdc:	4901      	ldr	r1, [pc, #4]	; (3be4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    3bde:	2001      	movs	r0, #1
    3be0:	7088      	strb	r0, [r1, #2]
    3be2:	4770      	bx	lr
    3be4:	20000080 	.word	0x20000080

00003be8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    3be8:	4805      	ldr	r0, [pc, #20]	; (3c00 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    3bea:	7801      	ldrb	r1, [r0, #0]
    3bec:	2902      	cmp	r1, #2
    3bee:	d004      	beq.n	3bfa <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3bf0:	7801      	ldrb	r1, [r0, #0]
    3bf2:	2903      	cmp	r1, #3
    3bf4:	d001      	beq.n	3bfa <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3bf6:	2000      	movs	r0, #0
    3bf8:	4770      	bx	lr
    3bfa:	6840      	ldr	r0, [r0, #4]
    3bfc:	6980      	ldr	r0, [r0, #24]
    3bfe:	4700      	bx	r0
    3c00:	20000080 	.word	0x20000080

00003c04 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3c04:	0000cd1b 0000cd53 0000cd3d 0000cd2b     ....S...=...+...
    3c14:	0000cd37 0000cd25 0000cd19 0000cd17     7...%...........
    3c24:	0000cd4f 0000cd43 0000cd31 0000cd1f     O...C...1.......
    3c34:	0000cd11 0000cd09 0000cd0d 0000cd03     ................

00003c44 <mpsl_fem_disable>:
    3c44:	4801      	ldr	r0, [pc, #4]	; (3c4c <mpsl_fem_disable+0x8>)
    3c46:	6800      	ldr	r0, [r0, #0]
    3c48:	6800      	ldr	r0, [r0, #0]
    3c4a:	4700      	bx	r0
    3c4c:	20000094 	.word	0x20000094

00003c50 <mpsl_fem_lna_configuration_clear>:
    3c50:	4801      	ldr	r0, [pc, #4]	; (3c58 <mpsl_fem_lna_configuration_clear+0x8>)
    3c52:	6800      	ldr	r0, [r0, #0]
    3c54:	6940      	ldr	r0, [r0, #20]
    3c56:	4700      	bx	r0
    3c58:	20000094 	.word	0x20000094

00003c5c <mpsl_fem_lna_configuration_set>:
    3c5c:	4a01      	ldr	r2, [pc, #4]	; (3c64 <mpsl_fem_lna_configuration_set+0x8>)
    3c5e:	6812      	ldr	r2, [r2, #0]
    3c60:	68d2      	ldr	r2, [r2, #12]
    3c62:	4710      	bx	r2
    3c64:	20000094 	.word	0x20000094

00003c68 <mpsl_fem_lna_is_configured>:
    3c68:	4901      	ldr	r1, [pc, #4]	; (3c70 <mpsl_fem_lna_is_configured+0x8>)
    3c6a:	6809      	ldr	r1, [r1, #0]
    3c6c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    3c6e:	4708      	bx	r1
    3c70:	20000094 	.word	0x20000094

00003c74 <mpsl_fem_pa_configuration_clear>:
    3c74:	4801      	ldr	r0, [pc, #4]	; (3c7c <mpsl_fem_pa_configuration_clear+0x8>)
    3c76:	6800      	ldr	r0, [r0, #0]
    3c78:	6900      	ldr	r0, [r0, #16]
    3c7a:	4700      	bx	r0
    3c7c:	20000094 	.word	0x20000094

00003c80 <mpsl_fem_pa_configuration_set>:
    3c80:	4a01      	ldr	r2, [pc, #4]	; (3c88 <mpsl_fem_pa_configuration_set+0x8>)
    3c82:	6812      	ldr	r2, [r2, #0]
    3c84:	6892      	ldr	r2, [r2, #8]
    3c86:	4710      	bx	r2
    3c88:	20000094 	.word	0x20000094

00003c8c <mpsl_fem_pa_gain_set>:
    3c8c:	4901      	ldr	r1, [pc, #4]	; (3c94 <mpsl_fem_pa_gain_set+0x8>)
    3c8e:	6809      	ldr	r1, [r1, #0]
    3c90:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3c92:	4708      	bx	r1
    3c94:	20000094 	.word	0x20000094

00003c98 <mpsl_fem_pa_is_configured>:
    3c98:	4901      	ldr	r1, [pc, #4]	; (3ca0 <mpsl_fem_pa_is_configured+0x8>)
    3c9a:	6809      	ldr	r1, [r1, #0]
    3c9c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    3c9e:	4708      	bx	r1
    3ca0:	20000094 	.word	0x20000094

00003ca4 <mpsl_fem_tx_power_split>:
    3ca4:	4b01      	ldr	r3, [pc, #4]	; (3cac <mpsl_fem_tx_power_split+0x8>)
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	685b      	ldr	r3, [r3, #4]
    3caa:	4718      	bx	r3
    3cac:	20000094 	.word	0x20000094

00003cb0 <mpsl_fem_device_config_254_apply_get>:
    3cb0:	4801      	ldr	r0, [pc, #4]	; (3cb8 <mpsl_fem_device_config_254_apply_get+0x8>)
    3cb2:	7800      	ldrb	r0, [r0, #0]
    3cb4:	4770      	bx	lr
    3cb6:	0000      	.short	0x0000
    3cb8:	20000477 	.word	0x20000477
    3cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3cbe:	4c14      	ldr	r4, [pc, #80]	; (3d10 <mpsl_fem_device_config_254_apply_get+0x60>)
    3cc0:	7a20      	ldrb	r0, [r4, #8]
    3cc2:	f88d 0001 	strb.w	r0, [sp, #1]
    3cc6:	79e0      	ldrb	r0, [r4, #7]
    3cc8:	f88d 0000 	strb.w	r0, [sp]
    3ccc:	79a0      	ldrb	r0, [r4, #6]
    3cce:	f8ad 0004 	strh.w	r0, [sp, #4]
    3cd2:	7960      	ldrb	r0, [r4, #5]
    3cd4:	f8ad 0002 	strh.w	r0, [sp, #2]
    3cd8:	4668      	mov	r0, sp
    3cda:	f006 fb87 	bl	a3ec <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3cde:	b108      	cbz	r0, 3ce4 <mpsl_fem_device_config_254_apply_get+0x34>
    3ce0:	2183      	movs	r1, #131	; 0x83
    3ce2:	e010      	b.n	3d06 <mpsl_fem_device_config_254_apply_get+0x56>
    3ce4:	68e0      	ldr	r0, [r4, #12]
    3ce6:	9002      	str	r0, [sp, #8]
    3ce8:	a802      	add	r0, sp, #8
    3cea:	f006 fb95 	bl	a418 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3cee:	b108      	cbz	r0, 3cf4 <mpsl_fem_device_config_254_apply_get+0x44>
    3cf0:	2187      	movs	r1, #135	; 0x87
    3cf2:	e008      	b.n	3d06 <mpsl_fem_device_config_254_apply_get+0x56>
    3cf4:	4807      	ldr	r0, [pc, #28]	; (3d14 <mpsl_fem_device_config_254_apply_get+0x64>)
    3cf6:	6800      	ldr	r0, [r0, #0]
    3cf8:	9003      	str	r0, [sp, #12]
    3cfa:	a803      	add	r0, sp, #12
    3cfc:	f00b f97e 	bl	effc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3d00:	2800      	cmp	r0, #0
    3d02:	d003      	beq.n	3d0c <mpsl_fem_device_config_254_apply_get+0x5c>
    3d04:	218b      	movs	r1, #139	; 0x8b
    3d06:	2003      	movs	r0, #3
    3d08:	f000 f958 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d0c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3d0e:	0000      	.short	0x0000
    3d10:	200011b4 	.word	0x200011b4
    3d14:	00004070 	.word	0x00004070
    3d18:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3d1a:	4604      	mov	r4, r0
    3d1c:	6800      	ldr	r0, [r0, #0]
    3d1e:	460d      	mov	r5, r1
    3d20:	f100 0003 	add.w	r0, r0, #3
    3d24:	f020 0003 	bic.w	r0, r0, #3
    3d28:	6020      	str	r0, [r4, #0]
    3d2a:	f04f 0000 	mov.w	r0, #0
    3d2e:	9000      	str	r0, [sp, #0]
    3d30:	9001      	str	r0, [sp, #4]
    3d32:	7808      	ldrb	r0, [r1, #0]
    3d34:	f88d 0001 	strb.w	r0, [sp, #1]
    3d38:	7848      	ldrb	r0, [r1, #1]
    3d3a:	f88d 0002 	strb.w	r0, [sp, #2]
    3d3e:	7888      	ldrb	r0, [r1, #2]
    3d40:	f88d 0003 	strb.w	r0, [sp, #3]
    3d44:	78c8      	ldrb	r0, [r1, #3]
    3d46:	f88d 0004 	strb.w	r0, [sp, #4]
    3d4a:	7928      	ldrb	r0, [r5, #4]
    3d4c:	0016      	movs	r6, r2
    3d4e:	f88d 0005 	strb.w	r0, [sp, #5]
    3d52:	d001      	beq.n	3d58 <mpsl_fem_device_config_254_apply_get+0xa8>
    3d54:	2000      	movs	r0, #0
    3d56:	e000      	b.n	3d5a <mpsl_fem_device_config_254_apply_get+0xaa>
    3d58:	6820      	ldr	r0, [r4, #0]
    3d5a:	4669      	mov	r1, sp
    3d5c:	f000 fb08 	bl	4370 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3d60:	6821      	ldr	r1, [r4, #0]
    3d62:	4408      	add	r0, r1
    3d64:	6020      	str	r0, [r4, #0]
    3d66:	78a9      	ldrb	r1, [r5, #2]
    3d68:	b141      	cbz	r1, 3d7c <mpsl_fem_device_config_254_apply_get+0xcc>
    3d6a:	8a6b      	ldrh	r3, [r5, #18]
    3d6c:	78ea      	ldrb	r2, [r5, #3]
    3d6e:	b106      	cbz	r6, 3d72 <mpsl_fem_device_config_254_apply_get+0xc2>
    3d70:	2000      	movs	r0, #0
    3d72:	f000 fd2f 	bl	47d4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    3d76:	6821      	ldr	r1, [r4, #0]
    3d78:	4408      	add	r0, r1
    3d7a:	6020      	str	r0, [r4, #0]
    3d7c:	4819      	ldr	r0, [pc, #100]	; (3de4 <mpsl_fem_device_config_254_apply_get+0x134>)
    3d7e:	78c1      	ldrb	r1, [r0, #3]
    3d80:	b179      	cbz	r1, 3da2 <mpsl_fem_device_config_254_apply_get+0xf2>
    3d82:	7c29      	ldrb	r1, [r5, #16]
    3d84:	b169      	cbz	r1, 3da2 <mpsl_fem_device_config_254_apply_get+0xf2>
    3d86:	7900      	ldrb	r0, [r0, #4]
    3d88:	b108      	cbz	r0, 3d8e <mpsl_fem_device_config_254_apply_get+0xde>
    3d8a:	22ff      	movs	r2, #255	; 0xff
    3d8c:	e000      	b.n	3d90 <mpsl_fem_device_config_254_apply_get+0xe0>
    3d8e:	2225      	movs	r2, #37	; 0x25
    3d90:	b10e      	cbz	r6, 3d96 <mpsl_fem_device_config_254_apply_get+0xe6>
    3d92:	2000      	movs	r0, #0
    3d94:	e000      	b.n	3d98 <mpsl_fem_device_config_254_apply_get+0xe8>
    3d96:	6820      	ldr	r0, [r4, #0]
    3d98:	f000 fda6 	bl	48e8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3d9c:	6821      	ldr	r1, [r4, #0]
    3d9e:	4408      	add	r0, r1
    3da0:	6020      	str	r0, [r4, #0]
    3da2:	7928      	ldrb	r0, [r5, #4]
    3da4:	b168      	cbz	r0, 3dc2 <mpsl_fem_device_config_254_apply_get+0x112>
    3da6:	6820      	ldr	r0, [r4, #0]
    3da8:	1cc0      	adds	r0, r0, #3
    3daa:	f020 0003 	bic.w	r0, r0, #3
    3dae:	6020      	str	r0, [r4, #0]
    3db0:	7d2a      	ldrb	r2, [r5, #20]
    3db2:	7929      	ldrb	r1, [r5, #4]
    3db4:	b106      	cbz	r6, 3db8 <mpsl_fem_device_config_254_apply_get+0x108>
    3db6:	2000      	movs	r0, #0
    3db8:	f006 fd7c 	bl	a8b4 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>
    3dbc:	6821      	ldr	r1, [r4, #0]
    3dbe:	4408      	add	r0, r1
    3dc0:	6020      	str	r0, [r4, #0]
    3dc2:	7d68      	ldrb	r0, [r5, #21]
    3dc4:	2800      	cmp	r0, #0
    3dc6:	d00c      	beq.n	3de2 <mpsl_fem_device_config_254_apply_get+0x132>
    3dc8:	6820      	ldr	r0, [r4, #0]
    3dca:	1cc0      	adds	r0, r0, #3
    3dcc:	f020 0003 	bic.w	r0, r0, #3
    3dd0:	6020      	str	r0, [r4, #0]
    3dd2:	7d69      	ldrb	r1, [r5, #21]
    3dd4:	b106      	cbz	r6, 3dd8 <mpsl_fem_device_config_254_apply_get+0x128>
    3dd6:	2000      	movs	r0, #0
    3dd8:	f000 fdb6 	bl	4948 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>
    3ddc:	6821      	ldr	r1, [r4, #0]
    3dde:	4408      	add	r0, r1
    3de0:	6020      	str	r0, [r4, #0]
    3de2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3de4:	20000098 	.word	0x20000098

00003de8 <sdc_build_revision_get>:
    3de8:	b510      	push	{r4, lr}
    3dea:	b128      	cbz	r0, 3df8 <sdc_build_revision_get+0x10>
    3dec:	2214      	movs	r2, #20
    3dee:	4904      	ldr	r1, [pc, #16]	; (3e00 <sdc_build_revision_get+0x18>)
    3df0:	f008 fe9d 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3df4:	2000      	movs	r0, #0
    3df6:	bd10      	pop	{r4, pc}
    3df8:	f06f 0015 	mvn.w	r0, #21
    3dfc:	bd10      	pop	{r4, pc}
    3dfe:	0000      	.short	0x0000
    3e00:	0000408c 	.word	0x0000408c

00003e04 <sdc_cfg_set>:
    3e04:	b570      	push	{r4, r5, r6, lr}
    3e06:	b110      	cbz	r0, 3e0e <sdc_cfg_set+0xa>
    3e08:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3e0c:	bd70      	pop	{r4, r5, r6, pc}
    3e0e:	4c30      	ldr	r4, [pc, #192]	; (3ed0 <sdc_cfg_set+0xcc>)
    3e10:	7860      	ldrb	r0, [r4, #1]
    3e12:	b110      	cbz	r0, 3e1a <sdc_cfg_set+0x16>
    3e14:	f04f 30ff 	mov.w	r0, #4294967295
    3e18:	bd70      	pop	{r4, r5, r6, pc}
    3e1a:	b321      	cbz	r1, 3e66 <sdc_cfg_set+0x62>
    3e1c:	f06f 0015 	mvn.w	r0, #21
    3e20:	2a00      	cmp	r2, #0
    3e22:	d0f9      	beq.n	3e18 <sdc_cfg_set+0x14>
    3e24:	4b2b      	ldr	r3, [pc, #172]	; (3ed4 <sdc_cfg_set+0xd0>)
    3e26:	290c      	cmp	r1, #12
    3e28:	d2f6      	bcs.n	3e18 <sdc_cfg_set+0x14>
    3e2a:	e8df f001 	tbb	[pc, r1]
    3e2e:	0706      	.short	0x0706
    3e30:	201d0d0a 	.word	0x201d0d0a
    3e34:	3726342c 	.word	0x3726342c
    3e38:	3f3a      	.short	0x3f3a
    3e3a:	e7ed      	b.n	3e18 <sdc_cfg_set+0x14>
    3e3c:	7810      	ldrb	r0, [r2, #0]
    3e3e:	7018      	strb	r0, [r3, #0]
    3e40:	e038      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3e42:	7810      	ldrb	r0, [r2, #0]
    3e44:	7058      	strb	r0, [r3, #1]
    3e46:	e035      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3e48:	7891      	ldrb	r1, [r2, #2]
    3e4a:	2900      	cmp	r1, #0
    3e4c:	d0e4      	beq.n	3e18 <sdc_cfg_set+0x14>
    3e4e:	78d1      	ldrb	r1, [r2, #3]
    3e50:	2900      	cmp	r1, #0
    3e52:	d0e1      	beq.n	3e18 <sdc_cfg_set+0x14>
    3e54:	7811      	ldrb	r1, [r2, #0]
    3e56:	291b      	cmp	r1, #27
    3e58:	d3de      	bcc.n	3e18 <sdc_cfg_set+0x14>
    3e5a:	7851      	ldrb	r1, [r2, #1]
    3e5c:	291b      	cmp	r1, #27
    3e5e:	d3db      	bcc.n	3e18 <sdc_cfg_set+0x14>
    3e60:	6810      	ldr	r0, [r2, #0]
    3e62:	f8c3 0005 	str.w	r0, [r3, #5]
    3e66:	e025      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3e68:	6810      	ldr	r0, [r2, #0]
    3e6a:	60d8      	str	r0, [r3, #12]
    3e6c:	e022      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3e6e:	7811      	ldrb	r1, [r2, #0]
    3e70:	78da      	ldrb	r2, [r3, #3]
    3e72:	4291      	cmp	r1, r2
    3e74:	d3d0      	bcc.n	3e18 <sdc_cfg_set+0x14>
    3e76:	7099      	strb	r1, [r3, #2]
    3e78:	e01c      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3e7a:	7811      	ldrb	r1, [r2, #0]
    3e7c:	789a      	ldrb	r2, [r3, #2]
    3e7e:	4291      	cmp	r1, r2
    3e80:	d8ca      	bhi.n	3e18 <sdc_cfg_set+0x14>
    3e82:	70d9      	strb	r1, [r3, #3]
    3e84:	e016      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3e86:	78e1      	ldrb	r1, [r4, #3]
    3e88:	b111      	cbz	r1, 3e90 <sdc_cfg_set+0x8c>
    3e8a:	7811      	ldrb	r1, [r2, #0]
    3e8c:	2902      	cmp	r1, #2
    3e8e:	d3c3      	bcc.n	3e18 <sdc_cfg_set+0x14>
    3e90:	7810      	ldrb	r0, [r2, #0]
    3e92:	7418      	strb	r0, [r3, #16]
    3e94:	e00e      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3e96:	8810      	ldrh	r0, [r2, #0]
    3e98:	8258      	strh	r0, [r3, #18]
    3e9a:	e00b      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3e9c:	7810      	ldrb	r0, [r2, #0]
    3e9e:	7118      	strb	r0, [r3, #4]
    3ea0:	e008      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3ea2:	7811      	ldrb	r1, [r2, #0]
    3ea4:	2902      	cmp	r1, #2
    3ea6:	d3b7      	bcc.n	3e18 <sdc_cfg_set+0x14>
    3ea8:	7519      	strb	r1, [r3, #20]
    3eaa:	e003      	b.n	3eb4 <sdc_cfg_set+0xb0>
    3eac:	7811      	ldrb	r1, [r2, #0]
    3eae:	2908      	cmp	r1, #8
    3eb0:	d8b2      	bhi.n	3e18 <sdc_cfg_set+0x14>
    3eb2:	7559      	strb	r1, [r3, #21]
    3eb4:	2201      	movs	r2, #1
    3eb6:	4907      	ldr	r1, [pc, #28]	; (3ed4 <sdc_cfg_set+0xd0>)
    3eb8:	2000      	movs	r0, #0
    3eba:	f008 ff64 	bl	cd86 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    3ebe:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3ec2:	db02      	blt.n	3eca <sdc_cfg_set+0xc6>
    3ec4:	f06f 000b 	mvn.w	r0, #11
    3ec8:	bd70      	pop	{r4, r5, r6, pc}
    3eca:	2101      	movs	r1, #1
    3ecc:	70a1      	strb	r1, [r4, #2]
    3ece:	bd70      	pop	{r4, r5, r6, pc}
    3ed0:	20000098 	.word	0x20000098
    3ed4:	200011b4 	.word	0x200011b4

00003ed8 <sdc_enable>:
    3ed8:	b570      	push	{r4, r5, r6, lr}
    3eda:	460c      	mov	r4, r1
    3edc:	0005      	movs	r5, r0
    3ede:	d019      	beq.n	3f14 <sdc_enable+0x3c>
    3ee0:	b1c4      	cbz	r4, 3f14 <sdc_enable+0x3c>
    3ee2:	f000 f907 	bl	40f4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3ee6:	b1c0      	cbz	r0, 3f1a <sdc_enable+0x42>
    3ee8:	4628      	mov	r0, r5
    3eea:	f7ff fd21 	bl	3930 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3eee:	4d0c      	ldr	r5, [pc, #48]	; (3f20 <sdc_enable+0x48>)
    3ef0:	2200      	movs	r2, #0
    3ef2:	490c      	ldr	r1, [pc, #48]	; (3f24 <sdc_enable+0x4c>)
    3ef4:	7028      	strb	r0, [r5, #0]
    3ef6:	4620      	mov	r0, r4
    3ef8:	f008 ff45 	bl	cd86 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    3efc:	f00b fc62 	bl	f7c4 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3f00:	2100      	movs	r1, #0
    3f02:	7828      	ldrb	r0, [r5, #0]
    3f04:	f006 fc44 	bl	a790 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3f08:	f7ff fed8 	bl	3cbc <mpsl_fem_device_config_254_apply_get+0xc>
    3f0c:	2001      	movs	r0, #1
    3f0e:	7068      	strb	r0, [r5, #1]
    3f10:	2000      	movs	r0, #0
    3f12:	bd70      	pop	{r4, r5, r6, pc}
    3f14:	f06f 0015 	mvn.w	r0, #21
    3f18:	bd70      	pop	{r4, r5, r6, pc}
    3f1a:	f04f 30ff 	mov.w	r0, #4294967295
    3f1e:	bd70      	pop	{r4, r5, r6, pc}
    3f20:	20000098 	.word	0x20000098
    3f24:	200011b4 	.word	0x200011b4

00003f28 <sdc_init>:
    3f28:	b530      	push	{r4, r5, lr}
    3f2a:	b087      	sub	sp, #28
    3f2c:	0005      	movs	r5, r0
    3f2e:	d00c      	beq.n	3f4a <sdc_init+0x22>
    3f30:	f7ff fca4 	bl	387c <mpsl_is_initialized>
    3f34:	f04f 34ff 	mov.w	r4, #4294967295
    3f38:	b120      	cbz	r0, 3f44 <sdc_init+0x1c>
    3f3a:	f7ff fb69 	bl	3610 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3f3e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3f42:	d905      	bls.n	3f50 <sdc_init+0x28>
    3f44:	4620      	mov	r0, r4
    3f46:	b007      	add	sp, #28
    3f48:	bd30      	pop	{r4, r5, pc}
    3f4a:	f06f 0015 	mvn.w	r0, #21
    3f4e:	e7fa      	b.n	3f46 <sdc_init+0x1e>
    3f50:	4c15      	ldr	r4, [pc, #84]	; (3fa8 <sdc_init+0x80>)
    3f52:	4816      	ldr	r0, [pc, #88]	; (3fac <sdc_init+0x84>)
    3f54:	60a5      	str	r5, [r4, #8]
    3f56:	f000 f9f5 	bl	4344 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3f5a:	2000      	movs	r0, #0
    3f5c:	7060      	strb	r0, [r4, #1]
    3f5e:	70a0      	strb	r0, [r4, #2]
    3f60:	70e0      	strb	r0, [r4, #3]
    3f62:	7120      	strb	r0, [r4, #4]
    3f64:	4601      	mov	r1, r0
    3f66:	2218      	movs	r2, #24
    3f68:	4668      	mov	r0, sp
    3f6a:	f008 fe5a 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3f6e:	2218      	movs	r2, #24
    3f70:	490f      	ldr	r1, [pc, #60]	; (3fb0 <sdc_init+0x88>)
    3f72:	4668      	mov	r0, sp
    3f74:	f008 fddb 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f78:	2218      	movs	r2, #24
    3f7a:	4669      	mov	r1, sp
    3f7c:	480d      	ldr	r0, [pc, #52]	; (3fb4 <sdc_init+0x8c>)
    3f7e:	f008 fdd6 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f82:	f3ef 8410 	mrs	r4, PRIMASK
    3f86:	b672      	cpsid	i
    3f88:	f06f 000c 	mvn.w	r0, #12
    3f8c:	f000 fd1e 	bl	49cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3f90:	4809      	ldr	r0, [pc, #36]	; (3fb8 <sdc_init+0x90>)
    3f92:	f000 fde9 	bl	4b68 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3f96:	b118      	cbz	r0, 3fa0 <sdc_init+0x78>
    3f98:	219e      	movs	r1, #158	; 0x9e
    3f9a:	2003      	movs	r0, #3
    3f9c:	f000 f80e 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fa0:	b904      	cbnz	r4, 3fa4 <sdc_init+0x7c>
    3fa2:	b662      	cpsie	i
    3fa4:	2000      	movs	r0, #0
    3fa6:	e7ce      	b.n	3f46 <sdc_init+0x1e>
    3fa8:	20000098 	.word	0x20000098
    3fac:	00003cbd 	.word	0x00003cbd
    3fb0:	00004074 	.word	0x00004074
    3fb4:	200011b4 	.word	0x200011b4
    3fb8:	00004121 	.word	0x00004121

00003fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3fbc:	b50e      	push	{r1, r2, r3, lr}
    3fbe:	b672      	cpsid	i
    3fc0:	4a15      	ldr	r2, [pc, #84]	; (4018 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3fc2:	6895      	ldr	r5, [r2, #8]
    3fc4:	b1dd      	cbz	r5, 3ffe <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    3fc6:	2200      	movs	r2, #0
    3fc8:	4603      	mov	r3, r0
    3fca:	466e      	mov	r6, sp
    3fcc:	240a      	movs	r4, #10
    3fce:	e003      	b.n	3fd8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3fd0:	fbb0 f0f4 	udiv	r0, r0, r4
    3fd4:	1c52      	adds	r2, r2, #1
    3fd6:	b2d2      	uxtb	r2, r2
    3fd8:	2800      	cmp	r0, #0
    3fda:	d1f9      	bne.n	3fd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3fdc:	54b0      	strb	r0, [r6, r2]
    3fde:	e00a      	b.n	3ff6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    3fe0:	b2d8      	uxtb	r0, r3
    3fe2:	fbb0 f7f4 	udiv	r7, r0, r4
    3fe6:	fbb3 f3f4 	udiv	r3, r3, r4
    3fea:	fb04 0017 	mls	r0, r4, r7, r0
    3fee:	1e52      	subs	r2, r2, #1
    3ff0:	b2d2      	uxtb	r2, r2
    3ff2:	3030      	adds	r0, #48	; 0x30
    3ff4:	54b0      	strb	r0, [r6, r2]
    3ff6:	2a00      	cmp	r2, #0
    3ff8:	d1f2      	bne.n	3fe0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3ffa:	4630      	mov	r0, r6
    3ffc:	47a8      	blx	r5
    3ffe:	f3bf 8f4f 	dsb	sy
    4002:	4806      	ldr	r0, [pc, #24]	; (401c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4004:	6801      	ldr	r1, [r0, #0]
    4006:	4a06      	ldr	r2, [pc, #24]	; (4020 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4008:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    400c:	4311      	orrs	r1, r2
    400e:	6001      	str	r1, [r0, #0]
    4010:	f3bf 8f4f 	dsb	sy
    4014:	bf00      	nop
    4016:	e7fd      	b.n	4014 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4018:	20000098 	.word	0x20000098
    401c:	e000ed0c 	.word	0xe000ed0c
    4020:	05fa0004 	.word	0x05fa0004

00004024 <sdc_support_ext_scan>:
    4024:	4807      	ldr	r0, [pc, #28]	; (4044 <sdc_support_ext_scan+0x20>)
    4026:	b510      	push	{r4, lr}
    4028:	7881      	ldrb	r1, [r0, #2]
    402a:	7842      	ldrb	r2, [r0, #1]
    402c:	4311      	orrs	r1, r2
    402e:	d002      	beq.n	4036 <sdc_support_ext_scan+0x12>
    4030:	f04f 30ff 	mov.w	r0, #4294967295
    4034:	bd10      	pop	{r4, pc}
    4036:	2101      	movs	r1, #1
    4038:	70c1      	strb	r1, [r0, #3]
    403a:	7101      	strb	r1, [r0, #4]
    403c:	f006 fbd4 	bl	a7e8 <sym_I2OCMPNOS3RX5QDP26QCUET5RLSHIJGL3A3XYRI>
    4040:	2000      	movs	r0, #0
    4042:	bd10      	pop	{r4, pc}
    4044:	20000098 	.word	0x20000098

00004048 <sdc_support_le_2m_phy>:
    4048:	4808      	ldr	r0, [pc, #32]	; (406c <sdc_support_le_2m_phy+0x24>)
    404a:	b510      	push	{r4, lr}
    404c:	7881      	ldrb	r1, [r0, #2]
    404e:	7840      	ldrb	r0, [r0, #1]
    4050:	4301      	orrs	r1, r0
    4052:	d002      	beq.n	405a <sdc_support_le_2m_phy+0x12>
    4054:	f04f 30ff 	mov.w	r0, #4294967295
    4058:	bd10      	pop	{r4, pc}
    405a:	f00b f8c5 	bl	f1e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    405e:	f00b f8f9 	bl	f254 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    4062:	f00b f8e5 	bl	f230 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
    4066:	2000      	movs	r0, #0
    4068:	bd10      	pop	{r4, pc}
    406a:	0000      	.short	0x0000
    406c:	20000098 	.word	0x20000098
    4070:	00000001 	.word	0x00000001
    4074:	00010101 	.word	0x00010101
    4078:	031b1b00 	.word	0x031b1b00
    407c:	00000002 	.word	0x00000002
    4080:	00001d4c 	.word	0x00001d4c
    4084:	001f0003 	.word	0x001f0003
    4088:	00000002 	.word	0x00000002
    408c:	f1925c29 	.word	0xf1925c29
    4090:	d1928136 	.word	0xd1928136
    4094:	f1f0a9b7 	.word	0xf1f0a9b7
    4098:	194ce999 	.word	0x194ce999
    409c:	4a83231f 	.word	0x4a83231f

000040a0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    40a0:	4a05      	ldr	r2, [pc, #20]	; (40b8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    40a2:	b510      	push	{r4, lr}
    40a4:	6852      	ldr	r2, [r2, #4]
    40a6:	b112      	cbz	r2, 40ae <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    40a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40ac:	4710      	bx	r2
    40ae:	2192      	movs	r1, #146	; 0x92
    40b0:	2004      	movs	r0, #4
    40b2:	f7ff ff83 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40b6:	0000      	.short	0x0000
    40b8:	200011cc 	.word	0x200011cc

000040bc <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    40bc:	4a05      	ldr	r2, [pc, #20]	; (40d4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    40be:	b510      	push	{r4, lr}
    40c0:	6812      	ldr	r2, [r2, #0]
    40c2:	b112      	cbz	r2, 40ca <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    40c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40c8:	4710      	bx	r2
    40ca:	218c      	movs	r1, #140	; 0x8c
    40cc:	2004      	movs	r0, #4
    40ce:	f7ff ff75 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40d2:	0000      	.short	0x0000
    40d4:	200011cc 	.word	0x200011cc

000040d8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    40d8:	4a05      	ldr	r2, [pc, #20]	; (40f0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    40da:	b510      	push	{r4, lr}
    40dc:	6892      	ldr	r2, [r2, #8]
    40de:	b112      	cbz	r2, 40e6 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    40e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40e4:	4710      	bx	r2
    40e6:	2198      	movs	r1, #152	; 0x98
    40e8:	2004      	movs	r0, #4
    40ea:	f7ff ff67 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ee:	0000      	.short	0x0000
    40f0:	200011cc 	.word	0x200011cc

000040f4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    40f4:	4805      	ldr	r0, [pc, #20]	; (410c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    40f6:	6801      	ldr	r1, [r0, #0]
    40f8:	b129      	cbz	r1, 4106 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    40fa:	6841      	ldr	r1, [r0, #4]
    40fc:	b119      	cbz	r1, 4106 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    40fe:	6880      	ldr	r0, [r0, #8]
    4100:	b108      	cbz	r0, 4106 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4102:	2001      	movs	r0, #1
    4104:	4770      	bx	lr
    4106:	2000      	movs	r0, #0
    4108:	4770      	bx	lr
    410a:	0000      	.short	0x0000
    410c:	200011cc 	.word	0x200011cc

00004110 <sdc_rand_source_register>:
    4110:	4902      	ldr	r1, [pc, #8]	; (411c <sdc_rand_source_register+0xc>)
    4112:	c80d      	ldmia	r0, {r0, r2, r3}
    4114:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4118:	2000      	movs	r0, #0
    411a:	4770      	bx	lr
    411c:	200011cc 	.word	0x200011cc

00004120 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4122:	4c12      	ldr	r4, [pc, #72]	; (416c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4124:	2600      	movs	r6, #0
    4126:	6825      	ldr	r5, [r4, #0]
    4128:	e011      	b.n	414e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    412a:	9800      	ldr	r0, [sp, #0]
    412c:	2802      	cmp	r0, #2
    412e:	d002      	beq.n	4136 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4130:	2803      	cmp	r0, #3
    4132:	d10c      	bne.n	414e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4134:	e006      	b.n	4144 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4136:	6820      	ldr	r0, [r4, #0]
    4138:	b110      	cbz	r0, 4140 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    413a:	2000      	movs	r0, #0
    413c:	6026      	str	r6, [r4, #0]
    413e:	e005      	b.n	414c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4140:	2128      	movs	r1, #40	; 0x28
    4142:	e00c      	b.n	415e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4144:	6820      	ldr	r0, [r4, #0]
    4146:	b168      	cbz	r0, 4164 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4148:	2001      	movs	r0, #1
    414a:	6026      	str	r6, [r4, #0]
    414c:	47a8      	blx	r5
    414e:	4668      	mov	r0, sp
    4150:	f000 fcdc 	bl	4b0c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4154:	2800      	cmp	r0, #0
    4156:	d0e8      	beq.n	412a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4158:	2805      	cmp	r0, #5
    415a:	d005      	beq.n	4168 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    415c:	2135      	movs	r1, #53	; 0x35
    415e:	2004      	movs	r0, #4
    4160:	f7ff ff2c 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4164:	212d      	movs	r1, #45	; 0x2d
    4166:	e7fa      	b.n	415e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    416a:	0000      	.short	0x0000
    416c:	200000a4 	.word	0x200000a4
    4170:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4172:	4c1f      	ldr	r4, [pc, #124]	; (41f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4174:	4605      	mov	r5, r0
    4176:	7820      	ldrb	r0, [r4, #0]
    4178:	b140      	cbz	r0, 418c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    417a:	78a2      	ldrb	r2, [r4, #2]
    417c:	1c61      	adds	r1, r4, #1
    417e:	4628      	mov	r0, r5
    4180:	1c92      	adds	r2, r2, #2
    4182:	f008 fcd4 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4186:	2000      	movs	r0, #0
    4188:	7020      	strb	r0, [r4, #0]
    418a:	e021      	b.n	41d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    418c:	4819      	ldr	r0, [pc, #100]	; (41f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    418e:	f001 f9e9 	bl	5564 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4192:	2800      	cmp	r0, #0
    4194:	d01d      	beq.n	41d2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4196:	4c17      	ldr	r4, [pc, #92]	; (41f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4198:	7820      	ldrb	r0, [r4, #0]
    419a:	2814      	cmp	r0, #20
    419c:	d104      	bne.n	41a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    419e:	210a      	movs	r1, #10
    41a0:	203e      	movs	r0, #62	; 0x3e
    41a2:	f000 f829 	bl	41f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    41a6:	b118      	cbz	r0, 41b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    41a8:	7820      	ldrb	r0, [r4, #0]
    41aa:	280a      	cmp	r0, #10
    41ac:	d005      	beq.n	41ba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    41ae:	e009      	b.n	41c4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    41b0:	4910      	ldr	r1, [pc, #64]	; (41f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    41b2:	4628      	mov	r0, r5
    41b4:	f009 f8d1 	bl	d35a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    41b8:	e00a      	b.n	41d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    41ba:	2105      	movs	r1, #5
    41bc:	203e      	movs	r0, #62	; 0x3e
    41be:	f000 f81b 	bl	41f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    41c2:	b138      	cbz	r0, 41d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    41c4:	490b      	ldr	r1, [pc, #44]	; (41f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    41c6:	4628      	mov	r0, r5
    41c8:	f008 fe1f 	bl	ce0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    41cc:	2800      	cmp	r0, #0
    41ce:	d000      	beq.n	41d2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    41d0:	2001      	movs	r0, #1
    41d2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    41d4:	88a0      	ldrh	r0, [r4, #4]
    41d6:	f8ad 0000 	strh.w	r0, [sp]
    41da:	a901      	add	r1, sp, #4
    41dc:	4668      	mov	r0, sp
    41de:	f009 f9f2 	bl	d5c6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    41e2:	2800      	cmp	r0, #0
    41e4:	d0f5      	beq.n	41d2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    41e6:	219c      	movs	r1, #156	; 0x9c
    41e8:	2008      	movs	r0, #8
    41ea:	f7ff fee7 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41ee:	0000      	.short	0x0000
    41f0:	200012e0 	.word	0x200012e0
    41f4:	200011d8 	.word	0x200011d8
    41f8:	b570      	push	{r4, r5, r6, lr}
    41fa:	460c      	mov	r4, r1
    41fc:	4605      	mov	r5, r0
    41fe:	f000 f84b 	bl	4298 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    4202:	2800      	cmp	r0, #0
    4204:	d002      	beq.n	420c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4206:	2d3e      	cmp	r5, #62	; 0x3e
    4208:	d001      	beq.n	420e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xee>
    420a:	2001      	movs	r0, #1
    420c:	bd70      	pop	{r4, r5, r6, pc}
    420e:	2c12      	cmp	r4, #18
    4210:	d106      	bne.n	4220 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x100>
    4212:	4806      	ldr	r0, [pc, #24]	; (422c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>)
    4214:	7801      	ldrb	r1, [r0, #0]
    4216:	2902      	cmp	r1, #2
    4218:	d002      	beq.n	4220 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x100>
    421a:	7840      	ldrb	r0, [r0, #1]
    421c:	2800      	cmp	r0, #0
    421e:	d0f5      	beq.n	420c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4220:	4620      	mov	r0, r4
    4222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4226:	f000 b849 	b.w	42bc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    422a:	0000      	.short	0x0000
    422c:	20000478 	.word	0x20000478

00004230 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    4230:	4901      	ldr	r1, [pc, #4]	; (4238 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    4232:	7048      	strb	r0, [r1, #1]
    4234:	4770      	bx	lr
    4236:	0000      	.short	0x0000
    4238:	20000478 	.word	0x20000478
    423c:	b570      	push	{r4, r5, r6, lr}
    423e:	780a      	ldrb	r2, [r1, #0]
    4240:	7082      	strb	r2, [r0, #2]
    4242:	b33a      	cbz	r2, 4294 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4244:	2a01      	cmp	r2, #1
    4246:	d825      	bhi.n	4294 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4248:	2313      	movs	r3, #19
    424a:	7003      	strb	r3, [r0, #0]
    424c:	2300      	movs	r3, #0
    424e:	e00a      	b.n	4266 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    4250:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4254:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4258:	78a6      	ldrb	r6, [r4, #2]
    425a:	70ee      	strb	r6, [r5, #3]
    425c:	8864      	ldrh	r4, [r4, #2]
    425e:	0a24      	lsrs	r4, r4, #8
    4260:	1c5b      	adds	r3, r3, #1
    4262:	712c      	strb	r4, [r5, #4]
    4264:	b2db      	uxtb	r3, r3
    4266:	4293      	cmp	r3, r2
    4268:	d3f2      	bcc.n	4250 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    426a:	2300      	movs	r3, #0
    426c:	e00b      	b.n	4286 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    426e:	bf00      	nop
    4270:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4274:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4278:	792e      	ldrb	r6, [r5, #4]
    427a:	7166      	strb	r6, [r4, #5]
    427c:	88ad      	ldrh	r5, [r5, #4]
    427e:	0a2d      	lsrs	r5, r5, #8
    4280:	1c5b      	adds	r3, r3, #1
    4282:	71a5      	strb	r5, [r4, #6]
    4284:	b2db      	uxtb	r3, r3
    4286:	4293      	cmp	r3, r2
    4288:	d3f2      	bcc.n	4270 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    428a:	2101      	movs	r1, #1
    428c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4290:	b2c0      	uxtb	r0, r0
    4292:	bd70      	pop	{r4, r5, r6, pc}
    4294:	2000      	movs	r0, #0
    4296:	bd70      	pop	{r4, r5, r6, pc}

00004298 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4298:	2840      	cmp	r0, #64	; 0x40
    429a:	d203      	bcs.n	42a4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    429c:	1e40      	subs	r0, r0, #1
    429e:	b2c1      	uxtb	r1, r0
    42a0:	4805      	ldr	r0, [pc, #20]	; (42b8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    42a2:	e005      	b.n	42b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    42a4:	28ff      	cmp	r0, #255	; 0xff
    42a6:	d005      	beq.n	42b4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    42a8:	3840      	subs	r0, #64	; 0x40
    42aa:	b2c1      	uxtb	r1, r0
    42ac:	4802      	ldr	r0, [pc, #8]	; (42b8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    42ae:	3008      	adds	r0, #8
    42b0:	f009 b87d 	b.w	d3ae <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    42b4:	2001      	movs	r0, #1
    42b6:	4770      	bx	lr
    42b8:	200000a8 	.word	0x200000a8

000042bc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    42bc:	1e40      	subs	r0, r0, #1
    42be:	b2c1      	uxtb	r1, r0
    42c0:	4801      	ldr	r0, [pc, #4]	; (42c8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    42c2:	f009 b874 	b.w	d3ae <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    42c6:	0000      	.short	0x0000
    42c8:	200000b8 	.word	0x200000b8

000042cc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    42cc:	4902      	ldr	r1, [pc, #8]	; (42d8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    42ce:	6802      	ldr	r2, [r0, #0]
    42d0:	610a      	str	r2, [r1, #16]
    42d2:	6840      	ldr	r0, [r0, #4]
    42d4:	6148      	str	r0, [r1, #20]
    42d6:	4770      	bx	lr
    42d8:	200000a8 	.word	0x200000a8

000042dc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    42dc:	4905      	ldr	r1, [pc, #20]	; (42f4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    42de:	6802      	ldr	r2, [r0, #0]
    42e0:	600a      	str	r2, [r1, #0]
    42e2:	6840      	ldr	r0, [r0, #4]
    42e4:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    42e8:	600a      	str	r2, [r1, #0]
    42ea:	4a03      	ldr	r2, [pc, #12]	; (42f8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    42ec:	4310      	orrs	r0, r2
    42ee:	6048      	str	r0, [r1, #4]
    42f0:	4770      	bx	lr
    42f2:	0000      	.short	0x0000
    42f4:	200000a8 	.word	0x200000a8
    42f8:	024007f8 	.word	0x024007f8

000042fc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    42fc:	4807      	ldr	r0, [pc, #28]	; (431c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    42fe:	f04f 31ff 	mov.w	r1, #4294967295
    4302:	2200      	movs	r2, #0
    4304:	6001      	str	r1, [r0, #0]
    4306:	0cc9      	lsrs	r1, r1, #19
    4308:	6041      	str	r1, [r0, #4]
    430a:	f100 0108 	add.w	r1, r0, #8
    430e:	201f      	movs	r0, #31
    4310:	600a      	str	r2, [r1, #0]
    4312:	604a      	str	r2, [r1, #4]
    4314:	3108      	adds	r1, #8
    4316:	e9c1 0200 	strd	r0, r2, [r1]
    431a:	4770      	bx	lr
    431c:	200000a8 	.word	0x200000a8

00004320 <sdc_hci_cmd_cb_reset>:
    4320:	b510      	push	{r4, lr}
    4322:	f7ff ffeb 	bl	42fc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4326:	2000      	movs	r0, #0
    4328:	f7ff ff82 	bl	4230 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    432c:	f00a fee0 	bl	f0f0 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4330:	4604      	mov	r4, r0
    4332:	4803      	ldr	r0, [pc, #12]	; (4340 <sdc_hci_cmd_cb_reset+0x20>)
    4334:	6800      	ldr	r0, [r0, #0]
    4336:	b100      	cbz	r0, 433a <sdc_hci_cmd_cb_reset+0x1a>
    4338:	4780      	blx	r0
    433a:	4620      	mov	r0, r4
    433c:	bd10      	pop	{r4, pc}
    433e:	0000      	.short	0x0000
    4340:	200000c0 	.word	0x200000c0

00004344 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4344:	4901      	ldr	r1, [pc, #4]	; (434c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4346:	6008      	str	r0, [r1, #0]
    4348:	4770      	bx	lr
    434a:	0000      	.short	0x0000
    434c:	200000c0 	.word	0x200000c0

00004350 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4350:	2102      	movs	r1, #2
    4352:	8001      	strh	r1, [r0, #0]
    4354:	8041      	strh	r1, [r0, #2]
    4356:	2100      	movs	r1, #0
    4358:	7101      	strb	r1, [r0, #4]
    435a:	2129      	movs	r1, #41	; 0x29
    435c:	7141      	strb	r1, [r0, #5]
    435e:	f249 215c 	movw	r1, #37468	; 0x925c
    4362:	80c1      	strh	r1, [r0, #6]
    4364:	4901      	ldr	r1, [pc, #4]	; (436c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4366:	6081      	str	r1, [r0, #8]
    4368:	2000      	movs	r0, #0
    436a:	4770      	bx	lr
    436c:	928136f1 	.word	0x928136f1

00004370 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4372:	4604      	mov	r4, r0
    4374:	788a      	ldrb	r2, [r1, #2]
    4376:	7848      	ldrb	r0, [r1, #1]
    4378:	4402      	add	r2, r0
    437a:	2aff      	cmp	r2, #255	; 0xff
    437c:	d902      	bls.n	4384 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    437e:	f240 115f 	movw	r1, #351	; 0x15f
    4382:	e01d      	b.n	43c0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    4384:	780a      	ldrb	r2, [r1, #0]
    4386:	4282      	cmp	r2, r0
    4388:	d902      	bls.n	4390 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    438a:	f240 1163 	movw	r1, #355	; 0x163
    438e:	e017      	b.n	43c0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    4390:	9400      	str	r4, [sp, #0]
    4392:	b1c4      	cbz	r4, 43c6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x56>
    4394:	2600      	movs	r6, #0
    4396:	784b      	ldrb	r3, [r1, #1]
    4398:	f891 c002 	ldrb.w	ip, [r1, #2]
    439c:	794a      	ldrb	r2, [r1, #5]
    439e:	eb0c 0003 	add.w	r0, ip, r3
    43a2:	b2c5      	uxtb	r5, r0
    43a4:	42aa      	cmp	r2, r5
    43a6:	d900      	bls.n	43aa <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    43a8:	4615      	mov	r5, r2
    43aa:	78c8      	ldrb	r0, [r1, #3]
    43ac:	42a8      	cmp	r0, r5
    43ae:	d900      	bls.n	43b2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    43b0:	4605      	mov	r5, r0
    43b2:	1ce7      	adds	r7, r4, #3
    43b4:	f027 0703 	bic.w	r7, r7, #3
    43b8:	42a7      	cmp	r7, r4
    43ba:	d006      	beq.n	43ca <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5a>
    43bc:	f240 1179 	movw	r1, #377	; 0x179
    43c0:	2017      	movs	r0, #23
    43c2:	f7ff fdfb 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43c6:	2601      	movs	r6, #1
    43c8:	e7e5      	b.n	4396 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x26>
    43ca:	4f15      	ldr	r7, [pc, #84]	; (4420 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb0>)
    43cc:	703b      	strb	r3, [r7, #0]
    43ce:	f887 c001 	strb.w	ip, [r7, #1]
    43d2:	70b8      	strb	r0, [r7, #2]
    43d4:	7908      	ldrb	r0, [r1, #4]
    43d6:	70f8      	strb	r0, [r7, #3]
    43d8:	713a      	strb	r2, [r7, #4]
    43da:	4631      	mov	r1, r6
    43dc:	4668      	mov	r0, sp
    43de:	f000 f8c3 	bl	4568 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    43e2:	2100      	movs	r1, #0
    43e4:	468c      	mov	ip, r1
    43e6:	9800      	ldr	r0, [sp, #0]
    43e8:	1cc0      	adds	r0, r0, #3
    43ea:	f020 0003 	bic.w	r0, r0, #3
    43ee:	9000      	str	r0, [sp, #0]
    43f0:	b95e      	cbnz	r6, 440a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x9a>
    43f2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    43f6:	61d8      	str	r0, [r3, #28]
    43f8:	2000      	movs	r0, #0
    43fa:	e004      	b.n	4406 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x96>
    43fc:	69da      	ldr	r2, [r3, #28]
    43fe:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    4402:	1c40      	adds	r0, r0, #1
    4404:	b2c0      	uxtb	r0, r0
    4406:	42a8      	cmp	r0, r5
    4408:	d3f8      	bcc.n	43fc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x8c>
    440a:	9800      	ldr	r0, [sp, #0]
    440c:	1c49      	adds	r1, r1, #1
    440e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4412:	b2c9      	uxtb	r1, r1
    4414:	9000      	str	r0, [sp, #0]
    4416:	2905      	cmp	r1, #5
    4418:	d3e5      	bcc.n	43e6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x76>
    441a:	1b00      	subs	r0, r0, r4
    441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    441e:	0000      	.short	0x0000
    4420:	200013e4 	.word	0x200013e4

00004424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4424:	b570      	push	{r4, r5, r6, lr}
    4426:	4604      	mov	r4, r0
    4428:	f009 fc17 	bl	dc5a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    442c:	b108      	cbz	r0, 4432 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    442e:	2010      	movs	r0, #16
    4430:	bd70      	pop	{r4, r5, r6, pc}
    4432:	7825      	ldrb	r5, [r4, #0]
    4434:	f000 f8d4 	bl	45e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4438:	4602      	mov	r2, r0
    443a:	480c      	ldr	r0, [pc, #48]	; (446c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    443c:	8861      	ldrh	r1, [r4, #2]
    443e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4442:	e00e      	b.n	4462 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4444:	69c3      	ldr	r3, [r0, #28]
    4446:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    444a:	b143      	cbz	r3, 445e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    444c:	1c4a      	adds	r2, r1, #1
    444e:	8062      	strh	r2, [r4, #2]
    4450:	80a1      	strh	r1, [r4, #4]
    4452:	69c0      	ldr	r0, [r0, #28]
    4454:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4458:	60a0      	str	r0, [r4, #8]
    445a:	2000      	movs	r0, #0
    445c:	bd70      	pop	{r4, r5, r6, pc}
    445e:	1c49      	adds	r1, r1, #1
    4460:	b289      	uxth	r1, r1
    4462:	4291      	cmp	r1, r2
    4464:	d3ee      	bcc.n	4444 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4466:	8061      	strh	r1, [r4, #2]
    4468:	2005      	movs	r0, #5
    446a:	bd70      	pop	{r4, r5, r6, pc}
    446c:	200013e4 	.word	0x200013e4

00004470 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4474:	4607      	mov	r7, r0
    4476:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    447a:	460c      	mov	r4, r1
    447c:	f243 0602 	movw	r6, #12290	; 0x3002
    4480:	38ff      	subs	r0, #255	; 0xff
    4482:	d020      	beq.n	44c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4484:	2c05      	cmp	r4, #5
    4486:	d302      	bcc.n	448e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4488:	2007      	movs	r0, #7
    448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    448e:	4638      	mov	r0, r7
    4490:	f000 f85a 	bl	4548 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4494:	0005      	movs	r5, r0
    4496:	d016      	beq.n	44c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4498:	480c      	ldr	r0, [pc, #48]	; (44cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    449a:	4629      	mov	r1, r5
    449c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    44a0:	4638      	mov	r0, r7
    44a2:	4790      	blx	r2
    44a4:	480a      	ldr	r0, [pc, #40]	; (44d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    44a6:	2100      	movs	r1, #0
    44a8:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    44ac:	69f0      	ldr	r0, [r6, #28]
    44ae:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    44b2:	4620      	mov	r0, r4
    44b4:	f000 f88a 	bl	45cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    44b8:	4602      	mov	r2, r0
    44ba:	4629      	mov	r1, r5
    44bc:	68b0      	ldr	r0, [r6, #8]
    44be:	f009 faa7 	bl	da10 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    44c2:	2000      	movs	r0, #0
    44c4:	e7e1      	b.n	448a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    44c6:	4630      	mov	r0, r6
    44c8:	e7df      	b.n	448a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    44ca:	0000      	.short	0x0000
    44cc:	0000461c 	.word	0x0000461c
    44d0:	200013e4 	.word	0x200013e4
    44d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44d8:	4690      	mov	r8, r2
    44da:	460e      	mov	r6, r1
    44dc:	4607      	mov	r7, r0
    44de:	f009 fac9 	bl	da74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    44e2:	b148      	cbz	r0, 44f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    44e4:	4816      	ldr	r0, [pc, #88]	; (4540 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    44e6:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    44ea:	69e0      	ldr	r0, [r4, #28]
    44ec:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    44f0:	b128      	cbz	r0, 44fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    44f2:	f44f 719d 	mov.w	r1, #314	; 0x13a
    44f6:	e015      	b.n	4524 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    44f8:	f240 1139 	movw	r1, #313	; 0x139
    44fc:	e012      	b.n	4524 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    44fe:	68a0      	ldr	r0, [r4, #8]
    4500:	2800      	cmp	r0, #0
    4502:	d01a      	beq.n	453a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4504:	4630      	mov	r0, r6
    4506:	f000 f861 	bl	45cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    450a:	4601      	mov	r1, r0
    450c:	68a0      	ldr	r0, [r4, #8]
    450e:	f009 fa27 	bl	d960 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4512:	0005      	movs	r5, r0
    4514:	d010      	beq.n	4538 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4516:	69e0      	ldr	r0, [r4, #28]
    4518:	2e05      	cmp	r6, #5
    451a:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    451e:	d304      	bcc.n	452a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4520:	f240 1145 	movw	r1, #325	; 0x145
    4524:	2017      	movs	r0, #23
    4526:	f7ff fd49 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    452a:	4806      	ldr	r0, [pc, #24]	; (4544 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    452c:	4642      	mov	r2, r8
    452e:	4629      	mov	r1, r5
    4530:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    4534:	4638      	mov	r0, r7
    4536:	4798      	blx	r3
    4538:	4628      	mov	r0, r5
    453a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    453e:	0000      	.short	0x0000
    4540:	200013e4 	.word	0x200013e4
    4544:	00004608 	.word	0x00004608
    4548:	b570      	push	{r4, r5, r6, lr}
    454a:	460c      	mov	r4, r1
    454c:	4605      	mov	r5, r0
    454e:	f009 fa91 	bl	da74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4552:	2800      	cmp	r0, #0
    4554:	d005      	beq.n	4562 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4556:	4803      	ldr	r0, [pc, #12]	; (4564 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4558:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    455c:	69c0      	ldr	r0, [r0, #28]
    455e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4562:	bd70      	pop	{r4, r5, r6, pc}
    4564:	200013e4 	.word	0x200013e4
    4568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    456c:	4f16      	ldr	r7, [pc, #88]	; (45c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    456e:	4688      	mov	r8, r1
    4570:	4605      	mov	r5, r0
    4572:	2400      	movs	r4, #0
    4574:	6828      	ldr	r0, [r5, #0]
    4576:	1cc0      	adds	r0, r0, #3
    4578:	f020 0003 	bic.w	r0, r0, #3
    457c:	6028      	str	r0, [r5, #0]
    457e:	4620      	mov	r0, r4
    4580:	f000 f824 	bl	45cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4584:	5d39      	ldrb	r1, [r7, r4]
    4586:	4341      	muls	r1, r0
    4588:	f1b8 0f00 	cmp.w	r8, #0
    458c:	d001      	beq.n	4592 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    458e:	2000      	movs	r0, #0
    4590:	e000      	b.n	4594 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4592:	6828      	ldr	r0, [r5, #0]
    4594:	9000      	str	r0, [sp, #0]
    4596:	b118      	cbz	r0, 45a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4598:	2600      	movs	r6, #0
    459a:	b11e      	cbz	r6, 45a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>
    459c:	2000      	movs	r0, #0
    459e:	e002      	b.n	45a6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x136>
    45a0:	2601      	movs	r6, #1
    45a2:	e7fa      	b.n	459a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    45a4:	4668      	mov	r0, sp
    45a6:	f009 fa0c 	bl	d9c2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    45aa:	b91e      	cbnz	r6, 45b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>
    45ac:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    45b0:	9a00      	ldr	r2, [sp, #0]
    45b2:	608a      	str	r2, [r1, #8]
    45b4:	6829      	ldr	r1, [r5, #0]
    45b6:	1c64      	adds	r4, r4, #1
    45b8:	4408      	add	r0, r1
    45ba:	b2e4      	uxtb	r4, r4
    45bc:	6028      	str	r0, [r5, #0]
    45be:	2c05      	cmp	r4, #5
    45c0:	d3d8      	bcc.n	4574 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    45c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    45c6:	0000      	.short	0x0000
    45c8:	200013e4 	.word	0x200013e4
    45cc:	4903      	ldr	r1, [pc, #12]	; (45dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    45ce:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    45d2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    45d6:	1cc0      	adds	r0, r0, #3
    45d8:	4008      	ands	r0, r1
    45da:	4770      	bx	lr
    45dc:	00004630 	.word	0x00004630
    45e0:	4b08      	ldr	r3, [pc, #32]	; (4604 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x194>)
    45e2:	7818      	ldrb	r0, [r3, #0]
    45e4:	7859      	ldrb	r1, [r3, #1]
    45e6:	4408      	add	r0, r1
    45e8:	b2c1      	uxtb	r1, r0
    45ea:	7898      	ldrb	r0, [r3, #2]
    45ec:	4281      	cmp	r1, r0
    45ee:	d300      	bcc.n	45f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x182>
    45f0:	4608      	mov	r0, r1
    45f2:	78da      	ldrb	r2, [r3, #3]
    45f4:	4290      	cmp	r0, r2
    45f6:	d200      	bcs.n	45fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18a>
    45f8:	4610      	mov	r0, r2
    45fa:	7919      	ldrb	r1, [r3, #4]
    45fc:	4288      	cmp	r0, r1
    45fe:	d200      	bcs.n	4602 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x192>
    4600:	4608      	mov	r0, r1
    4602:	4770      	bx	lr
    4604:	200013e4 	.word	0x200013e4
    4608:	0000da89 	.word	0x0000da89
    460c:	0000da89 	.word	0x0000da89
    4610:	0000da89 	.word	0x0000da89
    4614:	0000da89 	.word	0x0000da89
    4618:	0000da89 	.word	0x0000da89
    461c:	0000eb95 	.word	0x0000eb95
    4620:	0000e689 	.word	0x0000e689
    4624:	0000e5cf 	.word	0x0000e5cf
    4628:	0000f7af 	.word	0x0000f7af
    462c:	0000f7b5 	.word	0x0000f7b5
    4630:	034802e8 	.word	0x034802e8
    4634:	00800158 	.word	0x00800158
    4638:	00000090 	.word	0x00000090

0000463c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    463c:	b570      	push	{r4, r5, r6, lr}
    463e:	4c14      	ldr	r4, [pc, #80]	; (4690 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4640:	6823      	ldr	r3, [r4, #0]
    4642:	b18b      	cbz	r3, 4668 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4644:	7a19      	ldrb	r1, [r3, #8]
    4646:	4281      	cmp	r1, r0
    4648:	d912      	bls.n	4670 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    464a:	685a      	ldr	r2, [r3, #4]
    464c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4650:	b171      	cbz	r1, 4670 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4652:	2500      	movs	r5, #0
    4654:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4658:	884a      	ldrh	r2, [r1, #2]
    465a:	6818      	ldr	r0, [r3, #0]
    465c:	f009 f9d8 	bl	da10 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4660:	6821      	ldr	r1, [r4, #0]
    4662:	2000      	movs	r0, #0
    4664:	7a0a      	ldrb	r2, [r1, #8]
    4666:	e00c      	b.n	4682 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4668:	21c8      	movs	r1, #200	; 0xc8
    466a:	2018      	movs	r0, #24
    466c:	f7ff fca6 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4670:	f243 0002 	movw	r0, #12290	; 0x3002
    4674:	bd70      	pop	{r4, r5, r6, pc}
    4676:	684b      	ldr	r3, [r1, #4]
    4678:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    467c:	b933      	cbnz	r3, 468c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    467e:	1c40      	adds	r0, r0, #1
    4680:	b2c0      	uxtb	r0, r0
    4682:	4282      	cmp	r2, r0
    4684:	d8f7      	bhi.n	4676 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4686:	6808      	ldr	r0, [r1, #0]
    4688:	f009 f9b7 	bl	d9fa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    468c:	2000      	movs	r0, #0
    468e:	bd70      	pop	{r4, r5, r6, pc}
    4690:	200000c4 	.word	0x200000c4

00004694 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4698:	460d      	mov	r5, r1
    469a:	0004      	movs	r4, r0
    469c:	4690      	mov	r8, r2
    469e:	f04f 0600 	mov.w	r6, #0
    46a2:	d009      	beq.n	46b8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    46a4:	2700      	movs	r7, #0
    46a6:	1ce0      	adds	r0, r4, #3
    46a8:	f020 0003 	bic.w	r0, r0, #3
    46ac:	42a0      	cmp	r0, r4
    46ae:	d005      	beq.n	46bc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    46b0:	2186      	movs	r1, #134	; 0x86
    46b2:	2018      	movs	r0, #24
    46b4:	f7ff fc82 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46b8:	2701      	movs	r7, #1
    46ba:	e7f4      	b.n	46a6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    46bc:	b1cd      	cbz	r5, 46f2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    46be:	4611      	mov	r1, r2
    46c0:	2000      	movs	r0, #0
    46c2:	f009 f97e 	bl	d9c2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    46c6:	300c      	adds	r0, #12
    46c8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    46cc:	b98f      	cbnz	r7, 46f2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    46ce:	4f0a      	ldr	r7, [pc, #40]	; (46f8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    46d0:	f104 000c 	add.w	r0, r4, #12
    46d4:	00aa      	lsls	r2, r5, #2
    46d6:	603c      	str	r4, [r7, #0]
    46d8:	7225      	strb	r5, [r4, #8]
    46da:	6060      	str	r0, [r4, #4]
    46dc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    46e0:	6020      	str	r0, [r4, #0]
    46e2:	2100      	movs	r1, #0
    46e4:	6860      	ldr	r0, [r4, #4]
    46e6:	f008 fa9c 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    46ea:	4641      	mov	r1, r8
    46ec:	6838      	ldr	r0, [r7, #0]
    46ee:	f009 f968 	bl	d9c2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    46f2:	4630      	mov	r0, r6
    46f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46f8:	200000c4 	.word	0x200000c4

000046fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    46fc:	4909      	ldr	r1, [pc, #36]	; (4724 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    46fe:	b510      	push	{r4, lr}
    4700:	4602      	mov	r2, r0
    4702:	6809      	ldr	r1, [r1, #0]
    4704:	2000      	movs	r0, #0
    4706:	b149      	cbz	r1, 471c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4708:	7a0b      	ldrb	r3, [r1, #8]
    470a:	4293      	cmp	r3, r2
    470c:	d905      	bls.n	471a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    470e:	6849      	ldr	r1, [r1, #4]
    4710:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4714:	2900      	cmp	r1, #0
    4716:	d000      	beq.n	471a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4718:	1d08      	adds	r0, r1, #4
    471a:	bd10      	pop	{r4, pc}
    471c:	21ee      	movs	r1, #238	; 0xee
    471e:	2018      	movs	r0, #24
    4720:	f7ff fc4c 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4724:	200000c4 	.word	0x200000c4

00004728 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4728:	490a      	ldr	r1, [pc, #40]	; (4754 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    472a:	b510      	push	{r4, lr}
    472c:	4602      	mov	r2, r0
    472e:	6809      	ldr	r1, [r1, #0]
    4730:	2000      	movs	r0, #0
    4732:	b159      	cbz	r1, 474c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4734:	7a0b      	ldrb	r3, [r1, #8]
    4736:	4293      	cmp	r3, r2
    4738:	d907      	bls.n	474a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    473a:	6849      	ldr	r1, [r1, #4]
    473c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4740:	2900      	cmp	r1, #0
    4742:	d002      	beq.n	474a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4744:	f831 0b04 	ldrh.w	r0, [r1], #4
    4748:	4408      	add	r0, r1
    474a:	bd10      	pop	{r4, pc}
    474c:	21fc      	movs	r1, #252	; 0xfc
    474e:	2018      	movs	r0, #24
    4750:	f7ff fc34 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4754:	200000c4 	.word	0x200000c4
    4758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    475c:	4e1c      	ldr	r6, [pc, #112]	; (47d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xa8>)
    475e:	6845      	ldr	r5, [r0, #4]
    4760:	4604      	mov	r4, r0
    4762:	2200      	movs	r2, #0
    4764:	b1a1      	cbz	r1, 4790 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    4766:	2001      	movs	r0, #1
    4768:	7060      	strb	r0, [r4, #1]
    476a:	8870      	ldrh	r0, [r6, #2]
    476c:	0883      	lsrs	r3, r0, #2
    476e:	2000      	movs	r0, #0
    4770:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4774:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4778:	830a      	strh	r2, [r1, #24]
    477a:	840b      	strh	r3, [r1, #32]
    477c:	fb00 5103 	mla	r1, r0, r3, r5
    4780:	6071      	str	r1, [r6, #4]
    4782:	1821      	adds	r1, r4, r0
    4784:	1c40      	adds	r0, r0, #1
    4786:	750a      	strb	r2, [r1, #20]
    4788:	2804      	cmp	r0, #4
    478a:	d3f1      	bcc.n	4770 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4790:	7062      	strb	r2, [r4, #1]
    4792:	2000      	movs	r0, #0
    4794:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4798:	830a      	strh	r2, [r1, #24]
    479a:	840a      	strh	r2, [r1, #32]
    479c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    47a0:	604a      	str	r2, [r1, #4]
    47a2:	1821      	adds	r1, r4, r0
    47a4:	1c40      	adds	r0, r0, #1
    47a6:	750a      	strb	r2, [r1, #20]
    47a8:	2804      	cmp	r0, #4
    47aa:	d3f3      	bcc.n	4794 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    47ac:	8870      	ldrh	r0, [r6, #2]
    47ae:	f009 f994 	bl	dada <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x50>
    47b2:	4607      	mov	r7, r0
    47b4:	8870      	ldrh	r0, [r6, #2]
    47b6:	f009 f997 	bl	dae8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    47ba:	6065      	str	r5, [r4, #4]
    47bc:	8420      	strh	r0, [r4, #32]
    47be:	1829      	adds	r1, r5, r0
    47c0:	60a1      	str	r1, [r4, #8]
    47c2:	8467      	strh	r7, [r4, #34]	; 0x22
    47c4:	60e5      	str	r5, [r4, #12]
    47c6:	84a0      	strh	r0, [r4, #36]	; 0x24
    47c8:	6121      	str	r1, [r4, #16]
    47ca:	84e7      	strh	r7, [r4, #38]	; 0x26
    47cc:	e7de      	b.n	478c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x64>
    47ce:	0000      	.short	0x0000
    47d0:	200000c8 	.word	0x200000c8

000047d4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    47d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    47d8:	b180      	cbz	r0, 47fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    47da:	2600      	movs	r6, #0
    47dc:	4411      	add	r1, r2
    47de:	b2cf      	uxtb	r7, r1
    47e0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4880 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xac>
    47e4:	1cc1      	adds	r1, r0, #3
    47e6:	2400      	movs	r4, #0
    47e8:	f021 0103 	bic.w	r1, r1, #3
    47ec:	f888 7000 	strb.w	r7, [r8]
    47f0:	4281      	cmp	r1, r0
    47f2:	d005      	beq.n	4800 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2c>
    47f4:	214e      	movs	r1, #78	; 0x4e
    47f6:	2009      	movs	r0, #9
    47f8:	f7ff fbe0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47fc:	2601      	movs	r6, #1
    47fe:	e7ed      	b.n	47dc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4800:	2b1f      	cmp	r3, #31
    4802:	d804      	bhi.n	480e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3a>
    4804:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4808:	ea01 0583 	and.w	r5, r1, r3, lsl #2
    480c:	e009      	b.n	4822 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4e>
    480e:	0059      	lsls	r1, r3, #1
    4810:	2bff      	cmp	r3, #255	; 0xff
    4812:	d90c      	bls.n	482e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5a>
    4814:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4818:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    481c:	d200      	bcs.n	4820 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    481e:	4611      	mov	r1, r2
    4820:	b28d      	uxth	r5, r1
    4822:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4826:	1ced      	adds	r5, r5, #3
    4828:	400d      	ands	r5, r1
    482a:	b136      	cbz	r6, 483a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    482c:	e009      	b.n	4842 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6e>
    482e:	227c      	movs	r2, #124	; 0x7c
    4830:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4834:	d3f4      	bcc.n	4820 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4836:	217c      	movs	r1, #124	; 0x7c
    4838:	e7f2      	b.n	4820 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    483a:	f8c8 0004 	str.w	r0, [r8, #4]
    483e:	f8a8 5002 	strh.w	r5, [r8, #2]
    4842:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    4846:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
    484a:	2100      	movs	r1, #0
    484c:	f04f 0901 	mov.w	r9, #1
    4850:	e00f      	b.n	4872 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9e>
    4852:	b95e      	cbnz	r6, 486c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x98>
    4854:	f8d8 4004 	ldr.w	r4, [r8, #4]
    4858:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    485c:	eb00 0c02 	add.w	ip, r0, r2
    4860:	f804 9033 	strb.w	r9, [r4, r3, lsl #3]
    4864:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    4868:	f8c3 c004 	str.w	ip, [r3, #4]
    486c:	1c49      	adds	r1, r1, #1
    486e:	442a      	add	r2, r5
    4870:	b2c9      	uxtb	r1, r1
    4872:	42b9      	cmp	r1, r7
    4874:	d3ed      	bcc.n	4852 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x7e>
    4876:	1dd2      	adds	r2, r2, #7
    4878:	f022 0007 	bic.w	r0, r2, #7
    487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4880:	200000c8 	.word	0x200000c8

00004884 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4884:	b570      	push	{r4, r5, r6, lr}
    4886:	4811      	ldr	r0, [pc, #68]	; (48cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    4888:	2400      	movs	r4, #0
    488a:	4621      	mov	r1, r4
    488c:	7802      	ldrb	r2, [r0, #0]
    488e:	e00c      	b.n	48aa <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x26>
    4890:	6845      	ldr	r5, [r0, #4]
    4892:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    4896:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
    489a:	b123      	cbz	r3, 48a6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x22>
    489c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    48a0:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
    48a4:	e003      	b.n	48ae <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2a>
    48a6:	1c49      	adds	r1, r1, #1
    48a8:	b2c9      	uxtb	r1, r1
    48aa:	4291      	cmp	r1, r2
    48ac:	d3f0      	bcc.n	4890 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    48ae:	b144      	cbz	r4, 48c2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3e>
    48b0:	2500      	movs	r5, #0
    48b2:	70a5      	strb	r5, [r4, #2]
    48b4:	2101      	movs	r1, #1
    48b6:	4620      	mov	r0, r4
    48b8:	f7ff ff4e 	bl	4758 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    48bc:	7025      	strb	r5, [r4, #0]
    48be:	4620      	mov	r0, r4
    48c0:	bd70      	pop	{r4, r5, r6, pc}
    48c2:	21a9      	movs	r1, #169	; 0xa9
    48c4:	2009      	movs	r0, #9
    48c6:	f7ff fb79 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48ca:	0000      	.short	0x0000
    48cc:	200000c8 	.word	0x200000c8

000048d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    48d0:	4801      	ldr	r0, [pc, #4]	; (48d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    48d2:	7840      	ldrb	r0, [r0, #1]
    48d4:	4770      	bx	lr
    48d6:	0000      	.short	0x0000
    48d8:	200000d0 	.word	0x200000d0

000048dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    48dc:	4801      	ldr	r0, [pc, #4]	; (48e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    48de:	6840      	ldr	r0, [r0, #4]
    48e0:	4770      	bx	lr
    48e2:	0000      	.short	0x0000
    48e4:	200000d0 	.word	0x200000d0

000048e8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    48e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    48ec:	460c      	mov	r4, r1
    48ee:	4607      	mov	r7, r0
    48f0:	4616      	mov	r6, r2
    48f2:	212e      	movs	r1, #46	; 0x2e
    48f4:	4610      	mov	r0, r2
    48f6:	460d      	mov	r5, r1
    48f8:	4622      	mov	r2, r4
    48fa:	f008 fff0 	bl	d8de <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    48fe:	4680      	mov	r8, r0
    4900:	b157      	cbz	r7, 4918 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    4902:	4638      	mov	r0, r7
    4904:	4641      	mov	r1, r8
    4906:	4632      	mov	r2, r6
    4908:	462b      	mov	r3, r5
    490a:	9400      	str	r4, [sp, #0]
    490c:	f008 ff88 	bl	d820 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4910:	4803      	ldr	r0, [pc, #12]	; (4920 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    4912:	6047      	str	r7, [r0, #4]
    4914:	7004      	strb	r4, [r0, #0]
    4916:	7046      	strb	r6, [r0, #1]
    4918:	4640      	mov	r0, r8
    491a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    491e:	0000      	.short	0x0000
    4920:	200000d0 	.word	0x200000d0

00004924 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4924:	4802      	ldr	r0, [pc, #8]	; (4930 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4926:	7842      	ldrb	r2, [r0, #1]
    4928:	7801      	ldrb	r1, [r0, #0]
    492a:	6840      	ldr	r0, [r0, #4]
    492c:	f7ff bfdc 	b.w	48e8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4930:	200000d0 	.word	0x200000d0

00004934 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>:
    4934:	4b03      	ldr	r3, [pc, #12]	; (4944 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI+0x10>)
    4936:	2100      	movs	r1, #0
    4938:	7818      	ldrb	r0, [r3, #0]
    493a:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    493e:	6858      	ldr	r0, [r3, #4]
    4940:	f008 b96f 	b.w	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4944:	200000d8 	.word	0x200000d8

00004948 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>:
    4948:	b510      	push	{r4, lr}
    494a:	460c      	mov	r4, r1
    494c:	b110      	cbz	r0, 4954 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xc>
    494e:	2200      	movs	r2, #0
    4950:	b112      	cbz	r2, 4958 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x10>
    4952:	e00f      	b.n	4974 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x2c>
    4954:	2201      	movs	r2, #1
    4956:	e7fb      	b.n	4950 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x8>
    4958:	1cc1      	adds	r1, r0, #3
    495a:	f021 0103 	bic.w	r1, r1, #3
    495e:	4281      	cmp	r1, r0
    4960:	d003      	beq.n	496a <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x22>
    4962:	2120      	movs	r1, #32
    4964:	2041      	movs	r0, #65	; 0x41
    4966:	f7ff fb29 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    496a:	4904      	ldr	r1, [pc, #16]	; (497c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x34>)
    496c:	6048      	str	r0, [r1, #4]
    496e:	700c      	strb	r4, [r1, #0]
    4970:	f7ff ffe0 	bl	4934 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>
    4974:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    4978:	bd10      	pop	{r4, pc}
    497a:	0000      	.short	0x0000
    497c:	200000d8 	.word	0x200000d8
    4980:	b530      	push	{r4, r5, lr}
    4982:	490d      	ldr	r1, [pc, #52]	; (49b8 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x70>)
    4984:	2001      	movs	r0, #1
    4986:	6048      	str	r0, [r1, #4]
    4988:	1e82      	subs	r2, r0, #2
    498a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    498e:	490b      	ldr	r1, [pc, #44]	; (49bc <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x74>)
    4990:	6088      	str	r0, [r1, #8]
    4992:	2300      	movs	r3, #0
    4994:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4998:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    499c:	4c08      	ldr	r4, [pc, #32]	; (49c0 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x78>)
    499e:	6023      	str	r3, [r4, #0]
    49a0:	1d25      	adds	r5, r4, #4
    49a2:	6028      	str	r0, [r5, #0]
    49a4:	6088      	str	r0, [r1, #8]
    49a6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    49aa:	6023      	str	r3, [r4, #0]
    49ac:	6028      	str	r0, [r5, #0]
    49ae:	4906      	ldr	r1, [pc, #24]	; (49c8 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x80>)
    49b0:	4804      	ldr	r0, [pc, #16]	; (49c4 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x7c>)
    49b2:	6008      	str	r0, [r1, #0]
    49b4:	bd30      	pop	{r4, r5, pc}
    49b6:	0000      	.short	0x0000
    49b8:	4000e000 	.word	0x4000e000
    49bc:	4000f000 	.word	0x4000f000
    49c0:	4000f500 	.word	0x4000f500
    49c4:	3ff60000 	.word	0x3ff60000
    49c8:	4001f508 	.word	0x4001f508

000049cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    49cc:	b510      	push	{r4, lr}
    49ce:	4604      	mov	r4, r0
    49d0:	f7ff ffd6 	bl	4980 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x38>
    49d4:	f009 f90e 	bl	dbf4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x42>
    49d8:	f000 f888 	bl	4aec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    49dc:	4905      	ldr	r1, [pc, #20]	; (49f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    49de:	4804      	ldr	r0, [pc, #16]	; (49f0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    49e0:	6008      	str	r0, [r1, #0]
    49e2:	4620      	mov	r0, r4
    49e4:	f000 f8b8 	bl	4b58 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    49e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    49ec:	f000 b8d0 	b.w	4b90 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    49f0:	3ff60000 	.word	0x3ff60000
    49f4:	4001f508 	.word	0x4001f508
    49f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49fc:	4682      	mov	sl, r0
    49fe:	4838      	ldr	r0, [pc, #224]	; (4ae0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4a00:	f007 fffe 	bl	ca00 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a04:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 4ae0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    4a08:	b128      	cbz	r0, 4a16 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    4a0a:	2601      	movs	r6, #1
    4a0c:	f10b 0001 	add.w	r0, fp, #1
    4a10:	21ff      	movs	r1, #255	; 0xff
    4a12:	7001      	strb	r1, [r0, #0]
    4a14:	e000      	b.n	4a18 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    4a16:	2600      	movs	r6, #0
    4a18:	f44f 7580 	mov.w	r5, #256	; 0x100
    4a1c:	4c31      	ldr	r4, [pc, #196]	; (4ae4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    4a1e:	f04f 0800 	mov.w	r8, #0
    4a22:	1d2f      	adds	r7, r5, #4
    4a24:	2101      	movs	r1, #1
    4a26:	6061      	str	r1, [r4, #4]
    4a28:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4a2c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4a30:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    4a34:	6021      	str	r1, [r4, #0]
    4a36:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4ae8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    4a3a:	e01c      	b.n	4a76 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4a3c:	f8d9 0000 	ldr.w	r0, [r9]
    4a40:	06c0      	lsls	r0, r0, #27
    4a42:	d518      	bpl.n	4a76 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4a44:	200e      	movs	r0, #14
    4a46:	f009 f8e4 	bl	dc12 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x60>
    4a4a:	f3ef 8010 	mrs	r0, PRIMASK
    4a4e:	9000      	str	r0, [sp, #0]
    4a50:	b672      	cpsid	i
    4a52:	2103      	movs	r1, #3
    4a54:	4620      	mov	r0, r4
    4a56:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4a5a:	4629      	mov	r1, r5
    4a5c:	f009 f8e6 	bl	dc2c <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x7a>
    4a60:	b930      	cbnz	r0, 4a70 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4a62:	4639      	mov	r1, r7
    4a64:	4620      	mov	r0, r4
    4a66:	f009 f8e1 	bl	dc2c <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x7a>
    4a6a:	b908      	cbnz	r0, 4a70 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4a6c:	f7fe ffd4 	bl	3a18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4a70:	9800      	ldr	r0, [sp, #0]
    4a72:	b900      	cbnz	r0, 4a76 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4a74:	b662      	cpsie	i
    4a76:	4629      	mov	r1, r5
    4a78:	4620      	mov	r0, r4
    4a7a:	f009 f8d7 	bl	dc2c <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x7a>
    4a7e:	b928      	cbnz	r0, 4a8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    4a80:	4639      	mov	r1, r7
    4a82:	4620      	mov	r0, r4
    4a84:	f009 f8d2 	bl	dc2c <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x7a>
    4a88:	2800      	cmp	r0, #0
    4a8a:	d0d7      	beq.n	4a3c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    4a8c:	4639      	mov	r1, r7
    4a8e:	4620      	mov	r0, r4
    4a90:	f009 f8cc 	bl	dc2c <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x7a>
    4a94:	2800      	cmp	r0, #0
    4a96:	d1c5      	bne.n	4a24 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    4a98:	bb06      	cbnz	r6, 4adc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4a9a:	f89b 1001 	ldrb.w	r1, [fp, #1]
    4a9e:	f88d 1000 	strb.w	r1, [sp]
    4aa2:	9900      	ldr	r1, [sp, #0]
    4aa4:	9100      	str	r1, [sp, #0]
    4aa6:	f89d 1000 	ldrb.w	r1, [sp]
    4aaa:	b109      	cbz	r1, 4ab0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    4aac:	2501      	movs	r5, #1
    4aae:	e000      	b.n	4ab2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    4ab0:	2500      	movs	r5, #0
    4ab2:	f10b 0001 	add.w	r0, fp, #1
    4ab6:	f880 8000 	strb.w	r8, [r0]
    4aba:	2003      	movs	r0, #3
    4abc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4ac0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4ac4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4ac8:	200e      	movs	r0, #14
    4aca:	f009 f8a2 	bl	dc12 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x60>
    4ace:	4804      	ldr	r0, [pc, #16]	; (4ae0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4ad0:	f007 ffad 	bl	ca2e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4ad4:	b115      	cbz	r5, 4adc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4ad6:	2011      	movs	r0, #17
    4ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4adc:	2000      	movs	r0, #0
    4ade:	e7fb      	b.n	4ad8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    4ae0:	2000047a 	.word	0x2000047a
    4ae4:	4000e000 	.word	0x4000e000
    4ae8:	e000ed10 	.word	0xe000ed10

00004aec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4aec:	b510      	push	{r4, lr}
    4aee:	4806      	ldr	r0, [pc, #24]	; (4b08 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4af0:	f007 ff99 	bl	ca26 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4af4:	b118      	cbz	r0, 4afe <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    4af6:	2127      	movs	r1, #39	; 0x27
    4af8:	201d      	movs	r0, #29
    4afa:	f7ff fa5f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4afe:	4802      	ldr	r0, [pc, #8]	; (4b08 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4b00:	2100      	movs	r1, #0
    4b02:	7041      	strb	r1, [r0, #1]
    4b04:	bd10      	pop	{r4, pc}
    4b06:	0000      	.short	0x0000
    4b08:	2000047a 	.word	0x2000047a

00004b0c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4b0c:	b570      	push	{r4, r5, r6, lr}
    4b0e:	4911      	ldr	r1, [pc, #68]	; (4b54 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4b10:	680a      	ldr	r2, [r1, #0]
    4b12:	b1ea      	cbz	r2, 4b50 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4b14:	2300      	movs	r3, #0
    4b16:	461d      	mov	r5, r3
    4b18:	2401      	movs	r4, #1
    4b1a:	684a      	ldr	r2, [r1, #4]
    4b1c:	1c52      	adds	r2, r2, #1
    4b1e:	604a      	str	r2, [r1, #4]
    4b20:	2a0c      	cmp	r2, #12
    4b22:	d300      	bcc.n	4b26 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4b24:	604d      	str	r5, [r1, #4]
    4b26:	790e      	ldrb	r6, [r1, #4]
    4b28:	fa04 f206 	lsl.w	r2, r4, r6
    4b2c:	680e      	ldr	r6, [r1, #0]
    4b2e:	4216      	tst	r6, r2
    4b30:	d00b      	beq.n	4b4a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4b32:	f3ef 8310 	mrs	r3, PRIMASK
    4b36:	b672      	cpsid	i
    4b38:	680c      	ldr	r4, [r1, #0]
    4b3a:	4394      	bics	r4, r2
    4b3c:	600c      	str	r4, [r1, #0]
    4b3e:	b903      	cbnz	r3, 4b42 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4b40:	b662      	cpsie	i
    4b42:	6849      	ldr	r1, [r1, #4]
    4b44:	6001      	str	r1, [r0, #0]
    4b46:	2000      	movs	r0, #0
    4b48:	bd70      	pop	{r4, r5, r6, pc}
    4b4a:	1c5b      	adds	r3, r3, #1
    4b4c:	2b0c      	cmp	r3, #12
    4b4e:	d3e4      	bcc.n	4b1a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4b50:	2005      	movs	r0, #5
    4b52:	bd70      	pop	{r4, r5, r6, pc}
    4b54:	200000e0 	.word	0x200000e0

00004b58 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4b58:	4802      	ldr	r0, [pc, #8]	; (4b64 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4b5a:	2100      	movs	r1, #0
    4b5c:	6001      	str	r1, [r0, #0]
    4b5e:	6041      	str	r1, [r0, #4]
    4b60:	4770      	bx	lr
    4b62:	0000      	.short	0x0000
    4b64:	200000e0 	.word	0x200000e0

00004b68 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4b68:	b510      	push	{r4, lr}
    4b6a:	4c08      	ldr	r4, [pc, #32]	; (4b8c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4b6c:	7861      	ldrb	r1, [r4, #1]
    4b6e:	b109      	cbz	r1, 4b74 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4b70:	200f      	movs	r0, #15
    4b72:	bd10      	pop	{r4, pc}
    4b74:	f7fe fedc 	bl	3930 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4b78:	7020      	strb	r0, [r4, #0]
    4b7a:	28ff      	cmp	r0, #255	; 0xff
    4b7c:	d001      	beq.n	4b82 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4b7e:	2000      	movs	r0, #0
    4b80:	bd10      	pop	{r4, pc}
    4b82:	2178      	movs	r1, #120	; 0x78
    4b84:	201f      	movs	r0, #31
    4b86:	f7ff fa19 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b8a:	0000      	.short	0x0000
    4b8c:	20000000 	.word	0x20000000

00004b90 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4b90:	4901      	ldr	r1, [pc, #4]	; (4b98 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4b92:	2000      	movs	r0, #0
    4b94:	7048      	strb	r0, [r1, #1]
    4b96:	4770      	bx	lr
    4b98:	20000000 	.word	0x20000000

00004b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    4b9c:	4905      	ldr	r1, [pc, #20]	; (4bb4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    4b9e:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    4ba0:	4282      	cmp	r2, r0
    4ba2:	bf18      	it	ne
    4ba4:	4770      	bxne	lr
    4ba6:	2000      	movs	r0, #0
    4ba8:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    4bac:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4bb0:	8588      	strh	r0, [r1, #44]	; 0x2c
    4bb2:	4770      	bx	lr
    4bb4:	20001498 	.word	0x20001498

00004bb8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4bb8:	4907      	ldr	r1, [pc, #28]	; (4bd8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4bba:	4b08      	ldr	r3, [pc, #32]	; (4bdc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    4bbc:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    4bbe:	885b      	ldrh	r3, [r3, #2]
    4bc0:	429a      	cmp	r2, r3
    4bc2:	d106      	bne.n	4bd2 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    4bc4:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    4bc8:	2a00      	cmp	r2, #0
    4bca:	bf1e      	ittt	ne
    4bcc:	6001      	strne	r1, [r0, #0]
    4bce:	2001      	movne	r0, #1
    4bd0:	4770      	bxne	lr
    4bd2:	2000      	movs	r0, #0
    4bd4:	4770      	bx	lr
    4bd6:	0000      	.short	0x0000
    4bd8:	20001498 	.word	0x20001498
    4bdc:	20000464 	.word	0x20000464

00004be0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4be0:	4a0a      	ldr	r2, [pc, #40]	; (4c0c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4be2:	b110      	cbz	r0, 4bea <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4be4:	2801      	cmp	r0, #1
    4be6:	d007      	beq.n	4bf8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4be8:	e00e      	b.n	4c08 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4bea:	7850      	ldrb	r0, [r2, #1]
    4bec:	b160      	cbz	r0, 4c08 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4bee:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4bf2:	6008      	str	r0, [r1, #0]
    4bf4:	88d0      	ldrh	r0, [r2, #6]
    4bf6:	e004      	b.n	4c02 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4bf8:	7810      	ldrb	r0, [r2, #0]
    4bfa:	b128      	cbz	r0, 4c08 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4bfc:	6890      	ldr	r0, [r2, #8]
    4bfe:	6008      	str	r0, [r1, #0]
    4c00:	8990      	ldrh	r0, [r2, #12]
    4c02:	8088      	strh	r0, [r1, #4]
    4c04:	2001      	movs	r0, #1
    4c06:	4770      	bx	lr
    4c08:	2000      	movs	r0, #0
    4c0a:	4770      	bx	lr
    4c0c:	2000047c 	.word	0x2000047c

00004c10 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4c10:	4a09      	ldr	r2, [pc, #36]	; (4c38 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x28>)
    4c12:	2301      	movs	r3, #1
    4c14:	b140      	cbz	r0, 4c28 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x18>
    4c16:	2801      	cmp	r0, #1
    4c18:	bf18      	it	ne
    4c1a:	4770      	bxne	lr
    4c1c:	7013      	strb	r3, [r2, #0]
    4c1e:	6808      	ldr	r0, [r1, #0]
    4c20:	6090      	str	r0, [r2, #8]
    4c22:	8888      	ldrh	r0, [r1, #4]
    4c24:	8190      	strh	r0, [r2, #12]
    4c26:	4770      	bx	lr
    4c28:	7053      	strb	r3, [r2, #1]
    4c2a:	6808      	ldr	r0, [r1, #0]
    4c2c:	f8c2 0002 	str.w	r0, [r2, #2]
    4c30:	8888      	ldrh	r0, [r1, #4]
    4c32:	80d0      	strh	r0, [r2, #6]
    4c34:	4770      	bx	lr
    4c36:	0000      	.short	0x0000
    4c38:	2000047c 	.word	0x2000047c

00004c3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4c3c:	4906      	ldr	r1, [pc, #24]	; (4c58 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4c3e:	b110      	cbz	r0, 4c46 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4c40:	2801      	cmp	r0, #1
    4c42:	d003      	beq.n	4c4c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4c44:	e006      	b.n	4c54 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4c46:	7848      	ldrb	r0, [r1, #1]
    4c48:	b910      	cbnz	r0, 4c50 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    4c4a:	e003      	b.n	4c54 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4c4c:	7808      	ldrb	r0, [r1, #0]
    4c4e:	b108      	cbz	r0, 4c54 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4c50:	2001      	movs	r0, #1
    4c52:	4770      	bx	lr
    4c54:	2000      	movs	r0, #0
    4c56:	4770      	bx	lr
    4c58:	2000047c 	.word	0x2000047c

00004c5c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4c5c:	4901      	ldr	r1, [pc, #4]	; (4c64 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4c5e:	7708      	strb	r0, [r1, #28]
    4c60:	4770      	bx	lr
    4c62:	0000      	.short	0x0000
    4c64:	20000bda 	.word	0x20000bda

00004c68 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    4c68:	4602      	mov	r2, r0
    4c6a:	4807      	ldr	r0, [pc, #28]	; (4c88 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    4c6c:	b510      	push	{r4, lr}
    4c6e:	7800      	ldrb	r0, [r0, #0]
    4c70:	b138      	cbz	r0, 4c82 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    4c72:	4806      	ldr	r0, [pc, #24]	; (4c8c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    4c74:	7881      	ldrb	r1, [r0, #2]
    4c76:	b121      	cbz	r1, 4c82 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    4c78:	1cc0      	adds	r0, r0, #3
    4c7a:	f005 fe5d 	bl	a938 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    4c7e:	2001      	movs	r0, #1
    4c80:	bd10      	pop	{r4, pc}
    4c82:	2000      	movs	r0, #0
    4c84:	bd10      	pop	{r4, pc}
    4c86:	0000      	.short	0x0000
    4c88:	20000468 	.word	0x20000468
    4c8c:	200014da 	.word	0x200014da

00004c90 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    4c90:	4800      	ldr	r0, [pc, #0]	; (4c94 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    4c92:	4770      	bx	lr
    4c94:	200016ad 	.word	0x200016ad

00004c98 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    4c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c9c:	4c12      	ldr	r4, [pc, #72]	; (4ce8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x50>)
    4c9e:	2600      	movs	r6, #0
    4ca0:	4635      	mov	r5, r6
    4ca2:	78a0      	ldrb	r0, [r4, #2]
    4ca4:	2800      	cmp	r0, #0
    4ca6:	bf8c      	ite	hi
    4ca8:	4f10      	ldrhi	r7, [pc, #64]	; (4cec <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x54>)
    4caa:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    4cae:	1960      	adds	r0, r4, r5
    4cb0:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    4cb4:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    4cb8:	2a01      	cmp	r2, #1
    4cba:	d002      	beq.n	4cc2 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x2a>
    4cbc:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    4cc0:	b158      	cbz	r0, 4cda <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x42>
    4cc2:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
    4cc6:	55bd      	strb	r5, [r7, r6]
    4cc8:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    4ccc:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    4cd0:	4630      	mov	r0, r6
    4cd2:	1c73      	adds	r3, r6, #1
    4cd4:	b2de      	uxtb	r6, r3
    4cd6:	f007 f955 	bl	bf84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    4cda:	1c68      	adds	r0, r5, #1
    4cdc:	b2c5      	uxtb	r5, r0
    4cde:	78a0      	ldrb	r0, [r4, #2]
    4ce0:	42a8      	cmp	r0, r5
    4ce2:	d8e4      	bhi.n	4cae <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x16>
    4ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ce8:	200014da 	.word	0x200014da
    4cec:	2000046c 	.word	0x2000046c

00004cf0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    4cf0:	4904      	ldr	r1, [pc, #16]	; (4d04 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    4cf2:	788a      	ldrb	r2, [r1, #2]
    4cf4:	4282      	cmp	r2, r0
    4cf6:	bf86      	itte	hi
    4cf8:	4408      	addhi	r0, r1
    4cfa:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    4cfe:	2000      	movls	r0, #0
    4d00:	4770      	bx	lr
    4d02:	0000      	.short	0x0000
    4d04:	200014da 	.word	0x200014da

00004d08 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    4d08:	4904      	ldr	r1, [pc, #16]	; (4d1c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    4d0a:	788a      	ldrb	r2, [r1, #2]
    4d0c:	4282      	cmp	r2, r0
    4d0e:	bf86      	itte	hi
    4d10:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    4d14:	3083      	addhi	r0, #131	; 0x83
    4d16:	2000      	movls	r0, #0
    4d18:	4770      	bx	lr
    4d1a:	0000      	.short	0x0000
    4d1c:	200014da 	.word	0x200014da

00004d20 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    4d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d24:	4c13      	ldr	r4, [pc, #76]	; (4d74 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x54>)
    4d26:	4606      	mov	r6, r0
    4d28:	2500      	movs	r5, #0
    4d2a:	78a0      	ldrb	r0, [r4, #2]
    4d2c:	2800      	cmp	r0, #0
    4d2e:	bf98      	it	ls
    4d30:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d34:	b2c0      	uxtb	r0, r0
    4d36:	42a8      	cmp	r0, r5
    4d38:	d914      	bls.n	4d64 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    4d3a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    4d3e:	3083      	adds	r0, #131	; 0x83
    4d40:	d010      	beq.n	4d64 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    4d42:	1961      	adds	r1, r4, r5
    4d44:	f891 1143 	ldrb.w	r1, [r1, #323]	; 0x143
    4d48:	b961      	cbnz	r1, 4d64 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    4d4a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    4d4e:	eb04 0741 	add.w	r7, r4, r1, lsl #1
    4d52:	f207 110b 	addw	r1, r7, #267	; 0x10b
    4d56:	4632      	mov	r2, r6
    4d58:	f008 ffbc 	bl	dcd4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    4d5c:	f8b7 010f 	ldrh.w	r0, [r7, #271]	; 0x10f
    4d60:	f8a7 010f 	strh.w	r0, [r7, #271]	; 0x10f
    4d64:	1c68      	adds	r0, r5, #1
    4d66:	b2c5      	uxtb	r5, r0
    4d68:	78a0      	ldrb	r0, [r4, #2]
    4d6a:	42a8      	cmp	r0, r5
    4d6c:	d8e2      	bhi.n	4d34 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x14>
    4d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d72:	0000      	.short	0x0000
    4d74:	200014da 	.word	0x200014da

00004d78 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    4d78:	4908      	ldr	r1, [pc, #32]	; (4d9c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    4d7a:	788a      	ldrb	r2, [r1, #2]
    4d7c:	4282      	cmp	r2, r0
    4d7e:	d903      	bls.n	4d88 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    4d80:	180a      	adds	r2, r1, r0
    4d82:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    4d86:	b10a      	cbz	r2, 4d8c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    4d88:	2000      	movs	r0, #0
    4d8a:	4770      	bx	lr
    4d8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4d90:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4d94:	f200 100b 	addw	r0, r0, #267	; 0x10b
    4d98:	4770      	bx	lr
    4d9a:	0000      	.short	0x0000
    4d9c:	200014da 	.word	0x200014da

00004da0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    4da0:	b510      	push	{r4, lr}
    4da2:	f240 12d3 	movw	r2, #467	; 0x1d3
    4da6:	2100      	movs	r1, #0
    4da8:	4807      	ldr	r0, [pc, #28]	; (4dc8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    4daa:	f007 ff3a 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4dae:	2208      	movs	r2, #8
    4db0:	21ff      	movs	r1, #255	; 0xff
    4db2:	4806      	ldr	r0, [pc, #24]	; (4dcc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    4db4:	f007 ff35 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4db8:	4805      	ldr	r0, [pc, #20]	; (4dd0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    4dba:	2100      	movs	r1, #0
    4dbc:	7001      	strb	r1, [r0, #0]
    4dbe:	7041      	strb	r1, [r0, #1]
    4dc0:	f44f 7161 	mov.w	r1, #900	; 0x384
    4dc4:	8041      	strh	r1, [r0, #2]
    4dc6:	bd10      	pop	{r4, pc}
    4dc8:	200014da 	.word	0x200014da
    4dcc:	2000046c 	.word	0x2000046c
    4dd0:	20000468 	.word	0x20000468

00004dd4 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>:
    4dd4:	b570      	push	{r4, r5, r6, lr}
    4dd6:	460c      	mov	r4, r1
    4dd8:	4605      	mov	r5, r0
    4dda:	f005 fed3 	bl	ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4dde:	f005 fdc3 	bl	a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4de2:	480a      	ldr	r0, [pc, #40]	; (4e0c <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x38>)
    4de4:	462a      	mov	r2, r5
    4de6:	7800      	ldrb	r0, [r0, #0]
    4de8:	b168      	cbz	r0, 4e06 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x32>
    4dea:	4b09      	ldr	r3, [pc, #36]	; (4e10 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x3c>)
    4dec:	7899      	ldrb	r1, [r3, #2]
    4dee:	b151      	cbz	r1, 4e06 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x32>
    4df0:	2c00      	cmp	r4, #0
    4df2:	bf0c      	ite	eq
    4df4:	f103 0083 	addeq.w	r0, r3, #131	; 0x83
    4df8:	1cd8      	addne	r0, r3, #3
    4dfa:	f005 fd9d 	bl	a938 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    4dfe:	f005 fddd 	bl	a9bc <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>
    4e02:	2001      	movs	r0, #1
    4e04:	bd70      	pop	{r4, r5, r6, pc}
    4e06:	2000      	movs	r0, #0
    4e08:	bd70      	pop	{r4, r5, r6, pc}
    4e0a:	0000      	.short	0x0000
    4e0c:	20000468 	.word	0x20000468
    4e10:	200014da 	.word	0x200014da

00004e14 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    4e14:	4b0b      	ldr	r3, [pc, #44]	; (4e44 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    4e16:	f893 c002 	ldrb.w	ip, [r3, #2]
    4e1a:	4584      	cmp	ip, r0
    4e1c:	bf9c      	itt	ls
    4e1e:	2000      	movls	r0, #0
    4e20:	4770      	bxls	lr
    4e22:	4418      	add	r0, r3
    4e24:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    4e28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4e2c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    4e30:	700b      	strb	r3, [r1, #0]
    4e32:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    4e36:	6011      	str	r1, [r2, #0]
    4e38:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    4e3c:	8090      	strh	r0, [r2, #4]
    4e3e:	2001      	movs	r0, #1
    4e40:	4770      	bx	lr
    4e42:	0000      	.short	0x0000
    4e44:	200014da 	.word	0x200014da

00004e48 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    4e48:	4907      	ldr	r1, [pc, #28]	; (4e68 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    4e4a:	788a      	ldrb	r2, [r1, #2]
    4e4c:	4282      	cmp	r2, r0
    4e4e:	bf9c      	itt	ls
    4e50:	2000      	movls	r0, #0
    4e52:	4770      	bxls	lr
    4e54:	4408      	add	r0, r1
    4e56:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    4e5a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4e5e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    4e62:	f000 0001 	and.w	r0, r0, #1
    4e66:	4770      	bx	lr
    4e68:	200014da 	.word	0x200014da

00004e6c <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ>:
    4e6c:	4602      	mov	r2, r0
    4e6e:	4806      	ldr	r0, [pc, #24]	; (4e88 <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ+0x1c>)
    4e70:	b510      	push	{r4, lr}
    4e72:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    4e76:	2101      	movs	r1, #1
    4e78:	3083      	adds	r0, #131	; 0x83
    4e7a:	f005 fd5d 	bl	a938 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    4e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e82:	f005 bd9b 	b.w	a9bc <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>
    4e86:	0000      	.short	0x0000
    4e88:	200014da 	.word	0x200014da

00004e8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    4e8c:	4801      	ldr	r0, [pc, #4]	; (4e94 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    4e8e:	8840      	ldrh	r0, [r0, #2]
    4e90:	4770      	bx	lr
    4e92:	0000      	.short	0x0000
    4e94:	20000468 	.word	0x20000468

00004e98 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    4e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e9c:	4617      	mov	r7, r2
    4e9e:	2501      	movs	r5, #1
    4ea0:	2200      	movs	r2, #0
    4ea2:	461e      	mov	r6, r3
    4ea4:	462c      	mov	r4, r5
    4ea6:	703a      	strb	r2, [r7, #0]
    4ea8:	f000 f92c 	bl	5104 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    4eac:	2810      	cmp	r0, #16
    4eae:	d027      	beq.n	4f00 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    4eb0:	4918      	ldr	r1, [pc, #96]	; (4f14 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x7c>)
    4eb2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    4eb6:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    4eba:	f002 0201 	and.w	r2, r2, #1
    4ebe:	703a      	strb	r2, [r7, #0]
    4ec0:	788b      	ldrb	r3, [r1, #2]
    4ec2:	2200      	movs	r2, #0
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	d91b      	bls.n	4f00 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    4ec8:	eb01 0c02 	add.w	ip, r1, r2
    4ecc:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    4ed0:	4584      	cmp	ip, r0
    4ed2:	d119      	bne.n	4f08 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    4ed4:	2a10      	cmp	r2, #16
    4ed6:	d013      	beq.n	4f00 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    4ed8:	2e00      	cmp	r6, #0
    4eda:	bf18      	it	ne
    4edc:	7032      	strbne	r2, [r6, #0]
    4ede:	7888      	ldrb	r0, [r1, #2]
    4ee0:	4290      	cmp	r0, r2
    4ee2:	d90d      	bls.n	4f00 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    4ee4:	eb01 1002 	add.w	r0, r1, r2, lsl #4
    4ee8:	f110 0f03 	cmn.w	r0, #3
    4eec:	d008      	beq.n	4f00 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    4eee:	1888      	adds	r0, r1, r2
    4ef0:	f890 414b 	ldrb.w	r4, [r0, #331]	; 0x14b
    4ef4:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    4ef8:	2801      	cmp	r0, #1
    4efa:	bf0c      	ite	eq
    4efc:	2501      	moveq	r5, #1
    4efe:	2500      	movne	r5, #0
    4f00:	ea45 0004 	orr.w	r0, r5, r4
    4f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f08:	1c52      	adds	r2, r2, #1
    4f0a:	b2d2      	uxtb	r2, r2
    4f0c:	4293      	cmp	r3, r2
    4f0e:	d8db      	bhi.n	4ec8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x30>
    4f10:	e7f6      	b.n	4f00 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    4f12:	0000      	.short	0x0000
    4f14:	200014da 	.word	0x200014da

00004f18 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    4f18:	b570      	push	{r4, r5, r6, lr}
    4f1a:	460d      	mov	r5, r1
    4f1c:	4604      	mov	r4, r0
    4f1e:	f000 f8f1 	bl	5104 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    4f22:	4a1a      	ldr	r2, [pc, #104]	; (4f8c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    4f24:	2810      	cmp	r0, #16
    4f26:	d014      	beq.n	4f52 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    4f28:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    4f2c:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    4f30:	f010 0f01 	tst.w	r0, #1
    4f34:	bf1c      	itt	ne
    4f36:	2001      	movne	r0, #1
    4f38:	bd70      	popne	{r4, r5, r6, pc}
    4f3a:	7850      	ldrb	r0, [r2, #1]
    4f3c:	2808      	cmp	r0, #8
    4f3e:	bf3c      	itt	cc
    4f40:	2001      	movcc	r0, #1
    4f42:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    4f46:	d21e      	bcs.n	4f86 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    4f48:	7850      	ldrb	r0, [r2, #1]
    4f4a:	1c40      	adds	r0, r0, #1
    4f4c:	7050      	strb	r0, [r2, #1]
    4f4e:	2001      	movs	r0, #1
    4f50:	bd70      	pop	{r4, r5, r6, pc}
    4f52:	7850      	ldrb	r0, [r2, #1]
    4f54:	2808      	cmp	r0, #8
    4f56:	d216      	bcs.n	4f86 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    4f58:	7813      	ldrb	r3, [r2, #0]
    4f5a:	2001      	movs	r0, #1
    4f5c:	1c59      	adds	r1, r3, #1
    4f5e:	7011      	strb	r1, [r2, #0]
    4f60:	2b10      	cmp	r3, #16
    4f62:	d303      	bcc.n	4f6c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    4f64:	2146      	movs	r1, #70	; 0x46
    4f66:	2028      	movs	r0, #40	; 0x28
    4f68:	f7ff f828 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4f70:	6829      	ldr	r1, [r5, #0]
    4f72:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    4f76:	88a9      	ldrh	r1, [r5, #4]
    4f78:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    4f7c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    4f80:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    4f84:	e7e0      	b.n	4f48 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    4f86:	2000      	movs	r0, #0
    4f88:	bd70      	pop	{r4, r5, r6, pc}
    4f8a:	0000      	.short	0x0000
    4f8c:	200014da 	.word	0x200014da

00004f90 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ>:
    4f90:	4801      	ldr	r0, [pc, #4]	; (4f98 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ+0x8>)
    4f92:	7840      	ldrb	r0, [r0, #1]
    4f94:	4770      	bx	lr
    4f96:	0000      	.short	0x0000
    4f98:	20000468 	.word	0x20000468

00004f9c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    4f9c:	4901      	ldr	r1, [pc, #4]	; (4fa4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    4f9e:	7048      	strb	r0, [r1, #1]
    4fa0:	4770      	bx	lr
    4fa2:	0000      	.short	0x0000
    4fa4:	20000468 	.word	0x20000468

00004fa8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    4fa8:	b470      	push	{r4, r5, r6}
    4faa:	482b      	ldr	r0, [pc, #172]	; (5058 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    4fac:	2500      	movs	r5, #0
    4fae:	7801      	ldrb	r1, [r0, #0]
    4fb0:	1e49      	subs	r1, r1, #1
    4fb2:	b24b      	sxtb	r3, r1
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	db46      	blt.n	5046 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    4fb8:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    4fbc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    4fc0:	f011 0f01 	tst.w	r1, #1
    4fc4:	d03b      	beq.n	503e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    4fc6:	7842      	ldrb	r2, [r0, #1]
    4fc8:	b2d9      	uxtb	r1, r3
    4fca:	1e52      	subs	r2, r2, #1
    4fcc:	7042      	strb	r2, [r0, #1]
    4fce:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    4fd2:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    4fd6:	f890 c002 	ldrb.w	ip, [r0, #2]
    4fda:	2200      	movs	r2, #0
    4fdc:	f1bc 0f00 	cmp.w	ip, #0
    4fe0:	d90b      	bls.n	4ffa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    4fe2:	1884      	adds	r4, r0, r2
    4fe4:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    4fe8:	428e      	cmp	r6, r1
    4fea:	d102      	bne.n	4ff2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    4fec:	2a10      	cmp	r2, #16
    4fee:	d126      	bne.n	503e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    4ff0:	e003      	b.n	4ffa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    4ff2:	1c52      	adds	r2, r2, #1
    4ff4:	b2d2      	uxtb	r2, r2
    4ff6:	4594      	cmp	ip, r2
    4ff8:	d8f3      	bhi.n	4fe2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    4ffa:	7802      	ldrb	r2, [r0, #0]
    4ffc:	1e52      	subs	r2, r2, #1
    4ffe:	b2d2      	uxtb	r2, r2
    5000:	7002      	strb	r2, [r0, #0]
    5002:	428a      	cmp	r2, r1
    5004:	d01b      	beq.n	503e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5006:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    500a:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    500e:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    5012:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    5016:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    501a:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    501e:	7884      	ldrb	r4, [r0, #2]
    5020:	f890 c000 	ldrb.w	ip, [r0]
    5024:	2200      	movs	r2, #0
    5026:	2c00      	cmp	r4, #0
    5028:	d909      	bls.n	503e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    502a:	1886      	adds	r6, r0, r2
    502c:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    5030:	4566      	cmp	r6, ip
    5032:	d10c      	bne.n	504e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    5034:	2a10      	cmp	r2, #16
    5036:	bf1c      	itt	ne
    5038:	4402      	addne	r2, r0
    503a:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    503e:	1e59      	subs	r1, r3, #1
    5040:	b24b      	sxtb	r3, r1
    5042:	2b00      	cmp	r3, #0
    5044:	dab8      	bge.n	4fb8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    5046:	4805      	ldr	r0, [pc, #20]	; (505c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    5048:	7045      	strb	r5, [r0, #1]
    504a:	bc70      	pop	{r4, r5, r6}
    504c:	4770      	bx	lr
    504e:	1c52      	adds	r2, r2, #1
    5050:	b2d2      	uxtb	r2, r2
    5052:	4294      	cmp	r4, r2
    5054:	d8e9      	bhi.n	502a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    5056:	e7f2      	b.n	503e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5058:	200014da 	.word	0x200014da
    505c:	20000468 	.word	0x20000468

00005060 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5064:	4d25      	ldr	r5, [pc, #148]	; (50fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5066:	2600      	movs	r6, #0
    5068:	4634      	mov	r4, r6
    506a:	7828      	ldrb	r0, [r5, #0]
    506c:	2800      	cmp	r0, #0
    506e:	bf8c      	ite	hi
    5070:	4f23      	ldrhi	r7, [pc, #140]	; (5100 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5072:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    5076:	bf00      	nop
    5078:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    507c:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    5080:	f011 0f01 	tst.w	r1, #1
    5084:	d032      	beq.n	50ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5086:	78aa      	ldrb	r2, [r5, #2]
    5088:	2100      	movs	r1, #0
    508a:	4623      	mov	r3, r4
    508c:	2a00      	cmp	r2, #0
    508e:	d909      	bls.n	50a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    5090:	eb05 0c01 	add.w	ip, r5, r1
    5094:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5098:	459c      	cmp	ip, r3
    509a:	d004      	beq.n	50a6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    509c:	1c49      	adds	r1, r1, #1
    509e:	b2c9      	uxtb	r1, r1
    50a0:	428a      	cmp	r2, r1
    50a2:	d8f5      	bhi.n	5090 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    50a4:	2110      	movs	r1, #16
    50a6:	428a      	cmp	r2, r1
    50a8:	bf86      	itte	hi
    50aa:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    50ae:	1cd3      	addhi	r3, r2, #3
    50b0:	2300      	movls	r3, #0
    50b2:	2200      	movs	r2, #0
    50b4:	2910      	cmp	r1, #16
    50b6:	d00c      	beq.n	50d2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    50b8:	eb05 0c01 	add.w	ip, r5, r1
    50bc:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    50c0:	f1b8 0f01 	cmp.w	r8, #1
    50c4:	d004      	beq.n	50d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    50c6:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    50ca:	f1bc 0f00 	cmp.w	ip, #0
    50ce:	d000      	beq.n	50d2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    50d0:	2201      	movs	r2, #1
    50d2:	1e52      	subs	r2, r2, #1
    50d4:	4213      	tst	r3, r2
    50d6:	d109      	bne.n	50ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    50d8:	55b9      	strb	r1, [r7, r6]
    50da:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    50de:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    50e2:	4630      	mov	r0, r6
    50e4:	1c73      	adds	r3, r6, #1
    50e6:	b2de      	uxtb	r6, r3
    50e8:	f006 ff4c 	bl	bf84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    50ec:	1c60      	adds	r0, r4, #1
    50ee:	b2c4      	uxtb	r4, r0
    50f0:	7828      	ldrb	r0, [r5, #0]
    50f2:	42a0      	cmp	r0, r4
    50f4:	d8c0      	bhi.n	5078 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    50f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50fa:	0000      	.short	0x0000
    50fc:	200014da 	.word	0x200014da
    5100:	2000046c 	.word	0x2000046c
    5104:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5108:	4b20      	ldr	r3, [pc, #128]	; (518c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>)
    510a:	4602      	mov	r2, r0
    510c:	2000      	movs	r0, #0
    510e:	f893 8000 	ldrb.w	r8, [r3]
    5112:	f1b8 0f00 	cmp.w	r8, #0
    5116:	d934      	bls.n	5182 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x122>
    5118:	780f      	ldrb	r7, [r1, #0]
    511a:	784e      	ldrb	r6, [r1, #1]
    511c:	788d      	ldrb	r5, [r1, #2]
    511e:	78cc      	ldrb	r4, [r1, #3]
    5120:	f891 c004 	ldrb.w	ip, [r1, #4]
    5124:	f891 a005 	ldrb.w	sl, [r1, #5]
    5128:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    512c:	f891 9153 	ldrb.w	r9, [r1, #339]	; 0x153
    5130:	f891 b154 	ldrb.w	fp, [r1, #340]	; 0x154
    5134:	ea82 0909 	eor.w	r9, r2, r9
    5138:	ea87 0b0b 	eor.w	fp, r7, fp
    513c:	44d9      	add	r9, fp
    513e:	f891 b155 	ldrb.w	fp, [r1, #341]	; 0x155
    5142:	ea86 0b0b 	eor.w	fp, r6, fp
    5146:	44d9      	add	r9, fp
    5148:	f891 b156 	ldrb.w	fp, [r1, #342]	; 0x156
    514c:	ea85 0b0b 	eor.w	fp, r5, fp
    5150:	44d9      	add	r9, fp
    5152:	f891 b157 	ldrb.w	fp, [r1, #343]	; 0x157
    5156:	ea84 0b0b 	eor.w	fp, r4, fp
    515a:	44d9      	add	r9, fp
    515c:	f891 b158 	ldrb.w	fp, [r1, #344]	; 0x158
    5160:	f891 1159 	ldrb.w	r1, [r1, #345]	; 0x159
    5164:	ea8c 0b0b 	eor.w	fp, ip, fp
    5168:	44d9      	add	r9, fp
    516a:	ea8a 0101 	eor.w	r1, sl, r1
    516e:	eb11 0f09 	cmn.w	r1, r9
    5172:	bf04      	itt	eq
    5174:	e8bd 0ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5178:	4770      	bxeq	lr
    517a:	1c40      	adds	r0, r0, #1
    517c:	b2c0      	uxtb	r0, r0
    517e:	4580      	cmp	r8, r0
    5180:	d8d2      	bhi.n	5128 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    5182:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5186:	2010      	movs	r0, #16
    5188:	4770      	bx	lr
    518a:	0000      	.short	0x0000
    518c:	200014da 	.word	0x200014da
    5190:	4925      	ldr	r1, [pc, #148]	; (5228 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c8>)
    5192:	b410      	push	{r4}
    5194:	784a      	ldrb	r2, [r1, #1]
    5196:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    519a:	1e52      	subs	r2, r2, #1
    519c:	704a      	strb	r2, [r1, #1]
    519e:	2200      	movs	r2, #0
    51a0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    51a4:	f891 c002 	ldrb.w	ip, [r1, #2]
    51a8:	f1bc 0f00 	cmp.w	ip, #0
    51ac:	d90d      	bls.n	51ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    51ae:	188b      	adds	r3, r1, r2
    51b0:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    51b4:	4284      	cmp	r4, r0
    51b6:	d104      	bne.n	51c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x162>
    51b8:	2a10      	cmp	r2, #16
    51ba:	bf1c      	itt	ne
    51bc:	bc10      	popne	{r4}
    51be:	4770      	bxne	lr
    51c0:	e003      	b.n	51ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    51c2:	1c52      	adds	r2, r2, #1
    51c4:	b2d2      	uxtb	r2, r2
    51c6:	4594      	cmp	ip, r2
    51c8:	d8f1      	bhi.n	51ae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14e>
    51ca:	780a      	ldrb	r2, [r1, #0]
    51cc:	1e52      	subs	r2, r2, #1
    51ce:	b2d2      	uxtb	r2, r2
    51d0:	700a      	strb	r2, [r1, #0]
    51d2:	4282      	cmp	r2, r0
    51d4:	bf04      	itt	eq
    51d6:	bc10      	popeq	{r4}
    51d8:	4770      	bxeq	lr
    51da:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    51de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    51e2:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    51e6:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    51ea:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    51ee:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    51f2:	788c      	ldrb	r4, [r1, #2]
    51f4:	f891 c000 	ldrb.w	ip, [r1]
    51f8:	2200      	movs	r2, #0
    51fa:	2c00      	cmp	r4, #0
    51fc:	bf9c      	itt	ls
    51fe:	bc10      	popls	{r4}
    5200:	4770      	bxls	lr
    5202:	188b      	adds	r3, r1, r2
    5204:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    5208:	4563      	cmp	r3, ip
    520a:	d106      	bne.n	521a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    520c:	2a10      	cmp	r2, #16
    520e:	bf1c      	itt	ne
    5210:	4411      	addne	r1, r2
    5212:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    5216:	bc10      	pop	{r4}
    5218:	4770      	bx	lr
    521a:	1c52      	adds	r2, r2, #1
    521c:	b2d2      	uxtb	r2, r2
    521e:	4294      	cmp	r4, r2
    5220:	d8ef      	bhi.n	5202 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1a2>
    5222:	bc10      	pop	{r4}
    5224:	4770      	bx	lr
    5226:	0000      	.short	0x0000
    5228:	200014da 	.word	0x200014da

0000522c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    522c:	b570      	push	{r4, r5, r6, lr}
    522e:	b08c      	sub	sp, #48	; 0x30
    5230:	f100 0410 	add.w	r4, r0, #16
    5234:	461d      	mov	r5, r3
    5236:	4616      	mov	r6, r2
    5238:	f10d 3cff 	add.w	ip, sp, #4294967295
    523c:	f05f 0008 	movs.w	r0, #8
    5240:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    5244:	f88c 2001 	strb.w	r2, [ip, #1]
    5248:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    524c:	f80c 2f02 	strb.w	r2, [ip, #2]!
    5250:	1e40      	subs	r0, r0, #1
    5252:	d1f5      	bne.n	5240 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    5254:	f101 0c10 	add.w	ip, r1, #16
    5258:	466c      	mov	r4, sp
    525a:	f10d 010f 	add.w	r1, sp, #15
    525e:	2008      	movs	r0, #8
    5260:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    5264:	704a      	strb	r2, [r1, #1]
    5266:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    526a:	f801 2f02 	strb.w	r2, [r1, #2]!
    526e:	1e40      	subs	r0, r0, #1
    5270:	d1f6      	bne.n	5260 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    5272:	4620      	mov	r0, r4
    5274:	f008 fce7 	bl	dc46 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    5278:	b17e      	cbz	r6, 529a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    527a:	1e6a      	subs	r2, r5, #1
    527c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5280:	f05f 0108 	movs.w	r1, #8
    5284:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5288:	7053      	strb	r3, [r2, #1]
    528a:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    528e:	f802 3f02 	strb.w	r3, [r2, #2]!
    5292:	1e49      	subs	r1, r1, #1
    5294:	d1f6      	bne.n	5284 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    5296:	b00c      	add	sp, #48	; 0x30
    5298:	bd70      	pop	{r4, r5, r6, pc}
    529a:	9808      	ldr	r0, [sp, #32]
    529c:	6028      	str	r0, [r5, #0]
    529e:	9809      	ldr	r0, [sp, #36]	; 0x24
    52a0:	6068      	str	r0, [r5, #4]
    52a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    52a4:	60a8      	str	r0, [r5, #8]
    52a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    52a8:	60e8      	str	r0, [r5, #12]
    52aa:	b00c      	add	sp, #48	; 0x30
    52ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000052b0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    52b0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    52b4:	4604      	mov	r4, r0
    52b6:	4690      	mov	r8, r2
    52b8:	468a      	mov	sl, r1
    52ba:	f04f 0901 	mov.w	r9, #1
    52be:	4608      	mov	r0, r1
    52c0:	f008 ffcc 	bl	e25c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    52c4:	4605      	mov	r5, r0
    52c6:	4650      	mov	r0, sl
    52c8:	f008 ffcc 	bl	e264 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    52cc:	4607      	mov	r7, r0
    52ce:	f010 0f01 	tst.w	r0, #1
    52d2:	bf18      	it	ne
    52d4:	2601      	movne	r6, #1
    52d6:	d02b      	beq.n	5330 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x80>
    52d8:	f015 0f01 	tst.w	r5, #1
    52dc:	bf18      	it	ne
    52de:	f04f 0b01 	movne.w	fp, #1
    52e2:	d030      	beq.n	5346 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x96>
    52e4:	ea56 000b 	orrs.w	r0, r6, fp
    52e8:	bf08      	it	eq
    52ea:	f04f 0900 	moveq.w	r9, #0
    52ee:	f005 faab 	bl	a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    52f2:	4238      	tst	r0, r7
    52f4:	bf08      	it	eq
    52f6:	2600      	moveq	r6, #0
    52f8:	f005 faa6 	bl	a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    52fc:	4228      	tst	r0, r5
    52fe:	bf08      	it	eq
    5300:	f04f 0b00 	moveq.w	fp, #0
    5304:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    5308:	42b0      	cmp	r0, r6
    530a:	bf0c      	ite	eq
    530c:	2000      	moveq	r0, #0
    530e:	4630      	movne	r0, r6
    5310:	f888 0000 	strb.w	r0, [r8]
    5314:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    5318:	4559      	cmp	r1, fp
    531a:	bf08      	it	eq
    531c:	f04f 0b00 	moveq.w	fp, #0
    5320:	f888 b001 	strb.w	fp, [r8, #1]
    5324:	2800      	cmp	r0, #0
    5326:	bf08      	it	eq
    5328:	f1bb 0f00 	cmpeq.w	fp, #0
    532c:	d128      	bne.n	5380 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    532e:	e018      	b.n	5362 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb2>
    5330:	f010 0f02 	tst.w	r0, #2
    5334:	bf18      	it	ne
    5336:	2602      	movne	r6, #2
    5338:	d1ce      	bne.n	52d8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    533a:	f017 0f04 	tst.w	r7, #4
    533e:	bf14      	ite	ne
    5340:	2608      	movne	r6, #8
    5342:	2600      	moveq	r6, #0
    5344:	e7c8      	b.n	52d8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    5346:	f015 0f02 	tst.w	r5, #2
    534a:	bf18      	it	ne
    534c:	f04f 0b02 	movne.w	fp, #2
    5350:	d1c8      	bne.n	52e4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    5352:	f015 0f04 	tst.w	r5, #4
    5356:	bf14      	ite	ne
    5358:	f04f 0b08 	movne.w	fp, #8
    535c:	f04f 0b00 	moveq.w	fp, #0
    5360:	e7c0      	b.n	52e4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    5362:	4650      	mov	r0, sl
    5364:	f008 ff7c 	bl	e260 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    5368:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    536c:	1a40      	subs	r0, r0, r1
    536e:	b200      	sxth	r0, r0
    5370:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    5374:	4288      	cmp	r0, r1
    5376:	dc01      	bgt.n	537c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xcc>
    5378:	2800      	cmp	r0, #0
    537a:	dc01      	bgt.n	5380 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    537c:	f04f 0900 	mov.w	r9, #0
    5380:	b116      	cbz	r6, 5388 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd8>
    5382:	2e08      	cmp	r6, #8
    5384:	d010      	beq.n	53a8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    5386:	e01f      	b.n	53c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    5388:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    538c:	2801      	cmp	r0, #1
    538e:	bf18      	it	ne
    5390:	2802      	cmpne	r0, #2
    5392:	d019      	beq.n	53c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    5394:	2804      	cmp	r0, #4
    5396:	bf18      	it	ne
    5398:	2808      	cmpne	r0, #8
    539a:	d005      	beq.n	53a8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    539c:	f240 21a9 	movw	r1, #681	; 0x2a9
    53a0:	f04f 0006 	mov.w	r0, #6
    53a4:	f7fe fe0a 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53a8:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    53ac:	2801      	cmp	r0, #1
    53ae:	d10b      	bne.n	53c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    53b0:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    53b4:	2801      	cmp	r0, #1
    53b6:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    53ba:	d008      	beq.n	53ce <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x11e>
    53bc:	2808      	cmp	r0, #8
    53be:	d003      	beq.n	53c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    53c0:	f05f 0008 	movs.w	r0, #8
    53c4:	f888 0000 	strb.w	r0, [r8]
    53c8:	4648      	mov	r0, r9
    53ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    53ce:	2804      	cmp	r0, #4
    53d0:	bf18      	it	ne
    53d2:	2004      	movne	r0, #4
    53d4:	d1f6      	bne.n	53c4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x114>
    53d6:	e7f3      	b.n	53c0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x110>

000053d8 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    53d8:	f641 524c 	movw	r2, #7500	; 0x1d4c
    53dc:	4291      	cmp	r1, r2
    53de:	bf3d      	ittte	cc
    53e0:	4905      	ldrcc	r1, [pc, #20]	; (53f8 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI+0x20>)
    53e2:	fba1 1000 	umullcc	r1, r0, r1, r0
    53e6:	0940      	lsrcc	r0, r0, #5
    53e8:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
    53ec:	bf28      	it	cs
    53ee:	fbb0 f0f1 	udivcs	r0, r0, r1
    53f2:	b280      	uxth	r0, r0
    53f4:	4770      	bx	lr
    53f6:	0000      	.short	0x0000
    53f8:	51eb851f 	.word	0x51eb851f

000053fc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    53fc:	f641 524c 	movw	r2, #7500	; 0x1d4c
    5400:	4291      	cmp	r1, r2
    5402:	bf3d      	ittte	cc
    5404:	4905      	ldrcc	r1, [pc, #20]	; (541c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>)
    5406:	fba1 1000 	umullcc	r1, r0, r1, r0
    540a:	0940      	lsrcc	r0, r0, #5
    540c:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
    5410:	bf28      	it	cs
    5412:	fbb0 f0f1 	udivcs	r0, r0, r1
    5416:	b2c0      	uxtb	r0, r0
    5418:	4770      	bx	lr
    541a:	0000      	.short	0x0000
    541c:	51eb851f 	.word	0x51eb851f

00005420 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5420:	4907      	ldr	r1, [pc, #28]	; (5440 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x20>)
    5422:	b508      	push	{r3, lr}
    5424:	7809      	ldrb	r1, [r1, #0]
    5426:	f88d 1000 	strb.w	r1, [sp]
    542a:	f89d 1000 	ldrb.w	r1, [sp]
    542e:	2900      	cmp	r1, #0
    5430:	bf1c      	itt	ne
    5432:	2000      	movne	r0, #0
    5434:	bd08      	popne	{r3, pc}
    5436:	4903      	ldr	r1, [pc, #12]	; (5444 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x24>)
    5438:	f00a f9e8 	bl	f80c <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    543c:	2001      	movs	r0, #1
    543e:	bd08      	pop	{r3, pc}
    5440:	2000048a 	.word	0x2000048a
    5444:	2000048b 	.word	0x2000048b

00005448 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    5448:	b510      	push	{r4, lr}
    544a:	4c05      	ldr	r4, [pc, #20]	; (5460 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    544c:	21ff      	movs	r1, #255	; 0xff
    544e:	7021      	strb	r1, [r4, #0]
    5450:	4601      	mov	r1, r0
    5452:	1c60      	adds	r0, r4, #1
    5454:	f00a f9da 	bl	f80c <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    5458:	2000      	movs	r0, #0
    545a:	7020      	strb	r0, [r4, #0]
    545c:	bd10      	pop	{r4, pc}
    545e:	0000      	.short	0x0000
    5460:	2000048a 	.word	0x2000048a

00005464 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    5464:	b510      	push	{r4, lr}
    5466:	4604      	mov	r4, r0
    5468:	1c40      	adds	r0, r0, #1
    546a:	4288      	cmp	r0, r1
    546c:	bf18      	it	ne
    546e:	f00a f9cd 	blne	f80c <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    5472:	7960      	ldrb	r0, [r4, #5]
    5474:	f000 001f 	and.w	r0, r0, #31
    5478:	7160      	strb	r0, [r4, #5]
    547a:	2000      	movs	r0, #0
    547c:	f884 000b 	strb.w	r0, [r4, #11]
    5480:	eb04 0c00 	add.w	ip, r4, r0
    5484:	1c40      	adds	r0, r0, #1
    5486:	f89c 2001 	ldrb.w	r2, [ip, #1]
    548a:	f002 0101 	and.w	r1, r2, #1
    548e:	0852      	lsrs	r2, r2, #1
    5490:	f002 0301 	and.w	r3, r2, #1
    5494:	4419      	add	r1, r3
    5496:	0852      	lsrs	r2, r2, #1
    5498:	f002 0301 	and.w	r3, r2, #1
    549c:	4419      	add	r1, r3
    549e:	0852      	lsrs	r2, r2, #1
    54a0:	f002 0301 	and.w	r3, r2, #1
    54a4:	440b      	add	r3, r1
    54a6:	0851      	lsrs	r1, r2, #1
    54a8:	f001 0201 	and.w	r2, r1, #1
    54ac:	441a      	add	r2, r3
    54ae:	0849      	lsrs	r1, r1, #1
    54b0:	f001 0301 	and.w	r3, r1, #1
    54b4:	441a      	add	r2, r3
    54b6:	0849      	lsrs	r1, r1, #1
    54b8:	f001 0301 	and.w	r3, r1, #1
    54bc:	441a      	add	r2, r3
    54be:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    54c2:	f88c 1006 	strb.w	r1, [ip, #6]
    54c6:	7ae2      	ldrb	r2, [r4, #11]
    54c8:	2805      	cmp	r0, #5
    54ca:	4411      	add	r1, r2
    54cc:	72e1      	strb	r1, [r4, #11]
    54ce:	dbd7      	blt.n	5480 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1c>
    54d0:	bd10      	pop	{r4, pc}
	...

000054d4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    54d4:	4904      	ldr	r1, [pc, #16]	; (54e8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    54d6:	7d89      	ldrb	r1, [r1, #22]
    54d8:	f001 0104 	and.w	r1, r1, #4
    54dc:	4308      	orrs	r0, r1
    54de:	bf0c      	ite	eq
    54e0:	2001      	moveq	r0, #1
    54e2:	2000      	movne	r0, #0
    54e4:	4770      	bx	lr
    54e6:	0000      	.short	0x0000
    54e8:	20001414 	.word	0x20001414

000054ec <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    54ec:	4803      	ldr	r0, [pc, #12]	; (54fc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    54ee:	7d80      	ldrb	r0, [r0, #22]
    54f0:	f010 0f02 	tst.w	r0, #2
    54f4:	bf0c      	ite	eq
    54f6:	2001      	moveq	r0, #1
    54f8:	2000      	movne	r0, #0
    54fa:	4770      	bx	lr
    54fc:	20001414 	.word	0x20001414

00005500 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    5500:	4803      	ldr	r0, [pc, #12]	; (5510 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    5502:	7d80      	ldrb	r0, [r0, #22]
    5504:	f010 0f01 	tst.w	r0, #1
    5508:	bf0c      	ite	eq
    550a:	2001      	moveq	r0, #1
    550c:	2000      	movne	r0, #0
    550e:	4770      	bx	lr
    5510:	20001414 	.word	0x20001414

00005514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    5514:	b508      	push	{r3, lr}
    5516:	b1d8      	cbz	r0, 5550 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3c>
    5518:	7a03      	ldrb	r3, [r0, #8]
    551a:	f88d 3000 	strb.w	r3, [sp]
    551e:	f89d 3000 	ldrb.w	r3, [sp]
    5522:	2b00      	cmp	r3, #0
    5524:	bf18      	it	ne
    5526:	bd08      	popne	{r3, pc}
    5528:	2300      	movs	r3, #0
    552a:	6003      	str	r3, [r0, #0]
    552c:	6041      	str	r1, [r0, #4]
    552e:	f3ef 8310 	mrs	r3, PRIMASK
    5532:	b672      	cpsid	i
    5534:	490a      	ldr	r1, [pc, #40]	; (5560 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>)
    5536:	f8d1 c000 	ldr.w	ip, [r1]
    553a:	f1bc 0f00 	cmp.w	ip, #0
    553e:	bf1a      	itte	ne
    5540:	f8d1 c004 	ldrne.w	ip, [r1, #4]
    5544:	f8cc 0000 	strne.w	r0, [ip]
    5548:	6008      	streq	r0, [r1, #0]
    554a:	6048      	str	r0, [r1, #4]
    554c:	b933      	cbnz	r3, 555c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    554e:	e004      	b.n	555a <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x46>
    5550:	f240 4141 	movw	r1, #1089	; 0x441
    5554:	2010      	movs	r0, #16
    5556:	f7fe fd31 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    555a:	b662      	cpsie	i
    555c:	7202      	strb	r2, [r0, #8]
    555e:	bd08      	pop	{r3, pc}
    5560:	200000ec 	.word	0x200000ec

00005564 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    5564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5568:	b087      	sub	sp, #28
    556a:	0004      	movs	r4, r0
    556c:	d00f      	beq.n	558e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a>
    556e:	48fe      	ldr	r0, [pc, #1016]	; (5968 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x404>)
    5570:	2701      	movs	r7, #1
    5572:	2500      	movs	r5, #0
    5574:	7801      	ldrb	r1, [r0, #0]
    5576:	2900      	cmp	r1, #0
    5578:	bf08      	it	eq
    557a:	f8df b3f0 	ldreq.w	fp, [pc, #1008]	; 596c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x408>
    557e:	d00b      	beq.n	5598 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    5580:	7065      	strb	r5, [r4, #1]
    5582:	2103      	movs	r1, #3
    5584:	7021      	strb	r1, [r4, #0]
    5586:	7127      	strb	r7, [r4, #4]
    5588:	7005      	strb	r5, [r0, #0]
    558a:	f000 b8ba 	b.w	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    558e:	f240 315d 	movw	r1, #861	; 0x35d
    5592:	2010      	movs	r0, #16
    5594:	f7fe fd12 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5598:	f8db 0000 	ldr.w	r0, [fp]
    559c:	46a8      	mov	r8, r5
    559e:	2800      	cmp	r0, #0
    55a0:	bf08      	it	eq
    55a2:	4646      	moveq	r6, r8
    55a4:	d022      	beq.n	55ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    55a6:	7a01      	ldrb	r1, [r0, #8]
    55a8:	f88d 1000 	strb.w	r1, [sp]
    55ac:	f89d 1000 	ldrb.w	r1, [sp]
    55b0:	2908      	cmp	r1, #8
    55b2:	d109      	bne.n	55c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>
    55b4:	6840      	ldr	r0, [r0, #4]
    55b6:	8800      	ldrh	r0, [r0, #0]
    55b8:	f7ff f8a0 	bl	46fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    55bc:	f008 f85c 	bl	d678 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    55c0:	2800      	cmp	r0, #0
    55c2:	bf08      	it	eq
    55c4:	462e      	moveq	r6, r5
    55c6:	d011      	beq.n	55ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    55c8:	f3ef 8010 	mrs	r0, PRIMASK
    55cc:	f8db 6000 	ldr.w	r6, [fp]
    55d0:	b672      	cpsid	i
    55d2:	6831      	ldr	r1, [r6, #0]
    55d4:	f8cb 1000 	str.w	r1, [fp]
    55d8:	b900      	cbnz	r0, 55dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    55da:	b662      	cpsie	i
    55dc:	7a30      	ldrb	r0, [r6, #8]
    55de:	f88d 0000 	strb.w	r0, [sp]
    55e2:	f89d 0000 	ldrb.w	r0, [sp]
    55e6:	2800      	cmp	r0, #0
    55e8:	bf08      	it	eq
    55ea:	46b8      	moveq	r8, r7
    55ec:	f1b8 0f00 	cmp.w	r8, #0
    55f0:	d1d2      	bne.n	5598 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    55f2:	b1de      	cbz	r6, 562c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc8>
    55f4:	7a30      	ldrb	r0, [r6, #8]
    55f6:	f88d 0000 	strb.w	r0, [sp]
    55fa:	f89d 8000 	ldrb.w	r8, [sp]
    55fe:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
    5602:	f080 8284 	bcs.w	5b0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5aa>
    5606:	e8df f008 	tbb	[pc, r8]
    560a:	fdfe      	.short	0xfdfe
    560c:	fdfc2480 	.word	0xfdfc2480
    5610:	fdfdfbfd 	.word	0xfdfdfbfd
    5614:	fefdfdfd 	.word	0xfefdfdfd
    5618:	fdfdfc24 	.word	0xfdfdfc24
    561c:	5454fc24 	.word	0x5454fc24
    5620:	24fdfd54 	.word	0x24fdfd54
    5624:	f9fafdfd 	.word	0xf9fafdfd
    5628:	f715f824 	.word	0xf715f824
    562c:	b007      	add	sp, #28
    562e:	2000      	movs	r0, #0
    5630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5634:	7065      	strb	r5, [r4, #1]
    5636:	2014      	movs	r0, #20
    5638:	7020      	strb	r0, [r4, #0]
    563a:	6065      	str	r5, [r4, #4]
    563c:	60a5      	str	r5, [r4, #8]
    563e:	60e5      	str	r5, [r4, #12]
    5640:	6125      	str	r5, [r4, #16]
    5642:	6165      	str	r5, [r4, #20]
    5644:	61a5      	str	r5, [r4, #24]
    5646:	61e5      	str	r5, [r4, #28]
    5648:	2002      	movs	r0, #2
    564a:	6225      	str	r5, [r4, #32]
    564c:	7120      	strb	r0, [r4, #4]
    564e:	7235      	strb	r5, [r6, #8]
    5650:	e057      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5652:	48c7      	ldr	r0, [pc, #796]	; (5970 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40c>)
    5654:	6803      	ldr	r3, [r0, #0]
    5656:	2b00      	cmp	r3, #0
    5658:	bf04      	itt	eq
    565a:	46a9      	moveq	r9, r5
    565c:	7235      	strbeq	r5, [r6, #8]
    565e:	d050      	beq.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5660:	6870      	ldr	r0, [r6, #4]
    5662:	4642      	mov	r2, r8
    5664:	4621      	mov	r1, r4
    5666:	4798      	blx	r3
    5668:	7820      	ldrb	r0, [r4, #0]
    566a:	6871      	ldr	r1, [r6, #4]
    566c:	2814      	cmp	r0, #20
    566e:	d002      	beq.n	5676 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5670:	2817      	cmp	r0, #23
    5672:	d003      	beq.n	567c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    5674:	e01b      	b.n	56ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    5676:	7920      	ldrb	r0, [r4, #4]
    5678:	b930      	cbnz	r0, 5688 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>
    567a:	e018      	b.n	56ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    567c:	7920      	ldrb	r0, [r4, #4]
    567e:	b1b0      	cbz	r0, 56ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    5680:	4608      	mov	r0, r1
    5682:	f008 ffe9 	bl	e658 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5686:	b990      	cbnz	r0, 56ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    5688:	88e4      	ldrh	r4, [r4, #6]
    568a:	2101      	movs	r1, #1
    568c:	4620      	mov	r0, r4
    568e:	f008 f9d6 	bl	da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5692:	b160      	cbz	r0, 56ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    5694:	8800      	ldrh	r0, [r0, #0]
    5696:	f7ff fa81 	bl	4b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    569a:	2101      	movs	r1, #1
    569c:	4620      	mov	r0, r4
    569e:	f7fe fee7 	bl	4470 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    56a2:	b120      	cbz	r0, 56ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    56a4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    56a8:	2010      	movs	r0, #16
    56aa:	f7fe fc87 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56ae:	7235      	strb	r5, [r6, #8]
    56b0:	e027      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    56b2:	48b0      	ldr	r0, [pc, #704]	; (5974 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x410>)
    56b4:	6803      	ldr	r3, [r0, #0]
    56b6:	2b00      	cmp	r3, #0
    56b8:	bf04      	itt	eq
    56ba:	46a9      	moveq	r9, r5
    56bc:	7235      	strbeq	r5, [r6, #8]
    56be:	d020      	beq.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    56c0:	f1b8 0f15 	cmp.w	r8, #21
    56c4:	d017      	beq.n	56f6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    56c6:	6877      	ldr	r7, [r6, #4]
    56c8:	4642      	mov	r2, r8
    56ca:	4621      	mov	r1, r4
    56cc:	4638      	mov	r0, r7
    56ce:	4798      	blx	r3
    56d0:	7820      	ldrb	r0, [r4, #0]
    56d2:	281b      	cmp	r0, #27
    56d4:	d003      	beq.n	56de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17a>
    56d6:	2819      	cmp	r0, #25
    56d8:	d10b      	bne.n	56f2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    56da:	7920      	ldrb	r0, [r4, #4]
    56dc:	b148      	cbz	r0, 56f2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    56de:	8938      	ldrh	r0, [r7, #8]
    56e0:	2104      	movs	r1, #4
    56e2:	f7fe fec5 	bl	4470 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    56e6:	b128      	cbz	r0, 56f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x190>
    56e8:	f44f 716b 	mov.w	r1, #940	; 0x3ac
    56ec:	2010      	movs	r0, #16
    56ee:	f7fe fc65 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56f2:	7235      	strb	r5, [r6, #8]
    56f4:	e005      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    56f6:	4ba0      	ldr	r3, [pc, #640]	; (5978 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x414>)
    56f8:	6870      	ldr	r0, [r6, #4]
    56fa:	2200      	movs	r2, #0
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	4621      	mov	r1, r4
    5700:	4798      	blx	r3
    5702:	b007      	add	sp, #28
    5704:	2001      	movs	r0, #1
    5706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    570a:	489c      	ldr	r0, [pc, #624]	; (597c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x418>)
    570c:	6803      	ldr	r3, [r0, #0]
    570e:	2b00      	cmp	r3, #0
    5710:	bf04      	itt	eq
    5712:	46a9      	moveq	r9, r5
    5714:	7235      	strbeq	r5, [r6, #8]
    5716:	d0f4      	beq.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5718:	2202      	movs	r2, #2
    571a:	4621      	mov	r1, r4
    571c:	2000      	movs	r0, #0
    571e:	4798      	blx	r3
    5720:	f005 f848 	bl	a7b4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    5724:	2800      	cmp	r0, #0
    5726:	d0ec      	beq.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5728:	7820      	ldrb	r0, [r4, #0]
    572a:	2805      	cmp	r0, #5
    572c:	d003      	beq.n	5736 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d2>
    572e:	21cf      	movs	r1, #207	; 0xcf
    5730:	2010      	movs	r0, #16
    5732:	f7fe fc43 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5736:	7ba0      	ldrb	r0, [r4, #14]
    5738:	f010 0f10 	tst.w	r0, #16
    573c:	d022      	beq.n	5784 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x220>
    573e:	221c      	movs	r2, #28
    5740:	1d21      	adds	r1, r4, #4
    5742:	488f      	ldr	r0, [pc, #572]	; (5980 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x41c>)
    5744:	f007 f9f3 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5748:	7b22      	ldrb	r2, [r4, #12]
    574a:	f104 0120 	add.w	r1, r4, #32
    574e:	488d      	ldr	r0, [pc, #564]	; (5984 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
    5750:	f007 f9ed 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5754:	498a      	ldr	r1, [pc, #552]	; (5980 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x41c>)
    5756:	7a88      	ldrb	r0, [r1, #10]
    5758:	f010 0f04 	tst.w	r0, #4
    575c:	d002      	beq.n	5764 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x200>
    575e:	7cc8      	ldrb	r0, [r1, #19]
    5760:	28fe      	cmp	r0, #254	; 0xfe
    5762:	d015      	beq.n	5790 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x22c>
    5764:	f04f 0204 	mov.w	r2, #4
    5768:	7022      	strb	r2, [r4, #0]
    576a:	6808      	ldr	r0, [r1, #0]
    576c:	6060      	str	r0, [r4, #4]
    576e:	6848      	ldr	r0, [r1, #4]
    5770:	60a0      	str	r0, [r4, #8]
    5772:	8908      	ldrh	r0, [r1, #8]
    5774:	81a0      	strh	r0, [r4, #12]
    5776:	7a88      	ldrb	r0, [r1, #10]
    5778:	f010 0f08 	tst.w	r0, #8
    577c:	bf18      	it	ne
    577e:	73a2      	strbne	r2, [r4, #14]
    5780:	d133      	bne.n	57ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    5782:	e01d      	b.n	57c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x25c>
    5784:	f04f 01d0 	mov.w	r1, #208	; 0xd0
    5788:	f04f 0010 	mov.w	r0, #16
    578c:	f7fe fc16 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5790:	2013      	movs	r0, #19
    5792:	7020      	strb	r0, [r4, #0]
    5794:	7808      	ldrb	r0, [r1, #0]
    5796:	7120      	strb	r0, [r4, #4]
    5798:	7167      	strb	r7, [r4, #5]
    579a:	7848      	ldrb	r0, [r1, #1]
    579c:	71a0      	strb	r0, [r4, #6]
    579e:	f8d1 0002 	ldr.w	r0, [r1, #2]
    57a2:	f8c4 0007 	str.w	r0, [r4, #7]
    57a6:	88c8      	ldrh	r0, [r1, #6]
    57a8:	f8a4 000b 	strh.w	r0, [r4, #11]
    57ac:	20fe      	movs	r0, #254	; 0xfe
    57ae:	7360      	strb	r0, [r4, #13]
    57b0:	6948      	ldr	r0, [r1, #20]
    57b2:	f8c4 000e 	str.w	r0, [r4, #14]
    57b6:	8b08      	ldrh	r0, [r1, #24]
    57b8:	8260      	strh	r0, [r4, #18]
    57ba:	7a48      	ldrb	r0, [r1, #9]
    57bc:	7520      	strb	r0, [r4, #20]
    57be:	e7a0      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    57c0:	f010 0f01 	tst.w	r0, #1
    57c4:	bf1c      	itt	ne
    57c6:	f010 0f02 	tstne.w	r0, #2
    57ca:	73a5      	strbne	r5, [r4, #14]
    57cc:	d10d      	bne.n	57ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    57ce:	f010 0f04 	tst.w	r0, #4
    57d2:	bf18      	it	ne
    57d4:	73a7      	strbne	r7, [r4, #14]
    57d6:	d108      	bne.n	57ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    57d8:	f010 0f01 	tst.w	r0, #1
    57dc:	d116      	bne.n	580c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a8>
    57de:	f010 0f02 	tst.w	r0, #2
    57e2:	bf18      	it	ne
    57e4:	2002      	movne	r0, #2
    57e6:	d011      	beq.n	580c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a8>
    57e8:	73a0      	strb	r0, [r4, #14]
    57ea:	7a0a      	ldrb	r2, [r1, #8]
    57ec:	2a1f      	cmp	r2, #31
    57ee:	d917      	bls.n	5820 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2bc>
    57f0:	f44f 718a 	mov.w	r1, #276	; 0x114
    57f4:	2010      	movs	r0, #16
    57f6:	e007      	b.n	5808 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a4>
    57f8:	e151      	b.n	5a9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x53a>
    57fa:	e183      	b.n	5b04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5a0>
    57fc:	e170      	b.n	5ae0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x57c>
    57fe:	e178      	b.n	5af2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58e>
    5800:	e158      	b.n	5ab4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x550>
    5802:	e013      	b.n	582c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c8>
    5804:	e03a      	b.n	587c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x318>
    5806:	e182      	b.n	5b0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5aa>
    5808:	f7fe fbd8 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    580c:	f010 0f03 	tst.w	r0, #3
    5810:	bf08      	it	eq
    5812:	2003      	moveq	r0, #3
    5814:	d0e8      	beq.n	57e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x284>
    5816:	f240 1111 	movw	r1, #273	; 0x111
    581a:	2010      	movs	r0, #16
    581c:	f7fe fbce 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5820:	4958      	ldr	r1, [pc, #352]	; (5984 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
    5822:	f104 000f 	add.w	r0, r4, #15
    5826:	f007 f982 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    582a:	e76a      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    582c:	4853      	ldr	r0, [pc, #332]	; (597c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x418>)
    582e:	6803      	ldr	r3, [r0, #0]
    5830:	2b00      	cmp	r3, #0
    5832:	bf04      	itt	eq
    5834:	46a9      	moveq	r9, r5
    5836:	7235      	strbeq	r5, [r6, #8]
    5838:	f43f af63 	beq.w	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    583c:	4642      	mov	r2, r8
    583e:	4621      	mov	r1, r4
    5840:	2000      	movs	r0, #0
    5842:	4798      	blx	r3
    5844:	7820      	ldrb	r0, [r4, #0]
    5846:	2818      	cmp	r0, #24
    5848:	bf04      	itt	eq
    584a:	7920      	ldrbeq	r0, [r4, #4]
    584c:	2801      	cmpeq	r0, #1
    584e:	d113      	bne.n	5878 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    5850:	88e0      	ldrh	r0, [r4, #6]
    5852:	f04f 0100 	mov.w	r1, #0
    5856:	f008 f8f2 	bl	da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    585a:	0004      	movs	r4, r0
    585c:	d00c      	beq.n	5878 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    585e:	8820      	ldrh	r0, [r4, #0]
    5860:	f7ff f99c 	bl	4b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5864:	8820      	ldrh	r0, [r4, #0]
    5866:	2100      	movs	r1, #0
    5868:	f7fe fe02 	bl	4470 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    586c:	b120      	cbz	r0, 5878 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    586e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    5872:	2010      	movs	r0, #16
    5874:	f7fe fba2 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5878:	7235      	strb	r5, [r6, #8]
    587a:	e742      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    587c:	4842      	ldr	r0, [pc, #264]	; (5988 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x424>)
    587e:	6800      	ldr	r0, [r0, #0]
    5880:	2800      	cmp	r0, #0
    5882:	f000 8149 	beq.w	5b18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b4>
    5886:	6870      	ldr	r0, [r6, #4]
    5888:	b178      	cbz	r0, 58aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x346>
    588a:	f100 0990 	add.w	r9, r0, #144	; 0x90
    588e:	f500 71b9 	add.w	r1, r0, #370	; 0x172
    5892:	f8b0 a000 	ldrh.w	sl, [r0]
    5896:	4640      	mov	r0, r8
    5898:	f1b8 0f10 	cmp.w	r8, #16
    589c:	d063      	beq.n	5966 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x402>
    589e:	dc09      	bgt.n	58b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x350>
    58a0:	2801      	cmp	r0, #1
    58a2:	d00c      	beq.n	58be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x35a>
    58a4:	280b      	cmp	r0, #11
    58a6:	d021      	beq.n	58ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x388>
    58a8:	e0c0      	b.n	5a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    58aa:	f240 2182 	movw	r1, #642	; 0x282
    58ae:	2010      	movs	r0, #16
    58b0:	f7fe fb84 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58b4:	281a      	cmp	r0, #26
    58b6:	d078      	beq.n	59aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x446>
    58b8:	281b      	cmp	r0, #27
    58ba:	d031      	beq.n	5920 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3bc>
    58bc:	e0b6      	b.n	5a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    58be:	f1b9 0f00 	cmp.w	r9, #0
    58c2:	d00d      	beq.n	58e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x37c>
    58c4:	7065      	strb	r5, [r4, #1]
    58c6:	7027      	strb	r7, [r4, #0]
    58c8:	7125      	strb	r5, [r4, #4]
    58ca:	f8a4 a005 	strh.w	sl, [r4, #5]
    58ce:	f899 005d 	ldrb.w	r0, [r9, #93]	; 0x5d
    58d2:	71e0      	strb	r0, [r4, #7]
    58d4:	f8b9 005e 	ldrh.w	r0, [r9, #94]	; 0x5e
    58d8:	8120      	strh	r0, [r4, #8]
    58da:	f8b9 0060 	ldrh.w	r0, [r9, #96]	; 0x60
    58de:	8160      	strh	r0, [r4, #10]
    58e0:	f1b8 0f0b 	cmp.w	r8, #11
    58e4:	bf1c      	itt	ne
    58e6:	46a9      	movne	r9, r5
    58e8:	7235      	strbne	r5, [r6, #8]
    58ea:	e70a      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    58ec:	4650      	mov	r0, sl
    58ee:	f7fe ff1b 	bl	4728 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    58f2:	b180      	cbz	r0, 5916 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3b2>
    58f4:	7065      	strb	r5, [r4, #1]
    58f6:	210f      	movs	r1, #15
    58f8:	7021      	strb	r1, [r4, #0]
    58fa:	f8a4 a006 	strh.w	sl, [r4, #6]
    58fe:	8127      	strh	r7, [r4, #8]
    5900:	2200      	movs	r2, #0
    5902:	7127      	strb	r7, [r4, #4]
    5904:	4611      	mov	r1, r2
    5906:	f007 ffbe 	bl	d886 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    590a:	f1b8 0f0b 	cmp.w	r8, #11
    590e:	bf1c      	itt	ne
    5910:	46a9      	movne	r9, r5
    5912:	7235      	strbne	r5, [r6, #8]
    5914:	e6f5      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5916:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    591a:	2010      	movs	r0, #16
    591c:	f7fe fb4e 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5920:	f7ff fdee 	bl	5500 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    5924:	b390      	cbz	r0, 598c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x428>
    5926:	7235      	strb	r5, [r6, #8]
    5928:	4650      	mov	r0, sl
    592a:	f8ad a000 	strh.w	sl, [sp]
    592e:	a902      	add	r1, sp, #8
    5930:	f008 fa6a 	bl	de08 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5934:	b120      	cbz	r0, 5940 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3dc>
    5936:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    593a:	2010      	movs	r0, #16
    593c:	f7fe fb3e 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5940:	9803      	ldr	r0, [sp, #12]
    5942:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    5946:	f88d 1002 	strb.w	r1, [sp, #2]
    594a:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    594e:	f88d 1003 	strb.w	r1, [sp, #3]
    5952:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    5956:	f8ad 0004 	strh.w	r0, [sp, #4]
    595a:	2102      	movs	r1, #2
    595c:	4668      	mov	r0, sp
    595e:	f009 fbce 	bl	f0fe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    5962:	b1d0      	cbz	r0, 599a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x436>
    5964:	e014      	b.n	5990 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x42c>
    5966:	e051      	b.n	5a0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4a8>
    5968:	200016f8 	.word	0x200016f8
    596c:	200000ec 	.word	0x200000ec
    5970:	200000f4 	.word	0x200000f4
    5974:	20000104 	.word	0x20000104
    5978:	20000100 	.word	0x20000100
    597c:	20000108 	.word	0x20000108
    5980:	200016bd 	.word	0x200016bd
    5984:	200016d9 	.word	0x200016d9
    5988:	200000fc 	.word	0x200000fc
    598c:	e04d      	b.n	5a2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c6>
    598e:	e00c      	b.n	59aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x446>
    5990:	f44f 71c2 	mov.w	r1, #388	; 0x184
    5994:	2010      	movs	r0, #16
    5996:	f7fe fb11 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    599a:	f1b8 0f0b 	cmp.w	r8, #11
    599e:	bf1c      	itt	ne
    59a0:	46a9      	movne	r9, r5
    59a2:	7235      	strbne	r5, [r6, #8]
    59a4:	f47f adf8 	bne.w	5598 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    59a8:	e6ab      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    59aa:	f7ff fd9f 	bl	54ec <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    59ae:	b3e0      	cbz	r0, 5a2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c6>
    59b0:	7235      	strb	r5, [r6, #8]
    59b2:	a903      	add	r1, sp, #12
    59b4:	4650      	mov	r0, sl
    59b6:	f009 fb00 	bl	efba <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    59ba:	b120      	cbz	r0, 59c6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x462>
    59bc:	f240 118b 	movw	r1, #395	; 0x18b
    59c0:	2010      	movs	r0, #16
    59c2:	f7fe fafb 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59c6:	f8ad a000 	strh.w	sl, [sp]
    59ca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    59ce:	f8ad 0002 	strh.w	r0, [sp, #2]
    59d2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    59d6:	f8ad 0004 	strh.w	r0, [sp, #4]
    59da:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    59de:	f8ad 0006 	strh.w	r0, [sp, #6]
    59e2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    59e6:	f8ad 0008 	strh.w	r0, [sp, #8]
    59ea:	4668      	mov	r0, sp
    59ec:	f009 fb14 	bl	f018 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    59f0:	b120      	cbz	r0, 59fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x498>
    59f2:	f44f 71ca 	mov.w	r1, #404	; 0x194
    59f6:	2010      	movs	r0, #16
    59f8:	f7fe fae0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59fc:	f1b8 0f0b 	cmp.w	r8, #11
    5a00:	bf1c      	itt	ne
    5a02:	46a9      	movne	r9, r5
    5a04:	7235      	strbne	r5, [r6, #8]
    5a06:	f47f adc7 	bne.w	5598 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    5a0a:	e67a      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5a0c:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    5a10:	f000 0001 	and.w	r0, r0, #1
    5a14:	f7ff fd5e 	bl	54d4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    5a18:	b1c0      	cbz	r0, 5a4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4e8>
    5a1a:	f1b8 0f0b 	cmp.w	r8, #11
    5a1e:	bf1c      	itt	ne
    5a20:	46a9      	movne	r9, r5
    5a22:	7235      	strbne	r5, [r6, #8]
    5a24:	f47f adb8 	bne.w	5598 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    5a28:	e66b      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5a2a:	e7ff      	b.n	5a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    5a2c:	f1b8 0f08 	cmp.w	r8, #8
    5a30:	d011      	beq.n	5a56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4f2>
    5a32:	483a      	ldr	r0, [pc, #232]	; (5b1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    5a34:	6803      	ldr	r3, [r0, #0]
    5a36:	b11b      	cbz	r3, 5a40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4dc>
    5a38:	6870      	ldr	r0, [r6, #4]
    5a3a:	4642      	mov	r2, r8
    5a3c:	4621      	mov	r1, r4
    5a3e:	4798      	blx	r3
    5a40:	f1b8 0f0b 	cmp.w	r8, #11
    5a44:	bf1c      	itt	ne
    5a46:	46a9      	movne	r9, r5
    5a48:	7235      	strbne	r5, [r6, #8]
    5a4a:	e65a      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5a4c:	4833      	ldr	r0, [pc, #204]	; (5b1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    5a4e:	6803      	ldr	r3, [r0, #0]
    5a50:	2b00      	cmp	r3, #0
    5a52:	d1f1      	bne.n	5a38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4d4>
    5a54:	e7f4      	b.n	5a40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4dc>
    5a56:	4650      	mov	r0, sl
    5a58:	f7fe fe50 	bl	46fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5a5c:	f007 fe0c 	bl	d678 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5a60:	b1c0      	cbz	r0, 5a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x530>
    5a62:	4650      	mov	r0, sl
    5a64:	f7ff f89a 	bl	4b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5a68:	2100      	movs	r1, #0
    5a6a:	4650      	mov	r0, sl
    5a6c:	f7fe fd00 	bl	4470 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5a70:	2101      	movs	r1, #1
    5a72:	4650      	mov	r0, sl
    5a74:	f7fe fcfc 	bl	4470 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5a78:	f1b9 0f00 	cmp.w	r9, #0
    5a7c:	d008      	beq.n	5a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x52c>
    5a7e:	7065      	strb	r5, [r4, #1]
    5a80:	200c      	movs	r0, #12
    5a82:	7020      	strb	r0, [r4, #0]
    5a84:	7125      	strb	r5, [r4, #4]
    5a86:	f8a4 a005 	strh.w	sl, [r4, #5]
    5a8a:	f899 002e 	ldrb.w	r0, [r9, #46]	; 0x2e
    5a8e:	71e0      	strb	r0, [r4, #7]
    5a90:	7235      	strb	r5, [r6, #8]
    5a92:	e636      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5a94:	f240 21c3 	movw	r1, #707	; 0x2c3
    5a98:	2010      	movs	r0, #16
    5a9a:	f7fe fa8f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a9e:	7065      	strb	r5, [r4, #1]
    5aa0:	201d      	movs	r0, #29
    5aa2:	7020      	strb	r0, [r4, #0]
    5aa4:	f8d6 0009 	ldr.w	r0, [r6, #9]
    5aa8:	6060      	str	r0, [r4, #4]
    5aaa:	f8d6 000d 	ldr.w	r0, [r6, #13]
    5aae:	60a0      	str	r0, [r4, #8]
    5ab0:	7235      	strb	r5, [r6, #8]
    5ab2:	e626      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5ab4:	4819      	ldr	r0, [pc, #100]	; (5b1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    5ab6:	6800      	ldr	r0, [r0, #0]
    5ab8:	b180      	cbz	r0, 5adc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x578>
    5aba:	6870      	ldr	r0, [r6, #4]
    5abc:	7065      	strb	r5, [r4, #1]
    5abe:	210a      	movs	r1, #10
    5ac0:	7021      	strb	r1, [r4, #0]
    5ac2:	8801      	ldrh	r1, [r0, #0]
    5ac4:	80a1      	strh	r1, [r4, #4]
    5ac6:	f8d0 1338 	ldr.w	r1, [r0, #824]	; 0x338
    5aca:	f8d0 233c 	ldr.w	r2, [r0, #828]	; 0x33c
    5ace:	f8c4 1006 	str.w	r1, [r4, #6]
    5ad2:	f8c4 200a 	str.w	r2, [r4, #10]
    5ad6:	f8b0 0340 	ldrh.w	r0, [r0, #832]	; 0x340
    5ada:	81e0      	strh	r0, [r4, #14]
    5adc:	7235      	strb	r5, [r6, #8]
    5ade:	e610      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5ae0:	480f      	ldr	r0, [pc, #60]	; (5b20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5bc>)
    5ae2:	6803      	ldr	r3, [r0, #0]
    5ae4:	b11b      	cbz	r3, 5aee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58a>
    5ae6:	2200      	movs	r2, #0
    5ae8:	4621      	mov	r1, r4
    5aea:	4610      	mov	r0, r2
    5aec:	4798      	blx	r3
    5aee:	7235      	strb	r5, [r6, #8]
    5af0:	e607      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5af2:	480c      	ldr	r0, [pc, #48]	; (5b24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5c0>)
    5af4:	6803      	ldr	r3, [r0, #0]
    5af6:	b11b      	cbz	r3, 5b00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x59c>
    5af8:	2200      	movs	r2, #0
    5afa:	4621      	mov	r1, r4
    5afc:	4610      	mov	r0, r2
    5afe:	4798      	blx	r3
    5b00:	7235      	strb	r5, [r6, #8]
    5b02:	e5fe      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5b04:	7065      	strb	r5, [r4, #1]
    5b06:	2027      	movs	r0, #39	; 0x27
    5b08:	7020      	strb	r0, [r4, #0]
    5b0a:	7235      	strb	r5, [r6, #8]
    5b0c:	e5f9      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5b0e:	f240 412d 	movw	r1, #1069	; 0x42d
    5b12:	2010      	movs	r0, #16
    5b14:	f7fe fa52 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b18:	7235      	strb	r5, [r6, #8]
    5b1a:	e5f2      	b.n	5702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5b1c:	200000fc 	.word	0x200000fc
    5b20:	2000010c 	.word	0x2000010c
    5b24:	200000f8 	.word	0x200000f8

00005b28 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    5b28:	4909      	ldr	r1, [pc, #36]	; (5b50 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x28>)
    5b2a:	7008      	strb	r0, [r1, #0]
    5b2c:	2000      	movs	r0, #0
    5b2e:	6048      	str	r0, [r1, #4]
    5b30:	6088      	str	r0, [r1, #8]
    5b32:	4908      	ldr	r1, [pc, #32]	; (5b54 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2c>)
    5b34:	f8c1 003b 	str.w	r0, [r1, #59]	; 0x3b
    5b38:	f8c1 003f 	str.w	r0, [r1, #63]	; 0x3f
    5b3c:	f8c1 0043 	str.w	r0, [r1, #67]	; 0x43
    5b40:	f8c1 0047 	str.w	r0, [r1, #71]	; 0x47
    5b44:	f8a1 004b 	strh.w	r0, [r1, #75]	; 0x4b
    5b48:	f881 004d 	strb.w	r0, [r1, #77]	; 0x4d
    5b4c:	4770      	bx	lr
    5b4e:	0000      	.short	0x0000
    5b50:	200000e8 	.word	0x200000e8
    5b54:	200016bd 	.word	0x200016bd

00005b58 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    5b58:	4908      	ldr	r1, [pc, #32]	; (5b7c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x24>)
    5b5a:	2000      	movs	r0, #0
    5b5c:	6048      	str	r0, [r1, #4]
    5b5e:	6088      	str	r0, [r1, #8]
    5b60:	4907      	ldr	r1, [pc, #28]	; (5b80 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x28>)
    5b62:	f8c1 003b 	str.w	r0, [r1, #59]	; 0x3b
    5b66:	f8c1 003f 	str.w	r0, [r1, #63]	; 0x3f
    5b6a:	f8c1 0043 	str.w	r0, [r1, #67]	; 0x43
    5b6e:	f8c1 0047 	str.w	r0, [r1, #71]	; 0x47
    5b72:	f8a1 004b 	strh.w	r0, [r1, #75]	; 0x4b
    5b76:	f881 004d 	strb.w	r0, [r1, #77]	; 0x4d
    5b7a:	4770      	bx	lr
    5b7c:	200000e8 	.word	0x200000e8
    5b80:	200016bd 	.word	0x200016bd

00005b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    5b84:	4801      	ldr	r0, [pc, #4]	; (5b8c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    5b86:	7800      	ldrb	r0, [r0, #0]
    5b88:	f7fd bef0 	b.w	396c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5b8c:	200000e8 	.word	0x200000e8

00005b90 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    5b90:	4902      	ldr	r1, [pc, #8]	; (5b9c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    5b92:	4801      	ldr	r0, [pc, #4]	; (5b98 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    5b94:	6008      	str	r0, [r1, #0]
    5b96:	4770      	bx	lr
    5b98:	000061ed 	.word	0x000061ed
    5b9c:	20000108 	.word	0x20000108

00005ba0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    5ba0:	b510      	push	{r4, lr}
    5ba2:	4c0c      	ldr	r4, [pc, #48]	; (5bd4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x34>)
    5ba4:	2108      	movs	r1, #8
    5ba6:	4620      	mov	r0, r4
    5ba8:	f7fe fa96 	bl	40d8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    5bac:	6820      	ldr	r0, [r4, #0]
    5bae:	2800      	cmp	r0, #0
    5bb0:	bf04      	itt	eq
    5bb2:	6860      	ldreq	r0, [r4, #4]
    5bb4:	2800      	cmpeq	r0, #0
    5bb6:	d0f5      	beq.n	5ba4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    5bb8:	4c07      	ldr	r4, [pc, #28]	; (5bd8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x38>)
    5bba:	bf00      	nop
    5bbc:	f04f 0108 	mov.w	r1, #8
    5bc0:	4620      	mov	r0, r4
    5bc2:	f7fe fa89 	bl	40d8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    5bc6:	6820      	ldr	r0, [r4, #0]
    5bc8:	2800      	cmp	r0, #0
    5bca:	bf04      	itt	eq
    5bcc:	6860      	ldreq	r0, [r4, #4]
    5bce:	2800      	cmpeq	r0, #0
    5bd0:	d0f4      	beq.n	5bbc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1c>
    5bd2:	bd10      	pop	{r4, pc}
    5bd4:	20000110 	.word	0x20000110
    5bd8:	20000118 	.word	0x20000118

00005bdc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    5bdc:	4901      	ldr	r1, [pc, #4]	; (5be4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    5bde:	7008      	strb	r0, [r1, #0]
    5be0:	4770      	bx	lr
    5be2:	0000      	.short	0x0000
    5be4:	20000120 	.word	0x20000120

00005be8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    5be8:	4908      	ldr	r1, [pc, #32]	; (5c0c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    5bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5bee:	fbb1 f1f2 	udiv	r1, r1, r2
    5bf2:	b510      	push	{r4, lr}
    5bf4:	f201 11d7 	addw	r1, r1, #471	; 0x1d7
    5bf8:	f008 fcc2 	bl	e580 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    5bfc:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
    5c00:	bf28      	it	cs
    5c02:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
    5c06:	b280      	uxth	r0, r0
    5c08:	bd10      	pop	{r4, pc}
    5c0a:	0000      	.short	0x0000
    5c0c:	0001527d 	.word	0x0001527d

00005c10 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    5c10:	4806      	ldr	r0, [pc, #24]	; (5c2c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    5c12:	4905      	ldr	r1, [pc, #20]	; (5c28 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    5c14:	6581      	str	r1, [r0, #88]	; 0x58
    5c16:	4906      	ldr	r1, [pc, #24]	; (5c30 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    5c18:	6601      	str	r1, [r0, #96]	; 0x60
    5c1a:	4807      	ldr	r0, [pc, #28]	; (5c38 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    5c1c:	4905      	ldr	r1, [pc, #20]	; (5c34 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    5c1e:	6581      	str	r1, [r0, #88]	; 0x58
    5c20:	4906      	ldr	r1, [pc, #24]	; (5c3c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    5c22:	65c1      	str	r1, [r0, #92]	; 0x5c
    5c24:	4770      	bx	lr
    5c26:	0000      	.short	0x0000
    5c28:	00005cf5 	.word	0x00005cf5
    5c2c:	20000158 	.word	0x20000158
    5c30:	00005ded 	.word	0x00005ded
    5c34:	00006039 	.word	0x00006039
    5c38:	200001f0 	.word	0x200001f0
    5c3c:	00006069 	.word	0x00006069
    5c40:	b510      	push	{r4, lr}
    5c42:	4c1b      	ldr	r4, [pc, #108]	; (5cb0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0xa0>)
    5c44:	6861      	ldr	r1, [r4, #4]
    5c46:	880a      	ldrh	r2, [r1, #0]
    5c48:	f8a1 21ce 	strh.w	r2, [r1, #462]	; 0x1ce
    5c4c:	f881 01cc 	strb.w	r0, [r1, #460]	; 0x1cc
    5c50:	f891 0072 	ldrb.w	r0, [r1, #114]	; 0x72
    5c54:	2801      	cmp	r0, #1
    5c56:	bf18      	it	ne
    5c58:	2802      	cmpne	r0, #2
    5c5a:	d00b      	beq.n	5c74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x64>
    5c5c:	2804      	cmp	r0, #4
    5c5e:	bf14      	ite	ne
    5c60:	2808      	cmpne	r0, #8
    5c62:	2003      	moveq	r0, #3
    5c64:	d006      	beq.n	5c74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x64>
    5c66:	bf00      	nop
    5c68:	f240 21a9 	movw	r1, #681	; 0x2a9
    5c6c:	f04f 0006 	mov.w	r0, #6
    5c70:	f7fe f9a4 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c74:	f881 01d0 	strb.w	r0, [r1, #464]	; 0x1d0
    5c78:	f891 0073 	ldrb.w	r0, [r1, #115]	; 0x73
    5c7c:	2801      	cmp	r0, #1
    5c7e:	bf18      	it	ne
    5c80:	2802      	cmpne	r0, #2
    5c82:	d004      	beq.n	5c8e <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x7e>
    5c84:	2804      	cmp	r0, #4
    5c86:	bf14      	ite	ne
    5c88:	2808      	cmpne	r0, #8
    5c8a:	2003      	moveq	r0, #3
    5c8c:	d1ec      	bne.n	5c68 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x58>
    5c8e:	f881 01d1 	strb.w	r0, [r1, #465]	; 0x1d1
    5c92:	f501 70e1 	add.w	r0, r1, #450	; 0x1c2
    5c96:	f04f 0211 	mov.w	r2, #17
    5c9a:	f7ff fc3b 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5c9e:	6861      	ldr	r1, [r4, #4]
    5ca0:	2000      	movs	r0, #0
    5ca2:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    5ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5caa:	f7ff bf6b 	b.w	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5cae:	0000      	.short	0x0000
    5cb0:	20000150 	.word	0x20000150
    5cb4:	480d      	ldr	r0, [pc, #52]	; (5cec <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0xdc>)
    5cb6:	6840      	ldr	r0, [r0, #4]
    5cb8:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5cbc:	f011 0f08 	tst.w	r1, #8
    5cc0:	bf1c      	itt	ne
    5cc2:	2001      	movne	r0, #1
    5cc4:	4770      	bxne	lr
    5cc6:	f041 0108 	orr.w	r1, r1, #8
    5cca:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
    5cce:	4908      	ldr	r1, [pc, #32]	; (5cf0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0xe0>)
    5cd0:	68c9      	ldr	r1, [r1, #12]
    5cd2:	78c9      	ldrb	r1, [r1, #3]
    5cd4:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5cd8:	2100      	movs	r1, #0
    5cda:	f8a0 10de 	strh.w	r1, [r0, #222]	; 0xde
    5cde:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    5ce2:	1c49      	adds	r1, r1, #1
    5ce4:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    5ce8:	2000      	movs	r0, #0
    5cea:	4770      	bx	lr
    5cec:	20000150 	.word	0x20000150
    5cf0:	20000138 	.word	0x20000138
    5cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cf6:	4c3b      	ldr	r4, [pc, #236]	; (5de4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1d4>)
    5cf8:	2301      	movs	r3, #1
    5cfa:	210b      	movs	r1, #11
    5cfc:	6860      	ldr	r0, [r4, #4]
    5cfe:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d02:	3090      	adds	r0, #144	; 0x90
    5d04:	f008 f8b5 	bl	de72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d08:	2800      	cmp	r0, #0
    5d0a:	d133      	bne.n	5d74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x164>
    5d0c:	6860      	ldr	r0, [r4, #4]
    5d0e:	2301      	movs	r3, #1
    5d10:	2100      	movs	r1, #0
    5d12:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d16:	3090      	adds	r0, #144	; 0x90
    5d18:	f008 f8ab 	bl	de72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d1c:	2800      	cmp	r0, #0
    5d1e:	bf04      	itt	eq
    5d20:	2001      	moveq	r0, #1
    5d22:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    5d24:	6860      	ldr	r0, [r4, #4]
    5d26:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5d2a:	2825      	cmp	r0, #37	; 0x25
    5d2c:	d022      	beq.n	5d74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x164>
    5d2e:	4d2e      	ldr	r5, [pc, #184]	; (5de8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1d8>)
    5d30:	68e8      	ldr	r0, [r5, #12]
    5d32:	f008 fa99 	bl	e268 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    5d36:	b1f8      	cbz	r0, 5d78 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x168>
    5d38:	6861      	ldr	r1, [r4, #4]
    5d3a:	2302      	movs	r3, #2
    5d3c:	f891 00f2 	ldrb.w	r0, [r1, #242]	; 0xf2
    5d40:	f040 0004 	orr.w	r0, r0, #4
    5d44:	f881 00f2 	strb.w	r0, [r1, #242]	; 0xf2
    5d48:	68e8      	ldr	r0, [r5, #12]
    5d4a:	7942      	ldrb	r2, [r0, #5]
    5d4c:	f002 0207 	and.w	r2, r2, #7
    5d50:	f881 206b 	strb.w	r2, [r1, #107]	; 0x6b
    5d54:	7900      	ldrb	r0, [r0, #4]
    5d56:	f000 0007 	and.w	r0, r0, #7
    5d5a:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    5d5e:	f891 c145 	ldrb.w	ip, [r1, #325]	; 0x145
    5d62:	f88d c000 	strb.w	ip, [sp]
    5d66:	f89d c000 	ldrb.w	ip, [sp]
    5d6a:	2500      	movs	r5, #0
    5d6c:	f1bc 0f00 	cmp.w	ip, #0
    5d70:	d006      	beq.n	5d80 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x170>
    5d72:	e029      	b.n	5dc8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1b8>
    5d74:	2020      	movs	r0, #32
    5d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5d7c:	f7ff bf9a 	b.w	5cb4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0xa4>
    5d80:	f891 c144 	ldrb.w	ip, [r1, #324]	; 0x144
    5d84:	f1bc 0f01 	cmp.w	ip, #1
    5d88:	d01e      	beq.n	5dc8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1b8>
    5d8a:	f891 6073 	ldrb.w	r6, [r1, #115]	; 0x73
    5d8e:	f101 0c72 	add.w	ip, r1, #114	; 0x72
    5d92:	4286      	cmp	r6, r0
    5d94:	bf02      	ittt	eq
    5d96:	f89c 0000 	ldrbeq.w	r0, [ip]
    5d9a:	4290      	cmpeq	r0, r2
    5d9c:	f881 3144 	strbeq.w	r3, [r1, #324]	; 0x144
    5da0:	d012      	beq.n	5dc8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1b8>
    5da2:	f501 70df 	add.w	r0, r1, #446	; 0x1be
    5da6:	880a      	ldrh	r2, [r1, #0]
    5da8:	f820 2b02 	strh.w	r2, [r0], #2
    5dac:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    5db0:	f800 2b01 	strb.w	r2, [r0], #1
    5db4:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
    5db8:	f800 290d 	strb.w	r2, [r0], #-13
    5dbc:	f04f 021b 	mov.w	r2, #27
    5dc0:	f7ff fba8 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5dc4:	f7ff fede 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5dc8:	6860      	ldr	r0, [r4, #4]
    5dca:	2122      	movs	r1, #34	; 0x22
    5dcc:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5dd0:	f8a0 50de 	strh.w	r5, [r0, #222]	; 0xde
    5dd4:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    5dd8:	1c49      	adds	r1, r1, #1
    5dda:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    5dde:	2000      	movs	r0, #0
    5de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5de2:	0000      	.short	0x0000
    5de4:	20000150 	.word	0x20000150
    5de8:	20000138 	.word	0x20000138
    5dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5df0:	4c8f      	ldr	r4, [pc, #572]	; (6030 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x420>)
    5df2:	6860      	ldr	r0, [r4, #4]
    5df4:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5df8:	2921      	cmp	r1, #33	; 0x21
    5dfa:	bf0c      	ite	eq
    5dfc:	f04f 0901 	moveq.w	r9, #1
    5e00:	f04f 0900 	movne.w	r9, #0
    5e04:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5e08:	2923      	cmp	r1, #35	; 0x23
    5e0a:	bf08      	it	eq
    5e0c:	f100 059e 	addeq.w	r5, r0, #158	; 0x9e
    5e10:	d007      	beq.n	5e22 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x212>
    5e12:	f1b9 0f00 	cmp.w	r9, #0
    5e16:	bf12      	itee	ne
    5e18:	f100 059d 	addne.w	r5, r0, #157	; 0x9d
    5e1c:	2002      	moveq	r0, #2
    5e1e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e22:	f810 1ff2 	ldrb.w	r1, [r0, #242]!
    5e26:	4f83      	ldr	r7, [pc, #524]	; (6034 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x424>)
    5e28:	f041 0104 	orr.w	r1, r1, #4
    5e2c:	7001      	strb	r1, [r0, #0]
    5e2e:	f04f 0a01 	mov.w	sl, #1
    5e32:	68f8      	ldr	r0, [r7, #12]
    5e34:	f008 fa2c 	bl	e290 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    5e38:	f04f 0800 	mov.w	r8, #0
    5e3c:	2800      	cmp	r0, #0
    5e3e:	d054      	beq.n	5eea <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2da>
    5e40:	68fe      	ldr	r6, [r7, #12]
    5e42:	4630      	mov	r0, r6
    5e44:	f008 fa0a 	bl	e25c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    5e48:	4683      	mov	fp, r0
    5e4a:	4630      	mov	r0, r6
    5e4c:	f008 fa0a 	bl	e264 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    5e50:	4606      	mov	r6, r0
    5e52:	f008 f8aa 	bl	dfaa <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5e56:	b1f8      	cbz	r0, 5e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x288>
    5e58:	6862      	ldr	r2, [r4, #4]
    5e5a:	f892 1072 	ldrb.w	r1, [r2, #114]	; 0x72
    5e5e:	4281      	cmp	r1, r0
    5e60:	d01a      	beq.n	5e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x288>
    5e62:	f892 3144 	ldrb.w	r3, [r2, #324]	; 0x144
    5e66:	2b01      	cmp	r3, #1
    5e68:	d02a      	beq.n	5ec0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2b0>
    5e6a:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
    5e6e:	4233      	tst	r3, r6
    5e70:	d03b      	beq.n	5eea <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2da>
    5e72:	bf00      	nop
    5e74:	f1b9 0f00 	cmp.w	r9, #0
    5e78:	bf04      	itt	eq
    5e7a:	f892 206b 	ldrbeq.w	r2, [r2, #107]	; 0x6b
    5e7e:	4232      	tsteq	r2, r6
    5e80:	d10a      	bne.n	5e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x288>
    5e82:	b311      	cbz	r1, 5eca <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2ba>
    5e84:	2904      	cmp	r1, #4
    5e86:	bf18      	it	ne
    5e88:	2804      	cmpne	r0, #4
    5e8a:	d023      	beq.n	5ed4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c4>
    5e8c:	2908      	cmp	r1, #8
    5e8e:	bf18      	it	ne
    5e90:	2808      	cmpne	r0, #8
    5e92:	d022      	beq.n	5eda <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2ca>
    5e94:	4281      	cmp	r1, r0
    5e96:	d828      	bhi.n	5eea <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2da>
    5e98:	4658      	mov	r0, fp
    5e9a:	f008 f886 	bl	dfaa <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5e9e:	0001      	movs	r1, r0
    5ea0:	d042      	beq.n	5f28 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x318>
    5ea2:	6860      	ldr	r0, [r4, #4]
    5ea4:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
    5ea8:	428a      	cmp	r2, r1
    5eaa:	d03d      	beq.n	5f28 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x318>
    5eac:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5eb0:	2901      	cmp	r1, #1
    5eb2:	d015      	beq.n	5ee0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2d0>
    5eb4:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    5eb8:	ea10 0f0b 	tst.w	r0, fp
    5ebc:	d015      	beq.n	5eea <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2da>
    5ebe:	e033      	b.n	5f28 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x318>
    5ec0:	f892 3146 	ldrb.w	r3, [r2, #326]	; 0x146
    5ec4:	4233      	tst	r3, r6
    5ec6:	d1d5      	bne.n	5e74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x264>
    5ec8:	e00f      	b.n	5eea <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2da>
    5eca:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    5ece:	2006      	movs	r0, #6
    5ed0:	f7fe f874 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ed4:	4281      	cmp	r1, r0
    5ed6:	d308      	bcc.n	5eea <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2da>
    5ed8:	e7de      	b.n	5e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x288>
    5eda:	4281      	cmp	r1, r0
    5edc:	d305      	bcc.n	5eea <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2da>
    5ede:	e7db      	b.n	5e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x288>
    5ee0:	f890 0147 	ldrb.w	r0, [r0, #327]	; 0x147
    5ee4:	ea10 0f0b 	tst.w	r0, fp
    5ee8:	d11e      	bne.n	5f28 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x318>
    5eea:	6860      	ldr	r0, [r4, #4]
    5eec:	2600      	movs	r6, #0
    5eee:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5ef2:	2901      	cmp	r1, #1
    5ef4:	bf0a      	itet	eq
    5ef6:	201e      	moveq	r0, #30
    5ef8:	f880 8144 	strbne.w	r8, [r0, #324]	; 0x144
    5efc:	f7ff fea0 	bleq	5c40 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x30>
    5f00:	f1b9 0f00 	cmp.w	r9, #0
    5f04:	d03b      	beq.n	5f7e <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x36e>
    5f06:	68f8      	ldr	r0, [r7, #12]
    5f08:	6861      	ldr	r1, [r4, #4]
    5f0a:	78c0      	ldrb	r0, [r0, #3]
    5f0c:	f881 0129 	strb.w	r0, [r1, #297]	; 0x129
    5f10:	fa0a f000 	lsl.w	r0, sl, r0
    5f14:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
    5f18:	d027      	beq.n	5f6a <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x35a>
    5f1a:	200b      	movs	r0, #11
    5f1c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5f20:	f891 00dc 	ldrb.w	r0, [r1, #220]	; 0xdc
    5f24:	b330      	cbz	r0, 5f74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x364>
    5f26:	e038      	b.n	5f9a <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x38a>
    5f28:	466a      	mov	r2, sp
    5f2a:	6860      	ldr	r0, [r4, #4]
    5f2c:	68f9      	ldr	r1, [r7, #12]
    5f2e:	f7ff f9bf 	bl	52b0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    5f32:	b3a8      	cbz	r0, 5fa0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x390>
    5f34:	68f8      	ldr	r0, [r7, #12]
    5f36:	f008 f993 	bl	e260 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    5f3a:	6861      	ldr	r1, [r4, #4]
    5f3c:	f8a1 031c 	strh.w	r0, [r1, #796]	; 0x31c
    5f40:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    5f44:	1a80      	subs	r0, r0, r2
    5f46:	b200      	sxth	r0, r0
    5f48:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    5f4c:	4282      	cmp	r2, r0
    5f4e:	bfa8      	it	ge
    5f50:	2800      	cmpge	r0, #0
    5f52:	dd4c      	ble.n	5fee <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x3de>
    5f54:	f89d 0000 	ldrb.w	r0, [sp]
    5f58:	f881 031e 	strb.w	r0, [r1, #798]	; 0x31e
    5f5c:	f89d 0001 	ldrb.w	r0, [sp, #1]
    5f60:	f881 031f 	strb.w	r0, [r1, #799]	; 0x31f
    5f64:	2025      	movs	r0, #37	; 0x25
    5f66:	7028      	strb	r0, [r5, #0]
    5f68:	e049      	b.n	5ffe <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x3ee>
    5f6a:	f240 31fd 	movw	r1, #1021	; 0x3fd
    5f6e:	2031      	movs	r0, #49	; 0x31
    5f70:	f7fe f824 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f74:	f240 4105 	movw	r1, #1029	; 0x405
    5f78:	2031      	movs	r0, #49	; 0x31
    5f7a:	f7fe f81f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f7e:	f885 8000 	strb.w	r8, [r5]
    5f82:	6861      	ldr	r1, [r4, #4]
    5f84:	f891 00e0 	ldrb.w	r0, [r1, #224]	; 0xe0
    5f88:	1e40      	subs	r0, r0, #1
    5f8a:	b240      	sxtb	r0, r0
    5f8c:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    5f90:	2800      	cmp	r0, #0
    5f92:	db44      	blt.n	601e <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x40e>
    5f94:	f7ff fe8e 	bl	5cb4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0xa4>
    5f98:	4606      	mov	r6, r0
    5f9a:	4630      	mov	r0, r6
    5f9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5fa0:	e7ff      	b.n	5fa2 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x392>
    5fa2:	6860      	ldr	r0, [r4, #4]
    5fa4:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5fa8:	2901      	cmp	r1, #1
    5faa:	bf18      	it	ne
    5fac:	f880 8144 	strbne.w	r8, [r0, #324]	; 0x144
    5fb0:	d007      	beq.n	5fc2 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x3b2>
    5fb2:	6860      	ldr	r0, [r4, #4]
    5fb4:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    5fb8:	42a9      	cmp	r1, r5
    5fba:	bf08      	it	eq
    5fbc:	f880 809e 	strbeq.w	r8, [r0, #158]	; 0x9e
    5fc0:	e01d      	b.n	5ffe <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x3ee>
    5fc2:	f8b0 3094 	ldrh.w	r3, [r0, #148]	; 0x94
    5fc6:	f500 7247 	add.w	r2, r0, #796	; 0x31c
    5fca:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    5fce:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    5fd2:	f008 f87b 	bl	e0cc <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
    5fd6:	b120      	cbz	r0, 5fe2 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x3d2>
    5fd8:	6861      	ldr	r1, [r4, #4]
    5fda:	2026      	movs	r0, #38	; 0x26
    5fdc:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5fe0:	e7e7      	b.n	5fb2 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x3a2>
    5fe2:	2000      	movs	r0, #0
    5fe4:	f7ff fe2c 	bl	5c40 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x30>
    5fe8:	f885 8000 	strb.w	r8, [r5]
    5fec:	e7e1      	b.n	5fb2 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x3a2>
    5fee:	2028      	movs	r0, #40	; 0x28
    5ff0:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    5ff4:	f101 00b5 	add.w	r0, r1, #181	; 0xb5
    5ff8:	2208      	movs	r2, #8
    5ffa:	f7ff fa8b 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5ffe:	6860      	ldr	r0, [r4, #4]
    6000:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6004:	42a9      	cmp	r1, r5
    6006:	bf18      	it	ne
    6008:	f880 80dc 	strbne.w	r8, [r0, #220]	; 0xdc
    600c:	d10c      	bne.n	6028 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x418>
    600e:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    6012:	1e49      	subs	r1, r1, #1
    6014:	b249      	sxtb	r1, r1
    6016:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    601a:	2900      	cmp	r1, #0
    601c:	da04      	bge.n	6028 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x418>
    601e:	f240 118d 	movw	r1, #397	; 0x18d
    6022:	2031      	movs	r0, #49	; 0x31
    6024:	f7fd ffca 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6028:	2000      	movs	r0, #0
    602a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    602e:	0000      	.short	0x0000
    6030:	20000150 	.word	0x20000150
    6034:	20000138 	.word	0x20000138
    6038:	b510      	push	{r4, lr}
    603a:	4c0a      	ldr	r4, [pc, #40]	; (6064 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x454>)
    603c:	2301      	movs	r3, #1
    603e:	2100      	movs	r1, #0
    6040:	6860      	ldr	r0, [r4, #4]
    6042:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6046:	3090      	adds	r0, #144	; 0x90
    6048:	f007 ff13 	bl	de72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    604c:	b120      	cbz	r0, 6058 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x448>
    604e:	6861      	ldr	r1, [r4, #4]
    6050:	2020      	movs	r0, #32
    6052:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6056:	bd10      	pop	{r4, pc}
    6058:	f240 7197 	movw	r1, #1943	; 0x797
    605c:	2031      	movs	r0, #49	; 0x31
    605e:	f7fd ffad 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6062:	0000      	.short	0x0000
    6064:	20000150 	.word	0x20000150
    6068:	4808      	ldr	r0, [pc, #32]	; (608c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x47c>)
    606a:	b510      	push	{r4, lr}
    606c:	6840      	ldr	r0, [r0, #4]
    606e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6072:	2922      	cmp	r1, #34	; 0x22
    6074:	bf11      	iteee	ne
    6076:	2900      	cmpne	r1, #0
    6078:	2123      	moveq	r1, #35	; 0x23
    607a:	f880 109e 	strbeq.w	r1, [r0, #158]	; 0x9e
    607e:	bd10      	popeq	{r4, pc}
    6080:	f240 719e 	movw	r1, #1950	; 0x79e
    6084:	f04f 0031 	mov.w	r0, #49	; 0x31
    6088:	f7fd ff98 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    608c:	20000150 	.word	0x20000150

00006090 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>:
    6090:	b510      	push	{r4, lr}
    6092:	4c11      	ldr	r4, [pc, #68]	; (60d8 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x48>)
    6094:	6862      	ldr	r2, [r4, #4]
    6096:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    609a:	2a03      	cmp	r2, #3
    609c:	d004      	beq.n	60a8 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x18>
    609e:	f640 4121 	movw	r1, #3105	; 0xc21
    60a2:	2032      	movs	r0, #50	; 0x32
    60a4:	f7fd ff8a 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60a8:	2802      	cmp	r0, #2
    60aa:	bf18      	it	ne
    60ac:	2803      	cmpne	r0, #3
    60ae:	d005      	beq.n	60bc <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x2c>
    60b0:	f640 412f 	movw	r1, #3119	; 0xc2f
    60b4:	f04f 0032 	mov.w	r0, #50	; 0x32
    60b8:	f7fd ff80 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60bc:	2900      	cmp	r1, #0
    60be:	bf18      	it	ne
    60c0:	f002 fbea 	blne	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    60c4:	2000      	movs	r0, #0
    60c6:	6861      	ldr	r1, [r4, #4]
    60c8:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    60cc:	f881 00c4 	strb.w	r0, [r1, #196]	; 0xc4
    60d0:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    60d4:	bd10      	pop	{r4, pc}
    60d6:	0000      	.short	0x0000
    60d8:	20000288 	.word	0x20000288

000060dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    60dc:	4801      	ldr	r0, [pc, #4]	; (60e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    60de:	6840      	ldr	r0, [r0, #4]
    60e0:	30c0      	adds	r0, #192	; 0xc0
    60e2:	4770      	bx	lr
    60e4:	20000288 	.word	0x20000288

000060e8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    60e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60ec:	4c38      	ldr	r4, [pc, #224]	; (61d0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xe8>)
    60ee:	6861      	ldr	r1, [r4, #4]
    60f0:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
    60f4:	2800      	cmp	r0, #0
    60f6:	bf16      	itet	ne
    60f8:	2802      	cmpne	r0, #2
    60fa:	2000      	moveq	r0, #0
    60fc:	2001      	movne	r0, #1
    60fe:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    6102:	f101 014a 	add.w	r1, r1, #74	; 0x4a
    6106:	f7fe fd6b 	bl	4be0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    610a:	6860      	ldr	r0, [r4, #4]
    610c:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
    6110:	2902      	cmp	r1, #2
    6112:	bf16      	itet	ne
    6114:	2903      	cmpne	r1, #3
    6116:	2101      	moveq	r1, #1
    6118:	2100      	movne	r1, #0
    611a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    611e:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
    6122:	f100 034a 	add.w	r3, r0, #74	; 0x4a
    6126:	f04f 0700 	mov.w	r7, #0
    612a:	2a01      	cmp	r2, #1
    612c:	bf04      	itt	eq
    612e:	795b      	ldrbeq	r3, [r3, #5]
    6130:	f013 0fc0 	tsteq.w	r3, #192	; 0xc0
    6134:	d00a      	beq.n	614c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x64>
    6136:	f100 034a 	add.w	r3, r0, #74	; 0x4a
    613a:	2a01      	cmp	r2, #1
    613c:	d104      	bne.n	6148 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x60>
    613e:	795a      	ldrb	r2, [r3, #5]
    6140:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    6144:	2a40      	cmp	r2, #64	; 0x40
    6146:	d001      	beq.n	614c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x64>
    6148:	2200      	movs	r2, #0
    614a:	e000      	b.n	614e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x66>
    614c:	2201      	movs	r2, #1
    614e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    6152:	2a00      	cmp	r2, #0
    6154:	bf04      	itt	eq
    6156:	2900      	cmpeq	r1, #0
    6158:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    615c:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
    6160:	f7fe fe94 	bl	4e8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6164:	491b      	ldr	r1, [pc, #108]	; (61d4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xec>)
    6166:	fba0 6501 	umull	r6, r5, r0, r1
    616a:	f7fc fa79 	bl	2660 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    616e:	1980      	adds	r0, r0, r6
    6170:	4169      	adcs	r1, r5
    6172:	e9c8 0100 	strd	r0, r1, [r8]
    6176:	6860      	ldr	r0, [r4, #4]
    6178:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    617c:	2800      	cmp	r0, #0
    617e:	bf1c      	itt	ne
    6180:	2000      	movne	r0, #0
    6182:	f7fe fdcd 	blne	4d20 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    6186:	2500      	movs	r5, #0
    6188:	6860      	ldr	r0, [r4, #4]
    618a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    618e:	2900      	cmp	r1, #0
    6190:	bf1a      	itte	ne
    6192:	f890 105c 	ldrbne.w	r1, [r0, #92]	; 0x5c
    6196:	2900      	cmpne	r1, #0
    6198:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    619c:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    61a0:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    61a4:	2901      	cmp	r1, #1
    61a6:	d104      	bne.n	61b2 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xca>
    61a8:	7951      	ldrb	r1, [r2, #5]
    61aa:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    61ae:	2940      	cmp	r1, #64	; 0x40
    61b0:	d005      	beq.n	61be <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xd6>
    61b2:	4639      	mov	r1, r7
    61b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    61b8:	304a      	adds	r0, #74	; 0x4a
    61ba:	f007 bd7a 	b.w	dcb2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    61be:	f7fe fd67 	bl	4c90 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    61c2:	6861      	ldr	r1, [r4, #4]
    61c4:	462a      	mov	r2, r5
    61c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    61ca:	314a      	adds	r1, #74	; 0x4a
    61cc:	f007 bd82 	b.w	dcd4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    61d0:	20000288 	.word	0x20000288
    61d4:	000f4240 	.word	0x000f4240

000061d8 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ>:
    61d8:	4803      	ldr	r0, [pc, #12]	; (61e8 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ+0x10>)
    61da:	b510      	push	{r4, lr}
    61dc:	6840      	ldr	r0, [r0, #4]
    61de:	308c      	adds	r0, #140	; 0x8c
    61e0:	f009 fa7a 	bl	f6d8 <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA>
    61e4:	2000      	movs	r0, #0
    61e6:	bd10      	pop	{r4, pc}
    61e8:	20000288 	.word	0x20000288

000061ec <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI>:
    61ec:	b570      	push	{r4, r5, r6, lr}
    61ee:	4608      	mov	r0, r1
    61f0:	2a02      	cmp	r2, #2
    61f2:	d00d      	beq.n	6210 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x24>
    61f4:	4e22      	ldr	r6, [pc, #136]	; (6280 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x94>)
    61f6:	2500      	movs	r5, #0
    61f8:	2a04      	cmp	r2, #4
    61fa:	6871      	ldr	r1, [r6, #4]
    61fc:	d00c      	beq.n	6218 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x2c>
    61fe:	2a0f      	cmp	r2, #15
    6200:	d010      	beq.n	6224 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x38>
    6202:	2a13      	cmp	r2, #19
    6204:	d034      	beq.n	6270 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x84>
    6206:	f240 31f3 	movw	r1, #1011	; 0x3f3
    620a:	2032      	movs	r0, #50	; 0x32
    620c:	f7fd fed6 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6214:	f002 b840 	b.w	8298 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY>
    6218:	7045      	strb	r5, [r0, #1]
    621a:	2207      	movs	r2, #7
    621c:	7002      	strb	r2, [r0, #0]
    621e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    6220:	6041      	str	r1, [r0, #4]
    6222:	bd70      	pop	{r4, r5, r6, pc}
    6224:	4604      	mov	r4, r0
    6226:	6d48      	ldr	r0, [r1, #84]	; 0x54
    6228:	690a      	ldr	r2, [r1, #16]
    622a:	f8c0 2003 	str.w	r2, [r0, #3]
    622e:	8a8a      	ldrh	r2, [r1, #20]
    6230:	f8a0 2007 	strh.w	r2, [r0, #7]
    6234:	7bc8      	ldrb	r0, [r1, #15]
    6236:	2800      	cmp	r0, #0
    6238:	bf1a      	itte	ne
    623a:	2802      	cmpne	r0, #2
    623c:	2001      	movne	r0, #1
    623e:	2000      	moveq	r0, #0
    6240:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    6242:	f101 010a 	add.w	r1, r1, #10
    6246:	7090      	strb	r0, [r2, #2]
    6248:	7065      	strb	r5, [r4, #1]
    624a:	f04f 0014 	mov.w	r0, #20
    624e:	7020      	strb	r0, [r4, #0]
    6250:	f04f 0220 	mov.w	r2, #32
    6254:	f104 0004 	add.w	r0, r4, #4
    6258:	f006 fc69 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    625c:	7225      	strb	r5, [r4, #8]
    625e:	6870      	ldr	r0, [r6, #4]
    6260:	6d40      	ldr	r0, [r0, #84]	; 0x54
    6262:	8800      	ldrh	r0, [r0, #0]
    6264:	f7fe fa4a 	bl	46fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    626c:	f007 bad2 	b.w	d814 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    6270:	7045      	strb	r5, [r0, #1]
    6272:	2218      	movs	r2, #24
    6274:	7002      	strb	r2, [r0, #0]
    6276:	f8d1 1042 	ldr.w	r1, [r1, #66]	; 0x42
    627a:	6041      	str	r1, [r0, #4]
    627c:	bd70      	pop	{r4, r5, r6, pc}
    627e:	0000      	.short	0x0000
    6280:	20000288 	.word	0x20000288

00006284 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    6284:	480b      	ldr	r0, [pc, #44]	; (62b4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    6286:	6840      	ldr	r0, [r0, #4]
    6288:	6e81      	ldr	r1, [r0, #104]	; 0x68
    628a:	2900      	cmp	r1, #0
    628c:	bf04      	itt	eq
    628e:	200c      	moveq	r0, #12
    6290:	4770      	bxeq	lr
    6292:	f100 016d 	add.w	r1, r0, #109	; 0x6d
    6296:	22ff      	movs	r2, #255	; 0xff
    6298:	700a      	strb	r2, [r1, #0]
    629a:	2200      	movs	r2, #0
    629c:	6682      	str	r2, [r0, #104]	; 0x68
    629e:	700a      	strb	r2, [r1, #0]
    62a0:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    62a4:	2101      	movs	r1, #1
    62a6:	fa01 f000 	lsl.w	r0, r1, r0
    62aa:	4903      	ldr	r1, [pc, #12]	; (62b8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x34>)
    62ac:	6008      	str	r0, [r1, #0]
    62ae:	2000      	movs	r0, #0
    62b0:	4770      	bx	lr
    62b2:	0000      	.short	0x0000
    62b4:	20000288 	.word	0x20000288
    62b8:	4001f508 	.word	0x4001f508

000062bc <sym_RVDUOFXS6QFZAGXDM6VFX4GXCXYTNLA6BFQ4IMA>:
    62bc:	4902      	ldr	r1, [pc, #8]	; (62c8 <sym_RVDUOFXS6QFZAGXDM6VFX4GXCXYTNLA6BFQ4IMA+0xc>)
    62be:	4801      	ldr	r0, [pc, #4]	; (62c4 <sym_RVDUOFXS6QFZAGXDM6VFX4GXCXYTNLA6BFQ4IMA+0x8>)
    62c0:	60c8      	str	r0, [r1, #12]
    62c2:	4770      	bx	lr
    62c4:	0000826c 	.word	0x0000826c
    62c8:	20000288 	.word	0x20000288

000062cc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    62cc:	4602      	mov	r2, r0
    62ce:	b510      	push	{r4, lr}
    62d0:	480f      	ldr	r0, [pc, #60]	; (6310 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x44>)
    62d2:	460c      	mov	r4, r1
    62d4:	6082      	str	r2, [r0, #8]
    62d6:	68c1      	ldr	r1, [r0, #12]
    62d8:	b1a1      	cbz	r1, 6304 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x38>
    62da:	6842      	ldr	r2, [r0, #4]
    62dc:	2000      	movs	r0, #0
    62de:	f8a2 00c2 	strh.w	r0, [r2, #194]	; 0xc2
    62e2:	f882 00c4 	strb.w	r0, [r2, #196]	; 0xc4
    62e6:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
    62ea:	f002 f8a9 	bl	8440 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    62ee:	4620      	mov	r0, r4
    62f0:	f000 f82c 	bl	634c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    62f4:	2800      	cmp	r0, #0
    62f6:	bf08      	it	eq
    62f8:	bd10      	popeq	{r4, pc}
    62fa:	f640 1174 	movw	r1, #2420	; 0x974
    62fe:	2032      	movs	r0, #50	; 0x32
    6300:	f7fd fe5c 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6304:	f640 116e 	movw	r1, #2414	; 0x96e
    6308:	2032      	movs	r0, #50	; 0x32
    630a:	f7fd fe57 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    630e:	0000      	.short	0x0000
    6310:	20000288 	.word	0x20000288

00006314 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    6314:	b570      	push	{r4, r5, r6, lr}
    6316:	4604      	mov	r4, r0
    6318:	f7fe fae0 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    631c:	4605      	mov	r5, r0
    631e:	f7fe fad7 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    6322:	4601      	mov	r1, r0
    6324:	4628      	mov	r0, r5
    6326:	f007 fae8 	bl	d8fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    632a:	0001      	movs	r1, r0
    632c:	d006      	beq.n	633c <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x28>
    632e:	4806      	ldr	r0, [pc, #24]	; (6348 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x34>)
    6330:	68c0      	ldr	r0, [r0, #12]
    6332:	6802      	ldr	r2, [r0, #0]
    6334:	4620      	mov	r0, r4
    6336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    633a:	4710      	bx	r2
    633c:	f640 217b 	movw	r1, #2683	; 0xa7b
    6340:	2032      	movs	r0, #50	; 0x32
    6342:	f7fd fe3b 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6346:	0000      	.short	0x0000
    6348:	20000288 	.word	0x20000288

0000634c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    634c:	b570      	push	{r4, r5, r6, lr}
    634e:	4d22      	ldr	r5, [pc, #136]	; (63d8 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x8c>)
    6350:	4606      	mov	r6, r0
    6352:	6868      	ldr	r0, [r5, #4]
    6354:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    6358:	2901      	cmp	r1, #1
    635a:	bf1f      	itttt	ne
    635c:	f890 0078 	ldrbne.w	r0, [r0, #120]	; 0x78
    6360:	2800      	cmpne	r0, #0
    6362:	200c      	movne	r0, #12
    6364:	bd70      	popne	{r4, r5, r6, pc}
    6366:	f7fe fadd 	bl	4924 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    636a:	f002 f869 	bl	8440 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    636e:	6868      	ldr	r0, [r5, #4]
    6370:	2400      	movs	r4, #0
    6372:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    6376:	b130      	cbz	r0, 6386 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x3a>
    6378:	f004 fc04 	bl	ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    637c:	f004 faf4 	bl	a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6380:	6868      	ldr	r0, [r5, #4]
    6382:	f880 4084 	strb.w	r4, [r0, #132]	; 0x84
    6386:	2246      	movs	r2, #70	; 0x46
    6388:	2100      	movs	r1, #0
    638a:	6868      	ldr	r0, [r5, #4]
    638c:	f006 fc49 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6390:	6869      	ldr	r1, [r5, #4]
    6392:	2001      	movs	r0, #1
    6394:	f881 405d 	strb.w	r4, [r1, #93]	; 0x5d
    6398:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    639c:	f881 4058 	strb.w	r4, [r1, #88]	; 0x58
    63a0:	f881 4082 	strb.w	r4, [r1, #130]	; 0x82
    63a4:	f881 605e 	strb.w	r6, [r1, #94]	; 0x5e
    63a8:	f881 40b0 	strb.w	r4, [r1, #176]	; 0xb0
    63ac:	2007      	movs	r0, #7
    63ae:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    63b2:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    63b6:	22ff      	movs	r2, #255	; 0xff
    63b8:	7002      	strb	r2, [r0, #0]
    63ba:	f881 406c 	strb.w	r4, [r1, #108]	; 0x6c
    63be:	668c      	str	r4, [r1, #104]	; 0x68
    63c0:	7004      	strb	r4, [r0, #0]
    63c2:	f881 40b3 	strb.w	r4, [r1, #179]	; 0xb3
    63c6:	f881 40b4 	strb.w	r4, [r1, #180]	; 0xb4
    63ca:	3048      	adds	r0, #72	; 0x48
    63cc:	7004      	strb	r4, [r0, #0]
    63ce:	2000      	movs	r0, #0
    63d0:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
    63d4:	bd70      	pop	{r4, r5, r6, pc}
    63d6:	0000      	.short	0x0000
    63d8:	20000288 	.word	0x20000288

000063dc <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    63dc:	4805      	ldr	r0, [pc, #20]	; (63f4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    63de:	6840      	ldr	r0, [r0, #4]
    63e0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    63e4:	2800      	cmp	r0, #0
    63e6:	bf16      	itet	ne
    63e8:	2802      	cmpne	r0, #2
    63ea:	2000      	moveq	r0, #0
    63ec:	2001      	movne	r0, #1
    63ee:	f7fe bc25 	b.w	4c3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    63f2:	0000      	.short	0x0000
    63f4:	20000288 	.word	0x20000288

000063f8 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    63f8:	7801      	ldrb	r1, [r0, #0]
    63fa:	2200      	movs	r2, #0
    63fc:	f011 0f01 	tst.w	r1, #1
    6400:	4923      	ldr	r1, [pc, #140]	; (6490 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x98>)
    6402:	6849      	ldr	r1, [r1, #4]
    6404:	d009      	beq.n	641a <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x22>
    6406:	7842      	ldrb	r2, [r0, #1]
    6408:	2300      	movs	r3, #0
    640a:	2a03      	cmp	r2, #3
    640c:	bf08      	it	eq
    640e:	654b      	streq	r3, [r1, #84]	; 0x54
    6410:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    6414:	2201      	movs	r2, #1
    6416:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    641a:	7803      	ldrb	r3, [r0, #0]
    641c:	f013 0f02 	tst.w	r3, #2
    6420:	d00e      	beq.n	6440 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x48>
    6422:	7883      	ldrb	r3, [r0, #2]
    6424:	f04f 0c00 	mov.w	ip, #0
    6428:	2b03      	cmp	r3, #3
    642a:	bf08      	it	eq
    642c:	f8c1 c054 	streq.w	ip, [r1, #84]	; 0x54
    6430:	f881 3058 	strb.w	r3, [r1, #88]	; 0x58
    6434:	2302      	movs	r3, #2
    6436:	eb01 0c02 	add.w	ip, r1, r2
    643a:	1c52      	adds	r2, r2, #1
    643c:	f88c 30c6 	strb.w	r3, [ip, #198]	; 0xc6
    6440:	7803      	ldrb	r3, [r0, #0]
    6442:	f013 0f04 	tst.w	r3, #4
    6446:	d00c      	beq.n	6462 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x6a>
    6448:	78c3      	ldrb	r3, [r0, #3]
    644a:	f04f 0c00 	mov.w	ip, #0
    644e:	2b03      	cmp	r3, #3
    6450:	bf08      	it	eq
    6452:	f8c1 c054 	streq.w	ip, [r1, #84]	; 0x54
    6456:	f881 3058 	strb.w	r3, [r1, #88]	; 0x58
    645a:	440a      	add	r2, r1
    645c:	2308      	movs	r3, #8
    645e:	f882 30c6 	strb.w	r3, [r2, #198]	; 0xc6
    6462:	7902      	ldrb	r2, [r0, #4]
    6464:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
    6468:	7942      	ldrb	r2, [r0, #5]
    646a:	2a00      	cmp	r2, #0
    646c:	bf16      	itet	ne
    646e:	2a02      	cmpne	r2, #2
    6470:	2301      	moveq	r3, #1
    6472:	2300      	movne	r3, #0
    6474:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
    6478:	f881 2059 	strb.w	r2, [r1, #89]	; 0x59
    647c:	7982      	ldrb	r2, [r0, #6]
    647e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
    6482:	79c0      	ldrb	r0, [r0, #7]
    6484:	f881 005b 	strb.w	r0, [r1, #91]	; 0x5b
    6488:	f04f 0000 	mov.w	r0, #0
    648c:	4770      	bx	lr
    648e:	0000      	.short	0x0000
    6490:	20000288 	.word	0x20000288

00006494 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    6494:	4801      	ldr	r0, [pc, #4]	; (649c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    6496:	68c0      	ldr	r0, [r0, #12]
    6498:	6840      	ldr	r0, [r0, #4]
    649a:	4700      	bx	r0
    649c:	20000288 	.word	0x20000288

000064a0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    64a0:	b538      	push	{r3, r4, r5, lr}
    64a2:	4c13      	ldr	r4, [pc, #76]	; (64f0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x50>)
    64a4:	2200      	movs	r2, #0
    64a6:	6860      	ldr	r0, [r4, #4]
    64a8:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    64ac:	f88d 1000 	strb.w	r1, [sp]
    64b0:	f89d 1000 	ldrb.w	r1, [sp]
    64b4:	b931      	cbnz	r1, 64c4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x24>
    64b6:	6e81      	ldr	r1, [r0, #104]	; 0x68
    64b8:	2900      	cmp	r1, #0
    64ba:	bf1c      	itt	ne
    64bc:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    64c0:	f7fc f8b0 	blne	2624 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    64c4:	6860      	ldr	r0, [r4, #4]
    64c6:	2500      	movs	r5, #0
    64c8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    64cc:	b130      	cbz	r0, 64dc <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x3c>
    64ce:	f004 fb59 	bl	ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    64d2:	f004 fa49 	bl	a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    64d6:	6860      	ldr	r0, [r4, #4]
    64d8:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    64dc:	6860      	ldr	r0, [r4, #4]
    64de:	f8a0 50c2 	strh.w	r5, [r0, #194]	; 0xc2
    64e2:	f880 50c4 	strb.w	r5, [r0, #196]	; 0xc4
    64e6:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
    64ea:	2000      	movs	r0, #0
    64ec:	bd38      	pop	{r3, r4, r5, pc}
    64ee:	0000      	.short	0x0000
    64f0:	20000288 	.word	0x20000288

000064f4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    64f4:	4809      	ldr	r0, [pc, #36]	; (651c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x28>)
    64f6:	6840      	ldr	r0, [r0, #4]
    64f8:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    64fc:	2903      	cmp	r1, #3
    64fe:	bf0c      	ite	eq
    6500:	2101      	moveq	r1, #1
    6502:	2100      	movne	r1, #0
    6504:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    6508:	bf04      	itt	eq
    650a:	6d41      	ldreq	r1, [r0, #84]	; 0x54
    650c:	8809      	ldrheq	r1, [r1, #0]
    650e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    6512:	2213      	movs	r2, #19
    6514:	2100      	movs	r1, #0
    6516:	3038      	adds	r0, #56	; 0x38
    6518:	f7fe bffc 	b.w	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    651c:	20000288 	.word	0x20000288

00006520 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    6520:	4802      	ldr	r0, [pc, #8]	; (652c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    6522:	6840      	ldr	r0, [r0, #4]
    6524:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    6528:	4770      	bx	lr
    652a:	0000      	.short	0x0000
    652c:	20000288 	.word	0x20000288

00006530 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    6530:	480c      	ldr	r0, [pc, #48]	; (6564 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    6532:	6841      	ldr	r1, [r0, #4]
    6534:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    6538:	2803      	cmp	r0, #3
    653a:	d004      	beq.n	6546 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    653c:	2801      	cmp	r0, #1
    653e:	bf18      	it	ne
    6540:	2802      	cmpne	r0, #2
    6542:	d007      	beq.n	6554 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    6544:	e004      	b.n	6550 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    6546:	f891 005a 	ldrb.w	r0, [r1, #90]	; 0x5a
    654a:	2801      	cmp	r0, #1
    654c:	bf08      	it	eq
    654e:	4770      	bxeq	lr
    6550:	2000      	movs	r0, #0
    6552:	4770      	bx	lr
    6554:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    6558:	2801      	cmp	r0, #1
    655a:	bf14      	ite	ne
    655c:	2803      	cmpne	r0, #3
    655e:	2001      	moveq	r0, #1
    6560:	d1f6      	bne.n	6550 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    6562:	4770      	bx	lr
    6564:	20000288 	.word	0x20000288
    6568:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    656c:	4c38      	ldr	r4, [pc, #224]	; (6650 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x120>)
    656e:	4606      	mov	r6, r0
    6570:	2500      	movs	r5, #0
    6572:	6860      	ldr	r0, [r4, #4]
    6574:	4692      	mov	sl, r2
    6576:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    657a:	2900      	cmp	r1, #0
    657c:	bf0c      	ite	eq
    657e:	f04f 0901 	moveq.w	r9, #1
    6582:	f04f 0900 	movne.w	r9, #0
    6586:	7cb2      	ldrb	r2, [r6, #18]
    6588:	68b1      	ldr	r1, [r6, #8]
    658a:	2a01      	cmp	r2, #1
    658c:	d106      	bne.n	659c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6c>
    658e:	7949      	ldrb	r1, [r1, #5]
    6590:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    6594:	2940      	cmp	r1, #64	; 0x40
    6596:	bf08      	it	eq
    6598:	2701      	moveq	r7, #1
    659a:	d000      	beq.n	659e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e>
    659c:	2700      	movs	r7, #0
    659e:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    65a2:	2900      	cmp	r1, #0
    65a4:	d04a      	beq.n	663c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    65a6:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    65aa:	f04f 0b00 	mov.w	fp, #0
    65ae:	2903      	cmp	r1, #3
    65b0:	d106      	bne.n	65c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90>
    65b2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    65b6:	2900      	cmp	r1, #0
    65b8:	bf18      	it	ne
    65ba:	f890 8083 	ldrbne.w	r8, [r0, #131]	; 0x83
    65be:	d107      	bne.n	65d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    65c0:	6870      	ldr	r0, [r6, #4]
    65c2:	b910      	cbnz	r0, 65ca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a>
    65c4:	f008 f8ae 	bl	e724 <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>
    65c8:	b318      	cbz	r0, 6612 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe2>
    65ca:	6860      	ldr	r0, [r4, #4]
    65cc:	f890 8080 	ldrb.w	r8, [r0, #128]	; 0x80
    65d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    65d4:	bf18      	it	ne
    65d6:	f1b8 0f08 	cmpne.w	r8, #8
    65da:	d01a      	beq.n	6612 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe2>
    65dc:	4640      	mov	r0, r8
    65de:	f7fe fb87 	bl	4cf0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    65e2:	2800      	cmp	r0, #0
    65e4:	bf18      	it	ne
    65e6:	f04f 0901 	movne.w	r9, #1
    65ea:	b33f      	cbz	r7, 663c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    65ec:	6860      	ldr	r0, [r4, #4]
    65ee:	f890 0089 	ldrb.w	r0, [r0, #137]	; 0x89
    65f2:	b130      	cbz	r0, 6602 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd2>
    65f4:	f007 fbe3 	bl	ddbe <sym_L5NT4KXGEDXZTIBIF6PJMXWXQJC7UYUXJYCCW3Y>
    65f8:	4605      	mov	r5, r0
    65fa:	6860      	ldr	r0, [r4, #4]
    65fc:	f880 b089 	strb.w	fp, [r0, #137]	; 0x89
    6600:	e01c      	b.n	663c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    6602:	4640      	mov	r0, r8
    6604:	f7fe fb80 	bl	4d08 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6608:	68b1      	ldr	r1, [r6, #8]
    660a:	f007 fb9b 	bl	dd44 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    660e:	4605      	mov	r5, r0
    6610:	e014      	b.n	663c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    6612:	b19f      	cbz	r7, 663c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    6614:	6860      	ldr	r0, [r4, #4]
    6616:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    661a:	b978      	cbnz	r0, 663c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    661c:	2100      	movs	r1, #0
    661e:	68b0      	ldr	r0, [r6, #8]
    6620:	f7fe fbd8 	bl	4dd4 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>
    6624:	6861      	ldr	r1, [r4, #4]
    6626:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    662a:	b138      	cbz	r0, 663c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    662c:	f007 fbbc 	bl	dda8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6630:	28ff      	cmp	r0, #255	; 0xff
    6632:	d003      	beq.n	663c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    6634:	6861      	ldr	r1, [r4, #4]
    6636:	2501      	movs	r5, #1
    6638:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    663c:	f88a 5000 	strb.w	r5, [sl]
    6640:	9801      	ldr	r0, [sp, #4]
    6642:	7007      	strb	r7, [r0, #0]
    6644:	9803      	ldr	r0, [sp, #12]
    6646:	f880 9000 	strb.w	r9, [r0]
    664a:	b004      	add	sp, #16
    664c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6650:	20000288 	.word	0x20000288
    6654:	b570      	push	{r4, r5, r6, lr}
    6656:	460c      	mov	r4, r1
    6658:	4605      	mov	r5, r0
    665a:	f004 f8f5 	bl	a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    665e:	f010 0f04 	tst.w	r0, #4
    6662:	d104      	bne.n	666e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13e>
    6664:	78a0      	ldrb	r0, [r4, #2]
    6666:	2102      	movs	r1, #2
    6668:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
    666c:	d023      	beq.n	66b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    666e:	f004 f8eb 	bl	a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    6672:	f010 0f02 	tst.w	r0, #2
    6676:	d104      	bne.n	6682 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x152>
    6678:	78a0      	ldrb	r0, [r4, #2]
    667a:	2101      	movs	r1, #1
    667c:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
    6680:	d019      	beq.n	66b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    6682:	7820      	ldrb	r0, [r4, #0]
    6684:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6688:	2825      	cmp	r0, #37	; 0x25
    668a:	d214      	bcs.n	66b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    668c:	f004 fe22 	bl	b2d4 <sym_PA6VKMMVXYRG4QPOV5XBZ3GQNGOJSB5VXHVKAFQ>
    6690:	7821      	ldrb	r1, [r4, #0]
    6692:	f011 0f80 	tst.w	r1, #128	; 0x80
    6696:	bf0c      	ite	eq
    6698:	211e      	moveq	r1, #30
    669a:	f44f 7196 	movne.w	r1, #300	; 0x12c
    669e:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    66a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
    66a6:	fb12 f101 	smulbb	r1, r2, r1
    66aa:	1a0a      	subs	r2, r1, r0
    66ac:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
    66b0:	bf28      	it	cs
    66b2:	4281      	cmpcs	r1, r0
    66b4:	d201      	bcs.n	66ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18a>
    66b6:	2000      	movs	r0, #0
    66b8:	bd70      	pop	{r4, r5, r6, pc}
    66ba:	4806      	ldr	r0, [pc, #24]	; (66d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a4>)
    66bc:	8821      	ldrh	r1, [r4, #0]
    66be:	6840      	ldr	r0, [r0, #4]
    66c0:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
    66c4:	78a1      	ldrb	r1, [r4, #2]
    66c6:	f880 10c4 	strb.w	r1, [r0, #196]	; 0xc4
    66ca:	4628      	mov	r0, r5
    66cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    66d0:	f002 bc20 	b.w	8f14 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    66d4:	20000288 	.word	0x20000288
    66d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66dc:	4c28      	ldr	r4, [pc, #160]	; (6780 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x250>)
    66de:	4680      	mov	r8, r0
    66e0:	460d      	mov	r5, r1
    66e2:	6860      	ldr	r0, [r4, #4]
    66e4:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    66e8:	30c2      	adds	r0, #194	; 0xc2
    66ea:	0949      	lsrs	r1, r1, #5
    66ec:	bf08      	it	eq
    66ee:	2601      	moveq	r6, #1
    66f0:	d007      	beq.n	6702 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d2>
    66f2:	2901      	cmp	r1, #1
    66f4:	bf08      	it	eq
    66f6:	2602      	moveq	r6, #2
    66f8:	d003      	beq.n	6702 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d2>
    66fa:	2902      	cmp	r1, #2
    66fc:	bf14      	ite	ne
    66fe:	2600      	movne	r6, #0
    6700:	2608      	moveq	r6, #8
    6702:	7800      	ldrb	r0, [r0, #0]
    6704:	f000 073f 	and.w	r7, r0, #63	; 0x3f
    6708:	4638      	mov	r0, r7
    670a:	f005 f95f 	bl	b9cc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    670e:	6860      	ldr	r0, [r4, #4]
    6710:	f1b8 0f00 	cmp.w	r8, #0
    6714:	f880 709a 	strb.w	r7, [r0, #154]	; 0x9a
    6718:	d008      	beq.n	672c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fc>
    671a:	4631      	mov	r1, r6
    671c:	2001      	movs	r0, #1
    671e:	f004 fbc5 	bl	aeac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6722:	2800      	cmp	r0, #0
    6724:	bf08      	it	eq
    6726:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    672a:	e004      	b.n	6736 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x206>
    672c:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    672e:	4632      	mov	r2, r6
    6730:	2001      	movs	r0, #1
    6732:	f004 ff43 	bl	b5bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6736:	6860      	ldr	r0, [r4, #4]
    6738:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    673c:	2802      	cmp	r0, #2
    673e:	bf0c      	ite	eq
    6740:	2040      	moveq	r0, #64	; 0x40
    6742:	20ff      	movne	r0, #255	; 0xff
    6744:	4631      	mov	r1, r6
    6746:	f005 f90d 	bl	b964 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    674a:	6860      	ldr	r0, [r4, #4]
    674c:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    6750:	b980      	cbnz	r0, 6774 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>
    6752:	1d68      	adds	r0, r5, #5
    6754:	f7fe fa88 	bl	4c68 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6758:	6861      	ldr	r1, [r4, #4]
    675a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    675e:	b148      	cbz	r0, 6774 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>
    6760:	f016 0f0c 	tst.w	r6, #12
    6764:	bf0c      	ite	eq
    6766:	2450      	moveq	r4, #80	; 0x50
    6768:	2455      	movne	r4, #85	; 0x55
    676a:	f004 f93d 	bl	a9e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    676e:	4620      	mov	r0, r4
    6770:	f004 fa16 	bl	aba0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6774:	4628      	mov	r0, r5
    6776:	f004 fed3 	bl	b520 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    677a:	2001      	movs	r0, #1
    677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6780:	20000288 	.word	0x20000288
    6784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6788:	4e1d      	ldr	r6, [pc, #116]	; (6800 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2d0>)
    678a:	4605      	mov	r5, r0
    678c:	460f      	mov	r7, r1
    678e:	6870      	ldr	r0, [r6, #4]
    6790:	491c      	ldr	r1, [pc, #112]	; (6804 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2d4>)
    6792:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
    6796:	5c0c      	ldrb	r4, [r1, r0]
    6798:	4620      	mov	r0, r4
    679a:	f005 f917 	bl	b9cc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    679e:	6870      	ldr	r0, [r6, #4]
    67a0:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
    67a4:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    67a8:	30c6      	adds	r0, #198	; 0xc6
    67aa:	5c0c      	ldrb	r4, [r1, r0]
    67ac:	2c01      	cmp	r4, #1
    67ae:	bf08      	it	eq
    67b0:	2025      	moveq	r0, #37	; 0x25
    67b2:	d00e      	beq.n	67d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a2>
    67b4:	2c02      	cmp	r4, #2
    67b6:	bf08      	it	eq
    67b8:	200d      	moveq	r0, #13
    67ba:	d00a      	beq.n	67d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a2>
    67bc:	2c04      	cmp	r4, #4
    67be:	bf14      	ite	ne
    67c0:	2c08      	cmpne	r4, #8
    67c2:	200f      	moveq	r0, #15
    67c4:	d005      	beq.n	67d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a2>
    67c6:	f640 01e1 	movw	r1, #2273	; 0x8e1
    67ca:	f04f 0032 	mov.w	r0, #50	; 0x32
    67ce:	f7fd fbf5 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67d2:	4621      	mov	r1, r4
    67d4:	f005 f8c6 	bl	b964 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    67d8:	4638      	mov	r0, r7
    67da:	f004 fea1 	bl	b520 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    67de:	4621      	mov	r1, r4
    67e0:	f04f 0001 	mov.w	r0, #1
    67e4:	b135      	cbz	r5, 67f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    67e6:	f004 fb61 	bl	aeac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    67ea:	2800      	cmp	r0, #0
    67ec:	bf08      	it	eq
    67ee:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    67f2:	e001      	b.n	67f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    67f4:	f004 fa90 	bl	ad18 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    67f8:	2001      	movs	r0, #1
    67fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67fe:	0000      	.short	0x0000
    6800:	20000288 	.word	0x20000288
    6804:	0000f87f 	.word	0x0000f87f
    6808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    680c:	4c73      	ldr	r4, [pc, #460]	; (69dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ac>)
    680e:	460f      	mov	r7, r1
    6810:	4606      	mov	r6, r0
    6812:	6840      	ldr	r0, [r0, #4]
    6814:	6861      	ldr	r1, [r4, #4]
    6816:	4690      	mov	r8, r2
    6818:	f04f 0a01 	mov.w	sl, #1
    681c:	2f07      	cmp	r7, #7
    681e:	bf04      	itt	eq
    6820:	2800      	cmpeq	r0, #0
    6822:	f1b8 0f00 	cmpeq.w	r8, #0
    6826:	d00a      	beq.n	683e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30e>
    6828:	f04f 0900 	mov.w	r9, #0
    682c:	f88d 9000 	strb.w	r9, [sp]
    6830:	46eb      	mov	fp, sp
    6832:	2800      	cmp	r0, #0
    6834:	d07a      	beq.n	692c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fc>
    6836:	7c72      	ldrb	r2, [r6, #17]
    6838:	2a01      	cmp	r2, #1
    683a:	d011      	beq.n	6860 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x330>
    683c:	e017      	b.n	686e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x33e>
    683e:	f881 a08a 	strb.w	sl, [r1, #138]	; 0x8a
    6842:	f8d1 00b8 	ldr.w	r0, [r1, #184]	; 0xb8
    6846:	2800      	cmp	r0, #0
    6848:	bf08      	it	eq
    684a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    684e:	f008 ffb2 	bl	f7b6 <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI>
    6852:	2800      	cmp	r0, #0
    6854:	bf1c      	itt	ne
    6856:	6860      	ldrne	r0, [r4, #4]
    6858:	f880 a08b 	strbne.w	sl, [r0, #139]	; 0x8b
    685c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6860:	7942      	ldrb	r2, [r0, #5]
    6862:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    6866:	2a40      	cmp	r2, #64	; 0x40
    6868:	bf08      	it	eq
    686a:	2501      	moveq	r5, #1
    686c:	d000      	beq.n	6870 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x340>
    686e:	2500      	movs	r5, #0
    6870:	2f07      	cmp	r7, #7
    6872:	d128      	bne.n	68c6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x396>
    6874:	f891 2084 	ldrb.w	r2, [r1, #132]	; 0x84
    6878:	2a00      	cmp	r2, #0
    687a:	bf18      	it	ne
    687c:	2d00      	cmpne	r5, #0
    687e:	d011      	beq.n	68a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x374>
    6880:	f1b8 0f00 	cmp.w	r8, #0
    6884:	bf04      	itt	eq
    6886:	f891 10c1 	ldrbeq.w	r1, [r1, #193]	; 0xc1
    688a:	2901      	cmpeq	r1, #1
    688c:	d015      	beq.n	68ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38a>
    688e:	bf00      	nop
    6890:	f007 fa8a 	bl	dda8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6894:	4601      	mov	r1, r0
    6896:	6860      	ldr	r0, [r4, #4]
    6898:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    689c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    68a0:	f880 a088 	strb.w	sl, [r0, #136]	; 0x88
    68a4:	6860      	ldr	r0, [r4, #4]
    68a6:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    68aa:	29ff      	cmp	r1, #255	; 0xff
    68ac:	d013      	beq.n	68d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a6>
    68ae:	4608      	mov	r0, r1
    68b0:	f7fe faca 	bl	4e48 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    68b4:	f88d 0000 	strb.w	r0, [sp]
    68b8:	e038      	b.n	692c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fc>
    68ba:	2101      	movs	r1, #1
    68bc:	f7fe fa8a 	bl	4dd4 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>
    68c0:	6861      	ldr	r1, [r4, #4]
    68c2:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    68c6:	6860      	ldr	r0, [r4, #4]
    68c8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    68cc:	2800      	cmp	r0, #0
    68ce:	bf18      	it	ne
    68d0:	2d00      	cmpne	r5, #0
    68d2:	d0e7      	beq.n	68a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x374>
    68d4:	e7dc      	b.n	6890 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x360>
    68d6:	f896 c011 	ldrb.w	ip, [r6, #17]
    68da:	f100 0380 	add.w	r3, r0, #128	; 0x80
    68de:	465a      	mov	r2, fp
    68e0:	4660      	mov	r0, ip
    68e2:	6871      	ldr	r1, [r6, #4]
    68e4:	f7fe fad8 	bl	4e98 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    68e8:	f090 0f01 	teq	r0, #1
    68ec:	d01e      	beq.n	692c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fc>
    68ee:	6860      	ldr	r0, [r4, #4]
    68f0:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    68f4:	f880 908b 	strb.w	r9, [r0, #139]	; 0x8b
    68f8:	f04f 0200 	mov.w	r2, #0
    68fc:	68b0      	ldr	r0, [r6, #8]
    68fe:	2800      	cmp	r0, #0
    6900:	bf08      	it	eq
    6902:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6906:	2f07      	cmp	r7, #7
    6908:	bf18      	it	ne
    690a:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    690e:	6861      	ldr	r1, [r4, #4]
    6910:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    6914:	29ff      	cmp	r1, #255	; 0xff
    6916:	bf14      	ite	ne
    6918:	2a00      	cmpne	r2, #0
    691a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    691e:	f7fe faa5 	bl	4e6c <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ>
    6922:	6860      	ldr	r0, [r4, #4]
    6924:	f880 a089 	strb.w	sl, [r0, #137]	; 0x89
    6928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    692c:	6861      	ldr	r1, [r4, #4]
    692e:	f89d 0000 	ldrb.w	r0, [sp]
    6932:	2f07      	cmp	r7, #7
    6934:	f891 5051 	ldrb.w	r5, [r1, #81]	; 0x51
    6938:	d309      	bcc.n	694e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x41e>
    693a:	2f08      	cmp	r7, #8
    693c:	d829      	bhi.n	6992 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x462>
    693e:	f1b8 0f00 	cmp.w	r8, #0
    6942:	d002      	beq.n	694a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x41a>
    6944:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    6948:	b319      	cbz	r1, 6992 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x462>
    694a:	6871      	ldr	r1, [r6, #4]
    694c:	b119      	cbz	r1, 6956 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x426>
    694e:	2d00      	cmp	r5, #0
    6950:	bf08      	it	eq
    6952:	4605      	moveq	r5, r0
    6954:	e01e      	b.n	6994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x464>
    6956:	f1b8 0f00 	cmp.w	r8, #0
    695a:	d105      	bne.n	6968 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x438>
    695c:	7870      	ldrb	r0, [r6, #1]
    695e:	f010 0f10 	tst.w	r0, #16
    6962:	bf18      	it	ne
    6964:	4655      	movne	r5, sl
    6966:	d115      	bne.n	6994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x464>
    6968:	f007 fedc 	bl	e724 <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>
    696c:	b130      	cbz	r0, 697c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x44c>
    696e:	6860      	ldr	r0, [r4, #4]
    6970:	f890 008a 	ldrb.w	r0, [r0, #138]	; 0x8a
    6974:	2800      	cmp	r0, #0
    6976:	bf18      	it	ne
    6978:	2001      	movne	r0, #1
    697a:	d100      	bne.n	697e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x44e>
    697c:	2000      	movs	r0, #0
    697e:	4328      	orrs	r0, r5
    6980:	d105      	bne.n	698e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x45e>
    6982:	f7fe fb05 	bl	4f90 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ>
    6986:	2800      	cmp	r0, #0
    6988:	bf08      	it	eq
    698a:	2500      	moveq	r5, #0
    698c:	d002      	beq.n	6994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x464>
    698e:	2501      	movs	r5, #1
    6990:	e000      	b.n	6994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x464>
    6992:	464d      	mov	r5, r9
    6994:	6860      	ldr	r0, [r4, #4]
    6996:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    699a:	4811      	ldr	r0, [pc, #68]	; (69e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b0>)
    699c:	6802      	ldr	r2, [r0, #0]
    699e:	b12a      	cbz	r2, 69ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x47c>
    69a0:	4641      	mov	r1, r8
    69a2:	4630      	mov	r0, r6
    69a4:	4790      	blx	r2
    69a6:	6861      	ldr	r1, [r4, #4]
    69a8:	f881 008b 	strb.w	r0, [r1, #139]	; 0x8b
    69ac:	6870      	ldr	r0, [r6, #4]
    69ae:	b150      	cbz	r0, 69c6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    69b0:	6860      	ldr	r0, [r4, #4]
    69b2:	7c71      	ldrb	r1, [r6, #17]
    69b4:	f880 109b 	strb.w	r1, [r0, #155]	; 0x9b
    69b8:	6871      	ldr	r1, [r6, #4]
    69ba:	680a      	ldr	r2, [r1, #0]
    69bc:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    69c0:	8889      	ldrh	r1, [r1, #4]
    69c2:	f8a0 1098 	strh.w	r1, [r0, #152]	; 0x98
    69c6:	6860      	ldr	r0, [r4, #4]
    69c8:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    69cc:	2900      	cmp	r1, #0
    69ce:	bf06      	itte	eq
    69d0:	f890 008a 	ldrbeq.w	r0, [r0, #138]	; 0x8a
    69d4:	2800      	cmpeq	r0, #0
    69d6:	2201      	movne	r2, #1
    69d8:	d190      	bne.n	68fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3cc>
    69da:	e78d      	b.n	68f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c8>
    69dc:	20000288 	.word	0x20000288
    69e0:	20000298 	.word	0x20000298
    69e4:	b510      	push	{r4, lr}
    69e6:	480c      	ldr	r0, [pc, #48]	; (6a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e8>)
    69e8:	f004 ff9e 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    69ec:	4c0a      	ldr	r4, [pc, #40]	; (6a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e8>)
    69ee:	2800      	cmp	r0, #0
    69f0:	bf04      	itt	eq
    69f2:	207f      	moveq	r0, #127	; 0x7f
    69f4:	7020      	strbeq	r0, [r4, #0]
    69f6:	6860      	ldr	r0, [r4, #4]
    69f8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    69fc:	b138      	cbz	r0, 6a0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    69fe:	f004 f8c1 	bl	ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a02:	f003 ffb1 	bl	a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a06:	6861      	ldr	r1, [r4, #4]
    6a08:	2000      	movs	r0, #0
    6a0a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    6a0e:	f004 f8db 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6a12:	2005      	movs	r0, #5
    6a14:	bd10      	pop	{r4, pc}
    6a16:	0000      	.short	0x0000
    6a18:	20000288 	.word	0x20000288
    6a1c:	b510      	push	{r4, lr}
    6a1e:	4805      	ldr	r0, [pc, #20]	; (6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x504>)
    6a20:	f004 ff82 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    6a24:	b910      	cbnz	r0, 6a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fc>
    6a26:	4903      	ldr	r1, [pc, #12]	; (6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x504>)
    6a28:	207f      	movs	r0, #127	; 0x7f
    6a2a:	7008      	strb	r0, [r1, #0]
    6a2c:	f001 ff34 	bl	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    6a30:	2001      	movs	r0, #1
    6a32:	bd10      	pop	{r4, pc}
    6a34:	20000288 	.word	0x20000288
    6a38:	b510      	push	{r4, lr}
    6a3a:	4804      	ldr	r0, [pc, #16]	; (6a4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51c>)
    6a3c:	f004 ff74 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    6a40:	b910      	cbnz	r0, 6a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x518>
    6a42:	4902      	ldr	r1, [pc, #8]	; (6a4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51c>)
    6a44:	207f      	movs	r0, #127	; 0x7f
    6a46:	7008      	strb	r0, [r1, #0]
    6a48:	2001      	movs	r0, #1
    6a4a:	bd10      	pop	{r4, pc}
    6a4c:	20000288 	.word	0x20000288
    6a50:	b510      	push	{r4, lr}
    6a52:	4805      	ldr	r0, [pc, #20]	; (6a68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x538>)
    6a54:	f004 ff68 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    6a58:	b910      	cbnz	r0, 6a60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x530>
    6a5a:	4903      	ldr	r1, [pc, #12]	; (6a68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x538>)
    6a5c:	207f      	movs	r0, #127	; 0x7f
    6a5e:	7008      	strb	r0, [r1, #0]
    6a60:	f004 f8b2 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6a64:	2005      	movs	r0, #5
    6a66:	bd10      	pop	{r4, pc}
    6a68:	20000288 	.word	0x20000288
    6a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a70:	4605      	mov	r5, r0
    6a72:	b091      	sub	sp, #68	; 0x44
    6a74:	460e      	mov	r6, r1
    6a76:	48f5      	ldr	r0, [pc, #980]	; (6e4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x91c>)
    6a78:	f004 ff56 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    6a7c:	277f      	movs	r7, #127	; 0x7f
    6a7e:	4cf3      	ldr	r4, [pc, #972]	; (6e4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x91c>)
    6a80:	2800      	cmp	r0, #0
    6a82:	bf08      	it	eq
    6a84:	7027      	strbeq	r7, [r4, #0]
    6a86:	7828      	ldrb	r0, [r5, #0]
    6a88:	f000 080f 	and.w	r8, r0, #15
    6a8c:	f1b8 0f07 	cmp.w	r8, #7
    6a90:	d005      	beq.n	6a9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    6a92:	f001 ff01 	bl	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    6a96:	b011      	add	sp, #68	; 0x44
    6a98:	2001      	movs	r0, #1
    6a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a9e:	a904      	add	r1, sp, #16
    6aa0:	4628      	mov	r0, r5
    6aa2:	f008 f84f 	bl	eb44 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    6aa6:	6861      	ldr	r1, [r4, #4]
    6aa8:	f04f 0a00 	mov.w	sl, #0
    6aac:	f101 03b1 	add.w	r3, r1, #177	; 0xb1
    6ab0:	f891 00b1 	ldrb.w	r0, [r1, #177]	; 0xb1
    6ab4:	b138      	cbz	r0, 6ac6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x596>
    6ab6:	f89d 0011 	ldrb.w	r0, [sp, #17]
    6aba:	f8cd a014 	str.w	sl, [sp, #20]
    6abe:	f020 0001 	bic.w	r0, r0, #1
    6ac2:	f88d 0011 	strb.w	r0, [sp, #17]
    6ac6:	7858      	ldrb	r0, [r3, #1]
    6ac8:	b138      	cbz	r0, 6ada <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5aa>
    6aca:	f89d 0011 	ldrb.w	r0, [sp, #17]
    6ace:	f8cd a018 	str.w	sl, [sp, #24]
    6ad2:	f020 0002 	bic.w	r0, r0, #2
    6ad6:	f88d 0011 	strb.w	r0, [sp, #17]
    6ada:	f89d 2010 	ldrb.w	r2, [sp, #16]
    6ade:	f891 10c5 	ldrb.w	r1, [r1, #197]	; 0xc5
    6ae2:	a804      	add	r0, sp, #16
    6ae4:	4291      	cmp	r1, r2
    6ae6:	f040 819f 	bne.w	6e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f8>
    6aea:	4631      	mov	r1, r6
    6aec:	f007 fdf5 	bl	e6da <sym_LAYK5IGLYEFQ5CM2XGZHPMQBISU3CLYKB6Y3VWY>
    6af0:	2501      	movs	r5, #1
    6af2:	b988      	cbnz	r0, 6b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e8>
    6af4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    6af8:	f010 0f08 	tst.w	r0, #8
    6afc:	f000 8194 	beq.w	6e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f8>
    6b00:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b02:	8800      	ldrh	r0, [r0, #0]
    6b04:	f3c0 010b 	ubfx	r1, r0, #0, #12
    6b08:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b0a:	7840      	ldrb	r0, [r0, #1]
    6b0c:	0900      	lsrs	r0, r0, #4
    6b0e:	f007 fdcc 	bl	e6aa <sym_OMJ3SW7NEDZYIEECEHTEY7EFLFDPDBULVOYOR3I>
    6b12:	2800      	cmp	r0, #0
    6b14:	f000 8188 	beq.w	6e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f8>
    6b18:	4632      	mov	r2, r6
    6b1a:	4641      	mov	r1, r8
    6b1c:	a804      	add	r0, sp, #16
    6b1e:	f7ff fe73 	bl	6808 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2d8>
    6b22:	6860      	ldr	r0, [r4, #4]
    6b24:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    6b28:	2900      	cmp	r1, #0
    6b2a:	bf04      	itt	eq
    6b2c:	f890 008b 	ldrbeq.w	r0, [r0, #139]	; 0x8b
    6b30:	2800      	cmpeq	r0, #0
    6b32:	f000 8175 	beq.w	6e20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f0>
    6b36:	9806      	ldr	r0, [sp, #24]
    6b38:	f88d a03c 	strb.w	sl, [sp, #60]	; 0x3c
    6b3c:	f88d a034 	strb.w	sl, [sp, #52]	; 0x34
    6b40:	f88d a038 	strb.w	sl, [sp, #56]	; 0x38
    6b44:	f04f 06ff 	mov.w	r6, #255	; 0xff
    6b48:	b170      	cbz	r0, 6b68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x638>
    6b4a:	ab0e      	add	r3, sp, #56	; 0x38
    6b4c:	aa0f      	add	r2, sp, #60	; 0x3c
    6b4e:	a90d      	add	r1, sp, #52	; 0x34
    6b50:	a804      	add	r0, sp, #16
    6b52:	f7ff fd09 	bl	6568 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>
    6b56:	6860      	ldr	r0, [r4, #4]
    6b58:	f890 6049 	ldrb.w	r6, [r0, #73]	; 0x49
    6b5c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    6b60:	2800      	cmp	r0, #0
    6b62:	bf18      	it	ne
    6b64:	f046 0602 	orrne.w	r6, r6, #2
    6b68:	f10d 0b10 	add.w	fp, sp, #16
    6b6c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    6b70:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    6b74:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
    6b78:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    6b7c:	2a00      	cmp	r2, #0
    6b7e:	d074      	beq.n	6c6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73a>
    6b80:	2109      	movs	r1, #9
    6b82:	2a01      	cmp	r2, #1
    6b84:	d005      	beq.n	6b92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x662>
    6b86:	2a02      	cmp	r2, #2
    6b88:	d070      	beq.n	6c6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73c>
    6b8a:	f001 fe85 	bl	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    6b8e:	f000 b94e 	b.w	6e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    6b92:	f8d4 c004 	ldr.w	ip, [r4, #4]
    6b96:	f89d 3011 	ldrb.w	r3, [sp, #17]
    6b9a:	f89c 20b1 	ldrb.w	r2, [ip, #177]	; 0xb1
    6b9e:	4399      	bics	r1, r3
    6ba0:	d005      	beq.n	6bae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x67e>
    6ba2:	2a00      	cmp	r2, #0
    6ba4:	bf18      	it	ne
    6ba6:	f013 0f08 	tstne.w	r3, #8
    6baa:	f000 8108 	beq.w	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6bae:	f89c 1058 	ldrb.w	r1, [ip, #88]	; 0x58
    6bb2:	2903      	cmp	r1, #3
    6bb4:	d004      	beq.n	6bc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    6bb6:	f013 0f02 	tst.w	r3, #2
    6bba:	d006      	beq.n	6bca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x69a>
    6bbc:	b158      	cbz	r0, 6bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a6>
    6bbe:	e014      	b.n	6bea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6ba>
    6bc0:	2601      	movs	r6, #1
    6bc2:	4607      	mov	r7, r0
    6bc4:	4635      	mov	r5, r6
    6bc6:	bbea      	cbnz	r2, 6c44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x714>
    6bc8:	e023      	b.n	6c12 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e2>
    6bca:	21ff      	movs	r1, #255	; 0xff
    6bcc:	4658      	mov	r0, fp
    6bce:	f001 fad3 	bl	8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
    6bd2:	f000 b8f4 	b.w	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6bd6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    6bda:	f89c 0049 	ldrb.w	r0, [ip, #73]	; 0x49
    6bde:	f10c 014a 	add.w	r1, ip, #74	; 0x4a
    6be2:	9b06      	ldr	r3, [sp, #24]
    6be4:	f007 f83e 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6be8:	b120      	cbz	r0, 6bf4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6c4>
    6bea:	4631      	mov	r1, r6
    6bec:	4658      	mov	r0, fp
    6bee:	f001 fac3 	bl	8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
    6bf2:	e0e4      	b.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6bf4:	6860      	ldr	r0, [r4, #4]
    6bf6:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    6bfa:	2803      	cmp	r0, #3
    6bfc:	bf18      	it	ne
    6bfe:	2802      	cmpne	r0, #2
    6c00:	d179      	bne.n	6cf6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c6>
    6c02:	f1b8 0f00 	cmp.w	r8, #0
    6c06:	d076      	beq.n	6cf6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c6>
    6c08:	21fe      	movs	r1, #254	; 0xfe
    6c0a:	4658      	mov	r0, fp
    6c0c:	f001 fab4 	bl	8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
    6c10:	e0d5      	b.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6c12:	f10c 0194 	add.w	r1, ip, #148	; 0x94
    6c16:	f89c 009b 	ldrb.w	r0, [ip, #155]	; 0x9b
    6c1a:	f89c 2060 	ldrb.w	r2, [ip, #96]	; 0x60
    6c1e:	f10c 0361 	add.w	r3, ip, #97	; 0x61
    6c22:	f007 f81f 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6c26:	6861      	ldr	r1, [r4, #4]
    6c28:	f891 205a 	ldrb.w	r2, [r1, #90]	; 0x5a
    6c2c:	2a01      	cmp	r2, #1
    6c2e:	d00a      	beq.n	6c46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x716>
    6c30:	b932      	cbnz	r2, 6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x710>
    6c32:	b938      	cbnz	r0, 6c44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x714>
    6c34:	f891 0080 	ldrb.w	r0, [r1, #128]	; 0x80
    6c38:	f891 1083 	ldrb.w	r1, [r1, #131]	; 0x83
    6c3c:	4288      	cmp	r0, r1
    6c3e:	d002      	beq.n	6c46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x716>
    6c40:	2600      	movs	r6, #0
    6c42:	e015      	b.n	6c70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x740>
    6c44:	e7ff      	b.n	6c46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x716>
    6c46:	9806      	ldr	r0, [sp, #24]
    6c48:	b190      	cbz	r0, 6c70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x740>
    6c4a:	b967      	cbnz	r7, 6c66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x736>
    6c4c:	f1b9 0f00 	cmp.w	r9, #0
    6c50:	d00d      	beq.n	6c6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73e>
    6c52:	6861      	ldr	r1, [r4, #4]
    6c54:	4603      	mov	r3, r0
    6c56:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    6c5a:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    6c5e:	314a      	adds	r1, #74	; 0x4a
    6c60:	f007 f800 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6c64:	b118      	cbz	r0, 6c6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73e>
    6c66:	2501      	movs	r5, #1
    6c68:	e002      	b.n	6c70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x740>
    6c6a:	e00c      	b.n	6c86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    6c6c:	e044      	b.n	6cf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    6c6e:	2500      	movs	r5, #0
    6c70:	422e      	tst	r6, r5
    6c72:	d040      	beq.n	6cf6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c6>
    6c74:	6860      	ldr	r0, [r4, #4]
    6c76:	308c      	adds	r0, #140	; 0x8c
    6c78:	f008 fd23 	bl	f6c2 <sym_JU742LCDLL7PZRKE4HZMDATVAWDO5RTNLQEGJHI>
    6c7c:	2800      	cmp	r0, #0
    6c7e:	bf18      	it	ne
    6c80:	250e      	movne	r5, #14
    6c82:	d038      	beq.n	6cf6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c6>
    6c84:	e0d3      	b.n	6e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    6c86:	6861      	ldr	r1, [r4, #4]
    6c88:	2701      	movs	r7, #1
    6c8a:	f891 2058 	ldrb.w	r2, [r1, #88]	; 0x58
    6c8e:	2a03      	cmp	r2, #3
    6c90:	d022      	beq.n	6cd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a8>
    6c92:	f89d 2011 	ldrb.w	r2, [sp, #17]
    6c96:	25ff      	movs	r5, #255	; 0xff
    6c98:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6c9c:	b152      	cbz	r2, 6cb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x784>
    6c9e:	4635      	mov	r5, r6
    6ca0:	b940      	cbnz	r0, 6cb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x784>
    6ca2:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    6ca6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    6caa:	314a      	adds	r1, #74	; 0x4a
    6cac:	9b06      	ldr	r3, [sp, #24]
    6cae:	f006 ffd9 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6cb2:	b198      	cbz	r0, 6cdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7ac>
    6cb4:	6860      	ldr	r0, [r4, #4]
    6cb6:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    6cba:	b130      	cbz	r0, 6cca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x79a>
    6cbc:	4864      	ldr	r0, [pc, #400]	; (6e50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x920>)
    6cbe:	6801      	ldr	r1, [r0, #0]
    6cc0:	2900      	cmp	r1, #0
    6cc2:	bf1e      	ittt	ne
    6cc4:	980b      	ldrne	r0, [sp, #44]	; 0x2c
    6cc6:	2800      	cmpne	r0, #0
    6cc8:	4788      	blxne	r1
    6cca:	4629      	mov	r1, r5
    6ccc:	4658      	mov	r0, fp
    6cce:	f000 f9df 	bl	7090 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb60>
    6cd2:	2800      	cmp	r0, #0
    6cd4:	bf18      	it	ne
    6cd6:	2703      	movne	r7, #3
    6cd8:	463d      	mov	r5, r7
    6cda:	e0a8      	b.n	6e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    6cdc:	6860      	ldr	r0, [r4, #4]
    6cde:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    6ce2:	2803      	cmp	r0, #3
    6ce4:	bf18      	it	ne
    6ce6:	2802      	cmpne	r0, #2
    6ce8:	d1f6      	bne.n	6cd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a8>
    6cea:	f1b8 0f00 	cmp.w	r8, #0
    6cee:	bf18      	it	ne
    6cf0:	25fe      	movne	r5, #254	; 0xfe
    6cf2:	d1df      	bne.n	6cb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x784>
    6cf4:	e7f0      	b.n	6cd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a8>
    6cf6:	e062      	b.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6cf8:	f8d4 c004 	ldr.w	ip, [r4, #4]
    6cfc:	f89c 3058 	ldrb.w	r3, [ip, #88]	; 0x58
    6d00:	2b03      	cmp	r3, #3
    6d02:	d05c      	beq.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6d04:	f89d 2011 	ldrb.w	r2, [sp, #17]
    6d08:	4391      	bics	r1, r2
    6d0a:	d158      	bne.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6d0c:	2b02      	cmp	r3, #2
    6d0e:	f002 0102 	and.w	r1, r2, #2
    6d12:	d019      	beq.n	6d48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x818>
    6d14:	2900      	cmp	r1, #0
    6d16:	f43f af58 	beq.w	6bca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x69a>
    6d1a:	2800      	cmp	r0, #0
    6d1c:	f47f af65 	bne.w	6bea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6ba>
    6d20:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    6d24:	f89c 0049 	ldrb.w	r0, [ip, #73]	; 0x49
    6d28:	f10c 014a 	add.w	r1, ip, #74	; 0x4a
    6d2c:	9b06      	ldr	r3, [sp, #24]
    6d2e:	f006 ff99 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6d32:	2800      	cmp	r0, #0
    6d34:	f47f af59 	bne.w	6bea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6ba>
    6d38:	6860      	ldr	r0, [r4, #4]
    6d3a:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    6d3e:	2803      	cmp	r0, #3
    6d40:	bf18      	it	ne
    6d42:	2802      	cmpne	r0, #2
    6d44:	d13b      	bne.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6d46:	e066      	b.n	6e16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e6>
    6d48:	b3d9      	cbz	r1, 6dc2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x892>
    6d4a:	b960      	cbnz	r0, 6d66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x836>
    6d4c:	f1b9 0f00 	cmp.w	r9, #0
    6d50:	d02a      	beq.n	6da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x878>
    6d52:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    6d56:	f89c 0049 	ldrb.w	r0, [ip, #73]	; 0x49
    6d5a:	f10c 014a 	add.w	r1, ip, #74	; 0x4a
    6d5e:	9b06      	ldr	r3, [sp, #24]
    6d60:	f006 ff80 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6d64:	b300      	cbz	r0, 6da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x878>
    6d66:	f994 8000 	ldrsb.w	r8, [r4]
    6d6a:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
    6d6e:	d04d      	beq.n	6e0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8dc>
    6d70:	7027      	strb	r7, [r4, #0]
    6d72:	2003      	movs	r0, #3
    6d74:	f000 f9e6 	bl	7144 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc14>
    6d78:	6860      	ldr	r0, [r4, #4]
    6d7a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    6d7e:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
    6d82:	e9cd 2100 	strd	r2, r1, [sp]
    6d86:	e9cd 8502 	strd	r8, r5, [sp, #8]
    6d8a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    6d8e:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    6d92:	4631      	mov	r1, r6
    6d94:	4658      	mov	r0, fp
    6d96:	f001 fb7d 	bl	8494 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI>
    6d9a:	b180      	cbz	r0, 6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6d9c:	6860      	ldr	r0, [r4, #4]
    6d9e:	308c      	adds	r0, #140	; 0x8c
    6da0:	f008 fc8f 	bl	f6c2 <sym_JU742LCDLL7PZRKE4HZMDATVAWDO5RTNLQEGJHI>
    6da4:	b158      	cbz	r0, 6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6da6:	e02f      	b.n	6e08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8d8>
    6da8:	6860      	ldr	r0, [r4, #4]
    6daa:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    6dae:	2803      	cmp	r0, #3
    6db0:	bf18      	it	ne
    6db2:	2802      	cmpne	r0, #2
    6db4:	d103      	bne.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6db6:	f1b8 0f00 	cmp.w	r8, #0
    6dba:	f47f af25 	bne.w	6c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d8>
    6dbe:	2501      	movs	r5, #1
    6dc0:	e035      	b.n	6e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    6dc2:	e7ff      	b.n	6dc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x894>
    6dc4:	f994 8000 	ldrsb.w	r8, [r4]
    6dc8:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
    6dcc:	d01e      	beq.n	6e0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8dc>
    6dce:	7027      	strb	r7, [r4, #0]
    6dd0:	2003      	movs	r0, #3
    6dd2:	f000 f9b7 	bl	7144 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc14>
    6dd6:	6860      	ldr	r0, [r4, #4]
    6dd8:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    6ddc:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
    6de0:	e9cd 2100 	strd	r2, r1, [sp]
    6de4:	e9cd 8502 	strd	r8, r5, [sp, #8]
    6de8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    6dec:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    6df0:	4631      	mov	r1, r6
    6df2:	4658      	mov	r0, fp
    6df4:	f001 fb4e 	bl	8494 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI>
    6df8:	2800      	cmp	r0, #0
    6dfa:	d0e0      	beq.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6dfc:	6860      	ldr	r0, [r4, #4]
    6dfe:	308c      	adds	r0, #140	; 0x8c
    6e00:	f008 fc5f 	bl	f6c2 <sym_JU742LCDLL7PZRKE4HZMDATVAWDO5RTNLQEGJHI>
    6e04:	2800      	cmp	r0, #0
    6e06:	d0da      	beq.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6e08:	250d      	movs	r5, #13
    6e0a:	e010      	b.n	6e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    6e0c:	f240 411d 	movw	r1, #1053	; 0x41d
    6e10:	2032      	movs	r0, #50	; 0x32
    6e12:	f7fd f8d3 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e16:	f1b8 0f00 	cmp.w	r8, #0
    6e1a:	f47f aef5 	bne.w	6c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d8>
    6e1e:	e7ce      	b.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6e20:	f001 fd3a 	bl	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    6e24:	e7cb      	b.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    6e26:	bf00      	nop
    6e28:	f001 fd36 	bl	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    6e2c:	2501      	movs	r5, #1
    6e2e:	6860      	ldr	r0, [r4, #4]
    6e30:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    6e34:	b130      	cbz	r0, 6e44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x914>
    6e36:	f003 fea5 	bl	ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6e3a:	f003 fd95 	bl	a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6e3e:	6860      	ldr	r0, [r4, #4]
    6e40:	f880 a084 	strb.w	sl, [r0, #132]	; 0x84
    6e44:	b011      	add	sp, #68	; 0x44
    6e46:	4628      	mov	r0, r5
    6e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e4c:	20000288 	.word	0x20000288
    6e50:	2000029c 	.word	0x2000029c
    6e54:	b570      	push	{r4, r5, r6, lr}
    6e56:	4606      	mov	r6, r0
    6e58:	b08a      	sub	sp, #40	; 0x28
    6e5a:	2501      	movs	r5, #1
    6e5c:	481a      	ldr	r0, [pc, #104]	; (6ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x998>)
    6e5e:	f004 fd63 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    6e62:	4c19      	ldr	r4, [pc, #100]	; (6ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x998>)
    6e64:	2800      	cmp	r0, #0
    6e66:	bf04      	itt	eq
    6e68:	207f      	moveq	r0, #127	; 0x7f
    6e6a:	7020      	strbeq	r0, [r4, #0]
    6e6c:	7830      	ldrb	r0, [r6, #0]
    6e6e:	f000 000f 	and.w	r0, r0, #15
    6e72:	2807      	cmp	r0, #7
    6e74:	d125      	bne.n	6ec2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x992>
    6e76:	4669      	mov	r1, sp
    6e78:	4630      	mov	r0, r6
    6e7a:	f007 fe63 	bl	eb44 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    6e7e:	2000      	movs	r0, #0
    6e80:	9002      	str	r0, [sp, #8]
    6e82:	f89d 0000 	ldrb.w	r0, [sp]
    6e86:	b9e0      	cbnz	r0, 6ec2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x992>
    6e88:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6e8c:	f010 0f01 	tst.w	r0, #1
    6e90:	d017      	beq.n	6ec2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x992>
    6e92:	6860      	ldr	r0, [r4, #4]
    6e94:	f89d c011 	ldrb.w	ip, [sp, #17]
    6e98:	f100 0394 	add.w	r3, r0, #148	; 0x94
    6e9c:	f890 209b 	ldrb.w	r2, [r0, #155]	; 0x9b
    6ea0:	4660      	mov	r0, ip
    6ea2:	9901      	ldr	r1, [sp, #4]
    6ea4:	f006 fede 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6ea8:	b158      	cbz	r0, 6ec2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x992>
    6eaa:	6860      	ldr	r0, [r4, #4]
    6eac:	2101      	movs	r1, #1
    6eae:	308c      	adds	r0, #140	; 0x8c
    6eb0:	f008 fc21 	bl	f6f6 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY>
    6eb4:	21ff      	movs	r1, #255	; 0xff
    6eb6:	4668      	mov	r0, sp
    6eb8:	f000 f8ea 	bl	7090 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb60>
    6ebc:	2800      	cmp	r0, #0
    6ebe:	bf18      	it	ne
    6ec0:	2503      	movne	r5, #3
    6ec2:	4628      	mov	r0, r5
    6ec4:	b00a      	add	sp, #40	; 0x28
    6ec6:	bd70      	pop	{r4, r5, r6, pc}
    6ec8:	20000288 	.word	0x20000288
    6ecc:	b570      	push	{r4, r5, r6, lr}
    6ece:	4604      	mov	r4, r0
    6ed0:	b08a      	sub	sp, #40	; 0x28
    6ed2:	483f      	ldr	r0, [pc, #252]	; (6fd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa0>)
    6ed4:	f004 fd28 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    6ed8:	4e3d      	ldr	r6, [pc, #244]	; (6fd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa0>)
    6eda:	2800      	cmp	r0, #0
    6edc:	bf04      	itt	eq
    6ede:	207f      	moveq	r0, #127	; 0x7f
    6ee0:	7030      	strbeq	r0, [r6, #0]
    6ee2:	7820      	ldrb	r0, [r4, #0]
    6ee4:	4669      	mov	r1, sp
    6ee6:	f000 050f 	and.w	r5, r0, #15
    6eea:	4620      	mov	r0, r4
    6eec:	f007 fe2a 	bl	eb44 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    6ef0:	2400      	movs	r4, #0
    6ef2:	2d07      	cmp	r5, #7
    6ef4:	d12a      	bne.n	6f4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    6ef6:	6870      	ldr	r0, [r6, #4]
    6ef8:	f89d 1000 	ldrb.w	r1, [sp]
    6efc:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
    6f00:	2902      	cmp	r1, #2
    6f02:	bf08      	it	eq
    6f04:	f89d 0001 	ldrbeq.w	r0, [sp, #1]
    6f08:	d01a      	beq.n	6f40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa10>
    6f0a:	2901      	cmp	r1, #1
    6f0c:	d001      	beq.n	6f12 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e2>
    6f0e:	b179      	cbz	r1, 6f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa00>
    6f10:	e01c      	b.n	6f4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    6f12:	f89d 1001 	ldrb.w	r1, [sp, #1]
    6f16:	9402      	str	r4, [sp, #8]
    6f18:	f021 0102 	bic.w	r1, r1, #2
    6f1c:	f88d 1001 	strb.w	r1, [sp, #1]
    6f20:	2802      	cmp	r0, #2
    6f22:	d013      	beq.n	6f4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    6f24:	f021 0001 	bic.w	r0, r1, #1
    6f28:	f88d 0001 	strb.w	r0, [sp, #1]
    6f2c:	9401      	str	r4, [sp, #4]
    6f2e:	e00d      	b.n	6f4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    6f30:	f010 0f0c 	tst.w	r0, #12
    6f34:	bf1c      	itt	ne
    6f36:	f89d 0001 	ldrbne.w	r0, [sp, #1]
    6f3a:	f010 0f10 	tstne.w	r0, #16
    6f3e:	d005      	beq.n	6f4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    6f40:	f020 0003 	bic.w	r0, r0, #3
    6f44:	9401      	str	r4, [sp, #4]
    6f46:	f88d 0001 	strb.w	r0, [sp, #1]
    6f4a:	9402      	str	r4, [sp, #8]
    6f4c:	2200      	movs	r2, #0
    6f4e:	4629      	mov	r1, r5
    6f50:	4668      	mov	r0, sp
    6f52:	f7ff fc59 	bl	6808 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2d8>
    6f56:	6870      	ldr	r0, [r6, #4]
    6f58:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
    6f5c:	2801      	cmp	r0, #1
    6f5e:	d00b      	beq.n	6f78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa48>
    6f60:	2802      	cmp	r0, #2
    6f62:	d016      	beq.n	6f92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa62>
    6f64:	2804      	cmp	r0, #4
    6f66:	bf18      	it	ne
    6f68:	2808      	cmpne	r0, #8
    6f6a:	d019      	beq.n	6fa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa70>
    6f6c:	f241 3184 	movw	r1, #4996	; 0x1384
    6f70:	f04f 0032 	mov.w	r0, #50	; 0x32
    6f74:	f7fd f822 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f78:	2d08      	cmp	r5, #8
    6f7a:	d213      	bcs.n	6fa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa74>
    6f7c:	e8df f005 	tbb	[pc, r5]
    6f80:	12040404 	.word	0x12040404
    6f84:	16041212 	.word	0x16041212
    6f88:	4629      	mov	r1, r5
    6f8a:	4668      	mov	r0, sp
    6f8c:	f000 fae2 	bl	7554 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1024>
    6f90:	e00f      	b.n	6fb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa82>
    6f92:	2d07      	cmp	r5, #7
    6f94:	bf04      	itt	eq
    6f96:	f89d 0000 	ldrbeq.w	r0, [sp]
    6f9a:	2801      	cmpeq	r0, #1
    6f9c:	d102      	bne.n	6fa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa74>
    6f9e:	e005      	b.n	6fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa7c>
    6fa0:	2d07      	cmp	r5, #7
    6fa2:	d003      	beq.n	6fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa7c>
    6fa4:	f003 fe10 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fa8:	2505      	movs	r5, #5
    6faa:	e003      	b.n	6fb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa84>
    6fac:	4668      	mov	r0, sp
    6fae:	f000 f977 	bl	72a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd70>
    6fb2:	4605      	mov	r5, r0
    6fb4:	6870      	ldr	r0, [r6, #4]
    6fb6:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    6fba:	b130      	cbz	r0, 6fca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa9a>
    6fbc:	f003 fde2 	bl	ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6fc0:	f003 fcd2 	bl	a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6fc4:	6870      	ldr	r0, [r6, #4]
    6fc6:	f880 4084 	strb.w	r4, [r0, #132]	; 0x84
    6fca:	b00a      	add	sp, #40	; 0x28
    6fcc:	4628      	mov	r0, r5
    6fce:	bd70      	pop	{r4, r5, r6, pc}
    6fd0:	20000288 	.word	0x20000288
    6fd4:	b570      	push	{r4, r5, r6, lr}
    6fd6:	7801      	ldrb	r1, [r0, #0]
    6fd8:	b08a      	sub	sp, #40	; 0x28
    6fda:	f001 060f 	and.w	r6, r1, #15
    6fde:	4632      	mov	r2, r6
    6fe0:	a901      	add	r1, sp, #4
    6fe2:	f001 fcc9 	bl	8978 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6fe6:	9802      	ldr	r0, [sp, #8]
    6fe8:	4c28      	ldr	r4, [pc, #160]	; (708c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb5c>)
    6fea:	7801      	ldrb	r1, [r0, #0]
    6fec:	6860      	ldr	r0, [r4, #4]
    6fee:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    6ff2:	4291      	cmp	r1, r2
    6ff4:	d125      	bne.n	7042 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb12>
    6ff6:	9902      	ldr	r1, [sp, #8]
    6ff8:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    6ffc:	7849      	ldrb	r1, [r1, #1]
    6ffe:	4291      	cmp	r1, r2
    7000:	d11f      	bne.n	7042 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb12>
    7002:	9902      	ldr	r1, [sp, #8]
    7004:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    7008:	7889      	ldrb	r1, [r1, #2]
    700a:	4291      	cmp	r1, r2
    700c:	d119      	bne.n	7042 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb12>
    700e:	9902      	ldr	r1, [sp, #8]
    7010:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    7014:	78c9      	ldrb	r1, [r1, #3]
    7016:	4291      	cmp	r1, r2
    7018:	d113      	bne.n	7042 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb12>
    701a:	9902      	ldr	r1, [sp, #8]
    701c:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    7020:	7909      	ldrb	r1, [r1, #4]
    7022:	4291      	cmp	r1, r2
    7024:	d10d      	bne.n	7042 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb12>
    7026:	9902      	ldr	r1, [sp, #8]
    7028:	f890 2099 	ldrb.w	r2, [r0, #153]	; 0x99
    702c:	7949      	ldrb	r1, [r1, #5]
    702e:	4291      	cmp	r1, r2
    7030:	d107      	bne.n	7042 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb12>
    7032:	f89d 1015 	ldrb.w	r1, [sp, #21]
    7036:	f890 009b 	ldrb.w	r0, [r0, #155]	; 0x9b
    703a:	4281      	cmp	r1, r0
    703c:	bf08      	it	eq
    703e:	2501      	moveq	r5, #1
    7040:	d000      	beq.n	7044 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
    7042:	2500      	movs	r5, #0
    7044:	f003 fdc0 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7048:	4810      	ldr	r0, [pc, #64]	; (708c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb5c>)
    704a:	f004 fc6d 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    704e:	217f      	movs	r1, #127	; 0x7f
    7050:	2800      	cmp	r0, #0
    7052:	bf08      	it	eq
    7054:	7021      	strbeq	r1, [r4, #0]
    7056:	2e04      	cmp	r6, #4
    7058:	d110      	bne.n	707c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb4c>
    705a:	b17d      	cbz	r5, 707c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb4c>
    705c:	f994 0000 	ldrsb.w	r0, [r4]
    7060:	287f      	cmp	r0, #127	; 0x7f
    7062:	d00e      	beq.n	7082 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb52>
    7064:	7021      	strb	r1, [r4, #0]
    7066:	9000      	str	r0, [sp, #0]
    7068:	6860      	ldr	r0, [r4, #4]
    706a:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    706e:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    7072:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    7076:	a801      	add	r0, sp, #4
    7078:	f007 fc1d 	bl	e8b6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    707c:	b00a      	add	sp, #40	; 0x28
    707e:	2005      	movs	r0, #5
    7080:	bd70      	pop	{r4, r5, r6, pc}
    7082:	f240 411d 	movw	r1, #1053	; 0x41d
    7086:	2032      	movs	r0, #50	; 0x32
    7088:	f7fc ff98 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    708c:	20000288 	.word	0x20000288
    7090:	b5f0      	push	{r4, r5, r6, r7, lr}
    7092:	4c2b      	ldr	r4, [pc, #172]	; (7140 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc10>)
    7094:	4606      	mov	r6, r0
    7096:	b085      	sub	sp, #20
    7098:	6862      	ldr	r2, [r4, #4]
    709a:	f892 008a 	ldrb.w	r0, [r2, #138]	; 0x8a
    709e:	2800      	cmp	r0, #0
    70a0:	bf04      	itt	eq
    70a2:	b005      	addeq	sp, #20
    70a4:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    70a6:	2700      	movs	r7, #0
    70a8:	f892 00b0 	ldrb.w	r0, [r2, #176]	; 0xb0
    70ac:	2800      	cmp	r0, #0
    70ae:	d030      	beq.n	7112 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbe2>
    70b0:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
    70b4:	2808      	cmp	r0, #8
    70b6:	bf08      	it	eq
    70b8:	2503      	moveq	r5, #3
    70ba:	d003      	beq.n	70c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb94>
    70bc:	2809      	cmp	r0, #9
    70be:	bf14      	ite	ne
    70c0:	2501      	movne	r5, #1
    70c2:	2502      	moveq	r5, #2
    70c4:	f994 0000 	ldrsb.w	r0, [r4]
    70c8:	287f      	cmp	r0, #127	; 0x7f
    70ca:	d02a      	beq.n	7122 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf2>
    70cc:	237f      	movs	r3, #127	; 0x7f
    70ce:	7023      	strb	r3, [r4, #0]
    70d0:	f892 3081 	ldrb.w	r3, [r2, #129]	; 0x81
    70d4:	f892 c09a 	ldrb.w	ip, [r2, #154]	; 0x9a
    70d8:	f8cd c000 	str.w	ip, [sp]
    70dc:	9503      	str	r5, [sp, #12]
    70de:	e9cd 3001 	strd	r3, r0, [sp, #4]
    70e2:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
    70e6:	4630      	mov	r0, r6
    70e8:	324a      	adds	r2, #74	; 0x4a
    70ea:	f001 f9d3 	bl	8494 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI>
    70ee:	b1e8      	cbz	r0, 712c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbfc>
    70f0:	7870      	ldrb	r0, [r6, #1]
    70f2:	f010 0f10 	tst.w	r0, #16
    70f6:	d020      	beq.n	713a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc0a>
    70f8:	2002      	movs	r0, #2
    70fa:	69b1      	ldr	r1, [r6, #24]
    70fc:	f7ff faaa 	bl	6654 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x124>
    7100:	b1b0      	cbz	r0, 7130 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc00>
    7102:	6861      	ldr	r1, [r4, #4]
    7104:	2000      	movs	r0, #0
    7106:	2701      	movs	r7, #1
    7108:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
    710c:	f003 fd5c 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7110:	e010      	b.n	7134 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>
    7112:	7830      	ldrb	r0, [r6, #0]
    7114:	2800      	cmp	r0, #0
    7116:	bf14      	ite	ne
    7118:	2002      	movne	r0, #2
    711a:	2001      	moveq	r0, #1
    711c:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    7120:	e7c6      	b.n	70b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb80>
    7122:	f240 411d 	movw	r1, #1053	; 0x41d
    7126:	2032      	movs	r0, #50	; 0x32
    7128:	f7fc ff48 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    712c:	2d02      	cmp	r5, #2
    712e:	d001      	beq.n	7134 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>
    7130:	f001 fbb2 	bl	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    7134:	b005      	add	sp, #20
    7136:	4638      	mov	r0, r7
    7138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    713a:	f001 fb6d 	bl	8818 <sym_FO2KXXPMB6IQFAA5KGFFJWZILDAFSKWASS4B2FY>
    713e:	e7f9      	b.n	7134 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>
    7140:	20000288 	.word	0x20000288
    7144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7148:	4c54      	ldr	r4, [pc, #336]	; (729c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd6c>)
    714a:	4607      	mov	r7, r0
    714c:	2100      	movs	r1, #0
    714e:	6860      	ldr	r0, [r4, #4]
    7150:	2f03      	cmp	r7, #3
    7152:	f100 0678 	add.w	r6, r0, #120	; 0x78
    7156:	68a0      	ldr	r0, [r4, #8]
    7158:	8001      	strh	r1, [r0, #0]
    715a:	d002      	beq.n	7162 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc32>
    715c:	2f05      	cmp	r7, #5
    715e:	d004      	beq.n	716a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc3a>
    7160:	e05a      	b.n	7218 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce8>
    7162:	2103      	movs	r1, #3
    7164:	f007 f9ca 	bl	e4fc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7168:	e056      	b.n	7218 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce8>
    716a:	2105      	movs	r1, #5
    716c:	f007 f9c6 	bl	e4fc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7170:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    7174:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7176:	6989      	ldr	r1, [r1, #24]
    7178:	f8c5 100f 	str.w	r1, [r5, #15]
    717c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    717e:	8c0a      	ldrh	r2, [r1, #32]
    7180:	f8a5 2013 	strh.w	r2, [r5, #19]
    7184:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    7188:	7569      	strb	r1, [r5, #21]
    718a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    718c:	6941      	ldr	r1, [r0, #20]
    718e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    7190:	f7fe f934 	bl	53fc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    7194:	75a8      	strb	r0, [r5, #22]
    7196:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    719a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    719c:	6941      	ldr	r1, [r0, #20]
    719e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    71a0:	f7fe f91a 	bl	53d8 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    71a4:	75e8      	strb	r0, [r5, #23]
    71a6:	0a00      	lsrs	r0, r0, #8
    71a8:	7628      	strb	r0, [r5, #24]
    71aa:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    71ae:	6d40      	ldr	r0, [r0, #84]	; 0x54
    71b0:	6940      	ldr	r0, [r0, #20]
    71b2:	f006 fe4d 	bl	de50 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    71b6:	7668      	strb	r0, [r5, #25]
    71b8:	0a00      	lsrs	r0, r0, #8
    71ba:	76a8      	strb	r0, [r5, #26]
    71bc:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    71c0:	6d51      	ldr	r1, [r2, #84]	; 0x54
    71c2:	8b89      	ldrh	r1, [r1, #28]
    71c4:	76c1      	strb	r1, [r0, #27]
    71c6:	0a09      	lsrs	r1, r1, #8
    71c8:	7701      	strb	r1, [r0, #28]
    71ca:	6d51      	ldr	r1, [r2, #84]	; 0x54
    71cc:	8bc9      	ldrh	r1, [r1, #30]
    71ce:	7741      	strb	r1, [r0, #29]
    71d0:	0a09      	lsrs	r1, r1, #8
    71d2:	7781      	strb	r1, [r0, #30]
    71d4:	6d51      	ldr	r1, [r2, #84]	; 0x54
    71d6:	301f      	adds	r0, #31
    71d8:	31a7      	adds	r1, #167	; 0xa7
    71da:	f008 fb17 	bl	f80c <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    71de:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    71e2:	6d40      	ldr	r0, [r0, #84]	; 0x54
    71e4:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    71e8:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    71ec:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    71f0:	f000 001f 	and.w	r0, r0, #31
    71f4:	4308      	orrs	r0, r1
    71f6:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    71fa:	f003 fb55 	bl	a8a8 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    71fe:	2807      	cmp	r0, #7
    7200:	bf88      	it	hi
    7202:	2007      	movhi	r0, #7
    7204:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    7208:	22e0      	movs	r2, #224	; 0xe0
    720a:	f001 011f 	and.w	r1, r1, #31
    720e:	ea02 1040 	and.w	r0, r2, r0, lsl #5
    7212:	4308      	orrs	r0, r1
    7214:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    7218:	f106 011c 	add.w	r1, r6, #28
    721c:	68a0      	ldr	r0, [r4, #8]
    721e:	f007 f98f 	bl	e540 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7222:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    7226:	68a0      	ldr	r0, [r4, #8]
    7228:	f007 f991 	bl	e54e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    722c:	6860      	ldr	r0, [r4, #4]
    722e:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    7232:	f890 6049 	ldrb.w	r6, [r0, #73]	; 0x49
    7236:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    723a:	b1a1      	cbz	r1, 7266 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd36>
    723c:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    7240:	f04f 0801 	mov.w	r8, #1
    7244:	2903      	cmp	r1, #3
    7246:	d106      	bne.n	7256 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd26>
    7248:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    724c:	2900      	cmp	r1, #0
    724e:	bf18      	it	ne
    7250:	f890 0083 	ldrbne.w	r0, [r0, #131]	; 0x83
    7254:	d101      	bne.n	725a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd2a>
    7256:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    725a:	f7fd fd8d 	bl	4d78 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    725e:	2800      	cmp	r0, #0
    7260:	bf1c      	itt	ne
    7262:	4646      	movne	r6, r8
    7264:	4605      	movne	r5, r0
    7266:	4629      	mov	r1, r5
    7268:	68a0      	ldr	r0, [r4, #8]
    726a:	f007 f979 	bl	e560 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    726e:	4631      	mov	r1, r6
    7270:	68a0      	ldr	r0, [r4, #8]
    7272:	f007 f97c 	bl	e56e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7276:	68a0      	ldr	r0, [r4, #8]
    7278:	f004 f952 	bl	b520 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    727c:	2f05      	cmp	r7, #5
    727e:	bf18      	it	ne
    7280:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    7284:	6860      	ldr	r0, [r4, #4]
    7286:	682a      	ldr	r2, [r5, #0]
    7288:	6d41      	ldr	r1, [r0, #84]	; 0x54
    728a:	f8c1 200a 	str.w	r2, [r1, #10]
    728e:	88aa      	ldrh	r2, [r5, #4]
    7290:	81ca      	strh	r2, [r1, #14]
    7292:	6d40      	ldr	r0, [r0, #84]	; 0x54
    7294:	7246      	strb	r6, [r0, #9]
    7296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    729a:	0000      	.short	0x0000
    729c:	20000288 	.word	0x20000288
    72a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72a4:	4caa      	ldr	r4, [pc, #680]	; (7550 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1020>)
    72a6:	b087      	sub	sp, #28
    72a8:	f04f 0a05 	mov.w	sl, #5
    72ac:	6861      	ldr	r1, [r4, #4]
    72ae:	f891 205b 	ldrb.w	r2, [r1, #91]	; 0x5b
    72b2:	b1c2      	cbz	r2, 72e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb6>
    72b4:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
    72b8:	2a00      	cmp	r2, #0
    72ba:	bf04      	itt	eq
    72bc:	f891 108b 	ldrbeq.w	r1, [r1, #139]	; 0x8b
    72c0:	2900      	cmpeq	r1, #0
    72c2:	d010      	beq.n	72e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb6>
    72c4:	7801      	ldrb	r1, [r0, #0]
    72c6:	f04f 067f 	mov.w	r6, #127	; 0x7f
    72ca:	f04f 0801 	mov.w	r8, #1
    72ce:	f04f 0500 	mov.w	r5, #0
    72d2:	b171      	cbz	r1, 72f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdc2>
    72d4:	f04f 0702 	mov.w	r7, #2
    72d8:	f04f 0918 	mov.w	r9, #24
    72dc:	2901      	cmp	r1, #1
    72de:	d07c      	beq.n	73da <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xeaa>
    72e0:	2902      	cmp	r1, #2
    72e2:	f000 80fd 	beq.w	74e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfb0>
    72e6:	f003 fc6f 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    72ea:	b007      	add	sp, #28
    72ec:	4650      	mov	r0, sl
    72ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72f2:	4607      	mov	r7, r0
    72f4:	f003 fc68 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    72f8:	6860      	ldr	r0, [r4, #4]
    72fa:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    72fe:	2803      	cmp	r0, #3
    7300:	f000 811c 	beq.w	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    7304:	7878      	ldrb	r0, [r7, #1]
    7306:	f3c0 1900 	ubfx	r9, r0, #4, #1
    730a:	f1b9 0f00 	cmp.w	r9, #0
    730e:	bf0c      	ite	eq
    7310:	2101      	moveq	r1, #1
    7312:	2108      	movne	r1, #8
    7314:	ea31 0000 	bics.w	r0, r1, r0
    7318:	f040 8110 	bne.w	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    731c:	68b8      	ldr	r0, [r7, #8]
    731e:	2800      	cmp	r0, #0
    7320:	bf18      	it	ne
    7322:	2001      	movne	r0, #1
    7324:	f88d 5010 	strb.w	r5, [sp, #16]
    7328:	f88d 5014 	strb.w	r5, [sp, #20]
    732c:	f88d 5018 	strb.w	r5, [sp, #24]
    7330:	2800      	cmp	r0, #0
    7332:	bf08      	it	eq
    7334:	21ff      	moveq	r1, #255	; 0xff
    7336:	d017      	beq.n	7368 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe38>
    7338:	ab06      	add	r3, sp, #24
    733a:	aa04      	add	r2, sp, #16
    733c:	a905      	add	r1, sp, #20
    733e:	4638      	mov	r0, r7
    7340:	f7ff f912 	bl	6568 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>
    7344:	6861      	ldr	r1, [r4, #4]
    7346:	f89d 2010 	ldrb.w	r2, [sp, #16]
    734a:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    734e:	2a00      	cmp	r2, #0
    7350:	4680      	mov	r8, r0
    7352:	bf18      	it	ne
    7354:	f048 0802 	orrne.w	r8, r8, #2
    7358:	d105      	bne.n	7366 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe36>
    735a:	7cba      	ldrb	r2, [r7, #18]
    735c:	314a      	adds	r1, #74	; 0x4a
    735e:	68bb      	ldr	r3, [r7, #8]
    7360:	f006 fc80 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7364:	b338      	cbz	r0, 73b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe86>
    7366:	4641      	mov	r1, r8
    7368:	f1b9 0f00 	cmp.w	r9, #0
    736c:	d036      	beq.n	73dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xeac>
    736e:	f994 0000 	ldrsb.w	r0, [r4]
    7372:	287f      	cmp	r0, #127	; 0x7f
    7374:	d071      	beq.n	745a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf2a>
    7376:	7026      	strb	r6, [r4, #0]
    7378:	6862      	ldr	r2, [r4, #4]
    737a:	f892 3081 	ldrb.w	r3, [r2, #129]	; 0x81
    737e:	f892 c09a 	ldrb.w	ip, [r2, #154]	; 0x9a
    7382:	f8cd c000 	str.w	ip, [sp]
    7386:	9503      	str	r5, [sp, #12]
    7388:	e9cd 3001 	strd	r3, r0, [sp, #4]
    738c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
    7390:	4638      	mov	r0, r7
    7392:	324a      	adds	r2, #74	; 0x4a
    7394:	f001 f87e 	bl	8494 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI>
    7398:	2800      	cmp	r0, #0
    739a:	d07d      	beq.n	7498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf68>
    739c:	2001      	movs	r0, #1
    739e:	69b9      	ldr	r1, [r7, #24]
    73a0:	f7ff f958 	bl	6654 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x124>
    73a4:	2800      	cmp	r0, #0
    73a6:	d077      	beq.n	7498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf68>
    73a8:	6860      	ldr	r0, [r4, #4]
    73aa:	f880 50c5 	strb.w	r5, [r0, #197]	; 0xc5
    73ae:	b007      	add	sp, #28
    73b0:	2003      	movs	r0, #3
    73b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    73b6:	6860      	ldr	r0, [r4, #4]
    73b8:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    73bc:	2803      	cmp	r0, #3
    73be:	bf18      	it	ne
    73c0:	2802      	cmpne	r0, #2
    73c2:	d169      	bne.n	7498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf68>
    73c4:	f89d 0014 	ldrb.w	r0, [sp, #20]
    73c8:	2800      	cmp	r0, #0
    73ca:	d065      	beq.n	7498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf68>
    73cc:	f89d 0010 	ldrb.w	r0, [sp, #16]
    73d0:	2800      	cmp	r0, #0
    73d2:	bf08      	it	eq
    73d4:	21fe      	moveq	r1, #254	; 0xfe
    73d6:	d0c7      	beq.n	7368 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe38>
    73d8:	e0b0      	b.n	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    73da:	e003      	b.n	73e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xeb4>
    73dc:	4638      	mov	r0, r7
    73de:	f000 fecb 	bl	8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
    73e2:	e0ab      	b.n	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    73e4:	4682      	mov	sl, r0
    73e6:	f003 fbef 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    73ea:	6860      	ldr	r0, [r4, #4]
    73ec:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    73f0:	2902      	cmp	r1, #2
    73f2:	f89a 1001 	ldrb.w	r1, [sl, #1]
    73f6:	d003      	beq.n	7400 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xed0>
    73f8:	ea39 0101 	bics.w	r1, r9, r1
    73fc:	d004      	beq.n	7408 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xed8>
    73fe:	e09d      	b.n	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    7400:	2219      	movs	r2, #25
    7402:	ea32 0101 	bics.w	r1, r2, r1
    7406:	d147      	bne.n	7498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf68>
    7408:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    740c:	2903      	cmp	r1, #3
    740e:	d13f      	bne.n	7490 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf60>
    7410:	f8da 1004 	ldr.w	r1, [sl, #4]
    7414:	2900      	cmp	r1, #0
    7416:	bf14      	ite	ne
    7418:	2100      	movne	r1, #0
    741a:	2101      	moveq	r1, #1
    741c:	f04f 0b01 	mov.w	fp, #1
    7420:	46d9      	mov	r9, fp
    7422:	b9d9      	cbnz	r1, 745c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf2c>
    7424:	f890 c09b 	ldrb.w	ip, [r0, #155]	; 0x9b
    7428:	f100 0194 	add.w	r1, r0, #148	; 0x94
    742c:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
    7430:	f100 0361 	add.w	r3, r0, #97	; 0x61
    7434:	4660      	mov	r0, ip
    7436:	f006 fc15 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    743a:	6861      	ldr	r1, [r4, #4]
    743c:	f891 205a 	ldrb.w	r2, [r1, #90]	; 0x5a
    7440:	2a01      	cmp	r2, #1
    7442:	d00b      	beq.n	745c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf2c>
    7444:	b932      	cbnz	r2, 7454 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf24>
    7446:	b948      	cbnz	r0, 745c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf2c>
    7448:	f891 0080 	ldrb.w	r0, [r1, #128]	; 0x80
    744c:	f891 1083 	ldrb.w	r1, [r1, #131]	; 0x83
    7450:	4288      	cmp	r0, r1
    7452:	d003      	beq.n	745c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf2c>
    7454:	f04f 0b00 	mov.w	fp, #0
    7458:	e006      	b.n	7468 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf38>
    745a:	e073      	b.n	7544 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1014>
    745c:	f8da 0008 	ldr.w	r0, [sl, #8]
    7460:	2800      	cmp	r0, #0
    7462:	bf18      	it	ne
    7464:	f04f 0900 	movne.w	r9, #0
    7468:	ea1b 0f09 	tst.w	fp, r9
    746c:	d066      	beq.n	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    746e:	f8da 0018 	ldr.w	r0, [sl, #24]
    7472:	7880      	ldrb	r0, [r0, #2]
    7474:	f010 0fe0 	tst.w	r0, #224	; 0xe0
    7478:	d103      	bne.n	7482 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf52>
    747a:	6861      	ldr	r1, [r4, #4]
    747c:	f891 1086 	ldrb.w	r1, [r1, #134]	; 0x86
    7480:	b151      	cbz	r1, 7498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf68>
    7482:	ebb7 1f50 	cmp.w	r7, r0, lsr #5
    7486:	d103      	bne.n	7490 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf60>
    7488:	6860      	ldr	r0, [r4, #4]
    748a:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    748e:	b118      	cbz	r0, 7498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf68>
    7490:	f994 0000 	ldrsb.w	r0, [r4]
    7494:	287f      	cmp	r0, #127	; 0x7f
    7496:	e000      	b.n	749a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf6a>
    7498:	e050      	b.n	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    749a:	d053      	beq.n	7544 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1014>
    749c:	7026      	strb	r6, [r4, #0]
    749e:	6861      	ldr	r1, [r4, #4]
    74a0:	f891 2081 	ldrb.w	r2, [r1, #129]	; 0x81
    74a4:	f891 309a 	ldrb.w	r3, [r1, #154]	; 0x9a
    74a8:	e9cd 3200 	strd	r3, r2, [sp]
    74ac:	e9cd 0502 	strd	r0, r5, [sp, #8]
    74b0:	f891 30c1 	ldrb.w	r3, [r1, #193]	; 0xc1
    74b4:	f101 024a 	add.w	r2, r1, #74	; 0x4a
    74b8:	21ff      	movs	r1, #255	; 0xff
    74ba:	4650      	mov	r0, sl
    74bc:	f000 ffea 	bl	8494 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI>
    74c0:	b3e0      	cbz	r0, 753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    74c2:	2001      	movs	r0, #1
    74c4:	f8da 1018 	ldr.w	r1, [sl, #24]
    74c8:	f7ff f8c4 	bl	6654 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x124>
    74cc:	2800      	cmp	r0, #0
    74ce:	bf1c      	itt	ne
    74d0:	6860      	ldrne	r0, [r4, #4]
    74d2:	f880 80c5 	strbne.w	r8, [r0, #197]	; 0xc5
    74d6:	d031      	beq.n	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    74d8:	b007      	add	sp, #28
    74da:	2003      	movs	r0, #3
    74dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74e0:	4680      	mov	r8, r0
    74e2:	f003 fb71 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    74e6:	6860      	ldr	r0, [r4, #4]
    74e8:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    74ec:	2903      	cmp	r1, #3
    74ee:	d025      	beq.n	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    74f0:	f898 1001 	ldrb.w	r1, [r8, #1]
    74f4:	ea39 0101 	bics.w	r1, r9, r1
    74f8:	d120      	bne.n	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    74fa:	f994 1000 	ldrsb.w	r1, [r4]
    74fe:	297f      	cmp	r1, #127	; 0x7f
    7500:	d020      	beq.n	7544 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1014>
    7502:	7026      	strb	r6, [r4, #0]
    7504:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
    7508:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    750c:	e9cd 3200 	strd	r3, r2, [sp]
    7510:	e9cd 1502 	strd	r1, r5, [sp, #8]
    7514:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    7518:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    751c:	21ff      	movs	r1, #255	; 0xff
    751e:	4640      	mov	r0, r8
    7520:	f000 ffb8 	bl	8494 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI>
    7524:	b150      	cbz	r0, 753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x100c>
    7526:	2001      	movs	r0, #1
    7528:	f8d8 1018 	ldr.w	r1, [r8, #24]
    752c:	f7ff f892 	bl	6654 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x124>
    7530:	2800      	cmp	r0, #0
    7532:	bf1c      	itt	ne
    7534:	6860      	ldrne	r0, [r4, #4]
    7536:	f880 70c5 	strbne.w	r7, [r0, #197]	; 0xc5
    753a:	d1cd      	bne.n	74d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfa8>
    753c:	b007      	add	sp, #28
    753e:	2005      	movs	r0, #5
    7540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7544:	f240 411d 	movw	r1, #1053	; 0x41d
    7548:	2032      	movs	r0, #50	; 0x32
    754a:	f7fc fd37 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    754e:	0000      	.short	0x0000
    7550:	20000288 	.word	0x20000288
    7554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7558:	4cee      	ldr	r4, [pc, #952]	; (7914 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13e4>)
    755a:	267f      	movs	r6, #127	; 0x7f
    755c:	2701      	movs	r7, #1
    755e:	2500      	movs	r5, #0
    7560:	f994 3000 	ldrsb.w	r3, [r4]
    7564:	6862      	ldr	r2, [r4, #4]
    7566:	b083      	sub	sp, #12
    7568:	2900      	cmp	r1, #0
    756a:	d067      	beq.n	763c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x110c>
    756c:	2901      	cmp	r1, #1
    756e:	d07c      	beq.n	766a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x113a>
    7570:	2705      	movs	r7, #5
    7572:	2902      	cmp	r1, #2
    7574:	d007      	beq.n	7586 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1056>
    7576:	2906      	cmp	r1, #6
    7578:	d02a      	beq.n	75d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10a0>
    757a:	f003 fb25 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    757e:	b003      	add	sp, #12
    7580:	4638      	mov	r0, r7
    7582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7586:	4605      	mov	r5, r0
    7588:	f003 fb1e 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    758c:	6860      	ldr	r0, [r4, #4]
    758e:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    7592:	b1c9      	cbz	r1, 75c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1098>
    7594:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    7598:	2901      	cmp	r1, #1
    759a:	bf18      	it	ne
    759c:	2902      	cmpne	r1, #2
    759e:	d113      	bne.n	75c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1098>
    75a0:	f994 1000 	ldrsb.w	r1, [r4]
    75a4:	297f      	cmp	r1, #127	; 0x7f
    75a6:	f000 81b0 	beq.w	790a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13da>
    75aa:	7026      	strb	r6, [r4, #0]
    75ac:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
    75b0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    75b4:	e9cd 3200 	strd	r3, r2, [sp]
    75b8:	9102      	str	r1, [sp, #8]
    75ba:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    75be:	23ff      	movs	r3, #255	; 0xff
    75c0:	2102      	movs	r1, #2
    75c2:	4628      	mov	r0, r5
    75c4:	f007 f8d3 	bl	e76e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    75c8:	b003      	add	sp, #12
    75ca:	4638      	mov	r0, r7
    75cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75d0:	f892 108a 	ldrb.w	r1, [r2, #138]	; 0x8a
    75d4:	b129      	cbz	r1, 75e2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10b2>
    75d6:	f892 1058 	ldrb.w	r1, [r2, #88]	; 0x58
    75da:	2902      	cmp	r1, #2
    75dc:	d007      	beq.n	75ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10be>
    75de:	2901      	cmp	r1, #1
    75e0:	d01d      	beq.n	761e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10ee>
    75e2:	f003 faf1 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    75e6:	b003      	add	sp, #12
    75e8:	2005      	movs	r0, #5
    75ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75ee:	2b7f      	cmp	r3, #127	; 0x7f
    75f0:	f000 818b 	beq.w	790a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13da>
    75f4:	7026      	strb	r6, [r4, #0]
    75f6:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    75fa:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    75fe:	f8cd c000 	str.w	ip, [sp]
    7602:	e9cd 1301 	strd	r1, r3, [sp, #4]
    7606:	23ff      	movs	r3, #255	; 0xff
    7608:	2106      	movs	r1, #6
    760a:	324a      	adds	r2, #74	; 0x4a
    760c:	f007 f8af 	bl	e76e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7610:	6861      	ldr	r1, [r4, #4]
    7612:	200b      	movs	r0, #11
    7614:	f881 50b0 	strb.w	r5, [r1, #176]	; 0xb0
    7618:	b003      	add	sp, #12
    761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    761e:	2b7f      	cmp	r3, #127	; 0x7f
    7620:	f000 8173 	beq.w	790a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13da>
    7624:	7026      	strb	r6, [r4, #0]
    7626:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    762a:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    762e:	f8cd c000 	str.w	ip, [sp]
    7632:	e9cd 1301 	strd	r1, r3, [sp, #4]
    7636:	23ff      	movs	r3, #255	; 0xff
    7638:	2106      	movs	r1, #6
    763a:	e039      	b.n	76b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1180>
    763c:	f892 108a 	ldrb.w	r1, [r2, #138]	; 0x8a
    7640:	2900      	cmp	r1, #0
    7642:	f000 8141 	beq.w	78c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1398>
    7646:	f892 1058 	ldrb.w	r1, [r2, #88]	; 0x58
    764a:	2902      	cmp	r1, #2
    764c:	d008      	beq.n	7660 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1130>
    764e:	2901      	cmp	r1, #1
    7650:	d020      	beq.n	7694 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1164>
    7652:	2903      	cmp	r1, #3
    7654:	d02e      	beq.n	76b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1184>
    7656:	f640 61ec 	movw	r1, #3820	; 0xeec
    765a:	2032      	movs	r0, #50	; 0x32
    765c:	f7fc fcae 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7660:	2b7f      	cmp	r3, #127	; 0x7f
    7662:	f000 8152 	beq.w	790a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13da>
    7666:	7026      	strb	r6, [r4, #0]
    7668:	e000      	b.n	766c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x113c>
    766a:	e05e      	b.n	772a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11fa>
    766c:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    7670:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    7674:	f8cd c000 	str.w	ip, [sp]
    7678:	e9cd 1301 	strd	r1, r3, [sp, #4]
    767c:	23ff      	movs	r3, #255	; 0xff
    767e:	2100      	movs	r1, #0
    7680:	324a      	adds	r2, #74	; 0x4a
    7682:	f007 f874 	bl	e76e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7686:	6860      	ldr	r0, [r4, #4]
    7688:	f880 70b0 	strb.w	r7, [r0, #176]	; 0xb0
    768c:	b003      	add	sp, #12
    768e:	200b      	movs	r0, #11
    7690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7694:	2b7f      	cmp	r3, #127	; 0x7f
    7696:	f000 8138 	beq.w	790a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13da>
    769a:	7026      	strb	r6, [r4, #0]
    769c:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    76a0:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    76a4:	f8cd c000 	str.w	ip, [sp]
    76a8:	e9cd 1301 	strd	r1, r3, [sp, #4]
    76ac:	23ff      	movs	r3, #255	; 0xff
    76ae:	2100      	movs	r1, #0
    76b0:	324a      	adds	r2, #74	; 0x4a
    76b2:	e0a6      	b.n	7802 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12d2>
    76b4:	6841      	ldr	r1, [r0, #4]
    76b6:	f892 c061 	ldrb.w	ip, [r2, #97]	; 0x61
    76ba:	780b      	ldrb	r3, [r1, #0]
    76bc:	4563      	cmp	r3, ip
    76be:	d11f      	bne.n	7700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11d0>
    76c0:	784b      	ldrb	r3, [r1, #1]
    76c2:	f892 c062 	ldrb.w	ip, [r2, #98]	; 0x62
    76c6:	4563      	cmp	r3, ip
    76c8:	d11a      	bne.n	7700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11d0>
    76ca:	788b      	ldrb	r3, [r1, #2]
    76cc:	f892 c063 	ldrb.w	ip, [r2, #99]	; 0x63
    76d0:	4563      	cmp	r3, ip
    76d2:	d115      	bne.n	7700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11d0>
    76d4:	78cb      	ldrb	r3, [r1, #3]
    76d6:	f892 c064 	ldrb.w	ip, [r2, #100]	; 0x64
    76da:	4563      	cmp	r3, ip
    76dc:	d110      	bne.n	7700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11d0>
    76de:	790b      	ldrb	r3, [r1, #4]
    76e0:	f892 c065 	ldrb.w	ip, [r2, #101]	; 0x65
    76e4:	4563      	cmp	r3, ip
    76e6:	d10b      	bne.n	7700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11d0>
    76e8:	7949      	ldrb	r1, [r1, #5]
    76ea:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
    76ee:	4299      	cmp	r1, r3
    76f0:	d106      	bne.n	7700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11d0>
    76f2:	7c40      	ldrb	r0, [r0, #17]
    76f4:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
    76f8:	4288      	cmp	r0, r1
    76fa:	bf08      	it	eq
    76fc:	2001      	moveq	r0, #1
    76fe:	d000      	beq.n	7702 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11d2>
    7700:	2000      	movs	r0, #0
    7702:	f892 105a 	ldrb.w	r1, [r2, #90]	; 0x5a
    7706:	2901      	cmp	r1, #1
    7708:	d07e      	beq.n	7808 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12d8>
    770a:	2800      	cmp	r0, #0
    770c:	d17c      	bne.n	7808 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12d8>
    770e:	4882      	ldr	r0, [pc, #520]	; (7918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13e8>)
    7710:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    7714:	2908      	cmp	r1, #8
    7716:	d078      	beq.n	780a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12da>
    7718:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    771c:	4288      	cmp	r0, r1
    771e:	d073      	beq.n	7808 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12d8>
    7720:	e0d2      	b.n	78c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1398>
    7722:	b003      	add	sp, #12
    7724:	2005      	movs	r0, #5
    7726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    772a:	4605      	mov	r5, r0
    772c:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    7730:	f892 a08a 	ldrb.w	sl, [r2, #138]	; 0x8a
    7734:	2800      	cmp	r0, #0
    7736:	bf14      	ite	ne
    7738:	f04f 0900 	movne.w	r9, #0
    773c:	f04f 0901 	moveq.w	r9, #1
    7740:	2700      	movs	r7, #0
    7742:	7ca8      	ldrb	r0, [r5, #18]
    7744:	68a9      	ldr	r1, [r5, #8]
    7746:	2801      	cmp	r0, #1
    7748:	d107      	bne.n	775a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x122a>
    774a:	7948      	ldrb	r0, [r1, #5]
    774c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7750:	2840      	cmp	r0, #64	; 0x40
    7752:	bf08      	it	eq
    7754:	f04f 0801 	moveq.w	r8, #1
    7758:	d001      	beq.n	775e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x122e>
    775a:	f04f 0800 	mov.w	r8, #0
    775e:	f892 0058 	ldrb.w	r0, [r2, #88]	; 0x58
    7762:	2803      	cmp	r0, #3
    7764:	d106      	bne.n	7774 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1244>
    7766:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
    776a:	2800      	cmp	r0, #0
    776c:	bf18      	it	ne
    776e:	f892 0083 	ldrbne.w	r0, [r2, #131]	; 0x83
    7772:	d101      	bne.n	7778 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1248>
    7774:	f892 0080 	ldrb.w	r0, [r2, #128]	; 0x80
    7778:	9000      	str	r0, [sp, #0]
    777a:	f7fd fac5 	bl	4d08 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    777e:	ea5f 0b00 	movs.w	fp, r0
    7782:	d043      	beq.n	780c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12dc>
    7784:	9800      	ldr	r0, [sp, #0]
    7786:	f7fd fab3 	bl	4cf0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    778a:	2800      	cmp	r0, #0
    778c:	bf18      	it	ne
    778e:	f04f 0901 	movne.w	r9, #1
    7792:	f1b8 0f00 	cmp.w	r8, #0
    7796:	d039      	beq.n	780c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12dc>
    7798:	4658      	mov	r0, fp
    779a:	68a9      	ldr	r1, [r5, #8]
    779c:	f006 fad2 	bl	dd44 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    77a0:	0007      	movs	r7, r0
    77a2:	6860      	ldr	r0, [r4, #4]
    77a4:	f890 b049 	ldrb.w	fp, [r0, #73]	; 0x49
    77a8:	bf18      	it	ne
    77aa:	f04b 0b02 	orrne.w	fp, fp, #2
    77ae:	4601      	mov	r1, r0
    77b0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    77b4:	2803      	cmp	r0, #3
    77b6:	d02d      	beq.n	7814 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e4>
    77b8:	f003 fa06 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    77bc:	f1ba 0f00 	cmp.w	sl, #0
    77c0:	d0af      	beq.n	7722 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11f2>
    77c2:	6860      	ldr	r0, [r4, #4]
    77c4:	7caa      	ldrb	r2, [r5, #18]
    77c6:	f100 014a 	add.w	r1, r0, #74	; 0x4a
    77ca:	f890 c049 	ldrb.w	ip, [r0, #73]	; 0x49
    77ce:	68ab      	ldr	r3, [r5, #8]
    77d0:	4660      	mov	r0, ip
    77d2:	f006 fa47 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    77d6:	2800      	cmp	r0, #0
    77d8:	bf08      	it	eq
    77da:	2f00      	cmpeq	r7, #0
    77dc:	d077      	beq.n	78ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x139e>
    77de:	f994 0000 	ldrsb.w	r0, [r4]
    77e2:	287f      	cmp	r0, #127	; 0x7f
    77e4:	d06f      	beq.n	78c6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1396>
    77e6:	7026      	strb	r6, [r4, #0]
    77e8:	6861      	ldr	r1, [r4, #4]
    77ea:	f891 209a 	ldrb.w	r2, [r1, #154]	; 0x9a
    77ee:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
    77f2:	e9cd 3200 	strd	r3, r2, [sp]
    77f6:	9002      	str	r0, [sp, #8]
    77f8:	f101 024a 	add.w	r2, r1, #74	; 0x4a
    77fc:	465b      	mov	r3, fp
    77fe:	2101      	movs	r1, #1
    7800:	4628      	mov	r0, r5
    7802:	f006 ffb4 	bl	e76e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7806:	e78c      	b.n	7722 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11f2>
    7808:	e058      	b.n	78bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138c>
    780a:	e05d      	b.n	78c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1398>
    780c:	6860      	ldr	r0, [r4, #4]
    780e:	f890 b049 	ldrb.w	fp, [r0, #73]	; 0x49
    7812:	e7cc      	b.n	77ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x127e>
    7814:	6868      	ldr	r0, [r5, #4]
    7816:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    781a:	7802      	ldrb	r2, [r0, #0]
    781c:	429a      	cmp	r2, r3
    781e:	d120      	bne.n	7862 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1332>
    7820:	7842      	ldrb	r2, [r0, #1]
    7822:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    7826:	429a      	cmp	r2, r3
    7828:	d11b      	bne.n	7862 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1332>
    782a:	7882      	ldrb	r2, [r0, #2]
    782c:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    7830:	429a      	cmp	r2, r3
    7832:	d116      	bne.n	7862 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1332>
    7834:	78c2      	ldrb	r2, [r0, #3]
    7836:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    783a:	429a      	cmp	r2, r3
    783c:	d111      	bne.n	7862 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1332>
    783e:	7902      	ldrb	r2, [r0, #4]
    7840:	f891 3065 	ldrb.w	r3, [r1, #101]	; 0x65
    7844:	429a      	cmp	r2, r3
    7846:	d10c      	bne.n	7862 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1332>
    7848:	7940      	ldrb	r0, [r0, #5]
    784a:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    784e:	4290      	cmp	r0, r2
    7850:	d107      	bne.n	7862 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1332>
    7852:	7c68      	ldrb	r0, [r5, #17]
    7854:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    7858:	4290      	cmp	r0, r2
    785a:	bf08      	it	eq
    785c:	f04f 0801 	moveq.w	r8, #1
    7860:	d001      	beq.n	7866 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1336>
    7862:	f04f 0800 	mov.w	r8, #0
    7866:	4c2c      	ldr	r4, [pc, #176]	; (7918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13e8>)
    7868:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    786c:	2808      	cmp	r0, #8
    786e:	d005      	beq.n	787c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134c>
    7870:	f894 2083 	ldrb.w	r2, [r4, #131]	; 0x83
    7874:	4290      	cmp	r0, r2
    7876:	bf08      	it	eq
    7878:	2601      	moveq	r6, #1
    787a:	d000      	beq.n	787e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134e>
    787c:	2600      	movs	r6, #0
    787e:	b957      	cbnz	r7, 7896 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1366>
    7880:	f1b9 0f00 	cmp.w	r9, #0
    7884:	d009      	beq.n	789a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x136a>
    7886:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    788a:	7caa      	ldrb	r2, [r5, #18]
    788c:	314a      	adds	r1, #74	; 0x4a
    788e:	68ab      	ldr	r3, [r5, #8]
    7890:	f006 f9e8 	bl	dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7894:	b108      	cbz	r0, 789a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x136a>
    7896:	2101      	movs	r1, #1
    7898:	e000      	b.n	789c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x136c>
    789a:	2100      	movs	r1, #0
    789c:	f1ba 0f00 	cmp.w	sl, #0
    78a0:	d009      	beq.n	78b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1386>
    78a2:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    78a6:	2801      	cmp	r0, #1
    78a8:	d003      	beq.n	78b2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1382>
    78aa:	b920      	cbnz	r0, 78b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1386>
    78ac:	ea58 0006 	orrs.w	r0, r8, r6
    78b0:	d001      	beq.n	78b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1386>
    78b2:	2001      	movs	r0, #1
    78b4:	e000      	b.n	78b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1388>
    78b6:	2000      	movs	r0, #0
    78b8:	4201      	tst	r1, r0
    78ba:	d005      	beq.n	78c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1398>
    78bc:	b003      	add	sp, #12
    78be:	200c      	movs	r0, #12
    78c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78c4:	e003      	b.n	78ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x139e>
    78c6:	e020      	b.n	790a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13da>
    78c8:	f003 f97e 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    78cc:	e729      	b.n	7722 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11f2>
    78ce:	6860      	ldr	r0, [r4, #4]
    78d0:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    78d4:	2903      	cmp	r1, #3
    78d6:	bf18      	it	ne
    78d8:	2902      	cmpne	r1, #2
    78da:	f47f af22 	bne.w	7722 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11f2>
    78de:	f1b8 0f00 	cmp.w	r8, #0
    78e2:	f43f af1e 	beq.w	7722 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11f2>
    78e6:	f994 1000 	ldrsb.w	r1, [r4]
    78ea:	297f      	cmp	r1, #127	; 0x7f
    78ec:	d00d      	beq.n	790a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13da>
    78ee:	7026      	strb	r6, [r4, #0]
    78f0:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
    78f4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    78f8:	e9cd 3200 	strd	r3, r2, [sp]
    78fc:	9102      	str	r1, [sp, #8]
    78fe:	23fe      	movs	r3, #254	; 0xfe
    7900:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    7904:	2101      	movs	r1, #1
    7906:	4628      	mov	r0, r5
    7908:	e77b      	b.n	7802 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12d2>
    790a:	f240 411d 	movw	r1, #1053	; 0x41d
    790e:	2032      	movs	r0, #50	; 0x32
    7910:	f7fc fb54 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7914:	20000288 	.word	0x20000288
    7918:	20000c00 	.word	0x20000c00
    791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7920:	4c3d      	ldr	r4, [pc, #244]	; (7a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14e8>)
    7922:	4680      	mov	r8, r0
    7924:	6860      	ldr	r0, [r4, #4]
    7926:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    792a:	0949      	lsrs	r1, r1, #5
    792c:	bf08      	it	eq
    792e:	2501      	moveq	r5, #1
    7930:	d007      	beq.n	7942 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1412>
    7932:	2901      	cmp	r1, #1
    7934:	bf08      	it	eq
    7936:	2502      	moveq	r5, #2
    7938:	d003      	beq.n	7942 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1412>
    793a:	2902      	cmp	r1, #2
    793c:	bf14      	ite	ne
    793e:	2500      	movne	r5, #0
    7940:	2508      	moveq	r5, #8
    7942:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    7944:	b168      	cbz	r0, 7962 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1432>
    7946:	f7fc ffc9 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    794a:	4606      	mov	r6, r0
    794c:	f7fc ffc0 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7950:	4601      	mov	r1, r0
    7952:	4630      	mov	r0, r6
    7954:	f005 ffd1 	bl	d8fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    7958:	0001      	movs	r1, r0
    795a:	d015      	beq.n	7988 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1458>
    795c:	2000      	movs	r0, #0
    795e:	f7fe febb 	bl	66d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    7962:	6860      	ldr	r0, [r4, #4]
    7964:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    7968:	f003 fc04 	bl	b174 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    796c:	6860      	ldr	r0, [r4, #4]
    796e:	2601      	movs	r6, #1
    7970:	2700      	movs	r7, #0
    7972:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    7976:	2902      	cmp	r1, #2
    7978:	d00c      	beq.n	7994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1464>
    797a:	2903      	cmp	r1, #3
    797c:	bf04      	itt	eq
    797e:	f890 10c5 	ldrbeq.w	r1, [r0, #197]	; 0xc5
    7982:	2901      	cmpeq	r1, #1
    7984:	d00a      	beq.n	799c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x146c>
    7986:	e016      	b.n	79b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1486>
    7988:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
    798c:	f04f 0032 	mov.w	r0, #50	; 0x32
    7990:	f7fc fb14 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7994:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    7998:	2902      	cmp	r1, #2
    799a:	d10c      	bne.n	79b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1486>
    799c:	462a      	mov	r2, r5
    799e:	f015 0f0c 	tst.w	r5, #12
    79a2:	d004      	beq.n	79ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x147e>
    79a4:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    79a8:	2801      	cmp	r0, #1
    79aa:	bf08      	it	eq
    79ac:	2204      	moveq	r2, #4
    79ae:	2100      	movs	r1, #0
    79b0:	4608      	mov	r0, r1
    79b2:	f003 ff4b 	bl	b84c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    79b6:	6860      	ldr	r0, [r4, #4]
    79b8:	f1b8 0f00 	cmp.w	r8, #0
    79bc:	d009      	beq.n	79d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14a2>
    79be:	f800 6fb1 	strb.w	r6, [r0, #177]!
    79c2:	7046      	strb	r6, [r0, #1]
    79c4:	6860      	ldr	r0, [r4, #4]
    79c6:	f880 50c1 	strb.w	r5, [r0, #193]	; 0xc1
    79ca:	f880 7088 	strb.w	r7, [r0, #136]	; 0x88
    79ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79d2:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    79d6:	f100 06b1 	add.w	r6, r0, #177	; 0xb1
    79da:	2902      	cmp	r1, #2
    79dc:	bf04      	itt	eq
    79de:	7037      	strbeq	r7, [r6, #0]
    79e0:	7077      	strbeq	r7, [r6, #1]
    79e2:	d0ef      	beq.n	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1494>
    79e4:	2901      	cmp	r1, #1
    79e6:	d008      	beq.n	79fa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14ca>
    79e8:	2900      	cmp	r1, #0
    79ea:	d1eb      	bne.n	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1494>
    79ec:	f006 fe9a 	bl	e724 <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>
    79f0:	7030      	strb	r0, [r6, #0]
    79f2:	f006 fea9 	bl	e748 <sym_W25Y3XPKXGZB4KRPGEWVTTYC4QVEIN6I4NFKVII>
    79f6:	7070      	strb	r0, [r6, #1]
    79f8:	e7e4      	b.n	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1494>
    79fa:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    79fe:	2902      	cmp	r1, #2
    7a00:	bf14      	ite	ne
    7a02:	2100      	movne	r1, #0
    7a04:	2101      	moveq	r1, #1
    7a06:	7031      	strb	r1, [r6, #0]
    7a08:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
    7a0c:	2802      	cmp	r0, #2
    7a0e:	bf0c      	ite	eq
    7a10:	2001      	moveq	r0, #1
    7a12:	2000      	movne	r0, #0
    7a14:	7070      	strb	r0, [r6, #1]
    7a16:	e7d5      	b.n	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1494>
    7a18:	20000288 	.word	0x20000288
    7a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a20:	4607      	mov	r7, r0
    7a22:	f7fc ff5b 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7a26:	4604      	mov	r4, r0
    7a28:	f7fc ff52 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7a2c:	4601      	mov	r1, r0
    7a2e:	4620      	mov	r0, r4
    7a30:	f005 ff63 	bl	d8fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    7a34:	0005      	movs	r5, r0
    7a36:	d00e      	beq.n	7a56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1526>
    7a38:	4c32      	ldr	r4, [pc, #200]	; (7b04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15d4>)
    7a3a:	6860      	ldr	r0, [r4, #4]
    7a3c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7a40:	2801      	cmp	r0, #1
    7a42:	bf1c      	itt	ne
    7a44:	2802      	cmpne	r0, #2
    7a46:	2803      	cmpne	r0, #3
    7a48:	d00a      	beq.n	7a60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1530>
    7a4a:	f241 5119 	movw	r1, #5401	; 0x1519
    7a4e:	f04f 0032 	mov.w	r0, #50	; 0x32
    7a52:	f7fc fab3 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a56:	f241 5113 	movw	r1, #5395	; 0x1513
    7a5a:	2032      	movs	r0, #50	; 0x32
    7a5c:	f7fc faae 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a60:	f06f 0613 	mvn.w	r6, #19
    7a64:	b327      	cbz	r7, 7ab0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1580>
    7a66:	4628      	mov	r0, r5
    7a68:	f006 fc21 	bl	e2ae <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    7a6c:	b918      	cbnz	r0, 7a76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1546>
    7a6e:	4628      	mov	r0, r5
    7a70:	f006 fcf9 	bl	e466 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    7a74:	b1e0      	cbz	r0, 7ab0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1580>
    7a76:	6861      	ldr	r1, [r4, #4]
    7a78:	4628      	mov	r0, r5
    7a7a:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    7a7e:	2a05      	cmp	r2, #5
    7a80:	d204      	bcs.n	7a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x155c>
    7a82:	f241 419d 	movw	r1, #5277	; 0x149d
    7a86:	2032      	movs	r0, #50	; 0x32
    7a88:	f7fc fa98 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a8c:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    7a90:	2a0b      	cmp	r2, #11
    7a92:	d304      	bcc.n	7a9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x156e>
    7a94:	f241 419e 	movw	r1, #5278	; 0x149e
    7a98:	2032      	movs	r0, #50	; 0x32
    7a9a:	f7fc fa8f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a9e:	68e2      	ldr	r2, [r4, #12]
    7aa0:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    7aa4:	6952      	ldr	r2, [r2, #20]
    7aa6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    7aaa:	5851      	ldr	r1, [r2, r1]
    7aac:	4788      	blx	r1
    7aae:	e01a      	b.n	7ae6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15b6>
    7ab0:	6860      	ldr	r0, [r4, #4]
    7ab2:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    7ab6:	2905      	cmp	r1, #5
    7ab8:	d204      	bcs.n	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1594>
    7aba:	f241 5109 	movw	r1, #5385	; 0x1509
    7abe:	2032      	movs	r0, #50	; 0x32
    7ac0:	f7fc fa7c 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ac4:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    7ac8:	290b      	cmp	r1, #11
    7aca:	d304      	bcc.n	7ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a6>
    7acc:	f241 510a 	movw	r1, #5386	; 0x150a
    7ad0:	2032      	movs	r0, #50	; 0x32
    7ad2:	f7fc fa73 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ad6:	68e1      	ldr	r1, [r4, #12]
    7ad8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    7adc:	6989      	ldr	r1, [r1, #24]
    7ade:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    7ae2:	5808      	ldr	r0, [r1, r0]
    7ae4:	4780      	blx	r0
    7ae6:	280f      	cmp	r0, #15
    7ae8:	d304      	bcc.n	7af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c4>
    7aea:	f241 512e 	movw	r1, #5422	; 0x152e
    7aee:	2032      	movs	r0, #50	; 0x32
    7af0:	f7fc fa64 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7af4:	68e1      	ldr	r1, [r4, #12]
    7af6:	6909      	ldr	r1, [r1, #16]
    7af8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b00:	4700      	bx	r0
    7b02:	0000      	.short	0x0000
    7b04:	20000288 	.word	0x20000288
    7b08:	b510      	push	{r4, lr}
    7b0a:	b118      	cbz	r0, 7b14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e4>
    7b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b10:	f000 b9da 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    7b14:	2900      	cmp	r1, #0
    7b16:	bf08      	it	eq
    7b18:	bd10      	popeq	{r4, pc}
    7b1a:	4810      	ldr	r0, [pc, #64]	; (7b5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x162c>)
    7b1c:	6841      	ldr	r1, [r0, #4]
    7b1e:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    7b22:	2a0b      	cmp	r2, #11
    7b24:	d204      	bcs.n	7b30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1600>
    7b26:	f241 51e3 	movw	r1, #5603	; 0x15e3
    7b2a:	2032      	movs	r0, #50	; 0x32
    7b2c:	f7fc fa46 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b30:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    7b34:	2a0f      	cmp	r2, #15
    7b36:	d304      	bcc.n	7b42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1612>
    7b38:	f241 51e4 	movw	r1, #5604	; 0x15e4
    7b3c:	2032      	movs	r0, #50	; 0x32
    7b3e:	f7fc fa3d 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b42:	68c0      	ldr	r0, [r0, #12]
    7b44:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    7b48:	6880      	ldr	r0, [r0, #8]
    7b4a:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    7b4e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7b52:	5840      	ldr	r0, [r0, r1]
    7b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b58:	4700      	bx	r0
    7b5a:	0000      	.short	0x0000
    7b5c:	20000288 	.word	0x20000288
    7b60:	b570      	push	{r4, r5, r6, lr}
    7b62:	4c13      	ldr	r4, [pc, #76]	; (7bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1680>)
    7b64:	6860      	ldr	r0, [r4, #4]
    7b66:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    7b6a:	20ff      	movs	r0, #255	; 0xff
    7b6c:	f003 fefa 	bl	b964 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    7b70:	f7fc feb4 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7b74:	4605      	mov	r5, r0
    7b76:	f7fc feab 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7b7a:	4601      	mov	r1, r0
    7b7c:	4628      	mov	r0, r5
    7b7e:	f005 febc 	bl	d8fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    7b82:	b178      	cbz	r0, 7ba4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1674>
    7b84:	f003 fccc 	bl	b520 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7b88:	6860      	ldr	r0, [r4, #4]
    7b8a:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
    7b8e:	f010 000c 	ands.w	r0, r0, #12
    7b92:	bf18      	it	ne
    7b94:	2028      	movne	r0, #40	; 0x28
    7b96:	f003 fb23 	bl	b1e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7b9a:	6861      	ldr	r1, [r4, #4]
    7b9c:	2009      	movs	r0, #9
    7b9e:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7ba2:	bd70      	pop	{r4, r5, r6, pc}
    7ba4:	f240 612b 	movw	r1, #1579	; 0x62b
    7ba8:	2032      	movs	r0, #50	; 0x32
    7baa:	f7fc fa07 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bae:	0000      	.short	0x0000
    7bb0:	20000288 	.word	0x20000288
    7bb4:	b510      	push	{r4, lr}
    7bb6:	f7fc fe91 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7bba:	4604      	mov	r4, r0
    7bbc:	f7fc fe88 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7bc0:	4601      	mov	r1, r0
    7bc2:	4620      	mov	r0, r4
    7bc4:	f005 fe99 	bl	d8fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    7bc8:	b150      	cbz	r0, 7be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16b0>
    7bca:	f003 fca9 	bl	b520 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7bce:	2000      	movs	r0, #0
    7bd0:	f003 fb06 	bl	b1e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7bd4:	4905      	ldr	r1, [pc, #20]	; (7bec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16bc>)
    7bd6:	2006      	movs	r0, #6
    7bd8:	6849      	ldr	r1, [r1, #4]
    7bda:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7bde:	bd10      	pop	{r4, pc}
    7be0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    7be4:	2032      	movs	r0, #50	; 0x32
    7be6:	f7fc f9e9 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bea:	0000      	.short	0x0000
    7bec:	20000288 	.word	0x20000288
    7bf0:	4910      	ldr	r1, [pc, #64]	; (7c34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1704>)
    7bf2:	b510      	push	{r4, lr}
    7bf4:	6848      	ldr	r0, [r1, #4]
    7bf6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    7bfa:	2a06      	cmp	r2, #6
    7bfc:	d204      	bcs.n	7c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16d8>
    7bfe:	f241 6111 	movw	r1, #5649	; 0x1611
    7c02:	2032      	movs	r0, #50	; 0x32
    7c04:	f7fc f9da 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c08:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    7c0c:	2a0b      	cmp	r2, #11
    7c0e:	d304      	bcc.n	7c1a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16ea>
    7c10:	f241 6112 	movw	r1, #5650	; 0x1612
    7c14:	2032      	movs	r0, #50	; 0x32
    7c16:	f7fc f9d1 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c1a:	68c9      	ldr	r1, [r1, #12]
    7c1c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    7c20:	68c9      	ldr	r1, [r1, #12]
    7c22:	f06f 0213 	mvn.w	r2, #19
    7c26:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    7c2a:	5808      	ldr	r0, [r1, r0]
    7c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c30:	4700      	bx	r0
    7c32:	0000      	.short	0x0000
    7c34:	20000288 	.word	0x20000288
    7c38:	b510      	push	{r4, lr}
    7c3a:	4805      	ldr	r0, [pc, #20]	; (7c50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1720>)
    7c3c:	f003 fe74 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7c40:	b910      	cbnz	r0, 7c48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1718>
    7c42:	4903      	ldr	r1, [pc, #12]	; (7c50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1720>)
    7c44:	207f      	movs	r0, #127	; 0x7f
    7c46:	7008      	strb	r0, [r1, #0]
    7c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c4c:	f000 b93c 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    7c50:	20000288 	.word	0x20000288
    7c54:	b510      	push	{r4, lr}
    7c56:	f000 fe1f 	bl	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    7c5a:	4805      	ldr	r0, [pc, #20]	; (7c70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1740>)
    7c5c:	f003 fe64 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7c60:	b910      	cbnz	r0, 7c68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1738>
    7c62:	4903      	ldr	r1, [pc, #12]	; (7c70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1740>)
    7c64:	207f      	movs	r0, #127	; 0x7f
    7c66:	7008      	strb	r0, [r1, #0]
    7c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c6c:	f000 b92c 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    7c70:	20000288 	.word	0x20000288
    7c74:	b510      	push	{r4, lr}
    7c76:	4808      	ldr	r0, [pc, #32]	; (7c98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1768>)
    7c78:	f003 fe56 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7c7c:	4a06      	ldr	r2, [pc, #24]	; (7c98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1768>)
    7c7e:	2800      	cmp	r0, #0
    7c80:	bf04      	itt	eq
    7c82:	207f      	moveq	r0, #127	; 0x7f
    7c84:	7010      	strbeq	r0, [r2, #0]
    7c86:	2100      	movs	r1, #0
    7c88:	6850      	ldr	r0, [r2, #4]
    7c8a:	308c      	adds	r0, #140	; 0x8c
    7c8c:	f007 fd33 	bl	f6f6 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY>
    7c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c94:	f000 b918 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    7c98:	20000288 	.word	0x20000288
    7c9c:	b510      	push	{r4, lr}
    7c9e:	4806      	ldr	r0, [pc, #24]	; (7cb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1788>)
    7ca0:	f003 fe42 	bl	b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7ca4:	b910      	cbnz	r0, 7cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x177c>
    7ca6:	4904      	ldr	r1, [pc, #16]	; (7cb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1788>)
    7ca8:	207f      	movs	r0, #127	; 0x7f
    7caa:	7008      	strb	r0, [r1, #0]
    7cac:	f002 ff8c 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cb4:	f000 b952 	b.w	7f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a2c>
    7cb8:	20000288 	.word	0x20000288
    7cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7cc0:	4d5e      	ldr	r5, [pc, #376]	; (7e3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x190c>)
    7cc2:	4604      	mov	r4, r0
    7cc4:	460e      	mov	r6, r1
    7cc6:	6868      	ldr	r0, [r5, #4]
    7cc8:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    7ccc:	2900      	cmp	r1, #0
    7cce:	bf18      	it	ne
    7cd0:	2901      	cmpne	r1, #1
    7cd2:	d004      	beq.n	7cde <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17ae>
    7cd4:	2903      	cmp	r1, #3
    7cd6:	bf1c      	itt	ne
    7cd8:	200c      	movne	r0, #12
    7cda:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7cde:	7b21      	ldrb	r1, [r4, #12]
    7ce0:	f880 10a4 	strb.w	r1, [r0, #164]	; 0xa4
    7ce4:	68a1      	ldr	r1, [r4, #8]
    7ce6:	67c1      	str	r1, [r0, #124]	; 0x7c
    7ce8:	7b21      	ldrb	r1, [r4, #12]
    7cea:	f100 02c6 	add.w	r2, r0, #198	; 0xc6
    7cee:	5c89      	ldrb	r1, [r1, r2]
    7cf0:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    7cf4:	6821      	ldr	r1, [r4, #0]
    7cf6:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    7cfa:	7920      	ldrb	r0, [r4, #4]
    7cfc:	2802      	cmp	r0, #2
    7cfe:	d032      	beq.n	7d66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1836>
    7d00:	f003 fb66 	bl	b3d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7d04:	f002 ff3e 	bl	ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7d08:	f002 fe2e 	bl	a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7d0c:	f004 f972 	bl	bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7d10:	484b      	ldr	r0, [pc, #300]	; (7e40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1910>)
    7d12:	f003 fa19 	bl	b148 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7d16:	484b      	ldr	r0, [pc, #300]	; (7e44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1914>)
    7d18:	f003 fe1a 	bl	b950 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7d1c:	484a      	ldr	r0, [pc, #296]	; (7e48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1918>)
    7d1e:	f003 fe0d 	bl	b93c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7d22:	6868      	ldr	r0, [r5, #4]
    7d24:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7d28:	2800      	cmp	r0, #0
    7d2a:	bf0c      	ite	eq
    7d2c:	2001      	moveq	r0, #1
    7d2e:	2002      	movne	r0, #2
    7d30:	f7fb ff00 	bl	3b34 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    7d34:	7920      	ldrb	r0, [r4, #4]
    7d36:	2803      	cmp	r0, #3
    7d38:	bf1c      	itt	ne
    7d3a:	4630      	movne	r0, r6
    7d3c:	f003 fbf0 	blne	b520 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7d40:	7920      	ldrb	r0, [r4, #4]
    7d42:	2803      	cmp	r0, #3
    7d44:	d10f      	bne.n	7d66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1836>
    7d46:	6868      	ldr	r0, [r5, #4]
    7d48:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    7d4a:	b120      	cbz	r0, 7d56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1826>
    7d4c:	f640 213b 	movw	r1, #2619	; 0xa3b
    7d50:	2032      	movs	r0, #50	; 0x32
    7d52:	f7fc f933 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d56:	4631      	mov	r1, r6
    7d58:	2001      	movs	r0, #1
    7d5a:	f7fe fcbd 	bl	66d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    7d5e:	2800      	cmp	r0, #0
    7d60:	bf08      	it	eq
    7d62:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7d66:	7b60      	ldrb	r0, [r4, #13]
    7d68:	b178      	cbz	r0, 7d8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x185a>
    7d6a:	6868      	ldr	r0, [r5, #4]
    7d6c:	2201      	movs	r2, #1
    7d6e:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7d72:	f88d 1000 	strb.w	r1, [sp]
    7d76:	f89d 1000 	ldrb.w	r1, [sp]
    7d7a:	b931      	cbnz	r1, 7d8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x185a>
    7d7c:	6e81      	ldr	r1, [r0, #104]	; 0x68
    7d7e:	2900      	cmp	r1, #0
    7d80:	bf1c      	itt	ne
    7d82:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    7d86:	f7fa fc4d 	blne	2624 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7d8a:	7920      	ldrb	r0, [r4, #4]
    7d8c:	b130      	cbz	r0, 7d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186c>
    7d8e:	2801      	cmp	r0, #1
    7d90:	d023      	beq.n	7dda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18aa>
    7d92:	2802      	cmp	r0, #2
    7d94:	bf18      	it	ne
    7d96:	2803      	cmpne	r0, #3
    7d98:	d02f      	beq.n	7dfa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18ca>
    7d9a:	e03a      	b.n	7e12 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18e2>
    7d9c:	686a      	ldr	r2, [r5, #4]
    7d9e:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 7e4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x191c>
    7da2:	f04f 0000 	mov.w	r0, #0
    7da6:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
    7daa:	bf00      	nop
    7dac:	f892 3082 	ldrb.w	r3, [r2, #130]	; 0x82
    7db0:	f103 0301 	add.w	r3, r3, #1
    7db4:	fbac 8703 	umull	r8, r7, ip, r3
    7db8:	ea4f 0757 	mov.w	r7, r7, lsr #1
    7dbc:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
    7dc0:	443b      	add	r3, r7
    7dc2:	f882 3082 	strb.w	r3, [r2, #130]	; 0x82
    7dc6:	fa21 f303 	lsr.w	r3, r1, r3
    7dca:	f013 0f01 	tst.w	r3, #1
    7dce:	d104      	bne.n	7dda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18aa>
    7dd0:	f100 0001 	add.w	r0, r0, #1
    7dd4:	b2c0      	uxtb	r0, r0
    7dd6:	2803      	cmp	r0, #3
    7dd8:	d3e8      	bcc.n	7dac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x187c>
    7dda:	6868      	ldr	r0, [r5, #4]
    7ddc:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    7de0:	f003 fb92 	bl	b508 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7de4:	4631      	mov	r1, r6
    7de6:	2001      	movs	r0, #1
    7de8:	f7fe fccc 	bl	6784 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>
    7dec:	2800      	cmp	r0, #0
    7dee:	bf08      	it	eq
    7df0:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7df4:	f000 f95c 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    7df8:	e008      	b.n	7e0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18dc>
    7dfa:	6868      	ldr	r0, [r5, #4]
    7dfc:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    7e00:	f003 fb82 	bl	b508 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7e04:	6869      	ldr	r1, [r5, #4]
    7e06:	2004      	movs	r0, #4
    7e08:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7e0c:	7920      	ldrb	r0, [r4, #4]
    7e0e:	2802      	cmp	r0, #2
    7e10:	d005      	beq.n	7e1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18ee>
    7e12:	6868      	ldr	r0, [r5, #4]
    7e14:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    7e18:	b168      	cbz	r0, 7e36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1906>
    7e1a:	f7fc ff3d 	bl	4c98 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    7e1e:	480c      	ldr	r0, [pc, #48]	; (7e50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1920>)
    7e20:	6800      	ldr	r0, [r0, #0]
    7e22:	2803      	cmp	r0, #3
    7e24:	bf1c      	itt	ne
    7e26:	2000      	movne	r0, #0
    7e28:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7e2c:	f640 216e 	movw	r1, #2670	; 0xa6e
    7e30:	2032      	movs	r0, #50	; 0x32
    7e32:	f7fc f8c3 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e36:	f7fd f913 	bl	5060 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7e3a:	e7f0      	b.n	7e1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18ee>
    7e3c:	20000288 	.word	0x20000288
    7e40:	00008288 	.word	0x00008288
    7e44:	0000f87c 	.word	0x0000f87c
    7e48:	8e89bed6 	.word	0x8e89bed6
    7e4c:	aaaaaaab 	.word	0xaaaaaaab
    7e50:	40001550 	.word	0x40001550
    7e54:	b538      	push	{r3, r4, r5, lr}
    7e56:	4c1b      	ldr	r4, [pc, #108]	; (7ec4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1994>)
    7e58:	2200      	movs	r2, #0
    7e5a:	6860      	ldr	r0, [r4, #4]
    7e5c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7e60:	f88d 1000 	strb.w	r1, [sp]
    7e64:	f89d 1000 	ldrb.w	r1, [sp]
    7e68:	b931      	cbnz	r1, 7e78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1948>
    7e6a:	6e81      	ldr	r1, [r0, #104]	; 0x68
    7e6c:	2900      	cmp	r1, #0
    7e6e:	bf1c      	itt	ne
    7e70:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    7e74:	f7fa fbd6 	blne	2624 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7e78:	6860      	ldr	r0, [r4, #4]
    7e7a:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    7e7e:	2905      	cmp	r1, #5
    7e80:	d21e      	bcs.n	7ec0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1990>
    7e82:	e8df f001 	tbb	[pc, r1]
    7e86:	0303      	.short	0x0303
    7e88:	00090306 	.word	0x00090306
    7e8c:	f000 f81c 	bl	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    7e90:	e014      	b.n	7ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198c>
    7e92:	f000 f863 	bl	7f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a2c>
    7e96:	e011      	b.n	7ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198c>
    7e98:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    7e9c:	b138      	cbz	r0, 7eae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x197e>
    7e9e:	2001      	movs	r0, #1
    7ea0:	f7ff fd3c 	bl	791c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13ec>
    7ea4:	6861      	ldr	r1, [r4, #4]
    7ea6:	2008      	movs	r0, #8
    7ea8:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7eac:	e006      	b.n	7ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198c>
    7eae:	2000      	movs	r0, #0
    7eb0:	f7ff fd34 	bl	791c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13ec>
    7eb4:	6861      	ldr	r1, [r4, #4]
    7eb6:	2007      	movs	r0, #7
    7eb8:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7ebc:	2000      	movs	r0, #0
    7ebe:	bd38      	pop	{r3, r4, r5, pc}
    7ec0:	200c      	movs	r0, #12
    7ec2:	bd38      	pop	{r3, r4, r5, pc}
    7ec4:	20000288 	.word	0x20000288
    7ec8:	b570      	push	{r4, r5, r6, lr}
    7eca:	4c0c      	ldr	r4, [pc, #48]	; (7efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x19cc>)
    7ecc:	2500      	movs	r5, #0
    7ece:	6860      	ldr	r0, [r4, #4]
    7ed0:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    7ed4:	b130      	cbz	r0, 7ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x19b4>
    7ed6:	f002 fe55 	bl	ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7eda:	f002 fd45 	bl	a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7ede:	6860      	ldr	r0, [r4, #4]
    7ee0:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    7ee4:	6860      	ldr	r0, [r4, #4]
    7ee6:	2101      	movs	r1, #1
    7ee8:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    7eec:	f8a0 50c2 	strh.w	r5, [r0, #194]	; 0xc2
    7ef0:	f880 50c4 	strb.w	r5, [r0, #196]	; 0xc4
    7ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ef8:	f001 b866 	b.w	8fc8 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY>
    7efc:	20000288 	.word	0x20000288
    7f00:	4903      	ldr	r1, [pc, #12]	; (7f10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x19e0>)
    7f02:	2003      	movs	r0, #3
    7f04:	6849      	ldr	r1, [r1, #4]
    7f06:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7f0a:	f000 bd85 	b.w	8a18 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ>
    7f0e:	0000      	.short	0x0000
    7f10:	20000288 	.word	0x20000288
    7f14:	4804      	ldr	r0, [pc, #16]	; (7f28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x19f8>)
    7f16:	6841      	ldr	r1, [r0, #4]
    7f18:	2000      	movs	r0, #0
    7f1a:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    7f1e:	f881 00c4 	strb.w	r0, [r1, #196]	; 0xc4
    7f22:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7f26:	4770      	bx	lr
    7f28:	20000288 	.word	0x20000288
    7f2c:	b510      	push	{r4, lr}
    7f2e:	2000      	movs	r0, #0
    7f30:	f7ff fcf4 	bl	791c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13ec>
    7f34:	4902      	ldr	r1, [pc, #8]	; (7f40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a10>)
    7f36:	2007      	movs	r0, #7
    7f38:	6849      	ldr	r1, [r1, #4]
    7f3a:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7f3e:	bd10      	pop	{r4, pc}
    7f40:	20000288 	.word	0x20000288
    7f44:	b510      	push	{r4, lr}
    7f46:	2001      	movs	r0, #1
    7f48:	f7ff fce8 	bl	791c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13ec>
    7f4c:	4902      	ldr	r1, [pc, #8]	; (7f58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a28>)
    7f4e:	2008      	movs	r0, #8
    7f50:	6849      	ldr	r1, [r1, #4]
    7f52:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7f56:	bd10      	pop	{r4, pc}
    7f58:	20000288 	.word	0x20000288
    7f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f60:	f7fc fcbc 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7f64:	4604      	mov	r4, r0
    7f66:	f7fc fcb3 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7f6a:	4601      	mov	r1, r0
    7f6c:	4620      	mov	r0, r4
    7f6e:	f005 fcc4 	bl	d8fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    7f72:	0005      	movs	r5, r0
    7f74:	d037      	beq.n	7fe6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ab6>
    7f76:	f000 fa3b 	bl	83f0 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    7f7a:	4c33      	ldr	r4, [pc, #204]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    7f7c:	6860      	ldr	r0, [r4, #4]
    7f7e:	f100 02c6 	add.w	r2, r0, #198	; 0xc6
    7f82:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    7f86:	5c8e      	ldrb	r6, [r1, r2]
    7f88:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7f8c:	2000      	movs	r0, #0
    7f8e:	f000 ffc1 	bl	8f14 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7f92:	2800      	cmp	r0, #0
    7f94:	d02d      	beq.n	7ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ac2>
    7f96:	6860      	ldr	r0, [r4, #4]
    7f98:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    7f9c:	2802      	cmp	r0, #2
    7f9e:	d003      	beq.n	7fa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a78>
    7fa0:	4629      	mov	r1, r5
    7fa2:	2000      	movs	r0, #0
    7fa4:	f7fe fbee 	bl	6784 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>
    7fa8:	2e01      	cmp	r6, #1
    7faa:	bf07      	ittee	eq
    7fac:	2701      	moveq	r7, #1
    7fae:	2003      	moveq	r0, #3
    7fb0:	2700      	movne	r7, #0
    7fb2:	2005      	movne	r0, #5
    7fb4:	4428      	add	r0, r5
    7fb6:	f7fc fe57 	bl	4c68 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7fba:	6861      	ldr	r1, [r4, #4]
    7fbc:	2500      	movs	r5, #0
    7fbe:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    7fc2:	b140      	cbz	r0, 7fd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aa6>
    7fc4:	2f00      	cmp	r7, #0
    7fc6:	bf18      	it	ne
    7fc8:	2640      	movne	r6, #64	; 0x40
    7fca:	d016      	beq.n	7ffa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aca>
    7fcc:	f002 fd0c 	bl	a9e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7fd0:	4630      	mov	r0, r6
    7fd2:	f002 fde5 	bl	aba0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7fd6:	6860      	ldr	r0, [r4, #4]
    7fd8:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    7fdc:	2903      	cmp	r1, #3
    7fde:	bf18      	it	ne
    7fe0:	2902      	cmpne	r1, #2
    7fe2:	d11c      	bne.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    7fe4:	e00f      	b.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
    7fe6:	f240 41ee 	movw	r1, #1262	; 0x4ee
    7fea:	f04f 0032 	mov.w	r0, #50	; 0x32
    7fee:	f7fb ffe5 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ff6:	f7ff bf67 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    7ffa:	f016 0f0c 	tst.w	r6, #12
    7ffe:	bf14      	ite	ne
    8000:	2655      	movne	r6, #85	; 0x55
    8002:	2650      	moveq	r6, #80	; 0x50
    8004:	e7e2      	b.n	7fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a9c>
    8006:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    800a:	f100 00c6 	add.w	r0, r0, #198	; 0xc6
    800e:	5c08      	ldrb	r0, [r1, r0]
    8010:	2801      	cmp	r0, #1
    8012:	d104      	bne.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8014:	2100      	movs	r1, #0
    8016:	2201      	movs	r2, #1
    8018:	4608      	mov	r0, r1
    801a:	f003 fc17 	bl	b84c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    801e:	6860      	ldr	r0, [r4, #4]
    8020:	21ff      	movs	r1, #255	; 0xff
    8022:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    8026:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    802a:	f880 5089 	strb.w	r5, [r0, #137]	; 0x89
    802e:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    8032:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    8036:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    803a:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    803e:	2105      	movs	r1, #5
    8040:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    8044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8048:	20000288 	.word	0x20000288
    804c:	b510      	push	{r4, lr}
    804e:	2005      	movs	r0, #5
    8050:	f000 ff60 	bl	8f14 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8054:	b160      	cbz	r0, 8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
    8056:	4c08      	ldr	r4, [pc, #32]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    8058:	2101      	movs	r1, #1
    805a:	6860      	ldr	r0, [r4, #4]
    805c:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    8060:	2000      	movs	r0, #0
    8062:	f003 fbf3 	bl	b84c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8066:	6861      	ldr	r1, [r4, #4]
    8068:	200d      	movs	r0, #13
    806a:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    806e:	bd10      	pop	{r4, pc}
    8070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8074:	f7ff bf28 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    8078:	20000288 	.word	0x20000288
    807c:	b510      	push	{r4, lr}
    807e:	2003      	movs	r0, #3
    8080:	f000 ff48 	bl	8f14 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8084:	b168      	cbz	r0, 80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
    8086:	2003      	movs	r0, #3
    8088:	f7ff f85c 	bl	7144 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc14>
    808c:	2201      	movs	r2, #1
    808e:	4611      	mov	r1, r2
    8090:	2000      	movs	r0, #0
    8092:	f003 fbdb 	bl	b84c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8096:	4905      	ldr	r1, [pc, #20]	; (80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>)
    8098:	200b      	movs	r0, #11
    809a:	6849      	ldr	r1, [r1, #4]
    809c:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    80a0:	bd10      	pop	{r4, pc}
    80a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    80a6:	f7ff bf0f 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    80aa:	0000      	.short	0x0000
    80ac:	20000288 	.word	0x20000288
    80b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80b4:	4c2e      	ldr	r4, [pc, #184]	; (8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>)
    80b6:	2100      	movs	r1, #0
    80b8:	6860      	ldr	r0, [r4, #4]
    80ba:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    80be:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    80c2:	2900      	cmp	r1, #0
    80c4:	bf04      	itt	eq
    80c6:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    80ca:	2900      	cmpeq	r1, #0
    80cc:	d042      	beq.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    80ce:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
    80d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    80d6:	e9d5 0100 	ldrd	r0, r1, [r5]
    80da:	ea81 0102 	eor.w	r1, r1, r2
    80de:	f04f 0701 	mov.w	r7, #1
    80e2:	ea71 0000 	orns	r0, r1, r0
    80e6:	d035      	beq.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    80e8:	f7fa faba 	bl	2660 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    80ec:	e9d5 2300 	ldrd	r2, r3, [r5]
    80f0:	1a80      	subs	r0, r0, r2
    80f2:	eb71 0003 	sbcs.w	r0, r1, r3
    80f6:	d32d      	bcc.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    80f8:	6860      	ldr	r0, [r4, #4]
    80fa:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
    80fe:	f7fc fec5 	bl	4e8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    8102:	491c      	ldr	r1, [pc, #112]	; (8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>)
    8104:	fba0 6501 	umull	r6, r5, r0, r1
    8108:	f7fa faaa 	bl	2660 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    810c:	1980      	adds	r0, r0, r6
    810e:	4169      	adcs	r1, r5
    8110:	e9c8 0100 	strd	r0, r1, [r8]
    8114:	6860      	ldr	r0, [r4, #4]
    8116:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    811a:	2800      	cmp	r0, #0
    811c:	bf1c      	itt	ne
    811e:	2001      	movne	r0, #1
    8120:	f7fc fdfe 	blne	4d20 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    8124:	2101      	movs	r1, #1
    8126:	6860      	ldr	r0, [r4, #4]
    8128:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
    812c:	2a00      	cmp	r2, #0
    812e:	bf1c      	itt	ne
    8130:	f890 205c 	ldrbne.w	r2, [r0, #92]	; 0x5c
    8134:	2a00      	cmpne	r2, #0
    8136:	d00d      	beq.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    8138:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    813c:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    8140:	2b01      	cmp	r3, #1
    8142:	d104      	bne.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    8144:	7952      	ldrb	r2, [r2, #5]
    8146:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    814a:	2a40      	cmp	r2, #64	; 0x40
    814c:	d008      	beq.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    814e:	304a      	adds	r0, #74	; 0x4a
    8150:	f005 fdaf 	bl	dcb2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8154:	6861      	ldr	r1, [r4, #4]
    8156:	2002      	movs	r0, #2
    8158:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8160:	f7fc fd96 	bl	4c90 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8164:	6861      	ldr	r1, [r4, #4]
    8166:	463a      	mov	r2, r7
    8168:	314a      	adds	r1, #74	; 0x4a
    816a:	f005 fdb3 	bl	dcd4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    816e:	e7f1      	b.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    8170:	20000288 	.word	0x20000288
    8174:	000f4240 	.word	0x000f4240
    8178:	b530      	push	{r4, r5, lr}
    817a:	4a18      	ldr	r2, [pc, #96]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    817c:	b085      	sub	sp, #20
    817e:	f992 c000 	ldrsb.w	ip, [r2]
    8182:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    8186:	d024      	beq.n	81d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d2>
    8188:	237f      	movs	r3, #127	; 0x7f
    818a:	7013      	strb	r3, [r2, #0]
    818c:	6852      	ldr	r2, [r2, #4]
    818e:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
    8192:	2b05      	cmp	r3, #5
    8194:	bf08      	it	eq
    8196:	2300      	moveq	r3, #0
    8198:	d005      	beq.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    819a:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
    819e:	2b08      	cmp	r3, #8
    81a0:	bf0c      	ite	eq
    81a2:	2303      	moveq	r3, #3
    81a4:	2301      	movne	r3, #1
    81a6:	f892 5081 	ldrb.w	r5, [r2, #129]	; 0x81
    81aa:	f892 409a 	ldrb.w	r4, [r2, #154]	; 0x9a
    81ae:	e9cd c302 	strd	ip, r3, [sp, #8]
    81b2:	e9cd 4500 	strd	r4, r5, [sp]
    81b6:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
    81ba:	324a      	adds	r2, #74	; 0x4a
    81bc:	f000 f96a 	bl	8494 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI>
    81c0:	2800      	cmp	r0, #0
    81c2:	bf04      	itt	eq
    81c4:	b005      	addeq	sp, #20
    81c6:	bd30      	popeq	{r4, r5, pc}
    81c8:	b005      	add	sp, #20
    81ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    81ce:	f000 bb23 	b.w	8818 <sym_FO2KXXPMB6IQFAA5KGFFJWZILDAFSKWASS4B2FY>
    81d2:	f240 411d 	movw	r1, #1053	; 0x41d
    81d6:	2032      	movs	r0, #50	; 0x32
    81d8:	f7fb fef0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81dc:	20000288 	.word	0x20000288
    81e0:	00007f15 	.word	0x00007f15
    81e4:	00007ec9 	.word	0x00007ec9
    81e8:	0000e69d 	.word	0x0000e69d
    81ec:	00007f01 	.word	0x00007f01
    81f0:	0000e69d 	.word	0x0000e69d
    81f4:	00007f5d 	.word	0x00007f5d
    81f8:	0000e69d 	.word	0x0000e69d
    81fc:	00007f2d 	.word	0x00007f2d
    8200:	00007f45 	.word	0x00007f45
    8204:	0000e69d 	.word	0x0000e69d
    8208:	0000e69d 	.word	0x0000e69d
    820c:	0000807d 	.word	0x0000807d
    8210:	0000e69d 	.word	0x0000e69d
    8214:	0000804d 	.word	0x0000804d
    8218:	0000e69d 	.word	0x0000e69d
    821c:	00007bb5 	.word	0x00007bb5
    8220:	0000e69d 	.word	0x0000e69d
    8224:	00007b61 	.word	0x00007b61
    8228:	0000e69d 	.word	0x0000e69d
    822c:	00000000 	.word	0x00000000
    8230:	00007c9d 	.word	0x00007c9d
    8234:	00007c39 	.word	0x00007c39
    8238:	00007c55 	.word	0x00007c55
    823c:	00007c75 	.word	0x00007c75
    8240:	0000e69d 	.word	0x0000e69d
    8244:	000069e5 	.word	0x000069e5
    8248:	00006a51 	.word	0x00006a51
    824c:	00006a1d 	.word	0x00006a1d
    8250:	00006a1d 	.word	0x00006a1d
    8254:	00006a39 	.word	0x00006a39
    8258:	00006ecd 	.word	0x00006ecd
    825c:	00006fd5 	.word	0x00006fd5
    8260:	0000e691 	.word	0x0000e691
    8264:	0000e697 	.word	0x0000e697
    8268:	00006e55 	.word	0x00006e55
    826c:	00007cbd 	.word	0x00007cbd
    8270:	00007e55 	.word	0x00007e55
    8274:	0000821c 	.word	0x0000821c
    8278:	0000822c 	.word	0x0000822c
    827c:	000081e0 	.word	0x000081e0
    8280:	00008258 	.word	0x00008258
    8284:	00008244 	.word	0x00008244
    8288:	00007bf1 	.word	0x00007bf1
    828c:	00007a1d 	.word	0x00007a1d
    8290:	00007b09 	.word	0x00007b09
    8294:	0000e6a7 	.word	0x0000e6a7

00008298 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY>:
    8298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    829c:	b08b      	sub	sp, #44	; 0x2c
    829e:	4607      	mov	r7, r0
    82a0:	f7fc fb1c 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    82a4:	4682      	mov	sl, r0
    82a6:	f005 fa7b 	bl	d7a0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    82aa:	0005      	movs	r5, r0
    82ac:	d010      	beq.n	82d0 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x38>
    82ae:	4601      	mov	r1, r0
    82b0:	f04f 0801 	mov.w	r8, #1
    82b4:	466a      	mov	r2, sp
    82b6:	4650      	mov	r0, sl
    82b8:	f005 faa5 	bl	d806 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    82bc:	4604      	mov	r4, r0
    82be:	f7fc fb07 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    82c2:	42a0      	cmp	r0, r4
    82c4:	d009      	beq.n	82da <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x42>
    82c6:	f240 1155 	movw	r1, #341	; 0x155
    82ca:	2033      	movs	r0, #51	; 0x33
    82cc:	f7fb fe76 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82d0:	f240 114b 	movw	r1, #331	; 0x14b
    82d4:	2033      	movs	r0, #51	; 0x33
    82d6:	f7fb fe71 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82da:	a901      	add	r1, sp, #4
    82dc:	9800      	ldr	r0, [sp, #0]
    82de:	f006 fc31 	bl	eb44 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    82e2:	1d3c      	adds	r4, r7, #4
    82e4:	4628      	mov	r0, r5
    82e6:	f005 fa27 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    82ea:	4683      	mov	fp, r0
    82ec:	f100 0112 	add.w	r1, r0, #18
    82f0:	221c      	movs	r2, #28
    82f2:	4620      	mov	r0, r4
    82f4:	f004 fc1b 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    82f8:	f89b 001c 	ldrb.w	r0, [fp, #28]
    82fc:	4d3b      	ldr	r5, [pc, #236]	; (83ec <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x154>)
    82fe:	f010 0f10 	tst.w	r0, #16
    8302:	f04f 0600 	mov.w	r6, #0
    8306:	d00f      	beq.n	8328 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x90>
    8308:	f010 0f04 	tst.w	r0, #4
    830c:	bf18      	it	ne
    830e:	7226      	strbne	r6, [r4, #8]
    8310:	d13c      	bne.n	838c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    8312:	f89d 2014 	ldrb.w	r2, [sp, #20]
    8316:	f104 001c 	add.w	r0, r4, #28
    831a:	9904      	ldr	r1, [sp, #16]
    831c:	f004 fc07 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8320:	f89d 0014 	ldrb.w	r0, [sp, #20]
    8324:	7220      	strb	r0, [r4, #8]
    8326:	e031      	b.n	838c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    8328:	7828      	ldrb	r0, [r5, #0]
    832a:	f04f 0901 	mov.w	r9, #1
    832e:	b928      	cbnz	r0, 833c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xa4>
    8330:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    8334:	2825      	cmp	r0, #37	; 0x25
    8336:	bf38      	it	cc
    8338:	f885 9000 	strbcc.w	r9, [r5]
    833c:	7828      	ldrb	r0, [r5, #0]
    833e:	2800      	cmp	r0, #0
    8340:	bf1a      	itte	ne
    8342:	f89d 0004 	ldrbne.w	r0, [sp, #4]
    8346:	2802      	cmpne	r0, #2
    8348:	7226      	strbeq	r6, [r4, #8]
    834a:	d018      	beq.n	837e <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xe6>
    834c:	78ab      	ldrb	r3, [r5, #2]
    834e:	f04f 02e5 	mov.w	r2, #229	; 0xe5
    8352:	f104 011c 	add.w	r1, r4, #28
    8356:	9800      	ldr	r0, [sp, #0]
    8358:	f006 f805 	bl	e366 <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA>
    835c:	7220      	strb	r0, [r4, #8]
    835e:	78a9      	ldrb	r1, [r5, #2]
    8360:	4408      	add	r0, r1
    8362:	70a8      	strb	r0, [r5, #2]
    8364:	9800      	ldr	r0, [sp, #0]
    8366:	f005 fff6 	bl	e356 <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>
    836a:	78a9      	ldrb	r1, [r5, #2]
    836c:	4288      	cmp	r0, r1
    836e:	d006      	beq.n	837e <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xe6>
    8370:	7aa0      	ldrb	r0, [r4, #10]
    8372:	f04f 0800 	mov.w	r8, #0
    8376:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    837a:	3020      	adds	r0, #32
    837c:	72a0      	strb	r0, [r4, #10]
    837e:	7aa0      	ldrb	r0, [r4, #10]
    8380:	f3c0 1141 	ubfx	r1, r0, #5, #2
    8384:	2901      	cmp	r1, #1
    8386:	bf18      	it	ne
    8388:	702e      	strbne	r6, [r5, #0]
    838a:	d015      	beq.n	83b8 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x120>
    838c:	2005      	movs	r0, #5
    838e:	707e      	strb	r6, [r7, #1]
    8390:	7038      	strb	r0, [r7, #0]
    8392:	f1b8 0f00 	cmp.w	r8, #0
    8396:	bf04      	itt	eq
    8398:	b00b      	addeq	sp, #44	; 0x2c
    839a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    839e:	4650      	mov	r0, sl
    83a0:	f005 f9e5 	bl	d76e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    83a4:	b1e0      	cbz	r0, 83e0 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x148>
    83a6:	2200      	movs	r2, #0
    83a8:	4611      	mov	r1, r2
    83aa:	4650      	mov	r0, sl
    83ac:	f005 fa6b 	bl	d886 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    83b0:	70ae      	strb	r6, [r5, #2]
    83b2:	b00b      	add	sp, #44	; 0x2c
    83b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83b8:	782a      	ldrb	r2, [r5, #0]
    83ba:	2a00      	cmp	r2, #0
    83bc:	bf08      	it	eq
    83be:	f885 9000 	strbeq.w	r9, [r5]
    83c2:	d0e3      	beq.n	838c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    83c4:	2103      	movs	r1, #3
    83c6:	2a01      	cmp	r2, #1
    83c8:	d002      	beq.n	83d0 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x138>
    83ca:	2a02      	cmp	r2, #2
    83cc:	d006      	beq.n	83dc <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x144>
    83ce:	e7dd      	b.n	838c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    83d0:	f010 0f02 	tst.w	r0, #2
    83d4:	bf1c      	itt	ne
    83d6:	2002      	movne	r0, #2
    83d8:	7028      	strbne	r0, [r5, #0]
    83da:	d1d7      	bne.n	838c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    83dc:	7029      	strb	r1, [r5, #0]
    83de:	e7d5      	b.n	838c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    83e0:	f240 1195 	movw	r1, #405	; 0x195
    83e4:	2033      	movs	r0, #51	; 0x33
    83e6:	f7fb fde9 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83ea:	0000      	.short	0x0000
    83ec:	200002a0 	.word	0x200002a0

000083f0 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    83f0:	b510      	push	{r4, lr}
    83f2:	b082      	sub	sp, #8
    83f4:	f7fc fa72 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    83f8:	aa01      	add	r2, sp, #4
    83fa:	4669      	mov	r1, sp
    83fc:	f005 f9f5 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8400:	9800      	ldr	r0, [sp, #0]
    8402:	f005 f999 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8406:	4604      	mov	r4, r0
    8408:	221c      	movs	r2, #28
    840a:	2100      	movs	r1, #0
    840c:	3012      	adds	r0, #18
    840e:	f004 fc08 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8412:	207f      	movs	r0, #127	; 0x7f
    8414:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    8418:	21ff      	movs	r1, #255	; 0xff
    841a:	f884 1020 	strb.w	r1, [r4, #32]
    841e:	74e1      	strb	r1, [r4, #19]
    8420:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    8424:	7f20      	ldrb	r0, [r4, #28]
    8426:	4905      	ldr	r1, [pc, #20]	; (843c <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY+0x4c>)
    8428:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    842c:	3020      	adds	r0, #32
    842e:	7720      	strb	r0, [r4, #28]
    8430:	2000      	movs	r0, #0
    8432:	6088      	str	r0, [r1, #8]
    8434:	8088      	strh	r0, [r1, #4]
    8436:	b002      	add	sp, #8
    8438:	bd10      	pop	{r4, pc}
    843a:	0000      	.short	0x0000
    843c:	200002a0 	.word	0x200002a0

00008440 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    8440:	b510      	push	{r4, lr}
    8442:	b082      	sub	sp, #8
    8444:	f7fc fa4a 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8448:	aa01      	add	r2, sp, #4
    844a:	4669      	mov	r1, sp
    844c:	f005 f9cd 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8450:	9800      	ldr	r0, [sp, #0]
    8452:	f005 f971 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8456:	4604      	mov	r4, r0
    8458:	221c      	movs	r2, #28
    845a:	2100      	movs	r1, #0
    845c:	3012      	adds	r0, #18
    845e:	f004 fbe0 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8462:	207f      	movs	r0, #127	; 0x7f
    8464:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    8468:	21ff      	movs	r1, #255	; 0xff
    846a:	f884 1020 	strb.w	r1, [r4, #32]
    846e:	74e1      	strb	r1, [r4, #19]
    8470:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    8474:	7f20      	ldrb	r0, [r4, #28]
    8476:	4906      	ldr	r1, [pc, #24]	; (8490 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x50>)
    8478:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    847c:	3020      	adds	r0, #32
    847e:	7720      	strb	r0, [r4, #28]
    8480:	2000      	movs	r0, #0
    8482:	6088      	str	r0, [r1, #8]
    8484:	7008      	strb	r0, [r1, #0]
    8486:	8088      	strh	r0, [r1, #4]
    8488:	7048      	strb	r0, [r1, #1]
    848a:	b002      	add	sp, #8
    848c:	bd10      	pop	{r4, pc}
    848e:	0000      	.short	0x0000
    8490:	200002a0 	.word	0x200002a0

00008494 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI>:
    8494:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8498:	b085      	sub	sp, #20
    849a:	f890 8000 	ldrb.w	r8, [r0]
    849e:	9e15      	ldr	r6, [sp, #84]	; 0x54
    84a0:	461f      	mov	r7, r3
    84a2:	4605      	mov	r5, r0
    84a4:	f04f 0900 	mov.w	r9, #0
    84a8:	f04f 0b01 	mov.w	fp, #1
    84ac:	b1d6      	cbz	r6, 84e4 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x50>
    84ae:	f04f 0a01 	mov.w	sl, #1
    84b2:	f7fc fa13 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    84b6:	4604      	mov	r4, r0
    84b8:	f005 f940 	bl	d73c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    84bc:	2801      	cmp	r0, #1
    84be:	d00d      	beq.n	84dc <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x48>
    84c0:	7828      	ldrb	r0, [r5, #0]
    84c2:	2802      	cmp	r0, #2
    84c4:	d013      	beq.n	84ee <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x5a>
    84c6:	48d3      	ldr	r0, [pc, #844]	; (8814 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x380>)
    84c8:	f895 9010 	ldrb.w	r9, [r5, #16]
    84cc:	f240 6272 	movw	r2, #1650	; 0x672
    84d0:	8881      	ldrh	r1, [r0, #4]
    84d2:	4449      	add	r1, r9
    84d4:	4291      	cmp	r1, r2
    84d6:	bf98      	it	ls
    84d8:	8081      	strhls	r1, [r0, #4]
    84da:	d908      	bls.n	84ee <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x5a>
    84dc:	b009      	add	sp, #36	; 0x24
    84de:	2000      	movs	r0, #0
    84e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84e4:	f04f 0a00 	mov.w	sl, #0
    84e8:	f7fc f9f8 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    84ec:	4604      	mov	r4, r0
    84ee:	4620      	mov	r0, r4
    84f0:	aa01      	add	r2, sp, #4
    84f2:	4669      	mov	r1, sp
    84f4:	f005 f979 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    84f8:	9800      	ldr	r0, [sp, #0]
    84fa:	f005 f91d 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    84fe:	4604      	mov	r4, r0
    8500:	f880 b012 	strb.w	fp, [r0, #18]
    8504:	9814      	ldr	r0, [sp, #80]	; 0x50
    8506:	76e0      	strb	r0, [r4, #27]
    8508:	b196      	cbz	r6, 8530 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x9c>
    850a:	2f01      	cmp	r7, #1
    850c:	bf08      	it	eq
    850e:	2001      	moveq	r0, #1
    8510:	d01d      	beq.n	854e <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xba>
    8512:	2f02      	cmp	r7, #2
    8514:	bf08      	it	eq
    8516:	2002      	moveq	r0, #2
    8518:	d019      	beq.n	854e <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xba>
    851a:	2f04      	cmp	r7, #4
    851c:	bf14      	ite	ne
    851e:	2f08      	cmpne	r7, #8
    8520:	2003      	moveq	r0, #3
    8522:	d014      	beq.n	854e <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xba>
    8524:	f240 21a9 	movw	r1, #681	; 0x2a9
    8528:	f04f 0006 	mov.w	r0, #6
    852c:	f7fb fd46 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8530:	2f01      	cmp	r7, #1
    8532:	bf08      	it	eq
    8534:	2001      	moveq	r0, #1
    8536:	d008      	beq.n	854a <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xb6>
    8538:	2f02      	cmp	r7, #2
    853a:	bf08      	it	eq
    853c:	2002      	moveq	r0, #2
    853e:	d004      	beq.n	854a <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xb6>
    8540:	2f04      	cmp	r7, #4
    8542:	bf14      	ite	ne
    8544:	2f08      	cmpne	r7, #8
    8546:	2003      	moveq	r0, #3
    8548:	d1ec      	bne.n	8524 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x90>
    854a:	77a0      	strb	r0, [r4, #30]
    854c:	e000      	b.n	8550 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xbc>
    854e:	77e0      	strb	r0, [r4, #31]
    8550:	9812      	ldr	r0, [sp, #72]	; 0x48
    8552:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    8556:	6968      	ldr	r0, [r5, #20]
    8558:	b320      	cbz	r0, 85a4 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x110>
    855a:	f7fc f9bf 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    855e:	aa01      	add	r2, sp, #4
    8560:	4669      	mov	r1, sp
    8562:	f005 f942 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8566:	9800      	ldr	r0, [sp, #0]
    8568:	f005 f8e6 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    856c:	b116      	cbz	r6, 8574 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xe0>
    856e:	2e03      	cmp	r6, #3
    8570:	d008      	beq.n	8584 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xf0>
    8572:	e00b      	b.n	858c <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xf8>
    8574:	7828      	ldrb	r0, [r5, #0]
    8576:	2800      	cmp	r0, #0
    8578:	bf04      	itt	eq
    857a:	7868      	ldrbeq	r0, [r5, #1]
    857c:	f010 0f10 	tsteq.w	r0, #16
    8580:	d104      	bne.n	858c <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0xf8>
    8582:	e014      	b.n	85ae <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x11a>
    8584:	7f00      	ldrb	r0, [r0, #28]
    8586:	f010 0f08 	tst.w	r0, #8
    858a:	d110      	bne.n	85ae <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x11a>
    858c:	6968      	ldr	r0, [r5, #20]
    858e:	7840      	ldrb	r0, [r0, #1]
    8590:	ea4f 1010 	mov.w	r0, r0, lsr #4
    8594:	f884 0020 	strb.w	r0, [r4, #32]
    8598:	6968      	ldr	r0, [r5, #20]
    859a:	8800      	ldrh	r0, [r0, #0]
    859c:	f3c0 000b 	ubfx	r0, r0, #0, #12
    85a0:	f8a4 0021 	strh.w	r0, [r4, #33]	; 0x21
    85a4:	2e01      	cmp	r6, #1
    85a6:	bf04      	itt	eq
    85a8:	7828      	ldrbeq	r0, [r5, #0]
    85aa:	2800      	cmpeq	r0, #0
    85ac:	d001      	beq.n	85b2 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x11e>
    85ae:	f04f 0001 	mov.w	r0, #1
    85b2:	69e9      	ldr	r1, [r5, #28]
    85b4:	b121      	cbz	r1, 85c0 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x12c>
    85b6:	2800      	cmp	r0, #0
    85b8:	bf04      	itt	eq
    85ba:	8848      	ldrheq	r0, [r1, #2]
    85bc:	f8a4 0023 	strheq.w	r0, [r4, #35]	; 0x23
    85c0:	7829      	ldrb	r1, [r5, #0]
    85c2:	7f20      	ldrb	r0, [r4, #28]
    85c4:	2901      	cmp	r1, #1
    85c6:	bf0c      	ite	eq
    85c8:	f040 0001 	orreq.w	r0, r0, #1
    85cc:	f020 0001 	bicne.w	r0, r0, #1
    85d0:	7720      	strb	r0, [r4, #28]
    85d2:	f010 0f02 	tst.w	r0, #2
    85d6:	d12c      	bne.n	8632 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x19e>
    85d8:	2902      	cmp	r1, #2
    85da:	bf18      	it	ne
    85dc:	f020 0002 	bicne.w	r0, r0, #2
    85e0:	d027      	beq.n	8632 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x19e>
    85e2:	7720      	strb	r0, [r4, #28]
    85e4:	f010 0f02 	tst.w	r0, #2
    85e8:	d004      	beq.n	85f4 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x160>
    85ea:	2900      	cmp	r1, #0
    85ec:	bf08      	it	eq
    85ee:	f040 0008 	orreq.w	r0, r0, #8
    85f2:	d001      	beq.n	85f8 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x164>
    85f4:	f020 0008 	bic.w	r0, r0, #8
    85f8:	7720      	strb	r0, [r4, #28]
    85fa:	68a8      	ldr	r0, [r5, #8]
    85fc:	b300      	cbz	r0, 8640 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1ac>
    85fe:	e9cd 1502 	strd	r1, r5, [sp, #8]
    8602:	46b3      	mov	fp, r6
    8604:	9701      	str	r7, [sp, #4]
    8606:	2e02      	cmp	r6, #2
    8608:	d021      	beq.n	864e <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1ba>
    860a:	f7fc f967 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    860e:	aa04      	add	r2, sp, #16
    8610:	4669      	mov	r1, sp
    8612:	f005 f8ea 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8616:	9800      	ldr	r0, [sp, #0]
    8618:	f005 f88e 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    861c:	9901      	ldr	r1, [sp, #4]
    861e:	e9cd 1b00 	strd	r1, fp, [sp]
    8622:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    8626:	2301      	movs	r3, #1
    8628:	3012      	adds	r0, #18
    862a:	f006 f9b8 	bl	e99e <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y>
    862e:	b118      	cbz	r0, 8638 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1a4>
    8630:	e006      	b.n	8640 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1ac>
    8632:	f040 0002 	orr.w	r0, r0, #2
    8636:	e7d4      	b.n	85e2 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x14e>
    8638:	7f20      	ldrb	r0, [r4, #28]
    863a:	f040 0104 	orr.w	r1, r0, #4
    863e:	7721      	strb	r1, [r4, #28]
    8640:	2e01      	cmp	r6, #1
    8642:	d104      	bne.n	864e <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1ba>
    8644:	f1b8 0f00 	cmp.w	r8, #0
    8648:	bf18      	it	ne
    864a:	2101      	movne	r1, #1
    864c:	d100      	bne.n	8650 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1bc>
    864e:	2100      	movs	r1, #0
    8650:	69a8      	ldr	r0, [r5, #24]
    8652:	1e49      	subs	r1, r1, #1
    8654:	4208      	tst	r0, r1
    8656:	d105      	bne.n	8664 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1d0>
    8658:	7f20      	ldrb	r0, [r4, #28]
    865a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    865e:	7720      	strb	r0, [r4, #28]
    8660:	b99e      	cbnz	r6, 868a <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1f6>
    8662:	e00b      	b.n	867c <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1e8>
    8664:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    8668:	04c0      	lsls	r0, r0, #19
    866a:	0cc0      	lsrs	r0, r0, #19
    866c:	7f20      	ldrb	r0, [r4, #28]
    866e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    8672:	bf0c      	ite	eq
    8674:	3040      	addeq	r0, #64	; 0x40
    8676:	3020      	addne	r0, #32
    8678:	7720      	strb	r0, [r4, #28]
    867a:	e7f1      	b.n	8660 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x1cc>
    867c:	f017 0f0c 	tst.w	r7, #12
    8680:	bf1c      	itt	ne
    8682:	7868      	ldrbne	r0, [r5, #1]
    8684:	f010 0f10 	tstne.w	r0, #16
    8688:	d105      	bne.n	8696 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x202>
    868a:	6a28      	ldr	r0, [r5, #32]
    868c:	2800      	cmp	r0, #0
    868e:	bf1c      	itt	ne
    8690:	7800      	ldrbne	r0, [r0, #0]
    8692:	f884 002c 	strbne.w	r0, [r4, #44]	; 0x2c
    8696:	6868      	ldr	r0, [r5, #4]
    8698:	b310      	cbz	r0, 86e0 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x24c>
    869a:	f7fc f91f 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    869e:	aa01      	add	r2, sp, #4
    86a0:	4669      	mov	r1, sp
    86a2:	f005 f8a2 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    86a6:	9800      	ldr	r0, [sp, #0]
    86a8:	f005 f846 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    86ac:	e9cd 7600 	strd	r7, r6, [sp]
    86b0:	2300      	movs	r3, #0
    86b2:	4642      	mov	r2, r8
    86b4:	4629      	mov	r1, r5
    86b6:	3012      	adds	r0, #18
    86b8:	f006 f971 	bl	e99e <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y>
    86bc:	b980      	cbnz	r0, 86e0 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x24c>
    86be:	9813      	ldr	r0, [sp, #76]	; 0x4c
    86c0:	f104 0214 	add.w	r2, r4, #20
    86c4:	f104 0b13 	add.w	fp, r4, #19
    86c8:	28ff      	cmp	r0, #255	; 0xff
    86ca:	d00e      	beq.n	86ea <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x256>
    86cc:	4659      	mov	r1, fp
    86ce:	f7fc fba1 	bl	4e14 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    86d2:	b130      	cbz	r0, 86e2 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x24e>
    86d4:	f89b 0000 	ldrb.w	r0, [fp]
    86d8:	f040 0002 	orr.w	r0, r0, #2
    86dc:	f88b 0000 	strb.w	r0, [fp]
    86e0:	e00b      	b.n	86fa <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x266>
    86e2:	2189      	movs	r1, #137	; 0x89
    86e4:	2033      	movs	r0, #51	; 0x33
    86e6:	f7fb fc69 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86ea:	7c68      	ldrb	r0, [r5, #17]
    86ec:	f88b 0000 	strb.w	r0, [fp]
    86f0:	6868      	ldr	r0, [r5, #4]
    86f2:	6801      	ldr	r1, [r0, #0]
    86f4:	6011      	str	r1, [r2, #0]
    86f6:	8880      	ldrh	r0, [r0, #4]
    86f8:	8090      	strh	r0, [r2, #4]
    86fa:	68a8      	ldr	r0, [r5, #8]
    86fc:	2800      	cmp	r0, #0
    86fe:	bf18      	it	ne
    8700:	2e02      	cmpne	r6, #2
    8702:	d02a      	beq.n	875a <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x2c6>
    8704:	f7fc f8ea 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8708:	aa01      	add	r2, sp, #4
    870a:	4669      	mov	r1, sp
    870c:	f005 f86d 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8710:	9800      	ldr	r0, [sp, #0]
    8712:	f005 f811 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8716:	e9cd 7600 	strd	r7, r6, [sp]
    871a:	2301      	movs	r3, #1
    871c:	4642      	mov	r2, r8
    871e:	4629      	mov	r1, r5
    8720:	3012      	adds	r0, #18
    8722:	f006 f93c 	bl	e99e <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y>
    8726:	b9c0      	cbnz	r0, 875a <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x2c6>
    8728:	f104 0126 	add.w	r1, r4, #38	; 0x26
    872c:	9806      	ldr	r0, [sp, #24]
    872e:	1e4a      	subs	r2, r1, #1
    8730:	2802      	cmp	r0, #2
    8732:	bf1c      	itt	ne
    8734:	4603      	movne	r3, r0
    8736:	2803      	cmpne	r0, #3
    8738:	d007      	beq.n	874a <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x2b6>
    873a:	68ab      	ldr	r3, [r5, #8]
    873c:	f8d3 c000 	ldr.w	ip, [r3]
    8740:	f8c1 c000 	str.w	ip, [r1]
    8744:	889b      	ldrh	r3, [r3, #4]
    8746:	808b      	strh	r3, [r1, #4]
    8748:	e006      	b.n	8758 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x2c4>
    874a:	9b07      	ldr	r3, [sp, #28]
    874c:	f8d3 c000 	ldr.w	ip, [r3]
    8750:	f8c1 c000 	str.w	ip, [r1]
    8754:	889b      	ldrh	r3, [r3, #4]
    8756:	808b      	strh	r3, [r1, #4]
    8758:	7010      	strb	r0, [r2, #0]
    875a:	f1ba 0f00 	cmp.w	sl, #0
    875e:	d04f      	beq.n	8800 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x36c>
    8760:	4d2c      	ldr	r5, [pc, #176]	; (8814 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x380>)
    8762:	68ae      	ldr	r6, [r5, #8]
    8764:	b1ae      	cbz	r6, 8792 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x2fe>
    8766:	f895 8001 	ldrb.w	r8, [r5, #1]
    876a:	2700      	movs	r7, #0
    876c:	7237      	strb	r7, [r6, #8]
    876e:	2202      	movs	r2, #2
    8770:	4639      	mov	r1, r7
    8772:	4630      	mov	r0, r6
    8774:	f7fc fece 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8778:	f1b8 0f00 	cmp.w	r8, #0
    877c:	d006      	beq.n	878c <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x2f8>
    877e:	7477      	strb	r7, [r6, #17]
    8780:	2202      	movs	r2, #2
    8782:	2100      	movs	r1, #0
    8784:	f106 0009 	add.w	r0, r6, #9
    8788:	f7fc fec4 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    878c:	f7fd f9fa 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8790:	60af      	str	r7, [r5, #8]
    8792:	f1b9 0fe5 	cmp.w	r9, #229	; 0xe5
    8796:	bf8c      	ite	hi
    8798:	2601      	movhi	r6, #1
    879a:	2600      	movls	r6, #0
    879c:	f7fc f89e 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    87a0:	4607      	mov	r7, r0
    87a2:	7f20      	ldrb	r0, [r4, #28]
    87a4:	f3c0 1041 	ubfx	r0, r0, #5, #2
    87a8:	2801      	cmp	r0, #1
    87aa:	bf04      	itt	eq
    87ac:	60ac      	streq	r4, [r5, #8]
    87ae:	706e      	strbeq	r6, [r5, #1]
    87b0:	d010      	beq.n	87d4 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x340>
    87b2:	2500      	movs	r5, #0
    87b4:	7225      	strb	r5, [r4, #8]
    87b6:	2202      	movs	r2, #2
    87b8:	4629      	mov	r1, r5
    87ba:	4620      	mov	r0, r4
    87bc:	f7fc feaa 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    87c0:	b136      	cbz	r6, 87d0 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x33c>
    87c2:	7465      	strb	r5, [r4, #17]
    87c4:	2202      	movs	r2, #2
    87c6:	2100      	movs	r1, #0
    87c8:	f104 0009 	add.w	r0, r4, #9
    87cc:	f7fc fea2 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    87d0:	f7fd f9d8 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    87d4:	f7fc f87c 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    87d8:	4601      	mov	r1, r0
    87da:	2201      	movs	r2, #1
    87dc:	4638      	mov	r0, r7
    87de:	f004 ff53 	bl	d688 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    87e2:	b188      	cbz	r0, 8808 <sym_TDESCM2KMVRARVKFEVRNM3EH3TYNKK3XE7WZ2DI+0x374>
    87e4:	4638      	mov	r0, r7
    87e6:	aa01      	add	r2, sp, #4
    87e8:	4669      	mov	r1, sp
    87ea:	f004 fffe 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    87ee:	9800      	ldr	r0, [sp, #0]
    87f0:	f004 ffa2 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    87f4:	221c      	movs	r2, #28
    87f6:	f104 0112 	add.w	r1, r4, #18
    87fa:	3012      	adds	r0, #18
    87fc:	f004 f997 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8800:	b009      	add	sp, #36	; 0x24
    8802:	2001      	movs	r0, #1
    8804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8808:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    880c:	2033      	movs	r0, #51	; 0x33
    880e:	f7fb fbd5 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8812:	0000      	.short	0x0000
    8814:	200002a0 	.word	0x200002a0

00008818 <sym_FO2KXXPMB6IQFAA5KGFFJWZILDAFSKWASS4B2FY>:
    8818:	b570      	push	{r4, r5, r6, lr}
    881a:	b082      	sub	sp, #8
    881c:	f7fc f85e 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8820:	4605      	mov	r5, r0
    8822:	aa01      	add	r2, sp, #4
    8824:	4669      	mov	r1, sp
    8826:	f004 ffe0 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    882a:	9800      	ldr	r0, [sp, #0]
    882c:	f004 ff84 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8830:	4604      	mov	r4, r0
    8832:	7fc0      	ldrb	r0, [r0, #31]
    8834:	2600      	movs	r6, #0
    8836:	b188      	cbz	r0, 885c <sym_FO2KXXPMB6IQFAA5KGFFJWZILDAFSKWASS4B2FY+0x44>
    8838:	4628      	mov	r0, r5
    883a:	f004 ff7f 	bl	d73c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    883e:	b320      	cbz	r0, 888a <sym_FO2KXXPMB6IQFAA5KGFFJWZILDAFSKWASS4B2FY+0x72>
    8840:	2500      	movs	r5, #0
    8842:	b13e      	cbz	r6, 8854 <sym_FO2KXXPMB6IQFAA5KGFFJWZILDAFSKWASS4B2FY+0x3c>
    8844:	4620      	mov	r0, r4
    8846:	7205      	strb	r5, [r0, #8]
    8848:	2202      	movs	r2, #2
    884a:	2100      	movs	r1, #0
    884c:	f7fc fe62 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8850:	f7fd f998 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8854:	480f      	ldr	r0, [pc, #60]	; (8894 <sym_FO2KXXPMB6IQFAA5KGFFJWZILDAFSKWASS4B2FY+0x7c>)
    8856:	8085      	strh	r5, [r0, #4]
    8858:	b002      	add	sp, #8
    885a:	bd70      	pop	{r4, r5, r6, pc}
    885c:	4628      	mov	r0, r5
    885e:	f004 ff6d 	bl	d73c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    8862:	2801      	cmp	r0, #1
    8864:	bf04      	itt	eq
    8866:	b002      	addeq	sp, #8
    8868:	bd70      	popeq	{r4, r5, r6, pc}
    886a:	f7fc f831 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    886e:	4601      	mov	r1, r0
    8870:	2201      	movs	r2, #1
    8872:	4628      	mov	r0, r5
    8874:	f004 ff08 	bl	d688 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    8878:	2800      	cmp	r0, #0
    887a:	bf18      	it	ne
    887c:	2601      	movne	r6, #1
    887e:	d1db      	bne.n	8838 <sym_FO2KXXPMB6IQFAA5KGFFJWZILDAFSKWASS4B2FY+0x20>
    8880:	f240 2156 	movw	r1, #598	; 0x256
    8884:	2033      	movs	r0, #51	; 0x33
    8886:	f7fb fb99 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    888a:	f240 215a 	movw	r1, #602	; 0x25a
    888e:	2033      	movs	r0, #51	; 0x33
    8890:	f7fb fb94 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8894:	200002a0 	.word	0x200002a0

00008898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>:
    8898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    889c:	b082      	sub	sp, #8
    889e:	f7fc f81d 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    88a2:	aa01      	add	r2, sp, #4
    88a4:	4669      	mov	r1, sp
    88a6:	f004 ffa0 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    88aa:	9800      	ldr	r0, [sp, #0]
    88ac:	f004 ff44 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    88b0:	7fc0      	ldrb	r0, [r0, #31]
    88b2:	2500      	movs	r5, #0
    88b4:	2800      	cmp	r0, #0
    88b6:	bf04      	itt	eq
    88b8:	b002      	addeq	sp, #8
    88ba:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    88be:	4e2d      	ldr	r6, [pc, #180]	; (8974 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xdc>)
    88c0:	68b4      	ldr	r4, [r6, #8]
    88c2:	b1bc      	cbz	r4, 88f4 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x5c>
    88c4:	7f20      	ldrb	r0, [r4, #28]
    88c6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    88ca:	3040      	adds	r0, #64	; 0x40
    88cc:	7720      	strb	r0, [r4, #28]
    88ce:	7877      	ldrb	r7, [r6, #1]
    88d0:	7225      	strb	r5, [r4, #8]
    88d2:	2202      	movs	r2, #2
    88d4:	2100      	movs	r1, #0
    88d6:	4620      	mov	r0, r4
    88d8:	f7fc fe1c 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    88dc:	b137      	cbz	r7, 88ec <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x54>
    88de:	7465      	strb	r5, [r4, #17]
    88e0:	2202      	movs	r2, #2
    88e2:	2100      	movs	r1, #0
    88e4:	f104 0009 	add.w	r0, r4, #9
    88e8:	f7fc fe14 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    88ec:	f7fd f94a 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    88f0:	60b5      	str	r5, [r6, #8]
    88f2:	7075      	strb	r5, [r6, #1]
    88f4:	f7fb fff2 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    88f8:	4607      	mov	r7, r0
    88fa:	aa01      	add	r2, sp, #4
    88fc:	4669      	mov	r1, sp
    88fe:	f004 ff74 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8902:	9800      	ldr	r0, [sp, #0]
    8904:	f004 ff18 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8908:	4604      	mov	r4, r0
    890a:	7fc0      	ldrb	r0, [r0, #31]
    890c:	f04f 0800 	mov.w	r8, #0
    8910:	b190      	cbz	r0, 8938 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xa0>
    8912:	4638      	mov	r0, r7
    8914:	f004 ff12 	bl	d73c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    8918:	b338      	cbz	r0, 896a <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xd2>
    891a:	f1b8 0f00 	cmp.w	r8, #0
    891e:	d007      	beq.n	8930 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x98>
    8920:	4620      	mov	r0, r4
    8922:	7205      	strb	r5, [r0, #8]
    8924:	2202      	movs	r2, #2
    8926:	2100      	movs	r1, #0
    8928:	f7fc fdf4 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    892c:	f7fd f92a 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8930:	80b5      	strh	r5, [r6, #4]
    8932:	b002      	add	sp, #8
    8934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8938:	4638      	mov	r0, r7
    893a:	f004 feff 	bl	d73c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    893e:	2801      	cmp	r0, #1
    8940:	bf04      	itt	eq
    8942:	b002      	addeq	sp, #8
    8944:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    8948:	f7fb ffc2 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    894c:	4601      	mov	r1, r0
    894e:	2201      	movs	r2, #1
    8950:	4638      	mov	r0, r7
    8952:	f004 fe99 	bl	d688 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    8956:	2800      	cmp	r0, #0
    8958:	bf18      	it	ne
    895a:	f04f 0801 	movne.w	r8, #1
    895e:	d1d8      	bne.n	8912 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x7a>
    8960:	f240 2156 	movw	r1, #598	; 0x256
    8964:	2033      	movs	r0, #51	; 0x33
    8966:	f7fb fb29 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    896a:	f240 215a 	movw	r1, #602	; 0x25a
    896e:	2033      	movs	r0, #51	; 0x33
    8970:	f7fb fb24 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8974:	200002a0 	.word	0x200002a0

00008978 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    8978:	b570      	push	{r4, r5, r6, lr}
    897a:	4616      	mov	r6, r2
    897c:	460c      	mov	r4, r1
    897e:	4605      	mov	r5, r0
    8980:	f005 fd6d 	bl	e45e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    8984:	7460      	strb	r0, [r4, #17]
    8986:	4628      	mov	r0, r5
    8988:	f005 fd66 	bl	e458 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    898c:	74a0      	strb	r0, [r4, #18]
    898e:	1ceb      	adds	r3, r5, #3
    8990:	f8df c080 	ldr.w	ip, [pc, #128]	; 8a14 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x9c>
    8994:	1d98      	adds	r0, r3, #6
    8996:	2100      	movs	r1, #0
    8998:	2e07      	cmp	r6, #7
    899a:	d234      	bcs.n	8a06 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x8e>
    899c:	e8df f006 	tbb	[pc, r6]
    89a0:	331b1304 	.word	0x331b1304
    89a4:	00043327 	.word	0x00043327
    89a8:	f89c 2000 	ldrb.w	r2, [ip]
    89ac:	7062      	strb	r2, [r4, #1]
    89ae:	e9c4 3101 	strd	r3, r1, [r4, #4]
    89b2:	786a      	ldrb	r2, [r5, #1]
    89b4:	1f92      	subs	r2, r2, #6
    89b6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    89ba:	7422      	strb	r2, [r4, #16]
    89bc:	d001      	beq.n	89c2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    89be:	60e0      	str	r0, [r4, #12]
    89c0:	bd70      	pop	{r4, r5, r6, pc}
    89c2:	60e1      	str	r1, [r4, #12]
    89c4:	bd70      	pop	{r4, r5, r6, pc}
    89c6:	f89c 2001 	ldrb.w	r2, [ip, #1]
    89ca:	7062      	strb	r2, [r4, #1]
    89cc:	e9c4 3001 	strd	r3, r0, [r4, #4]
    89d0:	7421      	strb	r1, [r4, #16]
    89d2:	60e1      	str	r1, [r4, #12]
    89d4:	bd70      	pop	{r4, r5, r6, pc}
    89d6:	f89c 2002 	ldrb.w	r2, [ip, #2]
    89da:	7062      	strb	r2, [r4, #1]
    89dc:	e9c4 3101 	strd	r3, r1, [r4, #4]
    89e0:	786a      	ldrb	r2, [r5, #1]
    89e2:	1f92      	subs	r2, r2, #6
    89e4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    89e8:	7422      	strb	r2, [r4, #16]
    89ea:	d0ea      	beq.n	89c2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    89ec:	e7e7      	b.n	89be <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    89ee:	f89c 2003 	ldrb.w	r2, [ip, #3]
    89f2:	7062      	strb	r2, [r4, #1]
    89f4:	e9c4 3101 	strd	r3, r1, [r4, #4]
    89f8:	786a      	ldrb	r2, [r5, #1]
    89fa:	1f92      	subs	r2, r2, #6
    89fc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    8a00:	7422      	strb	r2, [r4, #16]
    8a02:	d0de      	beq.n	89c2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    8a04:	e7db      	b.n	89be <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    8a06:	7061      	strb	r1, [r4, #1]
    8a08:	6061      	str	r1, [r4, #4]
    8a0a:	60a1      	str	r1, [r4, #8]
    8a0c:	7421      	strb	r1, [r4, #16]
    8a0e:	60e1      	str	r1, [r4, #12]
    8a10:	bd70      	pop	{r4, r5, r6, pc}
    8a12:	0000      	.short	0x0000
    8a14:	0000f882 	.word	0x0000f882

00008a18 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ>:
    8a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a1c:	b08d      	sub	sp, #52	; 0x34
    8a1e:	f7fd fb5d 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8a22:	4604      	mov	r4, r0
    8a24:	1c86      	adds	r6, r0, #2
    8a26:	f7fd fd7b 	bl	6520 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    8a2a:	2803      	cmp	r0, #3
    8a2c:	d073      	beq.n	8b16 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0xfe>
    8a2e:	2802      	cmp	r0, #2
    8a30:	bf06      	itte	eq
    8a32:	7960      	ldrbeq	r0, [r4, #5]
    8a34:	2802      	cmpeq	r0, #2
    8a36:	f04f 0b02 	movne.w	fp, #2
    8a3a:	d06c      	beq.n	8b16 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0xfe>
    8a3c:	78b0      	ldrb	r0, [r6, #2]
    8a3e:	f04f 0500 	mov.w	r5, #0
    8a42:	0940      	lsrs	r0, r0, #5
    8a44:	bf08      	it	eq
    8a46:	2401      	moveq	r4, #1
    8a48:	d00a      	beq.n	8a60 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x48>
    8a4a:	2801      	cmp	r0, #1
    8a4c:	bf08      	it	eq
    8a4e:	2402      	moveq	r4, #2
    8a50:	d006      	beq.n	8a60 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x48>
    8a52:	2802      	cmp	r0, #2
    8a54:	bf11      	iteee	ne
    8a56:	462c      	movne	r4, r5
    8a58:	2404      	moveq	r4, #4
    8a5a:	48fe      	ldreq	r0, [pc, #1016]	; (8e54 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x43c>)
    8a5c:	f880 5040 	strbeq.w	r5, [r0, #64]	; 0x40
    8a60:	7830      	ldrb	r0, [r6, #0]
    8a62:	f010 0f80 	tst.w	r0, #128	; 0x80
    8a66:	bf0c      	ite	eq
    8a68:	211e      	moveq	r1, #30
    8a6a:	f44f 7196 	movne.w	r1, #300	; 0x12c
    8a6e:	f8b6 2001 	ldrh.w	r2, [r6, #1]
    8a72:	f3c2 020c 	ubfx	r2, r2, #0, #13
    8a76:	fb12 f701 	smulbb	r7, r2, r1
    8a7a:	09c0      	lsrs	r0, r0, #7
    8a7c:	bf08      	it	eq
    8a7e:	f04f 091e 	moveq.w	r9, #30
    8a82:	d004      	beq.n	8a8e <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x76>
    8a84:	2800      	cmp	r0, #0
    8a86:	bf18      	it	ne
    8a88:	f44f 7996 	movne.w	r9, #300	; 0x12c
    8a8c:	d046      	beq.n	8b1c <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x104>
    8a8e:	f002 fc21 	bl	b2d4 <sym_PA6VKMMVXYRG4QPOV5XBZ3GQNGOJSB5VXHVKAFQ>
    8a92:	4680      	mov	r8, r0
    8a94:	f002 fc12 	bl	b2bc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8a98:	9004      	str	r0, [sp, #16]
    8a9a:	7830      	ldrb	r0, [r6, #0]
    8a9c:	eba7 0a08 	sub.w	sl, r7, r8
    8aa0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8aa4:	eb0a 0709 	add.w	r7, sl, r9
    8aa8:	2800      	cmp	r0, #0
    8aaa:	bf08      	it	eq
    8aac:	f44f 76fa 	moveq.w	r6, #500	; 0x1f4
    8ab0:	d002      	beq.n	8ab8 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0xa0>
    8ab2:	bf18      	it	ne
    8ab4:	2632      	movne	r6, #50	; 0x32
    8ab6:	d036      	beq.n	8b26 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x10e>
    8ab8:	f006 fe5f 	bl	f77a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8abc:	49e6      	ldr	r1, [pc, #920]	; (8e58 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x440>)
    8abe:	4430      	add	r0, r6
    8ac0:	fb00 1007 	mla	r0, r0, r7, r1
    8ac4:	1c49      	adds	r1, r1, #1
    8ac6:	fbb0 f8f1 	udiv	r8, r0, r1
    8aca:	f002 fbfd 	bl	b2c8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    8ace:	f002 fd6f 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8ad2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8ad6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    8ada:	fbb0 f0f1 	udiv	r0, r0, r1
    8ade:	ebaa 0000 	sub.w	r0, sl, r0
    8ae2:	eba0 0008 	sub.w	r0, r0, r8
    8ae6:	f1a0 0159 	sub.w	r1, r0, #89	; 0x59
    8aea:	f1a0 0a10 	sub.w	sl, r0, #16
    8aee:	9100      	str	r1, [sp, #0]
    8af0:	f006 f831 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    8af4:	f500 709e 	add.w	r0, r0, #316	; 0x13c
    8af8:	9900      	ldr	r1, [sp, #0]
    8afa:	b280      	uxth	r0, r0
    8afc:	f44f 76c8 	mov.w	r6, #400	; 0x190
    8b00:	f44f 77bf 	mov.w	r7, #382	; 0x17e
    8b04:	4281      	cmp	r1, r0
    8b06:	f240 80e9 	bls.w	8cdc <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x2c4>
    8b0a:	48d2      	ldr	r0, [pc, #840]	; (8e54 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x43c>)
    8b0c:	7840      	ldrb	r0, [r0, #1]
    8b0e:	b178      	cbz	r0, 8b30 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x118>
    8b10:	f000 b8cf 	b.w	8cb2 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x29a>
    8b14:	e7ff      	b.n	8b16 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0xfe>
    8b16:	f04f 0b01 	mov.w	fp, #1
    8b1a:	e78f      	b.n	8a3c <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x24>
    8b1c:	f240 310f 	movw	r1, #783	; 0x30f
    8b20:	2006      	movs	r0, #6
    8b22:	f7fb fa4b 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b26:	f240 3135 	movw	r1, #821	; 0x335
    8b2a:	2006      	movs	r0, #6
    8b2c:	f7fb fa46 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b30:	910a      	str	r1, [sp, #40]	; 0x28
    8b32:	f8dd a010 	ldr.w	sl, [sp, #16]
    8b36:	4620      	mov	r0, r4
    8b38:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    8b3c:	f002 fcea 	bl	b514 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8b40:	eb09 0148 	add.w	r1, r9, r8, lsl #1
    8b44:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8e5c <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x444>
    8b48:	4401      	add	r1, r0
    8b4a:	f24a 32a1 	movw	r2, #41889	; 0xa3a1
    8b4e:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
    8b52:	4402      	add	r2, r0
    8b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8b58:	fbb2 f0f0 	udiv	r0, r2, r0
    8b5c:	4408      	add	r0, r1
    8b5e:	f100 0860 	add.w	r8, r0, #96	; 0x60
    8b62:	980a      	ldr	r0, [sp, #40]	; 0x28
    8b64:	4482      	add	sl, r0
    8b66:	4620      	mov	r0, r4
    8b68:	f002 fcd4 	bl	b514 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8b6c:	eba8 0b00 	sub.w	fp, r8, r0
    8b70:	f859 9024 	ldr.w	r9, [r9, r4, lsl #2]
    8b74:	4620      	mov	r0, r4
    8b76:	f002 fd1b 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8b7a:	eba9 0100 	sub.w	r1, r9, r0
    8b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8b82:	fbb1 f0f0 	udiv	r0, r1, r0
    8b86:	ebab 0200 	sub.w	r2, fp, r0
    8b8a:	2c08      	cmp	r4, #8
    8b8c:	d02b      	beq.n	8be6 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x1ce>
    8b8e:	2c04      	cmp	r4, #4
    8b90:	d022      	beq.n	8bd8 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x1c0>
    8b92:	2c02      	cmp	r4, #2
    8b94:	d02f      	beq.n	8bf6 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x1de>
    8b96:	2028      	movs	r0, #40	; 0x28
    8b98:	f505 7314 	add.w	r3, r5, #592	; 0x250
    8b9c:	441a      	add	r2, r3
    8b9e:	f500 739c 	add.w	r3, r0, #312	; 0x138
    8ba2:	2108      	movs	r1, #8
    8ba4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8ba8:	4408      	add	r0, r1
    8baa:	4283      	cmp	r3, r0
    8bac:	d22a      	bcs.n	8c04 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x1ec>
    8bae:	2c08      	cmp	r4, #8
    8bb0:	bf04      	itt	eq
    8bb2:	4630      	moveq	r0, r6
    8bb4:	2140      	moveq	r1, #64	; 0x40
    8bb6:	d00c      	beq.n	8bd2 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x1ba>
    8bb8:	2c04      	cmp	r4, #4
    8bba:	bf04      	itt	eq
    8bbc:	4638      	moveq	r0, r7
    8bbe:	2110      	moveq	r1, #16
    8bc0:	d007      	beq.n	8bd2 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x1ba>
    8bc2:	2c02      	cmp	r4, #2
    8bc4:	bf07      	ittee	eq
    8bc6:	f105 0018 	addeq.w	r0, r5, #24
    8bca:	2104      	moveq	r1, #4
    8bcc:	f105 0028 	addne.w	r0, r5, #40	; 0x28
    8bd0:	2108      	movne	r1, #8
    8bd2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8bd6:	e02b      	b.n	8c30 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x218>
    8bd8:	4638      	mov	r0, r7
    8bda:	f240 33ee 	movw	r3, #1006	; 0x3ee
    8bde:	2110      	movs	r1, #16
    8be0:	f202 52ce 	addw	r2, r2, #1486	; 0x5ce
    8be4:	e7de      	b.n	8ba4 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x18c>
    8be6:	f241 23d0 	movw	r3, #4816	; 0x12d0
    8bea:	441a      	add	r2, r3
    8bec:	4630      	mov	r0, r6
    8bee:	f44f 6335 	mov.w	r3, #2896	; 0xb50
    8bf2:	2140      	movs	r1, #64	; 0x40
    8bf4:	e7d6      	b.n	8ba4 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x18c>
    8bf6:	f505 7396 	add.w	r3, r5, #300	; 0x12c
    8bfa:	441a      	add	r2, r3
    8bfc:	2018      	movs	r0, #24
    8bfe:	3b78      	subs	r3, #120	; 0x78
    8c00:	2104      	movs	r1, #4
    8c02:	e7cf      	b.n	8ba4 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x18c>
    8c04:	2c08      	cmp	r4, #8
    8c06:	bf04      	itt	eq
    8c08:	4630      	moveq	r0, r6
    8c0a:	2140      	moveq	r1, #64	; 0x40
    8c0c:	d00c      	beq.n	8c28 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x210>
    8c0e:	2c04      	cmp	r4, #4
    8c10:	bf04      	itt	eq
    8c12:	4638      	moveq	r0, r7
    8c14:	2110      	moveq	r1, #16
    8c16:	d007      	beq.n	8c28 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x210>
    8c18:	2c02      	cmp	r4, #2
    8c1a:	bf07      	ittee	eq
    8c1c:	f105 0018 	addeq.w	r0, r5, #24
    8c20:	2104      	moveq	r1, #4
    8c22:	f105 0028 	addne.w	r0, r5, #40	; 0x28
    8c26:	2108      	movne	r1, #8
    8c28:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    8c2c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
    8c30:	4408      	add	r0, r1
    8c32:	4410      	add	r0, r2
    8c34:	f014 010c 	ands.w	r1, r4, #12
    8c38:	bf18      	it	ne
    8c3a:	2128      	movne	r1, #40	; 0x28
    8c3c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    8c40:	2c08      	cmp	r4, #8
    8c42:	bf08      	it	eq
    8c44:	2040      	moveq	r0, #64	; 0x40
    8c46:	d00c      	beq.n	8c62 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x24a>
    8c48:	2c04      	cmp	r4, #4
    8c4a:	bf04      	itt	eq
    8c4c:	463e      	moveq	r6, r7
    8c4e:	2010      	moveq	r0, #16
    8c50:	d007      	beq.n	8c62 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x24a>
    8c52:	2c02      	cmp	r4, #2
    8c54:	bf07      	ittee	eq
    8c56:	f105 0618 	addeq.w	r6, r5, #24
    8c5a:	2004      	moveq	r0, #4
    8c5c:	f105 0628 	addne.w	r6, r5, #40	; 0x28
    8c60:	2008      	movne	r0, #8
    8c62:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    8c66:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8c6a:	4408      	add	r0, r1
    8c6c:	f500 7408 	add.w	r4, r0, #544	; 0x220
    8c70:	2001      	movs	r0, #1
    8c72:	f88d 5008 	strb.w	r5, [sp, #8]
    8c76:	f88d 0013 	strb.w	r0, [sp, #19]
    8c7a:	f005 ff6c 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    8c7e:	f8ad 0010 	strh.w	r0, [sp, #16]
    8c82:	4974      	ldr	r1, [pc, #464]	; (8e54 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x43c>)
    8c84:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8c86:	f88d 0012 	strb.w	r0, [sp, #18]
    8c8a:	e9d1 0208 	ldrd	r0, r2, [r1, #32]
    8c8e:	eb10 000a 	adds.w	r0, r0, sl
    8c92:	416a      	adcs	r2, r5
    8c94:	e9cd 0206 	strd	r0, r2, [sp, #24]
    8c98:	9403      	str	r4, [sp, #12]
    8c9a:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    8c9e:	638c      	str	r4, [r1, #56]	; 0x38
    8ca0:	e9c1 0208 	strd	r0, r2, [r1, #32]
    8ca4:	f7fd fa1a 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8ca8:	7800      	ldrb	r0, [r0, #0]
    8caa:	a902      	add	r1, sp, #8
    8cac:	f7f8 fcfe 	bl	16ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8cb0:	b178      	cbz	r0, 8cd2 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x2ba>
    8cb2:	4c68      	ldr	r4, [pc, #416]	; (8e54 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x43c>)
    8cb4:	7d20      	ldrb	r0, [r4, #20]
    8cb6:	2800      	cmp	r0, #0
    8cb8:	bf04      	itt	eq
    8cba:	b00d      	addeq	sp, #52	; 0x34
    8cbc:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cc0:	f002 fb2a 	bl	b318 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8cc4:	f7f9 fb24 	bl	2310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8cc8:	7525      	strb	r5, [r4, #20]
    8cca:	7565      	strb	r5, [r4, #21]
    8ccc:	b00d      	add	sp, #52	; 0x34
    8cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cd2:	f640 2121 	movw	r1, #2593	; 0xa21
    8cd6:	2035      	movs	r0, #53	; 0x35
    8cd8:	f7fb f970 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cdc:	f8cd 8000 	str.w	r8, [sp]
    8ce0:	f8dd 8010 	ldr.w	r8, [sp, #16]
    8ce4:	4620      	mov	r0, r4
    8ce6:	f8cd b008 	str.w	fp, [sp, #8]
    8cea:	f002 fc13 	bl	b514 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8cee:	4601      	mov	r1, r0
    8cf0:	9800      	ldr	r0, [sp, #0]
    8cf2:	eb0a 0208 	add.w	r2, sl, r8
    8cf6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    8cfa:	4448      	add	r0, r9
    8cfc:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8e5c <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x444>
    8d00:	9206      	str	r2, [sp, #24]
    8d02:	4401      	add	r1, r0
    8d04:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
    8d08:	f200 32e7 	addw	r2, r0, #999	; 0x3e7
    8d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8d10:	fbb2 f0f0 	udiv	r0, r2, r0
    8d14:	4408      	add	r0, r1
    8d16:	f100 0120 	add.w	r1, r0, #32
    8d1a:	4620      	mov	r0, r4
    8d1c:	9100      	str	r1, [sp, #0]
    8d1e:	f002 fbf9 	bl	b514 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8d22:	9900      	ldr	r1, [sp, #0]
    8d24:	f859 9024 	ldr.w	r9, [r9, r4, lsl #2]
    8d28:	eba1 0108 	sub.w	r1, r1, r8
    8d2c:	eba1 010a 	sub.w	r1, r1, sl
    8d30:	eba1 0b00 	sub.w	fp, r1, r0
    8d34:	4620      	mov	r0, r4
    8d36:	f002 fc3b 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8d3a:	eba9 0100 	sub.w	r1, r9, r0
    8d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8d42:	fbb1 f0f0 	udiv	r0, r1, r0
    8d46:	ebab 0200 	sub.w	r2, fp, r0
    8d4a:	2c08      	cmp	r4, #8
    8d4c:	d02b      	beq.n	8da6 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x38e>
    8d4e:	2c04      	cmp	r4, #4
    8d50:	d022      	beq.n	8d98 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x380>
    8d52:	2c02      	cmp	r4, #2
    8d54:	d02f      	beq.n	8db6 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x39e>
    8d56:	2028      	movs	r0, #40	; 0x28
    8d58:	f505 7314 	add.w	r3, r5, #592	; 0x250
    8d5c:	441a      	add	r2, r3
    8d5e:	f500 739c 	add.w	r3, r0, #312	; 0x138
    8d62:	2108      	movs	r1, #8
    8d64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8d68:	4408      	add	r0, r1
    8d6a:	4283      	cmp	r3, r0
    8d6c:	d22a      	bcs.n	8dc4 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x3ac>
    8d6e:	2c08      	cmp	r4, #8
    8d70:	bf04      	itt	eq
    8d72:	4630      	moveq	r0, r6
    8d74:	2140      	moveq	r1, #64	; 0x40
    8d76:	d00c      	beq.n	8d92 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x37a>
    8d78:	2c04      	cmp	r4, #4
    8d7a:	bf04      	itt	eq
    8d7c:	4638      	moveq	r0, r7
    8d7e:	2110      	moveq	r1, #16
    8d80:	d007      	beq.n	8d92 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x37a>
    8d82:	2c02      	cmp	r4, #2
    8d84:	bf07      	ittee	eq
    8d86:	f105 0018 	addeq.w	r0, r5, #24
    8d8a:	2104      	moveq	r1, #4
    8d8c:	f105 0028 	addne.w	r0, r5, #40	; 0x28
    8d90:	2108      	movne	r1, #8
    8d92:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8d96:	e02b      	b.n	8df0 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x3d8>
    8d98:	4638      	mov	r0, r7
    8d9a:	f240 33ee 	movw	r3, #1006	; 0x3ee
    8d9e:	2110      	movs	r1, #16
    8da0:	f202 52ce 	addw	r2, r2, #1486	; 0x5ce
    8da4:	e7de      	b.n	8d64 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x34c>
    8da6:	f241 23d0 	movw	r3, #4816	; 0x12d0
    8daa:	441a      	add	r2, r3
    8dac:	4630      	mov	r0, r6
    8dae:	f44f 6335 	mov.w	r3, #2896	; 0xb50
    8db2:	2140      	movs	r1, #64	; 0x40
    8db4:	e7d6      	b.n	8d64 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x34c>
    8db6:	f505 7396 	add.w	r3, r5, #300	; 0x12c
    8dba:	441a      	add	r2, r3
    8dbc:	2018      	movs	r0, #24
    8dbe:	3b78      	subs	r3, #120	; 0x78
    8dc0:	2104      	movs	r1, #4
    8dc2:	e7cf      	b.n	8d64 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x34c>
    8dc4:	2c08      	cmp	r4, #8
    8dc6:	bf04      	itt	eq
    8dc8:	4630      	moveq	r0, r6
    8dca:	2140      	moveq	r1, #64	; 0x40
    8dcc:	d00c      	beq.n	8de8 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x3d0>
    8dce:	2c04      	cmp	r4, #4
    8dd0:	bf04      	itt	eq
    8dd2:	4638      	moveq	r0, r7
    8dd4:	2110      	moveq	r1, #16
    8dd6:	d007      	beq.n	8de8 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x3d0>
    8dd8:	2c02      	cmp	r4, #2
    8dda:	bf07      	ittee	eq
    8ddc:	f105 0018 	addeq.w	r0, r5, #24
    8de0:	2104      	moveq	r1, #4
    8de2:	f105 0028 	addne.w	r0, r5, #40	; 0x28
    8de6:	2108      	movne	r1, #8
    8de8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    8dec:	eb03 1141 	add.w	r1, r3, r1, lsl #5
    8df0:	4408      	add	r0, r1
    8df2:	4410      	add	r0, r2
    8df4:	f014 010c 	ands.w	r1, r4, #12
    8df8:	bf18      	it	ne
    8dfa:	2128      	movne	r1, #40	; 0x28
    8dfc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8e00:	2c08      	cmp	r4, #8
    8e02:	bf08      	it	eq
    8e04:	2140      	moveq	r1, #64	; 0x40
    8e06:	d00c      	beq.n	8e22 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x40a>
    8e08:	2c04      	cmp	r4, #4
    8e0a:	bf04      	itt	eq
    8e0c:	463e      	moveq	r6, r7
    8e0e:	2110      	moveq	r1, #16
    8e10:	d007      	beq.n	8e22 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x40a>
    8e12:	2c02      	cmp	r4, #2
    8e14:	bf07      	ittee	eq
    8e16:	f105 0618 	addeq.w	r6, r5, #24
    8e1a:	2104      	moveq	r1, #4
    8e1c:	f105 0628 	addne.w	r6, r5, #40	; 0x28
    8e20:	2108      	movne	r1, #8
    8e22:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    8e26:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8e2a:	4408      	add	r0, r1
    8e2c:	4c09      	ldr	r4, [pc, #36]	; (8e54 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x43c>)
    8e2e:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    8e32:	4450      	add	r0, sl
    8e34:	4440      	add	r0, r8
    8e36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    8e38:	30f4      	adds	r0, #244	; 0xf4
    8e3a:	4281      	cmp	r1, r0
    8e3c:	d226      	bcs.n	8e8c <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x474>
    8e3e:	1a46      	subs	r6, r0, r1
    8e40:	2e65      	cmp	r6, #101	; 0x65
    8e42:	bf38      	it	cc
    8e44:	2665      	movcc	r6, #101	; 0x65
    8e46:	1988      	adds	r0, r1, r6
    8e48:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8e4c:	d20b      	bcs.n	8e66 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x44e>
    8e4e:	4630      	mov	r0, r6
    8e50:	9902      	ldr	r1, [sp, #8]
    8e52:	e005      	b.n	8e60 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x448>
    8e54:	20000ce0 	.word	0x20000ce0
    8e58:	000f423f 	.word	0x000f423f
    8e5c:	00009e98 	.word	0x00009e98
    8e60:	f7f8 fa06 	bl	1270 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8e64:	b150      	cbz	r0, 8e7c <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x464>
    8e66:	2101      	movs	r1, #1
    8e68:	2002      	movs	r0, #2
    8e6a:	f7fd f911 	bl	6090 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    8e6e:	f7fc fe89 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8e72:	7d20      	ldrb	r0, [r4, #20]
    8e74:	b3f0      	cbz	r0, 8ef4 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4dc>
    8e76:	7860      	ldrb	r0, [r4, #1]
    8e78:	b350      	cbz	r0, 8ed0 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4b8>
    8e7a:	e03d      	b.n	8ef8 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4e0>
    8e7c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    8e7e:	4924      	ldr	r1, [pc, #144]	; (8f10 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4f8>)
    8e80:	4430      	add	r0, r6
    8e82:	63a0      	str	r0, [r4, #56]	; 0x38
    8e84:	38e3      	subs	r0, #227	; 0xe3
    8e86:	60c8      	str	r0, [r1, #12]
    8e88:	f7f9 fb12 	bl	24b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8e8c:	9806      	ldr	r0, [sp, #24]
    8e8e:	9004      	str	r0, [sp, #16]
    8e90:	9800      	ldr	r0, [sp, #0]
    8e92:	9002      	str	r0, [sp, #8]
    8e94:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    8e98:	f88d 0014 	strb.w	r0, [sp, #20]
    8e9c:	2002      	movs	r0, #2
    8e9e:	f88d 000c 	strb.w	r0, [sp, #12]
    8ea2:	f88d 5015 	strb.w	r5, [sp, #21]
    8ea6:	a802      	add	r0, sp, #8
    8ea8:	f7fd fa34 	bl	6314 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    8eac:	b120      	cbz	r0, 8eb8 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4a0>
    8eae:	f640 215b 	movw	r1, #2651	; 0xa5b
    8eb2:	2035      	movs	r0, #53	; 0x35
    8eb4:	f7fb f882 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8eb8:	f7fd faec 	bl	6494 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    8ebc:	2800      	cmp	r0, #0
    8ebe:	bf04      	itt	eq
    8ec0:	b00d      	addeq	sp, #52	; 0x34
    8ec2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ec6:	f640 215c 	movw	r1, #2652	; 0xa5c
    8eca:	2035      	movs	r0, #53	; 0x35
    8ecc:	f7fb f876 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ed0:	2300      	movs	r3, #0
    8ed2:	461a      	mov	r2, r3
    8ed4:	4619      	mov	r1, r3
    8ed6:	4668      	mov	r0, sp
    8ed8:	f000 fc90 	bl	97fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x488>
    8edc:	2800      	cmp	r0, #0
    8ede:	bf04      	itt	eq
    8ee0:	2001      	moveq	r0, #1
    8ee2:	70a0      	strbeq	r0, [r4, #2]
    8ee4:	d008      	beq.n	8ef8 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4e0>
    8ee6:	f7fd f8f9 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8eea:	7800      	ldrb	r0, [r0, #0]
    8eec:	4669      	mov	r1, sp
    8eee:	f7f8 fbdd 	bl	16ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8ef2:	e000      	b.n	8ef6 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4de>
    8ef4:	e000      	b.n	8ef8 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4e0>
    8ef6:	b130      	cbz	r0, 8f06 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x4ee>
    8ef8:	7d20      	ldrb	r0, [r4, #20]
    8efa:	2800      	cmp	r0, #0
    8efc:	bf04      	itt	eq
    8efe:	b00d      	addeq	sp, #52	; 0x34
    8f00:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f04:	e6dc      	b.n	8cc0 <sym_M7PDPLIA5IB47N4TLERR55KZLPOT46DZ6CRR2HQ+0x2a8>
    8f06:	f640 2199 	movw	r1, #2713	; 0xa99
    8f0a:	2035      	movs	r0, #53	; 0x35
    8f0c:	f7fb f856 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f10:	20000cd0 	.word	0x20000cd0

00008f14 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    8f14:	b570      	push	{r4, r5, r6, lr}
    8f16:	4606      	mov	r6, r0
    8f18:	f7f9 fba2 	bl	2660 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8f1c:	4d29      	ldr	r5, [pc, #164]	; (8fc4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xb0>)
    8f1e:	69a9      	ldr	r1, [r5, #24]
    8f20:	1a44      	subs	r4, r0, r1
    8f22:	f7fd f8db 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8f26:	7840      	ldrb	r0, [r0, #1]
    8f28:	2200      	movs	r2, #0
    8f2a:	2e07      	cmp	r6, #7
    8f2c:	d245      	bcs.n	8fba <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xa6>
    8f2e:	e8df f006 	tbb	[pc, r6]
    8f32:	4204      	.short	0x4204
    8f34:	422e2742 	.word	0x422e2742
    8f38:	0042      	.short	0x0042
    8f3a:	2808      	cmp	r0, #8
    8f3c:	d00d      	beq.n	8f5a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x46>
    8f3e:	2804      	cmp	r0, #4
    8f40:	d00f      	beq.n	8f62 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x4e>
    8f42:	2802      	cmp	r0, #2
    8f44:	d013      	beq.n	8f6e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    8f46:	2108      	movs	r1, #8
    8f48:	2801      	cmp	r0, #1
    8f4a:	bf04      	itt	eq
    8f4c:	202a      	moveq	r0, #42	; 0x2a
    8f4e:	2328      	moveq	r3, #40	; 0x28
    8f50:	d010      	beq.n	8f74 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>
    8f52:	21df      	movs	r1, #223	; 0xdf
    8f54:	2005      	movs	r0, #5
    8f56:	f7fb f831 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f5a:	2140      	movs	r1, #64	; 0x40
    8f5c:	2014      	movs	r0, #20
    8f5e:	460a      	mov	r2, r1
    8f60:	e002      	b.n	8f68 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    8f62:	2110      	movs	r1, #16
    8f64:	2014      	movs	r0, #20
    8f66:	222e      	movs	r2, #46	; 0x2e
    8f68:	f44f 73a8 	mov.w	r3, #336	; 0x150
    8f6c:	e002      	b.n	8f74 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>
    8f6e:	2104      	movs	r1, #4
    8f70:	2012      	movs	r0, #18
    8f72:	2318      	movs	r3, #24
    8f74:	441a      	add	r2, r3
    8f76:	fb11 2000 	smlabb	r0, r1, r0, r2
    8f7a:	b280      	uxth	r0, r0
    8f7c:	3098      	adds	r0, #152	; 0x98
    8f7e:	e008      	b.n	8f92 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x7e>
    8f80:	f010 000c 	ands.w	r0, r0, #12
    8f84:	bf18      	it	ne
    8f86:	2028      	movne	r0, #40	; 0x28
    8f88:	f500 7057 	add.w	r0, r0, #860	; 0x35c
    8f8c:	e001      	b.n	8f92 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x7e>
    8f8e:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    8f92:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8f94:	4404      	add	r4, r0
    8f96:	39f4      	subs	r1, #244	; 0xf4
    8f98:	428c      	cmp	r4, r1
    8f9a:	d309      	bcc.n	8fb0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9c>
    8f9c:	2600      	movs	r6, #0
    8f9e:	f000 fbc3 	bl	9728 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b4>
    8fa2:	b130      	cbz	r0, 8fb2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9e>
    8fa4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    8fa6:	38f4      	subs	r0, #244	; 0xf4
    8fa8:	4284      	cmp	r4, r0
    8faa:	bf28      	it	cs
    8fac:	2600      	movcs	r6, #0
    8fae:	d200      	bcs.n	8fb2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9e>
    8fb0:	2601      	movs	r6, #1
    8fb2:	4630      	mov	r0, r6
    8fb4:	bd70      	pop	{r4, r5, r6, pc}
    8fb6:	2001      	movs	r0, #1
    8fb8:	bd70      	pop	{r4, r5, r6, pc}
    8fba:	f240 5193 	movw	r1, #1427	; 0x593
    8fbe:	2035      	movs	r0, #53	; 0x35
    8fc0:	f7fa fffc 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fc4:	20000ce0 	.word	0x20000ce0

00008fc8 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY>:
    8fc8:	b510      	push	{r4, lr}
    8fca:	b086      	sub	sp, #24
    8fcc:	f7fc fdda 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8fd0:	4c14      	ldr	r4, [pc, #80]	; (9024 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x5c>)
    8fd2:	7d20      	ldrb	r0, [r4, #20]
    8fd4:	b198      	cbz	r0, 8ffe <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x36>
    8fd6:	7860      	ldrb	r0, [r4, #1]
    8fd8:	b988      	cbnz	r0, 8ffe <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x36>
    8fda:	2300      	movs	r3, #0
    8fdc:	461a      	mov	r2, r3
    8fde:	4619      	mov	r1, r3
    8fe0:	4668      	mov	r0, sp
    8fe2:	f000 fc0b 	bl	97fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x488>
    8fe6:	2800      	cmp	r0, #0
    8fe8:	bf04      	itt	eq
    8fea:	2001      	moveq	r0, #1
    8fec:	70a0      	strbeq	r0, [r4, #2]
    8fee:	d006      	beq.n	8ffe <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x36>
    8ff0:	f7fd f874 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8ff4:	7800      	ldrb	r0, [r0, #0]
    8ff6:	4669      	mov	r1, sp
    8ff8:	f7f8 fb58 	bl	16ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8ffc:	b168      	cbz	r0, 901a <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x52>
    8ffe:	7d20      	ldrb	r0, [r4, #20]
    9000:	2800      	cmp	r0, #0
    9002:	bf04      	itt	eq
    9004:	b006      	addeq	sp, #24
    9006:	bd10      	popeq	{r4, pc}
    9008:	f002 f986 	bl	b318 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    900c:	f7f9 f980 	bl	2310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9010:	2000      	movs	r0, #0
    9012:	7520      	strb	r0, [r4, #20]
    9014:	7560      	strb	r0, [r4, #21]
    9016:	b006      	add	sp, #24
    9018:	bd10      	pop	{r4, pc}
    901a:	f640 2199 	movw	r1, #2713	; 0xa99
    901e:	2035      	movs	r0, #53	; 0x35
    9020:	f7fa ffcc 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9024:	20000ce0 	.word	0x20000ce0

00009028 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    9028:	b570      	push	{r4, r5, r6, lr}
    902a:	2268      	movs	r2, #104	; 0x68
    902c:	2100      	movs	r1, #0
    902e:	4813      	ldr	r0, [pc, #76]	; (907c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x54>)
    9030:	f003 fdf7 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9034:	f7fd f852 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9038:	2120      	movs	r1, #32
    903a:	7001      	strb	r1, [r0, #0]
    903c:	4810      	ldr	r0, [pc, #64]	; (9080 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x58>)
    903e:	2100      	movs	r1, #0
    9040:	6001      	str	r1, [r0, #0]
    9042:	6041      	str	r1, [r0, #4]
    9044:	6081      	str	r1, [r0, #8]
    9046:	60c1      	str	r1, [r0, #12]
    9048:	480e      	ldr	r0, [pc, #56]	; (9084 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x5c>)
    904a:	6041      	str	r1, [r0, #4]
    904c:	6840      	ldr	r0, [r0, #4]
    904e:	f641 016a 	movw	r1, #6250	; 0x186a
    9052:	4288      	cmp	r0, r1
    9054:	d304      	bcc.n	9060 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>
    9056:	f640 412a 	movw	r1, #3114	; 0xc2a
    905a:	2035      	movs	r0, #53	; 0x35
    905c:	f7fa ffae 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9060:	f000 f812 	bl	9088 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    9064:	4d05      	ldr	r5, [pc, #20]	; (907c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x54>)
    9066:	f242 7410 	movw	r4, #10000	; 0x2710
    906a:	10a0      	asrs	r0, r4, #2
    906c:	6068      	str	r0, [r5, #4]
    906e:	f005 fd72 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9072:	306b      	adds	r0, #107	; 0x6b
    9074:	b280      	uxth	r0, r0
    9076:	1a20      	subs	r0, r4, r0
    9078:	60a8      	str	r0, [r5, #8]
    907a:	bd70      	pop	{r4, r5, r6, pc}
    907c:	20000ce0 	.word	0x20000ce0
    9080:	20000cd0 	.word	0x20000cd0
    9084:	200002ac 	.word	0x200002ac

00009088 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    9088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    908c:	4f35      	ldr	r7, [pc, #212]	; (9164 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xdc>)
    908e:	b083      	sub	sp, #12
    9090:	7838      	ldrb	r0, [r7, #0]
    9092:	2800      	cmp	r0, #0
    9094:	bf18      	it	ne
    9096:	f000 f8e1 	blne	925c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    909a:	2001      	movs	r0, #1
    909c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 9168 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xe0>
    90a0:	f888 0000 	strb.w	r0, [r8]
    90a4:	4669      	mov	r1, sp
    90a6:	2000      	movs	r0, #0
    90a8:	f004 fcd3 	bl	da52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    90ac:	2800      	cmp	r0, #0
    90ae:	bf04      	itt	eq
    90b0:	2500      	moveq	r5, #0
    90b2:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    90b6:	d02d      	beq.n	9114 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x8c>
    90b8:	e027      	b.n	910a <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x82>
    90ba:	9802      	ldr	r0, [sp, #8]
    90bc:	2800      	cmp	r0, #0
    90be:	bf1c      	itt	ne
    90c0:	f890 1290 	ldrbne.w	r1, [r0, #656]	; 0x290
    90c4:	2900      	cmpne	r1, #0
    90c6:	d025      	beq.n	9114 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x8c>
    90c8:	8800      	ldrh	r0, [r0, #0]
    90ca:	42b0      	cmp	r0, r6
    90cc:	bf18      	it	ne
    90ce:	f04f 0920 	movne.w	r9, #32
    90d2:	d03f      	beq.n	9154 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    90d4:	2100      	movs	r1, #0
    90d6:	f004 fcb2 	bl	da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    90da:	0004      	movs	r4, r0
    90dc:	d020      	beq.n	9120 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x98>
    90de:	f894 0291 	ldrb.w	r0, [r4, #657]	; 0x291
    90e2:	f7f8 ffd5 	bl	2090 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    90e6:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
    90ea:	f894 0291 	ldrb.w	r0, [r4, #657]	; 0x291
    90ee:	f7f8 ffad 	bl	204c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    90f2:	b1d0      	cbz	r0, 912a <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xa2>
    90f4:	f884 9291 	strb.w	r9, [r4, #657]	; 0x291
    90f8:	f504 701c 	add.w	r0, r4, #624	; 0x270
    90fc:	f001 f914 	bl	a328 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    9100:	4669      	mov	r1, sp
    9102:	2000      	movs	r0, #0
    9104:	f004 fca5 	bl	da52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    9108:	b1f8      	cbz	r0, 914a <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc2>
    910a:	f240 2143 	movw	r1, #579	; 0x243
    910e:	2035      	movs	r0, #53	; 0x35
    9110:	f7fa ff54 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9114:	4668      	mov	r0, sp
    9116:	f7fb f985 	bl	4424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    911a:	2800      	cmp	r0, #0
    911c:	d0cd      	beq.n	90ba <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x32>
    911e:	e019      	b.n	9154 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    9120:	f240 5144 	movw	r1, #1348	; 0x544
    9124:	2035      	movs	r0, #53	; 0x35
    9126:	f7fa ff49 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    912a:	f240 5133 	movw	r1, #1331	; 0x533
    912e:	2035      	movs	r0, #53	; 0x35
    9130:	f7fa ff44 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9134:	9802      	ldr	r0, [sp, #8]
    9136:	2800      	cmp	r0, #0
    9138:	bf1c      	itt	ne
    913a:	f890 1290 	ldrbne.w	r1, [r0, #656]	; 0x290
    913e:	2900      	cmpne	r1, #0
    9140:	d003      	beq.n	914a <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc2>
    9142:	8800      	ldrh	r0, [r0, #0]
    9144:	42b0      	cmp	r0, r6
    9146:	d1c5      	bne.n	90d4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x4c>
    9148:	e004      	b.n	9154 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    914a:	4668      	mov	r0, sp
    914c:	f7fb f96a 	bl	4424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9150:	2800      	cmp	r0, #0
    9152:	d0ef      	beq.n	9134 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xac>
    9154:	f888 5000 	strb.w	r5, [r8]
    9158:	f8a7 5064 	strh.w	r5, [r7, #100]	; 0x64
    915c:	b003      	add	sp, #12
    915e:	2000      	movs	r0, #0
    9160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9164:	20000ce0 	.word	0x20000ce0
    9168:	20000cd0 	.word	0x20000cd0

0000916c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    916c:	4901      	ldr	r1, [pc, #4]	; (9174 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    916e:	7048      	strb	r0, [r1, #1]
    9170:	4770      	bx	lr
    9172:	0000      	.short	0x0000
    9174:	20000cd0 	.word	0x20000cd0

00009178 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    9178:	b570      	push	{r4, r5, r6, lr}
    917a:	4605      	mov	r5, r0
    917c:	480a      	ldr	r0, [pc, #40]	; (91a8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>)
    917e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9182:	fbb0 f4f1 	udiv	r4, r0, r1
    9186:	f005 fce6 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    918a:	306b      	adds	r0, #107	; 0x6b
    918c:	b280      	uxth	r0, r0
    918e:	4420      	add	r0, r4
    9190:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    9194:	4628      	mov	r0, r5
    9196:	f005 f9f3 	bl	e580 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    919a:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
    919e:	bf28      	it	cs
    91a0:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
    91a4:	b280      	uxth	r0, r0
    91a6:	bd70      	pop	{r4, r5, r6, pc}
    91a8:	000122f9 	.word	0x000122f9

000091ac <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    91ac:	2900      	cmp	r1, #0
    91ae:	bf1c      	itt	ne
    91b0:	2011      	movne	r0, #17
    91b2:	4770      	bxne	lr
    91b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    91b6:	4c27      	ldr	r4, [pc, #156]	; (9254 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa8>)
    91b8:	4607      	mov	r7, r0
    91ba:	b087      	sub	sp, #28
    91bc:	7820      	ldrb	r0, [r4, #0]
    91be:	2800      	cmp	r0, #0
    91c0:	bf1e      	ittt	ne
    91c2:	200c      	movne	r0, #12
    91c4:	b007      	addne	sp, #28
    91c6:	bdf0      	popne	{r4, r5, r6, r7, pc}
    91c8:	f7fc ff88 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    91cc:	4606      	mov	r6, r0
    91ce:	2000      	movs	r0, #0
    91d0:	7060      	strb	r0, [r4, #1]
    91d2:	2104      	movs	r1, #4
    91d4:	7021      	strb	r1, [r4, #0]
    91d6:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    91da:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    91de:	4605      	mov	r5, r0
    91e0:	f005 fcb9 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    91e4:	306b      	adds	r0, #107	; 0x6b
    91e6:	b281      	uxth	r1, r0
    91e8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    91ec:	2000      	movs	r0, #0
    91ee:	bf00      	nop
    91f0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    91f4:	1c40      	adds	r0, r0, #1
    91f6:	689b      	ldr	r3, [r3, #8]
    91f8:	eb05 0c01 	add.w	ip, r5, r1
    91fc:	b2c0      	uxtb	r0, r0
    91fe:	eb03 050c 	add.w	r5, r3, ip
    9202:	4282      	cmp	r2, r0
    9204:	d2f4      	bcs.n	91f0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x44>
    9206:	2100      	movs	r1, #0
    9208:	4813      	ldr	r0, [pc, #76]	; (9258 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xac>)
    920a:	6525      	str	r5, [r4, #80]	; 0x50
    920c:	f7f9 f858 	bl	22c0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    9210:	7030      	strb	r0, [r6, #0]
    9212:	2820      	cmp	r0, #32
    9214:	d014      	beq.n	9240 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x94>
    9216:	463b      	mov	r3, r7
    9218:	2200      	movs	r2, #0
    921a:	2101      	movs	r1, #1
    921c:	4668      	mov	r0, sp
    921e:	f000 faed 	bl	97fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x488>
    9222:	b190      	cbz	r0, 924a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x9e>
    9224:	7830      	ldrb	r0, [r6, #0]
    9226:	4669      	mov	r1, sp
    9228:	f7f8 fa40 	bl	16ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    922c:	2800      	cmp	r0, #0
    922e:	bf1e      	ittt	ne
    9230:	2000      	movne	r0, #0
    9232:	b007      	addne	sp, #28
    9234:	bdf0      	popne	{r4, r5, r6, r7, pc}
    9236:	f240 419a 	movw	r1, #1178	; 0x49a
    923a:	2035      	movs	r0, #53	; 0x35
    923c:	f7fa febe 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9240:	f240 4197 	movw	r1, #1175	; 0x497
    9244:	2035      	movs	r0, #53	; 0x35
    9246:	f7fa feb9 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    924a:	f240 4199 	movw	r1, #1177	; 0x499
    924e:	2035      	movs	r0, #53	; 0x35
    9250:	f7fa feb4 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9254:	20000ce0 	.word	0x20000ce0
    9258:	0000942d 	.word	0x0000942d

0000925c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9260:	2600      	movs	r6, #0
    9262:	f7fc ff3b 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9266:	4c3f      	ldr	r4, [pc, #252]	; (9364 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x108>)
    9268:	4607      	mov	r7, r0
    926a:	7820      	ldrb	r0, [r4, #0]
    926c:	2804      	cmp	r0, #4
    926e:	bf1f      	itttt	ne
    9270:	7820      	ldrbne	r0, [r4, #0]
    9272:	2805      	cmpne	r0, #5
    9274:	200c      	movne	r0, #12
    9276:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    927a:	f04f 0001 	mov.w	r0, #1
    927e:	7060      	strb	r0, [r4, #1]
    9280:	7d20      	ldrb	r0, [r4, #20]
    9282:	f04f 0500 	mov.w	r5, #0
    9286:	b1b0      	cbz	r0, 92b6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x5a>
    9288:	f3ef 8810 	mrs	r8, PRIMASK
    928c:	b672      	cpsid	i
    928e:	7d20      	ldrb	r0, [r4, #20]
    9290:	2800      	cmp	r0, #0
    9292:	bf1c      	itt	ne
    9294:	7d60      	ldrbne	r0, [r4, #21]
    9296:	2800      	cmpne	r0, #0
    9298:	d009      	beq.n	92ae <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x52>
    929a:	f7fd f901 	bl	64a0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    929e:	7d20      	ldrb	r0, [r4, #20]
    92a0:	b128      	cbz	r0, 92ae <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x52>
    92a2:	f002 f839 	bl	b318 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    92a6:	f7f9 f833 	bl	2310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    92aa:	7525      	strb	r5, [r4, #20]
    92ac:	7565      	strb	r5, [r4, #21]
    92ae:	f1b8 0f00 	cmp.w	r8, #0
    92b2:	d10e      	bne.n	92d2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    92b4:	e00c      	b.n	92d0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x74>
    92b6:	7838      	ldrb	r0, [r7, #0]
    92b8:	f7f8 fd92 	bl	1de0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    92bc:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    92c0:	04c0      	lsls	r0, r0, #19
    92c2:	0cc0      	lsrs	r0, r0, #19
    92c4:	d005      	beq.n	92d2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    92c6:	2100      	movs	r1, #0
    92c8:	2003      	movs	r0, #3
    92ca:	f7fc fee1 	bl	6090 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    92ce:	e000      	b.n	92d2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    92d0:	b662      	cpsie	i
    92d2:	7838      	ldrb	r0, [r7, #0]
    92d4:	f7f8 fedc 	bl	2090 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    92d8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    92dc:	2800      	cmp	r0, #0
    92de:	7820      	ldrb	r0, [r4, #0]
    92e0:	d02f      	beq.n	9342 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xe6>
    92e2:	2805      	cmp	r0, #5
    92e4:	d004      	beq.n	92f0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x94>
    92e6:	f240 3192 	movw	r1, #914	; 0x392
    92ea:	2035      	movs	r0, #53	; 0x35
    92ec:	f7fa fe66 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
    92f2:	b120      	cbz	r0, 92fe <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    92f4:	f104 0048 	add.w	r0, r4, #72	; 0x48
    92f8:	f000 ffcc 	bl	a294 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    92fc:	e003      	b.n	9306 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xaa>
    92fe:	f104 0048 	add.w	r0, r4, #72	; 0x48
    9302:	f001 f811 	bl	a328 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    9306:	7065      	strb	r5, [r4, #1]
    9308:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    930c:	2800      	cmp	r0, #0
    930e:	bf18      	it	ne
    9310:	260c      	movne	r6, #12
    9312:	f7fc ffb7 	bl	6284 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    9316:	70a5      	strb	r5, [r4, #2]
    9318:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    931c:	62a5      	str	r5, [r4, #40]	; 0x28
    931e:	7820      	ldrb	r0, [r4, #0]
    9320:	2804      	cmp	r0, #4
    9322:	bf08      	it	eq
    9324:	f7ff fab8 	bleq	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    9328:	7025      	strb	r5, [r4, #0]
    932a:	f7fc fed7 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    932e:	4604      	mov	r4, r0
    9330:	7800      	ldrb	r0, [r0, #0]
    9332:	f7f8 fe8b 	bl	204c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9336:	b178      	cbz	r0, 9358 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xfc>
    9338:	2020      	movs	r0, #32
    933a:	7020      	strb	r0, [r4, #0]
    933c:	4630      	mov	r0, r6
    933e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9342:	2805      	cmp	r0, #5
    9344:	d1db      	bne.n	92fe <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    9346:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9348:	2800      	cmp	r0, #0
    934a:	d1d8      	bne.n	92fe <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    934c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    934e:	f500 701c 	add.w	r0, r0, #624	; 0x270
    9352:	f000 ffe9 	bl	a328 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    9356:	e7d2      	b.n	92fe <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    9358:	f240 512b 	movw	r1, #1323	; 0x52b
    935c:	2035      	movs	r0, #53	; 0x35
    935e:	f7fa fe2d 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9362:	0000      	.short	0x0000
    9364:	20000ce0 	.word	0x20000ce0

00009368 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    9368:	4801      	ldr	r0, [pc, #4]	; (9370 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    936a:	7800      	ldrb	r0, [r0, #0]
    936c:	4770      	bx	lr
    936e:	0000      	.short	0x0000
    9370:	20000ce0 	.word	0x20000ce0

00009374 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    9374:	b5f0      	push	{r4, r5, r6, r7, lr}
    9376:	4c2c      	ldr	r4, [pc, #176]	; (9428 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb4>)
    9378:	b083      	sub	sp, #12
    937a:	7821      	ldrb	r1, [r4, #0]
    937c:	b121      	cbz	r1, 9388 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14>
    937e:	f240 4151 	movw	r1, #1105	; 0x451
    9382:	2035      	movs	r0, #53	; 0x35
    9384:	f7fa fe1a 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9388:	2200      	movs	r2, #0
    938a:	9200      	str	r2, [sp, #0]
    938c:	9201      	str	r2, [sp, #4]
    938e:	9202      	str	r2, [sp, #8]
    9390:	7803      	ldrb	r3, [r0, #0]
    9392:	4615      	mov	r5, r2
    9394:	f013 0f01 	tst.w	r3, #1
    9398:	4611      	mov	r1, r2
    939a:	466b      	mov	r3, sp
    939c:	d004      	beq.n	93a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>
    939e:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    93a2:	2501      	movs	r5, #1
    93a4:	9100      	str	r1, [sp, #0]
    93a6:	4629      	mov	r1, r5
    93a8:	f890 c000 	ldrb.w	ip, [r0]
    93ac:	f01c 0f02 	tst.w	ip, #2
    93b0:	d006      	beq.n	93c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c>
    93b2:	e9d0 2c03 	ldrd	r2, ip, [r0, #12]
    93b6:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    93ba:	f045 0502 	orr.w	r5, r5, #2
    93be:	1c49      	adds	r1, r1, #1
    93c0:	f890 c000 	ldrb.w	ip, [r0]
    93c4:	f01c 0f04 	tst.w	ip, #4
    93c8:	d006      	beq.n	93d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64>
    93ca:	e9d0 2005 	ldrd	r2, r0, [r0, #20]
    93ce:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    93d2:	f045 0508 	orr.w	r5, r5, #8
    93d6:	1c49      	adds	r1, r1, #1
    93d8:	1e48      	subs	r0, r1, #1
    93da:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    93de:	461f      	mov	r7, r3
    93e0:	2600      	movs	r6, #0
    93e2:	6062      	str	r2, [r4, #4]
    93e4:	f005 fbb7 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    93e8:	306b      	adds	r0, #107	; 0x6b
    93ea:	b280      	uxth	r0, r0
    93ec:	f015 0f01 	tst.w	r5, #1
    93f0:	d003      	beq.n	93fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x86>
    93f2:	9900      	ldr	r1, [sp, #0]
    93f4:	1a09      	subs	r1, r1, r0
    93f6:	2601      	movs	r6, #1
    93f8:	60a1      	str	r1, [r4, #8]
    93fa:	f015 0f02 	tst.w	r5, #2
    93fe:	d006      	beq.n	940e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9a>
    9400:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
    9404:	eb04 0186 	add.w	r1, r4, r6, lsl #2
    9408:	1a12      	subs	r2, r2, r0
    940a:	1c76      	adds	r6, r6, #1
    940c:	608a      	str	r2, [r1, #8]
    940e:	f015 0f08 	tst.w	r5, #8
    9412:	d005      	beq.n	9420 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xac>
    9414:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
    9418:	eb04 0286 	add.w	r2, r4, r6, lsl #2
    941c:	1a08      	subs	r0, r1, r0
    941e:	6090      	str	r0, [r2, #8]
    9420:	b003      	add	sp, #12
    9422:	2000      	movs	r0, #0
    9424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9426:	0000      	.short	0x0000
    9428:	20000ce0 	.word	0x20000ce0
    942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9430:	b087      	sub	sp, #28
    9432:	460d      	mov	r5, r1
    9434:	f7fc fe52 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9438:	f8df 9240 	ldr.w	r9, [pc, #576]	; 967c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x308>
    943c:	2601      	movs	r6, #1
    943e:	4607      	mov	r7, r0
    9440:	f04f 0800 	mov.w	r8, #0
    9444:	f109 0410 	add.w	r4, r9, #16
    9448:	2d09      	cmp	r5, #9
    944a:	f080 8112 	bcs.w	9672 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fe>
    944e:	e8df f005 	tbb	[pc, r5]
    9452:	8305      	.short	0x8305
    9454:	fca5aaaa 	.word	0xfca5aaaa
    9458:	00fafbd3 	.word	0x00fafbd3
    945c:	7526      	strb	r6, [r4, #20]
    945e:	7860      	ldrb	r0, [r4, #1]
    9460:	2800      	cmp	r0, #0
    9462:	bf1c      	itt	ne
    9464:	b007      	addne	sp, #28
    9466:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    946a:	7838      	ldrb	r0, [r7, #0]
    946c:	f7f8 f82a 	bl	14c4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    9470:	e9c4 0106 	strd	r0, r1, [r4, #24]
    9474:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9476:	4605      	mov	r5, r0
    9478:	1a40      	subs	r0, r0, r1
    947a:	6861      	ldr	r1, [r4, #4]
    947c:	fbb0 f0f1 	udiv	r0, r0, r1
    9480:	2800      	cmp	r0, #0
    9482:	bf14      	ite	ne
    9484:	f04f 0a01 	movne.w	sl, #1
    9488:	f04f 0a00 	moveq.w	sl, #0
    948c:	f8cd 8008 	str.w	r8, [sp, #8]
    9490:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    9494:	2800      	cmp	r0, #0
    9496:	bf08      	it	eq
    9498:	4641      	moveq	r1, r8
    949a:	d026      	beq.n	94ea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x176>
    949c:	f005 fb5b 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    94a0:	306b      	adds	r0, #107	; 0x6b
    94a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    94a4:	b283      	uxth	r3, r0
    94a6:	6862      	ldr	r2, [r4, #4]
    94a8:	1a68      	subs	r0, r5, r1
    94aa:	fbb0 f0f2 	udiv	r0, r0, r2
    94ae:	fb02 f000 	mul.w	r0, r2, r0
    94b2:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
    94b6:	1808      	adds	r0, r1, r0
    94b8:	f10c 0c01 	add.w	ip, ip, #1
    94bc:	1a28      	subs	r0, r5, r0
    94be:	f04f 0100 	mov.w	r1, #0
    94c2:	f104 0208 	add.w	r2, r4, #8
    94c6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    94ca:	bf00      	nop
    94cc:	f8d2 b000 	ldr.w	fp, [r2]
    94d0:	449b      	add	fp, r3
    94d2:	4583      	cmp	fp, r0
    94d4:	d803      	bhi.n	94de <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    94d6:	1c49      	adds	r1, r1, #1
    94d8:	eba0 000b 	sub.w	r0, r0, fp
    94dc:	b2c9      	uxtb	r1, r1
    94de:	1d12      	adds	r2, r2, #4
    94e0:	f1ac 0c01 	sub.w	ip, ip, #1
    94e4:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
    94e8:	d1f0      	bne.n	94cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    94ea:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    94ee:	f88d 100c 	strb.w	r1, [sp, #12]
    94f2:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    94f6:	04c0      	lsls	r0, r0, #19
    94f8:	0cc0      	lsrs	r0, r0, #19
    94fa:	d00f      	beq.n	951c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    94fc:	6c60      	ldr	r0, [r4, #68]	; 0x44
    94fe:	9000      	str	r0, [sp, #0]
    9500:	2003      	movs	r0, #3
    9502:	f88d 0004 	strb.w	r0, [sp, #4]
    9506:	f88d 800d 	strb.w	r8, [sp, #13]
    950a:	4668      	mov	r0, sp
    950c:	f7fc ff02 	bl	6314 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    9510:	b1c8      	cbz	r0, 9546 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d2>
    9512:	f44f 7141 	mov.w	r1, #772	; 0x304
    9516:	2035      	movs	r0, #53	; 0x35
    9518:	f7fa fd50 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    951c:	f1ba 0f00 	cmp.w	sl, #0
    9520:	bf14      	ite	ne
    9522:	f88d 8004 	strbne.w	r8, [sp, #4]
    9526:	f88d 6004 	strbeq.w	r6, [sp, #4]
    952a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    952c:	6861      	ldr	r1, [r4, #4]
    952e:	1a28      	subs	r0, r5, r0
    9530:	fbb0 f2f1 	udiv	r2, r0, r1
    9534:	fb01 0012 	mls	r0, r1, r2, r0
    9538:	2800      	cmp	r0, #0
    953a:	bf0c      	ite	eq
    953c:	2001      	moveq	r0, #1
    953e:	2000      	movne	r0, #0
    9540:	f88d 000d 	strb.w	r0, [sp, #13]
    9544:	e7e1      	b.n	950a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    9546:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    9548:	38e3      	subs	r0, #227	; 0xe3
    954a:	f8c9 000c 	str.w	r0, [r9, #12]
    954e:	f7f8 ffaf 	bl	24b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9552:	b007      	add	sp, #28
    9554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9558:	7860      	ldrb	r0, [r4, #1]
    955a:	b190      	cbz	r0, 9582 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20e>
    955c:	f7fc ffa0 	bl	64a0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    9560:	7d20      	ldrb	r0, [r4, #20]
    9562:	2800      	cmp	r0, #0
    9564:	bf04      	itt	eq
    9566:	b007      	addeq	sp, #28
    9568:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    956c:	f001 fed4 	bl	b318 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9570:	f7f8 fece 	bl	2310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9574:	f884 8014 	strb.w	r8, [r4, #20]
    9578:	f884 8015 	strb.w	r8, [r4, #21]
    957c:	b007      	add	sp, #28
    957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9582:	7566      	strb	r6, [r4, #21]
    9584:	f7fc ff86 	bl	6494 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    9588:	2800      	cmp	r0, #0
    958a:	bf04      	itt	eq
    958c:	b007      	addeq	sp, #28
    958e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9592:	f240 3117 	movw	r1, #791	; 0x317
    9596:	2035      	movs	r0, #53	; 0x35
    9598:	f7fa fd10 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    959c:	b007      	add	sp, #28
    959e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95a2:	f002 ba19 	b.w	b9d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    95a6:	783d      	ldrb	r5, [r7, #0]
    95a8:	f7fc fd98 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    95ac:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    95b0:	04c0      	lsls	r0, r0, #19
    95b2:	0cc0      	lsrs	r0, r0, #19
    95b4:	d005      	beq.n	95c2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x24e>
    95b6:	2101      	movs	r1, #1
    95b8:	2003      	movs	r0, #3
    95ba:	f7fc fd69 	bl	6090 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    95be:	f7fc fae1 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95c2:	2300      	movs	r3, #0
    95c4:	2201      	movs	r2, #1
    95c6:	4619      	mov	r1, r3
    95c8:	4668      	mov	r0, sp
    95ca:	f000 f917 	bl	97fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x488>
    95ce:	b168      	cbz	r0, 95ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x278>
    95d0:	4628      	mov	r0, r5
    95d2:	4669      	mov	r1, sp
    95d4:	f7f8 f86a 	bl	16ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    95d8:	2800      	cmp	r0, #0
    95da:	bf1c      	itt	ne
    95dc:	b007      	addne	sp, #28
    95de:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95e2:	f640 21b5 	movw	r1, #2741	; 0xab5
    95e6:	2035      	movs	r0, #53	; 0x35
    95e8:	f7fa fce8 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95ec:	70a6      	strb	r6, [r4, #2]
    95ee:	f000 f847 	bl	9680 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x30c>
    95f2:	b007      	add	sp, #28
    95f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95f8:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    95fc:	04c0      	lsls	r0, r0, #19
    95fe:	0cc0      	lsrs	r0, r0, #19
    9600:	d01d      	beq.n	963e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ca>
    9602:	7878      	ldrb	r0, [r7, #1]
    9604:	f010 0f0c 	tst.w	r0, #12
    9608:	d024      	beq.n	9654 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e0>
    960a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    960e:	bb08      	cbnz	r0, 9654 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e0>
    9610:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    9614:	2101      	movs	r1, #1
    9616:	f244 5036 	movw	r0, #17718	; 0x4536
    961a:	f7f7 fe29 	bl	1270 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    961e:	b9c8      	cbnz	r0, 9654 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e0>
    9620:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9622:	f244 5036 	movw	r0, #17718	; 0x4536
    9626:	4401      	add	r1, r0
    9628:	63a1      	str	r1, [r4, #56]	; 0x38
    962a:	f8d9 100c 	ldr.w	r1, [r9, #12]
    962e:	4408      	add	r0, r1
    9630:	f8c9 000c 	str.w	r0, [r9, #12]
    9634:	b007      	add	sp, #28
    9636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    963a:	f7f8 bf39 	b.w	24b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    963e:	f000 f873 	bl	9728 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b4>
    9642:	2800      	cmp	r0, #0
    9644:	e002      	b.n	964c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d8>
    9646:	e00f      	b.n	9668 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f4>
    9648:	e009      	b.n	965e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ea>
    964a:	e012      	b.n	9672 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fe>
    964c:	bf1c      	itt	ne
    964e:	b007      	addne	sp, #28
    9650:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9654:	b007      	add	sp, #28
    9656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    965a:	f005 b817 	b.w	e68c <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    965e:	b007      	add	sp, #28
    9660:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9664:	f000 b80c 	b.w	9680 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x30c>
    9668:	f240 3149 	movw	r1, #841	; 0x349
    966c:	2035      	movs	r0, #53	; 0x35
    966e:	f7fa fca5 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9672:	f240 314d 	movw	r1, #845	; 0x34d
    9676:	2035      	movs	r0, #53	; 0x35
    9678:	f7fa fca0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    967c:	20000cd0 	.word	0x20000cd0
    9680:	b570      	push	{r4, r5, r6, lr}
    9682:	4c28      	ldr	r4, [pc, #160]	; (9724 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b0>)
    9684:	7820      	ldrb	r0, [r4, #0]
    9686:	b170      	cbz	r0, 96a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x332>
    9688:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    968c:	4620      	mov	r0, r4
    968e:	2500      	movs	r5, #0
    9690:	2900      	cmp	r1, #0
    9692:	6e00      	ldr	r0, [r0, #96]	; 0x60
    9694:	7821      	ldrb	r1, [r4, #0]
    9696:	d01b      	beq.n	96d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x35c>
    9698:	2905      	cmp	r1, #5
    969a:	d009      	beq.n	96b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x33c>
    969c:	f240 3192 	movw	r1, #914	; 0x392
    96a0:	2035      	movs	r0, #53	; 0x35
    96a2:	f7fa fc8b 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96a6:	f240 21b7 	movw	r1, #695	; 0x2b7
    96aa:	2035      	movs	r0, #53	; 0x35
    96ac:	f7fa fc86 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96b0:	b120      	cbz	r0, 96bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x348>
    96b2:	f104 0048 	add.w	r0, r4, #72	; 0x48
    96b6:	f000 fded 	bl	a294 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    96ba:	e003      	b.n	96c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    96bc:	f104 0048 	add.w	r0, r4, #72	; 0x48
    96c0:	f000 fe32 	bl	a328 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    96c4:	78a0      	ldrb	r0, [r4, #2]
    96c6:	b188      	cbz	r0, 96ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x378>
    96c8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    96cc:	b150      	cbz	r0, 96e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x370>
    96ce:	e00d      	b.n	96ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x378>
    96d0:	2905      	cmp	r1, #5
    96d2:	bf08      	it	eq
    96d4:	2800      	cmpeq	r0, #0
    96d6:	d1f1      	bne.n	96bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x348>
    96d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    96da:	f500 701c 	add.w	r0, r0, #624	; 0x270
    96de:	f000 fe23 	bl	a328 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    96e2:	e7eb      	b.n	96bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x348>
    96e4:	f7fc ff06 	bl	64f4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    96e8:	f7fc fa4c 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    96ec:	f7fc fdca 	bl	6284 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    96f0:	70a5      	strb	r5, [r4, #2]
    96f2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    96f6:	62a5      	str	r5, [r4, #40]	; 0x28
    96f8:	7820      	ldrb	r0, [r4, #0]
    96fa:	2804      	cmp	r0, #4
    96fc:	bf08      	it	eq
    96fe:	f7ff f8cb 	bleq	8898 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    9702:	7025      	strb	r5, [r4, #0]
    9704:	f7fc fcea 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9708:	4604      	mov	r4, r0
    970a:	7800      	ldrb	r0, [r0, #0]
    970c:	f7f8 fc9e 	bl	204c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9710:	2800      	cmp	r0, #0
    9712:	bf1e      	ittt	ne
    9714:	2020      	movne	r0, #32
    9716:	7020      	strbne	r0, [r4, #0]
    9718:	bd70      	popne	{r4, r5, r6, pc}
    971a:	f240 512b 	movw	r1, #1323	; 0x52b
    971e:	2035      	movs	r0, #53	; 0x35
    9720:	f7fa fc4c 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9724:	20000ce0 	.word	0x20000ce0
    9728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    972c:	f7f8 ff98 	bl	2660 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9730:	4c30      	ldr	r4, [pc, #192]	; (97f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x480>)
    9732:	4605      	mov	r5, r0
    9734:	460f      	mov	r7, r1
    9736:	7821      	ldrb	r1, [r4, #0]
    9738:	69a0      	ldr	r0, [r4, #24]
    973a:	2904      	cmp	r1, #4
    973c:	d109      	bne.n	9752 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3de>
    973e:	6861      	ldr	r1, [r4, #4]
    9740:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9742:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9746:	0049      	lsls	r1, r1, #1
    9748:	1a80      	subs	r0, r0, r2
    974a:	4288      	cmp	r0, r1
    974c:	bf38      	it	cc
    974e:	2602      	movcc	r6, #2
    9750:	d300      	bcc.n	9754 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>
    9752:	2601      	movs	r6, #1
    9754:	4630      	mov	r0, r6
    9756:	f7f7 fe69 	bl	142c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    975a:	2865      	cmp	r0, #101	; 0x65
    975c:	d33a      	bcc.n	97d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x460>
    975e:	f1b0 3fff 	cmp.w	r0, #4294967295
    9762:	bf08      	it	eq
    9764:	6be0      	ldreq	r0, [r4, #60]	; 0x3c
    9766:	d021      	beq.n	97ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x438>
    9768:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
    976c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    976e:	eb0c 0100 	add.w	r1, ip, r0
    9772:	428a      	cmp	r2, r1
    9774:	bf98      	it	ls
    9776:	eba2 000c 	subls.w	r0, r2, ip
    977a:	f1b5 013a 	subs.w	r1, r5, #58	; 0x3a
    977e:	f147 33ff 	adc.w	r3, r7, #4294967295
    9782:	4602      	mov	r2, r0
    9784:	e9d4 070c 	ldrd	r0, r7, [r4, #48]	; 0x30
    9788:	1a41      	subs	r1, r0, r1
    978a:	eb67 0003 	sbc.w	r0, r7, r3
    978e:	2700      	movs	r7, #0
    9790:	46b8      	mov	r8, r7
    9792:	463b      	mov	r3, r7
    9794:	1a7f      	subs	r7, r7, r1
    9796:	eb78 0700 	sbcs.w	r7, r8, r0
    979a:	da05      	bge.n	97a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x434>
    979c:	1a57      	subs	r7, r2, r1
    979e:	eb73 0700 	sbcs.w	r7, r3, r0
    97a2:	bfa8      	it	ge
    97a4:	460a      	movge	r2, r1
    97a6:	4613      	mov	r3, r2
    97a8:	eb0c 0003 	add.w	r0, ip, r3
    97ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    97ae:	1a47      	subs	r7, r0, r1
    97b0:	f241 3088 	movw	r0, #5000	; 0x1388
    97b4:	4287      	cmp	r7, r0
    97b6:	bf88      	it	hi
    97b8:	f241 3788 	movwhi	r7, #5000	; 0x1388
    97bc:	f7f8 ff50 	bl	2660 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    97c0:	1b40      	subs	r0, r0, r5
    97c2:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    97c6:	4287      	cmp	r7, r0
    97c8:	d304      	bcc.n	97d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x460>
    97ca:	4631      	mov	r1, r6
    97cc:	4638      	mov	r0, r7
    97ce:	f7f7 fd4f 	bl	1270 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    97d2:	b110      	cbz	r0, 97da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x466>
    97d4:	2000      	movs	r0, #0
    97d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    97dc:	4906      	ldr	r1, [pc, #24]	; (97f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>)
    97de:	4438      	add	r0, r7
    97e0:	63a0      	str	r0, [r4, #56]	; 0x38
    97e2:	68c8      	ldr	r0, [r1, #12]
    97e4:	4438      	add	r0, r7
    97e6:	60c8      	str	r0, [r1, #12]
    97e8:	f7f8 fe62 	bl	24b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    97ec:	2001      	movs	r0, #1
    97ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97f2:	0000      	.short	0x0000
    97f4:	20000ce0 	.word	0x20000ce0
    97f8:	20000cd0 	.word	0x20000cd0
    97fc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9800:	b095      	sub	sp, #84	; 0x54
    9802:	4690      	mov	r8, r2
    9804:	4681      	mov	r9, r0
    9806:	f7fc fc69 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    980a:	900b      	str	r0, [sp, #44]	; 0x2c
    980c:	f7f8 ff28 	bl	2660 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9810:	f04f 0a00 	mov.w	sl, #0
    9814:	4efa      	ldr	r6, [pc, #1000]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9816:	9105      	str	r1, [sp, #20]
    9818:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    981c:	4607      	mov	r7, r0
    981e:	4655      	mov	r5, sl
    9820:	68b4      	ldr	r4, [r6, #8]
    9822:	f005 f998 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9826:	306b      	adds	r0, #107	; 0x6b
    9828:	b281      	uxth	r1, r0
    982a:	f896 202f 	ldrb.w	r2, [r6, #47]	; 0x2f
    982e:	2000      	movs	r0, #0
    9830:	eb06 0380 	add.w	r3, r6, r0, lsl #2
    9834:	1c40      	adds	r0, r0, #1
    9836:	689b      	ldr	r3, [r3, #8]
    9838:	eb05 0c01 	add.w	ip, r5, r1
    983c:	b2c0      	uxtb	r0, r0
    983e:	eb03 050c 	add.w	r5, r3, ip
    9842:	4282      	cmp	r2, r0
    9844:	d2f4      	bcs.n	9830 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
    9846:	48ee      	ldr	r0, [pc, #952]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9848:	6840      	ldr	r0, [r0, #4]
    984a:	4285      	cmp	r5, r0
    984c:	bf0c      	ite	eq
    984e:	2101      	moveq	r1, #1
    9850:	2100      	movne	r1, #0
    9852:	ea18 0f01 	tst.w	r8, r1
    9856:	9113      	str	r1, [sp, #76]	; 0x4c
    9858:	d008      	beq.n	986c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4f8>
    985a:	49e9      	ldr	r1, [pc, #932]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    985c:	780a      	ldrb	r2, [r1, #0]
    985e:	2a00      	cmp	r2, #0
    9860:	bf1a      	itte	ne
    9862:	f8b1 1064 	ldrhne.w	r1, [r1, #100]	; 0x64
    9866:	2900      	cmpne	r1, #0
    9868:	2101      	moveq	r1, #1
    986a:	d001      	beq.n	9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
    986c:	f04f 0100 	mov.w	r1, #0
    9870:	9112      	str	r1, [sp, #72]	; 0x48
    9872:	9916      	ldr	r1, [sp, #88]	; 0x58
    9874:	2900      	cmp	r1, #0
    9876:	d07d      	beq.n	9974 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x600>
    9878:	9905      	ldr	r1, [sp, #20]
    987a:	f517 60fa 	adds.w	r0, r7, #2000	; 0x7d0
    987e:	f141 0800 	adc.w	r8, r1, #0
    9882:	9002      	str	r0, [sp, #8]
    9884:	f000 fcfa 	bl	a27c <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY>
    9888:	f000 fd84 	bl	a394 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    988c:	4606      	mov	r6, r0
    988e:	48dc      	ldr	r0, [pc, #880]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9890:	7800      	ldrb	r0, [r0, #0]
    9892:	2805      	cmp	r0, #5
    9894:	d140      	bne.n	9918 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    9896:	4dda      	ldr	r5, [pc, #872]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9898:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    989a:	f8d0 0278 	ldr.w	r0, [r0, #632]	; 0x278
    989e:	f000 fd5f 	bl	a360 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    98a2:	9000      	str	r0, [sp, #0]
    98a4:	42b0      	cmp	r0, r6
    98a6:	d01d      	beq.n	98e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x570>
    98a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    98aa:	9900      	ldr	r1, [sp, #0]
    98ac:	f500 701c 	add.w	r0, r0, #624	; 0x270
    98b0:	f000 fd14 	bl	a2dc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    98b4:	2100      	movs	r1, #0
    98b6:	6629      	str	r1, [r5, #96]	; 0x60
    98b8:	f8d5 b028 	ldr.w	fp, [r5, #40]	; 0x28
    98bc:	9d00      	ldr	r5, [sp, #0]
    98be:	f1bb 0f00 	cmp.w	fp, #0
    98c2:	d01c      	beq.n	98fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    98c4:	b32d      	cbz	r5, 9912 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x59e>
    98c6:	f000 fcd3 	bl	a270 <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>
    98ca:	b1e8      	cbz	r0, 9908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x594>
    98cc:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    98d0:	682a      	ldr	r2, [r5, #0]
    98d2:	1812      	adds	r2, r2, r0
    98d4:	eb41 000a 	adc.w	r0, r1, sl
    98d8:	e9cb 209c 	strd	r2, r0, [fp, #624]	; 0x270
    98dc:	8ba8      	ldrh	r0, [r5, #28]
    98de:	f8ab 028c 	strh.w	r0, [fp, #652]	; 0x28c
    98e2:	e019      	b.n	9918 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    98e4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    98e6:	f501 711c 	add.w	r1, r1, #624	; 0x270
    98ea:	6629      	str	r1, [r5, #96]	; 0x60
    98ec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    98ee:	6d28      	ldr	r0, [r5, #80]	; 0x50
    98f0:	f8d1 1278 	ldr.w	r1, [r1, #632]	; 0x278
    98f4:	4288      	cmp	r0, r1
    98f6:	bf38      	it	cc
    98f8:	4608      	movcc	r0, r1
    98fa:	6528      	str	r0, [r5, #80]	; 0x50
    98fc:	e7dc      	b.n	98b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x544>
    98fe:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    9902:	2035      	movs	r0, #53	; 0x35
    9904:	f7fa fb5a 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9908:	f240 51ce 	movw	r1, #1486	; 0x5ce
    990c:	2035      	movs	r0, #53	; 0x35
    990e:	f7fa fb55 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9912:	2000      	movs	r0, #0
    9914:	e9cb 009c 	strd	r0, r0, [fp, #624]	; 0x270
    9918:	4db9      	ldr	r5, [pc, #740]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    991a:	4631      	mov	r1, r6
    991c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    9920:	f000 fcdc 	bl	a2dc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    9924:	2e00      	cmp	r6, #0
    9926:	bf1c      	itt	ne
    9928:	8bb0      	ldrhne	r0, [r6, #28]
    992a:	f8a5 0064 	strhne.w	r0, [r5, #100]	; 0x64
    992e:	46ab      	mov	fp, r5
    9930:	686d      	ldr	r5, [r5, #4]
    9932:	9a02      	ldr	r2, [sp, #8]
    9934:	bf08      	it	eq
    9936:	2000      	moveq	r0, #0
    9938:	d011      	beq.n	995e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ea>
    993a:	e9d6 1001 	ldrd	r1, r0, [r6, #4]
    993e:	6833      	ldr	r3, [r6, #0]
    9940:	e9cd 2800 	strd	r2, r8, [sp]
    9944:	1818      	adds	r0, r3, r0
    9946:	eb41 010a 	adc.w	r1, r1, sl
    994a:	462a      	mov	r2, r5
    994c:	f005 f924 	bl	eb98 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    9950:	42a8      	cmp	r0, r5
    9952:	d904      	bls.n	995e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ea>
    9954:	f240 51e6 	movw	r1, #1510	; 0x5e6
    9958:	2035      	movs	r0, #53	; 0x35
    995a:	f7fa fb2f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    995e:	4605      	mov	r5, r0
    9960:	f000 fc92 	bl	a288 <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI>
    9964:	9902      	ldr	r1, [sp, #8]
    9966:	4658      	mov	r0, fp
    9968:	194e      	adds	r6, r1, r5
    996a:	eb48 080a 	adc.w	r8, r8, sl
    996e:	f8db 1004 	ldr.w	r1, [fp, #4]
    9972:	e000      	b.n	9976 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    9974:	e01d      	b.n	99b2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x63e>
    9976:	1a72      	subs	r2, r6, r1
    9978:	eb68 010a 	sbc.w	r1, r8, sl
    997c:	e9c0 2112 	strd	r2, r1, [r0, #72]	; 0x48
    9980:	9918      	ldr	r1, [sp, #96]	; 0x60
    9982:	b179      	cbz	r1, 99a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x630>
    9984:	4608      	mov	r0, r1
    9986:	f242 7110 	movw	r1, #10000	; 0x2710
    998a:	4348      	muls	r0, r1
    998c:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    9990:	1830      	adds	r0, r6, r0
    9992:	eb48 010a 	adc.w	r1, r8, sl
    9996:	e9c2 0100 	strd	r0, r1, [r2]
    999a:	bf00      	nop
    999c:	f04f 0b01 	mov.w	fp, #1
    99a0:	f000 b99a 	b.w	9cd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x964>
    99a4:	f04f 32ff 	mov.w	r2, #4294967295
    99a8:	0851      	lsrs	r1, r2, #1
    99aa:	6302      	str	r2, [r0, #48]	; 0x30
    99ac:	f8cb 1034 	str.w	r1, [fp, #52]	; 0x34
    99b0:	e7f4      	b.n	999c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x628>
    99b2:	9912      	ldr	r1, [sp, #72]	; 0x48
    99b4:	2900      	cmp	r1, #0
    99b6:	d071      	beq.n	9a9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    99b8:	f8df 8244 	ldr.w	r8, [pc, #580]	; 9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>
    99bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    99be:	9e05      	ldr	r6, [sp, #20]
    99c0:	f898 102e 	ldrb.w	r1, [r8, #46]	; 0x2e
    99c4:	1d80      	adds	r0, r0, #6
    99c6:	5c09      	ldrb	r1, [r1, r0]
    99c8:	2908      	cmp	r1, #8
    99ca:	d008      	beq.n	99de <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
    99cc:	2904      	cmp	r1, #4
    99ce:	d00a      	beq.n	99e6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x672>
    99d0:	2902      	cmp	r1, #2
    99d2:	d00e      	beq.n	99f2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67e>
    99d4:	2208      	movs	r2, #8
    99d6:	2901      	cmp	r1, #1
    99d8:	d011      	beq.n	99fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x68a>
    99da:	f000 b98b 	b.w	9cf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x980>
    99de:	2240      	movs	r2, #64	; 0x40
    99e0:	2014      	movs	r0, #20
    99e2:	4613      	mov	r3, r2
    99e4:	e002      	b.n	99ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x678>
    99e6:	2210      	movs	r2, #16
    99e8:	2014      	movs	r0, #20
    99ea:	232e      	movs	r3, #46	; 0x2e
    99ec:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    99f0:	e009      	b.n	9a06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x692>
    99f2:	2204      	movs	r2, #4
    99f4:	2012      	movs	r0, #18
    99f6:	4653      	mov	r3, sl
    99f8:	f04f 0c18 	mov.w	ip, #24
    99fc:	e003      	b.n	9a06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x692>
    99fe:	202a      	movs	r0, #42	; 0x2a
    9a00:	4653      	mov	r3, sl
    9a02:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9a06:	4463      	add	r3, ip
    9a08:	fb12 3000 	smlabb	r0, r2, r0, r3
    9a0c:	b285      	uxth	r5, r0
    9a0e:	4608      	mov	r0, r1
    9a10:	f001 fdce 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9a14:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9a18:	4401      	add	r1, r0
    9a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9a1e:	fbb1 f0f0 	udiv	r0, r1, r0
    9a22:	4428      	add	r0, r5
    9a24:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    9a28:	f108 0030 	add.w	r0, r8, #48	; 0x30
    9a2c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9a30:	e9d0 1000 	ldrd	r1, r0, [r0]
    9a34:	4050      	eors	r0, r2
    9a36:	ea70 0001 	orns	r0, r0, r1
    9a3a:	d028      	beq.n	9a8e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x71a>
    9a3c:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    9a40:	950d      	str	r5, [sp, #52]	; 0x34
    9a42:	f005 f888 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9a46:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    9a4a:	2001      	movs	r0, #1
    9a4c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9a50:	f005 f881 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9a54:	f500 7081 	add.w	r0, r0, #258	; 0x102
    9a58:	b280      	uxth	r0, r0
    9a5a:	19c0      	adds	r0, r0, r7
    9a5c:	eb4a 0106 	adc.w	r1, sl, r6
    9a60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9a64:	2002      	movs	r0, #2
    9a66:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9a6a:	a80c      	add	r0, sp, #48	; 0x30
    9a6c:	f7f8 f812 	bl	1a94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    9a70:	4602      	mov	r2, r0
    9a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9a76:	e9d8 3c0c 	ldrd	r3, ip, [r8, #48]	; 0x30
    9a7a:	1940      	adds	r0, r0, r5
    9a7c:	eb41 010a 	adc.w	r1, r1, sl
    9a80:	1a18      	subs	r0, r3, r0
    9a82:	eb6c 0001 	sbc.w	r0, ip, r1
    9a86:	b10a      	cbz	r2, 9a8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x718>
    9a88:	2800      	cmp	r0, #0
    9a8a:	da00      	bge.n	9a8e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x71a>
    9a8c:	2400      	movs	r4, #0
    9a8e:	463e      	mov	r6, r7
    9a90:	46d3      	mov	fp, sl
    9a92:	f8dd 8014 	ldr.w	r8, [sp, #20]
    9a96:	f000 b91f 	b.w	9cd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x964>
    9a9a:	e7ff      	b.n	9a9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    9a9c:	f1b8 0f00 	cmp.w	r8, #0
    9aa0:	d059      	beq.n	9b56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7e2>
    9aa2:	4d57      	ldr	r5, [pc, #348]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9aa4:	e9d5 1312 	ldrd	r1, r3, [r5, #72]	; 0x48
    9aa8:	1a7a      	subs	r2, r7, r1
    9aaa:	fbb2 f2f0 	udiv	r2, r2, r0
    9aae:	fb00 f202 	mul.w	r2, r0, r2
    9ab2:	1889      	adds	r1, r1, r2
    9ab4:	eb43 020a 	adc.w	r2, r3, sl
    9ab8:	180e      	adds	r6, r1, r0
    9aba:	eb42 000a 	adc.w	r0, r2, sl
    9abe:	9003      	str	r0, [sp, #12]
    9ac0:	ebb6 0807 	subs.w	r8, r6, r7
    9ac4:	f005 f847 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9ac8:	f500 7081 	add.w	r0, r0, #258	; 0x102
    9acc:	b280      	uxth	r0, r0
    9ace:	4580      	cmp	r8, r0
    9ad0:	da11      	bge.n	9af6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x782>
    9ad2:	6caa      	ldr	r2, [r5, #72]	; 0x48
    9ad4:	6a28      	ldr	r0, [r5, #32]
    9ad6:	6869      	ldr	r1, [r5, #4]
    9ad8:	1a80      	subs	r0, r0, r2
    9ada:	fbb0 f0f1 	udiv	r0, r0, r1
    9ade:	fb01 f000 	mul.w	r0, r1, r0
    9ae2:	1810      	adds	r0, r2, r0
    9ae4:	1a30      	subs	r0, r6, r0
    9ae6:	fbb0 fbf1 	udiv	fp, r0, r1
    9aea:	4608      	mov	r0, r1
    9aec:	9903      	ldr	r1, [sp, #12]
    9aee:	1980      	adds	r0, r0, r6
    9af0:	eb4a 0101 	adc.w	r1, sl, r1
    9af4:	e02c      	b.n	9b50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7dc>
    9af6:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    9afa:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    9afc:	900d      	str	r0, [sp, #52]	; 0x34
    9afe:	f005 f82a 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9b02:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    9b06:	2001      	movs	r0, #1
    9b08:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9b0c:	e9d5 0212 	ldrd	r0, r2, [r5, #72]	; 0x48
    9b10:	6a29      	ldr	r1, [r5, #32]
    9b12:	1a0b      	subs	r3, r1, r0
    9b14:	6869      	ldr	r1, [r5, #4]
    9b16:	fbb3 f3f1 	udiv	r3, r3, r1
    9b1a:	fb01 f303 	mul.w	r3, r1, r3
    9b1e:	18c3      	adds	r3, r0, r3
    9b20:	eb42 020a 	adc.w	r2, r2, sl
    9b24:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    9b28:	782a      	ldrb	r2, [r5, #0]
    9b2a:	2a04      	cmp	r2, #4
    9b2c:	d107      	bne.n	9b3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ca>
    9b2e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    9b32:	0052      	lsls	r2, r2, #1
    9b34:	1a18      	subs	r0, r3, r0
    9b36:	4290      	cmp	r0, r2
    9b38:	bf38      	it	cc
    9b3a:	2002      	movcc	r0, #2
    9b3c:	d300      	bcc.n	9b40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7cc>
    9b3e:	2001      	movs	r0, #1
    9b40:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9b44:	a80c      	add	r0, sp, #48	; 0x30
    9b46:	f004 fadc 	bl	e102 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9b4a:	4683      	mov	fp, r0
    9b4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9b50:	4606      	mov	r6, r0
    9b52:	4688      	mov	r8, r1
    9b54:	e0c0      	b.n	9cd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x964>
    9b56:	4a2a      	ldr	r2, [pc, #168]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9b58:	a909      	add	r1, sp, #36	; 0x24
    9b5a:	9103      	str	r1, [sp, #12]
    9b5c:	e9d2 1212 	ldrd	r1, r2, [r2, #72]	; 0x48
    9b60:	1a7b      	subs	r3, r7, r1
    9b62:	fbb3 f3f0 	udiv	r3, r3, r0
    9b66:	fb00 f003 	mul.w	r0, r0, r3
    9b6a:	1808      	adds	r0, r1, r0
    9b6c:	eb42 010a 	adc.w	r1, r2, sl
    9b70:	910c      	str	r1, [sp, #48]	; 0x30
    9b72:	9006      	str	r0, [sp, #24]
    9b74:	1a3c      	subs	r4, r7, r0
    9b76:	f7fc fab1 	bl	60dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9b7a:	4683      	mov	fp, r0
    9b7c:	f004 ffeb 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9b80:	f500 7081 	add.w	r0, r0, #258	; 0x102
    9b84:	b280      	uxth	r0, r0
    9b86:	1825      	adds	r5, r4, r0
    9b88:	2600      	movs	r6, #0
    9b8a:	462c      	mov	r4, r5
    9b8c:	f004 ffe3 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9b90:	306b      	adds	r0, #107	; 0x6b
    9b92:	fa1f f880 	uxth.w	r8, r0
    9b96:	481a      	ldr	r0, [pc, #104]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9b98:	6840      	ldr	r0, [r0, #4]
    9b9a:	42a0      	cmp	r0, r4
    9b9c:	bf98      	it	ls
    9b9e:	1a24      	subls	r4, r4, r0
    9ba0:	4b17      	ldr	r3, [pc, #92]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9ba2:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    9ba6:	2800      	cmp	r0, #0
    9ba8:	bf18      	it	ne
    9baa:	f103 0108 	addne.w	r1, r3, #8
    9bae:	d00a      	beq.n	9bc6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x852>
    9bb0:	680a      	ldr	r2, [r1, #0]
    9bb2:	4442      	add	r2, r8
    9bb4:	42a2      	cmp	r2, r4
    9bb6:	d802      	bhi.n	9bbe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x84a>
    9bb8:	1aa4      	subs	r4, r4, r2
    9bba:	1c72      	adds	r2, r6, #1
    9bbc:	b2d6      	uxtb	r6, r2
    9bbe:	1e40      	subs	r0, r0, #1
    9bc0:	f101 0104 	add.w	r1, r1, #4
    9bc4:	d1f4      	bne.n	9bb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x83c>
    9bc6:	480e      	ldr	r0, [pc, #56]	; (9c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9bc8:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    9bcc:	900f      	str	r0, [sp, #60]	; 0x3c
    9bce:	6880      	ldr	r0, [r0, #8]
    9bd0:	900d      	str	r0, [sp, #52]	; 0x34
    9bd2:	eb0b 0006 	add.w	r0, fp, r6
    9bd6:	7980      	ldrb	r0, [r0, #6]
    9bd8:	2808      	cmp	r0, #8
    9bda:	d007      	beq.n	9bec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x878>
    9bdc:	2804      	cmp	r0, #4
    9bde:	d009      	beq.n	9bf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x880>
    9be0:	2802      	cmp	r0, #2
    9be2:	d00f      	beq.n	9c04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x890>
    9be4:	2208      	movs	r2, #8
    9be6:	2801      	cmp	r0, #1
    9be8:	d012      	beq.n	9c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x89c>
    9bea:	e083      	b.n	9cf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x980>
    9bec:	2240      	movs	r2, #64	; 0x40
    9bee:	2114      	movs	r1, #20
    9bf0:	4613      	mov	r3, r2
    9bf2:	e002      	b.n	9bfa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x886>
    9bf4:	2210      	movs	r2, #16
    9bf6:	2114      	movs	r1, #20
    9bf8:	232e      	movs	r3, #46	; 0x2e
    9bfa:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    9bfe:	e00b      	b.n	9c18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a4>
    9c00:	20000ce0 	.word	0x20000ce0
    9c04:	2204      	movs	r2, #4
    9c06:	2112      	movs	r1, #18
    9c08:	4653      	mov	r3, sl
    9c0a:	f04f 0c18 	mov.w	ip, #24
    9c0e:	e003      	b.n	9c18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a4>
    9c10:	212a      	movs	r1, #42	; 0x2a
    9c12:	4653      	mov	r3, sl
    9c14:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9c18:	4463      	add	r3, ip
    9c1a:	fb12 3101 	smlabb	r1, r2, r1, r3
    9c1e:	fa1f fb81 	uxth.w	fp, r1
    9c22:	f001 fcc5 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9c26:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9c2a:	4401      	add	r1, r0
    9c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9c30:	fbb1 f0f0 	udiv	r0, r1, r0
    9c34:	eb0b 0100 	add.w	r1, fp, r0
    9c38:	1908      	adds	r0, r1, r4
    9c3a:	990d      	ldr	r1, [sp, #52]	; 0x34
    9c3c:	30f4      	adds	r0, #244	; 0xf4
    9c3e:	4288      	cmp	r0, r1
    9c40:	d803      	bhi.n	9c4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8d6>
    9c42:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9c44:	6880      	ldr	r0, [r0, #8]
    9c46:	1b04      	subs	r4, r0, r4
    9c48:	e011      	b.n	9c6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8fa>
    9c4a:	498c      	ldr	r1, [pc, #560]	; (9e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb08>)
    9c4c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    9c50:	42b0      	cmp	r0, r6
    9c52:	d918      	bls.n	9c86 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x912>
    9c54:	1c70      	adds	r0, r6, #1
    9c56:	b2c6      	uxtb	r6, r0
    9c58:	6848      	ldr	r0, [r1, #4]
    9c5a:	42a8      	cmp	r0, r5
    9c5c:	d90e      	bls.n	9c7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x908>
    9c5e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
    9c62:	6880      	ldr	r0, [r0, #8]
    9c64:	eb00 0508 	add.w	r5, r0, r8
    9c68:	eb01 0086 	add.w	r0, r1, r6, lsl #2
    9c6c:	6884      	ldr	r4, [r0, #8]
    9c6e:	2c00      	cmp	r4, #0
    9c70:	da19      	bge.n	9ca6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x932>
    9c72:	f240 710c 	movw	r1, #1804	; 0x70c
    9c76:	2035      	movs	r0, #53	; 0x35
    9c78:	f7fa f9a0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c7c:	f240 61e6 	movw	r1, #1766	; 0x6e6
    9c80:	2035      	movs	r0, #53	; 0x35
    9c82:	f7fa f99b 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c86:	6848      	ldr	r0, [r1, #4]
    9c88:	462a      	mov	r2, r5
    9c8a:	4285      	cmp	r5, r0
    9c8c:	bf38      	it	cc
    9c8e:	4605      	movcc	r5, r0
    9c90:	d3ea      	bcc.n	9c68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8f4>
    9c92:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    9c96:	bf38      	it	cc
    9c98:	0045      	lslcc	r5, r0, #1
    9c9a:	d3e5      	bcc.n	9c68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8f4>
    9c9c:	f240 7103 	movw	r1, #1795	; 0x703
    9ca0:	2035      	movs	r0, #53	; 0x35
    9ca2:	f7fa f98b 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ca6:	9803      	ldr	r0, [sp, #12]
    9ca8:	4b74      	ldr	r3, [pc, #464]	; (9e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb08>)
    9caa:	7006      	strb	r6, [r0, #0]
    9cac:	9906      	ldr	r1, [sp, #24]
    9cae:	980c      	ldr	r0, [sp, #48]	; 0x30
    9cb0:	194e      	adds	r6, r1, r5
    9cb2:	eb40 080a 	adc.w	r8, r0, sl
    9cb6:	e9d3 0c12 	ldrd	r0, ip, [r3, #72]	; 0x48
    9cba:	6999      	ldr	r1, [r3, #24]
    9cbc:	685d      	ldr	r5, [r3, #4]
    9cbe:	1a09      	subs	r1, r1, r0
    9cc0:	fbb1 f1f5 	udiv	r1, r1, r5
    9cc4:	fb01 f105 	mul.w	r1, r1, r5
    9cc8:	1840      	adds	r0, r0, r1
    9cca:	eb4c 010a 	adc.w	r1, ip, sl
    9cce:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    9cd2:	1a30      	subs	r0, r6, r0
    9cd4:	fbb0 fbf5 	udiv	fp, r0, r5
    9cd8:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    9cdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9cde:	4408      	add	r0, r1
    9ce0:	7980      	ldrb	r0, [r0, #6]
    9ce2:	2808      	cmp	r0, #8
    9ce4:	d00a      	beq.n	9cfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x988>
    9ce6:	2804      	cmp	r0, #4
    9ce8:	d00c      	beq.n	9d04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x990>
    9cea:	2802      	cmp	r0, #2
    9cec:	d010      	beq.n	9d10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x99c>
    9cee:	2308      	movs	r3, #8
    9cf0:	2801      	cmp	r0, #1
    9cf2:	d013      	beq.n	9d1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9a8>
    9cf4:	21df      	movs	r1, #223	; 0xdf
    9cf6:	2005      	movs	r0, #5
    9cf8:	f7fa f960 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cfc:	2340      	movs	r3, #64	; 0x40
    9cfe:	2114      	movs	r1, #20
    9d00:	461a      	mov	r2, r3
    9d02:	e002      	b.n	9d0a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x996>
    9d04:	2310      	movs	r3, #16
    9d06:	2114      	movs	r1, #20
    9d08:	222e      	movs	r2, #46	; 0x2e
    9d0a:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    9d0e:	e009      	b.n	9d24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
    9d10:	2304      	movs	r3, #4
    9d12:	2112      	movs	r1, #18
    9d14:	4652      	mov	r2, sl
    9d16:	f04f 0c18 	mov.w	ip, #24
    9d1a:	e003      	b.n	9d24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
    9d1c:	212a      	movs	r1, #42	; 0x2a
    9d1e:	4652      	mov	r2, sl
    9d20:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9d24:	4462      	add	r2, ip
    9d26:	fb13 2101 	smlabb	r1, r3, r1, r2
    9d2a:	b28d      	uxth	r5, r1
    9d2c:	f001 fc40 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9d30:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9d34:	4401      	add	r1, r0
    9d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9d3a:	fbb1 f0f0 	udiv	r0, r1, r0
    9d3e:	4428      	add	r0, r5
    9d40:	494e      	ldr	r1, [pc, #312]	; (9e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb08>)
    9d42:	30f4      	adds	r0, #244	; 0xf4
    9d44:	9006      	str	r0, [sp, #24]
    9d46:	e9d1 020c 	ldrd	r0, r2, [r1, #48]	; 0x30
    9d4a:	1b80      	subs	r0, r0, r6
    9d4c:	eb62 0508 	sbc.w	r5, r2, r8
    9d50:	2200      	movs	r2, #0
    9d52:	4613      	mov	r3, r2
    9d54:	1a12      	subs	r2, r2, r0
    9d56:	eb73 0205 	sbcs.w	r2, r3, r5
    9d5a:	bfa8      	it	ge
    9d5c:	4650      	movge	r0, sl
    9d5e:	da05      	bge.n	9d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9f8>
    9d60:	1a22      	subs	r2, r4, r0
    9d62:	eb7a 0205 	sbcs.w	r2, sl, r5
    9d66:	bfa8      	it	ge
    9d68:	4604      	movge	r4, r0
    9d6a:	4620      	mov	r0, r4
    9d6c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    9d70:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9d74:	6892      	ldr	r2, [r2, #8]
    9d76:	4282      	cmp	r2, r0
    9d78:	bf98      	it	ls
    9d7a:	4610      	movls	r0, r2
    9d7c:	460c      	mov	r4, r1
    9d7e:	63c8      	str	r0, [r1, #60]	; 0x3c
    9d80:	9812      	ldr	r0, [sp, #72]	; 0x48
    9d82:	bb30      	cbnz	r0, 9dd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa5e>
    9d84:	f1bb 0f00 	cmp.w	fp, #0
    9d88:	d023      	beq.n	9dd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa5e>
    9d8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9d8e:	ea00 014b 	and.w	r1, r0, fp, lsl #1
    9d92:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
    9d96:	f004 fc0f 	bl	e5b8 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY>
    9d9a:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    9d9e:	1a09      	subs	r1, r1, r0
    9da0:	b20a      	sxth	r2, r1
    9da2:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    9da6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9da8:	b141      	cbz	r1, 9dbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa48>
    9daa:	f8a1 228c 	strh.w	r2, [r1, #652]	; 0x28c
    9dae:	e9d1 239c 	ldrd	r2, r3, [r1, #624]	; 0x270
    9db2:	1812      	adds	r2, r2, r0
    9db4:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    9db8:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
    9dbc:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    9dc0:	ea4f 71e0 	mov.w	r1, r0, asr #31
    9dc4:	1836      	adds	r6, r6, r0
    9dc6:	eb48 0801 	adc.w	r8, r8, r1
    9dca:	1810      	adds	r0, r2, r0
    9dcc:	4159      	adcs	r1, r3
    9dce:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    9dd2:	9816      	ldr	r0, [sp, #88]	; 0x58
    9dd4:	2800      	cmp	r0, #0
    9dd6:	bf18      	it	ne
    9dd8:	e9c4 6806 	strdne	r6, r8, [r4, #24]
    9ddc:	e9c4 6808 	strd	r6, r8, [r4, #32]
    9de0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9de2:	2800      	cmp	r0, #0
    9de4:	bf14      	ite	ne
    9de6:	9806      	ldrne	r0, [sp, #24]
    9de8:	6be0      	ldreq	r0, [r4, #60]	; 0x3c
    9dea:	2501      	movs	r5, #1
    9dec:	63a0      	str	r0, [r4, #56]	; 0x38
    9dee:	f889 500b 	strb.w	r5, [r9, #11]
    9df2:	f004 feb0 	bl	eb56 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9df6:	f8a9 0008 	strh.w	r0, [r9, #8]
    9dfa:	7820      	ldrb	r0, [r4, #0]
    9dfc:	2804      	cmp	r0, #4
    9dfe:	d109      	bne.n	9e14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa0>
    9e00:	6860      	ldr	r0, [r4, #4]
    9e02:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9e04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9e08:	0041      	lsls	r1, r0, #1
    9e0a:	1ab0      	subs	r0, r6, r2
    9e0c:	4288      	cmp	r0, r1
    9e0e:	bf38      	it	cc
    9e10:	2002      	movcc	r0, #2
    9e12:	d300      	bcc.n	9e16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa2>
    9e14:	2001      	movs	r0, #1
    9e16:	f889 000a 	strb.w	r0, [r9, #10]
    9e1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    9e1c:	f8c9 0004 	str.w	r0, [r9, #4]
    9e20:	9812      	ldr	r0, [sp, #72]	; 0x48
    9e22:	2800      	cmp	r0, #0
    9e24:	bf04      	itt	eq
    9e26:	f889 a000 	strbeq.w	sl, [r9]
    9e2a:	e9c9 6804 	strdeq	r6, r8, [r9, #16]
    9e2e:	d01b      	beq.n	9e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>
    9e30:	f889 5000 	strb.w	r5, [r9]
    9e34:	e9d4 020c 	ldrd	r0, r2, [r4, #48]	; 0x30
    9e38:	9905      	ldr	r1, [sp, #20]
    9e3a:	1bc0      	subs	r0, r0, r7
    9e3c:	eb62 0b01 	sbc.w	fp, r2, r1
    9e40:	2100      	movs	r1, #0
    9e42:	460a      	mov	r2, r1
    9e44:	1a09      	subs	r1, r1, r0
    9e46:	eb72 010b 	sbcs.w	r1, r2, fp
    9e4a:	da08      	bge.n	9e5e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaea>
    9e4c:	490c      	ldr	r1, [pc, #48]	; (9e80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb0c>)
    9e4e:	2200      	movs	r2, #0
    9e50:	1a09      	subs	r1, r1, r0
    9e52:	eb72 010b 	sbcs.w	r1, r2, fp
    9e56:	bfac      	ite	ge
    9e58:	4682      	movge	sl, r0
    9e5a:	f8df a024 	ldrlt.w	sl, [pc, #36]	; 9e80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb0c>
    9e5e:	9806      	ldr	r0, [sp, #24]
    9e60:	ebaa 0000 	sub.w	r0, sl, r0
    9e64:	f8c9 0010 	str.w	r0, [r9, #16]
    9e68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    9e6a:	9806      	ldr	r0, [sp, #24]
    9e6c:	4281      	cmp	r1, r0
    9e6e:	bf2c      	ite	cs
    9e70:	2001      	movcs	r0, #1
    9e72:	2000      	movcc	r0, #0
    9e74:	b019      	add	sp, #100	; 0x64
    9e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e7a:	0000      	.short	0x0000
    9e7c:	20000ce0 	.word	0x20000ce0
    9e80:	0f424000 	.word	0x0f424000
    9e84:	a62c0000 	.word	0xa62c0000
    9e88:	0000a1e0 	.word	0x0000a1e0
    9e8c:	0000a820 	.word	0x0000a820
    9e90:	00000000 	.word	0x00000000
    9e94:	0000a820 	.word	0x0000a820
    9e98:	00000000 	.word	0x00000000
    9e9c:	00001e14 	.word	0x00001e14
    9ea0:	00001130 	.word	0x00001130
    9ea4:	00000000 	.word	0x00000000
    9ea8:	0000ea60 	.word	0x0000ea60
	...
    9eb8:	0000ea60 	.word	0x0000ea60

00009ebc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    9ebc:	4806      	ldr	r0, [pc, #24]	; (9ed8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    9ebe:	4905      	ldr	r1, [pc, #20]	; (9ed4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    9ec0:	6581      	str	r1, [r0, #88]	; 0x58
    9ec2:	4906      	ldr	r1, [pc, #24]	; (9edc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    9ec4:	65c1      	str	r1, [r0, #92]	; 0x5c
    9ec6:	4807      	ldr	r0, [pc, #28]	; (9ee4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    9ec8:	4905      	ldr	r1, [pc, #20]	; (9ee0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    9eca:	6581      	str	r1, [r0, #88]	; 0x58
    9ecc:	4906      	ldr	r1, [pc, #24]	; (9ee8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    9ece:	6601      	str	r1, [r0, #96]	; 0x60
    9ed0:	4770      	bx	lr
    9ed2:	0000      	.short	0x0000
    9ed4:	00009fe1 	.word	0x00009fe1
    9ed8:	200002c8 	.word	0x200002c8
    9edc:	0000a115 	.word	0x0000a115
    9ee0:	0000a1bd 	.word	0x0000a1bd
    9ee4:	20000360 	.word	0x20000360
    9ee8:	0000a1ed 	.word	0x0000a1ed
    9eec:	b510      	push	{r4, lr}
    9eee:	4c1b      	ldr	r4, [pc, #108]	; (9f5c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa0>)
    9ef0:	6861      	ldr	r1, [r4, #4]
    9ef2:	880a      	ldrh	r2, [r1, #0]
    9ef4:	f8a1 21ce 	strh.w	r2, [r1, #462]	; 0x1ce
    9ef8:	f881 01cc 	strb.w	r0, [r1, #460]	; 0x1cc
    9efc:	f891 0072 	ldrb.w	r0, [r1, #114]	; 0x72
    9f00:	2801      	cmp	r0, #1
    9f02:	bf18      	it	ne
    9f04:	2802      	cmpne	r0, #2
    9f06:	d00b      	beq.n	9f20 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x64>
    9f08:	2804      	cmp	r0, #4
    9f0a:	bf14      	ite	ne
    9f0c:	2808      	cmpne	r0, #8
    9f0e:	2003      	moveq	r0, #3
    9f10:	d006      	beq.n	9f20 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x64>
    9f12:	bf00      	nop
    9f14:	f240 21a9 	movw	r1, #681	; 0x2a9
    9f18:	f04f 0006 	mov.w	r0, #6
    9f1c:	f7fa f84e 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f20:	f881 01d0 	strb.w	r0, [r1, #464]	; 0x1d0
    9f24:	f891 0073 	ldrb.w	r0, [r1, #115]	; 0x73
    9f28:	2801      	cmp	r0, #1
    9f2a:	bf18      	it	ne
    9f2c:	2802      	cmpne	r0, #2
    9f2e:	d004      	beq.n	9f3a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x7e>
    9f30:	2804      	cmp	r0, #4
    9f32:	bf14      	ite	ne
    9f34:	2808      	cmpne	r0, #8
    9f36:	2003      	moveq	r0, #3
    9f38:	d1ec      	bne.n	9f14 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x58>
    9f3a:	f881 01d1 	strb.w	r0, [r1, #465]	; 0x1d1
    9f3e:	f501 70e1 	add.w	r0, r1, #450	; 0x1c2
    9f42:	f04f 0211 	mov.w	r2, #17
    9f46:	f7fb fae5 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9f4a:	6861      	ldr	r1, [r4, #4]
    9f4c:	2000      	movs	r0, #0
    9f4e:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    9f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f56:	f7fb be15 	b.w	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f5a:	0000      	.short	0x0000
    9f5c:	200002c0 	.word	0x200002c0
    9f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f64:	f8df 8074 	ldr.w	r8, [pc, #116]	; 9fdc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x120>
    9f68:	2600      	movs	r6, #0
    9f6a:	f108 050c 	add.w	r5, r8, #12
    9f6e:	2703      	movs	r7, #3
    9f70:	6869      	ldr	r1, [r5, #4]
    9f72:	2401      	movs	r4, #1
    9f74:	b1a8      	cbz	r0, 9fa2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xe6>
    9f76:	f8d8 0008 	ldr.w	r0, [r8, #8]
    9f7a:	78c0      	ldrb	r0, [r0, #3]
    9f7c:	f881 0129 	strb.w	r0, [r1, #297]	; 0x129
    9f80:	fa04 f000 	lsl.w	r0, r4, r0
    9f84:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    9f88:	d006      	beq.n	9f98 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xdc>
    9f8a:	f881 709d 	strb.w	r7, [r1, #157]	; 0x9d
    9f8e:	f8a1 60d8 	strh.w	r6, [r1, #216]	; 0xd8
    9f92:	f881 40dc 	strb.w	r4, [r1, #220]	; 0xdc
    9f96:	e01d      	b.n	9fd4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x118>
    9f98:	f240 51cf 	movw	r1, #1487	; 0x5cf
    9f9c:	2036      	movs	r0, #54	; 0x36
    9f9e:	f7fa f80d 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fa2:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    9fa6:	f101 0090 	add.w	r0, r1, #144	; 0x90
    9faa:	2300      	movs	r3, #0
    9fac:	4619      	mov	r1, r3
    9fae:	f003 ff60 	bl	de72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fb2:	2800      	cmp	r0, #0
    9fb4:	bf04      	itt	eq
    9fb6:	2001      	moveq	r0, #1
    9fb8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fbc:	f8d8 0008 	ldr.w	r0, [r8, #8]
    9fc0:	78c1      	ldrb	r1, [r0, #3]
    9fc2:	6868      	ldr	r0, [r5, #4]
    9fc4:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    9fc8:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    9fcc:	f8a0 60de 	strh.w	r6, [r0, #222]	; 0xde
    9fd0:	f880 40e0 	strb.w	r4, [r0, #224]	; 0xe0
    9fd4:	2000      	movs	r0, #0
    9fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fda:	0000      	.short	0x0000
    9fdc:	200002b4 	.word	0x200002b4
    9fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fe4:	4c49      	ldr	r4, [pc, #292]	; (a10c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x250>)
    9fe6:	2500      	movs	r5, #0
    9fe8:	b086      	sub	sp, #24
    9fea:	6860      	ldr	r0, [r4, #4]
    9fec:	462b      	mov	r3, r5
    9fee:	4629      	mov	r1, r5
    9ff0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    9ff4:	3090      	adds	r0, #144	; 0x90
    9ff6:	f003 ff3c 	bl	de72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ffa:	2800      	cmp	r0, #0
    9ffc:	bf02      	ittt	eq
    9ffe:	2001      	moveq	r0, #1
    a000:	b006      	addeq	sp, #24
    a002:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    a006:	6860      	ldr	r0, [r4, #4]
    a008:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    a00c:	2824      	cmp	r0, #36	; 0x24
    a00e:	bf11      	iteee	ne
    a010:	2825      	cmpne	r0, #37	; 0x25
    a012:	2020      	moveq	r0, #32
    a014:	b006      	addeq	sp, #24
    a016:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    a01a:	4668      	mov	r0, sp
    a01c:	f7fa fdcc 	bl	4bb8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    a020:	2800      	cmp	r0, #0
    a022:	bf08      	it	eq
    a024:	2100      	moveq	r1, #0
    a026:	d004      	beq.n	a032 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x176>
    a028:	9800      	ldr	r0, [sp, #0]
    a02a:	a901      	add	r1, sp, #4
    a02c:	78c0      	ldrb	r0, [r0, #3]
    a02e:	f88d 0004 	strb.w	r0, [sp, #4]
    a032:	6860      	ldr	r0, [r4, #4]
    a034:	ab04      	add	r3, sp, #16
    a036:	2216      	movs	r2, #22
    a038:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    a03c:	f003 ffc4 	bl	dfc8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    a040:	2601      	movs	r6, #1
    a042:	2700      	movs	r7, #0
    a044:	b190      	cbz	r0, a06c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1b0>
    a046:	6860      	ldr	r0, [r4, #4]
    a048:	f89d 2010 	ldrb.w	r2, [sp, #16]
    a04c:	2116      	movs	r1, #22
    a04e:	f880 212a 	strb.w	r2, [r0, #298]	; 0x12a
    a052:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
    a056:	2129      	movs	r1, #41	; 0x29
    a058:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    a05c:	f880 60e0 	strb.w	r6, [r0, #224]	; 0xe0
    a060:	f8a0 70de 	strh.w	r7, [r0, #222]	; 0xde
    a064:	b006      	add	sp, #24
    a066:	2000      	movs	r0, #0
    a068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a06c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; a110 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x254>
    a070:	f8d8 0008 	ldr.w	r0, [r8, #8]
    a074:	f004 f8f8 	bl	e268 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a078:	b1a0      	cbz	r0, a0a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1e8>
    a07a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    a07e:	6861      	ldr	r1, [r4, #4]
    a080:	7910      	ldrb	r0, [r2, #4]
    a082:	f000 0007 	and.w	r0, r0, #7
    a086:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    a08a:	7952      	ldrb	r2, [r2, #5]
    a08c:	f002 0207 	and.w	r2, r2, #7
    a090:	f881 206b 	strb.w	r2, [r1, #107]	; 0x6b
    a094:	f891 3145 	ldrb.w	r3, [r1, #325]	; 0x145
    a098:	f88d 3004 	strb.w	r3, [sp, #4]
    a09c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a0a0:	b12b      	cbz	r3, a0ae <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1f2>
    a0a2:	e027      	b.n	a0f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x238>
    a0a4:	2000      	movs	r0, #0
    a0a6:	f7ff ff5b 	bl	9f60 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa4>
    a0aa:	4605      	mov	r5, r0
    a0ac:	e02a      	b.n	a104 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x248>
    a0ae:	f891 3144 	ldrb.w	r3, [r1, #324]	; 0x144
    a0b2:	2b01      	cmp	r3, #1
    a0b4:	d01e      	beq.n	a0f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x238>
    a0b6:	f891 c073 	ldrb.w	ip, [r1, #115]	; 0x73
    a0ba:	f101 0372 	add.w	r3, r1, #114	; 0x72
    a0be:	4584      	cmp	ip, r0
    a0c0:	bf01      	itttt	eq
    a0c2:	7818      	ldrbeq	r0, [r3, #0]
    a0c4:	4290      	cmpeq	r0, r2
    a0c6:	2002      	moveq	r0, #2
    a0c8:	f881 0144 	strbeq.w	r0, [r1, #324]	; 0x144
    a0cc:	d012      	beq.n	a0f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x238>
    a0ce:	f501 70df 	add.w	r0, r1, #446	; 0x1be
    a0d2:	880a      	ldrh	r2, [r1, #0]
    a0d4:	f820 2b02 	strh.w	r2, [r0], #2
    a0d8:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    a0dc:	f800 2b01 	strb.w	r2, [r0], #1
    a0e0:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
    a0e4:	f800 290d 	strb.w	r2, [r0], #-13
    a0e8:	f04f 021b 	mov.w	r2, #27
    a0ec:	f7fb fa12 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a0f0:	f7fb fd48 	bl	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a0f4:	6860      	ldr	r0, [r4, #4]
    a0f6:	2122      	movs	r1, #34	; 0x22
    a0f8:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    a0fc:	f880 60e0 	strb.w	r6, [r0, #224]	; 0xe0
    a100:	f8a0 70de 	strh.w	r7, [r0, #222]	; 0xde
    a104:	b006      	add	sp, #24
    a106:	4628      	mov	r0, r5
    a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a10c:	200002c0 	.word	0x200002c0
    a110:	200002b4 	.word	0x200002b4
    a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a116:	4c27      	ldr	r4, [pc, #156]	; (a1b4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2f8>)
    a118:	6860      	ldr	r0, [r4, #4]
    a11a:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    a11e:	2820      	cmp	r0, #32
    a120:	bf1c      	itt	ne
    a122:	2001      	movne	r0, #1
    a124:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    a126:	4e24      	ldr	r6, [pc, #144]	; (a1b8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2fc>)
    a128:	68b0      	ldr	r0, [r6, #8]
    a12a:	f004 f8a7 	bl	e27c <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    a12e:	2800      	cmp	r0, #0
    a130:	d036      	beq.n	a1a0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2e4>
    a132:	68b0      	ldr	r0, [r6, #8]
    a134:	6862      	ldr	r2, [r4, #4]
    a136:	7901      	ldrb	r1, [r0, #4]
    a138:	7940      	ldrb	r0, [r0, #5]
    a13a:	f001 0107 	and.w	r1, r1, #7
    a13e:	f361 0507 	bfi	r5, r1, #0, #8
    a142:	4629      	mov	r1, r5
    a144:	f000 0007 	and.w	r0, r0, #7
    a148:	f360 210f 	bfi	r1, r0, #8, #8
    a14c:	2001      	movs	r0, #1
    a14e:	f882 00dc 	strb.w	r0, [r2, #220]	; 0xdc
    a152:	2500      	movs	r5, #0
    a154:	f8a2 50d8 	strh.w	r5, [r2, #216]	; 0xd8
    a158:	2024      	movs	r0, #36	; 0x24
    a15a:	f882 009d 	strb.w	r0, [r2, #157]	; 0x9d
    a15e:	f8d2 0146 	ldr.w	r0, [r2, #326]	; 0x146
    a162:	f8b2 2072 	ldrh.w	r2, [r2, #114]	; 0x72
    a166:	f8ad 2000 	strh.w	r2, [sp]
    a16a:	f003 ff49 	bl	e000 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    a16e:	f89d 2000 	ldrb.w	r2, [sp]
    a172:	b2c1      	uxtb	r1, r0
    a174:	428a      	cmp	r2, r1
    a176:	bf07      	ittee	eq
    a178:	6861      	ldreq	r1, [r4, #4]
    a17a:	f881 52a2 	strbeq.w	r5, [r1, #674]	; 0x2a2
    a17e:	6862      	ldrne	r2, [r4, #4]
    a180:	f882 12a2 	strbne.w	r1, [r2, #674]	; 0x2a2
    a184:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a188:	f3c0 2007 	ubfx	r0, r0, #8, #8
    a18c:	4281      	cmp	r1, r0
    a18e:	bf19      	ittee	ne
    a190:	6861      	ldrne	r1, [r4, #4]
    a192:	f881 02a3 	strbne.w	r0, [r1, #675]	; 0x2a3
    a196:	6860      	ldreq	r0, [r4, #4]
    a198:	f880 52a3 	strbeq.w	r5, [r0, #675]	; 0x2a3
    a19c:	2000      	movs	r0, #0
    a19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1a0:	2001      	movs	r0, #1
    a1a2:	f7ff fedd 	bl	9f60 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa4>
    a1a6:	4604      	mov	r4, r0
    a1a8:	201e      	movs	r0, #30
    a1aa:	f7ff fe9f 	bl	9eec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    a1ae:	4620      	mov	r0, r4
    a1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1b2:	0000      	.short	0x0000
    a1b4:	200002c0 	.word	0x200002c0
    a1b8:	200002b4 	.word	0x200002b4
    a1bc:	b510      	push	{r4, lr}
    a1be:	4c0a      	ldr	r4, [pc, #40]	; (a1e8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x32c>)
    a1c0:	2300      	movs	r3, #0
    a1c2:	4619      	mov	r1, r3
    a1c4:	6860      	ldr	r0, [r4, #4]
    a1c6:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    a1ca:	3090      	adds	r0, #144	; 0x90
    a1cc:	f003 fe51 	bl	de72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1d0:	b120      	cbz	r0, a1dc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x320>
    a1d2:	6861      	ldr	r1, [r4, #4]
    a1d4:	2020      	movs	r0, #32
    a1d6:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    a1da:	bd10      	pop	{r4, pc}
    a1dc:	f240 61ee 	movw	r1, #1774	; 0x6ee
    a1e0:	2036      	movs	r0, #54	; 0x36
    a1e2:	f7f9 feeb 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1e6:	0000      	.short	0x0000
    a1e8:	200002c0 	.word	0x200002c0
    a1ec:	b570      	push	{r4, r5, r6, lr}
    a1ee:	4c1f      	ldr	r4, [pc, #124]	; (a26c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x3b0>)
    a1f0:	6860      	ldr	r0, [r4, #4]
    a1f2:	f890 12a2 	ldrb.w	r1, [r0, #674]	; 0x2a2
    a1f6:	2900      	cmp	r1, #0
    a1f8:	bf05      	ittet	eq
    a1fa:	f890 12a3 	ldrbeq.w	r1, [r0, #675]	; 0x2a3
    a1fe:	2900      	cmpeq	r1, #0
    a200:	2100      	movne	r1, #0
    a202:	2101      	moveq	r1, #1
    a204:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
    a208:	f04f 0225 	mov.w	r2, #37	; 0x25
    a20c:	f04f 0500 	mov.w	r5, #0
    a210:	2b22      	cmp	r3, #34	; 0x22
    a212:	d008      	beq.n	a226 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x36a>
    a214:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
    a218:	2b24      	cmp	r3, #36	; 0x24
    a21a:	d019      	beq.n	a250 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x394>
    a21c:	f240 711a 	movw	r1, #1818	; 0x71a
    a220:	2036      	movs	r0, #54	; 0x36
    a222:	f7f9 fecb 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a226:	2900      	cmp	r1, #0
    a228:	bf08      	it	eq
    a22a:	f880 209e 	strbeq.w	r2, [r0, #158]	; 0x9e
    a22e:	d00b      	beq.n	a248 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x38c>
    a230:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    a234:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    a238:	2801      	cmp	r0, #1
    a23a:	bf04      	itt	eq
    a23c:	2000      	moveq	r0, #0
    a23e:	f7ff fe55 	bleq	9eec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    a242:	6860      	ldr	r0, [r4, #4]
    a244:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    a248:	6860      	ldr	r0, [r4, #4]
    a24a:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    a24e:	bd70      	pop	{r4, r5, r6, pc}
    a250:	2900      	cmp	r1, #0
    a252:	bf08      	it	eq
    a254:	f880 209d 	strbeq.w	r2, [r0, #157]	; 0x9d
    a258:	d004      	beq.n	a264 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x3a8>
    a25a:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    a25e:	2000      	movs	r0, #0
    a260:	f7ff fe44 	bl	9eec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    a264:	6860      	ldr	r0, [r4, #4]
    a266:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    a26a:	bd70      	pop	{r4, r5, r6, pc}
    a26c:	200002c0 	.word	0x200002c0

0000a270 <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>:
    a270:	4801      	ldr	r0, [pc, #4]	; (a278 <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ+0x8>)
    a272:	7900      	ldrb	r0, [r0, #4]
    a274:	4770      	bx	lr
    a276:	0000      	.short	0x0000
    a278:	200003f8 	.word	0x200003f8

0000a27c <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY>:
    a27c:	4901      	ldr	r1, [pc, #4]	; (a284 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY+0x8>)
    a27e:	2001      	movs	r0, #1
    a280:	7108      	strb	r0, [r1, #4]
    a282:	4770      	bx	lr
    a284:	200003f8 	.word	0x200003f8

0000a288 <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI>:
    a288:	4901      	ldr	r1, [pc, #4]	; (a290 <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI+0x8>)
    a28a:	2000      	movs	r0, #0
    a28c:	7108      	strb	r0, [r1, #4]
    a28e:	4770      	bx	lr
    a290:	200003f8 	.word	0x200003f8

0000a294 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a294:	b510      	push	{r4, lr}
    a296:	6981      	ldr	r1, [r0, #24]
    a298:	b119      	cbz	r1, a2a2 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a29a:	6882      	ldr	r2, [r0, #8]
    a29c:	688b      	ldr	r3, [r1, #8]
    a29e:	429a      	cmp	r2, r3
    a2a0:	d203      	bcs.n	a2aa <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a2a2:	21c7      	movs	r1, #199	; 0xc7
    a2a4:	2037      	movs	r0, #55	; 0x37
    a2a6:	f7f9 fe89 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2aa:	6942      	ldr	r2, [r0, #20]
    a2ac:	614a      	str	r2, [r1, #20]
    a2ae:	6903      	ldr	r3, [r0, #16]
    a2b0:	610b      	str	r3, [r1, #16]
    a2b2:	2a00      	cmp	r2, #0
    a2b4:	bf12      	itee	ne
    a2b6:	6111      	strne	r1, [r2, #16]
    a2b8:	4a07      	ldreq	r2, [pc, #28]	; (a2d8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x44>)
    a2ba:	6011      	streq	r1, [r2, #0]
    a2bc:	690a      	ldr	r2, [r1, #16]
    a2be:	2a00      	cmp	r2, #0
    a2c0:	bf08      	it	eq
    a2c2:	2000      	moveq	r0, #0
    a2c4:	d005      	beq.n	a2d2 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3e>
    a2c6:	6151      	str	r1, [r2, #20]
    a2c8:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    a2cc:	4410      	add	r0, r2
    a2ce:	688a      	ldr	r2, [r1, #8]
    a2d0:	1a80      	subs	r0, r0, r2
    a2d2:	60c8      	str	r0, [r1, #12]
    a2d4:	bd10      	pop	{r4, pc}
    a2d6:	0000      	.short	0x0000
    a2d8:	200003f8 	.word	0x200003f8

0000a2dc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a2dc:	b510      	push	{r4, lr}
    a2de:	2300      	movs	r3, #0
    a2e0:	6141      	str	r1, [r0, #20]
    a2e2:	b1c1      	cbz	r1, a316 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a2e4:	690a      	ldr	r2, [r1, #16]
    a2e6:	6108      	str	r0, [r1, #16]
    a2e8:	6102      	str	r2, [r0, #16]
    a2ea:	2a00      	cmp	r2, #0
    a2ec:	bf18      	it	ne
    a2ee:	6150      	strne	r0, [r2, #20]
    a2f0:	6941      	ldr	r1, [r0, #20]
    a2f2:	60c3      	str	r3, [r0, #12]
    a2f4:	2900      	cmp	r1, #0
    a2f6:	bf08      	it	eq
    a2f8:	bd10      	popeq	{r4, pc}
    a2fa:	68ca      	ldr	r2, [r1, #12]
    a2fc:	b17a      	cbz	r2, a31e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x42>
    a2fe:	f8d0 c008 	ldr.w	ip, [r0, #8]
    a302:	4562      	cmp	r2, ip
    a304:	bf24      	itt	cs
    a306:	eba2 020c 	subcs.w	r2, r2, ip
    a30a:	60c2      	strcs	r2, [r0, #12]
    a30c:	d207      	bcs.n	a31e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x42>
    a30e:	212a      	movs	r1, #42	; 0x2a
    a310:	2037      	movs	r0, #55	; 0x37
    a312:	f7f9 fe53 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a316:	4903      	ldr	r1, [pc, #12]	; (a324 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x48>)
    a318:	6103      	str	r3, [r0, #16]
    a31a:	6008      	str	r0, [r1, #0]
    a31c:	e7e8      	b.n	a2f0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x14>
    a31e:	60cb      	str	r3, [r1, #12]
    a320:	bd10      	pop	{r4, pc}
    a322:	0000      	.short	0x0000
    a324:	200003f8 	.word	0x200003f8

0000a328 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a328:	6941      	ldr	r1, [r0, #20]
    a32a:	b149      	cbz	r1, a340 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a32c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    a330:	441a      	add	r2, r3
    a332:	68cb      	ldr	r3, [r1, #12]
    a334:	441a      	add	r2, r3
    a336:	60ca      	str	r2, [r1, #12]
    a338:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    a33c:	6111      	str	r1, [r2, #16]
    a33e:	e002      	b.n	a346 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a340:	4a06      	ldr	r2, [pc, #24]	; (a35c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a342:	6901      	ldr	r1, [r0, #16]
    a344:	6011      	str	r1, [r2, #0]
    a346:	6901      	ldr	r1, [r0, #16]
    a348:	6940      	ldr	r0, [r0, #20]
    a34a:	2900      	cmp	r1, #0
    a34c:	bf1c      	itt	ne
    a34e:	6148      	strne	r0, [r1, #20]
    a350:	4770      	bxne	lr
    a352:	2800      	cmp	r0, #0
    a354:	bf1c      	itt	ne
    a356:	2100      	movne	r1, #0
    a358:	60c1      	strne	r1, [r0, #12]
    a35a:	4770      	bx	lr
    a35c:	200003f8 	.word	0x200003f8

0000a360 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a360:	490b      	ldr	r1, [pc, #44]	; (a390 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a362:	4684      	mov	ip, r0
    a364:	2000      	movs	r0, #0
    a366:	6809      	ldr	r1, [r1, #0]
    a368:	4602      	mov	r2, r0
    a36a:	1e43      	subs	r3, r0, #1
    a36c:	b169      	cbz	r1, a38a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2a>
    a36e:	68ca      	ldr	r2, [r1, #12]
    a370:	4562      	cmp	r2, ip
    a372:	bf28      	it	cs
    a374:	4293      	cmpcs	r3, r2
    a376:	bf84      	itt	hi
    a378:	4613      	movhi	r3, r2
    a37a:	4608      	movhi	r0, r1
    a37c:	460a      	mov	r2, r1
    a37e:	6909      	ldr	r1, [r1, #16]
    a380:	2900      	cmp	r1, #0
    a382:	d1f4      	bne.n	a36e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0xe>
    a384:	2800      	cmp	r0, #0
    a386:	bf18      	it	ne
    a388:	4770      	bxne	lr
    a38a:	4610      	mov	r0, r2
    a38c:	4770      	bx	lr
    a38e:	0000      	.short	0x0000
    a390:	200003f8 	.word	0x200003f8

0000a394 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a394:	4805      	ldr	r0, [pc, #20]	; (a3ac <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x18>)
    a396:	6801      	ldr	r1, [r0, #0]
    a398:	2000      	movs	r0, #0
    a39a:	2900      	cmp	r1, #0
    a39c:	bf08      	it	eq
    a39e:	4770      	bxeq	lr
    a3a0:	4608      	mov	r0, r1
    a3a2:	6909      	ldr	r1, [r1, #16]
    a3a4:	2900      	cmp	r1, #0
    a3a6:	d1fb      	bne.n	a3a0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a3a8:	4770      	bx	lr
    a3aa:	0000      	.short	0x0000
    a3ac:	200003f8 	.word	0x200003f8

0000a3b0 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a3b0:	4802      	ldr	r0, [pc, #8]	; (a3bc <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0xc>)
    a3b2:	2100      	movs	r1, #0
    a3b4:	6001      	str	r1, [r0, #0]
    a3b6:	6041      	str	r1, [r0, #4]
    a3b8:	4770      	bx	lr
    a3ba:	0000      	.short	0x0000
    a3bc:	200003f8 	.word	0x200003f8

0000a3c0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a3c0:	4904      	ldr	r1, [pc, #16]	; (a3d4 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x14>)
    a3c2:	2000      	movs	r0, #0
    a3c4:	680a      	ldr	r2, [r1, #0]
    a3c6:	2a00      	cmp	r2, #0
    a3c8:	bf12      	itee	ne
    a3ca:	200c      	movne	r0, #12
    a3cc:	2200      	moveq	r2, #0
    a3ce:	604a      	streq	r2, [r1, #4]
    a3d0:	4770      	bx	lr
    a3d2:	0000      	.short	0x0000
    a3d4:	200003f8 	.word	0x200003f8

0000a3d8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a3d8:	4903      	ldr	r1, [pc, #12]	; (a3e8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a3da:	884a      	ldrh	r2, [r1, #2]
    a3dc:	8002      	strh	r2, [r0, #0]
    a3de:	7809      	ldrb	r1, [r1, #0]
    a3e0:	7081      	strb	r1, [r0, #2]
    a3e2:	2000      	movs	r0, #0
    a3e4:	4770      	bx	lr
    a3e6:	0000      	.short	0x0000
    a3e8:	20001414 	.word	0x20001414

0000a3ec <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a3ec:	7801      	ldrb	r1, [r0, #0]
    a3ee:	b171      	cbz	r1, a40e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a3f0:	7841      	ldrb	r1, [r0, #1]
    a3f2:	b161      	cbz	r1, a40e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a3f4:	8841      	ldrh	r1, [r0, #2]
    a3f6:	291b      	cmp	r1, #27
    a3f8:	d309      	bcc.n	a40e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a3fa:	8881      	ldrh	r1, [r0, #4]
    a3fc:	291b      	cmp	r1, #27
    a3fe:	d306      	bcc.n	a40e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a400:	4904      	ldr	r1, [pc, #16]	; (a414 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a402:	6802      	ldr	r2, [r0, #0]
    a404:	600a      	str	r2, [r1, #0]
    a406:	8880      	ldrh	r0, [r0, #4]
    a408:	8088      	strh	r0, [r1, #4]
    a40a:	2000      	movs	r0, #0
    a40c:	4770      	bx	lr
    a40e:	2012      	movs	r0, #18
    a410:	4770      	bx	lr
    a412:	0000      	.short	0x0000
    a414:	20001414 	.word	0x20001414

0000a418 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a418:	6800      	ldr	r0, [r0, #0]
    a41a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    a41e:	d303      	bcc.n	a428 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x10>
    a420:	4902      	ldr	r1, [pc, #8]	; (a42c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x14>)
    a422:	6088      	str	r0, [r1, #8]
    a424:	2000      	movs	r0, #0
    a426:	4770      	bx	lr
    a428:	2012      	movs	r0, #18
    a42a:	4770      	bx	lr
    a42c:	20001414 	.word	0x20001414

0000a430 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    a430:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a432:	4605      	mov	r5, r0
    a434:	7800      	ldrb	r0, [r0, #0]
    a436:	b198      	cbz	r0, a460 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
    a438:	4668      	mov	r0, sp
    a43a:	f7f9 fc2d 	bl	3c98 <mpsl_fem_pa_is_configured>
    a43e:	f89d 0000 	ldrb.w	r0, [sp]
    a442:	b108      	cbz	r0, a448 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x18>
    a444:	2401      	movs	r4, #1
    a446:	e000      	b.n	a44a <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x1a>
    a448:	2400      	movs	r4, #0
    a44a:	a801      	add	r0, sp, #4
    a44c:	f7f9 fc0c 	bl	3c68 <mpsl_fem_lna_is_configured>
    a450:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a454:	b100      	cbz	r0, a458 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x28>
    a456:	2001      	movs	r0, #1
    a458:	4304      	orrs	r4, r0
    a45a:	d001      	beq.n	a460 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
    a45c:	200c      	movs	r0, #12
    a45e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a460:	4902      	ldr	r1, [pc, #8]	; (a46c <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x3c>)
    a462:	7828      	ldrb	r0, [r5, #0]
    a464:	7208      	strb	r0, [r1, #8]
    a466:	2000      	movs	r0, #0
    a468:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a46a:	0000      	.short	0x0000
    a46c:	200014c6 	.word	0x200014c6

0000a470 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>:
    a470:	4801      	ldr	r0, [pc, #4]	; (a478 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA+0x8>)
    a472:	f990 0000 	ldrsb.w	r0, [r0]
    a476:	4770      	bx	lr
    a478:	20000400 	.word	0x20000400

0000a47c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a47c:	4a03      	ldr	r2, [pc, #12]	; (a48c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a47e:	e9d2 1200 	ldrd	r1, r2, [r2]
    a482:	6001      	str	r1, [r0, #0]
    a484:	6042      	str	r2, [r0, #4]
    a486:	2000      	movs	r0, #0
    a488:	4770      	bx	lr
    a48a:	0000      	.short	0x0000
    a48c:	0000a788 	.word	0x0000a788
    a490:	b570      	push	{r4, r5, r6, lr}
    a492:	4604      	mov	r4, r0
    a494:	7800      	ldrb	r0, [r0, #0]
    a496:	2500      	movs	r5, #0
    a498:	2801      	cmp	r0, #1
    a49a:	d004      	beq.n	a4a6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a>
    a49c:	b118      	cbz	r0, a4a6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a>
    a49e:	2802      	cmp	r0, #2
    a4a0:	d001      	beq.n	a4a6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a>
    a4a2:	2803      	cmp	r0, #3
    a4a4:	d168      	bne.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4a6:	7860      	ldrb	r0, [r4, #1]
    a4a8:	b128      	cbz	r0, a4b6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3a>
    a4aa:	2801      	cmp	r0, #1
    a4ac:	d003      	beq.n	a4b6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3a>
    a4ae:	2802      	cmp	r0, #2
    a4b0:	d001      	beq.n	a4b6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3a>
    a4b2:	2803      	cmp	r0, #3
    a4b4:	d160      	bne.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4b6:	7e60      	ldrb	r0, [r4, #25]
    a4b8:	b910      	cbnz	r0, a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x44>
    a4ba:	78a0      	ldrb	r0, [r4, #2]
    a4bc:	2801      	cmp	r0, #1
    a4be:	d15b      	bne.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4c0:	78a0      	ldrb	r0, [r4, #2]
    a4c2:	08c1      	lsrs	r1, r0, #3
    a4c4:	d158      	bne.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4c6:	0781      	lsls	r1, r0, #30
    a4c8:	d504      	bpl.n	a4d4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x58>
    a4ca:	2802      	cmp	r0, #2
    a4cc:	d154      	bne.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4ce:	492c      	ldr	r1, [pc, #176]	; (a580 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x104>)
    a4d0:	7a49      	ldrb	r1, [r1, #9]
    a4d2:	b3e9      	cbz	r1, a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd4>
    a4d4:	0740      	lsls	r0, r0, #29
    a4d6:	d04f      	beq.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4d8:	f000 f9b6 	bl	a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a4dc:	4601      	mov	r1, r0
    a4de:	78a0      	ldrb	r0, [r4, #2]
    a4e0:	ea30 0101 	bics.w	r1, r0, r1
    a4e4:	d001      	beq.n	a4ea <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x6e>
    a4e6:	2011      	movs	r0, #17
    a4e8:	bd70      	pop	{r4, r5, r6, pc}
    a4ea:	07c0      	lsls	r0, r0, #31
    a4ec:	d006      	beq.n	a4fc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a4ee:	78e0      	ldrb	r0, [r4, #3]
    a4f0:	2301      	movs	r3, #1
    a4f2:	6922      	ldr	r2, [r4, #16]
    a4f4:	68a1      	ldr	r1, [r4, #8]
    a4f6:	f004 ff56 	bl	f3a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x152>
    a4fa:	4605      	mov	r5, r0
    a4fc:	78a0      	ldrb	r0, [r4, #2]
    a4fe:	0780      	lsls	r0, r0, #30
    a500:	d506      	bpl.n	a510 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x94>
    a502:	78e0      	ldrb	r0, [r4, #3]
    a504:	2302      	movs	r3, #2
    a506:	6922      	ldr	r2, [r4, #16]
    a508:	68a1      	ldr	r1, [r4, #8]
    a50a:	f004 ff4c 	bl	f3a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x152>
    a50e:	4305      	orrs	r5, r0
    a510:	78a0      	ldrb	r0, [r4, #2]
    a512:	0740      	lsls	r0, r0, #29
    a514:	d506      	bpl.n	a524 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa8>
    a516:	78e0      	ldrb	r0, [r4, #3]
    a518:	2304      	movs	r3, #4
    a51a:	6922      	ldr	r2, [r4, #16]
    a51c:	68a1      	ldr	r1, [r4, #8]
    a51e:	f004 ff42 	bl	f3a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x152>
    a522:	4305      	orrs	r5, r0
    a524:	b10d      	cbz	r5, a52a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xae>
    a526:	4628      	mov	r0, r5
    a528:	bd70      	pop	{r4, r5, r6, pc}
    a52a:	78a0      	ldrb	r0, [r4, #2]
    a52c:	2805      	cmp	r0, #5
    a52e:	d11f      	bne.n	a570 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xf4>
    a530:	e9d4 1503 	ldrd	r1, r5, [r4, #12]
    a534:	7920      	ldrb	r0, [r4, #4]
    a536:	2304      	movs	r3, #4
    a538:	6962      	ldr	r2, [r4, #20]
    a53a:	f004 ff34 	bl	f3a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x152>
    a53e:	2800      	cmp	r0, #0
    a540:	d1f2      	bne.n	a528 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xac>
    a542:	2001      	movs	r0, #1
    a544:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    a548:	690a      	ldr	r2, [r1, #16]
    a54a:	4415      	add	r5, r2
    a54c:	1822      	adds	r2, r4, r0
    a54e:	e000      	b.n	a552 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd6>
    a550:	e012      	b.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a552:	78d3      	ldrb	r3, [r2, #3]
    a554:	7892      	ldrb	r2, [r2, #2]
    a556:	4293      	cmp	r3, r2
    a558:	d10e      	bne.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a55a:	688a      	ldr	r2, [r1, #8]
    a55c:	6849      	ldr	r1, [r1, #4]
    a55e:	428a      	cmp	r2, r1
    a560:	d10a      	bne.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a562:	1c40      	adds	r0, r0, #1
    a564:	b2c0      	uxtb	r0, r0
    a566:	2802      	cmp	r0, #2
    a568:	d3ec      	bcc.n	a544 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc8>
    a56a:	68a0      	ldr	r0, [r4, #8]
    a56c:	42a8      	cmp	r0, r5
    a56e:	d303      	bcc.n	a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a570:	7e20      	ldrb	r0, [r4, #24]
    a572:	b108      	cbz	r0, a578 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a574:	2807      	cmp	r0, #7
    a576:	d901      	bls.n	a57c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x100>
    a578:	2012      	movs	r0, #18
    a57a:	bd70      	pop	{r4, r5, r6, pc}
    a57c:	2000      	movs	r0, #0
    a57e:	bd70      	pop	{r4, r5, r6, pc}
    a580:	200014c6 	.word	0x200014c6
    a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a588:	461d      	mov	r5, r3
    a58a:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    a58e:	f1a1 0c06 	sub.w	ip, r1, #6
    a592:	f640 437a 	movw	r3, #3194	; 0xc7a
    a596:	9e08      	ldr	r6, [sp, #32]
    a598:	459c      	cmp	ip, r3
    a59a:	d805      	bhi.n	a5a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x12c>
    a59c:	f1a2 0c06 	sub.w	ip, r2, #6
    a5a0:	459c      	cmp	ip, r3
    a5a2:	d801      	bhi.n	a5a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x12c>
    a5a4:	2301      	movs	r3, #1
    a5a6:	e000      	b.n	a5aa <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x12e>
    a5a8:	2300      	movs	r3, #0
    a5aa:	b120      	cbz	r0, a5b6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x13a>
    a5ac:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    a5b0:	b168      	cbz	r0, a5ce <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x152>
    a5b2:	b96b      	cbnz	r3, a5d0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x154>
    a5b4:	e002      	b.n	a5bc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x140>
    a5b6:	4815      	ldr	r0, [pc, #84]	; (a60c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x190>)
    a5b8:	7a00      	ldrb	r0, [r0, #8]
    a5ba:	e7f9      	b.n	a5b0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x134>
    a5bc:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    a5c0:	2806      	cmp	r0, #6
    a5c2:	d821      	bhi.n	a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a5c4:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    a5c8:	2806      	cmp	r0, #6
    a5ca:	d901      	bls.n	a5d0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x154>
    a5cc:	e01c      	b.n	a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a5ce:	b1db      	cbz	r3, a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a5d0:	4291      	cmp	r1, r2
    a5d2:	d819      	bhi.n	a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a5d4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    a5d8:	d216      	bcs.n	a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a5da:	f1a4 000a 	sub.w	r0, r4, #10
    a5de:	f640 4176 	movw	r1, #3190	; 0xc76
    a5e2:	4288      	cmp	r0, r1
    a5e4:	d810      	bhi.n	a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a5e6:	4610      	mov	r0, r2
    a5e8:	f003 fc26 	bl	de38 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a5ec:	1c6d      	adds	r5, r5, #1
    a5ee:	4368      	muls	r0, r5
    a5f0:	f240 2171 	movw	r1, #625	; 0x271
    a5f4:	0040      	lsls	r0, r0, #1
    a5f6:	434c      	muls	r4, r1
    a5f8:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    a5fc:	d204      	bcs.n	a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a5fe:	42b7      	cmp	r7, r6
    a600:	d802      	bhi.n	a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a602:	2001      	movs	r0, #1
    a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a608:	2000      	movs	r0, #0
    a60a:	e7fb      	b.n	a604 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x188>
    a60c:	200014c6 	.word	0x200014c6
    a610:	b510      	push	{r4, lr}
    a612:	4812      	ldr	r0, [pc, #72]	; (a65c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1e0>)
    a614:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a618:	4a11      	ldr	r2, [pc, #68]	; (a660 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1e4>)
    a61a:	8301      	strh	r1, [r0, #24]
    a61c:	2100      	movs	r1, #0
    a61e:	7681      	strb	r1, [r0, #26]
    a620:	8381      	strh	r1, [r0, #28]
    a622:	231b      	movs	r3, #27
    a624:	8013      	strh	r3, [r2, #0]
    a626:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a62a:	8054      	strh	r4, [r2, #2]
    a62c:	8093      	strh	r3, [r2, #4]
    a62e:	80d4      	strh	r4, [r2, #6]
    a630:	7481      	strb	r1, [r0, #18]
    a632:	74c1      	strb	r1, [r0, #19]
    a634:	7251      	strb	r1, [r2, #9]
    a636:	2403      	movs	r4, #3
    a638:	7004      	strb	r4, [r0, #0]
    a63a:	2402      	movs	r4, #2
    a63c:	7044      	strb	r4, [r0, #1]
    a63e:	8043      	strh	r3, [r0, #2]
    a640:	8083      	strh	r3, [r0, #4]
    a642:	f640 63a6 	movw	r3, #3750	; 0xea6
    a646:	6083      	str	r3, [r0, #8]
    a648:	005b      	lsls	r3, r3, #1
    a64a:	60c3      	str	r3, [r0, #12]
    a64c:	7211      	strb	r1, [r2, #8]
    a64e:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    a652:	7581      	strb	r1, [r0, #22]
    a654:	7401      	strb	r1, [r0, #16]
    a656:	4803      	ldr	r0, [pc, #12]	; (a664 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1e8>)
    a658:	7001      	strb	r1, [r0, #0]
    a65a:	bd10      	pop	{r4, pc}
    a65c:	20001414 	.word	0x20001414
    a660:	200014c6 	.word	0x200014c6
    a664:	20000408 	.word	0x20000408
    a668:	4904      	ldr	r1, [pc, #16]	; (a67c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x200>)
    a66a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    a66e:	4288      	cmp	r0, r1
    a670:	d301      	bcc.n	a676 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1fa>
    a672:	2000      	movs	r0, #0
    a674:	4770      	bx	lr
    a676:	2001      	movs	r0, #1
    a678:	4770      	bx	lr
    a67a:	0000      	.short	0x0000
    a67c:	0270f3cc 	.word	0x0270f3cc
    a680:	4904      	ldr	r1, [pc, #16]	; (a694 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x218>)
    a682:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    a686:	4288      	cmp	r0, r1
    a688:	d301      	bcc.n	a68e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x212>
    a68a:	2000      	movs	r0, #0
    a68c:	4770      	bx	lr
    a68e:	2001      	movs	r0, #1
    a690:	4770      	bx	lr
    a692:	0000      	.short	0x0000
    a694:	0270f3cc 	.word	0x0270f3cc
    a698:	4904      	ldr	r1, [pc, #16]	; (a6ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x230>)
    a69a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    a69e:	4288      	cmp	r0, r1
    a6a0:	d301      	bcc.n	a6a6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x22a>
    a6a2:	2000      	movs	r0, #0
    a6a4:	4770      	bx	lr
    a6a6:	2001      	movs	r0, #1
    a6a8:	4770      	bx	lr
    a6aa:	0000      	.short	0x0000
    a6ac:	009c363d 	.word	0x009c363d
    a6b0:	4904      	ldr	r1, [pc, #16]	; (a6c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x248>)
    a6b2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    a6b6:	4288      	cmp	r0, r1
    a6b8:	d301      	bcc.n	a6be <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x242>
    a6ba:	2000      	movs	r0, #0
    a6bc:	4770      	bx	lr
    a6be:	2001      	movs	r0, #1
    a6c0:	4770      	bx	lr
    a6c2:	0000      	.short	0x0000
    a6c4:	009c363d 	.word	0x009c363d
    a6c8:	b510      	push	{r4, lr}
    a6ca:	2102      	movs	r1, #2
    a6cc:	2000      	movs	r0, #0
    a6ce:	f003 f9b6 	bl	da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a6d2:	0004      	movs	r4, r0
    a6d4:	d10c      	bne.n	a6f0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x274>
    a6d6:	2200      	movs	r2, #0
    a6d8:	2102      	movs	r1, #2
    a6da:	4610      	mov	r0, r2
    a6dc:	f003 f9a5 	bl	da2a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a6e0:	0004      	movs	r4, r0
    a6e2:	d007      	beq.n	a6f4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x278>
    a6e4:	4806      	ldr	r0, [pc, #24]	; (a700 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x284>)
    a6e6:	f990 1000 	ldrsb.w	r1, [r0]
    a6ea:	4620      	mov	r0, r4
    a6ec:	f003 ff74 	bl	e5d8 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a6f0:	4620      	mov	r0, r4
    a6f2:	bd10      	pop	{r4, pc}
    a6f4:	f240 2135 	movw	r1, #565	; 0x235
    a6f8:	2039      	movs	r0, #57	; 0x39
    a6fa:	f7f9 fc5f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6fe:	0000      	.short	0x0000
    a700:	20000400 	.word	0x20000400
    a704:	b530      	push	{r4, r5, lr}
    a706:	2200      	movs	r2, #0
    a708:	4d07      	ldr	r5, [pc, #28]	; (a728 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2ac>)
    a70a:	e009      	b.n	a720 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a4>
    a70c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    a710:	462b      	mov	r3, r5
    a712:	429c      	cmp	r4, r3
    a714:	d800      	bhi.n	a718 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x29c>
    a716:	4623      	mov	r3, r4
    a718:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    a71c:	1c52      	adds	r2, r2, #1
    a71e:	b2d2      	uxtb	r2, r2
    a720:	428a      	cmp	r2, r1
    a722:	d3f3      	bcc.n	a70c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x290>
    a724:	bd30      	pop	{r4, r5, pc}
    a726:	0000      	.short	0x0000
    a728:	00f42400 	.word	0x00f42400
    a72c:	4904      	ldr	r1, [pc, #16]	; (a740 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c4>)
    a72e:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    a732:	4288      	cmp	r0, r1
    a734:	d301      	bcc.n	a73a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2be>
    a736:	2000      	movs	r0, #0
    a738:	4770      	bx	lr
    a73a:	2001      	movs	r0, #1
    a73c:	4770      	bx	lr
    a73e:	0000      	.short	0x0000
    a740:	0270f9a8 	.word	0x0270f9a8
    a744:	4904      	ldr	r1, [pc, #16]	; (a758 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2dc>)
    a746:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    a74a:	4288      	cmp	r0, r1
    a74c:	d301      	bcc.n	a752 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2d6>
    a74e:	2000      	movs	r0, #0
    a750:	4770      	bx	lr
    a752:	2001      	movs	r0, #1
    a754:	4770      	bx	lr
    a756:	0000      	.short	0x0000
    a758:	0270f9a8 	.word	0x0270f9a8
    a75c:	4a09      	ldr	r2, [pc, #36]	; (a784 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x308>)
    a75e:	4290      	cmp	r0, r2
    a760:	d80b      	bhi.n	a77a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2fe>
    a762:	2901      	cmp	r1, #1
    a764:	d002      	beq.n	a76c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2f0>
    a766:	2904      	cmp	r1, #4
    a768:	d003      	beq.n	a772 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2f6>
    a76a:	e008      	b.n	a77e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x302>
    a76c:	f240 7153 	movw	r1, #1875	; 0x753
    a770:	e001      	b.n	a776 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2fa>
    a772:	f640 11c4 	movw	r1, #2500	; 0x9c4
    a776:	4288      	cmp	r0, r1
    a778:	d201      	bcs.n	a77e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x302>
    a77a:	2000      	movs	r0, #0
    a77c:	4770      	bx	lr
    a77e:	2001      	movs	r0, #1
    a780:	4770      	bx	lr
    a782:	0000      	.short	0x0000
    a784:	0270fd8f 	.word	0x0270fd8f
    a788:	0c11d80c 	.word	0x0c11d80c
    a78c:	11d80059 	.word	0x11d80059

0000a790 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a790:	b510      	push	{r4, lr}
    a792:	460c      	mov	r4, r1
    a794:	f7fb f9c8 	bl	5b28 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a798:	4805      	ldr	r0, [pc, #20]	; (a7b0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    a79a:	6044      	str	r4, [r0, #4]
    a79c:	6880      	ldr	r0, [r0, #8]
    a79e:	f004 ff6f 	bl	f680 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42c>
    a7a2:	f004 fcaa 	bl	f0fa <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7aa:	f7fb b9f9 	b.w	5ba0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    a7ae:	0000      	.short	0x0000
    a7b0:	20000410 	.word	0x20000410

0000a7b4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>:
    a7b4:	4801      	ldr	r0, [pc, #4]	; (a7bc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A+0x8>)
    a7b6:	7800      	ldrb	r0, [r0, #0]
    a7b8:	4770      	bx	lr
    a7ba:	0000      	.short	0x0000
    a7bc:	20000410 	.word	0x20000410

0000a7c0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>:
    a7c0:	4901      	ldr	r1, [pc, #4]	; (a7c8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q+0x8>)
    a7c2:	7008      	strb	r0, [r1, #0]
    a7c4:	4770      	bx	lr
    a7c6:	0000      	.short	0x0000
    a7c8:	20000410 	.word	0x20000410

0000a7cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a7cc:	b510      	push	{r4, lr}
    a7ce:	4c05      	ldr	r4, [pc, #20]	; (a7e4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    a7d0:	68e0      	ldr	r0, [r4, #12]
    a7d2:	f004 ff55 	bl	f680 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42c>
    a7d6:	6920      	ldr	r0, [r4, #16]
    a7d8:	f004 ff52 	bl	f680 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42c>
    a7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7e0:	f004 bd28 	b.w	f234 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a7e4:	20000410 	.word	0x20000410

0000a7e8 <sym_I2OCMPNOS3RX5QDP26QCUET5RLSHIJGL3A3XYRI>:
    a7e8:	b510      	push	{r4, lr}
    a7ea:	4905      	ldr	r1, [pc, #20]	; (a800 <sym_I2OCMPNOS3RX5QDP26QCUET5RLSHIJGL3A3XYRI+0x18>)
    a7ec:	4805      	ldr	r0, [pc, #20]	; (a804 <sym_I2OCMPNOS3RX5QDP26QCUET5RLSHIJGL3A3XYRI+0x1c>)
    a7ee:	f004 ff3a 	bl	f666 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x412>
    a7f2:	4804      	ldr	r0, [pc, #16]	; (a804 <sym_I2OCMPNOS3RX5QDP26QCUET5RLSHIJGL3A3XYRI+0x1c>)
    a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7f8:	4903      	ldr	r1, [pc, #12]	; (a808 <sym_I2OCMPNOS3RX5QDP26QCUET5RLSHIJGL3A3XYRI+0x20>)
    a7fa:	1d00      	adds	r0, r0, #4
    a7fc:	f004 bf33 	b.w	f666 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x412>
    a800:	20000424 	.word	0x20000424
    a804:	20000418 	.word	0x20000418
    a808:	2000042c 	.word	0x2000042c
    a80c:	b510      	push	{r4, lr}
    a80e:	f7ff fdcf 	bl	a3b0 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    a812:	f7fe fc09 	bl	9028 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    a816:	f7ff fe2b 	bl	a470 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>
    a81a:	4601      	mov	r1, r0
    a81c:	4803      	ldr	r0, [pc, #12]	; (a82c <sym_I2OCMPNOS3RX5QDP26QCUET5RLSHIJGL3A3XYRI+0x44>)
    a81e:	f7fb fd55 	bl	62cc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    a822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a826:	f7fb b9b3 	b.w	5b90 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    a82a:	0000      	.short	0x0000
    a82c:	2000170b 	.word	0x2000170b

0000a830 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a830:	4a04      	ldr	r2, [pc, #16]	; (a844 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    a832:	08c1      	lsrs	r1, r0, #3
    a834:	f000 0307 	and.w	r3, r0, #7
    a838:	2001      	movs	r0, #1
    a83a:	4098      	lsls	r0, r3
    a83c:	5c53      	ldrb	r3, [r2, r1]
    a83e:	4303      	orrs	r3, r0
    a840:	5453      	strb	r3, [r2, r1]
    a842:	4770      	bx	lr
    a844:	20000020 	.word	0x20000020

0000a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a848:	4909      	ldr	r1, [pc, #36]	; (a870 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x28>)
    a84a:	8808      	ldrh	r0, [r1, #0]
    a84c:	7909      	ldrb	r1, [r1, #4]
    a84e:	0ac2      	lsrs	r2, r0, #11
    a850:	0a00      	lsrs	r0, r0, #8
    a852:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
    a856:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    a85a:	07d2      	lsls	r2, r2, #31
    a85c:	f000 0001 	and.w	r0, r0, #1
    a860:	1800      	adds	r0, r0, r0
    a862:	ea40 7252 	orr.w	r2, r0, r2, lsr #29
    a866:	b2d0      	uxtb	r0, r2
    a868:	f040 0001 	orr.w	r0, r0, #1
    a86c:	4770      	bx	lr
    a86e:	0000      	.short	0x0000
    a870:	20000020 	.word	0x20000020

0000a874 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a874:	b510      	push	{r4, lr}
    a876:	f7f8 fecb 	bl	3610 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a87a:	2200      	movs	r2, #0
    a87c:	4b08      	ldr	r3, [pc, #32]	; (a8a0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a87e:	4611      	mov	r1, r2
    a880:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a884:	4284      	cmp	r4, r0
    a886:	d303      	bcc.n	a890 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a888:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a88c:	7882      	ldrb	r2, [r0, #2]
    a88e:	e003      	b.n	a898 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a890:	1c49      	adds	r1, r1, #1
    a892:	b2c9      	uxtb	r1, r1
    a894:	290c      	cmp	r1, #12
    a896:	d3f3      	bcc.n	a880 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a898:	4802      	ldr	r0, [pc, #8]	; (a8a4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a89a:	7002      	strb	r2, [r0, #0]
    a89c:	bd10      	pop	{r4, pc}
    a89e:	0000      	.short	0x0000
    a8a0:	0000f77e 	.word	0x0000f77e
    a8a4:	20000490 	.word	0x20000490

0000a8a8 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    a8a8:	4801      	ldr	r0, [pc, #4]	; (a8b0 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    a8aa:	7800      	ldrb	r0, [r0, #0]
    a8ac:	4770      	bx	lr
    a8ae:	0000      	.short	0x0000
    a8b0:	20000490 	.word	0x20000490

0000a8b4 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>:
    a8b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8b8:	460f      	mov	r7, r1
    a8ba:	4605      	mov	r5, r0
    a8bc:	2115      	movs	r1, #21
    a8be:	4690      	mov	r8, r2
    a8c0:	460e      	mov	r6, r1
    a8c2:	20ff      	movs	r0, #255	; 0xff
    a8c4:	f003 f80b 	bl	d8de <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    a8c8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    a8cc:	1cc0      	adds	r0, r0, #3
    a8ce:	ea00 0401 	and.w	r4, r0, r1
    a8d2:	b30d      	cbz	r5, a918 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x64>
    a8d4:	f8df 904c 	ldr.w	r9, [pc, #76]	; a924 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x70>
    a8d8:	fb04 5307 	mla	r3, r4, r7, r5
    a8dc:	e9c9 5301 	strd	r5, r3, [r9, #4]
    a8e0:	f8a9 4000 	strh.w	r4, [r9]
    a8e4:	00fa      	lsls	r2, r7, #3
    a8e6:	2100      	movs	r1, #0
    a8e8:	4618      	mov	r0, r3
    a8ea:	f002 f99a 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a8ee:	2500      	movs	r5, #0
    a8f0:	46aa      	mov	sl, r5
    a8f2:	e00f      	b.n	a914 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x60>
    a8f4:	4628      	mov	r0, r5
    a8f6:	f000 f817 	bl	a928 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x74>
    a8fa:	4621      	mov	r1, r4
    a8fc:	22ff      	movs	r2, #255	; 0xff
    a8fe:	4633      	mov	r3, r6
    a900:	f8cd 8000 	str.w	r8, [sp]
    a904:	f002 ff8c 	bl	d820 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    a908:	f8d9 1008 	ldr.w	r1, [r9, #8]
    a90c:	f801 a035 	strb.w	sl, [r1, r5, lsl #3]
    a910:	1c6d      	adds	r5, r5, #1
    a912:	b2ad      	uxth	r5, r5
    a914:	42bd      	cmp	r5, r7
    a916:	d3ed      	bcc.n	a8f4 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x40>
    a918:	3408      	adds	r4, #8
    a91a:	fb04 f007 	mul.w	r0, r4, r7
    a91e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a922:	0000      	.short	0x0000
    a924:	20000434 	.word	0x20000434
    a928:	4902      	ldr	r1, [pc, #8]	; (a934 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x80>)
    a92a:	684a      	ldr	r2, [r1, #4]
    a92c:	8809      	ldrh	r1, [r1, #0]
    a92e:	fb00 2001 	mla	r0, r0, r1, r2
    a932:	4770      	bx	lr
    a934:	20000434 	.word	0x20000434

0000a938 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a938:	b570      	push	{r4, r5, r6, lr}
    a93a:	4605      	mov	r5, r0
    a93c:	4616      	mov	r6, r2
    a93e:	460c      	mov	r4, r1
    a940:	2002      	movs	r0, #2
    a942:	f000 f8f1 	bl	ab28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a946:	4905      	ldr	r1, [pc, #20]	; (a95c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    a948:	2001      	movs	r0, #1
    a94a:	7008      	strb	r0, [r1, #0]
    a94c:	4904      	ldr	r1, [pc, #16]	; (a960 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a94e:	1ef0      	subs	r0, r6, #3
    a950:	6008      	str	r0, [r1, #0]
    a952:	4804      	ldr	r0, [pc, #16]	; (a964 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a954:	6005      	str	r5, [r0, #0]
    a956:	1f00      	subs	r0, r0, #4
    a958:	6004      	str	r4, [r0, #0]
    a95a:	bd70      	pop	{r4, r5, r6, pc}
    a95c:	20000491 	.word	0x20000491
    a960:	4000f510 	.word	0x4000f510
    a964:	4000f508 	.word	0x4000f508

0000a968 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a968:	4810      	ldr	r0, [pc, #64]	; (a9ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x44>)
    a96a:	7801      	ldrb	r1, [r0, #0]
    a96c:	b1a9      	cbz	r1, a99a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x32>
    a96e:	4a10      	ldr	r2, [pc, #64]	; (a9b0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    a970:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    a974:	6011      	str	r1, [r2, #0]
    a976:	490f      	ldr	r1, [pc, #60]	; (a9b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    a978:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    a97c:	2200      	movs	r2, #0
    a97e:	2b00      	cmp	r3, #0
    a980:	bf1c      	itt	ne
    a982:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    a986:	2b00      	cmpne	r3, #0
    a988:	d002      	beq.n	a990 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    a98a:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    a98e:	b141      	cbz	r1, a9a2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    a990:	7042      	strb	r2, [r0, #1]
    a992:	f04f 0110 	mov.w	r1, #16
    a996:	7081      	strb	r1, [r0, #2]
    a998:	7002      	strb	r2, [r0, #0]
    a99a:	f04f 0000 	mov.w	r0, #0
    a99e:	f000 b8c3 	b.w	ab28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a9a2:	2101      	movs	r1, #1
    a9a4:	7041      	strb	r1, [r0, #1]
    a9a6:	4904      	ldr	r1, [pc, #16]	; (a9b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    a9a8:	6809      	ldr	r1, [r1, #0]
    a9aa:	e7f4      	b.n	a996 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2e>
    a9ac:	20000491 	.word	0x20000491
    a9b0:	4001f508 	.word	0x4001f508
    a9b4:	4000f000 	.word	0x4000f000
    a9b8:	4000f400 	.word	0x4000f400

0000a9bc <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>:
    a9bc:	b510      	push	{r4, lr}
    a9be:	2002      	movs	r0, #2
    a9c0:	f000 f8b2 	bl	ab28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a9c4:	4806      	ldr	r0, [pc, #24]	; (a9e0 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI+0x24>)
    a9c6:	2201      	movs	r2, #1
    a9c8:	2100      	movs	r1, #0
    a9ca:	7002      	strb	r2, [r0, #0]
    a9cc:	4805      	ldr	r0, [pc, #20]	; (a9e4 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI+0x28>)
    a9ce:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a9d2:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a9d6:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a9da:	6002      	str	r2, [r0, #0]
    a9dc:	bd10      	pop	{r4, pc}
    a9de:	0000      	.short	0x0000
    a9e0:	20000491 	.word	0x20000491
    a9e4:	4000f000 	.word	0x4000f000

0000a9e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a9e8:	b510      	push	{r4, lr}
    a9ea:	2002      	movs	r0, #2
    a9ec:	f000 f89c 	bl	ab28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a9f0:	4907      	ldr	r1, [pc, #28]	; (aa10 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    a9f2:	2001      	movs	r0, #1
    a9f4:	7008      	strb	r0, [r1, #0]
    a9f6:	4907      	ldr	r1, [pc, #28]	; (aa14 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    a9f8:	2000      	movs	r0, #0
    a9fa:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    a9fe:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    aa02:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    aa06:	4904      	ldr	r1, [pc, #16]	; (aa18 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    aa08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    aa0c:	6008      	str	r0, [r1, #0]
    aa0e:	bd10      	pop	{r4, pc}
    aa10:	20000491 	.word	0x20000491
    aa14:	4000f000 	.word	0x4000f000
    aa18:	4001f504 	.word	0x4001f504

0000aa1c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    aa1c:	4803      	ldr	r0, [pc, #12]	; (aa2c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    aa1e:	2100      	movs	r1, #0
    aa20:	7001      	strb	r1, [r0, #0]
    aa22:	7041      	strb	r1, [r0, #1]
    aa24:	2110      	movs	r1, #16
    aa26:	7081      	strb	r1, [r0, #2]
    aa28:	4770      	bx	lr
    aa2a:	0000      	.short	0x0000
    aa2c:	20000491 	.word	0x20000491

0000aa30 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    aa30:	480c      	ldr	r0, [pc, #48]	; (aa64 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    aa32:	7801      	ldrb	r1, [r0, #0]
    aa34:	2900      	cmp	r1, #0
    aa36:	bf04      	itt	eq
    aa38:	7880      	ldrbeq	r0, [r0, #2]
    aa3a:	4770      	bxeq	lr
    aa3c:	480a      	ldr	r0, [pc, #40]	; (aa68 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    aa3e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    aa42:	2900      	cmp	r1, #0
    aa44:	bf1c      	itt	ne
    aa46:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    aa4a:	2900      	cmpne	r1, #0
    aa4c:	d002      	beq.n	aa54 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    aa4e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    aa52:	b110      	cbz	r0, aa5a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    aa54:	f04f 0010 	mov.w	r0, #16
    aa58:	4770      	bx	lr
    aa5a:	4804      	ldr	r0, [pc, #16]	; (aa6c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    aa5c:	6800      	ldr	r0, [r0, #0]
    aa5e:	b2c0      	uxtb	r0, r0
    aa60:	4770      	bx	lr
    aa62:	0000      	.short	0x0000
    aa64:	20000491 	.word	0x20000491
    aa68:	4000f000 	.word	0x4000f000
    aa6c:	4000f400 	.word	0x4000f400

0000aa70 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    aa70:	4811      	ldr	r0, [pc, #68]	; (aab8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x48>)
    aa72:	b510      	push	{r4, lr}
    aa74:	7802      	ldrb	r2, [r0, #0]
    aa76:	4b11      	ldr	r3, [pc, #68]	; (aabc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>)
    aa78:	7840      	ldrb	r0, [r0, #1]
    aa7a:	21c8      	movs	r1, #200	; 0xc8
    aa7c:	1e49      	subs	r1, r1, #1
    aa7e:	b2c9      	uxtb	r1, r1
    aa80:	b15a      	cbz	r2, aa9a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2a>
    aa82:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    aa86:	f1bc 0f00 	cmp.w	ip, #0
    aa8a:	d00c      	beq.n	aaa6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    aa8c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    aa90:	b138      	cbz	r0, aaa2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    aa92:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    aa96:	b160      	cbz	r0, aab2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    aa98:	e003      	b.n	aaa2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    aa9a:	2802      	cmp	r0, #2
    aa9c:	d003      	beq.n	aaa6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    aa9e:	2801      	cmp	r0, #1
    aaa0:	d007      	beq.n	aab2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    aaa2:	2000      	movs	r0, #0
    aaa4:	bd10      	pop	{r4, pc}
    aaa6:	2900      	cmp	r1, #0
    aaa8:	d1e8      	bne.n	aa7c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    aaaa:	219e      	movs	r1, #158	; 0x9e
    aaac:	203b      	movs	r0, #59	; 0x3b
    aaae:	f7f9 fa85 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aab2:	2001      	movs	r0, #1
    aab4:	bd10      	pop	{r4, pc}
    aab6:	0000      	.short	0x0000
    aab8:	20000491 	.word	0x20000491
    aabc:	4000f000 	.word	0x4000f000

0000aac0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    aac0:	4905      	ldr	r1, [pc, #20]	; (aad8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    aac2:	2000      	movs	r0, #0
    aac4:	780a      	ldrb	r2, [r1, #0]
    aac6:	b11a      	cbz	r2, aad0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    aac8:	4b05      	ldr	r3, [pc, #20]	; (aae0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>)
    aaca:	4a04      	ldr	r2, [pc, #16]	; (aadc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1c>)
    aacc:	601a      	str	r2, [r3, #0]
    aace:	7008      	strb	r0, [r1, #0]
    aad0:	7048      	strb	r0, [r1, #1]
    aad2:	7088      	strb	r0, [r1, #2]
    aad4:	4770      	bx	lr
    aad6:	0000      	.short	0x0000
    aad8:	20000494 	.word	0x20000494
    aadc:	02020000 	.word	0x02020000
    aae0:	4001f508 	.word	0x4001f508

0000aae4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    aae4:	4802      	ldr	r0, [pc, #8]	; (aaf0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    aae6:	2100      	movs	r1, #0
    aae8:	7001      	strb	r1, [r0, #0]
    aaea:	7041      	strb	r1, [r0, #1]
    aaec:	7081      	strb	r1, [r0, #2]
    aaee:	4770      	bx	lr
    aaf0:	20000494 	.word	0x20000494

0000aaf4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    aaf4:	b510      	push	{r4, lr}
    aaf6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    aafa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    aafe:	2000      	movs	r0, #0
    ab00:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    ab04:	f3bf 8f4f 	dsb	sy
    ab08:	f3bf 8f6f 	isb	sy
    ab0c:	4904      	ldr	r1, [pc, #16]	; (ab20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    ab0e:	6008      	str	r0, [r1, #0]
    ab10:	6008      	str	r0, [r1, #0]
    ab12:	f7ff ffd5 	bl	aac0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    ab16:	4903      	ldr	r1, [pc, #12]	; (ab24 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>)
    ab18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ab1c:	6008      	str	r0, [r1, #0]
    ab1e:	bd10      	pop	{r4, pc}
    ab20:	4000f500 	.word	0x4000f500
    ab24:	4001f508 	.word	0x4001f508

0000ab28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    ab28:	b570      	push	{r4, r5, r6, lr}
    ab2a:	4c11      	ldr	r4, [pc, #68]	; (ab70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    ab2c:	4605      	mov	r5, r0
    ab2e:	2000      	movs	r0, #0
    ab30:	6020      	str	r0, [r4, #0]
    ab32:	6020      	str	r0, [r4, #0]
    ab34:	f7ff ffc4 	bl	aac0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    ab38:	490e      	ldr	r1, [pc, #56]	; (ab74 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    ab3a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ab3e:	6008      	str	r0, [r1, #0]
    ab40:	2d00      	cmp	r5, #0
    ab42:	bf08      	it	eq
    ab44:	bd70      	popeq	{r4, r5, r6, pc}
    ab46:	480c      	ldr	r0, [pc, #48]	; (ab78 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    ab48:	490c      	ldr	r1, [pc, #48]	; (ab7c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    ab4a:	2d01      	cmp	r5, #1
    ab4c:	bf04      	itt	eq
    ab4e:	2202      	moveq	r2, #2
    ab50:	6022      	streq	r2, [r4, #0]
    ab52:	d00b      	beq.n	ab6c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    ab54:	2d02      	cmp	r5, #2
    ab56:	d003      	beq.n	ab60 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x38>
    ab58:	2181      	movs	r1, #129	; 0x81
    ab5a:	203d      	movs	r0, #61	; 0x3d
    ab5c:	f7f9 fa2e 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab60:	2203      	movs	r2, #3
    ab62:	6022      	str	r2, [r4, #0]
    ab64:	6008      	str	r0, [r1, #0]
    ab66:	4906      	ldr	r1, [pc, #24]	; (ab80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    ab68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ab6c:	6008      	str	r0, [r1, #0]
    ab6e:	bd70      	pop	{r4, r5, r6, pc}
    ab70:	4000f500 	.word	0x4000f500
    ab74:	4001f508 	.word	0x4001f508
    ab78:	2000180d 	.word	0x2000180d
    ab7c:	4000f514 	.word	0x4000f514
    ab80:	4001f504 	.word	0x4001f504

0000ab84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    ab84:	4805      	ldr	r0, [pc, #20]	; (ab9c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    ab86:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ab8a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    ab8e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ab92:	2100      	movs	r1, #0
    ab94:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    ab98:	4770      	bx	lr
    ab9a:	0000      	.short	0x0000
    ab9c:	40001000 	.word	0x40001000

0000aba0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    aba0:	4904      	ldr	r1, [pc, #16]	; (abb4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    aba2:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    aba6:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    abaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    abae:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    abb2:	4770      	bx	lr
    abb4:	40001000 	.word	0x40001000

0000abb8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    abb8:	4902      	ldr	r1, [pc, #8]	; (abc4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    abba:	5c08      	ldrb	r0, [r1, r0]
    abbc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    abc0:	4770      	bx	lr
    abc2:	0000      	.short	0x0000
    abc4:	0000c274 	.word	0x0000c274

0000abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    abc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abcc:	f7f8 ff96 	bl	3afc <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    abd0:	f7f9 f80a 	bl	3be8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    abd4:	4c4a      	ldr	r4, [pc, #296]	; (ad00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x138>)
    abd6:	4680      	mov	r8, r0
    abd8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    abdc:	f010 0f10 	tst.w	r0, #16
    abe0:	bf14      	ite	ne
    abe2:	f04f 0901 	movne.w	r9, #1
    abe6:	f04f 0900 	moveq.w	r9, #0
    abea:	2010      	movs	r0, #16
    abec:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    abf0:	2002      	movs	r0, #2
    abf2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    abf6:	4d43      	ldr	r5, [pc, #268]	; (ad04 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x13c>)
    abf8:	f8df a10c 	ldr.w	sl, [pc, #268]	; ad08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x140>
    abfc:	2600      	movs	r6, #0
    abfe:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
    ac02:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    ac06:	f8ca 0000 	str.w	r0, [sl]
    ac0a:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    ac0e:	f04f 0701 	mov.w	r7, #1
    ac12:	f010 0fff 	tst.w	r0, #255	; 0xff
    ac16:	d016      	beq.n	ac46 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7e>
    ac18:	20ff      	movs	r0, #255	; 0xff
    ac1a:	f88d 0000 	strb.w	r0, [sp]
    ac1e:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    ac22:	6127      	str	r7, [r4, #16]
    ac24:	e005      	b.n	ac32 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6a>
    ac26:	bf00      	nop
    ac28:	f89d 0000 	ldrb.w	r0, [sp]
    ac2c:	1e40      	subs	r0, r0, #1
    ac2e:	f88d 0000 	strb.w	r0, [sp]
    ac32:	f89d 1000 	ldrb.w	r1, [sp]
    ac36:	b119      	cbz	r1, ac40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x78>
    ac38:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    ac3c:	2800      	cmp	r0, #0
    ac3e:	d0f3      	beq.n	ac28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x60>
    ac40:	f89d 0000 	ldrb.w	r0, [sp]
    ac44:	b140      	cbz	r0, ac58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>
    ac46:	8ba8      	ldrh	r0, [r5, #28]
    ac48:	2896      	cmp	r0, #150	; 0x96
    ac4a:	d324      	bcc.n	ac96 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    ac4c:	7a68      	ldrb	r0, [r5, #9]
    ac4e:	2801      	cmp	r0, #1
    ac50:	d007      	beq.n	ac62 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9a>
    ac52:	2802      	cmp	r0, #2
    ac54:	d012      	beq.n	ac7c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xb4>
    ac56:	e01e      	b.n	ac96 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    ac58:	f640 0183 	movw	r1, #2179	; 0x883
    ac5c:	203e      	movs	r0, #62	; 0x3e
    ac5e:	f7f9 f9ad 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac62:	f7f9 f807 	bl	3c74 <mpsl_fem_pa_configuration_clear>
    ac66:	2800      	cmp	r0, #0
    ac68:	bf18      	it	ne
    ac6a:	f1b0 3fff 	cmpne.w	r0, #4294967295
    ac6e:	d012      	beq.n	ac96 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    ac70:	f640 0194 	movw	r1, #2196	; 0x894
    ac74:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ac78:	f7f9 f9a0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac7c:	f7f8 ffe8 	bl	3c50 <mpsl_fem_lna_configuration_clear>
    ac80:	2800      	cmp	r0, #0
    ac82:	bf18      	it	ne
    ac84:	f1b0 3fff 	cmpne.w	r0, #4294967295
    ac88:	d005      	beq.n	ac96 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    ac8a:	f640 019a 	movw	r1, #2202	; 0x89a
    ac8e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ac92:	f7f9 f993 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac96:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    ac9a:	2000      	movs	r0, #0
    ac9c:	f001 f9b0 	bl	c000 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    aca0:	71ee      	strb	r6, [r5, #7]
    aca2:	722e      	strb	r6, [r5, #8]
    aca4:	726e      	strb	r6, [r5, #9]
    aca6:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
    acaa:	b1b0      	cbz	r0, acda <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x112>
    acac:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
    acb0:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
    acb4:	f040 0002 	orr.w	r0, r0, #2
    acb8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    acbc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    acc0:	f8ca 0000 	str.w	r0, [sl]
    acc4:	6968      	ldr	r0, [r5, #20]
    acc6:	4911      	ldr	r1, [pc, #68]	; (ad0c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x144>)
    acc8:	f020 0003 	bic.w	r0, r0, #3
    accc:	6168      	str	r0, [r5, #20]
    acce:	6008      	str	r0, [r1, #0]
    acd0:	4910      	ldr	r1, [pc, #64]	; (ad14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14c>)
    acd2:	480f      	ldr	r0, [pc, #60]	; (ad10 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x148>)
    acd4:	6008      	str	r0, [r1, #0]
    acd6:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    acda:	f1b9 0f00 	cmp.w	r9, #0
    acde:	bf1c      	itt	ne
    ace0:	2010      	movne	r0, #16
    ace2:	f8c4 0304 	strne.w	r0, [r4, #772]	; 0x304
    ace6:	f1b8 0f00 	cmp.w	r8, #0
    acea:	bf18      	it	ne
    acec:	6127      	strne	r7, [r4, #16]
    acee:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    acf2:	2800      	cmp	r0, #0
    acf4:	bf1c      	itt	ne
    acf6:	6127      	strne	r7, [r4, #16]
    acf8:	f885 6045 	strbne.w	r6, [r5, #69]	; 0x45
    acfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad00:	40001000 	.word	0x40001000
    ad04:	20001450 	.word	0x20001450
    ad08:	4001f508 	.word	0x4001f508
    ad0c:	40001900 	.word	0x40001900
    ad10:	00023280 	.word	0x00023280
    ad14:	40001910 	.word	0x40001910

0000ad18 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    ad18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad1c:	4c5c      	ldr	r4, [pc, #368]	; (ae90 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x178>)
    ad1e:	4605      	mov	r5, r0
    ad20:	b086      	sub	sp, #24
    ad22:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    ad26:	468a      	mov	sl, r1
    ad28:	f010 0f01 	tst.w	r0, #1
    ad2c:	d016      	beq.n	ad5c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    ad2e:	f8df 8164 	ldr.w	r8, [pc, #356]	; ae94 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x17c>
    ad32:	f04f 0902 	mov.w	r9, #2
    ad36:	2d00      	cmp	r5, #0
    ad38:	f8d8 0000 	ldr.w	r0, [r8]
    ad3c:	9005      	str	r0, [sp, #20]
    ad3e:	bf04      	itt	eq
    ad40:	2004      	moveq	r0, #4
    ad42:	f88d 0014 	strbeq.w	r0, [sp, #20]
    ad46:	d00e      	beq.n	ad66 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    ad48:	2d01      	cmp	r5, #1
    ad4a:	bf08      	it	eq
    ad4c:	f88d 9014 	strbeq.w	r9, [sp, #20]
    ad50:	d009      	beq.n	ad66 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    ad52:	f640 21b9 	movw	r1, #2745	; 0xab9
    ad56:	203e      	movs	r0, #62	; 0x3e
    ad58:	f7f9 f930 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad5c:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    ad60:	203e      	movs	r0, #62	; 0x3e
    ad62:	f7f9 f92b 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad66:	a805      	add	r0, sp, #20
    ad68:	f7f8 fe98 	bl	3a9c <mpsl_cx_request>
    ad6c:	b120      	cbz	r0, ad78 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    ad6e:	f640 21bd 	movw	r1, #2749	; 0xabd
    ad72:	203e      	movs	r0, #62	; 0x3e
    ad74:	f7f9 f922 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad78:	4f47      	ldr	r7, [pc, #284]	; (ae98 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x180>)
    ad7a:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    ad7e:	f040 0001 	orr.w	r0, r0, #1
    ad82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    ad86:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    ad8a:	2601      	movs	r6, #1
    ad8c:	f040 0002 	orr.w	r0, r0, #2
    ad90:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    ad94:	b115      	cbz	r5, ad9c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>
    ad96:	2d01      	cmp	r5, #1
    ad98:	d006      	beq.n	ada8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>
    ad9a:	e00b      	b.n	adb4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x9c>
    ad9c:	4650      	mov	r0, sl
    ad9e:	f001 f9ef 	bl	c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    ada2:	7266      	strb	r6, [r4, #9]
    ada4:	603e      	str	r6, [r7, #0]
    ada6:	e005      	b.n	adb4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x9c>
    ada8:	4650      	mov	r0, sl
    adaa:	f001 f965 	bl	c078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    adae:	f884 9009 	strb.w	r9, [r4, #9]
    adb2:	607e      	str	r6, [r7, #4]
    adb4:	4839      	ldr	r0, [pc, #228]	; (ae9c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x184>)
    adb6:	64c6      	str	r6, [r0, #76]	; 0x4c
    adb8:	4839      	ldr	r0, [pc, #228]	; (aea0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x188>)
    adba:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    adbe:	8ba1      	ldrh	r1, [r4, #28]
    adc0:	2996      	cmp	r1, #150	; 0x96
    adc2:	d32e      	bcc.n	ae22 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    adc4:	4937      	ldr	r1, [pc, #220]	; (aea4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    adc6:	b135      	cbz	r5, add6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xbe>
    adc8:	2d01      	cmp	r5, #1
    adca:	d017      	beq.n	adfc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xe4>
    adcc:	f240 714c 	movw	r1, #1868	; 0x74c
    add0:	203e      	movs	r0, #62	; 0x3e
    add2:	f7f9 f8f3 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    add6:	f100 0228 	add.w	r2, r0, #40	; 0x28
    adda:	e9c1 0202 	strd	r0, r2, [r1, #8]
    adde:	4932      	ldr	r1, [pc, #200]	; (aea8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x190>)
    ade0:	4830      	ldr	r0, [pc, #192]	; (aea4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    ade2:	f7f8 ff4d 	bl	3c80 <mpsl_fem_pa_configuration_set>
    ade6:	2800      	cmp	r0, #0
    ade8:	bf18      	it	ne
    adea:	f1b0 3fff 	cmpne.w	r0, #4294967295
    adee:	d018      	beq.n	ae22 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    adf0:	f240 713b 	movw	r1, #1851	; 0x73b
    adf4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    adf8:	f7f9 f8e0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adfc:	f100 0229 	add.w	r2, r0, #41	; 0x29
    ae00:	e9c1 0202 	strd	r0, r2, [r1, #8]
    ae04:	4928      	ldr	r1, [pc, #160]	; (aea8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x190>)
    ae06:	4827      	ldr	r0, [pc, #156]	; (aea4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    ae08:	f7f8 ff28 	bl	3c5c <mpsl_fem_lna_configuration_set>
    ae0c:	2800      	cmp	r0, #0
    ae0e:	bf18      	it	ne
    ae10:	f1b0 3fff 	cmpne.w	r0, #4294967295
    ae14:	d005      	beq.n	ae22 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    ae16:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    ae1a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ae1e:	f7f9 f8cd 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae22:	f108 008c 	add.w	r0, r8, #140	; 0x8c
    ae26:	2d01      	cmp	r5, #1
    ae28:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    ae2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    ae2e:	f8d8 009c 	ldr.w	r0, [r8, #156]	; 0x9c
    ae32:	9004      	str	r0, [sp, #16]
    ae34:	bf14      	ite	ne
    ae36:	2001      	movne	r0, #1
    ae38:	2000      	moveq	r0, #0
    ae3a:	f88d 0001 	strb.w	r0, [sp, #1]
    ae3e:	4668      	mov	r0, sp
    ae40:	f7f8 feb6 	bl	3bb0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    ae44:	a805      	add	r0, sp, #20
    ae46:	f7f8 fe17 	bl	3a78 <mpsl_cx_granted_ops_get>
    ae4a:	b120      	cbz	r0, ae56 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x13e>
    ae4c:	f640 21cf 	movw	r1, #2767	; 0xacf
    ae50:	203e      	movs	r0, #62	; 0x3e
    ae52:	f7f9 f8b3 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae56:	7a60      	ldrb	r0, [r4, #9]
    ae58:	2801      	cmp	r0, #1
    ae5a:	d007      	beq.n	ae6c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x154>
    ae5c:	2802      	cmp	r0, #2
    ae5e:	bf04      	itt	eq
    ae60:	f89d 0014 	ldrbeq.w	r0, [sp, #20]
    ae64:	f010 0f02 	tsteq.w	r0, #2
    ae68:	d010      	beq.n	ae8c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x174>
    ae6a:	e004      	b.n	ae76 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x15e>
    ae6c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ae70:	f010 0f04 	tst.w	r0, #4
    ae74:	d00a      	beq.n	ae8c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x174>
    ae76:	f04f 0000 	mov.w	r0, #0
    ae7a:	bf00      	nop
    ae7c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    ae80:	2800      	cmp	r0, #0
    ae82:	bf18      	it	ne
    ae84:	613e      	strne	r6, [r7, #16]
    ae86:	b006      	add	sp, #24
    ae88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ae8c:	2001      	movs	r0, #1
    ae8e:	e7f5      	b.n	ae7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x164>
    ae90:	20001450 	.word	0x20001450
    ae94:	0000c24c 	.word	0x0000c24c
    ae98:	40001000 	.word	0x40001000
    ae9c:	40008000 	.word	0x40008000
    aea0:	4000800c 	.word	0x4000800c
    aea4:	20000448 	.word	0x20000448
    aea8:	0000c29c 	.word	0x0000c29c

0000aeac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    aeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aeb0:	4c9b      	ldr	r4, [pc, #620]	; (b120 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x274>)
    aeb2:	0005      	movs	r5, r0
    aeb4:	f8df 926c 	ldr.w	r9, [pc, #620]	; b124 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x278>
    aeb8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    aebc:	b089      	sub	sp, #36	; 0x24
    aebe:	f040 0002 	orr.w	r0, r0, #2
    aec2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    aec6:	f8d9 0000 	ldr.w	r0, [r9]
    aeca:	460f      	mov	r7, r1
    aecc:	f04f 0a02 	mov.w	sl, #2
    aed0:	9000      	str	r0, [sp, #0]
    aed2:	bf04      	itt	eq
    aed4:	2004      	moveq	r0, #4
    aed6:	f88d 0000 	strbeq.w	r0, [sp]
    aeda:	d009      	beq.n	aef0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    aedc:	2d01      	cmp	r5, #1
    aede:	bf08      	it	eq
    aee0:	f88d a000 	strbeq.w	sl, [sp]
    aee4:	d004      	beq.n	aef0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    aee6:	f640 21b9 	movw	r1, #2745	; 0xab9
    aeea:	203e      	movs	r0, #62	; 0x3e
    aeec:	f7f9 f866 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aef0:	4668      	mov	r0, sp
    aef2:	f7f8 fdd3 	bl	3a9c <mpsl_cx_request>
    aef6:	b120      	cbz	r0, af02 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    aef8:	f640 21bd 	movw	r1, #2749	; 0xabd
    aefc:	203e      	movs	r0, #62	; 0x3e
    aefe:	f7f9 f85d 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af02:	f8df b224 	ldr.w	fp, [pc, #548]	; b128 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x27c>
    af06:	4e89      	ldr	r6, [pc, #548]	; (b12c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x280>)
    af08:	f04f 0800 	mov.w	r8, #0
    af0c:	b115      	cbz	r5, af14 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    af0e:	2d01      	cmp	r5, #1
    af10:	d020      	beq.n	af54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa8>
    af12:	e037      	b.n	af84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    af14:	4638      	mov	r0, r7
    af16:	f001 f933 	bl	c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    af1a:	2001      	movs	r0, #1
    af1c:	7260      	strb	r0, [r4, #9]
    af1e:	79e0      	ldrb	r0, [r4, #7]
    af20:	2801      	cmp	r0, #1
    af22:	d105      	bne.n	af30 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    af24:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    af28:	f040 0008 	orr.w	r0, r0, #8
    af2c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    af30:	6b20      	ldr	r0, [r4, #48]	; 0x30
    af32:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    af36:	6320      	str	r0, [r4, #48]	; 0x30
    af38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    af3c:	f8cb 0000 	str.w	r0, [fp]
    af40:	487b      	ldr	r0, [pc, #492]	; (b130 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x284>)
    af42:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
    af46:	f500 71fa 	add.w	r1, r0, #500	; 0x1f4
    af4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    af4e:	fbb1 f8f0 	udiv	r8, r1, r0
    af52:	e017      	b.n	af84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    af54:	4638      	mov	r0, r7
    af56:	f001 f88f 	bl	c078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    af5a:	f884 a009 	strb.w	sl, [r4, #9]
    af5e:	79e0      	ldrb	r0, [r4, #7]
    af60:	2801      	cmp	r0, #1
    af62:	d105      	bne.n	af70 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>
    af64:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    af68:	f040 0004 	orr.w	r0, r0, #4
    af6c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    af70:	6b20      	ldr	r0, [r4, #48]	; 0x30
    af72:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    af76:	6320      	str	r0, [r4, #48]	; 0x30
    af78:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    af7c:	f8cb 0000 	str.w	r0, [fp]
    af80:	f04f 0829 	mov.w	r8, #41	; 0x29
    af84:	79e0      	ldrb	r0, [r4, #7]
    af86:	2800      	cmp	r0, #0
    af88:	bf04      	itt	eq
    af8a:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    af8e:	f040 0002 	orreq.w	r0, r0, #2
    af92:	d006      	beq.n	afa2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xf6>
    af94:	2801      	cmp	r0, #1
    af96:	bf04      	itt	eq
    af98:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    af9c:	f040 0004 	orreq.w	r0, r0, #4
    afa0:	d101      	bne.n	afa6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xfa>
    afa2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    afa6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    afaa:	f8df a188 	ldr.w	sl, [pc, #392]	; b134 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x288>
    afae:	f010 0f01 	tst.w	r0, #1
    afb2:	d029      	beq.n	b008 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    afb4:	f010 0f02 	tst.w	r0, #2
    afb8:	d016      	beq.n	afe8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13c>
    afba:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    afbe:	f040 0001 	orr.w	r0, r0, #1
    afc2:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    afc6:	f8d6 0550 	ldr.w	r0, [r6, #1360]	; 0x550
    afca:	b2c0      	uxtb	r0, r0
    afcc:	280b      	cmp	r0, #11
    afce:	bf18      	it	ne
    afd0:	280a      	cmpne	r0, #10
    afd2:	d003      	beq.n	afdc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x130>
    afd4:	2803      	cmp	r0, #3
    afd6:	bf18      	it	ne
    afd8:	2802      	cmpne	r0, #2
    afda:	d115      	bne.n	b008 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    afdc:	f240 6117 	movw	r1, #1559	; 0x617
    afe0:	f04f 003e 	mov.w	r0, #62	; 0x3e
    afe4:	f7f8 ffea 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afe8:	f010 0f04 	tst.w	r0, #4
    afec:	d00c      	beq.n	b008 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    afee:	4953      	ldr	r1, [pc, #332]	; (b13c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x290>)
    aff0:	4851      	ldr	r0, [pc, #324]	; (b138 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28c>)
    aff2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    aff6:	f8da 0140 	ldr.w	r0, [sl, #320]	; 0x140
    affa:	b128      	cbz	r0, b008 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    affc:	f240 611f 	movw	r1, #1567	; 0x61f
    b000:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b004:	f7f8 ffda 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b008:	f001 fc2a 	bl	c860 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    b00c:	b128      	cbz	r0, b01a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    b00e:	f7ff fddb 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b012:	b009      	add	sp, #36	; 0x24
    b014:	2000      	movs	r0, #0
    b016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b01a:	2d01      	cmp	r5, #1
    b01c:	bf08      	it	eq
    b01e:	f649 71ba 	movweq	r1, #40890	; 0x9fba
    b022:	d004      	beq.n	b02e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x182>
    b024:	4842      	ldr	r0, [pc, #264]	; (b130 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x284>)
    b026:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
    b02a:	f500 7116 	add.w	r1, r0, #600	; 0x258
    b02e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b032:	fbb1 f7f0 	udiv	r7, r1, r0
    b036:	f001 fc1c 	bl	c872 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>
    b03a:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
    b03e:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b042:	f109 02a0 	add.w	r2, r9, #160	; 0xa0
    b046:	f10d 0b08 	add.w	fp, sp, #8
    b04a:	e892 140c 	ldmia.w	r2, {r2, r3, sl, ip}
    b04e:	e88b 140c 	stmia.w	fp, {r2, r3, sl, ip}
    b052:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
    b056:	9206      	str	r2, [sp, #24]
    b058:	2d01      	cmp	r5, #1
    b05a:	bf14      	ite	ne
    b05c:	2201      	movne	r2, #1
    b05e:	2200      	moveq	r2, #0
    b060:	f88d 2009 	strb.w	r2, [sp, #9]
    b064:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b068:	9706      	str	r7, [sp, #24]
    b06a:	a802      	add	r0, sp, #8
    b06c:	f7f8 fda0 	bl	3bb0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    b070:	8ba0      	ldrh	r0, [r4, #28]
    b072:	2100      	movs	r1, #0
    b074:	2896      	cmp	r0, #150	; 0x96
    b076:	d32c      	bcc.n	b0d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    b078:	4831      	ldr	r0, [pc, #196]	; (b140 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    b07a:	b135      	cbz	r5, b08a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1de>
    b07c:	2d01      	cmp	r5, #1
    b07e:	d016      	beq.n	b0ae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
    b080:	f240 714c 	movw	r1, #1868	; 0x74c
    b084:	203e      	movs	r0, #62	; 0x3e
    b086:	f7f8 ff99 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b08a:	2228      	movs	r2, #40	; 0x28
    b08c:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b090:	492c      	ldr	r1, [pc, #176]	; (b144 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>)
    b092:	482b      	ldr	r0, [pc, #172]	; (b140 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    b094:	f7f8 fdf4 	bl	3c80 <mpsl_fem_pa_configuration_set>
    b098:	2800      	cmp	r0, #0
    b09a:	bf18      	it	ne
    b09c:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b0a0:	d017      	beq.n	b0d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    b0a2:	f240 713b 	movw	r1, #1851	; 0x73b
    b0a6:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b0aa:	f7f8 ff87 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0ae:	2229      	movs	r2, #41	; 0x29
    b0b0:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b0b4:	4923      	ldr	r1, [pc, #140]	; (b144 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>)
    b0b6:	4822      	ldr	r0, [pc, #136]	; (b140 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    b0b8:	f7f8 fdd0 	bl	3c5c <mpsl_fem_lna_configuration_set>
    b0bc:	2800      	cmp	r0, #0
    b0be:	bf18      	it	ne
    b0c0:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b0c4:	d005      	beq.n	b0d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    b0c6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    b0ca:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b0ce:	f7f8 ff75 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0d2:	a801      	add	r0, sp, #4
    b0d4:	f7f8 fcd0 	bl	3a78 <mpsl_cx_granted_ops_get>
    b0d8:	b120      	cbz	r0, b0e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x238>
    b0da:	f640 21cf 	movw	r1, #2767	; 0xacf
    b0de:	203e      	movs	r0, #62	; 0x3e
    b0e0:	f7f8 ff6c 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0e4:	7a60      	ldrb	r0, [r4, #9]
    b0e6:	2801      	cmp	r0, #1
    b0e8:	d007      	beq.n	b0fa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x24e>
    b0ea:	2802      	cmp	r0, #2
    b0ec:	bf04      	itt	eq
    b0ee:	f89d 0004 	ldrbeq.w	r0, [sp, #4]
    b0f2:	f010 0f02 	tsteq.w	r0, #2
    b0f6:	d011      	beq.n	b11c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x270>
    b0f8:	e004      	b.n	b104 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x258>
    b0fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b0fe:	f010 0f04 	tst.w	r0, #4
    b102:	d00b      	beq.n	b11c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x270>
    b104:	f04f 0000 	mov.w	r0, #0
    b108:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    b10c:	2800      	cmp	r0, #0
    b10e:	bf1c      	itt	ne
    b110:	2001      	movne	r0, #1
    b112:	6130      	strne	r0, [r6, #16]
    b114:	4640      	mov	r0, r8
    b116:	b009      	add	sp, #36	; 0x24
    b118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b11c:	2001      	movs	r0, #1
    b11e:	e7f3      	b.n	b108 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    b120:	20001450 	.word	0x20001450
    b124:	0000c24c 	.word	0x0000c24c
    b128:	4001f504 	.word	0x4001f504
    b12c:	40001000 	.word	0x40001000
    b130:	0000c262 	.word	0x0000c262
    b134:	40008000 	.word	0x40008000
    b138:	40001008 	.word	0x40001008
    b13c:	4001f098 	.word	0x4001f098
    b140:	20000448 	.word	0x20000448
    b144:	0000c29c 	.word	0x0000c29c

0000b148 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b148:	b510      	push	{r4, lr}
    b14a:	4604      	mov	r4, r0
    b14c:	4807      	ldr	r0, [pc, #28]	; (b16c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x24>)
    b14e:	f7f8 fc99 	bl	3a84 <mpsl_cx_register_callback>
    b152:	b120      	cbz	r0, b15e <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x16>
    b154:	f640 1107 	movw	r1, #2311	; 0x907
    b158:	203e      	movs	r0, #62	; 0x3e
    b15a:	f7f8 ff2f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b15e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    b162:	4803      	ldr	r0, [pc, #12]	; (b170 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x28>)
    b164:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    b168:	bd10      	pop	{r4, pc}
    b16a:	0000      	.short	0x0000
    b16c:	0000c049 	.word	0x0000c049
    b170:	20001440 	.word	0x20001440

0000b174 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b174:	4916      	ldr	r1, [pc, #88]	; (b1d0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    b176:	b510      	push	{r4, lr}
    b178:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    b17a:	4282      	cmp	r2, r0
    b17c:	d304      	bcc.n	b188 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    b17e:	f640 1117 	movw	r1, #2327	; 0x917
    b182:	203e      	movs	r0, #62	; 0x3e
    b184:	f7f8 ff1a 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b188:	2201      	movs	r2, #1
    b18a:	f8df c048 	ldr.w	ip, [pc, #72]	; b1d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>
    b18e:	730a      	strb	r2, [r1, #12]
    b190:	6108      	str	r0, [r1, #16]
    b192:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    b196:	f10c 0304 	add.w	r3, ip, #4
    b19a:	f8d3 4540 	ldr.w	r4, [r3, #1344]	; 0x540
    b19e:	1d64      	adds	r4, r4, #5
    b1a0:	4284      	cmp	r4, r0
    b1a2:	d306      	bcc.n	b1b2 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3e>
    b1a4:	480c      	ldr	r0, [pc, #48]	; (b1d8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    b1a6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b1aa:	2900      	cmp	r1, #0
    b1ac:	bf08      	it	eq
    b1ae:	6102      	streq	r2, [r0, #16]
    b1b0:	bd10      	pop	{r4, pc}
    b1b2:	2200      	movs	r2, #0
    b1b4:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    b1b8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b1bc:	6b08      	ldr	r0, [r1, #48]	; 0x30
    b1be:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    b1c2:	6308      	str	r0, [r1, #48]	; 0x30
    b1c4:	4905      	ldr	r1, [pc, #20]	; (b1dc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x68>)
    b1c6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b1ca:	6008      	str	r0, [r1, #0]
    b1cc:	bd10      	pop	{r4, pc}
    b1ce:	0000      	.short	0x0000
    b1d0:	20001450 	.word	0x20001450
    b1d4:	40008000 	.word	0x40008000
    b1d8:	40001000 	.word	0x40001000
    b1dc:	4001f504 	.word	0x4001f504

0000b1e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b1e0:	b510      	push	{r4, lr}
    b1e2:	4c0f      	ldr	r4, [pc, #60]	; (b220 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    b1e4:	4603      	mov	r3, r0
    b1e6:	2002      	movs	r0, #2
    b1e8:	7320      	strb	r0, [r4, #12]
    b1ea:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
    b1ee:	8ba0      	ldrh	r0, [r4, #28]
    b1f0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    b1f4:	7e22      	ldrb	r2, [r4, #24]
    b1f6:	f1bc 0f01 	cmp.w	ip, #1
    b1fa:	d00d      	beq.n	b218 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    b1fc:	f001 f8e4 	bl	c3c8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b200:	6120      	str	r0, [r4, #16]
    b202:	4808      	ldr	r0, [pc, #32]	; (b224 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b204:	2100      	movs	r1, #0
    b206:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b20a:	6921      	ldr	r1, [r4, #16]
    b20c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b20e:	4408      	add	r0, r1
    b210:	4905      	ldr	r1, [pc, #20]	; (b228 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b212:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b216:	bd10      	pop	{r4, pc}
    b218:	f001 f8f4 	bl	c404 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b21c:	e7f0      	b.n	b200 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x20>
    b21e:	0000      	.short	0x0000
    b220:	20001450 	.word	0x20001450
    b224:	40008000 	.word	0x40008000
    b228:	40008004 	.word	0x40008004

0000b22c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b230:	2248      	movs	r2, #72	; 0x48
    b232:	2100      	movs	r1, #0
    b234:	481d      	ldr	r0, [pc, #116]	; (b2ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
    b236:	f001 fcf4 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b23a:	481c      	ldr	r0, [pc, #112]	; (b2ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
    b23c:	2400      	movs	r4, #0
    b23e:	21ff      	movs	r1, #255	; 0xff
    b240:	71c4      	strb	r4, [r0, #7]
    b242:	7204      	strb	r4, [r0, #8]
    b244:	7244      	strb	r4, [r0, #9]
    b246:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
    b24a:	215f      	movs	r1, #95	; 0x5f
    b24c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    b250:	f001 fc02 	bl	ca58 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b254:	4f16      	ldr	r7, [pc, #88]	; (b2b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
    b256:	4d17      	ldr	r5, [pc, #92]	; (b2b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x88>)
    b258:	4e17      	ldr	r6, [pc, #92]	; (b2b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x8c>)
    b25a:	b928      	cbnz	r0, b268 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
    b25c:	f001 fc13 	bl	ca86 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b260:	b910      	cbnz	r0, b268 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
    b262:	f001 fc1a 	bl	ca9a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b266:	b140      	cbz	r0, b27a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4e>
    b268:	2224      	movs	r2, #36	; 0x24
    b26a:	21ff      	movs	r1, #255	; 0xff
    b26c:	4638      	mov	r0, r7
    b26e:	f001 fcd8 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b272:	602c      	str	r4, [r5, #0]
    b274:	6034      	str	r4, [r6, #0]
    b276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b27a:	f001 fc4e 	bl	cb1a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b27e:	b910      	cbnz	r0, b286 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5a>
    b280:	f001 fc41 	bl	cb06 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b284:	b140      	cbz	r0, b298 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6c>
    b286:	2240      	movs	r2, #64	; 0x40
    b288:	21ff      	movs	r1, #255	; 0xff
    b28a:	4638      	mov	r0, r7
    b28c:	f001 fcc9 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b290:	602c      	str	r4, [r5, #0]
    b292:	6034      	str	r4, [r6, #0]
    b294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b298:	2238      	movs	r2, #56	; 0x38
    b29a:	21ff      	movs	r1, #255	; 0xff
    b29c:	4638      	mov	r0, r7
    b29e:	f001 fcc0 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b2a2:	602c      	str	r4, [r5, #0]
    b2a4:	6034      	str	r4, [r6, #0]
    b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b2aa:	0000      	.short	0x0000
    b2ac:	20001450 	.word	0x20001450
    b2b0:	40000e00 	.word	0x40000e00
    b2b4:	40000e08 	.word	0x40000e08
    b2b8:	40000e10 	.word	0x40000e10

0000b2bc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b2bc:	4801      	ldr	r0, [pc, #4]	; (b2c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b2be:	6a40      	ldr	r0, [r0, #36]	; 0x24
    b2c0:	4770      	bx	lr
    b2c2:	0000      	.short	0x0000
    b2c4:	20001450 	.word	0x20001450

0000b2c8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b2c8:	4801      	ldr	r0, [pc, #4]	; (b2d0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    b2ca:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    b2ce:	4770      	bx	lr
    b2d0:	20001450 	.word	0x20001450

0000b2d4 <sym_PA6VKMMVXYRG4QPOV5XBZ3GQNGOJSB5VXHVKAFQ>:
    b2d4:	490c      	ldr	r1, [pc, #48]	; (b308 <sym_PA6VKMMVXYRG4QPOV5XBZ3GQNGOJSB5VXHVKAFQ+0x34>)
    b2d6:	4a0d      	ldr	r2, [pc, #52]	; (b30c <sym_PA6VKMMVXYRG4QPOV5XBZ3GQNGOJSB5VXHVKAFQ+0x38>)
    b2d8:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    b2dc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    b2de:	6a09      	ldr	r1, [r1, #32]
    b2e0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    b2e4:	1a59      	subs	r1, r3, r1
    b2e6:	440a      	add	r2, r1
    b2e8:	4909      	ldr	r1, [pc, #36]	; (b310 <sym_PA6VKMMVXYRG4QPOV5XBZ3GQNGOJSB5VXHVKAFQ+0x3c>)
    b2ea:	4b0a      	ldr	r3, [pc, #40]	; (b314 <sym_PA6VKMMVXYRG4QPOV5XBZ3GQNGOJSB5VXHVKAFQ+0x40>)
    b2ec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    b2f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b2f4:	1a08      	subs	r0, r1, r0
    b2f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b2fa:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    b2fe:	fbb0 f0f1 	udiv	r0, r0, r1
    b302:	4410      	add	r0, r2
    b304:	4770      	bx	lr
    b306:	0000      	.short	0x0000
    b308:	20001450 	.word	0x20001450
    b30c:	0000c328 	.word	0x0000c328
    b310:	0000c2b4 	.word	0x0000c2b4
    b314:	0000c34c 	.word	0x0000c34c

0000b318 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b31c:	4e29      	ldr	r6, [pc, #164]	; (b3c4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xac>)
    b31e:	4c28      	ldr	r4, [pc, #160]	; (b3c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xa8>)
    b320:	2000      	movs	r0, #0
    b322:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b326:	1d27      	adds	r7, r4, #4
    b328:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    b32c:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
    b330:	f106 0804 	add.w	r8, r6, #4
    b334:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    b338:	f7ff fc46 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b33c:	4d22      	ldr	r5, [pc, #136]	; (b3c8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb0>)
    b33e:	8ba8      	ldrh	r0, [r5, #28]
    b340:	2896      	cmp	r0, #150	; 0x96
    b342:	d30c      	bcc.n	b35e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
    b344:	f7f8 fc7e 	bl	3c44 <mpsl_fem_disable>
    b348:	2800      	cmp	r0, #0
    b34a:	bf18      	it	ne
    b34c:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b350:	d005      	beq.n	b35e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
    b352:	f240 5146 	movw	r1, #1350	; 0x546
    b356:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b35a:	f7f8 fe2f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b35e:	f7f8 fb97 	bl	3a90 <mpsl_cx_release>
    b362:	b120      	cbz	r0, b36e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x56>
    b364:	f240 515a 	movw	r1, #1370	; 0x55a
    b368:	203e      	movs	r0, #62	; 0x3e
    b36a:	f7f8 fe27 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b36e:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b370:	4916      	ldr	r1, [pc, #88]	; (b3cc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb4>)
    b372:	f040 6044 	orr.w	r0, r0, #205520896	; 0xc400000
    b376:	6008      	str	r0, [r1, #0]
    b378:	2000      	movs	r0, #0
    b37a:	6328      	str	r0, [r5, #48]	; 0x30
    b37c:	7328      	strb	r0, [r5, #12]
    b37e:	6268      	str	r0, [r5, #36]	; 0x24
    b380:	6228      	str	r0, [r5, #32]
    b382:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b386:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    b38a:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
    b38e:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    b392:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    b396:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    b39a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    b39e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    b3a2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b3a6:	2002      	movs	r0, #2
    b3a8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    b3ac:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    b3b0:	f3bf 8f4f 	dsb	sy
    b3b4:	f3bf 8f6f 	isb	sy
    b3b8:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3c0:	40008000 	.word	0x40008000
    b3c4:	40008008 	.word	0x40008008
    b3c8:	20001450 	.word	0x20001450
    b3cc:	4001f508 	.word	0x4001f508

0000b3d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b3d4:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    b3d8:	2701      	movs	r7, #1
    b3da:	f04f 0902 	mov.w	r9, #2
    b3de:	2500      	movs	r5, #0
    b3e0:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    b3e4:	f3bf 8f4f 	dsb	sy
    b3e8:	f3bf 8f6f 	isb	sy
    b3ec:	4c39      	ldr	r4, [pc, #228]	; (b4d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b3ee:	f8c4 5ffc 	str.w	r5, [r4, #4092]	; 0xffc
    b3f2:	f8c4 7ffc 	str.w	r7, [r4, #4092]	; 0xffc
    b3f6:	f001 fb66 	bl	cac6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b3fa:	4e37      	ldr	r6, [pc, #220]	; (b4d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b3fc:	b118      	cbz	r0, b406 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    b3fe:	6830      	ldr	r0, [r6, #0]
    b400:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b404:	6030      	str	r0, [r6, #0]
    b406:	f001 fb52 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b40a:	b138      	cbz	r0, b41c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    b40c:	6830      	ldr	r0, [r6, #0]
    b40e:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b412:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    b416:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    b41a:	6030      	str	r0, [r6, #0]
    b41c:	f001 fb63 	bl	cae6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b420:	b130      	cbz	r0, b430 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x60>
    b422:	482e      	ldr	r0, [pc, #184]	; (b4dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b424:	6801      	ldr	r1, [r0, #0]
    b426:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b42a:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b42e:	6001      	str	r1, [r0, #0]
    b430:	492c      	ldr	r1, [pc, #176]	; (b4e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    b432:	482b      	ldr	r0, [pc, #172]	; (b4e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    b434:	6008      	str	r0, [r1, #0]
    b436:	f7f8 fc3b 	bl	3cb0 <mpsl_fem_device_config_254_apply_get>
    b43a:	b140      	cbz	r0, b44e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    b43c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b440:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b444:	f1b0 3fff 	cmp.w	r0, #4294967295
    b448:	bf1c      	itt	ne
    b44a:	4927      	ldrne	r1, [pc, #156]	; (b4e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    b44c:	6008      	strne	r0, [r1, #0]
    b44e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b452:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b454:	f1b0 3fff 	cmp.w	r0, #4294967295
    b458:	d004      	beq.n	b464 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x94>
    b45a:	4924      	ldr	r1, [pc, #144]	; (b4ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    b45c:	680a      	ldr	r2, [r1, #0]
    b45e:	f360 4217 	bfi	r2, r0, #16, #8
    b462:	600a      	str	r2, [r1, #0]
    b464:	f240 1103 	movw	r1, #259	; 0x103
    b468:	f240 605b 	movw	r0, #1627	; 0x65b
    b46c:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    b470:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    b474:	481e      	ldr	r0, [pc, #120]	; (b4f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    b476:	6007      	str	r7, [r0, #0]
    b478:	481e      	ldr	r0, [pc, #120]	; (b4f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    b47a:	4a1f      	ldr	r2, [pc, #124]	; (b4f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
    b47c:	2103      	movs	r1, #3
    b47e:	7607      	strb	r7, [r0, #24]
    b480:	6011      	str	r1, [r2, #0]
    b482:	f240 2101 	movw	r1, #513	; 0x201
    b486:	f8c4 1650 	str.w	r1, [r4, #1616]	; 0x650
    b48a:	2102      	movs	r1, #2
    b48c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b490:	4a1a      	ldr	r2, [pc, #104]	; (b4fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
    b492:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b496:	6011      	str	r1, [r2, #0]
    b498:	f1a0 0110 	sub.w	r1, r0, #16
    b49c:	2296      	movs	r2, #150	; 0x96
    b49e:	870d      	strh	r5, [r1, #56]	; 0x38
    b4a0:	4917      	ldr	r1, [pc, #92]	; (b500 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x130>)
    b4a2:	6245      	str	r5, [r0, #36]	; 0x24
    b4a4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    b4a8:	700d      	strb	r5, [r1, #0]
    b4aa:	8382      	strh	r2, [r0, #28]
    b4ac:	4a15      	ldr	r2, [pc, #84]	; (b504 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x134>)
    b4ae:	6812      	ldr	r2, [r2, #0]
    b4b0:	6142      	str	r2, [r0, #20]
    b4b2:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
    b4b6:	f8c8 9280 	str.w	r9, [r8, #640]	; 0x280
    b4ba:	2010      	movs	r0, #16
    b4bc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b4c0:	f8c8 9100 	str.w	r9, [r8, #256]	; 0x100
    b4c4:	6848      	ldr	r0, [r1, #4]
    b4c6:	2800      	cmp	r0, #0
    b4c8:	bf08      	it	eq
    b4ca:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4d2:	4700      	bx	r0
    b4d4:	40001000 	.word	0x40001000
    b4d8:	4000173c 	.word	0x4000173c
    b4dc:	40001740 	.word	0x40001740
    b4e0:	8900002c 	.word	0x8900002c
    b4e4:	40001778 	.word	0x40001778
    b4e8:	4000174c 	.word	0x4000174c
    b4ec:	4000158c 	.word	0x4000158c
    b4f0:	40001530 	.word	0x40001530
    b4f4:	20001450 	.word	0x20001450
    b4f8:	40001510 	.word	0x40001510
    b4fc:	4001f504 	.word	0x4001f504
    b500:	20000440 	.word	0x20000440
    b504:	40001900 	.word	0x40001900

0000b508 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b508:	4901      	ldr	r1, [pc, #4]	; (b510 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b50a:	7648      	strb	r0, [r1, #25]
    b50c:	4770      	bx	lr
    b50e:	0000      	.short	0x0000
    b510:	20001450 	.word	0x20001450

0000b514 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    b514:	4901      	ldr	r1, [pc, #4]	; (b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    b516:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b51a:	4770      	bx	lr
    b51c:	0000c328 	.word	0x0000c328

0000b520 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b520:	491e      	ldr	r1, [pc, #120]	; (b59c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    b522:	b510      	push	{r4, lr}
    b524:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    b528:	4a1d      	ldr	r2, [pc, #116]	; (b5a0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    b52a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b52e:	f040 0001 	orr.w	r0, r0, #1
    b532:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
    b536:	f010 0f01 	tst.w	r0, #1
    b53a:	bf08      	it	eq
    b53c:	bd10      	popeq	{r4, pc}
    b53e:	f010 0f02 	tst.w	r0, #2
    b542:	d016      	beq.n	b572 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x52>
    b544:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b548:	f040 0001 	orr.w	r0, r0, #1
    b54c:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b550:	f8d1 0550 	ldr.w	r0, [r1, #1360]	; 0x550
    b554:	b2c0      	uxtb	r0, r0
    b556:	280b      	cmp	r0, #11
    b558:	bf18      	it	ne
    b55a:	280a      	cmpne	r0, #10
    b55c:	d003      	beq.n	b566 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x46>
    b55e:	2803      	cmp	r0, #3
    b560:	bf1c      	itt	ne
    b562:	2802      	cmpne	r0, #2
    b564:	bd10      	popne	{r4, pc}
    b566:	f240 6117 	movw	r1, #1559	; 0x617
    b56a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b56e:	f7f8 fd25 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b572:	f010 0f04 	tst.w	r0, #4
    b576:	bf08      	it	eq
    b578:	bd10      	popeq	{r4, pc}
    b57a:	480a      	ldr	r0, [pc, #40]	; (b5a4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    b57c:	490a      	ldr	r1, [pc, #40]	; (b5a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    b57e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b582:	480a      	ldr	r0, [pc, #40]	; (b5ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    b584:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b588:	2800      	cmp	r0, #0
    b58a:	bf08      	it	eq
    b58c:	bd10      	popeq	{r4, pc}
    b58e:	f240 611f 	movw	r1, #1567	; 0x61f
    b592:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b596:	f7f8 fd11 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b59a:	0000      	.short	0x0000
    b59c:	40001000 	.word	0x40001000
    b5a0:	20001450 	.word	0x20001450
    b5a4:	40001008 	.word	0x40001008
    b5a8:	4001f098 	.word	0x4001f098
    b5ac:	40008000 	.word	0x40008000

0000b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    b5b0:	4901      	ldr	r1, [pc, #4]	; (b5b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    b5b2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b5b6:	4770      	bx	lr
    b5b8:	0000c34c 	.word	0x0000c34c

0000b5bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5c0:	0006      	movs	r6, r0
    b5c2:	4895      	ldr	r0, [pc, #596]	; (b818 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x25c>)
    b5c4:	b089      	sub	sp, #36	; 0x24
    b5c6:	4690      	mov	r8, r2
    b5c8:	6800      	ldr	r0, [r0, #0]
    b5ca:	460d      	mov	r5, r1
    b5cc:	9000      	str	r0, [sp, #0]
    b5ce:	bf08      	it	eq
    b5d0:	2004      	moveq	r0, #4
    b5d2:	d008      	beq.n	b5e6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a>
    b5d4:	2e01      	cmp	r6, #1
    b5d6:	bf08      	it	eq
    b5d8:	2002      	moveq	r0, #2
    b5da:	d004      	beq.n	b5e6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a>
    b5dc:	f640 21b9 	movw	r1, #2745	; 0xab9
    b5e0:	203e      	movs	r0, #62	; 0x3e
    b5e2:	f7f8 fceb 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5e6:	f88d 0000 	strb.w	r0, [sp]
    b5ea:	4668      	mov	r0, sp
    b5ec:	f7f8 fa56 	bl	3a9c <mpsl_cx_request>
    b5f0:	b120      	cbz	r0, b5fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x40>
    b5f2:	f640 21bd 	movw	r1, #2749	; 0xabd
    b5f6:	203e      	movs	r0, #62	; 0x3e
    b5f8:	f7f8 fce0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5fc:	f8df 921c 	ldr.w	r9, [pc, #540]	; b81c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x260>
    b600:	4f87      	ldr	r7, [pc, #540]	; (b820 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>)
    b602:	4c88      	ldr	r4, [pc, #544]	; (b824 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x268>)
    b604:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    b608:	f04f 0a01 	mov.w	sl, #1
    b60c:	b136      	cbz	r6, b61c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x60>
    b60e:	2e01      	cmp	r6, #1
    b610:	d01a      	beq.n	b648 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b612:	f640 0114 	movw	r1, #2068	; 0x814
    b616:	203e      	movs	r0, #62	; 0x3e
    b618:	f7f8 fcd0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b61c:	4640      	mov	r0, r8
    b61e:	f000 fdaf 	bl	c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    b622:	4881      	ldr	r0, [pc, #516]	; (b828 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x26c>)
    b624:	f884 a009 	strb.w	sl, [r4, #9]
    b628:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
    b62c:	79e0      	ldrb	r0, [r4, #7]
    b62e:	2801      	cmp	r0, #1
    b630:	d004      	beq.n	b63c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x80>
    b632:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b636:	fbb1 f1fb 	udiv	r1, r1, fp
    b63a:	1a6d      	subs	r5, r5, r1
    b63c:	2800      	cmp	r0, #0
    b63e:	bf04      	itt	eq
    b640:	4638      	moveq	r0, r7
    b642:	f8c9 7514 	streq.w	r7, [r9, #1300]	; 0x514
    b646:	e011      	b.n	b66c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>
    b648:	4640      	mov	r0, r8
    b64a:	f000 fd15 	bl	c078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b64e:	2002      	movs	r0, #2
    b650:	7260      	strb	r0, [r4, #9]
    b652:	79e1      	ldrb	r1, [r4, #7]
    b654:	2901      	cmp	r1, #1
    b656:	d004      	beq.n	b662 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa6>
    b658:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    b65c:	fbb0 f0fb 	udiv	r0, r0, fp
    b660:	1a2d      	subs	r5, r5, r0
    b662:	4872      	ldr	r0, [pc, #456]	; (b82c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x270>)
    b664:	2900      	cmp	r1, #0
    b666:	bf08      	it	eq
    b668:	f8c9 0514 	streq.w	r0, [r9, #1300]	; 0x514
    b66c:	4970      	ldr	r1, [pc, #448]	; (b830 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x274>)
    b66e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b672:	4870      	ldr	r0, [pc, #448]	; (b834 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x278>)
    b674:	f8c9 0510 	str.w	r0, [r9, #1296]	; 0x510
    b678:	2010      	movs	r0, #16
    b67a:	f8c7 0304 	str.w	r0, [r7, #772]	; 0x304
    b67e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b680:	4a6d      	ldr	r2, [pc, #436]	; (b838 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27c>)
    b682:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b686:	6320      	str	r0, [r4, #48]	; 0x30
    b688:	0108      	lsls	r0, r1, #4
    b68a:	6010      	str	r0, [r2, #0]
    b68c:	79e0      	ldrb	r0, [r4, #7]
    b68e:	2800      	cmp	r0, #0
    b690:	bf04      	itt	eq
    b692:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    b696:	f040 0002 	orreq.w	r0, r0, #2
    b69a:	d006      	beq.n	b6aa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xee>
    b69c:	2801      	cmp	r0, #1
    b69e:	bf04      	itt	eq
    b6a0:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    b6a4:	f040 0004 	orreq.w	r0, r0, #4
    b6a8:	d101      	bne.n	b6ae <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf2>
    b6aa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b6ae:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b6b2:	f010 0f01 	tst.w	r0, #1
    b6b6:	d028      	beq.n	b70a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    b6b8:	f010 0f02 	tst.w	r0, #2
    b6bc:	d016      	beq.n	b6ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x130>
    b6be:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    b6c2:	f040 0001 	orr.w	r0, r0, #1
    b6c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    b6ca:	f8d7 0550 	ldr.w	r0, [r7, #1360]	; 0x550
    b6ce:	b2c0      	uxtb	r0, r0
    b6d0:	280b      	cmp	r0, #11
    b6d2:	bf18      	it	ne
    b6d4:	280a      	cmpne	r0, #10
    b6d6:	d003      	beq.n	b6e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x124>
    b6d8:	2803      	cmp	r0, #3
    b6da:	bf18      	it	ne
    b6dc:	2802      	cmpne	r0, #2
    b6de:	d114      	bne.n	b70a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    b6e0:	f240 6117 	movw	r1, #1559	; 0x617
    b6e4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b6e8:	f7f8 fc68 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6ec:	f010 0f04 	tst.w	r0, #4
    b6f0:	d00b      	beq.n	b70a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    b6f2:	4852      	ldr	r0, [pc, #328]	; (b83c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x280>)
    b6f4:	f8c9 0514 	str.w	r0, [r9, #1300]	; 0x514
    b6f8:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
    b6fc:	b128      	cbz	r0, b70a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    b6fe:	f240 611f 	movw	r1, #1567	; 0x61f
    b702:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b706:	f7f8 fc59 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b70a:	f8c1 a04c 	str.w	sl, [r1, #76]	; 0x4c
    b70e:	484c      	ldr	r0, [pc, #304]	; (b840 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x284>)
    b710:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b714:	42a8      	cmp	r0, r5
    b716:	d304      	bcc.n	b722 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x166>
    b718:	f640 012a 	movw	r1, #2090	; 0x82a
    b71c:	203e      	movs	r0, #62	; 0x3e
    b71e:	f7f8 fc4d 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b722:	2e01      	cmp	r6, #1
    b724:	bf0f      	iteee	eq
    b726:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    b72a:	483f      	ldrne	r0, [pc, #252]	; (b828 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x26c>)
    b72c:	f830 0018 	ldrhne.w	r0, [r0, r8, lsl #1]
    b730:	f500 7016 	addne.w	r0, r0, #600	; 0x258
    b734:	fbb0 f0fb 	udiv	r0, r0, fp
    b738:	4937      	ldr	r1, [pc, #220]	; (b818 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x25c>)
    b73a:	f10d 0904 	add.w	r9, sp, #4
    b73e:	f101 02b4 	add.w	r2, r1, #180	; 0xb4
    b742:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    b746:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    b74a:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
    b74e:	9105      	str	r1, [sp, #20]
    b750:	bf14      	ite	ne
    b752:	2101      	movne	r1, #1
    b754:	2100      	moveq	r1, #0
    b756:	f88d 1005 	strb.w	r1, [sp, #5]
    b75a:	e9cd 5004 	strd	r5, r0, [sp, #16]
    b75e:	a801      	add	r0, sp, #4
    b760:	f7f8 fa26 	bl	3bb0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    b764:	8ba0      	ldrh	r0, [r4, #28]
    b766:	2896      	cmp	r0, #150	; 0x96
    b768:	d32e      	bcc.n	b7c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    b76a:	4836      	ldr	r0, [pc, #216]	; (b844 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    b76c:	b136      	cbz	r6, b77c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1c0>
    b76e:	2e01      	cmp	r6, #1
    b770:	d017      	beq.n	b7a2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1e6>
    b772:	f240 714c 	movw	r1, #1868	; 0x74c
    b776:	203e      	movs	r0, #62	; 0x3e
    b778:	f7f8 fc20 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b77c:	f105 0128 	add.w	r1, r5, #40	; 0x28
    b780:	e9c0 5102 	strd	r5, r1, [r0, #8]
    b784:	4930      	ldr	r1, [pc, #192]	; (b848 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x28c>)
    b786:	482f      	ldr	r0, [pc, #188]	; (b844 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    b788:	f7f8 fa7a 	bl	3c80 <mpsl_fem_pa_configuration_set>
    b78c:	2800      	cmp	r0, #0
    b78e:	bf18      	it	ne
    b790:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b794:	d018      	beq.n	b7c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    b796:	f240 713b 	movw	r1, #1851	; 0x73b
    b79a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b79e:	f7f8 fc0d 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7a2:	f105 0129 	add.w	r1, r5, #41	; 0x29
    b7a6:	e9c0 5102 	strd	r5, r1, [r0, #8]
    b7aa:	4927      	ldr	r1, [pc, #156]	; (b848 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x28c>)
    b7ac:	4825      	ldr	r0, [pc, #148]	; (b844 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    b7ae:	f7f8 fa55 	bl	3c5c <mpsl_fem_lna_configuration_set>
    b7b2:	2800      	cmp	r0, #0
    b7b4:	bf18      	it	ne
    b7b6:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b7ba:	d005      	beq.n	b7c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    b7bc:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    b7c0:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b7c4:	f7f8 fbfa 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7c8:	4668      	mov	r0, sp
    b7ca:	f7f8 f955 	bl	3a78 <mpsl_cx_granted_ops_get>
    b7ce:	b120      	cbz	r0, b7da <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x21e>
    b7d0:	f640 21cf 	movw	r1, #2767	; 0xacf
    b7d4:	203e      	movs	r0, #62	; 0x3e
    b7d6:	f7f8 fbf1 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7da:	7a60      	ldrb	r0, [r4, #9]
    b7dc:	2801      	cmp	r0, #1
    b7de:	d007      	beq.n	b7f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x234>
    b7e0:	2802      	cmp	r0, #2
    b7e2:	bf04      	itt	eq
    b7e4:	f89d 0000 	ldrbeq.w	r0, [sp]
    b7e8:	f010 0f02 	tsteq.w	r0, #2
    b7ec:	d011      	beq.n	b812 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x256>
    b7ee:	e004      	b.n	b7fa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x23e>
    b7f0:	f89d 0000 	ldrb.w	r0, [sp]
    b7f4:	f010 0f04 	tst.w	r0, #4
    b7f8:	d00b      	beq.n	b812 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x256>
    b7fa:	f04f 0000 	mov.w	r0, #0
    b7fe:	bf00      	nop
    b800:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    b804:	2800      	cmp	r0, #0
    b806:	bf18      	it	ne
    b808:	f8c7 a010 	strne.w	sl, [r7, #16]
    b80c:	b009      	add	sp, #36	; 0x24
    b80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b812:	2001      	movs	r0, #1
    b814:	e7f4      	b.n	b800 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x244>
    b816:	0000      	.short	0x0000
    b818:	0000c24c 	.word	0x0000c24c
    b81c:	4001f098 	.word	0x4001f098
    b820:	40001000 	.word	0x40001000
    b824:	20001450 	.word	0x20001450
    b828:	0000c262 	.word	0x0000c262
    b82c:	40001004 	.word	0x40001004
    b830:	40008000 	.word	0x40008000
    b834:	40008140 	.word	0x40008140
    b838:	4001f504 	.word	0x4001f504
    b83c:	40001008 	.word	0x40001008
    b840:	4000800c 	.word	0x4000800c
    b844:	20000448 	.word	0x20000448
    b848:	0000c29c 	.word	0x0000c29c

0000b84c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b84c:	b530      	push	{r4, r5, lr}
    b84e:	4c31      	ldr	r4, [pc, #196]	; (b914 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc8>)
    b850:	b087      	sub	sp, #28
    b852:	000d      	movs	r5, r1
    b854:	71e0      	strb	r0, [r4, #7]
    b856:	72a2      	strb	r2, [r4, #10]
    b858:	bf0c      	ite	eq
    b85a:	2001      	moveq	r0, #1
    b85c:	2002      	movne	r0, #2
    b85e:	7220      	strb	r0, [r4, #8]
    b860:	2801      	cmp	r0, #1
    b862:	d006      	beq.n	b872 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x26>
    b864:	2802      	cmp	r0, #2
    b866:	d026      	beq.n	b8b6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
    b868:	f640 213d 	movw	r1, #2621	; 0xa3d
    b86c:	203e      	movs	r0, #62	; 0x3e
    b86e:	f7f8 fba5 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b872:	7a60      	ldrb	r0, [r4, #9]
    b874:	2802      	cmp	r0, #2
    b876:	d11e      	bne.n	b8b6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
    b878:	4610      	mov	r0, r2
    b87a:	f994 2019 	ldrsb.w	r2, [r4, #25]
    b87e:	7ea1      	ldrb	r1, [r4, #26]
    b880:	ab05      	add	r3, sp, #20
    b882:	f000 fe1f 	bl	c4c4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    b886:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    b88a:	f000 fddd 	bl	c448 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b88e:	f10d 0015 	add.w	r0, sp, #21
    b892:	f7f8 f9fb 	bl	3c8c <mpsl_fem_pa_gain_set>
    b896:	b120      	cbz	r0, b8a2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
    b898:	f240 51ee 	movw	r1, #1518	; 0x5ee
    b89c:	203e      	movs	r0, #62	; 0x3e
    b89e:	f7f8 fb8d 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8a2:	20ff      	movs	r0, #255	; 0xff
    b8a4:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    b8a8:	481b      	ldr	r0, [pc, #108]	; (b918 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xcc>)
    b8aa:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b8ae:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b8b2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b8b6:	7a62      	ldrb	r2, [r4, #9]
    b8b8:	7e20      	ldrb	r0, [r4, #24]
    b8ba:	2a02      	cmp	r2, #2
    b8bc:	8ba2      	ldrh	r2, [r4, #28]
    b8be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b8c2:	d01d      	beq.n	b900 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xb4>
    b8c4:	4b15      	ldr	r3, [pc, #84]	; (b91c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd0>)
    b8c6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    b8ca:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    b8ce:	fbb0 f0f1 	udiv	r0, r0, r1
    b8d2:	4410      	add	r0, r2
    b8d4:	4912      	ldr	r1, [pc, #72]	; (b920 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd4>)
    b8d6:	2d01      	cmp	r5, #1
    b8d8:	f101 02c8 	add.w	r2, r1, #200	; 0xc8
    b8dc:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    b8e0:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    b8e4:	f8d1 10d8 	ldr.w	r1, [r1, #216]	; 0xd8
    b8e8:	9104      	str	r1, [sp, #16]
    b8ea:	bf14      	ite	ne
    b8ec:	2101      	movne	r1, #1
    b8ee:	2100      	moveq	r1, #0
    b8f0:	f88d 1001 	strb.w	r1, [sp, #1]
    b8f4:	9001      	str	r0, [sp, #4]
    b8f6:	4668      	mov	r0, sp
    b8f8:	f7f8 f95a 	bl	3bb0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    b8fc:	b007      	add	sp, #28
    b8fe:	bd30      	pop	{r4, r5, pc}
    b900:	4b08      	ldr	r3, [pc, #32]	; (b924 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd8>)
    b902:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b906:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    b90a:	fbb0 f0f1 	udiv	r0, r0, r1
    b90e:	1a10      	subs	r0, r2, r0
    b910:	e7e0      	b.n	b8d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x88>
    b912:	0000      	.short	0x0000
    b914:	20001450 	.word	0x20001450
    b918:	40001000 	.word	0x40001000
    b91c:	0000c250 	.word	0x0000c250
    b920:	0000c24c 	.word	0x0000c24c
    b924:	0000c34c 	.word	0x0000c34c

0000b928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b928:	4903      	ldr	r1, [pc, #12]	; (b938 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>)
    b92a:	6809      	ldr	r1, [r1, #0]
    b92c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    b930:	4249      	negs	r1, r1
    b932:	7001      	strb	r1, [r0, #0]
    b934:	2001      	movs	r0, #1
    b936:	4770      	bx	lr
    b938:	40001548 	.word	0x40001548

0000b93c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b93c:	4903      	ldr	r1, [pc, #12]	; (b94c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b93e:	0e02      	lsrs	r2, r0, #24
    b940:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    b944:	0200      	lsls	r0, r0, #8
    b946:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    b94a:	4770      	bx	lr
    b94c:	40001000 	.word	0x40001000

0000b950 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b950:	6800      	ldr	r0, [r0, #0]
    b952:	4903      	ldr	r1, [pc, #12]	; (b960 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    b954:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b958:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b95c:	4770      	bx	lr
    b95e:	0000      	.short	0x0000
    b960:	40001000 	.word	0x40001000

0000b964 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    b964:	b510      	push	{r4, lr}
    b966:	2200      	movs	r2, #0
    b968:	2901      	cmp	r1, #1
    b96a:	d010      	beq.n	b98e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    b96c:	2902      	cmp	r1, #2
    b96e:	bf08      	it	eq
    b970:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    b974:	d00b      	beq.n	b98e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    b976:	2904      	cmp	r1, #4
    b978:	bf14      	ite	ne
    b97a:	2908      	cmpne	r1, #8
    b97c:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    b980:	d005      	beq.n	b98e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    b982:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    b986:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b98a:	f7f8 fb17 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b98e:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    b992:	4a0c      	ldr	r2, [pc, #48]	; (b9c4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x60>)
    b994:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b998:	6011      	str	r1, [r2, #0]
    b99a:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    b99e:	1d11      	adds	r1, r2, #4
    b9a0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    b9a4:	6008      	str	r0, [r1, #0]
    b9a6:	4808      	ldr	r0, [pc, #32]	; (b9c8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x64>)
    b9a8:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b9ac:	b2c0      	uxtb	r0, r0
    b9ae:	2803      	cmp	r0, #3
    b9b0:	bf1c      	itt	ne
    b9b2:	280b      	cmpne	r0, #11
    b9b4:	bd10      	popne	{r4, pc}
    b9b6:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    b9ba:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b9be:	f7f8 fafd 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9c2:	0000      	.short	0x0000
    b9c4:	40001514 	.word	0x40001514
    b9c8:	40001000 	.word	0x40001000

0000b9cc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b9cc:	4901      	ldr	r1, [pc, #4]	; (b9d4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b9ce:	7688      	strb	r0, [r1, #26]
    b9d0:	4770      	bx	lr
    b9d2:	0000      	.short	0x0000
    b9d4:	20001450 	.word	0x20001450

0000b9d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9dc:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; bdd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
    b9e0:	2701      	movs	r7, #1
    b9e2:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
    b9e6:	48fc      	ldr	r0, [pc, #1008]	; (bdd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    b9e8:	f8d0 b540 	ldr.w	fp, [r0, #1344]	; 0x540
    b9ec:	f000 ff36 	bl	c85c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    b9f0:	4cfa      	ldr	r4, [pc, #1000]	; (bddc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    b9f2:	f8df a3ec 	ldr.w	sl, [pc, #1004]	; bde0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    b9f6:	4dfb      	ldr	r5, [pc, #1004]	; (bde4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    b9f8:	e9c4 0b0f 	strd	r0, fp, [r4, #60]	; 0x3c
    b9fc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    ba00:	2600      	movs	r6, #0
    ba02:	b1d8      	cbz	r0, ba3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x64>
    ba04:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    ba08:	f110 0900 	adds.w	r9, r0, #0
    ba0c:	bf18      	it	ne
    ba0e:	f04f 0901 	movne.w	r9, #1
    ba12:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    ba16:	2800      	cmp	r0, #0
    ba18:	bf18      	it	ne
    ba1a:	2001      	movne	r0, #1
    ba1c:	ea50 0109 	orrs.w	r1, r0, r9
    ba20:	d015      	beq.n	ba4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    ba22:	2180      	movs	r1, #128	; 0x80
    ba24:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    ba28:	0309      	lsls	r1, r1, #12
    ba2a:	f8ca 1000 	str.w	r1, [sl]
    ba2e:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
    ba32:	f090 0f01 	teq	r0, #1
    ba36:	bf18      	it	ne
    ba38:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba3c:	8ba0      	ldrh	r0, [r4, #28]
    ba3e:	2896      	cmp	r0, #150	; 0x96
    ba40:	d37e      	bcc.n	bb40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    ba42:	7a60      	ldrb	r0, [r4, #9]
    ba44:	2801      	cmp	r0, #1
    ba46:	d07c      	beq.n	bb42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16a>
    ba48:	2802      	cmp	r0, #2
    ba4a:	d07b      	beq.n	bb44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>
    ba4c:	e0ba      	b.n	bbc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    ba4e:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
    ba52:	49e5      	ldr	r1, [pc, #916]	; (bde8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    ba54:	f8df b394 	ldr.w	fp, [pc, #916]	; bdec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>
    ba58:	b338      	cbz	r0, baaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd2>
    ba5a:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
    ba5e:	616f      	str	r7, [r5, #20]
    ba60:	20ff      	movs	r0, #255	; 0xff
    ba62:	9000      	str	r0, [sp, #0]
    ba64:	e002      	b.n	ba6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x94>
    ba66:	1e40      	subs	r0, r0, #1
    ba68:	9000      	str	r0, [sp, #0]
    ba6a:	d019      	beq.n	baa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
    ba6c:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    ba70:	2800      	cmp	r0, #0
    ba72:	9800      	ldr	r0, [sp, #0]
    ba74:	d0f7      	beq.n	ba66 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    ba76:	b198      	cbz	r0, baa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
    ba78:	6808      	ldr	r0, [r1, #0]
    ba7a:	f000 0b7f 	and.w	fp, r0, #127	; 0x7f
    ba7e:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    ba82:	4558      	cmp	r0, fp
    ba84:	bf3c      	itt	cc
    ba86:	2000      	movcc	r0, #0
    ba88:	f000 faba 	blcc	c000 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ba8c:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
    ba90:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    ba94:	2001      	movs	r0, #1
    ba96:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    ba9a:	642f      	str	r7, [r5, #64]	; 0x40
    ba9c:	63af      	str	r7, [r5, #56]	; 0x38
    ba9e:	e007      	b.n	bab0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd8>
    baa0:	f640 3167 	movw	r1, #2919	; 0xb67
    baa4:	203e      	movs	r0, #62	; 0x3e
    baa6:	f7f8 fa89 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    baaa:	f1b9 0f00 	cmp.w	r9, #0
    baae:	d003      	beq.n	bab8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    bab0:	f1b9 0f00 	cmp.w	r9, #0
    bab4:	d02a      	beq.n	bb0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    bab6:	e063      	b.n	bb80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
    bab8:	6808      	ldr	r0, [r1, #0]
    baba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    babe:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    bac2:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    bac6:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
    baca:	b149      	cbz	r1, bae0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    bacc:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    bad0:	4281      	cmp	r1, r0
    bad2:	d218      	bcs.n	bb06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    bad4:	2000      	movs	r0, #0
    bad6:	f000 fa93 	bl	c000 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bada:	642f      	str	r7, [r5, #64]	; 0x40
    badc:	63af      	str	r7, [r5, #56]	; 0x38
    bade:	e012      	b.n	bb06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    bae0:	49c3      	ldr	r1, [pc, #780]	; (bdf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    bae2:	680a      	ldr	r2, [r1, #0]
    bae4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    bae8:	b291      	uxth	r1, r2
    baea:	0c12      	lsrs	r2, r2, #16
    baec:	4298      	cmp	r0, r3
    baee:	d303      	bcc.n	baf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x120>
    baf0:	290f      	cmp	r1, #15
    baf2:	d906      	bls.n	bb02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    baf4:	2a02      	cmp	r2, #2
    baf6:	d204      	bcs.n	bb02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    baf8:	2001      	movs	r0, #1
    bafa:	f000 fa81 	bl	c000 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bafe:	642f      	str	r7, [r5, #64]	; 0x40
    bb00:	e001      	b.n	bb06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    bb02:	642f      	str	r7, [r5, #64]	; 0x40
    bb04:	63af      	str	r7, [r5, #56]	; 0x38
    bb06:	f8db 0000 	ldr.w	r0, [fp]
    bb0a:	9000      	str	r0, [sp, #0]
    bb0c:	2080      	movs	r0, #128	; 0x80
    bb0e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bb12:	f8c8 7040 	str.w	r7, [r8, #64]	; 0x40
    bb16:	f8d8 1540 	ldr.w	r1, [r8, #1344]	; 0x540
    bb1a:	48b6      	ldr	r0, [pc, #728]	; (bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    bb1c:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bb20:	f643 2298 	movw	r2, #15000	; 0x3a98
    bb24:	440a      	add	r2, r1
    bb26:	49b4      	ldr	r1, [pc, #720]	; (bdf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    bb28:	4282      	cmp	r2, r0
    bb2a:	d21c      	bcs.n	bb66 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x18e>
    bb2c:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
    bb30:	f242 7210 	movw	r2, #10000	; 0x2710
    bb34:	4410      	add	r0, r2
    bb36:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    bb3a:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    bb3e:	e002      	b.n	bb46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16e>
    bb40:	e040      	b.n	bbc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    bb42:	e025      	b.n	bb90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    bb44:	e031      	b.n	bbaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d2>
    bb46:	4aad      	ldr	r2, [pc, #692]	; (bdfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    bb48:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    bb4c:	48ac      	ldr	r0, [pc, #688]	; (be00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    bb4e:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    bb52:	48ac      	ldr	r0, [pc, #688]	; (be04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    bb54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    bb58:	6001      	str	r1, [r0, #0]
    bb5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bb5c:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    bb60:	6320      	str	r0, [r4, #48]	; 0x30
    bb62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb66:	2000      	movs	r0, #0
    bb68:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    bb6c:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    bb70:	2080      	movs	r0, #128	; 0x80
    bb72:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bb76:	0300      	lsls	r0, r0, #12
    bb78:	f8ca 0000 	str.w	r0, [sl]
    bb7c:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    bb80:	2080      	movs	r0, #128	; 0x80
    bb82:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bb86:	0300      	lsls	r0, r0, #12
    bb88:	f8ca 0000 	str.w	r0, [sl]
    bb8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb90:	f7f8 f870 	bl	3c74 <mpsl_fem_pa_configuration_clear>
    bb94:	2800      	cmp	r0, #0
    bb96:	bf18      	it	ne
    bb98:	f1b0 3fff 	cmpne.w	r0, #4294967295
    bb9c:	d012      	beq.n	bbc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    bb9e:	f640 0194 	movw	r1, #2196	; 0x894
    bba2:	f04f 003e 	mov.w	r0, #62	; 0x3e
    bba6:	f7f8 fa09 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbaa:	f7f8 f851 	bl	3c50 <mpsl_fem_lna_configuration_clear>
    bbae:	2800      	cmp	r0, #0
    bbb0:	bf18      	it	ne
    bbb2:	f1b0 3fff 	cmpne.w	r0, #4294967295
    bbb6:	d005      	beq.n	bbc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    bbb8:	f640 019a 	movw	r1, #2202	; 0x89a
    bbbc:	f04f 003e 	mov.w	r0, #62	; 0x3e
    bbc0:	f7f8 f9fc 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbc4:	4886      	ldr	r0, [pc, #536]	; (bde0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    bbc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    bbc8:	6001      	str	r1, [r0, #0]
    bbca:	6326      	str	r6, [r4, #48]	; 0x30
    bbcc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bbd0:	f020 001d 	bic.w	r0, r0, #29
    bbd4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
    bbd8:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bbdc:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    bbe0:	7b20      	ldrb	r0, [r4, #12]
    bbe2:	f04f 0900 	mov.w	r9, #0
    bbe6:	2800      	cmp	r0, #0
    bbe8:	bf1b      	ittet	ne
    bbea:	f8d8 0144 	ldrne.w	r0, [r8, #324]	; 0x144
    bbee:	2800      	cmpne	r0, #0
    bbf0:	2100      	moveq	r1, #0
    bbf2:	2101      	movne	r1, #1
    bbf4:	7a60      	ldrb	r0, [r4, #9]
    bbf6:	2801      	cmp	r0, #1
    bbf8:	d002      	beq.n	bc00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x228>
    bbfa:	2802      	cmp	r0, #2
    bbfc:	d00a      	beq.n	bc14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x23c>
    bbfe:	e005      	b.n	bc0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
    bc00:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    bc04:	2800      	cmp	r0, #0
    bc06:	bf18      	it	ne
    bc08:	f04f 0908 	movne.w	r9, #8
    bc0c:	f019 0f0b 	tst.w	r9, #11
    bc10:	d118      	bne.n	bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x26c>
    bc12:	e011      	b.n	bc38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x260>
    bc14:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    bc18:	2800      	cmp	r0, #0
    bc1a:	bf18      	it	ne
    bc1c:	f04f 0902 	movne.w	r9, #2
    bc20:	4879      	ldr	r0, [pc, #484]	; (be08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
    bc22:	6800      	ldr	r0, [r0, #0]
    bc24:	f010 0f01 	tst.w	r0, #1
    bc28:	bf08      	it	eq
    bc2a:	f049 0904 	orreq.w	r9, r9, #4
    bc2e:	2900      	cmp	r1, #0
    bc30:	bf18      	it	ne
    bc32:	f049 0901 	orrne.w	r9, r9, #1
    bc36:	e7e9      	b.n	bc0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
    bc38:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    bc3c:	2800      	cmp	r0, #0
    bc3e:	bf18      	it	ne
    bc40:	f049 0910 	orrne.w	r9, r9, #16
    bc44:	4871      	ldr	r0, [pc, #452]	; (be0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
    bc46:	7800      	ldrb	r0, [r0, #0]
    bc48:	b1c0      	cbz	r0, bc7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a4>
    bc4a:	4871      	ldr	r0, [pc, #452]	; (be10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    bc4c:	6800      	ldr	r0, [r0, #0]
    bc4e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    bc52:	bf1b      	ittet	ne
    bc54:	f8d5 1114 	ldrne.w	r1, [r5, #276]	; 0x114
    bc58:	2900      	cmpne	r1, #0
    bc5a:	2100      	moveq	r1, #0
    bc5c:	2101      	movne	r1, #1
    bc5e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    bc62:	2800      	cmp	r0, #0
    bc64:	bf1b      	ittet	ne
    bc66:	f8d5 0118 	ldrne.w	r0, [r5, #280]	; 0x118
    bc6a:	2800      	cmpne	r0, #0
    bc6c:	2000      	moveq	r0, #0
    bc6e:	2001      	movne	r0, #1
    bc70:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    bc74:	f8d5 0410 	ldr.w	r0, [r5, #1040]	; 0x410
    bc78:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    bc7c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    bc80:	2800      	cmp	r0, #0
    bc82:	bf18      	it	ne
    bc84:	2001      	movne	r0, #1
    bc86:	f88d 0000 	strb.w	r0, [sp]
    bc8a:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
    bc8e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bc92:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bc96:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bc9a:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
    bc9e:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
    bca2:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
    bca6:	f8c5 616c 	str.w	r6, [r5, #364]	; 0x16c
    bcaa:	4668      	mov	r0, sp
    bcac:	f7f7 ff72 	bl	3b94 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    bcb0:	2800      	cmp	r0, #0
    bcb2:	bf18      	it	ne
    bcb4:	f049 0910 	orrne.w	r9, r9, #16
    bcb8:	f8c8 6144 	str.w	r6, [r8, #324]	; 0x144
    bcbc:	f019 0f10 	tst.w	r9, #16
    bcc0:	d006      	beq.n	bcd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2f8>
    bcc2:	f019 0f08 	tst.w	r9, #8
    bcc6:	bf02      	ittt	eq
    bcc8:	7a60      	ldrbeq	r0, [r4, #9]
    bcca:	2801      	cmpeq	r0, #1
    bccc:	f049 0920 	orreq.w	r9, r9, #32
    bcd0:	4850      	ldr	r0, [pc, #320]	; (be14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    bcd2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bcd6:	6260      	str	r0, [r4, #36]	; 0x24
    bcd8:	4846      	ldr	r0, [pc, #280]	; (bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    bcda:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bcde:	6220      	str	r0, [r4, #32]
    bce0:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    bce4:	2802      	cmp	r0, #2
    bce6:	bf1c      	itt	ne
    bce8:	7a60      	ldrbne	r0, [r4, #9]
    bcea:	2802      	cmpne	r0, #2
    bcec:	7e21      	ldrb	r1, [r4, #24]
    bcee:	d00e      	beq.n	bd0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x336>
    bcf0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    bcf4:	7a62      	ldrb	r2, [r4, #9]
    bcf6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    bcfa:	7a20      	ldrb	r0, [r4, #8]
    bcfc:	f04f 0a00 	mov.w	sl, #0
    bd00:	b188      	cbz	r0, bd26 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34e>
    bd02:	f019 0f11 	tst.w	r9, #17
    bd06:	d013      	beq.n	bd30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    bd08:	f7fe ff5e 	bl	abc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bd0c:	e03d      	b.n	bd8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
    bd0e:	2904      	cmp	r1, #4
    bd10:	bf18      	it	ne
    bd12:	2908      	cmpne	r1, #8
    bd14:	d1ec      	bne.n	bcf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
    bd16:	4840      	ldr	r0, [pc, #256]	; (be18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    bd18:	6800      	ldr	r0, [r0, #0]
    bd1a:	f010 0f06 	tst.w	r0, #6
    bd1e:	bf0c      	ite	eq
    bd20:	2108      	moveq	r1, #8
    bd22:	2104      	movne	r1, #4
    bd24:	e7e4      	b.n	bcf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
    bd26:	71e6      	strb	r6, [r4, #7]
    bd28:	7226      	strb	r6, [r4, #8]
    bd2a:	7266      	strb	r6, [r4, #9]
    bd2c:	7326      	strb	r6, [r4, #12]
    bd2e:	e02c      	b.n	bd8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
    bd30:	2801      	cmp	r0, #1
    bd32:	bf14      	ite	ne
    bd34:	f04f 0801 	movne.w	r8, #1
    bd38:	f04f 0800 	moveq.w	r8, #0
    bd3c:	79e0      	ldrb	r0, [r4, #7]
    bd3e:	2801      	cmp	r0, #1
    bd40:	bf18      	it	ne
    bd42:	2000      	movne	r0, #0
    bd44:	9000      	str	r0, [sp, #0]
    bd46:	71e6      	strb	r6, [r4, #7]
    bd48:	7226      	strb	r6, [r4, #8]
    bd4a:	7266      	strb	r6, [r4, #9]
    bd4c:	8ba0      	ldrh	r0, [r4, #28]
    bd4e:	2300      	movs	r3, #0
    bd50:	b3f2      	cbz	r2, bdd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    bd52:	f1b8 0f00 	cmp.w	r8, #0
    bd56:	d06e      	beq.n	be36 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45e>
    bd58:	f1b8 0f00 	cmp.w	r8, #0
    bd5c:	d005      	beq.n	bd6a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    bd5e:	2a01      	cmp	r2, #1
    bd60:	d076      	beq.n	be50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x478>
    bd62:	f003 fd3a 	bl	f7da <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    bd66:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bd68:	1843      	adds	r3, r0, r1
    bd6a:	9800      	ldr	r0, [sp, #0]
    bd6c:	4619      	mov	r1, r3
    bd6e:	b140      	cbz	r0, bd82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    bd70:	f10b 003b 	add.w	r0, fp, #59	; 0x3b
    bd74:	4288      	cmp	r0, r1
    bd76:	bf92      	itee	ls
    bd78:	71e7      	strbls	r7, [r4, #7]
    bd7a:	612f      	strhi	r7, [r5, #16]
    bd7c:	f04f 0a01 	movhi.w	sl, #1
    bd80:	d803      	bhi.n	bd8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
    bd82:	7aa2      	ldrb	r2, [r4, #10]
    bd84:	4640      	mov	r0, r8
    bd86:	f7ff fc19 	bl	b5bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    bd8a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
    bd8e:	b1b0      	cbz	r0, bdbe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    bd90:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bd94:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
    bd98:	f040 0002 	orr.w	r0, r0, #2
    bd9c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bda0:	480f      	ldr	r0, [pc, #60]	; (bde0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    bda2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    bda6:	6001      	str	r1, [r0, #0]
    bda8:	6960      	ldr	r0, [r4, #20]
    bdaa:	491c      	ldr	r1, [pc, #112]	; (be1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    bdac:	f020 0003 	bic.w	r0, r0, #3
    bdb0:	6160      	str	r0, [r4, #20]
    bdb2:	6008      	str	r0, [r1, #0]
    bdb4:	491b      	ldr	r1, [pc, #108]	; (be24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
    bdb6:	481a      	ldr	r0, [pc, #104]	; (be20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
    bdb8:	6008      	str	r0, [r1, #0]
    bdba:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    bdbe:	f8df 8068 	ldr.w	r8, [pc, #104]	; be28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>
    bdc2:	f019 0f01 	tst.w	r9, #1
    bdc6:	d048      	beq.n	be5a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x482>
    bdc8:	f8d8 0000 	ldr.w	r0, [r8]
    bdcc:	4780      	blx	r0
    bdce:	e07a      	b.n	bec6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    bdd0:	e02c      	b.n	be2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x454>
    bdd2:	e030      	b.n	be36 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45e>
    bdd4:	40008000 	.word	0x40008000
    bdd8:	4000800c 	.word	0x4000800c
    bddc:	20001450 	.word	0x20001450
    bde0:	4001f508 	.word	0x4001f508
    bde4:	40001000 	.word	0x40001000
    bde8:	40001548 	.word	0x40001548
    bdec:	4000111c 	.word	0x4000111c
    bdf0:	40001574 	.word	0x40001574
    bdf4:	40008004 	.word	0x40008004
    bdf8:	40008140 	.word	0x40008140
    bdfc:	4001f098 	.word	0x4001f098
    be00:	40001014 	.word	0x40001014
    be04:	4001f504 	.word	0x4001f504
    be08:	40001400 	.word	0x40001400
    be0c:	20000440 	.word	0x20000440
    be10:	40001640 	.word	0x40001640
    be14:	40008008 	.word	0x40008008
    be18:	40001414 	.word	0x40001414
    be1c:	40001900 	.word	0x40001900
    be20:	00023280 	.word	0x00023280
    be24:	40001910 	.word	0x40001910
    be28:	20001440 	.word	0x20001440
    be2c:	f640 0147 	movw	r1, #2119	; 0x847
    be30:	203e      	movs	r0, #62	; 0x3e
    be32:	f7f8 f8c3 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be36:	2a01      	cmp	r2, #1
    be38:	d005      	beq.n	be46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46e>
    be3a:	f003 fcdc 	bl	f7f6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    be3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    be40:	1843      	adds	r3, r0, r1
    be42:	e792      	b.n	bd6a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    be44:	e004      	b.n	be50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x478>
    be46:	f000 fb13 	bl	c470 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    be4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    be4c:	1843      	adds	r3, r0, r1
    be4e:	e78c      	b.n	bd6a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    be50:	f000 fb00 	bl	c454 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    be54:	6a61      	ldr	r1, [r4, #36]	; 0x24
    be56:	1843      	adds	r3, r0, r1
    be58:	e787      	b.n	bd6a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    be5a:	f019 0f02 	tst.w	r9, #2
    be5e:	d029      	beq.n	beb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4dc>
    be60:	f019 0f04 	tst.w	r9, #4
    be64:	d120      	bne.n	bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    be66:	f000 fe3e 	bl	cae6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    be6a:	b9e8      	cbnz	r0, bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    be6c:	f000 fe2b 	bl	cac6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    be70:	b9d0      	cbnz	r0, bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    be72:	4840      	ldr	r0, [pc, #256]	; (bf74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>)
    be74:	6800      	ldr	r0, [r0, #0]
    be76:	f3c0 5342 	ubfx	r3, r0, #21, #3
    be7a:	f3c0 6200 	ubfx	r2, r0, #24, #1
    be7e:	f000 010f 	and.w	r1, r0, #15
    be82:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    be86:	f3c0 2003 	ubfx	r0, r0, #8, #4
    be8a:	b16a      	cbz	r2, bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    be8c:	2900      	cmp	r1, #0
    be8e:	bf1c      	itt	ne
    be90:	f1bc 0f00 	cmpne.w	ip, #0
    be94:	2800      	cmpne	r0, #0
    be96:	d107      	bne.n	bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    be98:	4837      	ldr	r0, [pc, #220]	; (bf78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a0>)
    be9a:	6800      	ldr	r0, [r0, #0]
    be9c:	2800      	cmp	r0, #0
    be9e:	bf18      	it	ne
    bea0:	2b03      	cmpne	r3, #3
    bea2:	bf38      	it	cc
    bea4:	f049 0904 	orrcc.w	r9, r9, #4
    bea8:	ea27 0099 	bic.w	r0, r7, r9, lsr #2
    beac:	4651      	mov	r1, sl
    beae:	f8d8 2004 	ldr.w	r2, [r8, #4]
    beb2:	e007      	b.n	bec4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ec>
    beb4:	f019 0f28 	tst.w	r9, #40	; 0x28
    beb8:	d005      	beq.n	bec6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    beba:	f8d8 2008 	ldr.w	r2, [r8, #8]
    bebe:	ea27 1159 	bic.w	r1, r7, r9, lsr #5
    bec2:	4650      	mov	r0, sl
    bec4:	4790      	blx	r2
    bec6:	f019 0f10 	tst.w	r9, #16
    beca:	bf1c      	itt	ne
    becc:	f8d8 000c 	ldrne.w	r0, [r8, #12]
    bed0:	4780      	blxne	r0
    bed2:	7a60      	ldrb	r0, [r4, #9]
    bed4:	2802      	cmp	r0, #2
    bed6:	d118      	bne.n	bf0a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x532>
    bed8:	7b20      	ldrb	r0, [r4, #12]
    beda:	b1b0      	cbz	r0, bf0a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x532>
    bedc:	2802      	cmp	r0, #2
    bede:	d006      	beq.n	beee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x516>
    bee0:	2801      	cmp	r0, #1
    bee2:	d035      	beq.n	bf50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x578>
    bee4:	f640 4134 	movw	r1, #3124	; 0xc34
    bee8:	203e      	movs	r0, #62	; 0x3e
    beea:	f7f8 f867 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    beee:	6921      	ldr	r1, [r4, #16]
    bef0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bef2:	4408      	add	r0, r1
    bef4:	4921      	ldr	r1, [pc, #132]	; (bf7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a4>)
    bef6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    befa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    befc:	4920      	ldr	r1, [pc, #128]	; (bf80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>)
    befe:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    bf02:	6320      	str	r0, [r4, #48]	; 0x30
    bf04:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    bf08:	6008      	str	r0, [r1, #0]
    bf0a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    bf0e:	2800      	cmp	r0, #0
    bf10:	bf18      	it	ne
    bf12:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf16:	f019 0f10 	tst.w	r9, #16
    bf1a:	bf14      	ite	ne
    bf1c:	9600      	strne	r6, [sp, #0]
    bf1e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf22:	9800      	ldr	r0, [sp, #0]
    bf24:	1c40      	adds	r0, r0, #1
    bf26:	9000      	str	r0, [sp, #0]
    bf28:	f1b0 3fff 	cmp.w	r0, #4294967295
    bf2c:	d01d      	beq.n	bf6a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x592>
    bf2e:	f8d5 0550 	ldr.w	r0, [r5, #1360]	; 0x550
    bf32:	b2c0      	uxtb	r0, r0
    bf34:	2804      	cmp	r0, #4
    bf36:	bf18      	it	ne
    bf38:	280c      	cmpne	r0, #12
    bf3a:	d0f2      	beq.n	bf22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x54a>
    bf3c:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bf40:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bf44:	f04f 0002 	mov.w	r0, #2
    bf48:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    bf4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf50:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bf52:	6920      	ldr	r0, [r4, #16]
    bf54:	4288      	cmp	r0, r1
    bf56:	bf84      	itt	hi
    bf58:	4908      	ldrhi	r1, [pc, #32]	; (bf7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a4>)
    bf5a:	f8c1 0540 	strhi.w	r0, [r1, #1344]	; 0x540
    bf5e:	d8cc      	bhi.n	befa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x522>
    bf60:	f640 4135 	movw	r1, #3125	; 0xc35
    bf64:	203e      	movs	r0, #62	; 0x3e
    bf66:	f7f8 f829 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf6a:	f640 415d 	movw	r1, #3165	; 0xc5d
    bf6e:	203e      	movs	r0, #62	; 0x3e
    bf70:	f7f8 f824 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf74:	40001450 	.word	0x40001450
    bf78:	40001454 	.word	0x40001454
    bf7c:	40008004 	.word	0x40008004
    bf80:	4001f504 	.word	0x4001f504

0000bf84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bf84:	b510      	push	{r4, lr}
    bf86:	4b19      	ldr	r3, [pc, #100]	; (bfec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x68>)
    bf88:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    bf8c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
    bf90:	f8c4 c620 	str.w	ip, [r4, #1568]	; 0x620
    bf94:	f891 c000 	ldrb.w	ip, [r1]
    bf98:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bf9c:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    bfa0:	f8c4 1600 	str.w	r1, [r4, #1536]	; 0x600
    bfa4:	4912      	ldr	r1, [pc, #72]	; (bff0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x6c>)
    bfa6:	f8d1 c000 	ldr.w	ip, [r1]
    bfaa:	2101      	movs	r1, #1
    bfac:	fa01 f000 	lsl.w	r0, r1, r0
    bfb0:	ea4c 0100 	orr.w	r1, ip, r0
    bfb4:	b2c9      	uxtb	r1, r1
    bfb6:	b132      	cbz	r2, bfc6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42>
    bfb8:	2a01      	cmp	r2, #1
    bfba:	d00b      	beq.n	bfd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    bfbc:	f240 51ad 	movw	r1, #1453	; 0x5ad
    bfc0:	203e      	movs	r0, #62	; 0x3e
    bfc2:	f7f7 fffb 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfc6:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
    bfca:	f3c2 2207 	ubfx	r2, r2, #8, #8
    bfce:	ea22 0000 	bic.w	r0, r2, r0
    bfd2:	e005      	b.n	bfe0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>
    bfd4:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
    bfd8:	b2c0      	uxtb	r0, r0
    bfda:	f3c2 2207 	ubfx	r2, r2, #8, #8
    bfde:	4310      	orrs	r0, r2
    bfe0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bfe4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bfe8:	bd10      	pop	{r4, pc}
    bfea:	0000      	.short	0x0000
    bfec:	40001000 	.word	0x40001000
    bff0:	40001640 	.word	0x40001640

0000bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bff4:	4901      	ldr	r1, [pc, #4]	; (bffc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bff6:	2001      	movs	r0, #1
    bff8:	7008      	strb	r0, [r1, #0]
    bffa:	4770      	bx	lr
    bffc:	20000440 	.word	0x20000440
    c000:	4a0e      	ldr	r2, [pc, #56]	; (c03c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>)
    c002:	490f      	ldr	r1, [pc, #60]	; (c040 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c>)
    c004:	6813      	ldr	r3, [r2, #0]
    c006:	b170      	cbz	r0, c026 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32>
    c008:	f023 0382 	bic.w	r3, r3, #130	; 0x82
    c00c:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
    c010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c014:	6013      	str	r3, [r2, #0]
    c016:	680a      	ldr	r2, [r1, #0]
    c018:	f022 0210 	bic.w	r2, r2, #16
    c01c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    c020:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    c024:	e005      	b.n	c032 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e>
    c026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    c02a:	6013      	str	r3, [r2, #0]
    c02c:	680a      	ldr	r2, [r1, #0]
    c02e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    c032:	600a      	str	r2, [r1, #0]
    c034:	4903      	ldr	r1, [pc, #12]	; (c044 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x50>)
    c036:	f881 0036 	strb.w	r0, [r1, #54]	; 0x36
    c03a:	4770      	bx	lr
    c03c:	4000173c 	.word	0x4000173c
    c040:	4000177c 	.word	0x4000177c
    c044:	20001450 	.word	0x20001450
    c048:	4909      	ldr	r1, [pc, #36]	; (c070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    c04a:	7a49      	ldrb	r1, [r1, #9]
    c04c:	2901      	cmp	r1, #1
    c04e:	d00a      	beq.n	c066 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x72>
    c050:	2902      	cmp	r1, #2
    c052:	bf0c      	ite	eq
    c054:	f010 0f02 	tsteq.w	r0, #2
    c058:	4770      	bxne	lr
    c05a:	bf00      	nop
    c05c:	4905      	ldr	r1, [pc, #20]	; (c074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    c05e:	f04f 0001 	mov.w	r0, #1
    c062:	6108      	str	r0, [r1, #16]
    c064:	4770      	bx	lr
    c066:	f010 0f04 	tst.w	r0, #4
    c06a:	d0f7      	beq.n	c05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c06c:	4770      	bx	lr
    c06e:	0000      	.short	0x0000
    c070:	20001450 	.word	0x20001450
    c074:	40001000 	.word	0x40001000
    c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c07a:	4c3b      	ldr	r4, [pc, #236]	; (c168 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x174>)
    c07c:	4605      	mov	r5, r0
    c07e:	2d01      	cmp	r5, #1
    c080:	7620      	strb	r0, [r4, #24]
    c082:	483a      	ldr	r0, [pc, #232]	; (c16c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x178>)
    c084:	bf08      	it	eq
    c086:	2103      	moveq	r1, #3
    c088:	d010      	beq.n	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
    c08a:	2d02      	cmp	r5, #2
    c08c:	bf08      	it	eq
    c08e:	2104      	moveq	r1, #4
    c090:	d00c      	beq.n	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
    c092:	2d04      	cmp	r5, #4
    c094:	bf08      	it	eq
    c096:	2106      	moveq	r1, #6
    c098:	d008      	beq.n	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
    c09a:	2d08      	cmp	r5, #8
    c09c:	bf08      	it	eq
    c09e:	2105      	moveq	r1, #5
    c0a0:	d004      	beq.n	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
    c0a2:	f640 5155 	movw	r1, #3413	; 0xd55
    c0a6:	203e      	movs	r0, #62	; 0x3e
    c0a8:	f7f7 ff88 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0ac:	6001      	str	r1, [r0, #0]
    c0ae:	7ea1      	ldrb	r1, [r4, #26]
    c0b0:	482f      	ldr	r0, [pc, #188]	; (c170 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>)
    c0b2:	5c40      	ldrb	r0, [r0, r1]
    c0b4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c0b8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c0bc:	bf3a      	itte	cc
    c0be:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    c0c2:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
    c0c6:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    c0ca:	4e2a      	ldr	r6, [pc, #168]	; (c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>)
    c0cc:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
    c0d0:	4a29      	ldr	r2, [pc, #164]	; (c178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>)
    c0d2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c0d6:	6010      	str	r0, [r2, #0]
    c0d8:	7a20      	ldrb	r0, [r4, #8]
    c0da:	2801      	cmp	r0, #1
    c0dc:	d113      	bne.n	c106 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x112>
    c0de:	7aa0      	ldrb	r0, [r4, #10]
    c0e0:	f994 2019 	ldrsb.w	r2, [r4, #25]
    c0e4:	466b      	mov	r3, sp
    c0e6:	f000 f9ed 	bl	c4c4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c0ea:	f99d 0000 	ldrsb.w	r0, [sp]
    c0ee:	f000 f9ab 	bl	c448 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c0f2:	f10d 0001 	add.w	r0, sp, #1
    c0f6:	f7f7 fdc9 	bl	3c8c <mpsl_fem_pa_gain_set>
    c0fa:	b120      	cbz	r0, c106 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x112>
    c0fc:	f240 51ee 	movw	r1, #1518	; 0x5ee
    c100:	203e      	movs	r0, #62	; 0x3e
    c102:	f7f7 ff5b 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c106:	20ff      	movs	r0, #255	; 0xff
    c108:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    c10c:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    c110:	f440 7088 	orr.w	r0, r0, #272	; 0x110
    c114:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    c118:	f000 fcff 	bl	cb1a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c11c:	b180      	cbz	r0, c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14c>
    c11e:	f015 0f0c 	tst.w	r5, #12
    c122:	d00a      	beq.n	c13a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x146>
    c124:	2001      	movs	r0, #1
    c126:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    c12a:	f7ff ff69 	bl	c000 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c12e:	2001      	movs	r0, #1
    c130:	63f0      	str	r0, [r6, #60]	; 0x3c
    c132:	6430      	str	r0, [r6, #64]	; 0x40
    c134:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    c138:	e002      	b.n	c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14c>
    c13a:	2000      	movs	r0, #0
    c13c:	f7ff ff60 	bl	c000 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c140:	4628      	mov	r0, r5
    c142:	f000 f927 	bl	c394 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    c146:	f000 fcce 	bl	cae6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c14a:	2800      	cmp	r0, #0
    c14c:	bf18      	it	ne
    c14e:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    c150:	f000 fcb9 	bl	cac6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c154:	2800      	cmp	r0, #0
    c156:	bf18      	it	ne
    c158:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    c15a:	4808      	ldr	r0, [pc, #32]	; (c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>)
    c15c:	6801      	ldr	r1, [r0, #0]
    c15e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c162:	6001      	str	r1, [r0, #0]
    c164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c166:	0000      	.short	0x0000
    c168:	20001450 	.word	0x20001450
    c16c:	40001510 	.word	0x40001510
    c170:	0000c274 	.word	0x0000c274
    c174:	40001000 	.word	0x40001000
    c178:	40001554 	.word	0x40001554
    c17c:	40001568 	.word	0x40001568
    c180:	b538      	push	{r3, r4, r5, lr}
    c182:	4a2c      	ldr	r2, [pc, #176]	; (c234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x240>)
    c184:	4604      	mov	r4, r0
    c186:	2c01      	cmp	r4, #1
    c188:	7610      	strb	r0, [r2, #24]
    c18a:	482b      	ldr	r0, [pc, #172]	; (c238 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>)
    c18c:	bf08      	it	eq
    c18e:	2103      	moveq	r1, #3
    c190:	d010      	beq.n	c1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c192:	2c02      	cmp	r4, #2
    c194:	bf08      	it	eq
    c196:	2104      	moveq	r1, #4
    c198:	d00c      	beq.n	c1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c19a:	2c04      	cmp	r4, #4
    c19c:	bf08      	it	eq
    c19e:	2106      	moveq	r1, #6
    c1a0:	d008      	beq.n	c1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c1a2:	2c08      	cmp	r4, #8
    c1a4:	bf08      	it	eq
    c1a6:	2105      	moveq	r1, #5
    c1a8:	d004      	beq.n	c1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c1aa:	f640 5155 	movw	r1, #3413	; 0xd55
    c1ae:	203e      	movs	r0, #62	; 0x3e
    c1b0:	f7f7 ff04 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1b4:	6001      	str	r1, [r0, #0]
    c1b6:	7e91      	ldrb	r1, [r2, #26]
    c1b8:	4820      	ldr	r0, [pc, #128]	; (c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>)
    c1ba:	5c40      	ldrb	r0, [r0, r1]
    c1bc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c1c0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c1c4:	bf3a      	itte	cc
    c1c6:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    c1ca:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
    c1ce:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    c1d2:	4b1b      	ldr	r3, [pc, #108]	; (c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24c>)
    c1d4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    c1d8:	4b1a      	ldr	r3, [pc, #104]	; (c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x250>)
    c1da:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c1de:	6018      	str	r0, [r3, #0]
    c1e0:	4620      	mov	r0, r4
    c1e2:	f992 2019 	ldrsb.w	r2, [r2, #25]
    c1e6:	466b      	mov	r3, sp
    c1e8:	f000 f96c 	bl	c4c4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c1ec:	f99d 0000 	ldrsb.w	r0, [sp]
    c1f0:	f000 f92a 	bl	c448 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c1f4:	f10d 0001 	add.w	r0, sp, #1
    c1f8:	f7f7 fd48 	bl	3c8c <mpsl_fem_pa_gain_set>
    c1fc:	b120      	cbz	r0, c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    c1fe:	f240 51ee 	movw	r1, #1518	; 0x5ee
    c202:	203e      	movs	r0, #62	; 0x3e
    c204:	f7f7 feda 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c208:	f000 fc6d 	bl	cae6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c20c:	2800      	cmp	r0, #0
    c20e:	bf08      	it	eq
    c210:	bd38      	popeq	{r3, r4, r5, pc}
    c212:	4a0d      	ldr	r2, [pc, #52]	; (c248 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x254>)
    c214:	6811      	ldr	r1, [r2, #0]
    c216:	0650      	lsls	r0, r2, #25
    c218:	2c02      	cmp	r4, #2
    c21a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c21e:	bf0c      	ite	eq
    c220:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    c224:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    c228:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c22c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c230:	6010      	str	r0, [r2, #0]
    c232:	bd38      	pop	{r3, r4, r5, pc}
    c234:	20001450 	.word	0x20001450
    c238:	40001510 	.word	0x40001510
    c23c:	0000c274 	.word	0x0000c274
    c240:	40001000 	.word	0x40001000
    c244:	40001554 	.word	0x40001554
    c248:	40001588 	.word	0x40001588
    c24c:	00000004 	.word	0x00000004
    c250:	05dc0000 	.word	0x05dc0000
    c254:	000003e8 	.word	0x000003e8
	...
    c260:	000017d4 	.word	0x000017d4
    c264:	a1e0a62c 	.word	0xa1e0a62c
    c268:	a8200000 	.word	0xa8200000
    c26c:	00000000 	.word	0x00000000
    c270:	a8200000 	.word	0xa8200000
    c274:	0a080604 	.word	0x0a080604
    c278:	12100e0c 	.word	0x12100e0c
    c27c:	1c181614 	.word	0x1c181614
    c280:	2422201e 	.word	0x2422201e
    c284:	2c2a2826 	.word	0x2c2a2826
    c288:	3432302e 	.word	0x3432302e
    c28c:	3c3a3836 	.word	0x3c3a3836
    c290:	4442403e 	.word	0x4442403e
    c294:	4c4a4846 	.word	0x4c4a4846
    c298:	501a024e 	.word	0x501a024e
    c29c:	00000001 	.word	0x00000001
    c2a0:	40001110 	.word	0x40001110
	...
    c2b8:	00001e14 	.word	0x00001e14
    c2bc:	00001130 	.word	0x00001130
    c2c0:	00000000 	.word	0x00000000
    c2c4:	0000ea60 	.word	0x0000ea60
	...
    c2d4:	0000ea60 	.word	0x0000ea60
    c2d8:	00000002 	.word	0x00000002
	...
    c2f0:	40008000 	.word	0x40008000
	...
    c304:	40008000 	.word	0x40008000
	...
    c314:	00000001 	.word	0x00000001
	...
    c32c:	00000028 	.word	0x00000028
    c330:	00000018 	.word	0x00000018
    c334:	00000000 	.word	0x00000000
    c338:	00000150 	.word	0x00000150
	...
    c348:	00000150 	.word	0x00000150
    c34c:	00000000 	.word	0x00000000
    c350:	00001e14 	.word	0x00001e14
    c354:	00001130 	.word	0x00001130
    c358:	00000000 	.word	0x00000000
    c35c:	00005fb4 	.word	0x00005fb4
	...
    c36c:	0000733c 	.word	0x0000733c
    c370:	00000000 	.word	0x00000000
    c374:	00001770 	.word	0x00001770
    c378:	00000fa0 	.word	0x00000fa0
    c37c:	00000000 	.word	0x00000000
    c380:	0000283c 	.word	0x0000283c
	...
    c390:	0000283c 	.word	0x0000283c

0000c394 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
    c394:	b510      	push	{r4, lr}
    c396:	4604      	mov	r4, r0
    c398:	f000 fbbf 	bl	cb1a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c39c:	2800      	cmp	r0, #0
    c39e:	bf08      	it	eq
    c3a0:	bd10      	popeq	{r4, pc}
    c3a2:	4908      	ldr	r1, [pc, #32]	; (c3c4 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
    c3a4:	2c08      	cmp	r4, #8
    c3a6:	bf18      	it	ne
    c3a8:	2c04      	cmpne	r4, #4
    c3aa:	6808      	ldr	r0, [r1, #0]
    c3ac:	bf03      	ittte	eq
    c3ae:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
    c3b2:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
    c3b6:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    c3ba:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
    c3be:	6008      	str	r0, [r1, #0]
    c3c0:	bd10      	pop	{r4, pc}
    c3c2:	0000      	.short	0x0000
    c3c4:	40001740 	.word	0x40001740

0000c3c8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    c3c8:	b570      	push	{r4, r5, r6, lr}
    c3ca:	4605      	mov	r5, r0
    c3cc:	4614      	mov	r4, r2
    c3ce:	4608      	mov	r0, r1
    c3d0:	f7ff f8ee 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c3d4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    c3d8:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    c3dc:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    c3e0:	4807      	ldr	r0, [pc, #28]	; (c400 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    c3e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c3e6:	4408      	add	r0, r1
    c3e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c3ec:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    c3f0:	fbb0 f5f1 	udiv	r5, r0, r1
    c3f4:	4620      	mov	r0, r4
    c3f6:	f7ff f88d 	bl	b514 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c3fa:	4428      	add	r0, r5
    c3fc:	1d40      	adds	r0, r0, #5
    c3fe:	bd70      	pop	{r4, r5, r6, pc}
    c400:	0000c4a0 	.word	0x0000c4a0

0000c404 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    c404:	b570      	push	{r4, r5, r6, lr}
    c406:	f8df c03c 	ldr.w	ip, [pc, #60]	; c444 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x40>
    c40a:	461c      	mov	r4, r3
    c40c:	4b0c      	ldr	r3, [pc, #48]	; (c440 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c40e:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
    c412:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    c416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c41a:	ebcc 10c0 	rsb	r0, ip, r0, lsl #7
    c41e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c422:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    c426:	4418      	add	r0, r3
    c428:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c42c:	fbb0 f5f1 	udiv	r5, r0, r1
    c430:	4610      	mov	r0, r2
    c432:	f7ff f86f 	bl	b514 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c436:	4428      	add	r0, r5
    c438:	4420      	add	r0, r4
    c43a:	1d40      	adds	r0, r0, #5
    c43c:	bd70      	pop	{r4, r5, r6, pc}
    c43e:	0000      	.short	0x0000
    c440:	0000c4a0 	.word	0x0000c4a0
    c444:	0000c48c 	.word	0x0000c48c

0000c448 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c448:	4901      	ldr	r1, [pc, #4]	; (c450 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c44a:	b2c0      	uxtb	r0, r0
    c44c:	6008      	str	r0, [r1, #0]
    c44e:	4770      	bx	lr
    c450:	4000150c 	.word	0x4000150c

0000c454 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    c454:	4a05      	ldr	r2, [pc, #20]	; (c46c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    c456:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c45a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c45e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    c462:	fbb1 f1f2 	udiv	r1, r1, r2
    c466:	4408      	add	r0, r1
    c468:	1e80      	subs	r0, r0, #2
    c46a:	4770      	bx	lr
    c46c:	0000c48c 	.word	0x0000c48c

0000c470 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    c470:	4a05      	ldr	r2, [pc, #20]	; (c488 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    c472:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c47a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    c47e:	fbb1 f1f2 	udiv	r1, r1, r2
    c482:	4408      	add	r0, r1
    c484:	4770      	bx	lr
    c486:	0000      	.short	0x0000
    c488:	0000c48c 	.word	0x0000c48c
    c48c:	05dc0000 	.word	0x05dc0000
    c490:	000003e8 	.word	0x000003e8
	...
    c49c:	000017d4 	.word	0x000017d4
    c4a0:	00000000 	.word	0x00000000
    c4a4:	00001e14 	.word	0x00001e14
    c4a8:	00001130 	.word	0x00001130
    c4ac:	00000000 	.word	0x00000000
    c4b0:	0000ea60 	.word	0x0000ea60
	...
    c4c0:	0000ea60 	.word	0x0000ea60

0000c4c4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c4c8:	461e      	mov	r6, r3
    c4ca:	4690      	mov	r8, r2
    c4cc:	460f      	mov	r7, r1
    c4ce:	4605      	mov	r5, r0
    c4d0:	f7f3 fe30 	bl	134 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    c4d4:	4c25      	ldr	r4, [pc, #148]	; (c56c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xa8>)
    c4d6:	4681      	mov	r9, r0
    c4d8:	7820      	ldrb	r0, [r4, #0]
    c4da:	42a8      	cmp	r0, r5
    c4dc:	bf04      	itt	eq
    c4de:	7860      	ldrbeq	r0, [r4, #1]
    c4e0:	42b8      	cmpeq	r0, r7
    c4e2:	d10b      	bne.n	c4fc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
    c4e4:	f994 0002 	ldrsb.w	r0, [r4, #2]
    c4e8:	4540      	cmp	r0, r8
    c4ea:	bf04      	itt	eq
    c4ec:	78e0      	ldrbeq	r0, [r4, #3]
    c4ee:	4548      	cmpeq	r0, r9
    c4f0:	d104      	bne.n	c4fc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
    c4f2:	88a0      	ldrh	r0, [r4, #4]
    c4f4:	8030      	strh	r0, [r6, #0]
    c4f6:	79a0      	ldrb	r0, [r4, #6]
    c4f8:	70b0      	strb	r0, [r6, #2]
    c4fa:	e032      	b.n	c562 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x9e>
    c4fc:	4642      	mov	r2, r8
    c4fe:	2d01      	cmp	r5, #1
    c500:	bf08      	it	eq
    c502:	2000      	moveq	r0, #0
    c504:	d010      	beq.n	c528 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c506:	2d02      	cmp	r5, #2
    c508:	bf08      	it	eq
    c50a:	2001      	moveq	r0, #1
    c50c:	d00c      	beq.n	c528 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c50e:	2d04      	cmp	r5, #4
    c510:	bf08      	it	eq
    c512:	2003      	moveq	r0, #3
    c514:	d008      	beq.n	c528 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c516:	2d08      	cmp	r5, #8
    c518:	bf08      	it	eq
    c51a:	2002      	moveq	r0, #2
    c51c:	d004      	beq.n	c528 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c51e:	f240 4133 	movw	r1, #1075	; 0x433
    c522:	2006      	movs	r0, #6
    c524:	f7f7 fd4a 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c528:	466b      	mov	r3, sp
    c52a:	4639      	mov	r1, r7
    c52c:	f7f3 fe48 	bl	1c0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    c530:	b118      	cbz	r0, c53a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    c532:	213d      	movs	r1, #61	; 0x3d
    c534:	2075      	movs	r0, #117	; 0x75
    c536:	f7f7 fd41 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c53a:	4638      	mov	r0, r7
    c53c:	f7fe fb3c 	bl	abb8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    c540:	4602      	mov	r2, r0
    c542:	4631      	mov	r1, r6
    c544:	f99d 0000 	ldrsb.w	r0, [sp]
    c548:	f7f7 fbac 	bl	3ca4 <mpsl_fem_tx_power_split>
    c54c:	71e0      	strb	r0, [r4, #7]
    c54e:	8830      	ldrh	r0, [r6, #0]
    c550:	80a0      	strh	r0, [r4, #4]
    c552:	78b0      	ldrb	r0, [r6, #2]
    c554:	71a0      	strb	r0, [r4, #6]
    c556:	7025      	strb	r5, [r4, #0]
    c558:	7067      	strb	r7, [r4, #1]
    c55a:	f884 8002 	strb.w	r8, [r4, #2]
    c55e:	f884 9003 	strb.w	r9, [r4, #3]
    c562:	f994 0007 	ldrsb.w	r0, [r4, #7]
    c566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c56a:	0000      	.short	0x0000
    c56c:	20000499 	.word	0x20000499

0000c570 <__udivmoddi4>:
    c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c574:	4607      	mov	r7, r0
    c576:	468c      	mov	ip, r1
    c578:	4608      	mov	r0, r1
    c57a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c57c:	4615      	mov	r5, r2
    c57e:	463c      	mov	r4, r7
    c580:	4619      	mov	r1, r3
    c582:	2b00      	cmp	r3, #0
    c584:	f040 80c6 	bne.w	c714 <__udivmoddi4+0x1a4>
    c588:	4282      	cmp	r2, r0
    c58a:	fab2 f782 	clz	r7, r2
    c58e:	d946      	bls.n	c61e <__udivmoddi4+0xae>
    c590:	b14f      	cbz	r7, c5a6 <__udivmoddi4+0x36>
    c592:	f1c7 0e20 	rsb	lr, r7, #32
    c596:	fa24 fe0e 	lsr.w	lr, r4, lr
    c59a:	fa00 f307 	lsl.w	r3, r0, r7
    c59e:	40bd      	lsls	r5, r7
    c5a0:	ea4e 0c03 	orr.w	ip, lr, r3
    c5a4:	40bc      	lsls	r4, r7
    c5a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c5aa:	fa1f fe85 	uxth.w	lr, r5
    c5ae:	fbbc f9f8 	udiv	r9, ip, r8
    c5b2:	0c22      	lsrs	r2, r4, #16
    c5b4:	fb08 c319 	mls	r3, r8, r9, ip
    c5b8:	fb09 fa0e 	mul.w	sl, r9, lr
    c5bc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c5c0:	459a      	cmp	sl, r3
    c5c2:	d928      	bls.n	c616 <__udivmoddi4+0xa6>
    c5c4:	18eb      	adds	r3, r5, r3
    c5c6:	f109 30ff 	add.w	r0, r9, #4294967295
    c5ca:	d204      	bcs.n	c5d6 <__udivmoddi4+0x66>
    c5cc:	459a      	cmp	sl, r3
    c5ce:	d902      	bls.n	c5d6 <__udivmoddi4+0x66>
    c5d0:	f1a9 0002 	sub.w	r0, r9, #2
    c5d4:	442b      	add	r3, r5
    c5d6:	eba3 030a 	sub.w	r3, r3, sl
    c5da:	b2a4      	uxth	r4, r4
    c5dc:	fbb3 f2f8 	udiv	r2, r3, r8
    c5e0:	fb08 3312 	mls	r3, r8, r2, r3
    c5e4:	fb02 fe0e 	mul.w	lr, r2, lr
    c5e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c5ec:	45a6      	cmp	lr, r4
    c5ee:	d914      	bls.n	c61a <__udivmoddi4+0xaa>
    c5f0:	192c      	adds	r4, r5, r4
    c5f2:	f102 33ff 	add.w	r3, r2, #4294967295
    c5f6:	d203      	bcs.n	c600 <__udivmoddi4+0x90>
    c5f8:	45a6      	cmp	lr, r4
    c5fa:	d901      	bls.n	c600 <__udivmoddi4+0x90>
    c5fc:	1e93      	subs	r3, r2, #2
    c5fe:	442c      	add	r4, r5
    c600:	eba4 040e 	sub.w	r4, r4, lr
    c604:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c608:	b11e      	cbz	r6, c612 <__udivmoddi4+0xa2>
    c60a:	40fc      	lsrs	r4, r7
    c60c:	2300      	movs	r3, #0
    c60e:	6034      	str	r4, [r6, #0]
    c610:	6073      	str	r3, [r6, #4]
    c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c616:	4648      	mov	r0, r9
    c618:	e7dd      	b.n	c5d6 <__udivmoddi4+0x66>
    c61a:	4613      	mov	r3, r2
    c61c:	e7f0      	b.n	c600 <__udivmoddi4+0x90>
    c61e:	b902      	cbnz	r2, c622 <__udivmoddi4+0xb2>
    c620:	deff      	udf	#255	; 0xff
    c622:	bb87      	cbnz	r7, c686 <__udivmoddi4+0x116>
    c624:	1a83      	subs	r3, r0, r2
    c626:	2101      	movs	r1, #1
    c628:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c62c:	b2aa      	uxth	r2, r5
    c62e:	fbb3 fcfe 	udiv	ip, r3, lr
    c632:	0c20      	lsrs	r0, r4, #16
    c634:	fb0e 331c 	mls	r3, lr, ip, r3
    c638:	fb0c f802 	mul.w	r8, ip, r2
    c63c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c640:	4598      	cmp	r8, r3
    c642:	d963      	bls.n	c70c <__udivmoddi4+0x19c>
    c644:	18eb      	adds	r3, r5, r3
    c646:	f10c 30ff 	add.w	r0, ip, #4294967295
    c64a:	d204      	bcs.n	c656 <__udivmoddi4+0xe6>
    c64c:	4598      	cmp	r8, r3
    c64e:	d902      	bls.n	c656 <__udivmoddi4+0xe6>
    c650:	f1ac 0002 	sub.w	r0, ip, #2
    c654:	442b      	add	r3, r5
    c656:	eba3 0308 	sub.w	r3, r3, r8
    c65a:	b2a4      	uxth	r4, r4
    c65c:	fbb3 fcfe 	udiv	ip, r3, lr
    c660:	fb0e 331c 	mls	r3, lr, ip, r3
    c664:	fb0c f202 	mul.w	r2, ip, r2
    c668:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c66c:	42a2      	cmp	r2, r4
    c66e:	d94f      	bls.n	c710 <__udivmoddi4+0x1a0>
    c670:	192c      	adds	r4, r5, r4
    c672:	f10c 33ff 	add.w	r3, ip, #4294967295
    c676:	d204      	bcs.n	c682 <__udivmoddi4+0x112>
    c678:	42a2      	cmp	r2, r4
    c67a:	d902      	bls.n	c682 <__udivmoddi4+0x112>
    c67c:	f1ac 0302 	sub.w	r3, ip, #2
    c680:	442c      	add	r4, r5
    c682:	1aa4      	subs	r4, r4, r2
    c684:	e7be      	b.n	c604 <__udivmoddi4+0x94>
    c686:	f1c7 0c20 	rsb	ip, r7, #32
    c68a:	fa20 f80c 	lsr.w	r8, r0, ip
    c68e:	fa00 f307 	lsl.w	r3, r0, r7
    c692:	fa24 fc0c 	lsr.w	ip, r4, ip
    c696:	40bd      	lsls	r5, r7
    c698:	ea4c 0203 	orr.w	r2, ip, r3
    c69c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c6a0:	b2ab      	uxth	r3, r5
    c6a2:	fbb8 fcfe 	udiv	ip, r8, lr
    c6a6:	0c11      	lsrs	r1, r2, #16
    c6a8:	fb0e 801c 	mls	r0, lr, ip, r8
    c6ac:	fb0c f903 	mul.w	r9, ip, r3
    c6b0:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c6b4:	4581      	cmp	r9, r0
    c6b6:	fa04 f407 	lsl.w	r4, r4, r7
    c6ba:	d923      	bls.n	c704 <__udivmoddi4+0x194>
    c6bc:	1828      	adds	r0, r5, r0
    c6be:	f10c 31ff 	add.w	r1, ip, #4294967295
    c6c2:	d204      	bcs.n	c6ce <__udivmoddi4+0x15e>
    c6c4:	4581      	cmp	r9, r0
    c6c6:	d902      	bls.n	c6ce <__udivmoddi4+0x15e>
    c6c8:	f1ac 0102 	sub.w	r1, ip, #2
    c6cc:	4428      	add	r0, r5
    c6ce:	eba0 0009 	sub.w	r0, r0, r9
    c6d2:	b292      	uxth	r2, r2
    c6d4:	fbb0 fcfe 	udiv	ip, r0, lr
    c6d8:	fb0e 001c 	mls	r0, lr, ip, r0
    c6dc:	fb0c f803 	mul.w	r8, ip, r3
    c6e0:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c6e4:	4598      	cmp	r8, r3
    c6e6:	d90f      	bls.n	c708 <__udivmoddi4+0x198>
    c6e8:	18eb      	adds	r3, r5, r3
    c6ea:	f10c 32ff 	add.w	r2, ip, #4294967295
    c6ee:	d204      	bcs.n	c6fa <__udivmoddi4+0x18a>
    c6f0:	4598      	cmp	r8, r3
    c6f2:	d902      	bls.n	c6fa <__udivmoddi4+0x18a>
    c6f4:	f1ac 0202 	sub.w	r2, ip, #2
    c6f8:	442b      	add	r3, r5
    c6fa:	eba3 0308 	sub.w	r3, r3, r8
    c6fe:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c702:	e791      	b.n	c628 <__udivmoddi4+0xb8>
    c704:	4661      	mov	r1, ip
    c706:	e7e2      	b.n	c6ce <__udivmoddi4+0x15e>
    c708:	4662      	mov	r2, ip
    c70a:	e7f6      	b.n	c6fa <__udivmoddi4+0x18a>
    c70c:	4660      	mov	r0, ip
    c70e:	e7a2      	b.n	c656 <__udivmoddi4+0xe6>
    c710:	4663      	mov	r3, ip
    c712:	e7b6      	b.n	c682 <__udivmoddi4+0x112>
    c714:	4283      	cmp	r3, r0
    c716:	d905      	bls.n	c724 <__udivmoddi4+0x1b4>
    c718:	b10e      	cbz	r6, c71e <__udivmoddi4+0x1ae>
    c71a:	e9c6 7000 	strd	r7, r0, [r6]
    c71e:	2100      	movs	r1, #0
    c720:	4608      	mov	r0, r1
    c722:	e776      	b.n	c612 <__udivmoddi4+0xa2>
    c724:	fab3 f183 	clz	r1, r3
    c728:	b981      	cbnz	r1, c74c <__udivmoddi4+0x1dc>
    c72a:	4283      	cmp	r3, r0
    c72c:	d301      	bcc.n	c732 <__udivmoddi4+0x1c2>
    c72e:	42ba      	cmp	r2, r7
    c730:	d80a      	bhi.n	c748 <__udivmoddi4+0x1d8>
    c732:	1abc      	subs	r4, r7, r2
    c734:	eb60 0303 	sbc.w	r3, r0, r3
    c738:	2001      	movs	r0, #1
    c73a:	469c      	mov	ip, r3
    c73c:	2e00      	cmp	r6, #0
    c73e:	d068      	beq.n	c812 <__udivmoddi4+0x2a2>
    c740:	e9c6 4c00 	strd	r4, ip, [r6]
    c744:	2100      	movs	r1, #0
    c746:	e764      	b.n	c612 <__udivmoddi4+0xa2>
    c748:	4608      	mov	r0, r1
    c74a:	e7f7      	b.n	c73c <__udivmoddi4+0x1cc>
    c74c:	f1c1 0c20 	rsb	ip, r1, #32
    c750:	408b      	lsls	r3, r1
    c752:	fa22 f40c 	lsr.w	r4, r2, ip
    c756:	431c      	orrs	r4, r3
    c758:	fa02 f501 	lsl.w	r5, r2, r1
    c75c:	fa00 f301 	lsl.w	r3, r0, r1
    c760:	fa27 f20c 	lsr.w	r2, r7, ip
    c764:	fa20 fb0c 	lsr.w	fp, r0, ip
    c768:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c76c:	4313      	orrs	r3, r2
    c76e:	fbbb f8f9 	udiv	r8, fp, r9
    c772:	fa1f fe84 	uxth.w	lr, r4
    c776:	fb09 bb18 	mls	fp, r9, r8, fp
    c77a:	0c1a      	lsrs	r2, r3, #16
    c77c:	fb08 fa0e 	mul.w	sl, r8, lr
    c780:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c784:	4592      	cmp	sl, r2
    c786:	fa07 f701 	lsl.w	r7, r7, r1
    c78a:	d93e      	bls.n	c80a <__udivmoddi4+0x29a>
    c78c:	18a2      	adds	r2, r4, r2
    c78e:	f108 30ff 	add.w	r0, r8, #4294967295
    c792:	d204      	bcs.n	c79e <__udivmoddi4+0x22e>
    c794:	4592      	cmp	sl, r2
    c796:	d902      	bls.n	c79e <__udivmoddi4+0x22e>
    c798:	f1a8 0002 	sub.w	r0, r8, #2
    c79c:	4422      	add	r2, r4
    c79e:	eba2 020a 	sub.w	r2, r2, sl
    c7a2:	b29b      	uxth	r3, r3
    c7a4:	fbb2 f8f9 	udiv	r8, r2, r9
    c7a8:	fb09 2218 	mls	r2, r9, r8, r2
    c7ac:	fb08 fe0e 	mul.w	lr, r8, lr
    c7b0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c7b4:	4596      	cmp	lr, r2
    c7b6:	d92a      	bls.n	c80e <__udivmoddi4+0x29e>
    c7b8:	18a2      	adds	r2, r4, r2
    c7ba:	f108 33ff 	add.w	r3, r8, #4294967295
    c7be:	d204      	bcs.n	c7ca <__udivmoddi4+0x25a>
    c7c0:	4596      	cmp	lr, r2
    c7c2:	d902      	bls.n	c7ca <__udivmoddi4+0x25a>
    c7c4:	f1a8 0302 	sub.w	r3, r8, #2
    c7c8:	4422      	add	r2, r4
    c7ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c7ce:	fba0 9305 	umull	r9, r3, r0, r5
    c7d2:	eba2 020e 	sub.w	r2, r2, lr
    c7d6:	429a      	cmp	r2, r3
    c7d8:	46ce      	mov	lr, r9
    c7da:	4698      	mov	r8, r3
    c7dc:	d302      	bcc.n	c7e4 <__udivmoddi4+0x274>
    c7de:	d106      	bne.n	c7ee <__udivmoddi4+0x27e>
    c7e0:	454f      	cmp	r7, r9
    c7e2:	d204      	bcs.n	c7ee <__udivmoddi4+0x27e>
    c7e4:	ebb9 0e05 	subs.w	lr, r9, r5
    c7e8:	eb63 0804 	sbc.w	r8, r3, r4
    c7ec:	3801      	subs	r0, #1
    c7ee:	b186      	cbz	r6, c812 <__udivmoddi4+0x2a2>
    c7f0:	ebb7 030e 	subs.w	r3, r7, lr
    c7f4:	eb62 0708 	sbc.w	r7, r2, r8
    c7f8:	fa07 fc0c 	lsl.w	ip, r7, ip
    c7fc:	40cb      	lsrs	r3, r1
    c7fe:	ea4c 0303 	orr.w	r3, ip, r3
    c802:	40cf      	lsrs	r7, r1
    c804:	e9c6 3700 	strd	r3, r7, [r6]
    c808:	e79c      	b.n	c744 <__udivmoddi4+0x1d4>
    c80a:	4640      	mov	r0, r8
    c80c:	e7c7      	b.n	c79e <__udivmoddi4+0x22e>
    c80e:	4643      	mov	r3, r8
    c810:	e7db      	b.n	c7ca <__udivmoddi4+0x25a>
    c812:	4631      	mov	r1, r6
    c814:	e6fd      	b.n	c612 <__udivmoddi4+0xa2>
    c816:	2804      	cmp	r0, #4
    c818:	d202      	bcs.n	c820 <__udivmoddi4+0x2b0>
    c81a:	f04f 0028 	mov.w	r0, #40	; 0x28
    c81e:	4770      	bx	lr
    c820:	d102      	bne.n	c828 <__udivmoddi4+0x2b8>
    c822:	f04f 0010 	mov.w	r0, #16
    c826:	4770      	bx	lr
    c828:	f04f 0000 	mov.w	r0, #0
    c82c:	4770      	bx	lr
    c82e:	2100      	movs	r1, #0
    c830:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c834:	f800 1f24 	strb.w	r1, [r0, #36]!
    c838:	7041      	strb	r1, [r0, #1]
    c83a:	4770      	bx	lr

0000c83c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c83c:	b570      	push	{r4, r5, r6, lr}
    c83e:	f7f3 fcdf 	bl	200 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c842:	4605      	mov	r5, r0
    c844:	2400      	movs	r4, #0
    c846:	e006      	b.n	c856 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c848:	4620      	mov	r0, r4
    c84a:	f7f3 fcdf 	bl	20c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c84e:	f7ff ffee 	bl	c82e <__udivmoddi4+0x2be>
    c852:	1c64      	adds	r4, r4, #1
    c854:	b2e4      	uxtb	r4, r4
    c856:	42ac      	cmp	r4, r5
    c858:	d3f6      	bcc.n	c848 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c85a:	bd70      	pop	{r4, r5, r6, pc}

0000c85c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    c85c:	f7f6 b898 	b.w	2990 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000c860 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    c860:	b510      	push	{r4, lr}
    c862:	2000      	movs	r0, #0
    c864:	f7f6 fbba 	bl	2fdc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    c868:	6800      	ldr	r0, [r0, #0]
    c86a:	2800      	cmp	r0, #0
    c86c:	bf18      	it	ne
    c86e:	2001      	movne	r0, #1
    c870:	bd10      	pop	{r4, pc}

0000c872 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>:
    c872:	f000 b80d 	b.w	c890 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>

0000c876 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c876:	0a41      	lsrs	r1, r0, #9
    c878:	f643 5209 	movw	r2, #15625	; 0x3d09
    c87c:	4351      	muls	r1, r2
    c87e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c882:	fb10 f002 	smulbb	r0, r0, r2
    c886:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c88a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c88e:	4770      	bx	lr

0000c890 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>:
    c890:	2000      	movs	r0, #0
    c892:	4770      	bx	lr
    c894:	2800      	cmp	r0, #0
    c896:	db09      	blt.n	c8ac <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1c>
    c898:	f000 021f 	and.w	r2, r0, #31
    c89c:	2101      	movs	r1, #1
    c89e:	4091      	lsls	r1, r2
    c8a0:	0940      	lsrs	r0, r0, #5
    c8a2:	0080      	lsls	r0, r0, #2
    c8a4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c8a8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c8ac:	4770      	bx	lr
    c8ae:	2800      	cmp	r0, #0
    c8b0:	db0d      	blt.n	c8ce <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x3e>
    c8b2:	f000 021f 	and.w	r2, r0, #31
    c8b6:	2101      	movs	r1, #1
    c8b8:	4091      	lsls	r1, r2
    c8ba:	0940      	lsrs	r0, r0, #5
    c8bc:	0080      	lsls	r0, r0, #2
    c8be:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c8c2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c8c6:	f3bf 8f4f 	dsb	sy
    c8ca:	f3bf 8f6f 	isb	sy
    c8ce:	4770      	bx	lr

0000c8d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c8d0:	b570      	push	{r4, r5, r6, lr}
    c8d2:	4602      	mov	r2, r0
    c8d4:	2000      	movs	r0, #0
    c8d6:	2900      	cmp	r1, #0
    c8d8:	d01d      	beq.n	c916 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c8da:	fba2 0101 	umull	r0, r1, r2, r1
    c8de:	0a40      	lsrs	r0, r0, #9
    c8e0:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c8e4:	0a49      	lsrs	r1, r1, #9
    c8e6:	1c40      	adds	r0, r0, #1
    c8e8:	f141 0100 	adc.w	r1, r1, #0
    c8ec:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c8f0:	1883      	adds	r3, r0, r2
    c8f2:	f141 0100 	adc.w	r1, r1, #0
    c8f6:	1c5b      	adds	r3, r3, #1
    c8f8:	f141 0400 	adc.w	r4, r1, #0
    c8fc:	2100      	movs	r1, #0
    c8fe:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c902:	41a1      	sbcs	r1, r4
    c904:	d203      	bcs.n	c90e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c906:	2172      	movs	r1, #114	; 0x72
    c908:	206d      	movs	r0, #109	; 0x6d
    c90a:	f7f6 ff5b 	bl	37c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c90e:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c912:	fbb0 f0f2 	udiv	r0, r0, r2
    c916:	bd70      	pop	{r4, r5, r6, pc}
    c918:	5840      	ldr	r0, [r0, r1]
    c91a:	2800      	cmp	r0, #0
    c91c:	d000      	beq.n	c920 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c91e:	2001      	movs	r0, #1
    c920:	4770      	bx	lr
    c922:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c926:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c92a:	f002 0201 	and.w	r2, r2, #1
    c92e:	03c0      	lsls	r0, r0, #15
    c930:	d503      	bpl.n	c93a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c932:	428a      	cmp	r2, r1
    c934:	d101      	bne.n	c93a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c936:	2001      	movs	r0, #1
    c938:	4770      	bx	lr
    c93a:	2000      	movs	r0, #0
    c93c:	4770      	bx	lr

0000c93e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c93e:	b510      	push	{r4, lr}
    c940:	2101      	movs	r1, #1
    c942:	0788      	lsls	r0, r1, #30
    c944:	f7f6 fee8 	bl	3718 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c948:	2800      	cmp	r0, #0
    c94a:	d000      	beq.n	c94e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c94c:	2001      	movs	r0, #1
    c94e:	bd10      	pop	{r4, pc}

0000c950 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c950:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c954:	2101      	movs	r1, #1
    c956:	6001      	str	r1, [r0, #0]
    c958:	4770      	bx	lr

0000c95a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c95a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c95e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c962:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c966:	f002 0203 	and.w	r2, r2, #3
    c96a:	03c9      	lsls	r1, r1, #15
    c96c:	d503      	bpl.n	c976 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c96e:	4282      	cmp	r2, r0
    c970:	d101      	bne.n	c976 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c972:	2001      	movs	r0, #1
    c974:	4770      	bx	lr
    c976:	2000      	movs	r0, #0
    c978:	4770      	bx	lr

0000c97a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c97a:	b510      	push	{r4, lr}
    c97c:	2100      	movs	r1, #0
    c97e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c982:	f7f6 fec9 	bl	3718 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c986:	2800      	cmp	r0, #0
    c988:	d000      	beq.n	c98c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c98a:	2001      	movs	r0, #1
    c98c:	bd10      	pop	{r4, pc}
    c98e:	2800      	cmp	r0, #0
    c990:	db09      	blt.n	c9a6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c992:	f000 021f 	and.w	r2, r0, #31
    c996:	2101      	movs	r1, #1
    c998:	4091      	lsls	r1, r2
    c99a:	0940      	lsrs	r0, r0, #5
    c99c:	0080      	lsls	r0, r0, #2
    c99e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c9a2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c9a6:	4770      	bx	lr
    c9a8:	2800      	cmp	r0, #0
    c9aa:	db0d      	blt.n	c9c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c9ac:	f000 021f 	and.w	r2, r0, #31
    c9b0:	2101      	movs	r1, #1
    c9b2:	4091      	lsls	r1, r2
    c9b4:	0940      	lsrs	r0, r0, #5
    c9b6:	0080      	lsls	r0, r0, #2
    c9b8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c9bc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c9c0:	f3bf 8f4f 	dsb	sy
    c9c4:	f3bf 8f6f 	isb	sy
    c9c8:	4770      	bx	lr
    c9ca:	1000      	.short	0x1000
    c9cc:	00fa0002 	.word	0x00fa0002
    c9d0:	0f140000 	.word	0x0f140000
    c9d4:	f9cf63a7 	.word	0xf9cf63a7
    c9d8:	f9efc477 	.word	0xf9efc477
    c9dc:	f561e931 	.word	0xf561e931
    c9e0:	749a03bc 	.word	0x749a03bc
    c9e4:	2b06      	.short	0x2b06
    c9e6:	2800      	cmp	r0, #0
    c9e8:	db09      	blt.n	c9fe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c9ea:	f000 021f 	and.w	r2, r0, #31
    c9ee:	2101      	movs	r1, #1
    c9f0:	4091      	lsls	r1, r2
    c9f2:	0940      	lsrs	r0, r0, #5
    c9f4:	0080      	lsls	r0, r0, #2
    c9f6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c9fa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c9fe:	4770      	bx	lr

0000ca00 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    ca00:	f3ef 8110 	mrs	r1, PRIMASK
    ca04:	b672      	cpsid	i
    ca06:	7802      	ldrb	r2, [r0, #0]
    ca08:	2a01      	cmp	r2, #1
    ca0a:	d001      	beq.n	ca10 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    ca0c:	2201      	movs	r2, #1
    ca0e:	e000      	b.n	ca12 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    ca10:	2200      	movs	r2, #0
    ca12:	2301      	movs	r3, #1
    ca14:	7003      	strb	r3, [r0, #0]
    ca16:	b901      	cbnz	r1, ca1a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    ca18:	b662      	cpsie	i
    ca1a:	b10a      	cbz	r2, ca20 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    ca1c:	2000      	movs	r0, #0
    ca1e:	4770      	bx	lr
    ca20:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ca24:	4770      	bx	lr

0000ca26 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    ca26:	2100      	movs	r1, #0
    ca28:	7001      	strb	r1, [r0, #0]
    ca2a:	4608      	mov	r0, r1
    ca2c:	4770      	bx	lr

0000ca2e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    ca2e:	f3ef 8110 	mrs	r1, PRIMASK
    ca32:	b672      	cpsid	i
    ca34:	2200      	movs	r2, #0
    ca36:	7002      	strb	r2, [r0, #0]
    ca38:	b901      	cbnz	r1, ca3c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    ca3a:	b662      	cpsie	i
    ca3c:	2000      	movs	r0, #0
    ca3e:	4770      	bx	lr

0000ca40 <mpsl_low_priority_process>:
    ca40:	f7f6 bfb0 	b.w	39a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000ca44 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    ca44:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca48:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ca4c:	280f      	cmp	r0, #15
    ca4e:	d001      	beq.n	ca54 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    ca50:	2000      	movs	r0, #0
    ca52:	4770      	bx	lr
    ca54:	2001      	movs	r0, #1
    ca56:	4770      	bx	lr

0000ca58 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    ca58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca5c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ca60:	280a      	cmp	r0, #10
    ca62:	d001      	beq.n	ca68 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    ca64:	2000      	movs	r0, #0
    ca66:	4770      	bx	lr
    ca68:	2001      	movs	r0, #1
    ca6a:	4770      	bx	lr

0000ca6c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    ca6c:	b500      	push	{lr}
    ca6e:	f7ff fff3 	bl	ca58 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ca72:	b120      	cbz	r0, ca7e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    ca74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca78:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ca7c:	b108      	cbz	r0, ca82 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    ca7e:	2000      	movs	r0, #0
    ca80:	bd00      	pop	{pc}
    ca82:	2001      	movs	r0, #1
    ca84:	bd00      	pop	{pc}

0000ca86 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    ca86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca8a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ca8e:	280e      	cmp	r0, #14
    ca90:	d001      	beq.n	ca96 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    ca92:	2000      	movs	r0, #0
    ca94:	4770      	bx	lr
    ca96:	2001      	movs	r0, #1
    ca98:	4770      	bx	lr

0000ca9a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    ca9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca9e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    caa2:	2810      	cmp	r0, #16
    caa4:	d001      	beq.n	caaa <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    caa6:	2000      	movs	r0, #0
    caa8:	4770      	bx	lr
    caaa:	2001      	movs	r0, #1
    caac:	4770      	bx	lr

0000caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    caae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cab2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cab6:	2806      	cmp	r0, #6
    cab8:	d003      	beq.n	cac2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    caba:	1c40      	adds	r0, r0, #1
    cabc:	d001      	beq.n	cac2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    cabe:	2000      	movs	r0, #0
    cac0:	4770      	bx	lr
    cac2:	2001      	movs	r0, #1
    cac4:	4770      	bx	lr

0000cac6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    cac6:	b500      	push	{lr}
    cac8:	f7ff fff1 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cacc:	b148      	cbz	r0, cae2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cace:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cad2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cad6:	2806      	cmp	r0, #6
    cad8:	d303      	bcc.n	cae2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cada:	1c40      	adds	r0, r0, #1
    cadc:	d001      	beq.n	cae2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cade:	2001      	movs	r0, #1
    cae0:	bd00      	pop	{pc}
    cae2:	2000      	movs	r0, #0
    cae4:	bd00      	pop	{pc}

0000cae6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    cae6:	b500      	push	{lr}
    cae8:	f7ff ffe1 	bl	caae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    caec:	b138      	cbz	r0, cafe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    caee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    caf2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    caf6:	2806      	cmp	r0, #6
    caf8:	d303      	bcc.n	cb02 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cafa:	1c40      	adds	r0, r0, #1
    cafc:	d001      	beq.n	cb02 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cafe:	2000      	movs	r0, #0
    cb00:	bd00      	pop	{pc}
    cb02:	2001      	movs	r0, #1
    cb04:	bd00      	pop	{pc}

0000cb06 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    cb06:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cb0a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cb0e:	280d      	cmp	r0, #13
    cb10:	d001      	beq.n	cb16 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    cb12:	2000      	movs	r0, #0
    cb14:	4770      	bx	lr
    cb16:	2001      	movs	r0, #1
    cb18:	4770      	bx	lr

0000cb1a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    cb1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cb1e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cb22:	2808      	cmp	r0, #8
    cb24:	d001      	beq.n	cb2a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    cb26:	2000      	movs	r0, #0
    cb28:	4770      	bx	lr
    cb2a:	2001      	movs	r0, #1
    cb2c:	4770      	bx	lr

0000cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    cb2e:	b4f0      	push	{r4, r5, r6, r7}
    cb30:	ea80 0c01 	eor.w	ip, r0, r1
    cb34:	4603      	mov	r3, r0
    cb36:	f01c 0f03 	tst.w	ip, #3
    cb3a:	d13c      	bne.n	cbb6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cb3c:	f013 0f03 	tst.w	r3, #3
    cb40:	d00b      	beq.n	cb5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    cb42:	2a00      	cmp	r2, #0
    cb44:	bf04      	itt	eq
    cb46:	bcf0      	popeq	{r4, r5, r6, r7}
    cb48:	4770      	bxeq	lr
    cb4a:	f811 cb01 	ldrb.w	ip, [r1], #1
    cb4e:	f803 cb01 	strb.w	ip, [r3], #1
    cb52:	1e52      	subs	r2, r2, #1
    cb54:	f013 0f03 	tst.w	r3, #3
    cb58:	d1f3      	bne.n	cb42 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    cb5a:	2a03      	cmp	r2, #3
    cb5c:	d94f      	bls.n	cbfe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cb5e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cb62:	d24c      	bcs.n	cbfe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cb64:	f1c2 0c00 	rsb	ip, r2, #0
    cb68:	ea4f 74ec 	mov.w	r4, ip, asr #31
    cb6c:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    cb70:	ea4f 0cac 	mov.w	ip, ip, asr #2
    cb74:	f1cc 0c00 	rsb	ip, ip, #0
    cb78:	f1bc 0f00 	cmp.w	ip, #0
    cb7c:	dd1b      	ble.n	cbb6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cb7e:	1f0d      	subs	r5, r1, #4
    cb80:	1f1c      	subs	r4, r3, #4
    cb82:	f01c 0f01 	tst.w	ip, #1
    cb86:	d003      	beq.n	cb90 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    cb88:	f855 6f04 	ldr.w	r6, [r5, #4]!
    cb8c:	f844 6f04 	str.w	r6, [r4, #4]!
    cb90:	ea5f 066c 	movs.w	r6, ip, asr #1
    cb94:	d007      	beq.n	cba6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    cb96:	686f      	ldr	r7, [r5, #4]
    cb98:	6067      	str	r7, [r4, #4]
    cb9a:	f855 7f08 	ldr.w	r7, [r5, #8]!
    cb9e:	f844 7f08 	str.w	r7, [r4, #8]!
    cba2:	1e76      	subs	r6, r6, #1
    cba4:	d1f7      	bne.n	cb96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    cba6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    cbaa:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    cbae:	f1cc 0c00 	rsb	ip, ip, #0
    cbb2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    cbb6:	2a00      	cmp	r2, #0
    cbb8:	bf04      	itt	eq
    cbba:	bcf0      	popeq	{r4, r5, r6, r7}
    cbbc:	4770      	bxeq	lr
    cbbe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cbc2:	d226      	bcs.n	cc12 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    cbc4:	2a00      	cmp	r2, #0
    cbc6:	bfdc      	itt	le
    cbc8:	bcf0      	pople	{r4, r5, r6, r7}
    cbca:	4770      	bxle	lr
    cbcc:	1e49      	subs	r1, r1, #1
    cbce:	1e5b      	subs	r3, r3, #1
    cbd0:	f012 0f01 	tst.w	r2, #1
    cbd4:	d003      	beq.n	cbde <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    cbd6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    cbda:	f803 cf01 	strb.w	ip, [r3, #1]!
    cbde:	1052      	asrs	r2, r2, #1
    cbe0:	bf04      	itt	eq
    cbe2:	bcf0      	popeq	{r4, r5, r6, r7}
    cbe4:	4770      	bxeq	lr
    cbe6:	f891 c001 	ldrb.w	ip, [r1, #1]
    cbea:	f883 c001 	strb.w	ip, [r3, #1]
    cbee:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    cbf2:	f803 cf02 	strb.w	ip, [r3, #2]!
    cbf6:	1e52      	subs	r2, r2, #1
    cbf8:	d1f5      	bne.n	cbe6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    cbfa:	bcf0      	pop	{r4, r5, r6, r7}
    cbfc:	4770      	bx	lr
    cbfe:	2a04      	cmp	r2, #4
    cc00:	d3d9      	bcc.n	cbb6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cc02:	f851 cb04 	ldr.w	ip, [r1], #4
    cc06:	1f12      	subs	r2, r2, #4
    cc08:	f843 cb04 	str.w	ip, [r3], #4
    cc0c:	2a04      	cmp	r2, #4
    cc0e:	d2f8      	bcs.n	cc02 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    cc10:	e7d1      	b.n	cbb6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cc12:	f811 cb01 	ldrb.w	ip, [r1], #1
    cc16:	f803 cb01 	strb.w	ip, [r3], #1
    cc1a:	1e52      	subs	r2, r2, #1
    cc1c:	d1f9      	bne.n	cc12 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    cc1e:	bcf0      	pop	{r4, r5, r6, r7}
    cc20:	4770      	bx	lr

0000cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    cc22:	b470      	push	{r4, r5, r6}
    cc24:	4603      	mov	r3, r0
    cc26:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    cc2a:	f010 0f03 	tst.w	r0, #3
    cc2e:	d009      	beq.n	cc44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    cc30:	2a00      	cmp	r2, #0
    cc32:	bf04      	itt	eq
    cc34:	bc70      	popeq	{r4, r5, r6}
    cc36:	4770      	bxeq	lr
    cc38:	f803 cb01 	strb.w	ip, [r3], #1
    cc3c:	1e52      	subs	r2, r2, #1
    cc3e:	f013 0f03 	tst.w	r3, #3
    cc42:	d1f5      	bne.n	cc30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    cc44:	b2c9      	uxtb	r1, r1
    cc46:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    cc4a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    cc4e:	2a03      	cmp	r2, #3
    cc50:	d939      	bls.n	ccc6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    cc52:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cc56:	d236      	bcs.n	ccc6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    cc58:	4251      	negs	r1, r2
    cc5a:	17cc      	asrs	r4, r1, #31
    cc5c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    cc60:	1089      	asrs	r1, r1, #2
    cc62:	424e      	negs	r6, r1
    cc64:	2e00      	cmp	r6, #0
    cc66:	dd11      	ble.n	cc8c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cc68:	1f19      	subs	r1, r3, #4
    cc6a:	f016 0f01 	tst.w	r6, #1
    cc6e:	bf18      	it	ne
    cc70:	f841 5f04 	strne.w	r5, [r1, #4]!
    cc74:	1074      	asrs	r4, r6, #1
    cc76:	d004      	beq.n	cc82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    cc78:	604d      	str	r5, [r1, #4]
    cc7a:	f841 5f08 	str.w	r5, [r1, #8]!
    cc7e:	1e64      	subs	r4, r4, #1
    cc80:	d1fa      	bne.n	cc78 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    cc82:	4271      	negs	r1, r6
    cc84:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    cc88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    cc8c:	2a00      	cmp	r2, #0
    cc8e:	bf04      	itt	eq
    cc90:	bc70      	popeq	{r4, r5, r6}
    cc92:	4770      	bxeq	lr
    cc94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cc98:	d21d      	bcs.n	ccd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cc9a:	2a00      	cmp	r2, #0
    cc9c:	bfdc      	itt	le
    cc9e:	bc70      	pople	{r4, r5, r6}
    cca0:	4770      	bxle	lr
    cca2:	1e59      	subs	r1, r3, #1
    cca4:	f012 0f01 	tst.w	r2, #1
    cca8:	bf18      	it	ne
    ccaa:	f801 cf01 	strbne.w	ip, [r1, #1]!
    ccae:	1052      	asrs	r2, r2, #1
    ccb0:	bf04      	itt	eq
    ccb2:	bc70      	popeq	{r4, r5, r6}
    ccb4:	4770      	bxeq	lr
    ccb6:	f881 c001 	strb.w	ip, [r1, #1]
    ccba:	f801 cf02 	strb.w	ip, [r1, #2]!
    ccbe:	1e52      	subs	r2, r2, #1
    ccc0:	d1f9      	bne.n	ccb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    ccc2:	bc70      	pop	{r4, r5, r6}
    ccc4:	4770      	bx	lr
    ccc6:	2a04      	cmp	r2, #4
    ccc8:	d3e0      	bcc.n	cc8c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ccca:	1f12      	subs	r2, r2, #4
    cccc:	f843 5b04 	str.w	r5, [r3], #4
    ccd0:	2a04      	cmp	r2, #4
    ccd2:	d2fa      	bcs.n	ccca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    ccd4:	e7da      	b.n	cc8c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ccd6:	f803 cb01 	strb.w	ip, [r3], #1
    ccda:	1e52      	subs	r2, r2, #1
    ccdc:	d1fb      	bne.n	ccd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    ccde:	bc70      	pop	{r4, r5, r6}
    cce0:	4770      	bx	lr
    cce2:	2107      	movs	r1, #7
    cce4:	7001      	strb	r1, [r0, #0]
    cce6:	2000      	movs	r0, #0
    cce8:	4770      	bx	lr
    ccea:	2000      	movs	r0, #0
    ccec:	4770      	bx	lr
    ccee:	2000      	movs	r0, #0
    ccf0:	4770      	bx	lr
    ccf2:	2000      	movs	r0, #0
    ccf4:	4770      	bx	lr
    ccf6:	b108      	cbz	r0, ccfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xda>
    ccf8:	2000      	movs	r0, #0
    ccfa:	4770      	bx	lr
    ccfc:	f06f 0015 	mvn.w	r0, #21
    cd00:	4770      	bx	lr
    cd02:	f04f 30ff 	mov.w	r0, #4294967295
    cd06:	4770      	bx	lr
    cd08:	2000      	movs	r0, #0
    cd0a:	4770      	bx	lr
    cd0c:	2000      	movs	r0, #0
    cd0e:	4770      	bx	lr
    cd10:	f04f 30ff 	mov.w	r0, #4294967295
    cd14:	4770      	bx	lr
    cd16:	4770      	bx	lr
    cd18:	4770      	bx	lr
    cd1a:	2000      	movs	r0, #0
    cd1c:	4770      	bx	lr
    cd1e:	2100      	movs	r1, #0
    cd20:	7001      	strb	r1, [r0, #0]
    cd22:	4770      	bx	lr
    cd24:	f04f 30ff 	mov.w	r0, #4294967295
    cd28:	4770      	bx	lr
    cd2a:	f04f 30ff 	mov.w	r0, #4294967295
    cd2e:	4770      	bx	lr
    cd30:	2100      	movs	r1, #0
    cd32:	7001      	strb	r1, [r0, #0]
    cd34:	4770      	bx	lr
    cd36:	f04f 30ff 	mov.w	r0, #4294967295
    cd3a:	4770      	bx	lr
    cd3c:	f04f 30ff 	mov.w	r0, #4294967295
    cd40:	4770      	bx	lr
    cd42:	7800      	ldrb	r0, [r0, #0]
    cd44:	2800      	cmp	r0, #0
    cd46:	d001      	beq.n	cd4c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12a>
    cd48:	f06f 0015 	mvn.w	r0, #21
    cd4c:	4770      	bx	lr
    cd4e:	2000      	movs	r0, #0
    cd50:	4770      	bx	lr
    cd52:	2200      	movs	r2, #0
    cd54:	f000 b800 	b.w	cd58 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000cd58 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    cd58:	b570      	push	{r4, r5, r6, lr}
    cd5a:	4614      	mov	r4, r2
    cd5c:	460d      	mov	r5, r1
    cd5e:	1b00      	subs	r0, r0, r4
    cd60:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    cd64:	4288      	cmp	r0, r1
    cd66:	da01      	bge.n	cd6c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    cd68:	4608      	mov	r0, r1
    cd6a:	e002      	b.n	cd72 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    cd6c:	287f      	cmp	r0, #127	; 0x7f
    cd6e:	dd00      	ble.n	cd72 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    cd70:	207f      	movs	r0, #127	; 0x7f
    cd72:	b240      	sxtb	r0, r0
    cd74:	f7f3 fa12 	bl	19c <mpsl_tx_power_radio_supported_power_adjust>
    cd78:	7028      	strb	r0, [r5, #0]
    cd7a:	706c      	strb	r4, [r5, #1]
    cd7c:	2100      	movs	r1, #0
    cd7e:	4420      	add	r0, r4
    cd80:	70a9      	strb	r1, [r5, #2]
    cd82:	b240      	sxtb	r0, r0
    cd84:	bd70      	pop	{r4, r5, r6, pc}
    cd86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd8a:	4681      	mov	r9, r0
    cd8c:	9000      	str	r0, [sp, #0]
    cd8e:	4615      	mov	r5, r2
    cd90:	460c      	mov	r4, r1
    cd92:	4668      	mov	r0, sp
    cd94:	f7f6 ffc0 	bl	3d18 <mpsl_fem_device_config_254_apply_get+0x68>
    cd98:	7820      	ldrb	r0, [r4, #0]
    cd9a:	7861      	ldrb	r1, [r4, #1]
    cd9c:	46a8      	mov	r8, r5
    cd9e:	2600      	movs	r6, #0
    cda0:	4408      	add	r0, r1
    cda2:	b2c7      	uxtb	r7, r0
    cda4:	4635      	mov	r5, r6
    cda6:	e008      	b.n	cdba <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x62>
    cda8:	7a23      	ldrb	r3, [r4, #8]
    cdaa:	79e2      	ldrb	r2, [r4, #7]
    cdac:	79a1      	ldrb	r1, [r4, #6]
    cdae:	7960      	ldrb	r0, [r4, #5]
    cdb0:	f000 fe6b 	bl	da8a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cdb4:	1c6d      	adds	r5, r5, #1
    cdb6:	4406      	add	r6, r0
    cdb8:	b2ed      	uxtb	r5, r5
    cdba:	42bd      	cmp	r5, r7
    cdbc:	d3f4      	bcc.n	cda8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x50>
    cdbe:	9800      	ldr	r0, [sp, #0]
    cdc0:	1cc0      	adds	r0, r0, #3
    cdc2:	f020 0003 	bic.w	r0, r0, #3
    cdc6:	9000      	str	r0, [sp, #0]
    cdc8:	f1b8 0f00 	cmp.w	r8, #0
    cdcc:	d000      	beq.n	cdd0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x78>
    cdce:	2000      	movs	r0, #0
    cdd0:	4632      	mov	r2, r6
    cdd2:	4639      	mov	r1, r7
    cdd4:	f7f7 fc5e 	bl	4694 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cdd8:	9900      	ldr	r1, [sp, #0]
    cdda:	4408      	add	r0, r1
    cddc:	1dc0      	adds	r0, r0, #7
    cdde:	f020 0007 	bic.w	r0, r0, #7
    cde2:	9000      	str	r0, [sp, #0]
    cde4:	eba0 0009 	sub.w	r0, r0, r9
    cde8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000cdec <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    cdec:	b510      	push	{r4, lr}
    cdee:	4604      	mov	r4, r0
    cdf0:	4620      	mov	r0, r4
    cdf2:	f7f7 f9bd 	bl	4170 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    cdf6:	2800      	cmp	r0, #0
    cdf8:	d006      	beq.n	ce08 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    cdfa:	78a1      	ldrb	r1, [r4, #2]
    cdfc:	7820      	ldrb	r0, [r4, #0]
    cdfe:	f7f7 f9fb 	bl	41f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    ce02:	2800      	cmp	r0, #0
    ce04:	d0f4      	beq.n	cdf0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    ce06:	2001      	movs	r0, #1
    ce08:	bd10      	pop	{r4, pc}

0000ce0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ce0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce0e:	4604      	mov	r4, r0
    ce10:	f891 c000 	ldrb.w	ip, [r1]
    ce14:	460d      	mov	r5, r1
    ce16:	2000      	movs	r0, #0
    ce18:	2313      	movs	r3, #19
    ce1a:	2710      	movs	r7, #16
    ce1c:	223e      	movs	r2, #62	; 0x3e
    ce1e:	2612      	movs	r6, #18
    ce20:	f04f 0a0c 	mov.w	sl, #12
    ce24:	f04f 0e05 	mov.w	lr, #5
    ce28:	f04f 0901 	mov.w	r9, #1
    ce2c:	f104 010d 	add.w	r1, r4, #13
    ce30:	f04f 0b11 	mov.w	fp, #17
    ce34:	f1bc 0f26 	cmp.w	ip, #38	; 0x26
    ce38:	d273      	bcs.n	cf22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    ce3a:	e8df f00c 	tbb	[pc, ip]
    ce3e:	1372      	.short	0x1372
    ce40:	fd332d2b 	.word	0xfd332d2b
    ce44:	fcd5cb73 	.word	0xfcd5cb73
    ce48:	f8f9fafb 	.word	0xf8f9fafb
    ce4c:	72f5f6f7 	.word	0x72f5f6f7
    ce50:	f4995572 	.word	0xf4995572
    ce54:	f0f1f2f3 	.word	0xf0f1f2f3
    ce58:	ed72eeef 	.word	0xed72eeef
    ce5c:	e9eaebec 	.word	0xe9eaebec
    ce60:	e672e7e8 	.word	0xe672e7e8
    ce64:	f884 a000 	strb.w	sl, [r4]
    ce68:	7928      	ldrb	r0, [r5, #4]
    ce6a:	70a0      	strb	r0, [r4, #2]
    ce6c:	7968      	ldrb	r0, [r5, #5]
    ce6e:	70e0      	strb	r0, [r4, #3]
    ce70:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ce74:	0a00      	lsrs	r0, r0, #8
    ce76:	7120      	strb	r0, [r4, #4]
    ce78:	79e8      	ldrb	r0, [r5, #7]
    ce7a:	7160      	strb	r0, [r4, #5]
    ce7c:	7a28      	ldrb	r0, [r5, #8]
    ce7e:	71a0      	strb	r0, [r4, #6]
    ce80:	8928      	ldrh	r0, [r5, #8]
    ce82:	0a00      	lsrs	r0, r0, #8
    ce84:	71e0      	strb	r0, [r4, #7]
    ce86:	7aa8      	ldrb	r0, [r5, #10]
    ce88:	7220      	strb	r0, [r4, #8]
    ce8a:	8968      	ldrh	r0, [r5, #10]
    ce8c:	0a00      	lsrs	r0, r0, #8
    ce8e:	7260      	strb	r0, [r4, #9]
    ce90:	2008      	movs	r0, #8
    ce92:	e1a7      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    ce94:	7027      	strb	r7, [r4, #0]
    ce96:	e001      	b.n	ce9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x92>
    ce98:	201a      	movs	r0, #26
    ce9a:	7020      	strb	r0, [r4, #0]
    ce9c:	7928      	ldrb	r0, [r5, #4]
    ce9e:	70a0      	strb	r0, [r4, #2]
    cea0:	2001      	movs	r0, #1
    cea2:	e19f      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    cea4:	7022      	strb	r2, [r4, #0]
    cea6:	2002      	movs	r0, #2
    cea8:	70a0      	strb	r0, [r4, #2]
    ceaa:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    ceae:	70e0      	strb	r0, [r4, #3]
    ceb0:	7aa8      	ldrb	r0, [r5, #10]
    ceb2:	7120      	strb	r0, [r4, #4]
    ceb4:	7868      	ldrb	r0, [r5, #1]
    ceb6:	7160      	strb	r0, [r4, #5]
    ceb8:	f8d5 0002 	ldr.w	r0, [r5, #2]
    cebc:	f8c4 0006 	str.w	r0, [r4, #6]
    cec0:	88e8      	ldrh	r0, [r5, #6]
    cec2:	8160      	strh	r0, [r4, #10]
    cec4:	7a28      	ldrb	r0, [r5, #8]
    cec6:	7320      	strb	r0, [r4, #12]
    cec8:	7a2e      	ldrb	r6, [r5, #8]
    ceca:	2e1f      	cmp	r6, #31
    cecc:	d300      	bcc.n	ced0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc6>
    cece:	261f      	movs	r6, #31
    ced0:	4608      	mov	r0, r1
    ced2:	4632      	mov	r2, r6
    ced4:	f105 010b 	add.w	r1, r5, #11
    ced8:	f7ff fe29 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cedc:	360d      	adds	r6, #13
    cede:	7a69      	ldrb	r1, [r5, #9]
    cee0:	55a1      	strb	r1, [r4, r6]
    cee2:	1e76      	subs	r6, r6, #1
    cee4:	b2f0      	uxtb	r0, r6
    cee6:	e17b      	b.n	d1e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
    cee8:	7022      	strb	r2, [r4, #0]
    ceea:	200b      	movs	r0, #11
    ceec:	70a0      	strb	r0, [r4, #2]
    ceee:	7928      	ldrb	r0, [r5, #4]
    cef0:	70e0      	strb	r0, [r4, #3]
    cef2:	7968      	ldrb	r0, [r5, #5]
    cef4:	7120      	strb	r0, [r4, #4]
    cef6:	79a8      	ldrb	r0, [r5, #6]
    cef8:	7160      	strb	r0, [r4, #5]
    cefa:	f8d5 0007 	ldr.w	r0, [r5, #7]
    cefe:	f8c4 0006 	str.w	r0, [r4, #6]
    cf02:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    cf06:	8160      	strh	r0, [r4, #10]
    cf08:	7b68      	ldrb	r0, [r5, #13]
    cf0a:	7320      	strb	r0, [r4, #12]
    cf0c:	f8d5 000e 	ldr.w	r0, [r5, #14]
    cf10:	f8c4 000d 	str.w	r0, [r4, #13]
    cf14:	8a68      	ldrh	r0, [r5, #18]
    cf16:	f8a4 0011 	strh.w	r0, [r4, #17]
    cf1a:	7d28      	ldrb	r0, [r5, #20]
    cf1c:	74e0      	strb	r0, [r4, #19]
    cf1e:	4630      	mov	r0, r6
    cf20:	e160      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    cf22:	e161      	b.n	d1e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3de>
    cf24:	7022      	strb	r2, [r4, #0]
    cf26:	f884 9002 	strb.w	r9, [r4, #2]
    cf2a:	7928      	ldrb	r0, [r5, #4]
    cf2c:	70e0      	strb	r0, [r4, #3]
    cf2e:	79a8      	ldrb	r0, [r5, #6]
    cf30:	7120      	strb	r0, [r4, #4]
    cf32:	88e8      	ldrh	r0, [r5, #6]
    cf34:	0a00      	lsrs	r0, r0, #8
    cf36:	7160      	strb	r0, [r4, #5]
    cf38:	7a28      	ldrb	r0, [r5, #8]
    cf3a:	71a0      	strb	r0, [r4, #6]
    cf3c:	7a68      	ldrb	r0, [r5, #9]
    cf3e:	71e0      	strb	r0, [r4, #7]
    cf40:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cf44:	60a0      	str	r0, [r4, #8]
    cf46:	89e8      	ldrh	r0, [r5, #14]
    cf48:	81a0      	strh	r0, [r4, #12]
    cf4a:	7c28      	ldrb	r0, [r5, #16]
    cf4c:	73a0      	strb	r0, [r4, #14]
    cf4e:	8a28      	ldrh	r0, [r5, #16]
    cf50:	0a00      	lsrs	r0, r0, #8
    cf52:	73e0      	strb	r0, [r4, #15]
    cf54:	7ca8      	ldrb	r0, [r5, #18]
    cf56:	7420      	strb	r0, [r4, #16]
    cf58:	8a68      	ldrh	r0, [r5, #18]
    cf5a:	0a00      	lsrs	r0, r0, #8
    cf5c:	7460      	strb	r0, [r4, #17]
    cf5e:	7d28      	ldrb	r0, [r5, #20]
    cf60:	74a0      	strb	r0, [r4, #18]
    cf62:	8aa8      	ldrh	r0, [r5, #20]
    cf64:	0a00      	lsrs	r0, r0, #8
    cf66:	74e0      	strb	r0, [r4, #19]
    cf68:	7da8      	ldrb	r0, [r5, #22]
    cf6a:	7520      	strb	r0, [r4, #20]
    cf6c:	4618      	mov	r0, r3
    cf6e:	e139      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    cf70:	7022      	strb	r2, [r4, #0]
    cf72:	200a      	movs	r0, #10
    cf74:	70a0      	strb	r0, [r4, #2]
    cf76:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    cf7a:	70e0      	strb	r0, [r4, #3]
    cf7c:	78a8      	ldrb	r0, [r5, #2]
    cf7e:	7120      	strb	r0, [r4, #4]
    cf80:	8868      	ldrh	r0, [r5, #2]
    cf82:	0a00      	lsrs	r0, r0, #8
    cf84:	7160      	strb	r0, [r4, #5]
    cf86:	7928      	ldrb	r0, [r5, #4]
    cf88:	71a0      	strb	r0, [r4, #6]
    cf8a:	7968      	ldrb	r0, [r5, #5]
    cf8c:	71e0      	strb	r0, [r4, #7]
    cf8e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cf92:	60a0      	str	r0, [r4, #8]
    cf94:	8968      	ldrh	r0, [r5, #10]
    cf96:	81a0      	strh	r0, [r4, #12]
    cf98:	68e8      	ldr	r0, [r5, #12]
    cf9a:	f8c4 000e 	str.w	r0, [r4, #14]
    cf9e:	8a28      	ldrh	r0, [r5, #16]
    cfa0:	8260      	strh	r0, [r4, #18]
    cfa2:	f8d5 0012 	ldr.w	r0, [r5, #18]
    cfa6:	6160      	str	r0, [r4, #20]
    cfa8:	8ae8      	ldrh	r0, [r5, #22]
    cfaa:	8320      	strh	r0, [r4, #24]
    cfac:	7e28      	ldrb	r0, [r5, #24]
    cfae:	76a0      	strb	r0, [r4, #26]
    cfb0:	8b28      	ldrh	r0, [r5, #24]
    cfb2:	0a00      	lsrs	r0, r0, #8
    cfb4:	76e0      	strb	r0, [r4, #27]
    cfb6:	7ea8      	ldrb	r0, [r5, #26]
    cfb8:	7720      	strb	r0, [r4, #28]
    cfba:	8b68      	ldrh	r0, [r5, #26]
    cfbc:	0a00      	lsrs	r0, r0, #8
    cfbe:	7760      	strb	r0, [r4, #29]
    cfc0:	7f28      	ldrb	r0, [r5, #28]
    cfc2:	77a0      	strb	r0, [r4, #30]
    cfc4:	8ba8      	ldrh	r0, [r5, #28]
    cfc6:	0a00      	lsrs	r0, r0, #8
    cfc8:	77e0      	strb	r0, [r4, #31]
    cfca:	7fa8      	ldrb	r0, [r5, #30]
    cfcc:	f884 0020 	strb.w	r0, [r4, #32]
    cfd0:	201f      	movs	r0, #31
    cfd2:	e107      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    cfd4:	7022      	strb	r2, [r4, #0]
    cfd6:	2014      	movs	r0, #20
    cfd8:	70a0      	strb	r0, [r4, #2]
    cfda:	7928      	ldrb	r0, [r5, #4]
    cfdc:	70e0      	strb	r0, [r4, #3]
    cfde:	88a8      	ldrh	r0, [r5, #4]
    cfe0:	0a00      	lsrs	r0, r0, #8
    cfe2:	7120      	strb	r0, [r4, #4]
    cfe4:	79a8      	ldrb	r0, [r5, #6]
    cfe6:	e151      	b.n	d28c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
    cfe8:	7022      	strb	r2, [r4, #0]
    cfea:	2004      	movs	r0, #4
    cfec:	70a0      	strb	r0, [r4, #2]
    cfee:	7928      	ldrb	r0, [r5, #4]
    cff0:	70e0      	strb	r0, [r4, #3]
    cff2:	79a8      	ldrb	r0, [r5, #6]
    cff4:	7120      	strb	r0, [r4, #4]
    cff6:	88e8      	ldrh	r0, [r5, #6]
    cff8:	0a00      	lsrs	r0, r0, #8
    cffa:	7160      	strb	r0, [r4, #5]
    cffc:	68a8      	ldr	r0, [r5, #8]
    cffe:	f8c4 0006 	str.w	r0, [r4, #6]
    d002:	68e8      	ldr	r0, [r5, #12]
    d004:	f8c4 000a 	str.w	r0, [r4, #10]
    d008:	e017      	b.n	d03a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    d00a:	e18e      	b.n	d32a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x520>
    d00c:	e160      	b.n	d2d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4c6>
    d00e:	e140      	b.n	d292 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x488>
    d010:	e16d      	b.n	d2ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4e4>
    d012:	e17b      	b.n	d30c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x502>
    d014:	e131      	b.n	d27a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x470>
    d016:	e107      	b.n	d228 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
    d018:	e0ef      	b.n	d1fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f0>
    d01a:	e0e7      	b.n	d1ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e2>
    d01c:	e0d5      	b.n	d1ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c0>
    d01e:	e0ca      	b.n	d1b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    d020:	e0b5      	b.n	d18e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x384>
    d022:	e0b9      	b.n	d198 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    d024:	e060      	b.n	d0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    d026:	e05c      	b.n	d0e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d8>
    d028:	e071      	b.n	d10e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    d02a:	e06b      	b.n	d104 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    d02c:	e04f      	b.n	d0ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    d02e:	e043      	b.n	d0b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ae>
    d030:	e036      	b.n	d0a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    d032:	e032      	b.n	d09a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d034:	e01d      	b.n	d072 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    d036:	e002      	b.n	d03e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    d038:	e072      	b.n	d120 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    d03a:	200c      	movs	r0, #12
    d03c:	e0d2      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d03e:	7022      	strb	r2, [r4, #0]
    d040:	2003      	movs	r0, #3
    d042:	70a0      	strb	r0, [r4, #2]
    d044:	7928      	ldrb	r0, [r5, #4]
    d046:	70e0      	strb	r0, [r4, #3]
    d048:	79a8      	ldrb	r0, [r5, #6]
    d04a:	7120      	strb	r0, [r4, #4]
    d04c:	88e8      	ldrh	r0, [r5, #6]
    d04e:	0a00      	lsrs	r0, r0, #8
    d050:	7160      	strb	r0, [r4, #5]
    d052:	7a28      	ldrb	r0, [r5, #8]
    d054:	71a0      	strb	r0, [r4, #6]
    d056:	8928      	ldrh	r0, [r5, #8]
    d058:	0a00      	lsrs	r0, r0, #8
    d05a:	71e0      	strb	r0, [r4, #7]
    d05c:	7aa8      	ldrb	r0, [r5, #10]
    d05e:	7220      	strb	r0, [r4, #8]
    d060:	8968      	ldrh	r0, [r5, #10]
    d062:	0a00      	lsrs	r0, r0, #8
    d064:	7260      	strb	r0, [r4, #9]
    d066:	7b28      	ldrb	r0, [r5, #12]
    d068:	72a0      	strb	r0, [r4, #10]
    d06a:	89a8      	ldrh	r0, [r5, #12]
    d06c:	0a00      	lsrs	r0, r0, #8
    d06e:	72e0      	strb	r0, [r4, #11]
    d070:	e14a      	b.n	d308 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4fe>
    d072:	7022      	strb	r2, [r4, #0]
    d074:	f884 e002 	strb.w	lr, [r4, #2]
    d078:	7928      	ldrb	r0, [r5, #4]
    d07a:	70e0      	strb	r0, [r4, #3]
    d07c:	88a8      	ldrh	r0, [r5, #4]
    d07e:	0a00      	lsrs	r0, r0, #8
    d080:	7120      	strb	r0, [r4, #4]
    d082:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d086:	f8c4 0005 	str.w	r0, [r4, #5]
    d08a:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d08e:	f8c4 0009 	str.w	r0, [r4, #9]
    d092:	89e8      	ldrh	r0, [r5, #14]
    d094:	f8a4 000d 	strh.w	r0, [r4, #13]
    d098:	e15d      	b.n	d356 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x54c>
    d09a:	f884 b000 	strb.w	fp, [r4]
    d09e:	e038      	b.n	d112 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    d0a0:	f884 e000 	strb.w	lr, [r4]
    d0a4:	7928      	ldrb	r0, [r5, #4]
    d0a6:	70a0      	strb	r0, [r4, #2]
    d0a8:	7968      	ldrb	r0, [r5, #5]
    d0aa:	70e0      	strb	r0, [r4, #3]
    d0ac:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d0b0:	0a00      	lsrs	r0, r0, #8
    d0b2:	7120      	strb	r0, [r4, #4]
    d0b4:	79e8      	ldrb	r0, [r5, #7]
    d0b6:	e0e9      	b.n	d28c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
    d0b8:	2008      	movs	r0, #8
    d0ba:	7020      	strb	r0, [r4, #0]
    d0bc:	7928      	ldrb	r0, [r5, #4]
    d0be:	70a0      	strb	r0, [r4, #2]
    d0c0:	79a8      	ldrb	r0, [r5, #6]
    d0c2:	70e0      	strb	r0, [r4, #3]
    d0c4:	88e8      	ldrh	r0, [r5, #6]
    d0c6:	0a00      	lsrs	r0, r0, #8
    d0c8:	7120      	strb	r0, [r4, #4]
    d0ca:	7a28      	ldrb	r0, [r5, #8]
    d0cc:	e0de      	b.n	d28c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
    d0ce:	2030      	movs	r0, #48	; 0x30
    d0d0:	7020      	strb	r0, [r4, #0]
    d0d2:	7928      	ldrb	r0, [r5, #4]
    d0d4:	70a0      	strb	r0, [r4, #2]
    d0d6:	79a8      	ldrb	r0, [r5, #6]
    d0d8:	70e0      	strb	r0, [r4, #3]
    d0da:	88e8      	ldrh	r0, [r5, #6]
    d0dc:	0a00      	lsrs	r0, r0, #8
    d0de:	7120      	strb	r0, [r4, #4]
    d0e0:	e089      	b.n	d1f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ec>
    d0e2:	7022      	strb	r2, [r4, #0]
    d0e4:	2007      	movs	r0, #7
    d0e6:	e0d7      	b.n	d298 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x48e>
    d0e8:	7022      	strb	r2, [r4, #0]
    d0ea:	f884 a002 	strb.w	sl, [r4, #2]
    d0ee:	7928      	ldrb	r0, [r5, #4]
    d0f0:	70e0      	strb	r0, [r4, #3]
    d0f2:	79a8      	ldrb	r0, [r5, #6]
    d0f4:	7120      	strb	r0, [r4, #4]
    d0f6:	88e8      	ldrh	r0, [r5, #6]
    d0f8:	0a00      	lsrs	r0, r0, #8
    d0fa:	7160      	strb	r0, [r4, #5]
    d0fc:	7a28      	ldrb	r0, [r5, #8]
    d0fe:	71a0      	strb	r0, [r4, #6]
    d100:	7a68      	ldrb	r0, [r5, #9]
    d102:	e055      	b.n	d1b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a6>
    d104:	1d29      	adds	r1, r5, #4
    d106:	4620      	mov	r0, r4
    d108:	f7f7 f898 	bl	423c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
    d10c:	e068      	b.n	d1e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
    d10e:	2057      	movs	r0, #87	; 0x57
    d110:	7020      	strb	r0, [r4, #0]
    d112:	7928      	ldrb	r0, [r5, #4]
    d114:	70a0      	strb	r0, [r4, #2]
    d116:	88a8      	ldrh	r0, [r5, #4]
    d118:	0a00      	lsrs	r0, r0, #8
    d11a:	70e0      	strb	r0, [r4, #3]
    d11c:	2002      	movs	r0, #2
    d11e:	e061      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d120:	7022      	strb	r2, [r4, #0]
    d122:	220d      	movs	r2, #13
    d124:	70a2      	strb	r2, [r4, #2]
    d126:	792a      	ldrb	r2, [r5, #4]
    d128:	70e2      	strb	r2, [r4, #3]
    d12a:	89ea      	ldrh	r2, [r5, #14]
    d12c:	80a2      	strh	r2, [r4, #4]
    d12e:	796a      	ldrb	r2, [r5, #5]
    d130:	71a2      	strb	r2, [r4, #6]
    d132:	f8d5 2006 	ldr.w	r2, [r5, #6]
    d136:	f8c4 2007 	str.w	r2, [r4, #7]
    d13a:	896a      	ldrh	r2, [r5, #10]
    d13c:	f8a4 200b 	strh.w	r2, [r4, #11]
    d140:	7c2a      	ldrb	r2, [r5, #16]
    d142:	4620      	mov	r0, r4
    d144:	7362      	strb	r2, [r4, #13]
    d146:	1d29      	adds	r1, r5, #4
    d148:	7c6a      	ldrb	r2, [r5, #17]
    d14a:	7382      	strb	r2, [r0, #14]
    d14c:	7b8a      	ldrb	r2, [r1, #14]
    d14e:	73c2      	strb	r2, [r0, #15]
    d150:	7e8a      	ldrb	r2, [r1, #26]
    d152:	7402      	strb	r2, [r0, #16]
    d154:	7a4a      	ldrb	r2, [r1, #9]
    d156:	7442      	strb	r2, [r0, #17]
    d158:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d15c:	f8ad 2000 	strh.w	r2, [sp]
    d160:	8242      	strh	r2, [r0, #18]
    d162:	7cca      	ldrb	r2, [r1, #19]
    d164:	7502      	strb	r2, [r0, #20]
    d166:	694a      	ldr	r2, [r1, #20]
    d168:	f8c0 2015 	str.w	r2, [r0, #21]
    d16c:	8b0a      	ldrh	r2, [r1, #24]
    d16e:	f8a0 2019 	strh.w	r2, [r0, #25]
    d172:	7a0a      	ldrb	r2, [r1, #8]
    d174:	76c2      	strb	r2, [r0, #27]
    d176:	7a0d      	ldrb	r5, [r1, #8]
    d178:	2de5      	cmp	r5, #229	; 0xe5
    d17a:	d300      	bcc.n	d17e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    d17c:	25e5      	movs	r5, #229	; 0xe5
    d17e:	462a      	mov	r2, r5
    d180:	301c      	adds	r0, #28
    d182:	311c      	adds	r1, #28
    d184:	f7ff fcd3 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d188:	351a      	adds	r5, #26
    d18a:	b2e8      	uxtb	r0, r5
    d18c:	e028      	b.n	d1e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
    d18e:	7022      	strb	r2, [r4, #0]
    d190:	f884 b002 	strb.w	fp, [r4, #2]
    d194:	4648      	mov	r0, r9
    d196:	e025      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d198:	7022      	strb	r2, [r4, #0]
    d19a:	70a6      	strb	r6, [r4, #2]
    d19c:	7928      	ldrb	r0, [r5, #4]
    d19e:	70e0      	strb	r0, [r4, #3]
    d1a0:	7968      	ldrb	r0, [r5, #5]
    d1a2:	7120      	strb	r0, [r4, #4]
    d1a4:	79a8      	ldrb	r0, [r5, #6]
    d1a6:	7160      	strb	r0, [r4, #5]
    d1a8:	88e8      	ldrh	r0, [r5, #6]
    d1aa:	0a00      	lsrs	r0, r0, #8
    d1ac:	71a0      	strb	r0, [r4, #6]
    d1ae:	7a28      	ldrb	r0, [r5, #8]
    d1b0:	71e0      	strb	r0, [r4, #7]
    d1b2:	2006      	movs	r0, #6
    d1b4:	e016      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d1b6:	7022      	strb	r2, [r4, #0]
    d1b8:	200e      	movs	r0, #14
    d1ba:	70a0      	strb	r0, [r4, #2]
    d1bc:	220f      	movs	r2, #15
    d1be:	1d29      	adds	r1, r5, #4
    d1c0:	1ce0      	adds	r0, r4, #3
    d1c2:	f7ff fcb4 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1c6:	2010      	movs	r0, #16
    d1c8:	e00c      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d1ca:	7022      	strb	r2, [r4, #0]
    d1cc:	200f      	movs	r0, #15
    d1ce:	70a0      	strb	r0, [r4, #2]
    d1d0:	7aaa      	ldrb	r2, [r5, #10]
    d1d2:	1d29      	adds	r1, r5, #4
    d1d4:	1ce0      	adds	r0, r4, #3
    d1d6:	1dd2      	adds	r2, r2, #7
    d1d8:	f7ff fca9 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1dc:	7aa8      	ldrb	r0, [r5, #10]
    d1de:	3008      	adds	r0, #8
    d1e0:	2800      	cmp	r0, #0
    d1e2:	d001      	beq.n	d1e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3de>
    d1e4:	7060      	strb	r0, [r4, #1]
    d1e6:	1c80      	adds	r0, r0, #2
    d1e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1ec:	7022      	strb	r2, [r4, #0]
    d1ee:	70a7      	strb	r7, [r4, #2]
    d1f0:	88a8      	ldrh	r0, [r5, #4]
    d1f2:	f8a4 0003 	strh.w	r0, [r4, #3]
    d1f6:	2003      	movs	r0, #3
    d1f8:	e7f4      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d1fa:	7022      	strb	r2, [r4, #0]
    d1fc:	2021      	movs	r0, #33	; 0x21
    d1fe:	70a0      	strb	r0, [r4, #2]
    d200:	7928      	ldrb	r0, [r5, #4]
    d202:	70e0      	strb	r0, [r4, #3]
    d204:	7968      	ldrb	r0, [r5, #5]
    d206:	7120      	strb	r0, [r4, #4]
    d208:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d20c:	0a00      	lsrs	r0, r0, #8
    d20e:	7160      	strb	r0, [r4, #5]
    d210:	79e8      	ldrb	r0, [r5, #7]
    d212:	71a0      	strb	r0, [r4, #6]
    d214:	7a28      	ldrb	r0, [r5, #8]
    d216:	71e0      	strb	r0, [r4, #7]
    d218:	7a68      	ldrb	r0, [r5, #9]
    d21a:	7220      	strb	r0, [r4, #8]
    d21c:	7aa8      	ldrb	r0, [r5, #10]
    d21e:	7260      	strb	r0, [r4, #9]
    d220:	7ae8      	ldrb	r0, [r5, #11]
    d222:	72a0      	strb	r0, [r4, #10]
    d224:	2009      	movs	r0, #9
    d226:	e7dd      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d228:	7022      	strb	r2, [r4, #0]
    d22a:	2018      	movs	r0, #24
    d22c:	70a0      	strb	r0, [r4, #2]
    d22e:	7928      	ldrb	r0, [r5, #4]
    d230:	70e0      	strb	r0, [r4, #3]
    d232:	f815 0f05 	ldrb.w	r0, [r5, #5]!
    d236:	7120      	strb	r0, [r4, #4]
    d238:	8828      	ldrh	r0, [r5, #0]
    d23a:	0a00      	lsrs	r0, r0, #8
    d23c:	7160      	strb	r0, [r4, #5]
    d23e:	78a8      	ldrb	r0, [r5, #2]
    d240:	71a0      	strb	r0, [r4, #6]
    d242:	8868      	ldrh	r0, [r5, #2]
    d244:	0a00      	lsrs	r0, r0, #8
    d246:	71e0      	strb	r0, [r4, #7]
    d248:	7928      	ldrb	r0, [r5, #4]
    d24a:	7220      	strb	r0, [r4, #8]
    d24c:	88a8      	ldrh	r0, [r5, #4]
    d24e:	0a00      	lsrs	r0, r0, #8
    d250:	7260      	strb	r0, [r4, #9]
    d252:	79a8      	ldrb	r0, [r5, #6]
    d254:	72a0      	strb	r0, [r4, #10]
    d256:	79e8      	ldrb	r0, [r5, #7]
    d258:	72e0      	strb	r0, [r4, #11]
    d25a:	68a8      	ldr	r0, [r5, #8]
    d25c:	60e0      	str	r0, [r4, #12]
    d25e:	89a8      	ldrh	r0, [r5, #12]
    d260:	8220      	strh	r0, [r4, #16]
    d262:	7ba8      	ldrb	r0, [r5, #14]
    d264:	74a0      	strb	r0, [r4, #18]
    d266:	7be8      	ldrb	r0, [r5, #15]
    d268:	74e0      	strb	r0, [r4, #19]
    d26a:	f8b5 000f 	ldrh.w	r0, [r5, #15]
    d26e:	0a00      	lsrs	r0, r0, #8
    d270:	7520      	strb	r0, [r4, #20]
    d272:	7c68      	ldrb	r0, [r5, #17]
    d274:	7560      	strb	r0, [r4, #21]
    d276:	2014      	movs	r0, #20
    d278:	e7b4      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d27a:	20ff      	movs	r0, #255	; 0xff
    d27c:	7020      	strb	r0, [r4, #0]
    d27e:	20a1      	movs	r0, #161	; 0xa1
    d280:	70a0      	strb	r0, [r4, #2]
    d282:	7928      	ldrb	r0, [r5, #4]
    d284:	70e0      	strb	r0, [r4, #3]
    d286:	7968      	ldrb	r0, [r5, #5]
    d288:	7120      	strb	r0, [r4, #4]
    d28a:	2000      	movs	r0, #0
    d28c:	7160      	strb	r0, [r4, #5]
    d28e:	2004      	movs	r0, #4
    d290:	e7a8      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d292:	20ff      	movs	r0, #255	; 0xff
    d294:	7020      	strb	r0, [r4, #0]
    d296:	20a2      	movs	r0, #162	; 0xa2
    d298:	70a0      	strb	r0, [r4, #2]
    d29a:	7928      	ldrb	r0, [r5, #4]
    d29c:	70e0      	strb	r0, [r4, #3]
    d29e:	88a8      	ldrh	r0, [r5, #4]
    d2a0:	0a00      	lsrs	r0, r0, #8
    d2a2:	7120      	strb	r0, [r4, #4]
    d2a4:	79a8      	ldrb	r0, [r5, #6]
    d2a6:	7160      	strb	r0, [r4, #5]
    d2a8:	88e8      	ldrh	r0, [r5, #6]
    d2aa:	0a00      	lsrs	r0, r0, #8
    d2ac:	71a0      	strb	r0, [r4, #6]
    d2ae:	7a28      	ldrb	r0, [r5, #8]
    d2b0:	71e0      	strb	r0, [r4, #7]
    d2b2:	8928      	ldrh	r0, [r5, #8]
    d2b4:	0a00      	lsrs	r0, r0, #8
    d2b6:	7220      	strb	r0, [r4, #8]
    d2b8:	7aa8      	ldrb	r0, [r5, #10]
    d2ba:	7260      	strb	r0, [r4, #9]
    d2bc:	8968      	ldrh	r0, [r5, #10]
    d2be:	0a00      	lsrs	r0, r0, #8
    d2c0:	72a0      	strb	r0, [r4, #10]
    d2c2:	7b28      	ldrb	r0, [r5, #12]
    d2c4:	72e0      	strb	r0, [r4, #11]
    d2c6:	89a8      	ldrh	r0, [r5, #12]
    d2c8:	0a00      	lsrs	r0, r0, #8
    d2ca:	7320      	strb	r0, [r4, #12]
    d2cc:	200b      	movs	r0, #11
    d2ce:	e789      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d2d0:	20ff      	movs	r0, #255	; 0xff
    d2d2:	7020      	strb	r0, [r4, #0]
    d2d4:	20a3      	movs	r0, #163	; 0xa3
    d2d6:	70a0      	strb	r0, [r4, #2]
    d2d8:	7928      	ldrb	r0, [r5, #4]
    d2da:	70e0      	strb	r0, [r4, #3]
    d2dc:	88a8      	ldrh	r0, [r5, #4]
    d2de:	0a00      	lsrs	r0, r0, #8
    d2e0:	7120      	strb	r0, [r4, #4]
    d2e2:	79a8      	ldrb	r0, [r5, #6]
    d2e4:	7160      	strb	r0, [r4, #5]
    d2e6:	79e8      	ldrb	r0, [r5, #7]
    d2e8:	71a0      	strb	r0, [r4, #6]
    d2ea:	2005      	movs	r0, #5
    d2ec:	e77a      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d2ee:	7022      	strb	r2, [r4, #0]
    d2f0:	70a3      	strb	r3, [r4, #2]
    d2f2:	7928      	ldrb	r0, [r5, #4]
    d2f4:	70e0      	strb	r0, [r4, #3]
    d2f6:	7968      	ldrb	r0, [r5, #5]
    d2f8:	7120      	strb	r0, [r4, #4]
    d2fa:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d2fe:	f8c4 0005 	str.w	r0, [r4, #5]
    d302:	8968      	ldrh	r0, [r5, #10]
    d304:	f8a4 0009 	strh.w	r0, [r4, #9]
    d308:	200a      	movs	r0, #10
    d30a:	e76b      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d30c:	20ff      	movs	r0, #255	; 0xff
    d30e:	7020      	strb	r0, [r4, #0]
    d310:	20a4      	movs	r0, #164	; 0xa4
    d312:	70a0      	strb	r0, [r4, #2]
    d314:	7928      	ldrb	r0, [r5, #4]
    d316:	70e0      	strb	r0, [r4, #3]
    d318:	88a8      	ldrh	r0, [r5, #4]
    d31a:	0a00      	lsrs	r0, r0, #8
    d31c:	7120      	strb	r0, [r4, #4]
    d31e:	79a8      	ldrb	r0, [r5, #6]
    d320:	7160      	strb	r0, [r4, #5]
    d322:	79e8      	ldrb	r0, [r5, #7]
    d324:	71a0      	strb	r0, [r4, #6]
    d326:	2007      	movs	r0, #7
    d328:	e75c      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d32a:	20ff      	movs	r0, #255	; 0xff
    d32c:	7020      	strb	r0, [r4, #0]
    d32e:	2080      	movs	r0, #128	; 0x80
    d330:	70a0      	strb	r0, [r4, #2]
    d332:	88a9      	ldrh	r1, [r5, #4]
    d334:	f8a4 1003 	strh.w	r1, [r4, #3]
    d338:	88e9      	ldrh	r1, [r5, #6]
    d33a:	f8a4 1005 	strh.w	r1, [r4, #5]
    d33e:	7a29      	ldrb	r1, [r5, #8]
    d340:	71e1      	strb	r1, [r4, #7]
    d342:	8969      	ldrh	r1, [r5, #10]
    d344:	8121      	strh	r1, [r4, #8]
    d346:	89a9      	ldrh	r1, [r5, #12]
    d348:	8161      	strh	r1, [r4, #10]
    d34a:	89e9      	ldrh	r1, [r5, #14]
    d34c:	81a1      	strh	r1, [r4, #12]
    d34e:	7c29      	ldrb	r1, [r5, #16]
    d350:	f001 0101 	and.w	r1, r1, #1
    d354:	73a1      	strb	r1, [r4, #14]
    d356:	200d      	movs	r0, #13
    d358:	e744      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>

0000d35a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d35a:	223e      	movs	r2, #62	; 0x3e
    d35c:	7002      	strb	r2, [r0, #0]
    d35e:	2201      	movs	r2, #1
    d360:	7082      	strb	r2, [r0, #2]
    d362:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d366:	70c2      	strb	r2, [r0, #3]
    d368:	788a      	ldrb	r2, [r1, #2]
    d36a:	7102      	strb	r2, [r0, #4]
    d36c:	884a      	ldrh	r2, [r1, #2]
    d36e:	0a12      	lsrs	r2, r2, #8
    d370:	7142      	strb	r2, [r0, #5]
    d372:	790a      	ldrb	r2, [r1, #4]
    d374:	7182      	strb	r2, [r0, #6]
    d376:	794a      	ldrb	r2, [r1, #5]
    d378:	71c2      	strb	r2, [r0, #7]
    d37a:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d37e:	6082      	str	r2, [r0, #8]
    d380:	894a      	ldrh	r2, [r1, #10]
    d382:	8182      	strh	r2, [r0, #12]
    d384:	7e0a      	ldrb	r2, [r1, #24]
    d386:	7382      	strb	r2, [r0, #14]
    d388:	8b0a      	ldrh	r2, [r1, #24]
    d38a:	0a12      	lsrs	r2, r2, #8
    d38c:	73c2      	strb	r2, [r0, #15]
    d38e:	7e8a      	ldrb	r2, [r1, #26]
    d390:	7402      	strb	r2, [r0, #16]
    d392:	8b4a      	ldrh	r2, [r1, #26]
    d394:	0a12      	lsrs	r2, r2, #8
    d396:	7442      	strb	r2, [r0, #17]
    d398:	7f0a      	ldrb	r2, [r1, #28]
    d39a:	7482      	strb	r2, [r0, #18]
    d39c:	8b8a      	ldrh	r2, [r1, #28]
    d39e:	0a12      	lsrs	r2, r2, #8
    d3a0:	74c2      	strb	r2, [r0, #19]
    d3a2:	7f89      	ldrb	r1, [r1, #30]
    d3a4:	7501      	strb	r1, [r0, #20]
    d3a6:	2113      	movs	r1, #19
    d3a8:	7041      	strb	r1, [r0, #1]
    d3aa:	4608      	mov	r0, r1
    d3ac:	4770      	bx	lr
    d3ae:	094a      	lsrs	r2, r1, #5
    d3b0:	f001 011f 	and.w	r1, r1, #31
    d3b4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d3b8:	40c8      	lsrs	r0, r1
    d3ba:	f000 0001 	and.w	r0, r0, #1
    d3be:	4770      	bx	lr

0000d3c0 <sdc_hci_evt_get>:
    d3c0:	b510      	push	{r4, lr}
    d3c2:	b120      	cbz	r0, d3ce <sdc_hci_evt_get+0xe>
    d3c4:	f7ff fd12 	bl	cdec <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d3c8:	b120      	cbz	r0, d3d4 <sdc_hci_evt_get+0x14>
    d3ca:	2000      	movs	r0, #0
    d3cc:	bd10      	pop	{r4, pc}
    d3ce:	f06f 0015 	mvn.w	r0, #21
    d3d2:	bd10      	pop	{r4, pc}
    d3d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d3d8:	bd10      	pop	{r4, pc}

0000d3da <sdc_hci_get>:
    d3da:	b118      	cbz	r0, d3e4 <sdc_hci_get+0xa>
    d3dc:	b111      	cbz	r1, d3e4 <sdc_hci_get+0xa>
    d3de:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d3e2:	4770      	bx	lr
    d3e4:	f06f 0015 	mvn.w	r0, #21
    d3e8:	4770      	bx	lr

0000d3ea <sdc_hci_cmd_cb_set_event_mask>:
    d3ea:	b510      	push	{r4, lr}
    d3ec:	f7f6 ff76 	bl	42dc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d3f0:	2000      	movs	r0, #0
    d3f2:	bd10      	pop	{r4, pc}

0000d3f4 <sdc_hci_cmd_vs_conn_event_extend>:
    d3f4:	b508      	push	{r3, lr}
    d3f6:	7800      	ldrb	r0, [r0, #0]
    d3f8:	f88d 0000 	strb.w	r0, [sp]
    d3fc:	4668      	mov	r0, sp
    d3fe:	f001 fdfd 	bl	effc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d402:	bd08      	pop	{r3, pc}

0000d404 <sdc_hci_cmd_vs_conn_update>:
    d404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d406:	2100      	movs	r1, #0
    d408:	9100      	str	r1, [sp, #0]
    d40a:	9101      	str	r1, [sp, #4]
    d40c:	9102      	str	r1, [sp, #8]
    d40e:	9103      	str	r1, [sp, #12]
    d410:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d414:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d418:	4291      	cmp	r1, r2
    d41a:	d304      	bcc.n	d426 <sdc_hci_cmd_vs_conn_update+0x22>
    d41c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d420:	fbb1 f1f2 	udiv	r1, r1, r2
    d424:	e005      	b.n	d432 <sdc_hci_cmd_vs_conn_update+0x2e>
    d426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d42a:	fbb1 f1f2 	udiv	r1, r1, r2
    d42e:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d432:	8802      	ldrh	r2, [r0, #0]
    d434:	b289      	uxth	r1, r1
    d436:	f8ad 2000 	strh.w	r2, [sp]
    d43a:	f8ad 1002 	strh.w	r1, [sp, #2]
    d43e:	f8ad 1004 	strh.w	r1, [sp, #4]
    d442:	88c1      	ldrh	r1, [r0, #6]
    d444:	f8ad 1006 	strh.w	r1, [sp, #6]
    d448:	8900      	ldrh	r0, [r0, #8]
    d44a:	f8ad 0008 	strh.w	r0, [sp, #8]
    d44e:	4668      	mov	r0, sp
    d450:	f001 fc06 	bl	ec60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d454:	b004      	add	sp, #16
    d456:	bd10      	pop	{r4, pc}

0000d458 <sdc_hci_cmd_vs_event_length_set>:
    d458:	f7fc bfde 	b.w	a418 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d45c <sdc_hci_cmd_vs_llpm_mode_set>:
    d45c:	b508      	push	{r3, lr}
    d45e:	7800      	ldrb	r0, [r0, #0]
    d460:	f88d 0000 	strb.w	r0, [sp]
    d464:	4668      	mov	r0, sp
    d466:	f7fc ffe3 	bl	a430 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
    d46a:	bd08      	pop	{r3, pc}

0000d46c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d46c:	7800      	ldrb	r0, [r0, #0]
    d46e:	b100      	cbz	r0, d472 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d470:	2001      	movs	r0, #1
    d472:	f001 bd9d 	b.w	efb0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d476 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d476:	b570      	push	{r4, r5, r6, lr}
    d478:	4605      	mov	r5, r0
    d47a:	2210      	movs	r2, #16
    d47c:	2100      	movs	r1, #0
    d47e:	f7ff fbd0 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d482:	2210      	movs	r2, #16
    d484:	2100      	movs	r1, #0
    d486:	f105 0010 	add.w	r0, r5, #16
    d48a:	f7ff fbca 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d48e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d492:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d496:	1c40      	adds	r0, r0, #1
    d498:	d10b      	bne.n	d4b2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d49a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d49e:	1c40      	adds	r0, r0, #1
    d4a0:	d107      	bne.n	d4b2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d4a2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d4a6:	1c40      	adds	r0, r0, #1
    d4a8:	d103      	bne.n	d4b2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d4aa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d4ae:	1c40      	adds	r0, r0, #1
    d4b0:	d00b      	beq.n	d4ca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d4b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d4b6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d4ba:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d4be:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d4c2:	612a      	str	r2, [r5, #16]
    d4c4:	6168      	str	r0, [r5, #20]
    d4c6:	61a9      	str	r1, [r5, #24]
    d4c8:	61eb      	str	r3, [r5, #28]
    d4ca:	2000      	movs	r0, #0
    d4cc:	f7f7 fbb6 	bl	4c3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d4d0:	b918      	cbnz	r0, d4da <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d4d2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d4d6:	07c0      	lsls	r0, r0, #31
    d4d8:	d118      	bne.n	d50c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d4da:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d4de:	1c40      	adds	r0, r0, #1
    d4e0:	d10b      	bne.n	d4fa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d4e2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d4e6:	1c40      	adds	r0, r0, #1
    d4e8:	d107      	bne.n	d4fa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d4ea:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d4ee:	1c40      	adds	r0, r0, #1
    d4f0:	d103      	bne.n	d4fa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d4f2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d4f6:	1c40      	adds	r0, r0, #1
    d4f8:	d008      	beq.n	d50c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d4fa:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d4fe:	6861      	ldr	r1, [r4, #4]
    d500:	68a2      	ldr	r2, [r4, #8]
    d502:	68e3      	ldr	r3, [r4, #12]
    d504:	6028      	str	r0, [r5, #0]
    d506:	6069      	str	r1, [r5, #4]
    d508:	60aa      	str	r2, [r5, #8]
    d50a:	60eb      	str	r3, [r5, #12]
    d50c:	2000      	movs	r0, #0
    d50e:	bd70      	pop	{r4, r5, r6, pc}

0000d510 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d510:	b538      	push	{r3, r4, r5, lr}
    d512:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d516:	4604      	mov	r4, r0
    d518:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d51c:	1c40      	adds	r0, r0, #1
    d51e:	d105      	bne.n	d52c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d520:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d524:	43c0      	mvns	r0, r0
    d526:	0400      	lsls	r0, r0, #16
    d528:	0c00      	lsrs	r0, r0, #16
    d52a:	d03e      	beq.n	d5aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d52c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d530:	07c0      	lsls	r0, r0, #31
    d532:	d03a      	beq.n	d5aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d534:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d538:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d53c:	f8ad 1000 	strh.w	r1, [sp]
    d540:	f8c4 0001 	str.w	r0, [r4, #1]
    d544:	f8bd 0000 	ldrh.w	r0, [sp]
    d548:	f8a4 0005 	strh.w	r0, [r4, #5]
    d54c:	79a0      	ldrb	r0, [r4, #6]
    d54e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d552:	71a0      	strb	r0, [r4, #6]
    d554:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d558:	1c40      	adds	r0, r0, #1
    d55a:	d00f      	beq.n	d57c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d55c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d560:	1c40      	adds	r0, r0, #1
    d562:	d00b      	beq.n	d57c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d564:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d568:	1c40      	adds	r0, r0, #1
    d56a:	d007      	beq.n	d57c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d56c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d570:	1c40      	adds	r0, r0, #1
    d572:	d003      	beq.n	d57c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d574:	2000      	movs	r0, #0
    d576:	f7f7 fb61 	bl	4c3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d57a:	b140      	cbz	r0, d58e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d57c:	2210      	movs	r2, #16
    d57e:	2100      	movs	r1, #0
    d580:	1de0      	adds	r0, r4, #7
    d582:	f7ff fb4e 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d586:	2001      	movs	r0, #1
    d588:	7020      	strb	r0, [r4, #0]
    d58a:	2000      	movs	r0, #0
    d58c:	bd38      	pop	{r3, r4, r5, pc}
    d58e:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d592:	6869      	ldr	r1, [r5, #4]
    d594:	68a8      	ldr	r0, [r5, #8]
    d596:	68eb      	ldr	r3, [r5, #12]
    d598:	f8c4 2007 	str.w	r2, [r4, #7]
    d59c:	f8c4 100b 	str.w	r1, [r4, #11]
    d5a0:	f8c4 000f 	str.w	r0, [r4, #15]
    d5a4:	f8c4 3013 	str.w	r3, [r4, #19]
    d5a8:	e7ed      	b.n	d586 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d5aa:	2000      	movs	r0, #0
    d5ac:	e7ec      	b.n	d588 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d5ae <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d5ae:	f001 bd17 	b.w	efe0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d5b2 <sdc_hci_cmd_ip_read_bd_addr>:
    d5b2:	f001 bd91 	b.w	f0d8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d5b6 <sdc_hci_cmd_ip_read_local_version_information>:
    d5b6:	f7fc bf61 	b.w	a47c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d5ba <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d5ba:	f001 bb2a 	b.w	ec12 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d5be <sdc_hci_cmd_le_clear_filter_accept_list>:
    d5be:	f001 bb45 	b.w	ec4c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d5c2 <sdc_hci_cmd_le_encrypt>:
    d5c2:	f001 bb9e 	b.w	ed02 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d5c6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d5c6:	8802      	ldrh	r2, [r0, #0]
    d5c8:	800a      	strh	r2, [r1, #0]
    d5ca:	f001 bba3 	b.w	ed14 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d5ce <sdc_hci_cmd_le_rand>:
    d5ce:	f001 bbba 	b.w	ed46 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d5d2 <sdc_hci_cmd_le_read_buffer_size>:
    d5d2:	f7fc bf01 	b.w	a3d8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d5d6 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d5d6:	f001 bbc5 	b.w	ed64 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d5da <sdc_hci_cmd_le_read_transmit_power>:
    d5da:	f001 bbba 	b.w	ed52 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d5de <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d5de:	f001 bbc5 	b.w	ed6c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d5e2 <sdc_hci_cmd_le_set_event_mask>:
    d5e2:	b510      	push	{r4, lr}
    d5e4:	f7f6 fe72 	bl	42cc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d5e8:	2000      	movs	r0, #0
    d5ea:	bd10      	pop	{r4, pc}

0000d5ec <sdc_hci_cmd_le_set_ext_scan_enable>:
    d5ec:	f001 bbda 	b.w	eda4 <sym_EK7VKICRIXQCWAL5OTMUQJKN6PBP4AFQGV53JNA>

0000d5f0 <sdc_hci_cmd_le_set_ext_scan_params>:
    d5f0:	f001 bbe9 	b.w	edc6 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA>

0000d5f4 <sdc_hci_cmd_le_set_host_channel_classification>:
    d5f4:	f001 bc4a 	b.w	ee8c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d5f8 <sdc_hci_cmd_le_set_random_address>:
    d5f8:	f001 bc89 	b.w	ef0e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d5fc <sdc_hci_cmd_le_set_scan_enable>:
    d5fc:	f001 bc95 	b.w	ef2a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d600 <sdc_hci_cmd_le_set_scan_params>:
    d600:	f001 bca9 	b.w	ef56 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>
    d604:	1d89      	adds	r1, r1, #6
    d606:	4408      	add	r0, r1
    d608:	4350      	muls	r0, r2
    d60a:	b280      	uxth	r0, r0
    d60c:	4770      	bx	lr
    d60e:	b570      	push	{r4, r5, r6, lr}
    d610:	880b      	ldrh	r3, [r1, #0]
    d612:	7f04      	ldrb	r4, [r0, #28]
    d614:	f100 0624 	add.w	r6, r0, #36	; 0x24
    d618:	f3c3 050e 	ubfx	r5, r3, #0, #15
    d61c:	8802      	ldrh	r2, [r0, #0]
    d61e:	442e      	add	r6, r5
    d620:	1da4      	adds	r4, r4, #6
    d622:	8836      	ldrh	r6, [r6, #0]
    d624:	4422      	add	r2, r4
    d626:	b292      	uxth	r2, r2
    d628:	4426      	add	r6, r4
    d62a:	1e54      	subs	r4, r2, #1
    d62c:	4434      	add	r4, r6
    d62e:	fb94 f4f2 	sdiv	r4, r4, r2
    d632:	fb02 5204 	mla	r2, r2, r4, r5
    d636:	8840      	ldrh	r0, [r0, #2]
    d638:	b292      	uxth	r2, r2
    d63a:	4290      	cmp	r0, r2
    d63c:	d903      	bls.n	d646 <sdc_hci_cmd_le_set_scan_params+0x46>
    d63e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d642:	4310      	orrs	r0, r2
    d644:	e002      	b.n	d64c <sdc_hci_cmd_le_set_scan_params+0x4c>
    d646:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d64a:	4398      	bics	r0, r3
    d64c:	8008      	strh	r0, [r1, #0]
    d64e:	bd70      	pop	{r4, r5, r6, pc}
    d650:	4288      	cmp	r0, r1
    d652:	d101      	bne.n	d658 <sdc_hci_cmd_le_set_scan_params+0x58>
    d654:	2001      	movs	r0, #1
    d656:	4770      	bx	lr
    d658:	2000      	movs	r0, #0
    d65a:	4770      	bx	lr
    d65c:	0442      	lsls	r2, r0, #17
    d65e:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d662:	d107      	bne.n	d674 <sdc_hci_cmd_le_set_scan_params+0x74>
    d664:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d668:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d66c:	4288      	cmp	r0, r1
    d66e:	d001      	beq.n	d674 <sdc_hci_cmd_le_set_scan_params+0x74>
    d670:	2001      	movs	r0, #1
    d672:	4770      	bx	lr
    d674:	2000      	movs	r0, #0
    d676:	4770      	bx	lr

0000d678 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d678:	88c1      	ldrh	r1, [r0, #6]
    d67a:	8880      	ldrh	r0, [r0, #4]
    d67c:	f7ff bfe8 	b.w	d650 <sdc_hci_cmd_le_set_scan_params+0x50>

0000d680 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d680:	8881      	ldrh	r1, [r0, #4]
    d682:	8900      	ldrh	r0, [r0, #8]
    d684:	f7ff bfe4 	b.w	d650 <sdc_hci_cmd_le_set_scan_params+0x50>

0000d688 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d68a:	4604      	mov	r4, r0
    d68c:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d690:	88c0      	ldrh	r0, [r0, #6]
    d692:	460f      	mov	r7, r1
    d694:	f3c0 060e 	ubfx	r6, r0, #0, #15
    d698:	8a60      	ldrh	r0, [r4, #18]
    d69a:	1999      	adds	r1, r3, r6
    d69c:	b108      	cbz	r0, d6a2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d69e:	42b8      	cmp	r0, r7
    d6a0:	d201      	bcs.n	d6a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d6a2:	2000      	movs	r0, #0
    d6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6a6:	89e0      	ldrh	r0, [r4, #14]
    d6a8:	2500      	movs	r5, #0
    d6aa:	b140      	cbz	r0, d6be <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d6ac:	f8b1 c000 	ldrh.w	ip, [r1]
    d6b0:	4560      	cmp	r0, ip
    d6b2:	d008      	beq.n	d6c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d6b4:	f240 2151 	movw	r1, #593	; 0x251
    d6b8:	2014      	movs	r0, #20
    d6ba:	f7f6 fc7f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6be:	7f60      	ldrb	r0, [r4, #29]
    d6c0:	7088      	strb	r0, [r1, #2]
    d6c2:	800d      	strh	r5, [r1, #0]
    d6c4:	e00e      	b.n	d6e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d6c6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d6ca:	4418      	add	r0, r3
    d6cc:	f10c 0c06 	add.w	ip, ip, #6
    d6d0:	44b4      	add	ip, r6
    d6d2:	4460      	add	r0, ip
    d6d4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d6d8:	f820 cc03 	strh.w	ip, [r0, #-3]
    d6dc:	f894 c020 	ldrb.w	ip, [r4, #32]
    d6e0:	f800 cc01 	strb.w	ip, [r0, #-1]
    d6e4:	89e0      	ldrh	r0, [r4, #14]
    d6e6:	4438      	add	r0, r7
    d6e8:	81e0      	strh	r0, [r4, #14]
    d6ea:	8808      	ldrh	r0, [r1, #0]
    d6ec:	4438      	add	r0, r7
    d6ee:	8008      	strh	r0, [r1, #0]
    d6f0:	b19a      	cbz	r2, d71a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d6f2:	1da1      	adds	r1, r4, #6
    d6f4:	4620      	mov	r0, r4
    d6f6:	f7ff ff8a 	bl	d60e <sdc_hci_cmd_le_set_scan_params+0xe>
    d6fa:	81e5      	strh	r5, [r4, #14]
    d6fc:	7f60      	ldrb	r0, [r4, #29]
    d6fe:	1c40      	adds	r0, r0, #1
    d700:	7760      	strb	r0, [r4, #29]
    d702:	7da0      	ldrb	r0, [r4, #22]
    d704:	f88d 0000 	strb.w	r0, [sp]
    d708:	9800      	ldr	r0, [sp, #0]
    d70a:	9000      	str	r0, [sp, #0]
    d70c:	f89d 0000 	ldrb.w	r0, [sp]
    d710:	b178      	cbz	r0, d732 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d712:	88e0      	ldrh	r0, [r4, #6]
    d714:	82a0      	strh	r0, [r4, #20]
    d716:	75a5      	strb	r5, [r4, #22]
    d718:	e00b      	b.n	d732 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d71a:	7f20      	ldrb	r0, [r4, #28]
    d71c:	89e1      	ldrh	r1, [r4, #14]
    d71e:	1d80      	adds	r0, r0, #6
    d720:	4430      	add	r0, r6
    d722:	4419      	add	r1, r3
    d724:	4408      	add	r0, r1
    d726:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d72a:	83e1      	strh	r1, [r4, #30]
    d72c:	7880      	ldrb	r0, [r0, #2]
    d72e:	f884 0020 	strb.w	r0, [r4, #32]
    d732:	8265      	strh	r5, [r4, #18]
    d734:	2001      	movs	r0, #1
    d736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d738:	1cc0      	adds	r0, r0, #3
    d73a:	4770      	bx	lr

0000d73c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d73c:	b510      	push	{r4, lr}
    d73e:	88c2      	ldrh	r2, [r0, #6]
    d740:	8943      	ldrh	r3, [r0, #10]
    d742:	f3c2 040e 	ubfx	r4, r2, #0, #15
    d746:	f3c3 010e 	ubfx	r1, r3, #0, #15
    d74a:	1b09      	subs	r1, r1, r4
    d74c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d754:	429a      	cmp	r2, r3
    d756:	d101      	bne.n	d75c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d758:	8842      	ldrh	r2, [r0, #2]
    d75a:	4411      	add	r1, r2
    d75c:	8802      	ldrh	r2, [r0, #0]
    d75e:	7f00      	ldrb	r0, [r0, #28]
    d760:	1d80      	adds	r0, r0, #6
    d762:	4410      	add	r0, r2
    d764:	b280      	uxth	r0, r0
    d766:	fb91 f0f0 	sdiv	r0, r1, r0
    d76a:	b280      	uxth	r0, r0
    d76c:	bd10      	pop	{r4, pc}

0000d76e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d76e:	b510      	push	{r4, lr}
    d770:	4604      	mov	r4, r0
    d772:	88c1      	ldrh	r1, [r0, #6]
    d774:	8880      	ldrh	r0, [r0, #4]
    d776:	f7ff ff6b 	bl	d650 <sdc_hci_cmd_le_set_scan_params+0x50>
    d77a:	b938      	cbnz	r0, d78c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
    d77c:	89a0      	ldrh	r0, [r4, #12]
    d77e:	b928      	cbnz	r0, d78c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
    d780:	8a20      	ldrh	r0, [r4, #16]
    d782:	b918      	cbnz	r0, d78c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
    d784:	88a0      	ldrh	r0, [r4, #4]
    d786:	8aa1      	ldrh	r1, [r4, #20]
    d788:	4288      	cmp	r0, r1
    d78a:	d101      	bne.n	d790 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x22>
    d78c:	2000      	movs	r0, #0
    d78e:	bd10      	pop	{r4, pc}
    d790:	1d21      	adds	r1, r4, #4
    d792:	4620      	mov	r0, r4
    d794:	f7ff ff3b 	bl	d60e <sdc_hci_cmd_le_set_scan_params+0xe>
    d798:	2000      	movs	r0, #0
    d79a:	8220      	strh	r0, [r4, #16]
    d79c:	2001      	movs	r0, #1
    d79e:	bd10      	pop	{r4, pc}

0000d7a0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d7a0:	b570      	push	{r4, r5, r6, lr}
    d7a2:	4604      	mov	r4, r0
    d7a4:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d7a8:	88c1      	ldrh	r1, [r0, #6]
    d7aa:	8880      	ldrh	r0, [r0, #4]
    d7ac:	f3c0 030e 	ubfx	r3, r0, #0, #15
    d7b0:	18d5      	adds	r5, r2, r3
    d7b2:	88a2      	ldrh	r2, [r4, #4]
    d7b4:	8aa3      	ldrh	r3, [r4, #20]
    d7b6:	429a      	cmp	r2, r3
    d7b8:	d013      	beq.n	d7e2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d7ba:	f7ff ff49 	bl	d650 <sdc_hci_cmd_le_set_scan_params+0x50>
    d7be:	b980      	cbnz	r0, d7e2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d7c0:	89a0      	ldrh	r0, [r4, #12]
    d7c2:	b970      	cbnz	r0, d7e2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d7c4:	69a4      	ldr	r4, [r4, #24]
    d7c6:	b174      	cbz	r4, d7e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    d7c8:	4620      	mov	r0, r4
    d7ca:	f7ff ff59 	bl	d680 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d7ce:	b950      	cbnz	r0, d7e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    d7d0:	8920      	ldrh	r0, [r4, #8]
    d7d2:	3424      	adds	r4, #36	; 0x24
    d7d4:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d7d8:	4420      	add	r0, r4
    d7da:	78a9      	ldrb	r1, [r5, #2]
    d7dc:	7880      	ldrb	r0, [r0, #2]
    d7de:	4288      	cmp	r0, r1
    d7e0:	d101      	bne.n	d7e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    d7e2:	2000      	movs	r0, #0
    d7e4:	bd70      	pop	{r4, r5, r6, pc}
    d7e6:	4628      	mov	r0, r5
    d7e8:	bd70      	pop	{r4, r5, r6, pc}

0000d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d7ea:	8803      	ldrh	r3, [r0, #0]
    d7ec:	2b45      	cmp	r3, #69	; 0x45
    d7ee:	d200      	bcs.n	d7f2 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d7f0:	2345      	movs	r3, #69	; 0x45
    d7f2:	8013      	strh	r3, [r2, #0]
    d7f4:	88c2      	ldrh	r2, [r0, #6]
    d7f6:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d7fa:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d7fe:	441a      	add	r2, r3
    d800:	600a      	str	r2, [r1, #0]
    d802:	89c0      	ldrh	r0, [r0, #14]
    d804:	4770      	bx	lr

0000d806 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d806:	7f00      	ldrb	r0, [r0, #28]
    d808:	1d80      	adds	r0, r0, #6
    d80a:	4408      	add	r0, r1
    d80c:	1ec0      	subs	r0, r0, #3
    d80e:	6010      	str	r0, [r2, #0]
    d810:	8808      	ldrh	r0, [r1, #0]
    d812:	4770      	bx	lr

0000d814 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d814:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d818:	8281      	strh	r1, [r0, #20]
    d81a:	2100      	movs	r1, #0
    d81c:	7581      	strb	r1, [r0, #22]
    d81e:	4770      	bx	lr

0000d820 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d824:	4616      	mov	r6, r2
    d826:	f8dd 8018 	ldr.w	r8, [sp, #24]
    d82a:	460f      	mov	r7, r1
    d82c:	4604      	mov	r4, r0
    d82e:	461d      	mov	r5, r3
    d830:	4642      	mov	r2, r8
    d832:	4619      	mov	r1, r3
    d834:	4630      	mov	r0, r6
    d836:	f000 f852 	bl	d8de <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d83a:	4287      	cmp	r7, r0
    d83c:	d201      	bcs.n	d842 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x22>
    d83e:	21a8      	movs	r1, #168	; 0xa8
    d840:	e019      	b.n	d876 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x56>
    d842:	1ce0      	adds	r0, r4, #3
    d844:	f020 0103 	bic.w	r1, r0, #3
    d848:	4620      	mov	r0, r4
    d84a:	42a1      	cmp	r1, r4
    d84c:	d001      	beq.n	d852 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x32>
    d84e:	21a9      	movs	r1, #169	; 0xa9
    d850:	e011      	b.n	d876 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x56>
    d852:	2224      	movs	r2, #36	; 0x24
    d854:	2100      	movs	r1, #0
    d856:	f7ff f9e4 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d85a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d85e:	82a0      	strh	r0, [r4, #20]
    d860:	7725      	strb	r5, [r4, #28]
    d862:	4642      	mov	r2, r8
    d864:	4629      	mov	r1, r5
    d866:	4630      	mov	r0, r6
    d868:	f7ff fecc 	bl	d604 <sdc_hci_cmd_le_set_scan_params+0x4>
    d86c:	8060      	strh	r0, [r4, #2]
    d86e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d872:	d903      	bls.n	d87c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x5c>
    d874:	21af      	movs	r1, #175	; 0xaf
    d876:	2014      	movs	r0, #20
    d878:	f7f6 fba0 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d87c:	8026      	strh	r6, [r4, #0]
    d87e:	2000      	movs	r0, #0
    d880:	7760      	strb	r0, [r4, #29]
    d882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d886 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d88a:	4689      	mov	r9, r1
    d88c:	4604      	mov	r4, r0
    d88e:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d892:	8906      	ldrh	r6, [r0, #8]
    d894:	f8b0 800a 	ldrh.w	r8, [r0, #10]
    d898:	8880      	ldrh	r0, [r0, #4]
    d89a:	4617      	mov	r7, r2
    d89c:	f3c6 020e 	ubfx	r2, r6, #0, #15
    d8a0:	188d      	adds	r5, r1, r2
    d8a2:	4601      	mov	r1, r0
    d8a4:	4630      	mov	r0, r6
    d8a6:	f7ff fed3 	bl	d650 <sdc_hci_cmd_le_set_scan_params+0x50>
    d8aa:	b110      	cbz	r0, d8b2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2c>
    d8ac:	2000      	movs	r0, #0
    d8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d8b2:	b10f      	cbz	r7, d8b8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x32>
    d8b4:	1ce8      	adds	r0, r5, #3
    d8b6:	6038      	str	r0, [r7, #0]
    d8b8:	f1b9 0000 	subs.w	r0, r9, #0
    d8bc:	d003      	beq.n	d8c6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x40>
    d8be:	7f22      	ldrb	r2, [r4, #28]
    d8c0:	1ce9      	adds	r1, r5, #3
    d8c2:	f7ff f934 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d8c6:	882d      	ldrh	r5, [r5, #0]
    d8c8:	f104 0108 	add.w	r1, r4, #8
    d8cc:	4620      	mov	r0, r4
    d8ce:	f7ff fe9e 	bl	d60e <sdc_hci_cmd_le_set_scan_params+0xe>
    d8d2:	4546      	cmp	r6, r8
    d8d4:	d101      	bne.n	d8da <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x54>
    d8d6:	8920      	ldrh	r0, [r4, #8]
    d8d8:	8160      	strh	r0, [r4, #10]
    d8da:	4628      	mov	r0, r5
    d8dc:	e7e7      	b.n	d8ae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>

0000d8de <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d8de:	b510      	push	{r4, lr}
    d8e0:	4604      	mov	r4, r0
    d8e2:	f7ff fe8f 	bl	d604 <sdc_hci_cmd_le_set_scan_params+0x4>
    d8e6:	2100      	movs	r1, #0
    d8e8:	2c45      	cmp	r4, #69	; 0x45
    d8ea:	d202      	bcs.n	d8f2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d8ec:	f1c4 0145 	rsb	r1, r4, #69	; 0x45
    d8f0:	b289      	uxth	r1, r1
    d8f2:	3024      	adds	r0, #36	; 0x24
    d8f4:	4408      	add	r0, r1
    d8f6:	b280      	uxth	r0, r0
    d8f8:	bd10      	pop	{r4, pc}

0000d8fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d8fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d8fe:	4688      	mov	r8, r1
    d900:	88c1      	ldrh	r1, [r0, #6]
    d902:	4604      	mov	r4, r0
    d904:	8900      	ldrh	r0, [r0, #8]
    d906:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d90a:	f104 0624 	add.w	r6, r4, #36	; 0x24
    d90e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d912:	eb06 0905 	add.w	r9, r6, r5
    d916:	f7ff fea1 	bl	d65c <sdc_hci_cmd_le_set_scan_params+0x5c>
    d91a:	2200      	movs	r2, #0
    d91c:	b998      	cbnz	r0, d946 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d91e:	8820      	ldrh	r0, [r4, #0]
    d920:	2845      	cmp	r0, #69	; 0x45
    d922:	d200      	bcs.n	d926 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d924:	2045      	movs	r0, #69	; 0x45
    d926:	42af      	cmp	r7, r5
    d928:	d906      	bls.n	d938 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d92a:	7f21      	ldrb	r1, [r4, #28]
    d92c:	1b7b      	subs	r3, r7, r5
    d92e:	1d89      	adds	r1, r1, #6
    d930:	1a59      	subs	r1, r3, r1
    d932:	4281      	cmp	r1, r0
    d934:	da00      	bge.n	d938 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d936:	4608      	mov	r0, r1
    d938:	89e1      	ldrh	r1, [r4, #14]
    d93a:	b111      	cbz	r1, d942 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d93c:	f8b9 3000 	ldrh.w	r3, [r9]
    d940:	1ac0      	subs	r0, r0, r3
    d942:	4540      	cmp	r0, r8
    d944:	da03      	bge.n	d94e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d946:	8262      	strh	r2, [r4, #18]
    d948:	2000      	movs	r0, #0
    d94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d94e:	7f20      	ldrb	r0, [r4, #28]
    d950:	4431      	add	r1, r6
    d952:	1d80      	adds	r0, r0, #6
    d954:	4428      	add	r0, r5
    d956:	4408      	add	r0, r1
    d958:	f8a4 8012 	strh.w	r8, [r4, #18]
    d95c:	1ec0      	subs	r0, r0, #3
    d95e:	e7f4      	b.n	d94a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d960 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d960:	b570      	push	{r4, r5, r6, lr}
    d962:	2300      	movs	r3, #0
    d964:	f1a1 0208 	sub.w	r2, r1, #8
    d968:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d96c:	42a2      	cmp	r2, r4
    d96e:	d304      	bcc.n	d97a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d970:	f240 11cd 	movw	r1, #461	; 0x1cd
    d974:	2015      	movs	r0, #21
    d976:	f7f6 fb21 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d97a:	6802      	ldr	r2, [r0, #0]
    d97c:	b90a      	cbnz	r2, d982 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d97e:	e01e      	b.n	d9be <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d980:	4610      	mov	r0, r2
    d982:	6802      	ldr	r2, [r0, #0]
    d984:	8893      	ldrh	r3, [r2, #4]
    d986:	428b      	cmp	r3, r1
    d988:	d002      	beq.n	d990 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d98a:	6813      	ldr	r3, [r2, #0]
    d98c:	2b00      	cmp	r3, #0
    d98e:	d1f7      	bne.n	d980 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d990:	8894      	ldrh	r4, [r2, #4]
    d992:	4613      	mov	r3, r2
    d994:	428c      	cmp	r4, r1
    d996:	d101      	bne.n	d99c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d998:	6811      	ldr	r1, [r2, #0]
    d99a:	e00d      	b.n	d9b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d99c:	f101 0508 	add.w	r5, r1, #8
    d9a0:	b2ad      	uxth	r5, r5
    d9a2:	42ac      	cmp	r4, r5
    d9a4:	d30a      	bcc.n	d9bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d9a6:	1a64      	subs	r4, r4, r1
    d9a8:	4411      	add	r1, r2
    d9aa:	2200      	movs	r2, #0
    d9ac:	600a      	str	r2, [r1, #0]
    d9ae:	808c      	strh	r4, [r1, #4]
    d9b0:	6802      	ldr	r2, [r0, #0]
    d9b2:	6812      	ldr	r2, [r2, #0]
    d9b4:	6002      	str	r2, [r0, #0]
    d9b6:	600a      	str	r2, [r1, #0]
    d9b8:	6001      	str	r1, [r0, #0]
    d9ba:	e000      	b.n	d9be <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d9bc:	2300      	movs	r3, #0
    d9be:	4618      	mov	r0, r3
    d9c0:	bd70      	pop	{r4, r5, r6, pc}

0000d9c2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d9c2:	b510      	push	{r4, lr}
    d9c4:	000c      	movs	r4, r1
    d9c6:	d004      	beq.n	d9d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d9c8:	2c08      	cmp	r4, #8
    d9ca:	d207      	bcs.n	d9dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d9cc:	f240 1195 	movw	r1, #405	; 0x195
    d9d0:	e00a      	b.n	d9e8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d9d2:	b108      	cbz	r0, d9d8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d9d4:	2100      	movs	r1, #0
    d9d6:	6001      	str	r1, [r0, #0]
    d9d8:	2000      	movs	r0, #0
    d9da:	bd10      	pop	{r4, pc}
    d9dc:	b158      	cbz	r0, d9f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d9de:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d9e2:	d304      	bcc.n	d9ee <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d9e4:	f240 11a7 	movw	r1, #423	; 0x1a7
    d9e8:	2015      	movs	r0, #21
    d9ea:	f7f6 fae7 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9ee:	b2a1      	uxth	r1, r4
    d9f0:	6800      	ldr	r0, [r0, #0]
    d9f2:	f000 f814 	bl	da1e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d9f6:	1d20      	adds	r0, r4, #4
    d9f8:	bd10      	pop	{r4, pc}

0000d9fa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d9fa:	2100      	movs	r1, #0
    d9fc:	6802      	ldr	r2, [r0, #0]
    d9fe:	e003      	b.n	da08 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    da00:	8893      	ldrh	r3, [r2, #4]
    da02:	6812      	ldr	r2, [r2, #0]
    da04:	4419      	add	r1, r3
    da06:	b289      	uxth	r1, r1
    da08:	2a00      	cmp	r2, #0
    da0a:	d1f9      	bne.n	da00 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    da0c:	f000 b807 	b.w	da1e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000da10 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    da10:	2300      	movs	r3, #0
    da12:	600b      	str	r3, [r1, #0]
    da14:	808a      	strh	r2, [r1, #4]
    da16:	6802      	ldr	r2, [r0, #0]
    da18:	600a      	str	r2, [r1, #0]
    da1a:	6001      	str	r1, [r0, #0]
    da1c:	4770      	bx	lr
    da1e:	2300      	movs	r3, #0
    da20:	6043      	str	r3, [r0, #4]
    da22:	1d02      	adds	r2, r0, #4
    da24:	8101      	strh	r1, [r0, #8]
    da26:	6002      	str	r2, [r0, #0]
    da28:	4770      	bx	lr

0000da2a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    da2a:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    da2e:	3bff      	subs	r3, #255	; 0xff
    da30:	d001      	beq.n	da36 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    da32:	2905      	cmp	r1, #5
    da34:	d301      	bcc.n	da3a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    da36:	2000      	movs	r0, #0
    da38:	4770      	bx	lr
    da3a:	f7f6 bd4b 	b.w	44d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    da3e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    da42:	3aff      	subs	r2, #255	; 0xff
    da44:	d001      	beq.n	da4a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    da46:	2905      	cmp	r1, #5
    da48:	d301      	bcc.n	da4e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    da4a:	2000      	movs	r0, #0
    da4c:	4770      	bx	lr
    da4e:	f7f6 bd7b 	b.w	4548 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000da52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    da52:	b570      	push	{r4, r5, r6, lr}
    da54:	4605      	mov	r5, r0
    da56:	460c      	mov	r4, r1
    da58:	4608      	mov	r0, r1
    da5a:	f000 f8fe 	bl	dc5a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    da5e:	b108      	cbz	r0, da64 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    da60:	2010      	movs	r0, #16
    da62:	bd70      	pop	{r4, r5, r6, pc}
    da64:	2d05      	cmp	r5, #5
    da66:	d301      	bcc.n	da6c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    da68:	2007      	movs	r0, #7
    da6a:	bd70      	pop	{r4, r5, r6, pc}
    da6c:	7025      	strb	r5, [r4, #0]
    da6e:	2000      	movs	r0, #0
    da70:	8060      	strh	r0, [r4, #2]
    da72:	bd70      	pop	{r4, r5, r6, pc}
    da74:	b510      	push	{r4, lr}
    da76:	4604      	mov	r4, r0
    da78:	f7f6 fdb2 	bl	45e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    da7c:	42a0      	cmp	r0, r4
    da7e:	d901      	bls.n	da84 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    da80:	2001      	movs	r0, #1
    da82:	bd10      	pop	{r4, pc}
    da84:	2000      	movs	r0, #0
    da86:	bd10      	pop	{r4, pc}
    da88:	4770      	bx	lr

0000da8a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    da8a:	b570      	push	{r4, r5, r6, lr}
    da8c:	460e      	mov	r6, r1
    da8e:	461d      	mov	r5, r3
    da90:	4611      	mov	r1, r2
    da92:	f000 f813 	bl	dabc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    da96:	4604      	mov	r4, r0
    da98:	4629      	mov	r1, r5
    da9a:	4630      	mov	r0, r6
    da9c:	f000 f804 	bl	daa8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    daa0:	4420      	add	r0, r4
    daa2:	1d00      	adds	r0, r0, #4
    daa4:	b280      	uxth	r0, r0
    daa6:	bd70      	pop	{r4, r5, r6, pc}
    daa8:	b510      	push	{r4, lr}
    daaa:	460a      	mov	r2, r1
    daac:	2101      	movs	r1, #1
    daae:	f7ff ff16 	bl	d8de <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dab2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dab6:	1cc0      	adds	r0, r0, #3
    dab8:	4008      	ands	r0, r1
    daba:	bd10      	pop	{r4, pc}
    dabc:	b510      	push	{r4, lr}
    dabe:	460a      	mov	r2, r1
    dac0:	210a      	movs	r1, #10
    dac2:	f7ff ff0c 	bl	d8de <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dac6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    daca:	1cc0      	adds	r0, r0, #3
    dacc:	4008      	ands	r0, r1
    dace:	bd10      	pop	{r4, pc}
    dad0:	b108      	cbz	r0, dad6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    dad2:	2000      	movs	r0, #0
    dad4:	4770      	bx	lr
    dad6:	2002      	movs	r0, #2
    dad8:	4770      	bx	lr
    dada:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    dade:	d201      	bcs.n	dae4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    dae0:	0840      	lsrs	r0, r0, #1
    dae2:	4770      	bx	lr
    dae4:	20ff      	movs	r0, #255	; 0xff
    dae6:	4770      	bx	lr
    dae8:	b510      	push	{r4, lr}
    daea:	4604      	mov	r4, r0
    daec:	f7ff fff5 	bl	dada <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x50>
    daf0:	1a20      	subs	r0, r4, r0
    daf2:	f240 6172 	movw	r1, #1650	; 0x672
    daf6:	4288      	cmp	r0, r1
    daf8:	db00      	blt.n	dafc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    dafa:	4608      	mov	r0, r1
    dafc:	b280      	uxth	r0, r0
    dafe:	bd10      	pop	{r4, pc}

0000db00 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    db00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db04:	4606      	mov	r6, r0
    db06:	f342 0780 	sbfx	r7, r2, #2, #1
    db0a:	7848      	ldrb	r0, [r1, #1]
    db0c:	460c      	mov	r4, r1
    db0e:	f022 0504 	bic.w	r5, r2, #4
    db12:	1c7f      	adds	r7, r7, #1
    db14:	b100      	cbz	r0, db18 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    db16:	b995      	cbnz	r5, db3e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
    db18:	4328      	orrs	r0, r5
    db1a:	d010      	beq.n	db3e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
    db1c:	2000      	movs	r0, #0
    db1e:	b120      	cbz	r0, db2a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2a>
    db20:	b17d      	cbz	r5, db42 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x42>
    db22:	2100      	movs	r1, #0
    db24:	4620      	mov	r0, r4
    db26:	f7f6 fe17 	bl	4758 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    db2a:	20ff      	movs	r0, #255	; 0xff
    db2c:	70a0      	strb	r0, [r4, #2]
    db2e:	4638      	mov	r0, r7
    db30:	f7ff ffce 	bl	dad0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    db34:	1821      	adds	r1, r4, r0
    db36:	7d09      	ldrb	r1, [r1, #20]
    db38:	2903      	cmp	r1, #3
    db3a:	d004      	beq.n	db46 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x46>
    db3c:	e007      	b.n	db4e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
    db3e:	2001      	movs	r0, #1
    db40:	e7ed      	b.n	db1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1e>
    db42:	2101      	movs	r1, #1
    db44:	e7ee      	b.n	db24 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x24>
    db46:	2d02      	cmp	r5, #2
    db48:	d001      	beq.n	db4e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
    db4a:	1c40      	adds	r0, r0, #1
    db4c:	b2c0      	uxtb	r0, r0
    db4e:	1822      	adds	r2, r4, r0
    db50:	2101      	movs	r1, #1
    db52:	7511      	strb	r1, [r2, #20]
    db54:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    db58:	2100      	movs	r1, #0
    db5a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db5e:	8311      	strh	r1, [r2, #24]
    db60:	6842      	ldr	r2, [r0, #4]
    db62:	70a1      	strb	r1, [r4, #2]
    db64:	4633      	mov	r3, r6
    db66:	f361 030f 	bfi	r3, r1, #0, #16
    db6a:	c60c      	stmia	r6!, {r2, r3}
    db6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db70 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    db70:	b570      	push	{r4, r5, r6, lr}
    db72:	4604      	mov	r4, r0
    db74:	4615      	mov	r5, r2
    db76:	4608      	mov	r0, r1
    db78:	f7ff ffaa 	bl	dad0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    db7c:	21ff      	movs	r1, #255	; 0xff
    db7e:	70a1      	strb	r1, [r4, #2]
    db80:	1821      	adds	r1, r4, r0
    db82:	2202      	movs	r2, #2
    db84:	7d0b      	ldrb	r3, [r1, #20]
    db86:	2b01      	cmp	r3, #1
    db88:	d007      	beq.n	db9a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x2a>
    db8a:	7d4b      	ldrb	r3, [r1, #21]
    db8c:	2b01      	cmp	r3, #1
    db8e:	d009      	beq.n	dba4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x34>
    db90:	f44f 718b 	mov.w	r1, #278	; 0x116
    db94:	2009      	movs	r0, #9
    db96:	f7f6 fa11 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db9a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    db9e:	8305      	strh	r5, [r0, #24]
    dba0:	750a      	strb	r2, [r1, #20]
    dba2:	e003      	b.n	dbac <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3c>
    dba4:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    dba8:	8345      	strh	r5, [r0, #26]
    dbaa:	754a      	strb	r2, [r1, #21]
    dbac:	2000      	movs	r0, #0
    dbae:	70a0      	strb	r0, [r4, #2]
    dbb0:	bd70      	pop	{r4, r5, r6, pc}

0000dbb2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    dbb2:	2101      	movs	r1, #1
    dbb4:	7001      	strb	r1, [r0, #0]
    dbb6:	4770      	bx	lr
    dbb8:	2800      	cmp	r0, #0
    dbba:	db09      	blt.n	dbd0 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x1e>
    dbbc:	f000 021f 	and.w	r2, r0, #31
    dbc0:	2101      	movs	r1, #1
    dbc2:	4091      	lsls	r1, r2
    dbc4:	0940      	lsrs	r0, r0, #5
    dbc6:	0080      	lsls	r0, r0, #2
    dbc8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dbcc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dbd0:	4770      	bx	lr
    dbd2:	2800      	cmp	r0, #0
    dbd4:	db0d      	blt.n	dbf2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x40>
    dbd6:	f000 021f 	and.w	r2, r0, #31
    dbda:	2101      	movs	r1, #1
    dbdc:	4091      	lsls	r1, r2
    dbde:	0940      	lsrs	r0, r0, #5
    dbe0:	0080      	lsls	r0, r0, #2
    dbe2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dbe6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    dbea:	f3bf 8f4f 	dsb	sy
    dbee:	f3bf 8f6f 	isb	sy
    dbf2:	4770      	bx	lr
    dbf4:	b510      	push	{r4, lr}
    dbf6:	200e      	movs	r0, #14
    dbf8:	f7ff ffeb 	bl	dbd2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x20>
    dbfc:	200e      	movs	r0, #14
    dbfe:	f7ff ffdb 	bl	dbb8 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x6>
    dc02:	200f      	movs	r0, #15
    dc04:	f7ff ffe5 	bl	dbd2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x20>
    dc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc0c:	200f      	movs	r0, #15
    dc0e:	f7ff bfd3 	b.w	dbb8 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x6>
    dc12:	2800      	cmp	r0, #0
    dc14:	db09      	blt.n	dc2a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x78>
    dc16:	f000 021f 	and.w	r2, r0, #31
    dc1a:	2101      	movs	r1, #1
    dc1c:	4091      	lsls	r1, r2
    dc1e:	0940      	lsrs	r0, r0, #5
    dc20:	0080      	lsls	r0, r0, #2
    dc22:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc26:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dc2a:	4770      	bx	lr
    dc2c:	5840      	ldr	r0, [r0, r1]
    dc2e:	2800      	cmp	r0, #0
    dc30:	d000      	beq.n	dc34 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A+0x82>
    dc32:	2001      	movs	r0, #1
    dc34:	4770      	bx	lr

0000dc36 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    dc36:	b510      	push	{r4, lr}
    dc38:	4604      	mov	r4, r0
    dc3a:	4620      	mov	r0, r4
    dc3c:	f7f6 fedc 	bl	49f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    dc40:	2811      	cmp	r0, #17
    dc42:	d0fa      	beq.n	dc3a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    dc44:	bd10      	pop	{r4, pc}

0000dc46 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dc46:	b510      	push	{r4, lr}
    dc48:	f7ff fff5 	bl	dc36 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    dc4c:	2800      	cmp	r0, #0
    dc4e:	d003      	beq.n	dc58 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    dc50:	21a0      	movs	r1, #160	; 0xa0
    dc52:	201d      	movs	r0, #29
    dc54:	f7f6 f9b2 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc58:	bd10      	pop	{r4, pc}

0000dc5a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    dc5a:	b108      	cbz	r0, dc60 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    dc5c:	2000      	movs	r0, #0
    dc5e:	4770      	bx	lr
    dc60:	2001      	movs	r0, #1
    dc62:	4770      	bx	lr

0000dc64 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    dc64:	4050      	eors	r0, r2
    dc66:	780a      	ldrb	r2, [r1, #0]
    dc68:	f893 c000 	ldrb.w	ip, [r3]
    dc6c:	ea82 020c 	eor.w	r2, r2, ip
    dc70:	4410      	add	r0, r2
    dc72:	784a      	ldrb	r2, [r1, #1]
    dc74:	f893 c001 	ldrb.w	ip, [r3, #1]
    dc78:	ea82 020c 	eor.w	r2, r2, ip
    dc7c:	4410      	add	r0, r2
    dc7e:	788a      	ldrb	r2, [r1, #2]
    dc80:	f893 c002 	ldrb.w	ip, [r3, #2]
    dc84:	ea82 020c 	eor.w	r2, r2, ip
    dc88:	4410      	add	r0, r2
    dc8a:	78ca      	ldrb	r2, [r1, #3]
    dc8c:	f893 c003 	ldrb.w	ip, [r3, #3]
    dc90:	ea82 020c 	eor.w	r2, r2, ip
    dc94:	4410      	add	r0, r2
    dc96:	790a      	ldrb	r2, [r1, #4]
    dc98:	f893 c004 	ldrb.w	ip, [r3, #4]
    dc9c:	7949      	ldrb	r1, [r1, #5]
    dc9e:	ea82 020c 	eor.w	r2, r2, ip
    dca2:	4410      	add	r0, r2
    dca4:	795a      	ldrb	r2, [r3, #5]
    dca6:	4051      	eors	r1, r2
    dca8:	42c1      	cmn	r1, r0
    dcaa:	bf0c      	ite	eq
    dcac:	2001      	moveq	r0, #1
    dcae:	2000      	movne	r0, #0
    dcb0:	4770      	bx	lr

0000dcb2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dcb2:	b510      	push	{r4, lr}
    dcb4:	2900      	cmp	r1, #0
    dcb6:	4604      	mov	r4, r0
    dcb8:	f04f 0106 	mov.w	r1, #6
    dcbc:	d002      	beq.n	dcc4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dcbe:	f7f6 f9ef 	bl	40a0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dcc2:	e001      	b.n	dcc8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dcc4:	f7f6 fa08 	bl	40d8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dcc8:	7960      	ldrb	r0, [r4, #5]
    dcca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dcce:	7160      	strb	r0, [r4, #5]
    dcd0:	bd10      	pop	{r4, pc}

0000dcd2 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dcd2:	4770      	bx	lr

0000dcd4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dcd4:	b530      	push	{r4, r5, lr}
    dcd6:	460c      	mov	r4, r1
    dcd8:	4605      	mov	r5, r0
    dcda:	b08d      	sub	sp, #52	; 0x34
    dcdc:	f04f 0103 	mov.w	r1, #3
    dce0:	f104 0003 	add.w	r0, r4, #3
    dce4:	b112      	cbz	r2, dcec <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dce6:	f7f6 f9db 	bl	40a0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dcea:	e001      	b.n	dcf0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dcec:	f7f6 f9f4 	bl	40d8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dcf0:	7960      	ldrb	r0, [r4, #5]
    dcf2:	220d      	movs	r2, #13
    dcf4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dcf8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dcfc:	7160      	strb	r0, [r4, #5]
    dcfe:	2100      	movs	r1, #0
    dd00:	a804      	add	r0, sp, #16
    dd02:	f7fe ff8e 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd06:	78e0      	ldrb	r0, [r4, #3]
    dd08:	f88d 001f 	strb.w	r0, [sp, #31]
    dd0c:	7920      	ldrb	r0, [r4, #4]
    dd0e:	f88d 001e 	strb.w	r0, [sp, #30]
    dd12:	7960      	ldrb	r0, [r4, #5]
    dd14:	f88d 001d 	strb.w	r0, [sp, #29]
    dd18:	6828      	ldr	r0, [r5, #0]
    dd1a:	9000      	str	r0, [sp, #0]
    dd1c:	6868      	ldr	r0, [r5, #4]
    dd1e:	9001      	str	r0, [sp, #4]
    dd20:	68a8      	ldr	r0, [r5, #8]
    dd22:	9002      	str	r0, [sp, #8]
    dd24:	68e8      	ldr	r0, [r5, #12]
    dd26:	9003      	str	r0, [sp, #12]
    dd28:	4668      	mov	r0, sp
    dd2a:	f7ff ff8c 	bl	dc46 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dd2e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dd32:	7020      	strb	r0, [r4, #0]
    dd34:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dd38:	7060      	strb	r0, [r4, #1]
    dd3a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dd3e:	70a0      	strb	r0, [r4, #2]
    dd40:	b00d      	add	sp, #52	; 0x34
    dd42:	bd30      	pop	{r4, r5, pc}

0000dd44 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    dd44:	b530      	push	{r4, r5, lr}
    dd46:	b08d      	sub	sp, #52	; 0x34
    dd48:	460c      	mov	r4, r1
    dd4a:	4605      	mov	r5, r0
    dd4c:	220d      	movs	r2, #13
    dd4e:	2100      	movs	r1, #0
    dd50:	a804      	add	r0, sp, #16
    dd52:	f7fe ff66 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd56:	78e0      	ldrb	r0, [r4, #3]
    dd58:	f88d 001f 	strb.w	r0, [sp, #31]
    dd5c:	7920      	ldrb	r0, [r4, #4]
    dd5e:	f88d 001e 	strb.w	r0, [sp, #30]
    dd62:	7960      	ldrb	r0, [r4, #5]
    dd64:	f88d 001d 	strb.w	r0, [sp, #29]
    dd68:	6828      	ldr	r0, [r5, #0]
    dd6a:	9000      	str	r0, [sp, #0]
    dd6c:	6868      	ldr	r0, [r5, #4]
    dd6e:	9001      	str	r0, [sp, #4]
    dd70:	68a8      	ldr	r0, [r5, #8]
    dd72:	9002      	str	r0, [sp, #8]
    dd74:	68e8      	ldr	r0, [r5, #12]
    dd76:	9003      	str	r0, [sp, #12]
    dd78:	4668      	mov	r0, sp
    dd7a:	f7ff ff64 	bl	dc46 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dd7e:	7820      	ldrb	r0, [r4, #0]
    dd80:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    dd84:	4288      	cmp	r0, r1
    dd86:	d10c      	bne.n	dda2 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x5e>
    dd88:	7860      	ldrb	r0, [r4, #1]
    dd8a:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    dd8e:	4288      	cmp	r0, r1
    dd90:	d107      	bne.n	dda2 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x5e>
    dd92:	78a0      	ldrb	r0, [r4, #2]
    dd94:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    dd98:	4288      	cmp	r0, r1
    dd9a:	bf02      	ittt	eq
    dd9c:	2001      	moveq	r0, #1
    dd9e:	b00d      	addeq	sp, #52	; 0x34
    dda0:	bd30      	popeq	{r4, r5, pc}
    dda2:	2000      	movs	r0, #0
    dda4:	b00d      	add	sp, #52	; 0x34
    dda6:	bd30      	pop	{r4, r5, pc}

0000dda8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dda8:	b510      	push	{r4, lr}
    ddaa:	f7fc fe61 	bl	aa70 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ddae:	2800      	cmp	r0, #0
    ddb0:	bf04      	itt	eq
    ddb2:	20ff      	moveq	r0, #255	; 0xff
    ddb4:	bd10      	popeq	{r4, pc}
    ddb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddba:	f7fc be39 	b.w	aa30 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

0000ddbe <sym_L5NT4KXGEDXZTIBIF6PJMXWXQJC7UYUXJYCCW3Y>:
    ddbe:	f7fc be57 	b.w	aa70 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>

0000ddc2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    ddc2:	b510      	push	{r4, lr}
    ddc4:	f7f7 f99e 	bl	5104 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ddc8:	2810      	cmp	r0, #16
    ddca:	bf04      	itt	eq
    ddcc:	2000      	moveq	r0, #0
    ddce:	bd10      	popeq	{r4, pc}
    ddd0:	f7f7 f9de 	bl	5190 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
    ddd4:	2001      	movs	r0, #1
    ddd6:	bd10      	pop	{r4, pc}

0000ddd8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    ddd8:	b570      	push	{r4, r5, r6, lr}
    ddda:	4606      	mov	r6, r0
    dddc:	7900      	ldrb	r0, [r0, #4]
    ddde:	f030 001f 	bics.w	r0, r0, #31
    dde2:	bf04      	itt	eq
    dde4:	2500      	moveq	r5, #0
    dde6:	462c      	moveq	r4, r5
    dde8:	d10c      	bne.n	de04 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x2c>
    ddea:	5d30      	ldrb	r0, [r6, r4]
    ddec:	f000 fbd3 	bl	e596 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    ddf0:	4428      	add	r0, r5
    ddf2:	b2c5      	uxtb	r5, r0
    ddf4:	1c60      	adds	r0, r4, #1
    ddf6:	b2c4      	uxtb	r4, r0
    ddf8:	2c05      	cmp	r4, #5
    ddfa:	d3f6      	bcc.n	ddea <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x12>
    ddfc:	2d01      	cmp	r5, #1
    ddfe:	bf84      	itt	hi
    de00:	2001      	movhi	r0, #1
    de02:	bd70      	pophi	{r4, r5, r6, pc}
    de04:	2000      	movs	r0, #0
    de06:	bd70      	pop	{r4, r5, r6, pc}

0000de08 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    de08:	b570      	push	{r4, r5, r6, lr}
    de0a:	460c      	mov	r4, r1
    de0c:	4605      	mov	r5, r0
    de0e:	2100      	movs	r1, #0
    de10:	f7ff fe15 	bl	da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    de14:	6060      	str	r0, [r4, #4]
    de16:	b110      	cbz	r0, de1e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    de18:	2000      	movs	r0, #0
    de1a:	7020      	strb	r0, [r4, #0]
    de1c:	bd70      	pop	{r4, r5, r6, pc}
    de1e:	2101      	movs	r1, #1
    de20:	4628      	mov	r0, r5
    de22:	f7ff fe0c 	bl	da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    de26:	6060      	str	r0, [r4, #4]
    de28:	2800      	cmp	r0, #0
    de2a:	bf04      	itt	eq
    de2c:	2002      	moveq	r0, #2
    de2e:	bd70      	popeq	{r4, r5, r6, pc}
    de30:	2001      	movs	r0, #1
    de32:	7020      	strb	r0, [r4, #0]
    de34:	2000      	movs	r0, #0
    de36:	bd70      	pop	{r4, r5, r6, pc}

0000de38 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    de38:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
    de3c:	2906      	cmp	r1, #6
    de3e:	bf9a      	itte	ls
    de40:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    de44:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
    de48:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    de4c:	4348      	muls	r0, r1
    de4e:	4770      	bx	lr

0000de50 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    de50:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
    de54:	f241 7270 	movw	r2, #6000	; 0x1770
    de58:	4291      	cmp	r1, r2
    de5a:	bf94      	ite	ls
    de5c:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    de60:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    de64:	fbb0 f0f1 	udiv	r0, r0, r1
    de68:	bf98      	it	ls
    de6a:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
    de6e:	b280      	uxth	r0, r0
    de70:	4770      	bx	lr

0000de72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    de72:	290d      	cmp	r1, #13
    de74:	d260      	bcs.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    de76:	e8df f001 	tbb	[pc, r1]
    de7a:	0a07      	.short	0x0a07
    de7c:	1c17140f 	.word	0x1c17140f
    de80:	61403d33 	.word	0x61403d33
    de84:	005b4d47 	.word	0x005b4d47
    de88:	2a00      	cmp	r2, #0
    de8a:	d053      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    de8c:	e054      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    de8e:	2a08      	cmp	r2, #8
    de90:	bf18      	it	ne
    de92:	2a09      	cmpne	r2, #9
    de94:	d04e      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    de96:	e04f      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    de98:	2a0d      	cmp	r2, #13
    de9a:	bf18      	it	ne
    de9c:	2a0c      	cmpne	r2, #12
    de9e:	d049      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    dea0:	e04a      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    dea2:	2a0e      	cmp	r2, #14
    dea4:	d046      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    dea6:	e047      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    dea8:	f1a2 0010 	sub.w	r0, r2, #16
    deac:	280c      	cmp	r0, #12
    deae:	d941      	bls.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    deb0:	e042      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    deb2:	b123      	cbz	r3, debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4c>
    deb4:	f1a2 0011 	sub.w	r0, r2, #17
    deb8:	280b      	cmp	r0, #11
    deba:	d93b      	bls.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    debc:	e03c      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    debe:	2a13      	cmp	r2, #19
    dec0:	bf18      	it	ne
    dec2:	2a12      	cmpne	r2, #18
    dec4:	d036      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    dec6:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
    deca:	b120      	cbz	r0, ded6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x64>
    decc:	2a13      	cmp	r2, #19
    dece:	d333      	bcc.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    ded0:	2a1b      	cmp	r2, #27
    ded2:	d92f      	bls.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    ded4:	e030      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    ded6:	2a17      	cmp	r2, #23
    ded8:	d32e      	bcc.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    deda:	2a1b      	cmp	r2, #27
    dedc:	d92a      	bls.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    dede:	e02b      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    dee0:	f1a2 0110 	sub.w	r1, r2, #16
    dee4:	2903      	cmp	r1, #3
    dee6:	d925      	bls.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    dee8:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
    deec:	b1f8      	cbz	r0, df2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    deee:	2a1c      	cmp	r2, #28
    def0:	d920      	bls.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    def2:	e021      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    def4:	2a04      	cmp	r2, #4
    def6:	d01d      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    def8:	e01e      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    defa:	b113      	cbz	r3, df02 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x90>
    defc:	2a07      	cmp	r2, #7
    defe:	d019      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    df00:	e01a      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    df02:	2a01      	cmp	r2, #1
    df04:	d118      	bne.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    df06:	e015      	b.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    df08:	2a1d      	cmp	r2, #29
    df0a:	bf1c      	itt	ne
    df0c:	2a1e      	cmpne	r2, #30
    df0e:	2a1f      	cmpne	r2, #31
    df10:	d010      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    df12:	e011      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    df14:	2a20      	cmp	r2, #32
    df16:	bf18      	it	ne
    df18:	2a21      	cmpne	r2, #33	; 0x21
    df1a:	d00b      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    df1c:	2a22      	cmp	r2, #34	; 0x22
    df1e:	bf18      	it	ne
    df20:	2a23      	cmpne	r2, #35	; 0x23
    df22:	d007      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    df24:	2a24      	cmp	r2, #36	; 0x24
    df26:	bf1c      	itt	ne
    df28:	2a25      	cmpne	r2, #37	; 0x25
    df2a:	2a28      	cmpne	r2, #40	; 0x28
    df2c:	d002      	beq.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    df2e:	e003      	b.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    df30:	2a27      	cmp	r2, #39	; 0x27
    df32:	d101      	bne.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    df34:	2001      	movs	r0, #1
    df36:	4770      	bx	lr
    df38:	2000      	movs	r0, #0
    df3a:	4770      	bx	lr
    df3c:	b113      	cbz	r3, df44 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd2>
    df3e:	2a0f      	cmp	r2, #15
    df40:	d1fa      	bne.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    df42:	e7f7      	b.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
    df44:	2a05      	cmp	r2, #5
    df46:	d1f7      	bne.n	df38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
    df48:	e7f4      	b.n	df34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>

0000df4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    df4a:	f011 0f0c 	tst.w	r1, #12
    df4e:	d014      	beq.n	df7a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    df50:	f001 0104 	and.w	r1, r1, #4
    df54:	2900      	cmp	r1, #0
    df56:	bf0d      	iteet	eq
    df58:	2240      	moveq	r2, #64	; 0x40
    df5a:	2210      	movne	r2, #16
    df5c:	2196      	movne	r1, #150	; 0x96
    df5e:	f44f 7116 	moveq.w	r1, #600	; 0x258
    df62:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    df66:	eba0 0301 	sub.w	r3, r0, r1
    df6a:	4288      	cmp	r0, r1
    df6c:	bf82      	ittt	hi
    df6e:	fb93 f0f2 	sdivhi	r0, r3, r2
    df72:	b280      	uxthhi	r0, r0
    df74:	4770      	bxhi	lr
    df76:	2000      	movs	r0, #0
    df78:	4770      	bx	lr
    df7a:	2902      	cmp	r1, #2
    df7c:	d008      	beq.n	df90 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x46>
    df7e:	2870      	cmp	r0, #112	; 0x70
    df80:	d9f9      	bls.n	df76 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
    df82:	3870      	subs	r0, #112	; 0x70
    df84:	17c1      	asrs	r1, r0, #31
    df86:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    df8a:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    df8e:	4770      	bx	lr
    df90:	283c      	cmp	r0, #60	; 0x3c
    df92:	d9f0      	bls.n	df76 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
    df94:	383c      	subs	r0, #60	; 0x3c
    df96:	17c1      	asrs	r1, r0, #31
    df98:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    df9c:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dfa0:	4770      	bx	lr

0000dfa2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dfa2:	6809      	ldr	r1, [r1, #0]
    dfa4:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    dfa8:	4770      	bx	lr

0000dfaa <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    dfaa:	f010 0f01 	tst.w	r0, #1
    dfae:	bf1c      	itt	ne
    dfb0:	2001      	movne	r0, #1
    dfb2:	4770      	bxne	lr
    dfb4:	f010 0f02 	tst.w	r0, #2
    dfb8:	bf1c      	itt	ne
    dfba:	2002      	movne	r0, #2
    dfbc:	4770      	bxne	lr
    dfbe:	f010 0004 	ands.w	r0, r0, #4
    dfc2:	bf18      	it	ne
    dfc4:	2008      	movne	r0, #8
    dfc6:	4770      	bx	lr

0000dfc8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dfc8:	2a16      	cmp	r2, #22
    dfca:	d110      	bne.n	dfee <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dfcc:	222a      	movs	r2, #42	; 0x2a
    dfce:	280d      	cmp	r0, #13
    dfd0:	bf18      	it	ne
    dfd2:	280e      	cmpne	r0, #14
    dfd4:	d00f      	beq.n	dff6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
    dfd6:	f04f 0c23 	mov.w	ip, #35	; 0x23
    dfda:	2820      	cmp	r0, #32
    dfdc:	d00d      	beq.n	dffa <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
    dfde:	b131      	cbz	r1, dfee <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dfe0:	7808      	ldrb	r0, [r1, #0]
    dfe2:	2801      	cmp	r0, #1
    dfe4:	bf18      	it	ne
    dfe6:	2800      	cmpne	r0, #0
    dfe8:	d005      	beq.n	dff6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
    dfea:	2816      	cmp	r0, #22
    dfec:	d005      	beq.n	dffa <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
    dfee:	2000      	movs	r0, #0
    dff0:	4770      	bx	lr
    dff2:	2001      	movs	r0, #1
    dff4:	4770      	bx	lr
    dff6:	701a      	strb	r2, [r3, #0]
    dff8:	e7fb      	b.n	dff2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dffa:	f883 c000 	strb.w	ip, [r3]
    dffe:	e7f8      	b.n	dff2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>

0000e000 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    e000:	b438      	push	{r3, r4, r5}
    e002:	b2cb      	uxtb	r3, r1
    e004:	f3c1 2c07 	ubfx	ip, r1, #8, #8
    e008:	b2c1      	uxtb	r1, r0
    e00a:	f3c0 2407 	ubfx	r4, r0, #8, #8
    e00e:	2b01      	cmp	r3, #1
    e010:	d007      	beq.n	e022 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x22>
    e012:	2b02      	cmp	r3, #2
    e014:	d009      	beq.n	e02a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x2a>
    e016:	2b04      	cmp	r3, #4
    e018:	bf08      	it	eq
    e01a:	f1bc 0f04 	cmpeq.w	ip, #4
    e01e:	d02d      	beq.n	e07c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
    e020:	e006      	b.n	e030 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
    e022:	f1bc 0f01 	cmp.w	ip, #1
    e026:	d103      	bne.n	e030 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
    e028:	e028      	b.n	e07c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
    e02a:	f1bc 0f02 	cmp.w	ip, #2
    e02e:	d025      	beq.n	e07c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
    e030:	2901      	cmp	r1, #1
    e032:	d006      	beq.n	e042 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x42>
    e034:	2902      	cmp	r1, #2
    e036:	d007      	beq.n	e048 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x48>
    e038:	2904      	cmp	r1, #4
    e03a:	bf08      	it	eq
    e03c:	2c04      	cmpeq	r4, #4
    e03e:	d01d      	beq.n	e07c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
    e040:	e004      	b.n	e04c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
    e042:	2c01      	cmp	r4, #1
    e044:	d102      	bne.n	e04c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
    e046:	e019      	b.n	e07c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
    e048:	2c02      	cmp	r4, #2
    e04a:	d017      	beq.n	e07c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
    e04c:	ea01 010c 	and.w	r1, r1, ip
    e050:	f361 0207 	bfi	r2, r1, #0, #8
    e054:	ea04 0103 	and.w	r1, r4, r3
    e058:	f361 220f 	bfi	r2, r1, #8, #8
    e05c:	b2d1      	uxtb	r1, r2
    e05e:	f011 0f02 	tst.w	r1, #2
    e062:	bf18      	it	ne
    e064:	2302      	movne	r3, #2
    e066:	d010      	beq.n	e08a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x8a>
    e068:	f3c2 2107 	ubfx	r1, r2, #8, #8
    e06c:	f88d 3000 	strb.w	r3, [sp]
    e070:	f011 0f02 	tst.w	r1, #2
    e074:	bf18      	it	ne
    e076:	2102      	movne	r1, #2
    e078:	d11b      	bne.n	e0b2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
    e07a:	e011      	b.n	e0a0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xa0>
    e07c:	4021      	ands	r1, r4
    e07e:	ea03 030c 	and.w	r3, r3, ip
    e082:	4019      	ands	r1, r3
    e084:	f361 0207 	bfi	r2, r1, #0, #8
    e088:	e7e6      	b.n	e058 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x58>
    e08a:	f011 0f01 	tst.w	r1, #1
    e08e:	bf18      	it	ne
    e090:	2301      	movne	r3, #1
    e092:	d1e9      	bne.n	e068 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
    e094:	f011 0f04 	tst.w	r1, #4
    e098:	bf14      	ite	ne
    e09a:	2308      	movne	r3, #8
    e09c:	2300      	moveq	r3, #0
    e09e:	e7e3      	b.n	e068 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
    e0a0:	f011 0f01 	tst.w	r1, #1
    e0a4:	bf18      	it	ne
    e0a6:	2101      	movne	r1, #1
    e0a8:	d103      	bne.n	e0b2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
    e0aa:	f011 0104 	ands.w	r1, r1, #4
    e0ae:	bf18      	it	ne
    e0b0:	2108      	movne	r1, #8
    e0b2:	f88d 1001 	strb.w	r1, [sp, #1]
    e0b6:	2b08      	cmp	r3, #8
    e0b8:	bf01      	itttt	eq
    e0ba:	0c00      	lsreq	r0, r0, #16
    e0bc:	2801      	cmpeq	r0, #1
    e0be:	2004      	moveq	r0, #4
    e0c0:	f88d 0000 	strbeq.w	r0, [sp]
    e0c4:	f8bd 0000 	ldrh.w	r0, [sp]
    e0c8:	bc38      	pop	{r3, r4, r5}
    e0ca:	4770      	bx	lr

0000e0cc <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>:
    e0cc:	f04f 0c00 	mov.w	ip, #0
    e0d0:	2908      	cmp	r1, #8
    e0d2:	d002      	beq.n	e0da <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0xe>
    e0d4:	2904      	cmp	r1, #4
    e0d6:	d009      	beq.n	e0ec <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x20>
    e0d8:	e011      	b.n	e0fe <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
    e0da:	2801      	cmp	r0, #1
    e0dc:	d10f      	bne.n	e0fe <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
    e0de:	2004      	movs	r0, #4
    e0e0:	7090      	strb	r0, [r2, #2]
    e0e2:	f882 c003 	strb.w	ip, [r2, #3]
    e0e6:	8013      	strh	r3, [r2, #0]
    e0e8:	2001      	movs	r0, #1
    e0ea:	4770      	bx	lr
    e0ec:	2801      	cmp	r0, #1
    e0ee:	d006      	beq.n	e0fe <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
    e0f0:	2008      	movs	r0, #8
    e0f2:	7090      	strb	r0, [r2, #2]
    e0f4:	f882 c003 	strb.w	ip, [r2, #3]
    e0f8:	8013      	strh	r3, [r2, #0]
    e0fa:	2001      	movs	r0, #1
    e0fc:	4770      	bx	lr
    e0fe:	2000      	movs	r0, #0
    e100:	4770      	bx	lr

0000e102 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e106:	4607      	mov	r7, r0
    e108:	460e      	mov	r6, r1
    e10a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
    e10e:	f7f3 fcc1 	bl	1a94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e112:	b1a0      	cbz	r0, e13e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3c>
    e114:	b336      	cbz	r6, e164 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
    e116:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e11a:	1b02      	subs	r2, r0, r4
    e11c:	eb61 0305 	sbc.w	r3, r1, r5
    e120:	2000      	movs	r0, #0
    e122:	4601      	mov	r1, r0
    e124:	1a80      	subs	r0, r0, r2
    e126:	eb71 0003 	sbcs.w	r0, r1, r3
    e12a:	da1b      	bge.n	e164 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
    e12c:	1c50      	adds	r0, r2, #1
    e12e:	f173 0000 	sbcs.w	r0, r3, #0
    e132:	db09      	blt.n	e148 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x46>
    e134:	f240 2136 	movw	r1, #566	; 0x236
    e138:	2029      	movs	r0, #41	; 0x29
    e13a:	f7f5 ff3f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e13e:	f44f 710b 	mov.w	r1, #556	; 0x22c
    e142:	2029      	movs	r0, #41	; 0x29
    e144:	f7f5 ff3a 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e148:	1990      	adds	r0, r2, r6
    e14a:	1e40      	subs	r0, r0, #1
    e14c:	fbb0 f1f6 	udiv	r1, r0, r6
    e150:	fb01 f006 	mul.w	r0, r1, r6
    e154:	1820      	adds	r0, r4, r0
    e156:	f145 0200 	adc.w	r2, r5, #0
    e15a:	e9c7 0204 	strd	r0, r2, [r7, #16]
    e15e:	4608      	mov	r0, r1
    e160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e164:	2000      	movs	r0, #0
    e166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e16a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e16a:	f641 524c 	movw	r2, #7500	; 0x1d4c
    e16e:	4291      	cmp	r1, r2
    e170:	bf3e      	ittt	cc
    e172:	2164      	movcc	r1, #100	; 0x64
    e174:	fb10 f001 	smulbbcc	r0, r0, r1
    e178:	4770      	bxcc	lr
    e17a:	f240 2171 	movw	r1, #625	; 0x271
    e17e:	fb10 f001 	smulbb	r0, r0, r1
    e182:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e186:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e18a:	4770      	bx	lr
    e18c:	78c3      	ldrb	r3, [r0, #3]
    e18e:	4602      	mov	r2, r0
    e190:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    e194:	bf08      	it	eq
    e196:	4770      	bxeq	lr
    e198:	2005      	movs	r0, #5
    e19a:	7912      	ldrb	r2, [r2, #4]
    e19c:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
    e1a0:	f012 0301 	ands.w	r3, r2, #1
    e1a4:	bf18      	it	ne
    e1a6:	2301      	movne	r3, #1
    e1a8:	b123      	cbz	r3, e1b4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x4a>
    e1aa:	2900      	cmp	r1, #0
    e1ac:	bf14      	ite	ne
    e1ae:	200b      	movne	r0, #11
    e1b0:	4770      	bxeq	lr
    e1b2:	e001      	b.n	e1b8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x4e>
    e1b4:	2900      	cmp	r1, #0
    e1b6:	d04f      	beq.n	e258 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e1b8:	f012 0302 	ands.w	r3, r2, #2
    e1bc:	bf18      	it	ne
    e1be:	2301      	movne	r3, #1
    e1c0:	b123      	cbz	r3, e1cc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x62>
    e1c2:	2901      	cmp	r1, #1
    e1c4:	bf14      	ite	ne
    e1c6:	1d80      	addne	r0, r0, #6
    e1c8:	4770      	bxeq	lr
    e1ca:	e001      	b.n	e1d0 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x66>
    e1cc:	2901      	cmp	r1, #1
    e1ce:	d043      	beq.n	e258 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e1d0:	f012 0304 	ands.w	r3, r2, #4
    e1d4:	bf18      	it	ne
    e1d6:	2301      	movne	r3, #1
    e1d8:	b123      	cbz	r3, e1e4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x7a>
    e1da:	2902      	cmp	r1, #2
    e1dc:	bf14      	ite	ne
    e1de:	1c40      	addne	r0, r0, #1
    e1e0:	4770      	bxeq	lr
    e1e2:	e001      	b.n	e1e8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x7e>
    e1e4:	2902      	cmp	r1, #2
    e1e6:	d037      	beq.n	e258 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e1e8:	f012 0308 	ands.w	r3, r2, #8
    e1ec:	bf18      	it	ne
    e1ee:	2301      	movne	r3, #1
    e1f0:	b123      	cbz	r3, e1fc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x92>
    e1f2:	2903      	cmp	r1, #3
    e1f4:	bf14      	ite	ne
    e1f6:	1c80      	addne	r0, r0, #2
    e1f8:	4770      	bxeq	lr
    e1fa:	e001      	b.n	e200 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x96>
    e1fc:	2903      	cmp	r1, #3
    e1fe:	d02b      	beq.n	e258 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e200:	f012 0310 	ands.w	r3, r2, #16
    e204:	bf18      	it	ne
    e206:	2301      	movne	r3, #1
    e208:	b123      	cbz	r3, e214 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xaa>
    e20a:	2904      	cmp	r1, #4
    e20c:	bf14      	ite	ne
    e20e:	1cc0      	addne	r0, r0, #3
    e210:	4770      	bxeq	lr
    e212:	e001      	b.n	e218 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xae>
    e214:	2904      	cmp	r1, #4
    e216:	d01f      	beq.n	e258 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e218:	f012 0320 	ands.w	r3, r2, #32
    e21c:	bf18      	it	ne
    e21e:	2301      	movne	r3, #1
    e220:	b12b      	cbz	r3, e22e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xc4>
    e222:	2905      	cmp	r1, #5
    e224:	bf1a      	itte	ne
    e226:	3012      	addne	r0, #18
    e228:	b2c0      	uxtbne	r0, r0
    e22a:	4770      	bxeq	lr
    e22c:	e001      	b.n	e232 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xc8>
    e22e:	2905      	cmp	r1, #5
    e230:	d012      	beq.n	e258 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e232:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e236:	bf18      	it	ne
    e238:	2201      	movne	r2, #1
    e23a:	b12a      	cbz	r2, e248 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xde>
    e23c:	2906      	cmp	r1, #6
    e23e:	bf1a      	itte	ne
    e240:	1c40      	addne	r0, r0, #1
    e242:	b2c0      	uxtbne	r0, r0
    e244:	4770      	bxeq	lr
    e246:	e001      	b.n	e24c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xe2>
    e248:	2906      	cmp	r1, #6
    e24a:	d005      	beq.n	e258 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e24c:	2907      	cmp	r1, #7
    e24e:	d103      	bne.n	e258 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e250:	1f41      	subs	r1, r0, #5
    e252:	458c      	cmp	ip, r1
    e254:	bfc8      	it	gt
    e256:	4770      	bxgt	lr
    e258:	2000      	movs	r0, #0
    e25a:	4770      	bx	lr

0000e25c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    e25c:	7900      	ldrb	r0, [r0, #4]
    e25e:	4770      	bx	lr

0000e260 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    e260:	88c0      	ldrh	r0, [r0, #6]
    e262:	4770      	bx	lr

0000e264 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    e264:	7940      	ldrb	r0, [r0, #5]
    e266:	4770      	bx	lr

0000e268 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e268:	7901      	ldrb	r1, [r0, #4]
    e26a:	f011 0f07 	tst.w	r1, #7
    e26e:	bf1b      	ittet	ne
    e270:	7940      	ldrbne	r0, [r0, #5]
    e272:	f010 0f07 	tstne.w	r0, #7
    e276:	2000      	moveq	r0, #0
    e278:	2001      	movne	r0, #1
    e27a:	4770      	bx	lr

0000e27c <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    e27c:	7901      	ldrb	r1, [r0, #4]
    e27e:	f011 0f07 	tst.w	r1, #7
    e282:	bf1b      	ittet	ne
    e284:	7940      	ldrbne	r0, [r0, #5]
    e286:	f010 0f07 	tstne.w	r0, #7
    e28a:	2000      	moveq	r0, #0
    e28c:	2001      	movne	r0, #1
    e28e:	4770      	bx	lr

0000e290 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    e290:	7901      	ldrb	r1, [r0, #4]
    e292:	7940      	ldrb	r0, [r0, #5]
    e294:	f001 0107 	and.w	r1, r1, #7
    e298:	1e4a      	subs	r2, r1, #1
    e29a:	f000 0007 	and.w	r0, r0, #7
    e29e:	4011      	ands	r1, r2
    e2a0:	1e42      	subs	r2, r0, #1
    e2a2:	4010      	ands	r0, r2
    e2a4:	4308      	orrs	r0, r1
    e2a6:	bf0c      	ite	eq
    e2a8:	2001      	moveq	r0, #1
    e2aa:	2000      	movne	r0, #0
    e2ac:	4770      	bx	lr

0000e2ae <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    e2ae:	b570      	push	{r4, r5, r6, lr}
    e2b0:	7802      	ldrb	r2, [r0, #0]
    e2b2:	7841      	ldrb	r1, [r0, #1]
    e2b4:	f002 020f 	and.w	r2, r2, #15
    e2b8:	2a08      	cmp	r2, #8
    e2ba:	d24a      	bcs.n	e352 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e2bc:	e8df f002 	tbb	[pc, r2]
    e2c0:	490b0804 	.word	0x490b0804
    e2c4:	140f4949 	.word	0x140f4949
    e2c8:	1f88      	subs	r0, r1, #6
    e2ca:	281f      	cmp	r0, #31
    e2cc:	d90a      	bls.n	e2e4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
    e2ce:	e040      	b.n	e352 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e2d0:	290c      	cmp	r1, #12
    e2d2:	d007      	beq.n	e2e4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
    e2d4:	e03d      	b.n	e352 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e2d6:	1f88      	subs	r0, r1, #6
    e2d8:	281f      	cmp	r0, #31
    e2da:	d903      	bls.n	e2e4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
    e2dc:	e039      	b.n	e352 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e2de:	1f88      	subs	r0, r1, #6
    e2e0:	281f      	cmp	r0, #31
    e2e2:	d836      	bhi.n	e352 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e2e4:	2001      	movs	r0, #1
    e2e6:	bd70      	pop	{r4, r5, r6, pc}
    e2e8:	000a      	movs	r2, r1
    e2ea:	d032      	beq.n	e352 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e2ec:	4604      	mov	r4, r0
    e2ee:	78c0      	ldrb	r0, [r0, #3]
    e2f0:	2600      	movs	r6, #0
    e2f2:	0982      	lsrs	r2, r0, #6
    e2f4:	2a03      	cmp	r2, #3
    e2f6:	d009      	beq.n	e30c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e2f8:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    e2fc:	1c68      	adds	r0, r5, #1
    e2fe:	4288      	cmp	r0, r1
    e300:	d804      	bhi.n	e30c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e302:	4620      	mov	r0, r4
    e304:	f000 f84e 	bl	e3a4 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
    e308:	42a8      	cmp	r0, r5
    e30a:	d901      	bls.n	e310 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x62>
    e30c:	4630      	mov	r0, r6
    e30e:	bd70      	pop	{r4, r5, r6, pc}
    e310:	78e0      	ldrb	r0, [r4, #3]
    e312:	f04f 0501 	mov.w	r5, #1
    e316:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    e31a:	bf1e      	ittt	ne
    e31c:	f114 0004 	addsne.w	r0, r4, #4
    e320:	7800      	ldrbne	r0, [r0, #0]
    e322:	f010 0f10 	tstne.w	r0, #16
    e326:	d012      	beq.n	e34e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa0>
    e328:	2104      	movs	r1, #4
    e32a:	4620      	mov	r0, r4
    e32c:	f7ff ff2e 	bl	e18c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
    e330:	2800      	cmp	r0, #0
    e332:	bf18      	it	ne
    e334:	eb14 0000 	addsne.w	r0, r4, r0
    e338:	d0e8      	beq.n	e30c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e33a:	7801      	ldrb	r1, [r0, #0]
    e33c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e340:	2925      	cmp	r1, #37	; 0x25
    e342:	d2e3      	bcs.n	e30c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e344:	7880      	ldrb	r0, [r0, #2]
    e346:	2102      	movs	r1, #2
    e348:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
    e34c:	d3de      	bcc.n	e30c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e34e:	4628      	mov	r0, r5
    e350:	bd70      	pop	{r4, r5, r6, pc}
    e352:	2000      	movs	r0, #0
    e354:	bd70      	pop	{r4, r5, r6, pc}

0000e356 <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>:
    e356:	78c1      	ldrb	r1, [r0, #3]
    e358:	7840      	ldrb	r0, [r0, #1]
    e35a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e35e:	1a40      	subs	r0, r0, r1
    e360:	1e40      	subs	r0, r0, #1
    e362:	b2c0      	uxtb	r0, r0
    e364:	4770      	bx	lr

0000e366 <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA>:
    e366:	b570      	push	{r4, r5, r6, lr}
    e368:	78c4      	ldrb	r4, [r0, #3]
    e36a:	468c      	mov	ip, r1
    e36c:	f004 013f 	and.w	r1, r4, #63	; 0x3f
    e370:	7845      	ldrb	r5, [r0, #1]
    e372:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    e376:	1b2c      	subs	r4, r5, r4
    e378:	1e64      	subs	r4, r4, #1
    e37a:	1ae4      	subs	r4, r4, r3
    e37c:	b2e4      	uxtb	r4, r4
    e37e:	4294      	cmp	r4, r2
    e380:	bf88      	it	hi
    e382:	4614      	movhi	r4, r2
    e384:	f1bc 0f00 	cmp.w	ip, #0
    e388:	d006      	beq.n	e398 <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA+0x32>
    e38a:	4419      	add	r1, r3
    e38c:	4408      	add	r0, r1
    e38e:	1d01      	adds	r1, r0, #4
    e390:	4622      	mov	r2, r4
    e392:	4660      	mov	r0, ip
    e394:	f7fe fbcb 	bl	cb2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e398:	4620      	mov	r0, r4
    e39a:	bd70      	pop	{r4, r5, r6, pc}

0000e39c <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>:
    e39c:	78c0      	ldrb	r0, [r0, #3]
    e39e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e3a2:	4770      	bx	lr

0000e3a4 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>:
    e3a4:	78c1      	ldrb	r1, [r0, #3]
    e3a6:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e3aa:	bf18      	it	ne
    e3ac:	2201      	movne	r2, #1
    e3ae:	7900      	ldrb	r0, [r0, #4]
    e3b0:	f010 0301 	ands.w	r3, r0, #1
    e3b4:	bf18      	it	ne
    e3b6:	2301      	movne	r3, #1
    e3b8:	ea03 0c02 	and.w	ip, r3, r2
    e3bc:	f011 0f3f 	tst.w	r1, #63	; 0x3f
    e3c0:	bf14      	ite	ne
    e3c2:	2301      	movne	r3, #1
    e3c4:	2300      	moveq	r3, #0
    e3c6:	f010 0202 	ands.w	r2, r0, #2
    e3ca:	bf18      	it	ne
    e3cc:	2201      	movne	r2, #1
    e3ce:	401a      	ands	r2, r3
    e3d0:	4462      	add	r2, ip
    e3d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e3d6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
    e3da:	f011 0f3f 	tst.w	r1, #63	; 0x3f
    e3de:	bf14      	ite	ne
    e3e0:	2301      	movne	r3, #1
    e3e2:	2300      	moveq	r3, #0
    e3e4:	f010 0208 	ands.w	r2, r0, #8
    e3e8:	bf18      	it	ne
    e3ea:	2201      	movne	r2, #1
    e3ec:	401a      	ands	r2, r3
    e3ee:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    e3f2:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e3f6:	bf18      	it	ne
    e3f8:	2201      	movne	r2, #1
    e3fa:	f010 0304 	ands.w	r3, r0, #4
    e3fe:	bf18      	it	ne
    e400:	2301      	movne	r3, #1
    e402:	401a      	ands	r2, r3
    e404:	4494      	add	ip, r2
    e406:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e40a:	bf18      	it	ne
    e40c:	2201      	movne	r2, #1
    e40e:	f010 0320 	ands.w	r3, r0, #32
    e412:	bf18      	it	ne
    e414:	2301      	movne	r3, #1
    e416:	401a      	ands	r2, r3
    e418:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    e41c:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    e420:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e424:	bf18      	it	ne
    e426:	2201      	movne	r2, #1
    e428:	f010 0310 	ands.w	r3, r0, #16
    e42c:	bf18      	it	ne
    e42e:	2301      	movne	r3, #1
    e430:	401a      	ands	r2, r3
    e432:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e436:	4462      	add	r2, ip
    e438:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
    e43c:	bf18      	it	ne
    e43e:	2101      	movne	r1, #1
    e440:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    e444:	bf18      	it	ne
    e446:	2001      	movne	r0, #1
    e448:	4008      	ands	r0, r1
    e44a:	4410      	add	r0, r2
    e44c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    e450:	bf1c      	itt	ne
    e452:	1c40      	addne	r0, r0, #1
    e454:	b2c0      	uxtbne	r0, r0
    e456:	4770      	bx	lr

0000e458 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    e458:	7800      	ldrb	r0, [r0, #0]
    e45a:	09c0      	lsrs	r0, r0, #7
    e45c:	4770      	bx	lr

0000e45e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    e45e:	7800      	ldrb	r0, [r0, #0]
    e460:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e464:	4770      	bx	lr

0000e466 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    e466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e46a:	7801      	ldrb	r1, [r0, #0]
    e46c:	2601      	movs	r6, #1
    e46e:	f001 010f 	and.w	r1, r1, #15
    e472:	2500      	movs	r5, #0
    e474:	2904      	cmp	r1, #4
    e476:	d00c      	beq.n	e492 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x2c>
    e478:	2907      	cmp	r1, #7
    e47a:	d00f      	beq.n	e49c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x36>
    e47c:	2908      	cmp	r1, #8
    e47e:	bf1c      	itt	ne
    e480:	2000      	movne	r0, #0
    e482:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    e486:	7840      	ldrb	r0, [r0, #1]
    e488:	280e      	cmp	r0, #14
    e48a:	d034      	beq.n	e4f6 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
    e48c:	4628      	mov	r0, r5
    e48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e492:	7840      	ldrb	r0, [r0, #1]
    e494:	1f80      	subs	r0, r0, #6
    e496:	281f      	cmp	r0, #31
    e498:	d92d      	bls.n	e4f6 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
    e49a:	e7f7      	b.n	e48c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    e49c:	4604      	mov	r4, r0
    e49e:	7840      	ldrb	r0, [r0, #1]
    e4a0:	78e1      	ldrb	r1, [r4, #3]
    e4a2:	098a      	lsrs	r2, r1, #6
    e4a4:	2a03      	cmp	r2, #3
    e4a6:	d0f1      	beq.n	e48c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    e4a8:	f001 073f 	and.w	r7, r1, #63	; 0x3f
    e4ac:	1c79      	adds	r1, r7, #1
    e4ae:	4281      	cmp	r1, r0
    e4b0:	d8ec      	bhi.n	e48c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    e4b2:	4620      	mov	r0, r4
    e4b4:	f7ff ff76 	bl	e3a4 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
    e4b8:	42b8      	cmp	r0, r7
    e4ba:	d8e7      	bhi.n	e48c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    e4bc:	78e0      	ldrb	r0, [r4, #3]
    e4be:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    e4c2:	bf1e      	ittt	ne
    e4c4:	f114 0004 	addsne.w	r0, r4, #4
    e4c8:	7800      	ldrbne	r0, [r0, #0]
    e4ca:	f010 0f10 	tstne.w	r0, #16
    e4ce:	d012      	beq.n	e4f6 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
    e4d0:	2104      	movs	r1, #4
    e4d2:	4620      	mov	r0, r4
    e4d4:	f7ff fe5a 	bl	e18c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
    e4d8:	2800      	cmp	r0, #0
    e4da:	bf18      	it	ne
    e4dc:	eb14 0000 	addsne.w	r0, r4, r0
    e4e0:	d0d4      	beq.n	e48c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    e4e2:	7801      	ldrb	r1, [r0, #0]
    e4e4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e4e8:	2925      	cmp	r1, #37	; 0x25
    e4ea:	d2cf      	bcs.n	e48c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    e4ec:	7880      	ldrb	r0, [r0, #2]
    e4ee:	2102      	movs	r1, #2
    e4f0:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
    e4f4:	d3ca      	bcc.n	e48c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    e4f6:	4630      	mov	r0, r6
    e4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4fc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e4fc:	b510      	push	{r4, lr}
    e4fe:	7802      	ldrb	r2, [r0, #0]
    e500:	f001 030f 	and.w	r3, r1, #15
    e504:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e508:	431a      	orrs	r2, r3
    e50a:	7002      	strb	r2, [r0, #0]
    e50c:	2909      	cmp	r1, #9
    e50e:	d213      	bcs.n	e538 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
    e510:	e8df f001 	tbb	[pc, r1]
    e514:	07050705 	.word	0x07050705
    e518:	0b050905 	.word	0x0b050905
    e51c:	000f      	.short	0x000f
    e51e:	2106      	movs	r1, #6
    e520:	e008      	b.n	e534 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
    e522:	210c      	movs	r1, #12
    e524:	e006      	b.n	e534 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
    e526:	2122      	movs	r1, #34	; 0x22
    e528:	e004      	b.n	e534 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
    e52a:	2101      	movs	r1, #1
    e52c:	2200      	movs	r2, #0
    e52e:	70c2      	strb	r2, [r0, #3]
    e530:	e000      	b.n	e534 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
    e532:	210e      	movs	r1, #14
    e534:	7041      	strb	r1, [r0, #1]
    e536:	bd10      	pop	{r4, pc}
    e538:	216f      	movs	r1, #111	; 0x6f
    e53a:	202a      	movs	r0, #42	; 0x2a
    e53c:	f7f5 fd3e 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e540 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e540:	680a      	ldr	r2, [r1, #0]
    e542:	f8c0 2009 	str.w	r2, [r0, #9]
    e546:	8889      	ldrh	r1, [r1, #4]
    e548:	f8a0 100d 	strh.w	r1, [r0, #13]
    e54c:	4770      	bx	lr

0000e54e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e54e:	7802      	ldrb	r2, [r0, #0]
    e550:	2380      	movs	r3, #128	; 0x80
    e552:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e556:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
    e55a:	4311      	orrs	r1, r2
    e55c:	7001      	strb	r1, [r0, #0]
    e55e:	4770      	bx	lr

0000e560 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e560:	680a      	ldr	r2, [r1, #0]
    e562:	f8c0 2003 	str.w	r2, [r0, #3]
    e566:	8889      	ldrh	r1, [r1, #4]
    e568:	f8a0 1007 	strh.w	r1, [r0, #7]
    e56c:	4770      	bx	lr

0000e56e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e56e:	7802      	ldrb	r2, [r0, #0]
    e570:	2340      	movs	r3, #64	; 0x40
    e572:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e576:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e57a:	4311      	orrs	r1, r2
    e57c:	7001      	strb	r1, [r0, #0]
    e57e:	4770      	bx	lr

0000e580 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e580:	6800      	ldr	r0, [r0, #0]
    e582:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e586:	4290      	cmp	r0, r2
    e588:	bf9c      	itt	ls
    e58a:	2000      	movls	r0, #0
    e58c:	4770      	bxls	lr
    e58e:	1a40      	subs	r0, r0, r1
    e590:	389c      	subs	r0, #156	; 0x9c
    e592:	0840      	lsrs	r0, r0, #1
    e594:	4770      	bx	lr

0000e596 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e596:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e59a:	2255      	movs	r2, #85	; 0x55
    e59c:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e5a0:	4408      	add	r0, r1
    e5a2:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e5a6:	2233      	movs	r2, #51	; 0x33
    e5a8:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e5ac:	4408      	add	r0, r1
    e5ae:	f000 010f 	and.w	r1, r0, #15
    e5b2:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e5b6:	4770      	bx	lr

0000e5b8 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY>:
    e5b8:	2800      	cmp	r0, #0
    e5ba:	db03      	blt.n	e5c4 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0xc>
    e5bc:	4288      	cmp	r0, r1
    e5be:	db04      	blt.n	e5ca <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x12>
    e5c0:	4608      	mov	r0, r1
    e5c2:	e002      	b.n	e5ca <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x12>
    e5c4:	4249      	negs	r1, r1
    e5c6:	4288      	cmp	r0, r1
    e5c8:	dbfa      	blt.n	e5c0 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x8>
    e5ca:	b200      	sxth	r0, r0
    e5cc:	4770      	bx	lr

0000e5ce <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e5ce:	20ff      	movs	r0, #255	; 0xff
    e5d0:	7008      	strb	r0, [r1, #0]
    e5d2:	6c48      	ldr	r0, [r1, #68]	; 0x44
    e5d4:	f7ff baed 	b.w	dbb2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e5d8 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e5d8:	b530      	push	{r4, r5, lr}
    e5da:	460d      	mov	r5, r1
    e5dc:	b085      	sub	sp, #20
    e5de:	4604      	mov	r4, r0
    e5e0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    e5e4:	2100      	movs	r1, #0
    e5e6:	f7fe fb1c 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e5ea:	20ff      	movs	r0, #255	; 0xff
    e5ec:	7020      	strb	r0, [r4, #0]
    e5ee:	207f      	movs	r0, #127	; 0x7f
    e5f0:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
    e5f4:	2013      	movs	r0, #19
    e5f6:	8060      	strh	r0, [r4, #2]
    e5f8:	f7f6 f944 	bl	4884 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e5fc:	4601      	mov	r1, r0
    e5fe:	6460      	str	r0, [r4, #68]	; 0x44
    e600:	2200      	movs	r2, #0
    e602:	a802      	add	r0, sp, #8
    e604:	f7ff fa7c 	bl	db00 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e608:	2200      	movs	r2, #0
    e60a:	2101      	movs	r1, #1
    e60c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    e60e:	f7ff faaf 	bl	db70 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e612:	2204      	movs	r2, #4
    e614:	a802      	add	r0, sp, #8
    e616:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e618:	f7ff fa72 	bl	db00 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e61c:	2200      	movs	r2, #0
    e61e:	4611      	mov	r1, r2
    e620:	6c60      	ldr	r0, [r4, #68]	; 0x44
    e622:	f7ff faa5 	bl	db70 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e626:	7425      	strb	r5, [r4, #16]
    e628:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e62c:	f000 f821 	bl	e672 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    e630:	4668      	mov	r0, sp
    e632:	f7f6 fef5 	bl	5420 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    e636:	b130      	cbz	r0, e646 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ+0x6e>
    e638:	4669      	mov	r1, sp
    e63a:	f104 002e 	add.w	r0, r4, #46	; 0x2e
    e63e:	f7f6 ff11 	bl	5464 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    e642:	b005      	add	sp, #20
    e644:	bd30      	pop	{r4, r5, pc}
    e646:	f240 3126 	movw	r1, #806	; 0x326
    e64a:	202d      	movs	r0, #45	; 0x2d
    e64c:	f7f5 fcb6 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e650 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e650:	7880      	ldrb	r0, [r0, #2]
    e652:	f000 0001 	and.w	r0, r0, #1
    e656:	4770      	bx	lr

0000e658 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e658:	7880      	ldrb	r0, [r0, #2]
    e65a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e65e:	4770      	bx	lr

0000e660 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e660:	7880      	ldrb	r0, [r0, #2]
    e662:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e666:	4770      	bx	lr

0000e668 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e668:	7c40      	ldrb	r0, [r0, #17]
    e66a:	2800      	cmp	r0, #0
    e66c:	bf18      	it	ne
    e66e:	2001      	movne	r0, #1
    e670:	4770      	bx	lr

0000e672 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e672:	b510      	push	{r4, lr}
    e674:	4604      	mov	r4, r0
    e676:	f001 f8ce 	bl	f816 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    e67a:	2001      	movs	r0, #1
    e67c:	7060      	strb	r0, [r4, #1]
    e67e:	7020      	strb	r0, [r4, #0]
    e680:	bd10      	pop	{r4, pc}

0000e682 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    e682:	f890 0120 	ldrb.w	r0, [r0, #288]	; 0x120
    e686:	4770      	bx	lr

0000e688 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e688:	f7f5 bfd8 	b.w	463c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e68c <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e68c:	f7f9 bc1c 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>
    e690:	2101      	movs	r1, #1
    e692:	f7f8 b9eb 	b.w	6a6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    e696:	2103      	movs	r1, #3
    e698:	f7f8 b9e8 	b.w	6a6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    e69c:	f240 3191 	movw	r1, #913	; 0x391
    e6a0:	2032      	movs	r0, #50	; 0x32
    e6a2:	f7f5 fc8b 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6a6:	f7f9 bc0f 	b.w	7ec8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1998>

0000e6aa <sym_OMJ3SW7NEDZYIEECEHTEY7EFLFDPDBULVOYOR3I>:
    e6aa:	b530      	push	{r4, r5, lr}
    e6ac:	b083      	sub	sp, #12
    e6ae:	460c      	mov	r4, r1
    e6b0:	4605      	mov	r5, r0
    e6b2:	f7f6 f913 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e6b6:	aa01      	add	r2, sp, #4
    e6b8:	4669      	mov	r1, sp
    e6ba:	f7ff f896 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e6be:	9800      	ldr	r0, [sp, #0]
    e6c0:	f7ff f83a 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e6c4:	f890 1020 	ldrb.w	r1, [r0, #32]
    e6c8:	42a9      	cmp	r1, r5
    e6ca:	bf05      	ittet	eq
    e6cc:	f8b0 0021 	ldrheq.w	r0, [r0, #33]	; 0x21
    e6d0:	42a0      	cmpeq	r0, r4
    e6d2:	2000      	movne	r0, #0
    e6d4:	2001      	moveq	r0, #1
    e6d6:	b003      	add	sp, #12
    e6d8:	bd30      	pop	{r4, r5, pc}

0000e6da <sym_LAYK5IGLYEFQ5CM2XGZHPMQBISU3CLYKB6Y3VWY>:
    e6da:	b530      	push	{r4, r5, lr}
    e6dc:	b083      	sub	sp, #12
    e6de:	460c      	mov	r4, r1
    e6e0:	4605      	mov	r5, r0
    e6e2:	f7f6 f8fb 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e6e6:	aa01      	add	r2, sp, #4
    e6e8:	4669      	mov	r1, sp
    e6ea:	f7ff f87e 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e6ee:	9800      	ldr	r0, [sp, #0]
    e6f0:	f7ff f822 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e6f4:	b114      	cbz	r4, e6fc <sym_LAYK5IGLYEFQ5CM2XGZHPMQBISU3CLYKB6Y3VWY+0x22>
    e6f6:	2c03      	cmp	r4, #3
    e6f8:	d008      	beq.n	e70c <sym_LAYK5IGLYEFQ5CM2XGZHPMQBISU3CLYKB6Y3VWY+0x32>
    e6fa:	e00f      	b.n	e71c <sym_LAYK5IGLYEFQ5CM2XGZHPMQBISU3CLYKB6Y3VWY+0x42>
    e6fc:	7828      	ldrb	r0, [r5, #0]
    e6fe:	2800      	cmp	r0, #0
    e700:	bf04      	itt	eq
    e702:	7868      	ldrbeq	r0, [r5, #1]
    e704:	f010 0f10 	tsteq.w	r0, #16
    e708:	d108      	bne.n	e71c <sym_LAYK5IGLYEFQ5CM2XGZHPMQBISU3CLYKB6Y3VWY+0x42>
    e70a:	e003      	b.n	e714 <sym_LAYK5IGLYEFQ5CM2XGZHPMQBISU3CLYKB6Y3VWY+0x3a>
    e70c:	7f00      	ldrb	r0, [r0, #28]
    e70e:	f010 0f08 	tst.w	r0, #8
    e712:	d003      	beq.n	e71c <sym_LAYK5IGLYEFQ5CM2XGZHPMQBISU3CLYKB6Y3VWY+0x42>
    e714:	b003      	add	sp, #12
    e716:	f04f 0001 	mov.w	r0, #1
    e71a:	bd30      	pop	{r4, r5, pc}
    e71c:	b003      	add	sp, #12
    e71e:	f04f 0000 	mov.w	r0, #0
    e722:	bd30      	pop	{r4, r5, pc}

0000e724 <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>:
    e724:	b500      	push	{lr}
    e726:	b083      	sub	sp, #12
    e728:	f7f6 f8d8 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e72c:	aa01      	add	r2, sp, #4
    e72e:	4669      	mov	r1, sp
    e730:	f7ff f85b 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e734:	9800      	ldr	r0, [sp, #0]
    e736:	f7fe ffff 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e73a:	7cc0      	ldrb	r0, [r0, #19]
    e73c:	28ff      	cmp	r0, #255	; 0xff
    e73e:	bf14      	ite	ne
    e740:	2001      	movne	r0, #1
    e742:	2000      	moveq	r0, #0
    e744:	b003      	add	sp, #12
    e746:	bd00      	pop	{pc}

0000e748 <sym_W25Y3XPKXGZB4KRPGEWVTTYC4QVEIN6I4NFKVII>:
    e748:	b500      	push	{lr}
    e74a:	b083      	sub	sp, #12
    e74c:	f7f6 f8c6 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e750:	aa01      	add	r2, sp, #4
    e752:	4669      	mov	r1, sp
    e754:	f7ff f849 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e758:	9800      	ldr	r0, [sp, #0]
    e75a:	f7fe ffed 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e75e:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    e762:	28ff      	cmp	r0, #255	; 0xff
    e764:	bf14      	ite	ne
    e766:	2001      	movne	r0, #1
    e768:	2000      	moveq	r0, #0
    e76a:	b003      	add	sp, #12
    e76c:	bd00      	pop	{pc}

0000e76e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    e76e:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e772:	b083      	sub	sp, #12
    e774:	461d      	mov	r5, r3
    e776:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    e77a:	460e      	mov	r6, r1
    e77c:	4607      	mov	r7, r0
    e77e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    e782:	f7f6 f8ab 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e786:	4604      	mov	r4, r0
    e788:	f7fe ffd8 	bl	d73c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e78c:	2801      	cmp	r0, #1
    e78e:	bf04      	itt	eq
    e790:	b007      	addeq	sp, #28
    e792:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e796:	4620      	mov	r0, r4
    e798:	aa01      	add	r2, sp, #4
    e79a:	4669      	mov	r1, sp
    e79c:	f7ff f825 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e7a0:	9800      	ldr	r0, [sp, #0]
    e7a2:	f7fe ffc9 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e7a6:	4604      	mov	r4, r0
    e7a8:	221c      	movs	r2, #28
    e7aa:	2100      	movs	r1, #0
    e7ac:	3012      	adds	r0, #18
    e7ae:	f7fe fa38 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e7b2:	f04f 0a01 	mov.w	sl, #1
    e7b6:	f884 a012 	strb.w	sl, [r4, #18]
    e7ba:	b156      	cbz	r6, e7d2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x64>
    e7bc:	2e01      	cmp	r6, #1
    e7be:	d00d      	beq.n	e7dc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x6e>
    e7c0:	2e02      	cmp	r6, #2
    e7c2:	d010      	beq.n	e7e6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x78>
    e7c4:	2e06      	cmp	r6, #6
    e7c6:	d013      	beq.n	e7f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x82>
    e7c8:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    e7cc:	2033      	movs	r0, #51	; 0x33
    e7ce:	f7f5 fbf5 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7d2:	7f20      	ldrb	r0, [r4, #28]
    e7d4:	f040 0013 	orr.w	r0, r0, #19
    e7d8:	7720      	strb	r0, [r4, #28]
    e7da:	e00d      	b.n	e7f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    e7dc:	7f20      	ldrb	r0, [r4, #28]
    e7de:	f040 0015 	orr.w	r0, r0, #21
    e7e2:	7720      	strb	r0, [r4, #28]
    e7e4:	e008      	b.n	e7f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    e7e6:	7f20      	ldrb	r0, [r4, #28]
    e7e8:	f040 0010 	orr.w	r0, r0, #16
    e7ec:	7720      	strb	r0, [r4, #28]
    e7ee:	e003      	b.n	e7f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    e7f0:	7f20      	ldrb	r0, [r4, #28]
    e7f2:	f040 0012 	orr.w	r0, r0, #18
    e7f6:	7720      	strb	r0, [r4, #28]
    e7f8:	f104 0214 	add.w	r2, r4, #20
    e7fc:	1e56      	subs	r6, r2, #1
    e7fe:	4640      	mov	r0, r8
    e800:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    e804:	d00c      	beq.n	e820 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb2>
    e806:	4631      	mov	r1, r6
    e808:	f7f6 fb04 	bl	4e14 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    e80c:	b120      	cbz	r0, e818 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e80e:	7830      	ldrb	r0, [r6, #0]
    e810:	f040 0002 	orr.w	r0, r0, #2
    e814:	7030      	strb	r0, [r6, #0]
    e816:	e00a      	b.n	e82e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xc0>
    e818:	2189      	movs	r1, #137	; 0x89
    e81a:	2033      	movs	r0, #51	; 0x33
    e81c:	f7f5 fbce 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e820:	7c78      	ldrb	r0, [r7, #17]
    e822:	7030      	strb	r0, [r6, #0]
    e824:	6878      	ldr	r0, [r7, #4]
    e826:	6801      	ldr	r1, [r0, #0]
    e828:	6011      	str	r1, [r2, #0]
    e82a:	8880      	ldrh	r0, [r0, #4]
    e82c:	8090      	strh	r0, [r2, #4]
    e82e:	f884 b01b 	strb.w	fp, [r4, #27]
    e832:	f884 a01e 	strb.w	sl, [r4, #30]
    e836:	2600      	movs	r6, #0
    e838:	77e6      	strb	r6, [r4, #31]
    e83a:	20ff      	movs	r0, #255	; 0xff
    e83c:	f884 0020 	strb.w	r0, [r4, #32]
    e840:	7f21      	ldrb	r1, [r4, #28]
    e842:	f011 0f04 	tst.w	r1, #4
    e846:	bf08      	it	eq
    e848:	f884 0025 	strbeq.w	r0, [r4, #37]	; 0x25
    e84c:	d012      	beq.n	e874 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x106>
    e84e:	f104 0026 	add.w	r0, r4, #38	; 0x26
    e852:	1e41      	subs	r1, r0, #1
    e854:	2d02      	cmp	r5, #2
    e856:	bf18      	it	ne
    e858:	2d03      	cmpne	r5, #3
    e85a:	d005      	beq.n	e868 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xfa>
    e85c:	68ba      	ldr	r2, [r7, #8]
    e85e:	6813      	ldr	r3, [r2, #0]
    e860:	6003      	str	r3, [r0, #0]
    e862:	8892      	ldrh	r2, [r2, #4]
    e864:	8082      	strh	r2, [r0, #4]
    e866:	e004      	b.n	e872 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x104>
    e868:	9a05      	ldr	r2, [sp, #20]
    e86a:	6813      	ldr	r3, [r2, #0]
    e86c:	6003      	str	r3, [r0, #0]
    e86e:	8892      	ldrh	r2, [r2, #4]
    e870:	8082      	strh	r2, [r0, #4]
    e872:	700d      	strb	r5, [r1, #0]
    e874:	f04f 007f 	mov.w	r0, #127	; 0x7f
    e878:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    e87c:	f884 902d 	strb.w	r9, [r4, #45]	; 0x2d
    e880:	f7f6 f82c 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e884:	4605      	mov	r5, r0
    e886:	f7f6 f823 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e88a:	4601      	mov	r1, r0
    e88c:	2201      	movs	r2, #1
    e88e:	4628      	mov	r0, r5
    e890:	f7fe fefa 	bl	d688 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    e894:	b150      	cbz	r0, e8ac <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x13e>
    e896:	4620      	mov	r0, r4
    e898:	7206      	strb	r6, [r0, #8]
    e89a:	2202      	movs	r2, #2
    e89c:	2100      	movs	r1, #0
    e89e:	f7f6 fe39 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e8a2:	b007      	add	sp, #28
    e8a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8a8:	f7f7 b96c 	b.w	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e8ac:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    e8b0:	2033      	movs	r0, #51	; 0x33
    e8b2:	f7f5 fb83 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e8b6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e8b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8ba:	b083      	sub	sp, #12
    e8bc:	461f      	mov	r7, r3
    e8be:	4690      	mov	r8, r2
    e8c0:	460d      	mov	r5, r1
    e8c2:	4606      	mov	r6, r0
    e8c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    e8c8:	f7f6 f808 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e8cc:	4604      	mov	r4, r0
    e8ce:	f7fe ff35 	bl	d73c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e8d2:	2801      	cmp	r0, #1
    e8d4:	bf04      	itt	eq
    e8d6:	b003      	addeq	sp, #12
    e8d8:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8dc:	4620      	mov	r0, r4
    e8de:	aa01      	add	r2, sp, #4
    e8e0:	4669      	mov	r1, sp
    e8e2:	f7fe ff82 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e8e6:	9800      	ldr	r0, [sp, #0]
    e8e8:	f7fe ff26 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e8ec:	4604      	mov	r4, r0
    e8ee:	221c      	movs	r2, #28
    e8f0:	2100      	movs	r1, #0
    e8f2:	3012      	adds	r0, #18
    e8f4:	f7fe f995 	bl	cc22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e8f8:	f04f 0901 	mov.w	r9, #1
    e8fc:	f884 9012 	strb.w	r9, [r4, #18]
    e900:	f104 0214 	add.w	r2, r4, #20
    e904:	f104 0b13 	add.w	fp, r4, #19
    e908:	2dff      	cmp	r5, #255	; 0xff
    e90a:	d00f      	beq.n	e92c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x76>
    e90c:	4659      	mov	r1, fp
    e90e:	4628      	mov	r0, r5
    e910:	f7f6 fa80 	bl	4e14 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    e914:	b130      	cbz	r0, e924 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x6e>
    e916:	f89b 0000 	ldrb.w	r0, [fp]
    e91a:	f040 0002 	orr.w	r0, r0, #2
    e91e:	f88b 0000 	strb.w	r0, [fp]
    e922:	e00b      	b.n	e93c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x86>
    e924:	2189      	movs	r1, #137	; 0x89
    e926:	2033      	movs	r0, #51	; 0x33
    e928:	f7f5 fb48 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e92c:	7c70      	ldrb	r0, [r6, #17]
    e92e:	f88b 0000 	strb.w	r0, [fp]
    e932:	6870      	ldr	r0, [r6, #4]
    e934:	6801      	ldr	r1, [r0, #0]
    e936:	6011      	str	r1, [r2, #0]
    e938:	8880      	ldrh	r0, [r0, #4]
    e93a:	8090      	strh	r0, [r2, #4]
    e93c:	f884 a01b 	strb.w	sl, [r4, #27]
    e940:	7f20      	ldrb	r0, [r4, #28]
    e942:	2500      	movs	r5, #0
    e944:	f368 0000 	bfi	r0, r8, #0, #1
    e948:	f040 001a 	orr.w	r0, r0, #26
    e94c:	7720      	strb	r0, [r4, #28]
    e94e:	f884 901e 	strb.w	r9, [r4, #30]
    e952:	77e5      	strb	r5, [r4, #31]
    e954:	20ff      	movs	r0, #255	; 0xff
    e956:	f884 0020 	strb.w	r0, [r4, #32]
    e95a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    e95e:	207f      	movs	r0, #127	; 0x7f
    e960:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    e964:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    e968:	f7f5 ffb8 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e96c:	4606      	mov	r6, r0
    e96e:	f7f5 ffaf 	bl	48d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e972:	4601      	mov	r1, r0
    e974:	2201      	movs	r2, #1
    e976:	4630      	mov	r0, r6
    e978:	f7fe fe86 	bl	d688 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    e97c:	b150      	cbz	r0, e994 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xde>
    e97e:	4620      	mov	r0, r4
    e980:	7205      	strb	r5, [r0, #8]
    e982:	2202      	movs	r2, #2
    e984:	2100      	movs	r1, #0
    e986:	f7f6 fdc5 	bl	5514 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e98a:	b003      	add	sp, #12
    e98c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e990:	f7f7 b8f8 	b.w	5b84 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e994:	f240 21fd 	movw	r1, #765	; 0x2fd
    e998:	2033      	movs	r0, #51	; 0x33
    e99a:	f7f5 fb0f 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e99e <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y>:
    e99e:	b510      	push	{r4, lr}
    e9a0:	b082      	sub	sp, #8
    e9a2:	e9dd 4c04 	ldrd	r4, ip, [sp, #16]
    e9a6:	f1bc 0f00 	cmp.w	ip, #0
    e9aa:	d008      	beq.n	e9be <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x20>
    e9ac:	f1bc 0f01 	cmp.w	ip, #1
    e9b0:	d018      	beq.n	e9e4 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x46>
    e9b2:	f1bc 0f02 	cmp.w	ip, #2
    e9b6:	bf08      	it	eq
    e9b8:	2b00      	cmpeq	r3, #0
    e9ba:	d037      	beq.n	ea2c <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x8e>
    e9bc:	e033      	b.n	ea26 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x88>
    e9be:	2a02      	cmp	r2, #2
    e9c0:	d031      	beq.n	ea26 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x88>
    e9c2:	2a01      	cmp	r2, #1
    e9c4:	d001      	beq.n	e9ca <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x2c>
    e9c6:	b12a      	cbz	r2, e9d4 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x36>
    e9c8:	e02d      	b.n	ea26 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x88>
    e9ca:	2b00      	cmp	r3, #0
    e9cc:	bf08      	it	eq
    e9ce:	2c02      	cmpeq	r4, #2
    e9d0:	d129      	bne.n	ea26 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x88>
    e9d2:	e02b      	b.n	ea2c <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x8e>
    e9d4:	f014 0f0c 	tst.w	r4, #12
    e9d8:	bf1c      	itt	ne
    e9da:	7848      	ldrbne	r0, [r1, #1]
    e9dc:	f010 0f10 	tstne.w	r0, #16
    e9e0:	d121      	bne.n	ea26 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x88>
    e9e2:	e023      	b.n	ea2c <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x8e>
    e9e4:	b122      	cbz	r2, e9f0 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x52>
    e9e6:	2a01      	cmp	r2, #1
    e9e8:	d023      	beq.n	ea32 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x94>
    e9ea:	2a02      	cmp	r2, #2
    e9ec:	d01e      	beq.n	ea2c <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x8e>
    e9ee:	e01a      	b.n	ea26 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x88>
    e9f0:	b16b      	cbz	r3, ea0e <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x70>
    e9f2:	f7f5 ff73 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9f6:	aa01      	add	r2, sp, #4
    e9f8:	4669      	mov	r1, sp
    e9fa:	f7fe fef6 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e9fe:	9800      	ldr	r0, [sp, #0]
    ea00:	f7fe fe9a 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ea04:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    ea08:	28ff      	cmp	r0, #255	; 0xff
    ea0a:	d00f      	beq.n	ea2c <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x8e>
    ea0c:	e00b      	b.n	ea26 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x88>
    ea0e:	f7f5 ff65 	bl	48dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ea12:	aa01      	add	r2, sp, #4
    ea14:	4669      	mov	r1, sp
    ea16:	f7fe fee8 	bl	d7ea <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    ea1a:	9800      	ldr	r0, [sp, #0]
    ea1c:	f7fe fe8c 	bl	d738 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ea20:	7cc0      	ldrb	r0, [r0, #19]
    ea22:	28ff      	cmp	r0, #255	; 0xff
    ea24:	d002      	beq.n	ea2c <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x8e>
    ea26:	b002      	add	sp, #8
    ea28:	2001      	movs	r0, #1
    ea2a:	bd10      	pop	{r4, pc}
    ea2c:	b002      	add	sp, #8
    ea2e:	2000      	movs	r0, #0
    ea30:	bd10      	pop	{r4, pc}
    ea32:	7b00      	ldrb	r0, [r0, #12]
    ea34:	2802      	cmp	r0, #2
    ea36:	d1f9      	bne.n	ea2c <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x8e>
    ea38:	e7f5      	b.n	ea26 <sym_N4ILSLKDZS6JBJI35QECDSPTA4MOGH57OAV3Z5Y+0x88>

0000ea3a <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY>:
    ea3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea3e:	4606      	mov	r6, r0
    ea40:	78c0      	ldrb	r0, [r0, #3]
    ea42:	2405      	movs	r4, #5
    ea44:	460d      	mov	r5, r1
    ea46:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    ea4a:	f04f 0800 	mov.w	r8, #0
    ea4e:	bf1c      	itt	ne
    ea50:	4630      	movne	r0, r6
    ea52:	f116 0704 	addsne.w	r7, r6, #4
    ea56:	d061      	beq.n	eb1c <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xe2>
    ea58:	f7ff fd01 	bl	e45e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    ea5c:	7468      	strb	r0, [r5, #17]
    ea5e:	4630      	mov	r0, r6
    ea60:	f7ff fcfa 	bl	e458 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    ea64:	74a8      	strb	r0, [r5, #18]
    ea66:	7838      	ldrb	r0, [r7, #0]
    ea68:	7068      	strb	r0, [r5, #1]
    ea6a:	78f0      	ldrb	r0, [r6, #3]
    ea6c:	0980      	lsrs	r0, r0, #6
    ea6e:	7028      	strb	r0, [r5, #0]
    ea70:	7838      	ldrb	r0, [r7, #0]
    ea72:	f010 0f01 	tst.w	r0, #1
    ea76:	bf08      	it	eq
    ea78:	f8c5 8004 	streq.w	r8, [r5, #4]
    ea7c:	d002      	beq.n	ea84 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x4a>
    ea7e:	1d70      	adds	r0, r6, #5
    ea80:	240b      	movs	r4, #11
    ea82:	6068      	str	r0, [r5, #4]
    ea84:	7838      	ldrb	r0, [r7, #0]
    ea86:	f010 0f02 	tst.w	r0, #2
    ea8a:	bf08      	it	eq
    ea8c:	f8c5 8008 	streq.w	r8, [r5, #8]
    ea90:	d002      	beq.n	ea98 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x5e>
    ea92:	1930      	adds	r0, r6, r4
    ea94:	1da4      	adds	r4, r4, #6
    ea96:	60a8      	str	r0, [r5, #8]
    ea98:	7838      	ldrb	r0, [r7, #0]
    ea9a:	f010 0f04 	tst.w	r0, #4
    ea9e:	bf18      	it	ne
    eaa0:	1c64      	addne	r4, r4, #1
    eaa2:	f010 0f08 	tst.w	r0, #8
    eaa6:	bf08      	it	eq
    eaa8:	f8c5 8014 	streq.w	r8, [r5, #20]
    eaac:	d002      	beq.n	eab4 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x7a>
    eaae:	1930      	adds	r0, r6, r4
    eab0:	1ca4      	adds	r4, r4, #2
    eab2:	6168      	str	r0, [r5, #20]
    eab4:	7838      	ldrb	r0, [r7, #0]
    eab6:	f010 0f10 	tst.w	r0, #16
    eaba:	bf08      	it	eq
    eabc:	f8c5 8018 	streq.w	r8, [r5, #24]
    eac0:	d002      	beq.n	eac8 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x8e>
    eac2:	1930      	adds	r0, r6, r4
    eac4:	1ce4      	adds	r4, r4, #3
    eac6:	61a8      	str	r0, [r5, #24]
    eac8:	7838      	ldrb	r0, [r7, #0]
    eaca:	f010 0f20 	tst.w	r0, #32
    eace:	bf08      	it	eq
    ead0:	f8c5 801c 	streq.w	r8, [r5, #28]
    ead4:	d004      	beq.n	eae0 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xa6>
    ead6:	1930      	adds	r0, r6, r4
    ead8:	61e8      	str	r0, [r5, #28]
    eada:	f104 0012 	add.w	r0, r4, #18
    eade:	b2c4      	uxtb	r4, r0
    eae0:	7838      	ldrb	r0, [r7, #0]
    eae2:	f010 0f40 	tst.w	r0, #64	; 0x40
    eae6:	bf08      	it	eq
    eae8:	f8c5 8020 	streq.w	r8, [r5, #32]
    eaec:	d003      	beq.n	eaf6 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xbc>
    eaee:	1930      	adds	r0, r6, r4
    eaf0:	6228      	str	r0, [r5, #32]
    eaf2:	1c60      	adds	r0, r4, #1
    eaf4:	b2c4      	uxtb	r4, r0
    eaf6:	4630      	mov	r0, r6
    eaf8:	f7ff fc50 	bl	e39c <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>
    eafc:	1b00      	subs	r0, r0, r4
    eafe:	1d00      	adds	r0, r0, #4
    eb00:	4420      	add	r0, r4
    eb02:	b2c4      	uxtb	r4, r0
    eb04:	4630      	mov	r0, r6
    eb06:	f7ff fc26 	bl	e356 <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>
    eb0a:	7428      	strb	r0, [r5, #16]
    eb0c:	2800      	cmp	r0, #0
    eb0e:	bf1a      	itte	ne
    eb10:	1930      	addne	r0, r6, r4
    eb12:	60e8      	strne	r0, [r5, #12]
    eb14:	f8c5 800c 	streq.w	r8, [r5, #12]
    eb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb1c:	f8c5 8000 	str.w	r8, [r5]
    eb20:	f8c5 8004 	str.w	r8, [r5, #4]
    eb24:	f8c5 8008 	str.w	r8, [r5, #8]
    eb28:	f8c5 800c 	str.w	r8, [r5, #12]
    eb2c:	f8c5 8010 	str.w	r8, [r5, #16]
    eb30:	f8c5 8014 	str.w	r8, [r5, #20]
    eb34:	f8c5 8018 	str.w	r8, [r5, #24]
    eb38:	f8c5 801c 	str.w	r8, [r5, #28]
    eb3c:	f8c1 8020 	str.w	r8, [r1, #32]
    eb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eb44 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    eb44:	7802      	ldrb	r2, [r0, #0]
    eb46:	f002 020f 	and.w	r2, r2, #15
    eb4a:	2a07      	cmp	r2, #7
    eb4c:	d001      	beq.n	eb52 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xe>
    eb4e:	f7f9 bf13 	b.w	8978 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    eb52:	f7ff bf72 	b.w	ea3a <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY>
    eb56:	b530      	push	{r4, r5, lr}
    eb58:	b083      	sub	sp, #12
    eb5a:	245b      	movs	r4, #91	; 0x5b
    eb5c:	f7f4 ffe2 	bl	3b24 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    eb60:	2800      	cmp	r0, #0
    eb62:	bf18      	it	ne
    eb64:	2473      	movne	r4, #115	; 0x73
    eb66:	4668      	mov	r0, sp
    eb68:	f7f5 f896 	bl	3c98 <mpsl_fem_pa_is_configured>
    eb6c:	f89d 0000 	ldrb.w	r0, [sp]
    eb70:	2800      	cmp	r0, #0
    eb72:	bf14      	ite	ne
    eb74:	2501      	movne	r5, #1
    eb76:	2500      	moveq	r5, #0
    eb78:	a801      	add	r0, sp, #4
    eb7a:	f7f5 f875 	bl	3c68 <mpsl_fem_lna_is_configured>
    eb7e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eb82:	2800      	cmp	r0, #0
    eb84:	bf18      	it	ne
    eb86:	2001      	movne	r0, #1
    eb88:	4328      	orrs	r0, r5
    eb8a:	bf18      	it	ne
    eb8c:	3409      	addne	r4, #9
    eb8e:	4620      	mov	r0, r4
    eb90:	b003      	add	sp, #12
    eb92:	bd30      	pop	{r4, r5, pc}

0000eb94 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    eb94:	f7f5 bd52 	b.w	463c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000eb98 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    eb98:	b510      	push	{r4, lr}
    eb9a:	e9dd 3c02 	ldrd	r3, ip, [sp, #8]
    eb9e:	1ac0      	subs	r0, r0, r3
    eba0:	eb71 010c 	sbcs.w	r1, r1, ip
    eba4:	d516      	bpl.n	ebd4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    eba6:	f04f 3cff 	mov.w	ip, #4294967295
    ebaa:	f1d0 4300 	rsbs	r3, r0, #2147483648	; 0x80000000
    ebae:	eb7c 0101 	sbcs.w	r1, ip, r1
    ebb2:	db03      	blt.n	ebbc <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    ebb4:	21b2      	movs	r1, #178	; 0xb2
    ebb6:	2037      	movs	r0, #55	; 0x37
    ebb8:	f7f5 fa00 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebbc:	4240      	negs	r0, r0
    ebbe:	eb00 0102 	add.w	r1, r0, r2
    ebc2:	f1a1 0101 	sub.w	r1, r1, #1
    ebc6:	fbb1 f1f2 	udiv	r1, r1, r2
    ebca:	fb01 f102 	mul.w	r1, r1, r2
    ebce:	eba1 0000 	sub.w	r0, r1, r0
    ebd2:	bd10      	pop	{r4, pc}
    ebd4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ebd8:	1ac3      	subs	r3, r0, r3
    ebda:	f171 0100 	sbcs.w	r1, r1, #0
    ebde:	bfbe      	ittt	lt
    ebe0:	fb90 f1f2 	sdivlt	r1, r0, r2
    ebe4:	fb01 0012 	mlslt	r0, r1, r2, r0
    ebe8:	bd10      	poplt	{r4, pc}
    ebea:	21bb      	movs	r1, #187	; 0xbb
    ebec:	2037      	movs	r0, #55	; 0x37
    ebee:	f7f5 f9e5 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebf2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ebf6:	f001 0107 	and.w	r1, r1, #7
    ebfa:	7800      	ldrb	r0, [r0, #0]
    ebfc:	40c8      	lsrs	r0, r1
    ebfe:	f000 0001 	and.w	r0, r0, #1
    ec02:	4770      	bx	lr
    ec04:	b118      	cbz	r0, ec0e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x76>
    ec06:	2802      	cmp	r0, #2
    ec08:	d001      	beq.n	ec0e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x76>
    ec0a:	2001      	movs	r0, #1
    ec0c:	4770      	bx	lr
    ec0e:	2000      	movs	r0, #0
    ec10:	4770      	bx	lr

0000ec12 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ec12:	b510      	push	{r4, lr}
    ec14:	4604      	mov	r4, r0
    ec16:	f000 fd03 	bl	f620 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
    ec1a:	b108      	cbz	r0, ec20 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ec1c:	200c      	movs	r0, #12
    ec1e:	bd10      	pop	{r4, pc}
    ec20:	7820      	ldrb	r0, [r4, #0]
    ec22:	b128      	cbz	r0, ec30 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
    ec24:	2801      	cmp	r0, #1
    ec26:	d003      	beq.n	ec30 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
    ec28:	28ff      	cmp	r0, #255	; 0xff
    ec2a:	d00b      	beq.n	ec44 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
    ec2c:	2012      	movs	r0, #18
    ec2e:	bd10      	pop	{r4, pc}
    ec30:	f7ff ffe8 	bl	ec04 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x6c>
    ec34:	1c61      	adds	r1, r4, #1
    ec36:	f7f6 f96f 	bl	4f18 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ec3a:	b108      	cbz	r0, ec40 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
    ec3c:	2000      	movs	r0, #0
    ec3e:	bd10      	pop	{r4, pc}
    ec40:	2007      	movs	r0, #7
    ec42:	bd10      	pop	{r4, pc}
    ec44:	2001      	movs	r0, #1
    ec46:	f7f6 f9a9 	bl	4f9c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    ec4a:	e7f7      	b.n	ec3c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

0000ec4c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ec4c:	b510      	push	{r4, lr}
    ec4e:	f000 fce7 	bl	f620 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
    ec52:	b108      	cbz	r0, ec58 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ec54:	200c      	movs	r0, #12
    ec56:	bd10      	pop	{r4, pc}
    ec58:	f7f6 f9a6 	bl	4fa8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ec5c:	2000      	movs	r0, #0
    ec5e:	bd10      	pop	{r4, pc}

0000ec60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    ec60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec64:	4606      	mov	r6, r0
    ec66:	f000 fac2 	bl	f1ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    ec6a:	2800      	cmp	r0, #0
    ec6c:	d112      	bne.n	ec94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ec6e:	8830      	ldrh	r0, [r6, #0]
    ec70:	2100      	movs	r1, #0
    ec72:	f7fe fee4 	bl	da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec76:	0004      	movs	r4, r0
    ec78:	d00e      	beq.n	ec98 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    ec7a:	f000 fc1b 	bl	f4b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x260>
    ec7e:	b158      	cbz	r0, ec98 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    ec80:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ec84:	f88d 0000 	strb.w	r0, [sp]
    ec88:	9800      	ldr	r0, [sp, #0]
    ec8a:	9000      	str	r0, [sp, #0]
    ec8c:	f89d 0000 	ldrb.w	r0, [sp]
    ec90:	b120      	cbz	r0, ec9c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    ec92:	203a      	movs	r0, #58	; 0x3a
    ec94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ec98:	2002      	movs	r0, #2
    ec9a:	e7fb      	b.n	ec94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ec9c:	f04f 0800 	mov.w	r8, #0
    eca0:	88b0      	ldrh	r0, [r6, #4]
    eca2:	f7ff f8c9 	bl	de38 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    eca6:	4605      	mov	r5, r0
    eca8:	4601      	mov	r1, r0
    ecaa:	2005      	movs	r0, #5
    ecac:	f7ff fa5d 	bl	e16a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ecb0:	4607      	mov	r7, r0
    ecb2:	4629      	mov	r1, r5
    ecb4:	2008      	movs	r0, #8
    ecb6:	f7ff fa58 	bl	e16a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ecba:	42b8      	cmp	r0, r7
    ecbc:	d301      	bcc.n	ecc2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    ecbe:	42af      	cmp	r7, r5
    ecc0:	d301      	bcc.n	ecc6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    ecc2:	2012      	movs	r0, #18
    ecc4:	e7e6      	b.n	ec94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ecc6:	f641 504c 	movw	r0, #7500	; 0x1d4c
    ecca:	4285      	cmp	r5, r0
    eccc:	d209      	bcs.n	ece2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
    ecce:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    ecd2:	2802      	cmp	r0, #2
    ecd4:	d103      	bne.n	ecde <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x7e>
    ecd6:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    ecda:	2802      	cmp	r0, #2
    ecdc:	d001      	beq.n	ece2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
    ecde:	200c      	movs	r0, #12
    ece0:	e7d8      	b.n	ec94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ece2:	f8a4 72a8 	strh.w	r7, [r4, #680]	; 0x2a8
    ece6:	e9c4 85ab 	strd	r8, r5, [r4, #684]	; 0x2ac
    ecea:	88f0      	ldrh	r0, [r6, #6]
    ecec:	f8a4 02b4 	strh.w	r0, [r4, #692]	; 0x2b4
    ecf0:	8930      	ldrh	r0, [r6, #8]
    ecf2:	f8a4 02b6 	strh.w	r0, [r4, #694]	; 0x2b6
    ecf6:	f504 7429 	add.w	r4, r4, #676	; 0x2a4
    ecfa:	20ff      	movs	r0, #255	; 0xff
    ecfc:	7020      	strb	r0, [r4, #0]
    ecfe:	2000      	movs	r0, #0
    ed00:	e7c8      	b.n	ec94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000ed02 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    ed02:	b510      	push	{r4, lr}
    ed04:	460b      	mov	r3, r1
    ed06:	2201      	movs	r2, #1
    ed08:	f100 0110 	add.w	r1, r0, #16
    ed0c:	f7f6 fa8e 	bl	522c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ed10:	2000      	movs	r0, #0
    ed12:	bd10      	pop	{r4, pc}

0000ed14 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    ed14:	b510      	push	{r4, lr}
    ed16:	8800      	ldrh	r0, [r0, #0]
    ed18:	2101      	movs	r1, #1
    ed1a:	f7fe fe90 	bl	da3e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed1e:	b118      	cbz	r0, ed28 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    ed20:	f890 1300 	ldrb.w	r1, [r0, #768]	; 0x300
    ed24:	b111      	cbz	r1, ed2c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    ed26:	e007      	b.n	ed38 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    ed28:	2002      	movs	r0, #2
    ed2a:	bd10      	pop	{r4, pc}
    ed2c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    ed30:	2915      	cmp	r1, #21
    ed32:	d003      	beq.n	ed3c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ed34:	2916      	cmp	r1, #22
    ed36:	d001      	beq.n	ed3c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ed38:	200c      	movs	r0, #12
    ed3a:	bd10      	pop	{r4, pc}
    ed3c:	2102      	movs	r1, #2
    ed3e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    ed42:	2000      	movs	r0, #0
    ed44:	bd10      	pop	{r4, pc}

0000ed46 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    ed46:	b510      	push	{r4, lr}
    ed48:	2108      	movs	r1, #8
    ed4a:	f7f5 f9c5 	bl	40d8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ed4e:	2000      	movs	r0, #0
    ed50:	bd10      	pop	{r4, pc}

0000ed52 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    ed52:	b510      	push	{r4, lr}
    ed54:	4604      	mov	r4, r0
    ed56:	20d8      	movs	r0, #216	; 0xd8
    ed58:	7020      	strb	r0, [r4, #0]
    ed5a:	f000 fba8 	bl	f4ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
    ed5e:	7060      	strb	r0, [r4, #1]
    ed60:	2000      	movs	r0, #0
    ed62:	bd10      	pop	{r4, pc}

0000ed64 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ed64:	2108      	movs	r1, #8
    ed66:	7001      	strb	r1, [r0, #0]
    ed68:	2000      	movs	r0, #0
    ed6a:	4770      	bx	lr

0000ed6c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ed6c:	b510      	push	{r4, lr}
    ed6e:	4604      	mov	r4, r0
    ed70:	f000 fc56 	bl	f620 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
    ed74:	b108      	cbz	r0, ed7a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ed76:	200c      	movs	r0, #12
    ed78:	bd10      	pop	{r4, pc}
    ed7a:	7820      	ldrb	r0, [r4, #0]
    ed7c:	b120      	cbz	r0, ed88 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
    ed7e:	2801      	cmp	r0, #1
    ed80:	d002      	beq.n	ed88 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
    ed82:	28ff      	cmp	r0, #255	; 0xff
    ed84:	d108      	bne.n	ed98 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
    ed86:	e009      	b.n	ed9c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
    ed88:	f7ff ff3c 	bl	ec04 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x6c>
    ed8c:	1c61      	adds	r1, r4, #1
    ed8e:	f7ff f818 	bl	ddc2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ed92:	b108      	cbz	r0, ed98 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
    ed94:	2000      	movs	r0, #0
    ed96:	bd10      	pop	{r4, pc}
    ed98:	2012      	movs	r0, #18
    ed9a:	bd10      	pop	{r4, pc}
    ed9c:	2000      	movs	r0, #0
    ed9e:	f7f6 f8fd 	bl	4f9c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    eda2:	e7f7      	b.n	ed94 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

0000eda4 <sym_EK7VKICRIXQCWAL5OTMUQJKN6PBP4AFQGV53JNA>:
    eda4:	b510      	push	{r4, lr}
    eda6:	4604      	mov	r4, r0
    eda8:	2000      	movs	r0, #0
    edaa:	f7fb fd09 	bl	a7c0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
    edae:	2101      	movs	r1, #1
    edb0:	4620      	mov	r0, r4
    edb2:	f000 fad8 	bl	f366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x112>
    edb6:	2800      	cmp	r0, #0
    edb8:	d104      	bne.n	edc4 <sym_EK7VKICRIXQCWAL5OTMUQJKN6PBP4AFQGV53JNA+0x20>
    edba:	4620      	mov	r0, r4
    edbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edc0:	f000 bab1 	b.w	f326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd2>
    edc4:	bd10      	pop	{r4, pc}

0000edc6 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA>:
    edc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    edc8:	4606      	mov	r6, r0
    edca:	b087      	sub	sp, #28
    edcc:	2000      	movs	r0, #0
    edce:	f7fb fcf7 	bl	a7c0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
    edd2:	7830      	ldrb	r0, [r6, #0]
    edd4:	f88d 0000 	strb.w	r0, [sp]
    edd8:	7870      	ldrb	r0, [r6, #1]
    edda:	f88d 0001 	strb.w	r0, [sp, #1]
    edde:	78b0      	ldrb	r0, [r6, #2]
    ede0:	2400      	movs	r4, #0
    ede2:	f88d 0002 	strb.w	r0, [sp, #2]
    ede6:	07c1      	lsls	r1, r0, #31
    ede8:	f04f 0701 	mov.w	r7, #1
    edec:	d000      	beq.n	edf0 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x2a>
    edee:	2401      	movs	r4, #1
    edf0:	0740      	lsls	r0, r0, #29
    edf2:	d500      	bpl.n	edf6 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x30>
    edf4:	1c64      	adds	r4, r4, #1
    edf6:	f7fb fd27 	bl	a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    edfa:	f89d 1002 	ldrb.w	r1, [sp, #2]
    edfe:	4381      	bics	r1, r0
    ee00:	d002      	beq.n	ee08 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x42>
    ee02:	2011      	movs	r0, #17
    ee04:	b007      	add	sp, #28
    ee06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee08:	2000      	movs	r0, #0
    ee0a:	466d      	mov	r5, sp
    ee0c:	e013      	b.n	ee36 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x70>
    ee0e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    ee12:	4431      	add	r1, r6
    ee14:	182b      	adds	r3, r5, r0
    ee16:	78ca      	ldrb	r2, [r1, #3]
    ee18:	70da      	strb	r2, [r3, #3]
    ee1a:	888b      	ldrh	r3, [r1, #4]
    ee1c:	f240 2271 	movw	r2, #625	; 0x271
    ee20:	4353      	muls	r3, r2
    ee22:	eb05 0280 	add.w	r2, r5, r0, lsl #2
    ee26:	6093      	str	r3, [r2, #8]
    ee28:	88c9      	ldrh	r1, [r1, #6]
    ee2a:	f240 2371 	movw	r3, #625	; 0x271
    ee2e:	4359      	muls	r1, r3
    ee30:	1c40      	adds	r0, r0, #1
    ee32:	b2c0      	uxtb	r0, r0
    ee34:	6111      	str	r1, [r2, #16]
    ee36:	42a0      	cmp	r0, r4
    ee38:	d3e9      	bcc.n	ee0e <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x48>
    ee3a:	2007      	movs	r0, #7
    ee3c:	f88d 0018 	strb.w	r0, [sp, #24]
    ee40:	f88d 7019 	strb.w	r7, [sp, #25]
    ee44:	78b0      	ldrb	r0, [r6, #2]
    ee46:	f030 0105 	bics.w	r1, r0, #5
    ee4a:	d109      	bne.n	ee60 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x9a>
    ee4c:	f010 0f05 	tst.w	r0, #5
    ee50:	d006      	beq.n	ee60 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x9a>
    ee52:	2600      	movs	r6, #0
    ee54:	e012      	b.n	ee7c <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0xb6>
    ee56:	19a8      	adds	r0, r5, r6
    ee58:	78c0      	ldrb	r0, [r0, #3]
    ee5a:	b118      	cbz	r0, ee64 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x9e>
    ee5c:	2801      	cmp	r0, #1
    ee5e:	d001      	beq.n	ee64 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x9e>
    ee60:	2012      	movs	r0, #18
    ee62:	e7cf      	b.n	ee04 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x3e>
    ee64:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    ee68:	6938      	ldr	r0, [r7, #16]
    ee6a:	f7fb fc09 	bl	a680 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x204>
    ee6e:	b158      	cbz	r0, ee88 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0xc2>
    ee70:	68b8      	ldr	r0, [r7, #8]
    ee72:	f7fb fbf9 	bl	a668 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1ec>
    ee76:	b138      	cbz	r0, ee88 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0xc2>
    ee78:	1c76      	adds	r6, r6, #1
    ee7a:	b2f6      	uxtb	r6, r6
    ee7c:	42a6      	cmp	r6, r4
    ee7e:	d3ea      	bcc.n	ee56 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x90>
    ee80:	4668      	mov	r0, sp
    ee82:	f000 f8cb 	bl	f01c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    ee86:	e7bd      	b.n	ee04 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x3e>
    ee88:	2030      	movs	r0, #48	; 0x30
    ee8a:	e7bb      	b.n	ee04 <sym_7IOG66DQ6OROB57JFJCGMFYNYWHYGUZHCQ7JPTA+0x3e>

0000ee8c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    ee8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ee8e:	4604      	mov	r4, r0
    ee90:	f7fe ffa2 	bl	ddd8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    ee94:	b158      	cbz	r0, eeae <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    ee96:	4620      	mov	r0, r4
    ee98:	f7f6 fad6 	bl	5448 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    ee9c:	4669      	mov	r1, sp
    ee9e:	2000      	movs	r0, #0
    eea0:	f7fe fdd7 	bl	da52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eea4:	24ff      	movs	r4, #255	; 0xff
    eea6:	b138      	cbz	r0, eeb8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x2c>
    eea8:	f241 0143 	movw	r1, #4163	; 0x1043
    eeac:	e022      	b.n	eef4 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x68>
    eeae:	2012      	movs	r0, #18
    eeb0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eeb2:	9802      	ldr	r0, [sp, #8]
    eeb4:	f880 429c 	strb.w	r4, [r0, #668]	; 0x29c
    eeb8:	4668      	mov	r0, sp
    eeba:	f7f5 fab3 	bl	4424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eebe:	2800      	cmp	r0, #0
    eec0:	d0f7      	beq.n	eeb2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x26>
    eec2:	4669      	mov	r1, sp
    eec4:	2002      	movs	r0, #2
    eec6:	f7fe fdc4 	bl	da52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eeca:	b130      	cbz	r0, eeda <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x4e>
    eecc:	f241 014d 	movw	r1, #4173	; 0x104d
    eed0:	e010      	b.n	eef4 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x68>
    eed2:	9802      	ldr	r0, [sp, #8]
    eed4:	f880 507b 	strb.w	r5, [r0, #123]	; 0x7b
    eed8:	e000      	b.n	eedc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x50>
    eeda:	2501      	movs	r5, #1
    eedc:	4668      	mov	r0, sp
    eede:	f7f5 faa1 	bl	4424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eee2:	2800      	cmp	r0, #0
    eee4:	d0f5      	beq.n	eed2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x46>
    eee6:	4669      	mov	r1, sp
    eee8:	2003      	movs	r0, #3
    eeea:	f7fe fdb2 	bl	da52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eeee:	b138      	cbz	r0, ef00 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x74>
    eef0:	f241 0158 	movw	r1, #4184	; 0x1058
    eef4:	2039      	movs	r0, #57	; 0x39
    eef6:	f7f5 f861 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eefa:	9802      	ldr	r0, [sp, #8]
    eefc:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    ef00:	4668      	mov	r0, sp
    ef02:	f7f5 fa8f 	bl	4424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ef06:	2800      	cmp	r0, #0
    ef08:	d0f7      	beq.n	eefa <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x6e>
    ef0a:	2000      	movs	r0, #0
    ef0c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ef0e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ef0e:	b510      	push	{r4, lr}
    ef10:	4604      	mov	r4, r0
    ef12:	2001      	movs	r0, #1
    ef14:	f000 f9d1 	bl	f2ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
    ef18:	b128      	cbz	r0, ef26 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ef1a:	4621      	mov	r1, r4
    ef1c:	2001      	movs	r0, #1
    ef1e:	f7f5 fe77 	bl	4c10 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ef22:	2000      	movs	r0, #0
    ef24:	bd10      	pop	{r4, pc}
    ef26:	200c      	movs	r0, #12
    ef28:	bd10      	pop	{r4, pc}

0000ef2a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    ef2a:	b51c      	push	{r2, r3, r4, lr}
    ef2c:	7801      	ldrb	r1, [r0, #0]
    ef2e:	f88d 1000 	strb.w	r1, [sp]
    ef32:	7840      	ldrb	r0, [r0, #1]
    ef34:	f88d 0001 	strb.w	r0, [sp, #1]
    ef38:	2000      	movs	r0, #0
    ef3a:	f8ad 0002 	strh.w	r0, [sp, #2]
    ef3e:	f8ad 0004 	strh.w	r0, [sp, #4]
    ef42:	4601      	mov	r1, r0
    ef44:	4668      	mov	r0, sp
    ef46:	f000 fa0e 	bl	f366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x112>
    ef4a:	2800      	cmp	r0, #0
    ef4c:	d102      	bne.n	ef54 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    ef4e:	4668      	mov	r0, sp
    ef50:	f000 f9e9 	bl	f326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd2>
    ef54:	bd1c      	pop	{r2, r3, r4, pc}

0000ef56 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    ef56:	b500      	push	{lr}
    ef58:	b087      	sub	sp, #28
    ef5a:	7941      	ldrb	r1, [r0, #5]
    ef5c:	f88d 1000 	strb.w	r1, [sp]
    ef60:	7981      	ldrb	r1, [r0, #6]
    ef62:	f88d 1001 	strb.w	r1, [sp, #1]
    ef66:	2101      	movs	r1, #1
    ef68:	f88d 1002 	strb.w	r1, [sp, #2]
    ef6c:	7801      	ldrb	r1, [r0, #0]
    ef6e:	f88d 1003 	strb.w	r1, [sp, #3]
    ef72:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    ef76:	f240 2271 	movw	r2, #625	; 0x271
    ef7a:	4351      	muls	r1, r2
    ef7c:	9102      	str	r1, [sp, #8]
    ef7e:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    ef82:	4350      	muls	r0, r2
    ef84:	9004      	str	r0, [sp, #16]
    ef86:	2007      	movs	r0, #7
    ef88:	f88d 0018 	strb.w	r0, [sp, #24]
    ef8c:	2000      	movs	r0, #0
    ef8e:	f88d 0019 	strb.w	r0, [sp, #25]
    ef92:	9804      	ldr	r0, [sp, #16]
    ef94:	f7fb fb8c 	bl	a6b0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x234>
    ef98:	b140      	cbz	r0, efac <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    ef9a:	9802      	ldr	r0, [sp, #8]
    ef9c:	f7fb fb7c 	bl	a698 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x21c>
    efa0:	b120      	cbz	r0, efac <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    efa2:	4668      	mov	r0, sp
    efa4:	f000 f83a 	bl	f01c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    efa8:	b007      	add	sp, #28
    efaa:	bd00      	pop	{pc}
    efac:	2030      	movs	r0, #48	; 0x30
    efae:	e7fb      	b.n	efa8 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000efb0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    efb0:	b510      	push	{r4, lr}
    efb2:	f7f5 fe53 	bl	4c5c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    efb6:	2000      	movs	r0, #0
    efb8:	bd10      	pop	{r4, pc}

0000efba <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    efba:	b51c      	push	{r2, r3, r4, lr}
    efbc:	460c      	mov	r4, r1
    efbe:	4669      	mov	r1, sp
    efc0:	f7fe ff22 	bl	de08 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efc4:	2800      	cmp	r0, #0
    efc6:	d108      	bne.n	efda <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>
    efc8:	f89d 0000 	ldrb.w	r0, [sp]
    efcc:	b130      	cbz	r0, efdc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x22>
    efce:	2100      	movs	r1, #0
    efd0:	4622      	mov	r2, r4
    efd2:	9801      	ldr	r0, [sp, #4]
    efd4:	f000 fa11 	bl	f3fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a6>
    efd8:	2000      	movs	r0, #0
    efda:	bd1c      	pop	{r2, r3, r4, pc}
    efdc:	2101      	movs	r1, #1
    efde:	e7f7      	b.n	efd0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x16>

0000efe0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    efe0:	b510      	push	{r4, lr}
    efe2:	4604      	mov	r4, r0
    efe4:	2000      	movs	r0, #0
    efe6:	f000 f968 	bl	f2ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
    efea:	b128      	cbz	r0, eff8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    efec:	4621      	mov	r1, r4
    efee:	2000      	movs	r0, #0
    eff0:	f7f5 fe0e 	bl	4c10 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    eff4:	2000      	movs	r0, #0
    eff6:	bd10      	pop	{r4, pc}
    eff8:	200c      	movs	r0, #12
    effa:	bd10      	pop	{r4, pc}

0000effc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    effc:	b510      	push	{r4, lr}
    effe:	4604      	mov	r4, r0
    f000:	7800      	ldrb	r0, [r0, #0]
    f002:	b100      	cbz	r0, f006 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0xa>
    f004:	2001      	movs	r0, #1
    f006:	f7fa f8b1 	bl	916c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    f00a:	7820      	ldrb	r0, [r4, #0]
    f00c:	b100      	cbz	r0, f010 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x14>
    f00e:	2001      	movs	r0, #1
    f010:	f7f6 fde4 	bl	5bdc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f014:	2000      	movs	r0, #0
    f016:	bd10      	pop	{r4, pc}

0000f018 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f018:	f000 ba6d 	b.w	f4f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a2>

0000f01c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    f01c:	b510      	push	{r4, lr}
    f01e:	b08a      	sub	sp, #40	; 0x28
    f020:	4604      	mov	r4, r0
    f022:	f7fb fa35 	bl	a490 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    f026:	2800      	cmp	r0, #0
    f028:	d103      	bne.n	f032 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    f02a:	f000 fa59 	bl	f4e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28c>
    f02e:	b110      	cbz	r0, f036 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    f030:	200c      	movs	r0, #12
    f032:	b00a      	add	sp, #40	; 0x28
    f034:	bd10      	pop	{r4, pc}
    f036:	2102      	movs	r1, #2
    f038:	f104 0010 	add.w	r0, r4, #16
    f03c:	f7fb fb62 	bl	a704 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x288>
    f040:	78a0      	ldrb	r0, [r4, #2]
    f042:	f88d 0000 	strb.w	r0, [sp]
    f046:	78a0      	ldrb	r0, [r4, #2]
    f048:	f88d 001c 	strb.w	r0, [sp, #28]
    f04c:	7860      	ldrb	r0, [r4, #1]
    f04e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    f052:	7820      	ldrb	r0, [r4, #0]
    f054:	f88d 0020 	strb.w	r0, [sp, #32]
    f058:	7e20      	ldrb	r0, [r4, #24]
    f05a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    f05e:	7e60      	ldrb	r0, [r4, #25]
    f060:	b100      	cbz	r0, f064 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x48>
    f062:	2001      	movs	r0, #1
    f064:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    f068:	78a0      	ldrb	r0, [r4, #2]
    f06a:	07c1      	lsls	r1, r0, #31
    f06c:	d014      	beq.n	f098 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x7c>
    f06e:	78e0      	ldrb	r0, [r4, #3]
    f070:	f000 f9ba 	bl	f3e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
    f074:	f88d 001d 	strb.w	r0, [sp, #29]
    f078:	68a0      	ldr	r0, [r4, #8]
    f07a:	9001      	str	r0, [sp, #4]
    f07c:	6920      	ldr	r0, [r4, #16]
    f07e:	9002      	str	r0, [sp, #8]
    f080:	78a0      	ldrb	r0, [r4, #2]
    f082:	0740      	lsls	r0, r0, #29
    f084:	d515      	bpl.n	f0b2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>
    f086:	7920      	ldrb	r0, [r4, #4]
    f088:	f000 f9ae 	bl	f3e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
    f08c:	f88d 001f 	strb.w	r0, [sp, #31]
    f090:	68e0      	ldr	r0, [r4, #12]
    f092:	9005      	str	r0, [sp, #20]
    f094:	6960      	ldr	r0, [r4, #20]
    f096:	e00b      	b.n	f0b0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x94>
    f098:	2802      	cmp	r0, #2
    f09a:	d013      	beq.n	f0c4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0xa8>
    f09c:	0740      	lsls	r0, r0, #29
    f09e:	d508      	bpl.n	f0b2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>
    f0a0:	78e0      	ldrb	r0, [r4, #3]
    f0a2:	f000 f9a1 	bl	f3e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
    f0a6:	f88d 001f 	strb.w	r0, [sp, #31]
    f0aa:	68a0      	ldr	r0, [r4, #8]
    f0ac:	9005      	str	r0, [sp, #20]
    f0ae:	6920      	ldr	r0, [r4, #16]
    f0b0:	9006      	str	r0, [sp, #24]
    f0b2:	4668      	mov	r0, sp
    f0b4:	f7fa f95e 	bl	9374 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    f0b8:	2800      	cmp	r0, #0
    f0ba:	d1ba      	bne.n	f032 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    f0bc:	a807      	add	r0, sp, #28
    f0be:	f7f7 f99b 	bl	63f8 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    f0c2:	e7b6      	b.n	f032 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    f0c4:	78e0      	ldrb	r0, [r4, #3]
    f0c6:	f000 f98f 	bl	f3e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
    f0ca:	f88d 001e 	strb.w	r0, [sp, #30]
    f0ce:	68a0      	ldr	r0, [r4, #8]
    f0d0:	9003      	str	r0, [sp, #12]
    f0d2:	6920      	ldr	r0, [r4, #16]
    f0d4:	9004      	str	r0, [sp, #16]
    f0d6:	e7ec      	b.n	f0b2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>

0000f0d8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f0d8:	b510      	push	{r4, lr}
    f0da:	4604      	mov	r4, r0
    f0dc:	4601      	mov	r1, r0
    f0de:	2000      	movs	r0, #0
    f0e0:	f7f5 fd7e 	bl	4be0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f0e4:	b910      	cbnz	r0, f0ec <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f0e6:	2000      	movs	r0, #0
    f0e8:	6020      	str	r0, [r4, #0]
    f0ea:	80a0      	strh	r0, [r4, #4]
    f0ec:	2000      	movs	r0, #0
    f0ee:	bd10      	pop	{r4, pc}

0000f0f0 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f0f0:	b510      	push	{r4, lr}
    f0f2:	f7fb fb6b 	bl	a7cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f0f6:	2000      	movs	r0, #0
    f0f8:	bd10      	pop	{r4, pc}

0000f0fa <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f0fa:	f000 b89b 	b.w	f234 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f0fe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f102:	b08a      	sub	sp, #40	; 0x28
    f104:	4689      	mov	r9, r1
    f106:	4605      	mov	r5, r0
    f108:	8800      	ldrh	r0, [r0, #0]
    f10a:	a904      	add	r1, sp, #16
    f10c:	f7fe fe7c 	bl	de08 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f110:	2800      	cmp	r0, #0
    f112:	d147      	bne.n	f1a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
    f114:	9805      	ldr	r0, [sp, #20]
    f116:	4601      	mov	r1, r0
    f118:	4688      	mov	r8, r1
    f11a:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    f11e:	f500 749c 	add.w	r4, r0, #312	; 0x138
    f122:	f88d 1018 	strb.w	r1, [sp, #24]
    f126:	9906      	ldr	r1, [sp, #24]
    f128:	9106      	str	r1, [sp, #24]
    f12a:	f89d 1018 	ldrb.w	r1, [sp, #24]
    f12e:	3090      	adds	r0, #144	; 0x90
    f130:	b109      	cbz	r1, f136 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    f132:	2701      	movs	r7, #1
    f134:	e000      	b.n	f138 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    f136:	2700      	movs	r7, #0
    f138:	7b81      	ldrb	r1, [r0, #14]
    f13a:	2922      	cmp	r1, #34	; 0x22
    f13c:	d100      	bne.n	f140 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    f13e:	b13f      	cbz	r7, f150 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    f140:	2600      	movs	r6, #0
    f142:	3062      	adds	r0, #98	; 0x62
    f144:	2108      	movs	r1, #8
    f146:	4682      	mov	sl, r0
    f148:	f7ff fd53 	bl	ebf2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x5a>
    f14c:	b110      	cbz	r0, f154 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    f14e:	e007      	b.n	f160 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    f150:	2601      	movs	r6, #1
    f152:	e7f6      	b.n	f142 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    f154:	210b      	movs	r1, #11
    f156:	4650      	mov	r0, sl
    f158:	f7ff fd4b 	bl	ebf2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x5a>
    f15c:	b900      	cbnz	r0, f160 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    f15e:	b306      	cbz	r6, f1a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa4>
    f160:	a802      	add	r0, sp, #8
    f162:	9000      	str	r0, [sp, #0]
    f164:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f168:	ab01      	add	r3, sp, #4
    f16a:	462a      	mov	r2, r5
    f16c:	4641      	mov	r1, r8
    f16e:	f000 f97e 	bl	f46e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21a>
    f172:	0006      	movs	r6, r0
    f174:	d116      	bne.n	f1a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
    f176:	f898 0077 	ldrb.w	r0, [r8, #119]	; 0x77
    f17a:	340c      	adds	r4, #12
    f17c:	b168      	cbz	r0, f19a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f17e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f182:	f010 0102 	ands.w	r1, r0, #2
    f186:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f18a:	f88d 1004 	strb.w	r1, [sp, #4]
    f18e:	f000 0002 	and.w	r0, r0, #2
    f192:	f88d 0008 	strb.w	r0, [sp, #8]
    f196:	d008      	beq.n	f1aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
    f198:	b138      	cbz	r0, f1aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
    f19a:	20ff      	movs	r0, #255	; 0xff
    f19c:	7060      	strb	r0, [r4, #1]
    f19e:	b947      	cbnz	r7, f1b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb4>
    f1a0:	e005      	b.n	f1ae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb0>
    f1a2:	201a      	movs	r0, #26
    f1a4:	b00a      	add	sp, #40	; 0x28
    f1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1aa:	2009      	movs	r0, #9
    f1ac:	e7fa      	b.n	f1a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
    f1ae:	7820      	ldrb	r0, [r4, #0]
    f1b0:	b108      	cbz	r0, f1b6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    f1b2:	263a      	movs	r6, #58	; 0x3a
    f1b4:	e014      	b.n	f1e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe2>
    f1b6:	f884 9000 	strb.w	r9, [r4]
    f1ba:	f89d 1004 	ldrb.w	r1, [sp, #4]
    f1be:	70a1      	strb	r1, [r4, #2]
    f1c0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f1c4:	70e0      	strb	r0, [r4, #3]
    f1c6:	88aa      	ldrh	r2, [r5, #4]
    f1c8:	80a2      	strh	r2, [r4, #4]
    f1ca:	f88d 1018 	strb.w	r1, [sp, #24]
    f1ce:	f88d 0019 	strb.w	r0, [sp, #25]
    f1d2:	88a8      	ldrh	r0, [r5, #4]
    f1d4:	f8ad 001a 	strh.w	r0, [sp, #26]
    f1d8:	a906      	add	r1, sp, #24
    f1da:	4640      	mov	r0, r8
    f1dc:	f7fe fee1 	bl	dfa2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f1e0:	2000      	movs	r0, #0
    f1e2:	7060      	strb	r0, [r4, #1]
    f1e4:	4630      	mov	r0, r6
    f1e6:	e7dd      	b.n	f1a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>

0000f1e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f1e8:	2008      	movs	r0, #8
    f1ea:	f7fb bb21 	b.w	a830 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000f1ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    f1ee:	b510      	push	{r4, lr}
    f1f0:	4604      	mov	r4, r0
    f1f2:	2000      	movs	r0, #0
    f1f4:	8822      	ldrh	r2, [r4, #0]
    f1f6:	b086      	sub	sp, #24
    f1f8:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    f1fc:	39ff      	subs	r1, #255	; 0xff
    f1fe:	d008      	beq.n	f212 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    f200:	a903      	add	r1, sp, #12
    f202:	4610      	mov	r0, r2
    f204:	f7fe fe00 	bl	de08 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f208:	b110      	cbz	r0, f210 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    f20a:	2002      	movs	r0, #2
    f20c:	b006      	add	sp, #24
    f20e:	bd10      	pop	{r4, pc}
    f210:	9804      	ldr	r0, [sp, #16]
    f212:	8921      	ldrh	r1, [r4, #8]
    f214:	89a3      	ldrh	r3, [r4, #12]
    f216:	8962      	ldrh	r2, [r4, #10]
    f218:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f21c:	88e3      	ldrh	r3, [r4, #6]
    f21e:	88a2      	ldrh	r2, [r4, #4]
    f220:	8861      	ldrh	r1, [r4, #2]
    f222:	f7fb f9af 	bl	a584 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x108>
    f226:	b108      	cbz	r0, f22c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    f228:	2000      	movs	r0, #0
    f22a:	e7ef      	b.n	f20c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f22c:	2030      	movs	r0, #48	; 0x30
    f22e:	e7ed      	b.n	f20c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000f230 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
    f230:	f7fa be44 	b.w	9ebc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000f234 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    f234:	b510      	push	{r4, lr}
    f236:	f7fe fd4c 	bl	dcd2 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    f23a:	f7f5 fdb1 	bl	4da0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    f23e:	f7fb fb19 	bl	a874 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    f242:	f7f6 fc89 	bl	5b58 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    f246:	2001      	movs	r0, #1
    f248:	f7fb faba 	bl	a7c0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
    f24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f250:	f7fb b9de 	b.w	a610 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x194>

0000f254 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
    f254:	f7f6 bcdc 	b.w	5c10 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f258:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f25c:	4288      	cmp	r0, r1
    f25e:	d303      	bcc.n	f268 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
    f260:	f44f 6129 	mov.w	r1, #2704	; 0xa90
    f264:	4288      	cmp	r0, r1
    f266:	d300      	bcc.n	f26a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
    f268:	4608      	mov	r0, r1
    f26a:	b280      	uxth	r0, r0
    f26c:	4770      	bx	lr
    f26e:	0741      	lsls	r1, r0, #29
    f270:	d501      	bpl.n	f276 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
    f272:	2008      	movs	r0, #8
    f274:	4770      	bx	lr
    f276:	07c1      	lsls	r1, r0, #31
    f278:	d001      	beq.n	f27e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
    f27a:	2001      	movs	r0, #1
    f27c:	4770      	bx	lr
    f27e:	0780      	lsls	r0, r0, #30
    f280:	d501      	bpl.n	f286 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32>
    f282:	2002      	movs	r0, #2
    f284:	4770      	bx	lr
    f286:	2000      	movs	r0, #0
    f288:	4770      	bx	lr
    f28a:	b50e      	push	{r1, r2, r3, lr}
    f28c:	4669      	mov	r1, sp
    f28e:	2002      	movs	r0, #2
    f290:	f7fe fbdf 	bl	da52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f294:	b150      	cbz	r0, f2ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x58>
    f296:	f44f 71a3 	mov.w	r1, #326	; 0x146
    f29a:	2039      	movs	r0, #57	; 0x39
    f29c:	f7f4 fe8e 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2a0:	9802      	ldr	r0, [sp, #8]
    f2a2:	f7ff f9ee 	bl	e682 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f2a6:	b108      	cbz	r0, f2ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x58>
    f2a8:	2001      	movs	r0, #1
    f2aa:	bd0e      	pop	{r1, r2, r3, pc}
    f2ac:	4668      	mov	r0, sp
    f2ae:	f7f5 f8b9 	bl	4424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f2b2:	2800      	cmp	r0, #0
    f2b4:	d0f4      	beq.n	f2a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4c>
    f2b6:	2000      	movs	r0, #0
    f2b8:	bd0e      	pop	{r1, r2, r3, pc}
    f2ba:	b510      	push	{r4, lr}
    f2bc:	4604      	mov	r4, r0
    f2be:	f7ff ffe4 	bl	f28a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
    f2c2:	b170      	cbz	r0, f2e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
    f2c4:	f7fb fa76 	bl	a7b4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    f2c8:	b150      	cbz	r0, f2e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8c>
    f2ca:	f7fb f9fd 	bl	a6c8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x24c>
    f2ce:	4604      	mov	r4, r0
    f2d0:	f7ff f9c6 	bl	e660 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f2d4:	b960      	cbnz	r0, f2f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x9c>
    f2d6:	4620      	mov	r0, r4
    f2d8:	f7ff f9ba 	bl	e650 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f2dc:	b108      	cbz	r0, f2e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
    f2de:	e007      	b.n	f2f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x9c>
    f2e0:	b134      	cbz	r4, f2f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x9c>
    f2e2:	f000 f8fd 	bl	f4e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28c>
    f2e6:	b128      	cbz	r0, f2f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa0>
    f2e8:	f7f7 f91a 	bl	6520 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    f2ec:	2801      	cmp	r0, #1
    f2ee:	d001      	beq.n	f2f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa0>
    f2f0:	2000      	movs	r0, #0
    f2f2:	bd10      	pop	{r4, pc}
    f2f4:	2001      	movs	r0, #1
    f2f6:	bd10      	pop	{r4, pc}
    f2f8:	28fb      	cmp	r0, #251	; 0xfb
    f2fa:	d802      	bhi.n	f302 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xae>
    f2fc:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
    f300:	d901      	bls.n	f306 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb2>
    f302:	2011      	movs	r0, #17
    f304:	4770      	bx	lr
    f306:	2000      	movs	r0, #0
    f308:	4770      	bx	lr
    f30a:	381b      	subs	r0, #27
    f30c:	28e1      	cmp	r0, #225	; 0xe1
    f30e:	d206      	bcs.n	f31e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xca>
    f310:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f314:	d303      	bcc.n	f31e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xca>
    f316:	f244 2090 	movw	r0, #17040	; 0x4290
    f31a:	4281      	cmp	r1, r0
    f31c:	d901      	bls.n	f322 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xce>
    f31e:	2012      	movs	r0, #18
    f320:	4770      	bx	lr
    f322:	2000      	movs	r0, #0
    f324:	4770      	bx	lr
    f326:	b510      	push	{r4, lr}
    f328:	4604      	mov	r4, r0
    f32a:	7800      	ldrb	r0, [r0, #0]
    f32c:	2801      	cmp	r0, #1
    f32e:	d009      	beq.n	f344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf0>
    f330:	f7fa f81a 	bl	9368 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f334:	2805      	cmp	r0, #5
    f336:	d003      	beq.n	f340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xec>
    f338:	f7f9 ff90 	bl	925c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    f33c:	2800      	cmp	r0, #0
    f33e:	d000      	beq.n	f342 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xee>
    f340:	200c      	movs	r0, #12
    f342:	bd10      	pop	{r4, pc}
    f344:	f7f7 f84a 	bl	63dc <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    f348:	b158      	cbz	r0, f362 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x10e>
    f34a:	f7f6 fecd 	bl	60e8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f34e:	f7f6 ff43 	bl	61d8 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ>
    f352:	2800      	cmp	r0, #0
    f354:	d1f5      	bne.n	f342 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xee>
    f356:	88a1      	ldrh	r1, [r4, #4]
    f358:	8860      	ldrh	r0, [r4, #2]
    f35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f35e:	f7f9 bf25 	b.w	91ac <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    f362:	2012      	movs	r0, #18
    f364:	bd10      	pop	{r4, pc}
    f366:	7802      	ldrb	r2, [r0, #0]
    f368:	2a01      	cmp	r2, #1
    f36a:	d001      	beq.n	f370 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x11c>
    f36c:	b1ba      	cbz	r2, f39e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14a>
    f36e:	e018      	b.n	f3a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14e>
    f370:	7842      	ldrb	r2, [r0, #1]
    f372:	b13a      	cbz	r2, f384 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x130>
    f374:	2a01      	cmp	r2, #1
    f376:	d005      	beq.n	f384 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x130>
    f378:	2a02      	cmp	r2, #2
    f37a:	d112      	bne.n	f3a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14e>
    f37c:	b189      	cbz	r1, f3a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14e>
    f37e:	8881      	ldrh	r1, [r0, #4]
    f380:	b179      	cbz	r1, f3a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14e>
    f382:	e000      	b.n	f386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x132>
    f384:	b159      	cbz	r1, f39e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14a>
    f386:	8841      	ldrh	r1, [r0, #2]
    f388:	b149      	cbz	r1, f39e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14a>
    f38a:	8880      	ldrh	r0, [r0, #4]
    f38c:	b138      	cbz	r0, f39e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14a>
    f38e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f392:	0049      	lsls	r1, r1, #1
    f394:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f398:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    f39c:	d201      	bcs.n	f3a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14e>
    f39e:	2000      	movs	r0, #0
    f3a0:	4770      	bx	lr
    f3a2:	2012      	movs	r0, #18
    f3a4:	4770      	bx	lr
    f3a6:	b570      	push	{r4, r5, r6, lr}
    f3a8:	4614      	mov	r4, r2
    f3aa:	460d      	mov	r5, r1
    f3ac:	b108      	cbz	r0, f3b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x15e>
    f3ae:	2801      	cmp	r0, #1
    f3b0:	d10c      	bne.n	f3cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x178>
    f3b2:	2b02      	cmp	r3, #2
    f3b4:	d00c      	beq.n	f3d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
    f3b6:	4619      	mov	r1, r3
    f3b8:	4610      	mov	r0, r2
    f3ba:	f7fb f9cf 	bl	a75c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e0>
    f3be:	b178      	cbz	r0, f3e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18c>
    f3c0:	4628      	mov	r0, r5
    f3c2:	f7fb f951 	bl	a668 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1ec>
    f3c6:	b158      	cbz	r0, f3e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18c>
    f3c8:	42ac      	cmp	r4, r5
    f3ca:	d90b      	bls.n	f3e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x190>
    f3cc:	2012      	movs	r0, #18
    f3ce:	bd70      	pop	{r4, r5, r6, pc}
    f3d0:	4610      	mov	r0, r2
    f3d2:	f7fb f9b7 	bl	a744 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c8>
    f3d6:	b118      	cbz	r0, f3e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18c>
    f3d8:	4628      	mov	r0, r5
    f3da:	f7fb f9a7 	bl	a72c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2b0>
    f3de:	e7f2      	b.n	f3c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x172>
    f3e0:	2030      	movs	r0, #48	; 0x30
    f3e2:	bd70      	pop	{r4, r5, r6, pc}
    f3e4:	2000      	movs	r0, #0
    f3e6:	bd70      	pop	{r4, r5, r6, pc}
    f3e8:	2801      	cmp	r0, #1
    f3ea:	d002      	beq.n	f3f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x19e>
    f3ec:	b118      	cbz	r0, f3f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a2>
    f3ee:	2000      	movs	r0, #0
    f3f0:	4770      	bx	lr
    f3f2:	2002      	movs	r0, #2
    f3f4:	4770      	bx	lr
    f3f6:	2001      	movs	r0, #1
    f3f8:	4770      	bx	lr
    f3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3fe:	4605      	mov	r5, r0
    f400:	f8b0 705a 	ldrh.w	r7, [r0, #90]	; 0x5a
    f404:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c
    f408:	4616      	mov	r6, r2
    f40a:	3034      	adds	r0, #52	; 0x34
    f40c:	b111      	cbz	r1, f414 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    f40e:	f7f9 feb3 	bl	9178 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    f412:	e001      	b.n	f418 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c4>
    f414:	f7f6 fbe8 	bl	5be8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    f418:	4680      	mov	r8, r0
    f41a:	2102      	movs	r1, #2
    f41c:	f7fe fd95 	bl	df4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f420:	4287      	cmp	r7, r0
    f422:	d200      	bcs.n	f426 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d2>
    f424:	4638      	mov	r0, r7
    f426:	4607      	mov	r7, r0
    f428:	2102      	movs	r1, #2
    f42a:	4640      	mov	r0, r8
    f42c:	f7fe fd8d 	bl	df4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f430:	4284      	cmp	r4, r0
    f432:	d200      	bcs.n	f436 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e2>
    f434:	4620      	mov	r0, r4
    f436:	8829      	ldrh	r1, [r5, #0]
    f438:	8031      	strh	r1, [r6, #0]
    f43a:	2f1b      	cmp	r7, #27
    f43c:	d913      	bls.n	f466 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x212>
    f43e:	2ffb      	cmp	r7, #251	; 0xfb
    f440:	d300      	bcc.n	f444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    f442:	27fb      	movs	r7, #251	; 0xfb
    f444:	8077      	strh	r7, [r6, #2]
    f446:	281b      	cmp	r0, #27
    f448:	d90f      	bls.n	f46a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x216>
    f44a:	28fb      	cmp	r0, #251	; 0xfb
    f44c:	d300      	bcc.n	f450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1fc>
    f44e:	20fb      	movs	r0, #251	; 0xfb
    f450:	80f0      	strh	r0, [r6, #6]
    f452:	4640      	mov	r0, r8
    f454:	f7ff ff00 	bl	f258 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    f458:	80b0      	strh	r0, [r6, #4]
    f45a:	4640      	mov	r0, r8
    f45c:	f7ff fefc 	bl	f258 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    f460:	8130      	strh	r0, [r6, #8]
    f462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f466:	271b      	movs	r7, #27
    f468:	e7ec      	b.n	f444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    f46a:	201b      	movs	r0, #27
    f46c:	e7f0      	b.n	f450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1fc>
    f46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f472:	7890      	ldrb	r0, [r2, #2]
    f474:	9e06      	ldr	r6, [sp, #24]
    f476:	461d      	mov	r5, r3
    f478:	4614      	mov	r4, r2
    f47a:	b908      	cbnz	r0, f480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22c>
    f47c:	f7fb f9e4 	bl	a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f480:	78e4      	ldrb	r4, [r4, #3]
    f482:	4607      	mov	r7, r0
    f484:	b914      	cbnz	r4, f48c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x238>
    f486:	f7fb f9df 	bl	a848 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f48a:	4604      	mov	r4, r0
    f48c:	b16f      	cbz	r7, f4aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x256>
    f48e:	b164      	cbz	r4, f4aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x256>
    f490:	4638      	mov	r0, r7
    f492:	f7ff feec 	bl	f26e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    f496:	4620      	mov	r0, r4
    f498:	f7ff fee9 	bl	f26e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    f49c:	b12f      	cbz	r7, f4aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x256>
    f49e:	b124      	cbz	r4, f4aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x256>
    f4a0:	702f      	strb	r7, [r5, #0]
    f4a2:	7034      	strb	r4, [r6, #0]
    f4a4:	2000      	movs	r0, #0
    f4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4aa:	2009      	movs	r0, #9
    f4ac:	e7fb      	b.n	f4a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x252>
    f4ae:	207f      	movs	r0, #127	; 0x7f
    f4b0:	f000 b8af 	b.w	f612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
    f4b4:	b508      	push	{r3, lr}
    f4b6:	f890 1290 	ldrb.w	r1, [r0, #656]	; 0x290
    f4ba:	f890 00bd 	ldrb.w	r0, [r0, #189]	; 0xbd
    f4be:	f88d 0000 	strb.w	r0, [sp]
    f4c2:	9800      	ldr	r0, [sp, #0]
    f4c4:	9000      	str	r0, [sp, #0]
    f4c6:	f89d 0000 	ldrb.w	r0, [sp]
    f4ca:	b100      	cbz	r0, f4ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x27a>
    f4cc:	2001      	movs	r0, #1
    f4ce:	1e40      	subs	r0, r0, #1
    f4d0:	4208      	tst	r0, r1
    f4d2:	d003      	beq.n	f4dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    f4d4:	2904      	cmp	r1, #4
    f4d6:	d001      	beq.n	f4dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    f4d8:	2001      	movs	r0, #1
    f4da:	bd08      	pop	{r3, pc}
    f4dc:	2000      	movs	r0, #0
    f4de:	bd08      	pop	{r3, pc}
    f4e0:	b510      	push	{r4, lr}
    f4e2:	f7f9 ff41 	bl	9368 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f4e6:	2804      	cmp	r0, #4
    f4e8:	d003      	beq.n	f4f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x29e>
    f4ea:	2805      	cmp	r0, #5
    f4ec:	d001      	beq.n	f4f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x29e>
    f4ee:	2000      	movs	r0, #0
    f4f0:	bd10      	pop	{r4, pc}
    f4f2:	2001      	movs	r0, #1
    f4f4:	bd10      	pop	{r4, pc}
    f4f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4f8:	b085      	sub	sp, #20
    f4fa:	4604      	mov	r4, r0
    f4fc:	8800      	ldrh	r0, [r0, #0]
    f4fe:	4669      	mov	r1, sp
    f500:	f7fe fc82 	bl	de08 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f504:	2800      	cmp	r0, #0
    f506:	d14e      	bne.n	f5a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    f508:	9801      	ldr	r0, [sp, #4]
    f50a:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    f50e:	f88d 1010 	strb.w	r1, [sp, #16]
    f512:	9904      	ldr	r1, [sp, #16]
    f514:	9104      	str	r1, [sp, #16]
    f516:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f51a:	3090      	adds	r0, #144	; 0x90
    f51c:	b101      	cbz	r1, f520 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2cc>
    f51e:	2101      	movs	r1, #1
    f520:	f88d 1008 	strb.w	r1, [sp, #8]
    f524:	f89d 1000 	ldrb.w	r1, [sp]
    f528:	b119      	cbz	r1, f532 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2de>
    f52a:	7bc1      	ldrb	r1, [r0, #15]
    f52c:	0689      	lsls	r1, r1, #26
    f52e:	d40f      	bmi.n	f550 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2fc>
    f530:	e005      	b.n	f53e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
    f532:	7b81      	ldrb	r1, [r0, #14]
    f534:	291e      	cmp	r1, #30
    f536:	d00b      	beq.n	f550 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2fc>
    f538:	e001      	b.n	f53e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
    f53a:	2101      	movs	r1, #1
    f53c:	e000      	b.n	f540 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ec>
    f53e:	2100      	movs	r1, #0
    f540:	f88d 100c 	strb.w	r1, [sp, #12]
    f544:	2105      	movs	r1, #5
    f546:	3062      	adds	r0, #98	; 0x62
    f548:	f7ff fb53 	bl	ebf2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x5a>
    f54c:	b128      	cbz	r0, f55a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    f54e:	e007      	b.n	f560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x30c>
    f550:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f554:	2900      	cmp	r1, #0
    f556:	d1f2      	bne.n	f53e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
    f558:	e7ef      	b.n	f53a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
    f55a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f55e:	b308      	cbz	r0, f5a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x350>
    f560:	8921      	ldrh	r1, [r4, #8]
    f562:	88e0      	ldrh	r0, [r4, #6]
    f564:	f7ff fed1 	bl	f30a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb6>
    f568:	2800      	cmp	r0, #0
    f56a:	d11c      	bne.n	f5a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    f56c:	88a1      	ldrh	r1, [r4, #4]
    f56e:	8860      	ldrh	r0, [r4, #2]
    f570:	f7ff fecb 	bl	f30a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb6>
    f574:	2800      	cmp	r0, #0
    f576:	d116      	bne.n	f5a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    f578:	8921      	ldrh	r1, [r4, #8]
    f57a:	88e0      	ldrh	r0, [r4, #6]
    f57c:	f7ff febc 	bl	f2f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
    f580:	2800      	cmp	r0, #0
    f582:	d110      	bne.n	f5a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    f584:	88a1      	ldrh	r1, [r4, #4]
    f586:	8860      	ldrh	r0, [r4, #2]
    f588:	f7ff feb6 	bl	f2f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
    f58c:	0006      	movs	r6, r0
    f58e:	d10a      	bne.n	f5a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    f590:	9801      	ldr	r0, [sp, #4]
    f592:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    f596:	27ff      	movs	r7, #255	; 0xff
    f598:	706f      	strb	r7, [r5, #1]
    f59a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f59e:	b121      	cbz	r1, f5aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x356>
    f5a0:	263a      	movs	r6, #58	; 0x3a
    f5a2:	e030      	b.n	f606 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b2>
    f5a4:	201a      	movs	r0, #26
    f5a6:	b005      	add	sp, #20
    f5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5aa:	f89d 1000 	ldrb.w	r1, [sp]
    f5ae:	b371      	cbz	r1, f60e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
    f5b0:	2100      	movs	r1, #0
    f5b2:	aa02      	add	r2, sp, #8
    f5b4:	f7ff ff21 	bl	f3fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a6>
    f5b8:	8861      	ldrh	r1, [r4, #2]
    f5ba:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    f5be:	4281      	cmp	r1, r0
    f5c0:	d200      	bcs.n	f5c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x370>
    f5c2:	4608      	mov	r0, r1
    f5c4:	80e8      	strh	r0, [r5, #6]
    f5c6:	88a1      	ldrh	r1, [r4, #4]
    f5c8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    f5cc:	4281      	cmp	r1, r0
    f5ce:	d200      	bcs.n	f5d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
    f5d0:	4608      	mov	r0, r1
    f5d2:	8128      	strh	r0, [r5, #8]
    f5d4:	88e2      	ldrh	r2, [r4, #6]
    f5d6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    f5da:	428a      	cmp	r2, r1
    f5dc:	d200      	bcs.n	f5e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
    f5de:	4611      	mov	r1, r2
    f5e0:	8069      	strh	r1, [r5, #2]
    f5e2:	8922      	ldrh	r2, [r4, #8]
    f5e4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f5e8:	428a      	cmp	r2, r1
    f5ea:	d200      	bcs.n	f5ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
    f5ec:	4611      	mov	r1, r2
    f5ee:	f640 0248 	movw	r2, #2120	; 0x848
    f5f2:	80a9      	strh	r1, [r5, #4]
    f5f4:	4291      	cmp	r1, r2
    f5f6:	d300      	bcc.n	f5fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
    f5f8:	4611      	mov	r1, r2
    f5fa:	80a9      	strh	r1, [r5, #4]
    f5fc:	4290      	cmp	r0, r2
    f5fe:	d200      	bcs.n	f602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ae>
    f600:	4602      	mov	r2, r0
    f602:	812a      	strh	r2, [r5, #8]
    f604:	702f      	strb	r7, [r5, #0]
    f606:	2000      	movs	r0, #0
    f608:	7068      	strb	r0, [r5, #1]
    f60a:	4630      	mov	r0, r6
    f60c:	e7cb      	b.n	f5a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    f60e:	2101      	movs	r1, #1
    f610:	e7cf      	b.n	f5b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
    f612:	b508      	push	{r3, lr}
    f614:	f640 1288 	movw	r2, #2440	; 0x988
    f618:	4669      	mov	r1, sp
    f61a:	f7f4 fb43 	bl	3ca4 <mpsl_fem_tx_power_split>
    f61e:	bd08      	pop	{r3, pc}
    f620:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f622:	f7ff ff5d 	bl	f4e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28c>
    f626:	b110      	cbz	r0, f62e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
    f628:	f7f6 ff82 	bl	6530 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    f62c:	b990      	cbnz	r0, f654 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
    f62e:	4669      	mov	r1, sp
    f630:	2002      	movs	r0, #2
    f632:	f7fe fa0e 	bl	da52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f636:	b178      	cbz	r0, f658 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x404>
    f638:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f63c:	2039      	movs	r0, #57	; 0x39
    f63e:	f7f4 fcbd 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f642:	9c02      	ldr	r4, [sp, #8]
    f644:	4620      	mov	r0, r4
    f646:	f7ff f81c 	bl	e682 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f64a:	b128      	cbz	r0, f658 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x404>
    f64c:	4620      	mov	r0, r4
    f64e:	f7ff f80b 	bl	e668 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    f652:	b108      	cbz	r0, f658 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x404>
    f654:	2001      	movs	r0, #1
    f656:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f658:	4668      	mov	r0, sp
    f65a:	f7f4 fee3 	bl	4424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f65e:	2800      	cmp	r0, #0
    f660:	d0ef      	beq.n	f642 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ee>
    f662:	2000      	movs	r0, #0
    f664:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f666:	6802      	ldr	r2, [r0, #0]
    f668:	b912      	cbnz	r2, f670 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41c>
    f66a:	6001      	str	r1, [r0, #0]
    f66c:	4770      	bx	lr
    f66e:	4602      	mov	r2, r0
    f670:	6850      	ldr	r0, [r2, #4]
    f672:	b108      	cbz	r0, f678 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x424>
    f674:	428a      	cmp	r2, r1
    f676:	d1fa      	bne.n	f66e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    f678:	428a      	cmp	r2, r1
    f67a:	d0f7      	beq.n	f66c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x418>
    f67c:	6051      	str	r1, [r2, #4]
    f67e:	4770      	bx	lr
    f680:	b510      	push	{r4, lr}
    f682:	4604      	mov	r4, r0
    f684:	e002      	b.n	f68c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x438>
    f686:	6820      	ldr	r0, [r4, #0]
    f688:	4780      	blx	r0
    f68a:	6864      	ldr	r4, [r4, #4]
    f68c:	2c00      	cmp	r4, #0
    f68e:	d1fa      	bne.n	f686 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x432>
    f690:	bd10      	pop	{r4, pc}
    f692:	b510      	push	{r4, lr}
    f694:	f7f6 fe12 	bl	62bc <sym_RVDUOFXS6QFZAGXDM6VFX4GXCXYTNLA6BFQ4IMA>
    f698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f69c:	f7fb b8b6 	b.w	a80c <sym_I2OCMPNOS3RX5QDP26QCUET5RLSHIJGL3A3XYRI+0x24>
    f6a0:	b510      	push	{r4, lr}
    f6a2:	f7f9 fcf1 	bl	9088 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    f6a6:	b120      	cbz	r0, f6b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x45e>
    f6a8:	f240 112d 	movw	r1, #301	; 0x12d
    f6ac:	2001      	movs	r0, #1
    f6ae:	f7f4 fc85 	bl	3fbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6b2:	f7fa fedd 	bl	a470 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>
    f6b6:	f7f6 fe49 	bl	634c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    f6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6be:	f7fa be7f 	b.w	a3c0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>

0000f6c2 <sym_JU742LCDLL7PZRKE4HZMDATVAWDO5RTNLQEGJHI>:
    f6c2:	7981      	ldrb	r1, [r0, #6]
    f6c4:	b131      	cbz	r1, f6d4 <sym_JU742LCDLL7PZRKE4HZMDATVAWDO5RTNLQEGJHI+0x12>
    f6c6:	1e49      	subs	r1, r1, #1
    f6c8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    f6cc:	7181      	strb	r1, [r0, #6]
    f6ce:	d001      	beq.n	f6d4 <sym_JU742LCDLL7PZRKE4HZMDATVAWDO5RTNLQEGJHI+0x12>
    f6d0:	2000      	movs	r0, #0
    f6d2:	4770      	bx	lr
    f6d4:	2001      	movs	r0, #1
    f6d6:	4770      	bx	lr

0000f6d8 <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA>:
    f6d8:	b510      	push	{r4, lr}
    f6da:	2101      	movs	r1, #1
    f6dc:	71c1      	strb	r1, [r0, #7]
    f6de:	7181      	strb	r1, [r0, #6]
    f6e0:	8081      	strh	r1, [r0, #4]
    f6e2:	4604      	mov	r4, r0
    f6e4:	2104      	movs	r1, #4
    f6e6:	f7f4 fce9 	bl	40bc <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    f6ea:	2800      	cmp	r0, #0
    f6ec:	d102      	bne.n	f6f4 <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA+0x1c>
    f6ee:	6820      	ldr	r0, [r4, #0]
    f6f0:	1c40      	adds	r0, r0, #1
    f6f2:	6020      	str	r0, [r4, #0]
    f6f4:	bd10      	pop	{r4, pc}

0000f6f6 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY>:
    f6f6:	b510      	push	{r4, lr}
    f6f8:	4604      	mov	r4, r0
    f6fa:	79c0      	ldrb	r0, [r0, #7]
    f6fc:	b111      	cbz	r1, f704 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0xe>
    f6fe:	b940      	cbnz	r0, f712 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x1c>
    f700:	2100      	movs	r1, #0
    f702:	e001      	b.n	f708 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x12>
    f704:	b928      	cbnz	r0, f712 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x1c>
    f706:	2101      	movs	r1, #1
    f708:	4620      	mov	r0, r4
    f70a:	f000 f807 	bl	f71c <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x26>
    f70e:	79e0      	ldrb	r0, [r4, #7]
    f710:	b110      	cbz	r0, f718 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x22>
    f712:	2000      	movs	r0, #0
    f714:	71e0      	strb	r0, [r4, #7]
    f716:	bd10      	pop	{r4, pc}
    f718:	2001      	movs	r0, #1
    f71a:	e7fb      	b.n	f714 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x1e>
    f71c:	8882      	ldrh	r2, [r0, #4]
    f71e:	b151      	cbz	r1, f736 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x40>
    f720:	2aff      	cmp	r2, #255	; 0xff
    f722:	d20f      	bcs.n	f744 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x4e>
    f724:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f728:	ea01 0142 	and.w	r1, r1, r2, lsl #1
    f72c:	8081      	strh	r1, [r0, #4]
    f72e:	29ff      	cmp	r1, #255	; 0xff
    f730:	d908      	bls.n	f744 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x4e>
    f732:	21ff      	movs	r1, #255	; 0xff
    f734:	e005      	b.n	f742 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x4c>
    f736:	2a01      	cmp	r2, #1
    f738:	d904      	bls.n	f744 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x4e>
    f73a:	0851      	lsrs	r1, r2, #1
    f73c:	8081      	strh	r1, [r0, #4]
    f73e:	d101      	bne.n	f744 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x4e>
    f740:	2101      	movs	r1, #1
    f742:	8081      	strh	r1, [r0, #4]
    f744:	6801      	ldr	r1, [r0, #0]
    f746:	2901      	cmp	r1, #1
    f748:	d000      	beq.n	f74c <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x56>
    f74a:	b909      	cbnz	r1, f750 <sym_R2VJKLSYF5CMGIG2T3WINKKX7554IB2FFBHA6RY+0x5a>
    f74c:	210d      	movs	r1, #13
    f74e:	6001      	str	r1, [r0, #0]
    f750:	43c9      	mvns	r1, r1
    f752:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    f756:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    f75a:	7982      	ldrb	r2, [r0, #6]
    f75c:	43d2      	mvns	r2, r2
    f75e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    f762:	ebc3 1282 	rsb	r2, r3, r2, lsl #6
    f766:	4411      	add	r1, r2
    f768:	6001      	str	r1, [r0, #0]
    f76a:	8882      	ldrh	r2, [r0, #4]
    f76c:	0c89      	lsrs	r1, r1, #18
    f76e:	fbb1 f3f2 	udiv	r3, r1, r2
    f772:	fb02 1113 	mls	r1, r2, r3, r1
    f776:	7181      	strb	r1, [r0, #6]
    f778:	4770      	bx	lr

0000f77a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    f77a:	f7f3 bf49 	b.w	3610 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    f77e:	0001      	.short	0x0001
    f780:	0002000b 	.word	0x0002000b
    f784:	0005000a 	.word	0x0005000a
    f788:	000a0009 	.word	0x000a0009
    f78c:	00140008 	.word	0x00140008
    f790:	001e0007 	.word	0x001e0007
    f794:	00320006 	.word	0x00320006
    f798:	004b0005 	.word	0x004b0005
    f79c:	00640004 	.word	0x00640004
    f7a0:	00960003 	.word	0x00960003
    f7a4:	00fa0002 	.word	0x00fa0002
    f7a8:	01f40001 	.word	0x01f40001
	...

0000f7ae <sym_HDXV6XMLHCLB5RJEPHSKKLJJM3TFLHYSQSNRE7Y>:
    f7ae:	68c8      	ldr	r0, [r1, #12]
    f7b0:	f7fe b9ff 	b.w	dbb2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000f7b4 <sym_W7HPZT4ZZWPRGP66GDZI4KM3L4VPFAYQTFZ7HRI>:
    f7b4:	4770      	bx	lr

0000f7b6 <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI>:
    f7b6:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    f7ba:	b108      	cbz	r0, f7c0 <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI+0xa>
    f7bc:	2000      	movs	r0, #0
    f7be:	4770      	bx	lr
    f7c0:	2001      	movs	r0, #1
    f7c2:	4770      	bx	lr

0000f7c4 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f7c4:	b510      	push	{r4, lr}
    f7c6:	f7fb fd31 	bl	b22c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f7ca:	f7fb f993 	bl	aaf4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f7ce:	f7fb f925 	bl	aa1c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7d6:	f7fb b985 	b.w	aae4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f7da <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f7da:	b510      	push	{r4, lr}
    f7dc:	4604      	mov	r4, r0
    f7de:	4608      	mov	r0, r1
    f7e0:	f7fb fee6 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7e8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f7ec:	fbb0 f0f1 	udiv	r0, r0, r1
    f7f0:	1a20      	subs	r0, r4, r0
    f7f2:	1e80      	subs	r0, r0, #2
    f7f4:	bd10      	pop	{r4, pc}

0000f7f6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f7f6:	b510      	push	{r4, lr}
    f7f8:	4604      	mov	r4, r0
    f7fa:	4608      	mov	r0, r1
    f7fc:	f7fb fed8 	bl	b5b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f804:	fbb0 f0f1 	udiv	r0, r0, r1
    f808:	1a20      	subs	r0, r4, r0
    f80a:	bd10      	pop	{r4, pc}

0000f80c <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
    f80c:	680a      	ldr	r2, [r1, #0]
    f80e:	6002      	str	r2, [r0, #0]
    f810:	790b      	ldrb	r3, [r1, #4]
    f812:	7103      	strb	r3, [r0, #4]
    f814:	4770      	bx	lr

0000f816 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
    f816:	2100      	movs	r1, #0
    f818:	6001      	str	r1, [r0, #0]
    f81a:	8081      	strh	r1, [r0, #4]
    f81c:	4770      	bx	lr
    f81e:	d8d8      	.short	0xd8d8
    f820:	d8d8d8d8 	.word	0xd8d8d8d8
    f824:	d8d8d8d8 	.word	0xd8d8d8d8
    f828:	d8d8d8d8 	.word	0xd8d8d8d8
    f82c:	d8d8d8d8 	.word	0xd8d8d8d8
    f830:	ececd8d8 	.word	0xececd8d8
    f834:	f0f0ecec 	.word	0xf0f0ecec
    f838:	f4f4f0f0 	.word	0xf4f4f0f0
    f83c:	f8f8f4f4 	.word	0xf8f8f4f4
    f840:	fcfcf8f8 	.word	0xfcfcf8f8
    f844:	0000fcfc 	.word	0x0000fcfc
    f848:	05040302 	.word	0x05040302
    f84c:	d8080706 	.word	0xd8080706
    f850:	d8d8d8d8 	.word	0xd8d8d8d8
    f854:	d8d8d8d8 	.word	0xd8d8d8d8
    f858:	d8d8d8d8 	.word	0xd8d8d8d8
    f85c:	d8d8d8d8 	.word	0xd8d8d8d8
    f860:	ecd8d8d8 	.word	0xecd8d8d8
    f864:	f0ececec 	.word	0xf0ececec
    f868:	f4f0f0f0 	.word	0xf4f0f0f0
    f86c:	f8f4f4f4 	.word	0xf8f4f4f4
    f870:	fcf8f8f8 	.word	0xfcf8f8f8
    f874:	00fcfcfc 	.word	0x00fcfcfc
    f878:	04030000 	.word	0x04030000
    f87c:	25555555 	.word	0x25555555
    f880:	2726      	.short	0x2726
    f882:	0301      	.short	0x0301
    f884:	00000101 	.word	0x00000101

0000f888 <updateTxBuffer>:
//	  len: length of the message to be transmitted 
///////////////////////////////////////////////////////////////////////
static void updateTxBuffer(unsigned char msgBuf[], int len) 
{
	size_t i = 0;
	for (i = 0; i < len; i++)
    f888:	2300      	movs	r3, #0
    f88a:	e005      	b.n	f898 <updateTxBuffer+0x10>
	{
		tx_buffer[i] = msgBuf[i];
    f88c:	f810 c003 	ldrb.w	ip, [r0, r3]
    f890:	4a06      	ldr	r2, [pc, #24]	; (f8ac <updateTxBuffer+0x24>)
    f892:	f802 c003 	strb.w	ip, [r2, r3]
	for (i = 0; i < len; i++)
    f896:	3301      	adds	r3, #1
    f898:	4299      	cmp	r1, r3
    f89a:	d8f7      	bhi.n	f88c <updateTxBuffer+0x4>
    f89c:	e003      	b.n	f8a6 <updateTxBuffer+0x1e>
	}
	//clearing rest of the buffer
	for (size_t j = i; j < sizeof(tx_buffer); j++)
	{
		tx_buffer[j] = 0;
    f89e:	4a03      	ldr	r2, [pc, #12]	; (f8ac <updateTxBuffer+0x24>)
    f8a0:	2100      	movs	r1, #0
    f8a2:	54d1      	strb	r1, [r2, r3]
	for (size_t j = i; j < sizeof(tx_buffer); j++)
    f8a4:	3301      	adds	r3, #1
    f8a6:	2b45      	cmp	r3, #69	; 0x45
    f8a8:	d9f9      	bls.n	f89e <updateTxBuffer+0x16>
	}
}
    f8aa:	4770      	bx	lr
    f8ac:	20001e04 	.word	0x20001e04

0000f8b0 <spi_init>:

static void spi_init(void)
{
    f8b0:	b508      	push	{r3, lr}
	spi_dev = DEVICE_DT_GET(MY_SPI_MASTER);
    f8b2:	4805      	ldr	r0, [pc, #20]	; (f8c8 <spi_init+0x18>)
    f8b4:	4b05      	ldr	r3, [pc, #20]	; (f8cc <spi_init+0x1c>)
    f8b6:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    f8b8:	f00e f8a4 	bl	1da04 <z_device_is_ready>
	if(!device_is_ready(spi_dev)) {
		if(DEBUG_ENABLE) printk("SPI master device not ready!\n");
	}
	if(!device_is_ready(spim_cs.gpio.port)){
    f8bc:	4b04      	ldr	r3, [pc, #16]	; (f8d0 <spi_init+0x20>)
    f8be:	6818      	ldr	r0, [r3, #0]
    f8c0:	f00e f8a0 	bl	1da04 <z_device_is_ready>
		if(DEBUG_ENABLE) printk("SPI master chip select device not ready!\n");
	}
}
    f8c4:	bd08      	pop	{r3, pc}
    f8c6:	bf00      	nop
    f8c8:	0001e600 	.word	0x0001e600
    f8cc:	20001e00 	.word	0x20001e00
    f8d0:	20000600 	.word	0x20000600

0000f8d4 <createIscSequencerConfigReq>:
//
//  argument:
//    siac_data: Data recieved from SIAC via BLE. This function is 
//    called from the observer.c file
///////////////////////////////////////////////////////////////////////
void createIscSequencerConfigReq(char siac_data[]) {
    f8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8d8:	4605      	mov	r5, r0
	
	uint8_t controlNumber = 0, hours = 0, minutes = 0;
	for (int i = 0; i < strlen(siac_data); i++)
    f8da:	2400      	movs	r4, #0
	uint8_t controlNumber = 0, hours = 0, minutes = 0;
    f8dc:	46a0      	mov	r8, r4
    f8de:	4627      	mov	r7, r4
    f8e0:	4626      	mov	r6, r4
	for (int i = 0; i < strlen(siac_data); i++)
    f8e2:	e000      	b.n	f8e6 <createIscSequencerConfigReq+0x12>
    f8e4:	3401      	adds	r4, #1
    f8e6:	4628      	mov	r0, r5
    f8e8:	f00b fc70 	bl	1b1cc <strlen>
    f8ec:	4623      	mov	r3, r4
    f8ee:	42a0      	cmp	r0, r4
    f8f0:	d90a      	bls.n	f908 <createIscSequencerConfigReq+0x34>
	{
		if (siac_data[i] == 0x07)
    f8f2:	5d2a      	ldrb	r2, [r5, r4]
    f8f4:	2a07      	cmp	r2, #7
    f8f6:	d1f5      	bne.n	f8e4 <createIscSequencerConfigReq+0x10>
		{
			/* Parse SIAC data */
			controlNumber = siac_data[i+1];
    f8f8:	1c5a      	adds	r2, r3, #1
    f8fa:	5cae      	ldrb	r6, [r5, r2]
			hours = siac_data[i+2];
    f8fc:	1c9a      	adds	r2, r3, #2
    f8fe:	5caf      	ldrb	r7, [r5, r2]
			minutes = siac_data[i+3];
    f900:	3303      	adds	r3, #3
    f902:	f815 8003 	ldrb.w	r8, [r5, r3]
    f906:	e7ed      	b.n	f8e4 <createIscSequencerConfigReq+0x10>
		}
	}
	if(DEBUG_ENABLE) printk("control no: %d, hours: %d, minutes: %d\n", controlNumber, hours, minutes);

	uint8_t hoursMsgCode = hours - 1;
    f908:	1e7b      	subs	r3, r7, #1
    f90a:	b2db      	uxtb	r3, r3
	uint8_t minutesMsgcode = (minutes + 24) - 1;
    f90c:	f108 0817 	add.w	r8, r8, #23
    f910:	fa5f f888 	uxtb.w	r8, r8
	uint8_t controlMsgCode = (controlNumber + 142) - 1;
    f914:	3e73      	subs	r6, #115	; 0x73
    f916:	b2f6      	uxtb	r6, r6
	if(DEBUG_ENABLE) printk("control code: 0x%.2x, hours code: 0x%.2x, minutes code: 0x%.2x\n", controlMsgCode, hoursMsgCode, minutesMsgcode);

	if (hours == 0)
    f918:	b947      	cbnz	r7, f92c <createIscSequencerConfigReq+0x58>
	{
		msgHasHours = false;
    f91a:	4b09      	ldr	r3, [pc, #36]	; (f940 <createIscSequencerConfigReq+0x6c>)
    f91c:	2200      	movs	r2, #0
    f91e:	701a      	strb	r2, [r3, #0]
		iscSequencerConfigReqWithoutHours[24] = controlMsgCode;
    f920:	4b08      	ldr	r3, [pc, #32]	; (f944 <createIscSequencerConfigReq+0x70>)
    f922:	761e      	strb	r6, [r3, #24]
		iscSequencerConfigReqWithoutHours[40] = minutesMsgcode;
    f924:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
		msgHasHours = true;
		iscSequencerConfigReq[24] = controlMsgCode;
		iscSequencerConfigReq[40] = hoursMsgCode;
		iscSequencerConfigReq[48] = minutesMsgcode;
	}
}
    f928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		msgHasHours = true;
    f92c:	4a04      	ldr	r2, [pc, #16]	; (f940 <createIscSequencerConfigReq+0x6c>)
    f92e:	2101      	movs	r1, #1
    f930:	7011      	strb	r1, [r2, #0]
		iscSequencerConfigReq[24] = controlMsgCode;
    f932:	4a05      	ldr	r2, [pc, #20]	; (f948 <createIscSequencerConfigReq+0x74>)
    f934:	7616      	strb	r6, [r2, #24]
		iscSequencerConfigReq[40] = hoursMsgCode;
    f936:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		iscSequencerConfigReq[48] = minutesMsgcode;
    f93a:	f882 8030 	strb.w	r8, [r2, #48]	; 0x30
}
    f93e:	e7f3      	b.n	f928 <createIscSequencerConfigReq+0x54>
    f940:	20003bc0 	.word	0x20003bc0
    f944:	200005bc 	.word	0x200005bc
    f948:	20000588 	.word	0x20000588

0000f94c <S1V3G340_Initialize_Audio_Config>:

int S1V3G340_Initialize_Audio_Config(void) {
    f94c:	b530      	push	{r4, r5, lr}
    f94e:	b085      	sub	sp, #20

	/***************************Reset speech IC***************************/
	// send ISC_RESET_REQ
	updateTxBuffer(aucIscResetReq, iIscResetReqLen);
    f950:	4b35      	ldr	r3, [pc, #212]	; (fa28 <S1V3G340_Initialize_Audio_Config+0xdc>)
    f952:	6819      	ldr	r1, [r3, #0]
    f954:	4835      	ldr	r0, [pc, #212]	; (fa2c <S1V3G340_Initialize_Audio_Config+0xe0>)
    f956:	f7ff ff97 	bl	f888 <updateTxBuffer>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_reset(sig);
    f95a:	4c35      	ldr	r4, [pc, #212]	; (fa30 <S1V3G340_Initialize_Audio_Config+0xe4>)
    f95c:	4620      	mov	r0, r4
    f95e:	f00e fd5f 	bl	1e420 <z_impl_k_poll_signal_reset>
	if(DEBUG_ENABLE) printBuffer(tx_buffer, iIscResetReqLen);
	// Reset signal
	k_poll_signal_reset(&spi_done_sig);
	// Start transaction
	int error = spi_transceive_async(spi_dev, &spi_cfg, &tx, &rx, &spi_done_sig);
    f962:	4b34      	ldr	r3, [pc, #208]	; (fa34 <S1V3G340_Initialize_Audio_Config+0xe8>)
    f964:	6818      	ldr	r0, [r3, #0]
				       const struct spi_config *config,
				       const struct spi_buf_set *tx_bufs,
				       const struct spi_buf_set *rx_bufs,
				       struct k_poll_signal *async)
{
	const struct spi_driver_api *api =
    f966:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive_async(dev, config, tx_bufs, rx_bufs, async);
    f968:	685d      	ldr	r5, [r3, #4]
    f96a:	9400      	str	r4, [sp, #0]
    f96c:	4b32      	ldr	r3, [pc, #200]	; (fa38 <S1V3G340_Initialize_Audio_Config+0xec>)
    f96e:	4a33      	ldr	r2, [pc, #204]	; (fa3c <S1V3G340_Initialize_Audio_Config+0xf0>)
    f970:	4933      	ldr	r1, [pc, #204]	; (fa40 <S1V3G340_Initialize_Audio_Config+0xf4>)
    f972:	47a8      	blx	r5
	if(error != 0){
    f974:	4604      	mov	r4, r0
    f976:	2800      	cmp	r0, #0
    f978:	d153      	bne.n	fa22 <S1V3G340_Initialize_Audio_Config+0xd6>
		(void) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(sig, signaled, result);
    f97a:	aa02      	add	r2, sp, #8
    f97c:	a903      	add	r1, sp, #12
    f97e:	482c      	ldr	r0, [pc, #176]	; (fa30 <S1V3G340_Initialize_Audio_Config+0xe4>)
    f980:	f00e fd51 	bl	1e426 <z_impl_k_poll_signal_check>
	}
	// Wait for the done signal to be raised and log the rx buffer
	int spi_signaled, spi_result;
	do{
		k_poll_signal_check(&spi_done_sig, &spi_signaled, &spi_result);
	} while(spi_signaled == 0);
    f984:	9b03      	ldr	r3, [sp, #12]
    f986:	2b00      	cmp	r3, #0
    f988:	d0f7      	beq.n	f97a <S1V3G340_Initialize_Audio_Config+0x2e>
	if(DEBUG_ENABLE) printBuffer(rx_buffer, LEN_ISC_RESET_RESP);

	/***************************Registry key-code***************************/
	// send ISC_TEST_REQ
	updateTxBuffer(aucIscTestReq, iIscTestReqLen);
    f98a:	4b2e      	ldr	r3, [pc, #184]	; (fa44 <S1V3G340_Initialize_Audio_Config+0xf8>)
    f98c:	6819      	ldr	r1, [r3, #0]
    f98e:	482e      	ldr	r0, [pc, #184]	; (fa48 <S1V3G340_Initialize_Audio_Config+0xfc>)
    f990:	f7ff ff7a 	bl	f888 <updateTxBuffer>
	if(DEBUG_ENABLE) printBuffer(tx_buffer, iIscTestReqLen);

	error = spi_transceive_async(spi_dev, &spi_cfg, &tx, &rx, &spi_done_sig);
    f994:	4b27      	ldr	r3, [pc, #156]	; (fa34 <S1V3G340_Initialize_Audio_Config+0xe8>)
    f996:	6818      	ldr	r0, [r3, #0]
	const struct spi_driver_api *api =
    f998:	6883      	ldr	r3, [r0, #8]
	return api->transceive_async(dev, config, tx_bufs, rx_bufs, async);
    f99a:	685c      	ldr	r4, [r3, #4]
    f99c:	4b24      	ldr	r3, [pc, #144]	; (fa30 <S1V3G340_Initialize_Audio_Config+0xe4>)
    f99e:	9300      	str	r3, [sp, #0]
    f9a0:	4b25      	ldr	r3, [pc, #148]	; (fa38 <S1V3G340_Initialize_Audio_Config+0xec>)
    f9a2:	4a26      	ldr	r2, [pc, #152]	; (fa3c <S1V3G340_Initialize_Audio_Config+0xf0>)
    f9a4:	4926      	ldr	r1, [pc, #152]	; (fa40 <S1V3G340_Initialize_Audio_Config+0xf4>)
    f9a6:	47a0      	blx	r4
	if(error != 0){
    f9a8:	4604      	mov	r4, r0
    f9aa:	2800      	cmp	r0, #0
    f9ac:	d139      	bne.n	fa22 <S1V3G340_Initialize_Audio_Config+0xd6>
    f9ae:	aa02      	add	r2, sp, #8
    f9b0:	a903      	add	r1, sp, #12
    f9b2:	481f      	ldr	r0, [pc, #124]	; (fa30 <S1V3G340_Initialize_Audio_Config+0xe4>)
    f9b4:	f00e fd37 	bl	1e426 <z_impl_k_poll_signal_check>
		if(DEBUG_ENABLE) printk("SPI transceive error: %i\n", error);
		return error;
	}
	do{
		k_poll_signal_check(&spi_done_sig, &spi_signaled, &spi_result);
	} while(spi_signaled == 0);
    f9b8:	9b03      	ldr	r3, [sp, #12]
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	d0f7      	beq.n	f9ae <S1V3G340_Initialize_Audio_Config+0x62>
	if(DEBUG_ENABLE) printBuffer(rx_buffer, LEN_ISC_TEST_RESP);

	/***************************Get version info.***************************/
	// send ISC_VERSION_REQ	
	updateTxBuffer(aucIscVersionReq, iIscVersionReqLen);
    f9be:	4b23      	ldr	r3, [pc, #140]	; (fa4c <S1V3G340_Initialize_Audio_Config+0x100>)
    f9c0:	6819      	ldr	r1, [r3, #0]
    f9c2:	4823      	ldr	r0, [pc, #140]	; (fa50 <S1V3G340_Initialize_Audio_Config+0x104>)
    f9c4:	f7ff ff60 	bl	f888 <updateTxBuffer>
	if(DEBUG_ENABLE) printBuffer(tx_buffer, iIscVersionReqLen);

	error = spi_transceive_async(spi_dev, &spi_cfg, &tx, &rx, &spi_done_sig);
    f9c8:	4b1a      	ldr	r3, [pc, #104]	; (fa34 <S1V3G340_Initialize_Audio_Config+0xe8>)
    f9ca:	6818      	ldr	r0, [r3, #0]
	const struct spi_driver_api *api =
    f9cc:	6883      	ldr	r3, [r0, #8]
	return api->transceive_async(dev, config, tx_bufs, rx_bufs, async);
    f9ce:	685c      	ldr	r4, [r3, #4]
    f9d0:	4b17      	ldr	r3, [pc, #92]	; (fa30 <S1V3G340_Initialize_Audio_Config+0xe4>)
    f9d2:	9300      	str	r3, [sp, #0]
    f9d4:	4b18      	ldr	r3, [pc, #96]	; (fa38 <S1V3G340_Initialize_Audio_Config+0xec>)
    f9d6:	4a19      	ldr	r2, [pc, #100]	; (fa3c <S1V3G340_Initialize_Audio_Config+0xf0>)
    f9d8:	4919      	ldr	r1, [pc, #100]	; (fa40 <S1V3G340_Initialize_Audio_Config+0xf4>)
    f9da:	47a0      	blx	r4
	if(error != 0){
    f9dc:	4604      	mov	r4, r0
    f9de:	bb00      	cbnz	r0, fa22 <S1V3G340_Initialize_Audio_Config+0xd6>
    f9e0:	aa02      	add	r2, sp, #8
    f9e2:	a903      	add	r1, sp, #12
    f9e4:	4812      	ldr	r0, [pc, #72]	; (fa30 <S1V3G340_Initialize_Audio_Config+0xe4>)
    f9e6:	f00e fd1e 	bl	1e426 <z_impl_k_poll_signal_check>
		if(DEBUG_ENABLE) printk("SPI transceive error: %i\n", error);
		return error;
	}
	do{
		k_poll_signal_check(&spi_done_sig, &spi_signaled, &spi_result);
	} while(spi_signaled == 0);
    f9ea:	9b03      	ldr	r3, [sp, #12]
    f9ec:	2b00      	cmp	r3, #0
    f9ee:	d0f7      	beq.n	f9e0 <S1V3G340_Initialize_Audio_Config+0x94>
	if(DEBUG_ENABLE) printBuffer(rx_buffer, LEN_ISC_VERSION_RESP);

	/***********************Set volume & sampling freq.***********************/
	// send ISC_AUDIO_CONFIG_REQ
	updateTxBuffer(aucIscAudioConfigReq, iIscAudioConfigReqLen);
    f9f0:	4b18      	ldr	r3, [pc, #96]	; (fa54 <S1V3G340_Initialize_Audio_Config+0x108>)
    f9f2:	6819      	ldr	r1, [r3, #0]
    f9f4:	4818      	ldr	r0, [pc, #96]	; (fa58 <S1V3G340_Initialize_Audio_Config+0x10c>)
    f9f6:	f7ff ff47 	bl	f888 <updateTxBuffer>
	if(DEBUG_ENABLE) printBuffer(tx_buffer, iIscAudioConfigReqLen);

	error = spi_transceive_async(spi_dev, &spi_cfg, &tx, &rx, &spi_done_sig);
    f9fa:	4b0e      	ldr	r3, [pc, #56]	; (fa34 <S1V3G340_Initialize_Audio_Config+0xe8>)
    f9fc:	6818      	ldr	r0, [r3, #0]
	const struct spi_driver_api *api =
    f9fe:	6883      	ldr	r3, [r0, #8]
	return api->transceive_async(dev, config, tx_bufs, rx_bufs, async);
    fa00:	685c      	ldr	r4, [r3, #4]
    fa02:	4b0b      	ldr	r3, [pc, #44]	; (fa30 <S1V3G340_Initialize_Audio_Config+0xe4>)
    fa04:	9300      	str	r3, [sp, #0]
    fa06:	4b0c      	ldr	r3, [pc, #48]	; (fa38 <S1V3G340_Initialize_Audio_Config+0xec>)
    fa08:	4a0c      	ldr	r2, [pc, #48]	; (fa3c <S1V3G340_Initialize_Audio_Config+0xf0>)
    fa0a:	490d      	ldr	r1, [pc, #52]	; (fa40 <S1V3G340_Initialize_Audio_Config+0xf4>)
    fa0c:	47a0      	blx	r4
	if(error != 0){
    fa0e:	4604      	mov	r4, r0
    fa10:	b938      	cbnz	r0, fa22 <S1V3G340_Initialize_Audio_Config+0xd6>
    fa12:	aa02      	add	r2, sp, #8
    fa14:	a903      	add	r1, sp, #12
    fa16:	4806      	ldr	r0, [pc, #24]	; (fa30 <S1V3G340_Initialize_Audio_Config+0xe4>)
    fa18:	f00e fd05 	bl	1e426 <z_impl_k_poll_signal_check>
		if(DEBUG_ENABLE) printk("SPI transceive error: %i\n", error);
		return error;
	}
	do{
		k_poll_signal_check(&spi_done_sig, &spi_signaled, &spi_result);
	} while(spi_signaled == 0);
    fa1c:	9b03      	ldr	r3, [sp, #12]
    fa1e:	2b00      	cmp	r3, #0
    fa20:	d0f7      	beq.n	fa12 <S1V3G340_Initialize_Audio_Config+0xc6>
	if(DEBUG_ENABLE) printBuffer(rx_buffer, LEN_ISC_AUDIO_CONFIG_RESP);

	if(DEBUG_ENABLE) printk("Initialization complete!!!\n");

	return 0;
}
    fa22:	4620      	mov	r0, r4
    fa24:	b005      	add	sp, #20
    fa26:	bd30      	pop	{r4, r5, pc}
    fa28:	20000654 	.word	0x20000654
    fa2c:	20000628 	.word	0x20000628
    fa30:	200005f0 	.word	0x200005f0
    fa34:	20001e00 	.word	0x20001e00
    fa38:	0001e898 	.word	0x0001e898
    fa3c:	0001e8ac 	.word	0x0001e8ac
    fa40:	0001e8a0 	.word	0x0001e8a0
    fa44:	2000065c 	.word	0x2000065c
    fa48:	20000638 	.word	0x20000638
    fa4c:	20000660 	.word	0x20000660
    fa50:	20000648 	.word	0x20000648
    fa54:	20000650 	.word	0x20000650
    fa58:	20000618 	.word	0x20000618

0000fa5c <S1V3G340_Play_Specific_Audio>:

int S1V3G340_Play_Specific_Audio(char siac_data[]) {
    fa5c:	b510      	push	{r4, lr}
    fa5e:	b084      	sub	sp, #16

	if(DEBUG_ENABLE) printk("Playing audio!!!\n");
	
	/***************************Sequencer configuration***************************/
	// send ISC_SEQUENCER_CONFIG_REQ
	createIscSequencerConfigReq(siac_data);
    fa60:	f7ff ff38 	bl	f8d4 <createIscSequencerConfigReq>
	if (msgHasHours)
    fa64:	4b1f      	ldr	r3, [pc, #124]	; (fae4 <S1V3G340_Play_Specific_Audio+0x88>)
    fa66:	781b      	ldrb	r3, [r3, #0]
    fa68:	2b00      	cmp	r3, #0
    fa6a:	d035      	beq.n	fad8 <S1V3G340_Play_Specific_Audio+0x7c>
	{
		updateTxBuffer(iscSequencerConfigReq, sizeof(iscSequencerConfigReq));
    fa6c:	2132      	movs	r1, #50	; 0x32
    fa6e:	481e      	ldr	r0, [pc, #120]	; (fae8 <S1V3G340_Play_Specific_Audio+0x8c>)
    fa70:	f7ff ff0a 	bl	f888 <updateTxBuffer>
		updateTxBuffer(iscSequencerConfigReqWithoutHours, sizeof(iscSequencerConfigReqWithoutHours));
		if(DEBUG_ENABLE) printBuffer(tx_buffer, sizeof(iscSequencerConfigReqWithoutHours));
	}

	// Start SPI transaction
	int error = spi_transceive_async(spi_dev, &spi_cfg, &tx, &rx, &spi_done_sig);
    fa74:	4b1d      	ldr	r3, [pc, #116]	; (faec <S1V3G340_Play_Specific_Audio+0x90>)
    fa76:	6818      	ldr	r0, [r3, #0]
	const struct spi_driver_api *api =
    fa78:	6883      	ldr	r3, [r0, #8]
	return api->transceive_async(dev, config, tx_bufs, rx_bufs, async);
    fa7a:	685c      	ldr	r4, [r3, #4]
    fa7c:	4b1c      	ldr	r3, [pc, #112]	; (faf0 <S1V3G340_Play_Specific_Audio+0x94>)
    fa7e:	9300      	str	r3, [sp, #0]
    fa80:	4b1c      	ldr	r3, [pc, #112]	; (faf4 <S1V3G340_Play_Specific_Audio+0x98>)
    fa82:	4a1d      	ldr	r2, [pc, #116]	; (faf8 <S1V3G340_Play_Specific_Audio+0x9c>)
    fa84:	491d      	ldr	r1, [pc, #116]	; (fafc <S1V3G340_Play_Specific_Audio+0xa0>)
    fa86:	47a0      	blx	r4
	if(error != 0){
    fa88:	4604      	mov	r4, r0
    fa8a:	bb10      	cbnz	r0, fad2 <S1V3G340_Play_Specific_Audio+0x76>
    fa8c:	aa02      	add	r2, sp, #8
    fa8e:	a903      	add	r1, sp, #12
    fa90:	4817      	ldr	r0, [pc, #92]	; (faf0 <S1V3G340_Play_Specific_Audio+0x94>)
    fa92:	f00e fcc8 	bl	1e426 <z_impl_k_poll_signal_check>
		return error;
	}
	int spi_signaled, spi_result;
	do{
		k_poll_signal_check(&spi_done_sig, &spi_signaled, &spi_result);
	} while(spi_signaled == 0);
    fa96:	9b03      	ldr	r3, [sp, #12]
    fa98:	2b00      	cmp	r3, #0
    fa9a:	d0f7      	beq.n	fa8c <S1V3G340_Play_Specific_Audio+0x30>
	if(DEBUG_ENABLE) printBuffer(rx_buffer, LEN_ISC_SEQUENCER_CONFIG_RESP);

	/***************************Start sequencer playback***************************/
	aucIscSequencerStartReq[6] = 0;		// set notify status ind
    fa9c:	4818      	ldr	r0, [pc, #96]	; (fb00 <S1V3G340_Play_Specific_Audio+0xa4>)
    fa9e:	2300      	movs	r3, #0
    faa0:	7183      	strb	r3, [r0, #6]
	// send ISC_SEQUENCER_START_REQ
  	updateTxBuffer(aucIscSequencerStartReq, iIscSequencerStartReqLen);
    faa2:	4b18      	ldr	r3, [pc, #96]	; (fb04 <S1V3G340_Play_Specific_Audio+0xa8>)
    faa4:	6819      	ldr	r1, [r3, #0]
    faa6:	f7ff feef 	bl	f888 <updateTxBuffer>
	if(DEBUG_ENABLE) printBuffer(tx_buffer, iIscSequencerStartReqLen);

	error = spi_transceive_async(spi_dev, &spi_cfg, &tx, &rx, &spi_done_sig);
    faaa:	4b10      	ldr	r3, [pc, #64]	; (faec <S1V3G340_Play_Specific_Audio+0x90>)
    faac:	6818      	ldr	r0, [r3, #0]
	const struct spi_driver_api *api =
    faae:	6883      	ldr	r3, [r0, #8]
	return api->transceive_async(dev, config, tx_bufs, rx_bufs, async);
    fab0:	685c      	ldr	r4, [r3, #4]
    fab2:	4b0f      	ldr	r3, [pc, #60]	; (faf0 <S1V3G340_Play_Specific_Audio+0x94>)
    fab4:	9300      	str	r3, [sp, #0]
    fab6:	4b0f      	ldr	r3, [pc, #60]	; (faf4 <S1V3G340_Play_Specific_Audio+0x98>)
    fab8:	4a0f      	ldr	r2, [pc, #60]	; (faf8 <S1V3G340_Play_Specific_Audio+0x9c>)
    faba:	4910      	ldr	r1, [pc, #64]	; (fafc <S1V3G340_Play_Specific_Audio+0xa0>)
    fabc:	47a0      	blx	r4
	if(error != 0){
    fabe:	4604      	mov	r4, r0
    fac0:	b938      	cbnz	r0, fad2 <S1V3G340_Play_Specific_Audio+0x76>
    fac2:	aa02      	add	r2, sp, #8
    fac4:	a903      	add	r1, sp, #12
    fac6:	480a      	ldr	r0, [pc, #40]	; (faf0 <S1V3G340_Play_Specific_Audio+0x94>)
    fac8:	f00e fcad 	bl	1e426 <z_impl_k_poll_signal_check>
		if(DEBUG_ENABLE) printk("SPI transceive error: %i\n", error);
		return error;
	}
	do{
		k_poll_signal_check(&spi_done_sig, &spi_signaled, &spi_result);
	} while(spi_signaled == 0);
    facc:	9b03      	ldr	r3, [sp, #12]
    face:	2b00      	cmp	r3, #0
    fad0:	d0f7      	beq.n	fac2 <S1V3G340_Play_Specific_Audio+0x66>
	if(DEBUG_ENABLE) printBuffer(rx_buffer, LEN_ISC_SEQUENCER_START_RESP);

	return 0;
}
    fad2:	4620      	mov	r0, r4
    fad4:	b004      	add	sp, #16
    fad6:	bd10      	pop	{r4, pc}
		updateTxBuffer(iscSequencerConfigReqWithoutHours, sizeof(iscSequencerConfigReqWithoutHours));
    fad8:	212a      	movs	r1, #42	; 0x2a
    fada:	480b      	ldr	r0, [pc, #44]	; (fb08 <S1V3G340_Play_Specific_Audio+0xac>)
    fadc:	f7ff fed4 	bl	f888 <updateTxBuffer>
		if(DEBUG_ENABLE) printBuffer(tx_buffer, sizeof(iscSequencerConfigReqWithoutHours));
    fae0:	e7c8      	b.n	fa74 <S1V3G340_Play_Specific_Audio+0x18>
    fae2:	bf00      	nop
    fae4:	20003bc0 	.word	0x20003bc0
    fae8:	20000588 	.word	0x20000588
    faec:	20001e00 	.word	0x20001e00
    faf0:	200005f0 	.word	0x200005f0
    faf4:	0001e898 	.word	0x0001e898
    faf8:	0001e8ac 	.word	0x0001e8ac
    fafc:	0001e8a0 	.word	0x0001e8a0
    fb00:	20000630 	.word	0x20000630
    fb04:	20000658 	.word	0x20000658
    fb08:	200005bc 	.word	0x200005bc

0000fb0c <main>:
}

int observer_start(void);

void main(void)
{
    fb0c:	b508      	push	{r3, lr}
	int err;
	printk("Starting SI Voice Audio device\n");
    fb0e:	4816      	ldr	r0, [pc, #88]	; (fb68 <main+0x5c>)
    fb10:	f00a fe47 	bl	1a7a2 <printk>
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
    fb14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    fb18:	2203      	movs	r2, #3
    fb1a:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738
    fb1e:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    fb22:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
	//EPSON S1V3G340 Control pins config
	nrf_gpio_cfg_output(H_RESET_PIN);
	nrf_gpio_cfg_output(H_MUTE_PIN);
	nrf_gpio_cfg_output(H_STBEXT_PIN);

	GPIO_S1V3G340_Reset(0);
    fb26:	2000      	movs	r0, #0
    fb28:	f00a fd9d 	bl	1a666 <GPIO_S1V3G340_Reset>
	GPIO_ControlStandby(0);		// Set stanby signal(STBYEXIT) to Low(deassert)
    fb2c:	2000      	movs	r0, #0
    fb2e:	f00a fd7b 	bl	1a628 <GPIO_ControlStandby>
	GPIO_ControlMute(0);        // Set mute signal(MUTE) to Low(enable)
    fb32:	2000      	movs	r0, #0
    fb34:	f00a fd88 	bl	1a648 <GPIO_ControlMute>
	GPIO_S1V3G340_Reset(1);
    fb38:	2001      	movs	r0, #1
    fb3a:	f00a fd94 	bl	1a666 <GPIO_S1V3G340_Reset>
	GPIO_ControlMute(1);        // Set mute signal(MUTE) to High(disable)
    fb3e:	2001      	movs	r0, #1
    fb40:	f00a fd82 	bl	1a648 <GPIO_ControlMute>
	k_msleep(120);    			// To ensure wait for "t1" as 120msec.
    fb44:	2078      	movs	r0, #120	; 0x78
    fb46:	f00a fd59 	bl	1a5fc <k_msleep>

	spi_init();
    fb4a:	f7ff feb1 	bl	f8b0 <spi_init>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    fb4e:	2000      	movs	r0, #0
    fb50:	f002 f9ce 	bl	11ef0 <bt_enable>
	if (err) {
    fb54:	b100      	cbz	r0, fb58 <main+0x4c>
	if(DEBUG_ENABLE) printk("Exiting %s thread.\n", __func__);

	while (1) {
		k_msleep(SLEEP_TIME_MS);
	}
    fb56:	bd08      	pop	{r3, pc}
	(void)observer_start();
    fb58:	f000 f8ec 	bl	fd34 <observer_start>
	return z_impl_k_sleep(timeout);
    fb5c:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    fb60:	2100      	movs	r1, #0
    fb62:	f007 fb99 	bl	17298 <z_impl_k_sleep>
    fb66:	e7f9      	b.n	fb5c <main+0x50>
    fb68:	0001e878 	.word	0x0001e878

0000fb6c <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *buf)
{
    fb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb6e:	b0b3      	sub	sp, #204	; 0xcc
    fb70:	4605      	mov	r5, r0
    fb72:	460c      	mov	r4, r1
	
	// Unique device identifier
	char * sportident_dev_id0 = "SI Beacon";
	char * sportident_dev_id1 = "SI";

	(void)memset(name, 0, sizeof(name));
    fb74:	221e      	movs	r2, #30
    fb76:	2100      	movs	r1, #0
    fb78:	a822      	add	r0, sp, #136	; 0x88
    fb7a:	f00b fba1 	bl	1b2c0 <memset>

	data_len = buf->len;
    fb7e:	88a6      	ldrh	r6, [r4, #4]
	char scan_data[100];
	(void)memset(scan_data, 0, sizeof(scan_data));
    fb80:	2264      	movs	r2, #100	; 0x64
    fb82:	2100      	movs	r1, #0
    fb84:	a809      	add	r0, sp, #36	; 0x24
    fb86:	f00b fb9b 	bl	1b2c0 <memset>
	memcpy(scan_data, buf->data, data_len);
    fb8a:	4632      	mov	r2, r6
    fb8c:	6821      	ldr	r1, [r4, #0]
    fb8e:	a809      	add	r0, sp, #36	; 0x24
    fb90:	f00b fb67 	bl	1b262 <memcpy>
	
	bt_data_parse(buf, data_cb, name);
    fb94:	aa22      	add	r2, sp, #136	; 0x88
    fb96:	493c      	ldr	r1, [pc, #240]	; (fc88 <scan_recv+0x11c>)
    fb98:	4620      	mov	r0, r4
    fb9a:	f00b fca1 	bl	1b4e0 <bt_data_parse>

	data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS(info->adv_props);

	bt_addr_le_to_str(info->addr, le_addr, sizeof(le_addr));
    fb9e:	682c      	ldr	r4, [r5, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    fba0:	7823      	ldrb	r3, [r4, #0]
    fba2:	2b03      	cmp	r3, #3
    fba4:	d82d      	bhi.n	fc02 <scan_recv+0x96>
    fba6:	e8df f003 	tbb	[pc, r3]
    fbaa:	1d02      	.short	0x1d02
    fbac:	2722      	.short	0x2722
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    fbae:	4937      	ldr	r1, [pc, #220]	; (fc8c <scan_recv+0x120>)
    fbb0:	a806      	add	r0, sp, #24
    fbb2:	f00b fae7 	bl	1b184 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fbb6:	79a3      	ldrb	r3, [r4, #6]
    fbb8:	7962      	ldrb	r2, [r4, #5]
    fbba:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fbbc:	78e0      	ldrb	r0, [r4, #3]
    fbbe:	78a6      	ldrb	r6, [r4, #2]
    fbc0:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fbc2:	af06      	add	r7, sp, #24
    fbc4:	9705      	str	r7, [sp, #20]
    fbc6:	9404      	str	r4, [sp, #16]
    fbc8:	9603      	str	r6, [sp, #12]
    fbca:	9002      	str	r0, [sp, #8]
    fbcc:	9101      	str	r1, [sp, #4]
    fbce:	9200      	str	r2, [sp, #0]
    fbd0:	4a2f      	ldr	r2, [pc, #188]	; (fc90 <scan_recv+0x124>)
    fbd2:	211e      	movs	r1, #30
    fbd4:	a82a      	add	r0, sp, #168	; 0xa8
    fbd6:	f00a fdf2 	bl	1a7be <snprintk>

	if (info->adv_type == 2)
    fbda:	79eb      	ldrb	r3, [r5, #7]
    fbdc:	2b02      	cmp	r3, #2
    fbde:	d016      	beq.n	fc0e <scan_recv+0xa2>
				(info->adv_props & BT_GAP_ADV_PROP_EXT_ADV) != 0,
				phy2str(info->primary_phy), phy2str(info->secondary_phy),
				info->interval, info->interval * 5 / 4, info->sid);
		}
	}
}
    fbe0:	b033      	add	sp, #204	; 0xcc
    fbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    fbe4:	492b      	ldr	r1, [pc, #172]	; (fc94 <scan_recv+0x128>)
    fbe6:	a806      	add	r0, sp, #24
    fbe8:	f00b facc 	bl	1b184 <strcpy>
		break;
    fbec:	e7e3      	b.n	fbb6 <scan_recv+0x4a>
		strcpy(type, "public-id");
    fbee:	492a      	ldr	r1, [pc, #168]	; (fc98 <scan_recv+0x12c>)
    fbf0:	a806      	add	r0, sp, #24
    fbf2:	f00b fac7 	bl	1b184 <strcpy>
		break;
    fbf6:	e7de      	b.n	fbb6 <scan_recv+0x4a>
		strcpy(type, "random-id");
    fbf8:	4928      	ldr	r1, [pc, #160]	; (fc9c <scan_recv+0x130>)
    fbfa:	a806      	add	r0, sp, #24
    fbfc:	f00b fac2 	bl	1b184 <strcpy>
		break;
    fc00:	e7d9      	b.n	fbb6 <scan_recv+0x4a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fc02:	4a27      	ldr	r2, [pc, #156]	; (fca0 <scan_recv+0x134>)
    fc04:	210a      	movs	r1, #10
    fc06:	a806      	add	r0, sp, #24
    fc08:	f00a fdd9 	bl	1a7be <snprintk>
		break;
    fc0c:	e7d3      	b.n	fbb6 <scan_recv+0x4a>
		if ((scan_data[0] == 0x02 && scan_data[1] == 0x01 && scan_data[2] == 0x04) || 
    fc0e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    fc12:	2b02      	cmp	r3, #2
    fc14:	d103      	bne.n	fc1e <scan_recv+0xb2>
    fc16:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    fc1a:	2b01      	cmp	r3, #1
    fc1c:	d028      	beq.n	fc70 <scan_recv+0x104>
				(strstr(name, sportident_dev_id0) != NULL || strstr(name, sportident_dev_id1) != NULL))
    fc1e:	4921      	ldr	r1, [pc, #132]	; (fca4 <scan_recv+0x138>)
    fc20:	a822      	add	r0, sp, #136	; 0x88
    fc22:	f00b fa8f 	bl	1b144 <strstr>
		if ((scan_data[0] == 0x02 && scan_data[1] == 0x01 && scan_data[2] == 0x04) || 
    fc26:	b340      	cbz	r0, fc7a <scan_recv+0x10e>
			if (scan_data[6] == 0xFF) {
    fc28:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    fc2c:	2bff      	cmp	r3, #255	; 0xff
    fc2e:	d1d7      	bne.n	fbe0 <scan_recv+0x74>
					scan_data[7], scan_data[8], scan_data[9], scan_data[10], 
    fc30:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
				char siac_data[] = {
    fc34:	f88d 3018 	strb.w	r3, [sp, #24]
					scan_data[7], scan_data[8], scan_data[9], scan_data[10], 
    fc38:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
				char siac_data[] = {
    fc3c:	f88d 3019 	strb.w	r3, [sp, #25]
					scan_data[7], scan_data[8], scan_data[9], scan_data[10], 
    fc40:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
				char siac_data[] = {
    fc44:	f88d 301a 	strb.w	r3, [sp, #26]
					scan_data[7], scan_data[8], scan_data[9], scan_data[10], 
    fc48:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
				char siac_data[] = {
    fc4c:	f88d 301b 	strb.w	r3, [sp, #27]
					scan_data[11], scan_data[12], scan_data[13]
    fc50:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
				char siac_data[] = {
    fc54:	f88d 301c 	strb.w	r3, [sp, #28]
					scan_data[11], scan_data[12], scan_data[13]
    fc58:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				char siac_data[] = {
    fc5c:	f88d 301d 	strb.w	r3, [sp, #29]
					scan_data[11], scan_data[12], scan_data[13]
    fc60:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
				char siac_data[] = {
    fc64:	f88d 301e 	strb.w	r3, [sp, #30]
				spi_write_test_msg(siac_data);
    fc68:	a806      	add	r0, sp, #24
    fc6a:	f00a fd0b 	bl	1a684 <spi_write_test_msg>
}
    fc6e:	e7b7      	b.n	fbe0 <scan_recv+0x74>
		if ((scan_data[0] == 0x02 && scan_data[1] == 0x01 && scan_data[2] == 0x04) || 
    fc70:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    fc74:	2b04      	cmp	r3, #4
    fc76:	d1d2      	bne.n	fc1e <scan_recv+0xb2>
    fc78:	e7d6      	b.n	fc28 <scan_recv+0xbc>
				(strstr(name, sportident_dev_id0) != NULL || strstr(name, sportident_dev_id1) != NULL))
    fc7a:	490b      	ldr	r1, [pc, #44]	; (fca8 <scan_recv+0x13c>)
    fc7c:	a822      	add	r0, sp, #136	; 0x88
    fc7e:	f00b fa61 	bl	1b144 <strstr>
    fc82:	2800      	cmp	r0, #0
    fc84:	d1d0      	bne.n	fc28 <scan_recv+0xbc>
    fc86:	e7ab      	b.n	fbe0 <scan_recv+0x74>
    fc88:	0001a697 	.word	0x0001a697
    fc8c:	0001e8bc 	.word	0x0001e8bc
    fc90:	0001e8ec 	.word	0x0001e8ec
    fc94:	0001e8c4 	.word	0x0001e8c4
    fc98:	0001e8cc 	.word	0x0001e8cc
    fc9c:	0001e8d8 	.word	0x0001e8d8
    fca0:	0001e8e4 	.word	0x0001e8e4
    fca4:	0001e910 	.word	0x0001e910
    fca8:	0001e91c 	.word	0x0001e91c

0000fcac <device_found>:
{
    fcac:	b570      	push	{r4, r5, r6, lr}
    fcae:	b092      	sub	sp, #72	; 0x48
    fcb0:	4604      	mov	r4, r0
	switch (addr->type) {
    fcb2:	7803      	ldrb	r3, [r0, #0]
    fcb4:	2b03      	cmp	r3, #3
    fcb6:	d82a      	bhi.n	fd0e <device_found+0x62>
    fcb8:	e8df f003 	tbb	[pc, r3]
    fcbc:	241f1a02 	.word	0x241f1a02
		strcpy(type, "public");
    fcc0:	4916      	ldr	r1, [pc, #88]	; (fd1c <device_found+0x70>)
    fcc2:	a807      	add	r0, sp, #28
    fcc4:	f00b fa5e 	bl	1b184 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fcc8:	7963      	ldrb	r3, [r4, #5]
    fcca:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fccc:	78e1      	ldrb	r1, [r4, #3]
    fcce:	78a0      	ldrb	r0, [r4, #2]
    fcd0:	7865      	ldrb	r5, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fcd2:	ae07      	add	r6, sp, #28
    fcd4:	9605      	str	r6, [sp, #20]
    fcd6:	9504      	str	r5, [sp, #16]
    fcd8:	9003      	str	r0, [sp, #12]
    fcda:	9102      	str	r1, [sp, #8]
    fcdc:	9201      	str	r2, [sp, #4]
    fcde:	9300      	str	r3, [sp, #0]
    fce0:	79a3      	ldrb	r3, [r4, #6]
    fce2:	4a0f      	ldr	r2, [pc, #60]	; (fd20 <device_found+0x74>)
    fce4:	211e      	movs	r1, #30
    fce6:	a80a      	add	r0, sp, #40	; 0x28
    fce8:	f00a fd69 	bl	1a7be <snprintk>
}
    fcec:	b012      	add	sp, #72	; 0x48
    fcee:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    fcf0:	490c      	ldr	r1, [pc, #48]	; (fd24 <device_found+0x78>)
    fcf2:	a807      	add	r0, sp, #28
    fcf4:	f00b fa46 	bl	1b184 <strcpy>
		break;
    fcf8:	e7e6      	b.n	fcc8 <device_found+0x1c>
		strcpy(type, "public-id");
    fcfa:	490b      	ldr	r1, [pc, #44]	; (fd28 <device_found+0x7c>)
    fcfc:	a807      	add	r0, sp, #28
    fcfe:	f00b fa41 	bl	1b184 <strcpy>
		break;
    fd02:	e7e1      	b.n	fcc8 <device_found+0x1c>
		strcpy(type, "random-id");
    fd04:	4909      	ldr	r1, [pc, #36]	; (fd2c <device_found+0x80>)
    fd06:	a807      	add	r0, sp, #28
    fd08:	f00b fa3c 	bl	1b184 <strcpy>
		break;
    fd0c:	e7dc      	b.n	fcc8 <device_found+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fd0e:	4a08      	ldr	r2, [pc, #32]	; (fd30 <device_found+0x84>)
    fd10:	210a      	movs	r1, #10
    fd12:	a807      	add	r0, sp, #28
    fd14:	f00a fd53 	bl	1a7be <snprintk>
		break;
    fd18:	e7d6      	b.n	fcc8 <device_found+0x1c>
    fd1a:	bf00      	nop
    fd1c:	0001e8bc 	.word	0x0001e8bc
    fd20:	0001e8ec 	.word	0x0001e8ec
    fd24:	0001e8c4 	.word	0x0001e8c4
    fd28:	0001e8cc 	.word	0x0001e8cc
    fd2c:	0001e8d8 	.word	0x0001e8d8
    fd30:	0001e8e4 	.word	0x0001e8e4

0000fd34 <observer_start>:
	.recv = scan_recv,
};
#endif /* CONFIG_BT_EXT_ADV */

int observer_start(void)
{
    fd34:	b500      	push	{lr}
    fd36:	b087      	sub	sp, #28
	struct bt_le_scan_param scan_param = {
    fd38:	2300      	movs	r3, #0
    fd3a:	9301      	str	r3, [sp, #4]
    fd3c:	9302      	str	r3, [sp, #8]
    fd3e:	9303      	str	r3, [sp, #12]
    fd40:	9304      	str	r3, [sp, #16]
    fd42:	9305      	str	r3, [sp, #20]
    fd44:	2301      	movs	r3, #1
    fd46:	9302      	str	r3, [sp, #8]
    fd48:	2360      	movs	r3, #96	; 0x60
    fd4a:	f8ad 300c 	strh.w	r3, [sp, #12]
    fd4e:	2330      	movs	r3, #48	; 0x30
    fd50:	f8ad 300e 	strh.w	r3, [sp, #14]
		.window     = BT_GAP_SCAN_FAST_WINDOW,
	};
	int err;

#if defined(CONFIG_BT_EXT_ADV)
	bt_le_scan_cb_register(&scan_callbacks);
    fd54:	4804      	ldr	r0, [pc, #16]	; (fd68 <observer_start+0x34>)
    fd56:	f002 fe59 	bl	12a0c <bt_le_scan_cb_register>
	if(DEBUG_ENABLE) printk("Registered scan callbacks\n");
#endif /* CONFIG_BT_EXT_ADV */

	err = bt_le_scan_start(&scan_param, device_found);
    fd5a:	4904      	ldr	r1, [pc, #16]	; (fd6c <observer_start+0x38>)
    fd5c:	a801      	add	r0, sp, #4
    fd5e:	f002 fda7 	bl	128b0 <bt_le_scan_start>
		return err;
	}
	if(DEBUG_ENABLE) printk("Started scanning...\n");

	return 0;
}
    fd62:	b007      	add	sp, #28
    fd64:	f85d fb04 	ldr.w	pc, [sp], #4
    fd68:	2000060c 	.word	0x2000060c
    fd6c:	0000fcad 	.word	0x0000fcad

0000fd70 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
    fd70:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
    fd72:	4b02      	ldr	r3, [pc, #8]	; (fd7c <char_out+0xc>)
    fd74:	681b      	ldr	r3, [r3, #0]
    fd76:	4798      	blx	r3
}
    fd78:	bd08      	pop	{r3, pc}
    fd7a:	bf00      	nop
    fd7c:	20000664 	.word	0x20000664

0000fd80 <__printk_hook_install>:
	_char_out = fn;
    fd80:	4b01      	ldr	r3, [pc, #4]	; (fd88 <__printk_hook_install+0x8>)
    fd82:	6018      	str	r0, [r3, #0]
}
    fd84:	4770      	bx	lr
    fd86:	bf00      	nop
    fd88:	20000664 	.word	0x20000664

0000fd8c <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
    fd8c:	b500      	push	{lr}
    fd8e:	b083      	sub	sp, #12
    fd90:	4602      	mov	r2, r0
    fd92:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    fd94:	2100      	movs	r1, #0
    fd96:	9100      	str	r1, [sp, #0]
    fd98:	4802      	ldr	r0, [pc, #8]	; (fda4 <vprintk+0x18>)
    fd9a:	f000 fa53 	bl	10244 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    fd9e:	b003      	add	sp, #12
    fda0:	f85d fb04 	ldr.w	pc, [sp], #4
    fda4:	0000fd71 	.word	0x0000fd71

0000fda8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fda8:	b510      	push	{r4, lr}
    fdaa:	b086      	sub	sp, #24
    fdac:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    fdae:	9003      	str	r0, [sp, #12]
    fdb0:	9104      	str	r1, [sp, #16]
    fdb2:	2100      	movs	r1, #0
    fdb4:	9105      	str	r1, [sp, #20]
    fdb6:	9100      	str	r1, [sp, #0]
    fdb8:	a903      	add	r1, sp, #12
    fdba:	4806      	ldr	r0, [pc, #24]	; (fdd4 <vsnprintk+0x2c>)
    fdbc:	f000 fa42 	bl	10244 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    fdc0:	9b05      	ldr	r3, [sp, #20]
    fdc2:	9a04      	ldr	r2, [sp, #16]
    fdc4:	4293      	cmp	r3, r2
    fdc6:	da01      	bge.n	fdcc <vsnprintk+0x24>
		str[ctx.count] = '\0';
    fdc8:	2200      	movs	r2, #0
    fdca:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    fdcc:	9805      	ldr	r0, [sp, #20]
    fdce:	b006      	add	sp, #24
    fdd0:	bd10      	pop	{r4, pc}
    fdd2:	bf00      	nop
    fdd4:	0001a773 	.word	0x0001a773

0000fdd8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    fdd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fddc:	b083      	sub	sp, #12
    fdde:	4604      	mov	r4, r0
    fde0:	4608      	mov	r0, r1
    fde2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fde4:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    fde6:	f013 0f08 	tst.w	r3, #8
    fdea:	d105      	bne.n	fdf8 <process_event+0x20>
    fdec:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    fdf0:	2300      	movs	r3, #0
    fdf2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    fdf4:	9301      	str	r3, [sp, #4]
}
    fdf6:	e069      	b.n	fecc <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    fdf8:	2901      	cmp	r1, #1
    fdfa:	d009      	beq.n	fe10 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    fdfc:	f043 0320 	orr.w	r3, r3, #32
    fe00:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fe02:	f385 8811 	msr	BASEPRI, r5
    fe06:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    fe0a:	b003      	add	sp, #12
    fe0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    fe10:	f043 0310 	orr.w	r3, r3, #16
    fe14:	8323      	strh	r3, [r4, #24]
    fe16:	e7f4      	b.n	fe02 <process_event+0x2a>
			evt = process_recheck(mgr);
    fe18:	4620      	mov	r0, r4
    fe1a:	f00a fd05 	bl	1a828 <process_recheck>
    fe1e:	e057      	b.n	fed0 <process_event+0xf8>
			res = mgr->last_res;
    fe20:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    fe24:	464a      	mov	r2, r9
    fe26:	4669      	mov	r1, sp
    fe28:	4620      	mov	r0, r4
    fe2a:	f00a fd16 	bl	1a85a <process_complete>
		onoff_transition_fn transit = NULL;
    fe2e:	2700      	movs	r7, #0
    fe30:	e05a      	b.n	fee8 <process_event+0x110>
			transit = mgr->transitions->start;
    fe32:	6923      	ldr	r3, [r4, #16]
    fe34:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    fe36:	2106      	movs	r1, #6
    fe38:	4620      	mov	r0, r4
    fe3a:	f00a fcce 	bl	1a7da <set_state>
		res = 0;
    fe3e:	f04f 0900 	mov.w	r9, #0
    fe42:	e051      	b.n	fee8 <process_event+0x110>
			transit = mgr->transitions->stop;
    fe44:	6923      	ldr	r3, [r4, #16]
    fe46:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    fe48:	2104      	movs	r1, #4
    fe4a:	4620      	mov	r0, r4
    fe4c:	f00a fcc5 	bl	1a7da <set_state>
		res = 0;
    fe50:	f04f 0900 	mov.w	r9, #0
    fe54:	e048      	b.n	fee8 <process_event+0x110>
			transit = mgr->transitions->reset;
    fe56:	6923      	ldr	r3, [r4, #16]
    fe58:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    fe5a:	2105      	movs	r1, #5
    fe5c:	4620      	mov	r0, r4
    fe5e:	f00a fcbc 	bl	1a7da <set_state>
		res = 0;
    fe62:	f04f 0900 	mov.w	r9, #0
    fe66:	e03f      	b.n	fee8 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    fe68:	2200      	movs	r2, #0
    fe6a:	e046      	b.n	fefa <process_event+0x122>
    fe6c:	2200      	movs	r2, #0
    fe6e:	e044      	b.n	fefa <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    fe70:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    fe74:	8323      	strh	r3, [r4, #24]
    fe76:	f385 8811 	msr	BASEPRI, r5
    fe7a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    fe7e:	2900      	cmp	r1, #0
    fe80:	d144      	bne.n	ff0c <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    fe82:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    fe84:	b12b      	cbz	r3, fe92 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    fe86:	464b      	mov	r3, r9
    fe88:	4642      	mov	r2, r8
    fe8a:	4669      	mov	r1, sp
    fe8c:	4620      	mov	r0, r4
    fe8e:	f00a fd5b 	bl	1a948 <notify_all>
			if (transit != NULL) {
    fe92:	b117      	cbz	r7, fe9a <process_event+0xc2>
				transit(mgr, transition_complete);
    fe94:	4925      	ldr	r1, [pc, #148]	; (ff2c <process_event+0x154>)
    fe96:	4620      	mov	r0, r4
    fe98:	47b8      	blx	r7
	__asm__ volatile(
    fe9a:	f04f 0340 	mov.w	r3, #64	; 0x40
    fe9e:	f3ef 8511 	mrs	r5, BASEPRI
    fea2:	f383 8812 	msr	BASEPRI_MAX, r3
    fea6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    feaa:	8b23      	ldrh	r3, [r4, #24]
    feac:	f023 0308 	bic.w	r3, r3, #8
    feb0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    feb2:	8b23      	ldrh	r3, [r4, #24]
    feb4:	f013 0f10 	tst.w	r3, #16
    feb8:	d02e      	beq.n	ff18 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    feba:	f023 0310 	bic.w	r3, r3, #16
    febe:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    fec0:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    fec2:	8b26      	ldrh	r6, [r4, #24]
    fec4:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    fec8:	2800      	cmp	r0, #0
    feca:	d09a      	beq.n	fe02 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    fecc:	2802      	cmp	r0, #2
    fece:	d0a3      	beq.n	fe18 <process_event+0x40>
		if (evt == EVT_NOP) {
    fed0:	2800      	cmp	r0, #0
    fed2:	d096      	beq.n	fe02 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    fed4:	2801      	cmp	r0, #1
    fed6:	d0a3      	beq.n	fe20 <process_event+0x48>
		} else if (evt == EVT_START) {
    fed8:	2803      	cmp	r0, #3
    feda:	d0aa      	beq.n	fe32 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    fedc:	2804      	cmp	r0, #4
    fede:	d0b1      	beq.n	fe44 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    fee0:	2805      	cmp	r0, #5
    fee2:	d0b8      	beq.n	fe56 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    fee4:	2700      	movs	r7, #0
		res = 0;
    fee6:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fee8:	8b23      	ldrh	r3, [r4, #24]
    feea:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    feee:	45b0      	cmp	r8, r6
    fef0:	d0ba      	beq.n	fe68 <process_event+0x90>
    fef2:	68a2      	ldr	r2, [r4, #8]
    fef4:	2a00      	cmp	r2, #0
    fef6:	d0b9      	beq.n	fe6c <process_event+0x94>
    fef8:	2201      	movs	r2, #1
		if (do_monitors
    fefa:	4611      	mov	r1, r2
    fefc:	2a00      	cmp	r2, #0
    fefe:	d1b7      	bne.n	fe70 <process_event+0x98>
    ff00:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    ff02:	2a00      	cmp	r2, #0
    ff04:	d1b4      	bne.n	fe70 <process_event+0x98>
		    || (transit != NULL)) {
    ff06:	2f00      	cmp	r7, #0
    ff08:	d1b2      	bne.n	fe70 <process_event+0x98>
    ff0a:	e7d2      	b.n	feb2 <process_event+0xda>
				notify_monitors(mgr, state, res);
    ff0c:	464a      	mov	r2, r9
    ff0e:	4641      	mov	r1, r8
    ff10:	4620      	mov	r0, r4
    ff12:	f00a fc6a 	bl	1a7ea <notify_monitors>
    ff16:	e7b4      	b.n	fe82 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ff18:	f013 0f20 	tst.w	r3, #32
    ff1c:	d004      	beq.n	ff28 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ff1e:	f023 0320 	bic.w	r3, r3, #32
    ff22:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    ff24:	2002      	movs	r0, #2
    ff26:	e7cc      	b.n	fec2 <process_event+0xea>
		evt = EVT_NOP;
    ff28:	2000      	movs	r0, #0
    ff2a:	e7ca      	b.n	fec2 <process_event+0xea>
    ff2c:	0001a977 	.word	0x0001a977

0000ff30 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    ff30:	b570      	push	{r4, r5, r6, lr}
    ff32:	b082      	sub	sp, #8
    ff34:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    ff36:	2300      	movs	r3, #0
    ff38:	6003      	str	r3, [r0, #0]
    ff3a:	6043      	str	r3, [r0, #4]
    ff3c:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    ff3e:	784b      	ldrb	r3, [r1, #1]
    ff40:	2b25      	cmp	r3, #37	; 0x25
    ff42:	d002      	beq.n	ff4a <extract_conversion+0x1a>
    ff44:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    ff46:	2501      	movs	r5, #1
    ff48:	e01f      	b.n	ff8a <extract_conversion+0x5a>
		conv->specifier = *sp++;
    ff4a:	1c88      	adds	r0, r1, #2
    ff4c:	70e3      	strb	r3, [r4, #3]
		return sp;
    ff4e:	e145      	b.n	101dc <extract_conversion+0x2ac>
			conv->flag_dash = true;
    ff50:	7823      	ldrb	r3, [r4, #0]
    ff52:	f043 0304 	orr.w	r3, r3, #4
    ff56:	7023      	strb	r3, [r4, #0]
		if (loop) {
    ff58:	b1b5      	cbz	r5, ff88 <extract_conversion+0x58>
			++sp;
    ff5a:	3601      	adds	r6, #1
    ff5c:	e014      	b.n	ff88 <extract_conversion+0x58>
			conv->flag_plus = true;
    ff5e:	7823      	ldrb	r3, [r4, #0]
    ff60:	f043 0308 	orr.w	r3, r3, #8
    ff64:	7023      	strb	r3, [r4, #0]
			break;
    ff66:	e7f7      	b.n	ff58 <extract_conversion+0x28>
			conv->flag_space = true;
    ff68:	7823      	ldrb	r3, [r4, #0]
    ff6a:	f043 0310 	orr.w	r3, r3, #16
    ff6e:	7023      	strb	r3, [r4, #0]
			break;
    ff70:	e7f2      	b.n	ff58 <extract_conversion+0x28>
			conv->flag_hash = true;
    ff72:	7823      	ldrb	r3, [r4, #0]
    ff74:	f043 0320 	orr.w	r3, r3, #32
    ff78:	7023      	strb	r3, [r4, #0]
			break;
    ff7a:	e7ed      	b.n	ff58 <extract_conversion+0x28>
			conv->flag_zero = true;
    ff7c:	7823      	ldrb	r3, [r4, #0]
    ff7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ff82:	7023      	strb	r3, [r4, #0]
			break;
    ff84:	e7e8      	b.n	ff58 <extract_conversion+0x28>
		switch (*sp) {
    ff86:	2500      	movs	r5, #0
	} while (loop);
    ff88:	b345      	cbz	r5, ffdc <extract_conversion+0xac>
		switch (*sp) {
    ff8a:	7833      	ldrb	r3, [r6, #0]
    ff8c:	3b20      	subs	r3, #32
    ff8e:	2b10      	cmp	r3, #16
    ff90:	d8f9      	bhi.n	ff86 <extract_conversion+0x56>
    ff92:	a201      	add	r2, pc, #4	; (adr r2, ff98 <extract_conversion+0x68>)
    ff94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ff98:	0000ff69 	.word	0x0000ff69
    ff9c:	0000ff87 	.word	0x0000ff87
    ffa0:	0000ff87 	.word	0x0000ff87
    ffa4:	0000ff73 	.word	0x0000ff73
    ffa8:	0000ff87 	.word	0x0000ff87
    ffac:	0000ff87 	.word	0x0000ff87
    ffb0:	0000ff87 	.word	0x0000ff87
    ffb4:	0000ff87 	.word	0x0000ff87
    ffb8:	0000ff87 	.word	0x0000ff87
    ffbc:	0000ff87 	.word	0x0000ff87
    ffc0:	0000ff87 	.word	0x0000ff87
    ffc4:	0000ff5f 	.word	0x0000ff5f
    ffc8:	0000ff87 	.word	0x0000ff87
    ffcc:	0000ff51 	.word	0x0000ff51
    ffd0:	0000ff87 	.word	0x0000ff87
    ffd4:	0000ff87 	.word	0x0000ff87
    ffd8:	0000ff7d 	.word	0x0000ff7d
	if (conv->flag_zero && conv->flag_dash) {
    ffdc:	7823      	ldrb	r3, [r4, #0]
    ffde:	f003 0344 	and.w	r3, r3, #68	; 0x44
    ffe2:	2b44      	cmp	r3, #68	; 0x44
    ffe4:	d05f      	beq.n	100a6 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    ffe6:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    ffe8:	7823      	ldrb	r3, [r4, #0]
    ffea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ffee:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    fff0:	7833      	ldrb	r3, [r6, #0]
    fff2:	2b2a      	cmp	r3, #42	; 0x2a
    fff4:	d05c      	beq.n	100b0 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    fff6:	a801      	add	r0, sp, #4
    fff8:	f00a ff50 	bl	1ae9c <extract_decimal>
	if (sp != wp) {
    fffc:	9b01      	ldr	r3, [sp, #4]
    fffe:	429e      	cmp	r6, r3
   10000:	d00f      	beq.n	10022 <extract_conversion+0xf2>
		conv->width_present = true;
   10002:	7823      	ldrb	r3, [r4, #0]
   10004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10008:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   1000a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   1000c:	b2db      	uxtb	r3, r3
   1000e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   10012:	2800      	cmp	r0, #0
   10014:	db54      	blt.n	100c0 <extract_conversion+0x190>
   10016:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   10018:	4313      	orrs	r3, r2
   1001a:	7822      	ldrb	r2, [r4, #0]
   1001c:	f363 0241 	bfi	r2, r3, #1, #1
   10020:	7022      	strb	r2, [r4, #0]
	return sp;
   10022:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
   10024:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
   10026:	781b      	ldrb	r3, [r3, #0]
   10028:	2b2e      	cmp	r3, #46	; 0x2e
   1002a:	bf14      	ite	ne
   1002c:	2300      	movne	r3, #0
   1002e:	2301      	moveq	r3, #1
   10030:	7862      	ldrb	r2, [r4, #1]
   10032:	f363 0241 	bfi	r2, r3, #1, #1
   10036:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
   10038:	2b00      	cmp	r3, #0
   1003a:	d043      	beq.n	100c4 <extract_conversion+0x194>
	++sp;
   1003c:	9b01      	ldr	r3, [sp, #4]
   1003e:	1c5a      	adds	r2, r3, #1
   10040:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   10042:	785b      	ldrb	r3, [r3, #1]
   10044:	2b2a      	cmp	r3, #42	; 0x2a
   10046:	d03f      	beq.n	100c8 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
   10048:	a801      	add	r0, sp, #4
   1004a:	f00a ff27 	bl	1ae9c <extract_decimal>
	conv->prec_value = prec;
   1004e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   10050:	7823      	ldrb	r3, [r4, #0]
   10052:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   10056:	2800      	cmp	r0, #0
   10058:	db3e      	blt.n	100d8 <extract_conversion+0x1a8>
   1005a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   1005c:	4313      	orrs	r3, r2
   1005e:	7822      	ldrb	r2, [r4, #0]
   10060:	f363 0241 	bfi	r2, r3, #1, #1
   10064:	7022      	strb	r2, [r4, #0]
	return sp;
   10066:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
   10068:	7803      	ldrb	r3, [r0, #0]
   1006a:	3b4c      	subs	r3, #76	; 0x4c
   1006c:	2b2e      	cmp	r3, #46	; 0x2e
   1006e:	f200 809d 	bhi.w	101ac <extract_conversion+0x27c>
   10072:	e8df f003 	tbb	[pc, r3]
   10076:	9b90      	.short	0x9b90
   10078:	9b9b9b9b 	.word	0x9b9b9b9b
   1007c:	9b9b9b9b 	.word	0x9b9b9b9b
   10080:	9b9b9b9b 	.word	0x9b9b9b9b
   10084:	9b9b9b9b 	.word	0x9b9b9b9b
   10088:	9b9b9b9b 	.word	0x9b9b9b9b
   1008c:	9b9b9b9b 	.word	0x9b9b9b9b
   10090:	9b339b9b 	.word	0x9b339b9b
   10094:	9b459b57 	.word	0x9b459b57
   10098:	9b9b9b9b 	.word	0x9b9b9b9b
   1009c:	9b899b9b 	.word	0x9b899b9b
   100a0:	9b9b9b9b 	.word	0x9b9b9b9b
   100a4:	82          	.byte	0x82
   100a5:	00          	.byte	0x00
		conv->flag_zero = false;
   100a6:	7823      	ldrb	r3, [r4, #0]
   100a8:	f36f 1386 	bfc	r3, #6, #1
   100ac:	7023      	strb	r3, [r4, #0]
   100ae:	e79a      	b.n	ffe6 <extract_conversion+0xb6>
		conv->width_star = true;
   100b0:	7863      	ldrb	r3, [r4, #1]
   100b2:	f043 0301 	orr.w	r3, r3, #1
   100b6:	7063      	strb	r3, [r4, #1]
		return ++sp;
   100b8:	4633      	mov	r3, r6
   100ba:	3301      	adds	r3, #1
   100bc:	9301      	str	r3, [sp, #4]
   100be:	e7b1      	b.n	10024 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
   100c0:	2201      	movs	r2, #1
   100c2:	e7a9      	b.n	10018 <extract_conversion+0xe8>
		return sp;
   100c4:	9801      	ldr	r0, [sp, #4]
   100c6:	e7cf      	b.n	10068 <extract_conversion+0x138>
		conv->prec_star = true;
   100c8:	7863      	ldrb	r3, [r4, #1]
   100ca:	f043 0304 	orr.w	r3, r3, #4
   100ce:	7063      	strb	r3, [r4, #1]
		return ++sp;
   100d0:	4610      	mov	r0, r2
   100d2:	3001      	adds	r0, #1
   100d4:	9001      	str	r0, [sp, #4]
   100d6:	e7c7      	b.n	10068 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
   100d8:	2201      	movs	r2, #1
   100da:	e7bf      	b.n	1005c <extract_conversion+0x12c>
		if (*++sp == 'h') {
   100dc:	1c42      	adds	r2, r0, #1
   100de:	7843      	ldrb	r3, [r0, #1]
   100e0:	2b68      	cmp	r3, #104	; 0x68
   100e2:	d006      	beq.n	100f2 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
   100e4:	7863      	ldrb	r3, [r4, #1]
   100e6:	2102      	movs	r1, #2
   100e8:	f361 03c6 	bfi	r3, r1, #3, #4
   100ec:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
   100ee:	4610      	mov	r0, r2
   100f0:	e01e      	b.n	10130 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
   100f2:	7863      	ldrb	r3, [r4, #1]
   100f4:	2201      	movs	r2, #1
   100f6:	f362 03c6 	bfi	r3, r2, #3, #4
   100fa:	7063      	strb	r3, [r4, #1]
			++sp;
   100fc:	3002      	adds	r0, #2
   100fe:	e017      	b.n	10130 <extract_conversion+0x200>
		if (*++sp == 'l') {
   10100:	1c42      	adds	r2, r0, #1
   10102:	7843      	ldrb	r3, [r0, #1]
   10104:	2b6c      	cmp	r3, #108	; 0x6c
   10106:	d006      	beq.n	10116 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
   10108:	7863      	ldrb	r3, [r4, #1]
   1010a:	2103      	movs	r1, #3
   1010c:	f361 03c6 	bfi	r3, r1, #3, #4
   10110:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
   10112:	4610      	mov	r0, r2
   10114:	e00c      	b.n	10130 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
   10116:	7863      	ldrb	r3, [r4, #1]
   10118:	2204      	movs	r2, #4
   1011a:	f362 03c6 	bfi	r3, r2, #3, #4
   1011e:	7063      	strb	r3, [r4, #1]
			++sp;
   10120:	3002      	adds	r0, #2
   10122:	e005      	b.n	10130 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
   10124:	7863      	ldrb	r3, [r4, #1]
   10126:	2205      	movs	r2, #5
   10128:	f362 03c6 	bfi	r3, r2, #3, #4
   1012c:	7063      	strb	r3, [r4, #1]
		++sp;
   1012e:	3001      	adds	r0, #1
	conv->specifier = *sp++;
   10130:	f810 3b01 	ldrb.w	r3, [r0], #1
   10134:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
   10136:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   1013a:	2a37      	cmp	r2, #55	; 0x37
   1013c:	d87d      	bhi.n	1023a <extract_conversion+0x30a>
   1013e:	e8df f002 	tbb	[pc, r2]
   10142:	7c5e      	.short	0x7c5e
   10144:	5e5e7c7c 	.word	0x5e5e7c7c
   10148:	7c7c7c5e 	.word	0x7c7c7c5e
   1014c:	7c7c7c7c 	.word	0x7c7c7c7c
   10150:	7c7c7c7c 	.word	0x7c7c7c7c
   10154:	7c7c7c7c 	.word	0x7c7c7c7c
   10158:	7c7c4f7c 	.word	0x7c7c4f7c
   1015c:	7c7c7c7c 	.word	0x7c7c7c7c
   10160:	7c5e7c7c 	.word	0x7c5e7c7c
   10164:	5e5e3a4f 	.word	0x5e5e3a4f
   10168:	7c3a7c5e 	.word	0x7c3a7c5e
   1016c:	657c7c7c 	.word	0x657c7c7c
   10170:	7c7c714f 	.word	0x7c7c714f
   10174:	7c4f7c71 	.word	0x7c4f7c71
   10178:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
   1017a:	7863      	ldrb	r3, [r4, #1]
   1017c:	2206      	movs	r2, #6
   1017e:	f362 03c6 	bfi	r3, r2, #3, #4
   10182:	7063      	strb	r3, [r4, #1]
		++sp;
   10184:	3001      	adds	r0, #1
		break;
   10186:	e7d3      	b.n	10130 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
   10188:	7863      	ldrb	r3, [r4, #1]
   1018a:	2207      	movs	r2, #7
   1018c:	f362 03c6 	bfi	r3, r2, #3, #4
   10190:	7063      	strb	r3, [r4, #1]
		++sp;
   10192:	3001      	adds	r0, #1
		break;
   10194:	e7cc      	b.n	10130 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
   10196:	7863      	ldrb	r3, [r4, #1]
   10198:	2208      	movs	r2, #8
   1019a:	f362 03c6 	bfi	r3, r2, #3, #4
   1019e:	7063      	strb	r3, [r4, #1]
		++sp;
   101a0:	3001      	adds	r0, #1
		conv->unsupported = true;
   101a2:	7823      	ldrb	r3, [r4, #0]
   101a4:	f043 0302 	orr.w	r3, r3, #2
   101a8:	7023      	strb	r3, [r4, #0]
		break;
   101aa:	e7c1      	b.n	10130 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
   101ac:	7863      	ldrb	r3, [r4, #1]
   101ae:	f36f 03c6 	bfc	r3, #3, #4
   101b2:	7063      	strb	r3, [r4, #1]
		break;
   101b4:	e7bc      	b.n	10130 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
   101b6:	78a2      	ldrb	r2, [r4, #2]
   101b8:	2101      	movs	r1, #1
   101ba:	f361 0202 	bfi	r2, r1, #0, #3
   101be:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   101c0:	7862      	ldrb	r2, [r4, #1]
   101c2:	f002 0278 	and.w	r2, r2, #120	; 0x78
   101c6:	2a40      	cmp	r2, #64	; 0x40
   101c8:	d010      	beq.n	101ec <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
   101ca:	2b63      	cmp	r3, #99	; 0x63
   101cc:	d013      	beq.n	101f6 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
   101ce:	7823      	ldrb	r3, [r4, #0]
   101d0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   101d4:	4315      	orrs	r5, r2
   101d6:	f365 0341 	bfi	r3, r5, #1, #1
   101da:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   101dc:	b002      	add	sp, #8
   101de:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
   101e0:	78a2      	ldrb	r2, [r4, #2]
   101e2:	2102      	movs	r1, #2
   101e4:	f361 0202 	bfi	r2, r1, #0, #3
   101e8:	70a2      	strb	r2, [r4, #2]
   101ea:	e7e9      	b.n	101c0 <extract_conversion+0x290>
			conv->invalid = true;
   101ec:	7821      	ldrb	r1, [r4, #0]
   101ee:	f041 0101 	orr.w	r1, r1, #1
   101f2:	7021      	strb	r1, [r4, #0]
   101f4:	e7e9      	b.n	101ca <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   101f6:	1e15      	subs	r5, r2, #0
   101f8:	bf18      	it	ne
   101fa:	2501      	movne	r5, #1
   101fc:	e7e7      	b.n	101ce <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
   101fe:	78a3      	ldrb	r3, [r4, #2]
   10200:	2204      	movs	r2, #4
   10202:	f362 0302 	bfi	r3, r2, #0, #3
   10206:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
   10208:	2501      	movs	r5, #1
			break;
   1020a:	e7e0      	b.n	101ce <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
   1020c:	78a3      	ldrb	r3, [r4, #2]
   1020e:	2203      	movs	r2, #3
   10210:	f362 0302 	bfi	r3, r2, #0, #3
   10214:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   10216:	7863      	ldrb	r3, [r4, #1]
   10218:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1021c:	2b40      	cmp	r3, #64	; 0x40
   1021e:	d1d6      	bne.n	101ce <extract_conversion+0x29e>
			unsupported = true;
   10220:	2501      	movs	r5, #1
   10222:	e7d4      	b.n	101ce <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
   10224:	78a3      	ldrb	r3, [r4, #2]
   10226:	2203      	movs	r2, #3
   10228:	f362 0302 	bfi	r3, r2, #0, #3
   1022c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
   1022e:	7863      	ldrb	r3, [r4, #1]
   10230:	f013 0f78 	tst.w	r3, #120	; 0x78
   10234:	d0cb      	beq.n	101ce <extract_conversion+0x29e>
			unsupported = true;
   10236:	2501      	movs	r5, #1
   10238:	e7c9      	b.n	101ce <extract_conversion+0x29e>
		conv->invalid = true;
   1023a:	7823      	ldrb	r3, [r4, #0]
   1023c:	f043 0301 	orr.w	r3, r3, #1
   10240:	7023      	strb	r3, [r4, #0]
		break;
   10242:	e7c4      	b.n	101ce <extract_conversion+0x29e>

00010244 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   10244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10248:	b091      	sub	sp, #68	; 0x44
   1024a:	4606      	mov	r6, r0
   1024c:	460d      	mov	r5, r1
   1024e:	4691      	mov	r9, r2
   10250:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10252:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10254:	f899 0000 	ldrb.w	r0, [r9]
   10258:	2800      	cmp	r0, #0
   1025a:	f000 82d5 	beq.w	10808 <z_cbvprintf_impl+0x5c4>
		if (*fp != '%') {
   1025e:	2825      	cmp	r0, #37	; 0x25
   10260:	d008      	beq.n	10274 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   10262:	f109 0901 	add.w	r9, r9, #1
   10266:	4629      	mov	r1, r5
   10268:	47b0      	blx	r6
   1026a:	2800      	cmp	r0, #0
   1026c:	f2c0 82cd 	blt.w	1080a <z_cbvprintf_impl+0x5c6>
   10270:	3401      	adds	r4, #1
			continue;
   10272:	e7ef      	b.n	10254 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   10274:	2300      	movs	r3, #0
   10276:	9304      	str	r3, [sp, #16]
   10278:	9305      	str	r3, [sp, #20]
   1027a:	9306      	str	r3, [sp, #24]
   1027c:	9307      	str	r3, [sp, #28]
   1027e:	9308      	str	r3, [sp, #32]
   10280:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   10282:	4649      	mov	r1, r9
   10284:	a806      	add	r0, sp, #24
   10286:	f7ff fe53 	bl	ff30 <extract_conversion>
   1028a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   1028c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   10290:	f013 0f01 	tst.w	r3, #1
   10294:	f000 8097 	beq.w	103c6 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   10298:	9b03      	ldr	r3, [sp, #12]
   1029a:	1d1a      	adds	r2, r3, #4
   1029c:	9203      	str	r2, [sp, #12]
   1029e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   102a0:	2f00      	cmp	r7, #0
   102a2:	f2c0 8088 	blt.w	103b6 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   102a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   102aa:	f013 0f04 	tst.w	r3, #4
   102ae:	f000 809c 	beq.w	103ea <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   102b2:	9b03      	ldr	r3, [sp, #12]
   102b4:	1d1a      	adds	r2, r3, #4
   102b6:	9203      	str	r2, [sp, #12]
   102b8:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   102bc:	f1ba 0f00 	cmp.w	sl, #0
   102c0:	f2c0 808a 	blt.w	103d8 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   102c4:	2300      	movs	r3, #0
   102c6:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   102c8:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   102ca:	f89d 301a 	ldrb.w	r3, [sp, #26]
   102ce:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   102d2:	f89d 1019 	ldrb.w	r1, [sp, #25]
   102d6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   102da:	2b01      	cmp	r3, #1
   102dc:	f000 808e 	beq.w	103fc <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   102e0:	2b02      	cmp	r3, #2
   102e2:	f000 80d3 	beq.w	1048c <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   102e6:	2b04      	cmp	r3, #4
   102e8:	f000 8124 	beq.w	10534 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   102ec:	2b03      	cmp	r3, #3
   102ee:	f000 813b 	beq.w	10568 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   102f2:	f89d 8018 	ldrb.w	r8, [sp, #24]
   102f6:	f018 0b03 	ands.w	fp, r8, #3
   102fa:	f040 813b 	bne.w	10574 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   102fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
   10302:	3b25      	subs	r3, #37	; 0x25
   10304:	2b53      	cmp	r3, #83	; 0x53
   10306:	f200 81e6 	bhi.w	106d6 <z_cbvprintf_impl+0x492>
   1030a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1030e:	0140      	.short	0x0140
   10310:	01e401e4 	.word	0x01e401e4
   10314:	01e401e4 	.word	0x01e401e4
   10318:	01e401e4 	.word	0x01e401e4
   1031c:	01e401e4 	.word	0x01e401e4
   10320:	01e401e4 	.word	0x01e401e4
   10324:	01e401e4 	.word	0x01e401e4
   10328:	01e401e4 	.word	0x01e401e4
   1032c:	01e401e4 	.word	0x01e401e4
   10330:	01e401e4 	.word	0x01e401e4
   10334:	01e401e4 	.word	0x01e401e4
   10338:	01e401e4 	.word	0x01e401e4
   1033c:	01e401e4 	.word	0x01e401e4
   10340:	01e401e4 	.word	0x01e401e4
   10344:	01e401e4 	.word	0x01e401e4
   10348:	01e401e4 	.word	0x01e401e4
   1034c:	01e401e4 	.word	0x01e401e4
   10350:	01e401e4 	.word	0x01e401e4
   10354:	01e401e4 	.word	0x01e401e4
   10358:	01e401e4 	.word	0x01e401e4
   1035c:	01e401e4 	.word	0x01e401e4
   10360:	01e401e4 	.word	0x01e401e4
   10364:	01e401e4 	.word	0x01e401e4
   10368:	01e401e4 	.word	0x01e401e4
   1036c:	01e401e4 	.word	0x01e401e4
   10370:	01e401e4 	.word	0x01e401e4
   10374:	01e40181 	.word	0x01e40181
   10378:	01e401e4 	.word	0x01e401e4
   1037c:	01e401e4 	.word	0x01e401e4
   10380:	01e401e4 	.word	0x01e401e4
   10384:	01e401e4 	.word	0x01e401e4
   10388:	015e01e4 	.word	0x015e01e4
   1038c:	01e40167 	.word	0x01e40167
   10390:	01e401e4 	.word	0x01e401e4
   10394:	016701e4 	.word	0x016701e4
   10398:	01e401e4 	.word	0x01e401e4
   1039c:	01e401e4 	.word	0x01e401e4
   103a0:	018101be 	.word	0x018101be
   103a4:	01e401a2 	.word	0x01e401a2
   103a8:	014d01e4 	.word	0x014d01e4
   103ac:	018101e4 	.word	0x018101e4
   103b0:	01e401e4 	.word	0x01e401e4
   103b4:	0181      	.short	0x0181
				conv->flag_dash = true;
   103b6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   103ba:	f043 0304 	orr.w	r3, r3, #4
   103be:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   103c2:	427f      	negs	r7, r7
   103c4:	e76f      	b.n	102a6 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   103c6:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   103ca:	2b00      	cmp	r3, #0
   103cc:	db02      	blt.n	103d4 <z_cbvprintf_impl+0x190>
		int width = -1;
   103ce:	f04f 37ff 	mov.w	r7, #4294967295
   103d2:	e768      	b.n	102a6 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   103d4:	9f07      	ldr	r7, [sp, #28]
   103d6:	e766      	b.n	102a6 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   103d8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   103dc:	f36f 0341 	bfc	r3, #1, #1
   103e0:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   103e4:	f04f 3aff 	mov.w	sl, #4294967295
   103e8:	e76c      	b.n	102c4 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   103ea:	f013 0f02 	tst.w	r3, #2
   103ee:	d002      	beq.n	103f6 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   103f0:	f8dd a020 	ldr.w	sl, [sp, #32]
   103f4:	e766      	b.n	102c4 <z_cbvprintf_impl+0x80>
		int precision = -1;
   103f6:	f04f 3aff 	mov.w	sl, #4294967295
   103fa:	e763      	b.n	102c4 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   103fc:	1ecb      	subs	r3, r1, #3
   103fe:	2b04      	cmp	r3, #4
   10400:	d804      	bhi.n	1040c <z_cbvprintf_impl+0x1c8>
   10402:	e8df f003 	tbb	[pc, r3]
   10406:	1d0b      	.short	0x1d0b
   10408:	3529      	.short	0x3529
   1040a:	35          	.byte	0x35
   1040b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1040c:	9b03      	ldr	r3, [sp, #12]
   1040e:	1d1a      	adds	r2, r3, #4
   10410:	9203      	str	r2, [sp, #12]
   10412:	681b      	ldr	r3, [r3, #0]
   10414:	17da      	asrs	r2, r3, #31
   10416:	9304      	str	r3, [sp, #16]
   10418:	9205      	str	r2, [sp, #20]
				break;
   1041a:	e006      	b.n	1042a <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   1041c:	9b03      	ldr	r3, [sp, #12]
   1041e:	1d1a      	adds	r2, r3, #4
   10420:	9203      	str	r2, [sp, #12]
   10422:	681b      	ldr	r3, [r3, #0]
   10424:	17da      	asrs	r2, r3, #31
   10426:	9304      	str	r3, [sp, #16]
   10428:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   1042a:	2901      	cmp	r1, #1
   1042c:	d028      	beq.n	10480 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   1042e:	2902      	cmp	r1, #2
   10430:	f47f af5f 	bne.w	102f2 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   10434:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   10438:	17da      	asrs	r2, r3, #31
   1043a:	9304      	str	r3, [sp, #16]
   1043c:	9205      	str	r2, [sp, #20]
   1043e:	e758      	b.n	102f2 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   10440:	9b03      	ldr	r3, [sp, #12]
   10442:	3307      	adds	r3, #7
   10444:	f023 0307 	bic.w	r3, r3, #7
   10448:	f103 0208 	add.w	r2, r3, #8
   1044c:	9203      	str	r2, [sp, #12]
   1044e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   10452:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   10456:	e7e8      	b.n	1042a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   10458:	9b03      	ldr	r3, [sp, #12]
   1045a:	3307      	adds	r3, #7
   1045c:	f023 0307 	bic.w	r3, r3, #7
   10460:	f103 0208 	add.w	r2, r3, #8
   10464:	9203      	str	r2, [sp, #12]
   10466:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1046a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1046e:	e7dc      	b.n	1042a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10470:	9b03      	ldr	r3, [sp, #12]
   10472:	1d1a      	adds	r2, r3, #4
   10474:	9203      	str	r2, [sp, #12]
   10476:	681b      	ldr	r3, [r3, #0]
   10478:	17da      	asrs	r2, r3, #31
				value->sint =
   1047a:	9304      	str	r3, [sp, #16]
   1047c:	9205      	str	r2, [sp, #20]
				break;
   1047e:	e7d4      	b.n	1042a <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   10480:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   10484:	17da      	asrs	r2, r3, #31
   10486:	9304      	str	r3, [sp, #16]
   10488:	9205      	str	r2, [sp, #20]
   1048a:	e732      	b.n	102f2 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   1048c:	1ecb      	subs	r3, r1, #3
   1048e:	2b04      	cmp	r3, #4
   10490:	d804      	bhi.n	1049c <z_cbvprintf_impl+0x258>
   10492:	e8df f003 	tbb	[pc, r3]
   10496:	1f0b      	.short	0x1f0b
   10498:	4135      	.short	0x4135
   1049a:	41          	.byte	0x41
   1049b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   1049c:	9b03      	ldr	r3, [sp, #12]
   1049e:	1d1a      	adds	r2, r3, #4
   104a0:	9203      	str	r2, [sp, #12]
   104a2:	681b      	ldr	r3, [r3, #0]
   104a4:	9304      	str	r3, [sp, #16]
   104a6:	2300      	movs	r3, #0
   104a8:	9305      	str	r3, [sp, #20]
				break;
   104aa:	e01e      	b.n	104ea <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   104ac:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   104b0:	2b63      	cmp	r3, #99	; 0x63
   104b2:	d007      	beq.n	104c4 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   104b4:	9b03      	ldr	r3, [sp, #12]
   104b6:	1d1a      	adds	r2, r3, #4
   104b8:	9203      	str	r2, [sp, #12]
   104ba:	681b      	ldr	r3, [r3, #0]
   104bc:	9304      	str	r3, [sp, #16]
   104be:	2300      	movs	r3, #0
   104c0:	9305      	str	r3, [sp, #20]
   104c2:	e012      	b.n	104ea <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   104c4:	9b03      	ldr	r3, [sp, #12]
   104c6:	1d1a      	adds	r2, r3, #4
   104c8:	9203      	str	r2, [sp, #12]
   104ca:	681b      	ldr	r3, [r3, #0]
   104cc:	9304      	str	r3, [sp, #16]
   104ce:	2300      	movs	r3, #0
   104d0:	9305      	str	r3, [sp, #20]
   104d2:	e00a      	b.n	104ea <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   104d4:	9b03      	ldr	r3, [sp, #12]
   104d6:	3307      	adds	r3, #7
   104d8:	f023 0307 	bic.w	r3, r3, #7
   104dc:	f103 0208 	add.w	r2, r3, #8
   104e0:	9203      	str	r2, [sp, #12]
   104e2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   104e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   104ea:	2901      	cmp	r1, #1
   104ec:	d01c      	beq.n	10528 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   104ee:	2902      	cmp	r1, #2
   104f0:	f47f aeff 	bne.w	102f2 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   104f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   104f8:	9304      	str	r3, [sp, #16]
   104fa:	2300      	movs	r3, #0
   104fc:	9305      	str	r3, [sp, #20]
   104fe:	e6f8      	b.n	102f2 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   10500:	9b03      	ldr	r3, [sp, #12]
   10502:	3307      	adds	r3, #7
   10504:	f023 0307 	bic.w	r3, r3, #7
   10508:	f103 0208 	add.w	r2, r3, #8
   1050c:	9203      	str	r2, [sp, #12]
   1050e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10512:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   10516:	e7e8      	b.n	104ea <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   10518:	9b03      	ldr	r3, [sp, #12]
   1051a:	1d1a      	adds	r2, r3, #4
   1051c:	9203      	str	r2, [sp, #12]
   1051e:	681b      	ldr	r3, [r3, #0]
				value->uint =
   10520:	9304      	str	r3, [sp, #16]
   10522:	2300      	movs	r3, #0
   10524:	9305      	str	r3, [sp, #20]
				break;
   10526:	e7e0      	b.n	104ea <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   10528:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1052c:	9304      	str	r3, [sp, #16]
   1052e:	2300      	movs	r3, #0
   10530:	9305      	str	r3, [sp, #20]
   10532:	e6de      	b.n	102f2 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   10534:	2908      	cmp	r1, #8
   10536:	d00b      	beq.n	10550 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   10538:	9b03      	ldr	r3, [sp, #12]
   1053a:	3307      	adds	r3, #7
   1053c:	f023 0307 	bic.w	r3, r3, #7
   10540:	f103 0208 	add.w	r2, r3, #8
   10544:	9203      	str	r2, [sp, #12]
   10546:	e9d3 2300 	ldrd	r2, r3, [r3]
   1054a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1054e:	e6d0      	b.n	102f2 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   10550:	9b03      	ldr	r3, [sp, #12]
   10552:	3307      	adds	r3, #7
   10554:	f023 0307 	bic.w	r3, r3, #7
   10558:	f103 0208 	add.w	r2, r3, #8
   1055c:	9203      	str	r2, [sp, #12]
   1055e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10562:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10566:	e6c4      	b.n	102f2 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   10568:	9b03      	ldr	r3, [sp, #12]
   1056a:	1d1a      	adds	r2, r3, #4
   1056c:	9203      	str	r2, [sp, #12]
   1056e:	681b      	ldr	r3, [r3, #0]
   10570:	9304      	str	r3, [sp, #16]
   10572:	e6be      	b.n	102f2 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   10574:	9f02      	ldr	r7, [sp, #8]
   10576:	463b      	mov	r3, r7
   10578:	464a      	mov	r2, r9
   1057a:	4629      	mov	r1, r5
   1057c:	4630      	mov	r0, r6
   1057e:	f00a fd09 	bl	1af94 <outs>
   10582:	2800      	cmp	r0, #0
   10584:	f2c0 8141 	blt.w	1080a <z_cbvprintf_impl+0x5c6>
   10588:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   1058a:	46b9      	mov	r9, r7
			continue;
   1058c:	e662      	b.n	10254 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   1058e:	4629      	mov	r1, r5
   10590:	2025      	movs	r0, #37	; 0x25
   10592:	47b0      	blx	r6
   10594:	2800      	cmp	r0, #0
   10596:	f2c0 8138 	blt.w	1080a <z_cbvprintf_impl+0x5c6>
   1059a:	3401      	adds	r4, #1
		char sign = 0;
   1059c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   1059e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   105a2:	f04f 0900 	mov.w	r9, #0
			break;
   105a6:	e09b      	b.n	106e0 <z_cbvprintf_impl+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
   105a8:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   105ac:	f1ba 0f00 	cmp.w	sl, #0
   105b0:	db07      	blt.n	105c2 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   105b2:	4651      	mov	r1, sl
   105b4:	4648      	mov	r0, r9
   105b6:	f00a fe12 	bl	1b1de <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   105ba:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   105be:	46d8      	mov	r8, fp
			precision = -1;

			break;
   105c0:	e08e      	b.n	106e0 <z_cbvprintf_impl+0x49c>
				len = strlen(bps);
   105c2:	4648      	mov	r0, r9
   105c4:	f00a fe02 	bl	1b1cc <strlen>
   105c8:	e7f7      	b.n	105ba <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   105ca:	9b04      	ldr	r3, [sp, #16]
   105cc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   105d0:	46d8      	mov	r8, fp
			bpe = buf + 1;
   105d2:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   105d6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   105da:	e081      	b.n	106e0 <z_cbvprintf_impl+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   105dc:	f018 0f08 	tst.w	r8, #8
   105e0:	d105      	bne.n	105ee <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   105e2:	f018 0810 	ands.w	r8, r8, #16
   105e6:	d004      	beq.n	105f2 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   105e8:	f04f 0820 	mov.w	r8, #32
   105ec:	e001      	b.n	105f2 <z_cbvprintf_impl+0x3ae>
				sign = '+';
   105ee:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   105f2:	9a04      	ldr	r2, [sp, #16]
   105f4:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   105f6:	2b00      	cmp	r3, #0
   105f8:	db02      	blt.n	10600 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   105fa:	9204      	str	r2, [sp, #16]
   105fc:	9305      	str	r3, [sp, #20]
   105fe:	e008      	b.n	10612 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   10600:	4252      	negs	r2, r2
   10602:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10606:	9204      	str	r2, [sp, #16]
   10608:	9305      	str	r3, [sp, #20]
				sign = '-';
   1060a:	f04f 082d 	mov.w	r8, #45	; 0x2d
   1060e:	e000      	b.n	10612 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   10610:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   10612:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   10616:	9300      	str	r3, [sp, #0]
   10618:	ab0a      	add	r3, sp, #40	; 0x28
   1061a:	aa06      	add	r2, sp, #24
   1061c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10620:	f00a fc4e 	bl	1aec0 <encode_uint>
   10624:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   10626:	f1ba 0f00 	cmp.w	sl, #0
   1062a:	f2c0 8088 	blt.w	1073e <z_cbvprintf_impl+0x4fa>
				size_t len = bpe - bps;
   1062e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   10632:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   10636:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1063a:	f36f 1286 	bfc	r2, #6, #1
   1063e:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   10642:	459a      	cmp	sl, r3
   10644:	d97e      	bls.n	10744 <z_cbvprintf_impl+0x500>
					conv->pad0_value = precision - (int)len;
   10646:	ebaa 0303 	sub.w	r3, sl, r3
   1064a:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   1064c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   10650:	e046      	b.n	106e0 <z_cbvprintf_impl+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   10652:	9804      	ldr	r0, [sp, #16]
   10654:	b928      	cbnz	r0, 10662 <z_cbvprintf_impl+0x41e>
		char sign = 0;
   10656:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   10658:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 10810 <z_cbvprintf_impl+0x5cc>
			bps = "(nil)";
   1065c:	f1aa 0905 	sub.w	r9, sl, #5
   10660:	e03e      	b.n	106e0 <z_cbvprintf_impl+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10662:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   10666:	9300      	str	r3, [sp, #0]
   10668:	ab0a      	add	r3, sp, #40	; 0x28
   1066a:	aa06      	add	r2, sp, #24
   1066c:	2100      	movs	r1, #0
   1066e:	f00a fc27 	bl	1aec0 <encode_uint>
   10672:	4681      	mov	r9, r0
				conv->altform_0c = true;
   10674:	f89d 301a 	ldrb.w	r3, [sp, #26]
   10678:	f043 0310 	orr.w	r3, r3, #16
   1067c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   10680:	2378      	movs	r3, #120	; 0x78
   10682:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   10686:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   10688:	e7cd      	b.n	10626 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1068a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
   1068c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   10690:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   10694:	2b07      	cmp	r3, #7
   10696:	d806      	bhi.n	106a6 <z_cbvprintf_impl+0x462>
   10698:	e8df f003 	tbb	[pc, r3]
   1069c:	0f0d0b04 	.word	0x0f0d0b04
   106a0:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
   106a4:	6014      	str	r4, [r2, #0]
		char sign = 0;
   106a6:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   106a8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   106ac:	f04f 0900 	mov.w	r9, #0
}
   106b0:	e016      	b.n	106e0 <z_cbvprintf_impl+0x49c>
		*(signed char *)dp = (signed char)count;
   106b2:	7014      	strb	r4, [r2, #0]
		break;
   106b4:	e7f7      	b.n	106a6 <z_cbvprintf_impl+0x462>
		*(short *)dp = (short)count;
   106b6:	8014      	strh	r4, [r2, #0]
		break;
   106b8:	e7f5      	b.n	106a6 <z_cbvprintf_impl+0x462>
		*(long *)dp = (long)count;
   106ba:	6014      	str	r4, [r2, #0]
		break;
   106bc:	e7f3      	b.n	106a6 <z_cbvprintf_impl+0x462>
		*(long long *)dp = (long long)count;
   106be:	17e3      	asrs	r3, r4, #31
   106c0:	6014      	str	r4, [r2, #0]
   106c2:	6053      	str	r3, [r2, #4]
		break;
   106c4:	e7ef      	b.n	106a6 <z_cbvprintf_impl+0x462>
		*(intmax_t *)dp = (intmax_t)count;
   106c6:	17e3      	asrs	r3, r4, #31
   106c8:	6014      	str	r4, [r2, #0]
   106ca:	6053      	str	r3, [r2, #4]
		break;
   106cc:	e7eb      	b.n	106a6 <z_cbvprintf_impl+0x462>
		*(size_t *)dp = (size_t)count;
   106ce:	6014      	str	r4, [r2, #0]
		break;
   106d0:	e7e9      	b.n	106a6 <z_cbvprintf_impl+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   106d2:	6014      	str	r4, [r2, #0]
		break;
   106d4:	e7e7      	b.n	106a6 <z_cbvprintf_impl+0x462>
		switch (conv->specifier) {
   106d6:	46d8      	mov	r8, fp
   106d8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   106dc:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   106e0:	f1b9 0f00 	cmp.w	r9, #0
   106e4:	f000 808d 	beq.w	10802 <z_cbvprintf_impl+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   106e8:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   106ec:	f1b8 0f00 	cmp.w	r8, #0
   106f0:	d000      	beq.n	106f4 <z_cbvprintf_impl+0x4b0>
			nj_len += 1U;
   106f2:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   106f4:	f89d 201a 	ldrb.w	r2, [sp, #26]
   106f8:	f012 0f10 	tst.w	r2, #16
   106fc:	d025      	beq.n	1074a <z_cbvprintf_impl+0x506>
			nj_len += 2U;
   106fe:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   10700:	9907      	ldr	r1, [sp, #28]
   10702:	440b      	add	r3, r1
		if (conv->pad_fp) {
   10704:	f012 0f40 	tst.w	r2, #64	; 0x40
   10708:	d001      	beq.n	1070e <z_cbvprintf_impl+0x4ca>
			nj_len += conv->pad0_pre_exp;
   1070a:	9a08      	ldr	r2, [sp, #32]
   1070c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1070e:	2f00      	cmp	r7, #0
   10710:	dd31      	ble.n	10776 <z_cbvprintf_impl+0x532>
			width -= (int)nj_len;
   10712:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   10714:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10718:	f013 0f04 	tst.w	r3, #4
   1071c:	d12b      	bne.n	10776 <z_cbvprintf_impl+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1071e:	f013 0f40 	tst.w	r3, #64	; 0x40
   10722:	d017      	beq.n	10754 <z_cbvprintf_impl+0x510>
					if (sign != 0) {
   10724:	f1b8 0f00 	cmp.w	r8, #0
   10728:	d017      	beq.n	1075a <z_cbvprintf_impl+0x516>
						OUTC(sign);
   1072a:	4629      	mov	r1, r5
   1072c:	4640      	mov	r0, r8
   1072e:	47b0      	blx	r6
   10730:	2800      	cmp	r0, #0
   10732:	db6a      	blt.n	1080a <z_cbvprintf_impl+0x5c6>
   10734:	3401      	adds	r4, #1
						sign = 0;
   10736:	46d8      	mov	r8, fp
					}
					pad = '0';
   10738:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1073c:	e00f      	b.n	1075e <z_cbvprintf_impl+0x51a>
		const char *bpe = buf + sizeof(buf);
   1073e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   10742:	e7cd      	b.n	106e0 <z_cbvprintf_impl+0x49c>
   10744:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   10748:	e7ca      	b.n	106e0 <z_cbvprintf_impl+0x49c>
		} else if (conv->altform_0) {
   1074a:	f012 0f08 	tst.w	r2, #8
   1074e:	d0d7      	beq.n	10700 <z_cbvprintf_impl+0x4bc>
			nj_len += 1U;
   10750:	3301      	adds	r3, #1
   10752:	e7d5      	b.n	10700 <z_cbvprintf_impl+0x4bc>
				char pad = ' ';
   10754:	f04f 0b20 	mov.w	fp, #32
   10758:	e001      	b.n	1075e <z_cbvprintf_impl+0x51a>
					pad = '0';
   1075a:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1075e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   10760:	1e5f      	subs	r7, r3, #1
   10762:	2b00      	cmp	r3, #0
   10764:	dd07      	ble.n	10776 <z_cbvprintf_impl+0x532>
					OUTC(pad);
   10766:	4629      	mov	r1, r5
   10768:	4658      	mov	r0, fp
   1076a:	47b0      	blx	r6
   1076c:	2800      	cmp	r0, #0
   1076e:	db4c      	blt.n	1080a <z_cbvprintf_impl+0x5c6>
   10770:	3401      	adds	r4, #1
				while (width-- > 0) {
   10772:	463b      	mov	r3, r7
   10774:	e7f4      	b.n	10760 <z_cbvprintf_impl+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   10776:	f1b8 0f00 	cmp.w	r8, #0
   1077a:	d005      	beq.n	10788 <z_cbvprintf_impl+0x544>
			OUTC(sign);
   1077c:	4629      	mov	r1, r5
   1077e:	4640      	mov	r0, r8
   10780:	47b0      	blx	r6
   10782:	2800      	cmp	r0, #0
   10784:	db41      	blt.n	1080a <z_cbvprintf_impl+0x5c6>
   10786:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   10788:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1078c:	f3c3 1200 	ubfx	r2, r3, #4, #1
   10790:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10794:	4313      	orrs	r3, r2
   10796:	d005      	beq.n	107a4 <z_cbvprintf_impl+0x560>
				OUTC('0');
   10798:	4629      	mov	r1, r5
   1079a:	2030      	movs	r0, #48	; 0x30
   1079c:	47b0      	blx	r6
   1079e:	2800      	cmp	r0, #0
   107a0:	db33      	blt.n	1080a <z_cbvprintf_impl+0x5c6>
   107a2:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   107a4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   107a8:	f013 0f10 	tst.w	r3, #16
   107ac:	d006      	beq.n	107bc <z_cbvprintf_impl+0x578>
				OUTC(conv->specifier);
   107ae:	4629      	mov	r1, r5
   107b0:	f89d 001b 	ldrb.w	r0, [sp, #27]
   107b4:	47b0      	blx	r6
   107b6:	2800      	cmp	r0, #0
   107b8:	db27      	blt.n	1080a <z_cbvprintf_impl+0x5c6>
   107ba:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   107bc:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   107be:	f103 38ff 	add.w	r8, r3, #4294967295
   107c2:	2b00      	cmp	r3, #0
   107c4:	dd07      	ble.n	107d6 <z_cbvprintf_impl+0x592>
				OUTC('0');
   107c6:	4629      	mov	r1, r5
   107c8:	2030      	movs	r0, #48	; 0x30
   107ca:	47b0      	blx	r6
   107cc:	2800      	cmp	r0, #0
   107ce:	db1c      	blt.n	1080a <z_cbvprintf_impl+0x5c6>
   107d0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   107d2:	4643      	mov	r3, r8
   107d4:	e7f3      	b.n	107be <z_cbvprintf_impl+0x57a>
			}

			OUTS(bps, bpe);
   107d6:	4653      	mov	r3, sl
   107d8:	464a      	mov	r2, r9
   107da:	4629      	mov	r1, r5
   107dc:	4630      	mov	r0, r6
   107de:	f00a fbd9 	bl	1af94 <outs>
   107e2:	2800      	cmp	r0, #0
   107e4:	db11      	blt.n	1080a <z_cbvprintf_impl+0x5c6>
   107e6:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   107e8:	2f00      	cmp	r7, #0
   107ea:	dd07      	ble.n	107fc <z_cbvprintf_impl+0x5b8>
			OUTC(' ');
   107ec:	4629      	mov	r1, r5
   107ee:	2020      	movs	r0, #32
   107f0:	47b0      	blx	r6
   107f2:	2800      	cmp	r0, #0
   107f4:	db09      	blt.n	1080a <z_cbvprintf_impl+0x5c6>
   107f6:	3401      	adds	r4, #1
			--width;
   107f8:	3f01      	subs	r7, #1
   107fa:	e7f5      	b.n	107e8 <z_cbvprintf_impl+0x5a4>
		fp = extract_conversion(conv, sp);
   107fc:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10800:	e528      	b.n	10254 <z_cbvprintf_impl+0x10>
   10802:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10806:	e525      	b.n	10254 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   10808:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   1080a:	b011      	add	sp, #68	; 0x44
   1080c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10810:	0001e925 	.word	0x0001e925

00010814 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   10814:	b508      	push	{r3, lr}
   10816:	f04f 0240 	mov.w	r2, #64	; 0x40
   1081a:	f3ef 8311 	mrs	r3, BASEPRI
   1081e:	f382 8812 	msr	BASEPRI_MAX, r2
   10822:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   10826:	f000 fe45 	bl	114b4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1082a:	4803      	ldr	r0, [pc, #12]	; (10838 <sys_reboot+0x24>)
   1082c:	f009 ffb9 	bl	1a7a2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10830:	f000 fa40 	bl	10cb4 <arch_cpu_idle>
   10834:	e7fc      	b.n	10830 <sys_reboot+0x1c>
   10836:	bf00      	nop
   10838:	0001e928 	.word	0x0001e928

0001083c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1083c:	f003 bfc6 	b.w	147cc <SystemInit>

00010840 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   10840:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10842:	4b2a      	ldr	r3, [pc, #168]	; (108ec <pm_system_resume+0xac>)
   10844:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10846:	f005 031f 	and.w	r3, r5, #31
   1084a:	2201      	movs	r2, #1
   1084c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1084e:	0969      	lsrs	r1, r5, #5
   10850:	4b27      	ldr	r3, [pc, #156]	; (108f0 <pm_system_resume+0xb0>)
   10852:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10856:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10858:	f3bf 8f5b 	dmb	ish
   1085c:	e853 1f00 	ldrex	r1, [r3]
   10860:	ea01 0400 	and.w	r4, r1, r0
   10864:	e843 4600 	strex	r6, r4, [r3]
   10868:	2e00      	cmp	r6, #0
   1086a:	d1f7      	bne.n	1085c <pm_system_resume+0x1c>
   1086c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10870:	420a      	tst	r2, r1
   10872:	d100      	bne.n	10876 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   10874:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   10876:	481f      	ldr	r0, [pc, #124]	; (108f4 <pm_system_resume+0xb4>)
   10878:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1087c:	0093      	lsls	r3, r2, #2
   1087e:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
   10880:	4a1d      	ldr	r2, [pc, #116]	; (108f8 <pm_system_resume+0xb8>)
   10882:	b172      	cbz	r2, 108a2 <pm_system_resume+0x62>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10884:	7849      	ldrb	r1, [r1, #1]
   10886:	5cc0      	ldrb	r0, [r0, r3]
   10888:	f00a fd57 	bl	1b33a <pm_state_exit_post_ops>
   1088c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10890:	f3ef 8611 	mrs	r6, BASEPRI
   10894:	f383 8812 	msr	BASEPRI_MAX, r3
   10898:	f3bf 8f6f 	isb	sy
   1089c:	4b17      	ldr	r3, [pc, #92]	; (108fc <pm_system_resume+0xbc>)
   1089e:	681c      	ldr	r4, [r3, #0]
   108a0:	e010      	b.n	108c4 <pm_system_resume+0x84>
	__asm__ volatile(
   108a2:	2300      	movs	r3, #0
   108a4:	f383 8811 	msr	BASEPRI, r3
   108a8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   108ac:	e7ee      	b.n	1088c <pm_system_resume+0x4c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   108ae:	4b0f      	ldr	r3, [pc, #60]	; (108ec <pm_system_resume+0xac>)
   108b0:	7d1b      	ldrb	r3, [r3, #20]
   108b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   108b6:	0099      	lsls	r1, r3, #2
   108b8:	4b0e      	ldr	r3, [pc, #56]	; (108f4 <pm_system_resume+0xb4>)
   108ba:	5c58      	ldrb	r0, [r3, r1]
   108bc:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   108be:	b10c      	cbz	r4, 108c4 <pm_system_resume+0x84>
	return node->next;
   108c0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   108c2:	b124      	cbz	r4, 108ce <pm_system_resume+0x8e>
   108c4:	b11c      	cbz	r4, 108ce <pm_system_resume+0x8e>
			callback = notifier->state_exit;
   108c6:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
   108c8:	2a00      	cmp	r2, #0
   108ca:	d1f0      	bne.n	108ae <pm_system_resume+0x6e>
   108cc:	e7f7      	b.n	108be <pm_system_resume+0x7e>
	__asm__ volatile(
   108ce:	f386 8811 	msr	BASEPRI, r6
   108d2:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   108d6:	4807      	ldr	r0, [pc, #28]	; (108f4 <pm_system_resume+0xb4>)
   108d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   108dc:	00aa      	lsls	r2, r5, #2
   108de:	1881      	adds	r1, r0, r2
   108e0:	2300      	movs	r3, #0
   108e2:	5083      	str	r3, [r0, r2]
   108e4:	604b      	str	r3, [r1, #4]
   108e6:	608b      	str	r3, [r1, #8]
}
   108e8:	e7c4      	b.n	10874 <pm_system_resume+0x34>
   108ea:	bf00      	nop
   108ec:	200030b4 	.word	0x200030b4
   108f0:	20001e6c 	.word	0x20001e6c
   108f4:	20001e60 	.word	0x20001e60
   108f8:	0001b33b 	.word	0x0001b33b
   108fc:	20001e4c 	.word	0x20001e4c

00010900 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10902:	4604      	mov	r4, r0
	uint8_t id = CURRENT_CPU;
   10904:	4b4d      	ldr	r3, [pc, #308]	; (10a3c <pm_system_suspend+0x13c>)
   10906:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   10908:	f04f 0340 	mov.w	r3, #64	; 0x40
   1090c:	f3ef 8611 	mrs	r6, BASEPRI
   10910:	f383 8812 	msr	BASEPRI_MAX, r3
   10914:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10918:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1091c:	4b48      	ldr	r3, [pc, #288]	; (10a40 <pm_system_suspend+0x140>)
   1091e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   10922:	b34b      	cbz	r3, 10978 <pm_system_suspend+0x78>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10924:	4b47      	ldr	r3, [pc, #284]	; (10a44 <pm_system_suspend+0x144>)
   10926:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   1092a:	4f45      	ldr	r7, [pc, #276]	; (10a40 <pm_system_suspend+0x140>)
   1092c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   10930:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   10934:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10938:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1093c:	2300      	movs	r3, #0
   1093e:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   10942:	f386 8811 	msr	BASEPRI, r6
   10946:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1094a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1094e:	4a3d      	ldr	r2, [pc, #244]	; (10a44 <pm_system_suspend+0x144>)
   10950:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   10954:	2b00      	cmp	r3, #0
   10956:	d06e      	beq.n	10a36 <pm_system_suspend+0x136>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10958:	f1b4 3fff 	cmp.w	r4, #4294967295
   1095c:	d11b      	bne.n	10996 <pm_system_suspend+0x96>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1095e:	f006 f967 	bl	16c30 <k_sched_lock>
	__asm__ volatile(
   10962:	f04f 0340 	mov.w	r3, #64	; 0x40
   10966:	f3ef 8611 	mrs	r6, BASEPRI
   1096a:	f383 8812 	msr	BASEPRI_MAX, r3
   1096e:	f3bf 8f6f 	isb	sy
	return list->head;
   10972:	4b35      	ldr	r3, [pc, #212]	; (10a48 <pm_system_suspend+0x148>)
   10974:	681c      	ldr	r4, [r3, #0]
   10976:	e02e      	b.n	109d6 <pm_system_suspend+0xd6>
		info = pm_policy_next_state(id, ticks);
   10978:	4601      	mov	r1, r0
   1097a:	4628      	mov	r0, r5
   1097c:	f000 f86e 	bl	10a5c <pm_policy_next_state>
		if (info != NULL) {
   10980:	2800      	cmp	r0, #0
   10982:	d0de      	beq.n	10942 <pm_system_suspend+0x42>
			z_cpus_pm_state[id] = *info;
   10984:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   10988:	4a2e      	ldr	r2, [pc, #184]	; (10a44 <pm_system_suspend+0x144>)
   1098a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1098e:	c807      	ldmia	r0, {r0, r1, r2}
   10990:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   10994:	e7d5      	b.n	10942 <pm_system_suspend+0x42>
		     k_us_to_ticks_ceil32(
   10996:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1099a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1099e:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   109a0:	0c41      	lsrs	r1, r0, #17
   109a2:	03c0      	lsls	r0, r0, #15
   109a4:	4b29      	ldr	r3, [pc, #164]	; (10a4c <pm_system_suspend+0x14c>)
   109a6:	18c0      	adds	r0, r0, r3
   109a8:	4a29      	ldr	r2, [pc, #164]	; (10a50 <pm_system_suspend+0x150>)
   109aa:	f04f 0300 	mov.w	r3, #0
   109ae:	f141 0100 	adc.w	r1, r1, #0
   109b2:	f7ef fba5 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   109b6:	2101      	movs	r1, #1
   109b8:	1a20      	subs	r0, r4, r0
   109ba:	f00d fc51 	bl	1e260 <z_set_timeout_expiry>
   109be:	e7ce      	b.n	1095e <pm_system_suspend+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   109c0:	4b1e      	ldr	r3, [pc, #120]	; (10a3c <pm_system_suspend+0x13c>)
   109c2:	7d1b      	ldrb	r3, [r3, #20]
   109c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   109c8:	491e      	ldr	r1, [pc, #120]	; (10a44 <pm_system_suspend+0x144>)
   109ca:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   109ce:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   109d0:	b10c      	cbz	r4, 109d6 <pm_system_suspend+0xd6>
	return node->next;
   109d2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   109d4:	b124      	cbz	r4, 109e0 <pm_system_suspend+0xe0>
   109d6:	b11c      	cbz	r4, 109e0 <pm_system_suspend+0xe0>
			callback = notifier->state_entry;
   109d8:	6862      	ldr	r2, [r4, #4]
		if (callback) {
   109da:	2a00      	cmp	r2, #0
   109dc:	d1f0      	bne.n	109c0 <pm_system_suspend+0xc0>
   109de:	e7f7      	b.n	109d0 <pm_system_suspend+0xd0>
	__asm__ volatile(
   109e0:	f386 8811 	msr	BASEPRI, r6
   109e4:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   109e8:	f005 031f 	and.w	r3, r5, #31
   109ec:	2101      	movs	r1, #1
   109ee:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   109f0:	096b      	lsrs	r3, r5, #5
   109f2:	4a18      	ldr	r2, [pc, #96]	; (10a54 <pm_system_suspend+0x154>)
   109f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   109f8:	f3bf 8f5b 	dmb	ish
   109fc:	e853 2f00 	ldrex	r2, [r3]
   10a00:	430a      	orrs	r2, r1
   10a02:	e843 2000 	strex	r0, r2, [r3]
   10a06:	2800      	cmp	r0, #0
   10a08:	d1f8      	bne.n	109fc <pm_system_suspend+0xfc>
   10a0a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   10a0e:	4b12      	ldr	r3, [pc, #72]	; (10a58 <pm_system_suspend+0x158>)
   10a10:	b15b      	cbz	r3, 10a2a <pm_system_suspend+0x12a>
		pm_state_set(info->state, info->substate_id);
   10a12:	4a0c      	ldr	r2, [pc, #48]	; (10a44 <pm_system_suspend+0x144>)
   10a14:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   10a18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   10a20:	7859      	ldrb	r1, [r3, #1]
   10a22:	f812 0025 	ldrb.w	r0, [r2, r5, lsl #2]
   10a26:	f00a fc7c 	bl	1b322 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10a2a:	f7ff ff09 	bl	10840 <pm_system_resume>
	k_sched_unlock();
   10a2e:	f006 fb21 	bl	17074 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   10a32:	2001      	movs	r0, #1
}
   10a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   10a36:	2000      	movs	r0, #0
   10a38:	e7fc      	b.n	10a34 <pm_system_suspend+0x134>
   10a3a:	bf00      	nop
   10a3c:	200030b4 	.word	0x200030b4
   10a40:	20001e54 	.word	0x20001e54
   10a44:	20001e60 	.word	0x20001e60
   10a48:	20001e4c 	.word	0x20001e4c
   10a4c:	000f423f 	.word	0x000f423f
   10a50:	000f4240 	.word	0x000f4240
   10a54:	20001e6c 	.word	0x20001e6c
   10a58:	0001b323 	.word	0x0001b323

00010a5c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a60:	b082      	sub	sp, #8
   10a62:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10a64:	a901      	add	r1, sp, #4
   10a66:	f000 f845 	bl	10af4 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10a6a:	1e44      	subs	r4, r0, #1
   10a6c:	b224      	sxth	r4, r4
   10a6e:	e007      	b.n	10a80 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   10a70:	f1b6 3fff 	cmp.w	r6, #4294967295
   10a74:	d033      	beq.n	10ade <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   10a76:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
   10a78:	42b0      	cmp	r0, r6
   10a7a:	d930      	bls.n	10ade <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10a7c:	3c01      	subs	r4, #1
   10a7e:	b224      	sxth	r4, r4
   10a80:	2c00      	cmp	r4, #0
   10a82:	db2b      	blt.n	10adc <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   10a84:	9b01      	ldr	r3, [sp, #4]
   10a86:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   10a8a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   10a8e:	7869      	ldrb	r1, [r5, #1]
   10a90:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   10a94:	f00a faa7 	bl	1afe6 <pm_policy_state_lock_is_active>
   10a98:	2800      	cmp	r0, #0
   10a9a:	d1ef      	bne.n	10a7c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   10a9c:	6868      	ldr	r0, [r5, #4]
   10a9e:	0c41      	lsrs	r1, r0, #17
   10aa0:	03c0      	lsls	r0, r0, #15
   10aa2:	4f11      	ldr	r7, [pc, #68]	; (10ae8 <pm_policy_next_state+0x8c>)
   10aa4:	19c0      	adds	r0, r0, r7
   10aa6:	4a11      	ldr	r2, [pc, #68]	; (10aec <pm_policy_next_state+0x90>)
   10aa8:	f04f 0300 	mov.w	r3, #0
   10aac:	f141 0100 	adc.w	r1, r1, #0
   10ab0:	f7ef fb26 	bl	100 <__aeabi_uldivmod>
   10ab4:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   10ab6:	68ab      	ldr	r3, [r5, #8]
   10ab8:	0c59      	lsrs	r1, r3, #17
   10aba:	03db      	lsls	r3, r3, #15
   10abc:	19d8      	adds	r0, r3, r7
   10abe:	4a0b      	ldr	r2, [pc, #44]	; (10aec <pm_policy_next_state+0x90>)
   10ac0:	f04f 0300 	mov.w	r3, #0
   10ac4:	f141 0100 	adc.w	r1, r1, #0
   10ac8:	f7ef fb1a 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10acc:	4b08      	ldr	r3, [pc, #32]	; (10af0 <pm_policy_next_state+0x94>)
   10ace:	681b      	ldr	r3, [r3, #0]
   10ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
   10ad4:	d0cc      	beq.n	10a70 <pm_policy_next_state+0x14>
   10ad6:	4283      	cmp	r3, r0
   10ad8:	d8ca      	bhi.n	10a70 <pm_policy_next_state+0x14>
   10ada:	e7cf      	b.n	10a7c <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   10adc:	2500      	movs	r5, #0
}
   10ade:	4628      	mov	r0, r5
   10ae0:	b002      	add	sp, #8
   10ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ae6:	bf00      	nop
   10ae8:	000f423f 	.word	0x000f423f
   10aec:	000f4240 	.word	0x000f4240
   10af0:	20000668 	.word	0x20000668

00010af4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10af4:	b908      	cbnz	r0, 10afa <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10af6:	4b02      	ldr	r3, [pc, #8]	; (10b00 <pm_state_cpu_get_all+0xc>)
   10af8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10afa:	2000      	movs	r0, #0
   10afc:	4770      	bx	lr
   10afe:	bf00      	nop
   10b00:	0001e954 	.word	0x0001e954

00010b04 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   10b04:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   10b06:	4802      	ldr	r0, [pc, #8]	; (10b10 <nrf_cc3xx_platform_abort_init+0xc>)
   10b08:	f007 f90e 	bl	17d28 <nrf_cc3xx_platform_set_abort>
}
   10b0c:	bd08      	pop	{r3, pc}
   10b0e:	bf00      	nop
   10b10:	0001e954 	.word	0x0001e954

00010b14 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   10b14:	b1d0      	cbz	r0, 10b4c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   10b16:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   10b18:	6842      	ldr	r2, [r0, #4]
   10b1a:	2a04      	cmp	r2, #4
   10b1c:	d005      	beq.n	10b2a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   10b1e:	b1d2      	cbz	r2, 10b56 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   10b20:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   10b22:	f005 fddb 	bl	166dc <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   10b26:	2000      	movs	r0, #0
    }
}
   10b28:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   10b2a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10b2c:	2200      	movs	r2, #0
   10b2e:	f3bf 8f5b 	dmb	ish
   10b32:	e853 1f00 	ldrex	r1, [r3]
   10b36:	2901      	cmp	r1, #1
   10b38:	d103      	bne.n	10b42 <mutex_unlock_platform+0x2e>
   10b3a:	e843 2000 	strex	r0, r2, [r3]
   10b3e:	2800      	cmp	r0, #0
   10b40:	d1f7      	bne.n	10b32 <mutex_unlock_platform+0x1e>
   10b42:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   10b46:	d104      	bne.n	10b52 <mutex_unlock_platform+0x3e>
   10b48:	4610      	mov	r0, r2
   10b4a:	e7ed      	b.n	10b28 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   10b4c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   10b50:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   10b52:	4802      	ldr	r0, [pc, #8]	; (10b5c <mutex_unlock_platform+0x48>)
   10b54:	e7e8      	b.n	10b28 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   10b56:	4802      	ldr	r0, [pc, #8]	; (10b60 <mutex_unlock_platform+0x4c>)
   10b58:	e7e6      	b.n	10b28 <mutex_unlock_platform+0x14>
   10b5a:	bf00      	nop
   10b5c:	ffff8fe9 	.word	0xffff8fe9
   10b60:	ffff8fea 	.word	0xffff8fea

00010b64 <mutex_lock_platform>:
    if(mutex == NULL) {
   10b64:	b320      	cbz	r0, 10bb0 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   10b66:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   10b68:	6842      	ldr	r2, [r0, #4]
   10b6a:	2a04      	cmp	r2, #4
   10b6c:	d002      	beq.n	10b74 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   10b6e:	b992      	cbnz	r2, 10b96 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   10b70:	4811      	ldr	r0, [pc, #68]	; (10bb8 <mutex_lock_platform+0x54>)
   10b72:	e00f      	b.n	10b94 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   10b74:	6803      	ldr	r3, [r0, #0]
   10b76:	2201      	movs	r2, #1
   10b78:	f3bf 8f5b 	dmb	ish
   10b7c:	e853 1f00 	ldrex	r1, [r3]
   10b80:	2900      	cmp	r1, #0
   10b82:	d103      	bne.n	10b8c <mutex_lock_platform+0x28>
   10b84:	e843 2000 	strex	r0, r2, [r3]
   10b88:	2800      	cmp	r0, #0
   10b8a:	d1f7      	bne.n	10b7c <mutex_lock_platform+0x18>
   10b8c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   10b90:	d10c      	bne.n	10bac <mutex_lock_platform+0x48>
   10b92:	2000      	movs	r0, #0
}
   10b94:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   10b96:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   10b98:	f04f 32ff 	mov.w	r2, #4294967295
   10b9c:	f04f 33ff 	mov.w	r3, #4294967295
   10ba0:	f005 fd12 	bl	165c8 <z_impl_k_mutex_lock>
        if (ret == 0) {
   10ba4:	2800      	cmp	r0, #0
   10ba6:	d0f5      	beq.n	10b94 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   10ba8:	4804      	ldr	r0, [pc, #16]	; (10bbc <mutex_lock_platform+0x58>)
   10baa:	e7f3      	b.n	10b94 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   10bac:	4803      	ldr	r0, [pc, #12]	; (10bbc <mutex_lock_platform+0x58>)
   10bae:	e7f1      	b.n	10b94 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   10bb0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   10bb4:	4770      	bx	lr
   10bb6:	bf00      	nop
   10bb8:	ffff8fea 	.word	0xffff8fea
   10bbc:	ffff8fe9 	.word	0xffff8fe9

00010bc0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   10bc0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   10bc2:	4604      	mov	r4, r0
   10bc4:	b188      	cbz	r0, 10bea <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   10bc6:	6863      	ldr	r3, [r4, #4]
   10bc8:	2b04      	cmp	r3, #4
   10bca:	d00d      	beq.n	10be8 <mutex_free_platform+0x28>
   10bcc:	2b08      	cmp	r3, #8
   10bce:	d00b      	beq.n	10be8 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   10bd0:	b153      	cbz	r3, 10be8 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   10bd2:	f013 0f02 	tst.w	r3, #2
   10bd6:	d00d      	beq.n	10bf4 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   10bd8:	4621      	mov	r1, r4
   10bda:	4809      	ldr	r0, [pc, #36]	; (10c00 <mutex_free_platform+0x40>)
   10bdc:	f00c ffd4 	bl	1db88 <k_mem_slab_free>
        mutex->mutex = NULL;
   10be0:	2300      	movs	r3, #0
   10be2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   10be4:	2300      	movs	r3, #0
   10be6:	6063      	str	r3, [r4, #4]
}
   10be8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   10bea:	4b06      	ldr	r3, [pc, #24]	; (10c04 <mutex_free_platform+0x44>)
   10bec:	685b      	ldr	r3, [r3, #4]
   10bee:	4806      	ldr	r0, [pc, #24]	; (10c08 <mutex_free_platform+0x48>)
   10bf0:	4798      	blx	r3
   10bf2:	e7e8      	b.n	10bc6 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   10bf4:	2214      	movs	r2, #20
   10bf6:	2100      	movs	r1, #0
   10bf8:	6820      	ldr	r0, [r4, #0]
   10bfa:	f00a fb61 	bl	1b2c0 <memset>
   10bfe:	e7f1      	b.n	10be4 <mutex_free_platform+0x24>
   10c00:	20001e70 	.word	0x20001e70
   10c04:	200008f8 	.word	0x200008f8
   10c08:	0001e95c 	.word	0x0001e95c

00010c0c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   10c0c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   10c0e:	4604      	mov	r4, r0
   10c10:	b178      	cbz	r0, 10c32 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   10c12:	6863      	ldr	r3, [r4, #4]
   10c14:	2b04      	cmp	r3, #4
   10c16:	d00b      	beq.n	10c30 <mutex_init_platform+0x24>
   10c18:	2b08      	cmp	r3, #8
   10c1a:	d009      	beq.n	10c30 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   10c1c:	b90b      	cbnz	r3, 10c22 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   10c1e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   10c20:	b163      	cbz	r3, 10c3c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   10c22:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   10c24:	f00d f841 	bl	1dcaa <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   10c28:	6863      	ldr	r3, [r4, #4]
   10c2a:	f043 0301 	orr.w	r3, r3, #1
   10c2e:	6063      	str	r3, [r4, #4]
}
   10c30:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   10c32:	4b0f      	ldr	r3, [pc, #60]	; (10c70 <mutex_init_platform+0x64>)
   10c34:	685b      	ldr	r3, [r3, #4]
   10c36:	480f      	ldr	r0, [pc, #60]	; (10c74 <mutex_init_platform+0x68>)
   10c38:	4798      	blx	r3
   10c3a:	e7ea      	b.n	10c12 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   10c3c:	f04f 32ff 	mov.w	r2, #4294967295
   10c40:	f04f 33ff 	mov.w	r3, #4294967295
   10c44:	4621      	mov	r1, r4
   10c46:	480c      	ldr	r0, [pc, #48]	; (10c78 <mutex_init_platform+0x6c>)
   10c48:	f005 fb7e 	bl	16348 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   10c4c:	b908      	cbnz	r0, 10c52 <mutex_init_platform+0x46>
   10c4e:	6823      	ldr	r3, [r4, #0]
   10c50:	b91b      	cbnz	r3, 10c5a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   10c52:	4b07      	ldr	r3, [pc, #28]	; (10c70 <mutex_init_platform+0x64>)
   10c54:	685b      	ldr	r3, [r3, #4]
   10c56:	4809      	ldr	r0, [pc, #36]	; (10c7c <mutex_init_platform+0x70>)
   10c58:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   10c5a:	2214      	movs	r2, #20
   10c5c:	2100      	movs	r1, #0
   10c5e:	6820      	ldr	r0, [r4, #0]
   10c60:	f00a fb2e 	bl	1b2c0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   10c64:	6863      	ldr	r3, [r4, #4]
   10c66:	f043 0302 	orr.w	r3, r3, #2
   10c6a:	6063      	str	r3, [r4, #4]
   10c6c:	e7d9      	b.n	10c22 <mutex_init_platform+0x16>
   10c6e:	bf00      	nop
   10c70:	200008f8 	.word	0x200008f8
   10c74:	0001e95c 	.word	0x0001e95c
   10c78:	20001e70 	.word	0x20001e70
   10c7c:	0001e984 	.word	0x0001e984

00010c80 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   10c80:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   10c82:	2340      	movs	r3, #64	; 0x40
   10c84:	2214      	movs	r2, #20
   10c86:	4904      	ldr	r1, [pc, #16]	; (10c98 <nrf_cc3xx_platform_mutex_init+0x18>)
   10c88:	4804      	ldr	r0, [pc, #16]	; (10c9c <nrf_cc3xx_platform_mutex_init+0x1c>)
   10c8a:	f00c ff6f 	bl	1db6c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   10c8e:	4904      	ldr	r1, [pc, #16]	; (10ca0 <nrf_cc3xx_platform_mutex_init+0x20>)
   10c90:	4804      	ldr	r0, [pc, #16]	; (10ca4 <nrf_cc3xx_platform_mutex_init+0x24>)
   10c92:	f007 f8fd 	bl	17e90 <nrf_cc3xx_platform_set_mutexes>
}
   10c96:	bd08      	pop	{r3, pc}
   10c98:	20001e8c 	.word	0x20001e8c
   10c9c:	20001e70 	.word	0x20001e70
   10ca0:	0001e9c4 	.word	0x0001e9c4
   10ca4:	0001e9b4 	.word	0x0001e9b4

00010ca8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10ca8:	4901      	ldr	r1, [pc, #4]	; (10cb0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10caa:	2210      	movs	r2, #16
	str	r2, [r1]
   10cac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   10cae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   10cb0:	e000ed10 	.word	0xe000ed10

00010cb4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10cb4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10cb6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10cb8:	f380 8811 	msr	BASEPRI, r0
	isb
   10cbc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   10cc0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10cc4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10cc6:	b662      	cpsie	i
	isb
   10cc8:	f3bf 8f6f 	isb	sy

	bx	lr
   10ccc:	4770      	bx	lr
   10cce:	bf00      	nop

00010cd0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   10cd0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   10cd2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10cd4:	f381 8811 	msr	BASEPRI, r1

	wfe
   10cd8:	bf20      	wfe

	msr	BASEPRI, r0
   10cda:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   10cde:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   10ce0:	4770      	bx	lr
   10ce2:	bf00      	nop

00010ce4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10ce4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10ce6:	2800      	cmp	r0, #0
   10ce8:	db07      	blt.n	10cfa <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10cea:	f000 021f 	and.w	r2, r0, #31
   10cee:	0940      	lsrs	r0, r0, #5
   10cf0:	2301      	movs	r3, #1
   10cf2:	4093      	lsls	r3, r2
   10cf4:	4a01      	ldr	r2, [pc, #4]	; (10cfc <arch_irq_enable+0x18>)
   10cf6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   10cfa:	4770      	bx	lr
   10cfc:	e000e100 	.word	0xe000e100

00010d00 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10d00:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10d02:	2800      	cmp	r0, #0
   10d04:	db0c      	blt.n	10d20 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10d06:	f000 021f 	and.w	r2, r0, #31
   10d0a:	0940      	lsrs	r0, r0, #5
   10d0c:	2301      	movs	r3, #1
   10d0e:	4093      	lsls	r3, r2
   10d10:	3020      	adds	r0, #32
   10d12:	4a04      	ldr	r2, [pc, #16]	; (10d24 <arch_irq_disable+0x24>)
   10d14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10d18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10d1c:	f3bf 8f6f 	isb	sy
}
   10d20:	4770      	bx	lr
   10d22:	bf00      	nop
   10d24:	e000e100 	.word	0xe000e100

00010d28 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10d28:	0942      	lsrs	r2, r0, #5
   10d2a:	4b05      	ldr	r3, [pc, #20]	; (10d40 <arch_irq_is_enabled+0x18>)
   10d2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10d30:	f000 001f 	and.w	r0, r0, #31
   10d34:	2301      	movs	r3, #1
   10d36:	fa03 f000 	lsl.w	r0, r3, r0
}
   10d3a:	4010      	ands	r0, r2
   10d3c:	4770      	bx	lr
   10d3e:	bf00      	nop
   10d40:	e000e100 	.word	0xe000e100

00010d44 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   10d44:	f012 0f01 	tst.w	r2, #1
   10d48:	d10c      	bne.n	10d64 <z_arm_irq_priority_set+0x20>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   10d4a:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10d4c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10d4e:	2800      	cmp	r0, #0
   10d50:	db0a      	blt.n	10d68 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d52:	0149      	lsls	r1, r1, #5
   10d54:	b2c9      	uxtb	r1, r1
   10d56:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   10d5a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   10d5e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   10d62:	4770      	bx	lr
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   10d64:	2100      	movs	r1, #0
   10d66:	e7f1      	b.n	10d4c <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d68:	f000 000f 	and.w	r0, r0, #15
   10d6c:	0149      	lsls	r1, r1, #5
   10d6e:	b2c9      	uxtb	r1, r1
   10d70:	4b01      	ldr	r3, [pc, #4]	; (10d78 <z_arm_irq_priority_set+0x34>)
   10d72:	5419      	strb	r1, [r3, r0]
}
   10d74:	4770      	bx	lr
   10d76:	bf00      	nop
   10d78:	e000ed14 	.word	0xe000ed14

00010d7c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   10d7c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   10d7e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   10d80:	4b05      	ldr	r3, [pc, #20]	; (10d98 <_arch_isr_direct_pm+0x1c>)
   10d82:	699b      	ldr	r3, [r3, #24]
   10d84:	b90b      	cbnz	r3, 10d8a <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   10d86:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   10d88:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   10d8a:	4b03      	ldr	r3, [pc, #12]	; (10d98 <_arch_isr_direct_pm+0x1c>)
   10d8c:	2200      	movs	r2, #0
   10d8e:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   10d90:	f00c ff6f 	bl	1dc72 <z_pm_save_idle_exit>
   10d94:	e7f7      	b.n	10d86 <_arch_isr_direct_pm+0xa>
   10d96:	bf00      	nop
   10d98:	200030b4 	.word	0x200030b4

00010d9c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10d9c:	bf30      	wfi
    b z_SysNmiOnReset
   10d9e:	f7ff bffd 	b.w	10d9c <z_SysNmiOnReset>
   10da2:	bf00      	nop

00010da4 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   10da4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10da6:	4b0b      	ldr	r3, [pc, #44]	; (10dd4 <z_arm_prep_c+0x30>)
   10da8:	4a0b      	ldr	r2, [pc, #44]	; (10dd8 <z_arm_prep_c+0x34>)
   10daa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10dae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   10db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10db4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10db8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10dbc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10dc4:	f005 f9fa 	bl	161bc <z_bss_zero>
	z_data_copy();
   10dc8:	f006 fae4 	bl	17394 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10dcc:	f000 fa14 	bl	111f8 <z_arm_interrupt_init>
	z_cstart();
   10dd0:	f005 fa52 	bl	16278 <z_cstart>
   10dd4:	e000ed00 	.word	0xe000ed00
   10dd8:	00000000 	.word	0x00000000

00010ddc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10ddc:	4a0a      	ldr	r2, [pc, #40]	; (10e08 <arch_swap+0x2c>)
   10dde:	6893      	ldr	r3, [r2, #8]
   10de0:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   10de4:	4909      	ldr	r1, [pc, #36]	; (10e0c <arch_swap+0x30>)
   10de6:	6809      	ldr	r1, [r1, #0]
   10de8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10dec:	4908      	ldr	r1, [pc, #32]	; (10e10 <arch_swap+0x34>)
   10dee:	684b      	ldr	r3, [r1, #4]
   10df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10df4:	604b      	str	r3, [r1, #4]
   10df6:	2300      	movs	r3, #0
   10df8:	f383 8811 	msr	BASEPRI, r3
   10dfc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10e00:	6893      	ldr	r3, [r2, #8]
}
   10e02:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   10e06:	4770      	bx	lr
   10e08:	200030b4 	.word	0x200030b4
   10e0c:	0001eec0 	.word	0x0001eec0
   10e10:	e000ed00 	.word	0xe000ed00

00010e14 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10e14:	4913      	ldr	r1, [pc, #76]	; (10e64 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10e16:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10e18:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10e1c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10e1e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10e22:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10e26:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   10e28:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10e2c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10e30:	4f0d      	ldr	r7, [pc, #52]	; (10e68 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10e32:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10e36:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   10e38:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10e3a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10e3c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   10e40:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10e42:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10e46:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   10e4a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   10e4c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   10e4e:	f000 fa83 	bl	11358 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   10e52:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10e56:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10e5a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10e5e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   10e62:	4770      	bx	lr
    ldr r1, =_kernel
   10e64:	200030b4 	.word	0x200030b4
    ldr v4, =_SCS_ICSR
   10e68:	e000ed04 	.word	0xe000ed04

00010e6c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   10e6c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10e70:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10e72:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10e76:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10e7a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10e7c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10e80:	2902      	cmp	r1, #2
    beq _oops
   10e82:	d0ff      	beq.n	10e84 <_oops>

00010e84 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10e84:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   10e86:	f00a f8b8 	bl	1affa <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   10e8a:	bd01      	pop	{r0, pc}

00010e8c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   10e8c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10e8e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   10e92:	490e      	ldr	r1, [pc, #56]	; (10ecc <arch_new_thread+0x40>)
   10e94:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   10e98:	f021 0101 	bic.w	r1, r1, #1
   10e9c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   10ea0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   10ea4:	9b01      	ldr	r3, [sp, #4]
   10ea6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   10eaa:	9b02      	ldr	r3, [sp, #8]
   10eac:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   10eb0:	9b03      	ldr	r3, [sp, #12]
   10eb2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   10eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10eba:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   10ebe:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   10ec0:	2300      	movs	r3, #0
   10ec2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10ec6:	bc10      	pop	{r4}
   10ec8:	4770      	bx	lr
   10eca:	bf00      	nop
   10ecc:	0001aa85 	.word	0x0001aa85

00010ed0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   10ed0:	4b12      	ldr	r3, [pc, #72]	; (10f1c <z_check_thread_stack_fail+0x4c>)
   10ed2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   10ed4:	b302      	cbz	r2, 10f18 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   10ed6:	f110 0f16 	cmn.w	r0, #22
   10eda:	d011      	beq.n	10f00 <z_check_thread_stack_fail+0x30>
   10edc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   10ee0:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   10ee4:	4584      	cmp	ip, r0
   10ee6:	d805      	bhi.n	10ef4 <z_check_thread_stack_fail+0x24>
   10ee8:	4283      	cmp	r3, r0
   10eea:	d905      	bls.n	10ef8 <z_check_thread_stack_fail+0x28>
   10eec:	428b      	cmp	r3, r1
   10eee:	d805      	bhi.n	10efc <z_check_thread_stack_fail+0x2c>
   10ef0:	2100      	movs	r1, #0
   10ef2:	e00b      	b.n	10f0c <z_check_thread_stack_fail+0x3c>
   10ef4:	2100      	movs	r1, #0
   10ef6:	e009      	b.n	10f0c <z_check_thread_stack_fail+0x3c>
   10ef8:	2100      	movs	r1, #0
   10efa:	e007      	b.n	10f0c <z_check_thread_stack_fail+0x3c>
   10efc:	2101      	movs	r1, #1
   10efe:	e005      	b.n	10f0c <z_check_thread_stack_fail+0x3c>
   10f00:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   10f04:	428b      	cmp	r3, r1
   10f06:	bf94      	ite	ls
   10f08:	2100      	movls	r1, #0
   10f0a:	2101      	movhi	r1, #1
   10f0c:	b909      	cbnz	r1, 10f12 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   10f0e:	2000      	movs	r0, #0
}
   10f10:	4770      	bx	lr
		return thread->stack_info.start;
   10f12:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   10f16:	4770      	bx	lr
		return 0;
   10f18:	2000      	movs	r0, #0
   10f1a:	4770      	bx	lr
   10f1c:	200030b4 	.word	0x200030b4

00010f20 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   10f20:	b508      	push	{r3, lr}
   10f22:	460d      	mov	r5, r1
   10f24:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10f26:	4b08      	ldr	r3, [pc, #32]	; (10f48 <arch_switch_to_main_thread+0x28>)
   10f28:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   10f2a:	f000 fa15 	bl	11358 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10f2e:	4620      	mov	r0, r4
   10f30:	f385 8809 	msr	PSP, r5
   10f34:	2100      	movs	r1, #0
   10f36:	b663      	cpsie	if
   10f38:	f381 8811 	msr	BASEPRI, r1
   10f3c:	f3bf 8f6f 	isb	sy
   10f40:	2200      	movs	r2, #0
   10f42:	2300      	movs	r3, #0
   10f44:	f009 fd9e 	bl	1aa84 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10f48:	200030b4 	.word	0x200030b4

00010f4c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10f4c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10f4e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10f50:	4a0b      	ldr	r2, [pc, #44]	; (10f80 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10f52:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   10f54:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10f56:	bf1e      	ittt	ne
	movne	r1, #0
   10f58:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10f5a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   10f5c:	f00c fe89 	blne	1dc72 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10f60:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10f62:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10f66:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10f6a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10f6e:	4905      	ldr	r1, [pc, #20]	; (10f84 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10f70:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10f72:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10f74:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10f76:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   10f7a:	4903      	ldr	r1, [pc, #12]	; (10f88 <_isr_wrapper+0x3c>)
	bx r1
   10f7c:	4708      	bx	r1
   10f7e:	0000      	.short	0x0000
	ldr r2, =_kernel
   10f80:	200030b4 	.word	0x200030b4
	ldr r1, =_sw_isr_table
   10f84:	0001e648 	.word	0x0001e648
	ldr r1, =z_arm_int_exit
   10f88:	00010f8d 	.word	0x00010f8d

00010f8c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10f8c:	4b04      	ldr	r3, [pc, #16]	; (10fa0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10f8e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10f90:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10f92:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10f94:	d003      	beq.n	10f9e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   10f96:	4903      	ldr	r1, [pc, #12]	; (10fa4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10f9c:	600a      	str	r2, [r1, #0]

00010f9e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10f9e:	4770      	bx	lr
	ldr r3, =_kernel
   10fa0:	200030b4 	.word	0x200030b4
	ldr r1, =_SCS_ICSR
   10fa4:	e000ed04 	.word	0xe000ed04

00010fa8 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   10fa8:	b510      	push	{r4, lr}
   10faa:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10fac:	4b12      	ldr	r3, [pc, #72]	; (10ff8 <bus_fault+0x50>)
   10fae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fb4:	f413 7f00 	tst.w	r3, #512	; 0x200
   10fb8:	d00b      	beq.n	10fd2 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10fba:	4b0f      	ldr	r3, [pc, #60]	; (10ff8 <bus_fault+0x50>)
   10fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fc0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   10fc4:	d005      	beq.n	10fd2 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   10fc6:	b121      	cbz	r1, 10fd2 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10fc8:	4a0b      	ldr	r2, [pc, #44]	; (10ff8 <bus_fault+0x50>)
   10fca:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10fcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10fd0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10fd2:	4b09      	ldr	r3, [pc, #36]	; (10ff8 <bus_fault+0x50>)
   10fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fd8:	f413 7f80 	tst.w	r3, #256	; 0x100
   10fdc:	d101      	bne.n	10fe2 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10fde:	4b06      	ldr	r3, [pc, #24]	; (10ff8 <bus_fault+0x50>)
   10fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10fe2:	4a05      	ldr	r2, [pc, #20]	; (10ff8 <bus_fault+0x50>)
   10fe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10fe6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10fea:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   10fec:	2101      	movs	r1, #1
   10fee:	f00a f816 	bl	1b01e <memory_fault_recoverable>
   10ff2:	7020      	strb	r0, [r4, #0]

	return reason;
}
   10ff4:	2000      	movs	r0, #0
   10ff6:	bd10      	pop	{r4, pc}
   10ff8:	e000ed00 	.word	0xe000ed00

00010ffc <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   10ffc:	4b07      	ldr	r3, [pc, #28]	; (1101c <usage_fault+0x20>)
   10ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1100a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1100c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   11010:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   11014:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   11016:	2000      	movs	r0, #0
   11018:	4770      	bx	lr
   1101a:	bf00      	nop
   1101c:	e000ed00 	.word	0xe000ed00

00011020 <mem_manage_fault>:
{
   11020:	b570      	push	{r4, r5, r6, lr}
   11022:	4605      	mov	r5, r0
   11024:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11026:	4b25      	ldr	r3, [pc, #148]	; (110bc <mem_manage_fault+0x9c>)
   11028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1102a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1102e:	f013 0f02 	tst.w	r3, #2
   11032:	d00c      	beq.n	1104e <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
   11034:	4b21      	ldr	r3, [pc, #132]	; (110bc <mem_manage_fault+0x9c>)
   11036:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1103a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1103e:	d02f      	beq.n	110a0 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
   11040:	b139      	cbz	r1, 11052 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11042:	4a1e      	ldr	r2, [pc, #120]	; (110bc <mem_manage_fault+0x9c>)
   11044:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1104a:	6293      	str	r3, [r2, #40]	; 0x28
   1104c:	e001      	b.n	11052 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
   1104e:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11052:	4b1a      	ldr	r3, [pc, #104]	; (110bc <mem_manage_fault+0x9c>)
   11054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1105a:	f013 0f10 	tst.w	r3, #16
   1105e:	d104      	bne.n	1106a <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11060:	4b16      	ldr	r3, [pc, #88]	; (110bc <mem_manage_fault+0x9c>)
   11062:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11064:	f014 0402 	ands.w	r4, r4, #2
   11068:	d004      	beq.n	11074 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1106a:	4b14      	ldr	r3, [pc, #80]	; (110bc <mem_manage_fault+0x9c>)
   1106c:	685c      	ldr	r4, [r3, #4]
   1106e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   11072:	d118      	bne.n	110a6 <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11074:	4b11      	ldr	r3, [pc, #68]	; (110bc <mem_manage_fault+0x9c>)
   11076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11078:	f013 0f20 	tst.w	r3, #32
   1107c:	d004      	beq.n	11088 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1107e:	4a0f      	ldr	r2, [pc, #60]	; (110bc <mem_manage_fault+0x9c>)
   11080:	6a53      	ldr	r3, [r2, #36]	; 0x24
   11082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11086:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11088:	4a0c      	ldr	r2, [pc, #48]	; (110bc <mem_manage_fault+0x9c>)
   1108a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1108c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   11090:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11092:	2101      	movs	r1, #1
   11094:	4628      	mov	r0, r5
   11096:	f009 ffc2 	bl	1b01e <memory_fault_recoverable>
   1109a:	7030      	strb	r0, [r6, #0]
}
   1109c:	4620      	mov	r0, r4
   1109e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   110a0:	f06f 0015 	mvn.w	r0, #21
   110a4:	e7d5      	b.n	11052 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   110a6:	4629      	mov	r1, r5
   110a8:	f7ff ff12 	bl	10ed0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   110ac:	4604      	mov	r4, r0
   110ae:	2800      	cmp	r0, #0
   110b0:	d0e0      	beq.n	11074 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   110b2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   110b6:	2402      	movs	r4, #2
   110b8:	e7dc      	b.n	11074 <mem_manage_fault+0x54>
   110ba:	bf00      	nop
   110bc:	e000ed00 	.word	0xe000ed00

000110c0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   110c0:	b508      	push	{r3, lr}
   110c2:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   110c4:	2300      	movs	r3, #0
   110c6:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   110c8:	4b1c      	ldr	r3, [pc, #112]	; (1113c <hard_fault+0x7c>)
   110ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   110cc:	f010 0002 	ands.w	r0, r0, #2
   110d0:	d131      	bne.n	11136 <hard_fault+0x76>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   110d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   110d4:	2b00      	cmp	r3, #0
   110d6:	db2f      	blt.n	11138 <hard_fault+0x78>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   110d8:	4b18      	ldr	r3, [pc, #96]	; (1113c <hard_fault+0x7c>)
   110da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   110dc:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   110e0:	d02a      	beq.n	11138 <hard_fault+0x78>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   110e2:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   110e6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   110ea:	f64d 7302 	movw	r3, #57090	; 0xdf02
   110ee:	429a      	cmp	r2, r3
   110f0:	d012      	beq.n	11118 <hard_fault+0x58>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   110f2:	4b12      	ldr	r3, [pc, #72]	; (1113c <hard_fault+0x7c>)
   110f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   110f6:	f013 0fff 	tst.w	r3, #255	; 0xff
   110fa:	d110      	bne.n	1111e <hard_fault+0x5e>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   110fc:	4b0f      	ldr	r3, [pc, #60]	; (1113c <hard_fault+0x7c>)
   110fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11100:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   11104:	d111      	bne.n	1112a <hard_fault+0x6a>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   11106:	4b0d      	ldr	r3, [pc, #52]	; (1113c <hard_fault+0x7c>)
   11108:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1110a:	0c00      	lsrs	r0, r0, #16
   1110c:	0400      	lsls	r0, r0, #16
   1110e:	b198      	cbz	r0, 11138 <hard_fault+0x78>
			reason = usage_fault(esf);
   11110:	4660      	mov	r0, ip
   11112:	f7ff ff73 	bl	10ffc <usage_fault>
   11116:	e00f      	b.n	11138 <hard_fault+0x78>
			reason = esf->basic.r0;
   11118:	f8dc 0000 	ldr.w	r0, [ip]
   1111c:	e00c      	b.n	11138 <hard_fault+0x78>
			reason = mem_manage_fault(esf, 1, recoverable);
   1111e:	460a      	mov	r2, r1
   11120:	2101      	movs	r1, #1
   11122:	4660      	mov	r0, ip
   11124:	f7ff ff7c 	bl	11020 <mem_manage_fault>
   11128:	e006      	b.n	11138 <hard_fault+0x78>
			reason = bus_fault(esf, 1, recoverable);
   1112a:	460a      	mov	r2, r1
   1112c:	2101      	movs	r1, #1
   1112e:	4660      	mov	r0, ip
   11130:	f7ff ff3a 	bl	10fa8 <bus_fault>
   11134:	e000      	b.n	11138 <hard_fault+0x78>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11136:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   11138:	bd08      	pop	{r3, pc}
   1113a:	bf00      	nop
   1113c:	e000ed00 	.word	0xe000ed00

00011140 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11140:	b570      	push	{r4, r5, r6, lr}
   11142:	b08a      	sub	sp, #40	; 0x28
   11144:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11146:	4b22      	ldr	r3, [pc, #136]	; (111d0 <z_arm_fault+0x90>)
   11148:	6859      	ldr	r1, [r3, #4]
   1114a:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1114e:	2300      	movs	r3, #0
   11150:	f383 8811 	msr	BASEPRI, r3
   11154:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11158:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1115c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11160:	d115      	bne.n	1118e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   11162:	f002 030c 	and.w	r3, r2, #12
   11166:	2b08      	cmp	r3, #8
   11168:	d014      	beq.n	11194 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1116a:	f012 0f08 	tst.w	r2, #8
   1116e:	d00b      	beq.n	11188 <z_arm_fault+0x48>
	*nested_exc = false;
   11170:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   11172:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   11176:	4620      	mov	r0, r4
   11178:	f009 ff56 	bl	1b028 <fault_handle>
   1117c:	4605      	mov	r5, r0
	if (recoverable) {
   1117e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11182:	b153      	cbz	r3, 1119a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   11184:	b00a      	add	sp, #40	; 0x28
   11186:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
   11188:	4604      	mov	r4, r0
			*nested_exc = true;
   1118a:	2601      	movs	r6, #1
   1118c:	e7f1      	b.n	11172 <z_arm_fault+0x32>
	*nested_exc = false;
   1118e:	2600      	movs	r6, #0
		return NULL;
   11190:	4634      	mov	r4, r6
   11192:	e7ee      	b.n	11172 <z_arm_fault+0x32>
	*nested_exc = false;
   11194:	2600      	movs	r6, #0
		return NULL;
   11196:	4634      	mov	r4, r6
   11198:	e7eb      	b.n	11172 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1119a:	2220      	movs	r2, #32
   1119c:	4621      	mov	r1, r4
   1119e:	a801      	add	r0, sp, #4
   111a0:	f00a f85f 	bl	1b262 <memcpy>
	if (nested_exc) {
   111a4:	b14e      	cbz	r6, 111ba <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   111a6:	9b08      	ldr	r3, [sp, #32]
   111a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   111ac:	b95a      	cbnz	r2, 111c6 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   111ae:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   111b2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   111b6:	9308      	str	r3, [sp, #32]
   111b8:	e005      	b.n	111c6 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   111ba:	9b08      	ldr	r3, [sp, #32]
   111bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   111c0:	f023 0301 	bic.w	r3, r3, #1
   111c4:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   111c6:	a901      	add	r1, sp, #4
   111c8:	4628      	mov	r0, r5
   111ca:	f009 ff12 	bl	1aff2 <z_arm_fatal_error>
   111ce:	e7d9      	b.n	11184 <z_arm_fault+0x44>
   111d0:	e000ed00 	.word	0xe000ed00

000111d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   111d4:	4a02      	ldr	r2, [pc, #8]	; (111e0 <z_arm_fault_init+0xc>)
   111d6:	6953      	ldr	r3, [r2, #20]
   111d8:	f043 0310 	orr.w	r3, r3, #16
   111dc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   111de:	4770      	bx	lr
   111e0:	e000ed00 	.word	0xe000ed00

000111e4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   111e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   111e8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   111ec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   111ee:	4672      	mov	r2, lr
	bl z_arm_fault
   111f0:	f7ff ffa6 	bl	11140 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   111f4:	bd01      	pop	{r0, pc}
   111f6:	bf00      	nop

000111f8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   111f8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   111fa:	e006      	b.n	1120a <z_arm_interrupt_init+0x12>
   111fc:	f002 010f 	and.w	r1, r2, #15
   11200:	4b09      	ldr	r3, [pc, #36]	; (11228 <z_arm_interrupt_init+0x30>)
   11202:	440b      	add	r3, r1
   11204:	2140      	movs	r1, #64	; 0x40
   11206:	7619      	strb	r1, [r3, #24]
   11208:	3201      	adds	r2, #1
   1120a:	2a2f      	cmp	r2, #47	; 0x2f
   1120c:	dc0a      	bgt.n	11224 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   1120e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   11210:	2b00      	cmp	r3, #0
   11212:	dbf3      	blt.n	111fc <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11214:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   11218:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1121c:	2140      	movs	r1, #64	; 0x40
   1121e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   11222:	e7f1      	b.n	11208 <z_arm_interrupt_init+0x10>
	}
}
   11224:	4770      	bx	lr
   11226:	bf00      	nop
   11228:	e000ecfc 	.word	0xe000ecfc

0001122c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   1122c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   1122e:	4913      	ldr	r1, [pc, #76]	; (1127c <__start+0x50>)
    strb r0, [r1]
   11230:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11232:	2000      	movs	r0, #0
    msr CONTROL, r0
   11234:	f380 8814 	msr	CONTROL, r0
    isb
   11238:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1123c:	f7ff fafe 	bl	1083c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11240:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11242:	490f      	ldr	r1, [pc, #60]	; (11280 <__start+0x54>)
    str r0, [r1]
   11244:	6008      	str	r0, [r1, #0]
    dsb
   11246:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1124a:	480e      	ldr	r0, [pc, #56]	; (11284 <__start+0x58>)
    msr msp, r0
   1124c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11250:	f000 f830 	bl	112b4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11254:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   11256:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1125a:	480b      	ldr	r0, [pc, #44]	; (11288 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1125c:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   11260:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11262:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11266:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1126a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1126c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1126e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11272:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11276:	f7ff fd95 	bl	10da4 <z_arm_prep_c>
   1127a:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   1127c:	20003bc6 	.word	0x20003bc6
    ldr r1, =_SCS_MPU_CTRL
   11280:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11284:	200052c0 	.word	0x200052c0
    ldr r0, =z_interrupt_stacks
   11288:	20005480 	.word	0x20005480

0001128c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1128c:	4b08      	ldr	r3, [pc, #32]	; (112b0 <z_arm_clear_arm_mpu_config+0x24>)
   1128e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   11292:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   11296:	2300      	movs	r3, #0
   11298:	e006      	b.n	112a8 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   1129a:	4a05      	ldr	r2, [pc, #20]	; (112b0 <z_arm_clear_arm_mpu_config+0x24>)
   1129c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   112a0:	2100      	movs	r1, #0
   112a2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   112a6:	3301      	adds	r3, #1
   112a8:	4283      	cmp	r3, r0
   112aa:	dbf6      	blt.n	1129a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   112ac:	4770      	bx	lr
   112ae:	bf00      	nop
   112b0:	e000ed00 	.word	0xe000ed00

000112b4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   112b4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   112b6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   112b8:	2400      	movs	r4, #0
   112ba:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   112be:	f7ff ffe5 	bl	1128c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   112c2:	4623      	mov	r3, r4
   112c4:	e008      	b.n	112d8 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   112c6:	f103 0120 	add.w	r1, r3, #32
   112ca:	4a0e      	ldr	r2, [pc, #56]	; (11304 <z_arm_init_arch_hw_at_boot+0x50>)
   112cc:	f04f 30ff 	mov.w	r0, #4294967295
   112d0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   112d4:	3301      	adds	r3, #1
   112d6:	b2db      	uxtb	r3, r3
   112d8:	2b07      	cmp	r3, #7
   112da:	d9f4      	bls.n	112c6 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   112dc:	2300      	movs	r3, #0
   112de:	e008      	b.n	112f2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   112e0:	f103 0160 	add.w	r1, r3, #96	; 0x60
   112e4:	4a07      	ldr	r2, [pc, #28]	; (11304 <z_arm_init_arch_hw_at_boot+0x50>)
   112e6:	f04f 30ff 	mov.w	r0, #4294967295
   112ea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   112ee:	3301      	adds	r3, #1
   112f0:	b2db      	uxtb	r3, r3
   112f2:	2b07      	cmp	r3, #7
   112f4:	d9f4      	bls.n	112e0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   112f6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   112f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   112fc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11300:	bd10      	pop	{r4, pc}
   11302:	bf00      	nop
   11304:	e000e100 	.word	0xe000e100

00011308 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   11308:	b508      	push	{r3, lr}
	if (_current == thread) {
   1130a:	4b0a      	ldr	r3, [pc, #40]	; (11334 <z_impl_k_thread_abort+0x2c>)
   1130c:	689b      	ldr	r3, [r3, #8]
   1130e:	4283      	cmp	r3, r0
   11310:	d002      	beq.n	11318 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   11312:	f005 fff3 	bl	172fc <z_thread_abort>
}
   11316:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11318:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1131c:	2b00      	cmp	r3, #0
   1131e:	d0f8      	beq.n	11312 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11320:	4b05      	ldr	r3, [pc, #20]	; (11338 <z_impl_k_thread_abort+0x30>)
   11322:	685a      	ldr	r2, [r3, #4]
   11324:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11328:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1132a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1132c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11330:	625a      	str	r2, [r3, #36]	; 0x24
   11332:	e7ee      	b.n	11312 <z_impl_k_thread_abort+0xa>
   11334:	200030b4 	.word	0x200030b4
   11338:	e000ed00 	.word	0xe000ed00

0001133c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1133c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1133e:	4b03      	ldr	r3, [pc, #12]	; (1134c <z_arm_configure_static_mpu_regions+0x10>)
   11340:	4a03      	ldr	r2, [pc, #12]	; (11350 <z_arm_configure_static_mpu_regions+0x14>)
   11342:	2101      	movs	r1, #1
   11344:	4803      	ldr	r0, [pc, #12]	; (11354 <z_arm_configure_static_mpu_regions+0x18>)
   11346:	f009 fef5 	bl	1b134 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1134a:	bd08      	pop	{r3, pc}
   1134c:	20040000 	.word	0x20040000
   11350:	20000000 	.word	0x20000000
   11354:	0001e9d8 	.word	0x0001e9d8

00011358 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   11358:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1135a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1135e:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   11360:	4804      	ldr	r0, [pc, #16]	; (11374 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   11362:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   11364:	2340      	movs	r3, #64	; 0x40
   11366:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   11368:	4b03      	ldr	r3, [pc, #12]	; (11378 <z_arm_configure_dynamic_mpu_regions+0x20>)
   1136a:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1136c:	2101      	movs	r1, #1
   1136e:	f009 fee5 	bl	1b13c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   11372:	bd08      	pop	{r3, pc}
   11374:	2000238c 	.word	0x2000238c
   11378:	150b0000 	.word	0x150b0000

0001137c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1137c:	4a08      	ldr	r2, [pc, #32]	; (113a0 <region_init+0x24>)
   1137e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11382:	680b      	ldr	r3, [r1, #0]
   11384:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   11388:	4303      	orrs	r3, r0
   1138a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1138e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11392:	688b      	ldr	r3, [r1, #8]
   11394:	f043 0301 	orr.w	r3, r3, #1
   11398:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   1139c:	4770      	bx	lr
   1139e:	bf00      	nop
   113a0:	e000ed00 	.word	0xe000ed00

000113a4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   113a4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   113a6:	4c03      	ldr	r4, [pc, #12]	; (113b4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   113a8:	2301      	movs	r3, #1
   113aa:	7822      	ldrb	r2, [r4, #0]
   113ac:	f009 fe9a 	bl	1b0e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   113b0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   113b2:	bd10      	pop	{r4, pc}
   113b4:	20003bc1 	.word	0x20003bc1

000113b8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   113b8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   113ba:	2300      	movs	r3, #0
   113bc:	4a09      	ldr	r2, [pc, #36]	; (113e4 <mpu_configure_dynamic_mpu_regions+0x2c>)
   113be:	7812      	ldrb	r2, [r2, #0]
   113c0:	f009 fe90 	bl	1b0e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   113c4:	f110 0f16 	cmn.w	r0, #22
   113c8:	d00a      	beq.n	113e0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   113ca:	4603      	mov	r3, r0
   113cc:	e006      	b.n	113dc <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   113ce:	4a06      	ldr	r2, [pc, #24]	; (113e8 <mpu_configure_dynamic_mpu_regions+0x30>)
   113d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   113d4:	2100      	movs	r1, #0
   113d6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   113da:	3301      	adds	r3, #1
   113dc:	2b07      	cmp	r3, #7
   113de:	ddf6      	ble.n	113ce <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   113e0:	bd08      	pop	{r3, pc}
   113e2:	bf00      	nop
   113e4:	20003bc1 	.word	0x20003bc1
   113e8:	e000ed00 	.word	0xe000ed00

000113ec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   113ec:	4b04      	ldr	r3, [pc, #16]	; (11400 <arm_core_mpu_enable+0x14>)
   113ee:	2205      	movs	r2, #5
   113f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   113f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113f8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   113fc:	4770      	bx	lr
   113fe:	bf00      	nop
   11400:	e000ed00 	.word	0xe000ed00

00011404 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11404:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11408:	4b02      	ldr	r3, [pc, #8]	; (11414 <arm_core_mpu_disable+0x10>)
   1140a:	2200      	movs	r2, #0
   1140c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11410:	4770      	bx	lr
   11412:	bf00      	nop
   11414:	e000ed00 	.word	0xe000ed00

00011418 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   11418:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1141a:	4b0e      	ldr	r3, [pc, #56]	; (11454 <z_arm_mpu_init+0x3c>)
   1141c:	681d      	ldr	r5, [r3, #0]
   1141e:	2d08      	cmp	r5, #8
   11420:	d815      	bhi.n	1144e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   11422:	f7ff ffef 	bl	11404 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11426:	2400      	movs	r4, #0
   11428:	e009      	b.n	1143e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1142a:	4b0a      	ldr	r3, [pc, #40]	; (11454 <z_arm_mpu_init+0x3c>)
   1142c:	6859      	ldr	r1, [r3, #4]
   1142e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   11432:	0093      	lsls	r3, r2, #2
   11434:	4419      	add	r1, r3
   11436:	4620      	mov	r0, r4
   11438:	f7ff ffa0 	bl	1137c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1143c:	3401      	adds	r4, #1
   1143e:	42a5      	cmp	r5, r4
   11440:	d8f3      	bhi.n	1142a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11442:	4b05      	ldr	r3, [pc, #20]	; (11458 <z_arm_mpu_init+0x40>)
   11444:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   11446:	f7ff ffd1 	bl	113ec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1144a:	2000      	movs	r0, #0
}
   1144c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   1144e:	f04f 30ff 	mov.w	r0, #4294967295
   11452:	e7fb      	b.n	1144c <z_arm_mpu_init+0x34>
   11454:	0001e9f4 	.word	0x0001e9f4
   11458:	20003bc1 	.word	0x20003bc1

0001145c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   1145c:	4b01      	ldr	r3, [pc, #4]	; (11464 <__stdout_hook_install+0x8>)
   1145e:	6018      	str	r0, [r3, #0]
}
   11460:	4770      	bx	lr
   11462:	bf00      	nop
   11464:	2000068c 	.word	0x2000068c

00011468 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   11468:	b510      	push	{r4, lr}
	__asm__ volatile(
   1146a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1146e:	f3ef 8411 	mrs	r4, BASEPRI
   11472:	f383 8812 	msr	BASEPRI_MAX, r3
   11476:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1147a:	2301      	movs	r3, #1
   1147c:	4a0c      	ldr	r2, [pc, #48]	; (114b0 <nordicsemi_nrf52_init+0x48>)
   1147e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   11482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11486:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   1148a:	f009 ff3a 	bl	1b302 <nrf52_errata_197>
   1148e:	b120      	cbz	r0, 1149a <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   11490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11494:	2201      	movs	r2, #1
   11496:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1149a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1149e:	2201      	movs	r2, #1
   114a0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   114a4:	f384 8811 	msr	BASEPRI, r4
   114a8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   114ac:	2000      	movs	r0, #0
   114ae:	bd10      	pop	{r4, pc}
   114b0:	4001e000 	.word	0x4001e000

000114b4 <sys_arch_reboot>:
    *p_gpregret = val;
   114b4:	b2c0      	uxtb	r0, r0
   114b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   114ba:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   114be:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   114c2:	4905      	ldr	r1, [pc, #20]	; (114d8 <sys_arch_reboot+0x24>)
   114c4:	68ca      	ldr	r2, [r1, #12]
   114c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   114ca:	4b04      	ldr	r3, [pc, #16]	; (114dc <sys_arch_reboot+0x28>)
   114cc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   114ce:	60cb      	str	r3, [r1, #12]
   114d0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   114d4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   114d6:	e7fd      	b.n	114d4 <sys_arch_reboot+0x20>
   114d8:	e000ed00 	.word	0xe000ed00
   114dc:	05fa0004 	.word	0x05fa0004

000114e0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   114e0:	b130      	cbz	r0, 114f0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   114e2:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   114e4:	0180      	lsls	r0, r0, #6
   114e6:	4b03      	ldr	r3, [pc, #12]	; (114f4 <arch_busy_wait+0x14>)
   114e8:	f043 0301 	orr.w	r3, r3, #1
   114ec:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   114ee:	bd08      	pop	{r3, pc}
   114f0:	4770      	bx	lr
   114f2:	bf00      	nop
   114f4:	0001e870 	.word	0x0001e870

000114f8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   114f8:	b538      	push	{r3, r4, r5, lr}
   114fa:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   114fc:	4805      	ldr	r0, [pc, #20]	; (11514 <bt_buf_get_rx+0x1c>)
   114fe:	f00a f9c0 	bl	1b882 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11502:	4605      	mov	r5, r0
   11504:	b120      	cbz	r0, 11510 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   11506:	2100      	movs	r1, #0
   11508:	3008      	adds	r0, #8
   1150a:	f00a f9dc 	bl	1b8c6 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1150e:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11510:	4628      	mov	r0, r5
   11512:	bd38      	pop	{r3, r4, r5, pc}
   11514:	20000a50 	.word	0x20000a50

00011518 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11518:	b510      	push	{r4, lr}
   1151a:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   1151c:	4b0a      	ldr	r3, [pc, #40]	; (11548 <bt_buf_get_cmd_complete+0x30>)
   1151e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
   11522:	b158      	cbz	r0, 1153c <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11524:	f00a fa60 	bl	1b9e8 <net_buf_ref>
   11528:	4604      	mov	r4, r0
   1152a:	2301      	movs	r3, #1
   1152c:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   1152e:	2100      	movs	r1, #0
   11530:	8181      	strh	r1, [r0, #12]
   11532:	3008      	adds	r0, #8
   11534:	f00a f9c7 	bl	1b8c6 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11538:	4620      	mov	r0, r4
   1153a:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1153c:	460b      	mov	r3, r1
   1153e:	2001      	movs	r0, #1
   11540:	f7ff ffda 	bl	114f8 <bt_buf_get_rx>
   11544:	4604      	mov	r4, r0
   11546:	e7f7      	b.n	11538 <bt_buf_get_cmd_complete+0x20>
   11548:	200004a8 	.word	0x200004a8

0001154c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1154c:	b510      	push	{r4, lr}
	switch (evt) {
   1154e:	f1a0 0c0e 	sub.w	ip, r0, #14
   11552:	f1bc 0f01 	cmp.w	ip, #1
   11556:	d906      	bls.n	11566 <bt_buf_get_evt+0x1a>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   11558:	b959      	cbnz	r1, 11572 <bt_buf_get_evt+0x26>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1155a:	2001      	movs	r0, #1
   1155c:	f7ff ffcc 	bl	114f8 <bt_buf_get_rx>
   11560:	4604      	mov	r4, r0
	}
}
   11562:	4620      	mov	r0, r4
   11564:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
   11566:	4610      	mov	r0, r2
   11568:	4619      	mov	r1, r3
   1156a:	f7ff ffd5 	bl	11518 <bt_buf_get_cmd_complete>
   1156e:	4604      	mov	r4, r0
   11570:	e7f7      	b.n	11562 <bt_buf_get_evt+0x16>
	return net_buf_alloc_fixed(pool, timeout);
   11572:	4806      	ldr	r0, [pc, #24]	; (1158c <bt_buf_get_evt+0x40>)
   11574:	f00a f985 	bl	1b882 <net_buf_alloc_fixed>
			if (buf) {
   11578:	4604      	mov	r4, r0
   1157a:	2800      	cmp	r0, #0
   1157c:	d0f1      	beq.n	11562 <bt_buf_get_evt+0x16>
	net_buf_simple_reserve(&buf->b, reserve);
   1157e:	2100      	movs	r1, #0
   11580:	3008      	adds	r0, #8
   11582:	f00a f9a0 	bl	1b8c6 <net_buf_simple_reserve>
   11586:	2301      	movs	r3, #1
   11588:	7523      	strb	r3, [r4, #20]
			return buf;
   1158a:	e7ea      	b.n	11562 <bt_buf_get_evt+0x16>
   1158c:	200009f8 	.word	0x200009f8

00011590 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   11590:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   11592:	7851      	ldrb	r1, [r2, #1]
   11594:	4b07      	ldr	r3, [pc, #28]	; (115b4 <read_local_ver_complete+0x24>)
   11596:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1159a:	8851      	ldrh	r1, [r2, #2]
   1159c:	84d9      	strh	r1, [r3, #38]	; 0x26
	bt_dev.lmp_version = rp->lmp_version;
   1159e:	7911      	ldrb	r1, [r2, #4]
   115a0:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   115a4:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   115a8:	8519      	strh	r1, [r3, #40]	; 0x28
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   115aa:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   115ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
   115b0:	4770      	bx	lr
   115b2:	bf00      	nop
   115b4:	200004a8 	.word	0x200004a8

000115b8 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   115b8:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   115ba:	7a19      	ldrb	r1, [r3, #8]
   115bc:	79da      	ldrb	r2, [r3, #7]
   115be:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   115c2:	7998      	ldrb	r0, [r3, #6]
   115c4:	795a      	ldrb	r2, [r3, #5]
   115c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   115ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   115ce:	7918      	ldrb	r0, [r3, #4]
   115d0:	78d9      	ldrb	r1, [r3, #3]
   115d2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   115d6:	7898      	ldrb	r0, [r3, #2]
   115d8:	785b      	ldrb	r3, [r3, #1]
   115da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   115de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   115e2:	4903      	ldr	r1, [pc, #12]	; (115f0 <le_read_supp_states_complete+0x38>)
   115e4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
   115e8:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
}
   115ec:	4770      	bx	lr
   115ee:	bf00      	nop
   115f0:	200004a8 	.word	0x200004a8

000115f4 <hci_reset_complete>:
{
   115f4:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   115f6:	6883      	ldr	r3, [r0, #8]
   115f8:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   115fa:	b9a3      	cbnz	r3, 11626 <hci_reset_complete+0x32>
		bt_scan_reset();
   115fc:	f001 f842 	bl	12684 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11600:	f3bf 8f5b 	dmb	ish
   11604:	4b08      	ldr	r3, [pc, #32]	; (11628 <hci_reset_complete+0x34>)
   11606:	f853 2f88 	ldr.w	r2, [r3, #136]!
   1160a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1160e:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11612:	f3bf 8f5b 	dmb	ish
   11616:	e853 1f00 	ldrex	r1, [r3]
   1161a:	e843 2000 	strex	r0, r2, [r3]
   1161e:	2800      	cmp	r0, #0
   11620:	d1f9      	bne.n	11616 <hci_reset_complete+0x22>
   11622:	f3bf 8f5b 	dmb	ish
}
   11626:	bd08      	pop	{r3, pc}
   11628:	200004a8 	.word	0x200004a8

0001162c <read_local_features_complete>:
{
   1162c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1162e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11630:	2208      	movs	r2, #8
   11632:	3101      	adds	r1, #1
   11634:	4801      	ldr	r0, [pc, #4]	; (1163c <read_local_features_complete+0x10>)
   11636:	f009 fe14 	bl	1b262 <memcpy>
}
   1163a:	bd08      	pop	{r3, pc}
   1163c:	200004d4 	.word	0x200004d4

00011640 <read_supported_commands_complete>:
{
   11640:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   11642:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   11644:	2240      	movs	r2, #64	; 0x40
   11646:	3101      	adds	r1, #1
   11648:	4801      	ldr	r0, [pc, #4]	; (11650 <read_supported_commands_complete+0x10>)
   1164a:	f009 fe0a 	bl	1b262 <memcpy>
}
   1164e:	bd08      	pop	{r3, pc}
   11650:	200004dc 	.word	0x200004dc

00011654 <read_le_features_complete>:
{
   11654:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   11656:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   11658:	2208      	movs	r2, #8
   1165a:	3101      	adds	r1, #1
   1165c:	4801      	ldr	r0, [pc, #4]	; (11664 <read_le_features_complete+0x10>)
   1165e:	f009 fe00 	bl	1b262 <memcpy>
}
   11662:	bd08      	pop	{r3, pc}
   11664:	20000538 	.word	0x20000538

00011668 <hci_cmd_done>:
{
   11668:	b570      	push	{r4, r5, r6, lr}
   1166a:	4606      	mov	r6, r0
   1166c:	460d      	mov	r5, r1
   1166e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11670:	7990      	ldrb	r0, [r2, #6]
   11672:	f001 f9e9 	bl	12a48 <net_buf_pool_get>
   11676:	4b39      	ldr	r3, [pc, #228]	; (1175c <hci_cmd_done+0xf4>)
   11678:	4283      	cmp	r3, r0
   1167a:	d000      	beq.n	1167e <hci_cmd_done+0x16>
}
   1167c:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   1167e:	4620      	mov	r0, r4
   11680:	f00a f853 	bl	1b72a <net_buf_id>
   11684:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11688:	4b35      	ldr	r3, [pc, #212]	; (11760 <hci_cmd_done+0xf8>)
   1168a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1168e:	8843      	ldrh	r3, [r0, #2]
   11690:	42b3      	cmp	r3, r6
   11692:	d1f3      	bne.n	1167c <hci_cmd_done+0x14>
	if (bt_dev.sent_cmd) {
   11694:	4b33      	ldr	r3, [pc, #204]	; (11764 <hci_cmd_done+0xfc>)
   11696:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
   1169a:	b128      	cbz	r0, 116a8 <hci_cmd_done+0x40>
		net_buf_unref(bt_dev.sent_cmd);
   1169c:	f00a f97e 	bl	1b99c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   116a0:	4b30      	ldr	r3, [pc, #192]	; (11764 <hci_cmd_done+0xfc>)
   116a2:	2200      	movs	r2, #0
   116a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	if (cmd(buf)->state && !status) {
   116a8:	4620      	mov	r0, r4
   116aa:	f00a f83e 	bl	1b72a <net_buf_id>
   116ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   116b2:	4b2b      	ldr	r3, [pc, #172]	; (11760 <hci_cmd_done+0xf8>)
   116b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   116b8:	6843      	ldr	r3, [r0, #4]
   116ba:	b103      	cbz	r3, 116be <hci_cmd_done+0x56>
   116bc:	b1ed      	cbz	r5, 116fa <hci_cmd_done+0x92>
	if (cmd(buf)->sync) {
   116be:	4620      	mov	r0, r4
   116c0:	f00a f833 	bl	1b72a <net_buf_id>
   116c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   116c8:	4b25      	ldr	r3, [pc, #148]	; (11760 <hci_cmd_done+0xf8>)
   116ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   116ce:	6883      	ldr	r3, [r0, #8]
   116d0:	2b00      	cmp	r3, #0
   116d2:	d0d3      	beq.n	1167c <hci_cmd_done+0x14>
		cmd(buf)->status = status;
   116d4:	4620      	mov	r0, r4
   116d6:	f00a f828 	bl	1b72a <net_buf_id>
   116da:	4e21      	ldr	r6, [pc, #132]	; (11760 <hci_cmd_done+0xf8>)
   116dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   116e0:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   116e4:	4620      	mov	r0, r4
   116e6:	f00a f820 	bl	1b72a <net_buf_id>
   116ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   116ee:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   116f2:	68b0      	ldr	r0, [r6, #8]
	z_impl_k_sem_give(sem);
   116f4:	f005 f86a 	bl	167cc <z_impl_k_sem_give>
}
   116f8:	e7c0      	b.n	1167c <hci_cmd_done+0x14>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   116fa:	4620      	mov	r0, r4
   116fc:	f00a f815 	bl	1b72a <net_buf_id>
   11700:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11704:	4b16      	ldr	r3, [pc, #88]	; (11760 <hci_cmd_done+0xf8>)
   11706:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1170a:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1170c:	6819      	ldr	r1, [r3, #0]
   1170e:	685a      	ldr	r2, [r3, #4]
   11710:	7a18      	ldrb	r0, [r3, #8]
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11712:	f002 061f 	and.w	r6, r2, #31
   11716:	2301      	movs	r3, #1
   11718:	40b3      	lsls	r3, r6

	if (val) {
   1171a:	b170      	cbz	r0, 1173a <hci_cmd_done+0xd2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1171c:	0952      	lsrs	r2, r2, #5
   1171e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11722:	f3bf 8f5b 	dmb	ish
   11726:	e852 1f00 	ldrex	r1, [r2]
   1172a:	4319      	orrs	r1, r3
   1172c:	e842 1000 	strex	r0, r1, [r2]
   11730:	2800      	cmp	r0, #0
   11732:	d1f8      	bne.n	11726 <hci_cmd_done+0xbe>
   11734:	f3bf 8f5b 	dmb	ish
   11738:	e7c1      	b.n	116be <hci_cmd_done+0x56>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1173a:	0952      	lsrs	r2, r2, #5
   1173c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   11740:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11742:	f3bf 8f5b 	dmb	ish
   11746:	e852 1f00 	ldrex	r1, [r2]
   1174a:	4019      	ands	r1, r3
   1174c:	e842 1000 	strex	r0, r1, [r2]
   11750:	2800      	cmp	r0, #0
   11752:	d1f8      	bne.n	11746 <hci_cmd_done+0xde>
   11754:	f3bf 8f5b 	dmb	ish
	}
}
   11758:	e7b1      	b.n	116be <hci_cmd_done+0x56>
   1175a:	bf00      	nop
   1175c:	20000a24 	.word	0x20000a24
   11760:	20002398 	.word	0x20002398
   11764:	200004a8 	.word	0x200004a8

00011768 <hci_cmd_status>:
{
   11768:	b538      	push	{r3, r4, r5, lr}
   1176a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1176c:	2104      	movs	r1, #4
   1176e:	3008      	adds	r0, #8
   11770:	f00a f957 	bl	1ba22 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   11774:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   11776:	4622      	mov	r2, r4
   11778:	7801      	ldrb	r1, [r0, #0]
   1177a:	8840      	ldrh	r0, [r0, #2]
   1177c:	f7ff ff74 	bl	11668 <hci_cmd_done>
	if (ncmd) {
   11780:	b905      	cbnz	r5, 11784 <hci_cmd_status+0x1c>
}
   11782:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   11784:	4801      	ldr	r0, [pc, #4]	; (1178c <hci_cmd_status+0x24>)
   11786:	f005 f821 	bl	167cc <z_impl_k_sem_give>
   1178a:	e7fa      	b.n	11782 <hci_cmd_status+0x1a>
   1178c:	20000548 	.word	0x20000548

00011790 <hci_cmd_complete>:
{
   11790:	b538      	push	{r3, r4, r5, lr}
   11792:	4604      	mov	r4, r0
   11794:	2103      	movs	r1, #3
   11796:	3008      	adds	r0, #8
   11798:	f00a f943 	bl	1ba22 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1179c:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   1179e:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   117a0:	4622      	mov	r2, r4
   117a2:	7819      	ldrb	r1, [r3, #0]
   117a4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   117a8:	f7ff ff5e 	bl	11668 <hci_cmd_done>
	if (ncmd) {
   117ac:	b905      	cbnz	r5, 117b0 <hci_cmd_complete+0x20>
}
   117ae:	bd38      	pop	{r3, r4, r5, pc}
   117b0:	4801      	ldr	r0, [pc, #4]	; (117b8 <hci_cmd_complete+0x28>)
   117b2:	f005 f80b 	bl	167cc <z_impl_k_sem_give>
   117b6:	e7fa      	b.n	117ae <hci_cmd_complete+0x1e>
   117b8:	20000548 	.word	0x20000548

000117bc <hci_event>:
{
   117bc:	b538      	push	{r3, r4, r5, lr}
   117be:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   117c0:	8983      	ldrh	r3, [r0, #12]
   117c2:	2b01      	cmp	r3, #1
   117c4:	d91b      	bls.n	117fe <hci_event+0x42>
   117c6:	2102      	movs	r1, #2
   117c8:	f104 0008 	add.w	r0, r4, #8
   117cc:	f00a f929 	bl	1ba22 <net_buf_simple_pull_mem>
   117d0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   117d2:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   117d4:	2b05      	cmp	r3, #5
   117d6:	d022      	beq.n	1181e <hci_event+0x62>
   117d8:	d323      	bcc.n	11822 <hci_event+0x66>
   117da:	3b0e      	subs	r3, #14
   117dc:	b2db      	uxtb	r3, r3
   117de:	2b01      	cmp	r3, #1
   117e0:	d81b      	bhi.n	1181a <hci_event+0x5e>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   117e2:	2301      	movs	r3, #1
   117e4:	f013 0f02 	tst.w	r3, #2
   117e8:	d01d      	beq.n	11826 <hci_event+0x6a>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   117ea:	2303      	movs	r3, #3
   117ec:	4a15      	ldr	r2, [pc, #84]	; (11844 <hci_event+0x88>)
   117ee:	4621      	mov	r1, r4
   117f0:	7828      	ldrb	r0, [r5, #0]
   117f2:	f009 fdd4 	bl	1b39e <handle_event>
	net_buf_unref(buf);
   117f6:	4620      	mov	r0, r4
   117f8:	f00a f8d0 	bl	1b99c <net_buf_unref>
}
   117fc:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   117fe:	f640 1359 	movw	r3, #2393	; 0x959
   11802:	4a11      	ldr	r2, [pc, #68]	; (11848 <hci_event+0x8c>)
   11804:	4911      	ldr	r1, [pc, #68]	; (1184c <hci_event+0x90>)
   11806:	4812      	ldr	r0, [pc, #72]	; (11850 <hci_event+0x94>)
   11808:	f009 fbde 	bl	1afc8 <assert_print>
   1180c:	4040      	eors	r0, r0
   1180e:	f380 8811 	msr	BASEPRI, r0
   11812:	f04f 0003 	mov.w	r0, #3
   11816:	df02      	svc	2
   11818:	e7d5      	b.n	117c6 <hci_event+0xa>
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1181a:	2302      	movs	r3, #2
   1181c:	e7e2      	b.n	117e4 <hci_event+0x28>
	switch (evt) {
   1181e:	2303      	movs	r3, #3
   11820:	e7e0      	b.n	117e4 <hci_event+0x28>
		return BT_HCI_EVT_FLAG_RECV;
   11822:	2302      	movs	r3, #2
   11824:	e7de      	b.n	117e4 <hci_event+0x28>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   11826:	f640 135d 	movw	r3, #2397	; 0x95d
   1182a:	4a07      	ldr	r2, [pc, #28]	; (11848 <hci_event+0x8c>)
   1182c:	4909      	ldr	r1, [pc, #36]	; (11854 <hci_event+0x98>)
   1182e:	4808      	ldr	r0, [pc, #32]	; (11850 <hci_event+0x94>)
   11830:	f009 fbca 	bl	1afc8 <assert_print>
   11834:	4040      	eors	r0, r0
   11836:	f380 8811 	msr	BASEPRI, r0
   1183a:	f04f 0003 	mov.w	r0, #3
   1183e:	df02      	svc	2
   11840:	e7d3      	b.n	117ea <hci_event+0x2e>
   11842:	bf00      	nop
   11844:	0001eb58 	.word	0x0001eb58
   11848:	0001ea34 	.word	0x0001ea34
   1184c:	0001ea68 	.word	0x0001ea68
   11850:	0001ea84 	.word	0x0001ea84
   11854:	0001eaa4 	.word	0x0001eaa4

00011858 <hci_le_meta_event>:
{
   11858:	b510      	push	{r4, lr}
   1185a:	4604      	mov	r4, r0
   1185c:	2101      	movs	r1, #1
   1185e:	3008      	adds	r0, #8
   11860:	f00a f8df 	bl	1ba22 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11864:	2303      	movs	r3, #3
   11866:	4a03      	ldr	r2, [pc, #12]	; (11874 <hci_le_meta_event+0x1c>)
   11868:	4621      	mov	r1, r4
   1186a:	7800      	ldrb	r0, [r0, #0]
   1186c:	f009 fd97 	bl	1b39e <handle_event>
}
   11870:	bd10      	pop	{r4, pc}
   11872:	bf00      	nop
   11874:	0001eb30 	.word	0x0001eb30

00011878 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   11878:	b508      	push	{r3, lr}
   1187a:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   1187c:	4803      	ldr	r0, [pc, #12]	; (1188c <rx_queue_put+0x14>)
   1187e:	f00a f826 	bl	1b8ce <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   11882:	4903      	ldr	r1, [pc, #12]	; (11890 <rx_queue_put+0x18>)
   11884:	4803      	ldr	r0, [pc, #12]	; (11894 <rx_queue_put+0x1c>)
   11886:	f00c fb21 	bl	1decc <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
		BT_ERR("Could not submit rx_work: %d", err);
	}
}
   1188a:	bd08      	pop	{r3, pc}
   1188c:	20000564 	.word	0x20000564
   11890:	200006a4 	.word	0x200006a4
   11894:	20001918 	.word	0x20001918

00011898 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   11898:	b508      	push	{r3, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1189a:	480a      	ldr	r0, [pc, #40]	; (118c4 <rx_work_handler+0x2c>)
   1189c:	f00a f839 	bl	1b912 <net_buf_slist_get>
	if (!buf) {
   118a0:	b160      	cbz	r0, 118bc <rx_work_handler+0x24>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   118a2:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   118a4:	2a01      	cmp	r2, #1
   118a6:	d00a      	beq.n	118be <rx_work_handler+0x26>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   118a8:	f00a f878 	bl	1b99c <net_buf_unref>
	return list->head;
   118ac:	4b06      	ldr	r3, [pc, #24]	; (118c8 <rx_work_handler+0x30>)
   118ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   118b2:	b11b      	cbz	r3, 118bc <rx_work_handler+0x24>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   118b4:	4905      	ldr	r1, [pc, #20]	; (118cc <rx_work_handler+0x34>)
   118b6:	4806      	ldr	r0, [pc, #24]	; (118d0 <rx_work_handler+0x38>)
   118b8:	f00c fb08 	bl	1decc <k_work_submit_to_queue>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   118bc:	bd08      	pop	{r3, pc}
		hci_event(buf);
   118be:	f7ff ff7d 	bl	117bc <hci_event>
		break;
   118c2:	e7f3      	b.n	118ac <rx_work_handler+0x14>
   118c4:	20000564 	.word	0x20000564
   118c8:	200004a8 	.word	0x200004a8
   118cc:	200006a4 	.word	0x200006a4
   118d0:	20001918 	.word	0x20001918

000118d4 <bt_hci_cmd_state_set_init>:
{
   118d4:	b510      	push	{r4, lr}
   118d6:	460c      	mov	r4, r1
	state->target = target;
   118d8:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   118da:	604b      	str	r3, [r1, #4]
	state->val = val;
   118dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   118e0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   118e2:	f009 ff22 	bl	1b72a <net_buf_id>
   118e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   118ea:	4b02      	ldr	r3, [pc, #8]	; (118f4 <bt_hci_cmd_state_set_init+0x20>)
   118ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   118f0:	6044      	str	r4, [r0, #4]
}
   118f2:	bd10      	pop	{r4, pc}
   118f4:	20002398 	.word	0x20002398

000118f8 <bt_hci_cmd_create>:
{
   118f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   118fc:	4606      	mov	r6, r0
   118fe:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   11900:	f04f 32ff 	mov.w	r2, #4294967295
   11904:	f04f 33ff 	mov.w	r3, #4294967295
   11908:	4818      	ldr	r0, [pc, #96]	; (1196c <bt_hci_cmd_create+0x74>)
   1190a:	f009 ffba 	bl	1b882 <net_buf_alloc_fixed>
   1190e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   11910:	f100 0908 	add.w	r9, r0, #8
   11914:	2100      	movs	r1, #0
   11916:	4648      	mov	r0, r9
   11918:	f009 ffd5 	bl	1b8c6 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1191c:	f04f 0800 	mov.w	r8, #0
   11920:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   11924:	4620      	mov	r0, r4
   11926:	f009 ff00 	bl	1b72a <net_buf_id>
   1192a:	4d11      	ldr	r5, [pc, #68]	; (11970 <bt_hci_cmd_create+0x78>)
   1192c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11930:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   11934:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   11936:	4620      	mov	r0, r4
   11938:	f009 fef7 	bl	1b72a <net_buf_id>
   1193c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11940:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   11944:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   11948:	4620      	mov	r0, r4
   1194a:	f009 feee 	bl	1b72a <net_buf_id>
   1194e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11952:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   11956:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   1195a:	2103      	movs	r1, #3
   1195c:	4648      	mov	r0, r9
   1195e:	f00a f847 	bl	1b9f0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   11962:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   11964:	7087      	strb	r7, [r0, #2]
}
   11966:	4620      	mov	r0, r4
   11968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1196c:	20000a24 	.word	0x20000a24
   11970:	20002398 	.word	0x20002398

00011974 <bt_hci_cmd_send_sync>:
{
   11974:	b570      	push	{r4, r5, r6, lr}
   11976:	b086      	sub	sp, #24
   11978:	4615      	mov	r5, r2
	if (!buf) {
   1197a:	460c      	mov	r4, r1
   1197c:	b359      	cbz	r1, 119d6 <bt_hci_cmd_send_sync+0x62>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1197e:	2201      	movs	r2, #1
   11980:	2100      	movs	r1, #0
   11982:	4668      	mov	r0, sp
   11984:	f00c fa73 	bl	1de6e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   11988:	4620      	mov	r0, r4
   1198a:	f009 fece 	bl	1b72a <net_buf_id>
   1198e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11992:	4b26      	ldr	r3, [pc, #152]	; (11a2c <bt_hci_cmd_send_sync+0xb8>)
   11994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   11998:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1199c:	4620      	mov	r0, r4
   1199e:	f00a f823 	bl	1b9e8 <net_buf_ref>
   119a2:	4601      	mov	r1, r0
   119a4:	4822      	ldr	r0, [pc, #136]	; (11a30 <bt_hci_cmd_send_sync+0xbc>)
   119a6:	f009 ffeb 	bl	1b980 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   119aa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   119ae:	2300      	movs	r3, #0
   119b0:	4668      	mov	r0, sp
   119b2:	f004 ff33 	bl	1681c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   119b6:	4606      	mov	r6, r0
   119b8:	b9a8      	cbnz	r0, 119e6 <bt_hci_cmd_send_sync+0x72>
	status = cmd(buf)->status;
   119ba:	4620      	mov	r0, r4
   119bc:	f009 feb5 	bl	1b72a <net_buf_id>
   119c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   119c4:	4b19      	ldr	r3, [pc, #100]	; (11a2c <bt_hci_cmd_send_sync+0xb8>)
   119c6:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
   119ca:	b9f6      	cbnz	r6, 11a0a <bt_hci_cmd_send_sync+0x96>
	if (rsp) {
   119cc:	b345      	cbz	r5, 11a20 <bt_hci_cmd_send_sync+0xac>
		*rsp = buf;
   119ce:	602c      	str	r4, [r5, #0]
	return 0;
   119d0:	2000      	movs	r0, #0
}
   119d2:	b006      	add	sp, #24
   119d4:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   119d6:	f7ff ff8f 	bl	118f8 <bt_hci_cmd_create>
		if (!buf) {
   119da:	4604      	mov	r4, r0
   119dc:	2800      	cmp	r0, #0
   119de:	d1ce      	bne.n	1197e <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
   119e0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   119e4:	e7f5      	b.n	119d2 <bt_hci_cmd_send_sync+0x5e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   119e6:	f240 1347 	movw	r3, #327	; 0x147
   119ea:	4a12      	ldr	r2, [pc, #72]	; (11a34 <bt_hci_cmd_send_sync+0xc0>)
   119ec:	4912      	ldr	r1, [pc, #72]	; (11a38 <bt_hci_cmd_send_sync+0xc4>)
   119ee:	4813      	ldr	r0, [pc, #76]	; (11a3c <bt_hci_cmd_send_sync+0xc8>)
   119f0:	f009 faea 	bl	1afc8 <assert_print>
   119f4:	4631      	mov	r1, r6
   119f6:	4812      	ldr	r0, [pc, #72]	; (11a40 <bt_hci_cmd_send_sync+0xcc>)
   119f8:	f009 fae6 	bl	1afc8 <assert_print>
   119fc:	4040      	eors	r0, r0
   119fe:	f380 8811 	msr	BASEPRI, r0
   11a02:	f04f 0003 	mov.w	r0, #3
   11a06:	df02      	svc	2
   11a08:	e7d7      	b.n	119ba <bt_hci_cmd_send_sync+0x46>
		net_buf_unref(buf);
   11a0a:	4620      	mov	r0, r4
   11a0c:	f009 ffc6 	bl	1b99c <net_buf_unref>
		switch (status) {
   11a10:	2e09      	cmp	r6, #9
   11a12:	d002      	beq.n	11a1a <bt_hci_cmd_send_sync+0xa6>
			return -EIO;
   11a14:	f06f 0004 	mvn.w	r0, #4
   11a18:	e7db      	b.n	119d2 <bt_hci_cmd_send_sync+0x5e>
			return -ECONNREFUSED;
   11a1a:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   11a1e:	e7d8      	b.n	119d2 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
   11a20:	4620      	mov	r0, r4
   11a22:	f009 ffbb 	bl	1b99c <net_buf_unref>
	return 0;
   11a26:	2000      	movs	r0, #0
   11a28:	e7d3      	b.n	119d2 <bt_hci_cmd_send_sync+0x5e>
   11a2a:	bf00      	nop
   11a2c:	20002398 	.word	0x20002398
   11a30:	2000056c 	.word	0x2000056c
   11a34:	0001ea34 	.word	0x0001ea34
   11a38:	0001ead4 	.word	0x0001ead4
   11a3c:	0001ea84 	.word	0x0001ea84
   11a40:	0001eae0 	.word	0x0001eae0

00011a44 <common_init>:
{
   11a44:	b510      	push	{r4, lr}
   11a46:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11a48:	4b22      	ldr	r3, [pc, #136]	; (11ad4 <common_init+0x90>)
   11a4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   11a4e:	689b      	ldr	r3, [r3, #8]
   11a50:	f013 0f01 	tst.w	r3, #1
   11a54:	d10d      	bne.n	11a72 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   11a56:	aa01      	add	r2, sp, #4
   11a58:	2100      	movs	r1, #0
   11a5a:	f640 4003 	movw	r0, #3075	; 0xc03
   11a5e:	f7ff ff89 	bl	11974 <bt_hci_cmd_send_sync>
		if (err) {
   11a62:	4604      	mov	r4, r0
   11a64:	b968      	cbnz	r0, 11a82 <common_init+0x3e>
		hci_reset_complete(rsp);
   11a66:	9801      	ldr	r0, [sp, #4]
   11a68:	f7ff fdc4 	bl	115f4 <hci_reset_complete>
		net_buf_unref(rsp);
   11a6c:	9801      	ldr	r0, [sp, #4]
   11a6e:	f009 ff95 	bl	1b99c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   11a72:	aa01      	add	r2, sp, #4
   11a74:	2100      	movs	r1, #0
   11a76:	f241 0003 	movw	r0, #4099	; 0x1003
   11a7a:	f7ff ff7b 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   11a7e:	4604      	mov	r4, r0
   11a80:	b110      	cbz	r0, 11a88 <common_init+0x44>
}
   11a82:	4620      	mov	r0, r4
   11a84:	b002      	add	sp, #8
   11a86:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   11a88:	9801      	ldr	r0, [sp, #4]
   11a8a:	f7ff fdcf 	bl	1162c <read_local_features_complete>
	net_buf_unref(rsp);
   11a8e:	9801      	ldr	r0, [sp, #4]
   11a90:	f009 ff84 	bl	1b99c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   11a94:	aa01      	add	r2, sp, #4
   11a96:	2100      	movs	r1, #0
   11a98:	f241 0001 	movw	r0, #4097	; 0x1001
   11a9c:	f7ff ff6a 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   11aa0:	4604      	mov	r4, r0
   11aa2:	2800      	cmp	r0, #0
   11aa4:	d1ed      	bne.n	11a82 <common_init+0x3e>
	read_local_ver_complete(rsp);
   11aa6:	9801      	ldr	r0, [sp, #4]
   11aa8:	f7ff fd72 	bl	11590 <read_local_ver_complete>
	net_buf_unref(rsp);
   11aac:	9801      	ldr	r0, [sp, #4]
   11aae:	f009 ff75 	bl	1b99c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   11ab2:	aa01      	add	r2, sp, #4
   11ab4:	2100      	movs	r1, #0
   11ab6:	f241 0002 	movw	r0, #4098	; 0x1002
   11aba:	f7ff ff5b 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   11abe:	4604      	mov	r4, r0
   11ac0:	2800      	cmp	r0, #0
   11ac2:	d1de      	bne.n	11a82 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   11ac4:	9801      	ldr	r0, [sp, #4]
   11ac6:	f7ff fdbb 	bl	11640 <read_supported_commands_complete>
	net_buf_unref(rsp);
   11aca:	9801      	ldr	r0, [sp, #4]
   11acc:	f009 ff66 	bl	1b99c <net_buf_unref>
	return 0;
   11ad0:	e7d7      	b.n	11a82 <common_init+0x3e>
   11ad2:	bf00      	nop
   11ad4:	200004a8 	.word	0x200004a8

00011ad8 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
   11ad8:	4b2b      	ldr	r3, [pc, #172]	; (11b88 <le_init+0xb0>)
   11ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   11ade:	f013 0f40 	tst.w	r3, #64	; 0x40
   11ae2:	d049      	beq.n	11b78 <le_init+0xa0>
{
   11ae4:	b510      	push	{r4, lr}
   11ae6:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11ae8:	aa01      	add	r2, sp, #4
   11aea:	2100      	movs	r1, #0
   11aec:	f242 0003 	movw	r0, #8195	; 0x2003
   11af0:	f7ff ff40 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   11af4:	4603      	mov	r3, r0
   11af6:	b110      	cbz	r0, 11afe <le_init+0x26>
}
   11af8:	4618      	mov	r0, r3
   11afa:	b002      	add	sp, #8
   11afc:	bd10      	pop	{r4, pc}
	read_le_features_complete(rsp);
   11afe:	9801      	ldr	r0, [sp, #4]
   11b00:	f7ff fda8 	bl	11654 <read_le_features_complete>
	net_buf_unref(rsp);
   11b04:	9801      	ldr	r0, [sp, #4]
   11b06:	f009 ff49 	bl	1b99c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11b0a:	4b1f      	ldr	r3, [pc, #124]	; (11b88 <le_init+0xb0>)
   11b0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   11b10:	f013 0f20 	tst.w	r3, #32
   11b14:	d018      	beq.n	11b48 <le_init+0x70>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   11b16:	4b1c      	ldr	r3, [pc, #112]	; (11b88 <le_init+0xb0>)
   11b18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   11b1c:	f013 0f08 	tst.w	r3, #8
   11b20:	d00e      	beq.n	11b40 <le_init+0x68>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11b22:	aa01      	add	r2, sp, #4
   11b24:	2100      	movs	r1, #0
   11b26:	f242 001c 	movw	r0, #8220	; 0x201c
   11b2a:	f7ff ff23 	bl	11974 <bt_hci_cmd_send_sync>
		if (err) {
   11b2e:	4603      	mov	r3, r0
   11b30:	2800      	cmp	r0, #0
   11b32:	d1e1      	bne.n	11af8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   11b34:	9801      	ldr	r0, [sp, #4]
   11b36:	f7ff fd3f 	bl	115b8 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   11b3a:	9801      	ldr	r0, [sp, #4]
   11b3c:	f009 ff2e 	bl	1b99c <net_buf_unref>
	return  le_set_event_mask();
   11b40:	f009 fc3a 	bl	1b3b8 <le_set_event_mask>
   11b44:	4603      	mov	r3, r0
   11b46:	e7d7      	b.n	11af8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11b48:	2102      	movs	r1, #2
   11b4a:	f640 406d 	movw	r0, #3181	; 0xc6d
   11b4e:	f7ff fed3 	bl	118f8 <bt_hci_cmd_create>
		if (!buf) {
   11b52:	4604      	mov	r4, r0
   11b54:	b1a0      	cbz	r0, 11b80 <le_init+0xa8>
   11b56:	2102      	movs	r1, #2
   11b58:	3008      	adds	r0, #8
   11b5a:	f009 ff49 	bl	1b9f0 <net_buf_simple_add>
		cp_le->le = 0x01;
   11b5e:	2301      	movs	r3, #1
   11b60:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   11b62:	2200      	movs	r2, #0
   11b64:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   11b66:	4621      	mov	r1, r4
   11b68:	f640 406d 	movw	r0, #3181	; 0xc6d
   11b6c:	f7ff ff02 	bl	11974 <bt_hci_cmd_send_sync>
		if (err) {
   11b70:	4603      	mov	r3, r0
   11b72:	2800      	cmp	r0, #0
   11b74:	d0cf      	beq.n	11b16 <le_init+0x3e>
   11b76:	e7bf      	b.n	11af8 <le_init+0x20>
		return -ENODEV;
   11b78:	f06f 0312 	mvn.w	r3, #18
}
   11b7c:	4618      	mov	r0, r3
   11b7e:	4770      	bx	lr
			return -ENOBUFS;
   11b80:	f06f 0368 	mvn.w	r3, #104	; 0x68
   11b84:	e7b8      	b.n	11af8 <le_init+0x20>
   11b86:	bf00      	nop
   11b88:	200004a8 	.word	0x200004a8

00011b8c <hci_vs_init>:
{
   11b8c:	b510      	push	{r4, lr}
   11b8e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   11b90:	aa01      	add	r2, sp, #4
   11b92:	2100      	movs	r1, #0
   11b94:	f64f 4001 	movw	r0, #64513	; 0xfc01
   11b98:	f7ff feec 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   11b9c:	b108      	cbz	r0, 11ba2 <hci_vs_init+0x16>
}
   11b9e:	b002      	add	sp, #8
   11ba0:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
   11ba2:	9801      	ldr	r0, [sp, #4]
   11ba4:	f009 fefa 	bl	1b99c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11ba8:	aa01      	add	r2, sp, #4
   11baa:	2100      	movs	r1, #0
   11bac:	f64f 4002 	movw	r0, #64514	; 0xfc02
   11bb0:	f7ff fee0 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   11bb4:	2800      	cmp	r0, #0
   11bb6:	d1f2      	bne.n	11b9e <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
   11bb8:	9b01      	ldr	r3, [sp, #4]
   11bba:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11bbc:	4c11      	ldr	r4, [pc, #68]	; (11c04 <hci_vs_init+0x78>)
   11bbe:	2202      	movs	r2, #2
   11bc0:	3101      	adds	r1, #1
   11bc2:	f104 0075 	add.w	r0, r4, #117	; 0x75
   11bc6:	f009 fb4c 	bl	1b262 <memcpy>
	net_buf_unref(rsp);
   11bca:	9801      	ldr	r0, [sp, #4]
   11bcc:	f009 fee6 	bl	1b99c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   11bd0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   11bd4:	f013 0f04 	tst.w	r3, #4
   11bd8:	d0e1      	beq.n	11b9e <hci_vs_init+0x12>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   11bda:	aa01      	add	r2, sp, #4
   11bdc:	2100      	movs	r1, #0
   11bde:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11be2:	f7ff fec7 	bl	11974 <bt_hci_cmd_send_sync>
		if (err) {
   11be6:	2800      	cmp	r0, #0
   11be8:	d1d9      	bne.n	11b9e <hci_vs_init+0x12>
		rp.feat = (void *)rsp->data;
   11bea:	9b01      	ldr	r3, [sp, #4]
   11bec:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   11bee:	2201      	movs	r2, #1
   11bf0:	4411      	add	r1, r2
   11bf2:	f104 0074 	add.w	r0, r4, #116	; 0x74
   11bf6:	f009 fb34 	bl	1b262 <memcpy>
		net_buf_unref(rsp);
   11bfa:	9801      	ldr	r0, [sp, #4]
   11bfc:	f009 fece 	bl	1b99c <net_buf_unref>
   11c00:	e7cd      	b.n	11b9e <hci_vs_init+0x12>
   11c02:	bf00      	nop
   11c04:	200004a8 	.word	0x200004a8

00011c08 <hci_init>:
{
   11c08:	b508      	push	{r3, lr}
	err = common_init();
   11c0a:	f7ff ff1b 	bl	11a44 <common_init>
	if (err) {
   11c0e:	4603      	mov	r3, r0
   11c10:	b108      	cbz	r0, 11c16 <hci_init+0xe>
}
   11c12:	4618      	mov	r0, r3
   11c14:	bd08      	pop	{r3, pc}
	err = le_init();
   11c16:	f7ff ff5f 	bl	11ad8 <le_init>
	if (err) {
   11c1a:	4603      	mov	r3, r0
   11c1c:	2800      	cmp	r0, #0
   11c1e:	d1f8      	bne.n	11c12 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11c20:	4b0a      	ldr	r3, [pc, #40]	; (11c4c <hci_init+0x44>)
   11c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   11c26:	f013 0f20 	tst.w	r3, #32
   11c2a:	d104      	bne.n	11c36 <hci_init+0x2e>
		err = bt_br_init();
   11c2c:	f009 fbbc 	bl	1b3a8 <bt_br_init>
		if (err) {
   11c30:	4603      	mov	r3, r0
   11c32:	2800      	cmp	r0, #0
   11c34:	d1ed      	bne.n	11c12 <hci_init+0xa>
	err = set_event_mask();
   11c36:	f009 fbe0 	bl	1b3fa <set_event_mask>
	if (err) {
   11c3a:	4603      	mov	r3, r0
   11c3c:	2800      	cmp	r0, #0
   11c3e:	d1e8      	bne.n	11c12 <hci_init+0xa>
	hci_vs_init();
   11c40:	f7ff ffa4 	bl	11b8c <hci_vs_init>
	err = bt_id_init();
   11c44:	f000 fb88 	bl	12358 <bt_id_init>
   11c48:	4603      	mov	r3, r0
	if (err) {
   11c4a:	e7e2      	b.n	11c12 <hci_init+0xa>
   11c4c:	200004a8 	.word	0x200004a8

00011c50 <bt_hci_le_rand>:
{
   11c50:	b570      	push	{r4, r5, r6, lr}
   11c52:	b082      	sub	sp, #8
   11c54:	4606      	mov	r6, r0
   11c56:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11c58:	4b12      	ldr	r3, [pc, #72]	; (11ca4 <bt_hci_le_rand+0x54>)
   11c5a:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
   11c5e:	2b00      	cmp	r3, #0
   11c60:	da1d      	bge.n	11c9e <bt_hci_le_rand+0x4e>
	while (len > 0) {
   11c62:	b1c4      	cbz	r4, 11c96 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   11c64:	4625      	mov	r5, r4
   11c66:	2c08      	cmp	r4, #8
   11c68:	bf28      	it	cs
   11c6a:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11c6c:	aa01      	add	r2, sp, #4
   11c6e:	2100      	movs	r1, #0
   11c70:	f242 0018 	movw	r0, #8216	; 0x2018
   11c74:	f7ff fe7e 	bl	11974 <bt_hci_cmd_send_sync>
		if (err) {
   11c78:	4603      	mov	r3, r0
   11c7a:	b968      	cbnz	r0, 11c98 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   11c7c:	9b01      	ldr	r3, [sp, #4]
   11c7e:	6899      	ldr	r1, [r3, #8]
		memcpy(buffer, rp->rand, count);
   11c80:	462a      	mov	r2, r5
   11c82:	3101      	adds	r1, #1
   11c84:	4630      	mov	r0, r6
   11c86:	f009 faec 	bl	1b262 <memcpy>
		net_buf_unref(rsp);
   11c8a:	9801      	ldr	r0, [sp, #4]
   11c8c:	f009 fe86 	bl	1b99c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   11c90:	442e      	add	r6, r5
		len -= count;
   11c92:	1b64      	subs	r4, r4, r5
   11c94:	e7e5      	b.n	11c62 <bt_hci_le_rand+0x12>
	return 0;
   11c96:	2300      	movs	r3, #0
}
   11c98:	4618      	mov	r0, r3
   11c9a:	b002      	add	sp, #8
   11c9c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   11c9e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   11ca2:	e7f9      	b.n	11c98 <bt_hci_le_rand+0x48>
   11ca4:	200004a8 	.word	0x200004a8

00011ca8 <bt_send>:
{
   11ca8:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   11caa:	4b03      	ldr	r3, [pc, #12]	; (11cb8 <bt_send+0x10>)
   11cac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   11cb0:	695b      	ldr	r3, [r3, #20]
   11cb2:	4798      	blx	r3
}
   11cb4:	bd08      	pop	{r3, pc}
   11cb6:	bf00      	nop
   11cb8:	200004a8 	.word	0x200004a8

00011cbc <send_cmd>:
{
   11cbc:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   11cbe:	2200      	movs	r2, #0
   11cc0:	2300      	movs	r3, #0
   11cc2:	4821      	ldr	r0, [pc, #132]	; (11d48 <send_cmd+0x8c>)
   11cc4:	f009 fde4 	bl	1b890 <net_buf_get>
	BT_ASSERT(buf);
   11cc8:	4604      	mov	r4, r0
   11cca:	b1d8      	cbz	r0, 11d04 <send_cmd+0x48>
   11ccc:	4d1f      	ldr	r5, [pc, #124]	; (11d4c <send_cmd+0x90>)
   11cce:	f04f 32ff 	mov.w	r2, #4294967295
   11cd2:	f04f 33ff 	mov.w	r3, #4294967295
   11cd6:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   11cda:	f004 fd9f 	bl	1681c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   11cde:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   11ce2:	b120      	cbz	r0, 11cee <send_cmd+0x32>
		net_buf_unref(bt_dev.sent_cmd);
   11ce4:	f009 fe5a 	bl	1b99c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11ce8:	2200      	movs	r2, #0
   11cea:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
	bt_dev.sent_cmd = net_buf_ref(buf);
   11cee:	4620      	mov	r0, r4
   11cf0:	f009 fe7a 	bl	1b9e8 <net_buf_ref>
   11cf4:	4b15      	ldr	r3, [pc, #84]	; (11d4c <send_cmd+0x90>)
   11cf6:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
	err = bt_send(buf);
   11cfa:	4620      	mov	r0, r4
   11cfc:	f7ff ffd4 	bl	11ca8 <bt_send>
	if (err) {
   11d00:	b970      	cbnz	r0, 11d20 <send_cmd+0x64>
}
   11d02:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   11d04:	f640 136c 	movw	r3, #2412	; 0x96c
   11d08:	4a11      	ldr	r2, [pc, #68]	; (11d50 <send_cmd+0x94>)
   11d0a:	4912      	ldr	r1, [pc, #72]	; (11d54 <send_cmd+0x98>)
   11d0c:	4812      	ldr	r0, [pc, #72]	; (11d58 <send_cmd+0x9c>)
   11d0e:	f009 f95b 	bl	1afc8 <assert_print>
   11d12:	4040      	eors	r0, r0
   11d14:	f380 8811 	msr	BASEPRI, r0
   11d18:	f04f 0003 	mov.w	r0, #3
   11d1c:	df02      	svc	2
   11d1e:	e7d5      	b.n	11ccc <send_cmd+0x10>
	z_impl_k_sem_give(sem);
   11d20:	480e      	ldr	r0, [pc, #56]	; (11d5c <send_cmd+0xa0>)
   11d22:	f004 fd53 	bl	167cc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   11d26:	4620      	mov	r0, r4
   11d28:	f009 fcff 	bl	1b72a <net_buf_id>
   11d2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11d30:	4b0b      	ldr	r3, [pc, #44]	; (11d60 <send_cmd+0xa4>)
   11d32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   11d36:	4622      	mov	r2, r4
   11d38:	211f      	movs	r1, #31
   11d3a:	8840      	ldrh	r0, [r0, #2]
   11d3c:	f7ff fc94 	bl	11668 <hci_cmd_done>
		net_buf_unref(buf);
   11d40:	4620      	mov	r0, r4
   11d42:	f009 fe2b 	bl	1b99c <net_buf_unref>
   11d46:	e7dc      	b.n	11d02 <send_cmd+0x46>
   11d48:	2000056c 	.word	0x2000056c
   11d4c:	200004a8 	.word	0x200004a8
   11d50:	0001ea34 	.word	0x0001ea34
   11d54:	0001eb00 	.word	0x0001eb00
   11d58:	0001ea84 	.word	0x0001ea84
   11d5c:	20000548 	.word	0x20000548
   11d60:	20002398 	.word	0x20002398

00011d64 <hci_tx_thread>:
{
   11d64:	b508      	push	{r3, lr}
   11d66:	e012      	b.n	11d8e <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
   11d68:	f640 13d3 	movw	r3, #2515	; 0x9d3
   11d6c:	4a0f      	ldr	r2, [pc, #60]	; (11dac <hci_tx_thread+0x48>)
   11d6e:	4910      	ldr	r1, [pc, #64]	; (11db0 <hci_tx_thread+0x4c>)
   11d70:	4810      	ldr	r0, [pc, #64]	; (11db4 <hci_tx_thread+0x50>)
   11d72:	f009 f929 	bl	1afc8 <assert_print>
   11d76:	4040      	eors	r0, r0
   11d78:	f380 8811 	msr	BASEPRI, r0
   11d7c:	f04f 0003 	mov.w	r0, #3
   11d80:	df02      	svc	2
		process_events(events, ev_count);
   11d82:	2101      	movs	r1, #1
   11d84:	480c      	ldr	r0, [pc, #48]	; (11db8 <hci_tx_thread+0x54>)
   11d86:	f009 fb64 	bl	1b452 <process_events>
	z_impl_k_yield();
   11d8a:	f005 f9f5 	bl	17178 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   11d8e:	480a      	ldr	r0, [pc, #40]	; (11db8 <hci_tx_thread+0x54>)
   11d90:	68c3      	ldr	r3, [r0, #12]
   11d92:	f36f 3352 	bfc	r3, #13, #6
   11d96:	60c3      	str	r3, [r0, #12]
	return z_impl_k_poll(events, num_events, timeout);
   11d98:	f04f 32ff 	mov.w	r2, #4294967295
   11d9c:	f04f 33ff 	mov.w	r3, #4294967295
   11da0:	2101      	movs	r1, #1
   11da2:	f005 fe61 	bl	17a68 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   11da6:	2800      	cmp	r0, #0
   11da8:	d1de      	bne.n	11d68 <hci_tx_thread+0x4>
   11daa:	e7ea      	b.n	11d82 <hci_tx_thread+0x1e>
   11dac:	0001ea34 	.word	0x0001ea34
   11db0:	0001ead4 	.word	0x0001ead4
   11db4:	0001ea84 	.word	0x0001ea84
   11db8:	20000690 	.word	0x20000690

00011dbc <hci_event_prio>:
{
   11dbc:	b570      	push	{r4, r5, r6, lr}
   11dbe:	b082      	sub	sp, #8
   11dc0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   11dc2:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   11dc6:	4628      	mov	r0, r5
   11dc8:	f009 fe3b 	bl	1ba42 <net_buf_simple_headroom>
   11dcc:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   11dd0:	89a3      	ldrh	r3, [r4, #12]
   11dd2:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11dd6:	2b01      	cmp	r3, #1
   11dd8:	d923      	bls.n	11e22 <hci_event_prio+0x66>
	return net_buf_simple_pull_mem(&buf->b, len);
   11dda:	2102      	movs	r1, #2
   11ddc:	4628      	mov	r0, r5
   11dde:	f009 fe20 	bl	1ba22 <net_buf_simple_pull_mem>
   11de2:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   11de4:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   11de6:	2b05      	cmp	r3, #5
   11de8:	d02b      	beq.n	11e42 <hci_event_prio+0x86>
   11dea:	d32c      	bcc.n	11e46 <hci_event_prio+0x8a>
   11dec:	3b0e      	subs	r3, #14
   11dee:	b2db      	uxtb	r3, r3
   11df0:	2b01      	cmp	r3, #1
   11df2:	d824      	bhi.n	11e3e <hci_event_prio+0x82>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   11df4:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   11df6:	f016 0f01 	tst.w	r6, #1
   11dfa:	d026      	beq.n	11e4a <hci_event_prio+0x8e>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   11dfc:	2302      	movs	r3, #2
   11dfe:	4a1c      	ldr	r2, [pc, #112]	; (11e70 <hci_event_prio+0xb4>)
   11e00:	4621      	mov	r1, r4
   11e02:	7828      	ldrb	r0, [r5, #0]
   11e04:	f009 facb 	bl	1b39e <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   11e08:	f016 0f02 	tst.w	r6, #2
   11e0c:	d02b      	beq.n	11e66 <hci_event_prio+0xaa>
	buf->data = buf->__buf + state->offset;
   11e0e:	6923      	ldr	r3, [r4, #16]
   11e10:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   11e14:	4413      	add	r3, r2
   11e16:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   11e18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11e1c:	81a3      	strh	r3, [r4, #12]
}
   11e1e:	b002      	add	sp, #8
   11e20:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11e22:	f640 536f 	movw	r3, #3439	; 0xd6f
   11e26:	4a13      	ldr	r2, [pc, #76]	; (11e74 <hci_event_prio+0xb8>)
   11e28:	4913      	ldr	r1, [pc, #76]	; (11e78 <hci_event_prio+0xbc>)
   11e2a:	4814      	ldr	r0, [pc, #80]	; (11e7c <hci_event_prio+0xc0>)
   11e2c:	f009 f8cc 	bl	1afc8 <assert_print>
   11e30:	4040      	eors	r0, r0
   11e32:	f380 8811 	msr	BASEPRI, r0
   11e36:	f04f 0003 	mov.w	r0, #3
   11e3a:	df02      	svc	2
   11e3c:	e7cd      	b.n	11dda <hci_event_prio+0x1e>
		return BT_HCI_EVT_FLAG_RECV;
   11e3e:	2602      	movs	r6, #2
   11e40:	e7d9      	b.n	11df6 <hci_event_prio+0x3a>
	switch (evt) {
   11e42:	2603      	movs	r6, #3
   11e44:	e7d7      	b.n	11df6 <hci_event_prio+0x3a>
		return BT_HCI_EVT_FLAG_RECV;
   11e46:	2602      	movs	r6, #2
   11e48:	e7d5      	b.n	11df6 <hci_event_prio+0x3a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   11e4a:	f640 5373 	movw	r3, #3443	; 0xd73
   11e4e:	4a09      	ldr	r2, [pc, #36]	; (11e74 <hci_event_prio+0xb8>)
   11e50:	490b      	ldr	r1, [pc, #44]	; (11e80 <hci_event_prio+0xc4>)
   11e52:	480a      	ldr	r0, [pc, #40]	; (11e7c <hci_event_prio+0xc0>)
   11e54:	f009 f8b8 	bl	1afc8 <assert_print>
   11e58:	4040      	eors	r0, r0
   11e5a:	f380 8811 	msr	BASEPRI, r0
   11e5e:	f04f 0003 	mov.w	r0, #3
   11e62:	df02      	svc	2
   11e64:	e7ca      	b.n	11dfc <hci_event_prio+0x40>
		net_buf_unref(buf);
   11e66:	4620      	mov	r0, r4
   11e68:	f009 fd98 	bl	1b99c <net_buf_unref>
}
   11e6c:	e7d7      	b.n	11e1e <hci_event_prio+0x62>
   11e6e:	bf00      	nop
   11e70:	0001eb70 	.word	0x0001eb70
   11e74:	0001ea34 	.word	0x0001ea34
   11e78:	0001ea68 	.word	0x0001ea68
   11e7c:	0001ea84 	.word	0x0001ea84
   11e80:	0001eb04 	.word	0x0001eb04

00011e84 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   11e84:	4b0a      	ldr	r3, [pc, #40]	; (11eb0 <bt_hci_driver_register+0x2c>)
   11e86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   11e8a:	b943      	cbnz	r3, 11e9e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   11e8c:	68c3      	ldr	r3, [r0, #12]
   11e8e:	b14b      	cbz	r3, 11ea4 <bt_hci_driver_register+0x20>
   11e90:	6943      	ldr	r3, [r0, #20]
   11e92:	b153      	cbz	r3, 11eaa <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   11e94:	4b06      	ldr	r3, [pc, #24]	; (11eb0 <bt_hci_driver_register+0x2c>)
   11e96:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
	return 0;
   11e9a:	2000      	movs	r0, #0
   11e9c:	4770      	bx	lr
		return -EALREADY;
   11e9e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11ea2:	4770      	bx	lr
		return -EINVAL;
   11ea4:	f06f 0015 	mvn.w	r0, #21
   11ea8:	4770      	bx	lr
   11eaa:	f06f 0015 	mvn.w	r0, #21
}
   11eae:	4770      	bx	lr
   11eb0:	200004a8 	.word	0x200004a8

00011eb4 <bt_finalize_init>:
{
   11eb4:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11eb6:	4b08      	ldr	r3, [pc, #32]	; (11ed8 <bt_finalize_init+0x24>)
   11eb8:	f3bf 8f5b 	dmb	ish
   11ebc:	e853 2f00 	ldrex	r2, [r3]
   11ec0:	f042 0204 	orr.w	r2, r2, #4
   11ec4:	e843 2100 	strex	r1, r2, [r3]
   11ec8:	2900      	cmp	r1, #0
   11eca:	d1f7      	bne.n	11ebc <bt_finalize_init+0x8>
   11ecc:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   11ed0:	2000      	movs	r0, #0
   11ed2:	f000 fbe1 	bl	12698 <bt_le_scan_update>
}
   11ed6:	bd08      	pop	{r3, pc}
   11ed8:	20000530 	.word	0x20000530

00011edc <init_work>:
{
   11edc:	b508      	push	{r3, lr}
	err = bt_init();
   11ede:	f009 faf5 	bl	1b4cc <bt_init>
	if (ready_cb) {
   11ee2:	4b02      	ldr	r3, [pc, #8]	; (11eec <init_work+0x10>)
   11ee4:	681b      	ldr	r3, [r3, #0]
   11ee6:	b103      	cbz	r3, 11eea <init_work+0xe>
		ready_cb(err);
   11ee8:	4798      	blx	r3
}
   11eea:	bd08      	pop	{r3, pc}
   11eec:	200023b0 	.word	0x200023b0

00011ef0 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   11ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ef2:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
   11ef4:	4b35      	ldr	r3, [pc, #212]	; (11fcc <bt_enable+0xdc>)
   11ef6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   11efa:	2b00      	cmp	r3, #0
   11efc:	d060      	beq.n	11fc0 <bt_enable+0xd0>
   11efe:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11f00:	4b33      	ldr	r3, [pc, #204]	; (11fd0 <bt_enable+0xe0>)
   11f02:	f3bf 8f5b 	dmb	ish
   11f06:	e853 2f00 	ldrex	r2, [r3]
   11f0a:	f022 0202 	bic.w	r2, r2, #2
   11f0e:	e843 2100 	strex	r1, r2, [r3]
   11f12:	2900      	cmp	r1, #0
   11f14:	d1f7      	bne.n	11f06 <bt_enable+0x16>
   11f16:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11f1a:	f3bf 8f5b 	dmb	ish
   11f1e:	e853 2f00 	ldrex	r2, [r3]
   11f22:	f042 0101 	orr.w	r1, r2, #1
   11f26:	e843 1000 	strex	r0, r1, [r3]
   11f2a:	2800      	cmp	r0, #0
   11f2c:	d1f7      	bne.n	11f1e <bt_enable+0x2e>
   11f2e:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11f32:	f012 0f01 	tst.w	r2, #1
   11f36:	d146      	bne.n	11fc6 <bt_enable+0xd6>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   11f38:	4b26      	ldr	r3, [pc, #152]	; (11fd4 <bt_enable+0xe4>)
   11f3a:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   11f3c:	4e23      	ldr	r6, [pc, #140]	; (11fcc <bt_enable+0xdc>)
   11f3e:	2201      	movs	r2, #1
   11f40:	4611      	mov	r1, r2
   11f42:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
   11f46:	f00b ff92 	bl	1de6e <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   11f4a:	f106 00c4 	add.w	r0, r6, #196	; 0xc4
   11f4e:	f00b ff38 	bl	1ddc2 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11f52:	4f21      	ldr	r7, [pc, #132]	; (11fd8 <bt_enable+0xe8>)
   11f54:	2200      	movs	r2, #0
   11f56:	2300      	movs	r3, #0
   11f58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11f5c:	2400      	movs	r4, #0
   11f5e:	9404      	str	r4, [sp, #16]
   11f60:	f06f 0308 	mvn.w	r3, #8
   11f64:	9303      	str	r3, [sp, #12]
   11f66:	9402      	str	r4, [sp, #8]
   11f68:	9401      	str	r4, [sp, #4]
   11f6a:	9400      	str	r4, [sp, #0]
   11f6c:	4b1b      	ldr	r3, [pc, #108]	; (11fdc <bt_enable+0xec>)
   11f6e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   11f72:	491b      	ldr	r1, [pc, #108]	; (11fe0 <bt_enable+0xf0>)
   11f74:	4638      	mov	r0, r7
   11f76:	f00b fe5a 	bl	1dc2e <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11f7a:	491a      	ldr	r1, [pc, #104]	; (11fe4 <bt_enable+0xf4>)
   11f7c:	4638      	mov	r0, r7
   11f7e:	f004 fa37 	bl	163f0 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_start(&bt_workq, rx_thread_stack,
   11f82:	4f19      	ldr	r7, [pc, #100]	; (11fe8 <bt_enable+0xf8>)
   11f84:	9400      	str	r4, [sp, #0]
   11f86:	f06f 0307 	mvn.w	r3, #7
   11f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11f8e:	4917      	ldr	r1, [pc, #92]	; (11fec <bt_enable+0xfc>)
   11f90:	4638      	mov	r0, r7
   11f92:	f004 fd95 	bl	16ac0 <k_work_queue_start>
   11f96:	4916      	ldr	r1, [pc, #88]	; (11ff0 <bt_enable+0x100>)
   11f98:	4638      	mov	r0, r7
   11f9a:	f004 fa29 	bl	163f0 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   11f9e:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
   11fa2:	68db      	ldr	r3, [r3, #12]
   11fa4:	4798      	blx	r3
	if (err) {
   11fa6:	4604      	mov	r4, r0
   11fa8:	b918      	cbnz	r0, 11fb2 <bt_enable+0xc2>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   11faa:	b12d      	cbz	r5, 11fb8 <bt_enable+0xc8>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   11fac:	4811      	ldr	r0, [pc, #68]	; (11ff4 <bt_enable+0x104>)
   11fae:	f004 fd7f 	bl	16ab0 <k_work_submit>
	return 0;
}
   11fb2:	4620      	mov	r0, r4
   11fb4:	b009      	add	sp, #36	; 0x24
   11fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return bt_init();
   11fb8:	f009 fa88 	bl	1b4cc <bt_init>
   11fbc:	4604      	mov	r4, r0
   11fbe:	e7f8      	b.n	11fb2 <bt_enable+0xc2>
		return -ENODEV;
   11fc0:	f06f 0412 	mvn.w	r4, #18
   11fc4:	e7f5      	b.n	11fb2 <bt_enable+0xc2>
		return -EALREADY;
   11fc6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   11fca:	e7f2      	b.n	11fb2 <bt_enable+0xc2>
   11fcc:	200004a8 	.word	0x200004a8
   11fd0:	20000530 	.word	0x20000530
   11fd4:	200023b0 	.word	0x200023b0
   11fd8:	200019f0 	.word	0x200019f0
   11fdc:	00011d65 	.word	0x00011d65
   11fe0:	20004040 	.word	0x20004040
   11fe4:	0001eb20 	.word	0x0001eb20
   11fe8:	20001918 	.word	0x20001918
   11fec:	20003c00 	.word	0x20003c00
   11ff0:	0001eb28 	.word	0x0001eb28
   11ff4:	20000520 	.word	0x20000520

00011ff8 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11ff8:	f3bf 8f5b 	dmb	ish
   11ffc:	4b03      	ldr	r3, [pc, #12]	; (1200c <bt_is_ready+0x14>)
   11ffe:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   12002:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12006:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1200a:	4770      	bx	lr
   1200c:	200004a8 	.word	0x200004a8

00012010 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   12010:	b570      	push	{r4, r5, r6, lr}
   12012:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   12014:	2400      	movs	r4, #0
   12016:	e001      	b.n	1201c <id_find+0xc>
   12018:	3401      	adds	r4, #1
   1201a:	b2e4      	uxtb	r4, r4
   1201c:	4b09      	ldr	r3, [pc, #36]	; (12044 <id_find+0x34>)
   1201e:	79db      	ldrb	r3, [r3, #7]
   12020:	42a3      	cmp	r3, r4
   12022:	d90b      	bls.n	1203c <id_find+0x2c>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   12024:	4626      	mov	r6, r4
   12026:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1202a:	2207      	movs	r2, #7
   1202c:	4905      	ldr	r1, [pc, #20]	; (12044 <id_find+0x34>)
   1202e:	4419      	add	r1, r3
   12030:	4628      	mov	r0, r5
   12032:	f009 f8f1 	bl	1b218 <memcmp>
   12036:	2800      	cmp	r0, #0
   12038:	d1ee      	bne.n	12018 <id_find+0x8>
   1203a:	e001      	b.n	12040 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   1203c:	f06f 0601 	mvn.w	r6, #1
}
   12040:	4630      	mov	r0, r6
   12042:	bd70      	pop	{r4, r5, r6, pc}
   12044:	200004a8 	.word	0x200004a8

00012048 <set_random_address>:
{
   12048:	b570      	push	{r4, r5, r6, lr}
   1204a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1204c:	2206      	movs	r2, #6
   1204e:	4914      	ldr	r1, [pc, #80]	; (120a0 <set_random_address+0x58>)
   12050:	f009 f8e2 	bl	1b218 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   12054:	4605      	mov	r5, r0
   12056:	b908      	cbnz	r0, 1205c <set_random_address+0x14>
}
   12058:	4628      	mov	r0, r5
   1205a:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1205c:	2106      	movs	r1, #6
   1205e:	f242 0005 	movw	r0, #8197	; 0x2005
   12062:	f7ff fc49 	bl	118f8 <bt_hci_cmd_create>
	if (!buf) {
   12066:	4605      	mov	r5, r0
   12068:	b1b8      	cbz	r0, 1209a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1206a:	2206      	movs	r2, #6
   1206c:	4621      	mov	r1, r4
   1206e:	3008      	adds	r0, #8
   12070:	f009 fcc4 	bl	1b9fc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   12074:	2200      	movs	r2, #0
   12076:	4629      	mov	r1, r5
   12078:	f242 0005 	movw	r0, #8197	; 0x2005
   1207c:	f7ff fc7a 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   12080:	4605      	mov	r5, r0
   12082:	2800      	cmp	r0, #0
   12084:	d1e8      	bne.n	12058 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   12086:	4e06      	ldr	r6, [pc, #24]	; (120a0 <set_random_address+0x58>)
   12088:	2206      	movs	r2, #6
   1208a:	4621      	mov	r1, r4
   1208c:	4630      	mov	r0, r6
   1208e:	f009 f8e8 	bl	1b262 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   12092:	2301      	movs	r3, #1
   12094:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   12098:	e7de      	b.n	12058 <set_random_address+0x10>
		return -ENOBUFS;
   1209a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1209e:	e7db      	b.n	12058 <set_random_address+0x10>
   120a0:	200004c5 	.word	0x200004c5

000120a4 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   120a4:	b530      	push	{r4, r5, lr}
   120a6:	b085      	sub	sp, #20
   120a8:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   120aa:	460d      	mov	r5, r1
   120ac:	b149      	cbz	r1, 120c2 <id_create+0x1e>
   120ae:	2300      	movs	r3, #0
   120b0:	9302      	str	r3, [sp, #8]
   120b2:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   120b6:	2207      	movs	r2, #7
   120b8:	a902      	add	r1, sp, #8
   120ba:	4628      	mov	r0, r5
   120bc:	f009 f8ac 	bl	1b218 <memcmp>
   120c0:	b9e0      	cbnz	r0, 120fc <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   120c2:	4668      	mov	r0, sp
   120c4:	f009 f93f 	bl	1b346 <bt_addr_le_create_static>
			if (err) {
   120c8:	4603      	mov	r3, r0
   120ca:	b9a0      	cbnz	r0, 120f6 <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   120cc:	4668      	mov	r0, sp
   120ce:	f7ff ff9f 	bl	12010 <id_find>
   120d2:	2800      	cmp	r0, #0
   120d4:	daf5      	bge.n	120c2 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   120d6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   120da:	4b0d      	ldr	r3, [pc, #52]	; (12110 <id_create+0x6c>)
   120dc:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   120de:	2207      	movs	r2, #7
   120e0:	4669      	mov	r1, sp
   120e2:	4620      	mov	r0, r4
   120e4:	f009 f8bd 	bl	1b262 <memcpy>

		if (addr) {
   120e8:	b125      	cbz	r5, 120f4 <id_create+0x50>
   120ea:	2207      	movs	r2, #7
   120ec:	4621      	mov	r1, r4
   120ee:	4628      	mov	r0, r5
   120f0:	f009 f8b7 	bl	1b262 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   120f4:	2300      	movs	r3, #0
}
   120f6:	4618      	mov	r0, r3
   120f8:	b005      	add	sp, #20
   120fa:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   120fc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   12100:	2207      	movs	r2, #7
   12102:	4629      	mov	r1, r5
   12104:	4802      	ldr	r0, [pc, #8]	; (12110 <id_create+0x6c>)
   12106:	4420      	add	r0, r4
   12108:	f009 f8ab 	bl	1b262 <memcpy>
}
   1210c:	e7f2      	b.n	120f4 <id_create+0x50>
   1210e:	bf00      	nop
   12110:	200004a8 	.word	0x200004a8

00012114 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   12114:	b570      	push	{r4, r5, r6, lr}
   12116:	b088      	sub	sp, #32
   12118:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1211a:	4605      	mov	r5, r0
   1211c:	b1c0      	cbz	r0, 12150 <bt_id_create+0x3c>
   1211e:	2300      	movs	r3, #0
   12120:	9304      	str	r3, [sp, #16]
   12122:	f8cd 3013 	str.w	r3, [sp, #19]
	return memcmp(a, b, sizeof(*a));
   12126:	2207      	movs	r2, #7
   12128:	a904      	add	r1, sp, #16
   1212a:	f009 f875 	bl	1b218 <memcmp>
   1212e:	b178      	cbz	r0, 12150 <bt_id_create+0x3c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   12130:	782b      	ldrb	r3, [r5, #0]
   12132:	2b01      	cmp	r3, #1
   12134:	d136      	bne.n	121a4 <bt_id_create+0x90>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   12136:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   12138:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1213c:	2bc0      	cmp	r3, #192	; 0xc0
   1213e:	d002      	beq.n	12146 <bt_id_create+0x32>
			BT_ERR("Only static random identity address supported");
			return -EINVAL;
   12140:	f06f 0015 	mvn.w	r0, #21
   12144:	e02c      	b.n	121a0 <bt_id_create+0x8c>
		}

		if (id_find(addr) >= 0) {
   12146:	4628      	mov	r0, r5
   12148:	f7ff ff62 	bl	12010 <id_find>
   1214c:	2800      	cmp	r0, #0
   1214e:	da2c      	bge.n	121aa <bt_id_create+0x96>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   12150:	bb8c      	cbnz	r4, 121b6 <bt_id_create+0xa2>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   12152:	4b1c      	ldr	r3, [pc, #112]	; (121c4 <bt_id_create+0xb0>)
   12154:	79db      	ldrb	r3, [r3, #7]
   12156:	2b01      	cmp	r3, #1
   12158:	d030      	beq.n	121bc <bt_id_create+0xa8>
   1215a:	f3bf 8f5b 	dmb	ish
   1215e:	4b1a      	ldr	r3, [pc, #104]	; (121c8 <bt_id_create+0xb4>)
   12160:	681b      	ldr	r3, [r3, #0]
   12162:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12166:	f013 0f01 	tst.w	r3, #1
   1216a:	d10e      	bne.n	1218a <bt_id_create+0x76>
		uint8_t zero_irk[16] = { 0 };
   1216c:	2300      	movs	r3, #0
   1216e:	9300      	str	r3, [sp, #0]
   12170:	9301      	str	r3, [sp, #4]
   12172:	9302      	str	r3, [sp, #8]
   12174:	9303      	str	r3, [sp, #12]

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   12176:	b1dd      	cbz	r5, 121b0 <bt_id_create+0x9c>
   12178:	9306      	str	r3, [sp, #24]
   1217a:	f8cd 301b 	str.w	r3, [sp, #27]
   1217e:	2207      	movs	r2, #7
   12180:	a906      	add	r1, sp, #24
   12182:	4628      	mov	r0, r5
   12184:	f009 f848 	bl	1b218 <memcmp>
   12188:	b190      	cbz	r0, 121b0 <bt_id_create+0x9c>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   1218a:	4b0e      	ldr	r3, [pc, #56]	; (121c4 <bt_id_create+0xb0>)
   1218c:	79de      	ldrb	r6, [r3, #7]
   1218e:	1c72      	adds	r2, r6, #1
   12190:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   12192:	4622      	mov	r2, r4
   12194:	4629      	mov	r1, r5
   12196:	4630      	mov	r0, r6
   12198:	f7ff ff84 	bl	120a4 <id_create>
	if (err) {
   1219c:	b900      	cbnz	r0, 121a0 <bt_id_create+0x8c>
		return err;
	}

	return new_id;
   1219e:	4630      	mov	r0, r6
}
   121a0:	b008      	add	sp, #32
   121a2:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   121a4:	f06f 0015 	mvn.w	r0, #21
   121a8:	e7fa      	b.n	121a0 <bt_id_create+0x8c>
			return -EALREADY;
   121aa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   121ae:	e7f7      	b.n	121a0 <bt_id_create+0x8c>
			return -EINVAL;
   121b0:	f06f 0015 	mvn.w	r0, #21
   121b4:	e7f4      	b.n	121a0 <bt_id_create+0x8c>
		return -EINVAL;
   121b6:	f06f 0015 	mvn.w	r0, #21
   121ba:	e7f1      	b.n	121a0 <bt_id_create+0x8c>
		return -ENOMEM;
   121bc:	f06f 000b 	mvn.w	r0, #11
   121c0:	e7ee      	b.n	121a0 <bt_id_create+0x8c>
   121c2:	bf00      	nop
   121c4:	200004a8 	.word	0x200004a8
   121c8:	20000530 	.word	0x20000530

000121cc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   121cc:	b530      	push	{r4, r5, lr}
   121ce:	b087      	sub	sp, #28
   121d0:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   121d2:	aa01      	add	r2, sp, #4
   121d4:	2100      	movs	r1, #0
   121d6:	f241 0009 	movw	r0, #4105	; 0x1009
   121da:	f7ff fbcb 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   121de:	b110      	cbz	r0, 121e6 <bt_id_read_public_addr+0x1a>
		BT_WARN("Failed to read public address");
		return 0U;
   121e0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   121e2:	b007      	add	sp, #28
   121e4:	bd30      	pop	{r4, r5, pc}
	rp = (void *)rsp->data;
   121e6:	9b01      	ldr	r3, [sp, #4]
   121e8:	689c      	ldr	r4, [r3, #8]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   121ea:	3401      	adds	r4, #1
   121ec:	2300      	movs	r3, #0
   121ee:	9302      	str	r3, [sp, #8]
   121f0:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   121f4:	2206      	movs	r2, #6
   121f6:	a902      	add	r1, sp, #8
   121f8:	4620      	mov	r0, r4
   121fa:	f009 f80d 	bl	1b218 <memcmp>
   121fe:	b158      	cbz	r0, 12218 <bt_id_read_public_addr+0x4c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   12200:	4b0e      	ldr	r3, [pc, #56]	; (1223c <bt_id_read_public_addr+0x70>)
   12202:	e893 0003 	ldmia.w	r3, {r0, r1}
   12206:	9004      	str	r0, [sp, #16]
   12208:	f8ad 1014 	strh.w	r1, [sp, #20]
   1220c:	2206      	movs	r2, #6
   1220e:	a904      	add	r1, sp, #16
   12210:	4620      	mov	r0, r4
   12212:	f009 f801 	bl	1b218 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12216:	b920      	cbnz	r0, 12222 <bt_id_read_public_addr+0x56>
		net_buf_unref(rsp);
   12218:	9801      	ldr	r0, [sp, #4]
   1221a:	f009 fbbf 	bl	1b99c <net_buf_unref>
		return 0U;
   1221e:	2000      	movs	r0, #0
   12220:	e7df      	b.n	121e2 <bt_id_read_public_addr+0x16>
	memcpy(dst, src, sizeof(*dst));
   12222:	2206      	movs	r2, #6
   12224:	4621      	mov	r1, r4
   12226:	1c68      	adds	r0, r5, #1
   12228:	f009 f81b 	bl	1b262 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   1222c:	2300      	movs	r3, #0
   1222e:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   12230:	9801      	ldr	r0, [sp, #4]
   12232:	f009 fbb3 	bl	1b99c <net_buf_unref>
	return 1U;
   12236:	2001      	movs	r0, #1
   12238:	e7d3      	b.n	121e2 <bt_id_read_public_addr+0x16>
   1223a:	bf00      	nop
   1223c:	0001e850 	.word	0x0001e850

00012240 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   12240:	b500      	push	{lr}
   12242:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   12244:	4668      	mov	r0, sp
   12246:	f7ff ffc1 	bl	121cc <bt_id_read_public_addr>
   1224a:	4b06      	ldr	r3, [pc, #24]	; (12264 <bt_setup_public_id_addr+0x24>)
   1224c:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1224e:	b918      	cbnz	r0, 12258 <bt_setup_public_id_addr+0x18>
		return 0;
   12250:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   12252:	b003      	add	sp, #12
   12254:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   12258:	2200      	movs	r2, #0
   1225a:	4669      	mov	r1, sp
   1225c:	4610      	mov	r0, r2
   1225e:	f7ff ff21 	bl	120a4 <id_create>
   12262:	e7f6      	b.n	12252 <bt_setup_public_id_addr+0x12>
   12264:	200004a8 	.word	0x200004a8

00012268 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   12268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1226c:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1226e:	4b15      	ldr	r3, [pc, #84]	; (122c4 <bt_read_static_addr+0x5c>)
   12270:	f893 5076 	ldrb.w	r5, [r3, #118]	; 0x76
   12274:	f015 0501 	ands.w	r5, r5, #1
   12278:	d103      	bne.n	12282 <bt_read_static_addr+0x1a>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   1227a:	4628      	mov	r0, r5
   1227c:	b002      	add	sp, #8
   1227e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12282:	4606      	mov	r6, r0
   12284:	4688      	mov	r8, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   12286:	aa01      	add	r2, sp, #4
   12288:	2100      	movs	r1, #0
   1228a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1228e:	f7ff fb71 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   12292:	4604      	mov	r4, r0
   12294:	b998      	cbnz	r0, 122be <bt_read_static_addr+0x56>
	rp = (void *)rsp->data;
   12296:	9b01      	ldr	r3, [sp, #4]
   12298:	689f      	ldr	r7, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1229a:	787d      	ldrb	r5, [r7, #1]
   1229c:	4545      	cmp	r5, r8
   1229e:	bf28      	it	cs
   122a0:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   122a2:	e006      	b.n	122b2 <bt_read_static_addr+0x4a>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   122a4:	2216      	movs	r2, #22
   122a6:	1cb9      	adds	r1, r7, #2
   122a8:	fb02 6004 	mla	r0, r2, r4, r6
   122ac:	f008 ffd9 	bl	1b262 <memcpy>
	for (i = 0; i < cnt; i++) {
   122b0:	3401      	adds	r4, #1
   122b2:	42a5      	cmp	r5, r4
   122b4:	dcf6      	bgt.n	122a4 <bt_read_static_addr+0x3c>
	net_buf_unref(rsp);
   122b6:	9801      	ldr	r0, [sp, #4]
   122b8:	f009 fb70 	bl	1b99c <net_buf_unref>
	if (!cnt) {
   122bc:	e7dd      	b.n	1227a <bt_read_static_addr+0x12>
		return 0;
   122be:	2500      	movs	r5, #0
   122c0:	e7db      	b.n	1227a <bt_read_static_addr+0x12>
   122c2:	bf00      	nop
   122c4:	200004a8 	.word	0x200004a8

000122c8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   122c8:	b510      	push	{r4, lr}
   122ca:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   122cc:	4b17      	ldr	r3, [pc, #92]	; (1232c <bt_setup_random_id_addr+0x64>)
   122ce:	79dc      	ldrb	r4, [r3, #7]
   122d0:	b934      	cbnz	r4, 122e0 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   122d2:	2101      	movs	r1, #1
   122d4:	a802      	add	r0, sp, #8
   122d6:	f7ff ffc7 	bl	12268 <bt_read_static_addr>
   122da:	4b14      	ldr	r3, [pc, #80]	; (1232c <bt_setup_random_id_addr+0x64>)
   122dc:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   122de:	b948      	cbnz	r0, 122f4 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   122e0:	2100      	movs	r1, #0
   122e2:	4608      	mov	r0, r1
   122e4:	f7ff ff16 	bl	12114 <bt_id_create>
   122e8:	4603      	mov	r3, r0
}
   122ea:	4618      	mov	r0, r3
   122ec:	b008      	add	sp, #32
   122ee:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   122f0:	3401      	adds	r4, #1
   122f2:	b2e4      	uxtb	r4, r4
   122f4:	4b0d      	ldr	r3, [pc, #52]	; (1232c <bt_setup_random_id_addr+0x64>)
   122f6:	79db      	ldrb	r3, [r3, #7]
   122f8:	42a3      	cmp	r3, r4
   122fa:	d914      	bls.n	12326 <bt_setup_random_id_addr+0x5e>
   122fc:	2206      	movs	r2, #6
   122fe:	2116      	movs	r1, #22
   12300:	ab02      	add	r3, sp, #8
   12302:	fb01 3104 	mla	r1, r1, r4, r3
   12306:	f10d 0001 	add.w	r0, sp, #1
   1230a:	f008 ffaa 	bl	1b262 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1230e:	2301      	movs	r3, #1
   12310:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   12314:	2200      	movs	r2, #0
   12316:	4669      	mov	r1, sp
   12318:	4620      	mov	r0, r4
   1231a:	f7ff fec3 	bl	120a4 <id_create>
				if (err) {
   1231e:	4603      	mov	r3, r0
   12320:	2800      	cmp	r0, #0
   12322:	d0e5      	beq.n	122f0 <bt_setup_random_id_addr+0x28>
   12324:	e7e1      	b.n	122ea <bt_setup_random_id_addr+0x22>
			return 0;
   12326:	2300      	movs	r3, #0
   12328:	e7df      	b.n	122ea <bt_setup_random_id_addr+0x22>
   1232a:	bf00      	nop
   1232c:	200004a8 	.word	0x200004a8

00012330 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   12330:	b510      	push	{r4, lr}
   12332:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   12334:	4b07      	ldr	r3, [pc, #28]	; (12354 <bt_id_set_scan_own_addr+0x24>)
   12336:	781b      	ldrb	r3, [r3, #0]
   12338:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   1233a:	f009 f8f7 	bl	1b52c <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   1233e:	b108      	cbz	r0, 12344 <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
   12340:	2000      	movs	r0, #0
}
   12342:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   12344:	f009 f8f6 	bl	1b534 <bt_id_set_private_addr>
			if (err) {
   12348:	2800      	cmp	r0, #0
   1234a:	d1fa      	bne.n	12342 <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1234c:	2301      	movs	r3, #1
   1234e:	7023      	strb	r3, [r4, #0]
   12350:	e7f7      	b.n	12342 <bt_id_set_scan_own_addr+0x12>
   12352:	bf00      	nop
   12354:	200004a8 	.word	0x200004a8

00012358 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   12358:	b508      	push	{r3, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1235a:	4b0a      	ldr	r3, [pc, #40]	; (12384 <bt_id_init+0x2c>)
   1235c:	79db      	ldrb	r3, [r3, #7]
   1235e:	b123      	cbz	r3, 1236a <bt_id_init+0x12>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   12360:	4b08      	ldr	r3, [pc, #32]	; (12384 <bt_id_init+0x2c>)
   12362:	79db      	ldrb	r3, [r3, #7]
   12364:	b133      	cbz	r3, 12374 <bt_id_init+0x1c>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   12366:	2000      	movs	r0, #0
}
   12368:	bd08      	pop	{r3, pc}
		err = bt_setup_public_id_addr();
   1236a:	f7ff ff69 	bl	12240 <bt_setup_public_id_addr>
		if (err) {
   1236e:	2800      	cmp	r0, #0
   12370:	d0f6      	beq.n	12360 <bt_id_init+0x8>
   12372:	e7f9      	b.n	12368 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   12374:	f7ff ffa8 	bl	122c8 <bt_setup_random_id_addr>
		if (err) {
   12378:	2800      	cmp	r0, #0
   1237a:	d1f5      	bne.n	12368 <bt_id_init+0x10>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1237c:	4802      	ldr	r0, [pc, #8]	; (12388 <bt_id_init+0x30>)
   1237e:	f7ff fe63 	bl	12048 <set_random_address>
		if (err) {
   12382:	e7f1      	b.n	12368 <bt_id_init+0x10>
   12384:	200004a8 	.word	0x200004a8
   12388:	200004a9 	.word	0x200004a9

0001238c <reset_reassembling_advertiser>:
	buf->len  = 0U;
   1238c:	4b03      	ldr	r3, [pc, #12]	; (1239c <reset_reassembling_advertiser+0x10>)
   1238e:	2200      	movs	r2, #0
   12390:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   12392:	6899      	ldr	r1, [r3, #8]
   12394:	6019      	str	r1, [r3, #0]
}

static void reset_reassembling_advertiser(void)
{
	net_buf_simple_reset(&ext_scan_buf);
	reassembling_advertiser.state = FRAG_ADV_INACTIVE;
   12396:	4b02      	ldr	r3, [pc, #8]	; (123a0 <reset_reassembling_advertiser+0x14>)
   12398:	721a      	strb	r2, [r3, #8]
}
   1239a:	4770      	bx	lr
   1239c:	200006b4 	.word	0x200006b4
   123a0:	2000249c 	.word	0x2000249c

000123a4 <set_le_ext_scan_enable>:
	reset_reassembling_advertiser();
#endif
}

static int set_le_ext_scan_enable(uint8_t enable, uint16_t duration)
{
   123a4:	b570      	push	{r4, r5, r6, lr}
   123a6:	b086      	sub	sp, #24
   123a8:	4604      	mov	r4, r0
   123aa:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_ext_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, sizeof(*cp));
   123ac:	2106      	movs	r1, #6
   123ae:	f242 0042 	movw	r0, #8258	; 0x2042
   123b2:	f7ff faa1 	bl	118f8 <bt_hci_cmd_create>
	if (!buf) {
   123b6:	b350      	cbz	r0, 1240e <set_le_ext_scan_enable+0x6a>
   123b8:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   123ba:	2106      	movs	r1, #6
   123bc:	3008      	adds	r0, #8
   123be:	f009 fb17 	bl	1b9f0 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   123c2:	2c01      	cmp	r4, #1
   123c4:	d019      	beq.n	123fa <set_le_ext_scan_enable+0x56>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   123c6:	2300      	movs	r3, #0
   123c8:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   123ca:	7004      	strb	r4, [r0, #0]
	cp->duration = sys_cpu_to_le16(duration);
   123cc:	8045      	strh	r5, [r0, #2]
	cp->period = 0;
   123ce:	2500      	movs	r5, #0
   123d0:	7105      	strb	r5, [r0, #4]
   123d2:	7145      	strb	r5, [r0, #5]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   123d4:	2c01      	cmp	r4, #1
   123d6:	bf14      	ite	ne
   123d8:	2400      	movne	r4, #0
   123da:	2401      	moveq	r4, #1
   123dc:	9400      	str	r4, [sp, #0]
   123de:	2306      	movs	r3, #6
   123e0:	4a0c      	ldr	r2, [pc, #48]	; (12414 <set_le_ext_scan_enable+0x70>)
   123e2:	a903      	add	r1, sp, #12
   123e4:	4630      	mov	r0, r6
   123e6:	f7ff fa75 	bl	118d4 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, buf, NULL);
   123ea:	462a      	mov	r2, r5
   123ec:	4631      	mov	r1, r6
   123ee:	f242 0042 	movw	r0, #8258	; 0x2042
   123f2:	f7ff fabf 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   123f6:	b006      	add	sp, #24
   123f8:	bd70      	pop	{r4, r5, r6, pc}
   123fa:	f3bf 8f5b 	dmb	ish
   123fe:	4b05      	ldr	r3, [pc, #20]	; (12414 <set_le_ext_scan_enable+0x70>)
   12400:	681b      	ldr	r3, [r3, #0]
   12402:	f3bf 8f5b 	dmb	ish
   12406:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   1240a:	7043      	strb	r3, [r0, #1]
   1240c:	e7dd      	b.n	123ca <set_le_ext_scan_enable+0x26>
		return -ENOBUFS;
   1240e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12412:	e7f0      	b.n	123f6 <set_le_ext_scan_enable+0x52>
   12414:	20000530 	.word	0x20000530

00012418 <init_reassembling_advertiser>:
{
   12418:	b538      	push	{r3, r4, r5, lr}
   1241a:	460d      	mov	r5, r1
	memcpy(dst, src, sizeof(*dst));
   1241c:	4c04      	ldr	r4, [pc, #16]	; (12430 <init_reassembling_advertiser+0x18>)
   1241e:	2207      	movs	r2, #7
   12420:	4601      	mov	r1, r0
   12422:	4620      	mov	r0, r4
   12424:	f008 ff1d 	bl	1b262 <memcpy>
	reassembling_advertiser.sid = sid;
   12428:	71e5      	strb	r5, [r4, #7]
	reassembling_advertiser.state = FRAG_ADV_REASSEMBLING;
   1242a:	2301      	movs	r3, #1
   1242c:	7223      	strb	r3, [r4, #8]
}
   1242e:	bd38      	pop	{r3, r4, r5, pc}
   12430:	2000249c 	.word	0x2000249c

00012434 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   12434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12438:	b086      	sub	sp, #24
   1243a:	4688      	mov	r8, r1
   1243c:	4615      	mov	r5, r2
   1243e:	4699      	mov	r9, r3
   12440:	f3bf 8f5b 	dmb	ish
   12444:	4b44      	ldr	r3, [pc, #272]	; (12558 <le_adv_recv+0x124>)
   12446:	681b      	ldr	r3, [r3, #0]
   12448:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	BT_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr),
	       info->adv_type, len, info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1244c:	f013 0f80 	tst.w	r3, #128	; 0x80
   12450:	d003      	beq.n	1245a <le_adv_recv+0x26>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   12452:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   12454:	f013 0f04 	tst.w	r3, #4
   12458:	d17a      	bne.n	12550 <le_adv_recv+0x11c>
		BT_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   1245a:	7802      	ldrb	r2, [r0, #0]
   1245c:	1e93      	subs	r3, r2, #2
   1245e:	b2db      	uxtb	r3, r3
   12460:	2b01      	cmp	r3, #1
   12462:	d934      	bls.n	124ce <le_adv_recv+0x9a>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   12464:	2aff      	cmp	r2, #255	; 0xff
   12466:	d03d      	beq.n	124e4 <le_adv_recv+0xb0>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   12468:	4601      	mov	r1, r0
   1246a:	2000      	movs	r0, #0
   1246c:	f009 f860 	bl	1b530 <bt_lookup_id_addr>
   12470:	4601      	mov	r1, r0
   12472:	2207      	movs	r2, #7
   12474:	a801      	add	r0, sp, #4
   12476:	f008 fef4 	bl	1b262 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	if (scan_dev_found_cb) {
   1247a:	4b38      	ldr	r3, [pc, #224]	; (1255c <le_adv_recv+0x128>)
   1247c:	681b      	ldr	r3, [r3, #0]
   1247e:	b1bb      	cbz	r3, 124b0 <le_adv_recv+0x7c>
	state->offset = net_buf_simple_headroom(buf);
   12480:	4628      	mov	r0, r5
   12482:	f009 fade 	bl	1ba42 <net_buf_simple_headroom>
   12486:	b284      	uxth	r4, r0
   12488:	f8ad 400c 	strh.w	r4, [sp, #12]
	state->len = buf->len;
   1248c:	88ae      	ldrh	r6, [r5, #4]
   1248e:	f8ad 600e 	strh.w	r6, [sp, #14]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   12492:	f8a5 9004 	strh.w	r9, [r5, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   12496:	4b31      	ldr	r3, [pc, #196]	; (1255c <le_adv_recv+0x128>)
   12498:	681f      	ldr	r7, [r3, #0]
   1249a:	462b      	mov	r3, r5
   1249c:	f898 2007 	ldrb.w	r2, [r8, #7]
   124a0:	f998 1005 	ldrsb.w	r1, [r8, #5]
   124a4:	a801      	add	r0, sp, #4
   124a6:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   124a8:	68ab      	ldr	r3, [r5, #8]
   124aa:	4423      	add	r3, r4
   124ac:	602b      	str	r3, [r5, #0]
	buf->len = state->len;
   124ae:	80ae      	strh	r6, [r5, #4]

		net_buf_simple_restore(buf, &state);
	}

	info->addr = &id_addr;
   124b0:	ab01      	add	r3, sp, #4
   124b2:	f8c8 3000 	str.w	r3, [r8]
   124b6:	4b2a      	ldr	r3, [pc, #168]	; (12560 <le_adv_recv+0x12c>)
   124b8:	681e      	ldr	r6, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   124ba:	b1ee      	cbz	r6, 124f8 <le_adv_recv+0xc4>
   124bc:	3e08      	subs	r6, #8
   124be:	d01d      	beq.n	124fc <le_adv_recv+0xc8>
Z_GENLIST_PEEK_NEXT(slist, snode)
   124c0:	f116 0408 	adds.w	r4, r6, #8
   124c4:	d01f      	beq.n	12506 <le_adv_recv+0xd2>
	return node->next;
   124c6:	68b4      	ldr	r4, [r6, #8]
   124c8:	b1ec      	cbz	r4, 12506 <le_adv_recv+0xd2>
   124ca:	3c08      	subs	r4, #8
   124cc:	e01b      	b.n	12506 <le_adv_recv+0xd2>
   124ce:	2207      	movs	r2, #7
   124d0:	4601      	mov	r1, r0
   124d2:	a801      	add	r0, sp, #4
   124d4:	f008 fec5 	bl	1b262 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   124d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   124dc:	3b02      	subs	r3, #2
   124de:	f88d 3004 	strb.w	r3, [sp, #4]
   124e2:	e7ca      	b.n	1247a <le_adv_recv+0x46>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   124e4:	2300      	movs	r3, #0
   124e6:	9304      	str	r3, [sp, #16]
   124e8:	f8cd 3013 	str.w	r3, [sp, #19]
   124ec:	2207      	movs	r2, #7
   124ee:	a904      	add	r1, sp, #16
   124f0:	a801      	add	r0, sp, #4
   124f2:	f008 feb6 	bl	1b262 <memcpy>
   124f6:	e7c0      	b.n	1247a <le_adv_recv+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   124f8:	4634      	mov	r4, r6
   124fa:	e004      	b.n	12506 <le_adv_recv+0xd2>
   124fc:	4634      	mov	r4, r6
   124fe:	e002      	b.n	12506 <le_adv_recv+0xd2>
   12500:	4622      	mov	r2, r4
   12502:	4626      	mov	r6, r4
   12504:	4614      	mov	r4, r2
   12506:	b306      	cbz	r6, 1254a <le_adv_recv+0x116>
		if (listener->recv) {
   12508:	6833      	ldr	r3, [r6, #0]
   1250a:	b1a3      	cbz	r3, 12536 <le_adv_recv+0x102>
	state->offset = net_buf_simple_headroom(buf);
   1250c:	4628      	mov	r0, r5
   1250e:	f009 fa98 	bl	1ba42 <net_buf_simple_headroom>
   12512:	b287      	uxth	r7, r0
   12514:	f8ad 700c 	strh.w	r7, [sp, #12]
	state->len = buf->len;
   12518:	f8b5 a004 	ldrh.w	sl, [r5, #4]
   1251c:	f8ad a00e 	strh.w	sl, [sp, #14]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   12520:	f8a5 9004 	strh.w	r9, [r5, #4]
			listener->recv(info, buf);
   12524:	6833      	ldr	r3, [r6, #0]
   12526:	4629      	mov	r1, r5
   12528:	4640      	mov	r0, r8
   1252a:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   1252c:	68aa      	ldr	r2, [r5, #8]
   1252e:	443a      	add	r2, r7
   12530:	602a      	str	r2, [r5, #0]
	buf->len = state->len;
   12532:	f8a5 a004 	strh.w	sl, [r5, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   12536:	2c00      	cmp	r4, #0
   12538:	d0e2      	beq.n	12500 <le_adv_recv+0xcc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1253a:	f114 0208 	adds.w	r2, r4, #8
   1253e:	d0e0      	beq.n	12502 <le_adv_recv+0xce>
	return node->next;
   12540:	68a2      	ldr	r2, [r4, #8]
   12542:	2a00      	cmp	r2, #0
   12544:	d0dd      	beq.n	12502 <le_adv_recv+0xce>
   12546:	3a08      	subs	r2, #8
   12548:	e7db      	b.n	12502 <le_adv_recv+0xce>
			net_buf_simple_restore(buf, &state);
		}
	}

	/* Clear pointer to this stack frame before returning to calling function */
	info->addr = NULL;
   1254a:	2300      	movs	r3, #0
   1254c:	f8c8 3000 	str.w	r3, [r8]

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
#endif /* CONFIG_BT_CENTRAL */
}
   12550:	b006      	add	sp, #24
   12552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12556:	bf00      	nop
   12558:	20000530 	.word	0x20000530
   1255c:	200024b0 	.word	0x200024b0
   12560:	200024a8 	.word	0x200024a8

00012564 <start_le_scan_ext>:
{
   12564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12568:	b082      	sub	sp, #8
   1256a:	460c      	mov	r4, r1
   1256c:	4616      	mov	r6, r2
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
   1256e:	4680      	mov	r8, r0
   12570:	b110      	cbz	r0, 12578 <start_le_scan_ext+0x14>
   12572:	7803      	ldrb	r3, [r0, #0]
   12574:	2b01      	cmp	r3, #1
   12576:	d053      	beq.n	12620 <start_le_scan_ext+0xbc>
   12578:	2c00      	cmp	r4, #0
   1257a:	d053      	beq.n	12624 <start_le_scan_ext+0xc0>
		      (phy_coded && phy_coded->type == BT_HCI_LE_SCAN_ACTIVE);
   1257c:	7823      	ldrb	r3, [r4, #0]
   1257e:	2b01      	cmp	r3, #1
   12580:	d052      	beq.n	12628 <start_le_scan_ext+0xc4>
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
   12582:	2700      	movs	r7, #0
	if (duration > 0) {
   12584:	b166      	cbz	r6, 125a0 <start_le_scan_ext+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12586:	4b3e      	ldr	r3, [pc, #248]	; (12680 <start_le_scan_ext+0x11c>)
   12588:	f3bf 8f5b 	dmb	ish
   1258c:	e853 2f00 	ldrex	r2, [r3]
   12590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   12594:	e843 2100 	strex	r1, r2, [r3]
   12598:	2900      	cmp	r1, #0
   1259a:	d1f7      	bne.n	1258c <start_le_scan_ext+0x28>
   1259c:	f3bf 8f5b 	dmb	ish
	err = bt_id_set_scan_own_addr(active_scan, &own_addr_type);
   125a0:	f10d 0107 	add.w	r1, sp, #7
   125a4:	4638      	mov	r0, r7
   125a6:	f7ff fec3 	bl	12330 <bt_id_set_scan_own_addr>
	if (err) {
   125aa:	bbb0      	cbnz	r0, 1261a <start_le_scan_ext+0xb6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM,
   125ac:	f1b8 0f00 	cmp.w	r8, #0
   125b0:	d03c      	beq.n	1262c <start_le_scan_ext+0xc8>
   125b2:	2108      	movs	r1, #8
   125b4:	2c00      	cmp	r4, #0
   125b6:	d03b      	beq.n	12630 <start_le_scan_ext+0xcc>
   125b8:	2305      	movs	r3, #5
   125ba:	4419      	add	r1, r3
   125bc:	f242 0041 	movw	r0, #8257	; 0x2041
   125c0:	f7ff f99a 	bl	118f8 <bt_hci_cmd_create>
	if (!buf) {
   125c4:	4682      	mov	sl, r0
   125c6:	2800      	cmp	r0, #0
   125c8:	d057      	beq.n	1267a <start_le_scan_ext+0x116>
	return net_buf_simple_add(&buf->b, len);
   125ca:	f100 0908 	add.w	r9, r0, #8
   125ce:	2103      	movs	r1, #3
   125d0:	4648      	mov	r0, r9
   125d2:	f009 fa0d 	bl	1b9f0 <net_buf_simple_add>
   125d6:	4605      	mov	r5, r0
	set_param->own_addr_type = own_addr_type;
   125d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   125dc:	7003      	strb	r3, [r0, #0]
	set_param->phys = 0;
   125de:	2300      	movs	r3, #0
   125e0:	7083      	strb	r3, [r0, #2]
		set_param->filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   125e2:	7043      	strb	r3, [r0, #1]
	if (phy_1m) {
   125e4:	f1b8 0f00 	cmp.w	r8, #0
   125e8:	d006      	beq.n	125f8 <start_le_scan_ext+0x94>
		set_param->phys |= BT_HCI_LE_EXT_SCAN_PHY_1M;
   125ea:	2301      	movs	r3, #1
   125ec:	7083      	strb	r3, [r0, #2]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   125ee:	2205      	movs	r2, #5
   125f0:	4641      	mov	r1, r8
   125f2:	4648      	mov	r0, r9
   125f4:	f009 fa02 	bl	1b9fc <net_buf_simple_add_mem>
	if (phy_coded) {
   125f8:	b144      	cbz	r4, 1260c <start_le_scan_ext+0xa8>
		set_param->phys |= BT_HCI_LE_EXT_SCAN_PHY_CODED;
   125fa:	78ab      	ldrb	r3, [r5, #2]
   125fc:	f043 0304 	orr.w	r3, r3, #4
   12600:	70ab      	strb	r3, [r5, #2]
   12602:	2205      	movs	r2, #5
   12604:	4621      	mov	r1, r4
   12606:	4648      	mov	r0, r9
   12608:	f009 f9f8 	bl	1b9fc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM, buf, NULL);
   1260c:	2200      	movs	r2, #0
   1260e:	4651      	mov	r1, sl
   12610:	f242 0041 	movw	r0, #8257	; 0x2041
   12614:	f7ff f9ae 	bl	11974 <bt_hci_cmd_send_sync>
	if (err) {
   12618:	b160      	cbz	r0, 12634 <start_le_scan_ext+0xd0>
}
   1261a:	b002      	add	sp, #8
   1261c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
   12620:	2701      	movs	r7, #1
   12622:	e7af      	b.n	12584 <start_le_scan_ext+0x20>
   12624:	2700      	movs	r7, #0
   12626:	e7ad      	b.n	12584 <start_le_scan_ext+0x20>
   12628:	2701      	movs	r7, #1
   1262a:	e7ab      	b.n	12584 <start_le_scan_ext+0x20>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM,
   1262c:	2103      	movs	r1, #3
   1262e:	e7c1      	b.n	125b4 <start_le_scan_ext+0x50>
   12630:	2300      	movs	r3, #0
   12632:	e7c2      	b.n	125ba <start_le_scan_ext+0x56>
	err = set_le_ext_scan_enable(BT_HCI_LE_SCAN_ENABLE, duration);
   12634:	4631      	mov	r1, r6
   12636:	2001      	movs	r0, #1
   12638:	f7ff feb4 	bl	123a4 <set_le_ext_scan_enable>
	if (err) {
   1263c:	2800      	cmp	r0, #0
   1263e:	d1ec      	bne.n	1261a <start_le_scan_ext+0xb6>
	if (val) {
   12640:	b16f      	cbz	r7, 1265e <start_le_scan_ext+0xfa>
   12642:	4b0f      	ldr	r3, [pc, #60]	; (12680 <start_le_scan_ext+0x11c>)
   12644:	f3bf 8f5b 	dmb	ish
   12648:	e853 2f00 	ldrex	r2, [r3]
   1264c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   12650:	e843 2100 	strex	r1, r2, [r3]
   12654:	2900      	cmp	r1, #0
   12656:	d1f7      	bne.n	12648 <start_le_scan_ext+0xe4>
   12658:	f3bf 8f5b 	dmb	ish
   1265c:	e7dd      	b.n	1261a <start_le_scan_ext+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1265e:	4b08      	ldr	r3, [pc, #32]	; (12680 <start_le_scan_ext+0x11c>)
   12660:	f3bf 8f5b 	dmb	ish
   12664:	e853 2f00 	ldrex	r2, [r3]
   12668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1266c:	e843 2100 	strex	r1, r2, [r3]
   12670:	2900      	cmp	r1, #0
   12672:	d1f7      	bne.n	12664 <start_le_scan_ext+0x100>
   12674:	f3bf 8f5b 	dmb	ish
}
   12678:	e7cf      	b.n	1261a <start_le_scan_ext+0xb6>
		return -ENOBUFS;
   1267a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1267e:	e7cc      	b.n	1261a <start_le_scan_ext+0xb6>
   12680:	20000530 	.word	0x20000530

00012684 <bt_scan_reset>:
{
   12684:	b508      	push	{r3, lr}
	scan_dev_found_cb = NULL;
   12686:	4b03      	ldr	r3, [pc, #12]	; (12694 <bt_scan_reset+0x10>)
   12688:	2200      	movs	r2, #0
   1268a:	601a      	str	r2, [r3, #0]
	reset_reassembling_advertiser();
   1268c:	f7ff fe7e 	bl	1238c <reset_reassembling_advertiser>
}
   12690:	bd08      	pop	{r3, pc}
   12692:	bf00      	nop
   12694:	200024b0 	.word	0x200024b0

00012698 <bt_le_scan_update>:
{
   12698:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1269a:	f3bf 8f5b 	dmb	ish
   1269e:	4b0c      	ldr	r3, [pc, #48]	; (126d0 <bt_le_scan_update+0x38>)
   126a0:	681b      	ldr	r3, [r3, #0]
   126a2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   126a6:	f013 0f80 	tst.w	r3, #128	; 0x80
   126aa:	d001      	beq.n	126b0 <bt_le_scan_update+0x18>
		return 0;
   126ac:	2000      	movs	r0, #0
}
   126ae:	bd08      	pop	{r3, pc}
   126b0:	f3bf 8f5b 	dmb	ish
   126b4:	4b06      	ldr	r3, [pc, #24]	; (126d0 <bt_le_scan_update+0x38>)
   126b6:	681b      	ldr	r3, [r3, #0]
   126b8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   126bc:	f3c3 1080 	ubfx	r0, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   126c0:	f013 0f40 	tst.w	r3, #64	; 0x40
   126c4:	d0f3      	beq.n	126ae <bt_le_scan_update+0x16>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   126c6:	2000      	movs	r0, #0
   126c8:	f008 ffc7 	bl	1b65a <bt_le_scan_set_enable>
		if (err) {
   126cc:	e7ef      	b.n	126ae <bt_le_scan_update+0x16>
   126ce:	bf00      	nop
   126d0:	20000530 	.word	0x20000530

000126d4 <bt_hci_le_scan_timeout>:

#if defined(CONFIG_BT_EXT_ADV)
void bt_hci_le_scan_timeout(struct net_buf *buf)
{
   126d4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   126d6:	4b29      	ldr	r3, [pc, #164]	; (1277c <bt_hci_le_scan_timeout+0xa8>)
   126d8:	f3bf 8f5b 	dmb	ish
   126dc:	e853 2f00 	ldrex	r2, [r3]
   126e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   126e4:	e843 2100 	strex	r1, r2, [r3]
   126e8:	2900      	cmp	r1, #0
   126ea:	d1f7      	bne.n	126dc <bt_hci_le_scan_timeout+0x8>
   126ec:	f3bf 8f5b 	dmb	ish
   126f0:	f3bf 8f5b 	dmb	ish
   126f4:	e853 2f00 	ldrex	r2, [r3]
   126f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   126fc:	e843 2100 	strex	r1, r2, [r3]
   12700:	2900      	cmp	r1, #0
   12702:	d1f7      	bne.n	126f4 <bt_hci_le_scan_timeout+0x20>
   12704:	f3bf 8f5b 	dmb	ish
   12708:	f3bf 8f5b 	dmb	ish
   1270c:	e853 2f00 	ldrex	r2, [r3]
   12710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   12714:	e843 2100 	strex	r1, r2, [r3]
   12718:	2900      	cmp	r1, #0
   1271a:	d1f7      	bne.n	1270c <bt_hci_le_scan_timeout+0x38>
   1271c:	f3bf 8f5b 	dmb	ish
   12720:	f3bf 8f5b 	dmb	ish
   12724:	e853 2f00 	ldrex	r2, [r3]
   12728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1272c:	e843 2100 	strex	r1, r2, [r3]
   12730:	2900      	cmp	r1, #0
   12732:	d1f7      	bne.n	12724 <bt_hci_le_scan_timeout+0x50>
   12734:	f3bf 8f5b 	dmb	ish
	return list->head;
   12738:	4b11      	ldr	r3, [pc, #68]	; (12780 <bt_hci_le_scan_timeout+0xac>)
   1273a:	681a      	ldr	r2, [r3, #0]

#if defined(CONFIG_BT_SMP)
	bt_id_pending_keys_update();
#endif

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1273c:	b142      	cbz	r2, 12750 <bt_hci_le_scan_timeout+0x7c>
   1273e:	3a08      	subs	r2, #8
   12740:	d008      	beq.n	12754 <bt_hci_le_scan_timeout+0x80>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12742:	f112 0408 	adds.w	r4, r2, #8
   12746:	d00a      	beq.n	1275e <bt_hci_le_scan_timeout+0x8a>
	return node->next;
   12748:	6894      	ldr	r4, [r2, #8]
   1274a:	b144      	cbz	r4, 1275e <bt_hci_le_scan_timeout+0x8a>
   1274c:	3c08      	subs	r4, #8
   1274e:	e006      	b.n	1275e <bt_hci_le_scan_timeout+0x8a>
   12750:	4614      	mov	r4, r2
   12752:	e004      	b.n	1275e <bt_hci_le_scan_timeout+0x8a>
   12754:	4614      	mov	r4, r2
   12756:	e002      	b.n	1275e <bt_hci_le_scan_timeout+0x8a>
   12758:	4623      	mov	r3, r4
   1275a:	4622      	mov	r2, r4
   1275c:	461c      	mov	r4, r3
   1275e:	b162      	cbz	r2, 1277a <bt_hci_le_scan_timeout+0xa6>
		if (listener->timeout) {
   12760:	6853      	ldr	r3, [r2, #4]
   12762:	b103      	cbz	r3, 12766 <bt_hci_le_scan_timeout+0x92>
			listener->timeout();
   12764:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   12766:	2c00      	cmp	r4, #0
   12768:	d0f6      	beq.n	12758 <bt_hci_le_scan_timeout+0x84>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1276a:	f114 0308 	adds.w	r3, r4, #8
   1276e:	d0f4      	beq.n	1275a <bt_hci_le_scan_timeout+0x86>
	return node->next;
   12770:	68a3      	ldr	r3, [r4, #8]
   12772:	2b00      	cmp	r3, #0
   12774:	d0f1      	beq.n	1275a <bt_hci_le_scan_timeout+0x86>
   12776:	3b08      	subs	r3, #8
   12778:	e7ef      	b.n	1275a <bt_hci_le_scan_timeout+0x86>
		}
	}
}
   1277a:	bd10      	pop	{r4, pc}
   1277c:	20000530 	.word	0x20000530
   12780:	200024a8 	.word	0x200024a8

00012784 <bt_hci_le_adv_ext_report>:
	scan_info->adv_type = get_adv_type(evt->evt_type);
	scan_info->adv_props = get_adv_props_extended(evt->evt_type);
}

void bt_hci_le_adv_ext_report(struct net_buf *buf)
{
   12784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12788:	b084      	sub	sp, #16
   1278a:	4680      	mov	r8, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   1278c:	f100 0708 	add.w	r7, r0, #8
   12790:	4638      	mov	r0, r7
   12792:	f009 f94e 	bl	1ba32 <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);

	BT_DBG("Adv number of reports %u", num_reports);
   12796:	e04b      	b.n	12830 <bt_hci_le_adv_ext_report+0xac>

		if (evt->evt_type & BT_HCI_LE_ADV_EVT_TYPE_LEGACY) {
			/* Legacy advertising reports are complete.
			 * Create event immediately.
			 */
			create_ext_adv_info(evt, &scan_info);
   12798:	4669      	mov	r1, sp
   1279a:	f008 ff3f 	bl	1b61c <create_ext_adv_info>
			le_adv_recv(&evt->addr, &scan_info, &buf->b, evt->length);
   1279e:	7de3      	ldrb	r3, [r4, #23]
   127a0:	463a      	mov	r2, r7
   127a2:	4669      	mov	r1, sp
   127a4:	1ca0      	adds	r0, r4, #2
   127a6:	f7ff fe45 	bl	12434 <le_adv_recv>
			continue;
   127aa:	e040      	b.n	1282e <bt_hci_le_adv_ext_report+0xaa>
		}

		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
				    !fragmented_advertisers_equal(&reassembling_advertiser,
   127ac:	7ac2      	ldrb	r2, [r0, #11]
   127ae:	1c81      	adds	r1, r0, #2
   127b0:	483d      	ldr	r0, [pc, #244]	; (128a8 <bt_hci_le_adv_ext_report+0x124>)
   127b2:	f008 ff25 	bl	1b600 <fragmented_advertisers_equal>
		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
   127b6:	b108      	cbz	r0, 127bc <bt_hci_le_adv_ext_report+0x38>
   127b8:	2300      	movs	r3, #0
   127ba:	e051      	b.n	12860 <bt_hci_le_adv_ext_report+0xdc>
   127bc:	2301      	movs	r3, #1
   127be:	e04f      	b.n	12860 <bt_hci_le_adv_ext_report+0xdc>

		if (is_new_advertiser && is_report_complete) {
			/* Only advertising report from this advertiser.
			 * Create event immediately.
			 */
			create_ext_adv_info(evt, &scan_info);
   127c0:	4669      	mov	r1, sp
   127c2:	4620      	mov	r0, r4
   127c4:	f008 ff2a 	bl	1b61c <create_ext_adv_info>
			le_adv_recv(&evt->addr, &scan_info, &buf->b, evt->length);
   127c8:	7de3      	ldrb	r3, [r4, #23]
   127ca:	463a      	mov	r2, r7
   127cc:	4669      	mov	r1, sp
   127ce:	1ca0      	adds	r0, r4, #2
   127d0:	f7ff fe30 	bl	12434 <le_adv_recv>
			continue;
   127d4:	e02b      	b.n	1282e <bt_hci_le_adv_ext_report+0xaa>
	return net_buf_simple_pull_mem(&buf->b, len);
   127d6:	7de1      	ldrb	r1, [r4, #23]
   127d8:	4638      	mov	r0, r7
   127da:	f009 f922 	bl	1ba22 <net_buf_simple_pull_mem>
				"advertising reports from a different advertiser. The advertising "
				"report is discarded and future scan results may be incomplete. "
				"Interleaving of fragmented advertising reports from different "
				"advertisers is not yet supported.");
			(void)net_buf_pull_mem(buf, evt->length);
			continue;
   127de:	e026      	b.n	1282e <bt_hci_le_adv_ext_report+0xaa>
   127e0:	7de1      	ldrb	r1, [r4, #23]
   127e2:	4638      	mov	r0, r7
   127e4:	f009 f91d 	bl	1ba22 <net_buf_simple_pull_mem>
			/* Controller truncated, no more data will come.
			 * We do not need to keep track of this advertiser.
			 * Discard this report.
			 */
			(void)net_buf_pull_mem(buf, evt->length);
			reset_reassembling_advertiser();
   127e8:	f7ff fdd0 	bl	1238c <reset_reassembling_advertiser>
			continue;
   127ec:	e01f      	b.n	1282e <bt_hci_le_adv_ext_report+0xaa>
			/* We are not reassembling reports from an advertiser and
			 * this is the first report from the new advertiser.
			 * Initialize the new advertiser.
			 */
			__ASSERT_NO_MSG(reassembling_advertiser.state == FRAG_ADV_INACTIVE);
			init_reassembling_advertiser(&evt->addr, evt->sid);
   127ee:	7ae1      	ldrb	r1, [r4, #11]
   127f0:	1ca0      	adds	r0, r4, #2
   127f2:	f7ff fe11 	bl	12418 <init_reassembling_advertiser>
   127f6:	e040      	b.n	1287a <bt_hci_le_adv_ext_report+0xf6>
			 * Discard this and future reports from the advertiser.
			 */
			reassembling_advertiser.state = FRAG_ADV_DISCARDING;
		}

		if (reassembling_advertiser.state == FRAG_ADV_DISCARDING) {
   127f8:	4b2b      	ldr	r3, [pc, #172]	; (128a8 <bt_hci_le_adv_ext_report+0x124>)
   127fa:	7a1b      	ldrb	r3, [r3, #8]
   127fc:	2b02      	cmp	r3, #2
   127fe:	d047      	beq.n	12890 <bt_hci_le_adv_ext_report+0x10c>
				reset_reassembling_advertiser();
			}
			continue;
		}

		net_buf_simple_add_mem(&ext_scan_buf, buf->data, evt->length);
   12800:	f8d8 1008 	ldr.w	r1, [r8, #8]
   12804:	4829      	ldr	r0, [pc, #164]	; (128ac <bt_hci_le_adv_ext_report+0x128>)
   12806:	f009 f8f9 	bl	1b9fc <net_buf_simple_add_mem>
		if (more_to_come) {
   1280a:	2e01      	cmp	r6, #1
   1280c:	d00f      	beq.n	1282e <bt_hci_le_adv_ext_report+0xaa>

		/* No more data coming from the controller.
		 * Create event.
		 */
		__ASSERT_NO_MSG(is_report_complete);
		create_ext_adv_info(evt, &scan_info);
   1280e:	4669      	mov	r1, sp
   12810:	4620      	mov	r0, r4
   12812:	f008 ff03 	bl	1b61c <create_ext_adv_info>
		le_adv_recv(&evt->addr, &scan_info, &ext_scan_buf, ext_scan_buf.len);
   12816:	4a25      	ldr	r2, [pc, #148]	; (128ac <bt_hci_le_adv_ext_report+0x128>)
   12818:	8893      	ldrh	r3, [r2, #4]
   1281a:	4669      	mov	r1, sp
   1281c:	1ca0      	adds	r0, r4, #2
   1281e:	f7ff fe09 	bl	12434 <le_adv_recv>

		/* We do no longer need to keep track of this advertiser. */
		reset_reassembling_advertiser();
   12822:	f7ff fdb3 	bl	1238c <reset_reassembling_advertiser>
	return net_buf_simple_pull(&buf->b, len);
   12826:	7de1      	ldrb	r1, [r4, #23]
   12828:	4638      	mov	r0, r7
   1282a:	f009 f8f2 	bl	1ba12 <net_buf_simple_pull>
		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
   1282e:	4628      	mov	r0, r5
	while (num_reports--) {
   12830:	1e45      	subs	r5, r0, #1
   12832:	b2ed      	uxtb	r5, r5
   12834:	2800      	cmp	r0, #0
   12836:	d034      	beq.n	128a2 <bt_hci_le_adv_ext_report+0x11e>
		if (buf->len < sizeof(*evt)) {
   12838:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   1283c:	2b17      	cmp	r3, #23
   1283e:	d930      	bls.n	128a2 <bt_hci_le_adv_ext_report+0x11e>
	return net_buf_simple_pull_mem(&buf->b, len);
   12840:	2118      	movs	r1, #24
   12842:	4638      	mov	r0, r7
   12844:	f009 f8ed 	bl	1ba22 <net_buf_simple_pull_mem>
   12848:	4604      	mov	r4, r0
		data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS(evt->evt_type);
   1284a:	8803      	ldrh	r3, [r0, #0]
   1284c:	f3c3 1641 	ubfx	r6, r3, #5, #2
		if (evt->evt_type & BT_HCI_LE_ADV_EVT_TYPE_LEGACY) {
   12850:	f013 0f10 	tst.w	r3, #16
   12854:	d1a0      	bne.n	12798 <bt_hci_le_adv_ext_report+0x14>
		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
   12856:	4b14      	ldr	r3, [pc, #80]	; (128a8 <bt_hci_le_adv_ext_report+0x124>)
   12858:	7a1b      	ldrb	r3, [r3, #8]
   1285a:	2b00      	cmp	r3, #0
   1285c:	d1a6      	bne.n	127ac <bt_hci_le_adv_ext_report+0x28>
   1285e:	2301      	movs	r3, #1
		if (is_new_advertiser && is_report_complete) {
   12860:	461a      	mov	r2, r3
   12862:	b10b      	cbz	r3, 12868 <bt_hci_le_adv_ext_report+0xe4>
   12864:	2e00      	cmp	r6, #0
   12866:	d0ab      	beq.n	127c0 <bt_hci_le_adv_ext_report+0x3c>
		if (is_new_advertiser && reassembling_advertiser.state == FRAG_ADV_REASSEMBLING) {
   12868:	b11a      	cbz	r2, 12872 <bt_hci_le_adv_ext_report+0xee>
   1286a:	4b0f      	ldr	r3, [pc, #60]	; (128a8 <bt_hci_le_adv_ext_report+0x124>)
   1286c:	7a1b      	ldrb	r3, [r3, #8]
   1286e:	2b01      	cmp	r3, #1
   12870:	d0b1      	beq.n	127d6 <bt_hci_le_adv_ext_report+0x52>
		if (data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE) {
   12872:	2e02      	cmp	r6, #2
   12874:	d0b4      	beq.n	127e0 <bt_hci_le_adv_ext_report+0x5c>
		if (is_new_advertiser) {
   12876:	2a00      	cmp	r2, #0
   12878:	d1b9      	bne.n	127ee <bt_hci_le_adv_ext_report+0x6a>
		if (evt->length + ext_scan_buf.len > ext_scan_buf.size) {
   1287a:	7de2      	ldrb	r2, [r4, #23]
   1287c:	490b      	ldr	r1, [pc, #44]	; (128ac <bt_hci_le_adv_ext_report+0x128>)
   1287e:	888b      	ldrh	r3, [r1, #4]
   12880:	4413      	add	r3, r2
   12882:	88c9      	ldrh	r1, [r1, #6]
   12884:	428b      	cmp	r3, r1
   12886:	ddb7      	ble.n	127f8 <bt_hci_le_adv_ext_report+0x74>
			reassembling_advertiser.state = FRAG_ADV_DISCARDING;
   12888:	4b07      	ldr	r3, [pc, #28]	; (128a8 <bt_hci_le_adv_ext_report+0x124>)
   1288a:	2102      	movs	r1, #2
   1288c:	7219      	strb	r1, [r3, #8]
   1288e:	e7b3      	b.n	127f8 <bt_hci_le_adv_ext_report+0x74>
   12890:	4611      	mov	r1, r2
   12892:	4638      	mov	r0, r7
   12894:	f009 f8c5 	bl	1ba22 <net_buf_simple_pull_mem>
			if (!more_to_come) {
   12898:	2e01      	cmp	r6, #1
   1289a:	d0c8      	beq.n	1282e <bt_hci_le_adv_ext_report+0xaa>
				reset_reassembling_advertiser();
   1289c:	f7ff fd76 	bl	1238c <reset_reassembling_advertiser>
			continue;
   128a0:	e7c5      	b.n	1282e <bt_hci_le_adv_ext_report+0xaa>

		net_buf_pull(buf, evt->length);
	}
}
   128a2:	b004      	add	sp, #16
   128a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128a8:	2000249c 	.word	0x2000249c
   128ac:	200006b4 	.word	0x200006b4

000128b0 <bt_le_scan_start>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   128b0:	f3bf 8f5b 	dmb	ish
   128b4:	4b53      	ldr	r3, [pc, #332]	; (12a04 <bt_le_scan_start+0x154>)
   128b6:	681b      	ldr	r3, [r3, #0]
   128b8:	f3bf 8f5b 	dmb	ish

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   128bc:	f013 0f04 	tst.w	r3, #4
   128c0:	f000 8093 	beq.w	129ea <bt_le_scan_start+0x13a>
{
   128c4:	b530      	push	{r4, r5, lr}
   128c6:	b085      	sub	sp, #20
   128c8:	4604      	mov	r4, r0
   128ca:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   128cc:	f008 fe75 	bl	1b5ba <valid_le_scan_param>
   128d0:	2800      	cmp	r0, #0
   128d2:	f000 808d 	beq.w	129f0 <bt_le_scan_start+0x140>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   128d6:	7823      	ldrb	r3, [r4, #0]
   128d8:	b123      	cbz	r3, 128e4 <bt_le_scan_start+0x34>
   128da:	f008 fe3f 	bl	1b55c <bt_id_scan_random_addr_check>
   128de:	2800      	cmp	r0, #0
   128e0:	f000 8089 	beq.w	129f6 <bt_le_scan_start+0x146>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   128e4:	4b47      	ldr	r3, [pc, #284]	; (12a04 <bt_le_scan_start+0x154>)
   128e6:	f3bf 8f5b 	dmb	ish
   128ea:	e853 2f00 	ldrex	r2, [r3]
   128ee:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   128f2:	e843 1000 	strex	r0, r1, [r3]
   128f6:	2800      	cmp	r0, #0
   128f8:	d1f7      	bne.n	128ea <bt_le_scan_start+0x3a>
   128fa:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   128fe:	f012 0f80 	tst.w	r2, #128	; 0x80
   12902:	d17b      	bne.n	129fc <bt_le_scan_start+0x14c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12904:	f3bf 8f5b 	dmb	ish
   12908:	681b      	ldr	r3, [r3, #0]
   1290a:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1290e:	f013 0f40 	tst.w	r3, #64	; 0x40
   12912:	d003      	beq.n	1291c <bt_le_scan_start+0x6c>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   12914:	2000      	movs	r0, #0
   12916:	f008 fea0 	bl	1b65a <bt_le_scan_set_enable>
		if (err) {
   1291a:	b9f8      	cbnz	r0, 1295c <bt_le_scan_start+0xac>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   1291c:	6863      	ldr	r3, [r4, #4]
	if (val) {
   1291e:	f013 0f01 	tst.w	r3, #1
   12922:	d029      	beq.n	12978 <bt_le_scan_start+0xc8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12924:	4b37      	ldr	r3, [pc, #220]	; (12a04 <bt_le_scan_start+0x154>)
   12926:	f3bf 8f5b 	dmb	ish
   1292a:	e853 2f00 	ldrex	r2, [r3]
   1292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   12932:	e843 2100 	strex	r1, r2, [r3]
   12936:	2900      	cmp	r1, #0
   12938:	d1f7      	bne.n	1292a <bt_le_scan_start+0x7a>
   1293a:	f3bf 8f5b 	dmb	ish
		struct bt_hci_ext_scan_phy param_coded;

		struct bt_hci_ext_scan_phy *phy_1m = NULL;
		struct bt_hci_ext_scan_phy *phy_coded = NULL;

		if (!(param->options & BT_LE_SCAN_OPT_NO_1M)) {
   1293e:	6863      	ldr	r3, [r4, #4]
   12940:	f013 0f08 	tst.w	r3, #8
   12944:	d126      	bne.n	12994 <bt_le_scan_start+0xe4>
			param_1m.type = param->type;
   12946:	7823      	ldrb	r3, [r4, #0]
   12948:	f88d 3000 	strb.w	r3, [sp]
			param_1m.interval = sys_cpu_to_le16(param->interval);
   1294c:	8923      	ldrh	r3, [r4, #8]
   1294e:	f8ad 3001 	strh.w	r3, [sp, #1]
			param_1m.window = sys_cpu_to_le16(param->window);
   12952:	8963      	ldrh	r3, [r4, #10]
   12954:	f8ad 3003 	strh.w	r3, [sp, #3]

			phy_1m = &param_1m;
   12958:	4668      	mov	r0, sp
   1295a:	e01c      	b.n	12996 <bt_le_scan_start+0xe6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1295c:	4b29      	ldr	r3, [pc, #164]	; (12a04 <bt_le_scan_start+0x154>)
   1295e:	f3bf 8f5b 	dmb	ish
   12962:	e853 2f00 	ldrex	r2, [r3]
   12966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1296a:	e843 2100 	strex	r1, r2, [r3]
   1296e:	2900      	cmp	r1, #0
   12970:	d1f7      	bne.n	12962 <bt_le_scan_start+0xb2>
   12972:	f3bf 8f5b 	dmb	ish
			return err;
   12976:	e028      	b.n	129ca <bt_le_scan_start+0x11a>
   12978:	4b22      	ldr	r3, [pc, #136]	; (12a04 <bt_le_scan_start+0x154>)
   1297a:	f3bf 8f5b 	dmb	ish
   1297e:	e853 2f00 	ldrex	r2, [r3]
   12982:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   12986:	e843 2100 	strex	r1, r2, [r3]
   1298a:	2900      	cmp	r1, #0
   1298c:	d1f7      	bne.n	1297e <bt_le_scan_start+0xce>
   1298e:	f3bf 8f5b 	dmb	ish
   12992:	e7d4      	b.n	1293e <bt_le_scan_start+0x8e>
		struct bt_hci_ext_scan_phy *phy_1m = NULL;
   12994:	2000      	movs	r0, #0
		}

		if (param->options & BT_LE_SCAN_OPT_CODED) {
   12996:	6863      	ldr	r3, [r4, #4]
   12998:	f013 0f04 	tst.w	r3, #4
   1299c:	d00e      	beq.n	129bc <bt_le_scan_start+0x10c>
			uint16_t interval = param->interval_coded ?
   1299e:	89e2      	ldrh	r2, [r4, #14]
   129a0:	b902      	cbnz	r2, 129a4 <bt_le_scan_start+0xf4>
   129a2:	8922      	ldrh	r2, [r4, #8]
				param->interval_coded :
				param->interval;
			uint16_t window = param->window_coded ?
   129a4:	8a23      	ldrh	r3, [r4, #16]
   129a6:	b903      	cbnz	r3, 129aa <bt_le_scan_start+0xfa>
   129a8:	8963      	ldrh	r3, [r4, #10]
				param->window_coded :
				param->window;

			param_coded.type = param->type;
   129aa:	7821      	ldrb	r1, [r4, #0]
   129ac:	f88d 1008 	strb.w	r1, [sp, #8]
			param_coded.interval = sys_cpu_to_le16(interval);
   129b0:	f8ad 2009 	strh.w	r2, [sp, #9]
			param_coded.window = sys_cpu_to_le16(window);
   129b4:	f8ad 300b 	strh.w	r3, [sp, #11]
			phy_coded = &param_coded;
   129b8:	a902      	add	r1, sp, #8
   129ba:	e000      	b.n	129be <bt_le_scan_start+0x10e>
		struct bt_hci_ext_scan_phy *phy_coded = NULL;
   129bc:	2100      	movs	r1, #0
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
   129be:	89a2      	ldrh	r2, [r4, #12]
   129c0:	f7ff fdd0 	bl	12564 <start_le_scan_ext>

		err = start_le_scan_legacy(param->type, param->interval,
					   param->window);
	}

	if (err) {
   129c4:	b918      	cbnz	r0, 129ce <bt_le_scan_start+0x11e>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   129c6:	4b10      	ldr	r3, [pc, #64]	; (12a08 <bt_le_scan_start+0x158>)
   129c8:	601d      	str	r5, [r3, #0]

	return 0;
}
   129ca:	b005      	add	sp, #20
   129cc:	bd30      	pop	{r4, r5, pc}
   129ce:	4b0d      	ldr	r3, [pc, #52]	; (12a04 <bt_le_scan_start+0x154>)
   129d0:	f3bf 8f5b 	dmb	ish
   129d4:	e853 2f00 	ldrex	r2, [r3]
   129d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   129dc:	e843 2100 	strex	r1, r2, [r3]
   129e0:	2900      	cmp	r1, #0
   129e2:	d1f7      	bne.n	129d4 <bt_le_scan_start+0x124>
   129e4:	f3bf 8f5b 	dmb	ish
		return err;
   129e8:	e7ef      	b.n	129ca <bt_le_scan_start+0x11a>
		return -EAGAIN;
   129ea:	f06f 000a 	mvn.w	r0, #10
}
   129ee:	4770      	bx	lr
		return -EINVAL;
   129f0:	f06f 0015 	mvn.w	r0, #21
   129f4:	e7e9      	b.n	129ca <bt_le_scan_start+0x11a>
		return -EINVAL;
   129f6:	f06f 0015 	mvn.w	r0, #21
   129fa:	e7e6      	b.n	129ca <bt_le_scan_start+0x11a>
		return -EALREADY;
   129fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12a00:	e7e3      	b.n	129ca <bt_le_scan_start+0x11a>
   12a02:	bf00      	nop
   12a04:	20000530 	.word	0x20000530
   12a08:	200024b0 	.word	0x200024b0

00012a0c <bt_le_scan_cb_register>:
	return bt_le_scan_update(false);
}

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   12a0c:	f100 0308 	add.w	r3, r0, #8
	parent->next = child;
   12a10:	2200      	movs	r2, #0
   12a12:	6082      	str	r2, [r0, #8]
	return list->tail;
   12a14:	4a05      	ldr	r2, [pc, #20]	; (12a2c <bt_le_scan_cb_register+0x20>)
   12a16:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12a18:	b11a      	cbz	r2, 12a22 <bt_le_scan_cb_register+0x16>
	parent->next = child;
   12a1a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12a1c:	4a03      	ldr	r2, [pc, #12]	; (12a2c <bt_le_scan_cb_register+0x20>)
   12a1e:	6053      	str	r3, [r2, #4]
}
   12a20:	4770      	bx	lr
   12a22:	4a02      	ldr	r2, [pc, #8]	; (12a2c <bt_le_scan_cb_register+0x20>)
   12a24:	6053      	str	r3, [r2, #4]
	list->head = node;
   12a26:	6013      	str	r3, [r2, #0]
}
   12a28:	4770      	bx	lr
   12a2a:	bf00      	nop
   12a2c:	200024a8 	.word	0x200024a8

00012a30 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   12a30:	4b03      	ldr	r3, [pc, #12]	; (12a40 <pool_id+0x10>)
   12a32:	1ac0      	subs	r0, r0, r3
   12a34:	1080      	asrs	r0, r0, #2
}
   12a36:	4b03      	ldr	r3, [pc, #12]	; (12a44 <pool_id+0x14>)
   12a38:	fb03 f000 	mul.w	r0, r3, r0
   12a3c:	4770      	bx	lr
   12a3e:	bf00      	nop
   12a40:	200009f8 	.word	0x200009f8
   12a44:	ba2e8ba3 	.word	0xba2e8ba3

00012a48 <net_buf_pool_get>:
}
   12a48:	222c      	movs	r2, #44	; 0x2c
   12a4a:	4b02      	ldr	r3, [pc, #8]	; (12a54 <net_buf_pool_get+0xc>)
   12a4c:	fb02 3000 	mla	r0, r2, r0, r3
   12a50:	4770      	bx	lr
   12a52:	bf00      	nop
   12a54:	200009f8 	.word	0x200009f8

00012a58 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   12a58:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   12a5a:	4805      	ldr	r0, [pc, #20]	; (12a70 <xoshiro128_initialize+0x18>)
   12a5c:	4b05      	ldr	r3, [pc, #20]	; (12a74 <xoshiro128_initialize+0x1c>)
   12a5e:	6018      	str	r0, [r3, #0]
   12a60:	f00a ffd0 	bl	1da04 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   12a64:	b108      	cbz	r0, 12a6a <xoshiro128_initialize+0x12>
		return -ENODEV;
	}
	return 0;
   12a66:	2000      	movs	r0, #0
}
   12a68:	bd08      	pop	{r3, pc}
		return -ENODEV;
   12a6a:	f06f 0012 	mvn.w	r0, #18
   12a6e:	e7fb      	b.n	12a68 <xoshiro128_initialize+0x10>
   12a70:	0001e5b8 	.word	0x0001e5b8
   12a74:	200024b4 	.word	0x200024b4

00012a78 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   12a78:	4800      	ldr	r0, [pc, #0]	; (12a7c <get_hf_flags+0x4>)
   12a7a:	4770      	bx	lr
   12a7c:	20002508 	.word	0x20002508

00012a80 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   12a80:	4b03      	ldr	r3, [pc, #12]	; (12a90 <get_subsys+0x10>)
   12a82:	1ac0      	subs	r0, r0, r3
   12a84:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   12a86:	4b03      	ldr	r3, [pc, #12]	; (12a94 <get_subsys+0x14>)
   12a88:	fb03 f000 	mul.w	r0, r3, r0
   12a8c:	4770      	bx	lr
   12a8e:	bf00      	nop
   12a90:	200024c8 	.word	0x200024c8
   12a94:	b6db6db7 	.word	0xb6db6db7

00012a98 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12a98:	b538      	push	{r3, r4, r5, lr}
   12a9a:	4605      	mov	r5, r0
   12a9c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   12a9e:	f7ff ffef 	bl	12a80 <get_subsys>
   12aa2:	4601      	mov	r1, r0
   12aa4:	2240      	movs	r2, #64	; 0x40
   12aa6:	4803      	ldr	r0, [pc, #12]	; (12ab4 <onoff_stop+0x1c>)
   12aa8:	f009 f844 	bl	1bb34 <stop>
   12aac:	4601      	mov	r1, r0
	notify(mgr, res);
   12aae:	4628      	mov	r0, r5
   12ab0:	47a0      	blx	r4
}
   12ab2:	bd38      	pop	{r3, r4, r5, pc}
   12ab4:	0001e540 	.word	0x0001e540

00012ab8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12ab8:	b530      	push	{r4, r5, lr}
   12aba:	b083      	sub	sp, #12
   12abc:	4605      	mov	r5, r0
   12abe:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12ac0:	f7ff ffde 	bl	12a80 <get_subsys>
   12ac4:	4601      	mov	r1, r0
   12ac6:	2340      	movs	r3, #64	; 0x40
   12ac8:	9300      	str	r3, [sp, #0]
   12aca:	4623      	mov	r3, r4
   12acc:	4a05      	ldr	r2, [pc, #20]	; (12ae4 <onoff_start+0x2c>)
   12ace:	4806      	ldr	r0, [pc, #24]	; (12ae8 <onoff_start+0x30>)
   12ad0:	f009 f84a 	bl	1bb68 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   12ad4:	1e01      	subs	r1, r0, #0
   12ad6:	db01      	blt.n	12adc <onoff_start+0x24>
		notify(mgr, err);
	}
}
   12ad8:	b003      	add	sp, #12
   12ada:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   12adc:	4628      	mov	r0, r5
   12ade:	47a0      	blx	r4
}
   12ae0:	e7fa      	b.n	12ad8 <onoff_start+0x20>
   12ae2:	bf00      	nop
   12ae4:	0001bbb1 	.word	0x0001bbb1
   12ae8:	0001e540 	.word	0x0001e540

00012aec <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   12aec:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   12aee:	b110      	cbz	r0, 12af6 <clock_event_handler+0xa>
   12af0:	2801      	cmp	r0, #1
   12af2:	d00d      	beq.n	12b10 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   12af4:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   12af6:	2100      	movs	r1, #0
   12af8:	4808      	ldr	r0, [pc, #32]	; (12b1c <clock_event_handler+0x30>)
   12afa:	f008 ffa6 	bl	1ba4a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   12afe:	6883      	ldr	r3, [r0, #8]
   12b00:	f013 0f07 	tst.w	r3, #7
   12b04:	d1f6      	bne.n	12af4 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   12b06:	2100      	movs	r1, #0
   12b08:	4804      	ldr	r0, [pc, #16]	; (12b1c <clock_event_handler+0x30>)
   12b0a:	f009 f801 	bl	1bb10 <clkstarted_handle>
   12b0e:	e7f1      	b.n	12af4 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   12b10:	2101      	movs	r1, #1
   12b12:	4802      	ldr	r0, [pc, #8]	; (12b1c <clock_event_handler+0x30>)
   12b14:	f008 fffc 	bl	1bb10 <clkstarted_handle>
}
   12b18:	e7ec      	b.n	12af4 <clock_event_handler+0x8>
   12b1a:	bf00      	nop
   12b1c:	0001e540 	.word	0x0001e540

00012b20 <generic_hfclk_start>:
{
   12b20:	b510      	push	{r4, lr}
	__asm__ volatile(
   12b22:	f04f 0340 	mov.w	r3, #64	; 0x40
   12b26:	f3ef 8411 	mrs	r4, BASEPRI
   12b2a:	f383 8812 	msr	BASEPRI_MAX, r3
   12b2e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12b32:	4a13      	ldr	r2, [pc, #76]	; (12b80 <generic_hfclk_start+0x60>)
   12b34:	6813      	ldr	r3, [r2, #0]
   12b36:	f043 0302 	orr.w	r3, r3, #2
   12b3a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12b3c:	f013 0f01 	tst.w	r3, #1
   12b40:	d108      	bne.n	12b54 <generic_hfclk_start+0x34>
	bool already_started = false;
   12b42:	2300      	movs	r3, #0
	__asm__ volatile(
   12b44:	f384 8811 	msr	BASEPRI, r4
   12b48:	f3bf 8f6f 	isb	sy
	if (already_started) {
   12b4c:	b99b      	cbnz	r3, 12b76 <generic_hfclk_start+0x56>
	hfclk_start();
   12b4e:	f009 f837 	bl	1bbc0 <hfclk_start>
}
   12b52:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12b58:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12b5c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12b60:	f012 0f01 	tst.w	r2, #1
   12b64:	d101      	bne.n	12b6a <generic_hfclk_start+0x4a>
	bool already_started = false;
   12b66:	2300      	movs	r3, #0
   12b68:	e7ec      	b.n	12b44 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   12b6a:	f7ff ff85 	bl	12a78 <get_hf_flags>
   12b6e:	f008 ffbc 	bl	1baea <set_on_state>
			already_started = true;
   12b72:	2301      	movs	r3, #1
   12b74:	e7e6      	b.n	12b44 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   12b76:	2100      	movs	r1, #0
   12b78:	4802      	ldr	r0, [pc, #8]	; (12b84 <generic_hfclk_start+0x64>)
   12b7a:	f008 ffc9 	bl	1bb10 <clkstarted_handle>
		return;
   12b7e:	e7e8      	b.n	12b52 <generic_hfclk_start+0x32>
   12b80:	20002518 	.word	0x20002518
   12b84:	0001e540 	.word	0x0001e540

00012b88 <generic_hfclk_stop>:
{
   12b88:	b508      	push	{r3, lr}
   12b8a:	4b0a      	ldr	r3, [pc, #40]	; (12bb4 <generic_hfclk_stop+0x2c>)
   12b8c:	f3bf 8f5b 	dmb	ish
   12b90:	e853 2f00 	ldrex	r2, [r3]
   12b94:	f022 0102 	bic.w	r1, r2, #2
   12b98:	e843 1000 	strex	r0, r1, [r3]
   12b9c:	2800      	cmp	r0, #0
   12b9e:	d1f7      	bne.n	12b90 <generic_hfclk_stop+0x8>
   12ba0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   12ba4:	f012 0f01 	tst.w	r2, #1
   12ba8:	d000      	beq.n	12bac <generic_hfclk_stop+0x24>
}
   12baa:	bd08      	pop	{r3, pc}
	hfclk_stop();
   12bac:	f009 f812 	bl	1bbd4 <hfclk_stop>
   12bb0:	e7fb      	b.n	12baa <generic_hfclk_stop+0x22>
   12bb2:	bf00      	nop
   12bb4:	20002518 	.word	0x20002518

00012bb8 <api_blocking_start>:
{
   12bb8:	b500      	push	{lr}
   12bba:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12bbc:	f8cd d000 	str.w	sp, [sp]
   12bc0:	f8cd d004 	str.w	sp, [sp, #4]
   12bc4:	2300      	movs	r3, #0
   12bc6:	9302      	str	r3, [sp, #8]
   12bc8:	2301      	movs	r3, #1
   12bca:	9303      	str	r3, [sp, #12]
   12bcc:	ab04      	add	r3, sp, #16
   12bce:	9304      	str	r3, [sp, #16]
   12bd0:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12bd2:	466b      	mov	r3, sp
   12bd4:	4a06      	ldr	r2, [pc, #24]	; (12bf0 <api_blocking_start+0x38>)
   12bd6:	f008 ffe3 	bl	1bba0 <api_start>
	if (err < 0) {
   12bda:	2800      	cmp	r0, #0
   12bdc:	db05      	blt.n	12bea <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   12bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12be2:	2300      	movs	r3, #0
   12be4:	4668      	mov	r0, sp
   12be6:	f003 fe19 	bl	1681c <z_impl_k_sem_take>
}
   12bea:	b007      	add	sp, #28
   12bec:	f85d fb04 	ldr.w	pc, [sp], #4
   12bf0:	0001bbe9 	.word	0x0001bbe9

00012bf4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   12bf4:	b570      	push	{r4, r5, r6, lr}
   12bf6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12bf8:	2200      	movs	r2, #0
   12bfa:	2101      	movs	r1, #1
   12bfc:	4610      	mov	r0, r2
   12bfe:	f7fe f8a1 	bl	10d44 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   12c02:	4811      	ldr	r0, [pc, #68]	; (12c48 <clk_init+0x54>)
   12c04:	f001 fdc0 	bl	14788 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12c08:	4b10      	ldr	r3, [pc, #64]	; (12c4c <clk_init+0x58>)
   12c0a:	4298      	cmp	r0, r3
   12c0c:	d119      	bne.n	12c42 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   12c0e:	f00a fd49 	bl	1d6a4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   12c12:	2400      	movs	r4, #0
   12c14:	2c01      	cmp	r4, #1
   12c16:	d812      	bhi.n	12c3e <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   12c18:	4621      	mov	r1, r4
   12c1a:	4630      	mov	r0, r6
   12c1c:	f008 ff15 	bl	1ba4a <get_sub_data>
   12c20:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   12c22:	4621      	mov	r1, r4
   12c24:	4630      	mov	r0, r6
   12c26:	f008 ff1b 	bl	1ba60 <get_onoff_manager>
   12c2a:	4909      	ldr	r1, [pc, #36]	; (12c50 <clk_init+0x5c>)
   12c2c:	f007 feb1 	bl	1a992 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   12c30:	2800      	cmp	r0, #0
   12c32:	db05      	blt.n	12c40 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12c34:	2301      	movs	r3, #1
   12c36:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   12c38:	441c      	add	r4, r3
   12c3a:	b2e4      	uxtb	r4, r4
   12c3c:	e7ea      	b.n	12c14 <clk_init+0x20>
	}

	return 0;
   12c3e:	2000      	movs	r0, #0
}
   12c40:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   12c42:	f06f 0004 	mvn.w	r0, #4
   12c46:	e7fb      	b.n	12c40 <clk_init+0x4c>
   12c48:	00012aed 	.word	0x00012aed
   12c4c:	0bad0000 	.word	0x0bad0000
   12c50:	0001ebc8 	.word	0x0001ebc8

00012c54 <lfclk_spinwait>:
{
   12c54:	b570      	push	{r4, r5, r6, lr}
   12c56:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   12c58:	2801      	cmp	r0, #1
   12c5a:	d107      	bne.n	12c6c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   12c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12c60:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   12c64:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   12c68:	2b01      	cmp	r3, #1
   12c6a:	d05a      	beq.n	12d22 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12c6c:	f00a ffca 	bl	1dc04 <k_is_in_isr>
   12c70:	b928      	cbnz	r0, 12c7e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   12c72:	4b2f      	ldr	r3, [pc, #188]	; (12d30 <lfclk_spinwait+0xdc>)
   12c74:	781b      	ldrb	r3, [r3, #0]
   12c76:	2b00      	cmp	r3, #0
   12c78:	d043      	beq.n	12d02 <lfclk_spinwait+0xae>
   12c7a:	2300      	movs	r3, #0
   12c7c:	e000      	b.n	12c80 <lfclk_spinwait+0x2c>
   12c7e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   12c80:	461c      	mov	r4, r3
   12c82:	2b00      	cmp	r3, #0
   12c84:	d03f      	beq.n	12d06 <lfclk_spinwait+0xb2>
	__asm__ volatile(
   12c86:	f04f 0340 	mov.w	r3, #64	; 0x40
   12c8a:	f3ef 8611 	mrs	r6, BASEPRI
   12c8e:	f383 8812 	msr	BASEPRI_MAX, r3
   12c92:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   12c96:	b924      	cbnz	r4, 12ca2 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   12c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12c9c:	2202      	movs	r2, #2
   12c9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12ca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12ca6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   12caa:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12cae:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   12cb2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   12cb6:	d12d      	bne.n	12d14 <lfclk_spinwait+0xc0>
    return false;
   12cb8:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   12cba:	b11a      	cbz	r2, 12cc4 <lfclk_spinwait+0x70>
   12cbc:	2b01      	cmp	r3, #1
   12cbe:	d02b      	beq.n	12d18 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12cc0:	2d01      	cmp	r5, #1
   12cc2:	d029      	beq.n	12d18 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   12cc4:	b30c      	cbz	r4, 12d0a <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12cc6:	4630      	mov	r0, r6
   12cc8:	f7fe f802 	bl	10cd0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   12ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12cd0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12cd4:	2b00      	cmp	r3, #0
   12cd6:	d1e4      	bne.n	12ca2 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12cdc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d0de      	beq.n	12ca2 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12ce8:	2200      	movs	r2, #0
   12cea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   12cee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   12cf2:	2201      	movs	r2, #1
   12cf4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12cf8:	490e      	ldr	r1, [pc, #56]	; (12d34 <lfclk_spinwait+0xe0>)
   12cfa:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12cfe:	609a      	str	r2, [r3, #8]
}
   12d00:	e7cf      	b.n	12ca2 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12d02:	2301      	movs	r3, #1
   12d04:	e7bc      	b.n	12c80 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   12d06:	2600      	movs	r6, #0
   12d08:	e7c5      	b.n	12c96 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   12d0a:	2021      	movs	r0, #33	; 0x21
   12d0c:	2100      	movs	r1, #0
   12d0e:	f004 fac3 	bl	17298 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12d12:	e7db      	b.n	12ccc <lfclk_spinwait+0x78>
                return true;
   12d14:	2201      	movs	r2, #1
   12d16:	e7d0      	b.n	12cba <lfclk_spinwait+0x66>
	if (isr_mode) {
   12d18:	b124      	cbz	r4, 12d24 <lfclk_spinwait+0xd0>
	__asm__ volatile(
   12d1a:	f386 8811 	msr	BASEPRI, r6
   12d1e:	f3bf 8f6f 	isb	sy
}
   12d22:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   12d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12d28:	2202      	movs	r2, #2
   12d2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12d2e:	e7f8      	b.n	12d22 <lfclk_spinwait+0xce>
   12d30:	20003bc6 	.word	0x20003bc6
   12d34:	e000e100 	.word	0xe000e100

00012d38 <z_nrf_clock_control_lf_on>:
{
   12d38:	b510      	push	{r4, lr}
   12d3a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12d3c:	4b10      	ldr	r3, [pc, #64]	; (12d80 <z_nrf_clock_control_lf_on+0x48>)
   12d3e:	2101      	movs	r1, #1
   12d40:	f3bf 8f5b 	dmb	ish
   12d44:	e853 2f00 	ldrex	r2, [r3]
   12d48:	e843 1000 	strex	r0, r1, [r3]
   12d4c:	2800      	cmp	r0, #0
   12d4e:	d1f9      	bne.n	12d44 <z_nrf_clock_control_lf_on+0xc>
   12d50:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   12d54:	b11a      	cbz	r2, 12d5e <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   12d56:	1e63      	subs	r3, r4, #1
   12d58:	2b01      	cmp	r3, #1
   12d5a:	d90d      	bls.n	12d78 <z_nrf_clock_control_lf_on+0x40>
}
   12d5c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   12d5e:	4809      	ldr	r0, [pc, #36]	; (12d84 <z_nrf_clock_control_lf_on+0x4c>)
   12d60:	f008 fe7e 	bl	1ba60 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   12d64:	4908      	ldr	r1, [pc, #32]	; (12d88 <z_nrf_clock_control_lf_on+0x50>)
   12d66:	2300      	movs	r3, #0
   12d68:	604b      	str	r3, [r1, #4]
   12d6a:	608b      	str	r3, [r1, #8]
   12d6c:	60cb      	str	r3, [r1, #12]
   12d6e:	2301      	movs	r3, #1
   12d70:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   12d72:	f007 fe2b 	bl	1a9cc <onoff_request>
   12d76:	e7ee      	b.n	12d56 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   12d78:	4620      	mov	r0, r4
   12d7a:	f7ff ff6b 	bl	12c54 <lfclk_spinwait>
		break;
   12d7e:	e7ed      	b.n	12d5c <z_nrf_clock_control_lf_on+0x24>
   12d80:	2000251c 	.word	0x2000251c
   12d84:	0001e540 	.word	0x0001e540
   12d88:	200024b8 	.word	0x200024b8

00012d8c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   12d8c:	b510      	push	{r4, lr}
   12d8e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   12d90:	280a      	cmp	r0, #10
   12d92:	d007      	beq.n	12da4 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   12d94:	4b07      	ldr	r3, [pc, #28]	; (12db4 <console_out+0x28>)
   12d96:	6818      	ldr	r0, [r3, #0]
   12d98:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   12d9a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   12d9c:	685b      	ldr	r3, [r3, #4]
   12d9e:	4798      	blx	r3

	return c;
}
   12da0:	4620      	mov	r0, r4
   12da2:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   12da4:	4b03      	ldr	r3, [pc, #12]	; (12db4 <console_out+0x28>)
   12da6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   12da8:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   12daa:	685b      	ldr	r3, [r3, #4]
   12dac:	210d      	movs	r1, #13
   12dae:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   12db0:	e7f0      	b.n	12d94 <console_out+0x8>
   12db2:	bf00      	nop
   12db4:	20002520 	.word	0x20002520

00012db8 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   12db8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   12dba:	4c04      	ldr	r4, [pc, #16]	; (12dcc <uart_console_hook_install+0x14>)
   12dbc:	4620      	mov	r0, r4
   12dbe:	f7fe fb4d 	bl	1145c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   12dc2:	4620      	mov	r0, r4
   12dc4:	f7fc ffdc 	bl	fd80 <__printk_hook_install>
#endif
}
   12dc8:	bd10      	pop	{r4, pc}
   12dca:	bf00      	nop
   12dcc:	00012d8d 	.word	0x00012d8d

00012dd0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   12dd0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   12dd2:	4806      	ldr	r0, [pc, #24]	; (12dec <uart_console_init+0x1c>)
   12dd4:	4b06      	ldr	r3, [pc, #24]	; (12df0 <uart_console_init+0x20>)
   12dd6:	6018      	str	r0, [r3, #0]
   12dd8:	f00a fe14 	bl	1da04 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   12ddc:	b118      	cbz	r0, 12de6 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
   12dde:	f7ff ffeb 	bl	12db8 <uart_console_hook_install>

	return 0;
   12de2:	2000      	movs	r0, #0
}
   12de4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   12de6:	f06f 0012 	mvn.w	r0, #18
   12dea:	e7fb      	b.n	12de4 <uart_console_init+0x14>
   12dec:	0001e5e8 	.word	0x0001e5e8
   12df0:	20002520 	.word	0x20002520

00012df4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12df4:	b128      	cbz	r0, 12e02 <get_dev+0xe>
   12df6:	2801      	cmp	r0, #1
   12df8:	d101      	bne.n	12dfe <get_dev+0xa>
   12dfa:	4803      	ldr	r0, [pc, #12]	; (12e08 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   12dfc:	4770      	bx	lr
	const struct device *dev = NULL;
   12dfe:	2000      	movs	r0, #0
   12e00:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12e02:	4802      	ldr	r0, [pc, #8]	; (12e0c <get_dev+0x18>)
   12e04:	4770      	bx	lr
   12e06:	bf00      	nop
   12e08:	0001e558 	.word	0x0001e558
   12e0c:	0001e570 	.word	0x0001e570

00012e10 <gpio_nrfx_pin_interrupt_configure>:
{
   12e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e12:	b085      	sub	sp, #20
   12e14:	460e      	mov	r6, r1
   12e16:	4619      	mov	r1, r3
	return port->config;
   12e18:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   12e1a:	7b1b      	ldrb	r3, [r3, #12]
   12e1c:	f006 051f 	and.w	r5, r6, #31
   12e20:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   12e24:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   12e28:	d022      	beq.n	12e70 <gpio_nrfx_pin_interrupt_configure+0x60>
   12e2a:	4607      	mov	r7, r0
   12e2c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   12e2e:	2300      	movs	r3, #0
   12e30:	9301      	str	r3, [sp, #4]
   12e32:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   12e34:	4610      	mov	r0, r2
   12e36:	f008 ff57 	bl	1bce8 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   12e3a:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   12e3e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   12e40:	6899      	ldr	r1, [r3, #8]
   12e42:	40f1      	lsrs	r1, r6
   12e44:	f011 0f01 	tst.w	r1, #1
   12e48:	d102      	bne.n	12e50 <gpio_nrfx_pin_interrupt_configure+0x40>
   12e4a:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   12e4e:	d014      	beq.n	12e7a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12e50:	2300      	movs	r3, #0
   12e52:	aa01      	add	r2, sp, #4
   12e54:	4619      	mov	r1, r3
   12e56:	4628      	mov	r0, r5
   12e58:	f001 fff6 	bl	14e48 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   12e5c:	4b1b      	ldr	r3, [pc, #108]	; (12ecc <gpio_nrfx_pin_interrupt_configure+0xbc>)
   12e5e:	4298      	cmp	r0, r3
   12e60:	d131      	bne.n	12ec6 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   12e62:	2101      	movs	r1, #1
   12e64:	4628      	mov	r0, r5
   12e66:	f002 f9cd 	bl	15204 <nrfx_gpiote_trigger_enable>
	return 0;
   12e6a:	2000      	movs	r0, #0
}
   12e6c:	b005      	add	sp, #20
   12e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   12e70:	4628      	mov	r0, r5
   12e72:	f002 fa2b 	bl	152cc <nrfx_gpiote_trigger_disable>
		return 0;
   12e76:	2000      	movs	r0, #0
   12e78:	e7f8      	b.n	12e6c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   12e7a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   12e7e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12e80:	2a01      	cmp	r2, #1
   12e82:	d014      	beq.n	12eae <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   12e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   12e88:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   12e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   12e90:	f013 0f01 	tst.w	r3, #1
   12e94:	d1dc      	bne.n	12e50 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12e96:	f10d 010f 	add.w	r1, sp, #15
   12e9a:	4628      	mov	r0, r5
   12e9c:	f002 f956 	bl	1514c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   12ea0:	4b0b      	ldr	r3, [pc, #44]	; (12ed0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   12ea2:	4298      	cmp	r0, r3
   12ea4:	d005      	beq.n	12eb2 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   12ea6:	f10d 030f 	add.w	r3, sp, #15
   12eaa:	9302      	str	r3, [sp, #8]
   12eac:	e7d0      	b.n	12e50 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   12eae:	4a09      	ldr	r2, [pc, #36]	; (12ed4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   12eb0:	e7ea      	b.n	12e88 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   12eb2:	f10d 000f 	add.w	r0, sp, #15
   12eb6:	f002 f99d 	bl	151f4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   12eba:	4b04      	ldr	r3, [pc, #16]	; (12ecc <gpio_nrfx_pin_interrupt_configure+0xbc>)
   12ebc:	4298      	cmp	r0, r3
   12ebe:	d0f2      	beq.n	12ea6 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   12ec0:	f06f 000b 	mvn.w	r0, #11
   12ec4:	e7d2      	b.n	12e6c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   12ec6:	f06f 0015 	mvn.w	r0, #21
   12eca:	e7cf      	b.n	12e6c <gpio_nrfx_pin_interrupt_configure+0x5c>
   12ecc:	0bad0000 	.word	0x0bad0000
   12ed0:	0bad0004 	.word	0x0bad0004
   12ed4:	50000300 	.word	0x50000300

00012ed8 <gpio_nrfx_pin_configure>:
{
   12ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12edc:	b086      	sub	sp, #24
   12ede:	460e      	mov	r6, r1
   12ee0:	4614      	mov	r4, r2
	return port->config;
   12ee2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12ee6:	f898 300c 	ldrb.w	r3, [r8, #12]
   12eea:	f001 051f 	and.w	r5, r1, #31
   12eee:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12ef2:	f10d 0117 	add.w	r1, sp, #23
   12ef6:	4628      	mov	r0, r5
   12ef8:	f002 f928 	bl	1514c <nrfx_gpiote_channel_get>
   12efc:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   12efe:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   12f02:	d03b      	beq.n	12f7c <gpio_nrfx_pin_configure+0xa4>
	nrfx_gpiote_trigger_config_t trigger_config = {
   12f04:	2100      	movs	r1, #0
   12f06:	9103      	str	r1, [sp, #12]
   12f08:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12f0a:	460b      	mov	r3, r1
   12f0c:	aa03      	add	r2, sp, #12
   12f0e:	4628      	mov	r0, r5
   12f10:	f001 ff9a 	bl	14e48 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   12f14:	4b34      	ldr	r3, [pc, #208]	; (12fe8 <gpio_nrfx_pin_configure+0x110>)
   12f16:	4298      	cmp	r0, r3
   12f18:	d163      	bne.n	12fe2 <gpio_nrfx_pin_configure+0x10a>
	if (free_ch) {
   12f1a:	429f      	cmp	r7, r3
   12f1c:	d03e      	beq.n	12f9c <gpio_nrfx_pin_configure+0xc4>
	if (flags & GPIO_OUTPUT) {
   12f1e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   12f22:	d04b      	beq.n	12fbc <gpio_nrfx_pin_configure+0xe4>
		int rv = get_drive(flags, &drive);
   12f24:	f10d 0103 	add.w	r1, sp, #3
   12f28:	4620      	mov	r0, r4
   12f2a:	f008 fe62 	bl	1bbf2 <get_drive>
		if (rv != 0) {
   12f2e:	4607      	mov	r7, r0
   12f30:	bb58      	cbnz	r0, 12f8a <gpio_nrfx_pin_configure+0xb2>
		nrfx_gpiote_output_config_t output_config = {
   12f32:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12f36:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   12f3a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   12f3e:	bf0c      	ite	eq
   12f40:	2301      	moveq	r3, #1
   12f42:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   12f44:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   12f48:	4620      	mov	r0, r4
   12f4a:	f008 fe95 	bl	1bc78 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   12f4e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   12f52:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   12f56:	d026      	beq.n	12fa6 <gpio_nrfx_pin_configure+0xce>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   12f58:	f8d8 3004 	ldr.w	r3, [r8, #4]
   12f5c:	2101      	movs	r1, #1
   12f5e:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   12f62:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   12f66:	2200      	movs	r2, #0
   12f68:	a901      	add	r1, sp, #4
   12f6a:	4628      	mov	r0, r5
   12f6c:	f002 f824 	bl	14fb8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12f70:	4b1d      	ldr	r3, [pc, #116]	; (12fe8 <gpio_nrfx_pin_configure+0x110>)
   12f72:	4298      	cmp	r0, r3
   12f74:	d009      	beq.n	12f8a <gpio_nrfx_pin_configure+0xb2>
   12f76:	f06f 0715 	mvn.w	r7, #21
   12f7a:	e006      	b.n	12f8a <gpio_nrfx_pin_configure+0xb2>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   12f7c:	4628      	mov	r0, r5
   12f7e:	f002 f9d5 	bl	1532c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   12f82:	4b19      	ldr	r3, [pc, #100]	; (12fe8 <gpio_nrfx_pin_configure+0x110>)
   12f84:	429f      	cmp	r7, r3
   12f86:	d004      	beq.n	12f92 <gpio_nrfx_pin_configure+0xba>
		return 0;
   12f88:	2700      	movs	r7, #0
}
   12f8a:	4638      	mov	r0, r7
   12f8c:	b006      	add	sp, #24
   12f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   12f92:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12f96:	f002 f925 	bl	151e4 <nrfx_gpiote_channel_free>
   12f9a:	e7f5      	b.n	12f88 <gpio_nrfx_pin_configure+0xb0>
		err = nrfx_gpiote_channel_free(ch);
   12f9c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12fa0:	f002 f920 	bl	151e4 <nrfx_gpiote_channel_free>
   12fa4:	e7bb      	b.n	12f1e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   12fa6:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   12faa:	d0dc      	beq.n	12f66 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   12fac:	f8d8 2004 	ldr.w	r2, [r8, #4]
   12fb0:	2301      	movs	r3, #1
   12fb2:	fa03 f606 	lsl.w	r6, r3, r6
    p_reg->OUTCLR = clr_mask;
   12fb6:	f8c2 650c 	str.w	r6, [r2, #1292]	; 0x50c
}
   12fba:	e7d4      	b.n	12f66 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   12fbc:	4620      	mov	r0, r4
   12fbe:	f008 fe5b 	bl	1bc78 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   12fc2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12fc6:	2300      	movs	r3, #0
   12fc8:	461a      	mov	r2, r3
   12fca:	a902      	add	r1, sp, #8
   12fcc:	4628      	mov	r0, r5
   12fce:	f001 ff3b 	bl	14e48 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12fd2:	4b05      	ldr	r3, [pc, #20]	; (12fe8 <gpio_nrfx_pin_configure+0x110>)
   12fd4:	4298      	cmp	r0, r3
   12fd6:	d101      	bne.n	12fdc <gpio_nrfx_pin_configure+0x104>
   12fd8:	2700      	movs	r7, #0
   12fda:	e7d6      	b.n	12f8a <gpio_nrfx_pin_configure+0xb2>
   12fdc:	f06f 0715 	mvn.w	r7, #21
   12fe0:	e7d3      	b.n	12f8a <gpio_nrfx_pin_configure+0xb2>
		return -EINVAL;
   12fe2:	f06f 0715 	mvn.w	r7, #21
   12fe6:	e7d0      	b.n	12f8a <gpio_nrfx_pin_configure+0xb2>
   12fe8:	0bad0000 	.word	0x0bad0000

00012fec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   12fec:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   12fee:	f002 f8ef 	bl	151d0 <nrfx_gpiote_is_init>
   12ff2:	b108      	cbz	r0, 12ff8 <gpio_nrfx_init+0xc>
		return 0;
   12ff4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   12ff6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   12ff8:	f002 f8c0 	bl	1517c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   12ffc:	4b08      	ldr	r3, [pc, #32]	; (13020 <gpio_nrfx_init+0x34>)
   12ffe:	4298      	cmp	r0, r3
   13000:	d10a      	bne.n	13018 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   13002:	2100      	movs	r1, #0
   13004:	4807      	ldr	r0, [pc, #28]	; (13024 <gpio_nrfx_init+0x38>)
   13006:	f002 f89b 	bl	15140 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1300a:	2200      	movs	r2, #0
   1300c:	2105      	movs	r1, #5
   1300e:	2006      	movs	r0, #6
   13010:	f7fd fe98 	bl	10d44 <z_arm_irq_priority_set>
	return 0;
   13014:	2000      	movs	r0, #0
   13016:	e7ee      	b.n	12ff6 <gpio_nrfx_init+0xa>
		return -EIO;
   13018:	f06f 0004 	mvn.w	r0, #4
   1301c:	e7eb      	b.n	12ff6 <gpio_nrfx_init+0xa>
   1301e:	bf00      	nop
   13020:	0bad0000 	.word	0x0bad0000
   13024:	0001bd87 	.word	0x0001bd87

00013028 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   13028:	b5f0      	push	{r4, r5, r6, r7, lr}
   1302a:	b087      	sub	sp, #28
   1302c:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1302e:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   13030:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   13032:	f895 7079 	ldrb.w	r7, [r5, #121]	; 0x79
   13036:	b117      	cbz	r7, 1303e <configure+0x16>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
   13038:	682b      	ldr	r3, [r5, #0]
   1303a:	428b      	cmp	r3, r1
   1303c:	d06f      	beq.n	1311e <configure+0xf6>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1303e:	88a3      	ldrh	r3, [r4, #4]
   13040:	f413 6f00 	tst.w	r3, #2048	; 0x800
   13044:	d16d      	bne.n	13122 <configure+0xfa>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   13046:	f013 0f01 	tst.w	r3, #1
   1304a:	d16d      	bne.n	13128 <configure+0x100>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1304c:	f013 0f08 	tst.w	r3, #8
   13050:	d16d      	bne.n	1312e <configure+0x106>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   13052:	f3c3 1345 	ubfx	r3, r3, #5, #6
   13056:	2b08      	cmp	r3, #8
   13058:	d16c      	bne.n	13134 <configure+0x10c>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   1305a:	6822      	ldr	r2, [r4, #0]
   1305c:	4b3a      	ldr	r3, [pc, #232]	; (13148 <configure+0x120>)
   1305e:	429a      	cmp	r2, r3
   13060:	d96b      	bls.n	1313a <configure+0x112>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
   13062:	f10d 0c04 	add.w	ip, sp, #4
   13066:	f106 0e08 	add.w	lr, r6, #8
   1306a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1306e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   13072:	f8de 3000 	ldr.w	r3, [lr]
   13076:	f8cc 3000 	str.w	r3, [ip]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1307a:	6823      	ldr	r3, [r4, #0]
	if (frequency < 250000) {
   1307c:	4a33      	ldr	r2, [pc, #204]	; (1314c <configure+0x124>)
   1307e:	4293      	cmp	r3, r2
   13080:	d930      	bls.n	130e4 <configure+0xbc>
	} else if (frequency < 500000) {
   13082:	4a33      	ldr	r2, [pc, #204]	; (13150 <configure+0x128>)
   13084:	4293      	cmp	r3, r2
   13086:	d930      	bls.n	130ea <configure+0xc2>
	} else if (frequency < 1000000) {
   13088:	4a32      	ldr	r2, [pc, #200]	; (13154 <configure+0x12c>)
   1308a:	4293      	cmp	r3, r2
   1308c:	d930      	bls.n	130f0 <configure+0xc8>
	} else if (frequency < 2000000) {
   1308e:	4a32      	ldr	r2, [pc, #200]	; (13158 <configure+0x130>)
   13090:	4293      	cmp	r3, r2
   13092:	d930      	bls.n	130f6 <configure+0xce>
	} else if (frequency < 4000000) {
   13094:	4a31      	ldr	r2, [pc, #196]	; (1315c <configure+0x134>)
   13096:	4293      	cmp	r3, r2
   13098:	d930      	bls.n	130fc <configure+0xd4>
	} else if (frequency < 8000000) {
   1309a:	4a31      	ldr	r2, [pc, #196]	; (13160 <configure+0x138>)
   1309c:	4293      	cmp	r3, r2
   1309e:	d230      	bcs.n	13102 <configure+0xda>
		return NRF_SPI_FREQ_4M;
   130a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   130a4:	9303      	str	r3, [sp, #12]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   130a6:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   130a8:	f013 0f02 	tst.w	r3, #2
   130ac:	d12c      	bne.n	13108 <configure+0xe0>
			return NRF_SPI_MODE_0;
   130ae:	2300      	movs	r3, #0
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   130b0:	f88d 3010 	strb.w	r3, [sp, #16]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   130b4:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   130b6:	f013 0f10 	tst.w	r3, #16
   130ba:	d027      	beq.n	1310c <configure+0xe4>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
   130bc:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   130be:	f88d 3011 	strb.w	r3, [sp, #17]

	if (dev_data->initialized) {
   130c2:	bb2f      	cbnz	r7, 13110 <configure+0xe8>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
   130c4:	462b      	mov	r3, r5
   130c6:	4a27      	ldr	r2, [pc, #156]	; (13164 <configure+0x13c>)
   130c8:	a901      	add	r1, sp, #4
   130ca:	4630      	mov	r0, r6
   130cc:	f002 faaa 	bl	15624 <nrfx_spi_init>
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   130d0:	4b25      	ldr	r3, [pc, #148]	; (13168 <configure+0x140>)
   130d2:	4298      	cmp	r0, r3
   130d4:	d134      	bne.n	13140 <configure+0x118>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   130d6:	2301      	movs	r3, #1
   130d8:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79

	ctx->config = spi_cfg;
   130dc:	602c      	str	r4, [r5, #0]

	return 0;
   130de:	2000      	movs	r0, #0
}
   130e0:	b007      	add	sp, #28
   130e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NRF_SPI_FREQ_125K;
   130e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   130e8:	e7dc      	b.n	130a4 <configure+0x7c>
		return NRF_SPI_FREQ_250K;
   130ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   130ee:	e7d9      	b.n	130a4 <configure+0x7c>
		return NRF_SPI_FREQ_500K;
   130f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   130f4:	e7d6      	b.n	130a4 <configure+0x7c>
		return NRF_SPI_FREQ_1M;
   130f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   130fa:	e7d3      	b.n	130a4 <configure+0x7c>
		return NRF_SPI_FREQ_2M;
   130fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   13100:	e7d0      	b.n	130a4 <configure+0x7c>
		return NRF_SPI_FREQ_8M;
   13102:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   13106:	e7cd      	b.n	130a4 <configure+0x7c>
			return NRF_SPI_MODE_2;
   13108:	2302      	movs	r3, #2
   1310a:	e7d1      	b.n	130b0 <configure+0x88>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
   1310c:	2300      	movs	r3, #0
   1310e:	e7d6      	b.n	130be <configure+0x96>
		nrfx_spi_uninit(&dev_config->spi);
   13110:	4630      	mov	r0, r6
   13112:	f002 fae1 	bl	156d8 <nrfx_spi_uninit>
		dev_data->initialized = false;
   13116:	2300      	movs	r3, #0
   13118:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
   1311c:	e7d2      	b.n	130c4 <configure+0x9c>
		return 0;
   1311e:	2000      	movs	r0, #0
   13120:	e7de      	b.n	130e0 <configure+0xb8>
		return -ENOTSUP;
   13122:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13126:	e7db      	b.n	130e0 <configure+0xb8>
		return -EINVAL;
   13128:	f06f 0015 	mvn.w	r0, #21
   1312c:	e7d8      	b.n	130e0 <configure+0xb8>
		return -EINVAL;
   1312e:	f06f 0015 	mvn.w	r0, #21
   13132:	e7d5      	b.n	130e0 <configure+0xb8>
		return -EINVAL;
   13134:	f06f 0015 	mvn.w	r0, #21
   13138:	e7d2      	b.n	130e0 <configure+0xb8>
		return -EINVAL;
   1313a:	f06f 0015 	mvn.w	r0, #21
   1313e:	e7cf      	b.n	130e0 <configure+0xb8>
		return -EIO;
   13140:	f06f 0004 	mvn.w	r0, #4
   13144:	e7cc      	b.n	130e0 <configure+0xb8>
   13146:	bf00      	nop
   13148:	0001e847 	.word	0x0001e847
   1314c:	0003d08f 	.word	0x0003d08f
   13150:	0007a11f 	.word	0x0007a11f
   13154:	000f423f 	.word	0x000f423f
   13158:	001e847f 	.word	0x001e847f
   1315c:	003d08ff 	.word	0x003d08ff
   13160:	007a1200 	.word	0x007a1200
   13164:	0001c049 	.word	0x0001c049
   13168:	0bad0000 	.word	0x0bad0000

0001316c <transfer_next_chunk>:

static void transfer_next_chunk(const struct device *dev)
{
   1316c:	b530      	push	{r4, r5, lr}
   1316e:	b085      	sub	sp, #20
   13170:	4603      	mov	r3, r0
	const struct spi_nrfx_config *dev_config = dev->config;
   13172:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   13174:	691c      	ldr	r4, [r3, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   13176:	6e22      	ldr	r2, [r4, #96]	; 0x60
   13178:	2a00      	cmp	r2, #0
   1317a:	d05d      	beq.n	13238 <transfer_next_chunk+0xcc>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1317c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1317e:	2b00      	cmp	r3, #0
   13180:	d05c      	beq.n	1323c <transfer_next_chunk+0xd0>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   13182:	4293      	cmp	r3, r2
   13184:	bf28      	it	cs
   13186:	4613      	movcs	r3, r2
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   13188:	2b00      	cmp	r3, #0
   1318a:	d063      	beq.n	13254 <transfer_next_chunk+0xe8>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;
   1318c:	6763      	str	r3, [r4, #116]	; 0x74

		xfer.p_tx_buffer = ctx->tx_buf;
   1318e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   13190:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   13192:	2900      	cmp	r1, #0
   13194:	d054      	beq.n	13240 <transfer_next_chunk+0xd4>
   13196:	2a00      	cmp	r2, #0
   13198:	d154      	bne.n	13244 <transfer_next_chunk+0xd8>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1319a:	2a00      	cmp	r2, #0
   1319c:	d054      	beq.n	13248 <transfer_next_chunk+0xdc>
   1319e:	461a      	mov	r2, r3
   131a0:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   131a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   131a4:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   131a6:	2a00      	cmp	r2, #0
   131a8:	d050      	beq.n	1324c <transfer_next_chunk+0xe0>
   131aa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   131ac:	2a00      	cmp	r2, #0
   131ae:	d14f      	bne.n	13250 <transfer_next_chunk+0xe4>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   131b0:	b902      	cbnz	r2, 131b4 <transfer_next_chunk+0x48>
   131b2:	2300      	movs	r3, #0
   131b4:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   131b6:	2200      	movs	r2, #0
   131b8:	4669      	mov	r1, sp
   131ba:	f002 fb01 	bl	157c0 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   131be:	4b31      	ldr	r3, [pc, #196]	; (13284 <transfer_next_chunk+0x118>)
   131c0:	4298      	cmp	r0, r3
   131c2:	d037      	beq.n	13234 <transfer_next_chunk+0xc8>
			return;
		}

		error = -EIO;
   131c4:	f06f 0504 	mvn.w	r5, #4
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   131c8:	6823      	ldr	r3, [r4, #0]
   131ca:	b1e3      	cbz	r3, 13206 <transfer_next_chunk+0x9a>
   131cc:	689a      	ldr	r2, [r3, #8]
   131ce:	b1d2      	cbz	r2, 13206 <transfer_next_chunk+0x9a>
   131d0:	6811      	ldr	r1, [r2, #0]
   131d2:	b1c1      	cbz	r1, 13206 <transfer_next_chunk+0x9a>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   131d4:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   131d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   131da:	d114      	bne.n	13206 <transfer_next_chunk+0x9a>
			k_busy_wait(ctx->config->cs->delay);
   131dc:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
   131de:	f00b f86e 	bl	1e2be <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   131e2:	6823      	ldr	r3, [r4, #0]
   131e4:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   131e6:	6818      	ldr	r0, [r3, #0]
   131e8:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   131ea:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   131ec:	681a      	ldr	r2, [r3, #0]
   131ee:	2301      	movs	r3, #1
   131f0:	408b      	lsls	r3, r1
   131f2:	421a      	tst	r2, r3
   131f4:	d130      	bne.n	13258 <transfer_next_chunk+0xec>
   131f6:	2300      	movs	r3, #0
	if (value != 0)	{
   131f8:	b383      	cbz	r3, 1325c <transfer_next_chunk+0xf0>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   131fa:	2301      	movs	r3, #1
   131fc:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   13200:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   13202:	68db      	ldr	r3, [r3, #12]
   13204:	4798      	blx	r3
	if (!ctx->asynchronous) {
   13206:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1320a:	b373      	cbz	r3, 1326a <transfer_next_chunk+0xfe>
		if (ctx->signal) {
   1320c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1320e:	b148      	cbz	r0, 13224 <transfer_next_chunk+0xb8>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   13210:	6823      	ldr	r3, [r4, #0]
   13212:	889b      	ldrh	r3, [r3, #4]
			if (spi_context_is_slave(ctx) && !status) {
   13214:	f013 0f01 	tst.w	r3, #1
   13218:	d001      	beq.n	1321e <transfer_next_chunk+0xb2>
   1321a:	b905      	cbnz	r5, 1321e <transfer_next_chunk+0xb2>
				status = ctx->recv_frames;
   1321c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1321e:	4629      	mov	r1, r5
   13220:	f004 fcce 	bl	17bc0 <z_impl_k_poll_signal_raise>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
   13224:	6823      	ldr	r3, [r4, #0]
   13226:	889b      	ldrh	r3, [r3, #4]
   13228:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1322c:	d023      	beq.n	13276 <transfer_next_chunk+0x10a>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
   1322e:	2300      	movs	r3, #0
   13230:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
   13234:	b005      	add	sp, #20
   13236:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
   13238:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1323a:	e7a5      	b.n	13188 <transfer_next_chunk+0x1c>
		return ctx->tx_len;
   1323c:	4613      	mov	r3, r2
   1323e:	e7a3      	b.n	13188 <transfer_next_chunk+0x1c>
	return !!(ctx->tx_buf && ctx->tx_len);
   13240:	2200      	movs	r2, #0
   13242:	e7aa      	b.n	1319a <transfer_next_chunk+0x2e>
   13244:	2201      	movs	r2, #1
   13246:	e7a8      	b.n	1319a <transfer_next_chunk+0x2e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   13248:	2200      	movs	r2, #0
   1324a:	e7a9      	b.n	131a0 <transfer_next_chunk+0x34>
	return !!(ctx->rx_buf && ctx->rx_len);
   1324c:	2200      	movs	r2, #0
   1324e:	e7af      	b.n	131b0 <transfer_next_chunk+0x44>
   13250:	2201      	movs	r2, #1
   13252:	e7ad      	b.n	131b0 <transfer_next_chunk+0x44>
	int error = 0;
   13254:	2500      	movs	r5, #0
   13256:	e7b7      	b.n	131c8 <transfer_next_chunk+0x5c>
		value = (value != 0) ? 0 : 1;
   13258:	2301      	movs	r3, #1
   1325a:	e7cd      	b.n	131f8 <transfer_next_chunk+0x8c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1325c:	2301      	movs	r3, #1
   1325e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   13262:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   13264:	691b      	ldr	r3, [r3, #16]
   13266:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   13268:	e7cd      	b.n	13206 <transfer_next_chunk+0x9a>
		ctx->sync_status = status;
   1326a:	6425      	str	r5, [r4, #64]	; 0x40
		k_sem_give(&ctx->sync);
   1326c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   13270:	f003 faac 	bl	167cc <z_impl_k_sem_give>
}
   13274:	e7db      	b.n	1322e <transfer_next_chunk+0xc2>
			ctx->owner = NULL;
   13276:	2300      	movs	r3, #0
   13278:	6063      	str	r3, [r4, #4]
			k_sem_give(&ctx->lock);
   1327a:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1327e:	f003 faa5 	bl	167cc <z_impl_k_sem_give>
}
   13282:	e7d4      	b.n	1322e <transfer_next_chunk+0xc2>
   13284:	0bad0000 	.word	0x0bad0000

00013288 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   13288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1328c:	b086      	sub	sp, #24
   1328e:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   13290:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   13292:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	uint32_t max_freq = dev_config->max_freq;
   13294:	f8d6 8008 	ldr.w	r8, [r6, #8]
	nrfx_spim_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   13298:	f895 7079 	ldrb.w	r7, [r5, #121]	; 0x79
   1329c:	b117      	cbz	r7, 132a4 <configure+0x1c>
	return !!(ctx->config == config);
   1329e:	682b      	ldr	r3, [r5, #0]
   132a0:	428b      	cmp	r3, r1
   132a2:	d07e      	beq.n	133a2 <configure+0x11a>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   132a4:	88a3      	ldrh	r3, [r4, #4]
   132a6:	f413 6f00 	tst.w	r3, #2048	; 0x800
   132aa:	d17c      	bne.n	133a6 <configure+0x11e>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   132ac:	f013 0f01 	tst.w	r3, #1
   132b0:	d17c      	bne.n	133ac <configure+0x124>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   132b2:	f013 0f08 	tst.w	r3, #8
   132b6:	d17c      	bne.n	133b2 <configure+0x12a>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   132b8:	f3c3 1345 	ubfx	r3, r3, #5, #6
   132bc:	2b08      	cmp	r3, #8
   132be:	d17b      	bne.n	133b8 <configure+0x130>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   132c0:	6822      	ldr	r2, [r4, #0]
   132c2:	4b42      	ldr	r3, [pc, #264]	; (133cc <configure+0x144>)
   132c4:	429a      	cmp	r2, r3
   132c6:	d97a      	bls.n	133be <configure+0x136>
	    nrf_clock_hfclk_div_get(NRF_CLOCK) != NRF_CLOCK_HFCLK_DIV_1) {
		max_freq = 16000000;
	}
#endif

	config = dev_config->def_config;
   132c8:	46ec      	mov	ip, sp
   132ca:	f106 0e0c 	add.w	lr, r6, #12
   132ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   132d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   132d6:	e89e 0003 	ldmia.w	lr, {r0, r1}
   132da:	e88c 0003 	stmia.w	ip, {r0, r1}

	/* Limit the frequency to that supported by the SPIM instance. */
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   132de:	6823      	ldr	r3, [r4, #0]
   132e0:	4543      	cmp	r3, r8
   132e2:	bf28      	it	cs
   132e4:	4643      	movcs	r3, r8
	if (frequency < 250000) {
   132e6:	4a3a      	ldr	r2, [pc, #232]	; (133d0 <configure+0x148>)
   132e8:	4293      	cmp	r3, r2
   132ea:	d917      	bls.n	1331c <configure+0x94>
	} else if (frequency < 500000) {
   132ec:	4a39      	ldr	r2, [pc, #228]	; (133d4 <configure+0x14c>)
   132ee:	4293      	cmp	r3, r2
   132f0:	d937      	bls.n	13362 <configure+0xda>
	} else if (frequency < 1000000) {
   132f2:	4a39      	ldr	r2, [pc, #228]	; (133d8 <configure+0x150>)
   132f4:	4293      	cmp	r3, r2
   132f6:	d937      	bls.n	13368 <configure+0xe0>
	} else if (frequency < 2000000) {
   132f8:	4a38      	ldr	r2, [pc, #224]	; (133dc <configure+0x154>)
   132fa:	4293      	cmp	r3, r2
   132fc:	d937      	bls.n	1336e <configure+0xe6>
	} else if (frequency < 4000000) {
   132fe:	4a38      	ldr	r2, [pc, #224]	; (133e0 <configure+0x158>)
   13300:	4293      	cmp	r3, r2
   13302:	d937      	bls.n	13374 <configure+0xec>
	} else if (frequency < 8000000) {
   13304:	4a37      	ldr	r2, [pc, #220]	; (133e4 <configure+0x15c>)
   13306:	4293      	cmp	r3, r2
   13308:	d337      	bcc.n	1337a <configure+0xf2>
	} else if (frequency < 16000000) {
   1330a:	4a37      	ldr	r2, [pc, #220]	; (133e8 <configure+0x160>)
   1330c:	4293      	cmp	r3, r2
   1330e:	d337      	bcc.n	13380 <configure+0xf8>
	} else if (frequency < 32000000) {
   13310:	4a36      	ldr	r2, [pc, #216]	; (133ec <configure+0x164>)
   13312:	4293      	cmp	r3, r2
   13314:	d237      	bcs.n	13386 <configure+0xfe>
		return NRF_SPIM_FREQ_16M;
   13316:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
   1331a:	e001      	b.n	13320 <configure+0x98>
		return NRF_SPIM_FREQ_125K;
   1331c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   13320:	9302      	str	r3, [sp, #8]
						      max_freq));
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   13322:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   13324:	f013 0f02 	tst.w	r3, #2
   13328:	d130      	bne.n	1338c <configure+0x104>
			return NRF_SPIM_MODE_0;
   1332a:	2300      	movs	r3, #0
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1332c:	f88d 300c 	strb.w	r3, [sp, #12]
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   13330:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   13332:	f013 0f10 	tst.w	r3, #16
   13336:	d02b      	beq.n	13390 <configure+0x108>
		return NRF_SPIM_BIT_ORDER_LSB_FIRST;
   13338:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1333a:	f88d 300d 	strb.w	r3, [sp, #13]

	if (dev_data->initialized) {
   1333e:	bb4f      	cbnz	r7, 13394 <configure+0x10c>
		nrfx_spim_uninit(&dev_config->spim);
		dev_data->initialized = false;
	}

	result = nrfx_spim_init(&dev_config->spim, &config,
   13340:	462b      	mov	r3, r5
   13342:	4a2b      	ldr	r2, [pc, #172]	; (133f0 <configure+0x168>)
   13344:	4669      	mov	r1, sp
   13346:	4630      	mov	r0, r6
   13348:	f002 fc32 	bl	15bb0 <nrfx_spim_init>
				event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   1334c:	4b29      	ldr	r3, [pc, #164]	; (133f4 <configure+0x16c>)
   1334e:	4298      	cmp	r0, r3
   13350:	d138      	bne.n	133c4 <configure+0x13c>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   13352:	2301      	movs	r3, #1
   13354:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79

	ctx->config = spi_cfg;
   13358:	602c      	str	r4, [r5, #0]

	return 0;
   1335a:	2000      	movs	r0, #0
}
   1335c:	b006      	add	sp, #24
   1335e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NRF_SPIM_FREQ_250K;
   13362:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   13366:	e7db      	b.n	13320 <configure+0x98>
		return NRF_SPIM_FREQ_500K;
   13368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1336c:	e7d8      	b.n	13320 <configure+0x98>
		return NRF_SPIM_FREQ_1M;
   1336e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13372:	e7d5      	b.n	13320 <configure+0x98>
		return NRF_SPIM_FREQ_2M;
   13374:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   13378:	e7d2      	b.n	13320 <configure+0x98>
		return NRF_SPIM_FREQ_4M;
   1337a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1337e:	e7cf      	b.n	13320 <configure+0x98>
		return NRF_SPIM_FREQ_8M;
   13380:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   13384:	e7cc      	b.n	13320 <configure+0x98>
		return NRF_SPIM_FREQ_32M;
   13386:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
   1338a:	e7c9      	b.n	13320 <configure+0x98>
			return NRF_SPIM_MODE_2;
   1338c:	2302      	movs	r3, #2
   1338e:	e7cd      	b.n	1332c <configure+0xa4>
		return NRF_SPIM_BIT_ORDER_MSB_FIRST;
   13390:	2300      	movs	r3, #0
   13392:	e7d2      	b.n	1333a <configure+0xb2>
		nrfx_spim_uninit(&dev_config->spim);
   13394:	4630      	mov	r0, r6
   13396:	f002 fc85 	bl	15ca4 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1339a:	2300      	movs	r3, #0
   1339c:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
   133a0:	e7ce      	b.n	13340 <configure+0xb8>
		return 0;
   133a2:	2000      	movs	r0, #0
   133a4:	e7da      	b.n	1335c <configure+0xd4>
		return -ENOTSUP;
   133a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   133aa:	e7d7      	b.n	1335c <configure+0xd4>
		return -EINVAL;
   133ac:	f06f 0015 	mvn.w	r0, #21
   133b0:	e7d4      	b.n	1335c <configure+0xd4>
		return -EINVAL;
   133b2:	f06f 0015 	mvn.w	r0, #21
   133b6:	e7d1      	b.n	1335c <configure+0xd4>
		return -EINVAL;
   133b8:	f06f 0015 	mvn.w	r0, #21
   133bc:	e7ce      	b.n	1335c <configure+0xd4>
		return -EINVAL;
   133be:	f06f 0015 	mvn.w	r0, #21
   133c2:	e7cb      	b.n	1335c <configure+0xd4>
		return -EIO;
   133c4:	f06f 0004 	mvn.w	r0, #4
   133c8:	e7c8      	b.n	1335c <configure+0xd4>
   133ca:	bf00      	nop
   133cc:	0001e847 	.word	0x0001e847
   133d0:	0003d08f 	.word	0x0003d08f
   133d4:	0007a11f 	.word	0x0007a11f
   133d8:	000f423f 	.word	0x000f423f
   133dc:	001e847f 	.word	0x001e847f
   133e0:	003d08ff 	.word	0x003d08ff
   133e4:	007a1200 	.word	0x007a1200
   133e8:	00f42400 	.word	0x00f42400
   133ec:	01e84800 	.word	0x01e84800
   133f0:	0001c487 	.word	0x0001c487
   133f4:	0bad0000 	.word	0x0bad0000

000133f8 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
   133f8:	b570      	push	{r4, r5, r6, lr}
   133fa:	b084      	sub	sp, #16
	struct spi_nrfx_data *dev_data = dev->data;
   133fc:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   133fe:	6846      	ldr	r6, [r0, #4]
	if (!ctx->tx_len) {
   13400:	6e23      	ldr	r3, [r4, #96]	; 0x60
   13402:	2b00      	cmp	r3, #0
   13404:	d078      	beq.n	134f8 <transfer_next_chunk+0x100>
	} else if (!ctx->rx_len) {
   13406:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   13408:	2d00      	cmp	r5, #0
   1340a:	d077      	beq.n	134fc <transfer_next_chunk+0x104>
	return MIN(ctx->tx_len, ctx->rx_len);
   1340c:	429d      	cmp	r5, r3
   1340e:	bf28      	it	cs
   13410:	461d      	movcs	r5, r3
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   13412:	2d00      	cmp	r5, #0
   13414:	f000 8082 	beq.w	1351c <transfer_next_chunk+0x124>
		nrfx_spim_xfer_desc_t xfer;
		nrfx_err_t result;
		const uint8_t *tx_buf = ctx->tx_buf;
   13418:	6de1      	ldr	r1, [r4, #92]	; 0x5c
	return !!(ctx->tx_buf && ctx->tx_len);
   1341a:	2900      	cmp	r1, #0
   1341c:	d070      	beq.n	13500 <transfer_next_chunk+0x108>
   1341e:	2b00      	cmp	r3, #0
   13420:	d170      	bne.n	13504 <transfer_next_chunk+0x10c>
#if (CONFIG_SPI_NRFX_RAM_BUFFER_SIZE > 0)
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   13422:	b163      	cbz	r3, 1343e <transfer_next_chunk+0x46>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   13424:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   13428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1342c:	d007      	beq.n	1343e <transfer_next_chunk+0x46>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1342e:	2d08      	cmp	r5, #8
   13430:	d900      	bls.n	13434 <transfer_next_chunk+0x3c>
				chunk_len = CONFIG_SPI_NRFX_RAM_BUFFER_SIZE;
   13432:	2508      	movs	r5, #8
			}

			memcpy(dev_data->buffer, tx_buf, chunk_len);
   13434:	462a      	mov	r2, r5
   13436:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   13438:	f007 ff13 	bl	1b262 <memcpy>
			tx_buf = dev_data->buffer;
   1343c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
		}
#endif
		if (chunk_len > MAX_CHUNK_LEN) {
   1343e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   13442:	d301      	bcc.n	13448 <transfer_next_chunk+0x50>
			chunk_len = MAX_CHUNK_LEN;
   13444:	f64f 75ff 	movw	r5, #65535	; 0xffff
		}

		dev_data->chunk_len = chunk_len;
   13448:	6765      	str	r5, [r4, #116]	; 0x74

		xfer.p_tx_buffer = tx_buf;
   1344a:	9100      	str	r1, [sp, #0]
   1344c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1344e:	2b00      	cmp	r3, #0
   13450:	d05a      	beq.n	13508 <transfer_next_chunk+0x110>
   13452:	6e23      	ldr	r3, [r4, #96]	; 0x60
   13454:	2b00      	cmp	r3, #0
   13456:	d159      	bne.n	1350c <transfer_next_chunk+0x114>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   13458:	2b00      	cmp	r3, #0
   1345a:	d059      	beq.n	13510 <transfer_next_chunk+0x118>
   1345c:	462b      	mov	r3, r5
   1345e:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   13460:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13462:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   13464:	2b00      	cmp	r3, #0
   13466:	d055      	beq.n	13514 <transfer_next_chunk+0x11c>
   13468:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1346a:	2b00      	cmp	r3, #0
   1346c:	d154      	bne.n	13518 <transfer_next_chunk+0x120>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1346e:	b903      	cbnz	r3, 13472 <transfer_next_chunk+0x7a>
   13470:	2500      	movs	r5, #0
   13472:	9503      	str	r5, [sp, #12]
				error = -EIO;
			}
		}
#endif
		if (error == 0) {
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   13474:	2200      	movs	r2, #0
   13476:	4669      	mov	r1, sp
   13478:	4630      	mov	r0, r6
   1347a:	f002 fc71 	bl	15d60 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1347e:	4b33      	ldr	r3, [pc, #204]	; (1354c <transfer_next_chunk+0x154>)
   13480:	4298      	cmp	r0, r3
   13482:	d037      	beq.n	134f4 <transfer_next_chunk+0xfc>
				return;
			}
			error = -EIO;
   13484:	f06f 0504 	mvn.w	r5, #4
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   13488:	6823      	ldr	r3, [r4, #0]
   1348a:	b1e3      	cbz	r3, 134c6 <transfer_next_chunk+0xce>
   1348c:	689a      	ldr	r2, [r3, #8]
   1348e:	b1d2      	cbz	r2, 134c6 <transfer_next_chunk+0xce>
   13490:	6811      	ldr	r1, [r2, #0]
   13492:	b1c1      	cbz	r1, 134c6 <transfer_next_chunk+0xce>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   13494:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   13496:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1349a:	d114      	bne.n	134c6 <transfer_next_chunk+0xce>
			k_busy_wait(ctx->config->cs->delay);
   1349c:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1349e:	f00a ff0e 	bl	1e2be <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   134a2:	6823      	ldr	r3, [r4, #0]
   134a4:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   134a6:	6818      	ldr	r0, [r3, #0]
   134a8:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   134aa:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   134ac:	681a      	ldr	r2, [r3, #0]
   134ae:	2301      	movs	r3, #1
   134b0:	408b      	lsls	r3, r1
   134b2:	421a      	tst	r2, r3
   134b4:	d134      	bne.n	13520 <transfer_next_chunk+0x128>
   134b6:	2300      	movs	r3, #0
	if (value != 0)	{
   134b8:	b3a3      	cbz	r3, 13524 <transfer_next_chunk+0x12c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   134ba:	2301      	movs	r3, #1
   134bc:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   134c0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   134c2:	68db      	ldr	r3, [r3, #12]
   134c4:	4798      	blx	r3
	if (!ctx->asynchronous) {
   134c6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   134ca:	b393      	cbz	r3, 13532 <transfer_next_chunk+0x13a>
		if (ctx->signal) {
   134cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   134ce:	b148      	cbz	r0, 134e4 <transfer_next_chunk+0xec>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   134d0:	6823      	ldr	r3, [r4, #0]
   134d2:	889b      	ldrh	r3, [r3, #4]
			if (spi_context_is_slave(ctx) && !status) {
   134d4:	f013 0f01 	tst.w	r3, #1
   134d8:	d001      	beq.n	134de <transfer_next_chunk+0xe6>
   134da:	b905      	cbnz	r5, 134de <transfer_next_chunk+0xe6>
				status = ctx->recv_frames;
   134dc:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
	return z_impl_k_poll_signal_raise(sig, result);
   134de:	4629      	mov	r1, r5
   134e0:	f004 fb6e 	bl	17bc0 <z_impl_k_poll_signal_raise>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
   134e4:	6823      	ldr	r3, [r4, #0]
   134e6:	889b      	ldrh	r3, [r3, #4]
   134e8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   134ec:	d027      	beq.n	1353e <transfer_next_chunk+0x146>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
   134ee:	2300      	movs	r3, #0
   134f0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
   134f4:	b004      	add	sp, #16
   134f6:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
   134f8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   134fa:	e78a      	b.n	13412 <transfer_next_chunk+0x1a>
		return ctx->tx_len;
   134fc:	461d      	mov	r5, r3
   134fe:	e788      	b.n	13412 <transfer_next_chunk+0x1a>
	return !!(ctx->tx_buf && ctx->tx_len);
   13500:	2300      	movs	r3, #0
   13502:	e78e      	b.n	13422 <transfer_next_chunk+0x2a>
   13504:	2301      	movs	r3, #1
   13506:	e78c      	b.n	13422 <transfer_next_chunk+0x2a>
   13508:	2300      	movs	r3, #0
   1350a:	e7a5      	b.n	13458 <transfer_next_chunk+0x60>
   1350c:	2301      	movs	r3, #1
   1350e:	e7a3      	b.n	13458 <transfer_next_chunk+0x60>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   13510:	2300      	movs	r3, #0
   13512:	e7a4      	b.n	1345e <transfer_next_chunk+0x66>
	return !!(ctx->rx_buf && ctx->rx_len);
   13514:	2300      	movs	r3, #0
   13516:	e7aa      	b.n	1346e <transfer_next_chunk+0x76>
   13518:	2301      	movs	r3, #1
   1351a:	e7a8      	b.n	1346e <transfer_next_chunk+0x76>
	int error = 0;
   1351c:	2500      	movs	r5, #0
   1351e:	e7b3      	b.n	13488 <transfer_next_chunk+0x90>
		value = (value != 0) ? 0 : 1;
   13520:	2301      	movs	r3, #1
   13522:	e7c9      	b.n	134b8 <transfer_next_chunk+0xc0>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   13524:	2301      	movs	r3, #1
   13526:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1352a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1352c:	691b      	ldr	r3, [r3, #16]
   1352e:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   13530:	e7c9      	b.n	134c6 <transfer_next_chunk+0xce>
		ctx->sync_status = status;
   13532:	6425      	str	r5, [r4, #64]	; 0x40
		k_sem_give(&ctx->sync);
   13534:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   13538:	f003 f948 	bl	167cc <z_impl_k_sem_give>
}
   1353c:	e7d7      	b.n	134ee <transfer_next_chunk+0xf6>
			ctx->owner = NULL;
   1353e:	2300      	movs	r3, #0
   13540:	6063      	str	r3, [r4, #4]
			k_sem_give(&ctx->lock);
   13542:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   13546:	f003 f941 	bl	167cc <z_impl_k_sem_give>
}
   1354a:	e7d0      	b.n	134ee <transfer_next_chunk+0xf6>
   1354c:	0bad0000 	.word	0x0bad0000

00013550 <spi_nrfx_init>:
		spi_context_complete(&dev_data->ctx, p_event->rx_amount);
	}
}

static int spi_nrfx_init(const struct device *dev)
{
   13550:	b570      	push	{r4, r5, r6, lr}
   13552:	b082      	sub	sp, #8
	const struct spi_nrfx_config *dev_config = dev->config;
   13554:	6845      	ldr	r5, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   13556:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result;

#ifdef CONFIG_PINCTRL
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   13558:	6aae      	ldr	r6, [r5, #40]	; 0x28
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1355a:	aa01      	add	r2, sp, #4
   1355c:	2100      	movs	r1, #0
   1355e:	4630      	mov	r0, r6
   13560:	f009 fc40 	bl	1cde4 <pinctrl_lookup_state>
	if (ret < 0) {
   13564:	2800      	cmp	r0, #0
   13566:	db05      	blt.n	13574 <spi_nrfx_init+0x24>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   13568:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1356a:	6832      	ldr	r2, [r6, #0]
   1356c:	7919      	ldrb	r1, [r3, #4]
   1356e:	6818      	ldr	r0, [r3, #0]
   13570:	f000 fd3a 	bl	13fe8 <pinctrl_configure_pins>
	if (err < 0) {
   13574:	2800      	cmp	r0, #0
   13576:	db27      	blt.n	135c8 <spi_nrfx_init+0x78>
#endif

	/* This sets only default values of mode and bit order. The ones to be
	 * actually used are set in configure() when a transfer is prepared.
	 */
	result = nrfx_spis_init(&dev_config->spis, &dev_config->config,
   13578:	4623      	mov	r3, r4
   1357a:	4a1d      	ldr	r2, [pc, #116]	; (135f0 <spi_nrfx_init+0xa0>)
   1357c:	f105 0108 	add.w	r1, r5, #8
   13580:	4628      	mov	r0, r5
   13582:	f002 fc8b 	bl	15e9c <nrfx_spis_init>
				event_handler, dev_data);

	if (result != NRFX_SUCCESS) {
   13586:	4b1b      	ldr	r3, [pc, #108]	; (135f4 <spi_nrfx_init+0xa4>)
   13588:	4298      	cmp	r0, r3
   1358a:	d12e      	bne.n	135ea <spi_nrfx_init+0x9a>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1358c:	6823      	ldr	r3, [r4, #0]
   1358e:	b1c3      	cbz	r3, 135c2 <spi_nrfx_init+0x72>
   13590:	689b      	ldr	r3, [r3, #8]
   13592:	b1b3      	cbz	r3, 135c2 <spi_nrfx_init+0x72>
   13594:	681a      	ldr	r2, [r3, #0]
   13596:	b1a2      	cbz	r2, 135c2 <spi_nrfx_init+0x72>
			k_busy_wait(ctx->config->cs->delay);
   13598:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1359a:	f00a fe90 	bl	1e2be <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1359e:	6823      	ldr	r3, [r4, #0]
   135a0:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   135a2:	6818      	ldr	r0, [r3, #0]
   135a4:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   135a6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   135a8:	681a      	ldr	r2, [r3, #0]
   135aa:	2301      	movs	r3, #1
   135ac:	408b      	lsls	r3, r1
   135ae:	421a      	tst	r2, r3
   135b0:	d10c      	bne.n	135cc <spi_nrfx_init+0x7c>
   135b2:	2300      	movs	r3, #0
	if (value != 0)	{
   135b4:	b163      	cbz	r3, 135d0 <spi_nrfx_init+0x80>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   135b6:	2301      	movs	r3, #1
   135b8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   135bc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   135be:	68db      	ldr	r3, [r3, #12]
   135c0:	4798      	blx	r3
	return sem->count;
   135c2:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   135c4:	b15b      	cbz	r3, 135de <spi_nrfx_init+0x8e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);

	return 0;
   135c6:	2000      	movs	r0, #0
}
   135c8:	b002      	add	sp, #8
   135ca:	bd70      	pop	{r4, r5, r6, pc}
		value = (value != 0) ? 0 : 1;
   135cc:	2301      	movs	r3, #1
   135ce:	e7f1      	b.n	135b4 <spi_nrfx_init+0x64>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   135d0:	2301      	movs	r3, #1
   135d2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   135d6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   135d8:	691b      	ldr	r3, [r3, #16]
   135da:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   135dc:	e7f1      	b.n	135c2 <spi_nrfx_init+0x72>
		ctx->owner = NULL;
   135de:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   135e0:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   135e4:	f003 f8f2 	bl	167cc <z_impl_k_sem_give>
}
   135e8:	e7ed      	b.n	135c6 <spi_nrfx_init+0x76>
		return -EBUSY;
   135ea:	f06f 000f 	mvn.w	r0, #15
   135ee:	e7eb      	b.n	135c8 <spi_nrfx_init+0x78>
   135f0:	0001c6c9 	.word	0x0001c6c9
   135f4:	0bad0000 	.word	0x0bad0000

000135f8 <prepare_for_transfer>:
{
   135f8:	b510      	push	{r4, lr}
   135fa:	b082      	sub	sp, #8
	struct spi_nrfx_data *dev_data = dev->data;
   135fc:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   135fe:	6840      	ldr	r0, [r0, #4]
	if (tx_buf_len > MAX_BUF_LEN || rx_buf_len > MAX_BUF_LEN) {
   13600:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   13604:	d225      	bcs.n	13652 <prepare_for_transfer+0x5a>
   13606:	f8dd c010 	ldr.w	ip, [sp, #16]
   1360a:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   1360e:	d316      	bcc.n	1363e <prepare_for_transfer+0x46>
		status = -EINVAL;
   13610:	f06f 0115 	mvn.w	r1, #21
	if (!ctx->asynchronous) {
   13614:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   13618:	b1f3      	cbz	r3, 13658 <prepare_for_transfer+0x60>
		if (ctx->signal) {
   1361a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1361c:	b140      	cbz	r0, 13630 <prepare_for_transfer+0x38>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1361e:	6823      	ldr	r3, [r4, #0]
   13620:	889b      	ldrh	r3, [r3, #4]
			if (spi_context_is_slave(ctx) && !status) {
   13622:	f013 0f01 	tst.w	r3, #1
   13626:	d001      	beq.n	1362c <prepare_for_transfer+0x34>
   13628:	b901      	cbnz	r1, 1362c <prepare_for_transfer+0x34>
				status = ctx->recv_frames;
   1362a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
	return z_impl_k_poll_signal_raise(sig, result);
   1362c:	f004 fac8 	bl	17bc0 <z_impl_k_poll_signal_raise>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
   13630:	6823      	ldr	r3, [r4, #0]
   13632:	889b      	ldrh	r3, [r3, #4]
   13634:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   13638:	d014      	beq.n	13664 <prepare_for_transfer+0x6c>
}
   1363a:	b002      	add	sp, #8
   1363c:	bd10      	pop	{r4, pc}
		result = nrfx_spis_buffers_set(&dev_config->spis,
   1363e:	f8cd c000 	str.w	ip, [sp]
   13642:	f002 fc9f 	bl	15f84 <nrfx_spis_buffers_set>
		if (result == NRFX_SUCCESS) {
   13646:	4b0b      	ldr	r3, [pc, #44]	; (13674 <prepare_for_transfer+0x7c>)
   13648:	4298      	cmp	r0, r3
   1364a:	d0f6      	beq.n	1363a <prepare_for_transfer+0x42>
		status = -EIO;
   1364c:	f06f 0104 	mvn.w	r1, #4
   13650:	e7e0      	b.n	13614 <prepare_for_transfer+0x1c>
		status = -EINVAL;
   13652:	f06f 0115 	mvn.w	r1, #21
   13656:	e7dd      	b.n	13614 <prepare_for_transfer+0x1c>
		ctx->sync_status = status;
   13658:	6421      	str	r1, [r4, #64]	; 0x40
		k_sem_give(&ctx->sync);
   1365a:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1365e:	f003 f8b5 	bl	167cc <z_impl_k_sem_give>
}
   13662:	e7ea      	b.n	1363a <prepare_for_transfer+0x42>
			ctx->owner = NULL;
   13664:	2300      	movs	r3, #0
   13666:	6063      	str	r3, [r4, #4]
			k_sem_give(&ctx->lock);
   13668:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1366c:	f003 f8ae 	bl	167cc <z_impl_k_sem_give>
}
   13670:	e7e3      	b.n	1363a <prepare_for_transfer+0x42>
   13672:	bf00      	nop
   13674:	0bad0000 	.word	0x0bad0000

00013678 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   13678:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   1367a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1367c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   13680:	d06f      	beq.n	13762 <baudrate_set+0xea>
   13682:	d83a      	bhi.n	136fa <baudrate_set+0x82>
   13684:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   13688:	d06e      	beq.n	13768 <baudrate_set+0xf0>
   1368a:	d90a      	bls.n	136a2 <baudrate_set+0x2a>
   1368c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   13690:	d075      	beq.n	1377e <baudrate_set+0x106>
   13692:	d924      	bls.n	136de <baudrate_set+0x66>
   13694:	f647 2312 	movw	r3, #31250	; 0x7a12
   13698:	4299      	cmp	r1, r3
   1369a:	d12b      	bne.n	136f4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1369c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   136a0:	e013      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   136a2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   136a6:	d061      	beq.n	1376c <baudrate_set+0xf4>
   136a8:	d907      	bls.n	136ba <baudrate_set+0x42>
   136aa:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   136ae:	d063      	beq.n	13778 <baudrate_set+0x100>
   136b0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   136b4:	d110      	bne.n	136d8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   136b6:	4b3c      	ldr	r3, [pc, #240]	; (137a8 <baudrate_set+0x130>)
   136b8:	e007      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   136ba:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   136be:	d058      	beq.n	13772 <baudrate_set+0xfa>
   136c0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   136c4:	d105      	bne.n	136d2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   136c6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   136ca:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   136ce:	2000      	movs	r0, #0
   136d0:	4770      	bx	lr
	switch (baudrate) {
   136d2:	f06f 0015 	mvn.w	r0, #21
   136d6:	4770      	bx	lr
   136d8:	f06f 0015 	mvn.w	r0, #21
   136dc:	4770      	bx	lr
   136de:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   136e2:	d04e      	beq.n	13782 <baudrate_set+0x10a>
   136e4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   136e8:	d101      	bne.n	136ee <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   136ea:	4b30      	ldr	r3, [pc, #192]	; (137ac <baudrate_set+0x134>)
   136ec:	e7ed      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   136ee:	f06f 0015 	mvn.w	r0, #21
   136f2:	4770      	bx	lr
   136f4:	f06f 0015 	mvn.w	r0, #21
   136f8:	4770      	bx	lr
   136fa:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   136fe:	d042      	beq.n	13786 <baudrate_set+0x10e>
   13700:	d909      	bls.n	13716 <baudrate_set+0x9e>
   13702:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   13706:	d046      	beq.n	13796 <baudrate_set+0x11e>
   13708:	d91f      	bls.n	1374a <baudrate_set+0xd2>
   1370a:	4b29      	ldr	r3, [pc, #164]	; (137b0 <baudrate_set+0x138>)
   1370c:	4299      	cmp	r1, r3
   1370e:	d148      	bne.n	137a2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   13710:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13714:	e7d9      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   13716:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1371a:	d037      	beq.n	1378c <baudrate_set+0x114>
   1371c:	d905      	bls.n	1372a <baudrate_set+0xb2>
   1371e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   13722:	d10f      	bne.n	13744 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   13724:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   13728:	e7cf      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   1372a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1372e:	4299      	cmp	r1, r3
   13730:	d02e      	beq.n	13790 <baudrate_set+0x118>
   13732:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   13736:	d102      	bne.n	1373e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   13738:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1373c:	e7c5      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   1373e:	f06f 0015 	mvn.w	r0, #21
   13742:	4770      	bx	lr
   13744:	f06f 0015 	mvn.w	r0, #21
   13748:	4770      	bx	lr
   1374a:	4b1a      	ldr	r3, [pc, #104]	; (137b4 <baudrate_set+0x13c>)
   1374c:	4299      	cmp	r1, r3
   1374e:	d025      	beq.n	1379c <baudrate_set+0x124>
   13750:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   13754:	d102      	bne.n	1375c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   13756:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1375a:	e7b6      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   1375c:	f06f 0015 	mvn.w	r0, #21
   13760:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   13762:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   13766:	e7b0      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   13768:	4b13      	ldr	r3, [pc, #76]	; (137b8 <baudrate_set+0x140>)
   1376a:	e7ae      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1376c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13770:	e7ab      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   13772:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   13776:	e7a8      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   13778:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1377c:	e7a5      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1377e:	4b0f      	ldr	r3, [pc, #60]	; (137bc <baudrate_set+0x144>)
   13780:	e7a3      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   13782:	4b0f      	ldr	r3, [pc, #60]	; (137c0 <baudrate_set+0x148>)
   13784:	e7a1      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   13786:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1378a:	e79e      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1378c:	4b0d      	ldr	r3, [pc, #52]	; (137c4 <baudrate_set+0x14c>)
   1378e:	e79c      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   13790:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   13794:	e799      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   13796:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1379a:	e796      	b.n	136ca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1379c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   137a0:	e793      	b.n	136ca <baudrate_set+0x52>
	switch (baudrate) {
   137a2:	f06f 0015 	mvn.w	r0, #21
}
   137a6:	4770      	bx	lr
   137a8:	0013b000 	.word	0x0013b000
   137ac:	004ea000 	.word	0x004ea000
   137b0:	000f4240 	.word	0x000f4240
   137b4:	0003d090 	.word	0x0003d090
   137b8:	00275000 	.word	0x00275000
   137bc:	0075c000 	.word	0x0075c000
   137c0:	003af000 	.word	0x003af000
   137c4:	013a9000 	.word	0x013a9000

000137c8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   137c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137cc:	4605      	mov	r5, r0
   137ce:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   137d0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   137d4:	f00a fa16 	bl	1dc04 <k_is_in_isr>
   137d8:	b920      	cbnz	r0, 137e4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   137da:	4b17      	ldr	r3, [pc, #92]	; (13838 <uarte_nrfx_poll_out+0x70>)
   137dc:	781b      	ldrb	r3, [r3, #0]
   137de:	b143      	cbz	r3, 137f2 <uarte_nrfx_poll_out+0x2a>
   137e0:	2300      	movs	r3, #0
   137e2:	e000      	b.n	137e6 <uarte_nrfx_poll_out+0x1e>
   137e4:	2301      	movs	r3, #1

		t = now;
	}
#endif

	if (isr_mode) {
   137e6:	b953      	cbnz	r3, 137fe <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   137e8:	4628      	mov	r0, r5
   137ea:	f009 f988 	bl	1cafe <wait_tx_ready>
   137ee:	4606      	mov	r6, r0
   137f0:	e013      	b.n	1381a <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   137f2:	2301      	movs	r3, #1
   137f4:	e7f7      	b.n	137e6 <uarte_nrfx_poll_out+0x1e>
   137f6:	f384 8811 	msr	BASEPRI, r4
   137fa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   137fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   13802:	f3ef 8411 	mrs	r4, BASEPRI
   13806:	f383 8812 	msr	BASEPRI_MAX, r3
   1380a:	f3bf 8f6f 	isb	sy
   1380e:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   13810:	4628      	mov	r0, r5
   13812:	f009 f925 	bl	1ca60 <is_tx_ready>
   13816:	2800      	cmp	r0, #0
   13818:	d0ed      	beq.n	137f6 <uarte_nrfx_poll_out+0x2e>
	}

	*data->char_out = c;
   1381a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1381e:	701f      	strb	r7, [r3, #0]
	tx_start(dev, data->char_out, 1);
   13820:	2201      	movs	r2, #1
   13822:	f8d8 1010 	ldr.w	r1, [r8, #16]
   13826:	4628      	mov	r0, r5
   13828:	f009 f934 	bl	1ca94 <tx_start>
	__asm__ volatile(
   1382c:	f386 8811 	msr	BASEPRI, r6
   13830:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   13834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13838:	20003bc6 	.word	0x20003bc6

0001383c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1383c:	b538      	push	{r3, r4, r5, lr}
   1383e:	4604      	mov	r4, r0
   13840:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   13842:	f101 0018 	add.w	r0, r1, #24
   13846:	f001 fdc5 	bl	153d4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1384a:	4b0c      	ldr	r3, [pc, #48]	; (1387c <endtx_stoptx_ppi_init+0x40>)
   1384c:	4298      	cmp	r0, r3
   1384e:	d111      	bne.n	13874 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   13850:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   13852:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   13856:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13858:	4a09      	ldr	r2, [pc, #36]	; (13880 <endtx_stoptx_ppi_init+0x44>)
   1385a:	33a2      	adds	r3, #162	; 0xa2
   1385c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13864:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   13866:	7e29      	ldrb	r1, [r5, #24]
   13868:	2301      	movs	r3, #1
   1386a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1386c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   13870:	2000      	movs	r0, #0
}
   13872:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   13874:	f06f 0004 	mvn.w	r0, #4
   13878:	e7fb      	b.n	13872 <endtx_stoptx_ppi_init+0x36>
   1387a:	bf00      	nop
   1387c:	0bad0000 	.word	0x0bad0000
   13880:	4001f000 	.word	0x4001f000

00013884 <random_byte_get>:
	__asm__ volatile(
   13884:	f04f 0340 	mov.w	r3, #64	; 0x40
   13888:	f3ef 8211 	mrs	r2, BASEPRI
   1388c:	f383 8812 	msr	BASEPRI_MAX, r3
   13890:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   13894:	4b0a      	ldr	r3, [pc, #40]	; (138c0 <random_byte_get+0x3c>)
   13896:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1389a:	b16b      	cbz	r3, 138b8 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1389c:	4b08      	ldr	r3, [pc, #32]	; (138c0 <random_byte_get+0x3c>)
   1389e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   138a2:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   138a4:	2100      	movs	r1, #0
   138a6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   138aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	__asm__ volatile(
   138ae:	f382 8811 	msr	BASEPRI, r2
   138b2:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   138b6:	4770      	bx	lr
	int retval = -EAGAIN;
   138b8:	f06f 000a 	mvn.w	r0, #10
   138bc:	e7f7      	b.n	138ae <random_byte_get+0x2a>
   138be:	bf00      	nop
   138c0:	4000d000 	.word	0x4000d000

000138c4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   138c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   138c6:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   138c8:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   138ca:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   138cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   138d0:	f3ef 8c11 	mrs	ip, BASEPRI
   138d4:	f383 8812 	msr	BASEPRI_MAX, r3
   138d8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   138dc:	7806      	ldrb	r6, [r0, #0]
   138de:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   138e0:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
   138e2:	1bad      	subs	r5, r5, r6
   138e4:	4025      	ands	r5, r4
	if (available < len) {
   138e6:	42aa      	cmp	r2, r5
   138e8:	d900      	bls.n	138ec <rng_pool_get+0x28>
		len = available;
   138ea:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   138ec:	18b0      	adds	r0, r6, r2
   138ee:	4020      	ands	r0, r4
   138f0:	f88e 0000 	strb.w	r0, [lr]
	__asm__ volatile(
   138f4:	f38c 8811 	msr	BASEPRI, ip
   138f8:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   138fc:	4608      	mov	r0, r1
}
   138fe:	e007      	b.n	13910 <rng_pool_get+0x4c>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   13900:	eb0e 0203 	add.w	r2, lr, r3
   13904:	7952      	ldrb	r2, [r2, #5]
   13906:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   1390a:	3301      	adds	r3, #1
   1390c:	4023      	ands	r3, r4
	while (likely(len--)) {
   1390e:	4662      	mov	r2, ip
   13910:	f102 3cff 	add.w	ip, r2, #4294967295
   13914:	fa1f fc8c 	uxth.w	ip, ip
   13918:	2a00      	cmp	r2, #0
   1391a:	d1f1      	bne.n	13900 <rng_pool_get+0x3c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1391c:	42be      	cmp	r6, r7
   1391e:	d10f      	bne.n	13940 <rng_pool_get+0x7c>
	__asm__ volatile(
   13920:	f04f 0240 	mov.w	r2, #64	; 0x40
   13924:	f3ef 8311 	mrs	r3, BASEPRI
   13928:	f382 8812 	msr	BASEPRI_MAX, r2
   1392c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   13930:	f89e 2000 	ldrb.w	r2, [lr]
   13934:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   13938:	f383 8811 	msr	BASEPRI, r3
   1393c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   13940:	1a40      	subs	r0, r0, r1
   13942:	b280      	uxth	r0, r0
	available = available - len;
   13944:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   13946:	f89e 3004 	ldrb.w	r3, [lr, #4]
   1394a:	42ab      	cmp	r3, r5
   1394c:	d302      	bcc.n	13954 <rng_pool_get+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1394e:	4b02      	ldr	r3, [pc, #8]	; (13958 <rng_pool_get+0x94>)
   13950:	2201      	movs	r2, #1
   13952:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   13954:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13956:	bf00      	nop
   13958:	4000d000 	.word	0x4000d000

0001395c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1395e:	460d      	mov	r5, r1
   13960:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   13962:	f013 0f01 	tst.w	r3, #1
   13966:	d103      	bne.n	13970 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   13968:	4823      	ldr	r0, [pc, #140]	; (139f8 <entropy_nrf5_get_entropy_isr+0x9c>)
   1396a:	f7ff ffab 	bl	138c4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1396e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   13970:	b90a      	cbnz	r2, 13976 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   13972:	4620      	mov	r0, r4
   13974:	e7fb      	b.n	1396e <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   13976:	f04f 0340 	mov.w	r3, #64	; 0x40
   1397a:	f3ef 8611 	mrs	r6, BASEPRI
   1397e:	f383 8812 	msr	BASEPRI_MAX, r3
   13982:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   13986:	200d      	movs	r0, #13
   13988:	f7fd f9ce 	bl	10d28 <arch_irq_is_enabled>
   1398c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1398e:	200d      	movs	r0, #13
   13990:	f7fd f9b6 	bl	10d00 <arch_irq_disable>
	__asm__ volatile(
   13994:	f386 8811 	msr	BASEPRI, r6
   13998:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1399c:	4b17      	ldr	r3, [pc, #92]	; (139fc <entropy_nrf5_get_entropy_isr+0xa0>)
   1399e:	2200      	movs	r2, #0
   139a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   139a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   139a8:	2201      	movs	r2, #1
   139aa:	601a      	str	r2, [r3, #0]
   139ac:	4b14      	ldr	r3, [pc, #80]	; (13a00 <entropy_nrf5_get_entropy_isr+0xa4>)
   139ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   139b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   139b6:	4626      	mov	r6, r4
   139b8:	e004      	b.n	139c4 <entropy_nrf5_get_entropy_isr+0x68>
   139ba:	f3bf 8f4f 	dsb	sy
				__WFE();
   139be:	bf20      	wfe
				__SEV();
   139c0:	bf40      	sev
				__WFE();
   139c2:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   139c4:	4b0d      	ldr	r3, [pc, #52]	; (139fc <entropy_nrf5_get_entropy_isr+0xa0>)
   139c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   139ca:	2b00      	cmp	r3, #0
   139cc:	d0f5      	beq.n	139ba <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   139ce:	f7ff ff59 	bl	13884 <random_byte_get>
   139d2:	4b0b      	ldr	r3, [pc, #44]	; (13a00 <entropy_nrf5_get_entropy_isr+0xa4>)
   139d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   139d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   139dc:	2800      	cmp	r0, #0
   139de:	db02      	blt.n	139e6 <entropy_nrf5_get_entropy_isr+0x8a>
			buf[--len] = byte;
   139e0:	3e01      	subs	r6, #1
   139e2:	b2b6      	uxth	r6, r6
   139e4:	55a8      	strb	r0, [r5, r6]
		} while (len);
   139e6:	2e00      	cmp	r6, #0
   139e8:	d1ec      	bne.n	139c4 <entropy_nrf5_get_entropy_isr+0x68>
		if (irq_enabled) {
   139ea:	2f00      	cmp	r7, #0
   139ec:	d0c1      	beq.n	13972 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   139ee:	200d      	movs	r0, #13
   139f0:	f7fd f978 	bl	10ce4 <arch_irq_enable>
   139f4:	e7bd      	b.n	13972 <entropy_nrf5_get_entropy_isr+0x16>
   139f6:	bf00      	nop
   139f8:	20002574 	.word	0x20002574
   139fc:	4000d000 	.word	0x4000d000
   13a00:	e000e100 	.word	0xe000e100

00013a04 <isr>:
{
   13a04:	b510      	push	{r4, lr}
	byte = random_byte_get();
   13a06:	f7ff ff3d 	bl	13884 <random_byte_get>
	if (byte < 0) {
   13a0a:	2800      	cmp	r0, #0
   13a0c:	db06      	blt.n	13a1c <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   13a0e:	b2c4      	uxtb	r4, r0
   13a10:	4621      	mov	r1, r4
   13a12:	480a      	ldr	r0, [pc, #40]	; (13a3c <isr+0x38>)
   13a14:	f009 f919 	bl	1cc4a <rng_pool_put>
	if (ret < 0) {
   13a18:	2800      	cmp	r0, #0
   13a1a:	db00      	blt.n	13a1e <isr+0x1a>
}
   13a1c:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   13a1e:	4621      	mov	r1, r4
   13a20:	4807      	ldr	r0, [pc, #28]	; (13a40 <isr+0x3c>)
   13a22:	f009 f912 	bl	1cc4a <rng_pool_put>
		if (ret < 0) {
   13a26:	2800      	cmp	r0, #0
   13a28:	db03      	blt.n	13a32 <isr+0x2e>
   13a2a:	4806      	ldr	r0, [pc, #24]	; (13a44 <isr+0x40>)
   13a2c:	f002 fece 	bl	167cc <z_impl_k_sem_give>
}
   13a30:	e7f4      	b.n	13a1c <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   13a32:	4b05      	ldr	r3, [pc, #20]	; (13a48 <isr+0x44>)
   13a34:	2201      	movs	r2, #1
   13a36:	605a      	str	r2, [r3, #4]
}
   13a38:	e7f7      	b.n	13a2a <isr+0x26>
   13a3a:	bf00      	nop
   13a3c:	20002574 	.word	0x20002574
   13a40:	20002589 	.word	0x20002589
   13a44:	2000255c 	.word	0x2000255c
   13a48:	4000d000 	.word	0x4000d000

00013a4c <entropy_nrf5_get_entropy>:
{
   13a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a4e:	460f      	mov	r7, r1
   13a50:	4614      	mov	r4, r2
	while (len) {
   13a52:	e007      	b.n	13a64 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   13a54:	f04f 32ff 	mov.w	r2, #4294967295
   13a58:	f04f 33ff 	mov.w	r3, #4294967295
   13a5c:	f106 0018 	add.w	r0, r6, #24
   13a60:	f002 fedc 	bl	1681c <z_impl_k_sem_take>
   13a64:	b1bc      	cbz	r4, 13a96 <entropy_nrf5_get_entropy+0x4a>
   13a66:	4e0d      	ldr	r6, [pc, #52]	; (13a9c <entropy_nrf5_get_entropy+0x50>)
   13a68:	f04f 32ff 	mov.w	r2, #4294967295
   13a6c:	f04f 33ff 	mov.w	r3, #4294967295
   13a70:	4630      	mov	r0, r6
   13a72:	f002 fed3 	bl	1681c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   13a76:	4622      	mov	r2, r4
   13a78:	4639      	mov	r1, r7
   13a7a:	f106 0045 	add.w	r0, r6, #69	; 0x45
   13a7e:	f7ff ff21 	bl	138c4 <rng_pool_get>
   13a82:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   13a84:	4630      	mov	r0, r6
   13a86:	f002 fea1 	bl	167cc <z_impl_k_sem_give>
		if (bytes == 0U) {
   13a8a:	2d00      	cmp	r5, #0
   13a8c:	d0e2      	beq.n	13a54 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   13a8e:	1b64      	subs	r4, r4, r5
   13a90:	b2a4      	uxth	r4, r4
		buf += bytes;
   13a92:	442f      	add	r7, r5
   13a94:	e7e6      	b.n	13a64 <entropy_nrf5_get_entropy+0x18>
}
   13a96:	2000      	movs	r0, #0
   13a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a9a:	bf00      	nop
   13a9c:	20002544 	.word	0x20002544

00013aa0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   13aa0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   13aa2:	4c18      	ldr	r4, [pc, #96]	; (13b04 <entropy_nrf5_init+0x64>)
   13aa4:	2201      	movs	r2, #1
   13aa6:	4611      	mov	r1, r2
   13aa8:	4620      	mov	r0, r4
   13aaa:	f00a f9e0 	bl	1de6e <z_impl_k_sem_init>
   13aae:	2201      	movs	r2, #1
   13ab0:	2100      	movs	r1, #0
   13ab2:	f104 0018 	add.w	r0, r4, #24
   13ab6:	f00a f9da 	bl	1de6e <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   13aba:	2204      	movs	r2, #4
   13abc:	2108      	movs	r1, #8
   13abe:	f104 0045 	add.w	r0, r4, #69	; 0x45
   13ac2:	f009 f8d6 	bl	1cc72 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   13ac6:	220c      	movs	r2, #12
   13ac8:	2110      	movs	r1, #16
   13aca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   13ace:	f009 f8d0 	bl	1cc72 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   13ad2:	4b0d      	ldr	r3, [pc, #52]	; (13b08 <entropy_nrf5_init+0x68>)
   13ad4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13ad8:	f022 0201 	bic.w	r2, r2, #1
   13adc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13ae0:	2400      	movs	r4, #0
   13ae2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   13ae6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   13aea:	2101      	movs	r1, #1
   13aec:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   13af0:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   13af2:	4622      	mov	r2, r4
   13af4:	200d      	movs	r0, #13
   13af6:	f7fd f925 	bl	10d44 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   13afa:	200d      	movs	r0, #13
   13afc:	f7fd f8f2 	bl	10ce4 <arch_irq_enable>

	return 0;
}
   13b00:	4620      	mov	r0, r4
   13b02:	bd10      	pop	{r4, pc}
   13b04:	20002544 	.word	0x20002544
   13b08:	4000d000 	.word	0x4000d000

00013b0c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13b0c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   13b10:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13b14:	4b01      	ldr	r3, [pc, #4]	; (13b1c <set_comparator+0x10>)
   13b16:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   13b1a:	4770      	bx	lr
   13b1c:	40011000 	.word	0x40011000

00013b20 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   13b20:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13b24:	4b01      	ldr	r3, [pc, #4]	; (13b2c <get_comparator+0xc>)
   13b26:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   13b2a:	4770      	bx	lr
   13b2c:	40011000 	.word	0x40011000

00013b30 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13b34:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   13b36:	4a02      	ldr	r2, [pc, #8]	; (13b40 <event_enable+0x10>)
   13b38:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   13b3c:	4770      	bx	lr
   13b3e:	bf00      	nop
   13b40:	40011000 	.word	0x40011000

00013b44 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13b48:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   13b4a:	4a02      	ldr	r2, [pc, #8]	; (13b54 <event_disable+0x10>)
   13b4c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   13b50:	4770      	bx	lr
   13b52:	bf00      	nop
   13b54:	40011000 	.word	0x40011000

00013b58 <counter>:
     return p_reg->COUNTER;
   13b58:	4b01      	ldr	r3, [pc, #4]	; (13b60 <counter+0x8>)
   13b5a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   13b5e:	4770      	bx	lr
   13b60:	40011000 	.word	0x40011000

00013b64 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   13b64:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   13b66:	2301      	movs	r3, #1
   13b68:	4083      	lsls	r3, r0
   13b6a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13b6e:	4a10      	ldr	r2, [pc, #64]	; (13bb0 <compare_int_lock+0x4c>)
   13b70:	f3bf 8f5b 	dmb	ish
   13b74:	e852 1f00 	ldrex	r1, [r2]
   13b78:	ea01 0e0c 	and.w	lr, r1, ip
   13b7c:	e842 e400 	strex	r4, lr, [r2]
   13b80:	2c00      	cmp	r4, #0
   13b82:	d1f7      	bne.n	13b74 <compare_int_lock+0x10>
   13b84:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13b88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13b8c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   13b90:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13b94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13b98:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   13b9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13ba0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   13ba4:	420b      	tst	r3, r1
}
   13ba6:	bf14      	ite	ne
   13ba8:	2001      	movne	r0, #1
   13baa:	2000      	moveq	r0, #0
   13bac:	bd10      	pop	{r4, pc}
   13bae:	bf00      	nop
   13bb0:	2000259c 	.word	0x2000259c

00013bb4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   13bb4:	b570      	push	{r4, r5, r6, lr}
   13bb6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   13bb8:	f009 f8b9 	bl	1cd2e <full_int_lock>
   13bbc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   13bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13bc2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   13bc4:	4a17      	ldr	r2, [pc, #92]	; (13c24 <channel_processing_check_and_clear+0x70>)
   13bc6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   13bca:	4213      	tst	r3, r2
   13bcc:	d105      	bne.n	13bda <channel_processing_check_and_clear+0x26>
	bool result = false;
   13bce:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   13bd0:	4628      	mov	r0, r5
   13bd2:	f009 f8b0 	bl	1cd36 <full_int_unlock>

	return result;
}
   13bd6:	4630      	mov	r0, r6
   13bd8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13bda:	2301      	movs	r3, #1
   13bdc:	40a3      	lsls	r3, r4
   13bde:	43db      	mvns	r3, r3
   13be0:	4a11      	ldr	r2, [pc, #68]	; (13c28 <channel_processing_check_and_clear+0x74>)
   13be2:	f3bf 8f5b 	dmb	ish
   13be6:	e852 1f00 	ldrex	r1, [r2]
   13bea:	ea01 0003 	and.w	r0, r1, r3
   13bee:	e842 0600 	strex	r6, r0, [r2]
   13bf2:	2e00      	cmp	r6, #0
   13bf4:	d1f7      	bne.n	13be6 <channel_processing_check_and_clear+0x32>
   13bf6:	f3bf 8f5b 	dmb	ish
   13bfa:	b959      	cbnz	r1, 13c14 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13bfc:	f104 0350 	add.w	r3, r4, #80	; 0x50
   13c00:	009b      	lsls	r3, r3, #2
   13c02:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13c08:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13c0c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13c0e:	b113      	cbz	r3, 13c16 <channel_processing_check_and_clear+0x62>
   13c10:	2301      	movs	r3, #1
   13c12:	e000      	b.n	13c16 <channel_processing_check_and_clear+0x62>
   13c14:	2301      	movs	r3, #1
		if (result) {
   13c16:	461e      	mov	r6, r3
   13c18:	2b00      	cmp	r3, #0
   13c1a:	d0d9      	beq.n	13bd0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   13c1c:	4620      	mov	r0, r4
   13c1e:	f009 f877 	bl	1cd10 <event_clear>
   13c22:	e7d5      	b.n	13bd0 <channel_processing_check_and_clear+0x1c>
   13c24:	40011000 	.word	0x40011000
   13c28:	20002598 	.word	0x20002598

00013c2c <compare_int_unlock>:
	if (key) {
   13c2c:	b901      	cbnz	r1, 13c30 <compare_int_unlock+0x4>
}
   13c2e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   13c30:	2301      	movs	r3, #1
   13c32:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13c34:	4a11      	ldr	r2, [pc, #68]	; (13c7c <compare_int_unlock+0x50>)
   13c36:	f3bf 8f5b 	dmb	ish
   13c3a:	e852 1f00 	ldrex	r1, [r2]
   13c3e:	4319      	orrs	r1, r3
   13c40:	e842 1c00 	strex	ip, r1, [r2]
   13c44:	f1bc 0f00 	cmp.w	ip, #0
   13c48:	d1f7      	bne.n	13c3a <compare_int_unlock+0xe>
   13c4a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13c52:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   13c54:	4a0a      	ldr	r2, [pc, #40]	; (13c80 <compare_int_unlock+0x54>)
   13c56:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13c5a:	f3bf 8f5b 	dmb	ish
   13c5e:	4b09      	ldr	r3, [pc, #36]	; (13c84 <compare_int_unlock+0x58>)
   13c60:	681b      	ldr	r3, [r3, #0]
   13c62:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   13c66:	fa23 f000 	lsr.w	r0, r3, r0
   13c6a:	f010 0f01 	tst.w	r0, #1
   13c6e:	d0de      	beq.n	13c2e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13c70:	4b05      	ldr	r3, [pc, #20]	; (13c88 <compare_int_unlock+0x5c>)
   13c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13c76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   13c7a:	e7d8      	b.n	13c2e <compare_int_unlock+0x2>
   13c7c:	2000259c 	.word	0x2000259c
   13c80:	40011000 	.word	0x40011000
   13c84:	20002598 	.word	0x20002598
   13c88:	e000e100 	.word	0xe000e100

00013c8c <sys_clock_timeout_handler>:
{
   13c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c90:	4607      	mov	r7, r0
   13c92:	4614      	mov	r4, r2
   13c94:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   13c96:	4610      	mov	r0, r2
   13c98:	4619      	mov	r1, r3
   13c9a:	f009 f845 	bl	1cd28 <absolute_time_to_cc>
   13c9e:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13ca0:	4b15      	ldr	r3, [pc, #84]	; (13cf8 <sys_clock_timeout_handler+0x6c>)
   13ca2:	681a      	ldr	r2, [r3, #0]
   13ca4:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   13ca6:	601c      	str	r4, [r3, #0]
   13ca8:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   13caa:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   13cae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   13cb2:	d309      	bcc.n	13cc8 <sys_clock_timeout_handler+0x3c>
	return false;
   13cb4:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   13cb6:	f003 fc5b 	bl	17570 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   13cba:	4638      	mov	r0, r7
   13cbc:	f7ff ff30 	bl	13b20 <get_comparator>
   13cc0:	42a8      	cmp	r0, r5
   13cc2:	d00e      	beq.n	13ce2 <sys_clock_timeout_handler+0x56>
}
   13cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   13cc8:	4b0c      	ldr	r3, [pc, #48]	; (13cfc <sys_clock_timeout_handler+0x70>)
   13cca:	681b      	ldr	r3, [r3, #0]
   13ccc:	0a1a      	lsrs	r2, r3, #8
   13cce:	061b      	lsls	r3, r3, #24
   13cd0:	eb15 0803 	adds.w	r8, r5, r3
   13cd4:	f142 0900 	adc.w	r9, r2, #0
   13cd8:	4b09      	ldr	r3, [pc, #36]	; (13d00 <sys_clock_timeout_handler+0x74>)
   13cda:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   13cde:	2401      	movs	r4, #1
   13ce0:	e7e9      	b.n	13cb6 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   13ce2:	b11c      	cbz	r4, 13cec <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   13ce4:	4638      	mov	r0, r7
   13ce6:	f7ff ff23 	bl	13b30 <event_enable>
}
   13cea:	e7eb      	b.n	13cc4 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   13cec:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   13cf0:	4638      	mov	r0, r7
   13cf2:	f7ff ff0b 	bl	13b0c <set_comparator>
   13cf6:	e7f5      	b.n	13ce4 <sys_clock_timeout_handler+0x58>
   13cf8:	20001ac0 	.word	0x20001ac0
   13cfc:	200025a0 	.word	0x200025a0
   13d00:	20001aa8 	.word	0x20001aa8

00013d04 <z_nrf_rtc_timer_read>:
{
   13d04:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   13d06:	4b0d      	ldr	r3, [pc, #52]	; (13d3c <z_nrf_rtc_timer_read+0x38>)
   13d08:	681c      	ldr	r4, [r3, #0]
   13d0a:	0a25      	lsrs	r5, r4, #8
   13d0c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   13d0e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   13d12:	f7ff ff21 	bl	13b58 <counter>
   13d16:	4603      	mov	r3, r0
	val += cntr;
   13d18:	1900      	adds	r0, r0, r4
   13d1a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   13d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13d22:	d20a      	bcs.n	13d3a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   13d24:	4b06      	ldr	r3, [pc, #24]	; (13d40 <z_nrf_rtc_timer_read+0x3c>)
   13d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d2a:	4290      	cmp	r0, r2
   13d2c:	eb71 0303 	sbcs.w	r3, r1, r3
   13d30:	d203      	bcs.n	13d3a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   13d32:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   13d36:	f141 0100 	adc.w	r1, r1, #0
}
   13d3a:	bd38      	pop	{r3, r4, r5, pc}
   13d3c:	200025a0 	.word	0x200025a0
   13d40:	20001aa8 	.word	0x20001aa8

00013d44 <compare_set_nolocks>:
{
   13d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d46:	4606      	mov	r6, r0
   13d48:	4614      	mov	r4, r2
   13d4a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   13d4c:	4610      	mov	r0, r2
   13d4e:	4619      	mov	r1, r3
   13d50:	f008 ffea 	bl	1cd28 <absolute_time_to_cc>
   13d54:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   13d56:	f7ff ffd5 	bl	13d04 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   13d5a:	42a0      	cmp	r0, r4
   13d5c:	eb71 0305 	sbcs.w	r3, r1, r5
   13d60:	d21d      	bcs.n	13d9e <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   13d62:	1a23      	subs	r3, r4, r0
   13d64:	eb65 0101 	sbc.w	r1, r5, r1
   13d68:	4a1b      	ldr	r2, [pc, #108]	; (13dd8 <compare_set_nolocks+0x94>)
   13d6a:	4293      	cmp	r3, r2
   13d6c:	f171 0300 	sbcs.w	r3, r1, #0
   13d70:	d22f      	bcs.n	13dd2 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
   13d72:	4b1a      	ldr	r3, [pc, #104]	; (13ddc <compare_set_nolocks+0x98>)
   13d74:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   13d78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   13d7c:	42ab      	cmp	r3, r5
   13d7e:	bf08      	it	eq
   13d80:	42a2      	cmpeq	r2, r4
   13d82:	d01a      	beq.n	13dba <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   13d84:	4639      	mov	r1, r7
   13d86:	4630      	mov	r0, r6
   13d88:	f008 ffd8 	bl	1cd3c <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   13d8c:	4639      	mov	r1, r7
   13d8e:	f008 ffbb 	bl	1cd08 <counter_sub>
   13d92:	1900      	adds	r0, r0, r4
   13d94:	f145 0300 	adc.w	r3, r5, #0
   13d98:	4604      	mov	r4, r0
   13d9a:	461d      	mov	r5, r3
   13d9c:	e00d      	b.n	13dba <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   13d9e:	2301      	movs	r3, #1
   13da0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13da2:	4a0f      	ldr	r2, [pc, #60]	; (13de0 <compare_set_nolocks+0x9c>)
   13da4:	f3bf 8f5b 	dmb	ish
   13da8:	e852 1f00 	ldrex	r1, [r2]
   13dac:	4319      	orrs	r1, r3
   13dae:	e842 1000 	strex	r0, r1, [r2]
   13db2:	2800      	cmp	r0, #0
   13db4:	d1f8      	bne.n	13da8 <compare_set_nolocks+0x64>
   13db6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   13dba:	4b08      	ldr	r3, [pc, #32]	; (13ddc <compare_set_nolocks+0x98>)
   13dbc:	0132      	lsls	r2, r6, #4
   13dbe:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   13dc2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   13dc6:	9906      	ldr	r1, [sp, #24]
   13dc8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   13dca:	9b07      	ldr	r3, [sp, #28]
   13dcc:	6073      	str	r3, [r6, #4]
	return ret;
   13dce:	2000      	movs	r0, #0
}
   13dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   13dd2:	f06f 0015 	mvn.w	r0, #21
   13dd6:	e7fb      	b.n	13dd0 <compare_set_nolocks+0x8c>
   13dd8:	01000001 	.word	0x01000001
   13ddc:	20001ab0 	.word	0x20001ab0
   13de0:	20002598 	.word	0x20002598

00013de4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   13de4:	b530      	push	{r4, r5, lr}
   13de6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   13de8:	2300      	movs	r3, #0
   13dea:	4a1d      	ldr	r2, [pc, #116]	; (13e60 <sys_clock_driver_init+0x7c>)
   13dec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13df0:	2b00      	cmp	r3, #0
   13df2:	dd24      	ble.n	13e3e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   13df4:	4c1a      	ldr	r4, [pc, #104]	; (13e60 <sys_clock_driver_init+0x7c>)
   13df6:	2502      	movs	r5, #2
   13df8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13dfc:	4b19      	ldr	r3, [pc, #100]	; (13e64 <sys_clock_driver_init+0x80>)
   13dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13e02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13e06:	2200      	movs	r2, #0
   13e08:	2101      	movs	r1, #1
   13e0a:	2011      	movs	r0, #17
   13e0c:	f7fc ff9a 	bl	10d44 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   13e10:	2011      	movs	r0, #17
   13e12:	f7fc ff67 	bl	10ce4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13e16:	2301      	movs	r3, #1
   13e18:	60a3      	str	r3, [r4, #8]
   13e1a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13e1c:	4a12      	ldr	r2, [pc, #72]	; (13e68 <sys_clock_driver_init+0x84>)
   13e1e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   13e20:	2400      	movs	r4, #0
   13e22:	9401      	str	r4, [sp, #4]
   13e24:	4b11      	ldr	r3, [pc, #68]	; (13e6c <sys_clock_driver_init+0x88>)
   13e26:	9300      	str	r3, [sp, #0]
   13e28:	4a11      	ldr	r2, [pc, #68]	; (13e70 <sys_clock_driver_init+0x8c>)
   13e2a:	2300      	movs	r3, #0
   13e2c:	4620      	mov	r0, r4
   13e2e:	f008 ffc0 	bl	1cdb2 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   13e32:	4628      	mov	r0, r5
   13e34:	f7fe ff80 	bl	12d38 <z_nrf_clock_control_lf_on>

	return 0;
}
   13e38:	4620      	mov	r0, r4
   13e3a:	b003      	add	sp, #12
   13e3c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   13e3e:	4a0d      	ldr	r2, [pc, #52]	; (13e74 <sys_clock_driver_init+0x90>)
   13e40:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   13e44:	f04f 30ff 	mov.w	r0, #4294967295
   13e48:	f04f 31ff 	mov.w	r1, #4294967295
   13e4c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13e50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13e54:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   13e56:	4902      	ldr	r1, [pc, #8]	; (13e60 <sys_clock_driver_init+0x7c>)
   13e58:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13e5c:	3301      	adds	r3, #1
   13e5e:	e7c7      	b.n	13df0 <sys_clock_driver_init+0xc>
   13e60:	40011000 	.word	0x40011000
   13e64:	e000e100 	.word	0xe000e100
   13e68:	2000259c 	.word	0x2000259c
   13e6c:	00013c8d 	.word	0x00013c8d
   13e70:	007fffff 	.word	0x007fffff
   13e74:	20001ab0 	.word	0x20001ab0

00013e78 <process_channel>:
{
   13e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e7c:	b082      	sub	sp, #8
   13e7e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   13e80:	f7ff fe98 	bl	13bb4 <channel_processing_check_and_clear>
   13e84:	b910      	cbnz	r0, 13e8c <process_channel+0x14>
}
   13e86:	b002      	add	sp, #8
   13e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   13e8c:	f7ff ff3a 	bl	13d04 <z_nrf_rtc_timer_read>
   13e90:	4682      	mov	sl, r0
   13e92:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
   13e94:	f008 ff4b 	bl	1cd2e <full_int_lock>
   13e98:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
   13e9a:	4b13      	ldr	r3, [pc, #76]	; (13ee8 <process_channel+0x70>)
   13e9c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   13ea0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   13ea4:	45c2      	cmp	sl, r8
   13ea6:	eb76 0309 	sbcs.w	r3, r6, r9
   13eaa:	d20b      	bcs.n	13ec4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   13eac:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   13eae:	4628      	mov	r0, r5
   13eb0:	f008 ff41 	bl	1cd36 <full_int_unlock>
		if (handler) {
   13eb4:	2e00      	cmp	r6, #0
   13eb6:	d0e6      	beq.n	13e86 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   13eb8:	9700      	str	r7, [sp, #0]
   13eba:	4642      	mov	r2, r8
   13ebc:	464b      	mov	r3, r9
   13ebe:	4620      	mov	r0, r4
   13ec0:	47b0      	blx	r6
}
   13ec2:	e7e0      	b.n	13e86 <process_channel+0xe>
			handler = cc_data[chan].callback;
   13ec4:	4a08      	ldr	r2, [pc, #32]	; (13ee8 <process_channel+0x70>)
   13ec6:	0123      	lsls	r3, r4, #4
   13ec8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   13ecc:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   13ece:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   13ed0:	2000      	movs	r0, #0
   13ed2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13ed4:	f04f 32ff 	mov.w	r2, #4294967295
   13ed8:	f04f 33ff 	mov.w	r3, #4294967295
   13edc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   13ee0:	4620      	mov	r0, r4
   13ee2:	f7ff fe2f 	bl	13b44 <event_disable>
   13ee6:	e7e2      	b.n	13eae <process_channel+0x36>
   13ee8:	20001ab0 	.word	0x20001ab0

00013eec <rtc_nrf_isr>:
{
   13eec:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   13eee:	4b0e      	ldr	r3, [pc, #56]	; (13f28 <rtc_nrf_isr+0x3c>)
   13ef0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   13ef4:	f013 0f02 	tst.w	r3, #2
   13ef8:	d00d      	beq.n	13f16 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13efa:	4b0b      	ldr	r3, [pc, #44]	; (13f28 <rtc_nrf_isr+0x3c>)
   13efc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   13f00:	b14b      	cbz	r3, 13f16 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13f02:	4b09      	ldr	r3, [pc, #36]	; (13f28 <rtc_nrf_isr+0x3c>)
   13f04:	2200      	movs	r2, #0
   13f06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   13f0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   13f0e:	4a07      	ldr	r2, [pc, #28]	; (13f2c <rtc_nrf_isr+0x40>)
   13f10:	6813      	ldr	r3, [r2, #0]
   13f12:	3301      	adds	r3, #1
   13f14:	6013      	str	r3, [r2, #0]
{
   13f16:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13f18:	2c00      	cmp	r4, #0
   13f1a:	dd00      	ble.n	13f1e <rtc_nrf_isr+0x32>
}
   13f1c:	bd10      	pop	{r4, pc}
		process_channel(chan);
   13f1e:	4620      	mov	r0, r4
   13f20:	f7ff ffaa 	bl	13e78 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13f24:	3401      	adds	r4, #1
   13f26:	e7f7      	b.n	13f18 <rtc_nrf_isr+0x2c>
   13f28:	40011000 	.word	0x40011000
   13f2c:	200025a0 	.word	0x200025a0

00013f30 <sys_clock_set_timeout>:
{
   13f30:	b510      	push	{r4, lr}
   13f32:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13f34:	f1b0 3fff 	cmp.w	r0, #4294967295
   13f38:	d006      	beq.n	13f48 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13f3a:	2801      	cmp	r0, #1
   13f3c:	dd06      	ble.n	13f4c <sys_clock_set_timeout+0x1c>
   13f3e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13f42:	da05      	bge.n	13f50 <sys_clock_set_timeout+0x20>
   13f44:	1e44      	subs	r4, r0, #1
   13f46:	e004      	b.n	13f52 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13f48:	480f      	ldr	r0, [pc, #60]	; (13f88 <sys_clock_set_timeout+0x58>)
   13f4a:	e7f8      	b.n	13f3e <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13f4c:	2400      	movs	r4, #0
   13f4e:	e000      	b.n	13f52 <sys_clock_set_timeout+0x22>
   13f50:	4c0d      	ldr	r4, [pc, #52]	; (13f88 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   13f52:	f7ff fed7 	bl	13d04 <z_nrf_rtc_timer_read>
   13f56:	4b0d      	ldr	r3, [pc, #52]	; (13f8c <sys_clock_set_timeout+0x5c>)
   13f58:	6819      	ldr	r1, [r3, #0]
   13f5a:	685b      	ldr	r3, [r3, #4]
   13f5c:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
   13f5e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13f62:	d300      	bcc.n	13f66 <sys_clock_set_timeout+0x36>
		ticks = 0;
   13f64:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13f66:	4420      	add	r0, r4
   13f68:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
   13f6a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   13f6e:	d300      	bcc.n	13f72 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   13f70:	4a05      	ldr	r2, [pc, #20]	; (13f88 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   13f72:	2000      	movs	r0, #0
   13f74:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13f76:	9001      	str	r0, [sp, #4]
   13f78:	4905      	ldr	r1, [pc, #20]	; (13f90 <sys_clock_set_timeout+0x60>)
   13f7a:	9100      	str	r1, [sp, #0]
   13f7c:	f143 0300 	adc.w	r3, r3, #0
   13f80:	f008 ff17 	bl	1cdb2 <compare_set>
}
   13f84:	b002      	add	sp, #8
   13f86:	bd10      	pop	{r4, pc}
   13f88:	007fffff 	.word	0x007fffff
   13f8c:	20001ac0 	.word	0x20001ac0
   13f90:	00013c8d 	.word	0x00013c8d

00013f94 <sys_clock_elapsed>:
{
   13f94:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   13f96:	f7ff feb5 	bl	13d04 <z_nrf_rtc_timer_read>
   13f9a:	4b02      	ldr	r3, [pc, #8]	; (13fa4 <sys_clock_elapsed+0x10>)
   13f9c:	681b      	ldr	r3, [r3, #0]
}
   13f9e:	1ac0      	subs	r0, r0, r3
   13fa0:	bd08      	pop	{r3, pc}
   13fa2:	bf00      	nop
   13fa4:	20001ac0 	.word	0x20001ac0

00013fa8 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   13fa8:	b500      	push	{lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   13faa:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   13fae:	d001      	beq.n	13fb4 <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   13fb0:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
   13fb2:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   13fb4:	f3c0 1e81 	ubfx	lr, r0, #6, #2
    *p_pin = pin_number & 0x1F;
   13fb8:	f000 0c1f 	and.w	ip, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13fbc:	f010 0f20 	tst.w	r0, #32
   13fc0:	d10d      	bne.n	13fde <nrf_pin_configure+0x36>
        case 0: return NRF_P0;
   13fc2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   13fc6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   13fca:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   13fce:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   13fd2:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
   13fd6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   13fda:	f85d fb04 	ldr.w	pc, [sp], #4
        case 1: return NRF_P1;
   13fde:	4801      	ldr	r0, [pc, #4]	; (13fe4 <nrf_pin_configure+0x3c>)
   13fe0:	e7f1      	b.n	13fc6 <nrf_pin_configure+0x1e>
   13fe2:	bf00      	nop
   13fe4:	50000300 	.word	0x50000300

00013fe8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   13fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fec:	4606      	mov	r6, r0
   13fee:	460f      	mov	r7, r1
   13ff0:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   13ff2:	2400      	movs	r4, #0
   13ff4:	e017      	b.n	14026 <pinctrl_configure_pins+0x3e>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   13ff6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13ffa:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   13ffe:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   14002:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14006:	f011 0f20 	tst.w	r1, #32
   1400a:	d161      	bne.n	140d0 <pinctrl_configure_pins+0xe8>
        case 0: return NRF_P0;
   1400c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14010:	2101      	movs	r1, #1
   14012:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   14016:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1401a:	460a      	mov	r2, r1
   1401c:	5830      	ldr	r0, [r6, r0]
   1401e:	f7ff ffc3 	bl	13fa8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   14022:	3401      	adds	r4, #1
   14024:	b2e4      	uxtb	r4, r4
   14026:	42bc      	cmp	r4, r7
   14028:	f080 81f1 	bcs.w	1440e <pinctrl_configure_pins+0x426>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1402c:	00a0      	lsls	r0, r4, #2
   1402e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   14032:	f3c5 2303 	ubfx	r3, r5, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   14036:	0c2a      	lsrs	r2, r5, #16
   14038:	2a22      	cmp	r2, #34	; 0x22
   1403a:	f200 81ea 	bhi.w	14412 <pinctrl_configure_pins+0x42a>
   1403e:	a101      	add	r1, pc, #4	; (adr r1, 14044 <pinctrl_configure_pins+0x5c>)
   14040:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   14044:	00013ff7 	.word	0x00013ff7
   14048:	000140d5 	.word	0x000140d5
   1404c:	000140eb 	.word	0x000140eb
   14050:	0001411d 	.word	0x0001411d
   14054:	00014133 	.word	0x00014133
   14058:	00014165 	.word	0x00014165
   1405c:	00014197 	.word	0x00014197
   14060:	000141ad 	.word	0x000141ad
   14064:	000141c3 	.word	0x000141c3
   14068:	000141d9 	.word	0x000141d9
   1406c:	000141ef 	.word	0x000141ef
   14070:	00014205 	.word	0x00014205
   14074:	0001421d 	.word	0x0001421d
   14078:	00014413 	.word	0x00014413
   1407c:	00014413 	.word	0x00014413
   14080:	00014413 	.word	0x00014413
   14084:	00014413 	.word	0x00014413
   14088:	00014413 	.word	0x00014413
   1408c:	00014413 	.word	0x00014413
   14090:	00014413 	.word	0x00014413
   14094:	00014413 	.word	0x00014413
   14098:	00014413 	.word	0x00014413
   1409c:	00014235 	.word	0x00014235
   140a0:	00014289 	.word	0x00014289
   140a4:	000142dd 	.word	0x000142dd
   140a8:	00014331 	.word	0x00014331
   140ac:	00014413 	.word	0x00014413
   140b0:	00014413 	.word	0x00014413
   140b4:	00014413 	.word	0x00014413
   140b8:	00014385 	.word	0x00014385
   140bc:	0001439b 	.word	0x0001439b
   140c0:	000143b1 	.word	0x000143b1
   140c4:	000143c7 	.word	0x000143c7
   140c8:	000143dd 	.word	0x000143dd
   140cc:	000143f9 	.word	0x000143f9
        case 1: return NRF_P1;
   140d0:	4dc8      	ldr	r5, [pc, #800]	; (143f4 <pinctrl_configure_pins+0x40c>)
   140d2:	e79d      	b.n	14010 <pinctrl_configure_pins+0x28>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   140d4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   140d8:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   140dc:	2200      	movs	r2, #0
   140de:	4611      	mov	r1, r2
   140e0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   140e4:	f7ff ff60 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   140e8:	e79b      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   140ea:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   140ee:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   140f2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   140f6:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   140fa:	f011 0f20 	tst.w	r1, #32
   140fe:	d10b      	bne.n	14118 <pinctrl_configure_pins+0x130>
        case 0: return NRF_P0;
   14100:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14104:	2101      	movs	r1, #1
   14106:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   1410a:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1410e:	460a      	mov	r2, r1
   14110:	5830      	ldr	r0, [r6, r0]
   14112:	f7ff ff49 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   14116:	e784      	b.n	14022 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   14118:	4db6      	ldr	r5, [pc, #728]	; (143f4 <pinctrl_configure_pins+0x40c>)
   1411a:	e7f3      	b.n	14104 <pinctrl_configure_pins+0x11c>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   1411c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   14120:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   14124:	2200      	movs	r2, #0
   14126:	4611      	mov	r1, r2
   14128:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1412c:	f7ff ff3c 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   14130:	e777      	b.n	14022 <pinctrl_configure_pins+0x3a>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   14132:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   14136:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   1413a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   1413e:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14142:	f011 0f20 	tst.w	r1, #32
   14146:	d10b      	bne.n	14160 <pinctrl_configure_pins+0x178>
        case 0: return NRF_P0;
   14148:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1414c:	2101      	movs	r1, #1
   1414e:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
   14152:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   14156:	2200      	movs	r2, #0
   14158:	5830      	ldr	r0, [r6, r0]
   1415a:	f7ff ff25 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   1415e:	e760      	b.n	14022 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   14160:	4da4      	ldr	r5, [pc, #656]	; (143f4 <pinctrl_configure_pins+0x40c>)
   14162:	e7f3      	b.n	1414c <pinctrl_configure_pins+0x164>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   14164:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   14168:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   1416c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   14170:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14174:	f011 0f20 	tst.w	r1, #32
   14178:	d10b      	bne.n	14192 <pinctrl_configure_pins+0x1aa>
        case 0: return NRF_P0;
   1417a:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1417e:	2101      	movs	r1, #1
   14180:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
   14184:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   14188:	460a      	mov	r2, r1
   1418a:	5830      	ldr	r0, [r6, r0]
   1418c:	f7ff ff0c 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   14190:	e747      	b.n	14022 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   14192:	4d98      	ldr	r5, [pc, #608]	; (143f4 <pinctrl_configure_pins+0x40c>)
   14194:	e7f3      	b.n	1417e <pinctrl_configure_pins+0x196>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   14196:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1419a:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1419e:	2200      	movs	r2, #0
   141a0:	4611      	mov	r1, r2
   141a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   141a6:	f7ff feff 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   141aa:	e73a      	b.n	14022 <pinctrl_configure_pins+0x3a>
#endif /* defined(NRF_PSEL_SPIM) */
#if defined(NRF_PSEL_SPIS)
		case NRF_FUN_SPIS_SCK:
			NRF_PSEL_SPIS(reg, SCK) = NRF_GET_PIN(pins[i]);
   141ac:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   141b0:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   141b4:	2200      	movs	r2, #0
   141b6:	4611      	mov	r1, r2
   141b8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   141bc:	f7ff fef4 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   141c0:	e72f      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_SPIS_MOSI:
			NRF_PSEL_SPIS(reg, MOSI) = NRF_GET_PIN(pins[i]);
   141c2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   141c6:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   141ca:	2200      	movs	r2, #0
   141cc:	4611      	mov	r1, r2
   141ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   141d2:	f7ff fee9 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   141d6:	e724      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_SPIS_MISO:
			NRF_PSEL_SPIS(reg, MISO) = NRF_GET_PIN(pins[i]);
   141d8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   141dc:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   141e0:	2201      	movs	r2, #1
   141e2:	2100      	movs	r1, #0
   141e4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   141e8:	f7ff fede 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   141ec:	e719      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_SPIS_CSN:
			NRF_PSEL_SPIS(reg, CSN) = NRF_GET_PIN(pins[i]);
   141ee:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   141f2:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   141f6:	2200      	movs	r2, #0
   141f8:	4611      	mov	r1, r2
   141fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   141fe:	f7ff fed3 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   14202:	e70e      	b.n	14022 <pinctrl_configure_pins+0x3a>
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   14204:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   14208:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1420c:	b903      	cbnz	r3, 14210 <pinctrl_configure_pins+0x228>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
   1420e:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   14210:	2200      	movs	r2, #0
   14212:	4611      	mov	r1, r2
   14214:	5830      	ldr	r0, [r6, r0]
   14216:	f7ff fec7 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   1421a:	e702      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   1421c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   14220:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   14224:	b903      	cbnz	r3, 14228 <pinctrl_configure_pins+0x240>
				drive = NRF_DRIVE_S0D1;
   14226:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   14228:	2200      	movs	r2, #0
   1422a:	4611      	mov	r1, r2
   1422c:	5830      	ldr	r0, [r6, r0]
   1422e:	f7ff febb 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   14232:	e6f6      	b.n	14022 <pinctrl_configure_pins+0x3a>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   14234:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   14238:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1423c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   14240:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   14244:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   14248:	d111      	bne.n	1426e <pinctrl_configure_pins+0x286>
    *p_pin = pin_number & 0x1F;
   1424a:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1424e:	094a      	lsrs	r2, r1, #5
   14250:	d10b      	bne.n	1426a <pinctrl_configure_pins+0x282>
        case 0: return NRF_P0;
   14252:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14256:	2201      	movs	r2, #1
   14258:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   1425a:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1425e:	2201      	movs	r2, #1
   14260:	4611      	mov	r1, r2
   14262:	5830      	ldr	r0, [r6, r0]
   14264:	f7ff fea0 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   14268:	e6db      	b.n	14022 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   1426a:	4962      	ldr	r1, [pc, #392]	; (143f4 <pinctrl_configure_pins+0x40c>)
   1426c:	e7f3      	b.n	14256 <pinctrl_configure_pins+0x26e>
    *p_pin = pin_number & 0x1F;
   1426e:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14272:	094a      	lsrs	r2, r1, #5
   14274:	d106      	bne.n	14284 <pinctrl_configure_pins+0x29c>
        case 0: return NRF_P0;
   14276:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1427a:	2201      	movs	r2, #1
   1427c:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   1427e:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
   14282:	e7ec      	b.n	1425e <pinctrl_configure_pins+0x276>
        case 1: return NRF_P1;
   14284:	495b      	ldr	r1, [pc, #364]	; (143f4 <pinctrl_configure_pins+0x40c>)
   14286:	e7f8      	b.n	1427a <pinctrl_configure_pins+0x292>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   14288:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1428c:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   14290:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   14294:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   14298:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   1429c:	d111      	bne.n	142c2 <pinctrl_configure_pins+0x2da>
    *p_pin = pin_number & 0x1F;
   1429e:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   142a2:	094a      	lsrs	r2, r1, #5
   142a4:	d10b      	bne.n	142be <pinctrl_configure_pins+0x2d6>
        case 0: return NRF_P0;
   142a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   142aa:	2201      	movs	r2, #1
   142ac:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   142ae:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   142b2:	2201      	movs	r2, #1
   142b4:	4611      	mov	r1, r2
   142b6:	5830      	ldr	r0, [r6, r0]
   142b8:	f7ff fe76 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   142bc:	e6b1      	b.n	14022 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   142be:	494d      	ldr	r1, [pc, #308]	; (143f4 <pinctrl_configure_pins+0x40c>)
   142c0:	e7f3      	b.n	142aa <pinctrl_configure_pins+0x2c2>
    *p_pin = pin_number & 0x1F;
   142c2:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   142c6:	094a      	lsrs	r2, r1, #5
   142c8:	d106      	bne.n	142d8 <pinctrl_configure_pins+0x2f0>
        case 0: return NRF_P0;
   142ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   142ce:	2201      	movs	r2, #1
   142d0:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   142d2:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
   142d6:	e7ec      	b.n	142b2 <pinctrl_configure_pins+0x2ca>
        case 1: return NRF_P1;
   142d8:	4946      	ldr	r1, [pc, #280]	; (143f4 <pinctrl_configure_pins+0x40c>)
   142da:	e7f8      	b.n	142ce <pinctrl_configure_pins+0x2e6>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   142dc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   142e0:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   142e4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   142e8:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   142ec:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   142f0:	d111      	bne.n	14316 <pinctrl_configure_pins+0x32e>
    *p_pin = pin_number & 0x1F;
   142f2:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   142f6:	094a      	lsrs	r2, r1, #5
   142f8:	d10b      	bne.n	14312 <pinctrl_configure_pins+0x32a>
        case 0: return NRF_P0;
   142fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   142fe:	2201      	movs	r2, #1
   14300:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   14302:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   14306:	2201      	movs	r2, #1
   14308:	4611      	mov	r1, r2
   1430a:	5830      	ldr	r0, [r6, r0]
   1430c:	f7ff fe4c 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   14310:	e687      	b.n	14022 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   14312:	4938      	ldr	r1, [pc, #224]	; (143f4 <pinctrl_configure_pins+0x40c>)
   14314:	e7f3      	b.n	142fe <pinctrl_configure_pins+0x316>
    *p_pin = pin_number & 0x1F;
   14316:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1431a:	094a      	lsrs	r2, r1, #5
   1431c:	d106      	bne.n	1432c <pinctrl_configure_pins+0x344>
        case 0: return NRF_P0;
   1431e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14322:	2201      	movs	r2, #1
   14324:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   14326:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
   1432a:	e7ec      	b.n	14306 <pinctrl_configure_pins+0x31e>
        case 1: return NRF_P1;
   1432c:	4931      	ldr	r1, [pc, #196]	; (143f4 <pinctrl_configure_pins+0x40c>)
   1432e:	e7f8      	b.n	14322 <pinctrl_configure_pins+0x33a>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   14330:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   14334:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   14338:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   1433c:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   14340:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   14344:	d111      	bne.n	1436a <pinctrl_configure_pins+0x382>
    *p_pin = pin_number & 0x1F;
   14346:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1434a:	094a      	lsrs	r2, r1, #5
   1434c:	d10b      	bne.n	14366 <pinctrl_configure_pins+0x37e>
        case 0: return NRF_P0;
   1434e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14352:	2201      	movs	r2, #1
   14354:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   14356:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1435a:	2201      	movs	r2, #1
   1435c:	4611      	mov	r1, r2
   1435e:	5830      	ldr	r0, [r6, r0]
   14360:	f7ff fe22 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   14364:	e65d      	b.n	14022 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   14366:	4923      	ldr	r1, [pc, #140]	; (143f4 <pinctrl_configure_pins+0x40c>)
   14368:	e7f3      	b.n	14352 <pinctrl_configure_pins+0x36a>
    *p_pin = pin_number & 0x1F;
   1436a:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1436e:	094a      	lsrs	r2, r1, #5
   14370:	d106      	bne.n	14380 <pinctrl_configure_pins+0x398>
        case 0: return NRF_P0;
   14372:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14376:	2201      	movs	r2, #1
   14378:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   1437a:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
   1437e:	e7ec      	b.n	1435a <pinctrl_configure_pins+0x372>
        case 1: return NRF_P1;
   14380:	491c      	ldr	r1, [pc, #112]	; (143f4 <pinctrl_configure_pins+0x40c>)
   14382:	e7f8      	b.n	14376 <pinctrl_configure_pins+0x38e>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   14384:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   14388:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1438c:	2201      	movs	r2, #1
   1438e:	2100      	movs	r1, #0
   14390:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   14394:	f7ff fe08 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   14398:	e643      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   1439a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1439e:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   143a2:	2201      	movs	r2, #1
   143a4:	2100      	movs	r1, #0
   143a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   143aa:	f7ff fdfd 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   143ae:	e638      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   143b0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   143b4:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   143b8:	2201      	movs	r2, #1
   143ba:	2100      	movs	r1, #0
   143bc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   143c0:	f7ff fdf2 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   143c4:	e62d      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   143c6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   143ca:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   143ce:	2201      	movs	r2, #1
   143d0:	2100      	movs	r1, #0
   143d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   143d6:	f7ff fde7 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   143da:	e622      	b.n	14022 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   143dc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   143e0:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   143e4:	2201      	movs	r2, #1
   143e6:	2100      	movs	r1, #0
   143e8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   143ec:	f7ff fddc 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   143f0:	e617      	b.n	14022 <pinctrl_configure_pins+0x3a>
   143f2:	bf00      	nop
   143f4:	50000300 	.word	0x50000300
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   143f8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   143fc:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   14400:	2201      	movs	r2, #1
   14402:	2100      	movs	r1, #0
   14404:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   14408:	f7ff fdce 	bl	13fa8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   1440c:	e609      	b.n	14022 <pinctrl_configure_pins+0x3a>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   1440e:	2000      	movs	r0, #0
   14410:	e001      	b.n	14416 <pinctrl_configure_pins+0x42e>
		switch (NRF_GET_FUN(pins[i])) {
   14412:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   14416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1441a:	bf00      	nop

0001441c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1441c:	b508      	push	{r3, lr}
   1441e:	4602      	mov	r2, r0
   14420:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   14422:	4802      	ldr	r0, [pc, #8]	; (1442c <multithreading_lock_acquire+0x10>)
   14424:	f002 f8d0 	bl	165c8 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   14428:	bd08      	pop	{r3, pc}
   1442a:	bf00      	nop
   1442c:	200009a8 	.word	0x200009a8

00014430 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   14430:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   14432:	4802      	ldr	r0, [pc, #8]	; (1443c <multithreading_lock_release+0xc>)
   14434:	f002 f952 	bl	166dc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   14438:	bd08      	pop	{r3, pc}
   1443a:	bf00      	nop
   1443c:	200009a8 	.word	0x200009a8

00014440 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   14440:	b510      	push	{r4, lr}
   14442:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   14444:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   14446:	4803      	ldr	r0, [pc, #12]	; (14454 <rand_prio_low_vector_get_blocking+0x14>)
   14448:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1444a:	680c      	ldr	r4, [r1, #0]
   1444c:	4619      	mov	r1, r3
   1444e:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   14450:	bd10      	pop	{r4, pc}
   14452:	bf00      	nop
   14454:	0001e588 	.word	0x0001e588

00014458 <hci_driver_receive_process>:
{
   14458:	b538      	push	{r3, r4, r5, lr}
	received_evt = fetch_and_process_hci_evt(&hci_buf[0]);
   1445a:	4d07      	ldr	r5, [pc, #28]	; (14478 <hci_driver_receive_process+0x20>)
   1445c:	4628      	mov	r0, r5
   1445e:	f008 fd27 	bl	1ceb0 <fetch_and_process_hci_evt>
   14462:	4604      	mov	r4, r0
	received_msg = fetch_and_process_hci_msg(&hci_buf[0]);
   14464:	4628      	mov	r0, r5
   14466:	f008 fd51 	bl	1cf0c <fetch_and_process_hci_msg>
	if (received_evt || received_data || received_msg) {
   1446a:	b904      	cbnz	r4, 1446e <hci_driver_receive_process+0x16>
   1446c:	b118      	cbz	r0, 14476 <hci_driver_receive_process+0x1e>
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1446e:	4903      	ldr	r1, [pc, #12]	; (1447c <hci_driver_receive_process+0x24>)
   14470:	4803      	ldr	r0, [pc, #12]	; (14480 <hci_driver_receive_process+0x28>)
   14472:	f009 fd2b 	bl	1decc <k_work_submit_to_queue>
}
   14476:	bd38      	pop	{r3, r4, r5, pc}
   14478:	200025a4 	.word	0x200025a4
   1447c:	200026a8 	.word	0x200026a8
   14480:	20001ac8 	.word	0x20001ac8

00014484 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   14484:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   14486:	4803      	ldr	r0, [pc, #12]	; (14494 <hci_driver_init+0x10>)
   14488:	f7fd fcfc 	bl	11e84 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1448c:	4802      	ldr	r0, [pc, #8]	; (14498 <hci_driver_init+0x14>)
   1448e:	f7ef fd4b 	bl	3f28 <sdc_init>
	return err;
}
   14492:	bd08      	pop	{r3, pc}
   14494:	0001ee70 	.word	0x0001ee70
   14498:	0001ce21 	.word	0x0001ce21

0001449c <cmd_handle>:
{
   1449c:	b538      	push	{r3, r4, r5, lr}
   1449e:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   144a0:	f04f 30ff 	mov.w	r0, #4294967295
   144a4:	f04f 31ff 	mov.w	r1, #4294967295
   144a8:	f7ff ffb8 	bl	1441c <multithreading_lock_acquire>
	if (!errcode) {
   144ac:	4604      	mov	r4, r0
   144ae:	b110      	cbz	r0, 144b6 <cmd_handle+0x1a>
	if (errcode) {
   144b0:	b144      	cbz	r4, 144c4 <cmd_handle+0x28>
}
   144b2:	4620      	mov	r0, r4
   144b4:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   144b6:	68a8      	ldr	r0, [r5, #8]
   144b8:	f000 f880 	bl	145bc <hci_internal_cmd_put>
   144bc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   144be:	f7ff ffb7 	bl	14430 <multithreading_lock_release>
   144c2:	e7f5      	b.n	144b0 <cmd_handle+0x14>
   144c4:	4902      	ldr	r1, [pc, #8]	; (144d0 <cmd_handle+0x34>)
   144c6:	4803      	ldr	r0, [pc, #12]	; (144d4 <cmd_handle+0x38>)
   144c8:	f009 fd00 	bl	1decc <k_work_submit_to_queue>
	return 0;
   144cc:	e7f1      	b.n	144b2 <cmd_handle+0x16>
   144ce:	bf00      	nop
   144d0:	200026a8 	.word	0x200026a8
   144d4:	20001ac8 	.word	0x20001ac8

000144d8 <rand_prio_high_vector_get>:
{
   144d8:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   144da:	4b08      	ldr	r3, [pc, #32]	; (144fc <rand_prio_high_vector_get+0x24>)
   144dc:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   144de:	685c      	ldr	r4, [r3, #4]
   144e0:	b144      	cbz	r4, 144f4 <rand_prio_high_vector_get+0x1c>
   144e2:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   144e4:	2300      	movs	r3, #0
   144e6:	4601      	mov	r1, r0
   144e8:	4804      	ldr	r0, [pc, #16]	; (144fc <rand_prio_high_vector_get+0x24>)
   144ea:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   144ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   144f0:	b2c0      	uxtb	r0, r0
   144f2:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   144f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   144f8:	e7f8      	b.n	144ec <rand_prio_high_vector_get+0x14>
   144fa:	bf00      	nop
   144fc:	0001e588 	.word	0x0001e588

00014500 <rand_prio_low_vector_get>:
{
   14500:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   14502:	4b08      	ldr	r3, [pc, #32]	; (14524 <rand_prio_low_vector_get+0x24>)
   14504:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   14506:	685c      	ldr	r4, [r3, #4]
   14508:	b144      	cbz	r4, 1451c <rand_prio_low_vector_get+0x1c>
   1450a:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1450c:	2300      	movs	r3, #0
   1450e:	4601      	mov	r1, r0
   14510:	4804      	ldr	r0, [pc, #16]	; (14524 <rand_prio_low_vector_get+0x24>)
   14512:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   14514:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   14518:	b2c0      	uxtb	r0, r0
   1451a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1451c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14520:	e7f8      	b.n	14514 <rand_prio_low_vector_get+0x14>
   14522:	bf00      	nop
   14524:	0001e588 	.word	0x0001e588

00014528 <hci_driver_open>:
{
   14528:	b530      	push	{r4, r5, lr}
   1452a:	b089      	sub	sp, #36	; 0x24
	sdc_build_revision_get(build_revision);
   1452c:	a803      	add	r0, sp, #12
   1452e:	f7ef fc5b 	bl	3de8 <sdc_build_revision_get>
	err = configure_supported_features();
   14532:	f008 fd2f 	bl	1cf94 <configure_supported_features>
	if (err) {
   14536:	4604      	mov	r4, r0
   14538:	b110      	cbz	r0, 14540 <hci_driver_open+0x18>
}
   1453a:	4620      	mov	r0, r4
   1453c:	b009      	add	sp, #36	; 0x24
   1453e:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   14540:	f008 fd36 	bl	1cfb0 <configure_memory_usage>
	if (err) {
   14544:	4604      	mov	r4, r0
   14546:	2800      	cmp	r0, #0
   14548:	d1f7      	bne.n	1453a <hci_driver_open+0x12>
   1454a:	4816      	ldr	r0, [pc, #88]	; (145a4 <hci_driver_open+0x7c>)
   1454c:	f009 fa5a 	bl	1da04 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   14550:	b308      	cbz	r0, 14596 <hci_driver_open+0x6e>
	sdc_rand_source_t rand_functions = {
   14552:	4a15      	ldr	r2, [pc, #84]	; (145a8 <hci_driver_open+0x80>)
   14554:	466b      	mov	r3, sp
   14556:	ca07      	ldmia	r2, {r0, r1, r2}
   14558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1455c:	4618      	mov	r0, r3
   1455e:	f7ef fdd7 	bl	4110 <sdc_rand_source_register>
	if (err) {
   14562:	4604      	mov	r4, r0
   14564:	b9d0      	cbnz	r0, 1459c <hci_driver_open+0x74>
	k_work_init(&receive_work, receive_work_handler);
   14566:	4911      	ldr	r1, [pc, #68]	; (145ac <hci_driver_open+0x84>)
   14568:	4811      	ldr	r0, [pc, #68]	; (145b0 <hci_driver_open+0x88>)
   1456a:	f009 fc93 	bl	1de94 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1456e:	f04f 30ff 	mov.w	r0, #4294967295
   14572:	f04f 31ff 	mov.w	r1, #4294967295
   14576:	f7ff ff51 	bl	1441c <multithreading_lock_acquire>
	if (!err) {
   1457a:	4605      	mov	r5, r0
   1457c:	b118      	cbz	r0, 14586 <hci_driver_open+0x5e>
	if (err < 0) {
   1457e:	2d00      	cmp	r5, #0
   14580:	dadb      	bge.n	1453a <hci_driver_open+0x12>
		return err;
   14582:	462c      	mov	r4, r5
   14584:	e7d9      	b.n	1453a <hci_driver_open+0x12>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   14586:	490b      	ldr	r1, [pc, #44]	; (145b4 <hci_driver_open+0x8c>)
   14588:	480b      	ldr	r0, [pc, #44]	; (145b8 <hci_driver_open+0x90>)
   1458a:	f7ef fca5 	bl	3ed8 <sdc_enable>
   1458e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   14590:	f7ff ff4e 	bl	14430 <multithreading_lock_release>
   14594:	e7f3      	b.n	1457e <hci_driver_open+0x56>
		return -ENODEV;
   14596:	f06f 0412 	mvn.w	r4, #18
   1459a:	e7ce      	b.n	1453a <hci_driver_open+0x12>
		return -EINVAL;
   1459c:	f06f 0415 	mvn.w	r4, #21
   145a0:	e7cb      	b.n	1453a <hci_driver_open+0x12>
   145a2:	bf00      	nop
   145a4:	0001e588 	.word	0x0001e588
   145a8:	0001e858 	.word	0x0001e858
   145ac:	0001cf61 	.word	0x0001cf61
   145b0:	200026a8 	.word	0x200026a8
   145b4:	200026b8 	.word	0x200026b8
   145b8:	00014459 	.word	0x00014459

000145bc <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   145bc:	b538      	push	{r3, r4, r5, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   145be:	7843      	ldrb	r3, [r0, #1]
   145c0:	7805      	ldrb	r5, [r0, #0]
   145c2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   145c6:	4b12      	ldr	r3, [pc, #72]	; (14610 <hci_internal_cmd_put+0x54>)
   145c8:	781b      	ldrb	r3, [r3, #0]
   145ca:	b9f3      	cbnz	r3, 1460a <hci_internal_cmd_put+0x4e>
   145cc:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
	} else if (!is_host_using_legacy_and_extended_commands(opcode)) {
   145ce:	4628      	mov	r0, r5
   145d0:	f008 fd7f 	bl	1d0d2 <is_host_using_legacy_and_extended_commands>
   145d4:	b170      	cbz	r0, 145f4 <hci_internal_cmd_put+0x38>
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
	} else {
		/* The host is violating the specification
		 * by mixing legacy and extended commands.
		 */
		if (command_generates_command_complete_event(opcode)) {
   145d6:	4628      	mov	r0, r5
   145d8:	f008 fd3c 	bl	1d054 <command_generates_command_complete_event>
   145dc:	b178      	cbz	r0, 145fe <hci_internal_cmd_put+0x42>
			uint8_t param_length = sizeof(struct bt_hci_evt_cmd_complete)
					     + sizeof(struct bt_hci_evt_cc_status);
			(void)encode_command_complete_header(cmd_complete_or_status.raw_event,
   145de:	230c      	movs	r3, #12
   145e0:	2204      	movs	r2, #4
   145e2:	4629      	mov	r1, r5
   145e4:	480b      	ldr	r0, [pc, #44]	; (14614 <hci_internal_cmd_put+0x58>)
   145e6:	f008 fd7f 	bl	1d0e8 <encode_command_complete_header>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   145ea:	4b09      	ldr	r3, [pc, #36]	; (14610 <hci_internal_cmd_put+0x54>)
   145ec:	2201      	movs	r2, #1
   145ee:	701a      	strb	r2, [r3, #0]
	}

	return 0;
   145f0:	2000      	movs	r0, #0
}
   145f2:	bd38      	pop	{r3, r4, r5, pc}
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   145f4:	4907      	ldr	r1, [pc, #28]	; (14614 <hci_internal_cmd_put+0x58>)
   145f6:	4620      	mov	r0, r4
   145f8:	f008 ffbc 	bl	1d574 <cmd_put>
   145fc:	e7f5      	b.n	145ea <hci_internal_cmd_put+0x2e>
			(void)encode_command_status(cmd_complete_or_status.raw_event,
   145fe:	220c      	movs	r2, #12
   14600:	4629      	mov	r1, r5
   14602:	4804      	ldr	r0, [pc, #16]	; (14614 <hci_internal_cmd_put+0x58>)
   14604:	f008 fd67 	bl	1d0d6 <encode_command_status>
   14608:	e7ef      	b.n	145ea <hci_internal_cmd_put+0x2e>
		return -NRF_EPERM;
   1460a:	f04f 30ff 	mov.w	r0, #4294967295
   1460e:	e7f0      	b.n	145f2 <hci_internal_cmd_put+0x36>
   14610:	20002a7c 	.word	0x20002a7c
   14614:	20002a7d 	.word	0x20002a7d

00014618 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   14618:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1461a:	4b07      	ldr	r3, [pc, #28]	; (14638 <hci_internal_evt_get+0x20>)
   1461c:	781b      	ldrb	r3, [r3, #0]
   1461e:	b913      	cbnz	r3, 14626 <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   14620:	f7f8 fece 	bl	d3c0 <sdc_hci_evt_get>
}
   14624:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   14626:	4c04      	ldr	r4, [pc, #16]	; (14638 <hci_internal_evt_get+0x20>)
   14628:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1462a:	3202      	adds	r2, #2
   1462c:	1c61      	adds	r1, r4, #1
   1462e:	f006 fe18 	bl	1b262 <memcpy>
		cmd_complete_or_status.occurred = false;
   14632:	2000      	movs	r0, #0
   14634:	7020      	strb	r0, [r4, #0]
		return 0;
   14636:	e7f5      	b.n	14624 <hci_internal_evt_get+0xc>
   14638:	20002a7c 	.word	0x20002a7c

0001463c <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1463c:	b538      	push	{r3, r4, r5, lr}
   1463e:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   14640:	4b08      	ldr	r3, [pc, #32]	; (14664 <hci_internal_msg_get+0x28>)
   14642:	781b      	ldrb	r3, [r3, #0]
   14644:	b913      	cbnz	r3, 1464c <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   14646:	f7f8 fec8 	bl	d3da <sdc_hci_get>
}
   1464a:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1464c:	4d05      	ldr	r5, [pc, #20]	; (14664 <hci_internal_msg_get+0x28>)
   1464e:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   14650:	3202      	adds	r2, #2
   14652:	1c69      	adds	r1, r5, #1
   14654:	f006 fe05 	bl	1b262 <memcpy>
		cmd_complete_or_status.occurred = false;
   14658:	2000      	movs	r0, #0
   1465a:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1465c:	2304      	movs	r3, #4
   1465e:	7023      	strb	r3, [r4, #0]
		return 0;
   14660:	e7f3      	b.n	1464a <hci_internal_msg_get+0xe>
   14662:	bf00      	nop
   14664:	20002a7c 	.word	0x20002a7c

00014668 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   14668:	b538      	push	{r3, r4, r5, lr}
   1466a:	4605      	mov	r5, r0
   1466c:	460c      	mov	r4, r1
   1466e:	4809      	ldr	r0, [pc, #36]	; (14694 <bt_rand+0x2c>)
   14670:	f009 f9c8 	bl	1da04 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   14674:	f080 0301 	eor.w	r3, r0, #1
   14678:	f013 0fff 	tst.w	r3, #255	; 0xff
   1467c:	d106      	bne.n	1468c <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1467e:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   14680:	4804      	ldr	r0, [pc, #16]	; (14694 <bt_rand+0x2c>)
   14682:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   14684:	681b      	ldr	r3, [r3, #0]
   14686:	4629      	mov	r1, r5
   14688:	4798      	blx	r3
}
   1468a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1468c:	f06f 0012 	mvn.w	r0, #18
   14690:	e7fb      	b.n	1468a <bt_rand+0x22>
   14692:	bf00      	nop
   14694:	0001e588 	.word	0x0001e588

00014698 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   14698:	b510      	push	{r4, lr}
   1469a:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1469c:	f008 ffc2 	bl	1d624 <m_config_clock_source_get>
   146a0:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   146a4:	2332      	movs	r3, #50	; 0x32
   146a6:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   146aa:	2300      	movs	r3, #0
   146ac:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   146b0:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   146b4:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   146b8:	4a0c      	ldr	r2, [pc, #48]	; (146ec <mpsl_lib_init+0x54>)
   146ba:	2119      	movs	r1, #25
   146bc:	4668      	mov	r0, sp
   146be:	f7ef f8a5 	bl	380c <mpsl_init>
	if (err) {
   146c2:	4604      	mov	r4, r0
   146c4:	b110      	cbz	r0, 146cc <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   146c6:	4620      	mov	r0, r4
   146c8:	b002      	add	sp, #8
   146ca:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   146cc:	2201      	movs	r2, #1
   146ce:	2100      	movs	r1, #0
   146d0:	2008      	movs	r0, #8
   146d2:	f7fc fb37 	bl	10d44 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   146d6:	2201      	movs	r2, #1
   146d8:	2100      	movs	r1, #0
   146da:	200b      	movs	r0, #11
   146dc:	f7fc fb32 	bl	10d44 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   146e0:	2201      	movs	r2, #1
   146e2:	2100      	movs	r1, #0
   146e4:	4610      	mov	r0, r2
   146e6:	f7fc fb2d 	bl	10d44 <z_arm_irq_priority_set>
	return 0;
   146ea:	e7ec      	b.n	146c6 <mpsl_lib_init+0x2e>
   146ec:	0001d617 	.word	0x0001d617

000146f0 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   146f0:	b530      	push	{r4, r5, lr}
   146f2:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   146f4:	4d0d      	ldr	r5, [pc, #52]	; (1472c <mpsl_low_prio_init+0x3c>)
   146f6:	2400      	movs	r4, #0
   146f8:	9400      	str	r4, [sp, #0]
   146fa:	f06f 0309 	mvn.w	r3, #9
   146fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14702:	490b      	ldr	r1, [pc, #44]	; (14730 <mpsl_low_prio_init+0x40>)
   14704:	4628      	mov	r0, r5
   14706:	f002 f9db 	bl	16ac0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1470a:	490a      	ldr	r1, [pc, #40]	; (14734 <mpsl_low_prio_init+0x44>)
   1470c:	4628      	mov	r0, r5
   1470e:	f001 fe6f 	bl	163f0 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   14712:	4909      	ldr	r1, [pc, #36]	; (14738 <mpsl_low_prio_init+0x48>)
   14714:	4809      	ldr	r0, [pc, #36]	; (1473c <mpsl_low_prio_init+0x4c>)
   14716:	f009 fbbd 	bl	1de94 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1471a:	4622      	mov	r2, r4
   1471c:	2104      	movs	r1, #4
   1471e:	2019      	movs	r0, #25
   14720:	f7fc fb10 	bl	10d44 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   14724:	4620      	mov	r0, r4
   14726:	b003      	add	sp, #12
   14728:	bd30      	pop	{r4, r5, pc}
   1472a:	bf00      	nop
   1472c:	20001ac8 	.word	0x20001ac8
   14730:	20004680 	.word	0x20004680
   14734:	0001ee88 	.word	0x0001ee88
   14738:	0001d67f 	.word	0x0001d67f
   1473c:	20002b80 	.word	0x20002b80

00014740 <mpsl_low_prio_irq_handler>:
{
   14740:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   14742:	4902      	ldr	r1, [pc, #8]	; (1474c <mpsl_low_prio_irq_handler+0xc>)
   14744:	4802      	ldr	r0, [pc, #8]	; (14750 <mpsl_low_prio_irq_handler+0x10>)
   14746:	f009 fbc1 	bl	1decc <k_work_submit_to_queue>
}
   1474a:	bd08      	pop	{r3, pc}
   1474c:	20002b80 	.word	0x20002b80
   14750:	20001ac8 	.word	0x20001ac8

00014754 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   14754:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   14756:	4b02      	ldr	r3, [pc, #8]	; (14760 <mpsl_hfclk_callback+0xc>)
   14758:	681b      	ldr	r3, [r3, #0]
   1475a:	2000      	movs	r0, #0
   1475c:	4798      	blx	r3
}
   1475e:	bd08      	pop	{r3, pc}
   14760:	20002b90 	.word	0x20002b90

00014764 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   14764:	b508      	push	{r3, lr}
	switch (domain) {
   14766:	b128      	cbz	r0, 14774 <nrfx_clock_start+0x10>
   14768:	2801      	cmp	r0, #1
   1476a:	d102      	bne.n	14772 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1476c:	4804      	ldr	r0, [pc, #16]	; (14780 <nrfx_clock_start+0x1c>)
   1476e:	f7ee fee1 	bl	3534 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   14772:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14774:	4b03      	ldr	r3, [pc, #12]	; (14784 <nrfx_clock_start+0x20>)
   14776:	681b      	ldr	r3, [r3, #0]
   14778:	2001      	movs	r0, #1
   1477a:	4798      	blx	r3
}
   1477c:	e7f9      	b.n	14772 <nrfx_clock_start+0xe>
   1477e:	bf00      	nop
   14780:	00014755 	.word	0x00014755
   14784:	20002b90 	.word	0x20002b90

00014788 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   14788:	4b01      	ldr	r3, [pc, #4]	; (14790 <nrfx_clock_init+0x8>)
   1478a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1478c:	4801      	ldr	r0, [pc, #4]	; (14794 <nrfx_clock_init+0xc>)
   1478e:	4770      	bx	lr
   14790:	20002b90 	.word	0x20002b90
   14794:	0bad0000 	.word	0x0bad0000

00014798 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   14798:	4b02      	ldr	r3, [pc, #8]	; (147a4 <nvmc_wait+0xc>)
   1479a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1479e:	2b00      	cmp	r3, #0
   147a0:	d0fa      	beq.n	14798 <nvmc_wait>
}
   147a2:	4770      	bx	lr
   147a4:	4001e000 	.word	0x4001e000

000147a8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   147a8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   147aa:	4b03      	ldr	r3, [pc, #12]	; (147b8 <nvmc_config+0x10>)
   147ac:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   147b0:	f7ff fff2 	bl	14798 <nvmc_wait>
}
   147b4:	bd08      	pop	{r3, pc}
   147b6:	bf00      	nop
   147b8:	4001e000 	.word	0x4001e000

000147bc <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   147bc:	4b01      	ldr	r3, [pc, #4]	; (147c4 <SystemCoreClockUpdate+0x8>)
   147be:	4a02      	ldr	r2, [pc, #8]	; (147c8 <SystemCoreClockUpdate+0xc>)
   147c0:	601a      	str	r2, [r3, #0]
}
   147c2:	4770      	bx	lr
   147c4:	20000864 	.word	0x20000864
   147c8:	03d09000 	.word	0x03d09000

000147cc <SystemInit>:

void SystemInit(void)
{
   147cc:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   147ce:	f008 ff7c 	bl	1d6ca <nrf52_errata_36>
   147d2:	b140      	cbz	r0, 147e6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   147d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   147d8:	2200      	movs	r2, #0
   147da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   147de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   147e2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   147e6:	f008 ff7a 	bl	1d6de <nrf52_errata_66>
   147ea:	2800      	cmp	r0, #0
   147ec:	d046      	beq.n	1487c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   147ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   147f2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   147f6:	4b59      	ldr	r3, [pc, #356]	; (1495c <SystemInit+0x190>)
   147f8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   147fc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   14800:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   14804:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   14808:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1480c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   14810:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   14814:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   14818:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1481c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   14820:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   14824:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   14828:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1482c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   14830:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   14834:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   14838:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1483c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   14840:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   14844:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   14848:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1484c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   14850:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   14854:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   14858:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1485c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   14860:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   14864:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   14868:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1486c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   14870:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   14874:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   14878:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1487c:	f008 ff39 	bl	1d6f2 <nrf52_errata_98>
   14880:	b118      	cbz	r0, 1488a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   14882:	4b37      	ldr	r3, [pc, #220]	; (14960 <SystemInit+0x194>)
   14884:	4a37      	ldr	r2, [pc, #220]	; (14964 <SystemInit+0x198>)
   14886:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1488a:	f008 ff45 	bl	1d718 <nrf52_errata_103>
   1488e:	b118      	cbz	r0, 14898 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   14890:	4b35      	ldr	r3, [pc, #212]	; (14968 <SystemInit+0x19c>)
   14892:	22fb      	movs	r2, #251	; 0xfb
   14894:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   14898:	f008 ff51 	bl	1d73e <nrf52_errata_115>
   1489c:	b170      	cbz	r0, 148bc <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1489e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   148a2:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
   148a6:	f023 030f 	bic.w	r3, r3, #15
   148aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   148ae:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
   148b2:	f002 020f 	and.w	r2, r2, #15
   148b6:	4313      	orrs	r3, r2
   148b8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   148bc:	f008 ff52 	bl	1d764 <nrf52_errata_120>
   148c0:	b120      	cbz	r0, 148cc <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   148c2:	4b2a      	ldr	r3, [pc, #168]	; (1496c <SystemInit+0x1a0>)
   148c4:	f44f 7200 	mov.w	r2, #512	; 0x200
   148c8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   148cc:	f008 ff5d 	bl	1d78a <nrf52_errata_136>
   148d0:	b160      	cbz	r0, 148ec <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   148d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   148d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   148da:	f013 0f01 	tst.w	r3, #1
   148de:	d005      	beq.n	148ec <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   148e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   148e4:	f06f 0201 	mvn.w	r2, #1
   148e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   148ec:	f008 ff57 	bl	1d79e <nrf52_configuration_249>
   148f0:	b138      	cbz	r0, 14902 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   148f2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   148f6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   148fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   148fe:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   14902:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1490a:	2b00      	cmp	r3, #0
   1490c:	db08      	blt.n	14920 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1490e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14912:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   14916:	2b00      	cmp	r3, #0
   14918:	db02      	blt.n	14920 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1491a:	f7ff ff4f 	bl	147bc <SystemCoreClockUpdate>
}
   1491e:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   14920:	2001      	movs	r0, #1
   14922:	f7ff ff41 	bl	147a8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14926:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1492a:	2512      	movs	r5, #18
   1492c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   14930:	f7ff ff32 	bl	14798 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   14934:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   14938:	f7ff ff2e 	bl	14798 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1493c:	2000      	movs	r0, #0
   1493e:	f7ff ff33 	bl	147a8 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   14942:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14946:	490a      	ldr	r1, [pc, #40]	; (14970 <SystemInit+0x1a4>)
   14948:	68ca      	ldr	r2, [r1, #12]
   1494a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1494e:	4b09      	ldr	r3, [pc, #36]	; (14974 <SystemInit+0x1a8>)
   14950:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14952:	60cb      	str	r3, [r1, #12]
   14954:	f3bf 8f4f 	dsb	sy
    __NOP();
   14958:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1495a:	e7fd      	b.n	14958 <SystemInit+0x18c>
   1495c:	4000c000 	.word	0x4000c000
   14960:	40005000 	.word	0x40005000
   14964:	00038148 	.word	0x00038148
   14968:	4000f000 	.word	0x4000f000
   1496c:	40029000 	.word	0x40029000
   14970:	e000ed00 	.word	0xe000ed00
   14974:	05fa0004 	.word	0x05fa0004

00014978 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   14978:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1497a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1497c:	fab4 f384 	clz	r3, r4
   14980:	f1c3 031f 	rsb	r3, r3, #31
   14984:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   14988:	2b00      	cmp	r3, #0
   1498a:	db16      	blt.n	149ba <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1498c:	2201      	movs	r2, #1
   1498e:	fa02 f303 	lsl.w	r3, r2, r3
   14992:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14996:	f3bf 8f5b 	dmb	ish
   1499a:	e850 2f00 	ldrex	r2, [r0]
   1499e:	42a2      	cmp	r2, r4
   149a0:	d104      	bne.n	149ac <nrfx_flag32_alloc+0x34>
   149a2:	e840 3e00 	strex	lr, r3, [r0]
   149a6:	f1be 0f00 	cmp.w	lr, #0
   149aa:	d1f6      	bne.n	1499a <nrfx_flag32_alloc+0x22>
   149ac:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   149b0:	d1e3      	bne.n	1497a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   149b2:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   149b6:	4802      	ldr	r0, [pc, #8]	; (149c0 <nrfx_flag32_alloc+0x48>)
}
   149b8:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   149ba:	4802      	ldr	r0, [pc, #8]	; (149c4 <nrfx_flag32_alloc+0x4c>)
   149bc:	e7fc      	b.n	149b8 <nrfx_flag32_alloc+0x40>
   149be:	bf00      	nop
   149c0:	0bad0000 	.word	0x0bad0000
   149c4:	0bad0002 	.word	0x0bad0002

000149c8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   149c8:	6803      	ldr	r3, [r0, #0]
   149ca:	40cb      	lsrs	r3, r1
   149cc:	f013 0f01 	tst.w	r3, #1
   149d0:	d115      	bne.n	149fe <nrfx_flag32_free+0x36>
{
   149d2:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   149d4:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   149d6:	2301      	movs	r3, #1
   149d8:	408b      	lsls	r3, r1
   149da:	4313      	orrs	r3, r2
   149dc:	f3bf 8f5b 	dmb	ish
   149e0:	e850 cf00 	ldrex	ip, [r0]
   149e4:	4594      	cmp	ip, r2
   149e6:	d104      	bne.n	149f2 <nrfx_flag32_free+0x2a>
   149e8:	e840 3e00 	strex	lr, r3, [r0]
   149ec:	f1be 0f00 	cmp.w	lr, #0
   149f0:	d1f6      	bne.n	149e0 <nrfx_flag32_free+0x18>
   149f2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   149f6:	d1ed      	bne.n	149d4 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   149f8:	4802      	ldr	r0, [pc, #8]	; (14a04 <nrfx_flag32_free+0x3c>)
}
   149fa:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   149fe:	4802      	ldr	r0, [pc, #8]	; (14a08 <nrfx_flag32_free+0x40>)
}
   14a00:	4770      	bx	lr
   14a02:	bf00      	nop
   14a04:	0bad0000 	.word	0x0bad0000
   14a08:	0bad0004 	.word	0x0bad0004

00014a0c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   14a0c:	3008      	adds	r0, #8
   14a0e:	4b03      	ldr	r3, [pc, #12]	; (14a1c <pin_in_use+0x10>)
   14a10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14a14:	f000 0001 	and.w	r0, r0, #1
   14a18:	4770      	bx	lr
   14a1a:	bf00      	nop
   14a1c:	20000868 	.word	0x20000868

00014a20 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   14a20:	3008      	adds	r0, #8
   14a22:	4b03      	ldr	r3, [pc, #12]	; (14a30 <pin_in_use_by_te+0x10>)
   14a24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14a28:	f3c0 1040 	ubfx	r0, r0, #5, #1
   14a2c:	4770      	bx	lr
   14a2e:	bf00      	nop
   14a30:	20000868 	.word	0x20000868

00014a34 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   14a34:	3008      	adds	r0, #8
   14a36:	4b04      	ldr	r3, [pc, #16]	; (14a48 <pin_has_trigger+0x14>)
   14a38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14a3c:	f010 001c 	ands.w	r0, r0, #28
   14a40:	bf18      	it	ne
   14a42:	2001      	movne	r0, #1
   14a44:	4770      	bx	lr
   14a46:	bf00      	nop
   14a48:	20000868 	.word	0x20000868

00014a4c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14a4c:	3008      	adds	r0, #8
   14a4e:	4b03      	ldr	r3, [pc, #12]	; (14a5c <pin_is_output+0x10>)
   14a50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14a54:	f3c0 0040 	ubfx	r0, r0, #1, #1
   14a58:	4770      	bx	lr
   14a5a:	bf00      	nop
   14a5c:	20000868 	.word	0x20000868

00014a60 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14a60:	3008      	adds	r0, #8
   14a62:	4b02      	ldr	r3, [pc, #8]	; (14a6c <pin_te_get+0xc>)
   14a64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14a68:	0b40      	lsrs	r0, r0, #13
   14a6a:	4770      	bx	lr
   14a6c:	20000868 	.word	0x20000868

00014a70 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14a70:	2200      	movs	r2, #0
   14a72:	e004      	b.n	14a7e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14a74:	f04f 33ff 	mov.w	r3, #4294967295
   14a78:	4283      	cmp	r3, r0
   14a7a:	d00f      	beq.n	14a9c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14a7c:	3201      	adds	r2, #1
   14a7e:	2a2f      	cmp	r2, #47	; 0x2f
   14a80:	d80a      	bhi.n	14a98 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14a82:	f102 0308 	add.w	r3, r2, #8
   14a86:	4906      	ldr	r1, [pc, #24]	; (14aa0 <handler_in_use+0x30>)
   14a88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   14a8c:	f413 7f80 	tst.w	r3, #256	; 0x100
   14a90:	d0f0      	beq.n	14a74 <handler_in_use+0x4>
   14a92:	f3c3 2343 	ubfx	r3, r3, #9, #4
   14a96:	e7ef      	b.n	14a78 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   14a98:	2000      	movs	r0, #0
   14a9a:	4770      	bx	lr
            return true;
   14a9c:	2001      	movs	r0, #1
}
   14a9e:	4770      	bx	lr
   14aa0:	20000868 	.word	0x20000868

00014aa4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   14aa4:	2300      	movs	r3, #0
   14aa6:	b113      	cbz	r3, 14aae <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   14aa8:	f04f 30ff 	mov.w	r0, #4294967295
}
   14aac:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   14aae:	4a07      	ldr	r2, [pc, #28]	; (14acc <find_handler+0x28>)
   14ab0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   14ab4:	4282      	cmp	r2, r0
   14ab6:	d001      	beq.n	14abc <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   14ab8:	3301      	adds	r3, #1
   14aba:	e7f4      	b.n	14aa6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   14abc:	4a03      	ldr	r2, [pc, #12]	; (14acc <find_handler+0x28>)
   14abe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   14ac2:	6852      	ldr	r2, [r2, #4]
   14ac4:	428a      	cmp	r2, r1
   14ac6:	d1f7      	bne.n	14ab8 <find_handler+0x14>
            return i;
   14ac8:	4618      	mov	r0, r3
   14aca:	4770      	bx	lr
   14acc:	20000868 	.word	0x20000868

00014ad0 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14ad0:	3008      	adds	r0, #8
   14ad2:	4b06      	ldr	r3, [pc, #24]	; (14aec <channel_handler_get+0x1c>)
   14ad4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   14ad8:	f410 7f80 	tst.w	r0, #256	; 0x100
   14adc:	d004      	beq.n	14ae8 <channel_handler_get+0x18>
   14ade:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   14ae2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   14ae6:	4770      	bx	lr
        return NULL;
   14ae8:	2000      	movs	r0, #0
}
   14aea:	4770      	bx	lr
   14aec:	20000868 	.word	0x20000868

00014af0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   14af0:	b570      	push	{r4, r5, r6, lr}
   14af2:	4604      	mov	r4, r0
   14af4:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   14af6:	f7ff ffeb 	bl	14ad0 <channel_handler_get>

    if (handler)
   14afa:	b120      	cbz	r0, 14b06 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   14afc:	6806      	ldr	r6, [r0, #0]
   14afe:	6842      	ldr	r2, [r0, #4]
   14b00:	4629      	mov	r1, r5
   14b02:	4620      	mov	r0, r4
   14b04:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   14b06:	4b04      	ldr	r3, [pc, #16]	; (14b18 <call_handler+0x28>)
   14b08:	689b      	ldr	r3, [r3, #8]
   14b0a:	b123      	cbz	r3, 14b16 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14b0c:	4a02      	ldr	r2, [pc, #8]	; (14b18 <call_handler+0x28>)
   14b0e:	68d2      	ldr	r2, [r2, #12]
   14b10:	4629      	mov	r1, r5
   14b12:	4620      	mov	r0, r4
   14b14:	4798      	blx	r3
    }
}
   14b16:	bd70      	pop	{r4, r5, r6, pc}
   14b18:	20000868 	.word	0x20000868

00014b1c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14b1c:	f100 0208 	add.w	r2, r0, #8
   14b20:	4b0e      	ldr	r3, [pc, #56]	; (14b5c <release_handler+0x40>)
   14b22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   14b26:	f413 7f80 	tst.w	r3, #256	; 0x100
   14b2a:	d016      	beq.n	14b5a <release_handler+0x3e>
{
   14b2c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14b2e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   14b32:	4610      	mov	r0, r2
   14b34:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   14b38:	4a08      	ldr	r2, [pc, #32]	; (14b5c <release_handler+0x40>)
   14b3a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   14b3e:	4620      	mov	r0, r4
   14b40:	f7ff ff96 	bl	14a70 <handler_in_use>
   14b44:	b100      	cbz	r0, 14b48 <release_handler+0x2c>
}
   14b46:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   14b48:	4804      	ldr	r0, [pc, #16]	; (14b5c <release_handler+0x40>)
   14b4a:	2300      	movs	r3, #0
   14b4c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14b50:	4621      	mov	r1, r4
   14b52:	3074      	adds	r0, #116	; 0x74
   14b54:	f7ff ff38 	bl	149c8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   14b58:	e7f5      	b.n	14b46 <release_handler+0x2a>
   14b5a:	4770      	bx	lr
   14b5c:	20000868 	.word	0x20000868

00014b60 <pin_handler_trigger_uninit>:
{
   14b60:	b510      	push	{r4, lr}
   14b62:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   14b64:	f7ff ff5c 	bl	14a20 <pin_in_use_by_te>
   14b68:	b140      	cbz	r0, 14b7c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   14b6a:	4620      	mov	r0, r4
   14b6c:	f7ff ff78 	bl	14a60 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   14b70:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   14b74:	4b06      	ldr	r3, [pc, #24]	; (14b90 <pin_handler_trigger_uninit+0x30>)
   14b76:	2200      	movs	r2, #0
   14b78:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   14b7c:	4620      	mov	r0, r4
   14b7e:	f7ff ffcd 	bl	14b1c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   14b82:	3408      	adds	r4, #8
   14b84:	4b03      	ldr	r3, [pc, #12]	; (14b94 <pin_handler_trigger_uninit+0x34>)
   14b86:	2200      	movs	r2, #0
   14b88:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   14b8c:	bd10      	pop	{r4, pc}
   14b8e:	bf00      	nop
   14b90:	40006000 	.word	0x40006000
   14b94:	20000868 	.word	0x20000868

00014b98 <pin_handler_set>:
{
   14b98:	b570      	push	{r4, r5, r6, lr}
   14b9a:	b082      	sub	sp, #8
   14b9c:	4606      	mov	r6, r0
   14b9e:	460c      	mov	r4, r1
   14ba0:	4615      	mov	r5, r2
    release_handler(pin);
   14ba2:	f7ff ffbb 	bl	14b1c <release_handler>
    if (!handler)
   14ba6:	b324      	cbz	r4, 14bf2 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   14ba8:	4629      	mov	r1, r5
   14baa:	4620      	mov	r0, r4
   14bac:	f7ff ff7a 	bl	14aa4 <find_handler>
    if (handler_id < 0)
   14bb0:	1e03      	subs	r3, r0, #0
   14bb2:	db13      	blt.n	14bdc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   14bb4:	4a10      	ldr	r2, [pc, #64]	; (14bf8 <pin_handler_set+0x60>)
   14bb6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   14bba:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   14bbe:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   14bc0:	025b      	lsls	r3, r3, #9
   14bc2:	b29b      	uxth	r3, r3
   14bc4:	f106 0008 	add.w	r0, r6, #8
   14bc8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   14bcc:	430b      	orrs	r3, r1
   14bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   14bd2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   14bd6:	4809      	ldr	r0, [pc, #36]	; (14bfc <pin_handler_set+0x64>)
}
   14bd8:	b002      	add	sp, #8
   14bda:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   14bdc:	f10d 0107 	add.w	r1, sp, #7
   14be0:	4807      	ldr	r0, [pc, #28]	; (14c00 <pin_handler_set+0x68>)
   14be2:	f7ff fec9 	bl	14978 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   14be6:	4b05      	ldr	r3, [pc, #20]	; (14bfc <pin_handler_set+0x64>)
   14be8:	4298      	cmp	r0, r3
   14bea:	d1f5      	bne.n	14bd8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   14bec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14bf0:	e7e0      	b.n	14bb4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   14bf2:	4802      	ldr	r0, [pc, #8]	; (14bfc <pin_handler_set+0x64>)
   14bf4:	e7f0      	b.n	14bd8 <pin_handler_set+0x40>
   14bf6:	bf00      	nop
   14bf8:	20000868 	.word	0x20000868
   14bfc:	0bad0000 	.word	0x0bad0000
   14c00:	200008dc 	.word	0x200008dc

00014c04 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   14c04:	b538      	push	{r3, r4, r5, lr}
   14c06:	4604      	mov	r4, r0
    while (mask)
   14c08:	e018      	b.n	14c3c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   14c0a:	fa94 f3a4 	rbit	r3, r4
   14c0e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   14c12:	2201      	movs	r2, #1
   14c14:	409a      	lsls	r2, r3
   14c16:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14c1a:	4a0a      	ldr	r2, [pc, #40]	; (14c44 <gpiote_evt_handle+0x40>)
   14c1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   14c20:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   14c24:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   14c28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   14c2c:	f3c0 4001 	ubfx	r0, r0, #16, #2
   14c30:	f008 fde2 	bl	1d7f8 <gpiote_polarity_to_trigger>
   14c34:	4601      	mov	r1, r0
   14c36:	4628      	mov	r0, r5
   14c38:	f7ff ff5a 	bl	14af0 <call_handler>
    while (mask)
   14c3c:	2c00      	cmp	r4, #0
   14c3e:	d1e4      	bne.n	14c0a <gpiote_evt_handle+0x6>
    }
}
   14c40:	bd38      	pop	{r3, r4, r5, pc}
   14c42:	bf00      	nop
   14c44:	40006000 	.word	0x40006000

00014c48 <latch_pending_read_and_check>:
{
   14c48:	b082      	sub	sp, #8
   14c4a:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   14c4c:	4b11      	ldr	r3, [pc, #68]	; (14c94 <latch_pending_read_and_check+0x4c>)
   14c4e:	e893 0003 	ldmia.w	r3, {r0, r1}
   14c52:	ab02      	add	r3, sp, #8
   14c54:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   14c58:	4660      	mov	r0, ip
   14c5a:	2300      	movs	r3, #0
   14c5c:	e00b      	b.n	14c76 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   14c5e:	aa02      	add	r2, sp, #8
   14c60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14c64:	f852 2c08 	ldr.w	r2, [r2, #-8]
   14c68:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   14c6c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   14c70:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   14c74:	3301      	adds	r3, #1
   14c76:	2b01      	cmp	r3, #1
   14c78:	d9f1      	bls.n	14c5e <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14c7a:	2300      	movs	r3, #0
   14c7c:	2b01      	cmp	r3, #1
   14c7e:	d804      	bhi.n	14c8a <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
   14c80:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   14c84:	b922      	cbnz	r2, 14c90 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14c86:	3301      	adds	r3, #1
   14c88:	e7f8      	b.n	14c7c <latch_pending_read_and_check+0x34>
    return false;
   14c8a:	2000      	movs	r0, #0
}
   14c8c:	b002      	add	sp, #8
   14c8e:	4770      	bx	lr
            return true;
   14c90:	2001      	movs	r0, #1
   14c92:	e7fb      	b.n	14c8c <latch_pending_read_and_check+0x44>
   14c94:	0001e864 	.word	0x0001e864

00014c98 <next_sense_cond_call_handler>:
{
   14c98:	b570      	push	{r4, r5, r6, lr}
   14c9a:	4604      	mov	r4, r0
   14c9c:	460d      	mov	r5, r1
   14c9e:	4616      	mov	r6, r2
    if (is_level(trigger))
   14ca0:	4608      	mov	r0, r1
   14ca2:	f008 fdab 	bl	1d7fc <is_level>
   14ca6:	b9d0      	cbnz	r0, 14cde <next_sense_cond_call_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14ca8:	2e02      	cmp	r6, #2
   14caa:	d052      	beq.n	14d52 <next_sense_cond_call_handler+0xba>
   14cac:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   14cae:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14cb2:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14cb4:	2901      	cmp	r1, #1
   14cb6:	d04e      	beq.n	14d56 <next_sense_cond_call_handler+0xbe>
        case 0: return NRF_P0;
   14cb8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14cbc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14cc0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   14cc4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14cc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14ccc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   14cd0:	2d03      	cmp	r5, #3
   14cd2:	d044      	beq.n	14d5e <next_sense_cond_call_handler+0xc6>
   14cd4:	2e02      	cmp	r6, #2
   14cd6:	d040      	beq.n	14d5a <next_sense_cond_call_handler+0xc2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14cd8:	2e03      	cmp	r6, #3
   14cda:	d045      	beq.n	14d68 <next_sense_cond_call_handler+0xd0>
}
   14cdc:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   14cde:	4629      	mov	r1, r5
   14ce0:	4620      	mov	r0, r4
   14ce2:	f7ff ff05 	bl	14af0 <call_handler>
    *p_pin = pin_number & 0x1F;
   14ce6:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   14cea:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14cec:	2a01      	cmp	r2, #1
   14cee:	d02a      	beq.n	14d46 <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
   14cf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14cf4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cfc:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   14d00:	429e      	cmp	r6, r3
   14d02:	d1eb      	bne.n	14cdc <next_sense_cond_call_handler+0x44>
    *p_pin = pin_number & 0x1F;
   14d04:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   14d08:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14d0a:	2a01      	cmp	r2, #1
   14d0c:	d01d      	beq.n	14d4a <next_sense_cond_call_handler+0xb2>
        case 0: return NRF_P0;
   14d0e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14d12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14d16:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   14d1a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   14d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   14d22:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   14d26:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14d28:	2c01      	cmp	r4, #1
   14d2a:	d010      	beq.n	14d4e <next_sense_cond_call_handler+0xb6>
        case 0: return NRF_P0;
   14d2c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14d30:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14d34:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   14d38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14d3c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14d40:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
   14d44:	e7ca      	b.n	14cdc <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   14d46:	4a0a      	ldr	r2, [pc, #40]	; (14d70 <next_sense_cond_call_handler+0xd8>)
   14d48:	e7d4      	b.n	14cf4 <next_sense_cond_call_handler+0x5c>
   14d4a:	4909      	ldr	r1, [pc, #36]	; (14d70 <next_sense_cond_call_handler+0xd8>)
   14d4c:	e7e1      	b.n	14d12 <next_sense_cond_call_handler+0x7a>
   14d4e:	4908      	ldr	r1, [pc, #32]	; (14d70 <next_sense_cond_call_handler+0xd8>)
   14d50:	e7ee      	b.n	14d30 <next_sense_cond_call_handler+0x98>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14d52:	2003      	movs	r0, #3
   14d54:	e7ab      	b.n	14cae <next_sense_cond_call_handler+0x16>
   14d56:	4906      	ldr	r1, [pc, #24]	; (14d70 <next_sense_cond_call_handler+0xd8>)
   14d58:	e7b0      	b.n	14cbc <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14d5a:	2d01      	cmp	r5, #1
   14d5c:	d1bc      	bne.n	14cd8 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   14d5e:	4629      	mov	r1, r5
   14d60:	4620      	mov	r0, r4
   14d62:	f7ff fec5 	bl	14af0 <call_handler>
}
   14d66:	e7b9      	b.n	14cdc <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   14d68:	2d02      	cmp	r5, #2
   14d6a:	d1b7      	bne.n	14cdc <next_sense_cond_call_handler+0x44>
   14d6c:	e7f7      	b.n	14d5e <next_sense_cond_call_handler+0xc6>
   14d6e:	bf00      	nop
   14d70:	50000300 	.word	0x50000300

00014d74 <port_event_handle>:
{
   14d74:	b570      	push	{r4, r5, r6, lr}
   14d76:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   14d78:	4a2f      	ldr	r2, [pc, #188]	; (14e38 <port_event_handle+0xc4>)
   14d7a:	466b      	mov	r3, sp
   14d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
   14d80:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   14d84:	2300      	movs	r3, #0
   14d86:	a802      	add	r0, sp, #8
   14d88:	e00b      	b.n	14da2 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   14d8a:	aa04      	add	r2, sp, #16
   14d8c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14d90:	f852 2c10 	ldr.w	r2, [r2, #-16]
   14d94:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   14d98:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   14d9c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   14da0:	3301      	adds	r3, #1
   14da2:	2b01      	cmp	r3, #1
   14da4:	d9f1      	bls.n	14d8a <port_event_handle+0x16>
   14da6:	e042      	b.n	14e2e <port_event_handle+0xba>
        case 1: return NRF_P1;
   14da8:	4e24      	ldr	r6, [pc, #144]	; (14e3c <port_event_handle+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14daa:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   14dae:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   14db2:	f3c2 4201 	ubfx	r2, r2, #16, #2
   14db6:	f7ff ff6f 	bl	14c98 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   14dba:	2301      	movs	r3, #1
   14dbc:	40ab      	lsls	r3, r5
   14dbe:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   14dc2:	ab04      	add	r3, sp, #16
   14dc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   14dc8:	f853 0c08 	ldr.w	r0, [r3, #-8]
   14dcc:	b310      	cbz	r0, 14e14 <port_event_handle+0xa0>
                uint32_t pin = NRF_CTZ(latch[i]);
   14dce:	fa90 f0a0 	rbit	r0, r0
   14dd2:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   14dd6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14dda:	f100 0208 	add.w	r2, r0, #8
   14dde:	4b18      	ldr	r3, [pc, #96]	; (14e40 <port_event_handle+0xcc>)
   14de0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   14de4:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   14de8:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   14dea:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   14dee:	f10d 0c08 	add.w	ip, sp, #8
   14df2:	2301      	movs	r3, #1
   14df4:	fa03 f202 	lsl.w	r2, r3, r2
   14df8:	f81c 3005 	ldrb.w	r3, [ip, r5]
   14dfc:	ea23 0302 	bic.w	r3, r3, r2
   14e00:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
   14e04:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   14e08:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14e0a:	2b01      	cmp	r3, #1
   14e0c:	d0cc      	beq.n	14da8 <port_event_handle+0x34>
        case 0: return NRF_P0;
   14e0e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   14e12:	e7ca      	b.n	14daa <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   14e14:	3401      	adds	r4, #1
   14e16:	2c01      	cmp	r4, #1
   14e18:	d9d3      	bls.n	14dc2 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14e1a:	4b0a      	ldr	r3, [pc, #40]	; (14e44 <port_event_handle+0xd0>)
   14e1c:	2200      	movs	r2, #0
   14e1e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   14e22:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
   14e26:	a802      	add	r0, sp, #8
   14e28:	f7ff ff0e 	bl	14c48 <latch_pending_read_and_check>
   14e2c:	b108      	cbz	r0, 14e32 <port_event_handle+0xbe>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   14e2e:	2400      	movs	r4, #0
   14e30:	e7f1      	b.n	14e16 <port_event_handle+0xa2>
}
   14e32:	b004      	add	sp, #16
   14e34:	bd70      	pop	{r4, r5, r6, pc}
   14e36:	bf00      	nop
   14e38:	0001e864 	.word	0x0001e864
   14e3c:	50000300 	.word	0x50000300
   14e40:	20000868 	.word	0x20000868
   14e44:	40006000 	.word	0x40006000

00014e48 <nrfx_gpiote_input_configure>:
{
   14e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e4c:	4604      	mov	r4, r0
   14e4e:	4615      	mov	r5, r2
   14e50:	461e      	mov	r6, r3
    if (p_input_config)
   14e52:	b371      	cbz	r1, 14eb2 <nrfx_gpiote_input_configure+0x6a>
   14e54:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   14e56:	f008 fcb9 	bl	1d7cc <pin_is_task_output>
   14e5a:	2800      	cmp	r0, #0
   14e5c:	f040 8099 	bne.w	14f92 <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
   14e60:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14e64:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14e66:	2b01      	cmp	r3, #1
   14e68:	d045      	beq.n	14ef6 <nrfx_gpiote_input_configure+0xae>
        case 0: return NRF_P0;
   14e6a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14e6e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   14e72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14e76:	2f00      	cmp	r7, #0
   14e78:	d03f      	beq.n	14efa <nrfx_gpiote_input_configure+0xb2>
   14e7a:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14e7c:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   14e80:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14e84:	2f00      	cmp	r7, #0
   14e86:	d03a      	beq.n	14efe <nrfx_gpiote_input_configure+0xb6>
   14e88:	7839      	ldrb	r1, [r7, #0]
   14e8a:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14e8c:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   14e8e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14e92:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   14e96:	4a43      	ldr	r2, [pc, #268]	; (14fa4 <nrfx_gpiote_input_configure+0x15c>)
   14e98:	f104 0108 	add.w	r1, r4, #8
   14e9c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14ea0:	f023 0302 	bic.w	r3, r3, #2
   14ea4:	b29b      	uxth	r3, r3
   14ea6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   14eaa:	f043 0301 	orr.w	r3, r3, #1
   14eae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   14eb2:	b1bd      	cbz	r5, 14ee4 <nrfx_gpiote_input_configure+0x9c>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   14eb4:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   14eb6:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   14eba:	4620      	mov	r0, r4
   14ebc:	f7ff fdc6 	bl	14a4c <pin_is_output>
   14ec0:	b1f8      	cbz	r0, 14f02 <nrfx_gpiote_input_configure+0xba>
            if (use_evt)
   14ec2:	f1b8 0f00 	cmp.w	r8, #0
   14ec6:	d166      	bne.n	14f96 <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   14ec8:	4a36      	ldr	r2, [pc, #216]	; (14fa4 <nrfx_gpiote_input_configure+0x15c>)
   14eca:	f104 0108 	add.w	r1, r4, #8
   14ece:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14ed2:	f023 031c 	bic.w	r3, r3, #28
   14ed6:	b29b      	uxth	r3, r3
   14ed8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   14edc:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   14ee0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   14ee4:	2e00      	cmp	r6, #0
   14ee6:	d05a      	beq.n	14f9e <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14ee8:	6872      	ldr	r2, [r6, #4]
   14eea:	6831      	ldr	r1, [r6, #0]
   14eec:	4620      	mov	r0, r4
   14eee:	f7ff fe53 	bl	14b98 <pin_handler_set>
}
   14ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   14ef6:	482c      	ldr	r0, [pc, #176]	; (14fa8 <nrfx_gpiote_input_configure+0x160>)
   14ef8:	e7b9      	b.n	14e6e <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14efa:	2100      	movs	r1, #0
   14efc:	e7be      	b.n	14e7c <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14efe:	2100      	movs	r1, #0
   14f00:	e7c4      	b.n	14e8c <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   14f02:	4a28      	ldr	r2, [pc, #160]	; (14fa4 <nrfx_gpiote_input_configure+0x15c>)
   14f04:	f104 0108 	add.w	r1, r4, #8
   14f08:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14f0c:	f023 0320 	bic.w	r3, r3, #32
   14f10:	04db      	lsls	r3, r3, #19
   14f12:	0cdb      	lsrs	r3, r3, #19
   14f14:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   14f18:	f1b8 0f00 	cmp.w	r8, #0
   14f1c:	d0d4      	beq.n	14ec8 <nrfx_gpiote_input_configure+0x80>
                if (!edge)
   14f1e:	2f03      	cmp	r7, #3
   14f20:	d83b      	bhi.n	14f9a <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14f22:	686b      	ldr	r3, [r5, #4]
   14f24:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   14f26:	b937      	cbnz	r7, 14f36 <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   14f28:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   14f2c:	4b1f      	ldr	r3, [pc, #124]	; (14fac <nrfx_gpiote_input_configure+0x164>)
   14f2e:	2200      	movs	r2, #0
   14f30:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   14f34:	e7c8      	b.n	14ec8 <nrfx_gpiote_input_configure+0x80>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   14f36:	4638      	mov	r0, r7
   14f38:	f008 fc5f 	bl	1d7fa <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14f3c:	4b1b      	ldr	r3, [pc, #108]	; (14fac <nrfx_gpiote_input_configure+0x164>)
   14f3e:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   14f42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14f46:	f021 0103 	bic.w	r1, r1, #3
   14f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14f4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14f52:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   14f56:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   14f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14f5e:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   14f62:	0221      	lsls	r1, r4, #8
   14f64:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   14f68:	0400      	lsls	r0, r0, #16
   14f6a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14f6e:	4301      	orrs	r1, r0
   14f70:	ea4c 0101 	orr.w	r1, ip, r1
   14f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14f78:	036b      	lsls	r3, r5, #13
   14f7a:	b29b      	uxth	r3, r3
   14f7c:	4a09      	ldr	r2, [pc, #36]	; (14fa4 <nrfx_gpiote_input_configure+0x15c>)
   14f7e:	f104 0108 	add.w	r1, r4, #8
   14f82:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
   14f86:	4303      	orrs	r3, r0
   14f88:	f043 0320 	orr.w	r3, r3, #32
   14f8c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   14f90:	e79a      	b.n	14ec8 <nrfx_gpiote_input_configure+0x80>
            return NRFX_ERROR_INVALID_PARAM;
   14f92:	4807      	ldr	r0, [pc, #28]	; (14fb0 <nrfx_gpiote_input_configure+0x168>)
   14f94:	e7ad      	b.n	14ef2 <nrfx_gpiote_input_configure+0xaa>
                return NRFX_ERROR_INVALID_PARAM;
   14f96:	4806      	ldr	r0, [pc, #24]	; (14fb0 <nrfx_gpiote_input_configure+0x168>)
   14f98:	e7ab      	b.n	14ef2 <nrfx_gpiote_input_configure+0xaa>
                    return NRFX_ERROR_INVALID_PARAM;
   14f9a:	4805      	ldr	r0, [pc, #20]	; (14fb0 <nrfx_gpiote_input_configure+0x168>)
   14f9c:	e7a9      	b.n	14ef2 <nrfx_gpiote_input_configure+0xaa>
        err = NRFX_SUCCESS;
   14f9e:	4805      	ldr	r0, [pc, #20]	; (14fb4 <nrfx_gpiote_input_configure+0x16c>)
   14fa0:	e7a7      	b.n	14ef2 <nrfx_gpiote_input_configure+0xaa>
   14fa2:	bf00      	nop
   14fa4:	20000868 	.word	0x20000868
   14fa8:	50000300 	.word	0x50000300
   14fac:	40006000 	.word	0x40006000
   14fb0:	0bad0004 	.word	0x0bad0004
   14fb4:	0bad0000 	.word	0x0bad0000

00014fb8 <nrfx_gpiote_output_configure>:
{
   14fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14fba:	4604      	mov	r4, r0
   14fbc:	4615      	mov	r5, r2
    if (p_config)
   14fbe:	2900      	cmp	r1, #0
   14fc0:	d055      	beq.n	1506e <nrfx_gpiote_output_configure+0xb6>
   14fc2:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   14fc4:	f008 fc11 	bl	1d7ea <pin_is_input>
   14fc8:	b128      	cbz	r0, 14fd6 <nrfx_gpiote_output_configure+0x1e>
   14fca:	4620      	mov	r0, r4
   14fcc:	f7ff fd28 	bl	14a20 <pin_in_use_by_te>
   14fd0:	2800      	cmp	r0, #0
   14fd2:	f040 80a2 	bne.w	1511a <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   14fd6:	4620      	mov	r0, r4
   14fd8:	f7ff fd2c 	bl	14a34 <pin_has_trigger>
   14fdc:	b118      	cbz	r0, 14fe6 <nrfx_gpiote_output_configure+0x2e>
   14fde:	7873      	ldrb	r3, [r6, #1]
   14fe0:	2b01      	cmp	r3, #1
   14fe2:	f000 809c 	beq.w	1511e <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   14fe6:	f106 0c01 	add.w	ip, r6, #1
   14fea:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   14fec:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14ff0:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14ff2:	2b01      	cmp	r3, #1
   14ff4:	d057      	beq.n	150a6 <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
   14ff6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14ffa:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   14ffe:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15002:	f1bc 0f00 	cmp.w	ip, #0
   15006:	d050      	beq.n	150aa <nrfx_gpiote_output_configure+0xf2>
   15008:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1500a:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1500e:	2f00      	cmp	r7, #0
   15010:	d04d      	beq.n	150ae <nrfx_gpiote_output_configure+0xf6>
   15012:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15016:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1501a:	2e00      	cmp	r6, #0
   1501c:	d04a      	beq.n	150b4 <nrfx_gpiote_output_configure+0xfc>
   1501e:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   15022:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   15026:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1502a:	f1bc 0f00 	cmp.w	ip, #0
   1502e:	d044      	beq.n	150ba <nrfx_gpiote_output_configure+0x102>
   15030:	7873      	ldrb	r3, [r6, #1]
   15032:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15034:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   15038:	2f00      	cmp	r7, #0
   1503a:	d040      	beq.n	150be <nrfx_gpiote_output_configure+0x106>
   1503c:	f896 c002 	ldrb.w	ip, [r6, #2]
   15040:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   15044:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   15048:	2e00      	cmp	r6, #0
   1504a:	d03b      	beq.n	150c4 <nrfx_gpiote_output_configure+0x10c>
   1504c:	7836      	ldrb	r6, [r6, #0]
   1504e:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   15050:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15052:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   15054:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   15058:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1505c:	4a33      	ldr	r2, [pc, #204]	; (1512c <nrfx_gpiote_output_configure+0x174>)
   1505e:	f104 0108 	add.w	r1, r4, #8
   15062:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   15066:	f043 0303 	orr.w	r3, r3, #3
   1506a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1506e:	2d00      	cmp	r5, #0
   15070:	d057      	beq.n	15122 <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
   15072:	4620      	mov	r0, r4
   15074:	f008 fbb9 	bl	1d7ea <pin_is_input>
   15078:	2800      	cmp	r0, #0
   1507a:	d154      	bne.n	15126 <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
   1507c:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   1507e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   15082:	4a2b      	ldr	r2, [pc, #172]	; (15130 <nrfx_gpiote_output_configure+0x178>)
   15084:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   15088:	4928      	ldr	r1, [pc, #160]	; (1512c <nrfx_gpiote_output_configure+0x174>)
   1508a:	f104 0008 	add.w	r0, r4, #8
   1508e:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   15092:	f022 0220 	bic.w	r2, r2, #32
   15096:	04d2      	lsls	r2, r2, #19
   15098:	0cd2      	lsrs	r2, r2, #19
   1509a:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1509e:	786a      	ldrb	r2, [r5, #1]
   150a0:	b992      	cbnz	r2, 150c8 <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
   150a2:	4824      	ldr	r0, [pc, #144]	; (15134 <nrfx_gpiote_output_configure+0x17c>)
}
   150a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   150a6:	4924      	ldr	r1, [pc, #144]	; (15138 <nrfx_gpiote_output_configure+0x180>)
   150a8:	e7a7      	b.n	14ffa <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   150aa:	2300      	movs	r3, #0
   150ac:	e7ad      	b.n	1500a <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   150ae:	f04f 0e00 	mov.w	lr, #0
   150b2:	e7b0      	b.n	15016 <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   150b4:	f04f 0e00 	mov.w	lr, #0
   150b8:	e7b3      	b.n	15022 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   150ba:	2300      	movs	r3, #0
   150bc:	e7ba      	b.n	15034 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   150be:	f04f 0c00 	mov.w	ip, #0
   150c2:	e7bf      	b.n	15044 <nrfx_gpiote_output_configure+0x8c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   150c4:	2600      	movs	r6, #0
   150c6:	e7c3      	b.n	15050 <nrfx_gpiote_output_configure+0x98>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   150c8:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   150ca:	4819      	ldr	r0, [pc, #100]	; (15130 <nrfx_gpiote_output_configure+0x178>)
   150cc:	f503 75a2 	add.w	r5, r3, #324	; 0x144
   150d0:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
   150d4:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
   150d8:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
   150dc:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   150e0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
   150e4:	0221      	lsls	r1, r4, #8
   150e6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   150ea:	0412      	lsls	r2, r2, #16
   150ec:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   150f0:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   150f2:	0539      	lsls	r1, r7, #20
   150f4:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   150f8:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   150fa:	4332      	orrs	r2, r6
   150fc:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   15100:	035b      	lsls	r3, r3, #13
   15102:	b29b      	uxth	r3, r3
   15104:	4a09      	ldr	r2, [pc, #36]	; (1512c <nrfx_gpiote_output_configure+0x174>)
   15106:	3408      	adds	r4, #8
   15108:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
   1510c:	430b      	orrs	r3, r1
   1510e:	f043 0320 	orr.w	r3, r3, #32
   15112:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   15116:	4807      	ldr	r0, [pc, #28]	; (15134 <nrfx_gpiote_output_configure+0x17c>)
   15118:	e7c4      	b.n	150a4 <nrfx_gpiote_output_configure+0xec>
   1511a:	4808      	ldr	r0, [pc, #32]	; (1513c <nrfx_gpiote_output_configure+0x184>)
   1511c:	e7c2      	b.n	150a4 <nrfx_gpiote_output_configure+0xec>
   1511e:	4807      	ldr	r0, [pc, #28]	; (1513c <nrfx_gpiote_output_configure+0x184>)
   15120:	e7c0      	b.n	150a4 <nrfx_gpiote_output_configure+0xec>
   15122:	4804      	ldr	r0, [pc, #16]	; (15134 <nrfx_gpiote_output_configure+0x17c>)
   15124:	e7be      	b.n	150a4 <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
   15126:	4805      	ldr	r0, [pc, #20]	; (1513c <nrfx_gpiote_output_configure+0x184>)
   15128:	e7bc      	b.n	150a4 <nrfx_gpiote_output_configure+0xec>
   1512a:	bf00      	nop
   1512c:	20000868 	.word	0x20000868
   15130:	40006000 	.word	0x40006000
   15134:	0bad0000 	.word	0x0bad0000
   15138:	50000300 	.word	0x50000300
   1513c:	0bad0004 	.word	0x0bad0004

00015140 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   15140:	4b01      	ldr	r3, [pc, #4]	; (15148 <nrfx_gpiote_global_callback_set+0x8>)
   15142:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   15144:	60d9      	str	r1, [r3, #12]
}
   15146:	4770      	bx	lr
   15148:	20000868 	.word	0x20000868

0001514c <nrfx_gpiote_channel_get>:
{
   1514c:	b538      	push	{r3, r4, r5, lr}
   1514e:	4604      	mov	r4, r0
   15150:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   15152:	f7ff fc65 	bl	14a20 <pin_in_use_by_te>
   15156:	b140      	cbz	r0, 1516a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15158:	f104 0008 	add.w	r0, r4, #8
   1515c:	4b04      	ldr	r3, [pc, #16]	; (15170 <nrfx_gpiote_channel_get+0x24>)
   1515e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   15162:	0b5b      	lsrs	r3, r3, #13
   15164:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   15166:	4803      	ldr	r0, [pc, #12]	; (15174 <nrfx_gpiote_channel_get+0x28>)
}
   15168:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1516a:	4803      	ldr	r0, [pc, #12]	; (15178 <nrfx_gpiote_channel_get+0x2c>)
   1516c:	e7fc      	b.n	15168 <nrfx_gpiote_channel_get+0x1c>
   1516e:	bf00      	nop
   15170:	20000868 	.word	0x20000868
   15174:	0bad0000 	.word	0x0bad0000
   15178:	0bad0004 	.word	0x0bad0004

0001517c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1517c:	4b10      	ldr	r3, [pc, #64]	; (151c0 <nrfx_gpiote_init+0x44>)
   1517e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   15182:	b10b      	cbz	r3, 15188 <nrfx_gpiote_init+0xc>
        return err_code;
   15184:	480f      	ldr	r0, [pc, #60]	; (151c4 <nrfx_gpiote_init+0x48>)
}
   15186:	4770      	bx	lr
{
   15188:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1518a:	4c0d      	ldr	r4, [pc, #52]	; (151c0 <nrfx_gpiote_init+0x44>)
   1518c:	2260      	movs	r2, #96	; 0x60
   1518e:	2100      	movs	r1, #0
   15190:	f104 0010 	add.w	r0, r4, #16
   15194:	f006 f894 	bl	1b2c0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   15198:	2006      	movs	r0, #6
   1519a:	f7fb fda3 	bl	10ce4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1519e:	4b0a      	ldr	r3, [pc, #40]	; (151c8 <nrfx_gpiote_init+0x4c>)
   151a0:	2200      	movs	r2, #0
   151a2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   151a6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   151aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   151ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   151b2:	2301      	movs	r3, #1
   151b4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   151b8:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   151ba:	4804      	ldr	r0, [pc, #16]	; (151cc <nrfx_gpiote_init+0x50>)
}
   151bc:	bd10      	pop	{r4, pc}
   151be:	bf00      	nop
   151c0:	20000868 	.word	0x20000868
   151c4:	0bad0005 	.word	0x0bad0005
   151c8:	40006000 	.word	0x40006000
   151cc:	0bad0000 	.word	0x0bad0000

000151d0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   151d0:	4b03      	ldr	r3, [pc, #12]	; (151e0 <nrfx_gpiote_is_init+0x10>)
   151d2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   151d6:	3800      	subs	r0, #0
   151d8:	bf18      	it	ne
   151da:	2001      	movne	r0, #1
   151dc:	4770      	bx	lr
   151de:	bf00      	nop
   151e0:	20000868 	.word	0x20000868

000151e4 <nrfx_gpiote_channel_free>:
{
   151e4:	b508      	push	{r3, lr}
   151e6:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   151e8:	4801      	ldr	r0, [pc, #4]	; (151f0 <nrfx_gpiote_channel_free+0xc>)
   151ea:	f7ff fbed 	bl	149c8 <nrfx_flag32_free>
}
   151ee:	bd08      	pop	{r3, pc}
   151f0:	200008d8 	.word	0x200008d8

000151f4 <nrfx_gpiote_channel_alloc>:
{
   151f4:	b508      	push	{r3, lr}
   151f6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   151f8:	4801      	ldr	r0, [pc, #4]	; (15200 <nrfx_gpiote_channel_alloc+0xc>)
   151fa:	f7ff fbbd 	bl	14978 <nrfx_flag32_alloc>
}
   151fe:	bd08      	pop	{r3, pc}
   15200:	200008d8 	.word	0x200008d8

00015204 <nrfx_gpiote_trigger_enable>:
{
   15204:	b538      	push	{r3, r4, r5, lr}
   15206:	4604      	mov	r4, r0
   15208:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1520a:	f7ff fc09 	bl	14a20 <pin_in_use_by_te>
   1520e:	b308      	cbz	r0, 15254 <nrfx_gpiote_trigger_enable+0x50>
   15210:	4620      	mov	r0, r4
   15212:	f008 faea 	bl	1d7ea <pin_is_input>
   15216:	b1e8      	cbz	r0, 15254 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   15218:	4620      	mov	r0, r4
   1521a:	f7ff fc21 	bl	14a60 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1521e:	0083      	lsls	r3, r0, #2
   15220:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   15224:	b29b      	uxth	r3, r3
   15226:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1522a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1522e:	2200      	movs	r2, #0
   15230:	601a      	str	r2, [r3, #0]
   15232:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15234:	4a22      	ldr	r2, [pc, #136]	; (152c0 <nrfx_gpiote_trigger_enable+0xbc>)
   15236:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1523a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1523e:	f043 0301 	orr.w	r3, r3, #1
   15242:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   15246:	b39d      	cbz	r5, 152b0 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   15248:	2301      	movs	r3, #1
   1524a:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   1524e:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   15252:	e02d      	b.n	152b0 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15254:	f104 0308 	add.w	r3, r4, #8
   15258:	4a1a      	ldr	r2, [pc, #104]	; (152c4 <nrfx_gpiote_trigger_enable+0xc0>)
   1525a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1525e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   15262:	2b04      	cmp	r3, #4
   15264:	d012      	beq.n	1528c <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   15266:	2b05      	cmp	r3, #5
   15268:	d023      	beq.n	152b2 <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
   1526a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1526e:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15270:	2b01      	cmp	r3, #1
   15272:	d009      	beq.n	15288 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
   15274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   15278:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1527c:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1527e:	f013 0f01 	tst.w	r3, #1
   15282:	d018      	beq.n	152b6 <nrfx_gpiote_trigger_enable+0xb2>
   15284:	2003      	movs	r0, #3
   15286:	e002      	b.n	1528e <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   15288:	4b0f      	ldr	r3, [pc, #60]	; (152c8 <nrfx_gpiote_trigger_enable+0xc4>)
   1528a:	e7f5      	b.n	15278 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1528c:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   1528e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   15292:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15294:	2c01      	cmp	r4, #1
   15296:	d010      	beq.n	152ba <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
   15298:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1529c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   152a0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   152a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   152a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   152ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   152b0:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   152b2:	2002      	movs	r0, #2
   152b4:	e7eb      	b.n	1528e <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   152b6:	2002      	movs	r0, #2
   152b8:	e7e9      	b.n	1528e <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   152ba:	4903      	ldr	r1, [pc, #12]	; (152c8 <nrfx_gpiote_trigger_enable+0xc4>)
   152bc:	e7ee      	b.n	1529c <nrfx_gpiote_trigger_enable+0x98>
   152be:	bf00      	nop
   152c0:	40006000 	.word	0x40006000
   152c4:	20000868 	.word	0x20000868
   152c8:	50000300 	.word	0x50000300

000152cc <nrfx_gpiote_trigger_disable>:
{
   152cc:	b510      	push	{r4, lr}
   152ce:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   152d0:	f7ff fba6 	bl	14a20 <pin_in_use_by_te>
   152d4:	b1a0      	cbz	r0, 15300 <nrfx_gpiote_trigger_disable+0x34>
   152d6:	4620      	mov	r0, r4
   152d8:	f008 fa87 	bl	1d7ea <pin_is_input>
   152dc:	b180      	cbz	r0, 15300 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   152de:	4620      	mov	r0, r4
   152e0:	f7ff fbbe 	bl	14a60 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   152e4:	2201      	movs	r2, #1
   152e6:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   152e8:	4b0e      	ldr	r3, [pc, #56]	; (15324 <nrfx_gpiote_trigger_disable+0x58>)
   152ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   152ee:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   152f2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   152f6:	f022 0203 	bic.w	r2, r2, #3
   152fa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   152fe:	e00e      	b.n	1531e <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   15300:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   15304:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15306:	2c01      	cmp	r4, #1
   15308:	d00a      	beq.n	15320 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   1530a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1530e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15312:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   15316:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1531a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1531e:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   15320:	4901      	ldr	r1, [pc, #4]	; (15328 <nrfx_gpiote_trigger_disable+0x5c>)
   15322:	e7f4      	b.n	1530e <nrfx_gpiote_trigger_disable+0x42>
   15324:	40006000 	.word	0x40006000
   15328:	50000300 	.word	0x50000300

0001532c <nrfx_gpiote_pin_uninit>:
{
   1532c:	b510      	push	{r4, lr}
   1532e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   15330:	f7ff fb6c 	bl	14a0c <pin_in_use>
   15334:	b908      	cbnz	r0, 1533a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   15336:	480c      	ldr	r0, [pc, #48]	; (15368 <nrfx_gpiote_pin_uninit+0x3c>)
}
   15338:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   1533a:	4620      	mov	r0, r4
   1533c:	f7ff ffc6 	bl	152cc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   15340:	4620      	mov	r0, r4
   15342:	f7ff fc0d 	bl	14b60 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   15346:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1534a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1534c:	2c01      	cmp	r4, #1
   1534e:	d008      	beq.n	15362 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   15350:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15354:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15358:	2102      	movs	r1, #2
   1535a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   1535e:	4803      	ldr	r0, [pc, #12]	; (1536c <nrfx_gpiote_pin_uninit+0x40>)
   15360:	e7ea      	b.n	15338 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   15362:	4a03      	ldr	r2, [pc, #12]	; (15370 <nrfx_gpiote_pin_uninit+0x44>)
   15364:	e7f6      	b.n	15354 <nrfx_gpiote_pin_uninit+0x28>
   15366:	bf00      	nop
   15368:	0bad0004 	.word	0x0bad0004
   1536c:	0bad0000 	.word	0x0bad0000
   15370:	50000300 	.word	0x50000300

00015374 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   15374:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   15376:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   15378:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1537c:	2100      	movs	r1, #0
    uint32_t status = 0;
   1537e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15380:	e003      	b.n	1538a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   15382:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   15384:	3304      	adds	r3, #4
   15386:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15388:	3101      	adds	r1, #1
   1538a:	2907      	cmp	r1, #7
   1538c:	d814      	bhi.n	153b8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1538e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   15392:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   15396:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   15398:	2a00      	cmp	r2, #0
   1539a:	d0f2      	beq.n	15382 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1539c:	4a0c      	ldr	r2, [pc, #48]	; (153d0 <nrfx_gpiote_irq_handler+0x5c>)
   1539e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   153a2:	4210      	tst	r0, r2
   153a4:	d0ed      	beq.n	15382 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   153a6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   153aa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   153ae:	2500      	movs	r5, #0
   153b0:	6015      	str	r5, [r2, #0]
   153b2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   153b4:	4304      	orrs	r4, r0
   153b6:	e7e4      	b.n	15382 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   153b8:	4b05      	ldr	r3, [pc, #20]	; (153d0 <nrfx_gpiote_irq_handler+0x5c>)
   153ba:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   153be:	b91b      	cbnz	r3, 153c8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   153c0:	4620      	mov	r0, r4
   153c2:	f7ff fc1f 	bl	14c04 <gpiote_evt_handle>
}
   153c6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   153c8:	f7ff fcd4 	bl	14d74 <port_event_handle>
   153cc:	e7f8      	b.n	153c0 <nrfx_gpiote_irq_handler+0x4c>
   153ce:	bf00      	nop
   153d0:	40006000 	.word	0x40006000

000153d4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   153d4:	b508      	push	{r3, lr}
   153d6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   153d8:	4801      	ldr	r0, [pc, #4]	; (153e0 <nrfx_ppi_channel_alloc+0xc>)
   153da:	f7ff facd 	bl	14978 <nrfx_flag32_alloc>
}
   153de:	bd08      	pop	{r3, pc}
   153e0:	200008e4 	.word	0x200008e4

000153e4 <configure_pins>:


static void configure_pins(NRF_SPI_Type *            p_spi,
                           nrfx_spi_config_t const * p_config)
{
    if (!p_config->skip_gpio_cfg)
   153e4:	7bcb      	ldrb	r3, [r1, #15]
   153e6:	b1a3      	cbz	r3, 15412 <configure_pins+0x2e>
            nrf_gpio_pin_write(p_config->ss_pin, 1);
            nrf_gpio_cfg_output(p_config->ss_pin);
        }
    }

    if (!p_config->skip_psel_cfg)
   153e8:	7c0b      	ldrb	r3, [r1, #16]
   153ea:	2b00      	cmp	r3, #0
   153ec:	f040 80ae 	bne.w	1554c <configure_pins+0x168>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   153f0:	784b      	ldrb	r3, [r1, #1]
                            ? p_config->mosi_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   153f2:	2bff      	cmp	r3, #255	; 0xff
   153f4:	f000 80a4 	beq.w	15540 <configure_pins+0x15c>
   153f8:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   153fa:	788b      	ldrb	r3, [r1, #2]
                            ? p_config->miso_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   153fc:	2bff      	cmp	r3, #255	; 0xff
   153fe:	f000 80a2 	beq.w	15546 <configure_pins+0x162>

        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   15402:	7809      	ldrb	r1, [r1, #0]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   15404:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   15408:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   1540c:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
   15410:	4770      	bx	lr
{
   15412:	b430      	push	{r4, r5}
        nrf_gpio_pin_write(p_config->sck_pin,
   15414:	780b      	ldrb	r3, [r1, #0]
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
   15416:	7b0a      	ldrb	r2, [r1, #12]
    if (value == 0)
   15418:	2a01      	cmp	r2, #1
   1541a:	d871      	bhi.n	15500 <configure_pins+0x11c>
    *p_pin = pin_number & 0x1F;
   1541c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15420:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15422:	2b01      	cmp	r3, #1
   15424:	d06a      	beq.n	154fc <configure_pins+0x118>
        case 0: return NRF_P0;
   15426:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1542a:	2301      	movs	r3, #1
   1542c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1542e:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->sck_pin,
   15432:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   15434:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15438:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1543a:	2b01      	cmp	r3, #1
   1543c:	d06e      	beq.n	1551c <configure_pins+0x138>
        case 0: return NRF_P0;
   1543e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15442:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15446:	2201      	movs	r2, #1
   15448:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1544c:	784b      	ldrb	r3, [r1, #1]
   1544e:	2bff      	cmp	r3, #255	; 0xff
   15450:	d017      	beq.n	15482 <configure_pins+0x9e>
    *p_pin = pin_number & 0x1F;
   15452:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   15456:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15458:	4293      	cmp	r3, r2
   1545a:	d061      	beq.n	15520 <configure_pins+0x13c>
        case 0: return NRF_P0;
   1545c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   15460:	2301      	movs	r3, #1
   15462:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
   15464:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
   15468:	784b      	ldrb	r3, [r1, #1]
    *p_pin = pin_number & 0x1F;
   1546a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1546e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15470:	2b01      	cmp	r3, #1
   15472:	d057      	beq.n	15524 <configure_pins+0x140>
        case 0: return NRF_P0;
   15474:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15478:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1547c:	2203      	movs	r2, #3
   1547e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   15482:	788b      	ldrb	r3, [r1, #2]
   15484:	2bff      	cmp	r3, #255	; 0xff
   15486:	d00c      	beq.n	154a2 <configure_pins+0xbe>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   15488:	7b8c      	ldrb	r4, [r1, #14]
    *p_pin = pin_number & 0x1F;
   1548a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1548e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15490:	2b01      	cmp	r3, #1
   15492:	d049      	beq.n	15528 <configure_pins+0x144>
        case 0: return NRF_P0;
   15494:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15498:	00a4      	lsls	r4, r4, #2
    reg->PIN_CNF[pin_number] = cnf;
   1549a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1549e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   154a2:	78cb      	ldrb	r3, [r1, #3]
   154a4:	2bff      	cmp	r3, #255	; 0xff
   154a6:	d017      	beq.n	154d8 <configure_pins+0xf4>
    *p_pin = pin_number & 0x1F;
   154a8:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   154ac:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   154ae:	2b01      	cmp	r3, #1
   154b0:	d03c      	beq.n	1552c <configure_pins+0x148>
        case 0: return NRF_P0;
   154b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   154b6:	2301      	movs	r3, #1
   154b8:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   154ba:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
   154be:	78cb      	ldrb	r3, [r1, #3]
    *p_pin = pin_number & 0x1F;
   154c0:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   154c4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   154c6:	2b01      	cmp	r3, #1
   154c8:	d032      	beq.n	15530 <configure_pins+0x14c>
        case 0: return NRF_P0;
   154ca:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   154ce:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   154d2:	2203      	movs	r2, #3
   154d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   154d8:	7c0b      	ldrb	r3, [r1, #16]
   154da:	b96b      	cbnz	r3, 154f8 <configure_pins+0x114>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   154dc:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   154de:	2bff      	cmp	r3, #255	; 0xff
   154e0:	d028      	beq.n	15534 <configure_pins+0x150>
   154e2:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   154e4:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   154e6:	2bff      	cmp	r3, #255	; 0xff
   154e8:	d027      	beq.n	1553a <configure_pins+0x156>
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   154ea:	7809      	ldrb	r1, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   154ec:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   154f0:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   154f4:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    }
}
   154f8:	bc30      	pop	{r4, r5}
   154fa:	4770      	bx	lr
        case 1: return NRF_P1;
   154fc:	4c14      	ldr	r4, [pc, #80]	; (15550 <configure_pins+0x16c>)
   154fe:	e794      	b.n	1542a <configure_pins+0x46>
    *p_pin = pin_number & 0x1F;
   15500:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15504:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15506:	2b01      	cmp	r3, #1
   15508:	d006      	beq.n	15518 <configure_pins+0x134>
        case 0: return NRF_P0;
   1550a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1550e:	2301      	movs	r3, #1
   15510:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   15512:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
}
   15516:	e78c      	b.n	15432 <configure_pins+0x4e>
        case 1: return NRF_P1;
   15518:	4c0d      	ldr	r4, [pc, #52]	; (15550 <configure_pins+0x16c>)
   1551a:	e7f8      	b.n	1550e <configure_pins+0x12a>
   1551c:	4c0c      	ldr	r4, [pc, #48]	; (15550 <configure_pins+0x16c>)
   1551e:	e790      	b.n	15442 <configure_pins+0x5e>
   15520:	4a0b      	ldr	r2, [pc, #44]	; (15550 <configure_pins+0x16c>)
   15522:	e79d      	b.n	15460 <configure_pins+0x7c>
   15524:	4c0a      	ldr	r4, [pc, #40]	; (15550 <configure_pins+0x16c>)
   15526:	e7a7      	b.n	15478 <configure_pins+0x94>
   15528:	4d09      	ldr	r5, [pc, #36]	; (15550 <configure_pins+0x16c>)
   1552a:	e7b5      	b.n	15498 <configure_pins+0xb4>
   1552c:	4a08      	ldr	r2, [pc, #32]	; (15550 <configure_pins+0x16c>)
   1552e:	e7c2      	b.n	154b6 <configure_pins+0xd2>
   15530:	4c07      	ldr	r4, [pc, #28]	; (15550 <configure_pins+0x16c>)
   15532:	e7cc      	b.n	154ce <configure_pins+0xea>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   15534:	f04f 32ff 	mov.w	r2, #4294967295
   15538:	e7d4      	b.n	154e4 <configure_pins+0x100>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   1553a:	f04f 33ff 	mov.w	r3, #4294967295
   1553e:	e7d4      	b.n	154ea <configure_pins+0x106>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   15540:	f04f 32ff 	mov.w	r2, #4294967295
   15544:	e759      	b.n	153fa <configure_pins+0x16>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   15546:	f04f 33ff 	mov.w	r3, #4294967295
   1554a:	e75a      	b.n	15402 <configure_pins+0x1e>
   1554c:	4770      	bx	lr
   1554e:	bf00      	nop
   15550:	50000300 	.word	0x50000300

00015554 <finish_transfer>:

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
}

static void finish_transfer(spi_control_block_t * p_cb)
{
   15554:	b508      	push	{r3, lr}
   15556:	4603      	mov	r3, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   15558:	7f82      	ldrb	r2, [r0, #30]
   1555a:	2aff      	cmp	r2, #255	; 0xff
   1555c:	d00a      	beq.n	15574 <finish_transfer+0x20>
    *p_pin = pin_number & 0x1F;
   1555e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   15562:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15564:	2a01      	cmp	r2, #1
   15566:	d00e      	beq.n	15586 <finish_transfer+0x32>
        case 0: return NRF_P0;
   15568:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1556c:	2201      	movs	r2, #1
   1556e:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   15570:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
        nrf_gpio_pin_write(p_cb->ss_pin, 1);
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
   15574:	2200      	movs	r2, #0
   15576:	775a      	strb	r2, [r3, #29]

    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   15578:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1557a:	4618      	mov	r0, r3
   1557c:	f850 2b08 	ldr.w	r2, [r0], #8
   15580:	6859      	ldr	r1, [r3, #4]
   15582:	4790      	blx	r2
}
   15584:	bd08      	pop	{r3, pc}
        case 1: return NRF_P1;
   15586:	4801      	ldr	r0, [pc, #4]	; (1558c <finish_transfer+0x38>)
   15588:	e7f0      	b.n	1556c <finish_transfer+0x18>
   1558a:	bf00      	nop
   1558c:	50000300 	.word	0x50000300

00015590 <spi_xfer>:
}

static void spi_xfer(NRF_SPI_Type               * p_spi,
                     spi_control_block_t        * p_cb,
                     nrfx_spi_xfer_desc_t const * p_xfer_desc)
{
   15590:	b538      	push	{r3, r4, r5, lr}
   15592:	4604      	mov	r4, r0
   15594:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
   15596:	2300      	movs	r3, #0
   15598:	620b      	str	r3, [r1, #32]
    p_reg->INTENCLR = mask;
   1559a:	2104      	movs	r1, #4
   1559c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   155a0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   155a4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108

    // Start the transfer by writing some byte to the TXD register;
    // if TX buffer is not empty, take the first byte from this buffer,
    // otherwise - use over-run character.
    nrf_spi_txd_set(p_spi,
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   155a8:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
   155aa:	b183      	cbz	r3, 155ce <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   155ac:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
   155ae:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
   155b0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

    // TXD register is double buffered, so next byte to be transmitted can
    // be written immediately, if needed, i.e. if TX or RX transfer is to
    // be more that 1 byte long. Again - if there is something more in TX
    // buffer send it, otherwise use over-run character.
    if (p_xfer_desc->tx_length > 1)
   155b4:	6853      	ldr	r3, [r2, #4]
   155b6:	2b01      	cmp	r3, #1
   155b8:	d90b      	bls.n	155d2 <spi_xfer+0x42>
    {
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   155ba:	6813      	ldr	r3, [r2, #0]
   155bc:	785b      	ldrb	r3, [r3, #1]
   155be:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    // For blocking mode (user handler not provided) wait here for READY
    // events (indicating that the byte from TXD register was transmitted
    // and a new incoming byte was moved to the RXD register) and continue
    // transaction until all requested bytes are transferred.
    // In non-blocking mode - IRQ service routine will do this stuff.
    if (p_cb->handler)
   155c2:	682b      	ldr	r3, [r5, #0]
   155c4:	b163      	cbz	r3, 155e0 <spi_xfer+0x50>
    p_reg->INTENSET = mask;
   155c6:	2304      	movs	r3, #4
   155c8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
        {
            nrf_gpio_pin_write(p_cb->ss_pin, 1);
        }
    }
}
   155cc:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
   155ce:	7feb      	ldrb	r3, [r5, #31]
   155d0:	e7ee      	b.n	155b0 <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
   155d2:	68d3      	ldr	r3, [r2, #12]
   155d4:	2b01      	cmp	r3, #1
   155d6:	d9f4      	bls.n	155c2 <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   155d8:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
   155da:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
   155de:	e7f0      	b.n	155c2 <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   155e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   155e4:	2b00      	cmp	r3, #0
   155e6:	d0fb      	beq.n	155e0 <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   155e8:	2300      	movs	r3, #0
   155ea:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   155ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   155f2:	4629      	mov	r1, r5
   155f4:	4620      	mov	r0, r4
   155f6:	f008 f906 	bl	1d806 <transfer_byte>
   155fa:	2800      	cmp	r0, #0
   155fc:	d1f0      	bne.n	155e0 <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   155fe:	7fab      	ldrb	r3, [r5, #30]
   15600:	2bff      	cmp	r3, #255	; 0xff
   15602:	d0e3      	beq.n	155cc <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
   15604:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15608:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1560a:	2b01      	cmp	r3, #1
   1560c:	d006      	beq.n	1561c <spi_xfer+0x8c>
        case 0: return NRF_P0;
   1560e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15612:	2301      	movs	r3, #1
   15614:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   15616:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
   1561a:	e7d7      	b.n	155cc <spi_xfer+0x3c>
        case 1: return NRF_P1;
   1561c:	4900      	ldr	r1, [pc, #0]	; (15620 <spi_xfer+0x90>)
   1561e:	e7f8      	b.n	15612 <spi_xfer+0x82>
   15620:	50000300 	.word	0x50000300

00015624 <nrfx_spi_init>:
{
   15624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15626:	4606      	mov	r6, r0
   15628:	460d      	mov	r5, r1
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1562a:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1562c:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1562e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   15632:	4926      	ldr	r1, [pc, #152]	; (156cc <nrfx_spi_init+0xa8>)
   15634:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   15638:	7f09      	ldrb	r1, [r1, #28]
   1563a:	b109      	cbz	r1, 15640 <nrfx_spi_init+0x1c>
        return err_code;
   1563c:	4824      	ldr	r0, [pc, #144]	; (156d0 <nrfx_spi_init+0xac>)
}
   1563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler = handler;
   15640:	4822      	ldr	r0, [pc, #136]	; (156cc <nrfx_spi_init+0xa8>)
   15642:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
   15646:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
   1564a:	f840 203c 	str.w	r2, [r0, ip, lsl #3]
    p_cb->p_context = p_context;
   1564e:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   15650:	7beb      	ldrb	r3, [r5, #15]
   15652:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   15656:	78eb      	ldrb	r3, [r5, #3]
   15658:	778b      	strb	r3, [r1, #30]
    p_cb->orc = p_config->orc;
   1565a:	796b      	ldrb	r3, [r5, #5]
   1565c:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_spi, p_config);
   1565e:	4629      	mov	r1, r5
   15660:	4638      	mov	r0, r7
   15662:	f7ff febf 	bl	153e4 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
   15666:	68ab      	ldr	r3, [r5, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   15668:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1566c:	7b2a      	ldrb	r2, [r5, #12]
   1566e:	7b6b      	ldrb	r3, [r5, #13]
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   15670:	3b00      	subs	r3, #0
   15672:	bf18      	it	ne
   15674:	2301      	movne	r3, #1
    switch (spi_mode)
   15676:	2a02      	cmp	r2, #2
   15678:	d021      	beq.n	156be <nrfx_spi_init+0x9a>
   1567a:	2a03      	cmp	r2, #3
   1567c:	d022      	beq.n	156c4 <nrfx_spi_init+0xa0>
   1567e:	2a01      	cmp	r2, #1
   15680:	d01a      	beq.n	156b8 <nrfx_spi_init+0x94>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   15682:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   15686:	2301      	movs	r3, #1
   15688:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   1568c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15690:	4a0e      	ldr	r2, [pc, #56]	; (156cc <nrfx_spi_init+0xa8>)
   15692:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   15696:	b123      	cbz	r3, 156a2 <nrfx_spi_init+0x7e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   15698:	6830      	ldr	r0, [r6, #0]
   1569a:	f340 3007 	sbfx	r0, r0, #12, #8
   1569e:	f7fb fb21 	bl	10ce4 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   156a2:	4b0a      	ldr	r3, [pc, #40]	; (156cc <nrfx_spi_init+0xa8>)
   156a4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   156a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   156ac:	2100      	movs	r1, #0
   156ae:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   156b0:	2301      	movs	r3, #1
   156b2:	7713      	strb	r3, [r2, #28]
    return err_code;
   156b4:	4807      	ldr	r0, [pc, #28]	; (156d4 <nrfx_spi_init+0xb0>)
   156b6:	e7c2      	b.n	1563e <nrfx_spi_init+0x1a>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   156b8:	f043 0302 	orr.w	r3, r3, #2
        break;
   156bc:	e7e1      	b.n	15682 <nrfx_spi_init+0x5e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   156be:	f043 0304 	orr.w	r3, r3, #4
        break;
   156c2:	e7de      	b.n	15682 <nrfx_spi_init+0x5e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   156c4:	f043 0306 	orr.w	r3, r3, #6
        break;
   156c8:	e7db      	b.n	15682 <nrfx_spi_init+0x5e>
   156ca:	bf00      	nop
   156cc:	20002b94 	.word	0x20002b94
   156d0:	0bad0005 	.word	0x0bad0005
   156d4:	0bad0000 	.word	0x0bad0000

000156d8 <nrfx_spi_uninit>:
{
   156d8:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   156da:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   156dc:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   156de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   156e2:	4b35      	ldr	r3, [pc, #212]	; (157b8 <nrfx_spi_uninit+0xe0>)
   156e4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   156e8:	b133      	cbz	r3, 156f8 <nrfx_spi_uninit+0x20>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   156ea:	f345 3007 	sbfx	r0, r5, #12, #8
   156ee:	f7fb fb07 	bl	10d00 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   156f2:	2304      	movs	r3, #4
   156f4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   156f8:	2300      	movs	r3, #0
   156fa:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   156fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15702:	4a2d      	ldr	r2, [pc, #180]	; (157b8 <nrfx_spi_uninit+0xe0>)
   15704:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15708:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1570c:	2b00      	cmp	r3, #0
   1570e:	d143      	bne.n	15798 <nrfx_spi_uninit+0xc0>
    return p_reg->PSEL.SCK;
   15710:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   15714:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15718:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1571a:	2b01      	cmp	r3, #1
   1571c:	d044      	beq.n	157a8 <nrfx_spi_uninit+0xd0>
        case 0: return NRF_P0;
   1571e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15722:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15726:	2202      	movs	r2, #2
   15728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MISO;
   1572c:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   15730:	f1b3 3fff 	cmp.w	r3, #4294967295
   15734:	d00b      	beq.n	1574e <nrfx_spi_uninit+0x76>
    *p_pin = pin_number & 0x1F;
   15736:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1573a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1573c:	2b01      	cmp	r3, #1
   1573e:	d035      	beq.n	157ac <nrfx_spi_uninit+0xd4>
        case 0: return NRF_P0;
   15740:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15744:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15748:	2202      	movs	r2, #2
   1574a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MOSI;
   1574e:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   15752:	f1b3 3fff 	cmp.w	r3, #4294967295
   15756:	d00b      	beq.n	15770 <nrfx_spi_uninit+0x98>
    *p_pin = pin_number & 0x1F;
   15758:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1575c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1575e:	2b01      	cmp	r3, #1
   15760:	d026      	beq.n	157b0 <nrfx_spi_uninit+0xd8>
        case 0: return NRF_P0;
   15762:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15766:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1576a:	2202      	movs	r2, #2
   1576c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   15770:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15774:	4a10      	ldr	r2, [pc, #64]	; (157b8 <nrfx_spi_uninit+0xe0>)
   15776:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1577a:	7f9b      	ldrb	r3, [r3, #30]
   1577c:	2bff      	cmp	r3, #255	; 0xff
   1577e:	d00b      	beq.n	15798 <nrfx_spi_uninit+0xc0>
    *p_pin = pin_number & 0x1F;
   15780:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15784:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15786:	2b01      	cmp	r3, #1
   15788:	d014      	beq.n	157b4 <nrfx_spi_uninit+0xdc>
        case 0: return NRF_P0;
   1578a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1578e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15792:	2202      	movs	r2, #2
   15794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   15798:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1579c:	4b06      	ldr	r3, [pc, #24]	; (157b8 <nrfx_spi_uninit+0xe0>)
   1579e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   157a2:	2300      	movs	r3, #0
   157a4:	7723      	strb	r3, [r4, #28]
}
   157a6:	bd38      	pop	{r3, r4, r5, pc}
        case 1: return NRF_P1;
   157a8:	4904      	ldr	r1, [pc, #16]	; (157bc <nrfx_spi_uninit+0xe4>)
   157aa:	e7ba      	b.n	15722 <nrfx_spi_uninit+0x4a>
   157ac:	4903      	ldr	r1, [pc, #12]	; (157bc <nrfx_spi_uninit+0xe4>)
   157ae:	e7c9      	b.n	15744 <nrfx_spi_uninit+0x6c>
   157b0:	4902      	ldr	r1, [pc, #8]	; (157bc <nrfx_spi_uninit+0xe4>)
   157b2:	e7d8      	b.n	15766 <nrfx_spi_uninit+0x8e>
   157b4:	4901      	ldr	r1, [pc, #4]	; (157bc <nrfx_spi_uninit+0xe4>)
   157b6:	e7ea      	b.n	1578e <nrfx_spi_uninit+0xb6>
   157b8:	20002b94 	.word	0x20002b94
   157bc:	50000300 	.word	0x50000300

000157c0 <nrfx_spi_xfer>:

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   157c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   157c4:	f890 c004 	ldrb.w	ip, [r0, #4]
   157c8:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   157cc:	4d21      	ldr	r5, [pc, #132]	; (15854 <nrfx_spi_xfer+0x94>)
   157ce:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   157d2:	7f6b      	ldrb	r3, [r5, #29]
   157d4:	2b00      	cmp	r3, #0
   157d6:	d13b      	bne.n	15850 <nrfx_spi_xfer+0x90>
   157d8:	4604      	mov	r4, r0
   157da:	468e      	mov	lr, r1
   157dc:	4617      	mov	r7, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   157de:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   157e2:	4a1c      	ldr	r2, [pc, #112]	; (15854 <nrfx_spi_xfer+0x94>)
   157e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   157e8:	b10b      	cbz	r3, 157ee <nrfx_spi_xfer+0x2e>
        {
            p_cb->transfer_in_progress = true;
   157ea:	2201      	movs	r2, #1
   157ec:	776a      	strb	r2, [r5, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   157ee:	eb0c 068c 	add.w	r6, ip, ip, lsl #2
   157f2:	4b18      	ldr	r3, [pc, #96]	; (15854 <nrfx_spi_xfer+0x94>)
   157f4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   157f8:	f106 080c 	add.w	r8, r6, #12
   157fc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   15800:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
   15804:	2300      	movs	r3, #0
   15806:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1580a:	7fb3      	ldrb	r3, [r6, #30]
   1580c:	2bff      	cmp	r3, #255	; 0xff
   1580e:	d00a      	beq.n	15826 <nrfx_spi_xfer+0x66>
    *p_pin = pin_number & 0x1F;
   15810:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   15814:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15816:	2b01      	cmp	r3, #1
   15818:	d011      	beq.n	1583e <nrfx_spi_xfer+0x7e>
        case 0: return NRF_P0;
   1581a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1581e:	2301      	movs	r3, #1
   15820:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   15822:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   15826:	b167      	cbz	r7, 15842 <nrfx_spi_xfer+0x82>
    {
        p_cb->transfer_in_progress = false;
   15828:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   1582c:	4b09      	ldr	r3, [pc, #36]	; (15854 <nrfx_spi_xfer+0x94>)
   1582e:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
   15832:	2300      	movs	r3, #0
   15834:	f88c 301d 	strb.w	r3, [ip, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   15838:	4807      	ldr	r0, [pc, #28]	; (15858 <nrfx_spi_xfer+0x98>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   1583e:	4a07      	ldr	r2, [pc, #28]	; (1585c <nrfx_spi_xfer+0x9c>)
   15840:	e7ed      	b.n	1581e <nrfx_spi_xfer+0x5e>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   15842:	4672      	mov	r2, lr
   15844:	4629      	mov	r1, r5
   15846:	6820      	ldr	r0, [r4, #0]
   15848:	f7ff fea2 	bl	15590 <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
   1584c:	4804      	ldr	r0, [pc, #16]	; (15860 <nrfx_spi_xfer+0xa0>)
   1584e:	e7f4      	b.n	1583a <nrfx_spi_xfer+0x7a>
        return err_code;
   15850:	4804      	ldr	r0, [pc, #16]	; (15864 <nrfx_spi_xfer+0xa4>)
   15852:	e7f2      	b.n	1583a <nrfx_spi_xfer+0x7a>
   15854:	20002b94 	.word	0x20002b94
   15858:	0bad0003 	.word	0x0bad0003
   1585c:	50000300 	.word	0x50000300
   15860:	0bad0000 	.word	0x0bad0000
   15864:	0bad000b 	.word	0x0bad000b

00015868 <nrfx_spi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   15868:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
   1586a:	4903      	ldr	r1, [pc, #12]	; (15878 <nrfx_spi_1_irq_handler+0x10>)
   1586c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   15870:	f008 f804 	bl	1d87c <irq_handler>
}
   15874:	bd08      	pop	{r3, pc}
   15876:	bf00      	nop
   15878:	20002b94 	.word	0x20002b94

0001587c <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   1587c:	f1b0 3fff 	cmp.w	r0, #4294967295
   15880:	d00b      	beq.n	1589a <spim_pin_uninit+0x1e>
    *p_pin = pin_number & 0x1F;
   15882:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   15886:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15888:	2801      	cmp	r0, #1
   1588a:	d007      	beq.n	1589c <spim_pin_uninit+0x20>
        case 0: return NRF_P0;
   1588c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15890:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15894:	2202      	movs	r2, #2
   15896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   1589a:	4770      	bx	lr
        case 1: return NRF_P1;
   1589c:	4900      	ldr	r1, [pc, #0]	; (158a0 <spim_pin_uninit+0x24>)
   1589e:	e7f7      	b.n	15890 <spim_pin_uninit+0x14>
   158a0:	50000300 	.word	0x50000300

000158a4 <set_ss_pin_state>:
#endif

static void set_ss_pin_state(spim_control_block_t * p_cb, bool active)
{
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    if (p_cb->use_hw_ss)
   158a4:	7f82      	ldrb	r2, [r0, #30]
   158a6:	f012 0f04 	tst.w	r2, #4
   158aa:	d121      	bne.n	158f0 <set_ss_pin_state+0x4c>
    {
        return;
    }
#endif

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   158ac:	7fc3      	ldrb	r3, [r0, #31]
   158ae:	2bff      	cmp	r3, #255	; 0xff
   158b0:	d01e      	beq.n	158f0 <set_ss_pin_state+0x4c>
    {
        nrf_gpio_pin_write(p_cb->ss_pin,
   158b2:	f012 0f02 	tst.w	r2, #2
   158b6:	d101      	bne.n	158bc <set_ss_pin_state+0x18>
                           p_cb->ss_active_high ? active : !active);
   158b8:	f081 0101 	eor.w	r1, r1, #1
    if (value == 0)
   158bc:	b969      	cbnz	r1, 158da <set_ss_pin_state+0x36>
    *p_pin = pin_number & 0x1F;
   158be:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   158c2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   158c4:	2b01      	cmp	r3, #1
   158c6:	d006      	beq.n	158d6 <set_ss_pin_state+0x32>
        case 0: return NRF_P0;
   158c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   158cc:	2301      	movs	r3, #1
   158ce:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   158d0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   158d4:	4770      	bx	lr
        case 1: return NRF_P1;
   158d6:	4a08      	ldr	r2, [pc, #32]	; (158f8 <set_ss_pin_state+0x54>)
   158d8:	e7f8      	b.n	158cc <set_ss_pin_state+0x28>
    *p_pin = pin_number & 0x1F;
   158da:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   158de:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   158e0:	2b01      	cmp	r3, #1
   158e2:	d006      	beq.n	158f2 <set_ss_pin_state+0x4e>
        case 0: return NRF_P0;
   158e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   158e8:	2301      	movs	r3, #1
   158ea:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   158ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    }
}
   158f0:	4770      	bx	lr
        case 1: return NRF_P1;
   158f2:	4a01      	ldr	r2, [pc, #4]	; (158f8 <set_ss_pin_state+0x54>)
   158f4:	e7f8      	b.n	158e8 <set_ss_pin_state+0x44>
   158f6:	bf00      	nop
   158f8:	50000300 	.word	0x50000300

000158fc <spim_xfer>:

static nrfx_err_t spim_xfer(NRF_SPIM_Type               * p_spim,
                            spim_control_block_t        * p_cb,
                            nrfx_spim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   158fc:	b570      	push	{r4, r5, r6, lr}
   158fe:	4604      	mov	r4, r0
   15900:	460e      	mov	r6, r1
   15902:	461d      	mov	r5, r3
    nrfx_err_t err_code;
    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   15904:	6813      	ldr	r3, [r2, #0]
   15906:	b123      	cbz	r3, 15912 <spim_xfer+0x16>
   15908:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
   1590c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   15910:	d106      	bne.n	15920 <spim_xfer+0x24>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   15912:	6891      	ldr	r1, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   15914:	b141      	cbz	r1, 15928 <spim_xfer+0x2c>
   15916:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1591a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1591e:	d003      	beq.n	15928 <spim_xfer+0x2c>
    {
        p_cb->transfer_in_progress = false;
   15920:	2300      	movs	r3, #0
   15922:	7773      	strb	r3, [r6, #29]
        err_code = NRFX_ERROR_INVALID_ADDR;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   15924:	4818      	ldr	r0, [pc, #96]	; (15988 <spim_xfer+0x8c>)
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    }
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15926:	bd70      	pop	{r4, r5, r6, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   15928:	6851      	ldr	r1, [r2, #4]

NRF_STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t          length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1592a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1592e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   15932:	6891      	ldr	r1, [r2, #8]
   15934:	68d3      	ldr	r3, [r2, #12]

NRF_STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t    length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15936:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1593a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1593e:	2300      	movs	r3, #0
   15940:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   15944:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    spim_list_enable_handle(p_spim, flags);
   15948:	4629      	mov	r1, r5
   1594a:	4620      	mov	r0, r4
   1594c:	f007 ffae 	bl	1d8ac <spim_list_enable_handle>
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   15950:	f015 0208 	ands.w	r2, r5, #8
   15954:	d101      	bne.n	1595a <spim_xfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15956:	2301      	movs	r3, #1
   15958:	6123      	str	r3, [r4, #16]
    if (!p_cb->handler)
   1595a:	6833      	ldr	r3, [r6, #0]
   1595c:	b14b      	cbz	r3, 15972 <spim_xfer+0x76>
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
   1595e:	f015 0f04 	tst.w	r5, #4
   15962:	bf0c      	ite	eq
   15964:	2101      	moveq	r1, #1
   15966:	2100      	movne	r1, #0
   15968:	4620      	mov	r0, r4
   1596a:	f007 ff96 	bl	1d89a <spim_int_enable>
    return err_code;
   1596e:	4807      	ldr	r0, [pc, #28]	; (1598c <spim_xfer+0x90>)
   15970:	e7d9      	b.n	15926 <spim_xfer+0x2a>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   15972:	b91a      	cbnz	r2, 1597c <spim_xfer+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15974:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   15978:	2b00      	cmp	r3, #0
   1597a:	d0fb      	beq.n	15974 <spim_xfer+0x78>
        set_ss_pin_state(p_cb, false);
   1597c:	2100      	movs	r1, #0
   1597e:	4630      	mov	r0, r6
   15980:	f7ff ff90 	bl	158a4 <set_ss_pin_state>
    return err_code;
   15984:	4801      	ldr	r0, [pc, #4]	; (1598c <spim_xfer+0x90>)
   15986:	e7ce      	b.n	15926 <spim_xfer+0x2a>
   15988:	0bad000a 	.word	0x0bad000a
   1598c:	0bad0000 	.word	0x0bad0000

00015990 <configure_pins>:
{
   15990:	b4f0      	push	{r4, r5, r6, r7}
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   15992:	6802      	ldr	r2, [r0, #0]
    if (!p_config->skip_gpio_cfg)
   15994:	7ccb      	ldrb	r3, [r1, #19]
   15996:	2b00      	cmp	r3, #0
   15998:	d179      	bne.n	15a8e <configure_pins+0xfe>
        pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M)
   1599a:	688b      	ldr	r3, [r1, #8]
                    : NRF_GPIO_PIN_S0S1;
   1599c:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   159a0:	f000 8099 	beq.w	15ad6 <configure_pins+0x146>
   159a4:	2300      	movs	r3, #0
        nrf_gpio_pin_write(p_config->sck_pin,
   159a6:	f891 c000 	ldrb.w	ip, [r1]
                           p_config->mode <= NRF_SPIM_MODE_1 ? 0 : 1);
   159aa:	7b0c      	ldrb	r4, [r1, #12]
    if (value == 0)
   159ac:	2c01      	cmp	r4, #1
   159ae:	f200 8096 	bhi.w	15ade <configure_pins+0x14e>
    *p_pin = pin_number & 0x1F;
   159b2:	f00c 061f 	and.w	r6, ip, #31
    return pin_number >> 5;
   159b6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   159ba:	f1bc 0f01 	cmp.w	ip, #1
   159be:	f000 808c 	beq.w	15ada <configure_pins+0x14a>
        case 0: return NRF_P0;
   159c2:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   159c6:	2401      	movs	r4, #1
   159c8:	40b4      	lsls	r4, r6
    p_reg->OUTCLR = clr_mask;
   159ca:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->sck_pin,
   159ce:	f891 c000 	ldrb.w	ip, [r1]
    *p_pin = pin_number & 0x1F;
   159d2:	f00c 041f 	and.w	r4, ip, #31
    return pin_number >> 5;
   159d6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   159da:	f1bc 0f01 	cmp.w	ip, #1
   159de:	f000 808e 	beq.w	15afe <configure_pins+0x16e>
        case 0: return NRF_P0;
   159e2:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   159e6:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   159e8:	f043 0601 	orr.w	r6, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   159ec:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   159f0:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   159f4:	784c      	ldrb	r4, [r1, #1]
   159f6:	2cff      	cmp	r4, #255	; 0xff
   159f8:	d018      	beq.n	15a2c <configure_pins+0x9c>
    *p_pin = pin_number & 0x1F;
   159fa:	f004 051f 	and.w	r5, r4, #31
    return pin_number >> 5;
   159fe:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15a00:	2c01      	cmp	r4, #1
   15a02:	d07e      	beq.n	15b02 <configure_pins+0x172>
        case 0: return NRF_P0;
   15a04:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   15a08:	2401      	movs	r4, #1
   15a0a:	40ac      	lsls	r4, r5
    p_reg->OUTCLR = clr_mask;
   15a0c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
            nrf_gpio_cfg(p_config->mosi_pin,
   15a10:	784c      	ldrb	r4, [r1, #1]
    *p_pin = pin_number & 0x1F;
   15a12:	f004 051f 	and.w	r5, r4, #31
    return pin_number >> 5;
   15a16:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15a18:	2c01      	cmp	r4, #1
   15a1a:	d074      	beq.n	15b06 <configure_pins+0x176>
        case 0: return NRF_P0;
   15a1c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15a20:	f043 0c03 	orr.w	ip, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   15a24:	f505 74e0 	add.w	r4, r5, #448	; 0x1c0
   15a28:	f846 c024 	str.w	ip, [r6, r4, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   15a2c:	788c      	ldrb	r4, [r1, #2]
   15a2e:	2cff      	cmp	r4, #255	; 0xff
   15a30:	d00d      	beq.n	15a4e <configure_pins+0xbe>
            nrf_gpio_cfg(p_config->miso_pin,
   15a32:	7b8d      	ldrb	r5, [r1, #14]
    *p_pin = pin_number & 0x1F;
   15a34:	f004 0c1f 	and.w	ip, r4, #31
    return pin_number >> 5;
   15a38:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15a3a:	2c01      	cmp	r4, #1
   15a3c:	d065      	beq.n	15b0a <configure_pins+0x17a>
        case 0: return NRF_P0;
   15a3e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15a42:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   15a46:	f50c 74e0 	add.w	r4, ip, #448	; 0x1c0
   15a4a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   15a4e:	78cc      	ldrb	r4, [r1, #3]
   15a50:	2cff      	cmp	r4, #255	; 0xff
   15a52:	d15c      	bne.n	15b0e <configure_pins+0x17e>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   15a54:	7bcc      	ldrb	r4, [r1, #15]
   15a56:	2cff      	cmp	r4, #255	; 0xff
   15a58:	d019      	beq.n	15a8e <configure_pins+0xfe>
    *p_pin = pin_number & 0x1F;
   15a5a:	f004 051f 	and.w	r5, r4, #31
    return pin_number >> 5;
   15a5e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15a60:	2c01      	cmp	r4, #1
   15a62:	f000 8083 	beq.w	15b6c <configure_pins+0x1dc>
        case 0: return NRF_P0;
   15a66:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15a6a:	2401      	movs	r4, #1
   15a6c:	40ac      	lsls	r4, r5
    p_reg->OUTSET = set_mask;
   15a6e:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
            nrf_gpio_cfg(p_config->dcx_pin,
   15a72:	7bcc      	ldrb	r4, [r1, #15]
    *p_pin = pin_number & 0x1F;
   15a74:	f004 0c1f 	and.w	ip, r4, #31
    return pin_number >> 5;
   15a78:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15a7a:	2c01      	cmp	r4, #1
   15a7c:	d078      	beq.n	15b70 <configure_pins+0x1e0>
        case 0: return NRF_P0;
   15a7e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15a82:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   15a86:	f50c 74e0 	add.w	r4, ip, #448	; 0x1c0
   15a8a:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   15a8e:	7d0b      	ldrb	r3, [r1, #20]
   15a90:	2b00      	cmp	r3, #0
   15a92:	f040 8085 	bne.w	15ba0 <configure_pins+0x210>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   15a96:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   15a98:	2bff      	cmp	r3, #255	; 0xff
   15a9a:	d06b      	beq.n	15b74 <configure_pins+0x1e4>
   15a9c:	461c      	mov	r4, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   15a9e:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   15aa0:	2bff      	cmp	r3, #255	; 0xff
   15aa2:	d06a      	beq.n	15b7a <configure_pins+0x1ea>
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   15aa4:	780d      	ldrb	r5, [r1, #0]
    p_reg->PSEL.SCK  = sck_pin;
   15aa6:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   15aaa:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   15aae:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   15ab2:	7903      	ldrb	r3, [r0, #4]
   15ab4:	2b00      	cmp	r3, #0
   15ab6:	d16c      	bne.n	15b92 <configure_pins+0x202>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   15ab8:	78cb      	ldrb	r3, [r1, #3]
   15aba:	2bff      	cmp	r3, #255	; 0xff
   15abc:	d060      	beq.n	15b80 <configure_pins+0x1f0>
                p_config->use_hw_ss)
   15abe:	7c4c      	ldrb	r4, [r1, #17]
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   15ac0:	2c00      	cmp	r4, #0
   15ac2:	d05d      	beq.n	15b80 <configure_pins+0x1f0>
                                    (p_config->ss_active_high == true
   15ac4:	790d      	ldrb	r5, [r1, #4]
                                    p_config->ss_duration);
   15ac6:	7c8c      	ldrb	r4, [r1, #18]
    p_reg->PSEL.CSN = pin;
   15ac8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   15acc:	f8c2 5568 	str.w	r5, [r2, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   15ad0:	f8c2 4564 	str.w	r4, [r2, #1380]	; 0x564
}
   15ad4:	e05d      	b.n	15b92 <configure_pins+0x202>
                    : NRF_GPIO_PIN_S0S1;
   15ad6:	2303      	movs	r3, #3
   15ad8:	e765      	b.n	159a6 <configure_pins+0x16>
        case 1: return NRF_P1;
   15ada:	4d34      	ldr	r5, [pc, #208]	; (15bac <configure_pins+0x21c>)
   15adc:	e773      	b.n	159c6 <configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
   15ade:	f00c 061f 	and.w	r6, ip, #31
    return pin_number >> 5;
   15ae2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15ae6:	f1bc 0f01 	cmp.w	ip, #1
   15aea:	d006      	beq.n	15afa <configure_pins+0x16a>
        case 0: return NRF_P0;
   15aec:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15af0:	2401      	movs	r4, #1
   15af2:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
   15af4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
}
   15af8:	e769      	b.n	159ce <configure_pins+0x3e>
        case 1: return NRF_P1;
   15afa:	4d2c      	ldr	r5, [pc, #176]	; (15bac <configure_pins+0x21c>)
   15afc:	e7f8      	b.n	15af0 <configure_pins+0x160>
   15afe:	4d2b      	ldr	r5, [pc, #172]	; (15bac <configure_pins+0x21c>)
   15b00:	e771      	b.n	159e6 <configure_pins+0x56>
   15b02:	4e2a      	ldr	r6, [pc, #168]	; (15bac <configure_pins+0x21c>)
   15b04:	e780      	b.n	15a08 <configure_pins+0x78>
   15b06:	4e29      	ldr	r6, [pc, #164]	; (15bac <configure_pins+0x21c>)
   15b08:	e78a      	b.n	15a20 <configure_pins+0x90>
   15b0a:	4e28      	ldr	r6, [pc, #160]	; (15bac <configure_pins+0x21c>)
   15b0c:	e799      	b.n	15a42 <configure_pins+0xb2>
                               p_config->ss_active_high ? 0 : 1);
   15b0e:	790d      	ldrb	r5, [r1, #4]
    if (value == 0)
   15b10:	2d01      	cmp	r5, #1
   15b12:	d11b      	bne.n	15b4c <configure_pins+0x1bc>
    *p_pin = pin_number & 0x1F;
   15b14:	f004 051f 	and.w	r5, r4, #31
    return pin_number >> 5;
   15b18:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15b1a:	2c01      	cmp	r4, #1
   15b1c:	d014      	beq.n	15b48 <configure_pins+0x1b8>
        case 0: return NRF_P0;
   15b1e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   15b22:	2401      	movs	r4, #1
   15b24:	40ac      	lsls	r4, r5
    p_reg->OUTCLR = clr_mask;
   15b26:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
            nrf_gpio_cfg(p_config->ss_pin,
   15b2a:	78cc      	ldrb	r4, [r1, #3]
    *p_pin = pin_number & 0x1F;
   15b2c:	f004 051f 	and.w	r5, r4, #31
    return pin_number >> 5;
   15b30:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15b32:	2c01      	cmp	r4, #1
   15b34:	d018      	beq.n	15b68 <configure_pins+0x1d8>
        case 0: return NRF_P0;
   15b36:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15b3a:	f043 0603 	orr.w	r6, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   15b3e:	f505 74e0 	add.w	r4, r5, #448	; 0x1c0
   15b42:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
}
   15b46:	e785      	b.n	15a54 <configure_pins+0xc4>
        case 1: return NRF_P1;
   15b48:	4e18      	ldr	r6, [pc, #96]	; (15bac <configure_pins+0x21c>)
   15b4a:	e7ea      	b.n	15b22 <configure_pins+0x192>
    *p_pin = pin_number & 0x1F;
   15b4c:	f004 051f 	and.w	r5, r4, #31
    return pin_number >> 5;
   15b50:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15b52:	2c01      	cmp	r4, #1
   15b54:	d006      	beq.n	15b64 <configure_pins+0x1d4>
        case 0: return NRF_P0;
   15b56:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15b5a:	2401      	movs	r4, #1
   15b5c:	40ac      	lsls	r4, r5
    p_reg->OUTSET = set_mask;
   15b5e:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
}
   15b62:	e7e2      	b.n	15b2a <configure_pins+0x19a>
        case 1: return NRF_P1;
   15b64:	4e11      	ldr	r6, [pc, #68]	; (15bac <configure_pins+0x21c>)
   15b66:	e7f8      	b.n	15b5a <configure_pins+0x1ca>
   15b68:	4f10      	ldr	r7, [pc, #64]	; (15bac <configure_pins+0x21c>)
   15b6a:	e7e6      	b.n	15b3a <configure_pins+0x1aa>
   15b6c:	4e0f      	ldr	r6, [pc, #60]	; (15bac <configure_pins+0x21c>)
   15b6e:	e77c      	b.n	15a6a <configure_pins+0xda>
   15b70:	4d0e      	ldr	r5, [pc, #56]	; (15bac <configure_pins+0x21c>)
   15b72:	e786      	b.n	15a82 <configure_pins+0xf2>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   15b74:	f04f 34ff 	mov.w	r4, #4294967295
   15b78:	e791      	b.n	15a9e <configure_pins+0x10e>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   15b7a:	f04f 33ff 	mov.w	r3, #4294967295
   15b7e:	e791      	b.n	15aa4 <configure_pins+0x114>
    p_reg->PSEL.CSN = pin;
   15b80:	f04f 33ff 	mov.w	r3, #4294967295
   15b84:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   15b88:	2300      	movs	r3, #0
   15b8a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   15b8e:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   15b92:	7903      	ldrb	r3, [r0, #4]
   15b94:	b923      	cbnz	r3, 15ba0 <configure_pins+0x210>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   15b96:	7bcb      	ldrb	r3, [r1, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   15b98:	2bff      	cmp	r3, #255	; 0xff
   15b9a:	d003      	beq.n	15ba4 <configure_pins+0x214>
    p_reg->PSELDCX = dcx_pin;
   15b9c:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
}
   15ba0:	bcf0      	pop	{r4, r5, r6, r7}
   15ba2:	4770      	bx	lr
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   15ba4:	f04f 33ff 	mov.w	r3, #4294967295
   15ba8:	e7f8      	b.n	15b9c <configure_pins+0x20c>
   15baa:	bf00      	nop
   15bac:	50000300 	.word	0x50000300

00015bb0 <nrfx_spim_init>:
{
   15bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15bb2:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   15bb4:	7906      	ldrb	r6, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   15bb6:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   15bb8:	4936      	ldr	r1, [pc, #216]	; (15c94 <nrfx_spim_init+0xe4>)
   15bba:	eb01 1146 	add.w	r1, r1, r6, lsl #5
   15bbe:	7f09      	ldrb	r1, [r1, #28]
   15bc0:	2900      	cmp	r1, #0
   15bc2:	d162      	bne.n	15c8a <nrfx_spim_init+0xda>
   15bc4:	4605      	mov	r5, r0
    if (
   15bc6:	2e00      	cmp	r6, #0
   15bc8:	d161      	bne.n	15c8e <nrfx_spim_init+0xde>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   15bca:	68a1      	ldr	r1, [r4, #8]
   15bcc:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
   15bd0:	d04a      	beq.n	15c68 <nrfx_spim_init+0xb8>
   15bd2:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   15bd6:	d047      	beq.n	15c68 <nrfx_spim_init+0xb8>
    p_cb->handler = handler;
   15bd8:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 15c94 <nrfx_spim_init+0xe4>
   15bdc:	0170      	lsls	r0, r6, #5
   15bde:	eb0c 1146 	add.w	r1, ip, r6, lsl #5
   15be2:	f84c 2000 	str.w	r2, [ip, r0]
    p_cb->p_context = p_context;
   15be6:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   15be8:	7ce0      	ldrb	r0, [r4, #19]
   15bea:	7f8a      	ldrb	r2, [r1, #30]
   15bec:	f360 0200 	bfi	r2, r0, #0, #1
   15bf0:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   15bf2:	7920      	ldrb	r0, [r4, #4]
   15bf4:	b2d2      	uxtb	r2, r2
   15bf6:	f360 0241 	bfi	r2, r0, #1, #1
   15bfa:	778a      	strb	r2, [r1, #30]
    p_cb->use_hw_ss = p_config->use_hw_ss;
   15bfc:	7c60      	ldrb	r0, [r4, #17]
   15bfe:	b2d2      	uxtb	r2, r2
   15c00:	f360 0282 	bfi	r2, r0, #2, #1
   15c04:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   15c06:	78e3      	ldrb	r3, [r4, #3]
   15c08:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_instance, p_config);
   15c0a:	4621      	mov	r1, r4
   15c0c:	4628      	mov	r0, r5
   15c0e:	f7ff febf 	bl	15990 <configure_pins>
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   15c12:	7c23      	ldrb	r3, [r4, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
   15c14:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    nrf_spim_frequency_set(p_spim, p_config->frequency);
   15c18:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = (uint32_t)frequency;
   15c1a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   15c1e:	7b22      	ldrb	r2, [r4, #12]
   15c20:	7b63      	ldrb	r3, [r4, #13]
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   15c22:	3b00      	subs	r3, #0
   15c24:	bf18      	it	ne
   15c26:	2301      	movne	r3, #1
    switch (spi_mode)
   15c28:	2a02      	cmp	r2, #2
   15c2a:	d028      	beq.n	15c7e <nrfx_spim_init+0xce>
   15c2c:	2a03      	cmp	r2, #3
   15c2e:	d029      	beq.n	15c84 <nrfx_spim_init+0xd4>
   15c30:	2a01      	cmp	r2, #1
   15c32:	d021      	beq.n	15c78 <nrfx_spim_init+0xc8>
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   15c34:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    nrf_spim_orc_set(p_spim, p_config->orc);
   15c38:	79a3      	ldrb	r3, [r4, #6]
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   15c3a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   15c3e:	2307      	movs	r3, #7
   15c40:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   15c44:	0173      	lsls	r3, r6, #5
   15c46:	4a13      	ldr	r2, [pc, #76]	; (15c94 <nrfx_spim_init+0xe4>)
   15c48:	58d3      	ldr	r3, [r2, r3]
   15c4a:	b123      	cbz	r3, 15c56 <nrfx_spim_init+0xa6>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   15c4c:	6828      	ldr	r0, [r5, #0]
   15c4e:	f340 3007 	sbfx	r0, r0, #12, #8
   15c52:	f7fb f847 	bl	10ce4 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   15c56:	4b0f      	ldr	r3, [pc, #60]	; (15c94 <nrfx_spim_init+0xe4>)
   15c58:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   15c5c:	2300      	movs	r3, #0
   15c5e:	7773      	strb	r3, [r6, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   15c60:	2301      	movs	r3, #1
   15c62:	7733      	strb	r3, [r6, #28]
    return err_code;
   15c64:	480c      	ldr	r0, [pc, #48]	; (15c98 <nrfx_spim_init+0xe8>)
}
   15c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   15c68:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
   15c6c:	d0b4      	beq.n	15bd8 <nrfx_spim_init+0x28>
   15c6e:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   15c72:	d0b1      	beq.n	15bd8 <nrfx_spim_init+0x28>
        return err_code;
   15c74:	4809      	ldr	r0, [pc, #36]	; (15c9c <nrfx_spim_init+0xec>)
   15c76:	e7f6      	b.n	15c66 <nrfx_spim_init+0xb6>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   15c78:	f043 0302 	orr.w	r3, r3, #2
        break;
   15c7c:	e7da      	b.n	15c34 <nrfx_spim_init+0x84>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   15c7e:	f043 0304 	orr.w	r3, r3, #4
        break;
   15c82:	e7d7      	b.n	15c34 <nrfx_spim_init+0x84>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   15c84:	f043 0306 	orr.w	r3, r3, #6
        break;
   15c88:	e7d4      	b.n	15c34 <nrfx_spim_init+0x84>
        return err_code;
   15c8a:	4805      	ldr	r0, [pc, #20]	; (15ca0 <nrfx_spim_init+0xf0>)
   15c8c:	e7eb      	b.n	15c66 <nrfx_spim_init+0xb6>
        return err_code;
   15c8e:	4803      	ldr	r0, [pc, #12]	; (15c9c <nrfx_spim_init+0xec>)
   15c90:	e7e9      	b.n	15c66 <nrfx_spim_init+0xb6>
   15c92:	bf00      	nop
   15c94:	20002bbc 	.word	0x20002bbc
   15c98:	0bad0000 	.word	0x0bad0000
   15c9c:	0bad0003 	.word	0x0bad0003
   15ca0:	0bad0005 	.word	0x0bad0005

00015ca4 <nrfx_spim_uninit>:
{
   15ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ca6:	4606      	mov	r6, r0
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   15ca8:	7904      	ldrb	r4, [r0, #4]
   15caa:	4b29      	ldr	r3, [pc, #164]	; (15d50 <nrfx_spim_uninit+0xac>)
   15cac:	0162      	lsls	r2, r4, #5
   15cae:	eb03 1744 	add.w	r7, r3, r4, lsl #5
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   15cb2:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   15cb4:	589b      	ldr	r3, [r3, r2]
   15cb6:	b143      	cbz	r3, 15cca <nrfx_spim_uninit+0x26>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   15cb8:	f345 3007 	sbfx	r0, r5, #12, #8
   15cbc:	f7fb f820 	bl	10d00 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   15cc0:	4b24      	ldr	r3, [pc, #144]	; (15d54 <nrfx_spim_uninit+0xb0>)
   15cc2:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        if (p_cb->transfer_in_progress)
   15cc6:	7f7b      	ldrb	r3, [r7, #29]
   15cc8:	b993      	cbnz	r3, 15cf0 <nrfx_spim_uninit+0x4c>
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   15cca:	2300      	movs	r3, #0
   15ccc:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   15cd0:	4b1f      	ldr	r3, [pc, #124]	; (15d50 <nrfx_spim_uninit+0xac>)
   15cd2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   15cd6:	7f9b      	ldrb	r3, [r3, #30]
   15cd8:	f013 0f01 	tst.w	r3, #1
   15cdc:	d00d      	beq.n	15cfa <nrfx_spim_uninit+0x56>
    if (p_spim == NRF_SPIM3)
   15cde:	4b1e      	ldr	r3, [pc, #120]	; (15d58 <nrfx_spim_uninit+0xb4>)
   15ce0:	429d      	cmp	r5, r3
   15ce2:	d032      	beq.n	15d4a <nrfx_spim_uninit+0xa6>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   15ce4:	4b1a      	ldr	r3, [pc, #104]	; (15d50 <nrfx_spim_uninit+0xac>)
   15ce6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   15cea:	2300      	movs	r3, #0
   15cec:	7723      	strb	r3, [r4, #28]
}
   15cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            spim_abort(p_spim, p_cb);
   15cf0:	4639      	mov	r1, r7
   15cf2:	4628      	mov	r0, r5
   15cf4:	f007 fdef 	bl	1d8d6 <spim_abort>
   15cf8:	e7e7      	b.n	15cca <nrfx_spim_uninit+0x26>
    return p_reg->PSEL.SCK;
   15cfa:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   15cfe:	f7ff fdbd 	bl	1587c <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   15d02:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   15d06:	f7ff fdb9 	bl	1587c <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   15d0a:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   15d0e:	f7ff fdb5 	bl	1587c <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   15d12:	7933      	ldrb	r3, [r6, #4]
   15d14:	b193      	cbz	r3, 15d3c <nrfx_spim_uninit+0x98>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   15d16:	4b0e      	ldr	r3, [pc, #56]	; (15d50 <nrfx_spim_uninit+0xac>)
   15d18:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   15d1c:	7fdb      	ldrb	r3, [r3, #31]
   15d1e:	2bff      	cmp	r3, #255	; 0xff
   15d20:	d0dd      	beq.n	15cde <nrfx_spim_uninit+0x3a>
    *p_pin = pin_number & 0x1F;
   15d22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15d26:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15d28:	2b01      	cmp	r3, #1
   15d2a:	d00c      	beq.n	15d46 <nrfx_spim_uninit+0xa2>
        case 0: return NRF_P0;
   15d2c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15d30:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15d34:	2202      	movs	r2, #2
   15d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d3a:	e7d0      	b.n	15cde <nrfx_spim_uninit+0x3a>
    return p_reg->PSELDCX;
   15d3c:	f8d5 056c 	ldr.w	r0, [r5, #1388]	; 0x56c
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   15d40:	f7ff fd9c 	bl	1587c <spim_pin_uninit>
   15d44:	e7e7      	b.n	15d16 <nrfx_spim_uninit+0x72>
        case 1: return NRF_P1;
   15d46:	4905      	ldr	r1, [pc, #20]	; (15d5c <nrfx_spim_uninit+0xb8>)
   15d48:	e7f2      	b.n	15d30 <nrfx_spim_uninit+0x8c>
        *(volatile uint32_t *)0x4002F004 = 1;
   15d4a:	2201      	movs	r2, #1
   15d4c:	605a      	str	r2, [r3, #4]
   15d4e:	e7c9      	b.n	15ce4 <nrfx_spim_uninit+0x40>
   15d50:	20002bbc 	.word	0x20002bbc
   15d54:	00080152 	.word	0x00080152
   15d58:	4002f000 	.word	0x4002f000
   15d5c:	50000300 	.word	0x50000300

00015d60 <nrfx_spim_xfer>:

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   15d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   15d64:	f890 c004 	ldrb.w	ip, [r0, #4]
   15d68:	4e14      	ldr	r6, [pc, #80]	; (15dbc <nrfx_spim_xfer+0x5c>)
   15d6a:	eb06 164c 	add.w	r6, r6, ip, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   15d6e:	7f73      	ldrb	r3, [r6, #29]
   15d70:	bb0b      	cbnz	r3, 15db6 <nrfx_spim_xfer+0x56>
   15d72:	4607      	mov	r7, r0
   15d74:	460d      	mov	r5, r1
   15d76:	4690      	mov	r8, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   15d78:	ea4f 134c 	mov.w	r3, ip, lsl #5
   15d7c:	4a0f      	ldr	r2, [pc, #60]	; (15dbc <nrfx_spim_xfer+0x5c>)
   15d7e:	58d3      	ldr	r3, [r2, r3]
   15d80:	b123      	cbz	r3, 15d8c <nrfx_spim_xfer+0x2c>
   15d82:	f018 0f14 	tst.w	r8, #20
   15d86:	d101      	bne.n	15d8c <nrfx_spim_xfer+0x2c>
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   15d88:	2201      	movs	r2, #1
   15d8a:	7772      	strb	r2, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   15d8c:	4c0b      	ldr	r4, [pc, #44]	; (15dbc <nrfx_spim_xfer+0x5c>)
   15d8e:	eb04 1c4c 	add.w	ip, r4, ip, lsl #5
   15d92:	f10c 0c0c 	add.w	ip, ip, #12
   15d96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   15d9a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   15d9e:	2101      	movs	r1, #1
   15da0:	4630      	mov	r0, r6
   15da2:	f7ff fd7f 	bl	158a4 <set_ss_pin_state>

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   15da6:	4643      	mov	r3, r8
   15da8:	462a      	mov	r2, r5
   15daa:	4631      	mov	r1, r6
   15dac:	6838      	ldr	r0, [r7, #0]
   15dae:	f7ff fda5 	bl	158fc <spim_xfer>
}
   15db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   15db6:	4802      	ldr	r0, [pc, #8]	; (15dc0 <nrfx_spim_xfer+0x60>)
   15db8:	e7fb      	b.n	15db2 <nrfx_spim_xfer+0x52>
   15dba:	bf00      	nop
   15dbc:	20002bbc 	.word	0x20002bbc
   15dc0:	0bad000b 	.word	0x0bad000b

00015dc4 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   15dc4:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
   15dc6:	4902      	ldr	r1, [pc, #8]	; (15dd0 <nrfx_spim_3_irq_handler+0xc>)
   15dc8:	4802      	ldr	r0, [pc, #8]	; (15dd4 <nrfx_spim_3_irq_handler+0x10>)
   15dca:	f007 fda3 	bl	1d914 <irq_handler>
}
   15dce:	bd08      	pop	{r3, pc}
   15dd0:	20002bbc 	.word	0x20002bbc
   15dd4:	4002f000 	.word	0x4002f000

00015dd8 <configure_pins>:

static spis_cb_t m_cb[NRFX_SPIS_ENABLED_COUNT];

static void configure_pins(NRF_SPIS_Type *            p_spis,
                           nrfx_spis_config_t const * p_config)
{
   15dd8:	b430      	push	{r4, r5}
    if (!p_config->skip_gpio_cfg)
   15dda:	7dcb      	ldrb	r3, [r1, #23]
   15ddc:	bbcb      	cbnz	r3, 15e52 <configure_pins+0x7a>
    {
        nrf_gpio_cfg(p_config->sck_pin,
   15dde:	688b      	ldr	r3, [r1, #8]
    *p_pin = pin_number & 0x1F;
   15de0:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15de4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15de6:	2b01      	cmp	r3, #1
   15de8:	d047      	beq.n	15e7a <configure_pins+0xa2>
        case 0: return NRF_P0;
   15dea:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15dee:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15df2:	2200      	movs	r2, #0
   15df4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                     NRF_GPIO_PIN_INPUT_CONNECT,
                     NRF_GPIO_PIN_NOPULL,
                     NRF_GPIO_PIN_S0S1,
                     NRF_GPIO_PIN_NOSENSE);

        if (p_config->mosi_pin != NRFX_SPIS_PIN_NOT_USED)
   15df8:	684b      	ldr	r3, [r1, #4]
   15dfa:	2bff      	cmp	r3, #255	; 0xff
   15dfc:	d00b      	beq.n	15e16 <configure_pins+0x3e>
    *p_pin = pin_number & 0x1F;
   15dfe:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15e02:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15e04:	2b01      	cmp	r3, #1
   15e06:	d03a      	beq.n	15e7e <configure_pins+0xa6>
        case 0: return NRF_P0;
   15e08:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15e0c:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15e10:	2200      	movs	r2, #0
   15e12:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                         NRF_GPIO_PIN_NOPULL,
                         NRF_GPIO_PIN_S0S1,
                         NRF_GPIO_PIN_NOSENSE);
        }

        if (p_config->miso_pin != NRFX_SPIS_PIN_NOT_USED)
   15e16:	680b      	ldr	r3, [r1, #0]
   15e18:	2bff      	cmp	r3, #255	; 0xff
   15e1a:	d00c      	beq.n	15e36 <configure_pins+0x5e>
        {
            nrf_gpio_cfg(p_config->miso_pin,
   15e1c:	7ccc      	ldrb	r4, [r1, #19]
    *p_pin = pin_number & 0x1F;
   15e1e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15e22:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15e24:	2b01      	cmp	r3, #1
   15e26:	d02c      	beq.n	15e82 <configure_pins+0xaa>
        case 0: return NRF_P0;
   15e28:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   15e2c:	0224      	lsls	r4, r4, #8
    reg->PIN_CNF[pin_number] = cnf;
   15e2e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15e32:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
                         NRF_GPIO_PIN_NOPULL,
                         p_config->miso_drive,
                         NRF_GPIO_PIN_NOSENSE);
        }

        nrf_gpio_cfg(p_config->csn_pin,
   15e36:	68cb      	ldr	r3, [r1, #12]
   15e38:	7c8c      	ldrb	r4, [r1, #18]
    *p_pin = pin_number & 0x1F;
   15e3a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15e3e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15e40:	2b01      	cmp	r3, #1
   15e42:	d020      	beq.n	15e86 <configure_pins+0xae>
        case 0: return NRF_P0;
   15e44:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15e48:	00a4      	lsls	r4, r4, #2
    reg->PIN_CNF[pin_number] = cnf;
   15e4a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   15e4e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
                     p_config->csn_pullup,
                     NRF_GPIO_PIN_S0S1,
                     NRF_GPIO_PIN_NOSENSE);
    }

    if (!p_config->skip_psel_cfg)
   15e52:	7e0b      	ldrb	r3, [r1, #24]
   15e54:	b97b      	cbnz	r3, 15e76 <configure_pins+0x9e>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIS_PIN_NOT_USED)
   15e56:	684a      	ldr	r2, [r1, #4]
                            ? p_config->mosi_pin
                            : NRF_SPIS_PIN_NOT_CONNECTED;
   15e58:	2aff      	cmp	r2, #255	; 0xff
   15e5a:	d016      	beq.n	15e8a <configure_pins+0xb2>
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIS_PIN_NOT_USED)
   15e5c:	680b      	ldr	r3, [r1, #0]
                            ? p_config->miso_pin
                            : NRF_SPIS_PIN_NOT_CONNECTED;
   15e5e:	2bff      	cmp	r3, #255	; 0xff
   15e60:	d016      	beq.n	15e90 <configure_pins+0xb8>

        nrf_spis_pins_set(p_spis,
   15e62:	688c      	ldr	r4, [r1, #8]
   15e64:	68c9      	ldr	r1, [r1, #12]
    p_reg->PSELSCK  = sck_pin;
    p_reg->PSELMOSI = mosi_pin;
    p_reg->PSELMISO = miso_pin;
    p_reg->PSELCSN  = csn_pin;
#else
    p_reg->PSEL.SCK  = sck_pin;
   15e66:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   15e6a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    p_reg->PSEL.MISO = miso_pin;
   15e6e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    p_reg->PSEL.CSN  = csn_pin;
   15e72:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
                          p_config->sck_pin,
                          mosi_pin,
                          miso_pin,
                          p_config->csn_pin);
    }
}
   15e76:	bc30      	pop	{r4, r5}
   15e78:	4770      	bx	lr
        case 1: return NRF_P1;
   15e7a:	4c07      	ldr	r4, [pc, #28]	; (15e98 <configure_pins+0xc0>)
   15e7c:	e7b7      	b.n	15dee <configure_pins+0x16>
   15e7e:	4c06      	ldr	r4, [pc, #24]	; (15e98 <configure_pins+0xc0>)
   15e80:	e7c4      	b.n	15e0c <configure_pins+0x34>
   15e82:	4d05      	ldr	r5, [pc, #20]	; (15e98 <configure_pins+0xc0>)
   15e84:	e7d2      	b.n	15e2c <configure_pins+0x54>
   15e86:	4d04      	ldr	r5, [pc, #16]	; (15e98 <configure_pins+0xc0>)
   15e88:	e7de      	b.n	15e48 <configure_pins+0x70>
                            : NRF_SPIS_PIN_NOT_CONNECTED;
   15e8a:	f04f 32ff 	mov.w	r2, #4294967295
   15e8e:	e7e5      	b.n	15e5c <configure_pins+0x84>
                            : NRF_SPIS_PIN_NOT_CONNECTED;
   15e90:	f04f 33ff 	mov.w	r3, #4294967295
   15e94:	e7e5      	b.n	15e62 <configure_pins+0x8a>
   15e96:	bf00      	nop
   15e98:	50000300 	.word	0x50000300

00015e9c <nrfx_spis_init>:

nrfx_err_t nrfx_spis_init(nrfx_spis_t const *        p_instance,
                          nrfx_spis_config_t const * p_config,
                          nrfx_spis_event_handler_t  event_handler,
                          void *                     p_context)
{
   15e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15ea0:	460d      	mov	r5, r1
   15ea2:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    spis_cb_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   15ea4:	f890 9004 	ldrb.w	r9, [r0, #4]
    nrfx_err_t err_code;

    NRF_SPIS_Type * p_spis = p_instance->p_reg;
   15ea8:	6804      	ldr	r4, [r0, #0]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   15eaa:	4932      	ldr	r1, [pc, #200]	; (15f74 <nrfx_spis_init+0xd8>)
   15eac:	eb01 1149 	add.w	r1, r1, r9, lsl #5
   15eb0:	7d0b      	ldrb	r3, [r1, #20]
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d15a      	bne.n	15f6c <nrfx_spis_init+0xd0>
   15eb6:	4606      	mov	r6, r0
   15eb8:	4690      	mov	r8, r2
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if ((uint32_t)p_config->mode > (uint32_t)NRF_SPIS_MODE_3)
   15eba:	7c2b      	ldrb	r3, [r5, #16]
   15ebc:	2b03      	cmp	r3, #3
   15ebe:	d901      	bls.n	15ec4 <nrfx_spis_init+0x28>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   15ec0:	482d      	ldr	r0, [pc, #180]	; (15f78 <nrfx_spis_init+0xdc>)
   15ec2:	e054      	b.n	15f6e <nrfx_spis_init+0xd2>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   15ec4:	7dea      	ldrb	r2, [r5, #23]
   15ec6:	770a      	strb	r2, [r1, #28]

    configure_pins(p_spis, p_config);
   15ec8:	4629      	mov	r1, r5
   15eca:	4620      	mov	r0, r4
   15ecc:	f7ff ff84 	bl	15dd8 <configure_pins>
{
#if defined (NRF51)
    p_reg->RXDPTR = (uint32_t)p_buffer;
    p_reg->MAXRX  = length;
#else
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15ed0:	2300      	movs	r3, #0
   15ed2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15ed6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15eda:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15ede:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

    nrf_spis_rx_buffer_set(p_spis, NULL, 0);
    nrf_spis_tx_buffer_set(p_spis, NULL, 0);

    // Configure SPI mode.
    nrf_spis_configure(p_spis, p_config->mode, p_config->bit_order);
   15ee2:	7c2a      	ldrb	r2, [r5, #16]
   15ee4:	7c6b      	ldrb	r3, [r5, #17]
NRF_STATIC_INLINE void nrf_spis_configure(NRF_SPIS_Type *      p_reg,
                                          nrf_spis_mode_t      spi_mode,
                                          nrf_spis_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIS_BIT_ORDER_MSB_FIRST ?
        SPIS_CONFIG_ORDER_MsbFirst : SPIS_CONFIG_ORDER_LsbFirst);
   15ee6:	3b00      	subs	r3, #0
   15ee8:	bf18      	it	ne
   15eea:	2301      	movne	r3, #1

    switch (spi_mode)
   15eec:	2a02      	cmp	r2, #2
   15eee:	d037      	beq.n	15f60 <nrfx_spis_init+0xc4>
   15ef0:	2a03      	cmp	r2, #3
   15ef2:	d038      	beq.n	15f66 <nrfx_spis_init+0xca>
   15ef4:	2a01      	cmp	r2, #1
   15ef6:	d030      	beq.n	15f5a <nrfx_spis_init+0xbe>
    case NRF_SPIS_MODE_3:
        config |= (SPIS_CONFIG_CPOL_ActiveLow  << SPIS_CONFIG_CPOL_Pos) |
                  (SPIS_CONFIG_CPHA_Trailing   << SPIS_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   15ef8:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554

    // Configure DEF and ORC characters.
    nrf_spis_def_set(p_spis, p_config->def);
   15efc:	7d2b      	ldrb	r3, [r5, #20]
}

NRF_STATIC_INLINE void nrf_spis_def_set(NRF_SPIS_Type * p_reg,
                                        uint8_t         def)
{
    p_reg->DEF = def;
   15efe:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
    nrf_spis_orc_set(p_spis, p_config->orc);
   15f02:	7d6b      	ldrb	r3, [r5, #21]
    p_reg->ORC = orc;
   15f04:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f08:	2300      	movs	r3, #0
   15f0a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   15f0e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   15f12:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   15f16:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    p_reg->SHORTS |= mask;
   15f1a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
   15f1e:	f042 0204 	orr.w	r2, r2, #4
   15f22:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    nrf_spis_event_clear(p_spis, NRF_SPIS_EVENT_ACQUIRED);

    // Enable END_ACQUIRE shortcut.
    nrf_spis_shorts_enable(p_spis, NRF_SPIS_SHORT_END_ACQUIRE);

    p_cb->spi_state = SPIS_STATE_INIT;
   15f26:	4a13      	ldr	r2, [pc, #76]	; (15f74 <nrfx_spis_init+0xd8>)
   15f28:	eb02 1949 	add.w	r9, r2, r9, lsl #5
   15f2c:	f889 3015 	strb.w	r3, [r9, #21]
    p_cb->handler   = event_handler;
   15f30:	f8c9 8008 	str.w	r8, [r9, #8]
    p_cb->p_context = p_context;
   15f34:	f8c9 7018 	str.w	r7, [r9, #24]
    p_reg->INTENSET = mask;
   15f38:	f240 4302 	movw	r3, #1026	; 0x402
   15f3c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    // Enable IRQ.
    nrf_spis_int_enable(p_spis, NRF_SPIS_INT_ACQUIRED_MASK |
                                NRF_SPIS_INT_END_MASK);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->irq_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   15f40:	6830      	ldr	r0, [r6, #0]
   15f42:	f340 3007 	sbfx	r0, r0, #12, #8
   15f46:	f7fa fecd 	bl	10ce4 <arch_irq_enable>

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   15f4a:	2301      	movs	r3, #1
   15f4c:	f889 3014 	strb.w	r3, [r9, #20]
    p_reg->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   15f50:	2302      	movs	r3, #2
   15f52:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    // Enable SPI slave device.
    nrf_spis_enable(p_spis);

    NRFX_LOG_INFO("Initialized.");
    return NRFX_SUCCESS;
   15f56:	4809      	ldr	r0, [pc, #36]	; (15f7c <nrfx_spis_init+0xe0>)
   15f58:	e009      	b.n	15f6e <nrfx_spis_init+0xd2>
        config |= (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   15f5a:	f043 0302 	orr.w	r3, r3, #2
        break;
   15f5e:	e7cb      	b.n	15ef8 <nrfx_spis_init+0x5c>
        config |= (SPIS_CONFIG_CPOL_ActiveLow  << SPIS_CONFIG_CPOL_Pos) |
   15f60:	f043 0304 	orr.w	r3, r3, #4
        break;
   15f64:	e7c8      	b.n	15ef8 <nrfx_spis_init+0x5c>
        config |= (SPIS_CONFIG_CPOL_ActiveLow  << SPIS_CONFIG_CPOL_Pos) |
   15f66:	f043 0306 	orr.w	r3, r3, #6
        break;
   15f6a:	e7c5      	b.n	15ef8 <nrfx_spis_init+0x5c>
        return err_code;
   15f6c:	4804      	ldr	r0, [pc, #16]	; (15f80 <nrfx_spis_init+0xe4>)
}
   15f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15f72:	bf00      	nop
   15f74:	20002bdc 	.word	0x20002bdc
   15f78:	0bad0004 	.word	0x0bad0004
   15f7c:	0bad0000 	.word	0x0bad0000
   15f80:	0bad0005 	.word	0x0bad0005

00015f84 <nrfx_spis_buffers_set>:
nrfx_err_t nrfx_spis_buffers_set(nrfx_spis_t const * p_instance,
                                 uint8_t const *     p_tx_buffer,
                                 size_t              tx_buffer_length,
                                 uint8_t *           p_rx_buffer,
                                 size_t              rx_buffer_length)
{
   15f84:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_tx_buffer != NULL || tx_buffer_length == 0);
    NRFX_ASSERT(p_rx_buffer != NULL || rx_buffer_length == 0);

    spis_cb_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   15f86:	7904      	ldrb	r4, [r0, #4]
   15f88:	4d23      	ldr	r5, [pc, #140]	; (16018 <nrfx_spis_buffers_set+0x94>)
   15f8a:	eb05 1544 	add.w	r5, r5, r4, lsl #5
    nrfx_err_t err_code;

    if (!SPIS_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   15f8e:	2c00      	cmp	r4, #0
   15f90:	d134      	bne.n	15ffc <nrfx_spis_buffers_set+0x78>
   15f92:	9e04      	ldr	r6, [sp, #16]
   15f94:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   15f98:	d232      	bcs.n	16000 <nrfx_spis_buffers_set+0x7c>
   15f9a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   15f9e:	d231      	bcs.n	16004 <nrfx_spis_buffers_set+0x80>
        return NRFX_ERROR_INVALID_LENGTH;
    }

    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_tx_buffer != NULL && !nrfx_is_in_ram(p_tx_buffer)) ||
   15fa0:	b121      	cbz	r1, 15fac <nrfx_spis_buffers_set+0x28>
   15fa2:	f001 4660 	and.w	r6, r1, #3758096384	; 0xe0000000
   15fa6:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   15faa:	d12d      	bne.n	16008 <nrfx_spis_buffers_set+0x84>
   15fac:	b123      	cbz	r3, 15fb8 <nrfx_spis_buffers_set+0x34>
   15fae:	f003 4660 	and.w	r6, r3, #3758096384	; 0xe0000000
        (p_rx_buffer != NULL && !nrfx_is_in_ram(p_rx_buffer)))
   15fb2:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   15fb6:	d129      	bne.n	1600c <nrfx_spis_buffers_set+0x88>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    switch (p_cb->spi_state)
   15fb8:	4e17      	ldr	r6, [pc, #92]	; (16018 <nrfx_spis_buffers_set+0x94>)
   15fba:	eb06 1644 	add.w	r6, r6, r4, lsl #5
   15fbe:	7d76      	ldrb	r6, [r6, #21]
   15fc0:	b2f6      	uxtb	r6, r6
   15fc2:	2e01      	cmp	r6, #1
   15fc4:	d024      	beq.n	16010 <nrfx_spis_buffers_set+0x8c>
   15fc6:	d915      	bls.n	15ff4 <nrfx_spis_buffers_set+0x70>
   15fc8:	3e02      	subs	r6, #2
   15fca:	b2f6      	uxtb	r6, r6
   15fcc:	2e01      	cmp	r6, #1
   15fce:	d821      	bhi.n	16014 <nrfx_spis_buffers_set+0x90>
    {
        case SPIS_STATE_INIT:
        case SPIS_XFER_COMPLETED:
        case SPIS_BUFFER_RESOURCE_CONFIGURED:
            p_cb->tx_buffer      = p_tx_buffer;
   15fd0:	4e11      	ldr	r6, [pc, #68]	; (16018 <nrfx_spis_buffers_set+0x94>)
   15fd2:	ea4f 1c44 	mov.w	ip, r4, lsl #5
   15fd6:	eb06 1444 	add.w	r4, r6, r4, lsl #5
   15fda:	60e1      	str	r1, [r4, #12]
            p_cb->rx_buffer      = p_rx_buffer;
   15fdc:	6123      	str	r3, [r4, #16]
            p_cb->tx_buffer_size = tx_buffer_length;
   15fde:	f846 200c 	str.w	r2, [r6, ip]
            p_cb->rx_buffer_size = rx_buffer_length;
   15fe2:	9b04      	ldr	r3, [sp, #16]
   15fe4:	6063      	str	r3, [r4, #4]
            err_code             = NRFX_SUCCESS;

            spis_state_change(p_instance->p_reg, p_cb, SPIS_BUFFER_RESOURCE_REQUESTED);
   15fe6:	2201      	movs	r2, #1
   15fe8:	4629      	mov	r1, r5
   15fea:	6800      	ldr	r0, [r0, #0]
   15fec:	f007 fcc8 	bl	1d980 <spis_state_change>
            err_code             = NRFX_SUCCESS;
   15ff0:	480a      	ldr	r0, [pc, #40]	; (1601c <nrfx_spis_buffers_set+0x98>)
            break;
   15ff2:	e004      	b.n	15ffe <nrfx_spis_buffers_set+0x7a>
    switch (p_cb->spi_state)
   15ff4:	2e00      	cmp	r6, #0
   15ff6:	d0eb      	beq.n	15fd0 <nrfx_spis_buffers_set+0x4c>
            err_code = NRFX_ERROR_INVALID_STATE;
            break;

        default:
            // @note: execution of this code path would imply internal error in the design.
            err_code = NRFX_ERROR_INTERNAL;
   15ff8:	4809      	ldr	r0, [pc, #36]	; (16020 <nrfx_spis_buffers_set+0x9c>)
   15ffa:	e000      	b.n	15ffe <nrfx_spis_buffers_set+0x7a>
        return NRFX_ERROR_INVALID_LENGTH;
   15ffc:	4809      	ldr	r0, [pc, #36]	; (16024 <nrfx_spis_buffers_set+0xa0>)
            break;
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15ffe:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_LENGTH;
   16000:	4808      	ldr	r0, [pc, #32]	; (16024 <nrfx_spis_buffers_set+0xa0>)
   16002:	e7fc      	b.n	15ffe <nrfx_spis_buffers_set+0x7a>
   16004:	4807      	ldr	r0, [pc, #28]	; (16024 <nrfx_spis_buffers_set+0xa0>)
   16006:	e7fa      	b.n	15ffe <nrfx_spis_buffers_set+0x7a>
        return err_code;
   16008:	4807      	ldr	r0, [pc, #28]	; (16028 <nrfx_spis_buffers_set+0xa4>)
   1600a:	e7f8      	b.n	15ffe <nrfx_spis_buffers_set+0x7a>
   1600c:	4806      	ldr	r0, [pc, #24]	; (16028 <nrfx_spis_buffers_set+0xa4>)
   1600e:	e7f6      	b.n	15ffe <nrfx_spis_buffers_set+0x7a>
    switch (p_cb->spi_state)
   16010:	4806      	ldr	r0, [pc, #24]	; (1602c <nrfx_spis_buffers_set+0xa8>)
   16012:	e7f4      	b.n	15ffe <nrfx_spis_buffers_set+0x7a>
            err_code = NRFX_ERROR_INTERNAL;
   16014:	4802      	ldr	r0, [pc, #8]	; (16020 <nrfx_spis_buffers_set+0x9c>)
   16016:	e7f2      	b.n	15ffe <nrfx_spis_buffers_set+0x7a>
   16018:	20002bdc 	.word	0x20002bdc
   1601c:	0bad0000 	.word	0x0bad0000
   16020:	0bad0001 	.word	0x0bad0001
   16024:	0bad0006 	.word	0x0bad0006
   16028:	0bad000a 	.word	0x0bad000a
   1602c:	0bad0005 	.word	0x0bad0005

00016030 <nrfx_spis_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIS2_ENABLED)
void nrfx_spis_2_irq_handler(void)
{
   16030:	b508      	push	{r3, lr}
    spis_irq_handler(NRF_SPIS2, &m_cb[NRFX_SPIS2_INST_IDX]);
   16032:	4902      	ldr	r1, [pc, #8]	; (1603c <nrfx_spis_2_irq_handler+0xc>)
   16034:	4802      	ldr	r0, [pc, #8]	; (16040 <nrfx_spis_2_irq_handler+0x10>)
   16036:	f007 fca8 	bl	1d98a <spis_irq_handler>
}
   1603a:	bd08      	pop	{r3, pc}
   1603c:	20002bdc 	.word	0x20002bdc
   16040:	40023000 	.word	0x40023000

00016044 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   16044:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16046:	4c14      	ldr	r4, [pc, #80]	; (16098 <_DoInit+0x54>)
   16048:	2303      	movs	r3, #3
   1604a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1604c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1604e:	4a13      	ldr	r2, [pc, #76]	; (1609c <_DoInit+0x58>)
   16050:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   16052:	4b13      	ldr	r3, [pc, #76]	; (160a0 <_DoInit+0x5c>)
   16054:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   16056:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1605a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1605c:	2300      	movs	r3, #0
   1605e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   16060:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   16062:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   16064:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   16066:	4a0f      	ldr	r2, [pc, #60]	; (160a4 <_DoInit+0x60>)
   16068:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1606a:	2210      	movs	r2, #16
   1606c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1606e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   16070:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   16072:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   16074:	490c      	ldr	r1, [pc, #48]	; (160a8 <_DoInit+0x64>)
   16076:	1de0      	adds	r0, r4, #7
   16078:	f005 f884 	bl	1b184 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1607c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   16080:	490a      	ldr	r1, [pc, #40]	; (160ac <_DoInit+0x68>)
   16082:	4620      	mov	r0, r4
   16084:	f005 f87e 	bl	1b184 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   16088:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1608c:	2320      	movs	r3, #32
   1608e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   16090:	f3bf 8f5f 	dmb	sy
}
   16094:	bd10      	pop	{r4, pc}
   16096:	bf00      	nop
   16098:	20002bfc 	.word	0x20002bfc
   1609c:	0001ee94 	.word	0x0001ee94
   160a0:	20002cb4 	.word	0x20002cb4
   160a4:	20002ca4 	.word	0x20002ca4
   160a8:	0001eea0 	.word	0x0001eea0
   160ac:	0001eea4 	.word	0x0001eea4

000160b0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   160b0:	4b03      	ldr	r3, [pc, #12]	; (160c0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   160b2:	e000      	b.n	160b6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   160b4:	3318      	adds	r3, #24
	while (dev < __device_end) {
   160b6:	4a03      	ldr	r2, [pc, #12]	; (160c4 <z_device_state_init+0x14>)
   160b8:	4293      	cmp	r3, r2
   160ba:	d3fb      	bcc.n	160b4 <z_device_state_init+0x4>
	}
}
   160bc:	4770      	bx	lr
   160be:	bf00      	nop
   160c0:	0001e540 	.word	0x0001e540
   160c4:	0001e648 	.word	0x0001e648

000160c8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   160c8:	b570      	push	{r4, r5, r6, lr}
   160ca:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   160cc:	4b11      	ldr	r3, [pc, #68]	; (16114 <z_sys_init_run_level+0x4c>)
   160ce:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   160d2:	e009      	b.n	160e8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   160d4:	4240      	negs	r0, r0
   160d6:	e017      	b.n	16108 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   160d8:	68eb      	ldr	r3, [r5, #12]
   160da:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   160dc:	68ea      	ldr	r2, [r5, #12]
   160de:	7853      	ldrb	r3, [r2, #1]
   160e0:	f043 0301 	orr.w	r3, r3, #1
   160e4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   160e6:	3408      	adds	r4, #8
   160e8:	1c73      	adds	r3, r6, #1
   160ea:	4a0a      	ldr	r2, [pc, #40]	; (16114 <z_sys_init_run_level+0x4c>)
   160ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160f0:	42a3      	cmp	r3, r4
   160f2:	d90d      	bls.n	16110 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   160f4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   160f6:	6823      	ldr	r3, [r4, #0]
   160f8:	4628      	mov	r0, r5
   160fa:	4798      	blx	r3
		if (dev != NULL) {
   160fc:	2d00      	cmp	r5, #0
   160fe:	d0f2      	beq.n	160e6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   16100:	2800      	cmp	r0, #0
   16102:	d0eb      	beq.n	160dc <z_sys_init_run_level+0x14>
				if (rc < 0) {
   16104:	2800      	cmp	r0, #0
   16106:	dbe5      	blt.n	160d4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   16108:	28ff      	cmp	r0, #255	; 0xff
   1610a:	dde5      	ble.n	160d8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1610c:	20ff      	movs	r0, #255	; 0xff
   1610e:	e7e3      	b.n	160d8 <z_sys_init_run_level+0x10>
		}
	}
}
   16110:	bd70      	pop	{r4, r5, r6, pc}
   16112:	bf00      	nop
   16114:	0001eeac 	.word	0x0001eeac

00016118 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   16118:	b510      	push	{r4, lr}
   1611a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   1611c:	4c10      	ldr	r4, [pc, #64]	; (16160 <init_idle_thread+0x48>)
   1611e:	23b8      	movs	r3, #184	; 0xb8
   16120:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   16124:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   16128:	4b0e      	ldr	r3, [pc, #56]	; (16164 <init_idle_thread+0x4c>)
   1612a:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
   1612e:	4b0e      	ldr	r3, [pc, #56]	; (16168 <init_idle_thread+0x50>)
   16130:	9305      	str	r3, [sp, #20]
   16132:	2301      	movs	r3, #1
   16134:	9304      	str	r3, [sp, #16]
   16136:	230f      	movs	r3, #15
   16138:	9303      	str	r3, [sp, #12]
   1613a:	2300      	movs	r3, #0
   1613c:	9302      	str	r3, [sp, #8]
   1613e:	9301      	str	r3, [sp, #4]
   16140:	9000      	str	r0, [sp, #0]
   16142:	4b0a      	ldr	r3, [pc, #40]	; (1616c <init_idle_thread+0x54>)
   16144:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16148:	4909      	ldr	r1, [pc, #36]	; (16170 <init_idle_thread+0x58>)
   1614a:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   1614e:	4620      	mov	r0, r4
   16150:	f000 f96e 	bl	16430 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16154:	7b63      	ldrb	r3, [r4, #13]
   16156:	f023 0304 	bic.w	r3, r3, #4
   1615a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1615c:	b006      	add	sp, #24
   1615e:	bd10      	pop	{r4, pc}
   16160:	20001ba0 	.word	0x20001ba0
   16164:	200030b4 	.word	0x200030b4
   16168:	0001eec4 	.word	0x0001eec4
   1616c:	0001658d 	.word	0x0001658d
   16170:	20005300 	.word	0x20005300

00016174 <bg_thread_main>:
{
   16174:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16176:	4b0a      	ldr	r3, [pc, #40]	; (161a0 <bg_thread_main+0x2c>)
   16178:	2201      	movs	r2, #1
   1617a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1617c:	2002      	movs	r0, #2
   1617e:	f7ff ffa3 	bl	160c8 <z_sys_init_run_level>
	boot_banner();
   16182:	f001 fd5b 	bl	17c3c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16186:	2003      	movs	r0, #3
   16188:	f7ff ff9e 	bl	160c8 <z_sys_init_run_level>
	z_init_static_threads();
   1618c:	f000 f9b4 	bl	164f8 <z_init_static_threads>
	main();
   16190:	f7f9 fcbc 	bl	fb0c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16194:	4a03      	ldr	r2, [pc, #12]	; (161a4 <bg_thread_main+0x30>)
   16196:	7b13      	ldrb	r3, [r2, #12]
   16198:	f023 0301 	bic.w	r3, r3, #1
   1619c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1619e:	bd08      	pop	{r3, pc}
   161a0:	20003bc6 	.word	0x20003bc6
   161a4:	20001c58 	.word	0x20001c58

000161a8 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   161a8:	b508      	push	{r3, lr}
   161aa:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   161ac:	4a01      	ldr	r2, [pc, #4]	; (161b4 <switch_to_main_thread+0xc>)
   161ae:	4802      	ldr	r0, [pc, #8]	; (161b8 <switch_to_main_thread+0x10>)
   161b0:	f7fa feb6 	bl	10f20 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   161b4:	00016175 	.word	0x00016175
   161b8:	20001c58 	.word	0x20001c58

000161bc <z_bss_zero>:
{
   161bc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   161be:	4803      	ldr	r0, [pc, #12]	; (161cc <z_bss_zero+0x10>)
   161c0:	4a03      	ldr	r2, [pc, #12]	; (161d0 <z_bss_zero+0x14>)
   161c2:	1a12      	subs	r2, r2, r0
   161c4:	2100      	movs	r1, #0
   161c6:	f007 fc44 	bl	1da52 <z_early_memset>
}
   161ca:	bd08      	pop	{r3, pc}
   161cc:	20000a80 	.word	0x20000a80
   161d0:	20003bc8 	.word	0x20003bc8

000161d4 <z_init_cpu>:
{
   161d4:	b510      	push	{r4, lr}
   161d6:	4604      	mov	r4, r0
	init_idle_thread(id);
   161d8:	f7ff ff9e 	bl	16118 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   161dc:	490b      	ldr	r1, [pc, #44]	; (1620c <z_init_cpu+0x38>)
   161de:	23b8      	movs	r3, #184	; 0xb8
   161e0:	fb03 1104 	mla	r1, r3, r4, r1
   161e4:	4a0a      	ldr	r2, [pc, #40]	; (16210 <z_init_cpu+0x3c>)
   161e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   161ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   161ee:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   161f0:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   161f2:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   161f6:	4b07      	ldr	r3, [pc, #28]	; (16214 <z_init_cpu+0x40>)
   161f8:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   161fc:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   16200:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16204:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   16208:	6063      	str	r3, [r4, #4]
}
   1620a:	bd10      	pop	{r4, pc}
   1620c:	20001ba0 	.word	0x20001ba0
   16210:	200030b4 	.word	0x200030b4
   16214:	20005480 	.word	0x20005480

00016218 <prepare_multithreading>:
{
   16218:	b570      	push	{r4, r5, r6, lr}
   1621a:	b086      	sub	sp, #24
	z_sched_init();
   1621c:	f000 ffa0 	bl	17160 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   16220:	4d10      	ldr	r5, [pc, #64]	; (16264 <prepare_multithreading+0x4c>)
   16222:	4b11      	ldr	r3, [pc, #68]	; (16268 <prepare_multithreading+0x50>)
   16224:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16226:	4b11      	ldr	r3, [pc, #68]	; (1626c <prepare_multithreading+0x54>)
   16228:	9305      	str	r3, [sp, #20]
   1622a:	2301      	movs	r3, #1
   1622c:	9304      	str	r3, [sp, #16]
   1622e:	2400      	movs	r4, #0
   16230:	9403      	str	r4, [sp, #12]
   16232:	9402      	str	r4, [sp, #8]
   16234:	9401      	str	r4, [sp, #4]
   16236:	9400      	str	r4, [sp, #0]
   16238:	4b0d      	ldr	r3, [pc, #52]	; (16270 <prepare_multithreading+0x58>)
   1623a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1623e:	490d      	ldr	r1, [pc, #52]	; (16274 <prepare_multithreading+0x5c>)
   16240:	4628      	mov	r0, r5
   16242:	f000 f8f5 	bl	16430 <z_setup_new_thread>
   16246:	4606      	mov	r6, r0
   16248:	7b6b      	ldrb	r3, [r5, #13]
   1624a:	f023 0304 	bic.w	r3, r3, #4
   1624e:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   16250:	4628      	mov	r0, r5
   16252:	f007 fea3 	bl	1df9c <z_ready_thread>
	z_init_cpu(0);
   16256:	4620      	mov	r0, r4
   16258:	f7ff ffbc 	bl	161d4 <z_init_cpu>
}
   1625c:	4630      	mov	r0, r6
   1625e:	b006      	add	sp, #24
   16260:	bd70      	pop	{r4, r5, r6, pc}
   16262:	bf00      	nop
   16264:	20001c58 	.word	0x20001c58
   16268:	200030b4 	.word	0x200030b4
   1626c:	0001eecc 	.word	0x0001eecc
   16270:	00016175 	.word	0x00016175
   16274:	20004ac0 	.word	0x20004ac0

00016278 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   16278:	b500      	push	{lr}
   1627a:	b0af      	sub	sp, #188	; 0xbc
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1627c:	4b1d      	ldr	r3, [pc, #116]	; (162f4 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1627e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   16282:	4c1d      	ldr	r4, [pc, #116]	; (162f8 <z_cstart+0x80>)
   16284:	6963      	ldr	r3, [r4, #20]
   16286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1628a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1628c:	23e0      	movs	r3, #224	; 0xe0
   1628e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   16292:	2320      	movs	r3, #32
   16294:	77e3      	strb	r3, [r4, #31]
   16296:	2500      	movs	r5, #0
   16298:	7625      	strb	r5, [r4, #24]
   1629a:	7665      	strb	r5, [r4, #25]
   1629c:	76a5      	strb	r5, [r4, #26]
   1629e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   162a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   162a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   162a8:	6263      	str	r3, [r4, #36]	; 0x24
   162aa:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   162ae:	f7fa ff91 	bl	111d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   162b2:	f7fa fcf9 	bl	10ca8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   162b6:	f04f 33ff 	mov.w	r3, #4294967295
   162ba:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   162bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   162be:	f7fb f8ab 	bl	11418 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   162c2:	f7fb f83b 	bl	1133c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   162c6:	2401      	movs	r4, #1
   162c8:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   162cc:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   162d0:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   162d2:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   162d4:	952a      	str	r5, [sp, #168]	; 0xa8
#endif

	_current_cpu->current = dummy_thread;
   162d6:	4b09      	ldr	r3, [pc, #36]	; (162fc <z_cstart+0x84>)
   162d8:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   162dc:	f7ff fee8 	bl	160b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   162e0:	4628      	mov	r0, r5
   162e2:	f7ff fef1 	bl	160c8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   162e6:	4620      	mov	r0, r4
   162e8:	f7ff feee 	bl	160c8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   162ec:	f7ff ff94 	bl	16218 <prepare_multithreading>
   162f0:	f7ff ff5a 	bl	161a8 <switch_to_main_thread>
   162f4:	20005cc0 	.word	0x20005cc0
   162f8:	e000ed00 	.word	0xe000ed00
   162fc:	200030b4 	.word	0x200030b4

00016300 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   16300:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   16302:	4c06      	ldr	r4, [pc, #24]	; (1631c <statics_init+0x1c>)
   16304:	e005      	b.n	16312 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16306:	68a2      	ldr	r2, [r4, #8]
   16308:	6861      	ldr	r1, [r4, #4]
   1630a:	4620      	mov	r0, r4
   1630c:	f007 fba9 	bl	1da62 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   16310:	3414      	adds	r4, #20
   16312:	4b03      	ldr	r3, [pc, #12]	; (16320 <statics_init+0x20>)
   16314:	429c      	cmp	r4, r3
   16316:	d3f6      	bcc.n	16306 <statics_init+0x6>
		}
	}
	return 0;
}
   16318:	2000      	movs	r0, #0
   1631a:	bd10      	pop	{r4, pc}
   1631c:	20000994 	.word	0x20000994
   16320:	20000994 	.word	0x20000994

00016324 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   16324:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16326:	4c06      	ldr	r4, [pc, #24]	; (16340 <init_mem_slab_module+0x1c>)
	int rc = 0;
   16328:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1632a:	e000      	b.n	1632e <init_mem_slab_module+0xa>
   1632c:	341c      	adds	r4, #28
   1632e:	4b05      	ldr	r3, [pc, #20]	; (16344 <init_mem_slab_module+0x20>)
   16330:	429c      	cmp	r4, r3
   16332:	d204      	bcs.n	1633e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   16334:	4620      	mov	r0, r4
   16336:	f007 fc02 	bl	1db3e <create_free_list>
		if (rc < 0) {
   1633a:	2800      	cmp	r0, #0
   1633c:	daf6      	bge.n	1632c <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   1633e:	bd10      	pop	{r4, pc}
   16340:	20000994 	.word	0x20000994
   16344:	20000994 	.word	0x20000994

00016348 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   16348:	b530      	push	{r4, r5, lr}
   1634a:	b083      	sub	sp, #12
   1634c:	460d      	mov	r5, r1
	__asm__ volatile(
   1634e:	f04f 0440 	mov.w	r4, #64	; 0x40
   16352:	f3ef 8111 	mrs	r1, BASEPRI
   16356:	f384 8812 	msr	BASEPRI_MAX, r4
   1635a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1635e:	6944      	ldr	r4, [r0, #20]
   16360:	b16c      	cbz	r4, 1637e <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   16362:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   16364:	6943      	ldr	r3, [r0, #20]
   16366:	681b      	ldr	r3, [r3, #0]
   16368:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1636a:	6983      	ldr	r3, [r0, #24]
   1636c:	3301      	adds	r3, #1
   1636e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   16370:	2000      	movs	r0, #0
	__asm__ volatile(
   16372:	f381 8811 	msr	BASEPRI, r1
   16376:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1637a:	b003      	add	sp, #12
   1637c:	bd30      	pop	{r4, r5, pc}
   1637e:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   16382:	ea53 0402 	orrs.w	r4, r3, r2
   16386:	d104      	bne.n	16392 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   16388:	2300      	movs	r3, #0
   1638a:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1638c:	f06f 000b 	mvn.w	r0, #11
   16390:	e7ef      	b.n	16372 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   16392:	9200      	str	r2, [sp, #0]
   16394:	9301      	str	r3, [sp, #4]
   16396:	4602      	mov	r2, r0
   16398:	4660      	mov	r0, ip
   1639a:	f000 fdb5 	bl	16f08 <z_pend_curr>
		if (result == 0) {
   1639e:	2800      	cmp	r0, #0
   163a0:	d1eb      	bne.n	1637a <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   163a2:	4b02      	ldr	r3, [pc, #8]	; (163ac <k_mem_slab_alloc+0x64>)
   163a4:	689b      	ldr	r3, [r3, #8]
   163a6:	695b      	ldr	r3, [r3, #20]
   163a8:	602b      	str	r3, [r5, #0]
		return result;
   163aa:	e7e6      	b.n	1637a <k_mem_slab_alloc+0x32>
   163ac:	200030b4 	.word	0x200030b4

000163b0 <z_thread_monitor_exit>:
	__asm__ volatile(
   163b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   163b4:	f3ef 8111 	mrs	r1, BASEPRI
   163b8:	f383 8812 	msr	BASEPRI_MAX, r3
   163bc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   163c0:	4b0a      	ldr	r3, [pc, #40]	; (163ec <z_thread_monitor_exit+0x3c>)
   163c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   163c4:	4283      	cmp	r3, r0
   163c6:	d104      	bne.n	163d2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   163c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   163ca:	4b08      	ldr	r3, [pc, #32]	; (163ec <z_thread_monitor_exit+0x3c>)
   163cc:	629a      	str	r2, [r3, #40]	; 0x28
   163ce:	e007      	b.n	163e0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   163d0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   163d2:	b113      	cbz	r3, 163da <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   163d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   163d6:	4282      	cmp	r2, r0
   163d8:	d1fa      	bne.n	163d0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   163da:	b10b      	cbz	r3, 163e0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   163dc:	6f42      	ldr	r2, [r0, #116]	; 0x74
   163de:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   163e0:	f381 8811 	msr	BASEPRI, r1
   163e4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   163e8:	4770      	bx	lr
   163ea:	bf00      	nop
   163ec:	200030b4 	.word	0x200030b4

000163f0 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   163f0:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   163f2:	4604      	mov	r4, r0
   163f4:	b140      	cbz	r0, 16408 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   163f6:	221f      	movs	r2, #31
   163f8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   163fc:	f004 fecc 	bl	1b198 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   16400:	2000      	movs	r0, #0
   16402:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   16406:	bd10      	pop	{r4, pc}
		thread = _current;
   16408:	4b01      	ldr	r3, [pc, #4]	; (16410 <z_impl_k_thread_name_set+0x20>)
   1640a:	689c      	ldr	r4, [r3, #8]
   1640c:	e7f3      	b.n	163f6 <z_impl_k_thread_name_set+0x6>
   1640e:	bf00      	nop
   16410:	200030b4 	.word	0x200030b4

00016414 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   16414:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16416:	ea53 0102 	orrs.w	r1, r3, r2
   1641a:	d102      	bne.n	16422 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   1641c:	f007 fbf8 	bl	1dc10 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   16420:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16422:	4902      	ldr	r1, [pc, #8]	; (1642c <schedule_new_thread+0x18>)
   16424:	3018      	adds	r0, #24
   16426:	f001 f817 	bl	17458 <z_add_timeout>
   1642a:	e7f9      	b.n	16420 <schedule_new_thread+0xc>
   1642c:	0001dfd5 	.word	0x0001dfd5

00016430 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   16430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16434:	b085      	sub	sp, #20
   16436:	4604      	mov	r4, r0
   16438:	460f      	mov	r7, r1
   1643a:	4615      	mov	r5, r2
   1643c:	461e      	mov	r6, r3
   1643e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   16442:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   16446:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1644a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1644e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16452:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   16454:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   16456:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16458:	2204      	movs	r2, #4
   1645a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1645c:	f007 fbdc 	bl	1dc18 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   16460:	462a      	mov	r2, r5
   16462:	4639      	mov	r1, r7
   16464:	4620      	mov	r0, r4
   16466:	f007 fbbb 	bl	1dbe0 <setup_thread_stack>
   1646a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1646c:	f8cd 8008 	str.w	r8, [sp, #8]
   16470:	f8cd 9004 	str.w	r9, [sp, #4]
   16474:	f8cd a000 	str.w	sl, [sp]
   16478:	4633      	mov	r3, r6
   1647a:	4602      	mov	r2, r0
   1647c:	4639      	mov	r1, r7
   1647e:	4620      	mov	r0, r4
   16480:	f7fa fd04 	bl	10e8c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   16484:	2300      	movs	r3, #0
   16486:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   16488:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1648a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1648e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   16492:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   16496:	f04f 0340 	mov.w	r3, #64	; 0x40
   1649a:	f3ef 8211 	mrs	r2, BASEPRI
   1649e:	f383 8812 	msr	BASEPRI_MAX, r3
   164a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   164a6:	4b13      	ldr	r3, [pc, #76]	; (164f4 <z_setup_new_thread+0xc4>)
   164a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   164aa:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   164ac:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   164ae:	f382 8811 	msr	BASEPRI, r2
   164b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   164b6:	f1bb 0f00 	cmp.w	fp, #0
   164ba:	d013      	beq.n	164e4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   164bc:	221f      	movs	r2, #31
   164be:	4659      	mov	r1, fp
   164c0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   164c4:	f004 fe68 	bl	1b198 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   164c8:	2300      	movs	r3, #0
   164ca:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   164ce:	4b09      	ldr	r3, [pc, #36]	; (164f4 <z_setup_new_thread+0xc4>)
   164d0:	689b      	ldr	r3, [r3, #8]
   164d2:	b15b      	cbz	r3, 164ec <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   164d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   164d8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   164dc:	4628      	mov	r0, r5
   164de:	b005      	add	sp, #20
   164e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   164e4:	2300      	movs	r3, #0
   164e6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   164ea:	e7f0      	b.n	164ce <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   164ec:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   164f0:	e7f4      	b.n	164dc <z_setup_new_thread+0xac>
   164f2:	bf00      	nop
   164f4:	200030b4 	.word	0x200030b4

000164f8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   164f8:	b530      	push	{r4, r5, lr}
   164fa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   164fc:	4c21      	ldr	r4, [pc, #132]	; (16584 <z_init_static_threads+0x8c>)
   164fe:	e014      	b.n	1652a <z_init_static_threads+0x32>
		z_setup_new_thread(
   16500:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16502:	9305      	str	r3, [sp, #20]
   16504:	6a23      	ldr	r3, [r4, #32]
   16506:	9304      	str	r3, [sp, #16]
   16508:	69e3      	ldr	r3, [r4, #28]
   1650a:	9303      	str	r3, [sp, #12]
   1650c:	69a3      	ldr	r3, [r4, #24]
   1650e:	9302      	str	r3, [sp, #8]
   16510:	6963      	ldr	r3, [r4, #20]
   16512:	9301      	str	r3, [sp, #4]
   16514:	6923      	ldr	r3, [r4, #16]
   16516:	9300      	str	r3, [sp, #0]
   16518:	68e3      	ldr	r3, [r4, #12]
   1651a:	68a2      	ldr	r2, [r4, #8]
   1651c:	6861      	ldr	r1, [r4, #4]
   1651e:	6820      	ldr	r0, [r4, #0]
   16520:	f7ff ff86 	bl	16430 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   16524:	6823      	ldr	r3, [r4, #0]
   16526:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   16528:	3430      	adds	r4, #48	; 0x30
   1652a:	4b17      	ldr	r3, [pc, #92]	; (16588 <z_init_static_threads+0x90>)
   1652c:	429c      	cmp	r4, r3
   1652e:	d3e7      	bcc.n	16500 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   16530:	f000 fb7e 	bl	16c30 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   16534:	4c13      	ldr	r4, [pc, #76]	; (16584 <z_init_static_threads+0x8c>)
   16536:	e000      	b.n	1653a <z_init_static_threads+0x42>
   16538:	3430      	adds	r4, #48	; 0x30
   1653a:	4b13      	ldr	r3, [pc, #76]	; (16588 <z_init_static_threads+0x90>)
   1653c:	429c      	cmp	r4, r3
   1653e:	d21c      	bcs.n	1657a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   16540:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16542:	f1b0 3fff 	cmp.w	r0, #4294967295
   16546:	d0f7      	beq.n	16538 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   16548:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1654a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1654e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   16550:	03c9      	lsls	r1, r1, #15
   16552:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   16556:	03c0      	lsls	r0, r0, #15
   16558:	f240 33e7 	movw	r3, #999	; 0x3e7
   1655c:	18c0      	adds	r0, r0, r3
   1655e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16562:	f04f 0300 	mov.w	r3, #0
   16566:	f141 0100 	adc.w	r1, r1, #0
   1656a:	f7e9 fdc9 	bl	100 <__aeabi_uldivmod>
   1656e:	4602      	mov	r2, r0
   16570:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   16572:	4628      	mov	r0, r5
   16574:	f7ff ff4e 	bl	16414 <schedule_new_thread>
   16578:	e7de      	b.n	16538 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   1657a:	f000 fd7b 	bl	17074 <k_sched_unlock>
}
   1657e:	b007      	add	sp, #28
   16580:	bd30      	pop	{r4, r5, pc}
   16582:	bf00      	nop
   16584:	20000994 	.word	0x20000994
   16588:	20000994 	.word	0x20000994

0001658c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1658c:	b508      	push	{r3, lr}
   1658e:	e001      	b.n	16594 <idle+0x8>
	arch_cpu_idle();
   16590:	f7fa fb90 	bl	10cb4 <arch_cpu_idle>
	__asm__ volatile(
   16594:	f04f 0240 	mov.w	r2, #64	; 0x40
   16598:	f3ef 8311 	mrs	r3, BASEPRI
   1659c:	f382 8812 	msr	BASEPRI_MAX, r2
   165a0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   165a4:	f007 fe45 	bl	1e232 <z_get_next_timeout_expiry>
   165a8:	4b05      	ldr	r3, [pc, #20]	; (165c0 <idle+0x34>)
   165aa:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   165ac:	4b05      	ldr	r3, [pc, #20]	; (165c4 <idle+0x38>)
   165ae:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   165b0:	2b00      	cmp	r3, #0
   165b2:	d0ed      	beq.n	16590 <idle+0x4>
   165b4:	f7fa f9a4 	bl	10900 <pm_system_suspend>
   165b8:	2800      	cmp	r0, #0
   165ba:	d1eb      	bne.n	16594 <idle+0x8>
   165bc:	e7e8      	b.n	16590 <idle+0x4>
   165be:	bf00      	nop
   165c0:	200030b4 	.word	0x200030b4
   165c4:	20003bc6 	.word	0x20003bc6

000165c8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   165c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   165cc:	b083      	sub	sp, #12
   165ce:	4604      	mov	r4, r0
   165d0:	461d      	mov	r5, r3
   165d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   165d6:	f3ef 8711 	mrs	r7, BASEPRI
   165da:	f383 8812 	msr	BASEPRI_MAX, r3
   165de:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   165e2:	68c1      	ldr	r1, [r0, #12]
   165e4:	b999      	cbnz	r1, 1660e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   165e6:	2900      	cmp	r1, #0
   165e8:	d14f      	bne.n	1668a <z_impl_k_mutex_lock+0xc2>
   165ea:	4b3a      	ldr	r3, [pc, #232]	; (166d4 <z_impl_k_mutex_lock+0x10c>)
   165ec:	689b      	ldr	r3, [r3, #8]
   165ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   165f2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   165f4:	3101      	adds	r1, #1
   165f6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   165f8:	4b36      	ldr	r3, [pc, #216]	; (166d4 <z_impl_k_mutex_lock+0x10c>)
   165fa:	689b      	ldr	r3, [r3, #8]
   165fc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   165fe:	f387 8811 	msr	BASEPRI, r7
   16602:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   16606:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   16608:	b003      	add	sp, #12
   1660a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1660e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   16610:	6882      	ldr	r2, [r0, #8]
   16612:	4b30      	ldr	r3, [pc, #192]	; (166d4 <z_impl_k_mutex_lock+0x10c>)
   16614:	689b      	ldr	r3, [r3, #8]
   16616:	429a      	cmp	r2, r3
   16618:	d0e5      	beq.n	165e6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1661a:	ea55 0106 	orrs.w	r1, r5, r6
   1661e:	bf0c      	ite	eq
   16620:	f04f 0801 	moveq.w	r8, #1
   16624:	f04f 0800 	movne.w	r8, #0
   16628:	d031      	beq.n	1668e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1662a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1662e:	4649      	mov	r1, r9
   16630:	f993 000e 	ldrsb.w	r0, [r3, #14]
   16634:	f007 fb23 	bl	1dc7e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16638:	4581      	cmp	r9, r0
   1663a:	dc2f      	bgt.n	1669c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1663c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   16640:	9600      	str	r6, [sp, #0]
   16642:	9501      	str	r5, [sp, #4]
   16644:	4622      	mov	r2, r4
   16646:	4639      	mov	r1, r7
   16648:	4823      	ldr	r0, [pc, #140]	; (166d8 <z_impl_k_mutex_lock+0x110>)
   1664a:	f000 fc5d 	bl	16f08 <z_pend_curr>
	if (got_mutex == 0) {
   1664e:	2800      	cmp	r0, #0
   16650:	d0da      	beq.n	16608 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   16652:	f04f 0340 	mov.w	r3, #64	; 0x40
   16656:	f3ef 8511 	mrs	r5, BASEPRI
   1665a:	f383 8812 	msr	BASEPRI_MAX, r3
   1665e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   16662:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16664:	429c      	cmp	r4, r3
   16666:	d01f      	beq.n	166a8 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   16668:	b1f3      	cbz	r3, 166a8 <z_impl_k_mutex_lock+0xe0>
   1666a:	6921      	ldr	r1, [r4, #16]
   1666c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   16670:	f007 fb05 	bl	1dc7e <new_prio_for_inheritance>
   16674:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   16676:	4620      	mov	r0, r4
   16678:	f007 fb0c 	bl	1dc94 <adjust_owner_prio>
   1667c:	b9b0      	cbnz	r0, 166ac <z_impl_k_mutex_lock+0xe4>
   1667e:	f1b9 0f00 	cmp.w	r9, #0
   16682:	d015      	beq.n	166b0 <z_impl_k_mutex_lock+0xe8>
   16684:	f04f 0801 	mov.w	r8, #1
   16688:	e012      	b.n	166b0 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1668a:	6923      	ldr	r3, [r4, #16]
   1668c:	e7b1      	b.n	165f2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1668e:	f387 8811 	msr	BASEPRI, r7
   16692:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   16696:	f06f 000f 	mvn.w	r0, #15
   1669a:	e7b5      	b.n	16608 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1669c:	4601      	mov	r1, r0
   1669e:	4620      	mov	r0, r4
   166a0:	f007 faf8 	bl	1dc94 <adjust_owner_prio>
   166a4:	4681      	mov	r9, r0
   166a6:	e7cb      	b.n	16640 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   166a8:	6921      	ldr	r1, [r4, #16]
   166aa:	e7e4      	b.n	16676 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   166ac:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   166b0:	f1b8 0f00 	cmp.w	r8, #0
   166b4:	d106      	bne.n	166c4 <z_impl_k_mutex_lock+0xfc>
   166b6:	f385 8811 	msr	BASEPRI, r5
   166ba:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   166be:	f06f 000a 	mvn.w	r0, #10
   166c2:	e7a1      	b.n	16608 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   166c4:	4629      	mov	r1, r5
   166c6:	4804      	ldr	r0, [pc, #16]	; (166d8 <z_impl_k_mutex_lock+0x110>)
   166c8:	f000 fa96 	bl	16bf8 <z_reschedule>
	return -EAGAIN;
   166cc:	f06f 000a 	mvn.w	r0, #10
   166d0:	e79a      	b.n	16608 <z_impl_k_mutex_lock+0x40>
   166d2:	bf00      	nop
   166d4:	200030b4 	.word	0x200030b4
   166d8:	200030e0 	.word	0x200030e0

000166dc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   166dc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   166de:	6883      	ldr	r3, [r0, #8]
   166e0:	b383      	cbz	r3, 16744 <z_impl_k_mutex_unlock+0x68>
   166e2:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   166e4:	4a1a      	ldr	r2, [pc, #104]	; (16750 <z_impl_k_mutex_unlock+0x74>)
   166e6:	6892      	ldr	r2, [r2, #8]
   166e8:	4293      	cmp	r3, r2
   166ea:	d12e      	bne.n	1674a <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   166ec:	68c3      	ldr	r3, [r0, #12]
   166ee:	2b01      	cmp	r3, #1
   166f0:	d903      	bls.n	166fa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   166f2:	3b01      	subs	r3, #1
   166f4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   166f6:	2000      	movs	r0, #0
}
   166f8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   166fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   166fe:	f3ef 8511 	mrs	r5, BASEPRI
   16702:	f383 8812 	msr	BASEPRI_MAX, r3
   16706:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1670a:	6901      	ldr	r1, [r0, #16]
   1670c:	f007 fac2 	bl	1dc94 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   16710:	4620      	mov	r0, r4
   16712:	f007 fce3 	bl	1e0dc <z_unpend_first_thread>
	mutex->owner = new_owner;
   16716:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   16718:	b168      	cbz	r0, 16736 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   1671a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1671e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   16720:	2400      	movs	r4, #0
   16722:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   16726:	f007 fc39 	bl	1df9c <z_ready_thread>
		z_reschedule(&lock, key);
   1672a:	4629      	mov	r1, r5
   1672c:	4809      	ldr	r0, [pc, #36]	; (16754 <z_impl_k_mutex_unlock+0x78>)
   1672e:	f000 fa63 	bl	16bf8 <z_reschedule>
	return 0;
   16732:	4620      	mov	r0, r4
   16734:	e7e0      	b.n	166f8 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   16736:	2000      	movs	r0, #0
   16738:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1673a:	f385 8811 	msr	BASEPRI, r5
   1673e:	f3bf 8f6f 	isb	sy
   16742:	e7d9      	b.n	166f8 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   16744:	f06f 0015 	mvn.w	r0, #21
   16748:	e7d6      	b.n	166f8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1674a:	f04f 30ff 	mov.w	r0, #4294967295
   1674e:	e7d3      	b.n	166f8 <z_impl_k_mutex_unlock+0x1c>
   16750:	200030b4 	.word	0x200030b4
   16754:	200030e0 	.word	0x200030e0

00016758 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   16758:	b510      	push	{r4, lr}
   1675a:	b082      	sub	sp, #8
   1675c:	4601      	mov	r1, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1675e:	4684      	mov	ip, r0
	__asm__ volatile(
   16760:	f04f 0040 	mov.w	r0, #64	; 0x40
   16764:	f3ef 8411 	mrs	r4, BASEPRI
   16768:	f380 8812 	msr	BASEPRI_MAX, r0
   1676c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   16770:	f85c 0b08 	ldr.w	r0, [ip], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   16774:	b188      	cbz	r0, 1679a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16776:	6803      	ldr	r3, [r0, #0]
   16778:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1677c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1677e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16780:	4290      	cmp	r0, r2
   16782:	d008      	beq.n	16796 <z_impl_k_queue_get+0x3e>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   16784:	2101      	movs	r1, #1
   16786:	f007 fb0d 	bl	1dda4 <z_queue_node_peek>
	__asm__ volatile(
   1678a:	f384 8811 	msr	BASEPRI, r4
   1678e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   16792:	b002      	add	sp, #8
   16794:	bd10      	pop	{r4, pc}
	list->tail = node;
   16796:	604b      	str	r3, [r1, #4]
}
   16798:	e7f4      	b.n	16784 <z_impl_k_queue_get+0x2c>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1679a:	ea53 0102 	orrs.w	r1, r3, r2
   1679e:	d00b      	beq.n	167b8 <z_impl_k_queue_get+0x60>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   167a0:	9200      	str	r2, [sp, #0]
   167a2:	9301      	str	r3, [sp, #4]
   167a4:	4662      	mov	r2, ip
   167a6:	4621      	mov	r1, r4
   167a8:	4660      	mov	r0, ip
   167aa:	f000 fbad 	bl	16f08 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   167ae:	b948      	cbnz	r0, 167c4 <z_impl_k_queue_get+0x6c>
   167b0:	4b05      	ldr	r3, [pc, #20]	; (167c8 <z_impl_k_queue_get+0x70>)
   167b2:	689b      	ldr	r3, [r3, #8]
   167b4:	6958      	ldr	r0, [r3, #20]
   167b6:	e7ec      	b.n	16792 <z_impl_k_queue_get+0x3a>
   167b8:	f384 8811 	msr	BASEPRI, r4
   167bc:	f3bf 8f6f 	isb	sy
		return NULL;
   167c0:	2000      	movs	r0, #0
   167c2:	e7e6      	b.n	16792 <z_impl_k_queue_get+0x3a>
	return (ret != 0) ? NULL : _current->base.swap_data;
   167c4:	2000      	movs	r0, #0
   167c6:	e7e4      	b.n	16792 <z_impl_k_queue_get+0x3a>
   167c8:	200030b4 	.word	0x200030b4

000167cc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   167cc:	b538      	push	{r3, r4, r5, lr}
   167ce:	4604      	mov	r4, r0
	__asm__ volatile(
   167d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   167d4:	f3ef 8511 	mrs	r5, BASEPRI
   167d8:	f383 8812 	msr	BASEPRI_MAX, r3
   167dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   167e0:	f007 fc7c 	bl	1e0dc <z_unpend_first_thread>

	if (thread != NULL) {
   167e4:	b148      	cbz	r0, 167fa <z_impl_k_sem_give+0x2e>
   167e6:	2200      	movs	r2, #0
   167e8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   167ec:	f007 fbd6 	bl	1df9c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   167f0:	4629      	mov	r1, r5
   167f2:	4809      	ldr	r0, [pc, #36]	; (16818 <z_impl_k_sem_give+0x4c>)
   167f4:	f000 fa00 	bl	16bf8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   167f8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   167fa:	68a3      	ldr	r3, [r4, #8]
   167fc:	68e2      	ldr	r2, [r4, #12]
   167fe:	4293      	cmp	r3, r2
   16800:	d008      	beq.n	16814 <z_impl_k_sem_give+0x48>
   16802:	2201      	movs	r2, #1
   16804:	4413      	add	r3, r2
   16806:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   16808:	2102      	movs	r1, #2
   1680a:	f104 0010 	add.w	r0, r4, #16
   1680e:	f007 fdf7 	bl	1e400 <z_handle_obj_poll_events>
}
   16812:	e7ed      	b.n	167f0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16814:	2200      	movs	r2, #0
   16816:	e7f5      	b.n	16804 <z_impl_k_sem_give+0x38>
   16818:	200030e0 	.word	0x200030e0

0001681c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1681c:	b510      	push	{r4, lr}
   1681e:	b082      	sub	sp, #8
   16820:	f04f 0440 	mov.w	r4, #64	; 0x40
   16824:	f3ef 8111 	mrs	r1, BASEPRI
   16828:	f384 8812 	msr	BASEPRI_MAX, r4
   1682c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   16830:	6884      	ldr	r4, [r0, #8]
   16832:	b144      	cbz	r4, 16846 <z_impl_k_sem_take+0x2a>
		sem->count--;
   16834:	3c01      	subs	r4, #1
   16836:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   16838:	f381 8811 	msr	BASEPRI, r1
   1683c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   16840:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   16842:	b002      	add	sp, #8
   16844:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16846:	ea53 0402 	orrs.w	r4, r3, r2
   1684a:	d006      	beq.n	1685a <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1684c:	9200      	str	r2, [sp, #0]
   1684e:	9301      	str	r3, [sp, #4]
   16850:	4602      	mov	r2, r0
   16852:	4805      	ldr	r0, [pc, #20]	; (16868 <z_impl_k_sem_take+0x4c>)
   16854:	f000 fb58 	bl	16f08 <z_pend_curr>
	return ret;
   16858:	e7f3      	b.n	16842 <z_impl_k_sem_take+0x26>
   1685a:	f381 8811 	msr	BASEPRI, r1
   1685e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   16862:	f06f 000f 	mvn.w	r0, #15
   16866:	e7ec      	b.n	16842 <z_impl_k_sem_take+0x26>
   16868:	200030e0 	.word	0x200030e0

0001686c <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1686e:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   16870:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   16872:	f013 0f02 	tst.w	r3, #2
   16876:	d15c      	bne.n	16932 <submit_to_queue_locked+0xc6>
   16878:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1687a:	f013 0f04 	tst.w	r3, #4
   1687e:	d15d      	bne.n	1693c <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   16880:	680b      	ldr	r3, [r1, #0]
   16882:	2b00      	cmp	r3, #0
   16884:	d038      	beq.n	168f8 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
   16886:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   16888:	f013 0f01 	tst.w	r3, #1
   1688c:	d037      	beq.n	168fe <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1688e:	68a3      	ldr	r3, [r4, #8]
   16890:	602b      	str	r3, [r5, #0]
			ret = 2;
   16892:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   16894:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   16896:	2e00      	cmp	r6, #0
   16898:	d03f      	beq.n	1691a <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1689a:	4b29      	ldr	r3, [pc, #164]	; (16940 <submit_to_queue_locked+0xd4>)
   1689c:	689b      	ldr	r3, [r3, #8]
   1689e:	42b3      	cmp	r3, r6
   168a0:	d02f      	beq.n	16902 <submit_to_queue_locked+0x96>
   168a2:	2300      	movs	r3, #0
   168a4:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   168a6:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   168aa:	f3c3 0180 	ubfx	r1, r3, #2, #1
   168ae:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   168b2:	f013 0f01 	tst.w	r3, #1
   168b6:	d033      	beq.n	16920 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
   168b8:	b101      	cbz	r1, 168bc <submit_to_queue_locked+0x50>
   168ba:	b3a2      	cbz	r2, 16926 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
   168bc:	b100      	cbz	r0, 168c0 <submit_to_queue_locked+0x54>
   168be:	b3a9      	cbz	r1, 1692c <submit_to_queue_locked+0xc0>
	parent->next = child;
   168c0:	2300      	movs	r3, #0
   168c2:	6023      	str	r3, [r4, #0]
	return list->tail;
   168c4:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   168c8:	b313      	cbz	r3, 16910 <submit_to_queue_locked+0xa4>
	parent->next = child;
   168ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
   168cc:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	if (queue != NULL) {
   168d0:	b12e      	cbz	r6, 168de <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   168d2:	2200      	movs	r2, #0
   168d4:	4611      	mov	r1, r2
   168d6:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   168da:	f007 fc3e 	bl	1e15a <z_sched_wake>
		ret = 1;
   168de:	2001      	movs	r0, #1

		if (rc < 0) {
   168e0:	2800      	cmp	r0, #0
   168e2:	db06      	blt.n	168f2 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
   168e4:	68e3      	ldr	r3, [r4, #12]
   168e6:	f043 0304 	orr.w	r3, r3, #4
   168ea:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   168ec:	682b      	ldr	r3, [r5, #0]
   168ee:	60a3      	str	r3, [r4, #8]
   168f0:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   168f2:	2800      	cmp	r0, #0
   168f4:	dc21      	bgt.n	1693a <submit_to_queue_locked+0xce>
   168f6:	e01e      	b.n	16936 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
   168f8:	6883      	ldr	r3, [r0, #8]
   168fa:	600b      	str	r3, [r1, #0]
   168fc:	e7c3      	b.n	16886 <submit_to_queue_locked+0x1a>
		ret = 1;
   168fe:	2701      	movs	r7, #1
   16900:	e7c8      	b.n	16894 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   16902:	f007 f97f 	bl	1dc04 <k_is_in_isr>
   16906:	b908      	cbnz	r0, 1690c <submit_to_queue_locked+0xa0>
   16908:	2301      	movs	r3, #1
   1690a:	e7cb      	b.n	168a4 <submit_to_queue_locked+0x38>
   1690c:	2300      	movs	r3, #0
   1690e:	e7c9      	b.n	168a4 <submit_to_queue_locked+0x38>
   16910:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   16914:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   16918:	e7da      	b.n	168d0 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1691a:	f06f 0015 	mvn.w	r0, #21
   1691e:	e7df      	b.n	168e0 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
   16920:	f06f 0012 	mvn.w	r0, #18
   16924:	e7dc      	b.n	168e0 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   16926:	f06f 000f 	mvn.w	r0, #15
   1692a:	e7d9      	b.n	168e0 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   1692c:	f06f 000f 	mvn.w	r0, #15
   16930:	e7d6      	b.n	168e0 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   16932:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   16936:	2300      	movs	r3, #0
   16938:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1693a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1693c:	2000      	movs	r0, #0
   1693e:	e7fa      	b.n	16936 <submit_to_queue_locked+0xca>
   16940:	200030b4 	.word	0x200030b4

00016944 <finalize_cancel_locked>:
{
   16944:	b570      	push	{r4, r5, r6, lr}
   16946:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   16948:	68c3      	ldr	r3, [r0, #12]
   1694a:	f023 0302 	bic.w	r3, r3, #2
   1694e:	60c3      	str	r3, [r0, #12]
	return list->head;
   16950:	4b1a      	ldr	r3, [pc, #104]	; (169bc <finalize_cancel_locked+0x78>)
   16952:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16954:	b1fb      	cbz	r3, 16996 <finalize_cancel_locked+0x52>
   16956:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16958:	b103      	cbz	r3, 1695c <finalize_cancel_locked+0x18>
	return node->next;
   1695a:	681c      	ldr	r4, [r3, #0]
   1695c:	2600      	movs	r6, #0
   1695e:	e01f      	b.n	169a0 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   16960:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   16962:	b166      	cbz	r6, 1697e <finalize_cancel_locked+0x3a>
	return node->next;
   16964:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
   16966:	6031      	str	r1, [r6, #0]
	return list->tail;
   16968:	4914      	ldr	r1, [pc, #80]	; (169bc <finalize_cancel_locked+0x78>)
   1696a:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   1696c:	428b      	cmp	r3, r1
   1696e:	d00f      	beq.n	16990 <finalize_cancel_locked+0x4c>
	parent->next = child;
   16970:	2100      	movs	r1, #0
   16972:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
   16974:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
   16978:	f7ff ff28 	bl	167cc <z_impl_k_sem_give>
}
   1697c:	e015      	b.n	169aa <finalize_cancel_locked+0x66>
	return node->next;
   1697e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16980:	490e      	ldr	r1, [pc, #56]	; (169bc <finalize_cancel_locked+0x78>)
   16982:	6008      	str	r0, [r1, #0]
	return list->tail;
   16984:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   16986:	428b      	cmp	r3, r1
   16988:	d1f2      	bne.n	16970 <finalize_cancel_locked+0x2c>
	list->tail = node;
   1698a:	490c      	ldr	r1, [pc, #48]	; (169bc <finalize_cancel_locked+0x78>)
   1698c:	6048      	str	r0, [r1, #4]
}
   1698e:	e7ef      	b.n	16970 <finalize_cancel_locked+0x2c>
	list->tail = node;
   16990:	490a      	ldr	r1, [pc, #40]	; (169bc <finalize_cancel_locked+0x78>)
   16992:	604e      	str	r6, [r1, #4]
}
   16994:	e7ec      	b.n	16970 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16996:	461c      	mov	r4, r3
   16998:	e7e0      	b.n	1695c <finalize_cancel_locked+0x18>
   1699a:	4622      	mov	r2, r4
   1699c:	4623      	mov	r3, r4
   1699e:	4614      	mov	r4, r2
   169a0:	b153      	cbz	r3, 169b8 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
   169a2:	685a      	ldr	r2, [r3, #4]
   169a4:	42aa      	cmp	r2, r5
   169a6:	d0db      	beq.n	16960 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   169a8:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   169aa:	2c00      	cmp	r4, #0
   169ac:	d0f5      	beq.n	1699a <finalize_cancel_locked+0x56>
   169ae:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   169b0:	2c00      	cmp	r4, #0
   169b2:	d0f3      	beq.n	1699c <finalize_cancel_locked+0x58>
	return node->next;
   169b4:	6822      	ldr	r2, [r4, #0]
   169b6:	e7f1      	b.n	1699c <finalize_cancel_locked+0x58>
}
   169b8:	bd70      	pop	{r4, r5, r6, pc}
   169ba:	bf00      	nop
   169bc:	200030e0 	.word	0x200030e0

000169c0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   169c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   169c2:	b085      	sub	sp, #20
   169c4:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   169c6:	e016      	b.n	169f6 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   169c8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   169cc:	f023 0204 	bic.w	r2, r3, #4
   169d0:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   169d4:	f013 0f04 	tst.w	r3, #4
   169d8:	d159      	bne.n	16a8e <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   169da:	2300      	movs	r3, #0
   169dc:	9302      	str	r3, [sp, #8]
   169de:	f04f 32ff 	mov.w	r2, #4294967295
   169e2:	f04f 33ff 	mov.w	r3, #4294967295
   169e6:	e9cd 2300 	strd	r2, r3, [sp]
   169ea:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   169ee:	4631      	mov	r1, r6
   169f0:	482e      	ldr	r0, [pc, #184]	; (16aac <work_queue_main+0xec>)
   169f2:	f000 fcbb 	bl	1736c <z_sched_wait>
	__asm__ volatile(
   169f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   169fa:	f3ef 8611 	mrs	r6, BASEPRI
   169fe:	f383 8812 	msr	BASEPRI_MAX, r3
   16a02:	f3bf 8f6f 	isb	sy
	return list->head;
   16a06:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   16a0a:	2c00      	cmp	r4, #0
   16a0c:	d0dc      	beq.n	169c8 <work_queue_main+0x8>
	return node->next;
   16a0e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   16a10:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   16a14:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16a18:	4294      	cmp	r4, r2
   16a1a:	d035      	beq.n	16a88 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
   16a1c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   16a20:	f043 0302 	orr.w	r3, r3, #2
   16a24:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   16a28:	68e3      	ldr	r3, [r4, #12]
   16a2a:	f043 0301 	orr.w	r3, r3, #1
   16a2e:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   16a30:	f023 0304 	bic.w	r3, r3, #4
   16a34:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   16a36:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   16a38:	2c00      	cmp	r4, #0
   16a3a:	d0ce      	beq.n	169da <work_queue_main+0x1a>
	__asm__ volatile(
   16a3c:	f386 8811 	msr	BASEPRI, r6
   16a40:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   16a44:	4620      	mov	r0, r4
   16a46:	4798      	blx	r3
	__asm__ volatile(
   16a48:	f04f 0340 	mov.w	r3, #64	; 0x40
   16a4c:	f3ef 8611 	mrs	r6, BASEPRI
   16a50:	f383 8812 	msr	BASEPRI_MAX, r3
   16a54:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   16a58:	68e3      	ldr	r3, [r4, #12]
   16a5a:	f023 0301 	bic.w	r3, r3, #1
   16a5e:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   16a60:	f013 0f02 	tst.w	r3, #2
   16a64:	d11e      	bne.n	16aa4 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   16a66:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   16a6a:	f023 0302 	bic.w	r3, r3, #2
   16a6e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   16a72:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   16a76:	f386 8811 	msr	BASEPRI, r6
   16a7a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   16a7e:	2b00      	cmp	r3, #0
   16a80:	d1b9      	bne.n	169f6 <work_queue_main+0x36>
	z_impl_k_yield();
   16a82:	f000 fb79 	bl	17178 <z_impl_k_yield>
}
   16a86:	e7b6      	b.n	169f6 <work_queue_main+0x36>
	list->tail = node;
   16a88:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   16a8c:	e7c6      	b.n	16a1c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   16a8e:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   16a92:	2200      	movs	r2, #0
   16a94:	2101      	movs	r1, #1
   16a96:	4638      	mov	r0, r7
   16a98:	f007 fb5f 	bl	1e15a <z_sched_wake>
   16a9c:	2800      	cmp	r0, #0
   16a9e:	d1f8      	bne.n	16a92 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
   16aa0:	2300      	movs	r3, #0
   16aa2:	e7c9      	b.n	16a38 <work_queue_main+0x78>
			finalize_cancel_locked(work);
   16aa4:	4620      	mov	r0, r4
   16aa6:	f7ff ff4d 	bl	16944 <finalize_cancel_locked>
   16aaa:	e7dc      	b.n	16a66 <work_queue_main+0xa6>
   16aac:	200030e0 	.word	0x200030e0

00016ab0 <k_work_submit>:
{
   16ab0:	b508      	push	{r3, lr}
   16ab2:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   16ab4:	4801      	ldr	r0, [pc, #4]	; (16abc <k_work_submit+0xc>)
   16ab6:	f007 fa09 	bl	1decc <k_work_submit_to_queue>
}
   16aba:	bd08      	pop	{r3, pc}
   16abc:	20001d18 	.word	0x20001d18

00016ac0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   16ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ac2:	b089      	sub	sp, #36	; 0x24
   16ac4:	4604      	mov	r4, r0
   16ac6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   16ac8:	2000      	movs	r0, #0
   16aca:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   16ace:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   16ad2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   16ad6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   16ada:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   16ade:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   16ae2:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   16ae6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   16aea:	b1fd      	cbz	r5, 16b2c <k_work_queue_start+0x6c>
   16aec:	7928      	ldrb	r0, [r5, #4]
   16aee:	b9f8      	cbnz	r0, 16b30 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   16af0:	2001      	movs	r0, #1
	*flagp = flags;
   16af2:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16af6:	f04f 36ff 	mov.w	r6, #4294967295
   16afa:	f04f 37ff 	mov.w	r7, #4294967295
   16afe:	e9cd 6706 	strd	r6, r7, [sp, #24]
   16b02:	2000      	movs	r0, #0
   16b04:	9004      	str	r0, [sp, #16]
   16b06:	9303      	str	r3, [sp, #12]
   16b08:	9002      	str	r0, [sp, #8]
   16b0a:	9001      	str	r0, [sp, #4]
   16b0c:	9400      	str	r4, [sp, #0]
   16b0e:	4b0a      	ldr	r3, [pc, #40]	; (16b38 <k_work_queue_start+0x78>)
   16b10:	4620      	mov	r0, r4
   16b12:	f007 f88c 	bl	1dc2e <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   16b16:	b125      	cbz	r5, 16b22 <k_work_queue_start+0x62>
   16b18:	6829      	ldr	r1, [r5, #0]
   16b1a:	b111      	cbz	r1, 16b22 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   16b1c:	4620      	mov	r0, r4
   16b1e:	f7ff fc67 	bl	163f0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   16b22:	4620      	mov	r0, r4
   16b24:	f007 f874 	bl	1dc10 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   16b28:	b009      	add	sp, #36	; 0x24
   16b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   16b2c:	2001      	movs	r0, #1
   16b2e:	e7e0      	b.n	16af2 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   16b30:	f240 1001 	movw	r0, #257	; 0x101
   16b34:	e7dd      	b.n	16af2 <k_work_queue_start+0x32>
   16b36:	bf00      	nop
   16b38:	000169c1 	.word	0x000169c1

00016b3c <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
   16b40:	bf08      	it	eq
   16b42:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   16b46:	d100      	bne.n	16b4a <add_thread_timeout+0xe>
   16b48:	4770      	bx	lr
{
   16b4a:	b508      	push	{r3, lr}
   16b4c:	4902      	ldr	r1, [pc, #8]	; (16b58 <add_thread_timeout+0x1c>)
   16b4e:	3018      	adds	r0, #24
   16b50:	f000 fc82 	bl	17458 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   16b54:	bd08      	pop	{r3, pc}
   16b56:	bf00      	nop
   16b58:	0001dfd5 	.word	0x0001dfd5

00016b5c <z_reset_time_slice>:
{
   16b5c:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   16b5e:	4b07      	ldr	r3, [pc, #28]	; (16b7c <z_reset_time_slice+0x20>)
   16b60:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   16b62:	b904      	cbnz	r4, 16b66 <z_reset_time_slice+0xa>
}
   16b64:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   16b66:	f7fd fa15 	bl	13f94 <sys_clock_elapsed>
   16b6a:	4404      	add	r4, r0
   16b6c:	4b04      	ldr	r3, [pc, #16]	; (16b80 <z_reset_time_slice+0x24>)
   16b6e:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   16b70:	2100      	movs	r1, #0
   16b72:	4b02      	ldr	r3, [pc, #8]	; (16b7c <z_reset_time_slice+0x20>)
   16b74:	6818      	ldr	r0, [r3, #0]
   16b76:	f007 fb73 	bl	1e260 <z_set_timeout_expiry>
}
   16b7a:	e7f3      	b.n	16b64 <z_reset_time_slice+0x8>
   16b7c:	200030f0 	.word	0x200030f0
   16b80:	200030b4 	.word	0x200030b4

00016b84 <k_sched_time_slice_set>:
{
   16b84:	b570      	push	{r4, r5, r6, lr}
   16b86:	4604      	mov	r4, r0
   16b88:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
   16b8a:	2300      	movs	r3, #0
	__asm__ volatile(
   16b8c:	f04f 0240 	mov.w	r2, #64	; 0x40
   16b90:	f3ef 8611 	mrs	r6, BASEPRI
   16b94:	f382 8812 	msr	BASEPRI_MAX, r2
   16b98:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   16b9c:	e00e      	b.n	16bbc <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   16b9e:	2802      	cmp	r0, #2
   16ba0:	bfb8      	it	lt
   16ba2:	2002      	movlt	r0, #2
   16ba4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   16ba6:	4b11      	ldr	r3, [pc, #68]	; (16bec <k_sched_time_slice_set+0x68>)
   16ba8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   16baa:	4b11      	ldr	r3, [pc, #68]	; (16bf0 <k_sched_time_slice_set+0x6c>)
   16bac:	6898      	ldr	r0, [r3, #8]
   16bae:	f7ff ffd5 	bl	16b5c <z_reset_time_slice>
	__asm__ volatile(
   16bb2:	f386 8811 	msr	BASEPRI, r6
   16bb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16bba:	2301      	movs	r3, #1
   16bbc:	b9a3      	cbnz	r3, 16be8 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   16bbe:	4b0c      	ldr	r3, [pc, #48]	; (16bf0 <k_sched_time_slice_set+0x6c>)
   16bc0:	2200      	movs	r2, #0
   16bc2:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   16bc4:	0c61      	lsrs	r1, r4, #17
   16bc6:	03e3      	lsls	r3, r4, #15
   16bc8:	f240 30e7 	movw	r0, #999	; 0x3e7
   16bcc:	1818      	adds	r0, r3, r0
   16bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16bd2:	f04f 0300 	mov.w	r3, #0
   16bd6:	f141 0100 	adc.w	r1, r1, #0
   16bda:	f7e9 fa91 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   16bde:	4b05      	ldr	r3, [pc, #20]	; (16bf4 <k_sched_time_slice_set+0x70>)
   16be0:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   16be2:	2c00      	cmp	r4, #0
   16be4:	dcdb      	bgt.n	16b9e <k_sched_time_slice_set+0x1a>
   16be6:	e7de      	b.n	16ba6 <k_sched_time_slice_set+0x22>
}
   16be8:	bd70      	pop	{r4, r5, r6, pc}
   16bea:	bf00      	nop
   16bec:	200030ec 	.word	0x200030ec
   16bf0:	200030b4 	.word	0x200030b4
   16bf4:	200030f0 	.word	0x200030f0

00016bf8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   16bf8:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   16bfa:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   16bfc:	b921      	cbnz	r1, 16c08 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16bfe:	f3ef 8305 	mrs	r3, IPSR
   16c02:	b913      	cbnz	r3, 16c0a <z_reschedule+0x12>
   16c04:	2101      	movs	r1, #1
   16c06:	e000      	b.n	16c0a <z_reschedule+0x12>
   16c08:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   16c0a:	f011 0f01 	tst.w	r1, #1
   16c0e:	d007      	beq.n	16c20 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   16c10:	4b06      	ldr	r3, [pc, #24]	; (16c2c <z_reschedule+0x34>)
   16c12:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   16c14:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   16c16:	429a      	cmp	r2, r3
   16c18:	d002      	beq.n	16c20 <z_reschedule+0x28>
	ret = arch_swap(key);
   16c1a:	f7fa f8df 	bl	10ddc <arch_swap>
		z_swap(lock, key);
   16c1e:	e003      	b.n	16c28 <z_reschedule+0x30>
   16c20:	f380 8811 	msr	BASEPRI, r0
   16c24:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   16c28:	bd08      	pop	{r3, pc}
   16c2a:	bf00      	nop
   16c2c:	200030b4 	.word	0x200030b4

00016c30 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   16c30:	2300      	movs	r3, #0
	__asm__ volatile(
   16c32:	f04f 0240 	mov.w	r2, #64	; 0x40
   16c36:	f3ef 8111 	mrs	r1, BASEPRI
   16c3a:	f382 8812 	msr	BASEPRI_MAX, r2
   16c3e:	f3bf 8f6f 	isb	sy
   16c42:	e009      	b.n	16c58 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   16c44:	4b06      	ldr	r3, [pc, #24]	; (16c60 <k_sched_lock+0x30>)
   16c46:	689a      	ldr	r2, [r3, #8]
   16c48:	7bd3      	ldrb	r3, [r2, #15]
   16c4a:	3b01      	subs	r3, #1
   16c4c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   16c4e:	f381 8811 	msr	BASEPRI, r1
   16c52:	f3bf 8f6f 	isb	sy
   16c56:	2301      	movs	r3, #1
   16c58:	2b00      	cmp	r3, #0
   16c5a:	d0f3      	beq.n	16c44 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   16c5c:	4770      	bx	lr
   16c5e:	bf00      	nop
   16c60:	200030b4 	.word	0x200030b4

00016c64 <update_cache>:
{
   16c64:	b538      	push	{r3, r4, r5, lr}
   16c66:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   16c68:	4810      	ldr	r0, [pc, #64]	; (16cac <update_cache+0x48>)
   16c6a:	f007 f990 	bl	1df8e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   16c6e:	4605      	mov	r5, r0
   16c70:	b170      	cbz	r0, 16c90 <update_cache+0x2c>
	if (preempt_ok != 0) {
   16c72:	b984      	cbnz	r4, 16c96 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   16c74:	4b0e      	ldr	r3, [pc, #56]	; (16cb0 <update_cache+0x4c>)
   16c76:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   16c78:	7b5a      	ldrb	r2, [r3, #13]
   16c7a:	f012 0f1f 	tst.w	r2, #31
   16c7e:	d10a      	bne.n	16c96 <update_cache+0x32>
	return node->next != NULL;
   16c80:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   16c82:	b942      	cbnz	r2, 16c96 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16c84:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   16c86:	2a7f      	cmp	r2, #127	; 0x7f
   16c88:	d905      	bls.n	16c96 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   16c8a:	4a09      	ldr	r2, [pc, #36]	; (16cb0 <update_cache+0x4c>)
   16c8c:	61d3      	str	r3, [r2, #28]
   16c8e:	e00b      	b.n	16ca8 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   16c90:	4b07      	ldr	r3, [pc, #28]	; (16cb0 <update_cache+0x4c>)
   16c92:	68dd      	ldr	r5, [r3, #12]
   16c94:	e7ed      	b.n	16c72 <update_cache+0xe>
		if (thread != _current) {
   16c96:	4b06      	ldr	r3, [pc, #24]	; (16cb0 <update_cache+0x4c>)
   16c98:	689b      	ldr	r3, [r3, #8]
   16c9a:	42ab      	cmp	r3, r5
   16c9c:	d002      	beq.n	16ca4 <update_cache+0x40>
			z_reset_time_slice(thread);
   16c9e:	4628      	mov	r0, r5
   16ca0:	f7ff ff5c 	bl	16b5c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   16ca4:	4b02      	ldr	r3, [pc, #8]	; (16cb0 <update_cache+0x4c>)
   16ca6:	61dd      	str	r5, [r3, #28]
}
   16ca8:	bd38      	pop	{r3, r4, r5, pc}
   16caa:	bf00      	nop
   16cac:	200030d4 	.word	0x200030d4
   16cb0:	200030b4 	.word	0x200030b4

00016cb4 <move_thread_to_end_of_prio_q>:
{
   16cb4:	b538      	push	{r3, r4, r5, lr}
   16cb6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   16cb8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   16cba:	f990 300d 	ldrsb.w	r3, [r0, #13]
   16cbe:	2b00      	cmp	r3, #0
   16cc0:	db28      	blt.n	16d14 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   16cc2:	7b6b      	ldrb	r3, [r5, #13]
   16cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16cc8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   16cca:	4b1a      	ldr	r3, [pc, #104]	; (16d34 <move_thread_to_end_of_prio_q+0x80>)
   16ccc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16cd0:	429c      	cmp	r4, r3
   16cd2:	d02d      	beq.n	16d30 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16cd4:	b16c      	cbz	r4, 16cf2 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16cd6:	4621      	mov	r1, r4
   16cd8:	4628      	mov	r0, r5
   16cda:	f007 f90d 	bl	1def8 <z_sched_prio_cmp>
   16cde:	2800      	cmp	r0, #0
   16ce0:	dc20      	bgt.n	16d24 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16ce2:	b134      	cbz	r4, 16cf2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   16ce4:	4b13      	ldr	r3, [pc, #76]	; (16d34 <move_thread_to_end_of_prio_q+0x80>)
   16ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16ce8:	429c      	cmp	r4, r3
   16cea:	d002      	beq.n	16cf2 <move_thread_to_end_of_prio_q+0x3e>
   16cec:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16cee:	2c00      	cmp	r4, #0
   16cf0:	d1f0      	bne.n	16cd4 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   16cf2:	4b10      	ldr	r3, [pc, #64]	; (16d34 <move_thread_to_end_of_prio_q+0x80>)
   16cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   16cf6:	f103 0120 	add.w	r1, r3, #32
   16cfa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   16cfc:	606a      	str	r2, [r5, #4]

	tail->next = node;
   16cfe:	6015      	str	r5, [r2, #0]
	list->tail = node;
   16d00:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   16d02:	4b0c      	ldr	r3, [pc, #48]	; (16d34 <move_thread_to_end_of_prio_q+0x80>)
   16d04:	6898      	ldr	r0, [r3, #8]
   16d06:	42a8      	cmp	r0, r5
   16d08:	bf14      	ite	ne
   16d0a:	2000      	movne	r0, #0
   16d0c:	2001      	moveq	r0, #1
   16d0e:	f7ff ffa9 	bl	16c64 <update_cache>
}
   16d12:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16d14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16d18:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16d1a:	4601      	mov	r1, r0
   16d1c:	4806      	ldr	r0, [pc, #24]	; (16d38 <move_thread_to_end_of_prio_q+0x84>)
   16d1e:	f007 f90a 	bl	1df36 <z_priq_dumb_remove>
}
   16d22:	e7ce      	b.n	16cc2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   16d24:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   16d26:	606b      	str	r3, [r5, #4]
	node->next = successor;
   16d28:	602c      	str	r4, [r5, #0]
	prev->next = node;
   16d2a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   16d2c:	6065      	str	r5, [r4, #4]
}
   16d2e:	e7e8      	b.n	16d02 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16d30:	2400      	movs	r4, #0
   16d32:	e7cf      	b.n	16cd4 <move_thread_to_end_of_prio_q+0x20>
   16d34:	200030b4 	.word	0x200030b4
   16d38:	200030d4 	.word	0x200030d4

00016d3c <slice_expired_locked>:
{
   16d3c:	b538      	push	{r3, r4, r5, lr}
   16d3e:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   16d40:	4b07      	ldr	r3, [pc, #28]	; (16d60 <slice_expired_locked+0x24>)
   16d42:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   16d44:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   16d46:	f013 0f1f 	tst.w	r3, #31
   16d4a:	d004      	beq.n	16d56 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   16d4c:	4628      	mov	r0, r5
   16d4e:	f7ff ff05 	bl	16b5c <z_reset_time_slice>
}
   16d52:	4620      	mov	r0, r4
   16d54:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   16d56:	4628      	mov	r0, r5
   16d58:	f7ff ffac 	bl	16cb4 <move_thread_to_end_of_prio_q>
   16d5c:	e7f6      	b.n	16d4c <slice_expired_locked+0x10>
   16d5e:	bf00      	nop
   16d60:	200030b4 	.word	0x200030b4

00016d64 <z_time_slice>:
{
   16d64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   16d66:	f04f 0340 	mov.w	r3, #64	; 0x40
   16d6a:	f3ef 8411 	mrs	r4, BASEPRI
   16d6e:	f383 8812 	msr	BASEPRI_MAX, r3
   16d72:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   16d76:	4b22      	ldr	r3, [pc, #136]	; (16e00 <z_time_slice+0x9c>)
   16d78:	689b      	ldr	r3, [r3, #8]
   16d7a:	4a22      	ldr	r2, [pc, #136]	; (16e04 <z_time_slice+0xa0>)
   16d7c:	6812      	ldr	r2, [r2, #0]
   16d7e:	4293      	cmp	r3, r2
   16d80:	d018      	beq.n	16db4 <z_time_slice+0x50>
   16d82:	4621      	mov	r1, r4
	pending_current = NULL;
   16d84:	4a1f      	ldr	r2, [pc, #124]	; (16e04 <z_time_slice+0xa0>)
   16d86:	2500      	movs	r5, #0
   16d88:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
   16d8a:	4a1f      	ldr	r2, [pc, #124]	; (16e08 <z_time_slice+0xa4>)
   16d8c:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
   16d8e:	b372      	cbz	r2, 16dee <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16d90:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   16d92:	2a7f      	cmp	r2, #127	; 0x7f
   16d94:	d816      	bhi.n	16dc4 <z_time_slice+0x60>
   16d96:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   16d98:	f012 0f1f 	tst.w	r2, #31
   16d9c:	d11c      	bne.n	16dd8 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   16d9e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   16da2:	4a1a      	ldr	r2, [pc, #104]	; (16e0c <z_time_slice+0xa8>)
   16da4:	6812      	ldr	r2, [r2, #0]
   16da6:	4295      	cmp	r5, r2
   16da8:	db18      	blt.n	16ddc <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
   16daa:	4a19      	ldr	r2, [pc, #100]	; (16e10 <z_time_slice+0xac>)
   16dac:	4293      	cmp	r3, r2
   16dae:	d017      	beq.n	16de0 <z_time_slice+0x7c>
   16db0:	2301      	movs	r3, #1
   16db2:	e008      	b.n	16dc6 <z_time_slice+0x62>
		z_reset_time_slice(_current);
   16db4:	4618      	mov	r0, r3
   16db6:	f7ff fed1 	bl	16b5c <z_reset_time_slice>
	__asm__ volatile(
   16dba:	f384 8811 	msr	BASEPRI, r4
   16dbe:	f3bf 8f6f 	isb	sy
		return;
   16dc2:	e01b      	b.n	16dfc <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   16dc4:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
   16dc6:	b193      	cbz	r3, 16dee <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
   16dc8:	4b0d      	ldr	r3, [pc, #52]	; (16e00 <z_time_slice+0x9c>)
   16dca:	691b      	ldr	r3, [r3, #16]
   16dcc:	4283      	cmp	r3, r0
   16dce:	dd09      	ble.n	16de4 <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
   16dd0:	1a18      	subs	r0, r3, r0
   16dd2:	4b0b      	ldr	r3, [pc, #44]	; (16e00 <z_time_slice+0x9c>)
   16dd4:	6118      	str	r0, [r3, #16]
   16dd6:	e00d      	b.n	16df4 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
   16dd8:	2300      	movs	r3, #0
   16dda:	e7f4      	b.n	16dc6 <z_time_slice+0x62>
   16ddc:	2300      	movs	r3, #0
   16dde:	e7f2      	b.n	16dc6 <z_time_slice+0x62>
   16de0:	2300      	movs	r3, #0
   16de2:	e7f0      	b.n	16dc6 <z_time_slice+0x62>
			key = slice_expired_locked(key);
   16de4:	4620      	mov	r0, r4
   16de6:	f7ff ffa9 	bl	16d3c <slice_expired_locked>
   16dea:	4601      	mov	r1, r0
   16dec:	e002      	b.n	16df4 <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
   16dee:	4b04      	ldr	r3, [pc, #16]	; (16e00 <z_time_slice+0x9c>)
   16df0:	2200      	movs	r2, #0
   16df2:	611a      	str	r2, [r3, #16]
   16df4:	f381 8811 	msr	BASEPRI, r1
   16df8:	f3bf 8f6f 	isb	sy
}
   16dfc:	bd38      	pop	{r3, r4, r5, pc}
   16dfe:	bf00      	nop
   16e00:	200030b4 	.word	0x200030b4
   16e04:	200030e8 	.word	0x200030e8
   16e08:	200030f0 	.word	0x200030f0
   16e0c:	200030ec 	.word	0x200030ec
   16e10:	20001ba0 	.word	0x20001ba0

00016e14 <ready_thread>:
{
   16e14:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   16e16:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   16e18:	f990 200d 	ldrsb.w	r2, [r0, #13]
   16e1c:	2a00      	cmp	r2, #0
   16e1e:	db2d      	blt.n	16e7c <ready_thread+0x68>
   16e20:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16e22:	f013 0f1f 	tst.w	r3, #31
   16e26:	d105      	bne.n	16e34 <ready_thread+0x20>
	return node->next != NULL;
   16e28:	6982      	ldr	r2, [r0, #24]
   16e2a:	b10a      	cbz	r2, 16e30 <ready_thread+0x1c>
   16e2c:	2200      	movs	r2, #0
   16e2e:	e002      	b.n	16e36 <ready_thread+0x22>
   16e30:	2201      	movs	r2, #1
   16e32:	e000      	b.n	16e36 <ready_thread+0x22>
   16e34:	2200      	movs	r2, #0
   16e36:	b30a      	cbz	r2, 16e7c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   16e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16e3c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   16e3e:	4b14      	ldr	r3, [pc, #80]	; (16e90 <ready_thread+0x7c>)
   16e40:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16e44:	429d      	cmp	r5, r3
   16e46:	d020      	beq.n	16e8a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e48:	b16d      	cbz	r5, 16e66 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16e4a:	4629      	mov	r1, r5
   16e4c:	4620      	mov	r0, r4
   16e4e:	f007 f853 	bl	1def8 <z_sched_prio_cmp>
   16e52:	2800      	cmp	r0, #0
   16e54:	dc13      	bgt.n	16e7e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16e56:	b135      	cbz	r5, 16e66 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   16e58:	4b0d      	ldr	r3, [pc, #52]	; (16e90 <ready_thread+0x7c>)
   16e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16e5c:	429d      	cmp	r5, r3
   16e5e:	d002      	beq.n	16e66 <ready_thread+0x52>
   16e60:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e62:	2d00      	cmp	r5, #0
   16e64:	d1f0      	bne.n	16e48 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   16e66:	4b0a      	ldr	r3, [pc, #40]	; (16e90 <ready_thread+0x7c>)
   16e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   16e6a:	f103 0120 	add.w	r1, r3, #32
   16e6e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   16e70:	6062      	str	r2, [r4, #4]
	tail->next = node;
   16e72:	6014      	str	r4, [r2, #0]
	list->tail = node;
   16e74:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   16e76:	2000      	movs	r0, #0
   16e78:	f7ff fef4 	bl	16c64 <update_cache>
}
   16e7c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   16e7e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   16e80:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16e82:	6025      	str	r5, [r4, #0]
	prev->next = node;
   16e84:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16e86:	606c      	str	r4, [r5, #4]
}
   16e88:	e7f5      	b.n	16e76 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e8a:	2500      	movs	r5, #0
   16e8c:	e7dc      	b.n	16e48 <ready_thread+0x34>
   16e8e:	bf00      	nop
   16e90:	200030b4 	.word	0x200030b4

00016e94 <z_sched_start>:
{
   16e94:	b510      	push	{r4, lr}
	__asm__ volatile(
   16e96:	f04f 0340 	mov.w	r3, #64	; 0x40
   16e9a:	f3ef 8411 	mrs	r4, BASEPRI
   16e9e:	f383 8812 	msr	BASEPRI_MAX, r3
   16ea2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   16ea6:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   16ea8:	f013 0f04 	tst.w	r3, #4
   16eac:	d104      	bne.n	16eb8 <z_sched_start+0x24>
	__asm__ volatile(
   16eae:	f384 8811 	msr	BASEPRI, r4
   16eb2:	f3bf 8f6f 	isb	sy
}
   16eb6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16eb8:	f023 0304 	bic.w	r3, r3, #4
   16ebc:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   16ebe:	f7ff ffa9 	bl	16e14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   16ec2:	4621      	mov	r1, r4
   16ec4:	4801      	ldr	r0, [pc, #4]	; (16ecc <z_sched_start+0x38>)
   16ec6:	f7ff fe97 	bl	16bf8 <z_reschedule>
   16eca:	e7f4      	b.n	16eb6 <z_sched_start+0x22>
   16ecc:	200030ec 	.word	0x200030ec

00016ed0 <unready_thread>:
{
   16ed0:	b510      	push	{r4, lr}
   16ed2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   16ed4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   16ed6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   16eda:	2b00      	cmp	r3, #0
   16edc:	db08      	blt.n	16ef0 <unready_thread+0x20>
	update_cache(thread == _current);
   16ede:	4b08      	ldr	r3, [pc, #32]	; (16f00 <unready_thread+0x30>)
   16ee0:	6898      	ldr	r0, [r3, #8]
   16ee2:	42a0      	cmp	r0, r4
   16ee4:	bf14      	ite	ne
   16ee6:	2000      	movne	r0, #0
   16ee8:	2001      	moveq	r0, #1
   16eea:	f7ff febb 	bl	16c64 <update_cache>
}
   16eee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16ef0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16ef4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16ef6:	4601      	mov	r1, r0
   16ef8:	4802      	ldr	r0, [pc, #8]	; (16f04 <unready_thread+0x34>)
   16efa:	f007 f81c 	bl	1df36 <z_priq_dumb_remove>
}
   16efe:	e7ee      	b.n	16ede <unready_thread+0xe>
   16f00:	200030b4 	.word	0x200030b4
   16f04:	200030d4 	.word	0x200030d4

00016f08 <z_pend_curr>:
{
   16f08:	b510      	push	{r4, lr}
   16f0a:	460c      	mov	r4, r1
   16f0c:	4611      	mov	r1, r2
	pending_current = _current;
   16f0e:	4b06      	ldr	r3, [pc, #24]	; (16f28 <z_pend_curr+0x20>)
   16f10:	6898      	ldr	r0, [r3, #8]
   16f12:	4b06      	ldr	r3, [pc, #24]	; (16f2c <z_pend_curr+0x24>)
   16f14:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   16f16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16f1a:	f007 f8bd 	bl	1e098 <pend>
   16f1e:	4620      	mov	r0, r4
   16f20:	f7f9 ff5c 	bl	10ddc <arch_swap>
}
   16f24:	bd10      	pop	{r4, pc}
   16f26:	bf00      	nop
   16f28:	200030b4 	.word	0x200030b4
   16f2c:	200030e8 	.word	0x200030e8

00016f30 <z_set_prio>:
{
   16f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16f34:	4604      	mov	r4, r0
   16f36:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   16f38:	2300      	movs	r3, #0
	__asm__ volatile(
   16f3a:	f04f 0240 	mov.w	r2, #64	; 0x40
   16f3e:	f3ef 8811 	mrs	r8, BASEPRI
   16f42:	f382 8812 	msr	BASEPRI_MAX, r2
   16f46:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   16f4a:	461f      	mov	r7, r3
   16f4c:	e008      	b.n	16f60 <z_set_prio+0x30>
		if (need_sched) {
   16f4e:	f012 0701 	ands.w	r7, r2, #1
   16f52:	d111      	bne.n	16f78 <z_set_prio+0x48>
			thread->base.prio = prio;
   16f54:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
   16f56:	f388 8811 	msr	BASEPRI, r8
   16f5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16f5e:	2301      	movs	r3, #1
   16f60:	461a      	mov	r2, r3
   16f62:	2b00      	cmp	r3, #0
   16f64:	d13d      	bne.n	16fe2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   16f66:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16f68:	f013 0f1f 	tst.w	r3, #31
   16f6c:	d1ef      	bne.n	16f4e <z_set_prio+0x1e>
	return node->next != NULL;
   16f6e:	69a1      	ldr	r1, [r4, #24]
   16f70:	2900      	cmp	r1, #0
   16f72:	d1ec      	bne.n	16f4e <z_set_prio+0x1e>
   16f74:	2201      	movs	r2, #1
   16f76:	e7ea      	b.n	16f4e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16f7c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16f7e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 16fe8 <z_set_prio+0xb8>
   16f82:	4621      	mov	r1, r4
   16f84:	4648      	mov	r0, r9
   16f86:	f006 ffd6 	bl	1df36 <z_priq_dumb_remove>
				thread->base.prio = prio;
   16f8a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   16f8c:	7b63      	ldrb	r3, [r4, #13]
   16f8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16f92:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   16f94:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16f98:	454d      	cmp	r5, r9
   16f9a:	d020      	beq.n	16fde <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16f9c:	b16d      	cbz	r5, 16fba <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16f9e:	4629      	mov	r1, r5
   16fa0:	4620      	mov	r0, r4
   16fa2:	f006 ffa9 	bl	1def8 <z_sched_prio_cmp>
   16fa6:	2800      	cmp	r0, #0
   16fa8:	dc13      	bgt.n	16fd2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16faa:	b135      	cbz	r5, 16fba <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   16fac:	4b0f      	ldr	r3, [pc, #60]	; (16fec <z_set_prio+0xbc>)
   16fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16fb0:	429d      	cmp	r5, r3
   16fb2:	d002      	beq.n	16fba <z_set_prio+0x8a>
   16fb4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16fb6:	2d00      	cmp	r5, #0
   16fb8:	d1f0      	bne.n	16f9c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   16fba:	4b0c      	ldr	r3, [pc, #48]	; (16fec <z_set_prio+0xbc>)
   16fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   16fbe:	f103 0120 	add.w	r1, r3, #32
   16fc2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   16fc4:	6062      	str	r2, [r4, #4]
	tail->next = node;
   16fc6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   16fc8:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   16fca:	2001      	movs	r0, #1
   16fcc:	f7ff fe4a 	bl	16c64 <update_cache>
   16fd0:	e7c1      	b.n	16f56 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   16fd2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   16fd4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16fd6:	6025      	str	r5, [r4, #0]
	prev->next = node;
   16fd8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16fda:	606c      	str	r4, [r5, #4]
}
   16fdc:	e7f5      	b.n	16fca <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16fde:	2500      	movs	r5, #0
   16fe0:	e7dc      	b.n	16f9c <z_set_prio+0x6c>
}
   16fe2:	4638      	mov	r0, r7
   16fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16fe8:	200030d4 	.word	0x200030d4
   16fec:	200030b4 	.word	0x200030b4

00016ff0 <z_impl_k_thread_suspend>:
{
   16ff0:	b538      	push	{r3, r4, r5, lr}
   16ff2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16ff4:	3018      	adds	r0, #24
   16ff6:	f007 f8fe 	bl	1e1f6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   16ffa:	2300      	movs	r3, #0
	__asm__ volatile(
   16ffc:	f04f 0240 	mov.w	r2, #64	; 0x40
   17000:	f3ef 8511 	mrs	r5, BASEPRI
   17004:	f382 8812 	msr	BASEPRI_MAX, r2
   17008:	f3bf 8f6f 	isb	sy
   1700c:	e010      	b.n	17030 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1700e:	7b63      	ldrb	r3, [r4, #13]
   17010:	f043 0310 	orr.w	r3, r3, #16
   17014:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   17016:	4b15      	ldr	r3, [pc, #84]	; (1706c <z_impl_k_thread_suspend+0x7c>)
   17018:	6898      	ldr	r0, [r3, #8]
   1701a:	42a0      	cmp	r0, r4
   1701c:	bf14      	ite	ne
   1701e:	2000      	movne	r0, #0
   17020:	2001      	moveq	r0, #1
   17022:	f7ff fe1f 	bl	16c64 <update_cache>
	__asm__ volatile(
   17026:	f385 8811 	msr	BASEPRI, r5
   1702a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1702e:	2301      	movs	r3, #1
   17030:	b963      	cbnz	r3, 1704c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   17032:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   17034:	f994 300d 	ldrsb.w	r3, [r4, #13]
   17038:	2b00      	cmp	r3, #0
   1703a:	dae8      	bge.n	1700e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1703c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   17040:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17042:	4621      	mov	r1, r4
   17044:	480a      	ldr	r0, [pc, #40]	; (17070 <z_impl_k_thread_suspend+0x80>)
   17046:	f006 ff76 	bl	1df36 <z_priq_dumb_remove>
}
   1704a:	e7e0      	b.n	1700e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1704c:	4b07      	ldr	r3, [pc, #28]	; (1706c <z_impl_k_thread_suspend+0x7c>)
   1704e:	689b      	ldr	r3, [r3, #8]
   17050:	42a3      	cmp	r3, r4
   17052:	d000      	beq.n	17056 <z_impl_k_thread_suspend+0x66>
}
   17054:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17056:	f04f 0340 	mov.w	r3, #64	; 0x40
   1705a:	f3ef 8011 	mrs	r0, BASEPRI
   1705e:	f383 8812 	msr	BASEPRI_MAX, r3
   17062:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   17066:	f006 ff51 	bl	1df0c <z_reschedule_irqlock>
   1706a:	e7f3      	b.n	17054 <z_impl_k_thread_suspend+0x64>
   1706c:	200030b4 	.word	0x200030b4
   17070:	200030d4 	.word	0x200030d4

00017074 <k_sched_unlock>:

void k_sched_unlock(void)
{
   17074:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   17076:	2300      	movs	r3, #0
   17078:	f04f 0240 	mov.w	r2, #64	; 0x40
   1707c:	f3ef 8411 	mrs	r4, BASEPRI
   17080:	f382 8812 	msr	BASEPRI_MAX, r2
   17084:	f3bf 8f6f 	isb	sy
   17088:	e00c      	b.n	170a4 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1708a:	4b0d      	ldr	r3, [pc, #52]	; (170c0 <k_sched_unlock+0x4c>)
   1708c:	689a      	ldr	r2, [r3, #8]
   1708e:	7bd3      	ldrb	r3, [r2, #15]
   17090:	3301      	adds	r3, #1
   17092:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17094:	2000      	movs	r0, #0
   17096:	f7ff fde5 	bl	16c64 <update_cache>
	__asm__ volatile(
   1709a:	f384 8811 	msr	BASEPRI, r4
   1709e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   170a2:	2301      	movs	r3, #1
   170a4:	2b00      	cmp	r3, #0
   170a6:	d0f0      	beq.n	1708a <k_sched_unlock+0x16>
	__asm__ volatile(
   170a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   170ac:	f3ef 8011 	mrs	r0, BASEPRI
   170b0:	f383 8812 	msr	BASEPRI_MAX, r3
   170b4:	f3bf 8f6f 	isb	sy
   170b8:	f006 ff28 	bl	1df0c <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   170bc:	bd10      	pop	{r4, pc}
   170be:	bf00      	nop
   170c0:	200030b4 	.word	0x200030b4

000170c4 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   170c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   170c6:	7b43      	ldrb	r3, [r0, #13]
   170c8:	f013 0f08 	tst.w	r3, #8
   170cc:	d145      	bne.n	1715a <end_thread+0x96>
   170ce:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   170d0:	f043 0308 	orr.w	r3, r3, #8
   170d4:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   170d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   170da:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   170dc:	f013 0f80 	tst.w	r3, #128	; 0x80
   170e0:	d12d      	bne.n	1713e <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   170e2:	68ab      	ldr	r3, [r5, #8]
   170e4:	b15b      	cbz	r3, 170fe <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   170e6:	4628      	mov	r0, r5
   170e8:	f006 ff04 	bl	1def4 <pended_on_thread>
   170ec:	4629      	mov	r1, r5
   170ee:	f006 ff22 	bl	1df36 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   170f2:	7b6b      	ldrb	r3, [r5, #13]
   170f4:	f023 0302 	bic.w	r3, r3, #2
   170f8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   170fa:	2300      	movs	r3, #0
   170fc:	60ab      	str	r3, [r5, #8]
   170fe:	f105 0018 	add.w	r0, r5, #24
   17102:	f007 f878 	bl	1e1f6 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   17106:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
   1710a:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1710c:	42bc      	cmp	r4, r7
   1710e:	d01e      	beq.n	1714e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   17110:	b1ec      	cbz	r4, 1714e <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   17112:	4620      	mov	r0, r4
   17114:	f006 feee 	bl	1def4 <pended_on_thread>
   17118:	4621      	mov	r1, r4
   1711a:	f006 ff0c 	bl	1df36 <z_priq_dumb_remove>
   1711e:	7b63      	ldrb	r3, [r4, #13]
   17120:	f023 0302 	bic.w	r3, r3, #2
   17124:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   17126:	2600      	movs	r6, #0
   17128:	60a6      	str	r6, [r4, #8]
   1712a:	f104 0018 	add.w	r0, r4, #24
   1712e:	f007 f862 	bl	1e1f6 <z_abort_timeout>
   17132:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   17136:	4620      	mov	r0, r4
   17138:	f7ff fe6c 	bl	16e14 <ready_thread>
   1713c:	e7e5      	b.n	1710a <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1713e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17142:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17144:	4601      	mov	r1, r0
   17146:	4805      	ldr	r0, [pc, #20]	; (1715c <end_thread+0x98>)
   17148:	f006 fef5 	bl	1df36 <z_priq_dumb_remove>
}
   1714c:	e7c9      	b.n	170e2 <end_thread+0x1e>
		update_cache(1);
   1714e:	2001      	movs	r0, #1
   17150:	f7ff fd88 	bl	16c64 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   17154:	4628      	mov	r0, r5
   17156:	f7ff f92b 	bl	163b0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1715a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1715c:	200030d4 	.word	0x200030d4

00017160 <z_sched_init>:
{
   17160:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   17162:	4804      	ldr	r0, [pc, #16]	; (17174 <z_sched_init+0x14>)
   17164:	f006 fff5 	bl	1e152 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17168:	2100      	movs	r1, #0
   1716a:	4608      	mov	r0, r1
   1716c:	f7ff fd0a 	bl	16b84 <k_sched_time_slice_set>
}
   17170:	bd08      	pop	{r3, pc}
   17172:	bf00      	nop
   17174:	200030d0 	.word	0x200030d0

00017178 <z_impl_k_yield>:
{
   17178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1717a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1717e:	f3ef 8611 	mrs	r6, BASEPRI
   17182:	f383 8812 	msr	BASEPRI_MAX, r3
   17186:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   1718a:	4c1c      	ldr	r4, [pc, #112]	; (171fc <z_impl_k_yield+0x84>)
   1718c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1718e:	7b4b      	ldrb	r3, [r1, #13]
   17190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17194:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17196:	f104 0720 	add.w	r7, r4, #32
   1719a:	4638      	mov	r0, r7
   1719c:	f006 fecb 	bl	1df36 <z_priq_dumb_remove>
	queue_thread(_current);
   171a0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   171a2:	7b6b      	ldrb	r3, [r5, #13]
   171a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   171a8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   171aa:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   171ac:	42bc      	cmp	r4, r7
   171ae:	d023      	beq.n	171f8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   171b0:	b16c      	cbz	r4, 171ce <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   171b2:	4621      	mov	r1, r4
   171b4:	4628      	mov	r0, r5
   171b6:	f006 fe9f 	bl	1def8 <z_sched_prio_cmp>
   171ba:	2800      	cmp	r0, #0
   171bc:	dc16      	bgt.n	171ec <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   171be:	b134      	cbz	r4, 171ce <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   171c0:	4b0e      	ldr	r3, [pc, #56]	; (171fc <z_impl_k_yield+0x84>)
   171c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   171c4:	429c      	cmp	r4, r3
   171c6:	d002      	beq.n	171ce <z_impl_k_yield+0x56>
   171c8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   171ca:	2c00      	cmp	r4, #0
   171cc:	d1f0      	bne.n	171b0 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   171ce:	4b0b      	ldr	r3, [pc, #44]	; (171fc <z_impl_k_yield+0x84>)
   171d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   171d2:	f103 0120 	add.w	r1, r3, #32
   171d6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   171d8:	606a      	str	r2, [r5, #4]
	tail->next = node;
   171da:	6015      	str	r5, [r2, #0]
	list->tail = node;
   171dc:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   171de:	2001      	movs	r0, #1
   171e0:	f7ff fd40 	bl	16c64 <update_cache>
   171e4:	4630      	mov	r0, r6
   171e6:	f7f9 fdf9 	bl	10ddc <arch_swap>
}
   171ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   171ec:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   171ee:	606b      	str	r3, [r5, #4]
	node->next = successor;
   171f0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   171f2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   171f4:	6065      	str	r5, [r4, #4]
}
   171f6:	e7f2      	b.n	171de <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   171f8:	2400      	movs	r4, #0
   171fa:	e7d9      	b.n	171b0 <z_impl_k_yield+0x38>
   171fc:	200030b4 	.word	0x200030b4

00017200 <z_tick_sleep>:
{
   17200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   17204:	ea50 0301 	orrs.w	r3, r0, r1
   17208:	d038      	beq.n	1727c <z_tick_sleep+0x7c>
   1720a:	4604      	mov	r4, r0
   1720c:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   1720e:	f06f 0301 	mvn.w	r3, #1
   17212:	1a1b      	subs	r3, r3, r0
   17214:	f04f 32ff 	mov.w	r2, #4294967295
   17218:	eb62 0201 	sbc.w	r2, r2, r1
   1721c:	2b01      	cmp	r3, #1
   1721e:	f172 0300 	sbcs.w	r3, r2, #0
   17222:	db2f      	blt.n	17284 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   17224:	f06f 0501 	mvn.w	r5, #1
   17228:	1a2d      	subs	r5, r5, r0
   1722a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1722e:	f3ef 8811 	mrs	r8, BASEPRI
   17232:	f383 8812 	msr	BASEPRI_MAX, r3
   17236:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1723a:	4f14      	ldr	r7, [pc, #80]	; (1728c <z_tick_sleep+0x8c>)
   1723c:	68b8      	ldr	r0, [r7, #8]
   1723e:	4b14      	ldr	r3, [pc, #80]	; (17290 <z_tick_sleep+0x90>)
   17240:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   17242:	f7ff fe45 	bl	16ed0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   17246:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17248:	4622      	mov	r2, r4
   1724a:	4633      	mov	r3, r6
   1724c:	4911      	ldr	r1, [pc, #68]	; (17294 <z_tick_sleep+0x94>)
   1724e:	3018      	adds	r0, #24
   17250:	f000 f902 	bl	17458 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   17254:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17256:	7b53      	ldrb	r3, [r2, #13]
   17258:	f043 0310 	orr.w	r3, r3, #16
   1725c:	7353      	strb	r3, [r2, #13]
   1725e:	4640      	mov	r0, r8
   17260:	f7f9 fdbc 	bl	10ddc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   17264:	f007 f827 	bl	1e2b6 <sys_clock_tick_get_32>
   17268:	1a28      	subs	r0, r5, r0
   1726a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1726e:	2801      	cmp	r0, #1
   17270:	f173 0300 	sbcs.w	r3, r3, #0
   17274:	da00      	bge.n	17278 <z_tick_sleep+0x78>
	return 0;
   17276:	2000      	movs	r0, #0
}
   17278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1727c:	f7ff ff7c 	bl	17178 <z_impl_k_yield>
		return 0;
   17280:	2000      	movs	r0, #0
   17282:	e7f9      	b.n	17278 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   17284:	f007 f817 	bl	1e2b6 <sys_clock_tick_get_32>
   17288:	1905      	adds	r5, r0, r4
   1728a:	e7ce      	b.n	1722a <z_tick_sleep+0x2a>
   1728c:	200030b4 	.word	0x200030b4
   17290:	200030e8 	.word	0x200030e8
   17294:	0001dfd5 	.word	0x0001dfd5

00017298 <z_impl_k_sleep>:
{
   17298:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1729a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1729e:	bf08      	it	eq
   172a0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   172a4:	d01a      	beq.n	172dc <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   172a6:	f7ff ffab 	bl	17200 <z_tick_sleep>
   172aa:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   172ac:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   172ae:	0151      	lsls	r1, r2, #5
   172b0:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   172b4:	0143      	lsls	r3, r0, #5
   172b6:	1a1b      	subs	r3, r3, r0
   172b8:	eb61 0102 	sbc.w	r1, r1, r2
   172bc:	0088      	lsls	r0, r1, #2
   172be:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   172c2:	009b      	lsls	r3, r3, #2
   172c4:	eb13 030c 	adds.w	r3, r3, ip
   172c8:	eb42 0000 	adc.w	r0, r2, r0
   172cc:	00c0      	lsls	r0, r0, #3
   172ce:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
   172d2:	f3c3 3310 	ubfx	r3, r3, #12, #17
   172d6:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
   172da:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   172dc:	4b03      	ldr	r3, [pc, #12]	; (172ec <z_impl_k_sleep+0x54>)
   172de:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   172e0:	f7ff fe86 	bl	16ff0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   172e4:	f04f 30ff 	mov.w	r0, #4294967295
   172e8:	e7f7      	b.n	172da <z_impl_k_sleep+0x42>
   172ea:	bf00      	nop
   172ec:	200030b4 	.word	0x200030b4

000172f0 <z_impl_z_current_get>:
}
   172f0:	4b01      	ldr	r3, [pc, #4]	; (172f8 <z_impl_z_current_get+0x8>)
   172f2:	6898      	ldr	r0, [r3, #8]
   172f4:	4770      	bx	lr
   172f6:	bf00      	nop
   172f8:	200030b4 	.word	0x200030b4

000172fc <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   172fc:	b538      	push	{r3, r4, r5, lr}
   172fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   17302:	f3ef 8511 	mrs	r5, BASEPRI
   17306:	f383 8812 	msr	BASEPRI_MAX, r3
   1730a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1730e:	7b03      	ldrb	r3, [r0, #12]
   17310:	f013 0f01 	tst.w	r3, #1
   17314:	d109      	bne.n	1732a <z_thread_abort+0x2e>
   17316:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   17318:	7b43      	ldrb	r3, [r0, #13]
   1731a:	f013 0f08 	tst.w	r3, #8
   1731e:	d00f      	beq.n	17340 <z_thread_abort+0x44>
	__asm__ volatile(
   17320:	f385 8811 	msr	BASEPRI, r5
   17324:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   17328:	e009      	b.n	1733e <z_thread_abort+0x42>
   1732a:	f385 8811 	msr	BASEPRI, r5
   1732e:	f3bf 8f6f 	isb	sy
		k_panic();
   17332:	4040      	eors	r0, r0
   17334:	f380 8811 	msr	BASEPRI, r0
   17338:	f04f 0004 	mov.w	r0, #4
   1733c:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1733e:	bd38      	pop	{r3, r4, r5, pc}
	end_thread(thread);
   17340:	f7ff fec0 	bl	170c4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   17344:	4b08      	ldr	r3, [pc, #32]	; (17368 <z_thread_abort+0x6c>)
   17346:	689b      	ldr	r3, [r3, #8]
   17348:	42a3      	cmp	r3, r4
   1734a:	d004      	beq.n	17356 <z_thread_abort+0x5a>
   1734c:	f385 8811 	msr	BASEPRI, r5
   17350:	f3bf 8f6f 	isb	sy
   17354:	e7f3      	b.n	1733e <z_thread_abort+0x42>
   17356:	f3ef 8305 	mrs	r3, IPSR
   1735a:	2b00      	cmp	r3, #0
   1735c:	d1f6      	bne.n	1734c <z_thread_abort+0x50>
   1735e:	4628      	mov	r0, r5
   17360:	f7f9 fd3c 	bl	10ddc <arch_swap>
	return ret;
   17364:	e7f2      	b.n	1734c <z_thread_abort+0x50>
   17366:	bf00      	nop
   17368:	200030b4 	.word	0x200030b4

0001736c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1736c:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   17370:	b083      	sub	sp, #12
   17372:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   17374:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   17378:	e9cd bc00 	strd	fp, ip, [sp]
   1737c:	f7ff fdc4 	bl	16f08 <z_pend_curr>

	if (data != NULL) {
   17380:	b11c      	cbz	r4, 1738a <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   17382:	4b03      	ldr	r3, [pc, #12]	; (17390 <z_sched_wait+0x24>)
   17384:	689b      	ldr	r3, [r3, #8]
   17386:	695b      	ldr	r3, [r3, #20]
   17388:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1738a:	b003      	add	sp, #12
   1738c:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   17390:	200030b4 	.word	0x200030b4

00017394 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   17394:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   17396:	4806      	ldr	r0, [pc, #24]	; (173b0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   17398:	4a06      	ldr	r2, [pc, #24]	; (173b4 <z_data_copy+0x20>)
   1739a:	1a12      	subs	r2, r2, r0
   1739c:	4906      	ldr	r1, [pc, #24]	; (173b8 <z_data_copy+0x24>)
   1739e:	f006 fb5c 	bl	1da5a <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   173a2:	4a06      	ldr	r2, [pc, #24]	; (173bc <z_data_copy+0x28>)
   173a4:	4906      	ldr	r1, [pc, #24]	; (173c0 <z_data_copy+0x2c>)
   173a6:	4807      	ldr	r0, [pc, #28]	; (173c4 <z_data_copy+0x30>)
   173a8:	f006 fb57 	bl	1da5a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   173ac:	bd08      	pop	{r3, pc}
   173ae:	bf00      	nop
   173b0:	20000000 	.word	0x20000000
   173b4:	20000a7c 	.word	0x20000a7c
   173b8:	0001f0a0 	.word	0x0001f0a0
   173bc:	00000000 	.word	0x00000000
   173c0:	0001f0a0 	.word	0x0001f0a0
   173c4:	20000000 	.word	0x20000000

000173c8 <first>:
	return list->head == list;
   173c8:	4b03      	ldr	r3, [pc, #12]	; (173d8 <first+0x10>)
   173ca:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   173cc:	4298      	cmp	r0, r3
   173ce:	d000      	beq.n	173d2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   173d0:	4770      	bx	lr
   173d2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   173d4:	e7fc      	b.n	173d0 <first+0x8>
   173d6:	bf00      	nop
   173d8:	200008e8 	.word	0x200008e8

000173dc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   173dc:	b130      	cbz	r0, 173ec <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   173de:	4a04      	ldr	r2, [pc, #16]	; (173f0 <next+0x14>)
   173e0:	6852      	ldr	r2, [r2, #4]
   173e2:	4290      	cmp	r0, r2
   173e4:	d001      	beq.n	173ea <next+0xe>
   173e6:	6800      	ldr	r0, [r0, #0]
   173e8:	4770      	bx	lr
   173ea:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   173ec:	4770      	bx	lr
   173ee:	bf00      	nop
   173f0:	200008e8 	.word	0x200008e8

000173f4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   173f4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   173f6:	4b04      	ldr	r3, [pc, #16]	; (17408 <elapsed+0x14>)
   173f8:	681b      	ldr	r3, [r3, #0]
   173fa:	b10b      	cbz	r3, 17400 <elapsed+0xc>
   173fc:	2000      	movs	r0, #0
}
   173fe:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   17400:	f7fc fdc8 	bl	13f94 <sys_clock_elapsed>
   17404:	e7fb      	b.n	173fe <elapsed+0xa>
   17406:	bf00      	nop
   17408:	200030f4 	.word	0x200030f4

0001740c <next_timeout>:

static int32_t next_timeout(void)
{
   1740c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1740e:	f7ff ffdb 	bl	173c8 <first>
   17412:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   17414:	f7ff ffee 	bl	173f4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   17418:	b17c      	cbz	r4, 1743a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1741a:	6923      	ldr	r3, [r4, #16]
   1741c:	6962      	ldr	r2, [r4, #20]
   1741e:	1a1b      	subs	r3, r3, r0
   17420:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   17424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   17428:	f170 0200 	sbcs.w	r2, r0, #0
   1742c:	da08      	bge.n	17440 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1742e:	2800      	cmp	r0, #0
   17430:	db01      	blt.n	17436 <next_timeout+0x2a>
   17432:	4618      	mov	r0, r3
   17434:	e006      	b.n	17444 <next_timeout+0x38>
   17436:	2300      	movs	r3, #0
   17438:	e7fb      	b.n	17432 <next_timeout+0x26>
		ret = MAX_WAIT;
   1743a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1743e:	e001      	b.n	17444 <next_timeout+0x38>
   17440:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   17444:	4b03      	ldr	r3, [pc, #12]	; (17454 <next_timeout+0x48>)
   17446:	691b      	ldr	r3, [r3, #16]
   17448:	b113      	cbz	r3, 17450 <next_timeout+0x44>
   1744a:	4283      	cmp	r3, r0
   1744c:	da00      	bge.n	17450 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   1744e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   17450:	bd10      	pop	{r4, pc}
   17452:	bf00      	nop
   17454:	200030b4 	.word	0x200030b4

00017458 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17458:	f1b3 3fff 	cmp.w	r3, #4294967295
   1745c:	bf08      	it	eq
   1745e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   17462:	d07d      	beq.n	17560 <z_add_timeout+0x108>
{
   17464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17468:	4604      	mov	r4, r0
   1746a:	4692      	mov	sl, r2
   1746c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1746e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   17470:	2300      	movs	r3, #0
	__asm__ volatile(
   17472:	f04f 0240 	mov.w	r2, #64	; 0x40
   17476:	f3ef 8711 	mrs	r7, BASEPRI
   1747a:	f382 8812 	msr	BASEPRI_MAX, r2
   1747e:	f3bf 8f6f 	isb	sy
   17482:	e021      	b.n	174c8 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   17484:	f11a 0801 	adds.w	r8, sl, #1
   17488:	f145 0900 	adc.w	r9, r5, #0
   1748c:	f7ff ffb2 	bl	173f4 <elapsed>
   17490:	eb18 0300 	adds.w	r3, r8, r0
   17494:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   17498:	6123      	str	r3, [r4, #16]
   1749a:	6160      	str	r0, [r4, #20]
   1749c:	e036      	b.n	1750c <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1749e:	1a51      	subs	r1, r2, r1
   174a0:	eb66 0303 	sbc.w	r3, r6, r3
   174a4:	6101      	str	r1, [r0, #16]
   174a6:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   174a8:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   174aa:	6063      	str	r3, [r4, #4]
	node->next = successor;
   174ac:	6020      	str	r0, [r4, #0]
	prev->next = node;
   174ae:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   174b0:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   174b2:	2800      	cmp	r0, #0
   174b4:	d03e      	beq.n	17534 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   174b6:	f7ff ff87 	bl	173c8 <first>
   174ba:	4284      	cmp	r4, r0
   174bc:	d041      	beq.n	17542 <z_add_timeout+0xea>
	__asm__ volatile(
   174be:	f387 8811 	msr	BASEPRI, r7
   174c2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   174c6:	2301      	movs	r3, #1
   174c8:	2b00      	cmp	r3, #0
   174ca:	d147      	bne.n	1755c <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   174cc:	4653      	mov	r3, sl
   174ce:	f06f 0101 	mvn.w	r1, #1
   174d2:	ebb1 010a 	subs.w	r1, r1, sl
   174d6:	f04f 30ff 	mov.w	r0, #4294967295
   174da:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   174de:	2a00      	cmp	r2, #0
   174e0:	dbd0      	blt.n	17484 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   174e2:	4a20      	ldr	r2, [pc, #128]	; (17564 <z_add_timeout+0x10c>)
   174e4:	6811      	ldr	r1, [r2, #0]
   174e6:	6852      	ldr	r2, [r2, #4]
   174e8:	185b      	adds	r3, r3, r1
   174ea:	eb42 0205 	adc.w	r2, r2, r5
   174ee:	f06f 0101 	mvn.w	r1, #1
   174f2:	1acb      	subs	r3, r1, r3
   174f4:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
   174f8:	4618      	mov	r0, r3
   174fa:	4611      	mov	r1, r2
   174fc:	2b01      	cmp	r3, #1
   174fe:	f172 0300 	sbcs.w	r3, r2, #0
   17502:	da01      	bge.n	17508 <z_add_timeout+0xb0>
   17504:	2001      	movs	r0, #1
   17506:	2100      	movs	r1, #0
   17508:	6120      	str	r0, [r4, #16]
   1750a:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1750c:	f7ff ff5c 	bl	173c8 <first>
   17510:	2800      	cmp	r0, #0
   17512:	d0ce      	beq.n	174b2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
   17514:	6902      	ldr	r2, [r0, #16]
   17516:	6946      	ldr	r6, [r0, #20]
   17518:	6921      	ldr	r1, [r4, #16]
   1751a:	6963      	ldr	r3, [r4, #20]
   1751c:	4291      	cmp	r1, r2
   1751e:	eb73 0c06 	sbcs.w	ip, r3, r6
   17522:	dbbc      	blt.n	1749e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   17524:	1a89      	subs	r1, r1, r2
   17526:	eb63 0306 	sbc.w	r3, r3, r6
   1752a:	6121      	str	r1, [r4, #16]
   1752c:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1752e:	f7ff ff55 	bl	173dc <next>
   17532:	e7ed      	b.n	17510 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
   17534:	4b0c      	ldr	r3, [pc, #48]	; (17568 <z_add_timeout+0x110>)
   17536:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   17538:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   1753a:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1753c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1753e:	605c      	str	r4, [r3, #4]
}
   17540:	e7b9      	b.n	174b6 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   17542:	f7ff ff63 	bl	1740c <next_timeout>

			if (next_time == 0 ||
   17546:	4603      	mov	r3, r0
   17548:	b118      	cbz	r0, 17552 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
   1754a:	4a08      	ldr	r2, [pc, #32]	; (1756c <z_add_timeout+0x114>)
   1754c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1754e:	4282      	cmp	r2, r0
   17550:	d0b5      	beq.n	174be <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
   17552:	2100      	movs	r1, #0
   17554:	4618      	mov	r0, r3
   17556:	f7fc fceb 	bl	13f30 <sys_clock_set_timeout>
   1755a:	e7b0      	b.n	174be <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17560:	4770      	bx	lr
   17562:	bf00      	nop
   17564:	20001d10 	.word	0x20001d10
   17568:	200008e8 	.word	0x200008e8
   1756c:	200030b4 	.word	0x200030b4

00017570 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   17570:	b570      	push	{r4, r5, r6, lr}
   17572:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   17574:	f7ff fbf6 	bl	16d64 <z_time_slice>
	__asm__ volatile(
   17578:	f04f 0340 	mov.w	r3, #64	; 0x40
   1757c:	f3ef 8611 	mrs	r6, BASEPRI
   17580:	f383 8812 	msr	BASEPRI_MAX, r3
   17584:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   17588:	4b28      	ldr	r3, [pc, #160]	; (1762c <sys_clock_announce+0xbc>)
   1758a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1758c:	e021      	b.n	175d2 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1758e:	4a28      	ldr	r2, [pc, #160]	; (17630 <sys_clock_announce+0xc0>)
   17590:	6813      	ldr	r3, [r2, #0]
   17592:	6851      	ldr	r1, [r2, #4]
   17594:	195b      	adds	r3, r3, r5
   17596:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   1759a:	6013      	str	r3, [r2, #0]
   1759c:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   1759e:	2200      	movs	r2, #0
   175a0:	2300      	movs	r3, #0
   175a2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   175a6:	4620      	mov	r0, r4
   175a8:	f006 fe0e 	bl	1e1c8 <remove_timeout>
	__asm__ volatile(
   175ac:	f386 8811 	msr	BASEPRI, r6
   175b0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   175b4:	68a3      	ldr	r3, [r4, #8]
   175b6:	4620      	mov	r0, r4
   175b8:	4798      	blx	r3
	__asm__ volatile(
   175ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   175be:	f3ef 8611 	mrs	r6, BASEPRI
   175c2:	f383 8812 	msr	BASEPRI_MAX, r3
   175c6:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   175ca:	4a18      	ldr	r2, [pc, #96]	; (1762c <sys_clock_announce+0xbc>)
   175cc:	6813      	ldr	r3, [r2, #0]
   175ce:	1b5b      	subs	r3, r3, r5
   175d0:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   175d2:	f7ff fef9 	bl	173c8 <first>
   175d6:	4604      	mov	r4, r0
   175d8:	b140      	cbz	r0, 175ec <sys_clock_announce+0x7c>
   175da:	6905      	ldr	r5, [r0, #16]
   175dc:	6942      	ldr	r2, [r0, #20]
   175de:	4b13      	ldr	r3, [pc, #76]	; (1762c <sys_clock_announce+0xbc>)
   175e0:	681b      	ldr	r3, [r3, #0]
   175e2:	17d9      	asrs	r1, r3, #31
   175e4:	42ab      	cmp	r3, r5
   175e6:	eb71 0302 	sbcs.w	r3, r1, r2
   175ea:	dad0      	bge.n	1758e <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   175ec:	b144      	cbz	r4, 17600 <sys_clock_announce+0x90>
		first()->dticks -= announce_remaining;
   175ee:	4b0f      	ldr	r3, [pc, #60]	; (1762c <sys_clock_announce+0xbc>)
   175f0:	6819      	ldr	r1, [r3, #0]
   175f2:	6923      	ldr	r3, [r4, #16]
   175f4:	6962      	ldr	r2, [r4, #20]
   175f6:	1a5b      	subs	r3, r3, r1
   175f8:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   175fc:	6123      	str	r3, [r4, #16]
   175fe:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   17600:	4a0b      	ldr	r2, [pc, #44]	; (17630 <sys_clock_announce+0xc0>)
   17602:	4d0a      	ldr	r5, [pc, #40]	; (1762c <sys_clock_announce+0xbc>)
   17604:	6828      	ldr	r0, [r5, #0]
   17606:	6813      	ldr	r3, [r2, #0]
   17608:	6851      	ldr	r1, [r2, #4]
   1760a:	181b      	adds	r3, r3, r0
   1760c:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   17610:	6013      	str	r3, [r2, #0]
   17612:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   17614:	2400      	movs	r4, #0
   17616:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   17618:	f7ff fef8 	bl	1740c <next_timeout>
   1761c:	4621      	mov	r1, r4
   1761e:	f7fc fc87 	bl	13f30 <sys_clock_set_timeout>
	__asm__ volatile(
   17622:	f386 8811 	msr	BASEPRI, r6
   17626:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1762a:	bd70      	pop	{r4, r5, r6, pc}
   1762c:	200030f4 	.word	0x200030f4
   17630:	20001d10 	.word	0x20001d10

00017634 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   17634:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   17636:	2200      	movs	r2, #0
	__asm__ volatile(
   17638:	f04f 0340 	mov.w	r3, #64	; 0x40
   1763c:	f3ef 8411 	mrs	r4, BASEPRI
   17640:	f383 8812 	msr	BASEPRI_MAX, r3
   17644:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   17648:	4613      	mov	r3, r2
   1764a:	4611      	mov	r1, r2
   1764c:	e00c      	b.n	17668 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   1764e:	f7ff fed1 	bl	173f4 <elapsed>
   17652:	4a07      	ldr	r2, [pc, #28]	; (17670 <sys_clock_tick_get+0x3c>)
   17654:	6813      	ldr	r3, [r2, #0]
   17656:	6851      	ldr	r1, [r2, #4]
   17658:	18c3      	adds	r3, r0, r3
   1765a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   1765e:	f384 8811 	msr	BASEPRI, r4
   17662:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   17666:	2201      	movs	r2, #1
   17668:	2a00      	cmp	r2, #0
   1766a:	d0f0      	beq.n	1764e <sys_clock_tick_get+0x1a>
	}
	return t;
}
   1766c:	4618      	mov	r0, r3
   1766e:	bd10      	pop	{r4, pc}
   17670:	20001d10 	.word	0x20001d10

00017674 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   17674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17678:	b087      	sub	sp, #28
   1767a:	4682      	mov	sl, r0
   1767c:	460f      	mov	r7, r1
   1767e:	4693      	mov	fp, r2
   17680:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   17682:	2500      	movs	r5, #0
	int events_registered = 0;
   17684:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   17686:	e02f      	b.n	176e8 <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
   17688:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1768a:	689b      	ldr	r3, [r3, #8]
   1768c:	b1cb      	cbz	r3, 176c2 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1768e:	f04f 0902 	mov.w	r9, #2
			return true;
   17692:	2301      	movs	r3, #1
   17694:	e015      	b.n	176c2 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   17696:	6923      	ldr	r3, [r4, #16]
	return list->head;
   17698:	681b      	ldr	r3, [r3, #0]
   1769a:	b193      	cbz	r3, 176c2 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1769c:	f04f 0904 	mov.w	r9, #4
			return true;
   176a0:	2301      	movs	r3, #1
   176a2:	e00e      	b.n	176c2 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
   176a4:	6923      	ldr	r3, [r4, #16]
   176a6:	689b      	ldr	r3, [r3, #8]
   176a8:	b15b      	cbz	r3, 176c2 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
   176aa:	f04f 0901 	mov.w	r9, #1
			return true;
   176ae:	464b      	mov	r3, r9
   176b0:	e007      	b.n	176c2 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
   176b2:	6923      	ldr	r3, [r4, #16]
   176b4:	6a1b      	ldr	r3, [r3, #32]
   176b6:	b123      	cbz	r3, 176c2 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   176b8:	f04f 0910 	mov.w	r9, #16
			return true;
   176bc:	2301      	movs	r3, #1
   176be:	e000      	b.n	176c2 <register_events+0x4e>
	switch (event->type) {
   176c0:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
   176c2:	2b00      	cmp	r3, #0
   176c4:	d03a      	beq.n	1773c <register_events+0xc8>
	event->poller = NULL;
   176c6:	2100      	movs	r1, #0
   176c8:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   176ca:	68e3      	ldr	r3, [r4, #12]
   176cc:	f3c3 3245 	ubfx	r2, r3, #13, #6
   176d0:	ea49 0202 	orr.w	r2, r9, r2
   176d4:	f362 3352 	bfi	r3, r2, #13, #6
   176d8:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
   176da:	f88b 1000 	strb.w	r1, [fp]
   176de:	f386 8811 	msr	BASEPRI, r6
   176e2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   176e6:	3501      	adds	r5, #1
   176e8:	42bd      	cmp	r5, r7
   176ea:	f280 81b9 	bge.w	17a60 <register_events+0x3ec>
	__asm__ volatile(
   176ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   176f2:	f3ef 8611 	mrs	r6, BASEPRI
   176f6:	f383 8812 	msr	BASEPRI_MAX, r3
   176fa:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   176fe:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   17702:	ea4f 0884 	mov.w	r8, r4, lsl #2
   17706:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
   1770a:	7b63      	ldrb	r3, [r4, #13]
   1770c:	f003 031f 	and.w	r3, r3, #31
   17710:	3b01      	subs	r3, #1
   17712:	2b07      	cmp	r3, #7
   17714:	d8d4      	bhi.n	176c0 <register_events+0x4c>
   17716:	a201      	add	r2, pc, #4	; (adr r2, 1771c <register_events+0xa8>)
   17718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1771c:	000176a5 	.word	0x000176a5
   17720:	00017689 	.word	0x00017689
   17724:	000176c1 	.word	0x000176c1
   17728:	00017697 	.word	0x00017697
   1772c:	000176c1 	.word	0x000176c1
   17730:	000176c1 	.word	0x000176c1
   17734:	000176c1 	.word	0x000176c1
   17738:	000176b3 	.word	0x000176b3
		} else if (!just_check && poller->is_polling) {
   1773c:	9b00      	ldr	r3, [sp, #0]
   1773e:	2b00      	cmp	r3, #0
   17740:	d1cd      	bne.n	176de <register_events+0x6a>
   17742:	f89b 3000 	ldrb.w	r3, [fp]
   17746:	2b00      	cmp	r3, #0
   17748:	d0c9      	beq.n	176de <register_events+0x6a>
	switch (event->type) {
   1774a:	7b63      	ldrb	r3, [r4, #13]
   1774c:	f003 031f 	and.w	r3, r3, #31
   17750:	3b01      	subs	r3, #1
   17752:	2b07      	cmp	r3, #7
   17754:	d848      	bhi.n	177e8 <register_events+0x174>
   17756:	e8df f013 	tbh	[pc, r3, lsl #1]
   1775a:	00cb      	.short	0x00cb
   1775c:	00470008 	.word	0x00470008
   17760:	0047006d 	.word	0x0047006d
   17764:	00470047 	.word	0x00470047
   17768:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
   1776a:	6923      	ldr	r3, [r4, #16]
   1776c:	9304      	str	r3, [sp, #16]
   1776e:	f103 0210 	add.w	r2, r3, #16
   17772:	9202      	str	r2, [sp, #8]
	return list->head == list;
   17774:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   17776:	429a      	cmp	r2, r3
   17778:	d02f      	beq.n	177da <register_events+0x166>
   1777a:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   1777c:	2b00      	cmp	r3, #0
   1777e:	d02c      	beq.n	177da <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   17780:	6898      	ldr	r0, [r3, #8]
   17782:	f006 fdce 	bl	1e322 <poller_thread>
   17786:	9005      	str	r0, [sp, #20]
   17788:	4658      	mov	r0, fp
   1778a:	f006 fdca 	bl	1e322 <poller_thread>
   1778e:	4601      	mov	r1, r0
   17790:	9003      	str	r0, [sp, #12]
   17792:	9805      	ldr	r0, [sp, #20]
   17794:	f006 fbb0 	bl	1def8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   17798:	2800      	cmp	r0, #0
   1779a:	dc1e      	bgt.n	177da <register_events+0x166>
	return list->head == list;
   1779c:	9b04      	ldr	r3, [sp, #16]
   1779e:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   177a0:	9a02      	ldr	r2, [sp, #8]
   177a2:	429a      	cmp	r2, r3
   177a4:	d030      	beq.n	17808 <register_events+0x194>
   177a6:	9404      	str	r4, [sp, #16]
   177a8:	9505      	str	r5, [sp, #20]
   177aa:	9d02      	ldr	r5, [sp, #8]
   177ac:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   177ae:	2c00      	cmp	r4, #0
   177b0:	d030      	beq.n	17814 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
   177b2:	68a0      	ldr	r0, [r4, #8]
   177b4:	f006 fdb5 	bl	1e322 <poller_thread>
   177b8:	4601      	mov	r1, r0
   177ba:	9803      	ldr	r0, [sp, #12]
   177bc:	f006 fb9c 	bl	1def8 <z_sched_prio_cmp>
   177c0:	2800      	cmp	r0, #0
   177c2:	dc17      	bgt.n	177f4 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   177c4:	2c00      	cmp	r4, #0
   177c6:	d028      	beq.n	1781a <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
   177c8:	686b      	ldr	r3, [r5, #4]
   177ca:	429c      	cmp	r4, r3
   177cc:	d02f      	beq.n	1782e <register_events+0x1ba>
   177ce:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   177d0:	2c00      	cmp	r4, #0
   177d2:	d1ec      	bne.n	177ae <register_events+0x13a>
   177d4:	9c04      	ldr	r4, [sp, #16]
   177d6:	9d05      	ldr	r5, [sp, #20]
   177d8:	e021      	b.n	1781e <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
   177da:	9a02      	ldr	r2, [sp, #8]
   177dc:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   177de:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   177e2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   177e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   177e6:	6054      	str	r4, [r2, #4]
	event->poller = poller;
   177e8:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
   177ec:	9b01      	ldr	r3, [sp, #4]
   177ee:	3301      	adds	r3, #1
   177f0:	9301      	str	r3, [sp, #4]
   177f2:	e774      	b.n	176de <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
   177f4:	9d05      	ldr	r5, [sp, #20]
   177f6:	4622      	mov	r2, r4
   177f8:	9c04      	ldr	r4, [sp, #16]
   177fa:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   177fc:	6063      	str	r3, [r4, #4]
	node->next = successor;
   177fe:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   17802:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   17804:	6054      	str	r4, [r2, #4]
			return;
   17806:	e7ef      	b.n	177e8 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17808:	2300      	movs	r3, #0
   1780a:	9404      	str	r4, [sp, #16]
   1780c:	9505      	str	r5, [sp, #20]
   1780e:	9d02      	ldr	r5, [sp, #8]
   17810:	461c      	mov	r4, r3
   17812:	e7cc      	b.n	177ae <register_events+0x13a>
   17814:	9c04      	ldr	r4, [sp, #16]
   17816:	9d05      	ldr	r5, [sp, #20]
   17818:	e001      	b.n	1781e <register_events+0x1aa>
   1781a:	9c04      	ldr	r4, [sp, #16]
   1781c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   1781e:	9a02      	ldr	r2, [sp, #8]
   17820:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17822:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   17826:	6063      	str	r3, [r4, #4]
	tail->next = node;
   17828:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1782a:	6054      	str	r4, [r2, #4]
}
   1782c:	e7dc      	b.n	177e8 <register_events+0x174>
   1782e:	9c04      	ldr	r4, [sp, #16]
   17830:	9d05      	ldr	r5, [sp, #20]
   17832:	e7f4      	b.n	1781e <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
   17834:	6923      	ldr	r3, [r4, #16]
   17836:	9304      	str	r3, [sp, #16]
   17838:	f103 0210 	add.w	r2, r3, #16
   1783c:	9202      	str	r2, [sp, #8]
	return list->head == list;
   1783e:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   17840:	429a      	cmp	r2, r3
   17842:	d02d      	beq.n	178a0 <register_events+0x22c>
   17844:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   17846:	b35b      	cbz	r3, 178a0 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   17848:	6898      	ldr	r0, [r3, #8]
   1784a:	f006 fd6a 	bl	1e322 <poller_thread>
   1784e:	9005      	str	r0, [sp, #20]
   17850:	4658      	mov	r0, fp
   17852:	f006 fd66 	bl	1e322 <poller_thread>
   17856:	4601      	mov	r1, r0
   17858:	9003      	str	r0, [sp, #12]
   1785a:	9805      	ldr	r0, [sp, #20]
   1785c:	f006 fb4c 	bl	1def8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   17860:	2800      	cmp	r0, #0
   17862:	dc1d      	bgt.n	178a0 <register_events+0x22c>
	return list->head == list;
   17864:	9b04      	ldr	r3, [sp, #16]
   17866:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17868:	9a02      	ldr	r2, [sp, #8]
   1786a:	429a      	cmp	r2, r3
   1786c:	d02a      	beq.n	178c4 <register_events+0x250>
   1786e:	9404      	str	r4, [sp, #16]
   17870:	9505      	str	r5, [sp, #20]
   17872:	9d02      	ldr	r5, [sp, #8]
   17874:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17876:	2c00      	cmp	r4, #0
   17878:	d02a      	beq.n	178d0 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
   1787a:	68a0      	ldr	r0, [r4, #8]
   1787c:	f006 fd51 	bl	1e322 <poller_thread>
   17880:	4601      	mov	r1, r0
   17882:	9803      	ldr	r0, [sp, #12]
   17884:	f006 fb38 	bl	1def8 <z_sched_prio_cmp>
   17888:	2800      	cmp	r0, #0
   1788a:	dc11      	bgt.n	178b0 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1788c:	b31c      	cbz	r4, 178d6 <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
   1788e:	686b      	ldr	r3, [r5, #4]
   17890:	429c      	cmp	r4, r3
   17892:	d02a      	beq.n	178ea <register_events+0x276>
   17894:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17896:	2c00      	cmp	r4, #0
   17898:	d1ed      	bne.n	17876 <register_events+0x202>
   1789a:	9c04      	ldr	r4, [sp, #16]
   1789c:	9d05      	ldr	r5, [sp, #20]
   1789e:	e01c      	b.n	178da <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
   178a0:	9a02      	ldr	r2, [sp, #8]
   178a2:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   178a4:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   178a8:	6063      	str	r3, [r4, #4]
	tail->next = node;
   178aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   178ac:	6054      	str	r4, [r2, #4]
		return;
   178ae:	e79b      	b.n	177e8 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   178b0:	9d05      	ldr	r5, [sp, #20]
   178b2:	4622      	mov	r2, r4
   178b4:	9c04      	ldr	r4, [sp, #16]
   178b6:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   178b8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   178ba:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   178be:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   178c0:	6054      	str	r4, [r2, #4]
			return;
   178c2:	e791      	b.n	177e8 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   178c4:	2300      	movs	r3, #0
   178c6:	9404      	str	r4, [sp, #16]
   178c8:	9505      	str	r5, [sp, #20]
   178ca:	9d02      	ldr	r5, [sp, #8]
   178cc:	461c      	mov	r4, r3
   178ce:	e7d2      	b.n	17876 <register_events+0x202>
   178d0:	9c04      	ldr	r4, [sp, #16]
   178d2:	9d05      	ldr	r5, [sp, #20]
   178d4:	e001      	b.n	178da <register_events+0x266>
   178d6:	9c04      	ldr	r4, [sp, #16]
   178d8:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   178da:	9a02      	ldr	r2, [sp, #8]
   178dc:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   178de:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   178e2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   178e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   178e6:	6054      	str	r4, [r2, #4]
}
   178e8:	e77e      	b.n	177e8 <register_events+0x174>
   178ea:	9c04      	ldr	r4, [sp, #16]
   178ec:	9d05      	ldr	r5, [sp, #20]
   178ee:	e7f4      	b.n	178da <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
   178f0:	6922      	ldr	r2, [r4, #16]
   178f2:	9202      	str	r2, [sp, #8]
	return list->head == list;
   178f4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   178f6:	429a      	cmp	r2, r3
   178f8:	d02c      	beq.n	17954 <register_events+0x2e0>
   178fa:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   178fc:	b353      	cbz	r3, 17954 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   178fe:	6898      	ldr	r0, [r3, #8]
   17900:	f006 fd0f 	bl	1e322 <poller_thread>
   17904:	9004      	str	r0, [sp, #16]
   17906:	4658      	mov	r0, fp
   17908:	f006 fd0b 	bl	1e322 <poller_thread>
   1790c:	4601      	mov	r1, r0
   1790e:	9003      	str	r0, [sp, #12]
   17910:	9804      	ldr	r0, [sp, #16]
   17912:	f006 faf1 	bl	1def8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   17916:	2800      	cmp	r0, #0
   17918:	dc1c      	bgt.n	17954 <register_events+0x2e0>
	return list->head == list;
   1791a:	9b02      	ldr	r3, [sp, #8]
   1791c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1791e:	4293      	cmp	r3, r2
   17920:	d02a      	beq.n	17978 <register_events+0x304>
   17922:	9404      	str	r4, [sp, #16]
   17924:	9505      	str	r5, [sp, #20]
   17926:	9d02      	ldr	r5, [sp, #8]
   17928:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1792a:	2c00      	cmp	r4, #0
   1792c:	d02a      	beq.n	17984 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
   1792e:	68a0      	ldr	r0, [r4, #8]
   17930:	f006 fcf7 	bl	1e322 <poller_thread>
   17934:	4601      	mov	r1, r0
   17936:	9803      	ldr	r0, [sp, #12]
   17938:	f006 fade 	bl	1def8 <z_sched_prio_cmp>
   1793c:	2800      	cmp	r0, #0
   1793e:	dc11      	bgt.n	17964 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17940:	b31c      	cbz	r4, 1798a <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
   17942:	686b      	ldr	r3, [r5, #4]
   17944:	429c      	cmp	r4, r3
   17946:	d02a      	beq.n	1799e <register_events+0x32a>
   17948:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1794a:	2c00      	cmp	r4, #0
   1794c:	d1ed      	bne.n	1792a <register_events+0x2b6>
   1794e:	9c04      	ldr	r4, [sp, #16]
   17950:	9d05      	ldr	r5, [sp, #20]
   17952:	e01c      	b.n	1798e <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
   17954:	9a02      	ldr	r2, [sp, #8]
   17956:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17958:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1795c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1795e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17960:	6054      	str	r4, [r2, #4]
		return;
   17962:	e741      	b.n	177e8 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   17964:	9d05      	ldr	r5, [sp, #20]
   17966:	4622      	mov	r2, r4
   17968:	9c04      	ldr	r4, [sp, #16]
   1796a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   1796c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1796e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   17972:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   17974:	6054      	str	r4, [r2, #4]
			return;
   17976:	e737      	b.n	177e8 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17978:	2300      	movs	r3, #0
   1797a:	9404      	str	r4, [sp, #16]
   1797c:	9505      	str	r5, [sp, #20]
   1797e:	9d02      	ldr	r5, [sp, #8]
   17980:	461c      	mov	r4, r3
   17982:	e7d2      	b.n	1792a <register_events+0x2b6>
   17984:	9c04      	ldr	r4, [sp, #16]
   17986:	9d05      	ldr	r5, [sp, #20]
   17988:	e001      	b.n	1798e <register_events+0x31a>
   1798a:	9c04      	ldr	r4, [sp, #16]
   1798c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   1798e:	9a02      	ldr	r2, [sp, #8]
   17990:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17992:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   17996:	6063      	str	r3, [r4, #4]
	tail->next = node;
   17998:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1799a:	6054      	str	r4, [r2, #4]
}
   1799c:	e724      	b.n	177e8 <register_events+0x174>
   1799e:	9c04      	ldr	r4, [sp, #16]
   179a0:	9d05      	ldr	r5, [sp, #20]
   179a2:	e7f4      	b.n	1798e <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
   179a4:	6923      	ldr	r3, [r4, #16]
   179a6:	9304      	str	r3, [sp, #16]
   179a8:	f103 0224 	add.w	r2, r3, #36	; 0x24
   179ac:	9202      	str	r2, [sp, #8]
	return list->head == list;
   179ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   179b0:	429a      	cmp	r2, r3
   179b2:	d02d      	beq.n	17a10 <register_events+0x39c>
   179b4:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   179b6:	b35b      	cbz	r3, 17a10 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   179b8:	6898      	ldr	r0, [r3, #8]
   179ba:	f006 fcb2 	bl	1e322 <poller_thread>
   179be:	9005      	str	r0, [sp, #20]
   179c0:	4658      	mov	r0, fp
   179c2:	f006 fcae 	bl	1e322 <poller_thread>
   179c6:	4601      	mov	r1, r0
   179c8:	9003      	str	r0, [sp, #12]
   179ca:	9805      	ldr	r0, [sp, #20]
   179cc:	f006 fa94 	bl	1def8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   179d0:	2800      	cmp	r0, #0
   179d2:	dc1d      	bgt.n	17a10 <register_events+0x39c>
	return list->head == list;
   179d4:	9b04      	ldr	r3, [sp, #16]
   179d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   179d8:	9a02      	ldr	r2, [sp, #8]
   179da:	429a      	cmp	r2, r3
   179dc:	d02a      	beq.n	17a34 <register_events+0x3c0>
   179de:	9404      	str	r4, [sp, #16]
   179e0:	9505      	str	r5, [sp, #20]
   179e2:	9d02      	ldr	r5, [sp, #8]
   179e4:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   179e6:	2c00      	cmp	r4, #0
   179e8:	d02a      	beq.n	17a40 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
   179ea:	68a0      	ldr	r0, [r4, #8]
   179ec:	f006 fc99 	bl	1e322 <poller_thread>
   179f0:	4601      	mov	r1, r0
   179f2:	9803      	ldr	r0, [sp, #12]
   179f4:	f006 fa80 	bl	1def8 <z_sched_prio_cmp>
   179f8:	2800      	cmp	r0, #0
   179fa:	dc11      	bgt.n	17a20 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   179fc:	b31c      	cbz	r4, 17a46 <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
   179fe:	686b      	ldr	r3, [r5, #4]
   17a00:	429c      	cmp	r4, r3
   17a02:	d02a      	beq.n	17a5a <register_events+0x3e6>
   17a04:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17a06:	2c00      	cmp	r4, #0
   17a08:	d1ed      	bne.n	179e6 <register_events+0x372>
   17a0a:	9c04      	ldr	r4, [sp, #16]
   17a0c:	9d05      	ldr	r5, [sp, #20]
   17a0e:	e01c      	b.n	17a4a <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
   17a10:	9a02      	ldr	r2, [sp, #8]
   17a12:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17a14:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   17a18:	6063      	str	r3, [r4, #4]
	tail->next = node;
   17a1a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17a1c:	6054      	str	r4, [r2, #4]
		return;
   17a1e:	e6e3      	b.n	177e8 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   17a20:	9d05      	ldr	r5, [sp, #20]
   17a22:	4622      	mov	r2, r4
   17a24:	9c04      	ldr	r4, [sp, #16]
   17a26:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   17a28:	6063      	str	r3, [r4, #4]
	node->next = successor;
   17a2a:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   17a2e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   17a30:	6054      	str	r4, [r2, #4]
			return;
   17a32:	e6d9      	b.n	177e8 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17a34:	2300      	movs	r3, #0
   17a36:	9404      	str	r4, [sp, #16]
   17a38:	9505      	str	r5, [sp, #20]
   17a3a:	9d02      	ldr	r5, [sp, #8]
   17a3c:	461c      	mov	r4, r3
   17a3e:	e7d2      	b.n	179e6 <register_events+0x372>
   17a40:	9c04      	ldr	r4, [sp, #16]
   17a42:	9d05      	ldr	r5, [sp, #20]
   17a44:	e001      	b.n	17a4a <register_events+0x3d6>
   17a46:	9c04      	ldr	r4, [sp, #16]
   17a48:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   17a4a:	9a02      	ldr	r2, [sp, #8]
   17a4c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17a4e:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   17a52:	6063      	str	r3, [r4, #4]
	tail->next = node;
   17a54:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17a56:	6054      	str	r4, [r2, #4]
}
   17a58:	e6c6      	b.n	177e8 <register_events+0x174>
   17a5a:	9c04      	ldr	r4, [sp, #16]
   17a5c:	9d05      	ldr	r5, [sp, #20]
   17a5e:	e7f4      	b.n	17a4a <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   17a60:	9801      	ldr	r0, [sp, #4]
   17a62:	b007      	add	sp, #28
   17a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017a68 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   17a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a6c:	b082      	sub	sp, #8
   17a6e:	4605      	mov	r5, r0
   17a70:	4690      	mov	r8, r2
   17a72:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   17a74:	4b4f      	ldr	r3, [pc, #316]	; (17bb4 <z_impl_k_poll+0x14c>)
   17a76:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
   17a78:	2301      	movs	r3, #1
   17a7a:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
   17a7e:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   17a82:	ea57 0302 	orrs.w	r3, r7, r2
   17a86:	bf0c      	ite	eq
   17a88:	2301      	moveq	r3, #1
   17a8a:	2300      	movne	r3, #0
   17a8c:	f106 0260 	add.w	r2, r6, #96	; 0x60
   17a90:	f7ff fdf0 	bl	17674 <register_events>
   17a94:	4604      	mov	r4, r0
   17a96:	f04f 0340 	mov.w	r3, #64	; 0x40
   17a9a:	f3ef 8111 	mrs	r1, BASEPRI
   17a9e:	f383 8812 	msr	BASEPRI_MAX, r3
   17aa2:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   17aa6:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
   17aaa:	b1b3      	cbz	r3, 17ada <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   17aac:	2300      	movs	r3, #0
   17aae:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17ab2:	ea57 0308 	orrs.w	r3, r7, r8
   17ab6:	d043      	beq.n	17b40 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   17ab8:	f8cd 8000 	str.w	r8, [sp]
   17abc:	9701      	str	r7, [sp, #4]
   17abe:	4a3e      	ldr	r2, [pc, #248]	; (17bb8 <z_impl_k_poll+0x150>)
   17ac0:	483e      	ldr	r0, [pc, #248]	; (17bbc <z_impl_k_poll+0x154>)
   17ac2:	f7ff fa21 	bl	16f08 <z_pend_curr>
   17ac6:	f04f 0340 	mov.w	r3, #64	; 0x40
   17aca:	f3ef 8611 	mrs	r6, BASEPRI
   17ace:	f383 8812 	msr	BASEPRI_MAX, r3
   17ad2:	f3bf 8f6f 	isb	sy
   17ad6:	46b4      	mov	ip, r6
	while (num_events--) {
   17ad8:	e04c      	b.n	17b74 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   17ada:	460e      	mov	r6, r1
	while (num_events--) {
   17adc:	e00c      	b.n	17af8 <z_impl_k_poll+0x90>
	__asm__ volatile(
   17ade:	f386 8811 	msr	BASEPRI, r6
   17ae2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17ae6:	f04f 0340 	mov.w	r3, #64	; 0x40
   17aea:	f3ef 8611 	mrs	r6, BASEPRI
   17aee:	f383 8812 	msr	BASEPRI_MAX, r3
   17af2:	f3bf 8f6f 	isb	sy
   17af6:	4604      	mov	r4, r0
   17af8:	1e60      	subs	r0, r4, #1
   17afa:	b1dc      	cbz	r4, 17b34 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
   17afc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17b00:	009f      	lsls	r7, r3, #2
   17b02:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   17b06:	2200      	movs	r2, #0
   17b08:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   17b0a:	7b5a      	ldrb	r2, [r3, #13]
   17b0c:	f002 021f 	and.w	r2, r2, #31
   17b10:	2a08      	cmp	r2, #8
   17b12:	d8e4      	bhi.n	17ade <z_impl_k_poll+0x76>
   17b14:	2401      	movs	r4, #1
   17b16:	fa04 f202 	lsl.w	r2, r4, r2
   17b1a:	f412 7f8b 	tst.w	r2, #278	; 0x116
   17b1e:	d0de      	beq.n	17ade <z_impl_k_poll+0x76>
	return node->next != NULL;
   17b20:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   17b22:	2a00      	cmp	r2, #0
   17b24:	d0db      	beq.n	17ade <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   17b26:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   17b28:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   17b2a:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   17b2c:	2200      	movs	r2, #0
   17b2e:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   17b30:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
   17b32:	e7d4      	b.n	17ade <z_impl_k_poll+0x76>
	__asm__ volatile(
   17b34:	f381 8811 	msr	BASEPRI, r1
   17b38:	f3bf 8f6f 	isb	sy
		return 0;
   17b3c:	4620      	mov	r0, r4
   17b3e:	e036      	b.n	17bae <z_impl_k_poll+0x146>
   17b40:	f381 8811 	msr	BASEPRI, r1
   17b44:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   17b48:	f06f 000a 	mvn.w	r0, #10
   17b4c:	e02f      	b.n	17bae <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
   17b4e:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
   17b50:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   17b52:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   17b54:	2200      	movs	r2, #0
   17b56:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
   17b58:	605a      	str	r2, [r3, #4]
   17b5a:	f38c 8811 	msr	BASEPRI, ip
   17b5e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17b62:	f04f 0340 	mov.w	r3, #64	; 0x40
   17b66:	f3ef 8c11 	mrs	ip, BASEPRI
   17b6a:	f383 8812 	msr	BASEPRI_MAX, r3
   17b6e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   17b72:	4674      	mov	r4, lr
   17b74:	f104 3eff 	add.w	lr, r4, #4294967295
   17b78:	b1ac      	cbz	r4, 17ba6 <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
   17b7a:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
   17b7e:	009c      	lsls	r4, r3, #2
   17b80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   17b84:	2200      	movs	r2, #0
   17b86:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   17b88:	7b5a      	ldrb	r2, [r3, #13]
   17b8a:	f002 021f 	and.w	r2, r2, #31
   17b8e:	2a08      	cmp	r2, #8
   17b90:	d8e3      	bhi.n	17b5a <z_impl_k_poll+0xf2>
   17b92:	2101      	movs	r1, #1
   17b94:	fa01 f202 	lsl.w	r2, r1, r2
   17b98:	f412 7f8b 	tst.w	r2, #278	; 0x116
   17b9c:	d0dd      	beq.n	17b5a <z_impl_k_poll+0xf2>
	return node->next != NULL;
   17b9e:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   17ba0:	2a00      	cmp	r2, #0
   17ba2:	d1d4      	bne.n	17b4e <z_impl_k_poll+0xe6>
   17ba4:	e7d9      	b.n	17b5a <z_impl_k_poll+0xf2>
	__asm__ volatile(
   17ba6:	f386 8811 	msr	BASEPRI, r6
   17baa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   17bae:	b002      	add	sp, #8
   17bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17bb4:	200030b4 	.word	0x200030b4
   17bb8:	200008f0 	.word	0x200008f0
   17bbc:	200030f8 	.word	0x200030f8

00017bc0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   17bc0:	b538      	push	{r3, r4, r5, lr}
   17bc2:	4603      	mov	r3, r0
	__asm__ volatile(
   17bc4:	f04f 0240 	mov.w	r2, #64	; 0x40
   17bc8:	f3ef 8511 	mrs	r5, BASEPRI
   17bcc:	f382 8812 	msr	BASEPRI_MAX, r2
   17bd0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   17bd4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   17bd6:	2201      	movs	r2, #1
   17bd8:	6082      	str	r2, [r0, #8]
	return list->head == list;
   17bda:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   17bdc:	4283      	cmp	r3, r0
   17bde:	d011      	beq.n	17c04 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   17be0:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   17be2:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   17be4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   17be6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17be8:	2300      	movs	r3, #0
   17bea:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   17bec:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   17bee:	b148      	cbz	r0, 17c04 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   17bf0:	2101      	movs	r1, #1
   17bf2:	f006 fbe3 	bl	1e3bc <signal_poll_event>
   17bf6:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   17bf8:	4629      	mov	r1, r5
   17bfa:	4805      	ldr	r0, [pc, #20]	; (17c10 <z_impl_k_poll_signal_raise+0x50>)
   17bfc:	f7fe fffc 	bl	16bf8 <z_reschedule>
	return rc;
}
   17c00:	4620      	mov	r0, r4
   17c02:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17c04:	f385 8811 	msr	BASEPRI, r5
   17c08:	f3bf 8f6f 	isb	sy
		return 0;
   17c0c:	2400      	movs	r4, #0
   17c0e:	e7f7      	b.n	17c00 <z_impl_k_poll_signal_raise+0x40>
   17c10:	200030f8 	.word	0x200030f8

00017c14 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   17c14:	b538      	push	{r3, r4, r5, lr}
   17c16:	4604      	mov	r4, r0
   17c18:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   17c1a:	f005 fff3 	bl	1dc04 <k_is_in_isr>
   17c1e:	b948      	cbnz	r0, 17c34 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   17c20:	4b05      	ldr	r3, [pc, #20]	; (17c38 <z_thread_aligned_alloc+0x24>)
   17c22:	689b      	ldr	r3, [r3, #8]
   17c24:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   17c28:	b118      	cbz	r0, 17c32 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   17c2a:	462a      	mov	r2, r5
   17c2c:	4621      	mov	r1, r4
   17c2e:	f006 fbff 	bl	1e430 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   17c32:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   17c34:	2000      	movs	r0, #0
	return ret;
   17c36:	e7fc      	b.n	17c32 <z_thread_aligned_alloc+0x1e>
   17c38:	200030b4 	.word	0x200030b4

00017c3c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   17c3c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   17c3e:	4a03      	ldr	r2, [pc, #12]	; (17c4c <boot_banner+0x10>)
   17c40:	4903      	ldr	r1, [pc, #12]	; (17c50 <boot_banner+0x14>)
   17c42:	4804      	ldr	r0, [pc, #16]	; (17c54 <boot_banner+0x18>)
   17c44:	f002 fdad 	bl	1a7a2 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   17c48:	bd08      	pop	{r3, pc}
   17c4a:	bf00      	nop
   17c4c:	0001e950 	.word	0x0001e950
   17c50:	0001eed4 	.word	0x0001eed4
   17c54:	0001eee4 	.word	0x0001eee4

00017c58 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   17c58:	b510      	push	{r4, lr}
   17c5a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   17c5c:	4b08      	ldr	r3, [pc, #32]	; (17c80 <k_sys_work_q_init+0x28>)
   17c5e:	9302      	str	r3, [sp, #8]
   17c60:	2400      	movs	r4, #0
   17c62:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17c66:	ab02      	add	r3, sp, #8
   17c68:	9300      	str	r3, [sp, #0]
   17c6a:	f04f 33ff 	mov.w	r3, #4294967295
   17c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17c72:	4904      	ldr	r1, [pc, #16]	; (17c84 <k_sys_work_q_init+0x2c>)
   17c74:	4804      	ldr	r0, [pc, #16]	; (17c88 <k_sys_work_q_init+0x30>)
   17c76:	f7fe ff23 	bl	16ac0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   17c7a:	4620      	mov	r0, r4
   17c7c:	b004      	add	sp, #16
   17c7e:	bd10      	pop	{r4, pc}
   17c80:	0001ef0c 	.word	0x0001ef0c
   17c84:	20005cc0 	.word	0x20005cc0
   17c88:	20001d18 	.word	0x20001d18

00017c8c <nrf_cc3xx_platform_init>:
   17c8c:	b510      	push	{r4, lr}
   17c8e:	4c0c      	ldr	r4, [pc, #48]	; (17cc0 <nrf_cc3xx_platform_init+0x34>)
   17c90:	6823      	ldr	r3, [r4, #0]
   17c92:	b113      	cbz	r3, 17c9a <nrf_cc3xx_platform_init+0xe>
   17c94:	4b0b      	ldr	r3, [pc, #44]	; (17cc4 <nrf_cc3xx_platform_init+0x38>)
   17c96:	681b      	ldr	r3, [r3, #0]
   17c98:	b92b      	cbnz	r3, 17ca6 <nrf_cc3xx_platform_init+0x1a>
   17c9a:	f000 fe7d 	bl	18998 <CC_LibInit>
   17c9e:	b930      	cbnz	r0, 17cae <nrf_cc3xx_platform_init+0x22>
   17ca0:	4b08      	ldr	r3, [pc, #32]	; (17cc4 <nrf_cc3xx_platform_init+0x38>)
   17ca2:	2201      	movs	r2, #1
   17ca4:	601a      	str	r2, [r3, #0]
   17ca6:	2301      	movs	r3, #1
   17ca8:	6023      	str	r3, [r4, #0]
   17caa:	2000      	movs	r0, #0
   17cac:	bd10      	pop	{r4, pc}
   17cae:	3801      	subs	r0, #1
   17cb0:	2806      	cmp	r0, #6
   17cb2:	d901      	bls.n	17cb8 <nrf_cc3xx_platform_init+0x2c>
   17cb4:	4804      	ldr	r0, [pc, #16]	; (17cc8 <nrf_cc3xx_platform_init+0x3c>)
   17cb6:	bd10      	pop	{r4, pc}
   17cb8:	4b04      	ldr	r3, [pc, #16]	; (17ccc <nrf_cc3xx_platform_init+0x40>)
   17cba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17cbe:	bd10      	pop	{r4, pc}
   17cc0:	200030f8 	.word	0x200030f8
   17cc4:	200030fc 	.word	0x200030fc
   17cc8:	ffff8ffe 	.word	0xffff8ffe
   17ccc:	0001ef18 	.word	0x0001ef18

00017cd0 <nrf_cc3xx_platform_abort>:
   17cd0:	f3bf 8f4f 	dsb	sy
   17cd4:	4905      	ldr	r1, [pc, #20]	; (17cec <nrf_cc3xx_platform_abort+0x1c>)
   17cd6:	4b06      	ldr	r3, [pc, #24]	; (17cf0 <nrf_cc3xx_platform_abort+0x20>)
   17cd8:	68ca      	ldr	r2, [r1, #12]
   17cda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17cde:	4313      	orrs	r3, r2
   17ce0:	60cb      	str	r3, [r1, #12]
   17ce2:	f3bf 8f4f 	dsb	sy
   17ce6:	bf00      	nop
   17ce8:	e7fd      	b.n	17ce6 <nrf_cc3xx_platform_abort+0x16>
   17cea:	bf00      	nop
   17cec:	e000ed00 	.word	0xe000ed00
   17cf0:	05fa0004 	.word	0x05fa0004

00017cf4 <CC_PalAbort>:
   17cf4:	b410      	push	{r4}
   17cf6:	4b09      	ldr	r3, [pc, #36]	; (17d1c <CC_PalAbort+0x28>)
   17cf8:	4909      	ldr	r1, [pc, #36]	; (17d20 <CC_PalAbort+0x2c>)
   17cfa:	4c0a      	ldr	r4, [pc, #40]	; (17d24 <CC_PalAbort+0x30>)
   17cfc:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   17d00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   17d04:	6849      	ldr	r1, [r1, #4]
   17d06:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   17d0a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   17d0e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   17d12:	2300      	movs	r3, #0
   17d14:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   17d18:	bc10      	pop	{r4}
   17d1a:	4708      	bx	r1
   17d1c:	5002b000 	.word	0x5002b000
   17d20:	200008f8 	.word	0x200008f8
   17d24:	5002a000 	.word	0x5002a000

00017d28 <nrf_cc3xx_platform_set_abort>:
   17d28:	e9d0 1200 	ldrd	r1, r2, [r0]
   17d2c:	4b01      	ldr	r3, [pc, #4]	; (17d34 <nrf_cc3xx_platform_set_abort+0xc>)
   17d2e:	e9c3 1200 	strd	r1, r2, [r3]
   17d32:	4770      	bx	lr
   17d34:	200008f8 	.word	0x200008f8

00017d38 <nrf_cc3xx_platform_ctr_drbg_init>:
   17d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17d3c:	4c14      	ldr	r4, [pc, #80]	; (17d90 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   17d3e:	4e15      	ldr	r6, [pc, #84]	; (17d94 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   17d40:	2800      	cmp	r0, #0
   17d42:	bf18      	it	ne
   17d44:	4604      	movne	r4, r0
   17d46:	b083      	sub	sp, #12
   17d48:	6823      	ldr	r3, [r4, #0]
   17d4a:	42b3      	cmp	r3, r6
   17d4c:	d01c      	beq.n	17d88 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   17d4e:	460d      	mov	r5, r1
   17d50:	4620      	mov	r0, r4
   17d52:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   17d56:	f104 0904 	add.w	r9, r4, #4
   17d5a:	4617      	mov	r7, r2
   17d5c:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   17d60:	f000 f8d0 	bl	17f04 <mbedtls_platform_zeroize>
   17d64:	4648      	mov	r0, r9
   17d66:	f000 fd05 	bl	18774 <cc_mbedtls_entropy_init>
   17d6a:	4640      	mov	r0, r8
   17d6c:	f000 fb32 	bl	183d4 <cc_mbedtls_ctr_drbg_init>
   17d70:	4909      	ldr	r1, [pc, #36]	; (17d98 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   17d72:	9700      	str	r7, [sp, #0]
   17d74:	462b      	mov	r3, r5
   17d76:	464a      	mov	r2, r9
   17d78:	4640      	mov	r0, r8
   17d7a:	f000 fb41 	bl	18400 <cc_mbedtls_ctr_drbg_seed>
   17d7e:	b900      	cbnz	r0, 17d82 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   17d80:	6026      	str	r6, [r4, #0]
   17d82:	b003      	add	sp, #12
   17d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17d88:	2000      	movs	r0, #0
   17d8a:	b003      	add	sp, #12
   17d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17d90:	20003100 	.word	0x20003100
   17d94:	5ac9bca5 	.word	0x5ac9bca5
   17d98:	000187f5 	.word	0x000187f5

00017d9c <nrf_cc3xx_platform_ctr_drbg_get>:
   17d9c:	b570      	push	{r4, r5, r6, lr}
   17d9e:	4d0d      	ldr	r5, [pc, #52]	; (17dd4 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   17da0:	2800      	cmp	r0, #0
   17da2:	bf18      	it	ne
   17da4:	4605      	movne	r5, r0
   17da6:	461e      	mov	r6, r3
   17da8:	6828      	ldr	r0, [r5, #0]
   17daa:	4b0b      	ldr	r3, [pc, #44]	; (17dd8 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   17dac:	4298      	cmp	r0, r3
   17dae:	b082      	sub	sp, #8
   17db0:	d10d      	bne.n	17dce <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   17db2:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   17db6:	2500      	movs	r5, #0
   17db8:	9500      	str	r5, [sp, #0]
   17dba:	462b      	mov	r3, r5
   17dbc:	4614      	mov	r4, r2
   17dbe:	f000 fb6d 	bl	1849c <cc_mbedtls_ctr_drbg_random_with_add>
   17dc2:	2800      	cmp	r0, #0
   17dc4:	bf18      	it	ne
   17dc6:	462c      	movne	r4, r5
   17dc8:	6034      	str	r4, [r6, #0]
   17dca:	b002      	add	sp, #8
   17dcc:	bd70      	pop	{r4, r5, r6, pc}
   17dce:	4803      	ldr	r0, [pc, #12]	; (17ddc <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   17dd0:	e7fb      	b.n	17dca <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   17dd2:	bf00      	nop
   17dd4:	20003100 	.word	0x20003100
   17dd8:	5ac9bca5 	.word	0x5ac9bca5
   17ddc:	ffff8fe8 	.word	0xffff8fe8

00017de0 <mutex_free>:
   17de0:	b510      	push	{r4, lr}
   17de2:	4604      	mov	r4, r0
   17de4:	b130      	cbz	r0, 17df4 <mutex_free+0x14>
   17de6:	6863      	ldr	r3, [r4, #4]
   17de8:	06db      	lsls	r3, r3, #27
   17dea:	d502      	bpl.n	17df2 <mutex_free+0x12>
   17dec:	2300      	movs	r3, #0
   17dee:	6023      	str	r3, [r4, #0]
   17df0:	6063      	str	r3, [r4, #4]
   17df2:	bd10      	pop	{r4, pc}
   17df4:	4b02      	ldr	r3, [pc, #8]	; (17e00 <mutex_free+0x20>)
   17df6:	4803      	ldr	r0, [pc, #12]	; (17e04 <mutex_free+0x24>)
   17df8:	685b      	ldr	r3, [r3, #4]
   17dfa:	4798      	blx	r3
   17dfc:	e7f3      	b.n	17de6 <mutex_free+0x6>
   17dfe:	bf00      	nop
   17e00:	200008f8 	.word	0x200008f8
   17e04:	0001ef34 	.word	0x0001ef34

00017e08 <mutex_lock>:
   17e08:	b1b0      	cbz	r0, 17e38 <mutex_lock+0x30>
   17e0a:	6843      	ldr	r3, [r0, #4]
   17e0c:	b193      	cbz	r3, 17e34 <mutex_lock+0x2c>
   17e0e:	06db      	lsls	r3, r3, #27
   17e10:	d50e      	bpl.n	17e30 <mutex_lock+0x28>
   17e12:	2301      	movs	r3, #1
   17e14:	e850 2f00 	ldrex	r2, [r0]
   17e18:	4619      	mov	r1, r3
   17e1a:	e840 1c00 	strex	ip, r1, [r0]
   17e1e:	f09c 0f00 	teq	ip, #0
   17e22:	d1f7      	bne.n	17e14 <mutex_lock+0xc>
   17e24:	2a01      	cmp	r2, #1
   17e26:	d0f5      	beq.n	17e14 <mutex_lock+0xc>
   17e28:	f3bf 8f5f 	dmb	sy
   17e2c:	2000      	movs	r0, #0
   17e2e:	4770      	bx	lr
   17e30:	4803      	ldr	r0, [pc, #12]	; (17e40 <mutex_lock+0x38>)
   17e32:	4770      	bx	lr
   17e34:	4803      	ldr	r0, [pc, #12]	; (17e44 <mutex_lock+0x3c>)
   17e36:	4770      	bx	lr
   17e38:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   17e3c:	4770      	bx	lr
   17e3e:	bf00      	nop
   17e40:	ffff8fe9 	.word	0xffff8fe9
   17e44:	ffff8fea 	.word	0xffff8fea

00017e48 <mutex_unlock>:
   17e48:	b168      	cbz	r0, 17e66 <mutex_unlock+0x1e>
   17e4a:	6843      	ldr	r3, [r0, #4]
   17e4c:	b13b      	cbz	r3, 17e5e <mutex_unlock+0x16>
   17e4e:	06db      	lsls	r3, r3, #27
   17e50:	d507      	bpl.n	17e62 <mutex_unlock+0x1a>
   17e52:	f3bf 8f5f 	dmb	sy
   17e56:	2300      	movs	r3, #0
   17e58:	6003      	str	r3, [r0, #0]
   17e5a:	4618      	mov	r0, r3
   17e5c:	4770      	bx	lr
   17e5e:	4803      	ldr	r0, [pc, #12]	; (17e6c <mutex_unlock+0x24>)
   17e60:	4770      	bx	lr
   17e62:	4803      	ldr	r0, [pc, #12]	; (17e70 <mutex_unlock+0x28>)
   17e64:	4770      	bx	lr
   17e66:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   17e6a:	4770      	bx	lr
   17e6c:	ffff8fea 	.word	0xffff8fea
   17e70:	ffff8fe9 	.word	0xffff8fe9

00017e74 <mutex_init>:
   17e74:	b510      	push	{r4, lr}
   17e76:	4604      	mov	r4, r0
   17e78:	b120      	cbz	r0, 17e84 <mutex_init+0x10>
   17e7a:	2200      	movs	r2, #0
   17e7c:	2311      	movs	r3, #17
   17e7e:	6022      	str	r2, [r4, #0]
   17e80:	6063      	str	r3, [r4, #4]
   17e82:	bd10      	pop	{r4, pc}
   17e84:	4801      	ldr	r0, [pc, #4]	; (17e8c <mutex_init+0x18>)
   17e86:	f7ff ff35 	bl	17cf4 <CC_PalAbort>
   17e8a:	e7f6      	b.n	17e7a <mutex_init+0x6>
   17e8c:	0001ef5c 	.word	0x0001ef5c

00017e90 <nrf_cc3xx_platform_set_mutexes>:
   17e90:	b570      	push	{r4, r5, r6, lr}
   17e92:	e9d0 2300 	ldrd	r2, r3, [r0]
   17e96:	4c13      	ldr	r4, [pc, #76]	; (17ee4 <nrf_cc3xx_platform_set_mutexes+0x54>)
   17e98:	4d13      	ldr	r5, [pc, #76]	; (17ee8 <nrf_cc3xx_platform_set_mutexes+0x58>)
   17e9a:	6063      	str	r3, [r4, #4]
   17e9c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   17ea0:	e9c4 3002 	strd	r3, r0, [r4, #8]
   17ea4:	6022      	str	r2, [r4, #0]
   17ea6:	4b11      	ldr	r3, [pc, #68]	; (17eec <nrf_cc3xx_platform_set_mutexes+0x5c>)
   17ea8:	6808      	ldr	r0, [r1, #0]
   17eaa:	6018      	str	r0, [r3, #0]
   17eac:	6848      	ldr	r0, [r1, #4]
   17eae:	6058      	str	r0, [r3, #4]
   17eb0:	6888      	ldr	r0, [r1, #8]
   17eb2:	6098      	str	r0, [r3, #8]
   17eb4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   17eb8:	60d8      	str	r0, [r3, #12]
   17eba:	6119      	str	r1, [r3, #16]
   17ebc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17ec0:	06db      	lsls	r3, r3, #27
   17ec2:	d50d      	bpl.n	17ee0 <nrf_cc3xx_platform_set_mutexes+0x50>
   17ec4:	2300      	movs	r3, #0
   17ec6:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   17eca:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   17ece:	f505 708a 	add.w	r0, r5, #276	; 0x114
   17ed2:	4790      	blx	r2
   17ed4:	6823      	ldr	r3, [r4, #0]
   17ed6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   17eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17ede:	4718      	bx	r3
   17ee0:	bd70      	pop	{r4, r5, r6, pc}
   17ee2:	bf00      	nop
   17ee4:	20000908 	.word	0x20000908
   17ee8:	20003100 	.word	0x20003100
   17eec:	20000918 	.word	0x20000918

00017ef0 <mbedtls_zeroize_internal>:
   17ef0:	b138      	cbz	r0, 17f02 <mbedtls_zeroize_internal+0x12>
   17ef2:	b131      	cbz	r1, 17f02 <mbedtls_zeroize_internal+0x12>
   17ef4:	4401      	add	r1, r0
   17ef6:	2200      	movs	r2, #0
   17ef8:	4603      	mov	r3, r0
   17efa:	3001      	adds	r0, #1
   17efc:	4281      	cmp	r1, r0
   17efe:	701a      	strb	r2, [r3, #0]
   17f00:	d1fa      	bne.n	17ef8 <mbedtls_zeroize_internal+0x8>
   17f02:	4770      	bx	lr

00017f04 <mbedtls_platform_zeroize>:
   17f04:	b138      	cbz	r0, 17f16 <mbedtls_platform_zeroize+0x12>
   17f06:	b131      	cbz	r1, 17f16 <mbedtls_platform_zeroize+0x12>
   17f08:	4401      	add	r1, r0
   17f0a:	2200      	movs	r2, #0
   17f0c:	4603      	mov	r3, r0
   17f0e:	3001      	adds	r0, #1
   17f10:	4288      	cmp	r0, r1
   17f12:	701a      	strb	r2, [r3, #0]
   17f14:	d1fa      	bne.n	17f0c <mbedtls_platform_zeroize+0x8>
   17f16:	4770      	bx	lr

00017f18 <block_cipher_df>:
   17f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f1c:	b0b7      	sub	sp, #220	; 0xdc
   17f1e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   17f22:	9005      	str	r0, [sp, #20]
   17f24:	f200 8147 	bhi.w	181b6 <block_cipher_df+0x29e>
   17f28:	4614      	mov	r4, r2
   17f2a:	460d      	mov	r5, r1
   17f2c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   17f30:	2100      	movs	r1, #0
   17f32:	48a2      	ldr	r0, [pc, #648]	; (181bc <block_cipher_df+0x2a4>)
   17f34:	f003 f9c4 	bl	1b2c0 <memset>
   17f38:	a819      	add	r0, sp, #100	; 0x64
   17f3a:	f001 f9cb 	bl	192d4 <cc_mbedtls_aes_init>
   17f3e:	489f      	ldr	r0, [pc, #636]	; (181bc <block_cipher_df+0x2a4>)
   17f40:	2300      	movs	r3, #0
   17f42:	8203      	strh	r3, [r0, #16]
   17f44:	ba63      	rev16	r3, r4
   17f46:	8243      	strh	r3, [r0, #18]
   17f48:	2320      	movs	r3, #32
   17f4a:	4629      	mov	r1, r5
   17f4c:	75c3      	strb	r3, [r0, #23]
   17f4e:	4605      	mov	r5, r0
   17f50:	4622      	mov	r2, r4
   17f52:	3018      	adds	r0, #24
   17f54:	f003 f985 	bl	1b262 <memcpy>
   17f58:	462b      	mov	r3, r5
   17f5a:	4423      	add	r3, r4
   17f5c:	2280      	movs	r2, #128	; 0x80
   17f5e:	761a      	strb	r2, [r3, #24]
   17f60:	4b97      	ldr	r3, [pc, #604]	; (181c0 <block_cipher_df+0x2a8>)
   17f62:	930d      	str	r3, [sp, #52]	; 0x34
   17f64:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   17f68:	930e      	str	r3, [sp, #56]	; 0x38
   17f6a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   17f6e:	930f      	str	r3, [sp, #60]	; 0x3c
   17f70:	a90d      	add	r1, sp, #52	; 0x34
   17f72:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   17f76:	a819      	add	r0, sp, #100	; 0x64
   17f78:	9310      	str	r3, [sp, #64]	; 0x40
   17f7a:	f001 f9c1 	bl	19300 <cc_mbedtls_aes_setkey_enc>
   17f7e:	4605      	mov	r5, r0
   17f80:	2800      	cmp	r0, #0
   17f82:	f040 80f4 	bne.w	1816e <block_cipher_df+0x256>
   17f86:	f104 0319 	add.w	r3, r4, #25
   17f8a:	9306      	str	r3, [sp, #24]
   17f8c:	f10d 0820 	add.w	r8, sp, #32
   17f90:	ab11      	add	r3, sp, #68	; 0x44
   17f92:	9304      	str	r3, [sp, #16]
   17f94:	9307      	str	r3, [sp, #28]
   17f96:	46c1      	mov	r9, r8
   17f98:	2210      	movs	r2, #16
   17f9a:	2100      	movs	r1, #0
   17f9c:	4648      	mov	r0, r9
   17f9e:	f003 f98f 	bl	1b2c0 <memset>
   17fa2:	f8df a220 	ldr.w	sl, [pc, #544]	; 181c4 <block_cipher_df+0x2ac>
   17fa6:	9b06      	ldr	r3, [sp, #24]
   17fa8:	9300      	str	r3, [sp, #0]
   17faa:	f8cd 900c 	str.w	r9, [sp, #12]
   17fae:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   17fb2:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   17fb6:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   17fba:	f89d 5020 	ldrb.w	r5, [sp, #32]
   17fbe:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   17fc2:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   17fc6:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   17fca:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   17fce:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   17fd2:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   17fd6:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   17fda:	406a      	eors	r2, r5
   17fdc:	ea8e 0e00 	eor.w	lr, lr, r0
   17fe0:	9d00      	ldr	r5, [sp, #0]
   17fe2:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   17fe6:	9202      	str	r2, [sp, #8]
   17fe8:	ea8c 0c03 	eor.w	ip, ip, r3
   17fec:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   17ff0:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   17ff4:	2d10      	cmp	r5, #16
   17ff6:	ea80 0003 	eor.w	r0, r0, r3
   17ffa:	462b      	mov	r3, r5
   17ffc:	bf8c      	ite	hi
   17ffe:	3b10      	subhi	r3, #16
   18000:	1b6b      	subls	r3, r5, r5
   18002:	9300      	str	r3, [sp, #0]
   18004:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   18008:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   1800c:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   18010:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   18014:	4061      	eors	r1, r4
   18016:	405f      	eors	r7, r3
   18018:	2400      	movs	r4, #0
   1801a:	406a      	eors	r2, r5
   1801c:	ea8b 0b06 	eor.w	fp, fp, r6
   18020:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   18024:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   18028:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   1802c:	9601      	str	r6, [sp, #4]
   1802e:	4626      	mov	r6, r4
   18030:	406b      	eors	r3, r5
   18032:	f36b 0607 	bfi	r6, fp, #0, #8
   18036:	4625      	mov	r5, r4
   18038:	f367 260f 	bfi	r6, r7, #8, #8
   1803c:	462f      	mov	r7, r5
   1803e:	f361 0707 	bfi	r7, r1, #0, #8
   18042:	9902      	ldr	r1, [sp, #8]
   18044:	f361 0507 	bfi	r5, r1, #0, #8
   18048:	f362 250f 	bfi	r5, r2, #8, #8
   1804c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   18050:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   18054:	f363 270f 	bfi	r7, r3, #8, #8
   18058:	ea82 0909 	eor.w	r9, r2, r9
   1805c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   18060:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   18064:	ea83 0808 	eor.w	r8, r3, r8
   18068:	404a      	eors	r2, r1
   1806a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1806e:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   18072:	f36e 0407 	bfi	r4, lr, #0, #8
   18076:	404b      	eors	r3, r1
   18078:	f368 4717 	bfi	r7, r8, #16, #8
   1807c:	f36c 240f 	bfi	r4, ip, #8, #8
   18080:	f363 671f 	bfi	r7, r3, #24, #8
   18084:	9b03      	ldr	r3, [sp, #12]
   18086:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   1808a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1808e:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   18092:	ea8c 0c0e 	eor.w	ip, ip, lr
   18096:	f36c 4617 	bfi	r6, ip, #16, #8
   1809a:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   1809e:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   180a2:	ea8c 0c08 	eor.w	ip, ip, r8
   180a6:	f36c 661f 	bfi	r6, ip, #24, #8
   180aa:	f369 4517 	bfi	r5, r9, #16, #8
   180ae:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   180b2:	960b      	str	r6, [sp, #44]	; 0x2c
   180b4:	f362 651f 	bfi	r5, r2, #24, #8
   180b8:	f360 4417 	bfi	r4, r0, #16, #8
   180bc:	9508      	str	r5, [sp, #32]
   180be:	ea8c 050e 	eor.w	r5, ip, lr
   180c2:	f365 641f 	bfi	r4, r5, #24, #8
   180c6:	461a      	mov	r2, r3
   180c8:	2101      	movs	r1, #1
   180ca:	a819      	add	r0, sp, #100	; 0x64
   180cc:	f10a 0a10 	add.w	sl, sl, #16
   180d0:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   180d4:	f001 f92e 	bl	19334 <cc_mbedtls_aes_crypt_ecb>
   180d8:	2800      	cmp	r0, #0
   180da:	d168      	bne.n	181ae <block_cipher_df+0x296>
   180dc:	9b00      	ldr	r3, [sp, #0]
   180de:	2b00      	cmp	r3, #0
   180e0:	f47f af65 	bne.w	17fae <block_cipher_df+0x96>
   180e4:	9c07      	ldr	r4, [sp, #28]
   180e6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   180ea:	4620      	mov	r0, r4
   180ec:	2210      	movs	r2, #16
   180ee:	3410      	adds	r4, #16
   180f0:	4649      	mov	r1, r9
   180f2:	9407      	str	r4, [sp, #28]
   180f4:	f003 f8b5 	bl	1b262 <memcpy>
   180f8:	4a30      	ldr	r2, [pc, #192]	; (181bc <block_cipher_df+0x2a4>)
   180fa:	78d3      	ldrb	r3, [r2, #3]
   180fc:	3301      	adds	r3, #1
   180fe:	70d3      	strb	r3, [r2, #3]
   18100:	ab19      	add	r3, sp, #100	; 0x64
   18102:	429c      	cmp	r4, r3
   18104:	f47f af48 	bne.w	17f98 <block_cipher_df+0x80>
   18108:	9904      	ldr	r1, [sp, #16]
   1810a:	2280      	movs	r2, #128	; 0x80
   1810c:	4618      	mov	r0, r3
   1810e:	f001 f8f7 	bl	19300 <cc_mbedtls_aes_setkey_enc>
   18112:	46c8      	mov	r8, r9
   18114:	4605      	mov	r5, r0
   18116:	bb70      	cbnz	r0, 18176 <block_cipher_df+0x25e>
   18118:	9c05      	ldr	r4, [sp, #20]
   1811a:	f104 0620 	add.w	r6, r4, #32
   1811e:	ab15      	add	r3, sp, #84	; 0x54
   18120:	461a      	mov	r2, r3
   18122:	2101      	movs	r1, #1
   18124:	a819      	add	r0, sp, #100	; 0x64
   18126:	f001 f905 	bl	19334 <cc_mbedtls_aes_crypt_ecb>
   1812a:	2210      	movs	r2, #16
   1812c:	4605      	mov	r5, r0
   1812e:	bb10      	cbnz	r0, 18176 <block_cipher_df+0x25e>
   18130:	4620      	mov	r0, r4
   18132:	a915      	add	r1, sp, #84	; 0x54
   18134:	3410      	adds	r4, #16
   18136:	f003 f894 	bl	1b262 <memcpy>
   1813a:	42b4      	cmp	r4, r6
   1813c:	d1ef      	bne.n	1811e <block_cipher_df+0x206>
   1813e:	a819      	add	r0, sp, #100	; 0x64
   18140:	f001 f8d8 	bl	192f4 <cc_mbedtls_aes_free>
   18144:	481d      	ldr	r0, [pc, #116]	; (181bc <block_cipher_df+0x2a4>)
   18146:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1814a:	f7ff fedb 	bl	17f04 <mbedtls_platform_zeroize>
   1814e:	9804      	ldr	r0, [sp, #16]
   18150:	2120      	movs	r1, #32
   18152:	f7ff fed7 	bl	17f04 <mbedtls_platform_zeroize>
   18156:	a80d      	add	r0, sp, #52	; 0x34
   18158:	2110      	movs	r1, #16
   1815a:	f7ff fed3 	bl	17f04 <mbedtls_platform_zeroize>
   1815e:	4640      	mov	r0, r8
   18160:	2110      	movs	r1, #16
   18162:	f7ff fecf 	bl	17f04 <mbedtls_platform_zeroize>
   18166:	4628      	mov	r0, r5
   18168:	b037      	add	sp, #220	; 0xdc
   1816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1816e:	ab11      	add	r3, sp, #68	; 0x44
   18170:	9304      	str	r3, [sp, #16]
   18172:	f10d 0820 	add.w	r8, sp, #32
   18176:	a819      	add	r0, sp, #100	; 0x64
   18178:	f001 f8bc 	bl	192f4 <cc_mbedtls_aes_free>
   1817c:	480f      	ldr	r0, [pc, #60]	; (181bc <block_cipher_df+0x2a4>)
   1817e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   18182:	f7ff febf 	bl	17f04 <mbedtls_platform_zeroize>
   18186:	9804      	ldr	r0, [sp, #16]
   18188:	2120      	movs	r1, #32
   1818a:	f7ff febb 	bl	17f04 <mbedtls_platform_zeroize>
   1818e:	a80d      	add	r0, sp, #52	; 0x34
   18190:	2110      	movs	r1, #16
   18192:	f7ff feb7 	bl	17f04 <mbedtls_platform_zeroize>
   18196:	4640      	mov	r0, r8
   18198:	2110      	movs	r1, #16
   1819a:	f7ff feb3 	bl	17f04 <mbedtls_platform_zeroize>
   1819e:	9805      	ldr	r0, [sp, #20]
   181a0:	2120      	movs	r1, #32
   181a2:	f7ff feaf 	bl	17f04 <mbedtls_platform_zeroize>
   181a6:	4628      	mov	r0, r5
   181a8:	b037      	add	sp, #220	; 0xdc
   181aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
   181b2:	4605      	mov	r5, r0
   181b4:	e7df      	b.n	18176 <block_cipher_df+0x25e>
   181b6:	f06f 0537 	mvn.w	r5, #55	; 0x37
   181ba:	e7f4      	b.n	181a6 <block_cipher_df+0x28e>
   181bc:	200032d0 	.word	0x200032d0
   181c0:	03020100 	.word	0x03020100
   181c4:	200032e0 	.word	0x200032e0

000181c8 <ctr_drbg_update_internal>:
   181c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181cc:	b088      	sub	sp, #32
   181ce:	4604      	mov	r4, r0
   181d0:	460d      	mov	r5, r1
   181d2:	2220      	movs	r2, #32
   181d4:	2100      	movs	r1, #0
   181d6:	4668      	mov	r0, sp
   181d8:	f003 f872 	bl	1b2c0 <memset>
   181dc:	f104 0620 	add.w	r6, r4, #32
   181e0:	466f      	mov	r7, sp
   181e2:	7be2      	ldrb	r2, [r4, #15]
   181e4:	3201      	adds	r2, #1
   181e6:	b2d2      	uxtb	r2, r2
   181e8:	73e2      	strb	r2, [r4, #15]
   181ea:	2a00      	cmp	r2, #0
   181ec:	d14d      	bne.n	1828a <ctr_drbg_update_internal+0xc2>
   181ee:	7ba2      	ldrb	r2, [r4, #14]
   181f0:	3201      	adds	r2, #1
   181f2:	b2d2      	uxtb	r2, r2
   181f4:	73a2      	strb	r2, [r4, #14]
   181f6:	2a00      	cmp	r2, #0
   181f8:	d147      	bne.n	1828a <ctr_drbg_update_internal+0xc2>
   181fa:	7b63      	ldrb	r3, [r4, #13]
   181fc:	3301      	adds	r3, #1
   181fe:	b2db      	uxtb	r3, r3
   18200:	7363      	strb	r3, [r4, #13]
   18202:	2b00      	cmp	r3, #0
   18204:	d141      	bne.n	1828a <ctr_drbg_update_internal+0xc2>
   18206:	7b23      	ldrb	r3, [r4, #12]
   18208:	3301      	adds	r3, #1
   1820a:	b2db      	uxtb	r3, r3
   1820c:	7323      	strb	r3, [r4, #12]
   1820e:	2b00      	cmp	r3, #0
   18210:	d13b      	bne.n	1828a <ctr_drbg_update_internal+0xc2>
   18212:	7ae3      	ldrb	r3, [r4, #11]
   18214:	3301      	adds	r3, #1
   18216:	b2db      	uxtb	r3, r3
   18218:	72e3      	strb	r3, [r4, #11]
   1821a:	2b00      	cmp	r3, #0
   1821c:	d135      	bne.n	1828a <ctr_drbg_update_internal+0xc2>
   1821e:	7aa3      	ldrb	r3, [r4, #10]
   18220:	3301      	adds	r3, #1
   18222:	b2db      	uxtb	r3, r3
   18224:	72a3      	strb	r3, [r4, #10]
   18226:	2b00      	cmp	r3, #0
   18228:	d12f      	bne.n	1828a <ctr_drbg_update_internal+0xc2>
   1822a:	7a63      	ldrb	r3, [r4, #9]
   1822c:	3301      	adds	r3, #1
   1822e:	b2db      	uxtb	r3, r3
   18230:	7263      	strb	r3, [r4, #9]
   18232:	bb53      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   18234:	7a23      	ldrb	r3, [r4, #8]
   18236:	3301      	adds	r3, #1
   18238:	b2db      	uxtb	r3, r3
   1823a:	7223      	strb	r3, [r4, #8]
   1823c:	bb2b      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   1823e:	79e3      	ldrb	r3, [r4, #7]
   18240:	3301      	adds	r3, #1
   18242:	b2db      	uxtb	r3, r3
   18244:	71e3      	strb	r3, [r4, #7]
   18246:	bb03      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   18248:	79a3      	ldrb	r3, [r4, #6]
   1824a:	3301      	adds	r3, #1
   1824c:	b2db      	uxtb	r3, r3
   1824e:	71a3      	strb	r3, [r4, #6]
   18250:	b9db      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   18252:	7963      	ldrb	r3, [r4, #5]
   18254:	3301      	adds	r3, #1
   18256:	b2db      	uxtb	r3, r3
   18258:	7163      	strb	r3, [r4, #5]
   1825a:	b9b3      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   1825c:	7923      	ldrb	r3, [r4, #4]
   1825e:	3301      	adds	r3, #1
   18260:	b2db      	uxtb	r3, r3
   18262:	7123      	strb	r3, [r4, #4]
   18264:	b98b      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   18266:	78e3      	ldrb	r3, [r4, #3]
   18268:	3301      	adds	r3, #1
   1826a:	b2db      	uxtb	r3, r3
   1826c:	70e3      	strb	r3, [r4, #3]
   1826e:	b963      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   18270:	78a3      	ldrb	r3, [r4, #2]
   18272:	3301      	adds	r3, #1
   18274:	b2db      	uxtb	r3, r3
   18276:	70a3      	strb	r3, [r4, #2]
   18278:	b93b      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   1827a:	7863      	ldrb	r3, [r4, #1]
   1827c:	3301      	adds	r3, #1
   1827e:	b2db      	uxtb	r3, r3
   18280:	7063      	strb	r3, [r4, #1]
   18282:	b913      	cbnz	r3, 1828a <ctr_drbg_update_internal+0xc2>
   18284:	7823      	ldrb	r3, [r4, #0]
   18286:	3301      	adds	r3, #1
   18288:	7023      	strb	r3, [r4, #0]
   1828a:	463b      	mov	r3, r7
   1828c:	4622      	mov	r2, r4
   1828e:	2101      	movs	r1, #1
   18290:	4630      	mov	r0, r6
   18292:	f001 f84f 	bl	19334 <cc_mbedtls_aes_crypt_ecb>
   18296:	4680      	mov	r8, r0
   18298:	bb50      	cbnz	r0, 182f0 <ctr_drbg_update_internal+0x128>
   1829a:	3710      	adds	r7, #16
   1829c:	ab08      	add	r3, sp, #32
   1829e:	429f      	cmp	r7, r3
   182a0:	d19f      	bne.n	181e2 <ctr_drbg_update_internal+0x1a>
   182a2:	9a00      	ldr	r2, [sp, #0]
   182a4:	682b      	ldr	r3, [r5, #0]
   182a6:	9906      	ldr	r1, [sp, #24]
   182a8:	4053      	eors	r3, r2
   182aa:	9300      	str	r3, [sp, #0]
   182ac:	9a01      	ldr	r2, [sp, #4]
   182ae:	686b      	ldr	r3, [r5, #4]
   182b0:	4053      	eors	r3, r2
   182b2:	9301      	str	r3, [sp, #4]
   182b4:	9a02      	ldr	r2, [sp, #8]
   182b6:	68ab      	ldr	r3, [r5, #8]
   182b8:	4053      	eors	r3, r2
   182ba:	9302      	str	r3, [sp, #8]
   182bc:	9a03      	ldr	r2, [sp, #12]
   182be:	68eb      	ldr	r3, [r5, #12]
   182c0:	4053      	eors	r3, r2
   182c2:	9303      	str	r3, [sp, #12]
   182c4:	9a04      	ldr	r2, [sp, #16]
   182c6:	692b      	ldr	r3, [r5, #16]
   182c8:	4053      	eors	r3, r2
   182ca:	9304      	str	r3, [sp, #16]
   182cc:	9a05      	ldr	r2, [sp, #20]
   182ce:	696b      	ldr	r3, [r5, #20]
   182d0:	4053      	eors	r3, r2
   182d2:	69aa      	ldr	r2, [r5, #24]
   182d4:	9305      	str	r3, [sp, #20]
   182d6:	404a      	eors	r2, r1
   182d8:	69eb      	ldr	r3, [r5, #28]
   182da:	9206      	str	r2, [sp, #24]
   182dc:	9a07      	ldr	r2, [sp, #28]
   182de:	4630      	mov	r0, r6
   182e0:	4053      	eors	r3, r2
   182e2:	4669      	mov	r1, sp
   182e4:	2280      	movs	r2, #128	; 0x80
   182e6:	9307      	str	r3, [sp, #28]
   182e8:	f001 f80a 	bl	19300 <cc_mbedtls_aes_setkey_enc>
   182ec:	4680      	mov	r8, r0
   182ee:	b138      	cbz	r0, 18300 <ctr_drbg_update_internal+0x138>
   182f0:	4668      	mov	r0, sp
   182f2:	2120      	movs	r1, #32
   182f4:	f7ff fe06 	bl	17f04 <mbedtls_platform_zeroize>
   182f8:	4640      	mov	r0, r8
   182fa:	b008      	add	sp, #32
   182fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18300:	2210      	movs	r2, #16
   18302:	eb0d 0102 	add.w	r1, sp, r2
   18306:	4620      	mov	r0, r4
   18308:	f002 ffab 	bl	1b262 <memcpy>
   1830c:	e7f0      	b.n	182f0 <ctr_drbg_update_internal+0x128>
   1830e:	bf00      	nop

00018310 <mbedtls_ctr_drbg_reseed_internal>:
   18310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18314:	4604      	mov	r4, r0
   18316:	6980      	ldr	r0, [r0, #24]
   18318:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1831c:	d852      	bhi.n	183c4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1831e:	461d      	mov	r5, r3
   18320:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   18324:	42ab      	cmp	r3, r5
   18326:	d34d      	bcc.n	183c4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   18328:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1832c:	1a18      	subs	r0, r3, r0
   1832e:	4290      	cmp	r0, r2
   18330:	4616      	mov	r6, r2
   18332:	d347      	bcc.n	183c4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   18334:	f8df 9098 	ldr.w	r9, [pc, #152]	; 183d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   18338:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1833c:	460f      	mov	r7, r1
   1833e:	4648      	mov	r0, r9
   18340:	2100      	movs	r1, #0
   18342:	f002 ffbd 	bl	1b2c0 <memset>
   18346:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1834a:	69a2      	ldr	r2, [r4, #24]
   1834c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   18350:	4649      	mov	r1, r9
   18352:	4798      	blx	r3
   18354:	2800      	cmp	r0, #0
   18356:	d138      	bne.n	183ca <mbedtls_ctr_drbg_reseed_internal+0xba>
   18358:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1835c:	b13d      	cbz	r5, 1836e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1835e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   18362:	462a      	mov	r2, r5
   18364:	eb09 0108 	add.w	r1, r9, r8
   18368:	4798      	blx	r3
   1836a:	bb70      	cbnz	r0, 183ca <mbedtls_ctr_drbg_reseed_internal+0xba>
   1836c:	44a8      	add	r8, r5
   1836e:	b107      	cbz	r7, 18372 <mbedtls_ctr_drbg_reseed_internal+0x62>
   18370:	b9c6      	cbnz	r6, 183a4 <mbedtls_ctr_drbg_reseed_internal+0x94>
   18372:	4917      	ldr	r1, [pc, #92]	; (183d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   18374:	4642      	mov	r2, r8
   18376:	4608      	mov	r0, r1
   18378:	f7ff fdce 	bl	17f18 <block_cipher_df>
   1837c:	4605      	mov	r5, r0
   1837e:	b138      	cbz	r0, 18390 <mbedtls_ctr_drbg_reseed_internal+0x80>
   18380:	4813      	ldr	r0, [pc, #76]	; (183d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   18382:	f44f 71c0 	mov.w	r1, #384	; 0x180
   18386:	f7ff fdbd 	bl	17f04 <mbedtls_platform_zeroize>
   1838a:	4628      	mov	r0, r5
   1838c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18390:	490f      	ldr	r1, [pc, #60]	; (183d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   18392:	4620      	mov	r0, r4
   18394:	f7ff ff18 	bl	181c8 <ctr_drbg_update_internal>
   18398:	4605      	mov	r5, r0
   1839a:	2800      	cmp	r0, #0
   1839c:	d1f0      	bne.n	18380 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1839e:	2301      	movs	r3, #1
   183a0:	6123      	str	r3, [r4, #16]
   183a2:	e7ed      	b.n	18380 <mbedtls_ctr_drbg_reseed_internal+0x70>
   183a4:	eb09 0008 	add.w	r0, r9, r8
   183a8:	4639      	mov	r1, r7
   183aa:	4632      	mov	r2, r6
   183ac:	f002 ff59 	bl	1b262 <memcpy>
   183b0:	4907      	ldr	r1, [pc, #28]	; (183d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   183b2:	44b0      	add	r8, r6
   183b4:	4642      	mov	r2, r8
   183b6:	4608      	mov	r0, r1
   183b8:	f7ff fdae 	bl	17f18 <block_cipher_df>
   183bc:	4605      	mov	r5, r0
   183be:	2800      	cmp	r0, #0
   183c0:	d1de      	bne.n	18380 <mbedtls_ctr_drbg_reseed_internal+0x70>
   183c2:	e7e5      	b.n	18390 <mbedtls_ctr_drbg_reseed_internal+0x80>
   183c4:	f06f 0537 	mvn.w	r5, #55	; 0x37
   183c8:	e7df      	b.n	1838a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   183ca:	f06f 0533 	mvn.w	r5, #51	; 0x33
   183ce:	e7dc      	b.n	1838a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   183d0:	20003470 	.word	0x20003470

000183d4 <cc_mbedtls_ctr_drbg_init>:
   183d4:	b510      	push	{r4, lr}
   183d6:	22a4      	movs	r2, #164	; 0xa4
   183d8:	4604      	mov	r4, r0
   183da:	2100      	movs	r1, #0
   183dc:	f002 ff70 	bl	1b2c0 <memset>
   183e0:	4b06      	ldr	r3, [pc, #24]	; (183fc <cc_mbedtls_ctr_drbg_init+0x28>)
   183e2:	f04f 31ff 	mov.w	r1, #4294967295
   183e6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   183ea:	6121      	str	r1, [r4, #16]
   183ec:	61e2      	str	r2, [r4, #28]
   183ee:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   183f2:	681b      	ldr	r3, [r3, #0]
   183f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   183f8:	4718      	bx	r3
   183fa:	bf00      	nop
   183fc:	2000095c 	.word	0x2000095c

00018400 <cc_mbedtls_ctr_drbg_seed>:
   18400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18404:	b085      	sub	sp, #20
   18406:	4605      	mov	r5, r0
   18408:	460f      	mov	r7, r1
   1840a:	4616      	mov	r6, r2
   1840c:	2100      	movs	r1, #0
   1840e:	2210      	movs	r2, #16
   18410:	4668      	mov	r0, sp
   18412:	4699      	mov	r9, r3
   18414:	f002 ff54 	bl	1b2c0 <memset>
   18418:	4b1e      	ldr	r3, [pc, #120]	; (18494 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1841a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1841e:	681b      	ldr	r3, [r3, #0]
   18420:	4640      	mov	r0, r8
   18422:	4798      	blx	r3
   18424:	b120      	cbz	r0, 18430 <cc_mbedtls_ctr_drbg_seed+0x30>
   18426:	4604      	mov	r4, r0
   18428:	4620      	mov	r0, r4
   1842a:	b005      	add	sp, #20
   1842c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18430:	f105 0420 	add.w	r4, r5, #32
   18434:	4620      	mov	r0, r4
   18436:	f000 ff4d 	bl	192d4 <cc_mbedtls_aes_init>
   1843a:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1843e:	69ae      	ldr	r6, [r5, #24]
   18440:	692b      	ldr	r3, [r5, #16]
   18442:	b9ee      	cbnz	r6, 18480 <cc_mbedtls_ctr_drbg_seed+0x80>
   18444:	2220      	movs	r2, #32
   18446:	2b00      	cmp	r3, #0
   18448:	61aa      	str	r2, [r5, #24]
   1844a:	db20      	blt.n	1848e <cc_mbedtls_ctr_drbg_seed+0x8e>
   1844c:	461e      	mov	r6, r3
   1844e:	4620      	mov	r0, r4
   18450:	4669      	mov	r1, sp
   18452:	2280      	movs	r2, #128	; 0x80
   18454:	f000 ff54 	bl	19300 <cc_mbedtls_aes_setkey_enc>
   18458:	4604      	mov	r4, r0
   1845a:	b930      	cbnz	r0, 1846a <cc_mbedtls_ctr_drbg_seed+0x6a>
   1845c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1845e:	4633      	mov	r3, r6
   18460:	4649      	mov	r1, r9
   18462:	4628      	mov	r0, r5
   18464:	f7ff ff54 	bl	18310 <mbedtls_ctr_drbg_reseed_internal>
   18468:	4604      	mov	r4, r0
   1846a:	4b0b      	ldr	r3, [pc, #44]	; (18498 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1846c:	4640      	mov	r0, r8
   1846e:	681b      	ldr	r3, [r3, #0]
   18470:	4798      	blx	r3
   18472:	2800      	cmp	r0, #0
   18474:	bf18      	it	ne
   18476:	4604      	movne	r4, r0
   18478:	4620      	mov	r0, r4
   1847a:	b005      	add	sp, #20
   1847c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18480:	2b00      	cmp	r3, #0
   18482:	dae3      	bge.n	1844c <cc_mbedtls_ctr_drbg_seed+0x4c>
   18484:	2e17      	cmp	r6, #23
   18486:	d802      	bhi.n	1848e <cc_mbedtls_ctr_drbg_seed+0x8e>
   18488:	3601      	adds	r6, #1
   1848a:	0876      	lsrs	r6, r6, #1
   1848c:	e7df      	b.n	1844e <cc_mbedtls_ctr_drbg_seed+0x4e>
   1848e:	2600      	movs	r6, #0
   18490:	e7dd      	b.n	1844e <cc_mbedtls_ctr_drbg_seed+0x4e>
   18492:	bf00      	nop
   18494:	20000960 	.word	0x20000960
   18498:	20000964 	.word	0x20000964

0001849c <cc_mbedtls_ctr_drbg_random_with_add>:
   1849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a0:	b08d      	sub	sp, #52	; 0x34
   184a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   184a6:	9f16      	ldr	r7, [sp, #88]	; 0x58
   184a8:	f200 80e3 	bhi.w	18672 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   184ac:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   184b0:	f200 80dc 	bhi.w	1866c <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   184b4:	4604      	mov	r4, r0
   184b6:	4615      	mov	r5, r2
   184b8:	460e      	mov	r6, r1
   184ba:	2220      	movs	r2, #32
   184bc:	2100      	movs	r1, #0
   184be:	a804      	add	r0, sp, #16
   184c0:	4698      	mov	r8, r3
   184c2:	f002 fefd 	bl	1b2c0 <memset>
   184c6:	4b6c      	ldr	r3, [pc, #432]	; (18678 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   184c8:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   184cc:	681b      	ldr	r3, [r3, #0]
   184ce:	4648      	mov	r0, r9
   184d0:	4798      	blx	r3
   184d2:	4683      	mov	fp, r0
   184d4:	2800      	cmp	r0, #0
   184d6:	f040 8092 	bne.w	185fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   184da:	6922      	ldr	r2, [r4, #16]
   184dc:	69e3      	ldr	r3, [r4, #28]
   184de:	429a      	cmp	r2, r3
   184e0:	f300 8091 	bgt.w	18606 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   184e4:	6963      	ldr	r3, [r4, #20]
   184e6:	2b00      	cmp	r3, #0
   184e8:	f040 808d 	bne.w	18606 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   184ec:	2f00      	cmp	r7, #0
   184ee:	f040 80a9 	bne.w	18644 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   184f2:	f8df a188 	ldr.w	sl, [pc, #392]	; 1867c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   184f6:	466f      	mov	r7, sp
   184f8:	2d00      	cmp	r5, #0
   184fa:	f000 8098 	beq.w	1862e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   184fe:	f104 0820 	add.w	r8, r4, #32
   18502:	466f      	mov	r7, sp
   18504:	e00e      	b.n	18524 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   18506:	2d10      	cmp	r5, #16
   18508:	46ab      	mov	fp, r5
   1850a:	bf28      	it	cs
   1850c:	f04f 0b10 	movcs.w	fp, #16
   18510:	4630      	mov	r0, r6
   18512:	465a      	mov	r2, fp
   18514:	4639      	mov	r1, r7
   18516:	f002 fea4 	bl	1b262 <memcpy>
   1851a:	ebb5 050b 	subs.w	r5, r5, fp
   1851e:	445e      	add	r6, fp
   18520:	f000 8085 	beq.w	1862e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   18524:	7be3      	ldrb	r3, [r4, #15]
   18526:	3301      	adds	r3, #1
   18528:	b2db      	uxtb	r3, r3
   1852a:	73e3      	strb	r3, [r4, #15]
   1852c:	2b00      	cmp	r3, #0
   1852e:	d14d      	bne.n	185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   18530:	7ba3      	ldrb	r3, [r4, #14]
   18532:	3301      	adds	r3, #1
   18534:	b2db      	uxtb	r3, r3
   18536:	73a3      	strb	r3, [r4, #14]
   18538:	2b00      	cmp	r3, #0
   1853a:	d147      	bne.n	185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1853c:	7b63      	ldrb	r3, [r4, #13]
   1853e:	3301      	adds	r3, #1
   18540:	b2db      	uxtb	r3, r3
   18542:	7363      	strb	r3, [r4, #13]
   18544:	2b00      	cmp	r3, #0
   18546:	d141      	bne.n	185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   18548:	7b23      	ldrb	r3, [r4, #12]
   1854a:	3301      	adds	r3, #1
   1854c:	b2db      	uxtb	r3, r3
   1854e:	7323      	strb	r3, [r4, #12]
   18550:	2b00      	cmp	r3, #0
   18552:	d13b      	bne.n	185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   18554:	7ae3      	ldrb	r3, [r4, #11]
   18556:	3301      	adds	r3, #1
   18558:	b2db      	uxtb	r3, r3
   1855a:	72e3      	strb	r3, [r4, #11]
   1855c:	2b00      	cmp	r3, #0
   1855e:	d135      	bne.n	185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   18560:	7aa3      	ldrb	r3, [r4, #10]
   18562:	3301      	adds	r3, #1
   18564:	b2db      	uxtb	r3, r3
   18566:	72a3      	strb	r3, [r4, #10]
   18568:	2b00      	cmp	r3, #0
   1856a:	d12f      	bne.n	185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1856c:	7a63      	ldrb	r3, [r4, #9]
   1856e:	3301      	adds	r3, #1
   18570:	b2db      	uxtb	r3, r3
   18572:	7263      	strb	r3, [r4, #9]
   18574:	bb53      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   18576:	7a23      	ldrb	r3, [r4, #8]
   18578:	3301      	adds	r3, #1
   1857a:	b2db      	uxtb	r3, r3
   1857c:	7223      	strb	r3, [r4, #8]
   1857e:	bb2b      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   18580:	79e3      	ldrb	r3, [r4, #7]
   18582:	3301      	adds	r3, #1
   18584:	b2db      	uxtb	r3, r3
   18586:	71e3      	strb	r3, [r4, #7]
   18588:	bb03      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1858a:	79a3      	ldrb	r3, [r4, #6]
   1858c:	3301      	adds	r3, #1
   1858e:	b2db      	uxtb	r3, r3
   18590:	71a3      	strb	r3, [r4, #6]
   18592:	b9db      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   18594:	7963      	ldrb	r3, [r4, #5]
   18596:	3301      	adds	r3, #1
   18598:	b2db      	uxtb	r3, r3
   1859a:	7163      	strb	r3, [r4, #5]
   1859c:	b9b3      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1859e:	7923      	ldrb	r3, [r4, #4]
   185a0:	3301      	adds	r3, #1
   185a2:	b2db      	uxtb	r3, r3
   185a4:	7123      	strb	r3, [r4, #4]
   185a6:	b98b      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   185a8:	78e3      	ldrb	r3, [r4, #3]
   185aa:	3301      	adds	r3, #1
   185ac:	b2db      	uxtb	r3, r3
   185ae:	70e3      	strb	r3, [r4, #3]
   185b0:	b963      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   185b2:	78a3      	ldrb	r3, [r4, #2]
   185b4:	3301      	adds	r3, #1
   185b6:	b2db      	uxtb	r3, r3
   185b8:	70a3      	strb	r3, [r4, #2]
   185ba:	b93b      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   185bc:	7863      	ldrb	r3, [r4, #1]
   185be:	3301      	adds	r3, #1
   185c0:	b2db      	uxtb	r3, r3
   185c2:	7063      	strb	r3, [r4, #1]
   185c4:	b913      	cbnz	r3, 185cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   185c6:	7823      	ldrb	r3, [r4, #0]
   185c8:	3301      	adds	r3, #1
   185ca:	7023      	strb	r3, [r4, #0]
   185cc:	463b      	mov	r3, r7
   185ce:	4622      	mov	r2, r4
   185d0:	2101      	movs	r1, #1
   185d2:	4640      	mov	r0, r8
   185d4:	f000 feae 	bl	19334 <cc_mbedtls_aes_crypt_ecb>
   185d8:	4683      	mov	fp, r0
   185da:	2800      	cmp	r0, #0
   185dc:	d093      	beq.n	18506 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   185de:	f8da 3000 	ldr.w	r3, [sl]
   185e2:	4648      	mov	r0, r9
   185e4:	4798      	blx	r3
   185e6:	2120      	movs	r1, #32
   185e8:	4603      	mov	r3, r0
   185ea:	a804      	add	r0, sp, #16
   185ec:	2b00      	cmp	r3, #0
   185ee:	bf18      	it	ne
   185f0:	469b      	movne	fp, r3
   185f2:	f7ff fc87 	bl	17f04 <mbedtls_platform_zeroize>
   185f6:	2110      	movs	r1, #16
   185f8:	4638      	mov	r0, r7
   185fa:	f7ff fc83 	bl	17f04 <mbedtls_platform_zeroize>
   185fe:	4658      	mov	r0, fp
   18600:	b00d      	add	sp, #52	; 0x34
   18602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18606:	463a      	mov	r2, r7
   18608:	4641      	mov	r1, r8
   1860a:	2300      	movs	r3, #0
   1860c:	4620      	mov	r0, r4
   1860e:	f7ff fe7f 	bl	18310 <mbedtls_ctr_drbg_reseed_internal>
   18612:	f8df a068 	ldr.w	sl, [pc, #104]	; 1867c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   18616:	2800      	cmp	r0, #0
   18618:	f43f af6d 	beq.w	184f6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1861c:	f8da 3000 	ldr.w	r3, [sl]
   18620:	4648      	mov	r0, r9
   18622:	4798      	blx	r3
   18624:	4683      	mov	fp, r0
   18626:	2800      	cmp	r0, #0
   18628:	f43f af65 	beq.w	184f6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1862c:	e7e7      	b.n	185fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1862e:	a904      	add	r1, sp, #16
   18630:	4620      	mov	r0, r4
   18632:	f7ff fdc9 	bl	181c8 <ctr_drbg_update_internal>
   18636:	4683      	mov	fp, r0
   18638:	2800      	cmp	r0, #0
   1863a:	d1d0      	bne.n	185de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1863c:	6923      	ldr	r3, [r4, #16]
   1863e:	3301      	adds	r3, #1
   18640:	6123      	str	r3, [r4, #16]
   18642:	e7cc      	b.n	185de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   18644:	463a      	mov	r2, r7
   18646:	4641      	mov	r1, r8
   18648:	a804      	add	r0, sp, #16
   1864a:	f7ff fc65 	bl	17f18 <block_cipher_df>
   1864e:	4683      	mov	fp, r0
   18650:	b118      	cbz	r0, 1865a <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   18652:	f8df a028 	ldr.w	sl, [pc, #40]	; 1867c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   18656:	466f      	mov	r7, sp
   18658:	e7c1      	b.n	185de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1865a:	a904      	add	r1, sp, #16
   1865c:	4620      	mov	r0, r4
   1865e:	f7ff fdb3 	bl	181c8 <ctr_drbg_update_internal>
   18662:	4683      	mov	fp, r0
   18664:	2800      	cmp	r0, #0
   18666:	f43f af44 	beq.w	184f2 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1866a:	e7f2      	b.n	18652 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1866c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   18670:	e7c5      	b.n	185fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   18672:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   18676:	e7c2      	b.n	185fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   18678:	20000960 	.word	0x20000960
   1867c:	20000964 	.word	0x20000964

00018680 <entropy_update>:
   18680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18684:	2b20      	cmp	r3, #32
   18686:	b08b      	sub	sp, #44	; 0x2c
   18688:	461d      	mov	r5, r3
   1868a:	4606      	mov	r6, r0
   1868c:	4688      	mov	r8, r1
   1868e:	4691      	mov	r9, r2
   18690:	d826      	bhi.n	186e0 <entropy_update+0x60>
   18692:	b2db      	uxtb	r3, r3
   18694:	af02      	add	r7, sp, #8
   18696:	f88d 8004 	strb.w	r8, [sp, #4]
   1869a:	46b0      	mov	r8, r6
   1869c:	f88d 3005 	strb.w	r3, [sp, #5]
   186a0:	f858 1b04 	ldr.w	r1, [r8], #4
   186a4:	b921      	cbnz	r1, 186b0 <entropy_update+0x30>
   186a6:	4640      	mov	r0, r8
   186a8:	f000 fe88 	bl	193bc <cc_mbedtls_sha256_starts>
   186ac:	4604      	mov	r4, r0
   186ae:	b940      	cbnz	r0, 186c2 <entropy_update+0x42>
   186b0:	2301      	movs	r3, #1
   186b2:	6033      	str	r3, [r6, #0]
   186b4:	2202      	movs	r2, #2
   186b6:	a901      	add	r1, sp, #4
   186b8:	4640      	mov	r0, r8
   186ba:	f000 fe93 	bl	193e4 <cc_mbedtls_sha256_update>
   186be:	4604      	mov	r4, r0
   186c0:	b138      	cbz	r0, 186d2 <entropy_update+0x52>
   186c2:	4638      	mov	r0, r7
   186c4:	2120      	movs	r1, #32
   186c6:	f7ff fc1d 	bl	17f04 <mbedtls_platform_zeroize>
   186ca:	4620      	mov	r0, r4
   186cc:	b00b      	add	sp, #44	; 0x2c
   186ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   186d2:	462a      	mov	r2, r5
   186d4:	4649      	mov	r1, r9
   186d6:	4640      	mov	r0, r8
   186d8:	f000 fe84 	bl	193e4 <cc_mbedtls_sha256_update>
   186dc:	4604      	mov	r4, r0
   186de:	e7f0      	b.n	186c2 <entropy_update+0x42>
   186e0:	af02      	add	r7, sp, #8
   186e2:	4619      	mov	r1, r3
   186e4:	4610      	mov	r0, r2
   186e6:	2300      	movs	r3, #0
   186e8:	463a      	mov	r2, r7
   186ea:	f001 f803 	bl	196f4 <cc_mbedtls_sha256>
   186ee:	4604      	mov	r4, r0
   186f0:	2800      	cmp	r0, #0
   186f2:	d1e6      	bne.n	186c2 <entropy_update+0x42>
   186f4:	2320      	movs	r3, #32
   186f6:	46b9      	mov	r9, r7
   186f8:	461d      	mov	r5, r3
   186fa:	e7cc      	b.n	18696 <entropy_update+0x16>

000186fc <entropy_gather_internal.part.0>:
   186fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   186fe:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   18702:	b0a7      	sub	sp, #156	; 0x9c
   18704:	2b00      	cmp	r3, #0
   18706:	bfd8      	it	le
   18708:	ae02      	addle	r6, sp, #8
   1870a:	dd2c      	ble.n	18766 <entropy_gather_internal.part.0+0x6a>
   1870c:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   18710:	4605      	mov	r5, r0
   18712:	2300      	movs	r3, #0
   18714:	ae02      	add	r6, sp, #8
   18716:	9301      	str	r3, [sp, #4]
   18718:	f1a4 0701 	sub.w	r7, r4, #1
   1871c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   18720:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   18724:	ab01      	add	r3, sp, #4
   18726:	2290      	movs	r2, #144	; 0x90
   18728:	4631      	mov	r1, r6
   1872a:	47a0      	blx	r4
   1872c:	fab7 f787 	clz	r7, r7
   18730:	097f      	lsrs	r7, r7, #5
   18732:	4604      	mov	r4, r0
   18734:	b910      	cbnz	r0, 1873c <entropy_gather_internal.part.0+0x40>
   18736:	9b01      	ldr	r3, [sp, #4]
   18738:	b93b      	cbnz	r3, 1874a <entropy_gather_internal.part.0+0x4e>
   1873a:	b1a7      	cbz	r7, 18766 <entropy_gather_internal.part.0+0x6a>
   1873c:	4630      	mov	r0, r6
   1873e:	2190      	movs	r1, #144	; 0x90
   18740:	f7ff fbe0 	bl	17f04 <mbedtls_platform_zeroize>
   18744:	4620      	mov	r0, r4
   18746:	b027      	add	sp, #156	; 0x9c
   18748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1874a:	4601      	mov	r1, r0
   1874c:	4632      	mov	r2, r6
   1874e:	4628      	mov	r0, r5
   18750:	f7ff ff96 	bl	18680 <entropy_update>
   18754:	b950      	cbnz	r0, 1876c <entropy_gather_internal.part.0+0x70>
   18756:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1875a:	9a01      	ldr	r2, [sp, #4]
   1875c:	4413      	add	r3, r2
   1875e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   18762:	2f00      	cmp	r7, #0
   18764:	d1ea      	bne.n	1873c <entropy_gather_internal.part.0+0x40>
   18766:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1876a:	e7e7      	b.n	1873c <entropy_gather_internal.part.0+0x40>
   1876c:	4604      	mov	r4, r0
   1876e:	4620      	mov	r0, r4
   18770:	b027      	add	sp, #156	; 0x9c
   18772:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018774 <cc_mbedtls_entropy_init>:
   18774:	b570      	push	{r4, r5, r6, lr}
   18776:	2500      	movs	r5, #0
   18778:	4604      	mov	r4, r0
   1877a:	2214      	movs	r2, #20
   1877c:	4629      	mov	r1, r5
   1877e:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   18782:	30fc      	adds	r0, #252	; 0xfc
   18784:	f002 fd9c 	bl	1b2c0 <memset>
   18788:	4b16      	ldr	r3, [pc, #88]	; (187e4 <cc_mbedtls_entropy_init+0x70>)
   1878a:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1878e:	681b      	ldr	r3, [r3, #0]
   18790:	4630      	mov	r0, r6
   18792:	4798      	blx	r3
   18794:	4620      	mov	r0, r4
   18796:	f840 5b04 	str.w	r5, [r0], #4
   1879a:	f000 fdf5 	bl	19388 <cc_mbedtls_sha256_init>
   1879e:	4b12      	ldr	r3, [pc, #72]	; (187e8 <cc_mbedtls_entropy_init+0x74>)
   187a0:	4630      	mov	r0, r6
   187a2:	681b      	ldr	r3, [r3, #0]
   187a4:	4798      	blx	r3
   187a6:	b9d8      	cbnz	r0, 187e0 <cc_mbedtls_entropy_init+0x6c>
   187a8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   187ac:	42ab      	cmp	r3, r5
   187ae:	dc11      	bgt.n	187d4 <cc_mbedtls_entropy_init+0x60>
   187b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   187b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   187b8:	2120      	movs	r1, #32
   187ba:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   187be:	2101      	movs	r1, #1
   187c0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   187c4:	3301      	adds	r3, #1
   187c6:	4909      	ldr	r1, [pc, #36]	; (187ec <cc_mbedtls_entropy_init+0x78>)
   187c8:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   187cc:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   187d0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   187d4:	4b06      	ldr	r3, [pc, #24]	; (187f0 <cc_mbedtls_entropy_init+0x7c>)
   187d6:	4630      	mov	r0, r6
   187d8:	681b      	ldr	r3, [r3, #0]
   187da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   187de:	4718      	bx	r3
   187e0:	bd70      	pop	{r4, r5, r6, pc}
   187e2:	bf00      	nop
   187e4:	2000095c 	.word	0x2000095c
   187e8:	20000960 	.word	0x20000960
   187ec:	000191d9 	.word	0x000191d9
   187f0:	20000964 	.word	0x20000964

000187f4 <cc_mbedtls_entropy_func>:
   187f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   187f8:	2a20      	cmp	r2, #32
   187fa:	b088      	sub	sp, #32
   187fc:	d876      	bhi.n	188ec <cc_mbedtls_entropy_func+0xf8>
   187fe:	4b3d      	ldr	r3, [pc, #244]	; (188f4 <cc_mbedtls_entropy_func+0x100>)
   18800:	f500 7988 	add.w	r9, r0, #272	; 0x110
   18804:	681b      	ldr	r3, [r3, #0]
   18806:	4604      	mov	r4, r0
   18808:	4648      	mov	r0, r9
   1880a:	4617      	mov	r7, r2
   1880c:	4688      	mov	r8, r1
   1880e:	4798      	blx	r3
   18810:	4605      	mov	r5, r0
   18812:	bba0      	cbnz	r0, 1887e <cc_mbedtls_entropy_func+0x8a>
   18814:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   18818:	f240 1601 	movw	r6, #257	; 0x101
   1881c:	e001      	b.n	18822 <cc_mbedtls_entropy_func+0x2e>
   1881e:	3e01      	subs	r6, #1
   18820:	d060      	beq.n	188e4 <cc_mbedtls_entropy_func+0xf0>
   18822:	4620      	mov	r0, r4
   18824:	b37b      	cbz	r3, 18886 <cc_mbedtls_entropy_func+0x92>
   18826:	f7ff ff69 	bl	186fc <entropy_gather_internal.part.0>
   1882a:	4605      	mov	r5, r0
   1882c:	bb68      	cbnz	r0, 1888a <cc_mbedtls_entropy_func+0x96>
   1882e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   18832:	2b00      	cmp	r3, #0
   18834:	ddf3      	ble.n	1881e <cc_mbedtls_entropy_func+0x2a>
   18836:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   1883a:	4290      	cmp	r0, r2
   1883c:	d3ef      	bcc.n	1881e <cc_mbedtls_entropy_func+0x2a>
   1883e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18842:	2a01      	cmp	r2, #1
   18844:	d1eb      	bne.n	1881e <cc_mbedtls_entropy_func+0x2a>
   18846:	281f      	cmp	r0, #31
   18848:	d9e9      	bls.n	1881e <cc_mbedtls_entropy_func+0x2a>
   1884a:	466e      	mov	r6, sp
   1884c:	4629      	mov	r1, r5
   1884e:	2220      	movs	r2, #32
   18850:	4630      	mov	r0, r6
   18852:	f104 0a04 	add.w	sl, r4, #4
   18856:	f002 fd33 	bl	1b2c0 <memset>
   1885a:	4631      	mov	r1, r6
   1885c:	4650      	mov	r0, sl
   1885e:	f000 fdeb 	bl	19438 <cc_mbedtls_sha256_finish>
   18862:	4605      	mov	r5, r0
   18864:	b198      	cbz	r0, 1888e <cc_mbedtls_entropy_func+0x9a>
   18866:	2120      	movs	r1, #32
   18868:	4630      	mov	r0, r6
   1886a:	f7ff fb4b 	bl	17f04 <mbedtls_platform_zeroize>
   1886e:	4b22      	ldr	r3, [pc, #136]	; (188f8 <cc_mbedtls_entropy_func+0x104>)
   18870:	4648      	mov	r0, r9
   18872:	681b      	ldr	r3, [r3, #0]
   18874:	4798      	blx	r3
   18876:	2800      	cmp	r0, #0
   18878:	bf18      	it	ne
   1887a:	f06f 051d 	mvnne.w	r5, #29
   1887e:	4628      	mov	r0, r5
   18880:	b008      	add	sp, #32
   18882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18886:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1888a:	466e      	mov	r6, sp
   1888c:	e7eb      	b.n	18866 <cc_mbedtls_entropy_func+0x72>
   1888e:	4650      	mov	r0, sl
   18890:	f000 fd8e 	bl	193b0 <cc_mbedtls_sha256_free>
   18894:	4650      	mov	r0, sl
   18896:	f000 fd77 	bl	19388 <cc_mbedtls_sha256_init>
   1889a:	4629      	mov	r1, r5
   1889c:	4650      	mov	r0, sl
   1889e:	f000 fd8d 	bl	193bc <cc_mbedtls_sha256_starts>
   188a2:	4605      	mov	r5, r0
   188a4:	2800      	cmp	r0, #0
   188a6:	d1de      	bne.n	18866 <cc_mbedtls_entropy_func+0x72>
   188a8:	4650      	mov	r0, sl
   188aa:	2220      	movs	r2, #32
   188ac:	4631      	mov	r1, r6
   188ae:	f000 fd99 	bl	193e4 <cc_mbedtls_sha256_update>
   188b2:	4605      	mov	r5, r0
   188b4:	2800      	cmp	r0, #0
   188b6:	d1d6      	bne.n	18866 <cc_mbedtls_entropy_func+0x72>
   188b8:	4603      	mov	r3, r0
   188ba:	4632      	mov	r2, r6
   188bc:	2120      	movs	r1, #32
   188be:	4630      	mov	r0, r6
   188c0:	f000 ff18 	bl	196f4 <cc_mbedtls_sha256>
   188c4:	4605      	mov	r5, r0
   188c6:	2800      	cmp	r0, #0
   188c8:	d1cd      	bne.n	18866 <cc_mbedtls_entropy_func+0x72>
   188ca:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   188ce:	2b00      	cmp	r3, #0
   188d0:	bfc4      	itt	gt
   188d2:	2300      	movgt	r3, #0
   188d4:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   188d8:	463a      	mov	r2, r7
   188da:	4640      	mov	r0, r8
   188dc:	4631      	mov	r1, r6
   188de:	f002 fcc0 	bl	1b262 <memcpy>
   188e2:	e7c0      	b.n	18866 <cc_mbedtls_entropy_func+0x72>
   188e4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   188e8:	466e      	mov	r6, sp
   188ea:	e7bc      	b.n	18866 <cc_mbedtls_entropy_func+0x72>
   188ec:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   188f0:	e7c5      	b.n	1887e <cc_mbedtls_entropy_func+0x8a>
   188f2:	bf00      	nop
   188f4:	20000960 	.word	0x20000960
   188f8:	20000964 	.word	0x20000964

000188fc <RndStartupTest.constprop.0>:
   188fc:	b530      	push	{r4, r5, lr}
   188fe:	b08d      	sub	sp, #52	; 0x34
   18900:	2100      	movs	r1, #0
   18902:	2228      	movs	r2, #40	; 0x28
   18904:	a802      	add	r0, sp, #8
   18906:	9101      	str	r1, [sp, #4]
   18908:	f002 fcda 	bl	1b2c0 <memset>
   1890c:	a802      	add	r0, sp, #8
   1890e:	f000 ff19 	bl	19744 <RNG_PLAT_SetUserRngParameters>
   18912:	4604      	mov	r4, r0
   18914:	b110      	cbz	r0, 1891c <RndStartupTest.constprop.0+0x20>
   18916:	4620      	mov	r0, r4
   18918:	b00d      	add	sp, #52	; 0x34
   1891a:	bd30      	pop	{r4, r5, pc}
   1891c:	4d18      	ldr	r5, [pc, #96]	; (18980 <RndStartupTest.constprop.0+0x84>)
   1891e:	f04f 31ff 	mov.w	r1, #4294967295
   18922:	6828      	ldr	r0, [r5, #0]
   18924:	f000 f946 	bl	18bb4 <CC_PalMutexLock>
   18928:	4604      	mov	r4, r0
   1892a:	b9c0      	cbnz	r0, 1895e <RndStartupTest.constprop.0+0x62>
   1892c:	2000      	movs	r0, #0
   1892e:	f000 f971 	bl	18c14 <CC_PalPowerSaveModeSelect>
   18932:	bb00      	cbnz	r0, 18976 <RndStartupTest.constprop.0+0x7a>
   18934:	4a13      	ldr	r2, [pc, #76]	; (18984 <RndStartupTest.constprop.0+0x88>)
   18936:	a902      	add	r1, sp, #8
   18938:	a801      	add	r0, sp, #4
   1893a:	f000 fc3f 	bl	191bc <LLF_RND_RunTrngStartupTest>
   1893e:	4604      	mov	r4, r0
   18940:	2001      	movs	r0, #1
   18942:	f000 f967 	bl	18c14 <CC_PalPowerSaveModeSelect>
   18946:	b990      	cbnz	r0, 1896e <RndStartupTest.constprop.0+0x72>
   18948:	6828      	ldr	r0, [r5, #0]
   1894a:	f000 f93b 	bl	18bc4 <CC_PalMutexUnlock>
   1894e:	2800      	cmp	r0, #0
   18950:	d0e1      	beq.n	18916 <RndStartupTest.constprop.0+0x1a>
   18952:	480d      	ldr	r0, [pc, #52]	; (18988 <RndStartupTest.constprop.0+0x8c>)
   18954:	f7ff f9ce 	bl	17cf4 <CC_PalAbort>
   18958:	4620      	mov	r0, r4
   1895a:	b00d      	add	sp, #52	; 0x34
   1895c:	bd30      	pop	{r4, r5, pc}
   1895e:	480b      	ldr	r0, [pc, #44]	; (1898c <RndStartupTest.constprop.0+0x90>)
   18960:	f7ff f9c8 	bl	17cf4 <CC_PalAbort>
   18964:	2c01      	cmp	r4, #1
   18966:	bf08      	it	eq
   18968:	2405      	moveq	r4, #5
   1896a:	d0ed      	beq.n	18948 <RndStartupTest.constprop.0+0x4c>
   1896c:	e7de      	b.n	1892c <RndStartupTest.constprop.0+0x30>
   1896e:	4808      	ldr	r0, [pc, #32]	; (18990 <RndStartupTest.constprop.0+0x94>)
   18970:	f7ff f9c0 	bl	17cf4 <CC_PalAbort>
   18974:	e7e8      	b.n	18948 <RndStartupTest.constprop.0+0x4c>
   18976:	4807      	ldr	r0, [pc, #28]	; (18994 <RndStartupTest.constprop.0+0x98>)
   18978:	f7ff f9bc 	bl	17cf4 <CC_PalAbort>
   1897c:	e7da      	b.n	18934 <RndStartupTest.constprop.0+0x38>
   1897e:	bf00      	nop
   18980:	20000958 	.word	0x20000958
   18984:	2000365c 	.word	0x2000365c
   18988:	0001efd8 	.word	0x0001efd8
   1898c:	0001ef80 	.word	0x0001ef80
   18990:	0001efb8 	.word	0x0001efb8
   18994:	0001ef98 	.word	0x0001ef98

00018998 <CC_LibInit>:
   18998:	b530      	push	{r4, r5, lr}
   1899a:	b083      	sub	sp, #12
   1899c:	f000 f85c 	bl	18a58 <CC_HalInit>
   189a0:	b128      	cbz	r0, 189ae <CC_LibInit+0x16>
   189a2:	f000 f8ab 	bl	18afc <CC_PalTerminate>
   189a6:	2403      	movs	r4, #3
   189a8:	4620      	mov	r0, r4
   189aa:	b003      	add	sp, #12
   189ac:	bd30      	pop	{r4, r5, pc}
   189ae:	f000 f877 	bl	18aa0 <CC_PalInit>
   189b2:	b9d8      	cbnz	r0, 189ec <CC_LibInit+0x54>
   189b4:	f000 f92e 	bl	18c14 <CC_PalPowerSaveModeSelect>
   189b8:	b9e0      	cbnz	r0, 189f4 <CC_LibInit+0x5c>
   189ba:	4c22      	ldr	r4, [pc, #136]	; (18a44 <CC_LibInit+0xac>)
   189bc:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   189c0:	0e1b      	lsrs	r3, r3, #24
   189c2:	2bf0      	cmp	r3, #240	; 0xf0
   189c4:	d10a      	bne.n	189dc <CC_LibInit+0x44>
   189c6:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   189ca:	4b1f      	ldr	r3, [pc, #124]	; (18a48 <CC_LibInit+0xb0>)
   189cc:	429a      	cmp	r2, r3
   189ce:	d031      	beq.n	18a34 <CC_LibInit+0x9c>
   189d0:	f000 f844 	bl	18a5c <CC_HalTerminate>
   189d4:	2407      	movs	r4, #7
   189d6:	f000 f891 	bl	18afc <CC_PalTerminate>
   189da:	e7e5      	b.n	189a8 <CC_LibInit+0x10>
   189dc:	f000 f83e 	bl	18a5c <CC_HalTerminate>
   189e0:	f000 f88c 	bl	18afc <CC_PalTerminate>
   189e4:	2406      	movs	r4, #6
   189e6:	4620      	mov	r0, r4
   189e8:	b003      	add	sp, #12
   189ea:	bd30      	pop	{r4, r5, pc}
   189ec:	2404      	movs	r4, #4
   189ee:	4620      	mov	r0, r4
   189f0:	b003      	add	sp, #12
   189f2:	bd30      	pop	{r4, r5, pc}
   189f4:	f000 f832 	bl	18a5c <CC_HalTerminate>
   189f8:	f000 f880 	bl	18afc <CC_PalTerminate>
   189fc:	f7ff ff7e 	bl	188fc <RndStartupTest.constprop.0>
   18a00:	4604      	mov	r4, r0
   18a02:	b998      	cbnz	r0, 18a2c <CC_LibInit+0x94>
   18a04:	4d11      	ldr	r5, [pc, #68]	; (18a4c <CC_LibInit+0xb4>)
   18a06:	682b      	ldr	r3, [r5, #0]
   18a08:	2b00      	cmp	r3, #0
   18a0a:	d1cd      	bne.n	189a8 <CC_LibInit+0x10>
   18a0c:	4602      	mov	r2, r0
   18a0e:	4601      	mov	r1, r0
   18a10:	f7ff f992 	bl	17d38 <nrf_cc3xx_platform_ctr_drbg_init>
   18a14:	b950      	cbnz	r0, 18a2c <CC_LibInit+0x94>
   18a16:	490e      	ldr	r1, [pc, #56]	; (18a50 <CC_LibInit+0xb8>)
   18a18:	ab01      	add	r3, sp, #4
   18a1a:	2268      	movs	r2, #104	; 0x68
   18a1c:	f7ff f9be 	bl	17d9c <nrf_cc3xx_platform_ctr_drbg_get>
   18a20:	b920      	cbnz	r0, 18a2c <CC_LibInit+0x94>
   18a22:	4b0c      	ldr	r3, [pc, #48]	; (18a54 <CC_LibInit+0xbc>)
   18a24:	602b      	str	r3, [r5, #0]
   18a26:	4620      	mov	r0, r4
   18a28:	b003      	add	sp, #12
   18a2a:	bd30      	pop	{r4, r5, pc}
   18a2c:	2405      	movs	r4, #5
   18a2e:	4620      	mov	r0, r4
   18a30:	b003      	add	sp, #12
   18a32:	bd30      	pop	{r4, r5, pc}
   18a34:	2001      	movs	r0, #1
   18a36:	f000 f8ed 	bl	18c14 <CC_PalPowerSaveModeSelect>
   18a3a:	2800      	cmp	r0, #0
   18a3c:	d1da      	bne.n	189f4 <CC_LibInit+0x5c>
   18a3e:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   18a42:	e7db      	b.n	189fc <CC_LibInit+0x64>
   18a44:	5002b000 	.word	0x5002b000
   18a48:	20e00000 	.word	0x20e00000
   18a4c:	20003658 	.word	0x20003658
   18a50:	200035f0 	.word	0x200035f0
   18a54:	5a5aea5a 	.word	0x5a5aea5a

00018a58 <CC_HalInit>:
   18a58:	2000      	movs	r0, #0
   18a5a:	4770      	bx	lr

00018a5c <CC_HalTerminate>:
   18a5c:	2000      	movs	r0, #0
   18a5e:	4770      	bx	lr

00018a60 <CC_HalClearInterruptBit>:
   18a60:	0543      	lsls	r3, r0, #21
   18a62:	d504      	bpl.n	18a6e <CC_HalClearInterruptBit+0xe>
   18a64:	4b04      	ldr	r3, [pc, #16]	; (18a78 <CC_HalClearInterruptBit+0x18>)
   18a66:	f04f 32ff 	mov.w	r2, #4294967295
   18a6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   18a6e:	4b02      	ldr	r3, [pc, #8]	; (18a78 <CC_HalClearInterruptBit+0x18>)
   18a70:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   18a74:	4770      	bx	lr
   18a76:	bf00      	nop
   18a78:	5002b000 	.word	0x5002b000

00018a7c <CC_HalMaskInterrupt>:
   18a7c:	4b01      	ldr	r3, [pc, #4]	; (18a84 <CC_HalMaskInterrupt+0x8>)
   18a7e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   18a82:	4770      	bx	lr
   18a84:	5002b000 	.word	0x5002b000

00018a88 <CC_HalWaitInterrupt>:
   18a88:	b108      	cbz	r0, 18a8e <CC_HalWaitInterrupt+0x6>
   18a8a:	f000 b86b 	b.w	18b64 <CC_PalWaitInterrupt>
   18a8e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   18a92:	4770      	bx	lr

00018a94 <CC_HalWaitInterruptRND>:
   18a94:	b108      	cbz	r0, 18a9a <CC_HalWaitInterruptRND+0x6>
   18a96:	f000 b84f 	b.w	18b38 <CC_PalWaitInterruptRND>
   18a9a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   18a9e:	4770      	bx	lr

00018aa0 <CC_PalInit>:
   18aa0:	b510      	push	{r4, lr}
   18aa2:	4811      	ldr	r0, [pc, #68]	; (18ae8 <CC_PalInit+0x48>)
   18aa4:	f000 f872 	bl	18b8c <CC_PalMutexCreate>
   18aa8:	b100      	cbz	r0, 18aac <CC_PalInit+0xc>
   18aaa:	bd10      	pop	{r4, pc}
   18aac:	480f      	ldr	r0, [pc, #60]	; (18aec <CC_PalInit+0x4c>)
   18aae:	f000 f86d 	bl	18b8c <CC_PalMutexCreate>
   18ab2:	2800      	cmp	r0, #0
   18ab4:	d1f9      	bne.n	18aaa <CC_PalInit+0xa>
   18ab6:	4c0e      	ldr	r4, [pc, #56]	; (18af0 <CC_PalInit+0x50>)
   18ab8:	4620      	mov	r0, r4
   18aba:	f000 f867 	bl	18b8c <CC_PalMutexCreate>
   18abe:	2800      	cmp	r0, #0
   18ac0:	d1f3      	bne.n	18aaa <CC_PalInit+0xa>
   18ac2:	4b0c      	ldr	r3, [pc, #48]	; (18af4 <CC_PalInit+0x54>)
   18ac4:	480c      	ldr	r0, [pc, #48]	; (18af8 <CC_PalInit+0x58>)
   18ac6:	601c      	str	r4, [r3, #0]
   18ac8:	f000 f860 	bl	18b8c <CC_PalMutexCreate>
   18acc:	4601      	mov	r1, r0
   18ace:	2800      	cmp	r0, #0
   18ad0:	d1eb      	bne.n	18aaa <CC_PalInit+0xa>
   18ad2:	f000 f82d 	bl	18b30 <CC_PalDmaInit>
   18ad6:	4604      	mov	r4, r0
   18ad8:	b108      	cbz	r0, 18ade <CC_PalInit+0x3e>
   18ada:	4620      	mov	r0, r4
   18adc:	bd10      	pop	{r4, pc}
   18ade:	f000 f87b 	bl	18bd8 <CC_PalPowerSaveModeInit>
   18ae2:	4620      	mov	r0, r4
   18ae4:	e7fa      	b.n	18adc <CC_PalInit+0x3c>
   18ae6:	bf00      	nop
   18ae8:	20000954 	.word	0x20000954
   18aec:	20000948 	.word	0x20000948
   18af0:	20000950 	.word	0x20000950
   18af4:	20000958 	.word	0x20000958
   18af8:	2000094c 	.word	0x2000094c

00018afc <CC_PalTerminate>:
   18afc:	b508      	push	{r3, lr}
   18afe:	4808      	ldr	r0, [pc, #32]	; (18b20 <CC_PalTerminate+0x24>)
   18b00:	f000 f84e 	bl	18ba0 <CC_PalMutexDestroy>
   18b04:	4807      	ldr	r0, [pc, #28]	; (18b24 <CC_PalTerminate+0x28>)
   18b06:	f000 f84b 	bl	18ba0 <CC_PalMutexDestroy>
   18b0a:	4807      	ldr	r0, [pc, #28]	; (18b28 <CC_PalTerminate+0x2c>)
   18b0c:	f000 f848 	bl	18ba0 <CC_PalMutexDestroy>
   18b10:	4806      	ldr	r0, [pc, #24]	; (18b2c <CC_PalTerminate+0x30>)
   18b12:	f000 f845 	bl	18ba0 <CC_PalMutexDestroy>
   18b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18b1a:	f000 b80b 	b.w	18b34 <CC_PalDmaTerminate>
   18b1e:	bf00      	nop
   18b20:	20000954 	.word	0x20000954
   18b24:	20000948 	.word	0x20000948
   18b28:	20000950 	.word	0x20000950
   18b2c:	2000094c 	.word	0x2000094c

00018b30 <CC_PalDmaInit>:
   18b30:	2000      	movs	r0, #0
   18b32:	4770      	bx	lr

00018b34 <CC_PalDmaTerminate>:
   18b34:	4770      	bx	lr
   18b36:	bf00      	nop

00018b38 <CC_PalWaitInterruptRND>:
   18b38:	b410      	push	{r4}
   18b3a:	4c09      	ldr	r4, [pc, #36]	; (18b60 <CC_PalWaitInterruptRND+0x28>)
   18b3c:	4602      	mov	r2, r0
   18b3e:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   18b42:	4213      	tst	r3, r2
   18b44:	d0fb      	beq.n	18b3e <CC_PalWaitInterruptRND+0x6>
   18b46:	b121      	cbz	r1, 18b52 <CC_PalWaitInterruptRND+0x1a>
   18b48:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   18b4c:	600b      	str	r3, [r1, #0]
   18b4e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   18b52:	4b03      	ldr	r3, [pc, #12]	; (18b60 <CC_PalWaitInterruptRND+0x28>)
   18b54:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   18b58:	2000      	movs	r0, #0
   18b5a:	bc10      	pop	{r4}
   18b5c:	4770      	bx	lr
   18b5e:	bf00      	nop
   18b60:	5002b000 	.word	0x5002b000

00018b64 <CC_PalWaitInterrupt>:
   18b64:	4a04      	ldr	r2, [pc, #16]	; (18b78 <CC_PalWaitInterrupt+0x14>)
   18b66:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   18b6a:	4218      	tst	r0, r3
   18b6c:	d0fb      	beq.n	18b66 <CC_PalWaitInterrupt+0x2>
   18b6e:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   18b72:	2000      	movs	r0, #0
   18b74:	4770      	bx	lr
   18b76:	bf00      	nop
   18b78:	5002b000 	.word	0x5002b000

00018b7c <CC_PalMemCopyPlat>:
   18b7c:	f002 bb5e 	b.w	1b23c <memmove>

00018b80 <CC_PalMemSetPlat>:
   18b80:	f002 bb9e 	b.w	1b2c0 <memset>

00018b84 <CC_PalMemSetZeroPlat>:
   18b84:	460a      	mov	r2, r1
   18b86:	2100      	movs	r1, #0
   18b88:	f002 bb9a 	b.w	1b2c0 <memset>

00018b8c <CC_PalMutexCreate>:
   18b8c:	b508      	push	{r3, lr}
   18b8e:	4b03      	ldr	r3, [pc, #12]	; (18b9c <CC_PalMutexCreate+0x10>)
   18b90:	6802      	ldr	r2, [r0, #0]
   18b92:	681b      	ldr	r3, [r3, #0]
   18b94:	6810      	ldr	r0, [r2, #0]
   18b96:	4798      	blx	r3
   18b98:	2000      	movs	r0, #0
   18b9a:	bd08      	pop	{r3, pc}
   18b9c:	20000908 	.word	0x20000908

00018ba0 <CC_PalMutexDestroy>:
   18ba0:	b508      	push	{r3, lr}
   18ba2:	4b03      	ldr	r3, [pc, #12]	; (18bb0 <CC_PalMutexDestroy+0x10>)
   18ba4:	6802      	ldr	r2, [r0, #0]
   18ba6:	685b      	ldr	r3, [r3, #4]
   18ba8:	6810      	ldr	r0, [r2, #0]
   18baa:	4798      	blx	r3
   18bac:	2000      	movs	r0, #0
   18bae:	bd08      	pop	{r3, pc}
   18bb0:	20000908 	.word	0x20000908

00018bb4 <CC_PalMutexLock>:
   18bb4:	4b02      	ldr	r3, [pc, #8]	; (18bc0 <CC_PalMutexLock+0xc>)
   18bb6:	6802      	ldr	r2, [r0, #0]
   18bb8:	689b      	ldr	r3, [r3, #8]
   18bba:	6810      	ldr	r0, [r2, #0]
   18bbc:	4718      	bx	r3
   18bbe:	bf00      	nop
   18bc0:	20000908 	.word	0x20000908

00018bc4 <CC_PalMutexUnlock>:
   18bc4:	b508      	push	{r3, lr}
   18bc6:	4b03      	ldr	r3, [pc, #12]	; (18bd4 <CC_PalMutexUnlock+0x10>)
   18bc8:	6802      	ldr	r2, [r0, #0]
   18bca:	68db      	ldr	r3, [r3, #12]
   18bcc:	6810      	ldr	r0, [r2, #0]
   18bce:	4798      	blx	r3
   18bd0:	2000      	movs	r0, #0
   18bd2:	bd08      	pop	{r3, pc}
   18bd4:	20000908 	.word	0x20000908

00018bd8 <CC_PalPowerSaveModeInit>:
   18bd8:	b570      	push	{r4, r5, r6, lr}
   18bda:	4c09      	ldr	r4, [pc, #36]	; (18c00 <CC_PalPowerSaveModeInit+0x28>)
   18bdc:	4d09      	ldr	r5, [pc, #36]	; (18c04 <CC_PalPowerSaveModeInit+0x2c>)
   18bde:	6920      	ldr	r0, [r4, #16]
   18be0:	68ab      	ldr	r3, [r5, #8]
   18be2:	4798      	blx	r3
   18be4:	b118      	cbz	r0, 18bee <CC_PalPowerSaveModeInit+0x16>
   18be6:	4b08      	ldr	r3, [pc, #32]	; (18c08 <CC_PalPowerSaveModeInit+0x30>)
   18be8:	4808      	ldr	r0, [pc, #32]	; (18c0c <CC_PalPowerSaveModeInit+0x34>)
   18bea:	685b      	ldr	r3, [r3, #4]
   18bec:	4798      	blx	r3
   18bee:	4a08      	ldr	r2, [pc, #32]	; (18c10 <CC_PalPowerSaveModeInit+0x38>)
   18bf0:	68eb      	ldr	r3, [r5, #12]
   18bf2:	6920      	ldr	r0, [r4, #16]
   18bf4:	2100      	movs	r1, #0
   18bf6:	6011      	str	r1, [r2, #0]
   18bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18bfc:	4718      	bx	r3
   18bfe:	bf00      	nop
   18c00:	20000918 	.word	0x20000918
   18c04:	20000908 	.word	0x20000908
   18c08:	200008f8 	.word	0x200008f8
   18c0c:	0001eff0 	.word	0x0001eff0
   18c10:	2000387c 	.word	0x2000387c

00018c14 <CC_PalPowerSaveModeSelect>:
   18c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c16:	4d1a      	ldr	r5, [pc, #104]	; (18c80 <CC_PalPowerSaveModeSelect+0x6c>)
   18c18:	4e1a      	ldr	r6, [pc, #104]	; (18c84 <CC_PalPowerSaveModeSelect+0x70>)
   18c1a:	4604      	mov	r4, r0
   18c1c:	68b2      	ldr	r2, [r6, #8]
   18c1e:	6928      	ldr	r0, [r5, #16]
   18c20:	4790      	blx	r2
   18c22:	b9e8      	cbnz	r0, 18c60 <CC_PalPowerSaveModeSelect+0x4c>
   18c24:	4f18      	ldr	r7, [pc, #96]	; (18c88 <CC_PalPowerSaveModeSelect+0x74>)
   18c26:	683b      	ldr	r3, [r7, #0]
   18c28:	b14c      	cbz	r4, 18c3e <CC_PalPowerSaveModeSelect+0x2a>
   18c2a:	b1a3      	cbz	r3, 18c56 <CC_PalPowerSaveModeSelect+0x42>
   18c2c:	2b01      	cmp	r3, #1
   18c2e:	d019      	beq.n	18c64 <CC_PalPowerSaveModeSelect+0x50>
   18c30:	3b01      	subs	r3, #1
   18c32:	603b      	str	r3, [r7, #0]
   18c34:	6928      	ldr	r0, [r5, #16]
   18c36:	68f3      	ldr	r3, [r6, #12]
   18c38:	4798      	blx	r3
   18c3a:	2000      	movs	r0, #0
   18c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c3e:	b943      	cbnz	r3, 18c52 <CC_PalPowerSaveModeSelect+0x3e>
   18c40:	4a12      	ldr	r2, [pc, #72]	; (18c8c <CC_PalPowerSaveModeSelect+0x78>)
   18c42:	2101      	movs	r1, #1
   18c44:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   18c48:	4911      	ldr	r1, [pc, #68]	; (18c90 <CC_PalPowerSaveModeSelect+0x7c>)
   18c4a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   18c4e:	2a00      	cmp	r2, #0
   18c50:	d1fb      	bne.n	18c4a <CC_PalPowerSaveModeSelect+0x36>
   18c52:	3301      	adds	r3, #1
   18c54:	603b      	str	r3, [r7, #0]
   18c56:	68f3      	ldr	r3, [r6, #12]
   18c58:	6928      	ldr	r0, [r5, #16]
   18c5a:	4798      	blx	r3
   18c5c:	2000      	movs	r0, #0
   18c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c60:	480c      	ldr	r0, [pc, #48]	; (18c94 <CC_PalPowerSaveModeSelect+0x80>)
   18c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c64:	4a0a      	ldr	r2, [pc, #40]	; (18c90 <CC_PalPowerSaveModeSelect+0x7c>)
   18c66:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   18c6a:	2b00      	cmp	r3, #0
   18c6c:	d1fb      	bne.n	18c66 <CC_PalPowerSaveModeSelect+0x52>
   18c6e:	4a07      	ldr	r2, [pc, #28]	; (18c8c <CC_PalPowerSaveModeSelect+0x78>)
   18c70:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   18c74:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   18c78:	f7ff ff00 	bl	18a7c <CC_HalMaskInterrupt>
   18c7c:	683b      	ldr	r3, [r7, #0]
   18c7e:	e7d7      	b.n	18c30 <CC_PalPowerSaveModeSelect+0x1c>
   18c80:	20000918 	.word	0x20000918
   18c84:	20000908 	.word	0x20000908
   18c88:	2000387c 	.word	0x2000387c
   18c8c:	5002a000 	.word	0x5002a000
   18c90:	5002b000 	.word	0x5002b000
   18c94:	ffff8fe9 	.word	0xffff8fe9

00018c98 <mutex_init>:
   18c98:	4b01      	ldr	r3, [pc, #4]	; (18ca0 <mutex_init+0x8>)
   18c9a:	681b      	ldr	r3, [r3, #0]
   18c9c:	4718      	bx	r3
   18c9e:	bf00      	nop
   18ca0:	20000908 	.word	0x20000908

00018ca4 <mutex_lock>:
   18ca4:	4b01      	ldr	r3, [pc, #4]	; (18cac <mutex_lock+0x8>)
   18ca6:	689b      	ldr	r3, [r3, #8]
   18ca8:	4718      	bx	r3
   18caa:	bf00      	nop
   18cac:	20000908 	.word	0x20000908

00018cb0 <mutex_unlock>:
   18cb0:	4b01      	ldr	r3, [pc, #4]	; (18cb8 <mutex_unlock+0x8>)
   18cb2:	68db      	ldr	r3, [r3, #12]
   18cb4:	4718      	bx	r3
   18cb6:	bf00      	nop
   18cb8:	20000908 	.word	0x20000908

00018cbc <startTrngHW>:
   18cbc:	2800      	cmp	r0, #0
   18cbe:	f000 8084 	beq.w	18dca <startTrngHW+0x10e>
   18cc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18cc6:	460c      	mov	r4, r1
   18cc8:	b083      	sub	sp, #12
   18cca:	2900      	cmp	r1, #0
   18ccc:	d078      	beq.n	18dc0 <startTrngHW+0x104>
   18cce:	461d      	mov	r5, r3
   18cd0:	2b00      	cmp	r3, #0
   18cd2:	d075      	beq.n	18dc0 <startTrngHW+0x104>
   18cd4:	4607      	mov	r7, r0
   18cd6:	b11a      	cbz	r2, 18ce0 <startTrngHW+0x24>
   18cd8:	2201      	movs	r2, #1
   18cda:	2300      	movs	r3, #0
   18cdc:	602a      	str	r2, [r5, #0]
   18cde:	6003      	str	r3, [r0, #0]
   18ce0:	682b      	ldr	r3, [r5, #0]
   18ce2:	2b00      	cmp	r3, #0
   18ce4:	d067      	beq.n	18db6 <startTrngHW+0xfa>
   18ce6:	4629      	mov	r1, r5
   18ce8:	4620      	mov	r0, r4
   18cea:	f000 fde9 	bl	198c0 <LLF_RND_GetFastestRosc>
   18cee:	4603      	mov	r3, r0
   18cf0:	2800      	cmp	r0, #0
   18cf2:	d161      	bne.n	18db8 <startTrngHW+0xfc>
   18cf4:	6828      	ldr	r0, [r5, #0]
   18cf6:	4621      	mov	r1, r4
   18cf8:	f000 fdc4 	bl	19884 <LLF_RND_GetRoscSampleCnt>
   18cfc:	4603      	mov	r3, r0
   18cfe:	2800      	cmp	r0, #0
   18d00:	d15a      	bne.n	18db8 <startTrngHW+0xfc>
   18d02:	682a      	ldr	r2, [r5, #0]
   18d04:	2a08      	cmp	r2, #8
   18d06:	d072      	beq.n	18dee <startTrngHW+0x132>
   18d08:	2a04      	cmp	r2, #4
   18d0a:	d073      	beq.n	18df4 <startTrngHW+0x138>
   18d0c:	f1a2 0802 	sub.w	r8, r2, #2
   18d10:	fab8 f888 	clz	r8, r8
   18d14:	ea4f 1858 	mov.w	r8, r8, lsr #5
   18d18:	4e38      	ldr	r6, [pc, #224]	; (18dfc <startTrngHW+0x140>)
   18d1a:	2001      	movs	r0, #1
   18d1c:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   18d20:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   18d24:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   18d28:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18d2a:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   18d2e:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   18d32:	428a      	cmp	r2, r1
   18d34:	d1f6      	bne.n	18d24 <startTrngHW+0x68>
   18d36:	f04f 0900 	mov.w	r9, #0
   18d3a:	9301      	str	r3, [sp, #4]
   18d3c:	f04f 30ff 	mov.w	r0, #4294967295
   18d40:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   18d44:	f7ff fe8c 	bl	18a60 <CC_HalClearInterruptBit>
   18d48:	f06f 021b 	mvn.w	r2, #27
   18d4c:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   18d50:	4648      	mov	r0, r9
   18d52:	f7ff fe93 	bl	18a7c <CC_HalMaskInterrupt>
   18d56:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   18d5a:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   18d5e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   18d62:	f7ff fe8b 	bl	18a7c <CC_HalMaskInterrupt>
   18d66:	220a      	movs	r2, #10
   18d68:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   18d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18d6e:	2b01      	cmp	r3, #1
   18d70:	9b01      	ldr	r3, [sp, #4]
   18d72:	d02d      	beq.n	18dd0 <startTrngHW+0x114>
   18d74:	6922      	ldr	r2, [r4, #16]
   18d76:	4922      	ldr	r1, [pc, #136]	; (18e00 <startTrngHW+0x144>)
   18d78:	fba1 1202 	umull	r1, r2, r1, r2
   18d7c:	0912      	lsrs	r2, r2, #4
   18d7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18d80:	fb01 f202 	mul.w	r2, r1, r2
   18d84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   18d88:	491c      	ldr	r1, [pc, #112]	; (18dfc <startTrngHW+0x140>)
   18d8a:	03d2      	lsls	r2, r2, #15
   18d8c:	0992      	lsrs	r2, r2, #6
   18d8e:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   18d92:	2201      	movs	r2, #1
   18d94:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   18d98:	683a      	ldr	r2, [r7, #0]
   18d9a:	6829      	ldr	r1, [r5, #0]
   18d9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   18da0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   18da4:	603a      	str	r2, [r7, #0]
   18da6:	6829      	ldr	r1, [r5, #0]
   18da8:	4618      	mov	r0, r3
   18daa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18dae:	603a      	str	r2, [r7, #0]
   18db0:	b003      	add	sp, #12
   18db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18db6:	4b13      	ldr	r3, [pc, #76]	; (18e04 <startTrngHW+0x148>)
   18db8:	4618      	mov	r0, r3
   18dba:	b003      	add	sp, #12
   18dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18dc0:	4b11      	ldr	r3, [pc, #68]	; (18e08 <startTrngHW+0x14c>)
   18dc2:	4618      	mov	r0, r3
   18dc4:	b003      	add	sp, #12
   18dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18dca:	4b0f      	ldr	r3, [pc, #60]	; (18e08 <startTrngHW+0x14c>)
   18dcc:	4618      	mov	r0, r3
   18dce:	4770      	bx	lr
   18dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18dd4:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   18dd8:	3101      	adds	r1, #1
   18dda:	d006      	beq.n	18dea <startTrngHW+0x12e>
   18ddc:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   18de0:	4907      	ldr	r1, [pc, #28]	; (18e00 <startTrngHW+0x144>)
   18de2:	fba1 1202 	umull	r1, r2, r1, r2
   18de6:	0912      	lsrs	r2, r2, #4
   18de8:	e7c9      	b.n	18d7e <startTrngHW+0xc2>
   18dea:	2216      	movs	r2, #22
   18dec:	e7c7      	b.n	18d7e <startTrngHW+0xc2>
   18dee:	f04f 0803 	mov.w	r8, #3
   18df2:	e791      	b.n	18d18 <startTrngHW+0x5c>
   18df4:	f04f 0802 	mov.w	r8, #2
   18df8:	e78e      	b.n	18d18 <startTrngHW+0x5c>
   18dfa:	bf00      	nop
   18dfc:	5002b000 	.word	0x5002b000
   18e00:	aaaaaaab 	.word	0xaaaaaaab
   18e04:	00f10c31 	.word	0x00f10c31
   18e08:	00f10c35 	.word	0x00f10c35

00018e0c <LLF_RND_RepetitionCounterTest.part.0>:
   18e0c:	b570      	push	{r4, r5, r6, lr}
   18e0e:	00c9      	lsls	r1, r1, #3
   18e10:	2400      	movs	r4, #0
   18e12:	1e4e      	subs	r6, r1, #1
   18e14:	f04f 0c01 	mov.w	ip, #1
   18e18:	4625      	mov	r5, r4
   18e1a:	46a6      	mov	lr, r4
   18e1c:	e008      	b.n	18e30 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   18e1e:	459e      	cmp	lr, r3
   18e20:	d015      	beq.n	18e4e <LLF_RND_RepetitionCounterTest.part.0+0x42>
   18e22:	2501      	movs	r5, #1
   18e24:	45b4      	cmp	ip, r6
   18e26:	d817      	bhi.n	18e58 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   18e28:	3401      	adds	r4, #1
   18e2a:	f10c 0c01 	add.w	ip, ip, #1
   18e2e:	469e      	mov	lr, r3
   18e30:	0963      	lsrs	r3, r4, #5
   18e32:	f004 011f 	and.w	r1, r4, #31
   18e36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   18e3a:	291f      	cmp	r1, #31
   18e3c:	fa23 f301 	lsr.w	r3, r3, r1
   18e40:	bf18      	it	ne
   18e42:	f003 0301 	andne.w	r3, r3, #1
   18e46:	2c00      	cmp	r4, #0
   18e48:	d1e9      	bne.n	18e1e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   18e4a:	2501      	movs	r5, #1
   18e4c:	e7ec      	b.n	18e28 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   18e4e:	3501      	adds	r5, #1
   18e50:	4295      	cmp	r5, r2
   18e52:	d1e7      	bne.n	18e24 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   18e54:	4801      	ldr	r0, [pc, #4]	; (18e5c <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   18e56:	bd70      	pop	{r4, r5, r6, pc}
   18e58:	2000      	movs	r0, #0
   18e5a:	bd70      	pop	{r4, r5, r6, pc}
   18e5c:	00f10c36 	.word	0x00f10c36

00018e60 <LLF_RND_AdaptiveProportionTest>:
   18e60:	2800      	cmp	r0, #0
   18e62:	d03f      	beq.n	18ee4 <LLF_RND_AdaptiveProportionTest+0x84>
   18e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e68:	1e4c      	subs	r4, r1, #1
   18e6a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   18e6e:	d228      	bcs.n	18ec2 <LLF_RND_AdaptiveProportionTest+0x62>
   18e70:	b33b      	cbz	r3, 18ec2 <LLF_RND_AdaptiveProportionTest+0x62>
   18e72:	b332      	cbz	r2, 18ec2 <LLF_RND_AdaptiveProportionTest+0x62>
   18e74:	f04f 0e00 	mov.w	lr, #0
   18e78:	00cf      	lsls	r7, r1, #3
   18e7a:	4676      	mov	r6, lr
   18e7c:	4675      	mov	r5, lr
   18e7e:	4674      	mov	r4, lr
   18e80:	f103 38ff 	add.w	r8, r3, #4294967295
   18e84:	0961      	lsrs	r1, r4, #5
   18e86:	f004 0c1f 	and.w	ip, r4, #31
   18e8a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   18e8e:	f1bc 0f1f 	cmp.w	ip, #31
   18e92:	fa21 f10c 	lsr.w	r1, r1, ip
   18e96:	bf18      	it	ne
   18e98:	f001 0101 	andne.w	r1, r1, #1
   18e9c:	b1a4      	cbz	r4, 18ec8 <LLF_RND_AdaptiveProportionTest+0x68>
   18e9e:	42ab      	cmp	r3, r5
   18ea0:	d018      	beq.n	18ed4 <LLF_RND_AdaptiveProportionTest+0x74>
   18ea2:	428e      	cmp	r6, r1
   18ea4:	bf08      	it	eq
   18ea6:	f10e 0e01 	addeq.w	lr, lr, #1
   18eaa:	45a8      	cmp	r8, r5
   18eac:	d015      	beq.n	18eda <LLF_RND_AdaptiveProportionTest+0x7a>
   18eae:	3501      	adds	r5, #1
   18eb0:	4631      	mov	r1, r6
   18eb2:	3401      	adds	r4, #1
   18eb4:	42bc      	cmp	r4, r7
   18eb6:	d001      	beq.n	18ebc <LLF_RND_AdaptiveProportionTest+0x5c>
   18eb8:	460e      	mov	r6, r1
   18eba:	e7e3      	b.n	18e84 <LLF_RND_AdaptiveProportionTest+0x24>
   18ebc:	2000      	movs	r0, #0
   18ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ec2:	4809      	ldr	r0, [pc, #36]	; (18ee8 <LLF_RND_AdaptiveProportionTest+0x88>)
   18ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ec8:	f04f 0e01 	mov.w	lr, #1
   18ecc:	4674      	mov	r4, lr
   18ece:	4675      	mov	r5, lr
   18ed0:	460e      	mov	r6, r1
   18ed2:	e7d7      	b.n	18e84 <LLF_RND_AdaptiveProportionTest+0x24>
   18ed4:	2501      	movs	r5, #1
   18ed6:	46ae      	mov	lr, r5
   18ed8:	e7eb      	b.n	18eb2 <LLF_RND_AdaptiveProportionTest+0x52>
   18eda:	4572      	cmp	r2, lr
   18edc:	d3f1      	bcc.n	18ec2 <LLF_RND_AdaptiveProportionTest+0x62>
   18ede:	4631      	mov	r1, r6
   18ee0:	461d      	mov	r5, r3
   18ee2:	e7e6      	b.n	18eb2 <LLF_RND_AdaptiveProportionTest+0x52>
   18ee4:	4800      	ldr	r0, [pc, #0]	; (18ee8 <LLF_RND_AdaptiveProportionTest+0x88>)
   18ee6:	4770      	bx	lr
   18ee8:	00f10c37 	.word	0x00f10c37

00018eec <getTrngSource>:
   18eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ef0:	b091      	sub	sp, #68	; 0x44
   18ef2:	460d      	mov	r5, r1
   18ef4:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   18ef8:	4681      	mov	r9, r0
   18efa:	2900      	cmp	r1, #0
   18efc:	d14c      	bne.n	18f98 <getTrngSource+0xac>
   18efe:	6928      	ldr	r0, [r5, #16]
   18f00:	9006      	str	r0, [sp, #24]
   18f02:	981a      	ldr	r0, [sp, #104]	; 0x68
   18f04:	601c      	str	r4, [r3, #0]
   18f06:	2300      	movs	r3, #0
   18f08:	6003      	str	r3, [r0, #0]
   18f0a:	2a00      	cmp	r2, #0
   18f0c:	f000 8124 	beq.w	19158 <getTrngSource+0x26c>
   18f10:	4b9d      	ldr	r3, [pc, #628]	; (19188 <getTrngSource+0x29c>)
   18f12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   18f14:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   18f18:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18f1c:	429a      	cmp	r2, r3
   18f1e:	d147      	bne.n	18fb0 <getTrngSource+0xc4>
   18f20:	290a      	cmp	r1, #10
   18f22:	d145      	bne.n	18fb0 <getTrngSource+0xc4>
   18f24:	f899 3003 	ldrb.w	r3, [r9, #3]
   18f28:	9308      	str	r3, [sp, #32]
   18f2a:	f104 0308 	add.w	r3, r4, #8
   18f2e:	9a06      	ldr	r2, [sp, #24]
   18f30:	9307      	str	r3, [sp, #28]
   18f32:	4b96      	ldr	r3, [pc, #600]	; (1918c <getTrngSource+0x2a0>)
   18f34:	4c94      	ldr	r4, [pc, #592]	; (19188 <getTrngSource+0x29c>)
   18f36:	fba3 1302 	umull	r1, r3, r3, r2
   18f3a:	089b      	lsrs	r3, r3, #2
   18f3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18f40:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   18f44:	9303      	str	r3, [sp, #12]
   18f46:	2304      	movs	r3, #4
   18f48:	9305      	str	r3, [sp, #20]
   18f4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18f4c:	9e06      	ldr	r6, [sp, #24]
   18f4e:	601e      	str	r6, [r3, #0]
   18f50:	2e00      	cmp	r6, #0
   18f52:	d033      	beq.n	18fbc <getTrngSource+0xd0>
   18f54:	f8dd 801c 	ldr.w	r8, [sp, #28]
   18f58:	2700      	movs	r7, #0
   18f5a:	f04f 0a01 	mov.w	sl, #1
   18f5e:	f000 fcbf 	bl	198e0 <LLF_RND_TurnOffTrng>
   18f62:	2300      	movs	r3, #0
   18f64:	9309      	str	r3, [sp, #36]	; 0x24
   18f66:	f1b9 0f00 	cmp.w	r9, #0
   18f6a:	f000 80df 	beq.w	1912c <getTrngSource+0x240>
   18f6e:	2d00      	cmp	r5, #0
   18f70:	f000 80dc 	beq.w	1912c <getTrngSource+0x240>
   18f74:	9b08      	ldr	r3, [sp, #32]
   18f76:	b1eb      	cbz	r3, 18fb4 <getTrngSource+0xc8>
   18f78:	a908      	add	r1, sp, #32
   18f7a:	4628      	mov	r0, r5
   18f7c:	f000 fca0 	bl	198c0 <LLF_RND_GetFastestRosc>
   18f80:	2800      	cmp	r0, #0
   18f82:	d03e      	beq.n	19002 <getTrngSource+0x116>
   18f84:	4b82      	ldr	r3, [pc, #520]	; (19190 <getTrngSource+0x2a4>)
   18f86:	4298      	cmp	r0, r3
   18f88:	d118      	bne.n	18fbc <getTrngSource+0xd0>
   18f8a:	9003      	str	r0, [sp, #12]
   18f8c:	f000 fca8 	bl	198e0 <LLF_RND_TurnOffTrng>
   18f90:	9803      	ldr	r0, [sp, #12]
   18f92:	b011      	add	sp, #68	; 0x44
   18f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18f9c:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   18fa0:	3601      	adds	r6, #1
   18fa2:	bf14      	ite	ne
   18fa4:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   18fa8:	f44f 7004 	moveq.w	r0, #528	; 0x210
   18fac:	9006      	str	r0, [sp, #24]
   18fae:	e7a8      	b.n	18f02 <getTrngSource+0x16>
   18fb0:	4878      	ldr	r0, [pc, #480]	; (19194 <getTrngSource+0x2a8>)
   18fb2:	e7ea      	b.n	18f8a <getTrngSource+0x9e>
   18fb4:	4878      	ldr	r0, [pc, #480]	; (19198 <getTrngSource+0x2ac>)
   18fb6:	4b76      	ldr	r3, [pc, #472]	; (19190 <getTrngSource+0x2a4>)
   18fb8:	4298      	cmp	r0, r3
   18fba:	d0e6      	beq.n	18f8a <getTrngSource+0x9e>
   18fbc:	9b08      	ldr	r3, [sp, #32]
   18fbe:	2b08      	cmp	r3, #8
   18fc0:	f000 80c8 	beq.w	19154 <getTrngSource+0x268>
   18fc4:	005b      	lsls	r3, r3, #1
   18fc6:	2200      	movs	r2, #0
   18fc8:	9308      	str	r3, [sp, #32]
   18fca:	9200      	str	r2, [sp, #0]
   18fcc:	ab08      	add	r3, sp, #32
   18fce:	4629      	mov	r1, r5
   18fd0:	4648      	mov	r0, r9
   18fd2:	f7ff fe73 	bl	18cbc <startTrngHW>
   18fd6:	4b70      	ldr	r3, [pc, #448]	; (19198 <getTrngSource+0x2ac>)
   18fd8:	4298      	cmp	r0, r3
   18fda:	f000 80b7 	beq.w	1914c <getTrngSource+0x260>
   18fde:	2800      	cmp	r0, #0
   18fe0:	d1d3      	bne.n	18f8a <getTrngSource+0x9e>
   18fe2:	f8d9 2000 	ldr.w	r2, [r9]
   18fe6:	0a13      	lsrs	r3, r2, #8
   18fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   18fec:	4313      	orrs	r3, r2
   18fee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   18ff2:	f8c9 3000 	str.w	r3, [r9]
   18ff6:	9b05      	ldr	r3, [sp, #20]
   18ff8:	3b01      	subs	r3, #1
   18ffa:	9305      	str	r3, [sp, #20]
   18ffc:	d1a5      	bne.n	18f4a <getTrngSource+0x5e>
   18ffe:	2000      	movs	r0, #0
   19000:	e7c3      	b.n	18f8a <getTrngSource+0x9e>
   19002:	9808      	ldr	r0, [sp, #32]
   19004:	4629      	mov	r1, r5
   19006:	f000 fc3d 	bl	19884 <LLF_RND_GetRoscSampleCnt>
   1900a:	2800      	cmp	r0, #0
   1900c:	d1ba      	bne.n	18f84 <getTrngSource+0x98>
   1900e:	9b08      	ldr	r3, [sp, #32]
   19010:	2b08      	cmp	r3, #8
   19012:	f000 8095 	beq.w	19140 <getTrngSource+0x254>
   19016:	2b04      	cmp	r3, #4
   19018:	f000 8095 	beq.w	19146 <getTrngSource+0x25a>
   1901c:	f1a3 0302 	sub.w	r3, r3, #2
   19020:	fab3 f383 	clz	r3, r3
   19024:	095b      	lsrs	r3, r3, #5
   19026:	9304      	str	r3, [sp, #16]
   19028:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1902c:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   19030:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   19034:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19036:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1903a:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1903e:	4293      	cmp	r3, r2
   19040:	d1f6      	bne.n	19030 <getTrngSource+0x144>
   19042:	f04f 0b00 	mov.w	fp, #0
   19046:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   1904a:	f04f 30ff 	mov.w	r0, #4294967295
   1904e:	f7ff fd07 	bl	18a60 <CC_HalClearInterruptBit>
   19052:	f06f 031b 	mvn.w	r3, #27
   19056:	4658      	mov	r0, fp
   19058:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1905c:	f7ff fd0e 	bl	18a7c <CC_HalMaskInterrupt>
   19060:	9b04      	ldr	r3, [sp, #16]
   19062:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   19066:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1906a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1906e:	f7ff fd05 	bl	18a7c <CC_HalMaskInterrupt>
   19072:	230a      	movs	r3, #10
   19074:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   19078:	692b      	ldr	r3, [r5, #16]
   1907a:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   1907e:	fbab 2303 	umull	r2, r3, fp, r3
   19082:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   19084:	091b      	lsrs	r3, r3, #4
   19086:	fb02 f303 	mul.w	r3, r2, r3
   1908a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1908e:	03db      	lsls	r3, r3, #15
   19090:	099b      	lsrs	r3, r3, #6
   19092:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   19096:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   1909a:	9908      	ldr	r1, [sp, #32]
   1909c:	f8d9 2000 	ldr.w	r2, [r9]
   190a0:	020b      	lsls	r3, r1, #8
   190a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   190a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   190aa:	4313      	orrs	r3, r2
   190ac:	f8c9 3000 	str.w	r3, [r9]
   190b0:	a809      	add	r0, sp, #36	; 0x24
   190b2:	f000 fbd7 	bl	19864 <LLF_RND_WaitRngInterrupt>
   190b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   190b8:	f003 031a 	and.w	r3, r3, #26
   190bc:	4303      	orrs	r3, r0
   190be:	f47f af7d 	bne.w	18fbc <getTrngSource+0xd0>
   190c2:	fbab 3b06 	umull	r3, fp, fp, r6
   190c6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   190ca:	930a      	str	r3, [sp, #40]	; 0x28
   190cc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   190d0:	930b      	str	r3, [sp, #44]	; 0x2c
   190d2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   190d6:	930c      	str	r3, [sp, #48]	; 0x30
   190d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   190dc:	930d      	str	r3, [sp, #52]	; 0x34
   190de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190e2:	930e      	str	r3, [sp, #56]	; 0x38
   190e4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   190e8:	930f      	str	r3, [sp, #60]	; 0x3c
   190ea:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   190ee:	d101      	bne.n	190f4 <getTrngSource+0x208>
   190f0:	9b03      	ldr	r3, [sp, #12]
   190f2:	b9eb      	cbnz	r3, 19130 <getTrngSource+0x244>
   190f4:	4640      	mov	r0, r8
   190f6:	2218      	movs	r2, #24
   190f8:	a90a      	add	r1, sp, #40	; 0x28
   190fa:	3e18      	subs	r6, #24
   190fc:	f108 0818 	add.w	r8, r8, #24
   19100:	f7ff fd3c 	bl	18b7c <CC_PalMemCopyPlat>
   19104:	3701      	adds	r7, #1
   19106:	2e00      	cmp	r6, #0
   19108:	f47f af29 	bne.w	18f5e <getTrngSource+0x72>
   1910c:	9b06      	ldr	r3, [sp, #24]
   1910e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   19112:	d836      	bhi.n	19182 <getTrngSource+0x296>
   19114:	9e07      	ldr	r6, [sp, #28]
   19116:	696a      	ldr	r2, [r5, #20]
   19118:	4619      	mov	r1, r3
   1911a:	4630      	mov	r0, r6
   1911c:	461f      	mov	r7, r3
   1911e:	f7ff fe75 	bl	18e0c <LLF_RND_RepetitionCounterTest.part.0>
   19122:	b320      	cbz	r0, 1916e <getTrngSource+0x282>
   19124:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   19126:	2300      	movs	r3, #0
   19128:	6013      	str	r3, [r2, #0]
   1912a:	e72b      	b.n	18f84 <getTrngSource+0x98>
   1912c:	481b      	ldr	r0, [pc, #108]	; (1919c <getTrngSource+0x2b0>)
   1912e:	e729      	b.n	18f84 <getTrngSource+0x98>
   19130:	4640      	mov	r0, r8
   19132:	461a      	mov	r2, r3
   19134:	a90a      	add	r1, sp, #40	; 0x28
   19136:	1af6      	subs	r6, r6, r3
   19138:	4498      	add	r8, r3
   1913a:	f7ff fd1f 	bl	18b7c <CC_PalMemCopyPlat>
   1913e:	e7e1      	b.n	19104 <getTrngSource+0x218>
   19140:	2303      	movs	r3, #3
   19142:	9304      	str	r3, [sp, #16]
   19144:	e770      	b.n	19028 <getTrngSource+0x13c>
   19146:	2302      	movs	r3, #2
   19148:	9304      	str	r3, [sp, #16]
   1914a:	e76d      	b.n	19028 <getTrngSource+0x13c>
   1914c:	6a2b      	ldr	r3, [r5, #32]
   1914e:	2b00      	cmp	r3, #0
   19150:	f43f af1b 	beq.w	18f8a <getTrngSource+0x9e>
   19154:	4812      	ldr	r0, [pc, #72]	; (191a0 <getTrngSource+0x2b4>)
   19156:	e718      	b.n	18f8a <getTrngSource+0x9e>
   19158:	9100      	str	r1, [sp, #0]
   1915a:	ab08      	add	r3, sp, #32
   1915c:	2201      	movs	r2, #1
   1915e:	4629      	mov	r1, r5
   19160:	4648      	mov	r0, r9
   19162:	f7ff fdab 	bl	18cbc <startTrngHW>
   19166:	2800      	cmp	r0, #0
   19168:	f43f aedf 	beq.w	18f2a <getTrngSource+0x3e>
   1916c:	e70d      	b.n	18f8a <getTrngSource+0x9e>
   1916e:	69aa      	ldr	r2, [r5, #24]
   19170:	f44f 6380 	mov.w	r3, #1024	; 0x400
   19174:	4639      	mov	r1, r7
   19176:	4630      	mov	r0, r6
   19178:	f7ff fe72 	bl	18e60 <LLF_RND_AdaptiveProportionTest>
   1917c:	2800      	cmp	r0, #0
   1917e:	d1d1      	bne.n	19124 <getTrngSource+0x238>
   19180:	e73d      	b.n	18ffe <getTrngSource+0x112>
   19182:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19184:	601e      	str	r6, [r3, #0]
   19186:	e719      	b.n	18fbc <getTrngSource+0xd0>
   19188:	5002b000 	.word	0x5002b000
   1918c:	aaaaaaab 	.word	0xaaaaaaab
   19190:	00f10c02 	.word	0x00f10c02
   19194:	00f10c30 	.word	0x00f10c30
   19198:	00f10c31 	.word	0x00f10c31
   1919c:	00f10c35 	.word	0x00f10c35
   191a0:	00f10c32 	.word	0x00f10c32

000191a4 <LLF_RND_GetTrngSource>:
   191a4:	b410      	push	{r4}
   191a6:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   191aa:	9401      	str	r4, [sp, #4]
   191ac:	9c03      	ldr	r4, [sp, #12]
   191ae:	9402      	str	r4, [sp, #8]
   191b0:	2400      	movs	r4, #0
   191b2:	9403      	str	r4, [sp, #12]
   191b4:	bc10      	pop	{r4}
   191b6:	f7ff be99 	b.w	18eec <getTrngSource>
   191ba:	bf00      	nop

000191bc <LLF_RND_RunTrngStartupTest>:
   191bc:	b510      	push	{r4, lr}
   191be:	b086      	sub	sp, #24
   191c0:	ab05      	add	r3, sp, #20
   191c2:	2401      	movs	r4, #1
   191c4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   191c8:	9300      	str	r3, [sp, #0]
   191ca:	2200      	movs	r2, #0
   191cc:	ab04      	add	r3, sp, #16
   191ce:	f7ff fe8d 	bl	18eec <getTrngSource>
   191d2:	b006      	add	sp, #24
   191d4:	bd10      	pop	{r4, pc}
   191d6:	bf00      	nop

000191d8 <mbedtls_hardware_poll>:
   191d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   191da:	b089      	sub	sp, #36	; 0x24
   191dc:	9205      	str	r2, [sp, #20]
   191de:	2900      	cmp	r1, #0
   191e0:	d064      	beq.n	192ac <mbedtls_hardware_poll+0xd4>
   191e2:	461c      	mov	r4, r3
   191e4:	2b00      	cmp	r3, #0
   191e6:	d061      	beq.n	192ac <mbedtls_hardware_poll+0xd4>
   191e8:	4615      	mov	r5, r2
   191ea:	2a00      	cmp	r2, #0
   191ec:	d05e      	beq.n	192ac <mbedtls_hardware_poll+0xd4>
   191ee:	4f31      	ldr	r7, [pc, #196]	; (192b4 <mbedtls_hardware_poll+0xdc>)
   191f0:	460e      	mov	r6, r1
   191f2:	6838      	ldr	r0, [r7, #0]
   191f4:	f04f 31ff 	mov.w	r1, #4294967295
   191f8:	f7ff fcdc 	bl	18bb4 <CC_PalMutexLock>
   191fc:	2800      	cmp	r0, #0
   191fe:	d14b      	bne.n	19298 <mbedtls_hardware_poll+0xc0>
   19200:	2000      	movs	r0, #0
   19202:	f7ff fd07 	bl	18c14 <CC_PalPowerSaveModeSelect>
   19206:	2800      	cmp	r0, #0
   19208:	d142      	bne.n	19290 <mbedtls_hardware_poll+0xb8>
   1920a:	482b      	ldr	r0, [pc, #172]	; (192b8 <mbedtls_hardware_poll+0xe0>)
   1920c:	f000 fa9a 	bl	19744 <RNG_PLAT_SetUserRngParameters>
   19210:	b1d8      	cbz	r0, 1924a <mbedtls_hardware_poll+0x72>
   19212:	2001      	movs	r0, #1
   19214:	f04f 36ff 	mov.w	r6, #4294967295
   19218:	f7ff fcfc 	bl	18c14 <CC_PalPowerSaveModeSelect>
   1921c:	2800      	cmp	r0, #0
   1921e:	d133      	bne.n	19288 <mbedtls_hardware_poll+0xb0>
   19220:	4826      	ldr	r0, [pc, #152]	; (192bc <mbedtls_hardware_poll+0xe4>)
   19222:	f44f 7108 	mov.w	r1, #544	; 0x220
   19226:	f7fe fe63 	bl	17ef0 <mbedtls_zeroize_internal>
   1922a:	4825      	ldr	r0, [pc, #148]	; (192c0 <mbedtls_hardware_poll+0xe8>)
   1922c:	2104      	movs	r1, #4
   1922e:	f7fe fe5f 	bl	17ef0 <mbedtls_zeroize_internal>
   19232:	4821      	ldr	r0, [pc, #132]	; (192b8 <mbedtls_hardware_poll+0xe0>)
   19234:	2128      	movs	r1, #40	; 0x28
   19236:	f7fe fe5b 	bl	17ef0 <mbedtls_zeroize_internal>
   1923a:	6838      	ldr	r0, [r7, #0]
   1923c:	f7ff fcc2 	bl	18bc4 <CC_PalMutexUnlock>
   19240:	2800      	cmp	r0, #0
   19242:	d12d      	bne.n	192a0 <mbedtls_hardware_poll+0xc8>
   19244:	4630      	mov	r0, r6
   19246:	b009      	add	sp, #36	; 0x24
   19248:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1924a:	4b1c      	ldr	r3, [pc, #112]	; (192bc <mbedtls_hardware_poll+0xe4>)
   1924c:	9302      	str	r3, [sp, #8]
   1924e:	ab07      	add	r3, sp, #28
   19250:	9003      	str	r0, [sp, #12]
   19252:	4602      	mov	r2, r0
   19254:	9300      	str	r3, [sp, #0]
   19256:	4918      	ldr	r1, [pc, #96]	; (192b8 <mbedtls_hardware_poll+0xe0>)
   19258:	4819      	ldr	r0, [pc, #100]	; (192c0 <mbedtls_hardware_poll+0xe8>)
   1925a:	9401      	str	r4, [sp, #4]
   1925c:	ab05      	add	r3, sp, #20
   1925e:	f7ff ffa1 	bl	191a4 <LLF_RND_GetTrngSource>
   19262:	4603      	mov	r3, r0
   19264:	2800      	cmp	r0, #0
   19266:	d1d4      	bne.n	19212 <mbedtls_hardware_poll+0x3a>
   19268:	6822      	ldr	r2, [r4, #0]
   1926a:	42aa      	cmp	r2, r5
   1926c:	d3d1      	bcc.n	19212 <mbedtls_hardware_poll+0x3a>
   1926e:	9907      	ldr	r1, [sp, #28]
   19270:	4630      	mov	r0, r6
   19272:	3108      	adds	r1, #8
   19274:	462a      	mov	r2, r5
   19276:	461e      	mov	r6, r3
   19278:	f7ff fc80 	bl	18b7c <CC_PalMemCopyPlat>
   1927c:	6025      	str	r5, [r4, #0]
   1927e:	2001      	movs	r0, #1
   19280:	f7ff fcc8 	bl	18c14 <CC_PalPowerSaveModeSelect>
   19284:	2800      	cmp	r0, #0
   19286:	d0cb      	beq.n	19220 <mbedtls_hardware_poll+0x48>
   19288:	480e      	ldr	r0, [pc, #56]	; (192c4 <mbedtls_hardware_poll+0xec>)
   1928a:	f7fe fd33 	bl	17cf4 <CC_PalAbort>
   1928e:	e7c7      	b.n	19220 <mbedtls_hardware_poll+0x48>
   19290:	480d      	ldr	r0, [pc, #52]	; (192c8 <mbedtls_hardware_poll+0xf0>)
   19292:	f7fe fd2f 	bl	17cf4 <CC_PalAbort>
   19296:	e7b8      	b.n	1920a <mbedtls_hardware_poll+0x32>
   19298:	480c      	ldr	r0, [pc, #48]	; (192cc <mbedtls_hardware_poll+0xf4>)
   1929a:	f7fe fd2b 	bl	17cf4 <CC_PalAbort>
   1929e:	e7af      	b.n	19200 <mbedtls_hardware_poll+0x28>
   192a0:	480b      	ldr	r0, [pc, #44]	; (192d0 <mbedtls_hardware_poll+0xf8>)
   192a2:	f7fe fd27 	bl	17cf4 <CC_PalAbort>
   192a6:	4630      	mov	r0, r6
   192a8:	b009      	add	sp, #36	; 0x24
   192aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   192ac:	f04f 36ff 	mov.w	r6, #4294967295
   192b0:	e7c8      	b.n	19244 <mbedtls_hardware_poll+0x6c>
   192b2:	bf00      	nop
   192b4:	20000958 	.word	0x20000958
   192b8:	20003aa4 	.word	0x20003aa4
   192bc:	20003884 	.word	0x20003884
   192c0:	20003880 	.word	0x20003880
   192c4:	0001efb8 	.word	0x0001efb8
   192c8:	0001ef98 	.word	0x0001ef98
   192cc:	0001ef80 	.word	0x0001ef80
   192d0:	0001f010 	.word	0x0001f010

000192d4 <cc_mbedtls_aes_init>:
   192d4:	b510      	push	{r4, lr}
   192d6:	4604      	mov	r4, r0
   192d8:	b130      	cbz	r0, 192e8 <cc_mbedtls_aes_init+0x14>
   192da:	2200      	movs	r2, #0
   192dc:	2301      	movs	r3, #1
   192de:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   192e2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   192e6:	bd10      	pop	{r4, pc}
   192e8:	4801      	ldr	r0, [pc, #4]	; (192f0 <cc_mbedtls_aes_init+0x1c>)
   192ea:	f7fe fd03 	bl	17cf4 <CC_PalAbort>
   192ee:	e7f4      	b.n	192da <cc_mbedtls_aes_init+0x6>
   192f0:	0001f028 	.word	0x0001f028

000192f4 <cc_mbedtls_aes_free>:
   192f4:	b118      	cbz	r0, 192fe <cc_mbedtls_aes_free+0xa>
   192f6:	2274      	movs	r2, #116	; 0x74
   192f8:	2100      	movs	r1, #0
   192fa:	f7ff bc41 	b.w	18b80 <CC_PalMemSetPlat>
   192fe:	4770      	bx	lr

00019300 <cc_mbedtls_aes_setkey_enc>:
   19300:	b190      	cbz	r0, 19328 <cc_mbedtls_aes_setkey_enc+0x28>
   19302:	b1a1      	cbz	r1, 1932e <cc_mbedtls_aes_setkey_enc+0x2e>
   19304:	b510      	push	{r4, lr}
   19306:	2a80      	cmp	r2, #128	; 0x80
   19308:	f04f 0400 	mov.w	r4, #0
   1930c:	6384      	str	r4, [r0, #56]	; 0x38
   1930e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   19312:	d106      	bne.n	19322 <cc_mbedtls_aes_setkey_enc+0x22>
   19314:	2210      	movs	r2, #16
   19316:	6304      	str	r4, [r0, #48]	; 0x30
   19318:	4410      	add	r0, r2
   1931a:	f7ff fc2f 	bl	18b7c <CC_PalMemCopyPlat>
   1931e:	4620      	mov	r0, r4
   19320:	bd10      	pop	{r4, pc}
   19322:	f06f 001f 	mvn.w	r0, #31
   19326:	bd10      	pop	{r4, pc}
   19328:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1932c:	4770      	bx	lr
   1932e:	f06f 001f 	mvn.w	r0, #31
   19332:	4770      	bx	lr

00019334 <cc_mbedtls_aes_crypt_ecb>:
   19334:	b328      	cbz	r0, 19382 <cc_mbedtls_aes_crypt_ecb+0x4e>
   19336:	b322      	cbz	r2, 19382 <cc_mbedtls_aes_crypt_ecb+0x4e>
   19338:	b31b      	cbz	r3, 19382 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1933a:	2901      	cmp	r1, #1
   1933c:	d821      	bhi.n	19382 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1933e:	b570      	push	{r4, r5, r6, lr}
   19340:	4604      	mov	r4, r0
   19342:	6b81      	ldr	r1, [r0, #56]	; 0x38
   19344:	b086      	sub	sp, #24
   19346:	d017      	beq.n	19378 <cc_mbedtls_aes_crypt_ecb+0x44>
   19348:	2901      	cmp	r1, #1
   1934a:	d117      	bne.n	1937c <cc_mbedtls_aes_crypt_ecb+0x48>
   1934c:	2510      	movs	r5, #16
   1934e:	2100      	movs	r1, #0
   19350:	eb0d 0605 	add.w	r6, sp, r5
   19354:	6361      	str	r1, [r4, #52]	; 0x34
   19356:	4610      	mov	r0, r2
   19358:	9500      	str	r5, [sp, #0]
   1935a:	9601      	str	r6, [sp, #4]
   1935c:	aa02      	add	r2, sp, #8
   1935e:	4629      	mov	r1, r5
   19360:	f000 faca 	bl	198f8 <SetDataBuffersInfo>
   19364:	b950      	cbnz	r0, 1937c <cc_mbedtls_aes_crypt_ecb+0x48>
   19366:	462b      	mov	r3, r5
   19368:	4632      	mov	r2, r6
   1936a:	a902      	add	r1, sp, #8
   1936c:	4620      	mov	r0, r4
   1936e:	f000 fd4b 	bl	19e08 <ProcessAesDrv>
   19372:	b918      	cbnz	r0, 1937c <cc_mbedtls_aes_crypt_ecb+0x48>
   19374:	b006      	add	sp, #24
   19376:	bd70      	pop	{r4, r5, r6, pc}
   19378:	2900      	cmp	r1, #0
   1937a:	d0e7      	beq.n	1934c <cc_mbedtls_aes_crypt_ecb+0x18>
   1937c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   19380:	e7f8      	b.n	19374 <cc_mbedtls_aes_crypt_ecb+0x40>
   19382:	f06f 0021 	mvn.w	r0, #33	; 0x21
   19386:	4770      	bx	lr

00019388 <cc_mbedtls_sha256_init>:
   19388:	b510      	push	{r4, lr}
   1938a:	4604      	mov	r4, r0
   1938c:	b128      	cbz	r0, 1939a <cc_mbedtls_sha256_init+0x12>
   1938e:	4620      	mov	r0, r4
   19390:	21f4      	movs	r1, #244	; 0xf4
   19392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19396:	f7ff bbf5 	b.w	18b84 <CC_PalMemSetZeroPlat>
   1939a:	4804      	ldr	r0, [pc, #16]	; (193ac <cc_mbedtls_sha256_init+0x24>)
   1939c:	f7fe fcaa 	bl	17cf4 <CC_PalAbort>
   193a0:	4620      	mov	r0, r4
   193a2:	21f4      	movs	r1, #244	; 0xf4
   193a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   193a8:	f7ff bbec 	b.w	18b84 <CC_PalMemSetZeroPlat>
   193ac:	0001f03c 	.word	0x0001f03c

000193b0 <cc_mbedtls_sha256_free>:
   193b0:	b110      	cbz	r0, 193b8 <cc_mbedtls_sha256_free+0x8>
   193b2:	21f4      	movs	r1, #244	; 0xf4
   193b4:	f7fe bd9c 	b.w	17ef0 <mbedtls_zeroize_internal>
   193b8:	4770      	bx	lr
   193ba:	bf00      	nop

000193bc <cc_mbedtls_sha256_starts>:
   193bc:	b508      	push	{r3, lr}
   193be:	b161      	cbz	r1, 193da <cc_mbedtls_sha256_starts+0x1e>
   193c0:	2901      	cmp	r1, #1
   193c2:	d107      	bne.n	193d4 <cc_mbedtls_sha256_starts+0x18>
   193c4:	2102      	movs	r1, #2
   193c6:	f000 f85b 	bl	19480 <mbedtls_sha_starts_internal>
   193ca:	2800      	cmp	r0, #0
   193cc:	bf18      	it	ne
   193ce:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   193d2:	bd08      	pop	{r3, pc}
   193d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   193d8:	bd08      	pop	{r3, pc}
   193da:	2101      	movs	r1, #1
   193dc:	f000 f850 	bl	19480 <mbedtls_sha_starts_internal>
   193e0:	e7f3      	b.n	193ca <cc_mbedtls_sha256_starts+0xe>
   193e2:	bf00      	nop

000193e4 <cc_mbedtls_sha256_update>:
   193e4:	b530      	push	{r4, r5, lr}
   193e6:	4605      	mov	r5, r0
   193e8:	1888      	adds	r0, r1, r2
   193ea:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   193ee:	b0a1      	sub	sp, #132	; 0x84
   193f0:	460b      	mov	r3, r1
   193f2:	4614      	mov	r4, r2
   193f4:	d801      	bhi.n	193fa <cc_mbedtls_sha256_update+0x16>
   193f6:	2a80      	cmp	r2, #128	; 0x80
   193f8:	d90c      	bls.n	19414 <cc_mbedtls_sha256_update+0x30>
   193fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   193fe:	d917      	bls.n	19430 <cc_mbedtls_sha256_update+0x4c>
   19400:	4622      	mov	r2, r4
   19402:	4619      	mov	r1, r3
   19404:	4628      	mov	r0, r5
   19406:	f000 f87d 	bl	19504 <mbedtls_sha_update_internal>
   1940a:	4604      	mov	r4, r0
   1940c:	b984      	cbnz	r4, 19430 <cc_mbedtls_sha256_update+0x4c>
   1940e:	4620      	mov	r0, r4
   19410:	b021      	add	sp, #132	; 0x84
   19412:	bd30      	pop	{r4, r5, pc}
   19414:	4668      	mov	r0, sp
   19416:	f7ff fbb1 	bl	18b7c <CC_PalMemCopyPlat>
   1941a:	4622      	mov	r2, r4
   1941c:	4669      	mov	r1, sp
   1941e:	4628      	mov	r0, r5
   19420:	f000 f870 	bl	19504 <mbedtls_sha_update_internal>
   19424:	2180      	movs	r1, #128	; 0x80
   19426:	4604      	mov	r4, r0
   19428:	4668      	mov	r0, sp
   1942a:	f7ff fbab 	bl	18b84 <CC_PalMemSetZeroPlat>
   1942e:	e7ed      	b.n	1940c <cc_mbedtls_sha256_update+0x28>
   19430:	f06f 0436 	mvn.w	r4, #54	; 0x36
   19434:	e7eb      	b.n	1940e <cc_mbedtls_sha256_update+0x2a>
   19436:	bf00      	nop

00019438 <cc_mbedtls_sha256_finish>:
   19438:	b570      	push	{r4, r5, r6, lr}
   1943a:	b1e8      	cbz	r0, 19478 <cc_mbedtls_sha256_finish+0x40>
   1943c:	460e      	mov	r6, r1
   1943e:	b1d9      	cbz	r1, 19478 <cc_mbedtls_sha256_finish+0x40>
   19440:	4604      	mov	r4, r0
   19442:	f000 f831 	bl	194a8 <mbedtls_sha_finish_internal>
   19446:	4605      	mov	r5, r0
   19448:	b9b0      	cbnz	r0, 19478 <cc_mbedtls_sha256_finish+0x40>
   1944a:	6823      	ldr	r3, [r4, #0]
   1944c:	2b01      	cmp	r3, #1
   1944e:	d00b      	beq.n	19468 <cc_mbedtls_sha256_finish+0x30>
   19450:	2b02      	cmp	r3, #2
   19452:	d001      	beq.n	19458 <cc_mbedtls_sha256_finish+0x20>
   19454:	4628      	mov	r0, r5
   19456:	bd70      	pop	{r4, r5, r6, pc}
   19458:	221c      	movs	r2, #28
   1945a:	f104 0108 	add.w	r1, r4, #8
   1945e:	4630      	mov	r0, r6
   19460:	f7ff fb8c 	bl	18b7c <CC_PalMemCopyPlat>
   19464:	4628      	mov	r0, r5
   19466:	bd70      	pop	{r4, r5, r6, pc}
   19468:	2220      	movs	r2, #32
   1946a:	f104 0108 	add.w	r1, r4, #8
   1946e:	4630      	mov	r0, r6
   19470:	f7ff fb84 	bl	18b7c <CC_PalMemCopyPlat>
   19474:	4628      	mov	r0, r5
   19476:	bd70      	pop	{r4, r5, r6, pc}
   19478:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1947c:	e7ea      	b.n	19454 <cc_mbedtls_sha256_finish+0x1c>
   1947e:	bf00      	nop

00019480 <mbedtls_sha_starts_internal>:
   19480:	b178      	cbz	r0, 194a2 <mbedtls_sha_starts_internal+0x22>
   19482:	b538      	push	{r3, r4, r5, lr}
   19484:	4604      	mov	r4, r0
   19486:	460d      	mov	r5, r1
   19488:	21f0      	movs	r1, #240	; 0xf0
   1948a:	f7ff fb7b 	bl	18b84 <CC_PalMemSetZeroPlat>
   1948e:	2340      	movs	r3, #64	; 0x40
   19490:	6025      	str	r5, [r4, #0]
   19492:	65e3      	str	r3, [r4, #92]	; 0x5c
   19494:	4620      	mov	r0, r4
   19496:	f000 fa63 	bl	19960 <InitHashDrv>
   1949a:	3800      	subs	r0, #0
   1949c:	bf18      	it	ne
   1949e:	2001      	movne	r0, #1
   194a0:	bd38      	pop	{r3, r4, r5, pc}
   194a2:	2001      	movs	r0, #1
   194a4:	4770      	bx	lr
   194a6:	bf00      	nop

000194a8 <mbedtls_sha_finish_internal>:
   194a8:	b570      	push	{r4, r5, r6, lr}
   194aa:	6e05      	ldr	r5, [r0, #96]	; 0x60
   194ac:	b0a4      	sub	sp, #144	; 0x90
   194ae:	4604      	mov	r4, r0
   194b0:	ae04      	add	r6, sp, #16
   194b2:	b9e5      	cbnz	r5, 194ee <mbedtls_sha_finish_internal+0x46>
   194b4:	2201      	movs	r2, #1
   194b6:	2300      	movs	r3, #0
   194b8:	6062      	str	r2, [r4, #4]
   194ba:	4630      	mov	r0, r6
   194bc:	e9cd 3300 	strd	r3, r3, [sp]
   194c0:	aa02      	add	r2, sp, #8
   194c2:	4629      	mov	r1, r5
   194c4:	f000 fa18 	bl	198f8 <SetDataBuffersInfo>
   194c8:	b110      	cbz	r0, 194d0 <mbedtls_sha_finish_internal+0x28>
   194ca:	2001      	movs	r0, #1
   194cc:	b024      	add	sp, #144	; 0x90
   194ce:	bd70      	pop	{r4, r5, r6, pc}
   194d0:	462a      	mov	r2, r5
   194d2:	a902      	add	r1, sp, #8
   194d4:	4620      	mov	r0, r4
   194d6:	f000 fa6d 	bl	199b4 <ProcessHashDrv>
   194da:	2800      	cmp	r0, #0
   194dc:	d1f5      	bne.n	194ca <mbedtls_sha_finish_internal+0x22>
   194de:	4620      	mov	r0, r4
   194e0:	f000 fb7e 	bl	19be0 <FinishHashDrv>
   194e4:	2800      	cmp	r0, #0
   194e6:	d1f0      	bne.n	194ca <mbedtls_sha_finish_internal+0x22>
   194e8:	6620      	str	r0, [r4, #96]	; 0x60
   194ea:	b024      	add	sp, #144	; 0x90
   194ec:	bd70      	pop	{r4, r5, r6, pc}
   194ee:	2d80      	cmp	r5, #128	; 0x80
   194f0:	462a      	mov	r2, r5
   194f2:	f100 0164 	add.w	r1, r0, #100	; 0x64
   194f6:	bf28      	it	cs
   194f8:	2280      	movcs	r2, #128	; 0x80
   194fa:	4630      	mov	r0, r6
   194fc:	f7ff fb3e 	bl	18b7c <CC_PalMemCopyPlat>
   19500:	6e25      	ldr	r5, [r4, #96]	; 0x60
   19502:	e7d7      	b.n	194b4 <mbedtls_sha_finish_internal+0xc>

00019504 <mbedtls_sha_update_internal>:
   19504:	2800      	cmp	r0, #0
   19506:	f000 80cd 	beq.w	196a4 <mbedtls_sha_update_internal+0x1a0>
   1950a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1950e:	4615      	mov	r5, r2
   19510:	b0a5      	sub	sp, #148	; 0x94
   19512:	2a00      	cmp	r2, #0
   19514:	f000 80b4 	beq.w	19680 <mbedtls_sha_update_internal+0x17c>
   19518:	460f      	mov	r7, r1
   1951a:	2900      	cmp	r1, #0
   1951c:	f000 80ac 	beq.w	19678 <mbedtls_sha_update_internal+0x174>
   19520:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   19524:	4606      	mov	r6, r0
   19526:	6e00      	ldr	r0, [r0, #96]	; 0x60
   19528:	d37d      	bcc.n	19626 <mbedtls_sha_update_internal+0x122>
   1952a:	f64f 78ff 	movw	r8, #65535	; 0xffff
   1952e:	f106 0964 	add.w	r9, r6, #100	; 0x64
   19532:	e014      	b.n	1955e <mbedtls_sha_update_internal+0x5a>
   19534:	4283      	cmp	r3, r0
   19536:	46ba      	mov	sl, r7
   19538:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1953c:	d029      	beq.n	19592 <mbedtls_sha_update_internal+0x8e>
   1953e:	fbb4 fbf3 	udiv	fp, r4, r3
   19542:	fb03 fb0b 	mul.w	fp, r3, fp
   19546:	f1bb 0f00 	cmp.w	fp, #0
   1954a:	d144      	bne.n	195d6 <mbedtls_sha_update_internal+0xd2>
   1954c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   19550:	4447      	add	r7, r8
   19552:	3dff      	subs	r5, #255	; 0xff
   19554:	2c00      	cmp	r4, #0
   19556:	d159      	bne.n	1960c <mbedtls_sha_update_internal+0x108>
   19558:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1955c:	d363      	bcc.n	19626 <mbedtls_sha_update_internal+0x122>
   1955e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   19560:	1a1c      	subs	r4, r3, r0
   19562:	fbb4 f2f3 	udiv	r2, r4, r3
   19566:	fb03 4412 	mls	r4, r3, r2, r4
   1956a:	2c00      	cmp	r4, #0
   1956c:	d0e2      	beq.n	19534 <mbedtls_sha_update_internal+0x30>
   1956e:	4544      	cmp	r4, r8
   19570:	bf28      	it	cs
   19572:	4644      	movcs	r4, r8
   19574:	4622      	mov	r2, r4
   19576:	4448      	add	r0, r9
   19578:	4639      	mov	r1, r7
   1957a:	f7ff faff 	bl	18b7c <CC_PalMemCopyPlat>
   1957e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   19580:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   19582:	4420      	add	r0, r4
   19584:	4283      	cmp	r3, r0
   19586:	eb07 0a04 	add.w	sl, r7, r4
   1958a:	6630      	str	r0, [r6, #96]	; 0x60
   1958c:	eba8 0404 	sub.w	r4, r8, r4
   19590:	d1d5      	bne.n	1953e <mbedtls_sha_update_internal+0x3a>
   19592:	2b80      	cmp	r3, #128	; 0x80
   19594:	bf28      	it	cs
   19596:	2380      	movcs	r3, #128	; 0x80
   19598:	461a      	mov	r2, r3
   1959a:	4649      	mov	r1, r9
   1959c:	a804      	add	r0, sp, #16
   1959e:	f7ff faed 	bl	18b7c <CC_PalMemCopyPlat>
   195a2:	2300      	movs	r3, #0
   195a4:	e9cd 3300 	strd	r3, r3, [sp]
   195a8:	aa02      	add	r2, sp, #8
   195aa:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   195ac:	a804      	add	r0, sp, #16
   195ae:	f000 f9a3 	bl	198f8 <SetDataBuffersInfo>
   195b2:	2800      	cmp	r0, #0
   195b4:	d160      	bne.n	19678 <mbedtls_sha_update_internal+0x174>
   195b6:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   195b8:	a902      	add	r1, sp, #8
   195ba:	4630      	mov	r0, r6
   195bc:	f000 f9fa 	bl	199b4 <ProcessHashDrv>
   195c0:	2800      	cmp	r0, #0
   195c2:	d159      	bne.n	19678 <mbedtls_sha_update_internal+0x174>
   195c4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   195c6:	fbb4 fbf3 	udiv	fp, r4, r3
   195ca:	fb03 fb0b 	mul.w	fp, r3, fp
   195ce:	6630      	str	r0, [r6, #96]	; 0x60
   195d0:	f1bb 0f00 	cmp.w	fp, #0
   195d4:	d0ba      	beq.n	1954c <mbedtls_sha_update_internal+0x48>
   195d6:	2300      	movs	r3, #0
   195d8:	e9cd 3300 	strd	r3, r3, [sp]
   195dc:	aa02      	add	r2, sp, #8
   195de:	4659      	mov	r1, fp
   195e0:	4650      	mov	r0, sl
   195e2:	f000 f989 	bl	198f8 <SetDataBuffersInfo>
   195e6:	2800      	cmp	r0, #0
   195e8:	d146      	bne.n	19678 <mbedtls_sha_update_internal+0x174>
   195ea:	a902      	add	r1, sp, #8
   195ec:	465a      	mov	r2, fp
   195ee:	4630      	mov	r0, r6
   195f0:	f000 f9e0 	bl	199b4 <ProcessHashDrv>
   195f4:	2800      	cmp	r0, #0
   195f6:	d13f      	bne.n	19678 <mbedtls_sha_update_internal+0x174>
   195f8:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   195fc:	eba4 040b 	sub.w	r4, r4, fp
   19600:	6e30      	ldr	r0, [r6, #96]	; 0x60
   19602:	44da      	add	sl, fp
   19604:	4447      	add	r7, r8
   19606:	3dff      	subs	r5, #255	; 0xff
   19608:	2c00      	cmp	r4, #0
   1960a:	d0a5      	beq.n	19558 <mbedtls_sha_update_internal+0x54>
   1960c:	3019      	adds	r0, #25
   1960e:	4651      	mov	r1, sl
   19610:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   19614:	4622      	mov	r2, r4
   19616:	f7ff fab1 	bl	18b7c <CC_PalMemCopyPlat>
   1961a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   1961c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   19620:	4420      	add	r0, r4
   19622:	6630      	str	r0, [r6, #96]	; 0x60
   19624:	d29b      	bcs.n	1955e <mbedtls_sha_update_internal+0x5a>
   19626:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   19628:	1a14      	subs	r4, r2, r0
   1962a:	fbb4 f3f2 	udiv	r3, r4, r2
   1962e:	fb02 4413 	mls	r4, r2, r3, r4
   19632:	42ac      	cmp	r4, r5
   19634:	bf28      	it	cs
   19636:	462c      	movcs	r4, r5
   19638:	bb34      	cbnz	r4, 19688 <mbedtls_sha_update_internal+0x184>
   1963a:	4290      	cmp	r0, r2
   1963c:	d034      	beq.n	196a8 <mbedtls_sha_update_internal+0x1a4>
   1963e:	fbb5 f4f2 	udiv	r4, r5, r2
   19642:	fb02 f404 	mul.w	r4, r2, r4
   19646:	b96c      	cbnz	r4, 19664 <mbedtls_sha_update_internal+0x160>
   19648:	b1d5      	cbz	r5, 19680 <mbedtls_sha_update_internal+0x17c>
   1964a:	6e33      	ldr	r3, [r6, #96]	; 0x60
   1964c:	3319      	adds	r3, #25
   1964e:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   19652:	462a      	mov	r2, r5
   19654:	4639      	mov	r1, r7
   19656:	f7ff fa91 	bl	18b7c <CC_PalMemCopyPlat>
   1965a:	6e33      	ldr	r3, [r6, #96]	; 0x60
   1965c:	442b      	add	r3, r5
   1965e:	2000      	movs	r0, #0
   19660:	6633      	str	r3, [r6, #96]	; 0x60
   19662:	e00a      	b.n	1967a <mbedtls_sha_update_internal+0x176>
   19664:	2300      	movs	r3, #0
   19666:	e9cd 3300 	strd	r3, r3, [sp]
   1966a:	aa02      	add	r2, sp, #8
   1966c:	4621      	mov	r1, r4
   1966e:	4638      	mov	r0, r7
   19670:	f000 f942 	bl	198f8 <SetDataBuffersInfo>
   19674:	2800      	cmp	r0, #0
   19676:	d033      	beq.n	196e0 <mbedtls_sha_update_internal+0x1dc>
   19678:	2001      	movs	r0, #1
   1967a:	b025      	add	sp, #148	; 0x94
   1967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19680:	4628      	mov	r0, r5
   19682:	b025      	add	sp, #148	; 0x94
   19684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19688:	f106 0364 	add.w	r3, r6, #100	; 0x64
   1968c:	4639      	mov	r1, r7
   1968e:	4622      	mov	r2, r4
   19690:	4418      	add	r0, r3
   19692:	f7ff fa73 	bl	18b7c <CC_PalMemCopyPlat>
   19696:	6e30      	ldr	r0, [r6, #96]	; 0x60
   19698:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1969a:	4420      	add	r0, r4
   1969c:	1b2d      	subs	r5, r5, r4
   1969e:	4427      	add	r7, r4
   196a0:	6630      	str	r0, [r6, #96]	; 0x60
   196a2:	e7ca      	b.n	1963a <mbedtls_sha_update_internal+0x136>
   196a4:	2001      	movs	r0, #1
   196a6:	4770      	bx	lr
   196a8:	2a80      	cmp	r2, #128	; 0x80
   196aa:	bf28      	it	cs
   196ac:	2280      	movcs	r2, #128	; 0x80
   196ae:	f106 0164 	add.w	r1, r6, #100	; 0x64
   196b2:	a804      	add	r0, sp, #16
   196b4:	f7ff fa62 	bl	18b7c <CC_PalMemCopyPlat>
   196b8:	2300      	movs	r3, #0
   196ba:	e9cd 3300 	strd	r3, r3, [sp]
   196be:	a804      	add	r0, sp, #16
   196c0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   196c2:	aa02      	add	r2, sp, #8
   196c4:	f000 f918 	bl	198f8 <SetDataBuffersInfo>
   196c8:	2800      	cmp	r0, #0
   196ca:	d1d5      	bne.n	19678 <mbedtls_sha_update_internal+0x174>
   196cc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   196ce:	a902      	add	r1, sp, #8
   196d0:	4630      	mov	r0, r6
   196d2:	f000 f96f 	bl	199b4 <ProcessHashDrv>
   196d6:	2800      	cmp	r0, #0
   196d8:	d1ce      	bne.n	19678 <mbedtls_sha_update_internal+0x174>
   196da:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   196dc:	6630      	str	r0, [r6, #96]	; 0x60
   196de:	e7ae      	b.n	1963e <mbedtls_sha_update_internal+0x13a>
   196e0:	a902      	add	r1, sp, #8
   196e2:	4622      	mov	r2, r4
   196e4:	4630      	mov	r0, r6
   196e6:	f000 f965 	bl	199b4 <ProcessHashDrv>
   196ea:	2800      	cmp	r0, #0
   196ec:	d1c4      	bne.n	19678 <mbedtls_sha_update_internal+0x174>
   196ee:	4427      	add	r7, r4
   196f0:	1b2d      	subs	r5, r5, r4
   196f2:	e7a9      	b.n	19648 <mbedtls_sha_update_internal+0x144>

000196f4 <cc_mbedtls_sha256>:
   196f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196f6:	461c      	mov	r4, r3
   196f8:	4605      	mov	r5, r0
   196fa:	4811      	ldr	r0, [pc, #68]	; (19740 <cc_mbedtls_sha256+0x4c>)
   196fc:	460e      	mov	r6, r1
   196fe:	4617      	mov	r7, r2
   19700:	f7ff fe42 	bl	19388 <cc_mbedtls_sha256_init>
   19704:	4621      	mov	r1, r4
   19706:	480e      	ldr	r0, [pc, #56]	; (19740 <cc_mbedtls_sha256+0x4c>)
   19708:	f7ff fe58 	bl	193bc <cc_mbedtls_sha256_starts>
   1970c:	4604      	mov	r4, r0
   1970e:	b120      	cbz	r0, 1971a <cc_mbedtls_sha256+0x26>
   19710:	480b      	ldr	r0, [pc, #44]	; (19740 <cc_mbedtls_sha256+0x4c>)
   19712:	f7ff fe4d 	bl	193b0 <cc_mbedtls_sha256_free>
   19716:	4620      	mov	r0, r4
   19718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1971a:	4809      	ldr	r0, [pc, #36]	; (19740 <cc_mbedtls_sha256+0x4c>)
   1971c:	4632      	mov	r2, r6
   1971e:	4629      	mov	r1, r5
   19720:	f7ff fe60 	bl	193e4 <cc_mbedtls_sha256_update>
   19724:	4604      	mov	r4, r0
   19726:	2800      	cmp	r0, #0
   19728:	d1f2      	bne.n	19710 <cc_mbedtls_sha256+0x1c>
   1972a:	4639      	mov	r1, r7
   1972c:	4804      	ldr	r0, [pc, #16]	; (19740 <cc_mbedtls_sha256+0x4c>)
   1972e:	f7ff fe83 	bl	19438 <cc_mbedtls_sha256_finish>
   19732:	4604      	mov	r4, r0
   19734:	4802      	ldr	r0, [pc, #8]	; (19740 <cc_mbedtls_sha256+0x4c>)
   19736:	f7ff fe3b 	bl	193b0 <cc_mbedtls_sha256_free>
   1973a:	4620      	mov	r0, r4
   1973c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1973e:	bf00      	nop
   19740:	20003acc 	.word	0x20003acc

00019744 <RNG_PLAT_SetUserRngParameters>:
   19744:	b530      	push	{r4, r5, lr}
   19746:	b083      	sub	sp, #12
   19748:	231c      	movs	r3, #28
   1974a:	a901      	add	r1, sp, #4
   1974c:	4604      	mov	r4, r0
   1974e:	9301      	str	r3, [sp, #4]
   19750:	f000 f834 	bl	197bc <CC_PalTrngParamGet>
   19754:	4605      	mov	r5, r0
   19756:	b938      	cbnz	r0, 19768 <RNG_PLAT_SetUserRngParameters+0x24>
   19758:	9b01      	ldr	r3, [sp, #4]
   1975a:	2b1c      	cmp	r3, #28
   1975c:	d007      	beq.n	1976e <RNG_PLAT_SetUserRngParameters+0x2a>
   1975e:	4d15      	ldr	r5, [pc, #84]	; (197b4 <RNG_PLAT_SetUserRngParameters+0x70>)
   19760:	211c      	movs	r1, #28
   19762:	4620      	mov	r0, r4
   19764:	f7ff fa0e 	bl	18b84 <CC_PalMemSetZeroPlat>
   19768:	4628      	mov	r0, r5
   1976a:	b003      	add	sp, #12
   1976c:	bd30      	pop	{r4, r5, pc}
   1976e:	e9d4 3200 	ldrd	r3, r2, [r4]
   19772:	2101      	movs	r1, #1
   19774:	3b00      	subs	r3, #0
   19776:	61e1      	str	r1, [r4, #28]
   19778:	bf18      	it	ne
   1977a:	2301      	movne	r3, #1
   1977c:	b10a      	cbz	r2, 19782 <RNG_PLAT_SetUserRngParameters+0x3e>
   1977e:	f043 0302 	orr.w	r3, r3, #2
   19782:	68a2      	ldr	r2, [r4, #8]
   19784:	b932      	cbnz	r2, 19794 <RNG_PLAT_SetUserRngParameters+0x50>
   19786:	68e2      	ldr	r2, [r4, #12]
   19788:	b942      	cbnz	r2, 1979c <RNG_PLAT_SetUserRngParameters+0x58>
   1978a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1978e:	b97b      	cbnz	r3, 197b0 <RNG_PLAT_SetUserRngParameters+0x6c>
   19790:	4d09      	ldr	r5, [pc, #36]	; (197b8 <RNG_PLAT_SetUserRngParameters+0x74>)
   19792:	e7e5      	b.n	19760 <RNG_PLAT_SetUserRngParameters+0x1c>
   19794:	68e2      	ldr	r2, [r4, #12]
   19796:	f043 0304 	orr.w	r3, r3, #4
   1979a:	b13a      	cbz	r2, 197ac <RNG_PLAT_SetUserRngParameters+0x68>
   1979c:	f043 0308 	orr.w	r3, r3, #8
   197a0:	2200      	movs	r2, #0
   197a2:	4628      	mov	r0, r5
   197a4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   197a8:	b003      	add	sp, #12
   197aa:	bd30      	pop	{r4, r5, pc}
   197ac:	e9c4 3208 	strd	r3, r2, [r4, #32]
   197b0:	4615      	mov	r5, r2
   197b2:	e7d9      	b.n	19768 <RNG_PLAT_SetUserRngParameters+0x24>
   197b4:	00f00c37 	.word	0x00f00c37
   197b8:	00f00c0e 	.word	0x00f00c0e

000197bc <CC_PalTrngParamGet>:
   197bc:	b118      	cbz	r0, 197c6 <CC_PalTrngParamGet+0xa>
   197be:	b111      	cbz	r1, 197c6 <CC_PalTrngParamGet+0xa>
   197c0:	680b      	ldr	r3, [r1, #0]
   197c2:	2b1c      	cmp	r3, #28
   197c4:	d001      	beq.n	197ca <CC_PalTrngParamGet+0xe>
   197c6:	2001      	movs	r0, #1
   197c8:	4770      	bx	lr
   197ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   197ce:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   197d2:	3201      	adds	r2, #1
   197d4:	bf14      	ite	ne
   197d6:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   197da:	f241 225c 	movweq	r2, #4700	; 0x125c
   197de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   197e2:	6002      	str	r2, [r0, #0]
   197e4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   197e8:	3201      	adds	r2, #1
   197ea:	bf14      	ite	ne
   197ec:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   197f0:	f641 1264 	movweq	r2, #6500	; 0x1964
   197f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   197f8:	6042      	str	r2, [r0, #4]
   197fa:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   197fe:	3201      	adds	r2, #1
   19800:	bf14      	ite	ne
   19802:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   19806:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1980a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1980e:	6082      	str	r2, [r0, #8]
   19810:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   19814:	3201      	adds	r2, #1
   19816:	bf14      	ite	ne
   19818:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1981c:	f241 3288 	movweq	r2, #5000	; 0x1388
   19820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19824:	60c2      	str	r2, [r0, #12]
   19826:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1982a:	3201      	adds	r2, #1
   1982c:	bf14      	ite	ne
   1982e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   19832:	2290      	moveq	r2, #144	; 0x90
   19834:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19838:	6102      	str	r2, [r0, #16]
   1983a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1983e:	3201      	adds	r2, #1
   19840:	bf14      	ite	ne
   19842:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   19846:	2251      	moveq	r2, #81	; 0x51
   19848:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1984c:	6142      	str	r2, [r0, #20]
   1984e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   19852:	3201      	adds	r2, #1
   19854:	bf14      	ite	ne
   19856:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1985a:	f240 3337 	movweq	r3, #823	; 0x337
   1985e:	6183      	str	r3, [r0, #24]
   19860:	2000      	movs	r0, #0
   19862:	4770      	bx	lr

00019864 <LLF_RND_WaitRngInterrupt>:
   19864:	b508      	push	{r3, lr}
   19866:	4601      	mov	r1, r0
   19868:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1986c:	f7ff f912 	bl	18a94 <CC_HalWaitInterruptRND>
   19870:	4b03      	ldr	r3, [pc, #12]	; (19880 <LLF_RND_WaitRngInterrupt+0x1c>)
   19872:	2200      	movs	r2, #0
   19874:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   19878:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1987c:	bd08      	pop	{r3, pc}
   1987e:	bf00      	nop
   19880:	5002b000 	.word	0x5002b000

00019884 <LLF_RND_GetRoscSampleCnt>:
   19884:	3801      	subs	r0, #1
   19886:	2807      	cmp	r0, #7
   19888:	d805      	bhi.n	19896 <LLF_RND_GetRoscSampleCnt+0x12>
   1988a:	e8df f000 	tbb	[pc, r0]
   1988e:	0e12      	.short	0x0e12
   19890:	04040a04 	.word	0x04040a04
   19894:	0604      	.short	0x0604
   19896:	4809      	ldr	r0, [pc, #36]	; (198bc <LLF_RND_GetRoscSampleCnt+0x38>)
   19898:	4770      	bx	lr
   1989a:	68cb      	ldr	r3, [r1, #12]
   1989c:	624b      	str	r3, [r1, #36]	; 0x24
   1989e:	2000      	movs	r0, #0
   198a0:	4770      	bx	lr
   198a2:	688b      	ldr	r3, [r1, #8]
   198a4:	624b      	str	r3, [r1, #36]	; 0x24
   198a6:	2000      	movs	r0, #0
   198a8:	4770      	bx	lr
   198aa:	684b      	ldr	r3, [r1, #4]
   198ac:	624b      	str	r3, [r1, #36]	; 0x24
   198ae:	2000      	movs	r0, #0
   198b0:	4770      	bx	lr
   198b2:	680b      	ldr	r3, [r1, #0]
   198b4:	624b      	str	r3, [r1, #36]	; 0x24
   198b6:	2000      	movs	r0, #0
   198b8:	4770      	bx	lr
   198ba:	bf00      	nop
   198bc:	00f10c31 	.word	0x00f10c31

000198c0 <LLF_RND_GetFastestRosc>:
   198c0:	680b      	ldr	r3, [r1, #0]
   198c2:	e002      	b.n	198ca <LLF_RND_GetFastestRosc+0xa>
   198c4:	2b08      	cmp	r3, #8
   198c6:	600b      	str	r3, [r1, #0]
   198c8:	d806      	bhi.n	198d8 <LLF_RND_GetFastestRosc+0x18>
   198ca:	6a02      	ldr	r2, [r0, #32]
   198cc:	4213      	tst	r3, r2
   198ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
   198d2:	d0f7      	beq.n	198c4 <LLF_RND_GetFastestRosc+0x4>
   198d4:	2000      	movs	r0, #0
   198d6:	4770      	bx	lr
   198d8:	4800      	ldr	r0, [pc, #0]	; (198dc <LLF_RND_GetFastestRosc+0x1c>)
   198da:	4770      	bx	lr
   198dc:	00f10c31 	.word	0x00f10c31

000198e0 <LLF_RND_TurnOffTrng>:
   198e0:	4b04      	ldr	r3, [pc, #16]	; (198f4 <LLF_RND_TurnOffTrng+0x14>)
   198e2:	2200      	movs	r2, #0
   198e4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   198e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   198ec:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   198f0:	f7ff b8b6 	b.w	18a60 <CC_HalClearInterruptBit>
   198f4:	5002b000 	.word	0x5002b000

000198f8 <SetDataBuffersInfo>:
   198f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   198fa:	b083      	sub	sp, #12
   198fc:	461d      	mov	r5, r3
   198fe:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   19902:	f04f 0300 	mov.w	r3, #0
   19906:	f88d 3007 	strb.w	r3, [sp, #7]
   1990a:	d324      	bcc.n	19956 <SetDataBuffersInfo+0x5e>
   1990c:	468c      	mov	ip, r1
   1990e:	4484      	add	ip, r0
   19910:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   19914:	4604      	mov	r4, r0
   19916:	d81e      	bhi.n	19956 <SetDataBuffersInfo+0x5e>
   19918:	4617      	mov	r7, r2
   1991a:	f10d 0307 	add.w	r3, sp, #7
   1991e:	2201      	movs	r2, #1
   19920:	f000 fe68 	bl	1a5f4 <CC_PalDataBufferAttrGet>
   19924:	4606      	mov	r6, r0
   19926:	b9b0      	cbnz	r0, 19956 <SetDataBuffersInfo+0x5e>
   19928:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1992a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1992e:	603c      	str	r4, [r7, #0]
   19930:	713b      	strb	r3, [r7, #4]
   19932:	b192      	cbz	r2, 1995a <SetDataBuffersInfo+0x62>
   19934:	b14d      	cbz	r5, 1994a <SetDataBuffersInfo+0x52>
   19936:	4602      	mov	r2, r0
   19938:	9908      	ldr	r1, [sp, #32]
   1993a:	f10d 0307 	add.w	r3, sp, #7
   1993e:	4628      	mov	r0, r5
   19940:	f000 fe58 	bl	1a5f4 <CC_PalDataBufferAttrGet>
   19944:	b938      	cbnz	r0, 19956 <SetDataBuffersInfo+0x5e>
   19946:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1994a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1994c:	4630      	mov	r0, r6
   1994e:	6015      	str	r5, [r2, #0]
   19950:	7113      	strb	r3, [r2, #4]
   19952:	b003      	add	sp, #12
   19954:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19956:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1995a:	4630      	mov	r0, r6
   1995c:	b003      	add	sp, #12
   1995e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019960 <InitHashDrv>:
   19960:	b1e8      	cbz	r0, 1999e <InitHashDrv+0x3e>
   19962:	b510      	push	{r4, lr}
   19964:	6804      	ldr	r4, [r0, #0]
   19966:	2c01      	cmp	r4, #1
   19968:	d004      	beq.n	19974 <InitHashDrv+0x14>
   1996a:	2c02      	cmp	r4, #2
   1996c:	d010      	beq.n	19990 <InitHashDrv+0x30>
   1996e:	b144      	cbz	r4, 19982 <InitHashDrv+0x22>
   19970:	480c      	ldr	r0, [pc, #48]	; (199a4 <InitHashDrv+0x44>)
   19972:	bd10      	pop	{r4, pc}
   19974:	490c      	ldr	r1, [pc, #48]	; (199a8 <InitHashDrv+0x48>)
   19976:	2220      	movs	r2, #32
   19978:	3008      	adds	r0, #8
   1997a:	f7ff f8ff 	bl	18b7c <CC_PalMemCopyPlat>
   1997e:	2000      	movs	r0, #0
   19980:	bd10      	pop	{r4, pc}
   19982:	490a      	ldr	r1, [pc, #40]	; (199ac <InitHashDrv+0x4c>)
   19984:	2214      	movs	r2, #20
   19986:	3008      	adds	r0, #8
   19988:	f7ff f8f8 	bl	18b7c <CC_PalMemCopyPlat>
   1998c:	4620      	mov	r0, r4
   1998e:	bd10      	pop	{r4, pc}
   19990:	4907      	ldr	r1, [pc, #28]	; (199b0 <InitHashDrv+0x50>)
   19992:	2220      	movs	r2, #32
   19994:	3008      	adds	r0, #8
   19996:	f7ff f8f1 	bl	18b7c <CC_PalMemCopyPlat>
   1999a:	2000      	movs	r0, #0
   1999c:	bd10      	pop	{r4, pc}
   1999e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   199a2:	4770      	bx	lr
   199a4:	00f30001 	.word	0x00f30001
   199a8:	0001f080 	.word	0x0001f080
   199ac:	0001f04c 	.word	0x0001f04c
   199b0:	0001f060 	.word	0x0001f060

000199b4 <ProcessHashDrv>:
   199b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   199b8:	2900      	cmp	r1, #0
   199ba:	f000 80f9 	beq.w	19bb0 <ProcessHashDrv+0x1fc>
   199be:	4604      	mov	r4, r0
   199c0:	2800      	cmp	r0, #0
   199c2:	f000 80f9 	beq.w	19bb8 <ProcessHashDrv+0x204>
   199c6:	6803      	ldr	r3, [r0, #0]
   199c8:	4690      	mov	r8, r2
   199ca:	460f      	mov	r7, r1
   199cc:	2b00      	cmp	r3, #0
   199ce:	f000 80c3 	beq.w	19b58 <ProcessHashDrv+0x1a4>
   199d2:	3b01      	subs	r3, #1
   199d4:	2b01      	cmp	r3, #1
   199d6:	f200 80d7 	bhi.w	19b88 <ProcessHashDrv+0x1d4>
   199da:	4879      	ldr	r0, [pc, #484]	; (19bc0 <ProcessHashDrv+0x20c>)
   199dc:	f04f 31ff 	mov.w	r1, #4294967295
   199e0:	f04f 0902 	mov.w	r9, #2
   199e4:	f7ff f8e6 	bl	18bb4 <CC_PalMutexLock>
   199e8:	2800      	cmp	r0, #0
   199ea:	f040 80bf 	bne.w	19b6c <ProcessHashDrv+0x1b8>
   199ee:	2000      	movs	r0, #0
   199f0:	f7ff f910 	bl	18c14 <CC_PalPowerSaveModeSelect>
   199f4:	4606      	mov	r6, r0
   199f6:	2800      	cmp	r0, #0
   199f8:	f040 80c2 	bne.w	19b80 <ProcessHashDrv+0x1cc>
   199fc:	4a71      	ldr	r2, [pc, #452]	; (19bc4 <ProcessHashDrv+0x210>)
   199fe:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   19a02:	2b00      	cmp	r3, #0
   19a04:	d1fb      	bne.n	199fe <ProcessHashDrv+0x4a>
   19a06:	4d6f      	ldr	r5, [pc, #444]	; (19bc4 <ProcessHashDrv+0x210>)
   19a08:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   19a0c:	2b00      	cmp	r3, #0
   19a0e:	d1fb      	bne.n	19a08 <ProcessHashDrv+0x54>
   19a10:	f04f 30ff 	mov.w	r0, #4294967295
   19a14:	f7ff f824 	bl	18a60 <CC_HalClearInterruptBit>
   19a18:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   19a1c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   19a20:	f7ff f82c 	bl	18a7c <CC_HalMaskInterrupt>
   19a24:	2301      	movs	r3, #1
   19a26:	2207      	movs	r2, #7
   19a28:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   19a2c:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   19a30:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   19a34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19a36:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   19a3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   19a3c:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   19a40:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   19a44:	6823      	ldr	r3, [r4, #0]
   19a46:	b15b      	cbz	r3, 19a60 <ProcessHashDrv+0xac>
   19a48:	3b01      	subs	r3, #1
   19a4a:	2b01      	cmp	r3, #1
   19a4c:	d818      	bhi.n	19a80 <ProcessHashDrv+0xcc>
   19a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19a50:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   19a54:	6a23      	ldr	r3, [r4, #32]
   19a56:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   19a5a:	69e3      	ldr	r3, [r4, #28]
   19a5c:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   19a60:	4b58      	ldr	r3, [pc, #352]	; (19bc4 <ProcessHashDrv+0x210>)
   19a62:	69a2      	ldr	r2, [r4, #24]
   19a64:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   19a68:	6962      	ldr	r2, [r4, #20]
   19a6a:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   19a6e:	6922      	ldr	r2, [r4, #16]
   19a70:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   19a74:	68e2      	ldr	r2, [r4, #12]
   19a76:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   19a7a:	68a2      	ldr	r2, [r4, #8]
   19a7c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   19a80:	4a50      	ldr	r2, [pc, #320]	; (19bc4 <ProcessHashDrv+0x210>)
   19a82:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   19a86:	2b00      	cmp	r3, #0
   19a88:	d1fb      	bne.n	19a82 <ProcessHashDrv+0xce>
   19a8a:	f1b8 0f00 	cmp.w	r8, #0
   19a8e:	d05f      	beq.n	19b50 <ProcessHashDrv+0x19c>
   19a90:	6863      	ldr	r3, [r4, #4]
   19a92:	2b01      	cmp	r3, #1
   19a94:	bf08      	it	eq
   19a96:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   19a9a:	4b4a      	ldr	r3, [pc, #296]	; (19bc4 <ProcessHashDrv+0x210>)
   19a9c:	683a      	ldr	r2, [r7, #0]
   19a9e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   19aa2:	2040      	movs	r0, #64	; 0x40
   19aa4:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   19aa8:	f7fe ffee 	bl	18a88 <CC_HalWaitInterrupt>
   19aac:	4606      	mov	r6, r0
   19aae:	4a45      	ldr	r2, [pc, #276]	; (19bc4 <ProcessHashDrv+0x210>)
   19ab0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   19ab4:	2b00      	cmp	r3, #0
   19ab6:	d1fb      	bne.n	19ab0 <ProcessHashDrv+0xfc>
   19ab8:	4a42      	ldr	r2, [pc, #264]	; (19bc4 <ProcessHashDrv+0x210>)
   19aba:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   19abe:	2b00      	cmp	r3, #0
   19ac0:	d1fb      	bne.n	19aba <ProcessHashDrv+0x106>
   19ac2:	6823      	ldr	r3, [r4, #0]
   19ac4:	b15b      	cbz	r3, 19ade <ProcessHashDrv+0x12a>
   19ac6:	3b01      	subs	r3, #1
   19ac8:	2b01      	cmp	r3, #1
   19aca:	d818      	bhi.n	19afe <ProcessHashDrv+0x14a>
   19acc:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   19ad0:	6263      	str	r3, [r4, #36]	; 0x24
   19ad2:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   19ad6:	6223      	str	r3, [r4, #32]
   19ad8:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   19adc:	61e3      	str	r3, [r4, #28]
   19ade:	4b39      	ldr	r3, [pc, #228]	; (19bc4 <ProcessHashDrv+0x210>)
   19ae0:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   19ae4:	61a2      	str	r2, [r4, #24]
   19ae6:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   19aea:	6162      	str	r2, [r4, #20]
   19aec:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   19af0:	6122      	str	r2, [r4, #16]
   19af2:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   19af6:	60e2      	str	r2, [r4, #12]
   19af8:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   19afc:	60a3      	str	r3, [r4, #8]
   19afe:	4a31      	ldr	r2, [pc, #196]	; (19bc4 <ProcessHashDrv+0x210>)
   19b00:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   19b04:	64a1      	str	r1, [r4, #72]	; 0x48
   19b06:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   19b0a:	64e1      	str	r1, [r4, #76]	; 0x4c
   19b0c:	2300      	movs	r3, #0
   19b0e:	2101      	movs	r1, #1
   19b10:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   19b14:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   19b18:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   19b1c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   19b20:	2b00      	cmp	r3, #0
   19b22:	d1fb      	bne.n	19b1c <ProcessHashDrv+0x168>
   19b24:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   19b28:	2e00      	cmp	r6, #0
   19b2a:	d13b      	bne.n	19ba4 <ProcessHashDrv+0x1f0>
   19b2c:	4b25      	ldr	r3, [pc, #148]	; (19bc4 <ProcessHashDrv+0x210>)
   19b2e:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   19b32:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   19b36:	f7fe ffa1 	bl	18a7c <CC_HalMaskInterrupt>
   19b3a:	2001      	movs	r0, #1
   19b3c:	f7ff f86a 	bl	18c14 <CC_PalPowerSaveModeSelect>
   19b40:	bb60      	cbnz	r0, 19b9c <ProcessHashDrv+0x1e8>
   19b42:	481f      	ldr	r0, [pc, #124]	; (19bc0 <ProcessHashDrv+0x20c>)
   19b44:	f7ff f83e 	bl	18bc4 <CC_PalMutexUnlock>
   19b48:	bb10      	cbnz	r0, 19b90 <ProcessHashDrv+0x1dc>
   19b4a:	4630      	mov	r0, r6
   19b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b50:	2304      	movs	r3, #4
   19b52:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   19b56:	e7aa      	b.n	19aae <ProcessHashDrv+0xfa>
   19b58:	4819      	ldr	r0, [pc, #100]	; (19bc0 <ProcessHashDrv+0x20c>)
   19b5a:	f04f 31ff 	mov.w	r1, #4294967295
   19b5e:	f04f 0901 	mov.w	r9, #1
   19b62:	f7ff f827 	bl	18bb4 <CC_PalMutexLock>
   19b66:	2800      	cmp	r0, #0
   19b68:	f43f af41 	beq.w	199ee <ProcessHashDrv+0x3a>
   19b6c:	4816      	ldr	r0, [pc, #88]	; (19bc8 <ProcessHashDrv+0x214>)
   19b6e:	f7fe f8c1 	bl	17cf4 <CC_PalAbort>
   19b72:	2000      	movs	r0, #0
   19b74:	f7ff f84e 	bl	18c14 <CC_PalPowerSaveModeSelect>
   19b78:	4606      	mov	r6, r0
   19b7a:	2800      	cmp	r0, #0
   19b7c:	f43f af3e 	beq.w	199fc <ProcessHashDrv+0x48>
   19b80:	4812      	ldr	r0, [pc, #72]	; (19bcc <ProcessHashDrv+0x218>)
   19b82:	f7fe f8b7 	bl	17cf4 <CC_PalAbort>
   19b86:	e739      	b.n	199fc <ProcessHashDrv+0x48>
   19b88:	4e11      	ldr	r6, [pc, #68]	; (19bd0 <ProcessHashDrv+0x21c>)
   19b8a:	4630      	mov	r0, r6
   19b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b90:	4810      	ldr	r0, [pc, #64]	; (19bd4 <ProcessHashDrv+0x220>)
   19b92:	f7fe f8af 	bl	17cf4 <CC_PalAbort>
   19b96:	4630      	mov	r0, r6
   19b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b9c:	480e      	ldr	r0, [pc, #56]	; (19bd8 <ProcessHashDrv+0x224>)
   19b9e:	f7fe f8a9 	bl	17cf4 <CC_PalAbort>
   19ba2:	e7ce      	b.n	19b42 <ProcessHashDrv+0x18e>
   19ba4:	2110      	movs	r1, #16
   19ba6:	f104 0008 	add.w	r0, r4, #8
   19baa:	f7fe ffeb 	bl	18b84 <CC_PalMemSetZeroPlat>
   19bae:	e7bd      	b.n	19b2c <ProcessHashDrv+0x178>
   19bb0:	4e0a      	ldr	r6, [pc, #40]	; (19bdc <ProcessHashDrv+0x228>)
   19bb2:	4630      	mov	r0, r6
   19bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19bb8:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   19bbc:	e7c5      	b.n	19b4a <ProcessHashDrv+0x196>
   19bbe:	bf00      	nop
   19bc0:	20000954 	.word	0x20000954
   19bc4:	5002b000 	.word	0x5002b000
   19bc8:	0001ef80 	.word	0x0001ef80
   19bcc:	0001ef98 	.word	0x0001ef98
   19bd0:	00f30001 	.word	0x00f30001
   19bd4:	0001efd8 	.word	0x0001efd8
   19bd8:	0001efb8 	.word	0x0001efb8
   19bdc:	00f30003 	.word	0x00f30003

00019be0 <FinishHashDrv>:
   19be0:	b398      	cbz	r0, 19c4a <FinishHashDrv+0x6a>
   19be2:	b470      	push	{r4, r5, r6}
   19be4:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   19be8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   19bec:	ba26      	rev	r6, r4
   19bee:	ba0d      	rev	r5, r1
   19bf0:	ba14      	rev	r4, r2
   19bf2:	ba19      	rev	r1, r3
   19bf4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   19bf8:	ba12      	rev	r2, r2
   19bfa:	e9c0 4104 	strd	r4, r1, [r0, #16]
   19bfe:	6182      	str	r2, [r0, #24]
   19c00:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   19c04:	e9c0 6502 	strd	r6, r5, [r0, #8]
   19c08:	ba1b      	rev	r3, r3
   19c0a:	ba25      	rev	r5, r4
   19c0c:	e9c0 3507 	strd	r3, r5, [r0, #28]
   19c10:	ba14      	rev	r4, r2
   19c12:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   19c16:	6a81      	ldr	r1, [r0, #40]	; 0x28
   19c18:	ba12      	rev	r2, r2
   19c1a:	ba09      	rev	r1, r1
   19c1c:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   19c20:	62c2      	str	r2, [r0, #44]	; 0x2c
   19c22:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   19c26:	ba1b      	rev	r3, r3
   19c28:	ba25      	rev	r5, r4
   19c2a:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   19c2e:	ba14      	rev	r4, r2
   19c30:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   19c34:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   19c36:	ba12      	rev	r2, r2
   19c38:	ba09      	rev	r1, r1
   19c3a:	ba1b      	rev	r3, r3
   19c3c:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   19c40:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   19c44:	2000      	movs	r0, #0
   19c46:	bc70      	pop	{r4, r5, r6}
   19c48:	4770      	bx	lr
   19c4a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   19c4e:	4770      	bx	lr

00019c50 <LoadAesKey>:
   19c50:	2800      	cmp	r0, #0
   19c52:	d046      	beq.n	19ce2 <LoadAesKey+0x92>
   19c54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   19c58:	2b00      	cmp	r3, #0
   19c5a:	d033      	beq.n	19cc4 <LoadAesKey+0x74>
   19c5c:	2b03      	cmp	r3, #3
   19c5e:	b510      	push	{r4, lr}
   19c60:	d013      	beq.n	19c8a <LoadAesKey+0x3a>
   19c62:	4821      	ldr	r0, [pc, #132]	; (19ce8 <LoadAesKey+0x98>)
   19c64:	4c21      	ldr	r4, [pc, #132]	; (19cec <LoadAesKey+0x9c>)
   19c66:	6822      	ldr	r2, [r4, #0]
   19c68:	4b21      	ldr	r3, [pc, #132]	; (19cf0 <LoadAesKey+0xa0>)
   19c6a:	6812      	ldr	r2, [r2, #0]
   19c6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   19c70:	6822      	ldr	r2, [r4, #0]
   19c72:	6852      	ldr	r2, [r2, #4]
   19c74:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   19c78:	6822      	ldr	r2, [r4, #0]
   19c7a:	6892      	ldr	r2, [r2, #8]
   19c7c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   19c80:	6822      	ldr	r2, [r4, #0]
   19c82:	68d2      	ldr	r2, [r2, #12]
   19c84:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   19c88:	bd10      	pop	{r4, pc}
   19c8a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   19c8c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   19c8e:	4c17      	ldr	r4, [pc, #92]	; (19cec <LoadAesKey+0x9c>)
   19c90:	f000 fbac 	bl	1a3ec <kmu_validate_kdr_slot_and_size>
   19c94:	2800      	cmp	r0, #0
   19c96:	d1e6      	bne.n	19c66 <LoadAesKey+0x16>
   19c98:	6822      	ldr	r2, [r4, #0]
   19c9a:	4b15      	ldr	r3, [pc, #84]	; (19cf0 <LoadAesKey+0xa0>)
   19c9c:	6812      	ldr	r2, [r2, #0]
   19c9e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   19ca2:	6822      	ldr	r2, [r4, #0]
   19ca4:	6852      	ldr	r2, [r2, #4]
   19ca6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   19caa:	6822      	ldr	r2, [r4, #0]
   19cac:	6892      	ldr	r2, [r2, #8]
   19cae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   19cb2:	6822      	ldr	r2, [r4, #0]
   19cb4:	68d2      	ldr	r2, [r2, #12]
   19cb6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   19cba:	f000 fba3 	bl	1a404 <kmu_use_kdr_key>
   19cbe:	2800      	cmp	r0, #0
   19cc0:	d1d1      	bne.n	19c66 <LoadAesKey+0x16>
   19cc2:	bd10      	pop	{r4, pc}
   19cc4:	4a0a      	ldr	r2, [pc, #40]	; (19cf0 <LoadAesKey+0xa0>)
   19cc6:	6901      	ldr	r1, [r0, #16]
   19cc8:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   19ccc:	6941      	ldr	r1, [r0, #20]
   19cce:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   19cd2:	6981      	ldr	r1, [r0, #24]
   19cd4:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   19cd8:	69c1      	ldr	r1, [r0, #28]
   19cda:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   19cde:	4618      	mov	r0, r3
   19ce0:	4770      	bx	lr
   19ce2:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   19ce6:	4770      	bx	lr
   19ce8:	00f10009 	.word	0x00f10009
   19cec:	20000944 	.word	0x20000944
   19cf0:	5002b000 	.word	0x5002b000

00019cf4 <InitAes.part.0>:
   19cf4:	4a37      	ldr	r2, [pc, #220]	; (19dd4 <InitAes.part.0+0xe0>)
   19cf6:	b538      	push	{r3, r4, r5, lr}
   19cf8:	4604      	mov	r4, r0
   19cfa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   19cfe:	2b00      	cmp	r3, #0
   19d00:	d1fb      	bne.n	19cfa <InitAes.part.0+0x6>
   19d02:	4a34      	ldr	r2, [pc, #208]	; (19dd4 <InitAes.part.0+0xe0>)
   19d04:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   19d08:	2b00      	cmp	r3, #0
   19d0a:	d1fb      	bne.n	19d04 <InitAes.part.0+0x10>
   19d0c:	4a31      	ldr	r2, [pc, #196]	; (19dd4 <InitAes.part.0+0xe0>)
   19d0e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   19d12:	2b00      	cmp	r3, #0
   19d14:	d1fb      	bne.n	19d0e <InitAes.part.0+0x1a>
   19d16:	4a2f      	ldr	r2, [pc, #188]	; (19dd4 <InitAes.part.0+0xe0>)
   19d18:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   19d1c:	2b00      	cmp	r3, #0
   19d1e:	d1fb      	bne.n	19d18 <InitAes.part.0+0x24>
   19d20:	4a2c      	ldr	r2, [pc, #176]	; (19dd4 <InitAes.part.0+0xe0>)
   19d22:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   19d26:	2b00      	cmp	r3, #0
   19d28:	d1fb      	bne.n	19d22 <InitAes.part.0+0x2e>
   19d2a:	4d2a      	ldr	r5, [pc, #168]	; (19dd4 <InitAes.part.0+0xe0>)
   19d2c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   19d30:	2b00      	cmp	r3, #0
   19d32:	d1fb      	bne.n	19d2c <InitAes.part.0+0x38>
   19d34:	f04f 30ff 	mov.w	r0, #4294967295
   19d38:	f7fe fe92 	bl	18a60 <CC_HalClearInterruptBit>
   19d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19d3e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   19d42:	f023 0304 	bic.w	r3, r3, #4
   19d46:	2b03      	cmp	r3, #3
   19d48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19d4a:	d039      	beq.n	19dc0 <InitAes.part.0+0xcc>
   19d4c:	2b01      	cmp	r3, #1
   19d4e:	bf0c      	ite	eq
   19d50:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   19d54:	f020 0020 	bicne.w	r0, r0, #32
   19d58:	f7fe fe90 	bl	18a7c <CC_HalMaskInterrupt>
   19d5c:	4a1d      	ldr	r2, [pc, #116]	; (19dd4 <InitAes.part.0+0xe0>)
   19d5e:	2301      	movs	r3, #1
   19d60:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   19d64:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   19d68:	2b00      	cmp	r3, #0
   19d6a:	d1fb      	bne.n	19d64 <InitAes.part.0+0x70>
   19d6c:	4a19      	ldr	r2, [pc, #100]	; (19dd4 <InitAes.part.0+0xe0>)
   19d6e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   19d72:	2b00      	cmp	r3, #0
   19d74:	d1fb      	bne.n	19d6e <InitAes.part.0+0x7a>
   19d76:	4917      	ldr	r1, [pc, #92]	; (19dd4 <InitAes.part.0+0xe0>)
   19d78:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   19d7c:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   19d80:	2b00      	cmp	r3, #0
   19d82:	d1fb      	bne.n	19d7c <InitAes.part.0+0x88>
   19d84:	4a13      	ldr	r2, [pc, #76]	; (19dd4 <InitAes.part.0+0xe0>)
   19d86:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   19d8a:	2b00      	cmp	r3, #0
   19d8c:	d1fb      	bne.n	19d86 <InitAes.part.0+0x92>
   19d8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   19d90:	f022 0104 	bic.w	r1, r2, #4
   19d94:	2903      	cmp	r1, #3
   19d96:	bf18      	it	ne
   19d98:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   19d9a:	490e      	ldr	r1, [pc, #56]	; (19dd4 <InitAes.part.0+0xe0>)
   19d9c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   19da0:	bf18      	it	ne
   19da2:	f003 0301 	andne.w	r3, r3, #1
   19da6:	f002 021c 	and.w	r2, r2, #28
   19daa:	4313      	orrs	r3, r2
   19dac:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   19db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19db2:	2b07      	cmp	r3, #7
   19db4:	bf04      	itt	eq
   19db6:	2301      	moveq	r3, #1
   19db8:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   19dbc:	2000      	movs	r0, #0
   19dbe:	bd38      	pop	{r3, r4, r5, pc}
   19dc0:	2b01      	cmp	r3, #1
   19dc2:	bf0c      	ite	eq
   19dc4:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   19dc8:	f020 0010 	bicne.w	r0, r0, #16
   19dcc:	f7fe fe56 	bl	18a7c <CC_HalMaskInterrupt>
   19dd0:	e7c4      	b.n	19d5c <InitAes.part.0+0x68>
   19dd2:	bf00      	nop
   19dd4:	5002b000 	.word	0x5002b000

00019dd8 <write_invalid_key>:
   19dd8:	4a09      	ldr	r2, [pc, #36]	; (19e00 <write_invalid_key+0x28>)
   19dda:	4b0a      	ldr	r3, [pc, #40]	; (19e04 <write_invalid_key+0x2c>)
   19ddc:	6811      	ldr	r1, [r2, #0]
   19dde:	6809      	ldr	r1, [r1, #0]
   19de0:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   19de4:	6811      	ldr	r1, [r2, #0]
   19de6:	6849      	ldr	r1, [r1, #4]
   19de8:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   19dec:	6811      	ldr	r1, [r2, #0]
   19dee:	6889      	ldr	r1, [r1, #8]
   19df0:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   19df4:	6812      	ldr	r2, [r2, #0]
   19df6:	68d2      	ldr	r2, [r2, #12]
   19df8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   19dfc:	4770      	bx	lr
   19dfe:	bf00      	nop
   19e00:	20000944 	.word	0x20000944
   19e04:	5002b000 	.word	0x5002b000

00019e08 <ProcessAesDrv>:
   19e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e0c:	b085      	sub	sp, #20
   19e0e:	2900      	cmp	r1, #0
   19e10:	f000 80a3 	beq.w	19f5a <ProcessAesDrv+0x152>
   19e14:	4690      	mov	r8, r2
   19e16:	2a00      	cmp	r2, #0
   19e18:	f000 809f 	beq.w	19f5a <ProcessAesDrv+0x152>
   19e1c:	4605      	mov	r5, r0
   19e1e:	2800      	cmp	r0, #0
   19e20:	f000 813c 	beq.w	1a09c <ProcessAesDrv+0x294>
   19e24:	4699      	mov	r9, r3
   19e26:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   19e28:	460e      	mov	r6, r1
   19e2a:	2b00      	cmp	r3, #0
   19e2c:	d151      	bne.n	19ed2 <ProcessAesDrv+0xca>
   19e2e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   19e32:	d253      	bcs.n	19edc <ProcessAesDrv+0xd4>
   19e34:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   19e38:	2b04      	cmp	r3, #4
   19e3a:	f000 8112 	beq.w	1a062 <ProcessAesDrv+0x25a>
   19e3e:	2700      	movs	r7, #0
   19e40:	48a6      	ldr	r0, [pc, #664]	; (1a0dc <ProcessAesDrv+0x2d4>)
   19e42:	f04f 31ff 	mov.w	r1, #4294967295
   19e46:	f7fe feb5 	bl	18bb4 <CC_PalMutexLock>
   19e4a:	2800      	cmp	r0, #0
   19e4c:	f040 80e8 	bne.w	1a020 <ProcessAesDrv+0x218>
   19e50:	2000      	movs	r0, #0
   19e52:	f7fe fedf 	bl	18c14 <CC_PalPowerSaveModeSelect>
   19e56:	2800      	cmp	r0, #0
   19e58:	f040 80eb 	bne.w	1a032 <ProcessAesDrv+0x22a>
   19e5c:	48a0      	ldr	r0, [pc, #640]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   19e5e:	2301      	movs	r3, #1
   19e60:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   19e64:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   19e68:	2c00      	cmp	r4, #0
   19e6a:	d1fb      	bne.n	19e64 <ProcessAesDrv+0x5c>
   19e6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   19e6e:	2b03      	cmp	r3, #3
   19e70:	dc39      	bgt.n	19ee6 <ProcessAesDrv+0xde>
   19e72:	2b00      	cmp	r3, #0
   19e74:	da3a      	bge.n	19eec <ProcessAesDrv+0xe4>
   19e76:	4c9b      	ldr	r4, [pc, #620]	; (1a0e4 <ProcessAesDrv+0x2dc>)
   19e78:	4a99      	ldr	r2, [pc, #612]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   19e7a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   19e7e:	2b00      	cmp	r3, #0
   19e80:	d1fb      	bne.n	19e7a <ProcessAesDrv+0x72>
   19e82:	2f00      	cmp	r7, #0
   19e84:	f040 80e4 	bne.w	1a050 <ProcessAesDrv+0x248>
   19e88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   19e8a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   19e8c:	f023 0304 	bic.w	r3, r3, #4
   19e90:	2b03      	cmp	r3, #3
   19e92:	4b93      	ldr	r3, [pc, #588]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   19e94:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   19e98:	d056      	beq.n	19f48 <ProcessAesDrv+0x140>
   19e9a:	2a01      	cmp	r2, #1
   19e9c:	bf0c      	ite	eq
   19e9e:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   19ea2:	f040 0020 	orrne.w	r0, r0, #32
   19ea6:	f7fe fde9 	bl	18a7c <CC_HalMaskInterrupt>
   19eaa:	4b8d      	ldr	r3, [pc, #564]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   19eac:	2200      	movs	r2, #0
   19eae:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   19eb2:	2001      	movs	r0, #1
   19eb4:	f7fe feae 	bl	18c14 <CC_PalPowerSaveModeSelect>
   19eb8:	2800      	cmp	r0, #0
   19eba:	f040 80c5 	bne.w	1a048 <ProcessAesDrv+0x240>
   19ebe:	4887      	ldr	r0, [pc, #540]	; (1a0dc <ProcessAesDrv+0x2d4>)
   19ec0:	f7fe fe80 	bl	18bc4 <CC_PalMutexUnlock>
   19ec4:	2800      	cmp	r0, #0
   19ec6:	f040 80b8 	bne.w	1a03a <ProcessAesDrv+0x232>
   19eca:	4620      	mov	r0, r4
   19ecc:	b005      	add	sp, #20
   19ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ed2:	2b01      	cmp	r3, #1
   19ed4:	d1ae      	bne.n	19e34 <ProcessAesDrv+0x2c>
   19ed6:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   19eda:	d3ab      	bcc.n	19e34 <ProcessAesDrv+0x2c>
   19edc:	4c82      	ldr	r4, [pc, #520]	; (1a0e8 <ProcessAesDrv+0x2e0>)
   19ede:	4620      	mov	r0, r4
   19ee0:	b005      	add	sp, #20
   19ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ee6:	3b06      	subs	r3, #6
   19ee8:	2b01      	cmp	r3, #1
   19eea:	d8c4      	bhi.n	19e76 <ProcessAesDrv+0x6e>
   19eec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   19eee:	2b01      	cmp	r3, #1
   19ef0:	f200 80d2 	bhi.w	1a098 <ProcessAesDrv+0x290>
   19ef4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   19ef6:	2b01      	cmp	r3, #1
   19ef8:	d834      	bhi.n	19f64 <ProcessAesDrv+0x15c>
   19efa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   19efc:	2b01      	cmp	r3, #1
   19efe:	f200 8122 	bhi.w	1a146 <ProcessAesDrv+0x33e>
   19f02:	4628      	mov	r0, r5
   19f04:	f7ff fef6 	bl	19cf4 <InitAes.part.0>
   19f08:	4604      	mov	r4, r0
   19f0a:	2800      	cmp	r0, #0
   19f0c:	d1b4      	bne.n	19e78 <ProcessAesDrv+0x70>
   19f0e:	4628      	mov	r0, r5
   19f10:	f7ff fe9e 	bl	19c50 <LoadAesKey>
   19f14:	4604      	mov	r4, r0
   19f16:	2800      	cmp	r0, #0
   19f18:	d1ae      	bne.n	19e78 <ProcessAesDrv+0x70>
   19f1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   19f1c:	2b07      	cmp	r3, #7
   19f1e:	d8aa      	bhi.n	19e76 <ProcessAesDrv+0x6e>
   19f20:	a201      	add	r2, pc, #4	; (adr r2, 19f28 <ProcessAesDrv+0x120>)
   19f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19f26:	bf00      	nop
   19f28:	00019f85 	.word	0x00019f85
   19f2c:	00019f69 	.word	0x00019f69
   19f30:	0001a10d 	.word	0x0001a10d
   19f34:	00019f69 	.word	0x00019f69
   19f38:	00019e77 	.word	0x00019e77
   19f3c:	00019e77 	.word	0x00019e77
   19f40:	0001a10d 	.word	0x0001a10d
   19f44:	00019f69 	.word	0x00019f69
   19f48:	2a01      	cmp	r2, #1
   19f4a:	bf0c      	ite	eq
   19f4c:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   19f50:	f040 0010 	orrne.w	r0, r0, #16
   19f54:	f7fe fd92 	bl	18a7c <CC_HalMaskInterrupt>
   19f58:	e7a7      	b.n	19eaa <ProcessAesDrv+0xa2>
   19f5a:	4c64      	ldr	r4, [pc, #400]	; (1a0ec <ProcessAesDrv+0x2e4>)
   19f5c:	4620      	mov	r0, r4
   19f5e:	b005      	add	sp, #20
   19f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f64:	4c62      	ldr	r4, [pc, #392]	; (1a0f0 <ProcessAesDrv+0x2e8>)
   19f66:	e787      	b.n	19e78 <ProcessAesDrv+0x70>
   19f68:	4b5d      	ldr	r3, [pc, #372]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   19f6a:	682a      	ldr	r2, [r5, #0]
   19f6c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   19f70:	686a      	ldr	r2, [r5, #4]
   19f72:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   19f76:	68aa      	ldr	r2, [r5, #8]
   19f78:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   19f7c:	68ea      	ldr	r2, [r5, #12]
   19f7e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   19f82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   19f84:	6832      	ldr	r2, [r6, #0]
   19f86:	f023 0304 	bic.w	r3, r3, #4
   19f8a:	2b03      	cmp	r3, #3
   19f8c:	d00d      	beq.n	19faa <ProcessAesDrv+0x1a2>
   19f8e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   19f90:	f8d8 1000 	ldr.w	r1, [r8]
   19f94:	2b01      	cmp	r3, #1
   19f96:	4b52      	ldr	r3, [pc, #328]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   19f98:	bf0b      	itete	eq
   19f9a:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   19f9e:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   19fa2:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   19fa6:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   19faa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   19fac:	2b01      	cmp	r3, #1
   19fae:	4b4c      	ldr	r3, [pc, #304]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   19fb0:	bf0b      	itete	eq
   19fb2:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   19fb6:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   19fba:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   19fbe:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   19fc2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   19fc4:	f023 0304 	bic.w	r3, r3, #4
   19fc8:	2b03      	cmp	r3, #3
   19fca:	d06a      	beq.n	1a0a2 <ProcessAesDrv+0x29a>
   19fcc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   19fce:	2b01      	cmp	r3, #1
   19fd0:	bf0c      	ite	eq
   19fd2:	2080      	moveq	r0, #128	; 0x80
   19fd4:	2020      	movne	r0, #32
   19fd6:	f7fe fd57 	bl	18a88 <CC_HalWaitInterrupt>
   19fda:	4604      	mov	r4, r0
   19fdc:	2800      	cmp	r0, #0
   19fde:	f47f af4b 	bne.w	19e78 <ProcessAesDrv+0x70>
   19fe2:	4b3f      	ldr	r3, [pc, #252]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   19fe4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   19fe8:	2c00      	cmp	r4, #0
   19fea:	d1fb      	bne.n	19fe4 <ProcessAesDrv+0x1dc>
   19fec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   19fee:	3b01      	subs	r3, #1
   19ff0:	2b06      	cmp	r3, #6
   19ff2:	d812      	bhi.n	1a01a <ProcessAesDrv+0x212>
   19ff4:	e8df f003 	tbb	[pc, r3]
   19ff8:	11049904 	.word	0x11049904
   19ffc:	9911      	.short	0x9911
   19ffe:	04          	.byte	0x04
   19fff:	00          	.byte	0x00
   1a000:	4b37      	ldr	r3, [pc, #220]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   1a002:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1a006:	602a      	str	r2, [r5, #0]
   1a008:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1a00c:	606a      	str	r2, [r5, #4]
   1a00e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1a012:	60aa      	str	r2, [r5, #8]
   1a014:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1a018:	60eb      	str	r3, [r5, #12]
   1a01a:	2301      	movs	r3, #1
   1a01c:	65ab      	str	r3, [r5, #88]	; 0x58
   1a01e:	e72b      	b.n	19e78 <ProcessAesDrv+0x70>
   1a020:	4834      	ldr	r0, [pc, #208]	; (1a0f4 <ProcessAesDrv+0x2ec>)
   1a022:	f7fd fe67 	bl	17cf4 <CC_PalAbort>
   1a026:	2000      	movs	r0, #0
   1a028:	f7fe fdf4 	bl	18c14 <CC_PalPowerSaveModeSelect>
   1a02c:	2800      	cmp	r0, #0
   1a02e:	f43f af15 	beq.w	19e5c <ProcessAesDrv+0x54>
   1a032:	4831      	ldr	r0, [pc, #196]	; (1a0f8 <ProcessAesDrv+0x2f0>)
   1a034:	f7fd fe5e 	bl	17cf4 <CC_PalAbort>
   1a038:	e710      	b.n	19e5c <ProcessAesDrv+0x54>
   1a03a:	4830      	ldr	r0, [pc, #192]	; (1a0fc <ProcessAesDrv+0x2f4>)
   1a03c:	f7fd fe5a 	bl	17cf4 <CC_PalAbort>
   1a040:	4620      	mov	r0, r4
   1a042:	b005      	add	sp, #20
   1a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a048:	482d      	ldr	r0, [pc, #180]	; (1a100 <ProcessAesDrv+0x2f8>)
   1a04a:	f7fd fe53 	bl	17cf4 <CC_PalAbort>
   1a04e:	e736      	b.n	19ebe <ProcessAesDrv+0xb6>
   1a050:	2304      	movs	r3, #4
   1a052:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1a056:	2120      	movs	r1, #32
   1a058:	f105 0010 	add.w	r0, r5, #16
   1a05c:	f7fe fd92 	bl	18b84 <CC_PalMemSetZeroPlat>
   1a060:	e712      	b.n	19e88 <ProcessAesDrv+0x80>
   1a062:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a064:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1a066:	f000 f9b5 	bl	1a3d4 <kmu_validate_slot_and_size>
   1a06a:	b998      	cbnz	r0, 1a094 <ProcessAesDrv+0x28c>
   1a06c:	4f25      	ldr	r7, [pc, #148]	; (1a104 <ProcessAesDrv+0x2fc>)
   1a06e:	4c1c      	ldr	r4, [pc, #112]	; (1a0e0 <ProcessAesDrv+0x2d8>)
   1a070:	683b      	ldr	r3, [r7, #0]
   1a072:	681b      	ldr	r3, [r3, #0]
   1a074:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1a078:	683b      	ldr	r3, [r7, #0]
   1a07a:	685b      	ldr	r3, [r3, #4]
   1a07c:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1a080:	683b      	ldr	r3, [r7, #0]
   1a082:	689b      	ldr	r3, [r3, #8]
   1a084:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1a088:	683b      	ldr	r3, [r7, #0]
   1a08a:	68db      	ldr	r3, [r3, #12]
   1a08c:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1a090:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a092:	b161      	cbz	r1, 1a0ae <ProcessAesDrv+0x2a6>
   1a094:	2701      	movs	r7, #1
   1a096:	e6d3      	b.n	19e40 <ProcessAesDrv+0x38>
   1a098:	4c1b      	ldr	r4, [pc, #108]	; (1a108 <ProcessAesDrv+0x300>)
   1a09a:	e6ed      	b.n	19e78 <ProcessAesDrv+0x70>
   1a09c:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   1a0a0:	e713      	b.n	19eca <ProcessAesDrv+0xc2>
   1a0a2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1a0a4:	2b01      	cmp	r3, #1
   1a0a6:	bf0c      	ite	eq
   1a0a8:	2040      	moveq	r0, #64	; 0x40
   1a0aa:	2010      	movne	r0, #16
   1a0ac:	e793      	b.n	19fd6 <ProcessAesDrv+0x1ce>
   1a0ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1a0b0:	9301      	str	r3, [sp, #4]
   1a0b2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1a0b4:	9300      	str	r3, [sp, #0]
   1a0b6:	f105 0a10 	add.w	sl, r5, #16
   1a0ba:	f04f 0b10 	mov.w	fp, #16
   1a0be:	f8cd a008 	str.w	sl, [sp, #8]
   1a0c2:	f8cd b00c 	str.w	fp, [sp, #12]
   1a0c6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   1a0ca:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1a0cc:	f000 f9a4 	bl	1a418 <kmu_derive_cmac>
   1a0d0:	2800      	cmp	r0, #0
   1a0d2:	d13a      	bne.n	1a14a <ProcessAesDrv+0x342>
   1a0d4:	2300      	movs	r3, #0
   1a0d6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1a0da:	e7db      	b.n	1a094 <ProcessAesDrv+0x28c>
   1a0dc:	20000954 	.word	0x20000954
   1a0e0:	5002b000 	.word	0x5002b000
   1a0e4:	00f10001 	.word	0x00f10001
   1a0e8:	00f10005 	.word	0x00f10005
   1a0ec:	00f1000b 	.word	0x00f1000b
   1a0f0:	00f10003 	.word	0x00f10003
   1a0f4:	0001ef80 	.word	0x0001ef80
   1a0f8:	0001ef98 	.word	0x0001ef98
   1a0fc:	0001efd8 	.word	0x0001efd8
   1a100:	0001efb8 	.word	0x0001efb8
   1a104:	20000944 	.word	0x20000944
   1a108:	00f10002 	.word	0x00f10002
   1a10c:	4b19      	ldr	r3, [pc, #100]	; (1a174 <ProcessAesDrv+0x36c>)
   1a10e:	682a      	ldr	r2, [r5, #0]
   1a110:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1a114:	686a      	ldr	r2, [r5, #4]
   1a116:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1a11a:	68aa      	ldr	r2, [r5, #8]
   1a11c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1a120:	68ea      	ldr	r2, [r5, #12]
   1a122:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1a126:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1a128:	e72c      	b.n	19f84 <ProcessAesDrv+0x17c>
   1a12a:	4b12      	ldr	r3, [pc, #72]	; (1a174 <ProcessAesDrv+0x36c>)
   1a12c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1a130:	602a      	str	r2, [r5, #0]
   1a132:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1a136:	606a      	str	r2, [r5, #4]
   1a138:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1a13c:	60aa      	str	r2, [r5, #8]
   1a13e:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1a142:	60eb      	str	r3, [r5, #12]
   1a144:	e769      	b.n	1a01a <ProcessAesDrv+0x212>
   1a146:	4c0c      	ldr	r4, [pc, #48]	; (1a178 <ProcessAesDrv+0x370>)
   1a148:	e696      	b.n	19e78 <ProcessAesDrv+0x70>
   1a14a:	683b      	ldr	r3, [r7, #0]
   1a14c:	681b      	ldr	r3, [r3, #0]
   1a14e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1a152:	683b      	ldr	r3, [r7, #0]
   1a154:	685b      	ldr	r3, [r3, #4]
   1a156:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1a15a:	683b      	ldr	r3, [r7, #0]
   1a15c:	689b      	ldr	r3, [r3, #8]
   1a15e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1a162:	683b      	ldr	r3, [r7, #0]
   1a164:	68db      	ldr	r3, [r3, #12]
   1a166:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1a16a:	4659      	mov	r1, fp
   1a16c:	4650      	mov	r0, sl
   1a16e:	f7fe fd09 	bl	18b84 <CC_PalMemSetZeroPlat>
   1a172:	e7af      	b.n	1a0d4 <ProcessAesDrv+0x2cc>
   1a174:	5002b000 	.word	0x5002b000
   1a178:	00f10004 	.word	0x00f10004

0001a17c <FinishAesDrv>:
   1a17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a180:	b301      	cbz	r1, 1a1c4 <FinishAesDrv+0x48>
   1a182:	b1fa      	cbz	r2, 1a1c4 <FinishAesDrv+0x48>
   1a184:	4604      	mov	r4, r0
   1a186:	2800      	cmp	r0, #0
   1a188:	d07c      	beq.n	1a284 <FinishAesDrv+0x108>
   1a18a:	461d      	mov	r5, r3
   1a18c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a18e:	2b07      	cmp	r3, #7
   1a190:	460e      	mov	r6, r1
   1a192:	d01b      	beq.n	1a1cc <FinishAesDrv+0x50>
   1a194:	b95d      	cbnz	r5, 1a1ae <FinishAesDrv+0x32>
   1a196:	2b03      	cmp	r3, #3
   1a198:	d110      	bne.n	1a1bc <FinishAesDrv+0x40>
   1a19a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1a19c:	b973      	cbnz	r3, 1a1bc <FinishAesDrv+0x40>
   1a19e:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1a1a2:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1a1a6:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1a1aa:	600b      	str	r3, [r1, #0]
   1a1ac:	2510      	movs	r5, #16
   1a1ae:	462b      	mov	r3, r5
   1a1b0:	4631      	mov	r1, r6
   1a1b2:	4620      	mov	r0, r4
   1a1b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a1b8:	f7ff be26 	b.w	19e08 <ProcessAesDrv>
   1a1bc:	462f      	mov	r7, r5
   1a1be:	4638      	mov	r0, r7
   1a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a1c4:	4f77      	ldr	r7, [pc, #476]	; (1a3a4 <FinishAesDrv+0x228>)
   1a1c6:	4638      	mov	r0, r7
   1a1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a1cc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1a1ce:	2b00      	cmp	r3, #0
   1a1d0:	d15b      	bne.n	1a28a <FinishAesDrv+0x10e>
   1a1d2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1a1d6:	d25d      	bcs.n	1a294 <FinishAesDrv+0x118>
   1a1d8:	b915      	cbnz	r5, 1a1e0 <FinishAesDrv+0x64>
   1a1da:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1a1dc:	2b00      	cmp	r3, #0
   1a1de:	d159      	bne.n	1a294 <FinishAesDrv+0x118>
   1a1e0:	4871      	ldr	r0, [pc, #452]	; (1a3a8 <FinishAesDrv+0x22c>)
   1a1e2:	f04f 31ff 	mov.w	r1, #4294967295
   1a1e6:	f7fe fce5 	bl	18bb4 <CC_PalMutexLock>
   1a1ea:	2800      	cmp	r0, #0
   1a1ec:	f040 80b8 	bne.w	1a360 <FinishAesDrv+0x1e4>
   1a1f0:	2000      	movs	r0, #0
   1a1f2:	f7fe fd0f 	bl	18c14 <CC_PalPowerSaveModeSelect>
   1a1f6:	2800      	cmp	r0, #0
   1a1f8:	f040 80ae 	bne.w	1a358 <FinishAesDrv+0x1dc>
   1a1fc:	4a6b      	ldr	r2, [pc, #428]	; (1a3ac <FinishAesDrv+0x230>)
   1a1fe:	2301      	movs	r3, #1
   1a200:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1a204:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1a208:	2b00      	cmp	r3, #0
   1a20a:	d1fb      	bne.n	1a204 <FinishAesDrv+0x88>
   1a20c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a20e:	2b03      	cmp	r3, #3
   1a210:	dd20      	ble.n	1a254 <FinishAesDrv+0xd8>
   1a212:	3b06      	subs	r3, #6
   1a214:	2b01      	cmp	r3, #1
   1a216:	d81f      	bhi.n	1a258 <FinishAesDrv+0xdc>
   1a218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a21a:	2b01      	cmp	r3, #1
   1a21c:	d83c      	bhi.n	1a298 <FinishAesDrv+0x11c>
   1a21e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a220:	2b01      	cmp	r3, #1
   1a222:	f200 80a5 	bhi.w	1a370 <FinishAesDrv+0x1f4>
   1a226:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1a228:	2b01      	cmp	r3, #1
   1a22a:	f200 80a3 	bhi.w	1a374 <FinishAesDrv+0x1f8>
   1a22e:	4620      	mov	r0, r4
   1a230:	f7ff fd60 	bl	19cf4 <InitAes.part.0>
   1a234:	4607      	mov	r7, r0
   1a236:	b980      	cbnz	r0, 1a25a <FinishAesDrv+0xde>
   1a238:	4620      	mov	r0, r4
   1a23a:	f7ff fd09 	bl	19c50 <LoadAesKey>
   1a23e:	4607      	mov	r7, r0
   1a240:	b958      	cbnz	r0, 1a25a <FinishAesDrv+0xde>
   1a242:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a244:	2b07      	cmp	r3, #7
   1a246:	d807      	bhi.n	1a258 <FinishAesDrv+0xdc>
   1a248:	e8df f003 	tbb	[pc, r3]
   1a24c:	285c2835 	.word	0x285c2835
   1a250:	285c0606 	.word	0x285c0606
   1a254:	2b00      	cmp	r3, #0
   1a256:	dadf      	bge.n	1a218 <FinishAesDrv+0x9c>
   1a258:	4f55      	ldr	r7, [pc, #340]	; (1a3b0 <FinishAesDrv+0x234>)
   1a25a:	4a54      	ldr	r2, [pc, #336]	; (1a3ac <FinishAesDrv+0x230>)
   1a25c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1a260:	2b00      	cmp	r3, #0
   1a262:	d1fb      	bne.n	1a25c <FinishAesDrv+0xe0>
   1a264:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1a268:	2001      	movs	r0, #1
   1a26a:	f7fe fcd3 	bl	18c14 <CC_PalPowerSaveModeSelect>
   1a26e:	2800      	cmp	r0, #0
   1a270:	d17a      	bne.n	1a368 <FinishAesDrv+0x1ec>
   1a272:	484d      	ldr	r0, [pc, #308]	; (1a3a8 <FinishAesDrv+0x22c>)
   1a274:	f7fe fca6 	bl	18bc4 <CC_PalMutexUnlock>
   1a278:	2800      	cmp	r0, #0
   1a27a:	d0a0      	beq.n	1a1be <FinishAesDrv+0x42>
   1a27c:	484d      	ldr	r0, [pc, #308]	; (1a3b4 <FinishAesDrv+0x238>)
   1a27e:	f7fd fd39 	bl	17cf4 <CC_PalAbort>
   1a282:	e79c      	b.n	1a1be <FinishAesDrv+0x42>
   1a284:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1a288:	e799      	b.n	1a1be <FinishAesDrv+0x42>
   1a28a:	2b01      	cmp	r3, #1
   1a28c:	d1a4      	bne.n	1a1d8 <FinishAesDrv+0x5c>
   1a28e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1a292:	d3a1      	bcc.n	1a1d8 <FinishAesDrv+0x5c>
   1a294:	4f48      	ldr	r7, [pc, #288]	; (1a3b8 <FinishAesDrv+0x23c>)
   1a296:	e792      	b.n	1a1be <FinishAesDrv+0x42>
   1a298:	4f48      	ldr	r7, [pc, #288]	; (1a3bc <FinishAesDrv+0x240>)
   1a29a:	e7de      	b.n	1a25a <FinishAesDrv+0xde>
   1a29c:	4b43      	ldr	r3, [pc, #268]	; (1a3ac <FinishAesDrv+0x230>)
   1a29e:	6822      	ldr	r2, [r4, #0]
   1a2a0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1a2a4:	6862      	ldr	r2, [r4, #4]
   1a2a6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1a2aa:	68a2      	ldr	r2, [r4, #8]
   1a2ac:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1a2b0:	68e2      	ldr	r2, [r4, #12]
   1a2b2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1a2b6:	4b3d      	ldr	r3, [pc, #244]	; (1a3ac <FinishAesDrv+0x230>)
   1a2b8:	2201      	movs	r2, #1
   1a2ba:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   1a2be:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   1a2c2:	2d00      	cmp	r5, #0
   1a2c4:	d158      	bne.n	1a378 <FinishAesDrv+0x1fc>
   1a2c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1a2c8:	b909      	cbnz	r1, 1a2ce <FinishAesDrv+0x152>
   1a2ca:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   1a2ce:	4b37      	ldr	r3, [pc, #220]	; (1a3ac <FinishAesDrv+0x230>)
   1a2d0:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   1a2d4:	2f00      	cmp	r7, #0
   1a2d6:	d1fb      	bne.n	1a2d0 <FinishAesDrv+0x154>
   1a2d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a2da:	3b01      	subs	r3, #1
   1a2dc:	2b06      	cmp	r3, #6
   1a2de:	d8bc      	bhi.n	1a25a <FinishAesDrv+0xde>
   1a2e0:	a201      	add	r2, pc, #4	; (adr r2, 1a2e8 <FinishAesDrv+0x16c>)
   1a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a2e6:	bf00      	nop
   1a2e8:	0001a321 	.word	0x0001a321
   1a2ec:	0001a33d 	.word	0x0001a33d
   1a2f0:	0001a321 	.word	0x0001a321
   1a2f4:	0001a25b 	.word	0x0001a25b
   1a2f8:	0001a25b 	.word	0x0001a25b
   1a2fc:	0001a33d 	.word	0x0001a33d
   1a300:	0001a321 	.word	0x0001a321
   1a304:	4b29      	ldr	r3, [pc, #164]	; (1a3ac <FinishAesDrv+0x230>)
   1a306:	6822      	ldr	r2, [r4, #0]
   1a308:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1a30c:	6862      	ldr	r2, [r4, #4]
   1a30e:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1a312:	68a2      	ldr	r2, [r4, #8]
   1a314:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1a318:	68e2      	ldr	r2, [r4, #12]
   1a31a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1a31e:	e7ca      	b.n	1a2b6 <FinishAesDrv+0x13a>
   1a320:	4b22      	ldr	r3, [pc, #136]	; (1a3ac <FinishAesDrv+0x230>)
   1a322:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1a326:	6022      	str	r2, [r4, #0]
   1a328:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1a32c:	6062      	str	r2, [r4, #4]
   1a32e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1a332:	60a2      	str	r2, [r4, #8]
   1a334:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1a338:	60e3      	str	r3, [r4, #12]
   1a33a:	e78e      	b.n	1a25a <FinishAesDrv+0xde>
   1a33c:	4b1b      	ldr	r3, [pc, #108]	; (1a3ac <FinishAesDrv+0x230>)
   1a33e:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1a342:	6022      	str	r2, [r4, #0]
   1a344:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1a348:	6062      	str	r2, [r4, #4]
   1a34a:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1a34e:	60a2      	str	r2, [r4, #8]
   1a350:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1a354:	60e3      	str	r3, [r4, #12]
   1a356:	e780      	b.n	1a25a <FinishAesDrv+0xde>
   1a358:	4819      	ldr	r0, [pc, #100]	; (1a3c0 <FinishAesDrv+0x244>)
   1a35a:	f7fd fccb 	bl	17cf4 <CC_PalAbort>
   1a35e:	e74d      	b.n	1a1fc <FinishAesDrv+0x80>
   1a360:	4818      	ldr	r0, [pc, #96]	; (1a3c4 <FinishAesDrv+0x248>)
   1a362:	f7fd fcc7 	bl	17cf4 <CC_PalAbort>
   1a366:	e743      	b.n	1a1f0 <FinishAesDrv+0x74>
   1a368:	4817      	ldr	r0, [pc, #92]	; (1a3c8 <FinishAesDrv+0x24c>)
   1a36a:	f7fd fcc3 	bl	17cf4 <CC_PalAbort>
   1a36e:	e780      	b.n	1a272 <FinishAesDrv+0xf6>
   1a370:	4f16      	ldr	r7, [pc, #88]	; (1a3cc <FinishAesDrv+0x250>)
   1a372:	e772      	b.n	1a25a <FinishAesDrv+0xde>
   1a374:	4f16      	ldr	r7, [pc, #88]	; (1a3d0 <FinishAesDrv+0x254>)
   1a376:	e770      	b.n	1a25a <FinishAesDrv+0xde>
   1a378:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   1a37a:	6832      	ldr	r2, [r6, #0]
   1a37c:	2901      	cmp	r1, #1
   1a37e:	d00a      	beq.n	1a396 <FinishAesDrv+0x21a>
   1a380:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   1a384:	2010      	movs	r0, #16
   1a386:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1a38a:	f7fe fb7d 	bl	18a88 <CC_HalWaitInterrupt>
   1a38e:	4607      	mov	r7, r0
   1a390:	2800      	cmp	r0, #0
   1a392:	d09c      	beq.n	1a2ce <FinishAesDrv+0x152>
   1a394:	e761      	b.n	1a25a <FinishAesDrv+0xde>
   1a396:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1a39a:	2040      	movs	r0, #64	; 0x40
   1a39c:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   1a3a0:	e7f3      	b.n	1a38a <FinishAesDrv+0x20e>
   1a3a2:	bf00      	nop
   1a3a4:	00f1000b 	.word	0x00f1000b
   1a3a8:	20000954 	.word	0x20000954
   1a3ac:	5002b000 	.word	0x5002b000
   1a3b0:	00f10001 	.word	0x00f10001
   1a3b4:	0001efd8 	.word	0x0001efd8
   1a3b8:	00f10005 	.word	0x00f10005
   1a3bc:	00f10002 	.word	0x00f10002
   1a3c0:	0001ef98 	.word	0x0001ef98
   1a3c4:	0001ef80 	.word	0x0001ef80
   1a3c8:	0001efb8 	.word	0x0001efb8
   1a3cc:	00f10003 	.word	0x00f10003
   1a3d0:	00f10004 	.word	0x00f10004

0001a3d4 <kmu_validate_slot_and_size>:
   1a3d4:	b921      	cbnz	r1, 1a3e0 <kmu_validate_slot_and_size+0xc>
   1a3d6:	4b03      	ldr	r3, [pc, #12]	; (1a3e4 <kmu_validate_slot_and_size+0x10>)
   1a3d8:	2800      	cmp	r0, #0
   1a3da:	bf18      	it	ne
   1a3dc:	4618      	movne	r0, r3
   1a3de:	4770      	bx	lr
   1a3e0:	4801      	ldr	r0, [pc, #4]	; (1a3e8 <kmu_validate_slot_and_size+0x14>)
   1a3e2:	4770      	bx	lr
   1a3e4:	00f70001 	.word	0x00f70001
   1a3e8:	00f70003 	.word	0x00f70003

0001a3ec <kmu_validate_kdr_slot_and_size>:
   1a3ec:	b921      	cbnz	r1, 1a3f8 <kmu_validate_kdr_slot_and_size+0xc>
   1a3ee:	4b03      	ldr	r3, [pc, #12]	; (1a3fc <kmu_validate_kdr_slot_and_size+0x10>)
   1a3f0:	2800      	cmp	r0, #0
   1a3f2:	bf18      	it	ne
   1a3f4:	4618      	movne	r0, r3
   1a3f6:	4770      	bx	lr
   1a3f8:	4801      	ldr	r0, [pc, #4]	; (1a400 <kmu_validate_kdr_slot_and_size+0x14>)
   1a3fa:	4770      	bx	lr
   1a3fc:	00f70001 	.word	0x00f70001
   1a400:	00f70003 	.word	0x00f70003

0001a404 <kmu_use_kdr_key>:
   1a404:	4b03      	ldr	r3, [pc, #12]	; (1a414 <kmu_use_kdr_key+0x10>)
   1a406:	2000      	movs	r0, #0
   1a408:	2201      	movs	r2, #1
   1a40a:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   1a40e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   1a412:	4770      	bx	lr
   1a414:	5002b000 	.word	0x5002b000

0001a418 <kmu_derive_cmac>:
   1a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a41c:	b0cc      	sub	sp, #304	; 0x130
   1a41e:	2400      	movs	r4, #0
   1a420:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   1a422:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1a426:	4682      	mov	sl, r0
   1a428:	4689      	mov	r9, r1
   1a42a:	4616      	mov	r6, r2
   1a42c:	4621      	mov	r1, r4
   1a42e:	2274      	movs	r2, #116	; 0x74
   1a430:	a80e      	add	r0, sp, #56	; 0x38
   1a432:	461f      	mov	r7, r3
   1a434:	f000 ff44 	bl	1b2c0 <memset>
   1a438:	2280      	movs	r2, #128	; 0x80
   1a43a:	4621      	mov	r1, r4
   1a43c:	a82c      	add	r0, sp, #176	; 0xb0
   1a43e:	942b      	str	r4, [sp, #172]	; 0xac
   1a440:	f000 ff3e 	bl	1b2c0 <memset>
   1a444:	2384      	movs	r3, #132	; 0x84
   1a446:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1a44a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1a44e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1a452:	9305      	str	r3, [sp, #20]
   1a454:	d863      	bhi.n	1a51e <kmu_derive_cmac+0x106>
   1a456:	f7ff fcbf 	bl	19dd8 <write_invalid_key>
   1a45a:	ab05      	add	r3, sp, #20
   1a45c:	4630      	mov	r0, r6
   1a45e:	ae2b      	add	r6, sp, #172	; 0xac
   1a460:	9301      	str	r3, [sp, #4]
   1a462:	9502      	str	r5, [sp, #8]
   1a464:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1a468:	4639      	mov	r1, r7
   1a46a:	9600      	str	r6, [sp, #0]
   1a46c:	f000 f862 	bl	1a534 <UtilCmacBuildDataForDerivation>
   1a470:	2800      	cmp	r0, #0
   1a472:	d14f      	bne.n	1a514 <kmu_derive_cmac+0xfc>
   1a474:	2303      	movs	r3, #3
   1a476:	f88d 3013 	strb.w	r3, [sp, #19]
   1a47a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1a47e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1a482:	2307      	movs	r3, #7
   1a484:	2200      	movs	r2, #0
   1a486:	901c      	str	r0, [sp, #112]	; 0x70
   1a488:	2110      	movs	r1, #16
   1a48a:	a80e      	add	r0, sp, #56	; 0x38
   1a48c:	931b      	str	r3, [sp, #108]	; 0x6c
   1a48e:	2401      	movs	r4, #1
   1a490:	2301      	movs	r3, #1
   1a492:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1a496:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   1a49a:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   1a49e:	9426      	str	r4, [sp, #152]	; 0x98
   1a4a0:	f10d 0920 	add.w	r9, sp, #32
   1a4a4:	f7fe fb6e 	bl	18b84 <CC_PalMemSetZeroPlat>
   1a4a8:	2210      	movs	r2, #16
   1a4aa:	9200      	str	r2, [sp, #0]
   1a4ac:	9905      	ldr	r1, [sp, #20]
   1a4ae:	f8cd 9004 	str.w	r9, [sp, #4]
   1a4b2:	ab0a      	add	r3, sp, #40	; 0x28
   1a4b4:	4630      	mov	r0, r6
   1a4b6:	aa06      	add	r2, sp, #24
   1a4b8:	f7ff fa1e 	bl	198f8 <SetDataBuffersInfo>
   1a4bc:	4607      	mov	r7, r0
   1a4be:	b170      	cbz	r0, 1a4de <kmu_derive_cmac+0xc6>
   1a4c0:	e01d      	b.n	1a4fe <kmu_derive_cmac+0xe6>
   1a4c2:	a90e      	add	r1, sp, #56	; 0x38
   1a4c4:	eb08 0007 	add.w	r0, r8, r7
   1a4c8:	f7fe fb58 	bl	18b7c <CC_PalMemCopyPlat>
   1a4cc:	2110      	movs	r1, #16
   1a4ce:	a80e      	add	r0, sp, #56	; 0x38
   1a4d0:	f7fe fb58 	bl	18b84 <CC_PalMemSetZeroPlat>
   1a4d4:	3401      	adds	r4, #1
   1a4d6:	1bad      	subs	r5, r5, r6
   1a4d8:	4437      	add	r7, r6
   1a4da:	b2e4      	uxtb	r4, r4
   1a4dc:	d024      	beq.n	1a528 <kmu_derive_cmac+0x110>
   1a4de:	2d10      	cmp	r5, #16
   1a4e0:	464a      	mov	r2, r9
   1a4e2:	9b05      	ldr	r3, [sp, #20]
   1a4e4:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1a4e8:	a906      	add	r1, sp, #24
   1a4ea:	a80e      	add	r0, sp, #56	; 0x38
   1a4ec:	462e      	mov	r6, r5
   1a4ee:	bf28      	it	cs
   1a4f0:	2610      	movcs	r6, #16
   1a4f2:	f7ff fe43 	bl	1a17c <FinishAesDrv>
   1a4f6:	4632      	mov	r2, r6
   1a4f8:	2800      	cmp	r0, #0
   1a4fa:	d0e2      	beq.n	1a4c2 <kmu_derive_cmac+0xaa>
   1a4fc:	4607      	mov	r7, r0
   1a4fe:	a80e      	add	r0, sp, #56	; 0x38
   1a500:	2274      	movs	r2, #116	; 0x74
   1a502:	2100      	movs	r1, #0
   1a504:	f7fe fb3c 	bl	18b80 <CC_PalMemSetPlat>
   1a508:	f7ff fc66 	bl	19dd8 <write_invalid_key>
   1a50c:	4638      	mov	r0, r7
   1a50e:	b04c      	add	sp, #304	; 0x130
   1a510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a514:	4f05      	ldr	r7, [pc, #20]	; (1a52c <kmu_derive_cmac+0x114>)
   1a516:	4638      	mov	r0, r7
   1a518:	b04c      	add	sp, #304	; 0x130
   1a51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a51e:	4f04      	ldr	r7, [pc, #16]	; (1a530 <kmu_derive_cmac+0x118>)
   1a520:	4638      	mov	r0, r7
   1a522:	b04c      	add	sp, #304	; 0x130
   1a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a528:	462f      	mov	r7, r5
   1a52a:	e7e8      	b.n	1a4fe <kmu_derive_cmac+0xe6>
   1a52c:	00f1000e 	.word	0x00f1000e
   1a530:	00f1000f 	.word	0x00f1000f

0001a534 <UtilCmacBuildDataForDerivation>:
   1a534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a538:	b082      	sub	sp, #8
   1a53a:	461e      	mov	r6, r3
   1a53c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a53e:	2300      	movs	r3, #0
   1a540:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   1a544:	9301      	str	r3, [sp, #4]
   1a546:	d83e      	bhi.n	1a5c6 <UtilCmacBuildDataForDerivation+0x92>
   1a548:	00e4      	lsls	r4, r4, #3
   1a54a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1a54e:	4617      	mov	r7, r2
   1a550:	f101 32ff 	add.w	r2, r1, #4294967295
   1a554:	bf34      	ite	cc
   1a556:	2303      	movcc	r3, #3
   1a558:	2304      	movcs	r3, #4
   1a55a:	2a3f      	cmp	r2, #63	; 0x3f
   1a55c:	460d      	mov	r5, r1
   1a55e:	9300      	str	r3, [sp, #0]
   1a560:	d831      	bhi.n	1a5c6 <UtilCmacBuildDataForDerivation+0x92>
   1a562:	b380      	cbz	r0, 1a5c6 <UtilCmacBuildDataForDerivation+0x92>
   1a564:	b116      	cbz	r6, 1a56c <UtilCmacBuildDataForDerivation+0x38>
   1a566:	b377      	cbz	r7, 1a5c6 <UtilCmacBuildDataForDerivation+0x92>
   1a568:	2e40      	cmp	r6, #64	; 0x40
   1a56a:	d82c      	bhi.n	1a5c6 <UtilCmacBuildDataForDerivation+0x92>
   1a56c:	9a08      	ldr	r2, [sp, #32]
   1a56e:	b352      	cbz	r2, 1a5c6 <UtilCmacBuildDataForDerivation+0x92>
   1a570:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a572:	6811      	ldr	r1, [r2, #0]
   1a574:	b339      	cbz	r1, 1a5c6 <UtilCmacBuildDataForDerivation+0x92>
   1a576:	19aa      	adds	r2, r5, r6
   1a578:	4413      	add	r3, r2
   1a57a:	4299      	cmp	r1, r3
   1a57c:	d323      	bcc.n	1a5c6 <UtilCmacBuildDataForDerivation+0x92>
   1a57e:	9b08      	ldr	r3, [sp, #32]
   1a580:	4601      	mov	r1, r0
   1a582:	462a      	mov	r2, r5
   1a584:	1c58      	adds	r0, r3, #1
   1a586:	f7fe faf9 	bl	18b7c <CC_PalMemCopyPlat>
   1a58a:	9b08      	ldr	r3, [sp, #32]
   1a58c:	f105 0802 	add.w	r8, r5, #2
   1a590:	441d      	add	r5, r3
   1a592:	2300      	movs	r3, #0
   1a594:	706b      	strb	r3, [r5, #1]
   1a596:	bb0e      	cbnz	r6, 1a5dc <UtilCmacBuildDataForDerivation+0xa8>
   1a598:	9b08      	ldr	r3, [sp, #32]
   1a59a:	9400      	str	r4, [sp, #0]
   1a59c:	2cff      	cmp	r4, #255	; 0xff
   1a59e:	eb03 0008 	add.w	r0, r3, r8
   1a5a2:	d914      	bls.n	1a5ce <UtilCmacBuildDataForDerivation+0x9a>
   1a5a4:	0223      	lsls	r3, r4, #8
   1a5a6:	b29b      	uxth	r3, r3
   1a5a8:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   1a5ac:	2202      	movs	r2, #2
   1a5ae:	a901      	add	r1, sp, #4
   1a5b0:	9401      	str	r4, [sp, #4]
   1a5b2:	f7fe fae3 	bl	18b7c <CC_PalMemCopyPlat>
   1a5b6:	f108 0302 	add.w	r3, r8, #2
   1a5ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a5bc:	2000      	movs	r0, #0
   1a5be:	6013      	str	r3, [r2, #0]
   1a5c0:	b002      	add	sp, #8
   1a5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a5c6:	480a      	ldr	r0, [pc, #40]	; (1a5f0 <UtilCmacBuildDataForDerivation+0xbc>)
   1a5c8:	b002      	add	sp, #8
   1a5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a5ce:	2201      	movs	r2, #1
   1a5d0:	4669      	mov	r1, sp
   1a5d2:	f7fe fad3 	bl	18b7c <CC_PalMemCopyPlat>
   1a5d6:	f108 0301 	add.w	r3, r8, #1
   1a5da:	e7ee      	b.n	1a5ba <UtilCmacBuildDataForDerivation+0x86>
   1a5dc:	9b08      	ldr	r3, [sp, #32]
   1a5de:	4632      	mov	r2, r6
   1a5e0:	eb03 0008 	add.w	r0, r3, r8
   1a5e4:	4639      	mov	r1, r7
   1a5e6:	f7fe fac9 	bl	18b7c <CC_PalMemCopyPlat>
   1a5ea:	44b0      	add	r8, r6
   1a5ec:	e7d4      	b.n	1a598 <UtilCmacBuildDataForDerivation+0x64>
   1a5ee:	bf00      	nop
   1a5f0:	80000006 	.word	0x80000006

0001a5f4 <CC_PalDataBufferAttrGet>:
   1a5f4:	2000      	movs	r0, #0
   1a5f6:	7018      	strb	r0, [r3, #0]
   1a5f8:	4770      	bx	lr
   1a5fa:	bf00      	nop

0001a5fc <k_msleep>:
{
   1a5fc:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a5fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1a602:	17c1      	asrs	r1, r0, #31
   1a604:	03c9      	lsls	r1, r1, #15
   1a606:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1a60a:	03c0      	lsls	r0, r0, #15
   1a60c:	f240 33e7 	movw	r3, #999	; 0x3e7
   1a610:	18c0      	adds	r0, r0, r3
   1a612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a616:	f04f 0300 	mov.w	r3, #0
   1a61a:	f141 0100 	adc.w	r1, r1, #0
   1a61e:	f7e5 fd6f 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1a622:	f7fc fe39 	bl	17298 <z_impl_k_sleep>
}
   1a626:	bd08      	pop	{r3, pc}

0001a628 <GPIO_ControlStandby>:
  if (iValue==1)
   1a628:	2801      	cmp	r0, #1
   1a62a:	d006      	beq.n	1a63a <GPIO_ControlStandby+0x12>
    p_reg->OUTCLR = clr_mask;
   1a62c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a630:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a634:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1a638:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   1a63a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a63e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a642:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1a646:	4770      	bx	lr

0001a648 <GPIO_ControlMute>:
  if (iValue)
   1a648:	b130      	cbz	r0, 1a658 <GPIO_ControlMute+0x10>
    p_reg->OUTSET = set_mask;
   1a64a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a64e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1a652:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1a656:	4770      	bx	lr
    p_reg->OUTCLR = clr_mask;
   1a658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a65c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1a660:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1a664:	4770      	bx	lr

0001a666 <GPIO_S1V3G340_Reset>:
  if (iValue)
   1a666:	b130      	cbz	r0, 1a676 <GPIO_S1V3G340_Reset+0x10>
    p_reg->OUTSET = set_mask;
   1a668:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a66c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1a670:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1a674:	4770      	bx	lr
    p_reg->OUTCLR = clr_mask;
   1a676:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a67a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1a67e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1a682:	4770      	bx	lr

0001a684 <spi_write_test_msg>:
{
   1a684:	b510      	push	{r4, lr}
   1a686:	4604      	mov	r4, r0
	S1V3G340_Initialize_Audio_Config();
   1a688:	f7f5 f960 	bl	f94c <S1V3G340_Initialize_Audio_Config>
	S1V3G340_Play_Specific_Audio(siac_data);
   1a68c:	4620      	mov	r0, r4
   1a68e:	f7f5 f9e5 	bl	fa5c <S1V3G340_Play_Specific_Audio>
}
   1a692:	2000      	movs	r0, #0
   1a694:	bd10      	pop	{r4, pc}

0001a696 <data_cb>:
{
   1a696:	b570      	push	{r4, r5, r6, lr}
   1a698:	4604      	mov	r4, r0
   1a69a:	460d      	mov	r5, r1
	switch (data->type) {
   1a69c:	7803      	ldrb	r3, [r0, #0]
   1a69e:	2b24      	cmp	r3, #36	; 0x24
   1a6a0:	d01d      	beq.n	1a6de <data_cb+0x48>
   1a6a2:	d80f      	bhi.n	1a6c4 <data_cb+0x2e>
   1a6a4:	3b08      	subs	r3, #8
   1a6a6:	b2db      	uxtb	r3, r3
   1a6a8:	2b01      	cmp	r3, #1
   1a6aa:	d826      	bhi.n	1a6fa <data_cb+0x64>
		len = MIN(data->data_len, NAME_LEN - 1);
   1a6ac:	7846      	ldrb	r6, [r0, #1]
   1a6ae:	2e1d      	cmp	r6, #29
   1a6b0:	bf28      	it	cs
   1a6b2:	261d      	movcs	r6, #29
		(void)memcpy(name, data->data, len);
   1a6b4:	4632      	mov	r2, r6
   1a6b6:	6841      	ldr	r1, [r0, #4]
   1a6b8:	4628      	mov	r0, r5
   1a6ba:	f000 fdd2 	bl	1b262 <memcpy>
		name[len] = '\0';
   1a6be:	2000      	movs	r0, #0
   1a6c0:	55a8      	strb	r0, [r5, r6]
		return false;
   1a6c2:	e017      	b.n	1a6f4 <data_cb+0x5e>
	switch (data->type) {
   1a6c4:	2bff      	cmp	r3, #255	; 0xff
   1a6c6:	d116      	bne.n	1a6f6 <data_cb+0x60>
		len = MIN(data->data_len, NAME_LEN - 1);
   1a6c8:	7846      	ldrb	r6, [r0, #1]
   1a6ca:	2e1d      	cmp	r6, #29
   1a6cc:	bf28      	it	cs
   1a6ce:	261d      	movcs	r6, #29
		(void)memcpy(name, data->data, len);
   1a6d0:	4632      	mov	r2, r6
   1a6d2:	6841      	ldr	r1, [r0, #4]
   1a6d4:	4628      	mov	r0, r5
   1a6d6:	f000 fdc4 	bl	1b262 <memcpy>
		name[len] = '\0';
   1a6da:	2300      	movs	r3, #0
   1a6dc:	55ab      	strb	r3, [r5, r6]
		len = MIN(data->data_len, NAME_LEN - 1);
   1a6de:	7866      	ldrb	r6, [r4, #1]
   1a6e0:	2e1d      	cmp	r6, #29
   1a6e2:	bf28      	it	cs
   1a6e4:	261d      	movcs	r6, #29
		(void)memcpy(name, data->data, len);
   1a6e6:	4632      	mov	r2, r6
   1a6e8:	6861      	ldr	r1, [r4, #4]
   1a6ea:	4628      	mov	r0, r5
   1a6ec:	f000 fdb9 	bl	1b262 <memcpy>
		name[len] = '\0';
   1a6f0:	2000      	movs	r0, #0
   1a6f2:	55a8      	strb	r0, [r5, r6]
}
   1a6f4:	bd70      	pop	{r4, r5, r6, pc}
	switch (data->type) {
   1a6f6:	2001      	movs	r0, #1
   1a6f8:	e7fc      	b.n	1a6f4 <data_cb+0x5e>
   1a6fa:	2001      	movs	r0, #1
   1a6fc:	e7fa      	b.n	1a6f4 <data_cb+0x5e>

0001a6fe <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1a6fe:	4602      	mov	r2, r0
   1a700:	b1b0      	cbz	r0, 1a730 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a702:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a704:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1a708:	2b02      	cmp	r3, #2
   1a70a:	d00b      	beq.n	1a724 <sys_notify_validate+0x26>
   1a70c:	2b03      	cmp	r3, #3
   1a70e:	d004      	beq.n	1a71a <sys_notify_validate+0x1c>
   1a710:	2b01      	cmp	r3, #1
   1a712:	d004      	beq.n	1a71e <sys_notify_validate+0x20>
   1a714:	f06f 0015 	mvn.w	r0, #21
   1a718:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1a71a:	6803      	ldr	r3, [r0, #0]
   1a71c:	b15b      	cbz	r3, 1a736 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1a71e:	2000      	movs	r0, #0
   1a720:	6090      	str	r0, [r2, #8]
   1a722:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1a724:	6803      	ldr	r3, [r0, #0]
   1a726:	2b00      	cmp	r3, #0
   1a728:	d1f9      	bne.n	1a71e <sys_notify_validate+0x20>
			rv = -EINVAL;
   1a72a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1a72e:	4770      	bx	lr
		return -EINVAL;
   1a730:	f06f 0015 	mvn.w	r0, #21
   1a734:	4770      	bx	lr
			rv = -EINVAL;
   1a736:	f06f 0015 	mvn.w	r0, #21
   1a73a:	4770      	bx	lr

0001a73c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1a73c:	b510      	push	{r4, lr}
   1a73e:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a740:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a742:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1a746:	6081      	str	r1, [r0, #8]
	switch (method) {
   1a748:	2a02      	cmp	r2, #2
   1a74a:	d004      	beq.n	1a756 <sys_notify_finalize+0x1a>
   1a74c:	2a03      	cmp	r2, #3
   1a74e:	d105      	bne.n	1a75c <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1a750:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1a752:	2000      	movs	r0, #0
		break;
   1a754:	e004      	b.n	1a760 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   1a756:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1a758:	2400      	movs	r4, #0
		break;
   1a75a:	e001      	b.n	1a760 <sys_notify_finalize+0x24>
	switch (method) {
   1a75c:	2400      	movs	r4, #0
   1a75e:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1a760:	2200      	movs	r2, #0
   1a762:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1a764:	b108      	cbz	r0, 1a76a <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   1a766:	f7fd fa2b 	bl	17bc0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1a76a:	4620      	mov	r0, r4
   1a76c:	bd10      	pop	{r4, pc}

0001a76e <arch_printk_char_out>:
}
   1a76e:	2000      	movs	r0, #0
   1a770:	4770      	bx	lr

0001a772 <str_out>:
{
   1a772:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a774:	680c      	ldr	r4, [r1, #0]
   1a776:	b154      	cbz	r4, 1a78e <str_out+0x1c>
   1a778:	688a      	ldr	r2, [r1, #8]
   1a77a:	684b      	ldr	r3, [r1, #4]
   1a77c:	429a      	cmp	r2, r3
   1a77e:	da06      	bge.n	1a78e <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1a780:	3b01      	subs	r3, #1
   1a782:	429a      	cmp	r2, r3
   1a784:	d008      	beq.n	1a798 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   1a786:	1c53      	adds	r3, r2, #1
   1a788:	608b      	str	r3, [r1, #8]
   1a78a:	54a0      	strb	r0, [r4, r2]
   1a78c:	e002      	b.n	1a794 <str_out+0x22>
		ctx->count++;
   1a78e:	688b      	ldr	r3, [r1, #8]
   1a790:	3301      	adds	r3, #1
   1a792:	608b      	str	r3, [r1, #8]
}
   1a794:	bc10      	pop	{r4}
   1a796:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1a798:	1c53      	adds	r3, r2, #1
   1a79a:	608b      	str	r3, [r1, #8]
   1a79c:	2300      	movs	r3, #0
   1a79e:	54a3      	strb	r3, [r4, r2]
   1a7a0:	e7f8      	b.n	1a794 <str_out+0x22>

0001a7a2 <printk>:
{
   1a7a2:	b40f      	push	{r0, r1, r2, r3}
   1a7a4:	b500      	push	{lr}
   1a7a6:	b083      	sub	sp, #12
   1a7a8:	a904      	add	r1, sp, #16
   1a7aa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1a7ae:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1a7b0:	f7f5 faec 	bl	fd8c <vprintk>
}
   1a7b4:	b003      	add	sp, #12
   1a7b6:	f85d eb04 	ldr.w	lr, [sp], #4
   1a7ba:	b004      	add	sp, #16
   1a7bc:	4770      	bx	lr

0001a7be <snprintk>:
{
   1a7be:	b40c      	push	{r2, r3}
   1a7c0:	b500      	push	{lr}
   1a7c2:	b083      	sub	sp, #12
   1a7c4:	ab04      	add	r3, sp, #16
   1a7c6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1a7ca:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1a7cc:	f7f5 faec 	bl	fda8 <vsnprintk>
}
   1a7d0:	b003      	add	sp, #12
   1a7d2:	f85d eb04 	ldr.w	lr, [sp], #4
   1a7d6:	b002      	add	sp, #8
   1a7d8:	4770      	bx	lr

0001a7da <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a7da:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a7de:	8b01      	ldrh	r1, [r0, #24]
   1a7e0:	f021 0107 	bic.w	r1, r1, #7
   1a7e4:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a7e6:	8301      	strh	r1, [r0, #24]
}
   1a7e8:	4770      	bx	lr

0001a7ea <notify_monitors>:
{
   1a7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7ee:	4606      	mov	r6, r0
   1a7f0:	460f      	mov	r7, r1
   1a7f2:	4690      	mov	r8, r2
	return list->head;
   1a7f4:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1a7f6:	b119      	cbz	r1, 1a800 <notify_monitors+0x16>
   1a7f8:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a7fa:	b131      	cbz	r1, 1a80a <notify_monitors+0x20>
	return node->next;
   1a7fc:	680c      	ldr	r4, [r1, #0]
   1a7fe:	e004      	b.n	1a80a <notify_monitors+0x20>
   1a800:	460c      	mov	r4, r1
   1a802:	e002      	b.n	1a80a <notify_monitors+0x20>
   1a804:	4623      	mov	r3, r4
   1a806:	4621      	mov	r1, r4
   1a808:	461c      	mov	r4, r3
   1a80a:	b159      	cbz	r1, 1a824 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1a80c:	684d      	ldr	r5, [r1, #4]
   1a80e:	4643      	mov	r3, r8
   1a810:	463a      	mov	r2, r7
   1a812:	4630      	mov	r0, r6
   1a814:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1a816:	2c00      	cmp	r4, #0
   1a818:	d0f4      	beq.n	1a804 <notify_monitors+0x1a>
   1a81a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a81c:	2c00      	cmp	r4, #0
   1a81e:	d0f2      	beq.n	1a806 <notify_monitors+0x1c>
	return node->next;
   1a820:	6823      	ldr	r3, [r4, #0]
   1a822:	e7f0      	b.n	1a806 <notify_monitors+0x1c>
}
   1a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a828 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a828:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1a82a:	f013 0307 	ands.w	r3, r3, #7
   1a82e:	d103      	bne.n	1a838 <process_recheck+0x10>
	return list->head;
   1a830:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a832:	b10a      	cbz	r2, 1a838 <process_recheck+0x10>
		evt = EVT_START;
   1a834:	2003      	movs	r0, #3
   1a836:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a838:	2b02      	cmp	r3, #2
   1a83a:	d003      	beq.n	1a844 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1a83c:	2b01      	cmp	r3, #1
   1a83e:	d006      	beq.n	1a84e <process_recheck+0x26>
	int evt = EVT_NOP;
   1a840:	2000      	movs	r0, #0
   1a842:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1a844:	8b42      	ldrh	r2, [r0, #26]
   1a846:	2a00      	cmp	r2, #0
   1a848:	d1f8      	bne.n	1a83c <process_recheck+0x14>
		evt = EVT_STOP;
   1a84a:	2004      	movs	r0, #4
   1a84c:	4770      	bx	lr
   1a84e:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a850:	b10b      	cbz	r3, 1a856 <process_recheck+0x2e>
		evt = EVT_RESET;
   1a852:	2005      	movs	r0, #5
}
   1a854:	4770      	bx	lr
	int evt = EVT_NOP;
   1a856:	2000      	movs	r0, #0
   1a858:	4770      	bx	lr

0001a85a <process_complete>:
{
   1a85a:	b510      	push	{r4, lr}
   1a85c:	4604      	mov	r4, r0
   1a85e:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a860:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   1a862:	2a00      	cmp	r2, #0
   1a864:	db07      	blt.n	1a876 <process_complete+0x1c>
   1a866:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1a86a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1a86c:	2a01      	cmp	r2, #1
   1a86e:	d90e      	bls.n	1a88e <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1a870:	2b04      	cmp	r3, #4
   1a872:	d033      	beq.n	1a8dc <process_complete+0x82>
}
   1a874:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   1a876:	e9d0 0100 	ldrd	r0, r1, [r0]
   1a87a:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   1a87e:	2300      	movs	r3, #0
   1a880:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1a882:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1a884:	2101      	movs	r1, #1
   1a886:	4620      	mov	r0, r4
   1a888:	f7ff ffa7 	bl	1a7da <set_state>
   1a88c:	e7f2      	b.n	1a874 <process_complete+0x1a>
		*clients = mgr->clients;
   1a88e:	e9d0 0100 	ldrd	r0, r1, [r0]
   1a892:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   1a896:	2200      	movs	r2, #0
   1a898:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1a89a:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1a89c:	2b06      	cmp	r3, #6
   1a89e:	d118      	bne.n	1a8d2 <process_complete+0x78>
	return list->head;
   1a8a0:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1a8a4:	b13b      	cbz	r3, 1a8b6 <process_complete+0x5c>
				mgr->refs += 1U;
   1a8a6:	8b62      	ldrh	r2, [r4, #26]
   1a8a8:	3201      	adds	r2, #1
   1a8aa:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a8ac:	2b00      	cmp	r3, #0
   1a8ae:	d0f9      	beq.n	1a8a4 <process_complete+0x4a>
	return node->next;
   1a8b0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1a8b2:	2b00      	cmp	r3, #0
   1a8b4:	d1f6      	bne.n	1a8a4 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   1a8b6:	2102      	movs	r1, #2
   1a8b8:	4620      	mov	r0, r4
   1a8ba:	f7ff ff8e 	bl	1a7da <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1a8be:	4620      	mov	r0, r4
   1a8c0:	f7ff ffb2 	bl	1a828 <process_recheck>
   1a8c4:	2800      	cmp	r0, #0
   1a8c6:	d0d5      	beq.n	1a874 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a8c8:	8b23      	ldrh	r3, [r4, #24]
   1a8ca:	f043 0320 	orr.w	r3, r3, #32
   1a8ce:	8323      	strh	r3, [r4, #24]
   1a8d0:	e7d0      	b.n	1a874 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1a8d2:	2100      	movs	r1, #0
   1a8d4:	4620      	mov	r0, r4
   1a8d6:	f7ff ff80 	bl	1a7da <set_state>
   1a8da:	e7f0      	b.n	1a8be <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
   1a8dc:	2100      	movs	r1, #0
   1a8de:	f7ff ff7c 	bl	1a7da <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1a8e2:	4620      	mov	r0, r4
   1a8e4:	f7ff ffa0 	bl	1a828 <process_recheck>
   1a8e8:	2800      	cmp	r0, #0
   1a8ea:	d0c3      	beq.n	1a874 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a8ec:	8b23      	ldrh	r3, [r4, #24]
   1a8ee:	f043 0320 	orr.w	r3, r3, #32
   1a8f2:	8323      	strh	r3, [r4, #24]
}
   1a8f4:	e7be      	b.n	1a874 <process_complete+0x1a>

0001a8f6 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1a8f6:	b158      	cbz	r0, 1a910 <validate_args+0x1a>
{
   1a8f8:	b510      	push	{r4, lr}
   1a8fa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a8fc:	b159      	cbz	r1, 1a916 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   1a8fe:	1d08      	adds	r0, r1, #4
   1a900:	f7ff fefd 	bl	1a6fe <sys_notify_validate>
	if ((rv == 0)
   1a904:	b918      	cbnz	r0, 1a90e <validate_args+0x18>
	    && ((cli->notify.flags
   1a906:	68a3      	ldr	r3, [r4, #8]
   1a908:	f033 0303 	bics.w	r3, r3, #3
   1a90c:	d106      	bne.n	1a91c <validate_args+0x26>
}
   1a90e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1a910:	f06f 0015 	mvn.w	r0, #21
}
   1a914:	4770      	bx	lr
		return -EINVAL;
   1a916:	f06f 0015 	mvn.w	r0, #21
   1a91a:	e7f8      	b.n	1a90e <validate_args+0x18>
		rv = -EINVAL;
   1a91c:	f06f 0015 	mvn.w	r0, #21
   1a920:	e7f5      	b.n	1a90e <validate_args+0x18>

0001a922 <notify_one>:
{
   1a922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a926:	4607      	mov	r7, r0
   1a928:	460c      	mov	r4, r1
   1a92a:	4616      	mov	r6, r2
   1a92c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a92e:	4619      	mov	r1, r3
   1a930:	1d20      	adds	r0, r4, #4
   1a932:	f7ff ff03 	bl	1a73c <sys_notify_finalize>
	if (cb) {
   1a936:	b128      	cbz	r0, 1a944 <notify_one+0x22>
   1a938:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   1a93a:	462b      	mov	r3, r5
   1a93c:	4632      	mov	r2, r6
   1a93e:	4621      	mov	r1, r4
   1a940:	4638      	mov	r0, r7
   1a942:	47c0      	blx	r8
}
   1a944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a948 <notify_all>:
{
   1a948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a94c:	4680      	mov	r8, r0
   1a94e:	460c      	mov	r4, r1
   1a950:	4617      	mov	r7, r2
   1a952:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   1a954:	e004      	b.n	1a960 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   1a956:	4633      	mov	r3, r6
   1a958:	463a      	mov	r2, r7
   1a95a:	4640      	mov	r0, r8
   1a95c:	f7ff ffe1 	bl	1a922 <notify_one>
	return list->head;
   1a960:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1a962:	b131      	cbz	r1, 1a972 <notify_all+0x2a>
	return node->next;
   1a964:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1a966:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a968:	6863      	ldr	r3, [r4, #4]
   1a96a:	428b      	cmp	r3, r1
   1a96c:	d1f3      	bne.n	1a956 <notify_all+0xe>
	list->tail = node;
   1a96e:	6065      	str	r5, [r4, #4]
}
   1a970:	e7f1      	b.n	1a956 <notify_all+0xe>
}
   1a972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a976 <transition_complete>:
{
   1a976:	b508      	push	{r3, lr}
	__asm__ volatile(
   1a978:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1a97c:	f3ef 8211 	mrs	r2, BASEPRI
   1a980:	f38c 8812 	msr	BASEPRI_MAX, ip
   1a984:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1a988:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   1a98a:	2101      	movs	r1, #1
   1a98c:	f7f5 fa24 	bl	fdd8 <process_event>
}
   1a990:	bd08      	pop	{r3, pc}

0001a992 <onoff_manager_init>:
	if ((mgr == NULL)
   1a992:	4603      	mov	r3, r0
   1a994:	b170      	cbz	r0, 1a9b4 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   1a996:	b181      	cbz	r1, 1a9ba <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   1a998:	680a      	ldr	r2, [r1, #0]
   1a99a:	b18a      	cbz	r2, 1a9c0 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   1a99c:	684a      	ldr	r2, [r1, #4]
   1a99e:	b192      	cbz	r2, 1a9c6 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a9a0:	2000      	movs	r0, #0
   1a9a2:	6018      	str	r0, [r3, #0]
   1a9a4:	6058      	str	r0, [r3, #4]
   1a9a6:	6098      	str	r0, [r3, #8]
   1a9a8:	60d8      	str	r0, [r3, #12]
   1a9aa:	6118      	str	r0, [r3, #16]
   1a9ac:	6158      	str	r0, [r3, #20]
   1a9ae:	6198      	str	r0, [r3, #24]
   1a9b0:	6119      	str	r1, [r3, #16]
	return 0;
   1a9b2:	4770      	bx	lr
		return -EINVAL;
   1a9b4:	f06f 0015 	mvn.w	r0, #21
   1a9b8:	4770      	bx	lr
   1a9ba:	f06f 0015 	mvn.w	r0, #21
   1a9be:	4770      	bx	lr
   1a9c0:	f06f 0015 	mvn.w	r0, #21
   1a9c4:	4770      	bx	lr
   1a9c6:	f06f 0015 	mvn.w	r0, #21
}
   1a9ca:	4770      	bx	lr

0001a9cc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9ce:	4604      	mov	r4, r0
   1a9d0:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1a9d2:	f7ff ff90 	bl	1a8f6 <validate_args>

	if (rv < 0) {
   1a9d6:	1e06      	subs	r6, r0, #0
   1a9d8:	db37      	blt.n	1aa4a <onoff_request+0x7e>
   1a9da:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a9de:	f3ef 8211 	mrs	r2, BASEPRI
   1a9e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9e6:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a9ea:	8b25      	ldrh	r5, [r4, #24]
   1a9ec:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1a9f0:	8b63      	ldrh	r3, [r4, #26]
   1a9f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a9f6:	428b      	cmp	r3, r1
   1a9f8:	d02f      	beq.n	1aa5a <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1a9fa:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1a9fc:	2d02      	cmp	r5, #2
   1a9fe:	d00c      	beq.n	1aa1a <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1aa00:	b18d      	cbz	r5, 1aa26 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1aa02:	2d04      	cmp	r5, #4
   1aa04:	d00f      	beq.n	1aa26 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1aa06:	2d06      	cmp	r5, #6
   1aa08:	d00d      	beq.n	1aa26 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1aa0a:	2d05      	cmp	r5, #5
   1aa0c:	d01f      	beq.n	1aa4e <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1aa0e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1aa12:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1aa14:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1aa16:	4608      	mov	r0, r1
   1aa18:	e00a      	b.n	1aa30 <onoff_request+0x64>
		mgr->refs += 1U;
   1aa1a:	3301      	adds	r3, #1
   1aa1c:	8363      	strh	r3, [r4, #26]
		notify = true;
   1aa1e:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1aa20:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1aa22:	4618      	mov	r0, r3
   1aa24:	e004      	b.n	1aa30 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1aa26:	fab5 f385 	clz	r3, r5
   1aa2a:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1aa2c:	2100      	movs	r1, #0
		add_client = true;
   1aa2e:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1aa30:	b128      	cbz	r0, 1aa3e <onoff_request+0x72>
	parent->next = child;
   1aa32:	2000      	movs	r0, #0
   1aa34:	6038      	str	r0, [r7, #0]
	return list->tail;
   1aa36:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1aa38:	b1a8      	cbz	r0, 1aa66 <onoff_request+0x9a>
	parent->next = child;
   1aa3a:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1aa3c:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1aa3e:	b9ab      	cbnz	r3, 1aa6c <onoff_request+0xa0>
	__asm__ volatile(
   1aa40:	f382 8811 	msr	BASEPRI, r2
   1aa44:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1aa48:	b9a9      	cbnz	r1, 1aa76 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1aa4a:	4630      	mov	r0, r6
   1aa4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1aa4e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1aa52:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1aa54:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1aa56:	4608      	mov	r0, r1
   1aa58:	e7ea      	b.n	1aa30 <onoff_request+0x64>
		rv = -EAGAIN;
   1aa5a:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1aa5e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1aa60:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1aa62:	4608      	mov	r0, r1
   1aa64:	e7e4      	b.n	1aa30 <onoff_request+0x64>
   1aa66:	6067      	str	r7, [r4, #4]
	list->head = node;
   1aa68:	6027      	str	r7, [r4, #0]
}
   1aa6a:	e7e8      	b.n	1aa3e <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1aa6c:	2102      	movs	r1, #2
   1aa6e:	4620      	mov	r0, r4
   1aa70:	f7f5 f9b2 	bl	fdd8 <process_event>
   1aa74:	e7e9      	b.n	1aa4a <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1aa76:	2300      	movs	r3, #0
   1aa78:	462a      	mov	r2, r5
   1aa7a:	4639      	mov	r1, r7
   1aa7c:	4620      	mov	r0, r4
   1aa7e:	f7ff ff50 	bl	1a922 <notify_one>
   1aa82:	e7e2      	b.n	1aa4a <onoff_request+0x7e>

0001aa84 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1aa84:	b508      	push	{r3, lr}
   1aa86:	4604      	mov	r4, r0
   1aa88:	4608      	mov	r0, r1
   1aa8a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1aa8c:	461a      	mov	r2, r3
   1aa8e:	47a0      	blx	r4
	return z_impl_z_current_get();
   1aa90:	f7fc fc2e 	bl	172f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1aa94:	f7f6 fc38 	bl	11308 <z_impl_k_thread_abort>

0001aa98 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1aa98:	00c9      	lsls	r1, r1, #3
   1aa9a:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1aa9c:	4408      	add	r0, r1
   1aa9e:	4770      	bx	lr

0001aaa0 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1aaa0:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1aaa4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1aaa8:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   1aaaa:	4299      	cmp	r1, r3
   1aaac:	d00c      	beq.n	1aac8 <free_list_remove_bidx+0x28>
   1aaae:	4484      	add	ip, r0
   1aab0:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1aab4:	3204      	adds	r2, #4
   1aab6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1aaba:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1aabc:	3206      	adds	r2, #6
   1aabe:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   1aac0:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1aac2:	3304      	adds	r3, #4
   1aac4:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1aac6:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   1aac8:	2301      	movs	r3, #1
   1aaca:	fa03 f102 	lsl.w	r1, r3, r2
   1aace:	68c3      	ldr	r3, [r0, #12]
   1aad0:	ea23 0301 	bic.w	r3, r3, r1
   1aad4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1aad6:	3204      	adds	r2, #4
   1aad8:	2300      	movs	r3, #0
   1aada:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   1aade:	4770      	bx	lr

0001aae0 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1aae0:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1aae2:	1d13      	adds	r3, r2, #4
   1aae4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1aae8:	b97c      	cbnz	r4, 1ab0a <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   1aaea:	2301      	movs	r3, #1
   1aaec:	fa03 f402 	lsl.w	r4, r3, r2
   1aaf0:	68c3      	ldr	r3, [r0, #12]
   1aaf2:	4323      	orrs	r3, r4
   1aaf4:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1aaf6:	3204      	adds	r2, #4
   1aaf8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1aafc:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   1aafe:	1d1a      	adds	r2, r3, #4
   1ab00:	b289      	uxth	r1, r1
   1ab02:	5281      	strh	r1, [r0, r2]
   1ab04:	3306      	adds	r3, #6
   1ab06:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1ab08:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   1ab0a:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   1ab0c:	3204      	adds	r2, #4
   1ab0e:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   1ab10:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   1ab14:	f10c 0e04 	add.w	lr, ip, #4
   1ab18:	f820 300e 	strh.w	r3, [r0, lr]
   1ab1c:	f10c 0c06 	add.w	ip, ip, #6
   1ab20:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   1ab24:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1ab26:	3306      	adds	r3, #6
   1ab28:	b289      	uxth	r1, r1
   1ab2a:	52c1      	strh	r1, [r0, r3]
   1ab2c:	5281      	strh	r1, [r0, r2]
   1ab2e:	e7eb      	b.n	1ab08 <free_list_add_bidx+0x28>

0001ab30 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1ab30:	b500      	push	{lr}
	void *cmem = &buf[c];
   1ab32:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   1ab34:	3302      	adds	r3, #2
   1ab36:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   1ab3a:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1ab3e:	1a89      	subs	r1, r1, r2
   1ab40:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ab44:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   1ab48:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ab4c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   1ab50:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   1ab52:	3302      	adds	r3, #2
   1ab54:	f820 e003 	strh.w	lr, [r0, r3]
   1ab58:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   1ab5c:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1ab5e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   1ab62:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1ab66:	f85d fb04 	ldr.w	pc, [sp], #4

0001ab6a <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1ab6a:	b500      	push	{lr}
	void *cmem = &buf[c];
   1ab6c:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   1ab6e:	3102      	adds	r1, #2
   1ab70:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   1ab74:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   1ab78:	f10c 0c02 	add.w	ip, ip, #2
   1ab7c:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1ab80:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ab82:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ab86:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   1ab8a:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   1ab8e:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   1ab92:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   1ab96:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1ab9a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ab9e <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ab9e:	3904      	subs	r1, #4
   1aba0:	1a08      	subs	r0, r1, r0
}
   1aba2:	08c0      	lsrs	r0, r0, #3
   1aba4:	4770      	bx	lr

0001aba6 <free_list_remove>:
{
   1aba6:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1aba8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1abac:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1abae:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1abb0:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   1abb4:	f1c2 021f 	rsb	r2, r2, #31
   1abb8:	f7ff ff72 	bl	1aaa0 <free_list_remove_bidx>
}
   1abbc:	bd08      	pop	{r3, pc}

0001abbe <free_list_add>:
{
   1abbe:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1abc0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1abc4:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1abc6:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   1abc8:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   1abcc:	f1c2 021f 	rsb	r2, r2, #31
   1abd0:	f7ff ff86 	bl	1aae0 <free_list_add_bidx>
}
   1abd4:	bd08      	pop	{r3, pc}

0001abd6 <free_chunk>:
{
   1abd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abd8:	4604      	mov	r4, r0
   1abda:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   1abdc:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   1abde:	1cb7      	adds	r7, r6, #2
   1abe0:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   1abe2:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   1abe6:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1abea:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1abec:	f013 0f01 	tst.w	r3, #1
   1abf0:	d00c      	beq.n	1ac0c <free_chunk+0x36>
   1abf2:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1abf4:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   1abf6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   1abfa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1abfc:	f013 0f01 	tst.w	r3, #1
   1ac00:	d00e      	beq.n	1ac20 <free_chunk+0x4a>
	free_list_add(h, c);
   1ac02:	4629      	mov	r1, r5
   1ac04:	4620      	mov	r0, r4
   1ac06:	f7ff ffda 	bl	1abbe <free_list_add>
}
   1ac0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   1ac0c:	f7ff ffcb 	bl	1aba6 <free_list_remove>
   1ac10:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   1ac12:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   1ac16:	4629      	mov	r1, r5
   1ac18:	4620      	mov	r0, r4
   1ac1a:	f7ff ffa6 	bl	1ab6a <merge_chunks>
   1ac1e:	e7e8      	b.n	1abf2 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   1ac20:	4620      	mov	r0, r4
   1ac22:	f7ff ffc0 	bl	1aba6 <free_list_remove>
   1ac26:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   1ac28:	462a      	mov	r2, r5
   1ac2a:	1a69      	subs	r1, r5, r1
   1ac2c:	4620      	mov	r0, r4
   1ac2e:	f7ff ff9c 	bl	1ab6a <merge_chunks>
   1ac32:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1ac34:	1aed      	subs	r5, r5, r3
   1ac36:	e7e4      	b.n	1ac02 <free_chunk+0x2c>

0001ac38 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1ac38:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   1ac3a:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1ac3e:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   1ac42:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   1ac46:	b1cd      	cbz	r5, 1ac7c <alloc_chunk+0x44>
   1ac48:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   1ac4c:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   1ac50:	1d14      	adds	r4, r2, #4
   1ac52:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   1ac56:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   1ac5a:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   1ac5e:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   1ac60:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   1ac64:	d914      	bls.n	1ac90 <alloc_chunk+0x58>
   1ac66:	4484      	add	ip, r0
   1ac68:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   1ac6c:	1d16      	adds	r6, r2, #4
   1ac6e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   1ac72:	f1be 0e01 	subs.w	lr, lr, #1
   1ac76:	d001      	beq.n	1ac7c <alloc_chunk+0x44>
   1ac78:	42a5      	cmp	r5, r4
   1ac7a:	d1e9      	bne.n	1ac50 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1ac7c:	68c4      	ldr	r4, [r0, #12]
   1ac7e:	f1c3 0220 	rsb	r2, r3, #32
   1ac82:	2301      	movs	r3, #1
   1ac84:	4093      	lsls	r3, r2
   1ac86:	425b      	negs	r3, r3

	if (bmask != 0U) {
   1ac88:	401c      	ands	r4, r3
   1ac8a:	d105      	bne.n	1ac98 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1ac8c:	4620      	mov	r0, r4
   1ac8e:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   1ac90:	4621      	mov	r1, r4
   1ac92:	f7ff ff05 	bl	1aaa0 <free_list_remove_bidx>
				return c;
   1ac96:	e7f9      	b.n	1ac8c <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   1ac98:	fa94 f2a4 	rbit	r2, r4
   1ac9c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1aca0:	1d13      	adds	r3, r2, #4
   1aca2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1aca6:	4621      	mov	r1, r4
   1aca8:	f7ff fefa 	bl	1aaa0 <free_list_remove_bidx>
		return c;
   1acac:	e7ee      	b.n	1ac8c <alloc_chunk+0x54>

0001acae <sys_heap_free>:
	if (mem == NULL) {
   1acae:	b179      	cbz	r1, 1acd0 <sys_heap_free+0x22>
{
   1acb0:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   1acb2:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   1acb4:	4620      	mov	r0, r4
   1acb6:	f7ff ff72 	bl	1ab9e <mem_to_chunkid>
   1acba:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1acbc:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1acc0:	8853      	ldrh	r3, [r2, #2]
   1acc2:	f023 0301 	bic.w	r3, r3, #1
   1acc6:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   1acc8:	4620      	mov	r0, r4
   1acca:	f7ff ff84 	bl	1abd6 <free_chunk>
}
   1acce:	bd10      	pop	{r4, pc}
   1acd0:	4770      	bx	lr

0001acd2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1acd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   1acd4:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1acd6:	b341      	cbz	r1, 1ad2a <sys_heap_alloc+0x58>
   1acd8:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1acda:	68aa      	ldr	r2, [r5, #8]
   1acdc:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1ace0:	d925      	bls.n	1ad2e <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ace2:	330b      	adds	r3, #11
   1ace4:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1ace6:	4621      	mov	r1, r4
   1ace8:	4628      	mov	r0, r5
   1acea:	f7ff ffa5 	bl	1ac38 <alloc_chunk>
	if (c == 0U) {
   1acee:	4607      	mov	r7, r0
   1acf0:	b1f8      	cbz	r0, 1ad32 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   1acf2:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   1acf4:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   1acf8:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1acfa:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   1acfe:	d309      	bcc.n	1ad14 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   1ad00:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ad02:	885a      	ldrh	r2, [r3, #2]
   1ad04:	f042 0201 	orr.w	r2, r2, #1
   1ad08:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   1ad0a:	4639      	mov	r1, r7
   1ad0c:	4628      	mov	r0, r5
   1ad0e:	f7ff fec3 	bl	1aa98 <chunk_mem>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1ad12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   1ad14:	4404      	add	r4, r0
   1ad16:	4622      	mov	r2, r4
   1ad18:	4601      	mov	r1, r0
   1ad1a:	4628      	mov	r0, r5
   1ad1c:	f7ff ff08 	bl	1ab30 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1ad20:	4621      	mov	r1, r4
   1ad22:	4628      	mov	r0, r5
   1ad24:	f7ff ff4b 	bl	1abbe <free_list_add>
   1ad28:	e7ea      	b.n	1ad00 <sys_heap_alloc+0x2e>
		return NULL;
   1ad2a:	2000      	movs	r0, #0
   1ad2c:	e7f1      	b.n	1ad12 <sys_heap_alloc+0x40>
   1ad2e:	2000      	movs	r0, #0
   1ad30:	e7ef      	b.n	1ad12 <sys_heap_alloc+0x40>
		return NULL;
   1ad32:	2000      	movs	r0, #0
   1ad34:	e7ed      	b.n	1ad12 <sys_heap_alloc+0x40>

0001ad36 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1ad36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad3a:	460d      	mov	r5, r1
   1ad3c:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1ad3e:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1ad40:	424b      	negs	r3, r1
   1ad42:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   1ad46:	ea31 0303 	bics.w	r3, r1, r3
   1ad4a:	d03e      	beq.n	1adca <sys_heap_aligned_alloc+0x94>
		align -= rew;
   1ad4c:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   1ad50:	f1b8 0f03 	cmp.w	r8, #3
   1ad54:	d844      	bhi.n	1ade0 <sys_heap_aligned_alloc+0xaa>
   1ad56:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1ad58:	2c00      	cmp	r4, #0
   1ad5a:	d057      	beq.n	1ae0c <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1ad5c:	68b3      	ldr	r3, [r6, #8]
   1ad5e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1ad62:	d955      	bls.n	1ae10 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1ad64:	1929      	adds	r1, r5, r4
   1ad66:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ad68:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1ad6a:	08c9      	lsrs	r1, r1, #3
   1ad6c:	4630      	mov	r0, r6
   1ad6e:	f7ff ff63 	bl	1ac38 <alloc_chunk>

	if (c0 == 0) {
   1ad72:	4607      	mov	r7, r0
   1ad74:	2800      	cmp	r0, #0
   1ad76:	d04d      	beq.n	1ae14 <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   1ad78:	4601      	mov	r1, r0
   1ad7a:	4630      	mov	r0, r6
   1ad7c:	f7ff fe8c 	bl	1aa98 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1ad80:	4440      	add	r0, r8
   1ad82:	4428      	add	r0, r5
   1ad84:	3801      	subs	r0, #1
   1ad86:	426d      	negs	r5, r5
   1ad88:	4005      	ands	r5, r0
   1ad8a:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ad8e:	442c      	add	r4, r5
   1ad90:	3407      	adds	r4, #7
   1ad92:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   1ad96:	4629      	mov	r1, r5
   1ad98:	4630      	mov	r0, r6
   1ad9a:	f7ff ff00 	bl	1ab9e <mem_to_chunkid>
   1ad9e:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   1ada0:	1ba4      	subs	r4, r4, r6
   1ada2:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   1ada4:	4287      	cmp	r7, r0
   1ada6:	d31d      	bcc.n	1ade4 <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   1ada8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   1adac:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   1adb0:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   1adb2:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   1adb6:	429c      	cmp	r4, r3
   1adb8:	d31e      	bcc.n	1adf8 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   1adba:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1adbc:	8873      	ldrh	r3, [r6, #2]
   1adbe:	f043 0301 	orr.w	r3, r3, #1
   1adc2:	8073      	strh	r3, [r6, #2]
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1adc4:	4628      	mov	r0, r5
   1adc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   1adca:	2904      	cmp	r1, #4
   1adcc:	d903      	bls.n	1add6 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   1adce:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   1add2:	2204      	movs	r2, #4
   1add4:	e7c0      	b.n	1ad58 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   1add6:	4611      	mov	r1, r2
   1add8:	f7ff ff7b 	bl	1acd2 <sys_heap_alloc>
   1addc:	4605      	mov	r5, r0
   1adde:	e7f1      	b.n	1adc4 <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   1ade0:	2204      	movs	r2, #4
   1ade2:	e7b9      	b.n	1ad58 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   1ade4:	4602      	mov	r2, r0
   1ade6:	4639      	mov	r1, r7
   1ade8:	4630      	mov	r0, r6
   1adea:	f7ff fea1 	bl	1ab30 <split_chunks>
		free_list_add(h, c0);
   1adee:	4639      	mov	r1, r7
   1adf0:	4630      	mov	r0, r6
   1adf2:	f7ff fee4 	bl	1abbe <free_list_add>
   1adf6:	e7d7      	b.n	1ada8 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   1adf8:	4622      	mov	r2, r4
   1adfa:	4641      	mov	r1, r8
   1adfc:	4630      	mov	r0, r6
   1adfe:	f7ff fe97 	bl	1ab30 <split_chunks>
		free_list_add(h, c_end);
   1ae02:	4621      	mov	r1, r4
   1ae04:	4630      	mov	r0, r6
   1ae06:	f7ff feda 	bl	1abbe <free_list_add>
   1ae0a:	e7d6      	b.n	1adba <sys_heap_aligned_alloc+0x84>
		return NULL;
   1ae0c:	2500      	movs	r5, #0
   1ae0e:	e7d9      	b.n	1adc4 <sys_heap_aligned_alloc+0x8e>
   1ae10:	2500      	movs	r5, #0
   1ae12:	e7d7      	b.n	1adc4 <sys_heap_aligned_alloc+0x8e>
		return NULL;
   1ae14:	2500      	movs	r5, #0
   1ae16:	e7d5      	b.n	1adc4 <sys_heap_aligned_alloc+0x8e>

0001ae18 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1ae18:	b570      	push	{r4, r5, r6, lr}
   1ae1a:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1ae1c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ae1e:	1dc8      	adds	r0, r1, #7
   1ae20:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ae24:	440a      	add	r2, r1
   1ae26:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1ae2a:	1a12      	subs	r2, r2, r0
   1ae2c:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1ae2e:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1ae30:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   1ae32:	2300      	movs	r3, #0
   1ae34:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   1ae36:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ae3a:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1ae3e:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   1ae42:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ae44:	1dce      	adds	r6, r1, #7
   1ae46:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1ae48:	e005      	b.n	1ae56 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   1ae4a:	f103 0c04 	add.w	ip, r3, #4
   1ae4e:	2400      	movs	r4, #0
   1ae50:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1ae54:	3301      	adds	r3, #1
   1ae56:	4573      	cmp	r3, lr
   1ae58:	dbf7      	blt.n	1ae4a <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ae5a:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   1ae5c:	b2a4      	uxth	r4, r4
   1ae5e:	8044      	strh	r4, [r0, #2]
   1ae60:	f04f 0c00 	mov.w	ip, #0
   1ae64:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ae68:	f044 0401 	orr.w	r4, r4, #1
   1ae6c:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ae6e:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ae70:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   1ae74:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   1ae78:	1ca5      	adds	r5, r4, #2
   1ae7a:	f820 e005 	strh.w	lr, [r0, r5]
   1ae7e:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   1ae80:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   1ae84:	1c95      	adds	r5, r2, #2
   1ae86:	f820 c005 	strh.w	ip, [r0, r5]
   1ae8a:	4402      	add	r2, r0
   1ae8c:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ae8e:	8853      	ldrh	r3, [r2, #2]
   1ae90:	f043 0301 	orr.w	r3, r3, #1
   1ae94:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1ae96:	f7ff fe92 	bl	1abbe <free_list_add>
}
   1ae9a:	bd70      	pop	{r4, r5, r6, pc}

0001ae9c <extract_decimal>:
{
   1ae9c:	4684      	mov	ip, r0
	const char *sp = *str;
   1ae9e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   1aea0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   1aea2:	e005      	b.n	1aeb0 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
   1aea4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1aea8:	3201      	adds	r2, #1
   1aeaa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1aeae:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1aeb0:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1aeb2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1aeb6:	2909      	cmp	r1, #9
   1aeb8:	d9f4      	bls.n	1aea4 <extract_decimal+0x8>
	*str = sp;
   1aeba:	f8cc 2000 	str.w	r2, [ip]
}
   1aebe:	4770      	bx	lr

0001aec0 <encode_uint>:
{
   1aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aec4:	b083      	sub	sp, #12
   1aec6:	4604      	mov	r4, r0
   1aec8:	460d      	mov	r5, r1
   1aeca:	9201      	str	r2, [sp, #4]
   1aecc:	469a      	mov	sl, r3
   1aece:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   1aed0:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1aed2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1aed6:	2b6f      	cmp	r3, #111	; 0x6f
   1aed8:	d00f      	beq.n	1aefa <encode_uint+0x3a>
   1aeda:	d906      	bls.n	1aeea <encode_uint+0x2a>
   1aedc:	2b70      	cmp	r3, #112	; 0x70
   1aede:	d00f      	beq.n	1af00 <encode_uint+0x40>
   1aee0:	2b78      	cmp	r3, #120	; 0x78
   1aee2:	d110      	bne.n	1af06 <encode_uint+0x46>
		return 16;
   1aee4:	f04f 0910 	mov.w	r9, #16
   1aee8:	e026      	b.n	1af38 <encode_uint+0x78>
	switch (specifier) {
   1aeea:	2b58      	cmp	r3, #88	; 0x58
   1aeec:	d002      	beq.n	1aef4 <encode_uint+0x34>
   1aeee:	f04f 090a 	mov.w	r9, #10
   1aef2:	e021      	b.n	1af38 <encode_uint+0x78>
		return 16;
   1aef4:	f04f 0910 	mov.w	r9, #16
   1aef8:	e01e      	b.n	1af38 <encode_uint+0x78>
		return 8;
   1aefa:	f04f 0908 	mov.w	r9, #8
   1aefe:	e01b      	b.n	1af38 <encode_uint+0x78>
		return 16;
   1af00:	f04f 0910 	mov.w	r9, #16
   1af04:	e018      	b.n	1af38 <encode_uint+0x78>
	switch (specifier) {
   1af06:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   1af0a:	e015      	b.n	1af38 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af0c:	f1bb 0f19 	cmp.w	fp, #25
   1af10:	d821      	bhi.n	1af56 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1af12:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af14:	3237      	adds	r2, #55	; 0x37
   1af16:	b2d2      	uxtb	r2, r2
   1af18:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
   1af1c:	463a      	mov	r2, r7
   1af1e:	4643      	mov	r3, r8
   1af20:	4620      	mov	r0, r4
   1af22:	4629      	mov	r1, r5
   1af24:	f7e5 f8ec 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   1af28:	42bc      	cmp	r4, r7
   1af2a:	f175 0300 	sbcs.w	r3, r5, #0
   1af2e:	d316      	bcc.n	1af5e <encode_uint+0x9e>
   1af30:	4556      	cmp	r6, sl
   1af32:	d914      	bls.n	1af5e <encode_uint+0x9e>
		value /= radix;
   1af34:	4604      	mov	r4, r0
   1af36:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   1af38:	f04f 0800 	mov.w	r8, #0
   1af3c:	464f      	mov	r7, r9
   1af3e:	464a      	mov	r2, r9
   1af40:	4643      	mov	r3, r8
   1af42:	4620      	mov	r0, r4
   1af44:	4629      	mov	r1, r5
   1af46:	f7e5 f8db 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af4a:	2a09      	cmp	r2, #9
   1af4c:	d8de      	bhi.n	1af0c <encode_uint+0x4c>
   1af4e:	b2d2      	uxtb	r2, r2
   1af50:	3230      	adds	r2, #48	; 0x30
   1af52:	b2d2      	uxtb	r2, r2
   1af54:	e7e0      	b.n	1af18 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1af56:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af58:	3257      	adds	r2, #87	; 0x57
   1af5a:	b2d2      	uxtb	r2, r2
   1af5c:	e7dc      	b.n	1af18 <encode_uint+0x58>
	if (conv->flag_hash) {
   1af5e:	9b01      	ldr	r3, [sp, #4]
   1af60:	781b      	ldrb	r3, [r3, #0]
   1af62:	f013 0f20 	tst.w	r3, #32
   1af66:	d005      	beq.n	1af74 <encode_uint+0xb4>
		if (radix == 8) {
   1af68:	f1b9 0f08 	cmp.w	r9, #8
   1af6c:	d006      	beq.n	1af7c <encode_uint+0xbc>
		} else if (radix == 16) {
   1af6e:	f1b9 0f10 	cmp.w	r9, #16
   1af72:	d009      	beq.n	1af88 <encode_uint+0xc8>
}
   1af74:	4630      	mov	r0, r6
   1af76:	b003      	add	sp, #12
   1af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1af7c:	9a01      	ldr	r2, [sp, #4]
   1af7e:	7893      	ldrb	r3, [r2, #2]
   1af80:	f043 0308 	orr.w	r3, r3, #8
   1af84:	7093      	strb	r3, [r2, #2]
   1af86:	e7f5      	b.n	1af74 <encode_uint+0xb4>
			conv->altform_0c = true;
   1af88:	9a01      	ldr	r2, [sp, #4]
   1af8a:	7893      	ldrb	r3, [r2, #2]
   1af8c:	f043 0310 	orr.w	r3, r3, #16
   1af90:	7093      	strb	r3, [r2, #2]
   1af92:	e7ef      	b.n	1af74 <encode_uint+0xb4>

0001af94 <outs>:
{
   1af94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af98:	4607      	mov	r7, r0
   1af9a:	460e      	mov	r6, r1
   1af9c:	4614      	mov	r4, r2
   1af9e:	4698      	mov	r8, r3
	size_t count = 0;
   1afa0:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1afa2:	e006      	b.n	1afb2 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   1afa4:	4631      	mov	r1, r6
   1afa6:	f814 0b01 	ldrb.w	r0, [r4], #1
   1afaa:	47b8      	blx	r7
		if (rc < 0) {
   1afac:	2800      	cmp	r0, #0
   1afae:	db09      	blt.n	1afc4 <outs+0x30>
		++count;
   1afb0:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1afb2:	4544      	cmp	r4, r8
   1afb4:	d3f6      	bcc.n	1afa4 <outs+0x10>
   1afb6:	f1b8 0f00 	cmp.w	r8, #0
   1afba:	d102      	bne.n	1afc2 <outs+0x2e>
   1afbc:	7823      	ldrb	r3, [r4, #0]
   1afbe:	2b00      	cmp	r3, #0
   1afc0:	d1f0      	bne.n	1afa4 <outs+0x10>
	return (int)count;
   1afc2:	4628      	mov	r0, r5
}
   1afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001afc8 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1afc8:	b40f      	push	{r0, r1, r2, r3}
   1afca:	b500      	push	{lr}
   1afcc:	b083      	sub	sp, #12
   1afce:	a904      	add	r1, sp, #16
   1afd0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1afd4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1afd6:	f7f4 fed9 	bl	fd8c <vprintk>

	va_end(ap);
}
   1afda:	b003      	add	sp, #12
   1afdc:	f85d eb04 	ldr.w	lr, [sp], #4
   1afe0:	b004      	add	sp, #16
   1afe2:	4770      	bx	lr

0001afe4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   1afe4:	4770      	bx	lr

0001afe6 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   1afe6:	2000      	movs	r0, #0
   1afe8:	4770      	bx	lr

0001afea <abort_function>:
{
   1afea:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1afec:	2000      	movs	r0, #0
   1afee:	f7f5 fc11 	bl	10814 <sys_reboot>

0001aff2 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1aff2:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1aff4:	f002 fd13 	bl	1da1e <z_fatal_error>
}
   1aff8:	bd08      	pop	{r3, pc}

0001affa <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1affa:	b508      	push	{r3, lr}
   1affc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1affe:	6800      	ldr	r0, [r0, #0]
   1b000:	f7ff fff7 	bl	1aff2 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1b004:	bd08      	pop	{r3, pc}

0001b006 <z_irq_spurious>:
{
   1b006:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b008:	2100      	movs	r1, #0
   1b00a:	2001      	movs	r0, #1
   1b00c:	f7ff fff1 	bl	1aff2 <z_arm_fatal_error>
}
   1b010:	bd08      	pop	{r3, pc}

0001b012 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1b012:	b508      	push	{r3, lr}
	handler();
   1b014:	f7f5 fec2 	bl	10d9c <z_SysNmiOnReset>
	z_arm_int_exit();
   1b018:	f7f5 ffb8 	bl	10f8c <z_arm_exc_exit>
}
   1b01c:	bd08      	pop	{r3, pc}

0001b01e <memory_fault_recoverable>:
}
   1b01e:	2000      	movs	r0, #0
   1b020:	4770      	bx	lr

0001b022 <debug_monitor>:
	*recoverable = false;
   1b022:	2300      	movs	r3, #0
   1b024:	700b      	strb	r3, [r1, #0]
}
   1b026:	4770      	bx	lr

0001b028 <fault_handle>:
{
   1b028:	b508      	push	{r3, lr}
	*recoverable = false;
   1b02a:	2300      	movs	r3, #0
   1b02c:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   1b02e:	1ecb      	subs	r3, r1, #3
   1b030:	2b09      	cmp	r3, #9
   1b032:	d81a      	bhi.n	1b06a <fault_handle+0x42>
   1b034:	e8df f003 	tbb	[pc, r3]
   1b038:	110d0905 	.word	0x110d0905
   1b03c:	19191919 	.word	0x19191919
   1b040:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   1b042:	4611      	mov	r1, r2
   1b044:	f7f6 f83c 	bl	110c0 <hard_fault>
		break;
   1b048:	e010      	b.n	1b06c <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   1b04a:	2100      	movs	r1, #0
   1b04c:	f7f5 ffe8 	bl	11020 <mem_manage_fault>
		break;
   1b050:	e00c      	b.n	1b06c <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   1b052:	2100      	movs	r1, #0
   1b054:	f7f5 ffa8 	bl	10fa8 <bus_fault>
		break;
   1b058:	e008      	b.n	1b06c <fault_handle+0x44>
		reason = usage_fault(esf);
   1b05a:	f7f5 ffcf 	bl	10ffc <usage_fault>
		break;
   1b05e:	e005      	b.n	1b06c <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   1b060:	4611      	mov	r1, r2
   1b062:	f7ff ffde 	bl	1b022 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1b066:	2000      	movs	r0, #0
		break;
   1b068:	e000      	b.n	1b06c <fault_handle+0x44>
	switch (fault) {
   1b06a:	2000      	movs	r0, #0
}
   1b06c:	bd08      	pop	{r3, pc}

0001b06e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   1b06e:	6843      	ldr	r3, [r0, #4]
   1b070:	1e5a      	subs	r2, r3, #1
		&&
   1b072:	4213      	tst	r3, r2
   1b074:	d106      	bne.n	1b084 <mpu_partition_is_valid+0x16>
		&&
   1b076:	2b1f      	cmp	r3, #31
   1b078:	d906      	bls.n	1b088 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   1b07a:	6803      	ldr	r3, [r0, #0]
		&&
   1b07c:	421a      	tst	r2, r3
   1b07e:	d005      	beq.n	1b08c <mpu_partition_is_valid+0x1e>
   1b080:	2000      	movs	r0, #0
   1b082:	4770      	bx	lr
   1b084:	2000      	movs	r0, #0
   1b086:	4770      	bx	lr
   1b088:	2000      	movs	r0, #0
   1b08a:	4770      	bx	lr
   1b08c:	2001      	movs	r0, #1
}
   1b08e:	4770      	bx	lr

0001b090 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   1b090:	2807      	cmp	r0, #7
   1b092:	d805      	bhi.n	1b0a0 <region_allocate_and_init+0x10>
{
   1b094:	b510      	push	{r4, lr}
   1b096:	4604      	mov	r4, r0
	region_init(index, region_conf);
   1b098:	f7f6 f970 	bl	1137c <region_init>
	return index;
   1b09c:	4620      	mov	r0, r4
}
   1b09e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1b0a0:	f06f 0015 	mvn.w	r0, #21
}
   1b0a4:	4770      	bx	lr

0001b0a6 <mpu_configure_region>:
{
   1b0a6:	b500      	push	{lr}
   1b0a8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1b0aa:	680b      	ldr	r3, [r1, #0]
   1b0ac:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1b0ae:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1b0b0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   1b0b2:	2b20      	cmp	r3, #32
   1b0b4:	d912      	bls.n	1b0dc <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   1b0b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1b0ba:	d811      	bhi.n	1b0e0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1b0bc:	3b01      	subs	r3, #1
   1b0be:	fab3 f383 	clz	r3, r3
   1b0c2:	f1c3 031f 	rsb	r3, r3, #31
   1b0c6:	005b      	lsls	r3, r3, #1
   1b0c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1b0cc:	4313      	orrs	r3, r2
   1b0ce:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   1b0d0:	a901      	add	r1, sp, #4
   1b0d2:	f7ff ffdd 	bl	1b090 <region_allocate_and_init>
}
   1b0d6:	b005      	add	sp, #20
   1b0d8:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   1b0dc:	2308      	movs	r3, #8
   1b0de:	e7f5      	b.n	1b0cc <mpu_configure_region+0x26>
		return REGION_4G;
   1b0e0:	233e      	movs	r3, #62	; 0x3e
   1b0e2:	e7f3      	b.n	1b0cc <mpu_configure_region+0x26>

0001b0e4 <mpu_configure_regions>:
{
   1b0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b0e8:	4680      	mov	r8, r0
   1b0ea:	460f      	mov	r7, r1
   1b0ec:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   1b0ee:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   1b0f0:	2500      	movs	r5, #0
   1b0f2:	e009      	b.n	1b108 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1b0f4:	4621      	mov	r1, r4
   1b0f6:	b2f0      	uxtb	r0, r6
   1b0f8:	f7ff ffd5 	bl	1b0a6 <mpu_configure_region>
   1b0fc:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   1b0fe:	f110 0f16 	cmn.w	r0, #22
   1b102:	d014      	beq.n	1b12e <mpu_configure_regions+0x4a>
		reg_index++;
   1b104:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   1b106:	3501      	adds	r5, #1
   1b108:	42bd      	cmp	r5, r7
   1b10a:	da10      	bge.n	1b12e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   1b10c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   1b110:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   1b114:	6862      	ldr	r2, [r4, #4]
   1b116:	2a00      	cmp	r2, #0
   1b118:	d0f5      	beq.n	1b106 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   1b11a:	f1b9 0f00 	cmp.w	r9, #0
   1b11e:	d0e9      	beq.n	1b0f4 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   1b120:	4620      	mov	r0, r4
   1b122:	f7ff ffa4 	bl	1b06e <mpu_partition_is_valid>
		if (do_sanity_check &&
   1b126:	2800      	cmp	r0, #0
   1b128:	d1e4      	bne.n	1b0f4 <mpu_configure_regions+0x10>
			return -EINVAL;
   1b12a:	f06f 0615 	mvn.w	r6, #21
}
   1b12e:	4630      	mov	r0, r6
   1b130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b134 <arm_core_mpu_configure_static_mpu_regions>:
{
   1b134:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1b136:	f7f6 f935 	bl	113a4 <mpu_configure_static_mpu_regions>
}
   1b13a:	bd08      	pop	{r3, pc}

0001b13c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   1b13c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   1b13e:	f7f6 f93b 	bl	113b8 <mpu_configure_dynamic_mpu_regions>
}
   1b142:	bd08      	pop	{r3, pc}

0001b144 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1b144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b148:	4605      	mov	r5, r0
	char c, sc;
	size_t len;

	c = *find++;
   1b14a:	460f      	mov	r7, r1
   1b14c:	f817 6b01 	ldrb.w	r6, [r7], #1
	if (c != 0) {
   1b150:	b916      	cbnz	r6, 1b158 <strstr+0x14>
			} while (sc != c);
		} while (strncmp(s, find, len) != 0);
		s--;
	}
	return (char *)s;
}
   1b152:	4628      	mov	r0, r5
   1b154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = strlen(find);
   1b158:	4638      	mov	r0, r7
   1b15a:	f000 f837 	bl	1b1cc <strlen>
   1b15e:	4680      	mov	r8, r0
   1b160:	e000      	b.n	1b164 <strstr+0x20>
{
   1b162:	4625      	mov	r5, r4
				sc = *s++;
   1b164:	462c      	mov	r4, r5
   1b166:	f814 3b01 	ldrb.w	r3, [r4], #1
				if (sc == 0) {
   1b16a:	b14b      	cbz	r3, 1b180 <strstr+0x3c>
			} while (sc != c);
   1b16c:	429e      	cmp	r6, r3
   1b16e:	d1f8      	bne.n	1b162 <strstr+0x1e>
		} while (strncmp(s, find, len) != 0);
   1b170:	4642      	mov	r2, r8
   1b172:	4639      	mov	r1, r7
   1b174:	4620      	mov	r0, r4
   1b176:	f000 f83c 	bl	1b1f2 <strncmp>
   1b17a:	2800      	cmp	r0, #0
   1b17c:	d1f1      	bne.n	1b162 <strstr+0x1e>
   1b17e:	e7e8      	b.n	1b152 <strstr+0xe>
					return NULL;
   1b180:	2500      	movs	r5, #0
   1b182:	e7e6      	b.n	1b152 <strstr+0xe>

0001b184 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1b184:	4602      	mov	r2, r0
   1b186:	e002      	b.n	1b18e <strcpy+0xa>
		*d = *s;
   1b188:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   1b18c:	3101      	adds	r1, #1
	while (*s != '\0') {
   1b18e:	780b      	ldrb	r3, [r1, #0]
   1b190:	2b00      	cmp	r3, #0
   1b192:	d1f9      	bne.n	1b188 <strcpy+0x4>
	}

	*d = '\0';
   1b194:	7013      	strb	r3, [r2, #0]

	return dest;
}
   1b196:	4770      	bx	lr

0001b198 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1b198:	4603      	mov	r3, r0
   1b19a:	b1a2      	cbz	r2, 1b1c6 <strncpy+0x2e>
{
   1b19c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   1b19e:	780c      	ldrb	r4, [r1, #0]
   1b1a0:	b12c      	cbz	r4, 1b1ae <strncpy+0x16>
		*d = *s;
   1b1a2:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   1b1a6:	3101      	adds	r1, #1
		d++;
		n--;
   1b1a8:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   1b1aa:	2a00      	cmp	r2, #0
   1b1ac:	d1f7      	bne.n	1b19e <strncpy+0x6>
	}

	while (n > 0) {
   1b1ae:	b122      	cbz	r2, 1b1ba <strncpy+0x22>
		*d = '\0';
   1b1b0:	2100      	movs	r1, #0
   1b1b2:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   1b1b6:	3a01      	subs	r2, #1
   1b1b8:	e7f9      	b.n	1b1ae <strncpy+0x16>
	}

	return dest;
}
   1b1ba:	bc10      	pop	{r4}
   1b1bc:	4770      	bx	lr
		*d = '\0';
   1b1be:	2100      	movs	r1, #0
   1b1c0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b1c4:	3a01      	subs	r2, #1
	while (n > 0) {
   1b1c6:	2a00      	cmp	r2, #0
   1b1c8:	d1f9      	bne.n	1b1be <strncpy+0x26>
   1b1ca:	4770      	bx	lr

0001b1cc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1b1cc:	4603      	mov	r3, r0
	size_t n = 0;
   1b1ce:	2000      	movs	r0, #0

	while (*s != '\0') {
   1b1d0:	e001      	b.n	1b1d6 <strlen+0xa>
		s++;
   1b1d2:	3301      	adds	r3, #1
		n++;
   1b1d4:	3001      	adds	r0, #1
	while (*s != '\0') {
   1b1d6:	781a      	ldrb	r2, [r3, #0]
   1b1d8:	2a00      	cmp	r2, #0
   1b1da:	d1fa      	bne.n	1b1d2 <strlen+0x6>
	}

	return n;
}
   1b1dc:	4770      	bx	lr

0001b1de <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1b1de:	4603      	mov	r3, r0
	size_t n = 0;
   1b1e0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1b1e2:	e001      	b.n	1b1e8 <strnlen+0xa>
		s++;
   1b1e4:	3301      	adds	r3, #1
		n++;
   1b1e6:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   1b1e8:	781a      	ldrb	r2, [r3, #0]
   1b1ea:	b10a      	cbz	r2, 1b1f0 <strnlen+0x12>
   1b1ec:	4288      	cmp	r0, r1
   1b1ee:	d3f9      	bcc.n	1b1e4 <strnlen+0x6>
	}

	return n;
}
   1b1f0:	4770      	bx	lr

0001b1f2 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1b1f2:	e002      	b.n	1b1fa <strncmp+0x8>
		s1++;
   1b1f4:	3001      	adds	r0, #1
		s2++;
   1b1f6:	3101      	adds	r1, #1
		n--;
   1b1f8:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1b1fa:	b132      	cbz	r2, 1b20a <strncmp+0x18>
   1b1fc:	7803      	ldrb	r3, [r0, #0]
   1b1fe:	f891 c000 	ldrb.w	ip, [r1]
   1b202:	4563      	cmp	r3, ip
   1b204:	d101      	bne.n	1b20a <strncmp+0x18>
   1b206:	2b00      	cmp	r3, #0
   1b208:	d1f4      	bne.n	1b1f4 <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1b20a:	b11a      	cbz	r2, 1b214 <strncmp+0x22>
   1b20c:	7800      	ldrb	r0, [r0, #0]
   1b20e:	780b      	ldrb	r3, [r1, #0]
   1b210:	1ac0      	subs	r0, r0, r3
   1b212:	4770      	bx	lr
   1b214:	2000      	movs	r0, #0
}
   1b216:	4770      	bx	lr

0001b218 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1b218:	4613      	mov	r3, r2
   1b21a:	b16a      	cbz	r2, 1b238 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1b21c:	3b01      	subs	r3, #1
   1b21e:	d007      	beq.n	1b230 <memcmp+0x18>
   1b220:	f890 c000 	ldrb.w	ip, [r0]
   1b224:	780a      	ldrb	r2, [r1, #0]
   1b226:	4594      	cmp	ip, r2
   1b228:	d102      	bne.n	1b230 <memcmp+0x18>
		c1++;
   1b22a:	3001      	adds	r0, #1
		c2++;
   1b22c:	3101      	adds	r1, #1
   1b22e:	e7f5      	b.n	1b21c <memcmp+0x4>
	}

	return *c1 - *c2;
   1b230:	7800      	ldrb	r0, [r0, #0]
   1b232:	780b      	ldrb	r3, [r1, #0]
   1b234:	1ac0      	subs	r0, r0, r3
   1b236:	4770      	bx	lr
		return 0;
   1b238:	2000      	movs	r0, #0
}
   1b23a:	4770      	bx	lr

0001b23c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1b23c:	1a43      	subs	r3, r0, r1
   1b23e:	4293      	cmp	r3, r2
   1b240:	d304      	bcc.n	1b24c <memmove+0x10>
	char *dest = d;
   1b242:	4603      	mov	r3, r0
   1b244:	e00a      	b.n	1b25c <memmove+0x20>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
   1b246:	3a01      	subs	r2, #1
			dest[n] = src[n];
   1b248:	5c8b      	ldrb	r3, [r1, r2]
   1b24a:	5483      	strb	r3, [r0, r2]
		while (n > 0) {
   1b24c:	2a00      	cmp	r2, #0
   1b24e:	d1fa      	bne.n	1b246 <memmove+0xa>
   1b250:	4770      	bx	lr
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
			*dest = *src;
   1b252:	f811 cb01 	ldrb.w	ip, [r1], #1
   1b256:	f803 cb01 	strb.w	ip, [r3], #1
			dest++;
			src++;
			n--;
   1b25a:	3a01      	subs	r2, #1
		while (n > 0) {
   1b25c:	2a00      	cmp	r2, #0
   1b25e:	d1f8      	bne.n	1b252 <memmove+0x16>
		}
	}

	return d;
}
   1b260:	4770      	bx	lr

0001b262 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1b262:	ea80 0301 	eor.w	r3, r0, r1
   1b266:	f013 0f03 	tst.w	r3, #3
   1b26a:	d001      	beq.n	1b270 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   1b26c:	4603      	mov	r3, r0
   1b26e:	e023      	b.n	1b2b8 <memcpy+0x56>
   1b270:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   1b272:	f013 0f03 	tst.w	r3, #3
   1b276:	d00f      	beq.n	1b298 <memcpy+0x36>
			if (n == 0) {
   1b278:	b30a      	cbz	r2, 1b2be <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   1b27a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1b27e:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   1b282:	3a01      	subs	r2, #1
   1b284:	e7f5      	b.n	1b272 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   1b286:	f811 cb01 	ldrb.w	ip, [r1], #1
   1b28a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1b28e:	3a01      	subs	r2, #1
	while (n > 0) {
   1b290:	2a00      	cmp	r2, #0
   1b292:	d1f8      	bne.n	1b286 <memcpy+0x24>
	}

	return d;
}
   1b294:	bc10      	pop	{r4}
   1b296:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   1b298:	2a03      	cmp	r2, #3
   1b29a:	d90d      	bls.n	1b2b8 <memcpy+0x56>
{
   1b29c:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   1b29e:	f851 4b04 	ldr.w	r4, [r1], #4
   1b2a2:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   1b2a6:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   1b2a8:	2a03      	cmp	r2, #3
   1b2aa:	d8f8      	bhi.n	1b29e <memcpy+0x3c>
   1b2ac:	e7f0      	b.n	1b290 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   1b2ae:	f811 cb01 	ldrb.w	ip, [r1], #1
   1b2b2:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1b2b6:	3a01      	subs	r2, #1
	while (n > 0) {
   1b2b8:	2a00      	cmp	r2, #0
   1b2ba:	d1f8      	bne.n	1b2ae <memcpy+0x4c>
   1b2bc:	4770      	bx	lr
}
   1b2be:	4770      	bx	lr

0001b2c0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1b2c0:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1b2c4:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1b2c6:	e002      	b.n	1b2ce <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   1b2c8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1b2cc:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1b2ce:	f013 0f03 	tst.w	r3, #3
   1b2d2:	d002      	beq.n	1b2da <memset+0x1a>
		if (n == 0) {
   1b2d4:	2a00      	cmp	r2, #0
   1b2d6:	d1f7      	bne.n	1b2c8 <memset+0x8>
   1b2d8:	e00f      	b.n	1b2fa <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   1b2da:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   1b2dc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   1b2e0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1b2e4:	2a03      	cmp	r2, #3
   1b2e6:	d906      	bls.n	1b2f6 <memset+0x36>
		*(d_word++) = c_word;
   1b2e8:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   1b2ec:	3a04      	subs	r2, #4
   1b2ee:	e7f9      	b.n	1b2e4 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   1b2f0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1b2f4:	3a01      	subs	r2, #1
	while (n > 0) {
   1b2f6:	2a00      	cmp	r2, #0
   1b2f8:	d1fa      	bne.n	1b2f0 <memset+0x30>
	}

	return buf;
}
   1b2fa:	4770      	bx	lr

0001b2fc <_stdout_hook_default>:
}
   1b2fc:	f04f 30ff 	mov.w	r0, #4294967295
   1b300:	4770      	bx	lr

0001b302 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b306:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1b30a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1b30e:	2a08      	cmp	r2, #8
   1b310:	d001      	beq.n	1b316 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1b312:	2000      	movs	r0, #0
   1b314:	4770      	bx	lr
                switch(var2)
   1b316:	2b02      	cmp	r3, #2
   1b318:	d001      	beq.n	1b31e <nrf52_errata_197+0x1c>
                        return false;
   1b31a:	2000      	movs	r0, #0
   1b31c:	4770      	bx	lr
                        return true;
   1b31e:	2001      	movs	r0, #1
    #endif
}
   1b320:	4770      	bx	lr

0001b322 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1b322:	2806      	cmp	r0, #6
   1b324:	d000      	beq.n	1b328 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1b326:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1b328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b32c:	2201      	movs	r2, #1
   1b32e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1b332:	f3bf 8f4f 	dsb	sy
        __WFE();
   1b336:	bf20      	wfe
    while (true)
   1b338:	e7fd      	b.n	1b336 <pm_state_set+0x14>

0001b33a <pm_state_exit_post_ops>:
   1b33a:	2300      	movs	r3, #0
   1b33c:	f383 8811 	msr	BASEPRI, r3
   1b340:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1b344:	4770      	bx	lr

0001b346 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1b346:	b510      	push	{r4, lr}
   1b348:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1b34a:	2301      	movs	r3, #1
   1b34c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1b350:	2106      	movs	r1, #6
   1b352:	f7f9 f989 	bl	14668 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1b356:	b918      	cbnz	r0, 1b360 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1b358:	79a3      	ldrb	r3, [r4, #6]
   1b35a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b35e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1b360:	bd10      	pop	{r4, pc}

0001b362 <handle_event_common>:
{
   1b362:	b510      	push	{r4, lr}
   1b364:	4686      	mov	lr, r0
   1b366:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   1b368:	f04f 0c00 	mov.w	ip, #0
   1b36c:	4563      	cmp	r3, ip
   1b36e:	d910      	bls.n	1b392 <handle_event_common+0x30>
		const struct event_handler *handler = &handlers[i];
   1b370:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   1b374:	f812 403c 	ldrb.w	r4, [r2, ip, lsl #3]
   1b378:	4574      	cmp	r4, lr
   1b37a:	d107      	bne.n	1b38c <handle_event_common+0x2a>
		if (buf->len < handler->min_len) {
   1b37c:	8982      	ldrh	r2, [r0, #12]
   1b37e:	784b      	ldrb	r3, [r1, #1]
   1b380:	429a      	cmp	r2, r3
   1b382:	d309      	bcc.n	1b398 <handle_event_common+0x36>
		handler->handler(buf);
   1b384:	684b      	ldr	r3, [r1, #4]
   1b386:	4798      	blx	r3
		return 0;
   1b388:	2000      	movs	r0, #0
}
   1b38a:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
   1b38c:	f10c 0c01 	add.w	ip, ip, #1
   1b390:	e7ec      	b.n	1b36c <handle_event_common+0xa>
	return -EOPNOTSUPP;
   1b392:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1b396:	e7f8      	b.n	1b38a <handle_event_common+0x28>
			return -EINVAL;
   1b398:	f06f 0015 	mvn.w	r0, #21
   1b39c:	e7f5      	b.n	1b38a <handle_event_common+0x28>

0001b39e <handle_event>:
{
   1b39e:	b508      	push	{r3, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   1b3a0:	f7ff ffdf 	bl	1b362 <handle_event_common>
}
   1b3a4:	bd08      	pop	{r3, pc}

0001b3a6 <hci_vendor_event>:
}
   1b3a6:	4770      	bx	lr

0001b3a8 <bt_br_init>:
}
   1b3a8:	2000      	movs	r0, #0
   1b3aa:	4770      	bx	lr

0001b3ac <hci_hardware_error>:
{
   1b3ac:	b508      	push	{r3, lr}
   1b3ae:	2101      	movs	r1, #1
   1b3b0:	3008      	adds	r0, #8
   1b3b2:	f000 fb36 	bl	1ba22 <net_buf_simple_pull_mem>
}
   1b3b6:	bd08      	pop	{r3, pc}

0001b3b8 <le_set_event_mask>:
{
   1b3b8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1b3ba:	2108      	movs	r1, #8
   1b3bc:	f242 0001 	movw	r0, #8193	; 0x2001
   1b3c0:	f7f6 fa9a 	bl	118f8 <bt_hci_cmd_create>
	if (!buf) {
   1b3c4:	b1b0      	cbz	r0, 1b3f4 <le_set_event_mask+0x3c>
   1b3c6:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   1b3c8:	2108      	movs	r1, #8
   1b3ca:	4408      	add	r0, r1
   1b3cc:	f000 fb10 	bl	1b9f0 <net_buf_simple_add>
	dst[0] = val;
   1b3d0:	2302      	movs	r3, #2
   1b3d2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1b3d4:	2310      	movs	r3, #16
   1b3d6:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1b3d8:	2307      	movs	r3, #7
   1b3da:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
   1b3dc:	2200      	movs	r2, #0
   1b3de:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1b3e0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1b3e2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1b3e4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1b3e6:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1b3e8:	4621      	mov	r1, r4
   1b3ea:	f242 0001 	movw	r0, #8193	; 0x2001
   1b3ee:	f7f6 fac1 	bl	11974 <bt_hci_cmd_send_sync>
}
   1b3f2:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1b3f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b3f8:	e7fb      	b.n	1b3f2 <le_set_event_mask+0x3a>

0001b3fa <set_event_mask>:
{
   1b3fa:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1b3fc:	2108      	movs	r1, #8
   1b3fe:	f640 4001 	movw	r0, #3073	; 0xc01
   1b402:	f7f6 fa79 	bl	118f8 <bt_hci_cmd_create>
	if (!buf) {
   1b406:	b1b0      	cbz	r0, 1b436 <set_event_mask+0x3c>
   1b408:	4604      	mov	r4, r0
   1b40a:	2108      	movs	r1, #8
   1b40c:	4408      	add	r0, r1
   1b40e:	f000 faef 	bl	1b9f0 <net_buf_simple_add>
	dst[0] = val;
   1b412:	2200      	movs	r2, #0
   1b414:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   1b416:	2380      	movs	r3, #128	; 0x80
   1b418:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1b41a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1b41c:	2302      	movs	r3, #2
   1b41e:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   1b420:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1b422:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1b424:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1b426:	2320      	movs	r3, #32
   1b428:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1b42a:	4621      	mov	r1, r4
   1b42c:	f640 4001 	movw	r0, #3073	; 0xc01
   1b430:	f7f6 faa0 	bl	11974 <bt_hci_cmd_send_sync>
}
   1b434:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1b436:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b43a:	e7fb      	b.n	1b434 <set_event_mask+0x3a>

0001b43c <bt_get_phy>:
	switch (hci_phy) {
   1b43c:	2802      	cmp	r0, #2
   1b43e:	d004      	beq.n	1b44a <bt_get_phy+0xe>
   1b440:	2803      	cmp	r0, #3
   1b442:	d004      	beq.n	1b44e <bt_get_phy+0x12>
   1b444:	2801      	cmp	r0, #1
   1b446:	d001      	beq.n	1b44c <bt_get_phy+0x10>
		return 0;
   1b448:	2000      	movs	r0, #0
}
   1b44a:	4770      	bx	lr
   1b44c:	4770      	bx	lr
		return BT_GAP_LE_PHY_CODED;
   1b44e:	2004      	movs	r0, #4
   1b450:	4770      	bx	lr

0001b452 <process_events>:
{
   1b452:	b538      	push	{r3, r4, r5, lr}
   1b454:	4604      	mov	r4, r0
   1b456:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   1b458:	e001      	b.n	1b45e <process_events+0xc>
	for (; count; ev++, count--) {
   1b45a:	3414      	adds	r4, #20
   1b45c:	3d01      	subs	r5, #1
   1b45e:	b155      	cbz	r5, 1b476 <process_events+0x24>
		switch (ev->state) {
   1b460:	68e3      	ldr	r3, [r4, #12]
   1b462:	f3c3 3345 	ubfx	r3, r3, #13, #6
   1b466:	2b04      	cmp	r3, #4
   1b468:	d1f7      	bne.n	1b45a <process_events+0x8>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1b46a:	7b23      	ldrb	r3, [r4, #12]
   1b46c:	2b00      	cmp	r3, #0
   1b46e:	d1f4      	bne.n	1b45a <process_events+0x8>
				send_cmd();
   1b470:	f7f6 fc24 	bl	11cbc <send_cmd>
   1b474:	e7f1      	b.n	1b45a <process_events+0x8>
}
   1b476:	bd38      	pop	{r3, r4, r5, pc}

0001b478 <bt_recv>:
{
   1b478:	b538      	push	{r3, r4, r5, lr}
   1b47a:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1b47c:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   1b47e:	2d01      	cmp	r5, #1
   1b480:	d11f      	bne.n	1b4c2 <bt_recv+0x4a>
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   1b482:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1b484:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   1b486:	2b05      	cmp	r3, #5
   1b488:	d00e      	beq.n	1b4a8 <bt_recv+0x30>
   1b48a:	d30f      	bcc.n	1b4ac <bt_recv+0x34>
   1b48c:	3b0e      	subs	r3, #14
   1b48e:	b2db      	uxtb	r3, r3
   1b490:	2b01      	cmp	r3, #1
   1b492:	d807      	bhi.n	1b4a4 <bt_recv+0x2c>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1b494:	f015 0f01 	tst.w	r5, #1
   1b498:	d10a      	bne.n	1b4b0 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1b49a:	f015 0f02 	tst.w	r5, #2
   1b49e:	d10b      	bne.n	1b4b8 <bt_recv+0x40>
		return 0;
   1b4a0:	2000      	movs	r0, #0
}
   1b4a2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV;
   1b4a4:	2502      	movs	r5, #2
   1b4a6:	e7f5      	b.n	1b494 <bt_recv+0x1c>
	switch (evt) {
   1b4a8:	2503      	movs	r5, #3
   1b4aa:	e7f3      	b.n	1b494 <bt_recv+0x1c>
		return BT_HCI_EVT_FLAG_RECV;
   1b4ac:	2502      	movs	r5, #2
   1b4ae:	e7f1      	b.n	1b494 <bt_recv+0x1c>
			hci_event_prio(buf);
   1b4b0:	4620      	mov	r0, r4
   1b4b2:	f7f6 fc83 	bl	11dbc <hci_event_prio>
   1b4b6:	e7f0      	b.n	1b49a <bt_recv+0x22>
			rx_queue_put(buf);
   1b4b8:	4620      	mov	r0, r4
   1b4ba:	f7f6 f9dd 	bl	11878 <rx_queue_put>
		return 0;
   1b4be:	2000      	movs	r0, #0
   1b4c0:	e7ef      	b.n	1b4a2 <bt_recv+0x2a>
		net_buf_unref(buf);
   1b4c2:	f000 fa6b 	bl	1b99c <net_buf_unref>
		return -EINVAL;
   1b4c6:	f06f 0015 	mvn.w	r0, #21
   1b4ca:	e7ea      	b.n	1b4a2 <bt_recv+0x2a>

0001b4cc <bt_init>:
{
   1b4cc:	b510      	push	{r4, lr}
	err = hci_init();
   1b4ce:	f7f6 fb9b 	bl	11c08 <hci_init>
	if (err) {
   1b4d2:	4604      	mov	r4, r0
   1b4d4:	b108      	cbz	r0, 1b4da <bt_init+0xe>
}
   1b4d6:	4620      	mov	r0, r4
   1b4d8:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   1b4da:	f7f6 fceb 	bl	11eb4 <bt_finalize_init>
	return 0;
   1b4de:	e7fa      	b.n	1b4d6 <bt_init+0xa>

0001b4e0 <bt_data_parse>:
#endif

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   1b4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4e2:	b083      	sub	sp, #12
   1b4e4:	4604      	mov	r4, r0
   1b4e6:	460f      	mov	r7, r1
   1b4e8:	4616      	mov	r6, r2
	while (ad->len > 1) {
   1b4ea:	88a3      	ldrh	r3, [r4, #4]
   1b4ec:	2b01      	cmp	r3, #1
   1b4ee:	d91b      	bls.n	1b528 <bt_data_parse+0x48>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   1b4f0:	4620      	mov	r0, r4
   1b4f2:	f000 fa9e 	bl	1ba32 <net_buf_simple_pull_u8>
		if (len == 0U) {
   1b4f6:	4605      	mov	r5, r0
   1b4f8:	b1b0      	cbz	r0, 1b528 <bt_data_parse+0x48>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   1b4fa:	b283      	uxth	r3, r0
   1b4fc:	88a2      	ldrh	r2, [r4, #4]
   1b4fe:	4293      	cmp	r3, r2
   1b500:	d812      	bhi.n	1b528 <bt_data_parse+0x48>
			BT_WARN("Malformed data");
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
   1b502:	4620      	mov	r0, r4
   1b504:	f000 fa95 	bl	1ba32 <net_buf_simple_pull_u8>
   1b508:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
   1b50c:	1e6b      	subs	r3, r5, #1
   1b50e:	f88d 3001 	strb.w	r3, [sp, #1]
		data.data = ad->data;
   1b512:	6823      	ldr	r3, [r4, #0]
   1b514:	9301      	str	r3, [sp, #4]

		if (!func(&data, user_data)) {
   1b516:	4631      	mov	r1, r6
   1b518:	4668      	mov	r0, sp
   1b51a:	47b8      	blx	r7
   1b51c:	b120      	cbz	r0, 1b528 <bt_data_parse+0x48>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
   1b51e:	1e69      	subs	r1, r5, #1
   1b520:	4620      	mov	r0, r4
   1b522:	f000 fa76 	bl	1ba12 <net_buf_simple_pull>
   1b526:	e7e0      	b.n	1b4ea <bt_data_parse+0xa>
	}
}
   1b528:	b003      	add	sp, #12
   1b52a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b52c <is_adv_using_rand_addr>:
}
   1b52c:	2000      	movs	r0, #0
   1b52e:	4770      	bx	lr

0001b530 <bt_lookup_id_addr>:
}
   1b530:	4608      	mov	r0, r1
   1b532:	4770      	bx	lr

0001b534 <bt_id_set_private_addr>:
{
   1b534:	b500      	push	{lr}
   1b536:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1b538:	2106      	movs	r1, #6
   1b53a:	4668      	mov	r0, sp
   1b53c:	f7f9 f894 	bl	14668 <bt_rand>
	if (err) {
   1b540:	b110      	cbz	r0, 1b548 <bt_id_set_private_addr+0x14>
}
   1b542:	b003      	add	sp, #12
   1b544:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   1b548:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b550:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1b554:	4668      	mov	r0, sp
   1b556:	f7f6 fd77 	bl	12048 <set_random_address>
	if (err)  {
   1b55a:	e7f2      	b.n	1b542 <bt_id_set_private_addr+0xe>

0001b55c <bt_id_scan_random_addr_check>:
}
   1b55c:	2001      	movs	r0, #1
   1b55e:	4770      	bx	lr

0001b560 <get_adv_props_legacy>:
	switch (evt_type) {
   1b560:	2804      	cmp	r0, #4
   1b562:	d80a      	bhi.n	1b57a <get_adv_props_legacy+0x1a>
   1b564:	e8df f000 	tbb	[pc, r0]
   1b568:	050c0b03 	.word	0x050c0b03
   1b56c:	07          	.byte	0x07
   1b56d:	00          	.byte	0x00
   1b56e:	2003      	movs	r0, #3
   1b570:	4770      	bx	lr
		return 0;
   1b572:	2000      	movs	r0, #0
   1b574:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   1b576:	200a      	movs	r0, #10
   1b578:	4770      	bx	lr
		return 0;
   1b57a:	2000      	movs	r0, #0
   1b57c:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   1b57e:	2005      	movs	r0, #5
}
   1b580:	4770      	bx	lr

0001b582 <get_adv_type>:
	switch (evt_type) {
   1b582:	3810      	subs	r0, #16
   1b584:	280b      	cmp	r0, #11
   1b586:	d80f      	bhi.n	1b5a8 <get_adv_type+0x26>
   1b588:	e8df f000 	tbb	[pc, r0]
   1b58c:	06080e0a 	.word	0x06080e0a
   1b590:	0e0e100e 	.word	0x0e0e100e
   1b594:	0c0c0e0e 	.word	0x0c0c0e0e
   1b598:	2000      	movs	r0, #0
   1b59a:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_ADV_SCAN_IND;
   1b59c:	2002      	movs	r0, #2
   1b59e:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_ADV_NONCONN_IND;
   1b5a0:	2003      	movs	r0, #3
   1b5a2:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_SCAN_RSP;
   1b5a4:	2004      	movs	r0, #4
   1b5a6:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_EXT_ADV;
   1b5a8:	2005      	movs	r0, #5
   1b5aa:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_ADV_DIRECT_IND;
   1b5ac:	2001      	movs	r0, #1
}
   1b5ae:	4770      	bx	lr

0001b5b0 <get_adv_props_extended>:
	return (evt_type ^ BT_HCI_LE_ADV_EVT_TYPE_LEGACY) & BIT_MASK(5);
   1b5b0:	f080 0010 	eor.w	r0, r0, #16
}
   1b5b4:	f000 001f 	and.w	r0, r0, #31
   1b5b8:	4770      	bx	lr

0001b5ba <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   1b5ba:	7803      	ldrb	r3, [r0, #0]
   1b5bc:	2b01      	cmp	r3, #1
   1b5be:	d815      	bhi.n	1b5ec <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1b5c0:	6843      	ldr	r3, [r0, #4]
   1b5c2:	f033 030f 	bics.w	r3, r3, #15
   1b5c6:	d113      	bne.n	1b5f0 <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   1b5c8:	8902      	ldrh	r2, [r0, #8]
   1b5ca:	1f13      	subs	r3, r2, #4
   1b5cc:	b29b      	uxth	r3, r3
   1b5ce:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   1b5d2:	428b      	cmp	r3, r1
   1b5d4:	d80e      	bhi.n	1b5f4 <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1b5d6:	8941      	ldrh	r1, [r0, #10]
   1b5d8:	1f0b      	subs	r3, r1, #4
   1b5da:	b29b      	uxth	r3, r3
   1b5dc:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   1b5e0:	4283      	cmp	r3, r0
   1b5e2:	d809      	bhi.n	1b5f8 <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   1b5e4:	428a      	cmp	r2, r1
   1b5e6:	d309      	bcc.n	1b5fc <valid_le_scan_param+0x42>
	return true;
   1b5e8:	2001      	movs	r0, #1
   1b5ea:	4770      	bx	lr
		return false;
   1b5ec:	2000      	movs	r0, #0
   1b5ee:	4770      	bx	lr
		return false;
   1b5f0:	2000      	movs	r0, #0
   1b5f2:	4770      	bx	lr
		return false;
   1b5f4:	2000      	movs	r0, #0
   1b5f6:	4770      	bx	lr
		return false;
   1b5f8:	2000      	movs	r0, #0
   1b5fa:	4770      	bx	lr
		return false;
   1b5fc:	2000      	movs	r0, #0
}
   1b5fe:	4770      	bx	lr

0001b600 <fragmented_advertisers_equal>:
{
   1b600:	b508      	push	{r3, lr}
	return a->sid == sid && bt_addr_le_cmp(&a->addr, addr) == 0;
   1b602:	79c3      	ldrb	r3, [r0, #7]
   1b604:	4293      	cmp	r3, r2
   1b606:	d001      	beq.n	1b60c <fragmented_advertisers_equal+0xc>
   1b608:	2000      	movs	r0, #0
}
   1b60a:	bd08      	pop	{r3, pc}
	return memcmp(a, b, sizeof(*a));
   1b60c:	2207      	movs	r2, #7
   1b60e:	f7ff fe03 	bl	1b218 <memcmp>
	return a->sid == sid && bt_addr_le_cmp(&a->addr, addr) == 0;
   1b612:	b908      	cbnz	r0, 1b618 <fragmented_advertisers_equal+0x18>
   1b614:	2001      	movs	r0, #1
   1b616:	e7f8      	b.n	1b60a <fragmented_advertisers_equal+0xa>
   1b618:	2000      	movs	r0, #0
   1b61a:	e7f6      	b.n	1b60a <fragmented_advertisers_equal+0xa>

0001b61c <create_ext_adv_info>:
{
   1b61c:	b538      	push	{r3, r4, r5, lr}
   1b61e:	4605      	mov	r5, r0
   1b620:	460c      	mov	r4, r1
	scan_info->primary_phy = bt_get_phy(evt->prim_phy);
   1b622:	7a40      	ldrb	r0, [r0, #9]
   1b624:	f7ff ff0a 	bl	1b43c <bt_get_phy>
   1b628:	7320      	strb	r0, [r4, #12]
	scan_info->secondary_phy = bt_get_phy(evt->sec_phy);
   1b62a:	7aa8      	ldrb	r0, [r5, #10]
   1b62c:	f7ff ff06 	bl	1b43c <bt_get_phy>
   1b630:	7360      	strb	r0, [r4, #13]
	scan_info->tx_power = evt->tx_power;
   1b632:	f995 300c 	ldrsb.w	r3, [r5, #12]
   1b636:	71a3      	strb	r3, [r4, #6]
	scan_info->rssi = evt->rssi;
   1b638:	f995 300d 	ldrsb.w	r3, [r5, #13]
   1b63c:	7163      	strb	r3, [r4, #5]
	scan_info->sid = evt->sid;
   1b63e:	7aeb      	ldrb	r3, [r5, #11]
   1b640:	7123      	strb	r3, [r4, #4]
	scan_info->interval = sys_le16_to_cpu(evt->interval);
   1b642:	89eb      	ldrh	r3, [r5, #14]
   1b644:	8163      	strh	r3, [r4, #10]
	scan_info->adv_type = get_adv_type(evt->evt_type);
   1b646:	8828      	ldrh	r0, [r5, #0]
   1b648:	b2c0      	uxtb	r0, r0
   1b64a:	f7ff ff9a 	bl	1b582 <get_adv_type>
   1b64e:	71e0      	strb	r0, [r4, #7]
	scan_info->adv_props = get_adv_props_extended(evt->evt_type);
   1b650:	8828      	ldrh	r0, [r5, #0]
   1b652:	f7ff ffad 	bl	1b5b0 <get_adv_props_extended>
   1b656:	8120      	strh	r0, [r4, #8]
}
   1b658:	bd38      	pop	{r3, r4, r5, pc}

0001b65a <bt_le_scan_set_enable>:
{
   1b65a:	b508      	push	{r3, lr}
		return set_le_ext_scan_enable(enable, 0);
   1b65c:	2100      	movs	r1, #0
   1b65e:	f7f6 fea1 	bl	123a4 <set_le_ext_scan_enable>
}
   1b662:	bd08      	pop	{r3, pc}

0001b664 <bt_hci_le_adv_report>:
{
   1b664:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b666:	b085      	sub	sp, #20
   1b668:	4607      	mov	r7, r0
	return net_buf_simple_pull_u8(&buf->b);
   1b66a:	f100 0608 	add.w	r6, r0, #8
   1b66e:	4630      	mov	r0, r6
   1b670:	f000 f9df 	bl	1ba32 <net_buf_simple_pull_u8>
	BT_DBG("Adv number of reports %u",  num_reports);
   1b674:	e02b      	b.n	1b6ce <bt_hci_le_adv_report+0x6a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b676:	2109      	movs	r1, #9
   1b678:	4630      	mov	r0, r6
   1b67a:	f000 f9d2 	bl	1ba22 <net_buf_simple_pull_mem>
   1b67e:	4604      	mov	r4, r0
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1b680:	2301      	movs	r3, #1
   1b682:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   1b686:	2200      	movs	r2, #0
   1b688:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1b68c:	237f      	movs	r3, #127	; 0x7f
   1b68e:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   1b692:	7a03      	ldrb	r3, [r0, #8]
   1b694:	4403      	add	r3, r0
   1b696:	f993 3009 	ldrsb.w	r3, [r3, #9]
   1b69a:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   1b69e:	23ff      	movs	r3, #255	; 0xff
   1b6a0:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   1b6a4:	f8ad 200a 	strh.w	r2, [sp, #10]
		adv_info.adv_type = evt->evt_type;
   1b6a8:	7800      	ldrb	r0, [r0, #0]
   1b6aa:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   1b6ae:	f7ff ff57 	bl	1b560 <get_adv_props_legacy>
   1b6b2:	f8ad 0008 	strh.w	r0, [sp, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   1b6b6:	7a23      	ldrb	r3, [r4, #8]
   1b6b8:	4632      	mov	r2, r6
   1b6ba:	4669      	mov	r1, sp
   1b6bc:	1c60      	adds	r0, r4, #1
   1b6be:	f7f6 feb9 	bl	12434 <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1b6c2:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   1b6c4:	3101      	adds	r1, #1
   1b6c6:	4630      	mov	r0, r6
   1b6c8:	f000 f9a3 	bl	1ba12 <net_buf_simple_pull>
	while (num_reports--) {
   1b6cc:	4628      	mov	r0, r5
   1b6ce:	1e45      	subs	r5, r0, #1
   1b6d0:	b2ed      	uxtb	r5, r5
   1b6d2:	b110      	cbz	r0, 1b6da <bt_hci_le_adv_report+0x76>
		if (buf->len < sizeof(*evt)) {
   1b6d4:	89bb      	ldrh	r3, [r7, #12]
   1b6d6:	2b08      	cmp	r3, #8
   1b6d8:	d8cd      	bhi.n	1b676 <bt_hci_le_adv_report+0x12>
}
   1b6da:	b005      	add	sp, #20
   1b6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b6de <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1b6de:	4770      	bx	lr

0001b6e0 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   1b6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6e4:	4604      	mov	r4, r0
   1b6e6:	460d      	mov	r5, r1
   1b6e8:	4617      	mov	r7, r2
   1b6ea:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b6ec:	7980      	ldrb	r0, [r0, #6]
   1b6ee:	f7f7 f9ab 	bl	12a48 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   1b6f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1b6f4:	681b      	ldr	r3, [r3, #0]
   1b6f6:	f8d3 8000 	ldr.w	r8, [r3]
   1b6fa:	463a      	mov	r2, r7
   1b6fc:	4633      	mov	r3, r6
   1b6fe:	4629      	mov	r1, r5
   1b700:	4620      	mov	r0, r4
   1b702:	47c0      	blx	r8
}
   1b704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b708 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   1b708:	b538      	push	{r3, r4, r5, lr}
   1b70a:	4604      	mov	r4, r0
   1b70c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b70e:	7980      	ldrb	r0, [r0, #6]
   1b710:	f7f7 f99a 	bl	12a48 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1b714:	7963      	ldrb	r3, [r4, #5]
   1b716:	f013 0f02 	tst.w	r3, #2
   1b71a:	d105      	bne.n	1b728 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   1b71c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1b71e:	681b      	ldr	r3, [r3, #0]
   1b720:	689b      	ldr	r3, [r3, #8]
   1b722:	4629      	mov	r1, r5
   1b724:	4620      	mov	r0, r4
   1b726:	4798      	blx	r3
}
   1b728:	bd38      	pop	{r3, r4, r5, pc}

0001b72a <net_buf_id>:
{
   1b72a:	b510      	push	{r4, lr}
   1b72c:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b72e:	7980      	ldrb	r0, [r0, #6]
   1b730:	f7f7 f98a 	bl	12a48 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b734:	7f03      	ldrb	r3, [r0, #28]
   1b736:	3317      	adds	r3, #23
   1b738:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b73c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1b73e:	1a20      	subs	r0, r4, r0
}
   1b740:	fbb0 f0f3 	udiv	r0, r0, r3
   1b744:	bd10      	pop	{r4, pc}

0001b746 <fixed_data_alloc>:
{
   1b746:	b570      	push	{r4, r5, r6, lr}
   1b748:	4604      	mov	r4, r0
   1b74a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b74c:	7980      	ldrb	r0, [r0, #6]
   1b74e:	f7f7 f97b 	bl	12a48 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b752:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1b754:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b756:	682a      	ldr	r2, [r5, #0]
   1b758:	6819      	ldr	r1, [r3, #0]
   1b75a:	428a      	cmp	r2, r1
   1b75c:	bf28      	it	cs
   1b75e:	460a      	movcs	r2, r1
   1b760:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b762:	685d      	ldr	r5, [r3, #4]
   1b764:	681e      	ldr	r6, [r3, #0]
   1b766:	4620      	mov	r0, r4
   1b768:	f7ff ffdf 	bl	1b72a <net_buf_id>
}
   1b76c:	fb00 5006 	mla	r0, r0, r6, r5
   1b770:	bd70      	pop	{r4, r5, r6, pc}

0001b772 <net_buf_reset>:
	buf->len  = 0U;
   1b772:	2300      	movs	r3, #0
   1b774:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   1b776:	6903      	ldr	r3, [r0, #16]
   1b778:	6083      	str	r3, [r0, #8]
}
   1b77a:	4770      	bx	lr

0001b77c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b780:	b082      	sub	sp, #8
   1b782:	4605      	mov	r5, r0
   1b784:	9101      	str	r1, [sp, #4]
   1b786:	4616      	mov	r6, r2
   1b788:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b78a:	4610      	mov	r0, r2
   1b78c:	4619      	mov	r1, r3
   1b78e:	f002 fd9c 	bl	1e2ca <sys_clock_timeout_end_calc>
   1b792:	4680      	mov	r8, r0
   1b794:	4689      	mov	r9, r1
	__asm__ volatile(
   1b796:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b79a:	f3ef 8a11 	mrs	sl, BASEPRI
   1b79e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7a2:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1b7a6:	8b6b      	ldrh	r3, [r5, #26]
   1b7a8:	2b00      	cmp	r3, #0
   1b7aa:	d040      	beq.n	1b82e <net_buf_alloc_len+0xb2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1b7ac:	8b2a      	ldrh	r2, [r5, #24]
   1b7ae:	4293      	cmp	r3, r2
   1b7b0:	d20b      	bcs.n	1b7ca <net_buf_alloc_len+0x4e>
	return z_impl_k_queue_get(queue, timeout);
   1b7b2:	2200      	movs	r2, #0
   1b7b4:	2300      	movs	r3, #0
   1b7b6:	4628      	mov	r0, r5
   1b7b8:	f7fa ffce 	bl	16758 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1b7bc:	4604      	mov	r4, r0
   1b7be:	b120      	cbz	r0, 1b7ca <net_buf_alloc_len+0x4e>
	__asm__ volatile(
   1b7c0:	f38a 8811 	msr	BASEPRI, sl
   1b7c4:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1b7c8:	e015      	b.n	1b7f6 <net_buf_alloc_len+0x7a>
			}
		}

		uninit_count = pool->uninit_count--;
   1b7ca:	8b6a      	ldrh	r2, [r5, #26]
   1b7cc:	1e53      	subs	r3, r2, #1
   1b7ce:	836b      	strh	r3, [r5, #26]
   1b7d0:	f38a 8811 	msr	BASEPRI, sl
   1b7d4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b7d8:	7f2c      	ldrb	r4, [r5, #28]
   1b7da:	3417      	adds	r4, #23
   1b7dc:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b7e0:	8b2c      	ldrh	r4, [r5, #24]
   1b7e2:	1aa2      	subs	r2, r4, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b7e4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1b7e6:	fb02 4403 	mla	r4, r2, r3, r4
	buf->pool_id = pool_id(pool);
   1b7ea:	4628      	mov	r0, r5
   1b7ec:	f7f7 f920 	bl	12a30 <pool_id>
   1b7f0:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   1b7f2:	7f2b      	ldrb	r3, [r5, #28]
   1b7f4:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1b7f6:	9b01      	ldr	r3, [sp, #4]
   1b7f8:	b39b      	cbz	r3, 1b862 <net_buf_alloc_len+0xe6>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b7fa:	ea56 0307 	orrs.w	r3, r6, r7
   1b7fe:	d005      	beq.n	1b80c <net_buf_alloc_len+0x90>
   1b800:	f1b7 3fff 	cmp.w	r7, #4294967295
   1b804:	bf08      	it	eq
   1b806:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b80a:	d11d      	bne.n	1b848 <net_buf_alloc_len+0xcc>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1b80c:	4632      	mov	r2, r6
   1b80e:	463b      	mov	r3, r7
   1b810:	a901      	add	r1, sp, #4
   1b812:	4620      	mov	r0, r4
   1b814:	f7ff ff64 	bl	1b6e0 <data_alloc>
   1b818:	4605      	mov	r5, r0
   1b81a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1b81c:	bb18      	cbnz	r0, 1b866 <net_buf_alloc_len+0xea>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b81e:	79a0      	ldrb	r0, [r4, #6]
   1b820:	f7f7 f912 	bl	12a48 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1b824:	4621      	mov	r1, r4
   1b826:	f002 fad8 	bl	1ddda <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1b82a:	462c      	mov	r4, r5
}
   1b82c:	e025      	b.n	1b87a <net_buf_alloc_len+0xfe>
   1b82e:	f38a 8811 	msr	BASEPRI, sl
   1b832:	f3bf 8f6f 	isb	sy
   1b836:	4632      	mov	r2, r6
   1b838:	463b      	mov	r3, r7
   1b83a:	4628      	mov	r0, r5
   1b83c:	f7fa ff8c 	bl	16758 <z_impl_k_queue_get>
	if (!buf) {
   1b840:	4604      	mov	r4, r0
   1b842:	2800      	cmp	r0, #0
   1b844:	d1d7      	bne.n	1b7f6 <net_buf_alloc_len+0x7a>
   1b846:	e018      	b.n	1b87a <net_buf_alloc_len+0xfe>
			int64_t remaining = end - sys_clock_tick_get();
   1b848:	f7fb fef4 	bl	17634 <sys_clock_tick_get>
   1b84c:	ebb8 0600 	subs.w	r6, r8, r0
   1b850:	eb69 0701 	sbc.w	r7, r9, r1
			if (remaining <= 0) {
   1b854:	2e01      	cmp	r6, #1
   1b856:	f177 0300 	sbcs.w	r3, r7, #0
   1b85a:	dad7      	bge.n	1b80c <net_buf_alloc_len+0x90>
				timeout = K_NO_WAIT;
   1b85c:	2600      	movs	r6, #0
   1b85e:	4637      	mov	r7, r6
   1b860:	e7d4      	b.n	1b80c <net_buf_alloc_len+0x90>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   1b862:	2300      	movs	r3, #0
   1b864:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   1b866:	2301      	movs	r3, #1
   1b868:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   1b86a:	2300      	movs	r3, #0
   1b86c:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1b86e:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1b870:	9b01      	ldr	r3, [sp, #4]
   1b872:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1b874:	4620      	mov	r0, r4
   1b876:	f7ff ff7c 	bl	1b772 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1b87a:	4620      	mov	r0, r4
   1b87c:	b002      	add	sp, #8
   1b87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b882 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   1b882:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b884:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1b886:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1b888:	6809      	ldr	r1, [r1, #0]
   1b88a:	f7ff ff77 	bl	1b77c <net_buf_alloc_len>
}
   1b88e:	bd08      	pop	{r3, pc}

0001b890 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1b890:	b570      	push	{r4, r5, r6, lr}
   1b892:	4605      	mov	r5, r0
   1b894:	f7fa ff60 	bl	16758 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1b898:	4606      	mov	r6, r0
   1b89a:	b190      	cbz	r0, 1b8c2 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b89c:	4604      	mov	r4, r0
   1b89e:	e00a      	b.n	1b8b6 <net_buf_get+0x26>
   1b8a0:	2200      	movs	r2, #0
   1b8a2:	2300      	movs	r3, #0
   1b8a4:	4628      	mov	r0, r5
   1b8a6:	f7fa ff57 	bl	16758 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1b8aa:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1b8ac:	7963      	ldrb	r3, [r4, #5]
   1b8ae:	f023 0301 	bic.w	r3, r3, #1
   1b8b2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b8b4:	4604      	mov	r4, r0
   1b8b6:	7963      	ldrb	r3, [r4, #5]
   1b8b8:	f013 0f01 	tst.w	r3, #1
   1b8bc:	d1f0      	bne.n	1b8a0 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1b8be:	2300      	movs	r3, #0
   1b8c0:	6023      	str	r3, [r4, #0]

	return buf;
}
   1b8c2:	4630      	mov	r0, r6
   1b8c4:	bd70      	pop	{r4, r5, r6, pc}

0001b8c6 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1b8c6:	6883      	ldr	r3, [r0, #8]
   1b8c8:	440b      	add	r3, r1
   1b8ca:	6003      	str	r3, [r0, #0]
}
   1b8cc:	4770      	bx	lr

0001b8ce <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1b8ce:	b410      	push	{r4}
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1b8d0:	460b      	mov	r3, r1
   1b8d2:	e004      	b.n	1b8de <net_buf_slist_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1b8d4:	795a      	ldrb	r2, [r3, #5]
   1b8d6:	f042 0201 	orr.w	r2, r2, #1
   1b8da:	715a      	strb	r2, [r3, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b8dc:	4623      	mov	r3, r4
   1b8de:	681c      	ldr	r4, [r3, #0]
   1b8e0:	2c00      	cmp	r4, #0
   1b8e2:	d1f7      	bne.n	1b8d4 <net_buf_slist_put+0x6>
	__asm__ volatile(
   1b8e4:	f04f 0440 	mov.w	r4, #64	; 0x40
   1b8e8:	f3ef 8211 	mrs	r2, BASEPRI
   1b8ec:	f384 8812 	msr	BASEPRI_MAX, r4
   1b8f0:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
   1b8f4:	461c      	mov	r4, r3
Z_GENLIST_APPEND_LIST(slist, snode)
   1b8f6:	b121      	cbz	r1, 1b902 <net_buf_slist_put+0x34>
   1b8f8:	b11b      	cbz	r3, 1b902 <net_buf_slist_put+0x34>
	return list->tail;
   1b8fa:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1b8fc:	b13b      	cbz	r3, 1b90e <net_buf_slist_put+0x40>
	parent->next = child;
   1b8fe:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1b900:	6044      	str	r4, [r0, #4]
	__asm__ volatile(
   1b902:	f382 8811 	msr	BASEPRI, r2
   1b906:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1b90a:	bc10      	pop	{r4}
   1b90c:	4770      	bx	lr
	list->head = node;
   1b90e:	6001      	str	r1, [r0, #0]
}
   1b910:	e7f6      	b.n	1b900 <net_buf_slist_put+0x32>

0001b912 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1b912:	b510      	push	{r4, lr}
   1b914:	4684      	mov	ip, r0
	__asm__ volatile(
   1b916:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b91a:	f3ef 8e11 	mrs	lr, BASEPRI
   1b91e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b922:	f3bf 8f6f 	isb	sy
	return list->head;
   1b926:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1b928:	b328      	cbz	r0, 1b976 <net_buf_slist_get+0x64>
	return node->next;
   1b92a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1b92c:	f8cc 3000 	str.w	r3, [ip]
	return list->tail;
   1b930:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b934:	4290      	cmp	r0, r2
   1b936:	d001      	beq.n	1b93c <net_buf_slist_get+0x2a>
   1b938:	4602      	mov	r2, r0
   1b93a:	e008      	b.n	1b94e <net_buf_slist_get+0x3c>
	list->tail = node;
   1b93c:	f8cc 3004 	str.w	r3, [ip, #4]
}
   1b940:	e7fa      	b.n	1b938 <net_buf_slist_get+0x26>
	buf = (void *)sys_slist_get(list);

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
   1b942:	6013      	str	r3, [r2, #0]
			__ASSERT_NO_MSG(frag->frags);

			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
   1b944:	7951      	ldrb	r1, [r2, #5]
   1b946:	f021 0101 	bic.w	r1, r1, #1
   1b94a:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b94c:	461a      	mov	r2, r3
   1b94e:	7953      	ldrb	r3, [r2, #5]
   1b950:	f013 0f01 	tst.w	r3, #1
   1b954:	d00d      	beq.n	1b972 <net_buf_slist_get+0x60>
	return list->head;
   1b956:	f8dc 3000 	ldr.w	r3, [ip]
Z_GENLIST_GET(slist, snode)
   1b95a:	2b00      	cmp	r3, #0
   1b95c:	d0f1      	beq.n	1b942 <net_buf_slist_get+0x30>
	return node->next;
   1b95e:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1b960:	f8cc 1000 	str.w	r1, [ip]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b964:	f8dc 4004 	ldr.w	r4, [ip, #4]
   1b968:	42a3      	cmp	r3, r4
   1b96a:	d1ea      	bne.n	1b942 <net_buf_slist_get+0x30>
	list->tail = node;
   1b96c:	f8cc 1004 	str.w	r1, [ip, #4]
}
   1b970:	e7e7      	b.n	1b942 <net_buf_slist_get+0x30>
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1b972:	2300      	movs	r3, #0
   1b974:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1b976:	f38e 8811 	msr	BASEPRI, lr
   1b97a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1b97e:	bd10      	pop	{r4, pc}

0001b980 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1b980:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1b982:	460a      	mov	r2, r1
   1b984:	e004      	b.n	1b990 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1b986:	7953      	ldrb	r3, [r2, #5]
   1b988:	f043 0301 	orr.w	r3, r3, #1
   1b98c:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b98e:	4622      	mov	r2, r4
   1b990:	6814      	ldr	r4, [r2, #0]
   1b992:	2c00      	cmp	r4, #0
   1b994:	d1f7      	bne.n	1b986 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1b996:	f002 fa2b 	bl	1ddf0 <k_queue_append_list>
}
   1b99a:	bd10      	pop	{r4, pc}

0001b99c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1b99c:	b538      	push	{r3, r4, r5, lr}
   1b99e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   1b9a0:	e00a      	b.n	1b9b8 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   1b9a2:	2300      	movs	r3, #0
   1b9a4:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1b9a6:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1b9a8:	79a0      	ldrb	r0, [r4, #6]
   1b9aa:	f7f7 f84d 	bl	12a48 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1b9ae:	6a03      	ldr	r3, [r0, #32]
   1b9b0:	b193      	cbz	r3, 1b9d8 <net_buf_unref+0x3c>
			pool->destroy(buf);
   1b9b2:	4620      	mov	r0, r4
   1b9b4:	4798      	blx	r3
{
   1b9b6:	462c      	mov	r4, r5
	while (buf) {
   1b9b8:	b1ac      	cbz	r4, 1b9e6 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   1b9ba:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1b9bc:	7923      	ldrb	r3, [r4, #4]
   1b9be:	3b01      	subs	r3, #1
   1b9c0:	b2db      	uxtb	r3, r3
   1b9c2:	7123      	strb	r3, [r4, #4]
   1b9c4:	b97b      	cbnz	r3, 1b9e6 <net_buf_unref+0x4a>
		if (buf->__buf) {
   1b9c6:	6921      	ldr	r1, [r4, #16]
   1b9c8:	2900      	cmp	r1, #0
   1b9ca:	d0ea      	beq.n	1b9a2 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   1b9cc:	4620      	mov	r0, r4
   1b9ce:	f7ff fe9b 	bl	1b708 <data_unref>
			buf->__buf = NULL;
   1b9d2:	2300      	movs	r3, #0
   1b9d4:	6123      	str	r3, [r4, #16]
   1b9d6:	e7e4      	b.n	1b9a2 <net_buf_unref+0x6>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b9d8:	79a0      	ldrb	r0, [r4, #6]
   1b9da:	f7f7 f835 	bl	12a48 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1b9de:	4621      	mov	r1, r4
   1b9e0:	f002 f9fb 	bl	1ddda <k_queue_prepend>
}
   1b9e4:	e7e7      	b.n	1b9b6 <net_buf_unref+0x1a>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1b9e6:	bd38      	pop	{r3, r4, r5, pc}

0001b9e8 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b9e8:	7902      	ldrb	r2, [r0, #4]
   1b9ea:	3201      	adds	r2, #1
   1b9ec:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1b9ee:	4770      	bx	lr

0001b9f0 <net_buf_simple_add>:
	return buf->data + buf->len;
   1b9f0:	6802      	ldr	r2, [r0, #0]
   1b9f2:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1b9f4:	4419      	add	r1, r3
   1b9f6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1b9f8:	18d0      	adds	r0, r2, r3
   1b9fa:	4770      	bx	lr

0001b9fc <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1b9fc:	b538      	push	{r3, r4, r5, lr}
   1b9fe:	460d      	mov	r5, r1
   1ba00:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1ba02:	4611      	mov	r1, r2
   1ba04:	f7ff fff4 	bl	1b9f0 <net_buf_simple_add>
   1ba08:	4622      	mov	r2, r4
   1ba0a:	4629      	mov	r1, r5
   1ba0c:	f7ff fc29 	bl	1b262 <memcpy>
}
   1ba10:	bd38      	pop	{r3, r4, r5, pc}

0001ba12 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1ba12:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1ba14:	8882      	ldrh	r2, [r0, #4]
   1ba16:	1a52      	subs	r2, r2, r1
   1ba18:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1ba1a:	6800      	ldr	r0, [r0, #0]
   1ba1c:	4408      	add	r0, r1
   1ba1e:	6018      	str	r0, [r3, #0]
}
   1ba20:	4770      	bx	lr

0001ba22 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1ba22:	4603      	mov	r3, r0
	void *data = buf->data;
   1ba24:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1ba26:	889a      	ldrh	r2, [r3, #4]
   1ba28:	1a52      	subs	r2, r2, r1
   1ba2a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1ba2c:	4401      	add	r1, r0
   1ba2e:	6019      	str	r1, [r3, #0]

	return data;
}
   1ba30:	4770      	bx	lr

0001ba32 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1ba32:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1ba34:	6803      	ldr	r3, [r0, #0]
   1ba36:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1ba38:	2101      	movs	r1, #1
   1ba3a:	f7ff ffea 	bl	1ba12 <net_buf_simple_pull>

	return val;
}
   1ba3e:	4620      	mov	r0, r4
   1ba40:	bd10      	pop	{r4, pc}

0001ba42 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1ba42:	6802      	ldr	r2, [r0, #0]
   1ba44:	6880      	ldr	r0, [r0, #8]
}
   1ba46:	1a10      	subs	r0, r2, r0
   1ba48:	4770      	bx	lr

0001ba4a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1ba4a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1ba4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1ba50:	0089      	lsls	r1, r1, #2
   1ba52:	3138      	adds	r1, #56	; 0x38
}
   1ba54:	4408      	add	r0, r1
   1ba56:	4770      	bx	lr

0001ba58 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1ba58:	6840      	ldr	r0, [r0, #4]
}
   1ba5a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1ba5e:	4770      	bx	lr

0001ba60 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1ba60:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1ba62:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   1ba66:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1ba6a:	4770      	bx	lr

0001ba6c <get_status>:
{
   1ba6c:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1ba6e:	b2c9      	uxtb	r1, r1
   1ba70:	f7ff ffeb 	bl	1ba4a <get_sub_data>
   1ba74:	6880      	ldr	r0, [r0, #8]
}
   1ba76:	f000 0007 	and.w	r0, r0, #7
   1ba7a:	bd08      	pop	{r3, pc}

0001ba7c <set_off_state>:
	__asm__ volatile(
   1ba7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba80:	f3ef 8211 	mrs	r2, BASEPRI
   1ba84:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba88:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ba8c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1ba8e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1ba92:	d001      	beq.n	1ba98 <set_off_state+0x1c>
   1ba94:	428b      	cmp	r3, r1
   1ba96:	d107      	bne.n	1baa8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1ba98:	2301      	movs	r3, #1
   1ba9a:	6003      	str	r3, [r0, #0]
	int err = 0;
   1ba9c:	2000      	movs	r0, #0
	__asm__ volatile(
   1ba9e:	f382 8811 	msr	BASEPRI, r2
   1baa2:	f3bf 8f6f 	isb	sy
}
   1baa6:	4770      	bx	lr
		err = -EPERM;
   1baa8:	f04f 30ff 	mov.w	r0, #4294967295
   1baac:	e7f7      	b.n	1ba9e <set_off_state+0x22>

0001baae <set_starting_state>:
	__asm__ volatile(
   1baae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bab2:	f3ef 8211 	mrs	r2, BASEPRI
   1bab6:	f383 8812 	msr	BASEPRI_MAX, r3
   1baba:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1babe:	6803      	ldr	r3, [r0, #0]
   1bac0:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1bac4:	f003 0307 	and.w	r3, r3, #7
   1bac8:	2b01      	cmp	r3, #1
   1baca:	d008      	beq.n	1bade <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   1bacc:	458c      	cmp	ip, r1
   1bace:	d009      	beq.n	1bae4 <set_starting_state+0x36>
		err = -EPERM;
   1bad0:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1bad4:	f382 8811 	msr	BASEPRI, r2
   1bad8:	f3bf 8f6f 	isb	sy
}
   1badc:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1bade:	6001      	str	r1, [r0, #0]
	int err = 0;
   1bae0:	2000      	movs	r0, #0
   1bae2:	e7f7      	b.n	1bad4 <set_starting_state+0x26>
		err = -EALREADY;
   1bae4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1bae8:	e7f4      	b.n	1bad4 <set_starting_state+0x26>

0001baea <set_on_state>:
	__asm__ volatile(
   1baea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1baee:	f3ef 8211 	mrs	r2, BASEPRI
   1baf2:	f383 8812 	msr	BASEPRI_MAX, r3
   1baf6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1bafa:	6803      	ldr	r3, [r0, #0]
   1bafc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1bb00:	f043 0302 	orr.w	r3, r3, #2
   1bb04:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1bb06:	f382 8811 	msr	BASEPRI, r2
   1bb0a:	f3bf 8f6f 	isb	sy
}
   1bb0e:	4770      	bx	lr

0001bb10 <clkstarted_handle>:
{
   1bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb12:	4606      	mov	r6, r0
   1bb14:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1bb16:	f7ff ff98 	bl	1ba4a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1bb1a:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1bb1c:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1bb1e:	2300      	movs	r3, #0
   1bb20:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1bb24:	f7ff ffe1 	bl	1baea <set_on_state>
	if (callback) {
   1bb28:	b11d      	cbz	r5, 1bb32 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1bb2a:	463a      	mov	r2, r7
   1bb2c:	4621      	mov	r1, r4
   1bb2e:	4630      	mov	r0, r6
   1bb30:	47a8      	blx	r5
}
   1bb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bb34 <stop>:
{
   1bb34:	b570      	push	{r4, r5, r6, lr}
   1bb36:	4606      	mov	r6, r0
   1bb38:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1bb3a:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1bb3c:	4621      	mov	r1, r4
   1bb3e:	f7ff ff84 	bl	1ba4a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1bb42:	4629      	mov	r1, r5
   1bb44:	3008      	adds	r0, #8
   1bb46:	f7ff ff99 	bl	1ba7c <set_off_state>
	if (err < 0) {
   1bb4a:	2800      	cmp	r0, #0
   1bb4c:	db06      	blt.n	1bb5c <stop+0x28>
	get_sub_config(dev, type)->stop();
   1bb4e:	4621      	mov	r1, r4
   1bb50:	4630      	mov	r0, r6
   1bb52:	f7ff ff81 	bl	1ba58 <get_sub_config>
   1bb56:	6843      	ldr	r3, [r0, #4]
   1bb58:	4798      	blx	r3
	return 0;
   1bb5a:	2000      	movs	r0, #0
}
   1bb5c:	bd70      	pop	{r4, r5, r6, pc}

0001bb5e <api_stop>:
{
   1bb5e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1bb60:	2280      	movs	r2, #128	; 0x80
   1bb62:	f7ff ffe7 	bl	1bb34 <stop>
}
   1bb66:	bd08      	pop	{r3, pc}

0001bb68 <async_start>:
{
   1bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb6c:	4606      	mov	r6, r0
   1bb6e:	4690      	mov	r8, r2
   1bb70:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1bb72:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1bb74:	4629      	mov	r1, r5
   1bb76:	f7ff ff68 	bl	1ba4a <get_sub_data>
   1bb7a:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1bb7c:	9906      	ldr	r1, [sp, #24]
   1bb7e:	3008      	adds	r0, #8
   1bb80:	f7ff ff95 	bl	1baae <set_starting_state>
	if (err < 0) {
   1bb84:	2800      	cmp	r0, #0
   1bb86:	db09      	blt.n	1bb9c <async_start+0x34>
	subdata->cb = cb;
   1bb88:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1bb8c:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1bb8e:	4629      	mov	r1, r5
   1bb90:	4630      	mov	r0, r6
   1bb92:	f7ff ff61 	bl	1ba58 <get_sub_config>
   1bb96:	6803      	ldr	r3, [r0, #0]
   1bb98:	4798      	blx	r3
	return 0;
   1bb9a:	2000      	movs	r0, #0
}
   1bb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bba0 <api_start>:
{
   1bba0:	b510      	push	{r4, lr}
   1bba2:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1bba4:	2480      	movs	r4, #128	; 0x80
   1bba6:	9400      	str	r4, [sp, #0]
   1bba8:	f7ff ffde 	bl	1bb68 <async_start>
}
   1bbac:	b002      	add	sp, #8
   1bbae:	bd10      	pop	{r4, pc}

0001bbb0 <onoff_started_callback>:
{
   1bbb0:	b510      	push	{r4, lr}
   1bbb2:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1bbb4:	b2c9      	uxtb	r1, r1
   1bbb6:	f7ff ff53 	bl	1ba60 <get_onoff_manager>
	notify(mgr, 0);
   1bbba:	2100      	movs	r1, #0
   1bbbc:	47a0      	blx	r4
}
   1bbbe:	bd10      	pop	{r4, pc}

0001bbc0 <hfclk_start>:
{
   1bbc0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1bbc2:	2001      	movs	r0, #1
   1bbc4:	f7f8 fdce 	bl	14764 <nrfx_clock_start>
}
   1bbc8:	bd08      	pop	{r3, pc}

0001bbca <lfclk_start>:
{
   1bbca:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1bbcc:	2000      	movs	r0, #0
   1bbce:	f7f8 fdc9 	bl	14764 <nrfx_clock_start>
}
   1bbd2:	bd08      	pop	{r3, pc}

0001bbd4 <hfclk_stop>:
{
   1bbd4:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1bbd6:	2001      	movs	r0, #1
   1bbd8:	f001 fd5d 	bl	1d696 <nrfx_clock_stop>
}
   1bbdc:	bd08      	pop	{r3, pc}

0001bbde <lfclk_stop>:
{
   1bbde:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1bbe0:	2000      	movs	r0, #0
   1bbe2:	f001 fd58 	bl	1d696 <nrfx_clock_stop>
}
   1bbe6:	bd08      	pop	{r3, pc}

0001bbe8 <blocking_start_callback>:
{
   1bbe8:	b508      	push	{r3, lr}
   1bbea:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1bbec:	f7fa fdee 	bl	167cc <z_impl_k_sem_give>
}
   1bbf0:	bd08      	pop	{r3, pc}

0001bbf2 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bbf2:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   1bbf6:	0580      	lsls	r0, r0, #22
   1bbf8:	0d80      	lsrs	r0, r0, #22
   1bbfa:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   1bbfe:	d033      	beq.n	1bc68 <get_drive+0x76>
   1bc00:	d816      	bhi.n	1bc30 <get_drive+0x3e>
   1bc02:	2806      	cmp	r0, #6
   1bc04:	d02c      	beq.n	1bc60 <get_drive+0x6e>
   1bc06:	d906      	bls.n	1bc16 <get_drive+0x24>
   1bc08:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1bc0c:	d10d      	bne.n	1bc2a <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   1bc0e:	2301      	movs	r3, #1
   1bc10:	700b      	strb	r3, [r1, #0]
	return 0;
   1bc12:	2000      	movs	r0, #0
		break;
   1bc14:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bc16:	b300      	cbz	r0, 1bc5a <get_drive+0x68>
   1bc18:	2802      	cmp	r0, #2
   1bc1a:	d103      	bne.n	1bc24 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   1bc1c:	2304      	movs	r3, #4
   1bc1e:	700b      	strb	r3, [r1, #0]
	return 0;
   1bc20:	2000      	movs	r0, #0
		break;
   1bc22:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bc24:	f06f 0015 	mvn.w	r0, #21
   1bc28:	4770      	bx	lr
   1bc2a:	f06f 0015 	mvn.w	r0, #21
   1bc2e:	4770      	bx	lr
   1bc30:	f240 2302 	movw	r3, #514	; 0x202
   1bc34:	4298      	cmp	r0, r3
   1bc36:	d01b      	beq.n	1bc70 <get_drive+0x7e>
   1bc38:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   1bc3c:	d103      	bne.n	1bc46 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   1bc3e:	2303      	movs	r3, #3
   1bc40:	700b      	strb	r3, [r1, #0]
	return 0;
   1bc42:	2000      	movs	r0, #0
		break;
   1bc44:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bc46:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1bc4a:	d103      	bne.n	1bc54 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   1bc4c:	2302      	movs	r3, #2
   1bc4e:	700b      	strb	r3, [r1, #0]
	return 0;
   1bc50:	2000      	movs	r0, #0
		break;
   1bc52:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bc54:	f06f 0015 	mvn.w	r0, #21
   1bc58:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1bc5a:	2000      	movs	r0, #0
   1bc5c:	7008      	strb	r0, [r1, #0]
		break;
   1bc5e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1bc60:	2306      	movs	r3, #6
   1bc62:	700b      	strb	r3, [r1, #0]
	return 0;
   1bc64:	2000      	movs	r0, #0
		break;
   1bc66:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1bc68:	2307      	movs	r3, #7
   1bc6a:	700b      	strb	r3, [r1, #0]
	return 0;
   1bc6c:	2000      	movs	r0, #0
		break;
   1bc6e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   1bc70:	2305      	movs	r3, #5
   1bc72:	700b      	strb	r3, [r1, #0]
	return 0;
   1bc74:	2000      	movs	r0, #0
}
   1bc76:	4770      	bx	lr

0001bc78 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   1bc78:	f010 0f10 	tst.w	r0, #16
   1bc7c:	d104      	bne.n	1bc88 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   1bc7e:	f010 0f20 	tst.w	r0, #32
   1bc82:	d103      	bne.n	1bc8c <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1bc84:	2000      	movs	r0, #0
   1bc86:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   1bc88:	2003      	movs	r0, #3
   1bc8a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   1bc8c:	2001      	movs	r0, #1
}
   1bc8e:	4770      	bx	lr

0001bc90 <gpio_nrfx_port_get_raw>:
	return port->config;
   1bc90:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bc92:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1bc94:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1bc98:	600b      	str	r3, [r1, #0]
}
   1bc9a:	2000      	movs	r0, #0
   1bc9c:	4770      	bx	lr

0001bc9e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   1bc9e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bca0:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1bca2:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1bca6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1bcaa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1bcae:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1bcb2:	2000      	movs	r0, #0
   1bcb4:	4770      	bx	lr

0001bcb6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1bcb6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bcb8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1bcba:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   1bcbe:	2000      	movs	r0, #0
   1bcc0:	4770      	bx	lr

0001bcc2 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1bcc2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bcc4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1bcc6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1bcca:	2000      	movs	r0, #0
   1bccc:	4770      	bx	lr

0001bcce <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1bcce:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bcd0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1bcd2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1bcd6:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1bcda:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1bcdc:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1bce0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1bce4:	2000      	movs	r0, #0
   1bce6:	4770      	bx	lr

0001bce8 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   1bce8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   1bcec:	d007      	beq.n	1bcfe <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1bcee:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   1bcf2:	d00d      	beq.n	1bd10 <get_trigger+0x28>
   1bcf4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1bcf8:	d008      	beq.n	1bd0c <get_trigger+0x24>
   1bcfa:	2001      	movs	r0, #1
}
   1bcfc:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1bcfe:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1bd02:	d001      	beq.n	1bd08 <get_trigger+0x20>
   1bd04:	2005      	movs	r0, #5
   1bd06:	4770      	bx	lr
   1bd08:	2004      	movs	r0, #4
   1bd0a:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1bd0c:	2002      	movs	r0, #2
   1bd0e:	4770      	bx	lr
   1bd10:	2003      	movs	r0, #3
   1bd12:	4770      	bx	lr

0001bd14 <gpio_nrfx_manage_callback>:
{
   1bd14:	b410      	push	{r4}
	return port->data;
   1bd16:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1bd18:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
   1bd1c:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1bd1e:	b1fb      	cbz	r3, 1bd60 <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd20:	2000      	movs	r0, #0
   1bd22:	e00d      	b.n	1bd40 <gpio_nrfx_manage_callback+0x2c>
	return node->next;
   1bd24:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1bd26:	6063      	str	r3, [r4, #4]
	return list->tail;
   1bd28:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bd2c:	4281      	cmp	r1, r0
   1bd2e:	d112      	bne.n	1bd56 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   1bd30:	f8cc 3004 	str.w	r3, [ip, #4]
}
   1bd34:	e00f      	b.n	1bd56 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   1bd36:	f8cc 0004 	str.w	r0, [ip, #4]
}
   1bd3a:	e00c      	b.n	1bd56 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd3c:	4618      	mov	r0, r3
   1bd3e:	681b      	ldr	r3, [r3, #0]
   1bd40:	b163      	cbz	r3, 1bd5c <gpio_nrfx_manage_callback+0x48>
   1bd42:	4299      	cmp	r1, r3
   1bd44:	d1fa      	bne.n	1bd3c <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
   1bd46:	2800      	cmp	r0, #0
   1bd48:	d0ec      	beq.n	1bd24 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   1bd4a:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   1bd4c:	6003      	str	r3, [r0, #0]
	return list->tail;
   1bd4e:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bd52:	4299      	cmp	r1, r3
   1bd54:	d0ef      	beq.n	1bd36 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
   1bd56:	2300      	movs	r3, #0
   1bd58:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd5a:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1bd5c:	b903      	cbnz	r3, 1bd60 <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
   1bd5e:	b162      	cbz	r2, 1bd7a <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
   1bd60:	b172      	cbz	r2, 1bd80 <gpio_nrfx_manage_callback+0x6c>
	return list->head;
   1bd62:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1bd64:	600b      	str	r3, [r1, #0]
	list->head = node;
   1bd66:	6061      	str	r1, [r4, #4]
	return list->tail;
   1bd68:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bd6c:	b10b      	cbz	r3, 1bd72 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1bd6e:	2000      	movs	r0, #0
   1bd70:	e007      	b.n	1bd82 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
   1bd72:	f8cc 1004 	str.w	r1, [ip, #4]
   1bd76:	2000      	movs	r0, #0
}
   1bd78:	e003      	b.n	1bd82 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
   1bd7a:	f06f 0015 	mvn.w	r0, #21
   1bd7e:	e000      	b.n	1bd82 <gpio_nrfx_manage_callback+0x6e>
	return 0;
   1bd80:	2000      	movs	r0, #0
}
   1bd82:	bc10      	pop	{r4}
   1bd84:	4770      	bx	lr

0001bd86 <nrfx_gpio_handler>:
{
   1bd86:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   1bd88:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   1bd8c:	0940      	lsrs	r0, r0, #5
   1bd8e:	f7f7 f831 	bl	12df4 <get_dev>
	if (port == NULL) {
   1bd92:	b1d8      	cbz	r0, 1bdcc <nrfx_gpio_handler+0x46>
   1bd94:	4606      	mov	r6, r0
	return port->data;
   1bd96:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1bd98:	2501      	movs	r5, #1
   1bd9a:	40a5      	lsls	r5, r4
	return list->head;
   1bd9c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1bd9e:	b119      	cbz	r1, 1bda8 <nrfx_gpio_handler+0x22>
   1bda0:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bda2:	b149      	cbz	r1, 1bdb8 <nrfx_gpio_handler+0x32>
	return node->next;
   1bda4:	680c      	ldr	r4, [r1, #0]
   1bda6:	e007      	b.n	1bdb8 <nrfx_gpio_handler+0x32>
   1bda8:	460c      	mov	r4, r1
   1bdaa:	e005      	b.n	1bdb8 <nrfx_gpio_handler+0x32>
   1bdac:	b164      	cbz	r4, 1bdc8 <nrfx_gpio_handler+0x42>
   1bdae:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bdb0:	b104      	cbz	r4, 1bdb4 <nrfx_gpio_handler+0x2e>
	return node->next;
   1bdb2:	6823      	ldr	r3, [r4, #0]
   1bdb4:	4621      	mov	r1, r4
   1bdb6:	461c      	mov	r4, r3
   1bdb8:	b141      	cbz	r1, 1bdcc <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   1bdba:	688a      	ldr	r2, [r1, #8]
   1bdbc:	402a      	ands	r2, r5
   1bdbe:	d0f5      	beq.n	1bdac <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1bdc0:	684b      	ldr	r3, [r1, #4]
   1bdc2:	4630      	mov	r0, r6
   1bdc4:	4798      	blx	r3
   1bdc6:	e7f1      	b.n	1bdac <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1bdc8:	4623      	mov	r3, r4
   1bdca:	e7f3      	b.n	1bdb4 <nrfx_gpio_handler+0x2e>
}
   1bdcc:	bd70      	pop	{r4, r5, r6, pc}

0001bdce <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
   1bdce:	b508      	push	{r3, lr}
   1bdd0:	2200      	movs	r2, #0
   1bdd2:	2101      	movs	r1, #1
   1bdd4:	2004      	movs	r0, #4
   1bdd6:	f7f4 ffb5 	bl	10d44 <z_arm_irq_priority_set>
   1bdda:	bd08      	pop	{r3, pc}

0001bddc <spi_nrfx_release>:
{
   1bddc:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1bdde:	6904      	ldr	r4, [r0, #16]
	return !!(ctx->config == config);
   1bde0:	6823      	ldr	r3, [r4, #0]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1bde2:	428b      	cmp	r3, r1
   1bde4:	d131      	bne.n	1be4a <spi_nrfx_release+0x6e>
	if (dev_data->busy) {
   1bde6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1bdea:	2b00      	cmp	r3, #0
   1bdec:	d130      	bne.n	1be50 <spi_nrfx_release+0x74>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1bdee:	6823      	ldr	r3, [r4, #0]
   1bdf0:	b1c3      	cbz	r3, 1be24 <spi_nrfx_release+0x48>
   1bdf2:	689b      	ldr	r3, [r3, #8]
   1bdf4:	b1b3      	cbz	r3, 1be24 <spi_nrfx_release+0x48>
   1bdf6:	681a      	ldr	r2, [r3, #0]
   1bdf8:	b1a2      	cbz	r2, 1be24 <spi_nrfx_release+0x48>
			k_busy_wait(ctx->config->cs->delay);
   1bdfa:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1bdfc:	f002 fa5f 	bl	1e2be <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1be00:	6823      	ldr	r3, [r4, #0]
   1be02:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1be04:	6818      	ldr	r0, [r3, #0]
   1be06:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1be08:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1be0a:	681a      	ldr	r2, [r3, #0]
   1be0c:	2301      	movs	r3, #1
   1be0e:	408b      	lsls	r3, r1
   1be10:	421a      	tst	r2, r3
   1be12:	d10b      	bne.n	1be2c <spi_nrfx_release+0x50>
   1be14:	2300      	movs	r3, #0
	if (value != 0)	{
   1be16:	b15b      	cbz	r3, 1be30 <spi_nrfx_release+0x54>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1be18:	2301      	movs	r3, #1
   1be1a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1be1e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1be20:	68db      	ldr	r3, [r3, #12]
   1be22:	4798      	blx	r3
	return sem->count;
   1be24:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1be26:	b153      	cbz	r3, 1be3e <spi_nrfx_release+0x62>
	return 0;
   1be28:	2000      	movs	r0, #0
}
   1be2a:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
   1be2c:	2301      	movs	r3, #1
   1be2e:	e7f2      	b.n	1be16 <spi_nrfx_release+0x3a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1be30:	2301      	movs	r3, #1
   1be32:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1be36:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1be38:	691b      	ldr	r3, [r3, #16]
   1be3a:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1be3c:	e7f2      	b.n	1be24 <spi_nrfx_release+0x48>
		ctx->owner = NULL;
   1be3e:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1be40:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1be44:	f7fa fcc2 	bl	167cc <z_impl_k_sem_give>
}
   1be48:	e7ee      	b.n	1be28 <spi_nrfx_release+0x4c>
		return -EINVAL;
   1be4a:	f06f 0015 	mvn.w	r0, #21
   1be4e:	e7ec      	b.n	1be2a <spi_nrfx_release+0x4e>
		return -EBUSY;
   1be50:	f06f 000f 	mvn.w	r0, #15
   1be54:	e7e9      	b.n	1be2a <spi_nrfx_release+0x4e>

0001be56 <transceive>:
{
   1be56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be5a:	4606      	mov	r6, r0
   1be5c:	460d      	mov	r5, r1
   1be5e:	4690      	mov	r8, r2
   1be60:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   1be62:	6904      	ldr	r4, [r0, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1be64:	888b      	ldrh	r3, [r1, #4]
   1be66:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1be6a:	d004      	beq.n	1be76 <transceive+0x20>
   1be6c:	69a3      	ldr	r3, [r4, #24]
   1be6e:	b913      	cbnz	r3, 1be76 <transceive+0x20>
		(ctx->owner == spi_cfg)) {
   1be70:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   1be72:	4299      	cmp	r1, r3
   1be74:	d00e      	beq.n	1be94 <transceive+0x3e>
	k_sem_take(&ctx->lock, K_FOREVER);
   1be76:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   1be7a:	f04f 32ff 	mov.w	r2, #4294967295
   1be7e:	f04f 33ff 	mov.w	r3, #4294967295
   1be82:	f7fa fccb 	bl	1681c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1be86:	6065      	str	r5, [r4, #4]
	ctx->asynchronous = asynchronous;
   1be88:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1be8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	ctx->signal = signal;
   1be90:	9b07      	ldr	r3, [sp, #28]
   1be92:	6463      	str	r3, [r4, #68]	; 0x44
	error = configure(dev, spi_cfg);
   1be94:	4629      	mov	r1, r5
   1be96:	4630      	mov	r0, r6
   1be98:	f7f7 f8c6 	bl	13028 <configure>
	if (error == 0) {
   1be9c:	4605      	mov	r5, r0
   1be9e:	b1a0      	cbz	r0, 1beca <transceive+0x74>
	if (status >= 0 && (ctx->config->operation & SPI_LOCK_ON)) {
   1bea0:	2d00      	cmp	r5, #0
   1bea2:	db04      	blt.n	1beae <transceive+0x58>
   1bea4:	6823      	ldr	r3, [r4, #0]
   1bea6:	889b      	ldrh	r3, [r3, #4]
   1bea8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1beac:	d10a      	bne.n	1bec4 <transceive+0x6e>
	if (!ctx->asynchronous || (status < 0)) {
   1beae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1beb2:	b10b      	cbz	r3, 1beb8 <transceive+0x62>
   1beb4:	2d00      	cmp	r5, #0
   1beb6:	da05      	bge.n	1bec4 <transceive+0x6e>
		ctx->owner = NULL;
   1beb8:	2300      	movs	r3, #0
   1beba:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1bebc:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1bec0:	f7fa fc84 	bl	167cc <z_impl_k_sem_give>
}
   1bec4:	4628      	mov	r0, r5
   1bec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   1beca:	2301      	movs	r3, #1
   1becc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1bed0:	f1b8 0f00 	cmp.w	r8, #0
   1bed4:	d015      	beq.n	1bf02 <transceive+0xac>
   1bed6:	f8d8 3000 	ldr.w	r3, [r8]
   1beda:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1bedc:	b19b      	cbz	r3, 1bf06 <transceive+0xb0>
   1bede:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1bee2:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1bee4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1bee8:	f104 0350 	add.w	r3, r4, #80	; 0x50
	while (*count) {
   1beec:	681a      	ldr	r2, [r3, #0]
   1beee:	b182      	cbz	r2, 1bf12 <transceive+0xbc>
		if (((*current)->len / dfs) != 0) {
   1bef0:	680a      	ldr	r2, [r1, #0]
   1bef2:	6850      	ldr	r0, [r2, #4]
   1bef4:	b948      	cbnz	r0, 1bf0a <transceive+0xb4>
		++(*current);
   1bef6:	3208      	adds	r2, #8
   1bef8:	600a      	str	r2, [r1, #0]
		--(*count);
   1befa:	681a      	ldr	r2, [r3, #0]
   1befc:	3a01      	subs	r2, #1
   1befe:	601a      	str	r2, [r3, #0]
   1bf00:	e7f4      	b.n	1beec <transceive+0x96>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1bf02:	4643      	mov	r3, r8
   1bf04:	e7e9      	b.n	1beda <transceive+0x84>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1bf06:	2300      	movs	r3, #0
   1bf08:	e7eb      	b.n	1bee2 <transceive+0x8c>
			*buf_len = (*current)->len / dfs;
   1bf0a:	6620      	str	r0, [r4, #96]	; 0x60
			return (*current)->buf;
   1bf0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1bf0e:	681b      	ldr	r3, [r3, #0]
   1bf10:	e001      	b.n	1bf16 <transceive+0xc0>
	*buf_len = 0;
   1bf12:	2300      	movs	r3, #0
   1bf14:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->tx_buf = (const uint8_t *)
   1bf16:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1bf18:	b19f      	cbz	r7, 1bf42 <transceive+0xec>
   1bf1a:	683b      	ldr	r3, [r7, #0]
   1bf1c:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1bf1e:	b193      	cbz	r3, 1bf46 <transceive+0xf0>
   1bf20:	687b      	ldr	r3, [r7, #4]
   1bf22:	65a3      	str	r3, [r4, #88]	; 0x58
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1bf24:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1bf28:	f104 0258 	add.w	r2, r4, #88	; 0x58
	while (*count) {
   1bf2c:	6813      	ldr	r3, [r2, #0]
   1bf2e:	b183      	cbz	r3, 1bf52 <transceive+0xfc>
		if (((*current)->len / dfs) != 0) {
   1bf30:	680b      	ldr	r3, [r1, #0]
   1bf32:	6858      	ldr	r0, [r3, #4]
   1bf34:	b948      	cbnz	r0, 1bf4a <transceive+0xf4>
		++(*current);
   1bf36:	3308      	adds	r3, #8
   1bf38:	600b      	str	r3, [r1, #0]
		--(*count);
   1bf3a:	6813      	ldr	r3, [r2, #0]
   1bf3c:	3b01      	subs	r3, #1
   1bf3e:	6013      	str	r3, [r2, #0]
   1bf40:	e7f4      	b.n	1bf2c <transceive+0xd6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1bf42:	463b      	mov	r3, r7
   1bf44:	e7ea      	b.n	1bf1c <transceive+0xc6>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1bf46:	2300      	movs	r3, #0
   1bf48:	e7eb      	b.n	1bf22 <transceive+0xcc>
			*buf_len = (*current)->len / dfs;
   1bf4a:	66a0      	str	r0, [r4, #104]	; 0x68
			return (*current)->buf;
   1bf4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1bf4e:	681b      	ldr	r3, [r3, #0]
   1bf50:	e000      	b.n	1bf54 <transceive+0xfe>
	*buf_len = 0;
   1bf52:	66a3      	str	r3, [r4, #104]	; 0x68
	ctx->rx_buf = (uint8_t *)
   1bf54:	6663      	str	r3, [r4, #100]	; 0x64
	ctx->sync_status = 0;
   1bf56:	2300      	movs	r3, #0
   1bf58:	6423      	str	r3, [r4, #64]	; 0x40
	ctx->recv_frames = 0;
   1bf5a:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1bf5c:	6823      	ldr	r3, [r4, #0]
   1bf5e:	b1bb      	cbz	r3, 1bf90 <transceive+0x13a>
   1bf60:	689b      	ldr	r3, [r3, #8]
   1bf62:	b1ab      	cbz	r3, 1bf90 <transceive+0x13a>
   1bf64:	6818      	ldr	r0, [r3, #0]
   1bf66:	b198      	cbz	r0, 1bf90 <transceive+0x13a>
	return gpio_pin_set(spec->port, spec->pin, value);
   1bf68:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1bf6a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1bf6c:	681a      	ldr	r2, [r3, #0]
   1bf6e:	2301      	movs	r3, #1
   1bf70:	408b      	lsls	r3, r1
   1bf72:	421a      	tst	r2, r3
   1bf74:	d125      	bne.n	1bfc2 <transceive+0x16c>
   1bf76:	2301      	movs	r3, #1
	if (value != 0)	{
   1bf78:	b32b      	cbz	r3, 1bfc6 <transceive+0x170>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1bf7a:	2301      	movs	r3, #1
   1bf7c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1bf80:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1bf82:	68db      	ldr	r3, [r3, #12]
   1bf84:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
   1bf86:	6823      	ldr	r3, [r4, #0]
   1bf88:	689b      	ldr	r3, [r3, #8]
   1bf8a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1bf8c:	f002 f997 	bl	1e2be <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
   1bf90:	4630      	mov	r0, r6
   1bf92:	f7f7 f8eb 	bl	1316c <transfer_next_chunk>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1bf96:	6822      	ldr	r2, [r4, #0]
   1bf98:	8893      	ldrh	r3, [r2, #4]
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
   1bf9a:	f013 0f01 	tst.w	r3, #1
   1bf9e:	d019      	beq.n	1bfd4 <transceive+0x17e>
		timeout = K_FOREVER;
   1bfa0:	f04f 32ff 	mov.w	r2, #4294967295
   1bfa4:	4613      	mov	r3, r2
	if (!ctx->asynchronous) {
   1bfa6:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   1bfaa:	b381      	cbz	r1, 1c00e <transceive+0x1b8>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1bfac:	6823      	ldr	r3, [r4, #0]
   1bfae:	889b      	ldrh	r3, [r3, #4]
	if (spi_context_is_slave(ctx) && !status) {
   1bfb0:	f013 0f01 	tst.w	r3, #1
   1bfb4:	f43f af74 	beq.w	1bea0 <transceive+0x4a>
   1bfb8:	2d00      	cmp	r5, #0
   1bfba:	f47f af71 	bne.w	1bea0 <transceive+0x4a>
		return ctx->recv_frames;
   1bfbe:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   1bfc0:	e76e      	b.n	1bea0 <transceive+0x4a>
		value = (value != 0) ? 0 : 1;
   1bfc2:	462b      	mov	r3, r5
   1bfc4:	e7d8      	b.n	1bf78 <transceive+0x122>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1bfc6:	2301      	movs	r3, #1
   1bfc8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1bfcc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1bfce:	691b      	ldr	r3, [r3, #16]
   1bfd0:	4798      	blx	r3
   1bfd2:	e7d8      	b.n	1bf86 <transceive+0x130>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1bfd4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1bfd6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1bfd8:	4283      	cmp	r3, r0
   1bfda:	bf38      	it	cc
   1bfdc:	4603      	movcc	r3, r0
   1bfde:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
   1bfe2:	fb03 f000 	mul.w	r0, r3, r0
			     ctx->config->frequency;
   1bfe6:	6813      	ldr	r3, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1bfe8:	fbb0 f0f3 	udiv	r0, r0, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1bfec:	30c8      	adds	r0, #200	; 0xc8
   1bfee:	0c41      	lsrs	r1, r0, #17
   1bff0:	03c0      	lsls	r0, r0, #15
   1bff2:	f240 33e7 	movw	r3, #999	; 0x3e7
   1bff6:	18c0      	adds	r0, r0, r3
   1bff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bffc:	f04f 0300 	mov.w	r3, #0
   1c000:	f141 0100 	adc.w	r1, r1, #0
   1c004:	f7e4 f87c 	bl	100 <__aeabi_uldivmod>
		timeout = K_MSEC(timeout_ms);
   1c008:	4602      	mov	r2, r0
   1c00a:	460b      	mov	r3, r1
   1c00c:	e7cb      	b.n	1bfa6 <transceive+0x150>
		if (k_sem_take(&ctx->sync, timeout)) {
   1c00e:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   1c012:	f7fa fc03 	bl	1681c <z_impl_k_sem_take>
   1c016:	b908      	cbnz	r0, 1c01c <transceive+0x1c6>
		status = ctx->sync_status;
   1c018:	6c25      	ldr	r5, [r4, #64]	; 0x40
   1c01a:	e7c7      	b.n	1bfac <transceive+0x156>
			return -ETIMEDOUT;
   1c01c:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1c020:	e73e      	b.n	1bea0 <transceive+0x4a>

0001c022 <spi_nrfx_transceive_async>:
{
   1c022:	b510      	push	{r4, lr}
   1c024:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, async);
   1c026:	9c04      	ldr	r4, [sp, #16]
   1c028:	9401      	str	r4, [sp, #4]
   1c02a:	2401      	movs	r4, #1
   1c02c:	9400      	str	r4, [sp, #0]
   1c02e:	f7ff ff12 	bl	1be56 <transceive>
}
   1c032:	b002      	add	sp, #8
   1c034:	bd10      	pop	{r4, pc}

0001c036 <spi_nrfx_transceive>:
{
   1c036:	b510      	push	{r4, lr}
   1c038:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   1c03a:	2400      	movs	r4, #0
   1c03c:	9401      	str	r4, [sp, #4]
   1c03e:	9400      	str	r4, [sp, #0]
   1c040:	f7ff ff09 	bl	1be56 <transceive>
}
   1c044:	b002      	add	sp, #8
   1c046:	bd10      	pop	{r4, pc}

0001c048 <event_handler>:
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1c048:	7803      	ldrb	r3, [r0, #0]
   1c04a:	2b00      	cmp	r3, #0
   1c04c:	d15e      	bne.n	1c10c <event_handler+0xc4>
{
   1c04e:	b510      	push	{r4, lr}
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c050:	6f4a      	ldr	r2, [r1, #116]	; 0x74
	if (!ctx->tx_len) {
   1c052:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   1c054:	b143      	cbz	r3, 1c068 <event_handler+0x20>
	if (len > ctx->tx_len) {
   1c056:	429a      	cmp	r2, r3
   1c058:	d806      	bhi.n	1c068 <event_handler+0x20>
	ctx->tx_len -= len;
   1c05a:	1a9b      	subs	r3, r3, r2
   1c05c:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->tx_len) {
   1c05e:	b1db      	cbz	r3, 1c098 <event_handler+0x50>
	} else if (ctx->tx_buf) {
   1c060:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
   1c062:	b10b      	cbz	r3, 1c068 <event_handler+0x20>
		ctx->tx_buf += dfs * len;
   1c064:	4413      	add	r3, r2
   1c066:	65cb      	str	r3, [r1, #92]	; 0x5c
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c068:	6f4a      	ldr	r2, [r1, #116]	; 0x74
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1c06a:	680b      	ldr	r3, [r1, #0]
   1c06c:	889b      	ldrh	r3, [r3, #4]
	if (spi_context_is_slave(ctx)) {
   1c06e:	f013 0f01 	tst.w	r3, #1
   1c072:	d002      	beq.n	1c07a <event_handler+0x32>
		ctx->recv_frames += len;
   1c074:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
   1c076:	4413      	add	r3, r2
   1c078:	66cb      	str	r3, [r1, #108]	; 0x6c
	if (!ctx->rx_len) {
   1c07a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1c07c:	b143      	cbz	r3, 1c090 <event_handler+0x48>
	if (len > ctx->rx_len) {
   1c07e:	429a      	cmp	r2, r3
   1c080:	d806      	bhi.n	1c090 <event_handler+0x48>
	ctx->rx_len -= len;
   1c082:	1a9b      	subs	r3, r3, r2
   1c084:	668b      	str	r3, [r1, #104]	; 0x68
	if (!ctx->rx_len) {
   1c086:	b323      	cbz	r3, 1c0d2 <event_handler+0x8a>
	} else if (ctx->rx_buf) {
   1c088:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1c08a:	b10b      	cbz	r3, 1c090 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1c08c:	4413      	add	r3, r2
   1c08e:	664b      	str	r3, [r1, #100]	; 0x64
		transfer_next_chunk(dev_data->dev);
   1c090:	6f08      	ldr	r0, [r1, #112]	; 0x70
   1c092:	f7f7 f86b 	bl	1316c <transfer_next_chunk>
}
   1c096:	bd10      	pop	{r4, pc}
		++ctx->current_tx;
   1c098:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1c09a:	3308      	adds	r3, #8
   1c09c:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->tx_count;
   1c09e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1c0a0:	3b01      	subs	r3, #1
   1c0a2:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_tx,
   1c0a4:	f101 004c 	add.w	r0, r1, #76	; 0x4c
   1c0a8:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
   1c0ac:	e004      	b.n	1c0b8 <event_handler+0x70>
		++(*current);
   1c0ae:	3308      	adds	r3, #8
   1c0b0:	6003      	str	r3, [r0, #0]
		--(*count);
   1c0b2:	6813      	ldr	r3, [r2, #0]
   1c0b4:	3b01      	subs	r3, #1
   1c0b6:	6013      	str	r3, [r2, #0]
	while (*count) {
   1c0b8:	6813      	ldr	r3, [r2, #0]
   1c0ba:	b13b      	cbz	r3, 1c0cc <event_handler+0x84>
		if (((*current)->len / dfs) != 0) {
   1c0bc:	6803      	ldr	r3, [r0, #0]
   1c0be:	685c      	ldr	r4, [r3, #4]
   1c0c0:	2c00      	cmp	r4, #0
   1c0c2:	d0f4      	beq.n	1c0ae <event_handler+0x66>
			*buf_len = (*current)->len / dfs;
   1c0c4:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
   1c0c6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1c0c8:	681b      	ldr	r3, [r3, #0]
   1c0ca:	e000      	b.n	1c0ce <event_handler+0x86>
	*buf_len = 0;
   1c0cc:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->tx_buf = (const uint8_t *)
   1c0ce:	65cb      	str	r3, [r1, #92]	; 0x5c
   1c0d0:	e7ca      	b.n	1c068 <event_handler+0x20>
		++ctx->current_rx;
   1c0d2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1c0d4:	3308      	adds	r3, #8
   1c0d6:	654b      	str	r3, [r1, #84]	; 0x54
		--ctx->rx_count;
   1c0d8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1c0da:	3b01      	subs	r3, #1
   1c0dc:	658b      	str	r3, [r1, #88]	; 0x58
			spi_context_get_next_buf(&ctx->current_rx,
   1c0de:	f101 0054 	add.w	r0, r1, #84	; 0x54
   1c0e2:	f101 0258 	add.w	r2, r1, #88	; 0x58
	while (*count) {
   1c0e6:	e004      	b.n	1c0f2 <event_handler+0xaa>
		++(*current);
   1c0e8:	3308      	adds	r3, #8
   1c0ea:	6003      	str	r3, [r0, #0]
		--(*count);
   1c0ec:	6813      	ldr	r3, [r2, #0]
   1c0ee:	3b01      	subs	r3, #1
   1c0f0:	6013      	str	r3, [r2, #0]
	while (*count) {
   1c0f2:	6813      	ldr	r3, [r2, #0]
   1c0f4:	b13b      	cbz	r3, 1c106 <event_handler+0xbe>
		if (((*current)->len / dfs) != 0) {
   1c0f6:	6803      	ldr	r3, [r0, #0]
   1c0f8:	685c      	ldr	r4, [r3, #4]
   1c0fa:	2c00      	cmp	r4, #0
   1c0fc:	d0f4      	beq.n	1c0e8 <event_handler+0xa0>
			*buf_len = (*current)->len / dfs;
   1c0fe:	668c      	str	r4, [r1, #104]	; 0x68
			return (*current)->buf;
   1c100:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1c102:	681b      	ldr	r3, [r3, #0]
   1c104:	e000      	b.n	1c108 <event_handler+0xc0>
	*buf_len = 0;
   1c106:	668b      	str	r3, [r1, #104]	; 0x68
		ctx->rx_buf = (uint8_t *)
   1c108:	664b      	str	r3, [r1, #100]	; 0x64
   1c10a:	e7c1      	b.n	1c090 <event_handler+0x48>
   1c10c:	4770      	bx	lr

0001c10e <spi_nrfx_init>:
{
   1c10e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c110:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1c112:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1c114:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c116:	6a26      	ldr	r6, [r4, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1c118:	aa01      	add	r2, sp, #4
   1c11a:	2100      	movs	r1, #0
   1c11c:	4630      	mov	r0, r6
   1c11e:	f000 fe61 	bl	1cde4 <pinctrl_lookup_state>
	if (ret < 0) {
   1c122:	2800      	cmp	r0, #0
   1c124:	db05      	blt.n	1c132 <spi_nrfx_init+0x24>
	return pinctrl_apply_state_direct(config, state);
   1c126:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c128:	6832      	ldr	r2, [r6, #0]
   1c12a:	7919      	ldrb	r1, [r3, #4]
   1c12c:	6818      	ldr	r0, [r3, #0]
   1c12e:	f7f7 ff5b 	bl	13fe8 <pinctrl_configure_pins>
	if (err < 0) {
   1c132:	2800      	cmp	r0, #0
   1c134:	db57      	blt.n	1c1e6 <spi_nrfx_init+0xd8>
	dev_config->irq_connect();
   1c136:	69e3      	ldr	r3, [r4, #28]
   1c138:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c13a:	68ac      	ldr	r4, [r5, #8]
   1c13c:	e012      	b.n	1c164 <spi_nrfx_init+0x56>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c13e:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c142:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c146:	f013 0f01 	tst.w	r3, #1
   1c14a:	d024      	beq.n	1c196 <spi_nrfx_init+0x88>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c14c:	2301      	movs	r3, #1
   1c14e:	fa03 fc01 	lsl.w	ip, r3, r1
   1c152:	6833      	ldr	r3, [r6, #0]
   1c154:	ea43 030c 	orr.w	r3, r3, ip
   1c158:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1c15a:	683b      	ldr	r3, [r7, #0]
   1c15c:	4798      	blx	r3
		if (ret < 0) {
   1c15e:	2800      	cmp	r0, #0
   1c160:	db22      	blt.n	1c1a8 <spi_nrfx_init+0x9a>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c162:	3408      	adds	r4, #8
   1c164:	68ab      	ldr	r3, [r5, #8]
   1c166:	68ea      	ldr	r2, [r5, #12]
   1c168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1c16c:	429c      	cmp	r4, r3
   1c16e:	d21a      	bcs.n	1c1a6 <spi_nrfx_init+0x98>
		if (!device_is_ready(cs_gpio->port)) {
   1c170:	6820      	ldr	r0, [r4, #0]
   1c172:	f001 fc47 	bl	1da04 <z_device_is_ready>
   1c176:	2800      	cmp	r0, #0
   1c178:	d037      	beq.n	1c1ea <spi_nrfx_init+0xdc>
	return gpio_pin_configure(spec->port,
   1c17a:	6820      	ldr	r0, [r4, #0]
   1c17c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1c17e:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
   1c180:	f443 13b0 	orr.w	r3, r3, #1441792	; 0x160000
	const struct gpio_driver_api *api =
   1c184:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   1c186:	6906      	ldr	r6, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1c188:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   1c18c:	d0d9      	beq.n	1c142 <spi_nrfx_init+0x34>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c18e:	f013 0f01 	tst.w	r3, #1
   1c192:	d0d6      	beq.n	1c142 <spi_nrfx_init+0x34>
   1c194:	e7d3      	b.n	1c13e <spi_nrfx_init+0x30>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c196:	2301      	movs	r3, #1
   1c198:	fa03 fc01 	lsl.w	ip, r3, r1
   1c19c:	6833      	ldr	r3, [r6, #0]
   1c19e:	ea23 030c 	bic.w	r3, r3, ip
   1c1a2:	6033      	str	r3, [r6, #0]
   1c1a4:	e7d9      	b.n	1c15a <spi_nrfx_init+0x4c>
	return 0;
   1c1a6:	2000      	movs	r0, #0
	if (err < 0) {
   1c1a8:	2800      	cmp	r0, #0
   1c1aa:	db1c      	blt.n	1c1e6 <spi_nrfx_init+0xd8>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1c1ac:	682b      	ldr	r3, [r5, #0]
   1c1ae:	b1bb      	cbz	r3, 1c1e0 <spi_nrfx_init+0xd2>
   1c1b0:	689b      	ldr	r3, [r3, #8]
   1c1b2:	b1ab      	cbz	r3, 1c1e0 <spi_nrfx_init+0xd2>
   1c1b4:	681a      	ldr	r2, [r3, #0]
   1c1b6:	b19a      	cbz	r2, 1c1e0 <spi_nrfx_init+0xd2>
			k_busy_wait(ctx->config->cs->delay);
   1c1b8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1c1ba:	f002 f880 	bl	1e2be <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1c1be:	682b      	ldr	r3, [r5, #0]
   1c1c0:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1c1c2:	6818      	ldr	r0, [r3, #0]
   1c1c4:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
   1c1c6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c1c8:	6819      	ldr	r1, [r3, #0]
   1c1ca:	2301      	movs	r3, #1
   1c1cc:	4093      	lsls	r3, r2
   1c1ce:	4219      	tst	r1, r3
   1c1d0:	d10e      	bne.n	1c1f0 <spi_nrfx_init+0xe2>
   1c1d2:	2300      	movs	r3, #0
	if (value != 0)	{
   1c1d4:	b173      	cbz	r3, 1c1f4 <spi_nrfx_init+0xe6>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c1d6:	2101      	movs	r1, #1
   1c1d8:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
   1c1da:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1c1dc:	68db      	ldr	r3, [r3, #12]
   1c1de:	4798      	blx	r3
   1c1e0:	69ab      	ldr	r3, [r5, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1c1e2:	b16b      	cbz	r3, 1c200 <spi_nrfx_init+0xf2>
	return 0;
   1c1e4:	2000      	movs	r0, #0
}
   1c1e6:	b003      	add	sp, #12
   1c1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENODEV;
   1c1ea:	f06f 0012 	mvn.w	r0, #18
   1c1ee:	e7db      	b.n	1c1a8 <spi_nrfx_init+0x9a>
		value = (value != 0) ? 0 : 1;
   1c1f0:	2301      	movs	r3, #1
   1c1f2:	e7ef      	b.n	1c1d4 <spi_nrfx_init+0xc6>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c1f4:	2101      	movs	r1, #1
   1c1f6:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
   1c1f8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1c1fa:	691b      	ldr	r3, [r3, #16]
   1c1fc:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1c1fe:	e7ef      	b.n	1c1e0 <spi_nrfx_init+0xd2>
		ctx->owner = NULL;
   1c200:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
   1c202:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
   1c206:	f7fa fae1 	bl	167cc <z_impl_k_sem_give>
}
   1c20a:	e7eb      	b.n	1c1e4 <spi_nrfx_init+0xd6>

0001c20c <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   1c20c:	b508      	push	{r3, lr}
   1c20e:	2200      	movs	r2, #0
   1c210:	2101      	movs	r1, #1
   1c212:	202f      	movs	r0, #47	; 0x2f
   1c214:	f7f4 fd96 	bl	10d44 <z_arm_irq_priority_set>
   1c218:	bd08      	pop	{r3, pc}

0001c21a <spi_nrfx_release>:
{
   1c21a:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1c21c:	6904      	ldr	r4, [r0, #16]
	return !!(ctx->config == config);
   1c21e:	6823      	ldr	r3, [r4, #0]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1c220:	428b      	cmp	r3, r1
   1c222:	d131      	bne.n	1c288 <spi_nrfx_release+0x6e>
	if (dev_data->busy) {
   1c224:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1c228:	2b00      	cmp	r3, #0
   1c22a:	d130      	bne.n	1c28e <spi_nrfx_release+0x74>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1c22c:	6823      	ldr	r3, [r4, #0]
   1c22e:	b1c3      	cbz	r3, 1c262 <spi_nrfx_release+0x48>
   1c230:	689b      	ldr	r3, [r3, #8]
   1c232:	b1b3      	cbz	r3, 1c262 <spi_nrfx_release+0x48>
   1c234:	681a      	ldr	r2, [r3, #0]
   1c236:	b1a2      	cbz	r2, 1c262 <spi_nrfx_release+0x48>
			k_busy_wait(ctx->config->cs->delay);
   1c238:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1c23a:	f002 f840 	bl	1e2be <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1c23e:	6823      	ldr	r3, [r4, #0]
   1c240:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1c242:	6818      	ldr	r0, [r3, #0]
   1c244:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1c246:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c248:	681a      	ldr	r2, [r3, #0]
   1c24a:	2301      	movs	r3, #1
   1c24c:	408b      	lsls	r3, r1
   1c24e:	421a      	tst	r2, r3
   1c250:	d10b      	bne.n	1c26a <spi_nrfx_release+0x50>
   1c252:	2300      	movs	r3, #0
	if (value != 0)	{
   1c254:	b15b      	cbz	r3, 1c26e <spi_nrfx_release+0x54>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c256:	2301      	movs	r3, #1
   1c258:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1c25c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1c25e:	68db      	ldr	r3, [r3, #12]
   1c260:	4798      	blx	r3
   1c262:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1c264:	b153      	cbz	r3, 1c27c <spi_nrfx_release+0x62>
	return 0;
   1c266:	2000      	movs	r0, #0
}
   1c268:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
   1c26a:	2301      	movs	r3, #1
   1c26c:	e7f2      	b.n	1c254 <spi_nrfx_release+0x3a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c26e:	2301      	movs	r3, #1
   1c270:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1c274:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1c276:	691b      	ldr	r3, [r3, #16]
   1c278:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1c27a:	e7f2      	b.n	1c262 <spi_nrfx_release+0x48>
		ctx->owner = NULL;
   1c27c:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1c27e:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1c282:	f7fa faa3 	bl	167cc <z_impl_k_sem_give>
}
   1c286:	e7ee      	b.n	1c266 <spi_nrfx_release+0x4c>
		return -EINVAL;
   1c288:	f06f 0015 	mvn.w	r0, #21
   1c28c:	e7ec      	b.n	1c268 <spi_nrfx_release+0x4e>
		return -EBUSY;
   1c28e:	f06f 000f 	mvn.w	r0, #15
   1c292:	e7e9      	b.n	1c268 <spi_nrfx_release+0x4e>

0001c294 <transceive>:
{
   1c294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c298:	4606      	mov	r6, r0
   1c29a:	460d      	mov	r5, r1
   1c29c:	4690      	mov	r8, r2
   1c29e:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   1c2a0:	6904      	ldr	r4, [r0, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c2a2:	888b      	ldrh	r3, [r1, #4]
   1c2a4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c2a8:	d004      	beq.n	1c2b4 <transceive+0x20>
   1c2aa:	69a3      	ldr	r3, [r4, #24]
   1c2ac:	b913      	cbnz	r3, 1c2b4 <transceive+0x20>
		(ctx->owner == spi_cfg)) {
   1c2ae:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   1c2b0:	4299      	cmp	r1, r3
   1c2b2:	d00e      	beq.n	1c2d2 <transceive+0x3e>
	k_sem_take(&ctx->lock, K_FOREVER);
   1c2b4:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   1c2b8:	f04f 32ff 	mov.w	r2, #4294967295
   1c2bc:	f04f 33ff 	mov.w	r3, #4294967295
   1c2c0:	f7fa faac 	bl	1681c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1c2c4:	6065      	str	r5, [r4, #4]
	ctx->asynchronous = asynchronous;
   1c2c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1c2ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	ctx->signal = signal;
   1c2ce:	9b07      	ldr	r3, [sp, #28]
   1c2d0:	6463      	str	r3, [r4, #68]	; 0x44
	error = configure(dev, spi_cfg);
   1c2d2:	4629      	mov	r1, r5
   1c2d4:	4630      	mov	r0, r6
   1c2d6:	f7f6 ffd7 	bl	13288 <configure>
	if (error == 0) {
   1c2da:	4605      	mov	r5, r0
   1c2dc:	b1a0      	cbz	r0, 1c308 <transceive+0x74>
	if (status >= 0 && (ctx->config->operation & SPI_LOCK_ON)) {
   1c2de:	2d00      	cmp	r5, #0
   1c2e0:	db04      	blt.n	1c2ec <transceive+0x58>
   1c2e2:	6823      	ldr	r3, [r4, #0]
   1c2e4:	889b      	ldrh	r3, [r3, #4]
   1c2e6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c2ea:	d10a      	bne.n	1c302 <transceive+0x6e>
	if (!ctx->asynchronous || (status < 0)) {
   1c2ec:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1c2f0:	b10b      	cbz	r3, 1c2f6 <transceive+0x62>
   1c2f2:	2d00      	cmp	r5, #0
   1c2f4:	da05      	bge.n	1c302 <transceive+0x6e>
		ctx->owner = NULL;
   1c2f6:	2300      	movs	r3, #0
   1c2f8:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1c2fa:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1c2fe:	f7fa fa65 	bl	167cc <z_impl_k_sem_give>
}
   1c302:	4628      	mov	r0, r5
   1c304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   1c308:	2301      	movs	r3, #1
   1c30a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1c30e:	f1b8 0f00 	cmp.w	r8, #0
   1c312:	d015      	beq.n	1c340 <transceive+0xac>
   1c314:	f8d8 3000 	ldr.w	r3, [r8]
   1c318:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1c31a:	b19b      	cbz	r3, 1c344 <transceive+0xb0>
   1c31c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c320:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1c322:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1c326:	f104 0350 	add.w	r3, r4, #80	; 0x50
	while (*count) {
   1c32a:	681a      	ldr	r2, [r3, #0]
   1c32c:	b182      	cbz	r2, 1c350 <transceive+0xbc>
		if (((*current)->len / dfs) != 0) {
   1c32e:	680a      	ldr	r2, [r1, #0]
   1c330:	6850      	ldr	r0, [r2, #4]
   1c332:	b948      	cbnz	r0, 1c348 <transceive+0xb4>
		++(*current);
   1c334:	3208      	adds	r2, #8
   1c336:	600a      	str	r2, [r1, #0]
		--(*count);
   1c338:	681a      	ldr	r2, [r3, #0]
   1c33a:	3a01      	subs	r2, #1
   1c33c:	601a      	str	r2, [r3, #0]
   1c33e:	e7f4      	b.n	1c32a <transceive+0x96>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1c340:	4643      	mov	r3, r8
   1c342:	e7e9      	b.n	1c318 <transceive+0x84>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1c344:	2300      	movs	r3, #0
   1c346:	e7eb      	b.n	1c320 <transceive+0x8c>
			*buf_len = (*current)->len / dfs;
   1c348:	6620      	str	r0, [r4, #96]	; 0x60
			return (*current)->buf;
   1c34a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1c34c:	681b      	ldr	r3, [r3, #0]
   1c34e:	e001      	b.n	1c354 <transceive+0xc0>
	*buf_len = 0;
   1c350:	2300      	movs	r3, #0
   1c352:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->tx_buf = (const uint8_t *)
   1c354:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1c356:	b19f      	cbz	r7, 1c380 <transceive+0xec>
   1c358:	683b      	ldr	r3, [r7, #0]
   1c35a:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1c35c:	b193      	cbz	r3, 1c384 <transceive+0xf0>
   1c35e:	687b      	ldr	r3, [r7, #4]
   1c360:	65a3      	str	r3, [r4, #88]	; 0x58
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1c362:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1c366:	f104 0258 	add.w	r2, r4, #88	; 0x58
	while (*count) {
   1c36a:	6813      	ldr	r3, [r2, #0]
   1c36c:	b183      	cbz	r3, 1c390 <transceive+0xfc>
		if (((*current)->len / dfs) != 0) {
   1c36e:	680b      	ldr	r3, [r1, #0]
   1c370:	6858      	ldr	r0, [r3, #4]
   1c372:	b948      	cbnz	r0, 1c388 <transceive+0xf4>
		++(*current);
   1c374:	3308      	adds	r3, #8
   1c376:	600b      	str	r3, [r1, #0]
		--(*count);
   1c378:	6813      	ldr	r3, [r2, #0]
   1c37a:	3b01      	subs	r3, #1
   1c37c:	6013      	str	r3, [r2, #0]
   1c37e:	e7f4      	b.n	1c36a <transceive+0xd6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1c380:	463b      	mov	r3, r7
   1c382:	e7ea      	b.n	1c35a <transceive+0xc6>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1c384:	2300      	movs	r3, #0
   1c386:	e7eb      	b.n	1c360 <transceive+0xcc>
			*buf_len = (*current)->len / dfs;
   1c388:	66a0      	str	r0, [r4, #104]	; 0x68
			return (*current)->buf;
   1c38a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1c38c:	681b      	ldr	r3, [r3, #0]
   1c38e:	e000      	b.n	1c392 <transceive+0xfe>
	*buf_len = 0;
   1c390:	66a3      	str	r3, [r4, #104]	; 0x68
	ctx->rx_buf = (uint8_t *)
   1c392:	6663      	str	r3, [r4, #100]	; 0x64
	ctx->sync_status = 0;
   1c394:	2300      	movs	r3, #0
   1c396:	6423      	str	r3, [r4, #64]	; 0x40
	ctx->recv_frames = 0;
   1c398:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1c39a:	6823      	ldr	r3, [r4, #0]
   1c39c:	b1bb      	cbz	r3, 1c3ce <transceive+0x13a>
   1c39e:	689b      	ldr	r3, [r3, #8]
   1c3a0:	b1ab      	cbz	r3, 1c3ce <transceive+0x13a>
   1c3a2:	6818      	ldr	r0, [r3, #0]
   1c3a4:	b198      	cbz	r0, 1c3ce <transceive+0x13a>
	return gpio_pin_set(spec->port, spec->pin, value);
   1c3a6:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1c3a8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c3aa:	681a      	ldr	r2, [r3, #0]
   1c3ac:	2301      	movs	r3, #1
   1c3ae:	408b      	lsls	r3, r1
   1c3b0:	421a      	tst	r2, r3
   1c3b2:	d125      	bne.n	1c400 <transceive+0x16c>
   1c3b4:	2301      	movs	r3, #1
	if (value != 0)	{
   1c3b6:	b32b      	cbz	r3, 1c404 <transceive+0x170>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c3b8:	2301      	movs	r3, #1
   1c3ba:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1c3be:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1c3c0:	68db      	ldr	r3, [r3, #12]
   1c3c2:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
   1c3c4:	6823      	ldr	r3, [r4, #0]
   1c3c6:	689b      	ldr	r3, [r3, #8]
   1c3c8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1c3ca:	f001 ff78 	bl	1e2be <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
   1c3ce:	4630      	mov	r0, r6
   1c3d0:	f7f7 f812 	bl	133f8 <transfer_next_chunk>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1c3d4:	6822      	ldr	r2, [r4, #0]
   1c3d6:	8893      	ldrh	r3, [r2, #4]
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
   1c3d8:	f013 0f01 	tst.w	r3, #1
   1c3dc:	d019      	beq.n	1c412 <transceive+0x17e>
		timeout = K_FOREVER;
   1c3de:	f04f 32ff 	mov.w	r2, #4294967295
   1c3e2:	4613      	mov	r3, r2
	if (!ctx->asynchronous) {
   1c3e4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   1c3e8:	b381      	cbz	r1, 1c44c <transceive+0x1b8>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1c3ea:	6823      	ldr	r3, [r4, #0]
   1c3ec:	889b      	ldrh	r3, [r3, #4]
	if (spi_context_is_slave(ctx) && !status) {
   1c3ee:	f013 0f01 	tst.w	r3, #1
   1c3f2:	f43f af74 	beq.w	1c2de <transceive+0x4a>
   1c3f6:	2d00      	cmp	r5, #0
   1c3f8:	f47f af71 	bne.w	1c2de <transceive+0x4a>
		return ctx->recv_frames;
   1c3fc:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   1c3fe:	e76e      	b.n	1c2de <transceive+0x4a>
		value = (value != 0) ? 0 : 1;
   1c400:	462b      	mov	r3, r5
   1c402:	e7d8      	b.n	1c3b6 <transceive+0x122>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c404:	2301      	movs	r3, #1
   1c406:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1c40a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1c40c:	691b      	ldr	r3, [r3, #16]
   1c40e:	4798      	blx	r3
   1c410:	e7d8      	b.n	1c3c4 <transceive+0x130>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c412:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1c414:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c416:	4283      	cmp	r3, r0
   1c418:	bf38      	it	cc
   1c41a:	4603      	movcc	r3, r0
   1c41c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
   1c420:	fb03 f000 	mul.w	r0, r3, r0
			     ctx->config->frequency;
   1c424:	6813      	ldr	r3, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c426:	fbb0 f0f3 	udiv	r0, r0, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1c42a:	30c8      	adds	r0, #200	; 0xc8
   1c42c:	0c41      	lsrs	r1, r0, #17
   1c42e:	03c0      	lsls	r0, r0, #15
   1c430:	f240 33e7 	movw	r3, #999	; 0x3e7
   1c434:	18c0      	adds	r0, r0, r3
   1c436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c43a:	f04f 0300 	mov.w	r3, #0
   1c43e:	f141 0100 	adc.w	r1, r1, #0
   1c442:	f7e3 fe5d 	bl	100 <__aeabi_uldivmod>
		timeout = K_MSEC(timeout_ms);
   1c446:	4602      	mov	r2, r0
   1c448:	460b      	mov	r3, r1
   1c44a:	e7cb      	b.n	1c3e4 <transceive+0x150>
		if (k_sem_take(&ctx->sync, timeout)) {
   1c44c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   1c450:	f7fa f9e4 	bl	1681c <z_impl_k_sem_take>
   1c454:	b908      	cbnz	r0, 1c45a <transceive+0x1c6>
		status = ctx->sync_status;
   1c456:	6c25      	ldr	r5, [r4, #64]	; 0x40
   1c458:	e7c7      	b.n	1c3ea <transceive+0x156>
			return -ETIMEDOUT;
   1c45a:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1c45e:	e73e      	b.n	1c2de <transceive+0x4a>

0001c460 <spi_nrfx_transceive_async>:
{
   1c460:	b510      	push	{r4, lr}
   1c462:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, async);
   1c464:	9c04      	ldr	r4, [sp, #16]
   1c466:	9401      	str	r4, [sp, #4]
   1c468:	2401      	movs	r4, #1
   1c46a:	9400      	str	r4, [sp, #0]
   1c46c:	f7ff ff12 	bl	1c294 <transceive>
}
   1c470:	b002      	add	sp, #8
   1c472:	bd10      	pop	{r4, pc}

0001c474 <spi_nrfx_transceive>:
{
   1c474:	b510      	push	{r4, lr}
   1c476:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   1c478:	2400      	movs	r4, #0
   1c47a:	9401      	str	r4, [sp, #4]
   1c47c:	9400      	str	r4, [sp, #0]
   1c47e:	f7ff ff09 	bl	1c294 <transceive>
}
   1c482:	b002      	add	sp, #8
   1c484:	bd10      	pop	{r4, pc}

0001c486 <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c486:	7803      	ldrb	r3, [r0, #0]
   1c488:	2b00      	cmp	r3, #0
   1c48a:	d15e      	bne.n	1c54a <event_handler+0xc4>
{
   1c48c:	b510      	push	{r4, lr}
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c48e:	6f4a      	ldr	r2, [r1, #116]	; 0x74
	if (!ctx->tx_len) {
   1c490:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   1c492:	b143      	cbz	r3, 1c4a6 <event_handler+0x20>
	if (len > ctx->tx_len) {
   1c494:	429a      	cmp	r2, r3
   1c496:	d806      	bhi.n	1c4a6 <event_handler+0x20>
	ctx->tx_len -= len;
   1c498:	1a9b      	subs	r3, r3, r2
   1c49a:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->tx_len) {
   1c49c:	b1db      	cbz	r3, 1c4d6 <event_handler+0x50>
	} else if (ctx->tx_buf) {
   1c49e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
   1c4a0:	b10b      	cbz	r3, 1c4a6 <event_handler+0x20>
		ctx->tx_buf += dfs * len;
   1c4a2:	4413      	add	r3, r2
   1c4a4:	65cb      	str	r3, [r1, #92]	; 0x5c
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c4a6:	6f4a      	ldr	r2, [r1, #116]	; 0x74
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1c4a8:	680b      	ldr	r3, [r1, #0]
   1c4aa:	889b      	ldrh	r3, [r3, #4]
	if (spi_context_is_slave(ctx)) {
   1c4ac:	f013 0f01 	tst.w	r3, #1
   1c4b0:	d002      	beq.n	1c4b8 <event_handler+0x32>
		ctx->recv_frames += len;
   1c4b2:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
   1c4b4:	4413      	add	r3, r2
   1c4b6:	66cb      	str	r3, [r1, #108]	; 0x6c
	if (!ctx->rx_len) {
   1c4b8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1c4ba:	b143      	cbz	r3, 1c4ce <event_handler+0x48>
	if (len > ctx->rx_len) {
   1c4bc:	429a      	cmp	r2, r3
   1c4be:	d806      	bhi.n	1c4ce <event_handler+0x48>
	ctx->rx_len -= len;
   1c4c0:	1a9b      	subs	r3, r3, r2
   1c4c2:	668b      	str	r3, [r1, #104]	; 0x68
	if (!ctx->rx_len) {
   1c4c4:	b323      	cbz	r3, 1c510 <event_handler+0x8a>
	} else if (ctx->rx_buf) {
   1c4c6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1c4c8:	b10b      	cbz	r3, 1c4ce <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1c4ca:	4413      	add	r3, r2
   1c4cc:	664b      	str	r3, [r1, #100]	; 0x64
		transfer_next_chunk(dev_data->dev);
   1c4ce:	6f08      	ldr	r0, [r1, #112]	; 0x70
   1c4d0:	f7f6 ff92 	bl	133f8 <transfer_next_chunk>
}
   1c4d4:	bd10      	pop	{r4, pc}
		++ctx->current_tx;
   1c4d6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1c4d8:	3308      	adds	r3, #8
   1c4da:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->tx_count;
   1c4dc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1c4de:	3b01      	subs	r3, #1
   1c4e0:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_tx,
   1c4e2:	f101 004c 	add.w	r0, r1, #76	; 0x4c
   1c4e6:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
   1c4ea:	e004      	b.n	1c4f6 <event_handler+0x70>
		++(*current);
   1c4ec:	3308      	adds	r3, #8
   1c4ee:	6003      	str	r3, [r0, #0]
		--(*count);
   1c4f0:	6813      	ldr	r3, [r2, #0]
   1c4f2:	3b01      	subs	r3, #1
   1c4f4:	6013      	str	r3, [r2, #0]
	while (*count) {
   1c4f6:	6813      	ldr	r3, [r2, #0]
   1c4f8:	b13b      	cbz	r3, 1c50a <event_handler+0x84>
		if (((*current)->len / dfs) != 0) {
   1c4fa:	6803      	ldr	r3, [r0, #0]
   1c4fc:	685c      	ldr	r4, [r3, #4]
   1c4fe:	2c00      	cmp	r4, #0
   1c500:	d0f4      	beq.n	1c4ec <event_handler+0x66>
			*buf_len = (*current)->len / dfs;
   1c502:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
   1c504:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1c506:	681b      	ldr	r3, [r3, #0]
   1c508:	e000      	b.n	1c50c <event_handler+0x86>
	*buf_len = 0;
   1c50a:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->tx_buf = (const uint8_t *)
   1c50c:	65cb      	str	r3, [r1, #92]	; 0x5c
   1c50e:	e7ca      	b.n	1c4a6 <event_handler+0x20>
		++ctx->current_rx;
   1c510:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1c512:	3308      	adds	r3, #8
   1c514:	654b      	str	r3, [r1, #84]	; 0x54
		--ctx->rx_count;
   1c516:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1c518:	3b01      	subs	r3, #1
   1c51a:	658b      	str	r3, [r1, #88]	; 0x58
			spi_context_get_next_buf(&ctx->current_rx,
   1c51c:	f101 0054 	add.w	r0, r1, #84	; 0x54
   1c520:	f101 0258 	add.w	r2, r1, #88	; 0x58
	while (*count) {
   1c524:	e004      	b.n	1c530 <event_handler+0xaa>
		++(*current);
   1c526:	3308      	adds	r3, #8
   1c528:	6003      	str	r3, [r0, #0]
		--(*count);
   1c52a:	6813      	ldr	r3, [r2, #0]
   1c52c:	3b01      	subs	r3, #1
   1c52e:	6013      	str	r3, [r2, #0]
	while (*count) {
   1c530:	6813      	ldr	r3, [r2, #0]
   1c532:	b13b      	cbz	r3, 1c544 <event_handler+0xbe>
		if (((*current)->len / dfs) != 0) {
   1c534:	6803      	ldr	r3, [r0, #0]
   1c536:	685c      	ldr	r4, [r3, #4]
   1c538:	2c00      	cmp	r4, #0
   1c53a:	d0f4      	beq.n	1c526 <event_handler+0xa0>
			*buf_len = (*current)->len / dfs;
   1c53c:	668c      	str	r4, [r1, #104]	; 0x68
			return (*current)->buf;
   1c53e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1c540:	681b      	ldr	r3, [r3, #0]
   1c542:	e000      	b.n	1c546 <event_handler+0xc0>
	*buf_len = 0;
   1c544:	668b      	str	r3, [r1, #104]	; 0x68
		ctx->rx_buf = (uint8_t *)
   1c546:	664b      	str	r3, [r1, #100]	; 0x64
   1c548:	e7c1      	b.n	1c4ce <event_handler+0x48>
   1c54a:	4770      	bx	lr

0001c54c <spi_nrfx_init>:
{
   1c54c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c54e:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1c550:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1c552:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c554:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ret = pinctrl_lookup_state(config, id, &state);
   1c556:	aa01      	add	r2, sp, #4
   1c558:	2100      	movs	r1, #0
   1c55a:	4630      	mov	r0, r6
   1c55c:	f000 fc42 	bl	1cde4 <pinctrl_lookup_state>
	if (ret < 0) {
   1c560:	2800      	cmp	r0, #0
   1c562:	db05      	blt.n	1c570 <spi_nrfx_init+0x24>
	return pinctrl_apply_state_direct(config, state);
   1c564:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c566:	6832      	ldr	r2, [r6, #0]
   1c568:	7919      	ldrb	r1, [r3, #4]
   1c56a:	6818      	ldr	r0, [r3, #0]
   1c56c:	f7f7 fd3c 	bl	13fe8 <pinctrl_configure_pins>
	if (err < 0) {
   1c570:	2800      	cmp	r0, #0
   1c572:	db57      	blt.n	1c624 <spi_nrfx_init+0xd8>
	dev_config->irq_connect();
   1c574:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c576:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c578:	68ac      	ldr	r4, [r5, #8]
   1c57a:	e012      	b.n	1c5a2 <spi_nrfx_init+0x56>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c57c:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c580:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c584:	f013 0f01 	tst.w	r3, #1
   1c588:	d024      	beq.n	1c5d4 <spi_nrfx_init+0x88>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c58a:	2301      	movs	r3, #1
   1c58c:	fa03 fc01 	lsl.w	ip, r3, r1
   1c590:	6833      	ldr	r3, [r6, #0]
   1c592:	ea43 030c 	orr.w	r3, r3, ip
   1c596:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1c598:	683b      	ldr	r3, [r7, #0]
   1c59a:	4798      	blx	r3
		if (ret < 0) {
   1c59c:	2800      	cmp	r0, #0
   1c59e:	db22      	blt.n	1c5e6 <spi_nrfx_init+0x9a>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c5a0:	3408      	adds	r4, #8
   1c5a2:	68ab      	ldr	r3, [r5, #8]
   1c5a4:	68ea      	ldr	r2, [r5, #12]
   1c5a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1c5aa:	429c      	cmp	r4, r3
   1c5ac:	d21a      	bcs.n	1c5e4 <spi_nrfx_init+0x98>
		if (!device_is_ready(cs_gpio->port)) {
   1c5ae:	6820      	ldr	r0, [r4, #0]
   1c5b0:	f001 fa28 	bl	1da04 <z_device_is_ready>
   1c5b4:	2800      	cmp	r0, #0
   1c5b6:	d037      	beq.n	1c628 <spi_nrfx_init+0xdc>
	return gpio_pin_configure(spec->port,
   1c5b8:	6820      	ldr	r0, [r4, #0]
   1c5ba:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1c5bc:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
   1c5be:	f443 13b0 	orr.w	r3, r3, #1441792	; 0x160000
	const struct gpio_driver_api *api =
   1c5c2:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   1c5c4:	6906      	ldr	r6, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1c5c6:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   1c5ca:	d0d9      	beq.n	1c580 <spi_nrfx_init+0x34>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c5cc:	f013 0f01 	tst.w	r3, #1
   1c5d0:	d0d6      	beq.n	1c580 <spi_nrfx_init+0x34>
   1c5d2:	e7d3      	b.n	1c57c <spi_nrfx_init+0x30>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c5d4:	2301      	movs	r3, #1
   1c5d6:	fa03 fc01 	lsl.w	ip, r3, r1
   1c5da:	6833      	ldr	r3, [r6, #0]
   1c5dc:	ea23 030c 	bic.w	r3, r3, ip
   1c5e0:	6033      	str	r3, [r6, #0]
   1c5e2:	e7d9      	b.n	1c598 <spi_nrfx_init+0x4c>
	return 0;
   1c5e4:	2000      	movs	r0, #0
	if (err < 0) {
   1c5e6:	2800      	cmp	r0, #0
   1c5e8:	db1c      	blt.n	1c624 <spi_nrfx_init+0xd8>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1c5ea:	682b      	ldr	r3, [r5, #0]
   1c5ec:	b1bb      	cbz	r3, 1c61e <spi_nrfx_init+0xd2>
   1c5ee:	689b      	ldr	r3, [r3, #8]
   1c5f0:	b1ab      	cbz	r3, 1c61e <spi_nrfx_init+0xd2>
   1c5f2:	681a      	ldr	r2, [r3, #0]
   1c5f4:	b19a      	cbz	r2, 1c61e <spi_nrfx_init+0xd2>
			k_busy_wait(ctx->config->cs->delay);
   1c5f6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1c5f8:	f001 fe61 	bl	1e2be <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1c5fc:	682b      	ldr	r3, [r5, #0]
   1c5fe:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1c600:	6818      	ldr	r0, [r3, #0]
   1c602:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
   1c604:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c606:	6819      	ldr	r1, [r3, #0]
   1c608:	2301      	movs	r3, #1
   1c60a:	4093      	lsls	r3, r2
   1c60c:	4219      	tst	r1, r3
   1c60e:	d10e      	bne.n	1c62e <spi_nrfx_init+0xe2>
   1c610:	2300      	movs	r3, #0
	if (value != 0)	{
   1c612:	b173      	cbz	r3, 1c632 <spi_nrfx_init+0xe6>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c614:	2101      	movs	r1, #1
   1c616:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
   1c618:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1c61a:	68db      	ldr	r3, [r3, #12]
   1c61c:	4798      	blx	r3
   1c61e:	69ab      	ldr	r3, [r5, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1c620:	b16b      	cbz	r3, 1c63e <spi_nrfx_init+0xf2>
	return 0;
   1c622:	2000      	movs	r0, #0
}
   1c624:	b003      	add	sp, #12
   1c626:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENODEV;
   1c628:	f06f 0012 	mvn.w	r0, #18
   1c62c:	e7db      	b.n	1c5e6 <spi_nrfx_init+0x9a>
		value = (value != 0) ? 0 : 1;
   1c62e:	2301      	movs	r3, #1
   1c630:	e7ef      	b.n	1c612 <spi_nrfx_init+0xc6>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c632:	2101      	movs	r1, #1
   1c634:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
   1c636:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1c638:	691b      	ldr	r3, [r3, #16]
   1c63a:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1c63c:	e7ef      	b.n	1c61e <spi_nrfx_init+0xd2>
		ctx->owner = NULL;
   1c63e:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
   1c640:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
   1c644:	f7fa f8c2 	bl	167cc <z_impl_k_sem_give>
}
   1c648:	e7eb      	b.n	1c622 <spi_nrfx_init+0xd6>

0001c64a <configure>:
{
   1c64a:	b410      	push	{r4}
	const struct spi_nrfx_config *dev_config = dev->config;
   1c64c:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1c64e:	6902      	ldr	r2, [r0, #16]
	return !!(ctx->config == config);
   1c650:	6813      	ldr	r3, [r2, #0]
	if (spi_context_configured(ctx, spi_cfg)) {
   1c652:	428b      	cmp	r3, r1
   1c654:	d027      	beq.n	1c6a6 <configure+0x5c>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1c656:	888b      	ldrh	r3, [r1, #4]
   1c658:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1c65c:	d125      	bne.n	1c6aa <configure+0x60>
	if (SPI_OP_MODE_GET(spi_cfg->operation) == SPI_OP_MODE_MASTER) {
   1c65e:	f013 0f01 	tst.w	r3, #1
   1c662:	d025      	beq.n	1c6b0 <configure+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1c664:	f013 0f08 	tst.w	r3, #8
   1c668:	d125      	bne.n	1c6b6 <configure+0x6c>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1c66a:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1c66e:	2b08      	cmp	r3, #8
   1c670:	d124      	bne.n	1c6bc <configure+0x72>
	if (spi_cfg->cs) {
   1c672:	688b      	ldr	r3, [r1, #8]
   1c674:	bb2b      	cbnz	r3, 1c6c2 <configure+0x78>
	ctx->config = spi_cfg;
   1c676:	6011      	str	r1, [r2, #0]
	nrf_spis_configure(dev_config->spis.p_reg,
   1c678:	6822      	ldr	r2, [r4, #0]
   1c67a:	888b      	ldrh	r3, [r1, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c67c:	f013 0f02 	tst.w	r3, #2
   1c680:	d10a      	bne.n	1c698 <configure+0x4e>
			return NRF_SPIS_MODE_0;
   1c682:	2100      	movs	r1, #0
	if (operation & SPI_TRANSFER_LSB) {
   1c684:	f013 0f10 	tst.w	r3, #16
   1c688:	d008      	beq.n	1c69c <configure+0x52>
		return NRF_SPIS_BIT_ORDER_LSB_FIRST;
   1c68a:	2301      	movs	r3, #1
    switch (spi_mode)
   1c68c:	b941      	cbnz	r1, 1c6a0 <configure+0x56>
    p_reg->CONFIG = config;
   1c68e:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
	return 0;
   1c692:	2000      	movs	r0, #0
}
   1c694:	bc10      	pop	{r4}
   1c696:	4770      	bx	lr
			return NRF_SPIS_MODE_2;
   1c698:	2102      	movs	r1, #2
   1c69a:	e7f3      	b.n	1c684 <configure+0x3a>
		return NRF_SPIS_BIT_ORDER_MSB_FIRST;
   1c69c:	2300      	movs	r3, #0
   1c69e:	e7f5      	b.n	1c68c <configure+0x42>
        config |= (SPIS_CONFIG_CPOL_ActiveLow  << SPIS_CONFIG_CPOL_Pos) |
   1c6a0:	f043 0304 	orr.w	r3, r3, #4
        break;
   1c6a4:	e7f3      	b.n	1c68e <configure+0x44>
		return 0;
   1c6a6:	2000      	movs	r0, #0
   1c6a8:	e7f4      	b.n	1c694 <configure+0x4a>
		return -ENOTSUP;
   1c6aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c6ae:	e7f1      	b.n	1c694 <configure+0x4a>
		return -EINVAL;
   1c6b0:	f06f 0015 	mvn.w	r0, #21
   1c6b4:	e7ee      	b.n	1c694 <configure+0x4a>
		return -EINVAL;
   1c6b6:	f06f 0015 	mvn.w	r0, #21
   1c6ba:	e7eb      	b.n	1c694 <configure+0x4a>
		return -EINVAL;
   1c6bc:	f06f 0015 	mvn.w	r0, #21
   1c6c0:	e7e8      	b.n	1c694 <configure+0x4a>
		return -EINVAL;
   1c6c2:	f06f 0015 	mvn.w	r0, #21
   1c6c6:	e7e5      	b.n	1c694 <configure+0x4a>

0001c6c8 <event_handler>:
	if (p_event->evt_type == NRFX_SPIS_XFER_DONE) {
   1c6c8:	7803      	ldrb	r3, [r0, #0]
   1c6ca:	2b01      	cmp	r3, #1
   1c6cc:	d000      	beq.n	1c6d0 <event_handler+0x8>
   1c6ce:	4770      	bx	lr
{
   1c6d0:	b510      	push	{r4, lr}
   1c6d2:	460c      	mov	r4, r1
		spi_context_complete(&dev_data->ctx, p_event->rx_amount);
   1c6d4:	6841      	ldr	r1, [r0, #4]
	if (!ctx->asynchronous) {
   1c6d6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1c6da:	b183      	cbz	r3, 1c6fe <event_handler+0x36>
		if (ctx->signal) {
   1c6dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1c6de:	b140      	cbz	r0, 1c6f2 <event_handler+0x2a>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1c6e0:	6823      	ldr	r3, [r4, #0]
   1c6e2:	889b      	ldrh	r3, [r3, #4]
			if (spi_context_is_slave(ctx) && !status) {
   1c6e4:	f013 0f01 	tst.w	r3, #1
   1c6e8:	d001      	beq.n	1c6ee <event_handler+0x26>
   1c6ea:	b901      	cbnz	r1, 1c6ee <event_handler+0x26>
				status = ctx->recv_frames;
   1c6ec:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
	return z_impl_k_poll_signal_raise(sig, result);
   1c6ee:	f7fb fa67 	bl	17bc0 <z_impl_k_poll_signal_raise>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1c6f2:	6823      	ldr	r3, [r4, #0]
   1c6f4:	889b      	ldrh	r3, [r3, #4]
   1c6f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c6fa:	d006      	beq.n	1c70a <event_handler+0x42>
}
   1c6fc:	bd10      	pop	{r4, pc}
		ctx->sync_status = status;
   1c6fe:	6421      	str	r1, [r4, #64]	; 0x40
		k_sem_give(&ctx->sync);
   1c700:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1c704:	f7fa f862 	bl	167cc <z_impl_k_sem_give>
}
   1c708:	e7f8      	b.n	1c6fc <event_handler+0x34>
			ctx->owner = NULL;
   1c70a:	2300      	movs	r3, #0
   1c70c:	6063      	str	r3, [r4, #4]
			k_sem_give(&ctx->lock);
   1c70e:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1c712:	f7fa f85b 	bl	167cc <z_impl_k_sem_give>
   1c716:	e7f1      	b.n	1c6fc <event_handler+0x34>

0001c718 <irq_connect2>:
#ifdef CONFIG_SPI_1_NRF_SPIS
SPI_NRFX_SPIS_DEFINE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPIS
SPI_NRFX_SPIS_DEFINE(2);
   1c718:	b508      	push	{r3, lr}
   1c71a:	2200      	movs	r2, #0
   1c71c:	2101      	movs	r1, #1
   1c71e:	2023      	movs	r0, #35	; 0x23
   1c720:	f7f4 fb10 	bl	10d44 <z_arm_irq_priority_set>
   1c724:	bd08      	pop	{r3, pc}

0001c726 <spi_nrfx_release>:
{
   1c726:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1c728:	6904      	ldr	r4, [r0, #16]
	return !!(ctx->config == config);
   1c72a:	6823      	ldr	r3, [r4, #0]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1c72c:	428b      	cmp	r3, r1
   1c72e:	d12c      	bne.n	1c78a <spi_nrfx_release+0x64>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1c730:	b1c3      	cbz	r3, 1c764 <spi_nrfx_release+0x3e>
   1c732:	689b      	ldr	r3, [r3, #8]
   1c734:	b1b3      	cbz	r3, 1c764 <spi_nrfx_release+0x3e>
   1c736:	681a      	ldr	r2, [r3, #0]
   1c738:	b1a2      	cbz	r2, 1c764 <spi_nrfx_release+0x3e>
			k_busy_wait(ctx->config->cs->delay);
   1c73a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1c73c:	f001 fdbf 	bl	1e2be <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1c740:	6823      	ldr	r3, [r4, #0]
   1c742:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1c744:	6818      	ldr	r0, [r3, #0]
   1c746:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1c748:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c74a:	681a      	ldr	r2, [r3, #0]
   1c74c:	2301      	movs	r3, #1
   1c74e:	408b      	lsls	r3, r1
   1c750:	421a      	tst	r2, r3
   1c752:	d10b      	bne.n	1c76c <spi_nrfx_release+0x46>
   1c754:	2300      	movs	r3, #0
	if (value != 0)	{
   1c756:	b15b      	cbz	r3, 1c770 <spi_nrfx_release+0x4a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c758:	2301      	movs	r3, #1
   1c75a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1c75e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1c760:	68db      	ldr	r3, [r3, #12]
   1c762:	4798      	blx	r3
   1c764:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1c766:	b153      	cbz	r3, 1c77e <spi_nrfx_release+0x58>
	return 0;
   1c768:	2000      	movs	r0, #0
}
   1c76a:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
   1c76c:	2301      	movs	r3, #1
   1c76e:	e7f2      	b.n	1c756 <spi_nrfx_release+0x30>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1c770:	2301      	movs	r3, #1
   1c772:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1c776:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1c778:	691b      	ldr	r3, [r3, #16]
   1c77a:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1c77c:	e7f2      	b.n	1c764 <spi_nrfx_release+0x3e>
		ctx->owner = NULL;
   1c77e:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1c780:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1c784:	f7fa f822 	bl	167cc <z_impl_k_sem_give>
}
   1c788:	e7ee      	b.n	1c768 <spi_nrfx_release+0x42>
		return -EINVAL;
   1c78a:	f06f 0015 	mvn.w	r0, #21
   1c78e:	e7ec      	b.n	1c76a <spi_nrfx_release+0x44>

0001c790 <transceive>:
{
   1c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c794:	b082      	sub	sp, #8
   1c796:	4680      	mov	r8, r0
   1c798:	460e      	mov	r6, r1
   1c79a:	4615      	mov	r5, r2
   1c79c:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   1c79e:	6904      	ldr	r4, [r0, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c7a0:	888b      	ldrh	r3, [r1, #4]
   1c7a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c7a6:	d004      	beq.n	1c7b2 <transceive+0x22>
   1c7a8:	69a3      	ldr	r3, [r4, #24]
   1c7aa:	b913      	cbnz	r3, 1c7b2 <transceive+0x22>
		(ctx->owner == spi_cfg)) {
   1c7ac:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   1c7ae:	4299      	cmp	r1, r3
   1c7b0:	d00e      	beq.n	1c7d0 <transceive+0x40>
	k_sem_take(&ctx->lock, K_FOREVER);
   1c7b2:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   1c7b6:	f04f 32ff 	mov.w	r2, #4294967295
   1c7ba:	f04f 33ff 	mov.w	r3, #4294967295
   1c7be:	f7fa f82d 	bl	1681c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1c7c2:	6066      	str	r6, [r4, #4]
	ctx->asynchronous = asynchronous;
   1c7c4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1c7c8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	ctx->signal = signal;
   1c7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c7ce:	6463      	str	r3, [r4, #68]	; 0x44
	error = configure(dev, spi_cfg);
   1c7d0:	4631      	mov	r1, r6
   1c7d2:	4640      	mov	r0, r8
   1c7d4:	f7ff ff39 	bl	1c64a <configure>
	if (error != 0) {
   1c7d8:	4606      	mov	r6, r0
   1c7da:	2800      	cmp	r0, #0
   1c7dc:	d138      	bne.n	1c850 <transceive+0xc0>
	} else if ((tx_bufs && tx_bufs->count > 1) ||
   1c7de:	b115      	cbz	r5, 1c7e6 <transceive+0x56>
   1c7e0:	686b      	ldr	r3, [r5, #4]
   1c7e2:	2b01      	cmp	r3, #1
   1c7e4:	d87b      	bhi.n	1c8de <transceive+0x14e>
   1c7e6:	b117      	cbz	r7, 1c7ee <transceive+0x5e>
		   (rx_bufs && rx_bufs->count > 1)) {
   1c7e8:	687b      	ldr	r3, [r7, #4]
   1c7ea:	2b01      	cmp	r3, #1
   1c7ec:	d87a      	bhi.n	1c8e4 <transceive+0x154>
	} else if (tx_bufs && tx_bufs->buffers[0].len &&
   1c7ee:	b145      	cbz	r5, 1c802 <transceive+0x72>
   1c7f0:	682b      	ldr	r3, [r5, #0]
   1c7f2:	685a      	ldr	r2, [r3, #4]
   1c7f4:	b12a      	cbz	r2, 1c802 <transceive+0x72>
		   !nrfx_is_in_ram(tx_bufs->buffers[0].buf)) {
   1c7f6:	681b      	ldr	r3, [r3, #0]
   1c7f8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
	} else if (tx_bufs && tx_bufs->buffers[0].len &&
   1c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c800:	d173      	bne.n	1c8ea <transceive+0x15a>
		prepare_for_transfer(dev,
   1c802:	2d00      	cmp	r5, #0
   1c804:	d03a      	beq.n	1c87c <transceive+0xec>
				     tx_bufs ? tx_bufs->buffers[0].buf : NULL,
   1c806:	682b      	ldr	r3, [r5, #0]
		prepare_for_transfer(dev,
   1c808:	6819      	ldr	r1, [r3, #0]
   1c80a:	2d00      	cmp	r5, #0
   1c80c:	d038      	beq.n	1c880 <transceive+0xf0>
				     tx_bufs ? tx_bufs->buffers[0].len : 0,
   1c80e:	682b      	ldr	r3, [r5, #0]
		prepare_for_transfer(dev,
   1c810:	685a      	ldr	r2, [r3, #4]
   1c812:	2f00      	cmp	r7, #0
   1c814:	d036      	beq.n	1c884 <transceive+0xf4>
				     rx_bufs ? rx_bufs->buffers[0].buf : NULL,
   1c816:	683b      	ldr	r3, [r7, #0]
		prepare_for_transfer(dev,
   1c818:	681b      	ldr	r3, [r3, #0]
   1c81a:	2f00      	cmp	r7, #0
   1c81c:	d034      	beq.n	1c888 <transceive+0xf8>
				     rx_bufs ? rx_bufs->buffers[0].len : 0);
   1c81e:	6838      	ldr	r0, [r7, #0]
		prepare_for_transfer(dev,
   1c820:	6840      	ldr	r0, [r0, #4]
   1c822:	9000      	str	r0, [sp, #0]
   1c824:	4640      	mov	r0, r8
   1c826:	f7f6 fee7 	bl	135f8 <prepare_for_transfer>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1c82a:	6823      	ldr	r3, [r4, #0]
   1c82c:	889a      	ldrh	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
   1c82e:	f012 0f01 	tst.w	r2, #1
   1c832:	d02b      	beq.n	1c88c <transceive+0xfc>
		timeout = K_FOREVER;
   1c834:	f04f 32ff 	mov.w	r2, #4294967295
   1c838:	4613      	mov	r3, r2
	if (!ctx->asynchronous) {
   1c83a:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   1c83e:	2900      	cmp	r1, #0
   1c840:	d041      	beq.n	1c8c6 <transceive+0x136>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
   1c842:	6823      	ldr	r3, [r4, #0]
   1c844:	889b      	ldrh	r3, [r3, #4]
	if (spi_context_is_slave(ctx) && !status) {
   1c846:	f013 0f01 	tst.w	r3, #1
   1c84a:	d001      	beq.n	1c850 <transceive+0xc0>
   1c84c:	2e00      	cmp	r6, #0
   1c84e:	d041      	beq.n	1c8d4 <transceive+0x144>
	if (status >= 0 && (ctx->config->operation & SPI_LOCK_ON)) {
   1c850:	2e00      	cmp	r6, #0
   1c852:	db04      	blt.n	1c85e <transceive+0xce>
   1c854:	6823      	ldr	r3, [r4, #0]
   1c856:	889b      	ldrh	r3, [r3, #4]
   1c858:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c85c:	d10a      	bne.n	1c874 <transceive+0xe4>
	if (!ctx->asynchronous || (status < 0)) {
   1c85e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1c862:	b10b      	cbz	r3, 1c868 <transceive+0xd8>
   1c864:	2e00      	cmp	r6, #0
   1c866:	da05      	bge.n	1c874 <transceive+0xe4>
		ctx->owner = NULL;
   1c868:	2300      	movs	r3, #0
   1c86a:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1c86c:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1c870:	f7f9 ffac 	bl	167cc <z_impl_k_sem_give>
}
   1c874:	4630      	mov	r0, r6
   1c876:	b002      	add	sp, #8
   1c878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prepare_for_transfer(dev,
   1c87c:	4629      	mov	r1, r5
   1c87e:	e7c4      	b.n	1c80a <transceive+0x7a>
   1c880:	2200      	movs	r2, #0
   1c882:	e7c6      	b.n	1c812 <transceive+0x82>
   1c884:	463b      	mov	r3, r7
   1c886:	e7c8      	b.n	1c81a <transceive+0x8a>
   1c888:	2000      	movs	r0, #0
   1c88a:	e7ca      	b.n	1c822 <transceive+0x92>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c88c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1c88e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c890:	4290      	cmp	r0, r2
   1c892:	bf38      	it	cc
   1c894:	4610      	movcc	r0, r2
   1c896:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   1c89a:	fb02 f000 	mul.w	r0, r2, r0
			     ctx->config->frequency;
   1c89e:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c8a0:	fbb0 f0f3 	udiv	r0, r0, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1c8a4:	30c8      	adds	r0, #200	; 0xc8
   1c8a6:	0c41      	lsrs	r1, r0, #17
   1c8a8:	03c0      	lsls	r0, r0, #15
   1c8aa:	f240 33e7 	movw	r3, #999	; 0x3e7
   1c8ae:	18c0      	adds	r0, r0, r3
   1c8b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c8b4:	f04f 0300 	mov.w	r3, #0
   1c8b8:	f141 0100 	adc.w	r1, r1, #0
   1c8bc:	f7e3 fc20 	bl	100 <__aeabi_uldivmod>
		timeout = K_MSEC(timeout_ms);
   1c8c0:	4602      	mov	r2, r0
   1c8c2:	460b      	mov	r3, r1
   1c8c4:	e7b9      	b.n	1c83a <transceive+0xaa>
		if (k_sem_take(&ctx->sync, timeout)) {
   1c8c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   1c8ca:	f7f9 ffa7 	bl	1681c <z_impl_k_sem_take>
   1c8ce:	b918      	cbnz	r0, 1c8d8 <transceive+0x148>
		status = ctx->sync_status;
   1c8d0:	6c26      	ldr	r6, [r4, #64]	; 0x40
   1c8d2:	e7b6      	b.n	1c842 <transceive+0xb2>
		return ctx->recv_frames;
   1c8d4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   1c8d6:	e7bb      	b.n	1c850 <transceive+0xc0>
			return -ETIMEDOUT;
   1c8d8:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1c8dc:	e7b8      	b.n	1c850 <transceive+0xc0>
		error = -ENOTSUP;
   1c8de:	f06f 0685 	mvn.w	r6, #133	; 0x85
   1c8e2:	e7b5      	b.n	1c850 <transceive+0xc0>
   1c8e4:	f06f 0685 	mvn.w	r6, #133	; 0x85
   1c8e8:	e7b2      	b.n	1c850 <transceive+0xc0>
		error = -ENOTSUP;
   1c8ea:	f06f 0685 	mvn.w	r6, #133	; 0x85
   1c8ee:	e7af      	b.n	1c850 <transceive+0xc0>

0001c8f0 <spi_nrfx_transceive_async>:
{
   1c8f0:	b510      	push	{r4, lr}
   1c8f2:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, async);
   1c8f4:	9c04      	ldr	r4, [sp, #16]
   1c8f6:	9401      	str	r4, [sp, #4]
   1c8f8:	2401      	movs	r4, #1
   1c8fa:	9400      	str	r4, [sp, #0]
   1c8fc:	f7ff ff48 	bl	1c790 <transceive>
}
   1c900:	b002      	add	sp, #8
   1c902:	bd10      	pop	{r4, pc}

0001c904 <spi_nrfx_transceive>:
{
   1c904:	b510      	push	{r4, lr}
   1c906:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   1c908:	2400      	movs	r4, #0
   1c90a:	9401      	str	r4, [sp, #4]
   1c90c:	9400      	str	r4, [sp, #0]
   1c90e:	f7ff ff3f 	bl	1c790 <transceive>
}
   1c912:	b002      	add	sp, #8
   1c914:	bd10      	pop	{r4, pc}

0001c916 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   1c916:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1c918:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1c91a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c91e:	f3ef 8211 	mrs	r2, BASEPRI
   1c922:	f381 8812 	msr	BASEPRI_MAX, r1
   1c926:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c92a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c92e:	b131      	cbz	r1, 1c93e <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c930:	2100      	movs	r1, #0
   1c932:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c936:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c93a:	2101      	movs	r1, #1
   1c93c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c93e:	f382 8811 	msr	BASEPRI, r2
   1c942:	f3bf 8f6f 	isb	sy
}
   1c946:	4770      	bx	lr

0001c948 <uarte_nrfx_isr_int>:
{
   1c948:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1c94a:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   1c94c:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   1c94e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1c952:	f413 7f80 	tst.w	r3, #256	; 0x100
   1c956:	d002      	beq.n	1c95e <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c958:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1c95c:	b9d3      	cbnz	r3, 1c994 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c95e:	686b      	ldr	r3, [r5, #4]
   1c960:	f013 0f10 	tst.w	r3, #16
   1c964:	d015      	beq.n	1c992 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   1c966:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c96a:	f3ef 8311 	mrs	r3, BASEPRI
   1c96e:	f382 8812 	msr	BASEPRI_MAX, r2
   1c972:	f3bf 8f6f 	isb	sy
   1c976:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1c97a:	b112      	cbz	r2, 1c982 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c97c:	2200      	movs	r2, #0
   1c97e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1c982:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1c986:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   1c98a:	f383 8811 	msr	BASEPRI, r3
   1c98e:	f3bf 8f6f 	isb	sy
}
   1c992:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   1c994:	f7ff ffbf 	bl	1c916 <endtx_isr>
   1c998:	e7e1      	b.n	1c95e <uarte_nrfx_isr_int+0x16>

0001c99a <uarte_nrfx_configure>:
{
   1c99a:	b570      	push	{r4, r5, r6, lr}
   1c99c:	b082      	sub	sp, #8
   1c99e:	4606      	mov	r6, r0
   1c9a0:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   1c9a2:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
   1c9a4:	794b      	ldrb	r3, [r1, #5]
   1c9a6:	2b01      	cmp	r3, #1
   1c9a8:	d006      	beq.n	1c9b8 <uarte_nrfx_configure+0x1e>
   1c9aa:	2b03      	cmp	r3, #3
   1c9ac:	d011      	beq.n	1c9d2 <uarte_nrfx_configure+0x38>
   1c9ae:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   1c9b2:	4618      	mov	r0, r3
   1c9b4:	b002      	add	sp, #8
   1c9b6:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1c9b8:	2300      	movs	r3, #0
   1c9ba:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c9be:	79a3      	ldrb	r3, [r4, #6]
   1c9c0:	2b03      	cmp	r3, #3
   1c9c2:	d137      	bne.n	1ca34 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   1c9c4:	79e3      	ldrb	r3, [r4, #7]
   1c9c6:	b143      	cbz	r3, 1c9da <uarte_nrfx_configure+0x40>
   1c9c8:	2b01      	cmp	r3, #1
   1c9ca:	d010      	beq.n	1c9ee <uarte_nrfx_configure+0x54>
   1c9cc:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1c9d0:	e7ef      	b.n	1c9b2 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1c9d2:	2310      	movs	r3, #16
   1c9d4:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   1c9d8:	e7f1      	b.n	1c9be <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1c9da:	2300      	movs	r3, #0
   1c9dc:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   1c9e0:	7923      	ldrb	r3, [r4, #4]
   1c9e2:	b143      	cbz	r3, 1c9f6 <uarte_nrfx_configure+0x5c>
   1c9e4:	2b02      	cmp	r3, #2
   1c9e6:	d021      	beq.n	1ca2c <uarte_nrfx_configure+0x92>
   1c9e8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1c9ec:	e7e1      	b.n	1c9b2 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1c9ee:	2301      	movs	r3, #1
   1c9f0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   1c9f4:	e7f4      	b.n	1c9e0 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1c9f6:	2300      	movs	r3, #0
   1c9f8:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c9fc:	6821      	ldr	r1, [r4, #0]
   1c9fe:	4630      	mov	r0, r6
   1ca00:	f7f6 fe3a 	bl	13678 <baudrate_set>
   1ca04:	4603      	mov	r3, r0
   1ca06:	b9c0      	cbnz	r0, 1ca3a <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
   1ca08:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   1ca0a:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ca0c:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   1ca10:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   1ca14:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1ca18:	4331      	orrs	r1, r6
   1ca1a:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ca1c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   1ca20:	3504      	adds	r5, #4
   1ca22:	e894 0003 	ldmia.w	r4, {r0, r1}
   1ca26:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   1ca2a:	e7c2      	b.n	1c9b2 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1ca2c:	230e      	movs	r3, #14
   1ca2e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   1ca32:	e7e3      	b.n	1c9fc <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
   1ca34:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1ca38:	e7bb      	b.n	1c9b2 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   1ca3a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1ca3e:	e7b8      	b.n	1c9b2 <uarte_nrfx_configure+0x18>

0001ca40 <uarte_nrfx_config_get>:
{
   1ca40:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   1ca42:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   1ca44:	3304      	adds	r3, #4
   1ca46:	e893 0003 	ldmia.w	r3, {r0, r1}
   1ca4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1ca4e:	2000      	movs	r0, #0
   1ca50:	4770      	bx	lr

0001ca52 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   1ca52:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ca54:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1ca56:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1ca5a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1ca5e:	4770      	bx	lr

0001ca60 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   1ca60:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ca62:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1ca64:	685b      	ldr	r3, [r3, #4]
   1ca66:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ca6a:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ca6e:	b929      	cbnz	r1, 1ca7c <is_tx_ready+0x1c>
   1ca70:	b933      	cbnz	r3, 1ca80 <is_tx_ready+0x20>
   1ca72:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1ca76:	b92b      	cbnz	r3, 1ca84 <is_tx_ready+0x24>
   1ca78:	2000      	movs	r0, #0
   1ca7a:	4770      	bx	lr
   1ca7c:	2001      	movs	r0, #1
   1ca7e:	4770      	bx	lr
   1ca80:	2000      	movs	r0, #0
   1ca82:	4770      	bx	lr
   1ca84:	2001      	movs	r0, #1
}
   1ca86:	4770      	bx	lr

0001ca88 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1ca88:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ca8a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ca8c:	2208      	movs	r2, #8
   1ca8e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1ca92:	4770      	bx	lr

0001ca94 <tx_start>:
{
   1ca94:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1ca96:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ca98:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ca9a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ca9e:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1caa2:	2200      	movs	r2, #0
   1caa4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1caa8:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1caac:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   1cab0:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cab4:	685b      	ldr	r3, [r3, #4]
   1cab6:	f013 0f10 	tst.w	r3, #16
   1caba:	d102      	bne.n	1cac2 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cabc:	2301      	movs	r3, #1
   1cabe:	60a3      	str	r3, [r4, #8]
}
   1cac0:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1cac2:	2101      	movs	r1, #1
   1cac4:	f7ff ffe0 	bl	1ca88 <uarte_enable>
    p_reg->INTENSET = mask;
   1cac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1cacc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1cad0:	e7f4      	b.n	1cabc <tx_start+0x28>

0001cad2 <uarte_nrfx_poll_in>:
{
   1cad2:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   1cad4:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1cad6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1cad8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cada:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1cade:	b15a      	cbz	r2, 1caf8 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   1cae0:	6962      	ldr	r2, [r4, #20]
   1cae2:	7812      	ldrb	r2, [r2, #0]
   1cae4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cae6:	2000      	movs	r0, #0
   1cae8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1caec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1caf0:	2201      	movs	r2, #1
   1caf2:	601a      	str	r2, [r3, #0]
}
   1caf4:	bc10      	pop	{r4}
   1caf6:	4770      	bx	lr
		return -1;
   1caf8:	f04f 30ff 	mov.w	r0, #4294967295
   1cafc:	e7fa      	b.n	1caf4 <uarte_nrfx_poll_in+0x22>

0001cafe <wait_tx_ready>:
{
   1cafe:	b570      	push	{r4, r5, r6, lr}
   1cb00:	4606      	mov	r6, r0
   1cb02:	e014      	b.n	1cb2e <wait_tx_ready+0x30>
		if (res) {
   1cb04:	b17d      	cbz	r5, 1cb26 <wait_tx_ready+0x28>
	__asm__ volatile(
   1cb06:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb0a:	f3ef 8411 	mrs	r4, BASEPRI
   1cb0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb12:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1cb16:	4630      	mov	r0, r6
   1cb18:	f7ff ffa2 	bl	1ca60 <is_tx_ready>
   1cb1c:	b9a0      	cbnz	r0, 1cb48 <wait_tx_ready+0x4a>
	__asm__ volatile(
   1cb1e:	f384 8811 	msr	BASEPRI, r4
   1cb22:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   1cb26:	2021      	movs	r0, #33	; 0x21
   1cb28:	2100      	movs	r1, #0
   1cb2a:	f7fa fbb5 	bl	17298 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1cb2e:	2464      	movs	r4, #100	; 0x64
   1cb30:	4630      	mov	r0, r6
   1cb32:	f7ff ff95 	bl	1ca60 <is_tx_ready>
   1cb36:	4605      	mov	r5, r0
   1cb38:	2800      	cmp	r0, #0
   1cb3a:	d1e3      	bne.n	1cb04 <wait_tx_ready+0x6>
   1cb3c:	2001      	movs	r0, #1
   1cb3e:	f000 fe41 	bl	1d7c4 <nrfx_busy_wait>
   1cb42:	3c01      	subs	r4, #1
   1cb44:	d1f4      	bne.n	1cb30 <wait_tx_ready+0x32>
   1cb46:	e7dd      	b.n	1cb04 <wait_tx_ready+0x6>
}
   1cb48:	4620      	mov	r0, r4
   1cb4a:	bd70      	pop	{r4, r5, r6, pc}

0001cb4c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1cb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb50:	b083      	sub	sp, #12
   1cb52:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   1cb54:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   1cb56:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1cb58:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1cb5c:	2100      	movs	r1, #0
   1cb5e:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1cb62:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1cb66:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
   1cb6a:	aa01      	add	r2, sp, #4
   1cb6c:	4648      	mov	r0, r9
   1cb6e:	f000 f939 	bl	1cde4 <pinctrl_lookup_state>
	if (ret < 0) {
   1cb72:	1e04      	subs	r4, r0, #0
   1cb74:	db07      	blt.n	1cb86 <uarte_instance_init+0x3a>
	return pinctrl_apply_state_direct(config, state);
   1cb76:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1cb78:	f8d9 2000 	ldr.w	r2, [r9]
   1cb7c:	7919      	ldrb	r1, [r3, #4]
   1cb7e:	6818      	ldr	r0, [r3, #0]
   1cb80:	f7f7 fa32 	bl	13fe8 <pinctrl_configure_pins>
   1cb84:	4604      	mov	r4, r0
	if (err < 0) {
   1cb86:	2c00      	cmp	r4, #0
   1cb88:	db35      	blt.n	1cbf6 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1cb8a:	f108 0104 	add.w	r1, r8, #4
   1cb8e:	4628      	mov	r0, r5
   1cb90:	f7ff ff03 	bl	1c99a <uarte_nrfx_configure>
	if (err) {
   1cb94:	4604      	mov	r4, r0
   1cb96:	bb70      	cbnz	r0, 1cbf6 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1cb98:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1cb9a:	f013 0f02 	tst.w	r3, #2
   1cb9e:	d12e      	bne.n	1cbfe <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cba0:	2308      	movs	r3, #8
   1cba2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1cba6:	7a3b      	ldrb	r3, [r7, #8]
   1cba8:	b95b      	cbnz	r3, 1cbc2 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cbaa:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1cbae:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   1cbb2:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1cbb6:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1cbba:	2301      	movs	r3, #1
   1cbbc:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cbc0:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1cbc2:	687b      	ldr	r3, [r7, #4]
   1cbc4:	f013 0f02 	tst.w	r3, #2
   1cbc8:	d103      	bne.n	1cbd2 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
   1cbca:	f44f 7380 	mov.w	r3, #256	; 0x100
   1cbce:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cbd2:	687b      	ldr	r3, [r7, #4]
   1cbd4:	f013 0f10 	tst.w	r3, #16
   1cbd8:	d003      	beq.n	1cbe2 <uarte_instance_init+0x96>
   1cbda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1cbde:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   1cbe2:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cbe6:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cbea:	2300      	movs	r3, #0
   1cbec:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cbf0:	2301      	movs	r3, #1
   1cbf2:	60b3      	str	r3, [r6, #8]
   1cbf4:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1cbf6:	4620      	mov	r0, r4
   1cbf8:	b003      	add	sp, #12
   1cbfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   1cbfe:	4641      	mov	r1, r8
   1cc00:	4630      	mov	r0, r6
   1cc02:	f7f6 fe1b 	bl	1383c <endtx_stoptx_ppi_init>
		if (err < 0) {
   1cc06:	2800      	cmp	r0, #0
   1cc08:	daca      	bge.n	1cba0 <uarte_instance_init+0x54>
			return err;
   1cc0a:	4604      	mov	r4, r0
   1cc0c:	e7f3      	b.n	1cbf6 <uarte_instance_init+0xaa>

0001cc0e <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1cc0e:	b510      	push	{r4, lr}
   1cc10:	4604      	mov	r4, r0
   1cc12:	2200      	movs	r2, #0
   1cc14:	2101      	movs	r1, #1
   1cc16:	2002      	movs	r0, #2
   1cc18:	f7f4 f894 	bl	10d44 <z_arm_irq_priority_set>
   1cc1c:	2002      	movs	r0, #2
   1cc1e:	f7f4 f861 	bl	10ce4 <arch_irq_enable>
   1cc22:	2100      	movs	r1, #0
   1cc24:	4620      	mov	r0, r4
   1cc26:	f7ff ff91 	bl	1cb4c <uarte_instance_init>
   1cc2a:	bd10      	pop	{r4, pc}

0001cc2c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1cc2c:	b510      	push	{r4, lr}
   1cc2e:	4604      	mov	r4, r0
   1cc30:	2200      	movs	r2, #0
   1cc32:	2101      	movs	r1, #1
   1cc34:	2028      	movs	r0, #40	; 0x28
   1cc36:	f7f4 f885 	bl	10d44 <z_arm_irq_priority_set>
   1cc3a:	2028      	movs	r0, #40	; 0x28
   1cc3c:	f7f4 f852 	bl	10ce4 <arch_irq_enable>
   1cc40:	2100      	movs	r1, #0
   1cc42:	4620      	mov	r0, r4
   1cc44:	f7ff ff82 	bl	1cb4c <uarte_instance_init>
   1cc48:	bd10      	pop	{r4, pc}

0001cc4a <rng_pool_put>:
	uint8_t first = rngp->first_read;
   1cc4a:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   1cc4c:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   1cc4e:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   1cc52:	1a9a      	subs	r2, r3, r2
   1cc54:	ea3c 0202 	bics.w	r2, ip, r2
   1cc58:	d008      	beq.n	1cc6c <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   1cc5a:	18c2      	adds	r2, r0, r3
   1cc5c:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   1cc5e:	3301      	adds	r3, #1
   1cc60:	b25b      	sxtb	r3, r3
   1cc62:	ea03 030c 	and.w	r3, r3, ip
   1cc66:	7083      	strb	r3, [r0, #2]
	return 0;
   1cc68:	2000      	movs	r0, #0
   1cc6a:	4770      	bx	lr
		return -ENOBUFS;
   1cc6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1cc70:	4770      	bx	lr

0001cc72 <rng_pool_init>:
	rngp->first_alloc = 0U;
   1cc72:	2300      	movs	r3, #0
   1cc74:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   1cc76:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   1cc78:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   1cc7a:	3901      	subs	r1, #1
   1cc7c:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   1cc7e:	7102      	strb	r2, [r0, #4]
}
   1cc80:	4770      	bx	lr

0001cc82 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1cc82:	2000      	movs	r0, #0
   1cc84:	4770      	bx	lr

0001cc86 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1cc86:	b538      	push	{r3, r4, r5, lr}
   1cc88:	460c      	mov	r4, r1
   1cc8a:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1cc8c:	f7f5 f9b4 	bl	11ff8 <bt_is_ready>
   1cc90:	b120      	cbz	r0, 1cc9c <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1cc92:	4629      	mov	r1, r5
   1cc94:	4620      	mov	r0, r4
   1cc96:	f7f4 ffdb 	bl	11c50 <bt_hci_le_rand>
}
   1cc9a:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1cc9c:	f06f 000a 	mvn.w	r0, #10
   1cca0:	e7fb      	b.n	1cc9a <entropy_bt_get_entropy+0x14>

0001cca2 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1cca2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cca4:	b083      	sub	sp, #12
   1cca6:	460f      	mov	r7, r1
   1cca8:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1ccaa:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1ccae:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   1ccb0:	e00a      	b.n	1ccc8 <entropy_cc3xx_rng_get_entropy+0x26>
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1ccb2:	ab01      	add	r3, sp, #4
   1ccb4:	462a      	mov	r2, r5
   1ccb6:	1939      	adds	r1, r7, r4
   1ccb8:	2000      	movs	r0, #0
   1ccba:	f7fb f86f 	bl	17d9c <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   1ccbe:	b970      	cbnz	r0, 1ccde <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
		}
#endif /* defined(CONFIG_SPM) */
		if (olen != chunk_size) {
   1ccc0:	9b01      	ldr	r3, [sp, #4]
   1ccc2:	42ab      	cmp	r3, r5
   1ccc4:	d10f      	bne.n	1cce6 <entropy_cc3xx_rng_get_entropy+0x44>
			return -EINVAL;
		}

		offset += chunk_size;
   1ccc6:	442c      	add	r4, r5
	while (offset < length) {
   1ccc8:	42a6      	cmp	r6, r4
   1ccca:	d905      	bls.n	1ccd8 <entropy_cc3xx_rng_get_entropy+0x36>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1cccc:	1b33      	subs	r3, r6, r4
   1ccce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1ccd2:	d2ee      	bcs.n	1ccb2 <entropy_cc3xx_rng_get_entropy+0x10>
			chunk_size = length - offset;
   1ccd4:	461d      	mov	r5, r3
   1ccd6:	e7ec      	b.n	1ccb2 <entropy_cc3xx_rng_get_entropy+0x10>
	}

	if (offset == length) {
   1ccd8:	d008      	beq.n	1ccec <entropy_cc3xx_rng_get_entropy+0x4a>
	int err = EINVAL;
   1ccda:	2016      	movs	r0, #22
   1ccdc:	e001      	b.n	1cce2 <entropy_cc3xx_rng_get_entropy+0x40>
			return -EINVAL;
   1ccde:	f06f 0015 	mvn.w	r0, #21
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1cce2:	b003      	add	sp, #12
   1cce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
   1cce6:	f06f 0015 	mvn.w	r0, #21
   1ccea:	e7fa      	b.n	1cce2 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   1ccec:	2000      	movs	r0, #0
   1ccee:	e7f8      	b.n	1cce2 <entropy_cc3xx_rng_get_entropy+0x40>

0001ccf0 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1ccf0:	b508      	push	{r3, lr}
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1ccf2:	2200      	movs	r2, #0
   1ccf4:	4611      	mov	r1, r2
   1ccf6:	4610      	mov	r0, r2
   1ccf8:	f7fb f81e 	bl	17d38 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
   1ccfc:	b900      	cbnz	r0, 1cd00 <entropy_cc3xx_rng_init+0x10>
		return -EINVAL;
	}
#endif

	return 0;
}
   1ccfe:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1cd00:	f06f 0015 	mvn.w	r0, #21
   1cd04:	e7fb      	b.n	1ccfe <entropy_cc3xx_rng_init+0xe>

0001cd06 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1cd06:	4770      	bx	lr

0001cd08 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1cd08:	1a40      	subs	r0, r0, r1
}
   1cd0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1cd0e:	4770      	bx	lr

0001cd10 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1cd10:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1cd14:	009b      	lsls	r3, r3, #2
   1cd16:	b29b      	uxth	r3, r3
   1cd18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cd1c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1cd20:	2200      	movs	r2, #0
   1cd22:	601a      	str	r2, [r3, #0]
   1cd24:	681b      	ldr	r3, [r3, #0]
}
   1cd26:	4770      	bx	lr

0001cd28 <absolute_time_to_cc>:
}
   1cd28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1cd2c:	4770      	bx	lr

0001cd2e <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1cd2e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cd32:	b672      	cpsid	i
}
   1cd34:	4770      	bx	lr

0001cd36 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1cd36:	f380 8810 	msr	PRIMASK, r0
}
   1cd3a:	4770      	bx	lr

0001cd3c <set_absolute_alarm>:
{
   1cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd3e:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1cd40:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1cd44:	f7f6 feec 	bl	13b20 <get_comparator>
   1cd48:	4607      	mov	r7, r0
   1cd4a:	e019      	b.n	1cd80 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1cd4c:	2013      	movs	r0, #19
   1cd4e:	f001 fab6 	bl	1e2be <z_impl_k_busy_wait>
}
   1cd52:	e022      	b.n	1cd9a <set_absolute_alarm+0x5e>
		event_clear(chan);
   1cd54:	4630      	mov	r0, r6
   1cd56:	f7ff ffdb 	bl	1cd10 <event_clear>
		event_enable(chan);
   1cd5a:	4630      	mov	r0, r6
   1cd5c:	f7f6 fee8 	bl	13b30 <event_enable>
		set_comparator(chan, cc_val);
   1cd60:	4629      	mov	r1, r5
   1cd62:	4630      	mov	r0, r6
   1cd64:	f7f6 fed2 	bl	13b0c <set_comparator>
		now2 = counter();
   1cd68:	f7f6 fef6 	bl	13b58 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1cd6c:	4284      	cmp	r4, r0
   1cd6e:	d01e      	beq.n	1cdae <set_absolute_alarm+0x72>
   1cd70:	1c81      	adds	r1, r0, #2
   1cd72:	4628      	mov	r0, r5
   1cd74:	f7ff ffc8 	bl	1cd08 <counter_sub>
	} while ((now2 != now) &&
   1cd78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cd7c:	d917      	bls.n	1cdae <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1cd7e:	462f      	mov	r7, r5
		now = counter();
   1cd80:	f7f6 feea 	bl	13b58 <counter>
   1cd84:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1cd86:	4601      	mov	r1, r0
   1cd88:	4630      	mov	r0, r6
   1cd8a:	f7f6 febf 	bl	13b0c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1cd8e:	4621      	mov	r1, r4
   1cd90:	4638      	mov	r0, r7
   1cd92:	f7ff ffb9 	bl	1cd08 <counter_sub>
   1cd96:	2801      	cmp	r0, #1
   1cd98:	d0d8      	beq.n	1cd4c <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1cd9a:	1ca7      	adds	r7, r4, #2
   1cd9c:	4639      	mov	r1, r7
   1cd9e:	4628      	mov	r0, r5
   1cda0:	f7ff ffb2 	bl	1cd08 <counter_sub>
   1cda4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cda8:	d9d4      	bls.n	1cd54 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1cdaa:	463d      	mov	r5, r7
   1cdac:	e7d2      	b.n	1cd54 <set_absolute_alarm+0x18>
}
   1cdae:	4628      	mov	r0, r5
   1cdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cdb2 <compare_set>:
{
   1cdb2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdb4:	b083      	sub	sp, #12
   1cdb6:	4604      	mov	r4, r0
   1cdb8:	4617      	mov	r7, r2
   1cdba:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1cdbc:	f7f6 fed2 	bl	13b64 <compare_int_lock>
   1cdc0:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1cdc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cdc4:	9301      	str	r3, [sp, #4]
   1cdc6:	9b08      	ldr	r3, [sp, #32]
   1cdc8:	9300      	str	r3, [sp, #0]
   1cdca:	463a      	mov	r2, r7
   1cdcc:	462b      	mov	r3, r5
   1cdce:	4620      	mov	r0, r4
   1cdd0:	f7f6 ffb8 	bl	13d44 <compare_set_nolocks>
   1cdd4:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1cdd6:	4631      	mov	r1, r6
   1cdd8:	4620      	mov	r0, r4
   1cdda:	f7f6 ff27 	bl	13c2c <compare_int_unlock>
}
   1cdde:	4628      	mov	r0, r5
   1cde0:	b003      	add	sp, #12
   1cde2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cde4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1cde4:	b410      	push	{r4}
	*state = &config->states[0];
   1cde6:	6843      	ldr	r3, [r0, #4]
   1cde8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1cdea:	e001      	b.n	1cdf0 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   1cdec:	3408      	adds	r4, #8
   1cdee:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1cdf0:	6814      	ldr	r4, [r2, #0]
   1cdf2:	7a03      	ldrb	r3, [r0, #8]
   1cdf4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1cdf8:	3b01      	subs	r3, #1
   1cdfa:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1cdfe:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   1ce02:	429c      	cmp	r4, r3
   1ce04:	d804      	bhi.n	1ce10 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   1ce06:	7963      	ldrb	r3, [r4, #5]
   1ce08:	428b      	cmp	r3, r1
   1ce0a:	d1ef      	bne.n	1cdec <pinctrl_lookup_state+0x8>
			return 0;
   1ce0c:	2000      	movs	r0, #0
   1ce0e:	e001      	b.n	1ce14 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   1ce10:	f06f 0001 	mvn.w	r0, #1
}
   1ce14:	bc10      	pop	{r4}
   1ce16:	4770      	bx	lr

0001ce18 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1ce18:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1ce1a:	2000      	movs	r0, #0
   1ce1c:	f7f4 fb4a 	bl	114b4 <sys_arch_reboot>

0001ce20 <sdc_assertion_handler>:
	k_oops();
   1ce20:	4040      	eors	r0, r0
   1ce22:	f380 8811 	msr	BASEPRI, r0
   1ce26:	f04f 0003 	mov.w	r0, #3
   1ce2a:	df02      	svc	2
}
   1ce2c:	4770      	bx	lr

0001ce2e <event_packet_is_discardable>:
	switch (hdr->evt) {
   1ce2e:	7803      	ldrb	r3, [r0, #0]
   1ce30:	2b3e      	cmp	r3, #62	; 0x3e
   1ce32:	d003      	beq.n	1ce3c <event_packet_is_discardable+0xe>
   1ce34:	2bff      	cmp	r3, #255	; 0xff
   1ce36:	d013      	beq.n	1ce60 <event_packet_is_discardable+0x32>
   1ce38:	2000      	movs	r0, #0
   1ce3a:	4770      	bx	lr
		switch (me->subevent) {
   1ce3c:	7883      	ldrb	r3, [r0, #2]
   1ce3e:	2b02      	cmp	r3, #2
   1ce40:	d015      	beq.n	1ce6e <event_packet_is_discardable+0x40>
   1ce42:	2b0d      	cmp	r3, #13
   1ce44:	d115      	bne.n	1ce72 <event_packet_is_discardable+0x44>
			return (ext_adv->num_reports == 1) &&
   1ce46:	78c3      	ldrb	r3, [r0, #3]
   1ce48:	2b01      	cmp	r3, #1
   1ce4a:	d001      	beq.n	1ce50 <event_packet_is_discardable+0x22>
   1ce4c:	2000      	movs	r0, #0
   1ce4e:	4770      	bx	lr
				   ((ext_adv->adv_info->evt_type &
   1ce50:	8883      	ldrh	r3, [r0, #4]
			return (ext_adv->num_reports == 1) &&
   1ce52:	f013 0f10 	tst.w	r3, #16
   1ce56:	d101      	bne.n	1ce5c <event_packet_is_discardable+0x2e>
   1ce58:	2000      	movs	r0, #0
   1ce5a:	4770      	bx	lr
   1ce5c:	2001      	movs	r0, #1
   1ce5e:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   1ce60:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   1ce62:	2b80      	cmp	r3, #128	; 0x80
   1ce64:	d001      	beq.n	1ce6a <event_packet_is_discardable+0x3c>
			return false;
   1ce66:	2000      	movs	r0, #0
}
   1ce68:	4770      	bx	lr
			return true;
   1ce6a:	2001      	movs	r0, #1
   1ce6c:	4770      	bx	lr
		switch (me->subevent) {
   1ce6e:	2001      	movs	r0, #1
   1ce70:	4770      	bx	lr
			return false;
   1ce72:	2000      	movs	r0, #0
   1ce74:	4770      	bx	lr

0001ce76 <event_packet_process>:
{
   1ce76:	b538      	push	{r3, r4, r5, lr}
   1ce78:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1ce7a:	f7ff ffd8 	bl	1ce2e <event_packet_is_discardable>
   1ce7e:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1ce80:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ce82:	4619      	mov	r1, r3
   1ce84:	b17b      	cbz	r3, 1cea6 <event_packet_process+0x30>
   1ce86:	2200      	movs	r2, #0
   1ce88:	2300      	movs	r3, #0
   1ce8a:	f7f4 fb5f 	bl	1154c <bt_buf_get_evt>
	if (!evt_buf) {
   1ce8e:	4605      	mov	r5, r0
   1ce90:	b140      	cbz	r0, 1cea4 <event_packet_process+0x2e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1ce92:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ce94:	3202      	adds	r2, #2
   1ce96:	4621      	mov	r1, r4
   1ce98:	3008      	adds	r0, #8
   1ce9a:	f7fe fdaf 	bl	1b9fc <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1ce9e:	4628      	mov	r0, r5
   1cea0:	f7fe faea 	bl	1b478 <bt_recv>
}
   1cea4:	bd38      	pop	{r3, r4, r5, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1cea6:	f04f 32ff 	mov.w	r2, #4294967295
   1ceaa:	f04f 33ff 	mov.w	r3, #4294967295
   1ceae:	e7ec      	b.n	1ce8a <event_packet_process+0x14>

0001ceb0 <fetch_and_process_hci_evt>:
{
   1ceb0:	b538      	push	{r3, r4, r5, lr}
   1ceb2:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ceb4:	f04f 30ff 	mov.w	r0, #4294967295
   1ceb8:	f04f 31ff 	mov.w	r1, #4294967295
   1cebc:	f7f7 faae 	bl	1441c <multithreading_lock_acquire>
	if (!errcode) {
   1cec0:	4605      	mov	r5, r0
   1cec2:	b110      	cbz	r0, 1ceca <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   1cec4:	b145      	cbz	r5, 1ced8 <fetch_and_process_hci_evt+0x28>
		return false;
   1cec6:	2000      	movs	r0, #0
}
   1cec8:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   1ceca:	4620      	mov	r0, r4
   1cecc:	f7f7 fba4 	bl	14618 <hci_internal_evt_get>
   1ced0:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1ced2:	f7f7 faad 	bl	14430 <multithreading_lock_release>
   1ced6:	e7f5      	b.n	1cec4 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   1ced8:	4620      	mov	r0, r4
   1ceda:	f7ff ffcc 	bl	1ce76 <event_packet_process>
	return true;
   1cede:	2001      	movs	r0, #1
   1cee0:	e7f2      	b.n	1cec8 <fetch_and_process_hci_evt+0x18>

0001cee2 <data_packet_process>:
{
   1cee2:	b538      	push	{r3, r4, r5, lr}
   1cee4:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1cee6:	f04f 32ff 	mov.w	r2, #4294967295
   1ceea:	f04f 33ff 	mov.w	r3, #4294967295
   1ceee:	2003      	movs	r0, #3
   1cef0:	f7f4 fb02 	bl	114f8 <bt_buf_get_rx>
	if (!data_buf) {
   1cef4:	b148      	cbz	r0, 1cf0a <data_packet_process+0x28>
   1cef6:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1cef8:	8862      	ldrh	r2, [r4, #2]
   1cefa:	3204      	adds	r2, #4
   1cefc:	4621      	mov	r1, r4
   1cefe:	3008      	adds	r0, #8
   1cf00:	f7fe fd7c 	bl	1b9fc <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1cf04:	4628      	mov	r0, r5
   1cf06:	f7fe fab7 	bl	1b478 <bt_recv>
}
   1cf0a:	bd38      	pop	{r3, r4, r5, pc}

0001cf0c <fetch_and_process_hci_msg>:
{
   1cf0c:	b530      	push	{r4, r5, lr}
   1cf0e:	b083      	sub	sp, #12
   1cf10:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1cf12:	f04f 30ff 	mov.w	r0, #4294967295
   1cf16:	f04f 31ff 	mov.w	r1, #4294967295
   1cf1a:	f7f7 fa7f 	bl	1441c <multithreading_lock_acquire>
	if (!errcode) {
   1cf1e:	4605      	mov	r5, r0
   1cf20:	b148      	cbz	r0, 1cf36 <fetch_and_process_hci_msg+0x2a>
	if (errcode) {
   1cf22:	b9dd      	cbnz	r5, 1cf5c <fetch_and_process_hci_msg+0x50>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1cf24:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cf28:	2b04      	cmp	r3, #4
   1cf2a:	d00d      	beq.n	1cf48 <fetch_and_process_hci_msg+0x3c>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1cf2c:	2b02      	cmp	r3, #2
   1cf2e:	d010      	beq.n	1cf52 <fetch_and_process_hci_msg+0x46>
		return false;
   1cf30:	2000      	movs	r0, #0
}
   1cf32:	b003      	add	sp, #12
   1cf34:	bd30      	pop	{r4, r5, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1cf36:	f10d 0107 	add.w	r1, sp, #7
   1cf3a:	4620      	mov	r0, r4
   1cf3c:	f7f7 fb7e 	bl	1463c <hci_internal_msg_get>
   1cf40:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1cf42:	f7f7 fa75 	bl	14430 <multithreading_lock_release>
   1cf46:	e7ec      	b.n	1cf22 <fetch_and_process_hci_msg+0x16>
		event_packet_process(p_hci_buffer);
   1cf48:	4620      	mov	r0, r4
   1cf4a:	f7ff ff94 	bl	1ce76 <event_packet_process>
	return true;
   1cf4e:	2001      	movs	r0, #1
   1cf50:	e7ef      	b.n	1cf32 <fetch_and_process_hci_msg+0x26>
		data_packet_process(p_hci_buffer);
   1cf52:	4620      	mov	r0, r4
   1cf54:	f7ff ffc5 	bl	1cee2 <data_packet_process>
	return true;
   1cf58:	2001      	movs	r0, #1
   1cf5a:	e7ea      	b.n	1cf32 <fetch_and_process_hci_msg+0x26>
		return false;
   1cf5c:	2000      	movs	r0, #0
   1cf5e:	e7e8      	b.n	1cf32 <fetch_and_process_hci_msg+0x26>

0001cf60 <receive_work_handler>:
{
   1cf60:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   1cf62:	f7f7 fa79 	bl	14458 <hci_driver_receive_process>
}
   1cf66:	bd08      	pop	{r3, pc}

0001cf68 <hci_driver_send>:
{
   1cf68:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1cf6a:	8983      	ldrh	r3, [r0, #12]
   1cf6c:	b163      	cbz	r3, 1cf88 <hci_driver_send+0x20>
   1cf6e:	4604      	mov	r4, r0
   1cf70:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1cf72:	b963      	cbnz	r3, 1cf8e <hci_driver_send+0x26>
		err = cmd_handle(buf);
   1cf74:	f7f7 fa92 	bl	1449c <cmd_handle>
	if (!err) {
   1cf78:	4605      	mov	r5, r0
   1cf7a:	b108      	cbz	r0, 1cf80 <hci_driver_send+0x18>
}
   1cf7c:	4628      	mov	r0, r5
   1cf7e:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1cf80:	4620      	mov	r0, r4
   1cf82:	f7fe fd0b 	bl	1b99c <net_buf_unref>
   1cf86:	e7f9      	b.n	1cf7c <hci_driver_send+0x14>
		return -EINVAL;
   1cf88:	f06f 0515 	mvn.w	r5, #21
   1cf8c:	e7f6      	b.n	1cf7c <hci_driver_send+0x14>
		return -EINVAL;
   1cf8e:	f06f 0515 	mvn.w	r5, #21
   1cf92:	e7f3      	b.n	1cf7c <hci_driver_send+0x14>

0001cf94 <configure_supported_features>:
{
   1cf94:	b508      	push	{r3, lr}
				err = sdc_support_ext_scan();
   1cf96:	f7e7 f845 	bl	4024 <sdc_support_ext_scan>
				if (err) {
   1cf9a:	b918      	cbnz	r0, 1cfa4 <configure_supported_features+0x10>
		err = sdc_support_le_2m_phy();
   1cf9c:	f7e7 f854 	bl	4048 <sdc_support_le_2m_phy>
		if (err) {
   1cfa0:	b918      	cbnz	r0, 1cfaa <configure_supported_features+0x16>
}
   1cfa2:	bd08      	pop	{r3, pc}
					return -ENOTSUP;
   1cfa4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cfa8:	e7fb      	b.n	1cfa2 <configure_supported_features+0xe>
			return -ENOTSUP;
   1cfaa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cfae:	e7f8      	b.n	1cfa2 <configure_supported_features+0xe>

0001cfb0 <configure_memory_usage>:
{
   1cfb0:	b500      	push	{lr}
   1cfb2:	b083      	sub	sp, #12
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1cfb4:	2000      	movs	r0, #0
   1cfb6:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfba:	aa01      	add	r2, sp, #4
   1cfbc:	2101      	movs	r1, #1
   1cfbe:	f7e6 ff21 	bl	3e04 <sdc_cfg_set>
	if (required_memory < 0) {
   1cfc2:	2800      	cmp	r0, #0
   1cfc4:	db3a      	blt.n	1d03c <configure_memory_usage+0x8c>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1cfc6:	2000      	movs	r0, #0
   1cfc8:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfcc:	aa01      	add	r2, sp, #4
   1cfce:	2102      	movs	r1, #2
   1cfd0:	f7e6 ff18 	bl	3e04 <sdc_cfg_set>
	if (required_memory < 0) {
   1cfd4:	2800      	cmp	r0, #0
   1cfd6:	db31      	blt.n	1d03c <configure_memory_usage+0x8c>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1cfd8:	231b      	movs	r3, #27
   1cfda:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1cfde:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   1cfe2:	2302      	movs	r3, #2
   1cfe4:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   1cfe8:	2103      	movs	r1, #3
   1cfea:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfee:	aa01      	add	r2, sp, #4
   1cff0:	2000      	movs	r0, #0
   1cff2:	f7e6 ff07 	bl	3e04 <sdc_cfg_set>
	if (required_memory < 0) {
   1cff6:	2800      	cmp	r0, #0
   1cff8:	db20      	blt.n	1d03c <configure_memory_usage+0x8c>
	cfg.event_length.event_length_us =
   1cffa:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1cffe:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d000:	aa01      	add	r2, sp, #4
   1d002:	2104      	movs	r1, #4
   1d004:	2000      	movs	r0, #0
   1d006:	f7e6 fefd 	bl	3e04 <sdc_cfg_set>
	if (required_memory < 0) {
   1d00a:	2800      	cmp	r0, #0
   1d00c:	db16      	blt.n	1d03c <configure_memory_usage+0x8c>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1d00e:	2000      	movs	r0, #0
   1d010:	f88d 0004 	strb.w	r0, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d014:	aa01      	add	r2, sp, #4
   1d016:	2105      	movs	r1, #5
   1d018:	f7e6 fef4 	bl	3e04 <sdc_cfg_set>
	if (required_memory < 0) {
   1d01c:	2800      	cmp	r0, #0
   1d01e:	db0d      	blt.n	1d03c <configure_memory_usage+0x8c>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1d020:	2303      	movs	r3, #3
   1d022:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d026:	aa01      	add	r2, sp, #4
   1d028:	2106      	movs	r1, #6
   1d02a:	2000      	movs	r0, #0
   1d02c:	f7e6 feea 	bl	3e04 <sdc_cfg_set>
		if (required_memory < 0) {
   1d030:	2800      	cmp	r0, #0
   1d032:	db03      	blt.n	1d03c <configure_memory_usage+0x8c>
	if (required_memory > sizeof(sdc_mempool)) {
   1d034:	f5b0 7f71 	cmp.w	r0, #964	; 0x3c4
   1d038:	d203      	bcs.n	1d042 <configure_memory_usage+0x92>
	return 0;
   1d03a:	2000      	movs	r0, #0
}
   1d03c:	b003      	add	sp, #12
   1d03e:	f85d fb04 	ldr.w	pc, [sp], #4
		k_panic();
   1d042:	4040      	eors	r0, r0
   1d044:	f380 8811 	msr	BASEPRI, r0
   1d048:	f04f 0004 	mov.w	r0, #4
   1d04c:	df02      	svc	2
		return -ENOMEM;
   1d04e:	f06f 000b 	mvn.w	r0, #11
   1d052:	e7f3      	b.n	1d03c <configure_memory_usage+0x8c>

0001d054 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   1d054:	f242 0344 	movw	r3, #8260	; 0x2044
   1d058:	4298      	cmp	r0, r3
   1d05a:	d834      	bhi.n	1d0c6 <command_generates_command_complete_event+0x72>
   1d05c:	f242 030d 	movw	r3, #8205	; 0x200d
   1d060:	4298      	cmp	r0, r3
   1d062:	d322      	bcc.n	1d0aa <command_generates_command_complete_event+0x56>
   1d064:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   1d068:	380d      	subs	r0, #13
   1d06a:	2837      	cmp	r0, #55	; 0x37
   1d06c:	d82f      	bhi.n	1d0ce <command_generates_command_complete_event+0x7a>
   1d06e:	e8df f000 	tbb	[pc, r0]
   1d072:	2e28      	.short	0x2e28
   1d074:	2e2e2e2e 	.word	0x2e2e2e2e
   1d078:	282e2e28 	.word	0x282e2e28
   1d07c:	2e282e2e 	.word	0x2e282e2e
   1d080:	2e2e2e2e 	.word	0x2e2e2e2e
   1d084:	2e2e2e2e 	.word	0x2e2e2e2e
   1d088:	28282e2e 	.word	0x28282e2e
   1d08c:	2e2e2e2e 	.word	0x2e2e2e2e
   1d090:	2e2e2e2e 	.word	0x2e2e2e2e
   1d094:	282e2e2e 	.word	0x282e2e2e
   1d098:	2e2e2e2e 	.word	0x2e2e2e2e
   1d09c:	2e2e2e2e 	.word	0x2e2e2e2e
   1d0a0:	2e2e2e2e 	.word	0x2e2e2e2e
   1d0a4:	2e2e2e2e 	.word	0x2e2e2e2e
   1d0a8:	2828      	.short	0x2828
   1d0aa:	f240 4306 	movw	r3, #1030	; 0x406
   1d0ae:	4298      	cmp	r0, r3
   1d0b0:	d00b      	beq.n	1d0ca <command_generates_command_complete_event+0x76>
   1d0b2:	f240 431d 	movw	r3, #1053	; 0x41d
   1d0b6:	4298      	cmp	r0, r3
   1d0b8:	d001      	beq.n	1d0be <command_generates_command_complete_event+0x6a>
		return true;
   1d0ba:	2001      	movs	r0, #1
   1d0bc:	4770      	bx	lr
	switch (hci_opcode) {
   1d0be:	2000      	movs	r0, #0
   1d0c0:	4770      	bx	lr
   1d0c2:	2000      	movs	r0, #0
   1d0c4:	4770      	bx	lr
		return true;
   1d0c6:	2001      	movs	r0, #1
   1d0c8:	4770      	bx	lr
	switch (hci_opcode) {
   1d0ca:	2000      	movs	r0, #0
   1d0cc:	4770      	bx	lr
		return true;
   1d0ce:	2001      	movs	r0, #1
}
   1d0d0:	4770      	bx	lr

0001d0d2 <is_host_using_legacy_and_extended_commands>:
}
   1d0d2:	2000      	movs	r0, #0
   1d0d4:	4770      	bx	lr

0001d0d6 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d0d6:	230f      	movs	r3, #15
   1d0d8:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d0da:	2304      	movs	r3, #4
   1d0dc:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   1d0de:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   1d0e0:	2301      	movs	r3, #1
   1d0e2:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   1d0e4:	8081      	strh	r1, [r0, #4]
}
   1d0e6:	4770      	bx	lr

0001d0e8 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d0e8:	f04f 0c0e 	mov.w	ip, #14
   1d0ec:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   1d0f0:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   1d0f2:	2201      	movs	r2, #1
   1d0f4:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   1d0f6:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1d0fa:	7143      	strb	r3, [r0, #5]
}
   1d0fc:	4770      	bx	lr

0001d0fe <le_read_supported_states>:
	*buf = states1;
   1d0fe:	2330      	movs	r3, #48	; 0x30
   1d100:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   1d102:	2300      	movs	r3, #0
   1d104:	7103      	strb	r3, [r0, #4]
}
   1d106:	4770      	bx	lr

0001d108 <status_param_cmd_put>:
}
   1d108:	2001      	movs	r0, #1
   1d10a:	4770      	bx	lr

0001d10c <controller_and_baseband_cmd_put>:
{
   1d10c:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   1d10e:	7841      	ldrb	r1, [r0, #1]
   1d110:	7803      	ldrb	r3, [r0, #0]
   1d112:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d116:	b21b      	sxth	r3, r3
	switch (opcode)	{
   1d118:	f640 4201 	movw	r2, #3073	; 0xc01
   1d11c:	4293      	cmp	r3, r2
   1d11e:	d005      	beq.n	1d12c <controller_and_baseband_cmd_put+0x20>
   1d120:	f640 4203 	movw	r2, #3075	; 0xc03
   1d124:	4293      	cmp	r3, r2
   1d126:	d005      	beq.n	1d134 <controller_and_baseband_cmd_put+0x28>
   1d128:	2001      	movs	r0, #1
}
   1d12a:	bd08      	pop	{r3, pc}
   1d12c:	3003      	adds	r0, #3
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1d12e:	f7f0 f95c 	bl	d3ea <sdc_hci_cmd_cb_set_event_mask>
   1d132:	e7fa      	b.n	1d12a <controller_and_baseband_cmd_put+0x1e>
		return sdc_hci_cmd_cb_reset();
   1d134:	f7e7 f8f4 	bl	4320 <sdc_hci_cmd_cb_reset>
   1d138:	e7f7      	b.n	1d12a <controller_and_baseband_cmd_put+0x1e>

0001d13a <supported_commands>:
{
   1d13a:	b510      	push	{r4, lr}
   1d13c:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1d13e:	222f      	movs	r2, #47	; 0x2f
   1d140:	2100      	movs	r1, #0
   1d142:	f7fe f8bd 	bl	1b2c0 <memset>
	cmds->hci_set_event_mask = 1;
   1d146:	7963      	ldrb	r3, [r4, #5]
   1d148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d14c:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   1d14e:	b2db      	uxtb	r3, r3
   1d150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d154:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_local_version_information = 1;
   1d156:	7ba3      	ldrb	r3, [r4, #14]
   1d158:	f043 0308 	orr.w	r3, r3, #8
   1d15c:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   1d15e:	b2db      	uxtb	r3, r3
   1d160:	f043 0320 	orr.w	r3, r3, #32
   1d164:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   1d166:	7be3      	ldrb	r3, [r4, #15]
   1d168:	f043 0302 	orr.w	r3, r3, #2
   1d16c:	73e3      	strb	r3, [r4, #15]
	cmds->hci_le_set_event_mask = 1;
   1d16e:	7e63      	ldrb	r3, [r4, #25]
   1d170:	f043 0301 	orr.w	r3, r3, #1
   1d174:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   1d176:	b2db      	uxtb	r3, r3
   1d178:	f043 0302 	orr.w	r3, r3, #2
   1d17c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   1d17e:	b2db      	uxtb	r3, r3
   1d180:	f043 0304 	orr.w	r3, r3, #4
   1d184:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   1d186:	b2db      	uxtb	r3, r3
   1d188:	f043 0310 	orr.w	r3, r3, #16
   1d18c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   1d18e:	7ea3      	ldrb	r3, [r4, #26]
   1d190:	f043 0304 	orr.w	r3, r3, #4
   1d194:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_scan_enable = 1;
   1d196:	b2db      	uxtb	r3, r3
   1d198:	f043 0308 	orr.w	r3, r3, #8
   1d19c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_read_filter_accept_list_size = 1;
   1d19e:	b2db      	uxtb	r3, r3
   1d1a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d1a4:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   1d1a6:	b2db      	uxtb	r3, r3
   1d1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d1ac:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1d1ae:	7ee3      	ldrb	r3, [r4, #27]
   1d1b0:	f043 0301 	orr.w	r3, r3, #1
   1d1b4:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   1d1b6:	b2db      	uxtb	r3, r3
   1d1b8:	f043 0302 	orr.w	r3, r3, #2
   1d1bc:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_set_host_channel_classification = 1;
   1d1be:	b2db      	uxtb	r3, r3
   1d1c0:	f043 0308 	orr.w	r3, r3, #8
   1d1c4:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   1d1c6:	b2db      	uxtb	r3, r3
   1d1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d1cc:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   1d1ce:	b2db      	uxtb	r3, r3
   1d1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d1d4:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_supported_states = 1;
   1d1d6:	7f23      	ldrb	r3, [r4, #28]
   1d1d8:	f043 0308 	orr.w	r3, r3, #8
   1d1dc:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   1d1de:	b2db      	uxtb	r3, r3
   1d1e0:	f043 0310 	orr.w	r3, r3, #16
   1d1e4:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   1d1e6:	b2db      	uxtb	r3, r3
   1d1e8:	f043 0320 	orr.w	r3, r3, #32
   1d1ec:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   1d1ee:	b2db      	uxtb	r3, r3
   1d1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d1f4:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v2 = 1;
   1d1f6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d1fe:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   1d202:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1d206:	f043 0301 	orr.w	r3, r3, #1
   1d20a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_set_extended_scan_parameters = 1;
   1d20e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1d212:	f043 0320 	orr.w	r3, r3, #32
   1d216:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	cmds->hci_le_set_extended_scan_enable = 1;
   1d21a:	b2db      	uxtb	r3, r3
   1d21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d220:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	cmds->hci_le_read_transmit_power = 1;
   1d224:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1d228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d22c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
   1d230:	bd10      	pop	{r4, pc}

0001d232 <supported_features>:
{
   1d232:	b510      	push	{r4, lr}
   1d234:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   1d236:	2208      	movs	r2, #8
   1d238:	2100      	movs	r1, #0
   1d23a:	f7fe f841 	bl	1b2c0 <memset>
	features->bdedr_not_supported = 1;
   1d23e:	7923      	ldrb	r3, [r4, #4]
   1d240:	f043 0320 	orr.w	r3, r3, #32
   1d244:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   1d246:	b2db      	uxtb	r3, r3
   1d248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d24c:	7123      	strb	r3, [r4, #4]
}
   1d24e:	bd10      	pop	{r4, pc}

0001d250 <info_param_cmd_put>:
{
   1d250:	b508      	push	{r3, lr}
   1d252:	4684      	mov	ip, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   1d254:	1d88      	adds	r0, r1, #6
   1d256:	f89c e001 	ldrb.w	lr, [ip, #1]
   1d25a:	f89c 3000 	ldrb.w	r3, [ip]
   1d25e:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   1d262:	b21b      	sxth	r3, r3
	switch (opcode)	{
   1d264:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1d268:	3b01      	subs	r3, #1
   1d26a:	2b08      	cmp	r3, #8
   1d26c:	d820      	bhi.n	1d2b0 <info_param_cmd_put+0x60>
   1d26e:	e8df f003 	tbb	[pc, r3]
   1d272:	0b05      	.short	0x0b05
   1d274:	1f1f1f12 	.word	0x1f1f1f12
   1d278:	1f1f      	.short	0x1f1f
   1d27a:	19          	.byte	0x19
   1d27b:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1d27c:	7813      	ldrb	r3, [r2, #0]
   1d27e:	3308      	adds	r3, #8
   1d280:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1d282:	f7f0 f998 	bl	d5b6 <sdc_hci_cmd_ip_read_local_version_information>
   1d286:	e014      	b.n	1d2b2 <info_param_cmd_put+0x62>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1d288:	7813      	ldrb	r3, [r2, #0]
   1d28a:	3340      	adds	r3, #64	; 0x40
   1d28c:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   1d28e:	f7ff ff54 	bl	1d13a <supported_commands>
		return 0;
   1d292:	2000      	movs	r0, #0
   1d294:	e00d      	b.n	1d2b2 <info_param_cmd_put+0x62>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1d296:	7813      	ldrb	r3, [r2, #0]
   1d298:	3308      	adds	r3, #8
   1d29a:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   1d29c:	f7ff ffc9 	bl	1d232 <supported_features>
		return 0;
   1d2a0:	2000      	movs	r0, #0
   1d2a2:	e006      	b.n	1d2b2 <info_param_cmd_put+0x62>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1d2a4:	7813      	ldrb	r3, [r2, #0]
   1d2a6:	3306      	adds	r3, #6
   1d2a8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1d2aa:	f7f0 f982 	bl	d5b2 <sdc_hci_cmd_ip_read_bd_addr>
   1d2ae:	e000      	b.n	1d2b2 <info_param_cmd_put+0x62>
	switch (opcode)	{
   1d2b0:	2001      	movs	r0, #1
}
   1d2b2:	bd08      	pop	{r3, pc}

0001d2b4 <le_supported_features>:
{
   1d2b4:	b510      	push	{r4, lr}
   1d2b6:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   1d2b8:	2205      	movs	r2, #5
   1d2ba:	2100      	movs	r1, #0
   1d2bc:	f7fe f800 	bl	1b2c0 <memset>
	features->le_encryption = 1;
   1d2c0:	7823      	ldrb	r3, [r4, #0]
   1d2c2:	f043 0301 	orr.w	r3, r3, #1
   1d2c6:	7023      	strb	r3, [r4, #0]
	features->extended_reject_indication = 1;
   1d2c8:	b2db      	uxtb	r3, r3
   1d2ca:	f043 0304 	orr.w	r3, r3, #4
   1d2ce:	7023      	strb	r3, [r4, #0]
	features->slave_initiated_features_exchange = 1;
   1d2d0:	b2db      	uxtb	r3, r3
   1d2d2:	f043 0308 	orr.w	r3, r3, #8
   1d2d6:	7023      	strb	r3, [r4, #0]
	features->le_ping = 1;
   1d2d8:	b2db      	uxtb	r3, r3
   1d2da:	f043 0310 	orr.w	r3, r3, #16
   1d2de:	7023      	strb	r3, [r4, #0]
	features->extended_scanner_filter_policies = 1;
   1d2e0:	b2db      	uxtb	r3, r3
   1d2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d2e6:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   1d2e8:	7863      	ldrb	r3, [r4, #1]
   1d2ea:	f043 0301 	orr.w	r3, r3, #1
   1d2ee:	7063      	strb	r3, [r4, #1]
	features->le_extended_advertising = 1;
   1d2f0:	b2db      	uxtb	r3, r3
   1d2f2:	f043 0310 	orr.w	r3, r3, #16
   1d2f6:	7063      	strb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   1d2f8:	b2db      	uxtb	r3, r3
   1d2fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d2fe:	7063      	strb	r3, [r4, #1]
}
   1d300:	bd10      	pop	{r4, pc}

0001d302 <vs_zephyr_supported_commands>:
{
   1d302:	b510      	push	{r4, lr}
   1d304:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1d306:	2202      	movs	r2, #2
   1d308:	2100      	movs	r1, #0
   1d30a:	f7fd ffd9 	bl	1b2c0 <memset>
	cmds->read_version_info = 1;
   1d30e:	7823      	ldrb	r3, [r4, #0]
   1d310:	f043 0301 	orr.w	r3, r3, #1
   1d314:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   1d316:	b2db      	uxtb	r3, r3
   1d318:	f043 0302 	orr.w	r3, r3, #2
   1d31c:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   1d31e:	b2db      	uxtb	r3, r3
   1d320:	f043 0320 	orr.w	r3, r3, #32
   1d324:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   1d326:	7863      	ldrb	r3, [r4, #1]
   1d328:	f043 0301 	orr.w	r3, r3, #1
   1d32c:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   1d32e:	b2db      	uxtb	r3, r3
   1d330:	f043 0302 	orr.w	r3, r3, #2
   1d334:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   1d336:	b2db      	uxtb	r3, r3
   1d338:	f043 0304 	orr.w	r3, r3, #4
   1d33c:	7063      	strb	r3, [r4, #1]
}
   1d33e:	bd10      	pop	{r4, pc}

0001d340 <vs_supported_commands>:
{
   1d340:	b510      	push	{r4, lr}
   1d342:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1d344:	2202      	movs	r2, #2
   1d346:	2100      	movs	r1, #0
   1d348:	f7fd ffba 	bl	1b2c0 <memset>
	cmds->read_supported_vs_commands = 1;
   1d34c:	7823      	ldrb	r3, [r4, #0]
   1d34e:	f043 0301 	orr.w	r3, r3, #1
   1d352:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   1d354:	b2db      	uxtb	r3, r3
   1d356:	f043 0302 	orr.w	r3, r3, #2
   1d35a:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   1d35c:	b2db      	uxtb	r3, r3
   1d35e:	f043 0304 	orr.w	r3, r3, #4
   1d362:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   1d364:	b2db      	uxtb	r3, r3
   1d366:	f043 0308 	orr.w	r3, r3, #8
   1d36a:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   1d36c:	b2db      	uxtb	r3, r3
   1d36e:	f043 0310 	orr.w	r3, r3, #16
   1d372:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   1d374:	b2db      	uxtb	r3, r3
   1d376:	f043 0320 	orr.w	r3, r3, #32
   1d37a:	7023      	strb	r3, [r4, #0]
}
   1d37c:	bd10      	pop	{r4, pc}

0001d37e <le_controller_cmd_put>:
{
   1d37e:	b508      	push	{r3, lr}
   1d380:	4684      	mov	ip, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d382:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   1d384:	3106      	adds	r1, #6
   1d386:	f89c e001 	ldrb.w	lr, [ip, #1]
   1d38a:	f89c 3000 	ldrb.w	r3, [ip]
   1d38e:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   1d392:	b21b      	sxth	r3, r3
	switch (opcode)	{
   1d394:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1d398:	3b01      	subs	r3, #1
   1d39a:	2b4a      	cmp	r3, #74	; 0x4a
   1d39c:	d877      	bhi.n	1d48e <le_controller_cmd_put+0x110>
   1d39e:	e8df f003 	tbb	[pc, r3]
   1d3a2:	2926      	.short	0x2926
   1d3a4:	76387630 	.word	0x76387630
   1d3a8:	76767676 	.word	0x76767676
   1d3ac:	76763e3b 	.word	0x76763e3b
   1d3b0:	4e4b4841 	.word	0x4e4b4841
   1d3b4:	76765176 	.word	0x76765176
   1d3b8:	76765a54 	.word	0x76765a54
   1d3bc:	76766176 	.word	0x76766176
   1d3c0:	76767676 	.word	0x76767676
   1d3c4:	76767676 	.word	0x76767676
   1d3c8:	76767676 	.word	0x76767676
   1d3cc:	76767676 	.word	0x76767676
   1d3d0:	76767676 	.word	0x76767676
   1d3d4:	76767676 	.word	0x76767676
   1d3d8:	76767676 	.word	0x76767676
   1d3dc:	76767676 	.word	0x76767676
   1d3e0:	6c697676 	.word	0x6c697676
   1d3e4:	76767676 	.word	0x76767676
   1d3e8:	76767676 	.word	0x76767676
   1d3ec:	6f          	.byte	0x6f
   1d3ed:	00          	.byte	0x00
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1d3ee:	f7f0 f8f8 	bl	d5e2 <sdc_hci_cmd_le_set_event_mask>
   1d3f2:	e04d      	b.n	1d490 <le_controller_cmd_put+0x112>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1d3f4:	7813      	ldrb	r3, [r2, #0]
   1d3f6:	3303      	adds	r3, #3
   1d3f8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1d3fa:	4608      	mov	r0, r1
   1d3fc:	f7f0 f8e9 	bl	d5d2 <sdc_hci_cmd_le_read_buffer_size>
   1d400:	e046      	b.n	1d490 <le_controller_cmd_put+0x112>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1d402:	7813      	ldrb	r3, [r2, #0]
   1d404:	3308      	adds	r3, #8
   1d406:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   1d408:	4608      	mov	r0, r1
   1d40a:	f7ff ff53 	bl	1d2b4 <le_supported_features>
		return 0;
   1d40e:	2000      	movs	r0, #0
   1d410:	e03e      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1d412:	f7f0 f8f1 	bl	d5f8 <sdc_hci_cmd_le_set_random_address>
   1d416:	e03b      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   1d418:	f7f0 f8f2 	bl	d600 <sdc_hci_cmd_le_set_scan_params>
   1d41c:	e038      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1d41e:	f7f0 f8ed 	bl	d5fc <sdc_hci_cmd_le_set_scan_enable>
   1d422:	e035      	b.n	1d490 <le_controller_cmd_put+0x112>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1d424:	7813      	ldrb	r3, [r2, #0]
   1d426:	3301      	adds	r3, #1
   1d428:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1d42a:	4608      	mov	r0, r1
   1d42c:	f7f0 f8d3 	bl	d5d6 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1d430:	e02e      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1d432:	f7f0 f8c4 	bl	d5be <sdc_hci_cmd_le_clear_filter_accept_list>
   1d436:	e02b      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1d438:	f7f0 f8bf 	bl	d5ba <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1d43c:	e028      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1d43e:	f7f0 f8ce 	bl	d5de <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1d442:	e025      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   1d444:	f7f0 f8d6 	bl	d5f4 <sdc_hci_cmd_le_set_host_channel_classification>
   1d448:	e022      	b.n	1d490 <le_controller_cmd_put+0x112>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1d44a:	7813      	ldrb	r3, [r2, #0]
   1d44c:	3310      	adds	r3, #16
   1d44e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1d450:	f7f0 f8b7 	bl	d5c2 <sdc_hci_cmd_le_encrypt>
   1d454:	e01c      	b.n	1d490 <le_controller_cmd_put+0x112>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1d456:	7813      	ldrb	r3, [r2, #0]
   1d458:	3308      	adds	r3, #8
   1d45a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1d45c:	4608      	mov	r0, r1
   1d45e:	f7f0 f8b6 	bl	d5ce <sdc_hci_cmd_le_rand>
   1d462:	e015      	b.n	1d490 <le_controller_cmd_put+0x112>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1d464:	7813      	ldrb	r3, [r2, #0]
   1d466:	3308      	adds	r3, #8
   1d468:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   1d46a:	4608      	mov	r0, r1
   1d46c:	f7ff fe47 	bl	1d0fe <le_read_supported_states>
		return 0;
   1d470:	2000      	movs	r0, #0
   1d472:	e00d      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_set_ext_scan_params((void *)cmd_params);
   1d474:	f7f0 f8bc 	bl	d5f0 <sdc_hci_cmd_le_set_ext_scan_params>
   1d478:	e00a      	b.n	1d490 <le_controller_cmd_put+0x112>
		return sdc_hci_cmd_le_set_ext_scan_enable((void *)cmd_params);
   1d47a:	f7f0 f8b7 	bl	d5ec <sdc_hci_cmd_le_set_ext_scan_enable>
   1d47e:	e007      	b.n	1d490 <le_controller_cmd_put+0x112>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1d480:	7813      	ldrb	r3, [r2, #0]
   1d482:	3302      	adds	r3, #2
   1d484:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1d486:	4608      	mov	r0, r1
   1d488:	f7f0 f8a7 	bl	d5da <sdc_hci_cmd_le_read_transmit_power>
   1d48c:	e000      	b.n	1d490 <le_controller_cmd_put+0x112>
	switch (opcode)	{
   1d48e:	2001      	movs	r0, #1
}
   1d490:	bd08      	pop	{r3, pc}

0001d492 <vs_cmd_put>:
{
   1d492:	b508      	push	{r3, lr}
   1d494:	4684      	mov	ip, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d496:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   1d498:	3106      	adds	r1, #6
   1d49a:	f89c e001 	ldrb.w	lr, [ip, #1]
   1d49e:	f89c 3000 	ldrb.w	r3, [ip]
   1d4a2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	switch (opcode)	{
   1d4a6:	f64f 4c0a 	movw	ip, #64522	; 0xfc0a
   1d4aa:	4563      	cmp	r3, ip
   1d4ac:	d90f      	bls.n	1d4ce <vs_cmd_put+0x3c>
   1d4ae:	f64f 5c05 	movw	ip, #64773	; 0xfd05
   1d4b2:	4563      	cmp	r3, ip
   1d4b4:	d85c      	bhi.n	1d570 <vs_cmd_put+0xde>
   1d4b6:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   1d4ba:	d319      	bcc.n	1d4f0 <vs_cmd_put+0x5e>
   1d4bc:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1d4c0:	2b05      	cmp	r3, #5
   1d4c2:	d851      	bhi.n	1d568 <vs_cmd_put+0xd6>
   1d4c4:	e8df f003 	tbb	[pc, r3]
   1d4c8:	47444139 	.word	0x47444139
   1d4cc:	4d4a      	.short	0x4d4a
   1d4ce:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1d4d2:	d801      	bhi.n	1d4d8 <vs_cmd_put+0x46>
   1d4d4:	2001      	movs	r0, #1
}
   1d4d6:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   1d4d8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1d4dc:	3b01      	subs	r3, #1
   1d4de:	2b09      	cmp	r3, #9
   1d4e0:	d844      	bhi.n	1d56c <vs_cmd_put+0xda>
   1d4e2:	e8df f003 	tbb	[pc, r3]
   1d4e6:	0e07      	.short	0x0e07
   1d4e8:	27434343 	.word	0x27434343
   1d4ec:	20164343 	.word	0x20164343
   1d4f0:	2001      	movs	r0, #1
   1d4f2:	e7f0      	b.n	1d4d6 <vs_cmd_put+0x44>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1d4f4:	7813      	ldrb	r3, [r2, #0]
   1d4f6:	330c      	adds	r3, #12
   1d4f8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1d4fa:	4608      	mov	r0, r1
   1d4fc:	f7e6 ff28 	bl	4350 <sdc_hci_cmd_vs_zephyr_read_version_info>
   1d500:	e7e9      	b.n	1d4d6 <vs_cmd_put+0x44>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1d502:	7813      	ldrb	r3, [r2, #0]
   1d504:	3340      	adds	r3, #64	; 0x40
   1d506:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   1d508:	4608      	mov	r0, r1
   1d50a:	f7ff fefa 	bl	1d302 <vs_zephyr_supported_commands>
		return 0;
   1d50e:	2000      	movs	r0, #0
   1d510:	e7e1      	b.n	1d4d6 <vs_cmd_put+0x44>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   1d512:	7813      	ldrb	r3, [r2, #0]
   1d514:	3301      	adds	r3, #1
   1d516:	b2db      	uxtb	r3, r3
   1d518:	7013      	strb	r3, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1d51a:	3316      	adds	r3, #22
   1d51c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1d51e:	4608      	mov	r0, r1
   1d520:	f7ef fff6 	bl	d510 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1d524:	e7d7      	b.n	1d4d6 <vs_cmd_put+0x44>
		*param_length_out +=
   1d526:	7813      	ldrb	r3, [r2, #0]
   1d528:	3320      	adds	r3, #32
   1d52a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1d52c:	4608      	mov	r0, r1
   1d52e:	f7ef ffa2 	bl	d476 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1d532:	e7d0      	b.n	1d4d6 <vs_cmd_put+0x44>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1d534:	f7f0 f83b 	bl	d5ae <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1d538:	e7cd      	b.n	1d4d6 <vs_cmd_put+0x44>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1d53a:	7813      	ldrb	r3, [r2, #0]
   1d53c:	3340      	adds	r3, #64	; 0x40
   1d53e:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   1d540:	4608      	mov	r0, r1
   1d542:	f7ff fefd 	bl	1d340 <vs_supported_commands>
		return 0;
   1d546:	2000      	movs	r0, #0
   1d548:	e7c5      	b.n	1d4d6 <vs_cmd_put+0x44>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1d54a:	f7ef ff87 	bl	d45c <sdc_hci_cmd_vs_llpm_mode_set>
   1d54e:	e7c2      	b.n	1d4d6 <vs_cmd_put+0x44>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1d550:	f7ef ff58 	bl	d404 <sdc_hci_cmd_vs_conn_update>
   1d554:	e7bf      	b.n	1d4d6 <vs_cmd_put+0x44>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1d556:	f7ef ff4d 	bl	d3f4 <sdc_hci_cmd_vs_conn_event_extend>
   1d55a:	e7bc      	b.n	1d4d6 <vs_cmd_put+0x44>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1d55c:	f7ef ff86 	bl	d46c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1d560:	e7b9      	b.n	1d4d6 <vs_cmd_put+0x44>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1d562:	f7ef ff79 	bl	d458 <sdc_hci_cmd_vs_event_length_set>
   1d566:	e7b6      	b.n	1d4d6 <vs_cmd_put+0x44>
	switch (opcode)	{
   1d568:	2001      	movs	r0, #1
   1d56a:	e7b4      	b.n	1d4d6 <vs_cmd_put+0x44>
   1d56c:	2001      	movs	r0, #1
   1d56e:	e7b2      	b.n	1d4d6 <vs_cmd_put+0x44>
   1d570:	2001      	movs	r0, #1
   1d572:	e7b0      	b.n	1d4d6 <vs_cmd_put+0x44>

0001d574 <cmd_put>:
{
   1d574:	b570      	push	{r4, r5, r6, lr}
   1d576:	b082      	sub	sp, #8
   1d578:	460e      	mov	r6, r1
   1d57a:	7842      	ldrb	r2, [r0, #1]
   1d57c:	7804      	ldrb	r4, [r0, #0]
   1d57e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1d582:	2304      	movs	r3, #4
   1d584:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   1d588:	0893      	lsrs	r3, r2, #2
   1d58a:	2a23      	cmp	r2, #35	; 0x23
   1d58c:	d809      	bhi.n	1d5a2 <cmd_put+0x2e>
   1d58e:	2b03      	cmp	r3, #3
   1d590:	d335      	bcc.n	1d5fe <cmd_put+0x8a>
   1d592:	3b03      	subs	r3, #3
   1d594:	2b05      	cmp	r3, #5
   1d596:	d834      	bhi.n	1d602 <cmd_put+0x8e>
   1d598:	e8df f003 	tbb	[pc, r3]
   1d59c:	33251f19 	.word	0x33251f19
   1d5a0:	2b33      	.short	0x2b33
   1d5a2:	2b3f      	cmp	r3, #63	; 0x3f
   1d5a4:	d105      	bne.n	1d5b2 <cmd_put+0x3e>
		status = vs_cmd_put(cmd_in,
   1d5a6:	f10d 0207 	add.w	r2, sp, #7
   1d5aa:	f7ff ff72 	bl	1d492 <vs_cmd_put>
   1d5ae:	4605      	mov	r5, r0
		break;
   1d5b0:	e000      	b.n	1d5b4 <cmd_put+0x40>
	switch (BT_OGF(opcode)) {
   1d5b2:	2501      	movs	r5, #1
	if (!command_generates_command_complete_event(opcode) ||
   1d5b4:	4620      	mov	r0, r4
   1d5b6:	f7ff fd4d 	bl	1d054 <command_generates_command_complete_event>
   1d5ba:	b108      	cbz	r0, 1d5c0 <cmd_put+0x4c>
   1d5bc:	2d01      	cmp	r5, #1
   1d5be:	d122      	bne.n	1d606 <cmd_put+0x92>
		encode_command_status(raw_event_out, opcode, status);
   1d5c0:	462a      	mov	r2, r5
   1d5c2:	4621      	mov	r1, r4
   1d5c4:	4630      	mov	r0, r6
   1d5c6:	f7ff fd86 	bl	1d0d6 <encode_command_status>
}
   1d5ca:	b002      	add	sp, #8
   1d5cc:	bd70      	pop	{r4, r5, r6, pc}
		status = controller_and_baseband_cmd_put(cmd_in,
   1d5ce:	f10d 0207 	add.w	r2, sp, #7
   1d5d2:	f7ff fd9b 	bl	1d10c <controller_and_baseband_cmd_put>
   1d5d6:	4605      	mov	r5, r0
		break;
   1d5d8:	e7ec      	b.n	1d5b4 <cmd_put+0x40>
		status = info_param_cmd_put(cmd_in,
   1d5da:	f10d 0207 	add.w	r2, sp, #7
   1d5de:	f7ff fe37 	bl	1d250 <info_param_cmd_put>
   1d5e2:	4605      	mov	r5, r0
		break;
   1d5e4:	e7e6      	b.n	1d5b4 <cmd_put+0x40>
		status = status_param_cmd_put(cmd_in,
   1d5e6:	f10d 0207 	add.w	r2, sp, #7
   1d5ea:	f7ff fd8d 	bl	1d108 <status_param_cmd_put>
   1d5ee:	4605      	mov	r5, r0
		break;
   1d5f0:	e7e0      	b.n	1d5b4 <cmd_put+0x40>
		status = le_controller_cmd_put(cmd_in,
   1d5f2:	f10d 0207 	add.w	r2, sp, #7
   1d5f6:	f7ff fec2 	bl	1d37e <le_controller_cmd_put>
   1d5fa:	4605      	mov	r5, r0
		break;
   1d5fc:	e7da      	b.n	1d5b4 <cmd_put+0x40>
	switch (BT_OGF(opcode)) {
   1d5fe:	2501      	movs	r5, #1
   1d600:	e7d8      	b.n	1d5b4 <cmd_put+0x40>
   1d602:	2501      	movs	r5, #1
   1d604:	e7d6      	b.n	1d5b4 <cmd_put+0x40>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1d606:	462b      	mov	r3, r5
   1d608:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1d60c:	4621      	mov	r1, r4
   1d60e:	4630      	mov	r0, r6
   1d610:	f7ff fd6a 	bl	1d0e8 <encode_command_complete_header>
}
   1d614:	e7d9      	b.n	1d5ca <cmd_put+0x56>

0001d616 <m_assert_handler>:
	k_oops();
   1d616:	4040      	eors	r0, r0
   1d618:	f380 8811 	msr	BASEPRI, r0
   1d61c:	f04f 0003 	mov.w	r0, #3
   1d620:	df02      	svc	2
}
   1d622:	4770      	bx	lr

0001d624 <m_config_clock_source_get>:
}
   1d624:	2001      	movs	r0, #1
   1d626:	4770      	bx	lr

0001d628 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1d628:	4668      	mov	r0, sp
   1d62a:	f020 0107 	bic.w	r1, r0, #7
   1d62e:	468d      	mov	sp, r1
   1d630:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1d632:	f7e5 f8fb 	bl	282c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1d636:	f7f3 fba1 	bl	10d7c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1d63a:	f7f3 fca7 	bl	10f8c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1d63e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1d642:	4685      	mov	sp, r0
   1d644:	4770      	bx	lr

0001d646 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1d646:	4668      	mov	r0, sp
   1d648:	f020 0107 	bic.w	r1, r0, #7
   1d64c:	468d      	mov	sp, r1
   1d64e:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1d650:	f7e5 f862 	bl	2718 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1d654:	f7f3 fb92 	bl	10d7c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1d658:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1d65c:	4685      	mov	sp, r0
   1d65e:	4770      	bx	lr

0001d660 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1d660:	4668      	mov	r0, sp
   1d662:	f020 0107 	bic.w	r1, r0, #7
   1d666:	468d      	mov	sp, r1
   1d668:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1d66a:	f7e2 fddd 	bl	228 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1d66e:	f7f3 fb85 	bl	10d7c <_arch_isr_direct_pm>
   1d672:	f7f3 fc8b 	bl	10f8c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1d676:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1d67a:	4685      	mov	sp, r0
   1d67c:	4770      	bx	lr

0001d67e <mpsl_low_prio_work_handler>:
{
   1d67e:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d680:	f04f 30ff 	mov.w	r0, #4294967295
   1d684:	f04f 31ff 	mov.w	r1, #4294967295
   1d688:	f7f6 fec8 	bl	1441c <multithreading_lock_acquire>
	mpsl_low_priority_process();
   1d68c:	f7ef f9d8 	bl	ca40 <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   1d690:	f7f6 fece 	bl	14430 <multithreading_lock_release>
}
   1d694:	bd08      	pop	{r3, pc}

0001d696 <nrfx_clock_stop>:
	switch (domain) {
   1d696:	2801      	cmp	r0, #1
   1d698:	d000      	beq.n	1d69c <nrfx_clock_stop+0x6>
   1d69a:	4770      	bx	lr
{
   1d69c:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   1d69e:	f7e5 ff3b 	bl	3518 <mpsl_clock_hfclk_release>
}
   1d6a2:	bd08      	pop	{r3, pc}

0001d6a4 <nrfx_clock_enable>:
}
   1d6a4:	4770      	bx	lr

0001d6a6 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   1d6a6:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   1d6a8:	f7e5 fd4a 	bl	3140 <MPSL_IRQ_CLOCK_Handler>
}
   1d6ac:	bd08      	pop	{r3, pc}

0001d6ae <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   1d6ae:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1d6b0:	f7fa faec 	bl	17c8c <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   1d6b4:	bd08      	pop	{r3, pc}

0001d6b6 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1d6b6:	b510      	push	{r4, lr}
   1d6b8:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1d6ba:	f7f3 fa23 	bl	10b04 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1d6be:	f7f3 fadf 	bl	10c80 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   1d6c2:	4620      	mov	r0, r4
   1d6c4:	f7ff fff3 	bl	1d6ae <hw_cc3xx_init_internal>
	return res;
}
   1d6c8:	bd10      	pop	{r4, pc}

0001d6ca <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d6ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d6ce:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   1d6d2:	2b08      	cmp	r3, #8
   1d6d4:	d001      	beq.n	1d6da <nrf52_errata_36+0x10>
        return false;
   1d6d6:	2000      	movs	r0, #0
   1d6d8:	4770      	bx	lr
                        return true;
   1d6da:	2001      	movs	r0, #1
}
   1d6dc:	4770      	bx	lr

0001d6de <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d6de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d6e2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   1d6e6:	2b08      	cmp	r3, #8
   1d6e8:	d001      	beq.n	1d6ee <nrf52_errata_66+0x10>
        return false;
   1d6ea:	2000      	movs	r0, #0
   1d6ec:	4770      	bx	lr
                        return true;
   1d6ee:	2001      	movs	r0, #1
}
   1d6f0:	4770      	bx	lr

0001d6f2 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d6f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d6f6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d6fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   1d6fe:	2a08      	cmp	r2, #8
   1d700:	d001      	beq.n	1d706 <nrf52_errata_98+0x14>
        return false;
   1d702:	2000      	movs	r0, #0
   1d704:	4770      	bx	lr
                switch(var2)
   1d706:	2b00      	cmp	r3, #0
   1d708:	d804      	bhi.n	1d714 <nrf52_errata_98+0x22>
   1d70a:	e8df f003 	tbb	[pc, r3]
   1d70e:	01          	.byte	0x01
   1d70f:	00          	.byte	0x00
   1d710:	2001      	movs	r0, #1
   1d712:	4770      	bx	lr
                        return false;
   1d714:	2000      	movs	r0, #0
}
   1d716:	4770      	bx	lr

0001d718 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d718:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d71c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d720:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   1d724:	2a08      	cmp	r2, #8
   1d726:	d001      	beq.n	1d72c <nrf52_errata_103+0x14>
        return false;
   1d728:	2000      	movs	r0, #0
   1d72a:	4770      	bx	lr
                switch(var2)
   1d72c:	2b00      	cmp	r3, #0
   1d72e:	d804      	bhi.n	1d73a <nrf52_errata_103+0x22>
   1d730:	e8df f003 	tbb	[pc, r3]
   1d734:	01          	.byte	0x01
   1d735:	00          	.byte	0x00
   1d736:	2001      	movs	r0, #1
   1d738:	4770      	bx	lr
                        return false;
   1d73a:	2000      	movs	r0, #0
}
   1d73c:	4770      	bx	lr

0001d73e <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d73e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d742:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d746:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   1d74a:	2a08      	cmp	r2, #8
   1d74c:	d001      	beq.n	1d752 <nrf52_errata_115+0x14>
        return false;
   1d74e:	2000      	movs	r0, #0
   1d750:	4770      	bx	lr
                switch(var2)
   1d752:	2b00      	cmp	r3, #0
   1d754:	d804      	bhi.n	1d760 <nrf52_errata_115+0x22>
   1d756:	e8df f003 	tbb	[pc, r3]
   1d75a:	01          	.byte	0x01
   1d75b:	00          	.byte	0x00
   1d75c:	2001      	movs	r0, #1
   1d75e:	4770      	bx	lr
                        return false;
   1d760:	2000      	movs	r0, #0
}
   1d762:	4770      	bx	lr

0001d764 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d764:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d768:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d76c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   1d770:	2a08      	cmp	r2, #8
   1d772:	d001      	beq.n	1d778 <nrf52_errata_120+0x14>
        return false;
   1d774:	2000      	movs	r0, #0
   1d776:	4770      	bx	lr
                switch(var2)
   1d778:	2b00      	cmp	r3, #0
   1d77a:	d804      	bhi.n	1d786 <nrf52_errata_120+0x22>
   1d77c:	e8df f003 	tbb	[pc, r3]
   1d780:	01          	.byte	0x01
   1d781:	00          	.byte	0x00
   1d782:	2001      	movs	r0, #1
   1d784:	4770      	bx	lr
                        return false;
   1d786:	2000      	movs	r0, #0
}
   1d788:	4770      	bx	lr

0001d78a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d78a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d78e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   1d792:	2b08      	cmp	r3, #8
   1d794:	d001      	beq.n	1d79a <nrf52_errata_136+0x10>
        return false;
   1d796:	2000      	movs	r0, #0
   1d798:	4770      	bx	lr
                        return true;
   1d79a:	2001      	movs	r0, #1
}
   1d79c:	4770      	bx	lr

0001d79e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d79e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d7a2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d7a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1d7aa:	2a08      	cmp	r2, #8
   1d7ac:	d001      	beq.n	1d7b2 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1d7ae:	2000      	movs	r0, #0
   1d7b0:	4770      	bx	lr
                switch(var2)
   1d7b2:	2b04      	cmp	r3, #4
   1d7b4:	d801      	bhi.n	1d7ba <nrf52_configuration_249+0x1c>
   1d7b6:	2000      	movs	r0, #0
   1d7b8:	4770      	bx	lr
                        return true;
   1d7ba:	2001      	movs	r0, #1
    #endif
}
   1d7bc:	4770      	bx	lr

0001d7be <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   1d7be:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1d7c0:	4780      	blx	r0
}
   1d7c2:	bd08      	pop	{r3, pc}

0001d7c4 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1d7c4:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1d7c6:	f000 fd7a 	bl	1e2be <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   1d7ca:	bd08      	pop	{r3, pc}

0001d7cc <pin_is_task_output>:
{
   1d7cc:	b510      	push	{r4, lr}
   1d7ce:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1d7d0:	f7f7 f93c 	bl	14a4c <pin_is_output>
   1d7d4:	b128      	cbz	r0, 1d7e2 <pin_is_task_output+0x16>
   1d7d6:	4620      	mov	r0, r4
   1d7d8:	f7f7 f922 	bl	14a20 <pin_in_use_by_te>
   1d7dc:	b118      	cbz	r0, 1d7e6 <pin_is_task_output+0x1a>
   1d7de:	2001      	movs	r0, #1
   1d7e0:	e000      	b.n	1d7e4 <pin_is_task_output+0x18>
   1d7e2:	2000      	movs	r0, #0
}
   1d7e4:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1d7e6:	2000      	movs	r0, #0
   1d7e8:	e7fc      	b.n	1d7e4 <pin_is_task_output+0x18>

0001d7ea <pin_is_input>:
{
   1d7ea:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1d7ec:	f7f7 f92e 	bl	14a4c <pin_is_output>
   1d7f0:	f080 0001 	eor.w	r0, r0, #1
}
   1d7f4:	b2c0      	uxtb	r0, r0
   1d7f6:	bd08      	pop	{r3, pc}

0001d7f8 <gpiote_polarity_to_trigger>:
}
   1d7f8:	4770      	bx	lr

0001d7fa <gpiote_trigger_to_polarity>:
}
   1d7fa:	4770      	bx	lr

0001d7fc <is_level>:
}
   1d7fc:	2803      	cmp	r0, #3
   1d7fe:	bf94      	ite	ls
   1d800:	2000      	movls	r0, #0
   1d802:	2001      	movhi	r0, #1
   1d804:	4770      	bx	lr

0001d806 <transfer_byte>:
{
   1d806:	b430      	push	{r4, r5}
   1d808:	b082      	sub	sp, #8
    return p_reg->RXD;
   1d80a:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   1d80e:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   1d810:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1d814:	6a0b      	ldr	r3, [r1, #32]
   1d816:	698a      	ldr	r2, [r1, #24]
   1d818:	4293      	cmp	r3, r2
   1d81a:	d203      	bcs.n	1d824 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1d81c:	694a      	ldr	r2, [r1, #20]
   1d81e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1d822:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   1d824:	6a0b      	ldr	r3, [r1, #32]
   1d826:	3301      	adds	r3, #1
   1d828:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   1d82a:	1c5a      	adds	r2, r3, #1
    if (p_cb->abort)
   1d82c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   1d830:	b13c      	cbz	r4, 1d842 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1d832:	690c      	ldr	r4, [r1, #16]
   1d834:	4294      	cmp	r4, r2
   1d836:	d900      	bls.n	1d83a <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   1d838:	610a      	str	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1d83a:	698c      	ldr	r4, [r1, #24]
   1d83c:	4294      	cmp	r4, r2
   1d83e:	d900      	bls.n	1d842 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   1d840:	618a      	str	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1d842:	690c      	ldr	r4, [r1, #16]
   1d844:	4294      	cmp	r4, r2
   1d846:	d808      	bhi.n	1d85a <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1d848:	698d      	ldr	r5, [r1, #24]
   1d84a:	4295      	cmp	r5, r2
   1d84c:	d80d      	bhi.n	1d86a <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1d84e:	42a3      	cmp	r3, r4
   1d850:	d310      	bcc.n	1d874 <transfer_byte+0x6e>
   1d852:	42ab      	cmp	r3, r5
   1d854:	d210      	bcs.n	1d878 <transfer_byte+0x72>
   1d856:	2001      	movs	r0, #1
   1d858:	e004      	b.n	1d864 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   1d85a:	68cb      	ldr	r3, [r1, #12]
   1d85c:	5c9b      	ldrb	r3, [r3, r2]
    p_reg->TXD = data;
   1d85e:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   1d862:	2001      	movs	r0, #1
}
   1d864:	b002      	add	sp, #8
   1d866:	bc30      	pop	{r4, r5}
   1d868:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1d86a:	7fcb      	ldrb	r3, [r1, #31]
   1d86c:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   1d870:	2001      	movs	r0, #1
   1d872:	e7f7      	b.n	1d864 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1d874:	2001      	movs	r0, #1
   1d876:	e7f5      	b.n	1d864 <transfer_byte+0x5e>
   1d878:	2000      	movs	r0, #0
   1d87a:	e7f3      	b.n	1d864 <transfer_byte+0x5e>

0001d87c <irq_handler>:
{
   1d87c:	b510      	push	{r4, lr}
   1d87e:	460c      	mov	r4, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d880:	2200      	movs	r2, #0
   1d882:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   1d886:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   1d88a:	f7ff ffbc 	bl	1d806 <transfer_byte>
   1d88e:	b100      	cbz	r0, 1d892 <irq_handler+0x16>
}
   1d890:	bd10      	pop	{r4, pc}
        finish_transfer(p_cb);
   1d892:	4620      	mov	r0, r4
   1d894:	f7f7 fe5e 	bl	15554 <finish_transfer>
}
   1d898:	e7fa      	b.n	1d890 <irq_handler+0x14>

0001d89a <spim_int_enable>:
    if (!enable)
   1d89a:	b919      	cbnz	r1, 1d8a4 <spim_int_enable+0xa>
    p_reg->INTENCLR = mask;
   1d89c:	2340      	movs	r3, #64	; 0x40
   1d89e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1d8a2:	4770      	bx	lr
    p_reg->INTENSET = mask;
   1d8a4:	2340      	movs	r3, #64	; 0x40
   1d8a6:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
}
   1d8aa:	4770      	bx	lr

0001d8ac <spim_list_enable_handle>:
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1d8ac:	f011 0f01 	tst.w	r1, #1
   1d8b0:	d009      	beq.n	1d8c6 <spim_list_enable_handle+0x1a>
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1d8b2:	2301      	movs	r3, #1
   1d8b4:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1d8b8:	f011 0f02 	tst.w	r1, #2
   1d8bc:	d007      	beq.n	1d8ce <spim_list_enable_handle+0x22>
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1d8be:	2301      	movs	r3, #1
   1d8c0:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1d8c4:	4770      	bx	lr
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1d8c6:	2300      	movs	r3, #0
   1d8c8:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   1d8cc:	e7f4      	b.n	1d8b8 <spim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1d8ce:	2300      	movs	r3, #0
   1d8d0:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1d8d4:	4770      	bx	lr

0001d8d6 <spim_abort>:
{
   1d8d6:	b570      	push	{r4, r5, r6, lr}
   1d8d8:	4605      	mov	r5, r0
   1d8da:	460e      	mov	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8dc:	2301      	movs	r3, #1
   1d8de:	6143      	str	r3, [r0, #20]
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1d8e0:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8e2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1d8e6:	b923      	cbnz	r3, 1d8f2 <spim_abort+0x1c>
   1d8e8:	2001      	movs	r0, #1
   1d8ea:	f7ff ff6b 	bl	1d7c4 <nrfx_busy_wait>
   1d8ee:	3c01      	subs	r4, #1
   1d8f0:	d1f7      	bne.n	1d8e2 <spim_abort+0xc>
    p_cb->transfer_in_progress = false;
   1d8f2:	2300      	movs	r3, #0
   1d8f4:	7773      	strb	r3, [r6, #29]
}
   1d8f6:	bd70      	pop	{r4, r5, r6, pc}

0001d8f8 <finish_transfer>:
{
   1d8f8:	b510      	push	{r4, lr}
   1d8fa:	4604      	mov	r4, r0
    set_ss_pin_state(p_cb, false);
   1d8fc:	2100      	movs	r1, #0
   1d8fe:	f7f7 ffd1 	bl	158a4 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   1d902:	2300      	movs	r3, #0
   1d904:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1d906:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1d908:	4620      	mov	r0, r4
   1d90a:	f850 3b08 	ldr.w	r3, [r0], #8
   1d90e:	6861      	ldr	r1, [r4, #4]
   1d910:	4798      	blx	r3
}
   1d912:	bd10      	pop	{r4, pc}

0001d914 <irq_handler>:
   1d914:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1d918:	b902      	cbnz	r2, 1d91c <irq_handler+0x8>
   1d91a:	4770      	bx	lr
{
   1d91c:	b508      	push	{r3, lr}
   1d91e:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d920:	2200      	movs	r2, #0
   1d922:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   1d926:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        finish_transfer(p_cb);
   1d92a:	4608      	mov	r0, r1
   1d92c:	f7ff ffe4 	bl	1d8f8 <finish_transfer>
}
   1d930:	bd08      	pop	{r3, pc}

0001d932 <spis_state_entry_action_execute>:
{
   1d932:	b500      	push	{lr}
   1d934:	b085      	sub	sp, #20
    switch (p_cb->spi_state)
   1d936:	7d4b      	ldrb	r3, [r1, #21]
   1d938:	b2db      	uxtb	r3, r3
   1d93a:	2b02      	cmp	r3, #2
   1d93c:	d008      	beq.n	1d950 <spis_state_entry_action_execute+0x1e>
   1d93e:	2b03      	cmp	r3, #3
   1d940:	d010      	beq.n	1d964 <spis_state_entry_action_execute+0x32>
   1d942:	2b01      	cmp	r3, #1
   1d944:	d002      	beq.n	1d94c <spis_state_entry_action_execute+0x1a>
}
   1d946:	b005      	add	sp, #20
   1d948:	f85d fb04 	ldr.w	pc, [sp], #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d94c:	6243      	str	r3, [r0, #36]	; 0x24
}
   1d94e:	e7fa      	b.n	1d946 <spis_state_entry_action_execute+0x14>
            event.evt_type  = NRFX_SPIS_BUFFERS_SET_DONE;
   1d950:	2300      	movs	r3, #0
   1d952:	f88d 3004 	strb.w	r3, [sp, #4]
            event.rx_amount = 0;
   1d956:	9302      	str	r3, [sp, #8]
            event.tx_amount = 0;
   1d958:	9303      	str	r3, [sp, #12]
            p_cb->handler(&event, p_cb->p_context);
   1d95a:	688b      	ldr	r3, [r1, #8]
   1d95c:	6989      	ldr	r1, [r1, #24]
   1d95e:	a801      	add	r0, sp, #4
   1d960:	4798      	blx	r3
            break;
   1d962:	e7f0      	b.n	1d946 <spis_state_entry_action_execute+0x14>
            event.evt_type  = NRFX_SPIS_XFER_DONE;
   1d964:	2301      	movs	r3, #1
   1d966:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->RXD.AMOUNT;
   1d96a:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
            event.rx_amount = nrf_spis_rx_amount_get(p_spis);
   1d96e:	9302      	str	r3, [sp, #8]
    return p_reg->TXD.AMOUNT;
   1d970:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            event.tx_amount = nrf_spis_tx_amount_get(p_spis);
   1d974:	9303      	str	r3, [sp, #12]
            p_cb->handler(&event, p_cb->p_context);
   1d976:	688b      	ldr	r3, [r1, #8]
   1d978:	6989      	ldr	r1, [r1, #24]
   1d97a:	a801      	add	r0, sp, #4
   1d97c:	4798      	blx	r3
}
   1d97e:	e7e2      	b.n	1d946 <spis_state_entry_action_execute+0x14>

0001d980 <spis_state_change>:
{
   1d980:	b508      	push	{r3, lr}
    p_cb->spi_state = new_state;
   1d982:	754a      	strb	r2, [r1, #21]
    spis_state_entry_action_execute(p_spis, p_cb);
   1d984:	f7ff ffd5 	bl	1d932 <spis_state_entry_action_execute>
}
   1d988:	bd08      	pop	{r3, pc}

0001d98a <spis_irq_handler>:
{
   1d98a:	b538      	push	{r3, r4, r5, lr}
   1d98c:	4604      	mov	r4, r0
   1d98e:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d990:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    if (nrf_spis_event_check(p_spis, NRF_SPIS_EVENT_ACQUIRED))
   1d994:	b143      	cbz	r3, 1d9a8 <spis_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d996:	2300      	movs	r3, #0
   1d998:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
   1d99c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
        switch (p_cb->spi_state)
   1d9a0:	7d4b      	ldrb	r3, [r1, #21]
   1d9a2:	b2db      	uxtb	r3, r3
   1d9a4:	2b01      	cmp	r3, #1
   1d9a6:	d00c      	beq.n	1d9c2 <spis_irq_handler+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d9a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_spis_event_check(p_spis, NRF_SPIS_EVENT_END))
   1d9ac:	b143      	cbz	r3, 1d9c0 <spis_irq_handler+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d9ae:	2300      	movs	r3, #0
   1d9b0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d9b4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        switch (p_cb->spi_state)
   1d9b8:	7d6b      	ldrb	r3, [r5, #21]
   1d9ba:	b2db      	uxtb	r3, r3
   1d9bc:	2b02      	cmp	r3, #2
   1d9be:	d012      	beq.n	1d9e6 <spis_irq_handler+0x5c>
}
   1d9c0:	bd38      	pop	{r3, r4, r5, pc}
                nrf_spis_tx_buffer_set(p_spis, (uint8_t *)p_cb->tx_buffer, p_cb->tx_buffer_size);
   1d9c2:	68ca      	ldr	r2, [r1, #12]
   1d9c4:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d9c6:	f8c0 2544 	str.w	r2, [r0, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d9ca:	f8c0 3548 	str.w	r3, [r0, #1352]	; 0x548
                nrf_spis_rx_buffer_set(p_spis, (uint8_t *)p_cb->rx_buffer, p_cb->rx_buffer_size);
   1d9ce:	690a      	ldr	r2, [r1, #16]
   1d9d0:	684b      	ldr	r3, [r1, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d9d2:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d9d6:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d9da:	2301      	movs	r3, #1
   1d9dc:	6283      	str	r3, [r0, #40]	; 0x28
                spis_state_change(p_spis, p_cb, SPIS_BUFFER_RESOURCE_CONFIGURED);
   1d9de:	2202      	movs	r2, #2
   1d9e0:	f7ff ffce 	bl	1d980 <spis_state_change>
                break;
   1d9e4:	e7e0      	b.n	1d9a8 <spis_irq_handler+0x1e>
                spis_state_change(p_spis, p_cb, SPIS_XFER_COMPLETED);
   1d9e6:	2203      	movs	r2, #3
   1d9e8:	4629      	mov	r1, r5
   1d9ea:	4620      	mov	r0, r4
   1d9ec:	f7ff ffc8 	bl	1d980 <spis_state_change>
}
   1d9f0:	e7e6      	b.n	1d9c0 <spis_irq_handler+0x36>

0001d9f2 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1d9f2:	b508      	push	{r3, lr}
  _DoInit();
   1d9f4:	f7f8 fb26 	bl	16044 <_DoInit>
}
   1d9f8:	bd08      	pop	{r3, pc}

0001d9fa <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1d9fa:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1d9fc:	f7ff fff9 	bl	1d9f2 <SEGGER_RTT_Init>

	return 0;
}
   1da00:	2000      	movs	r0, #0
   1da02:	bd08      	pop	{r3, pc}

0001da04 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1da04:	b148      	cbz	r0, 1da1a <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1da06:	68c3      	ldr	r3, [r0, #12]
   1da08:	8818      	ldrh	r0, [r3, #0]
   1da0a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1da0e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1da12:	bf14      	ite	ne
   1da14:	2000      	movne	r0, #0
   1da16:	2001      	moveq	r0, #1
   1da18:	4770      	bx	lr
		return false;
   1da1a:	2000      	movs	r0, #0
}
   1da1c:	4770      	bx	lr

0001da1e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1da1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da20:	4605      	mov	r5, r0
   1da22:	460e      	mov	r6, r1
	__asm__ volatile(
   1da24:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da28:	f3ef 8711 	mrs	r7, BASEPRI
   1da2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1da30:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1da34:	f7f9 fc5c 	bl	172f0 <z_impl_z_current_get>
   1da38:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1da3a:	4631      	mov	r1, r6
   1da3c:	4628      	mov	r0, r5
   1da3e:	f7ff f9eb 	bl	1ce18 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1da42:	f387 8811 	msr	BASEPRI, r7
   1da46:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1da4a:	4620      	mov	r0, r4
   1da4c:	f7f3 fc5c 	bl	11308 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1da50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001da52 <z_early_memset>:
{
   1da52:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   1da54:	f7fd fc34 	bl	1b2c0 <memset>
}
   1da58:	bd08      	pop	{r3, pc}

0001da5a <z_early_memcpy>:
{
   1da5a:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   1da5c:	f7fd fc01 	bl	1b262 <memcpy>
}
   1da60:	bd08      	pop	{r3, pc}

0001da62 <k_heap_init>:
{
   1da62:	b510      	push	{r4, lr}
   1da64:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1da68:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1da6a:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1da6c:	f7fd f9d4 	bl	1ae18 <sys_heap_init>
}
   1da70:	bd10      	pop	{r4, pc}

0001da72 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1da72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da76:	b085      	sub	sp, #20
   1da78:	4607      	mov	r7, r0
   1da7a:	468a      	mov	sl, r1
   1da7c:	9203      	str	r2, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1da7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1da82:	f000 fc22 	bl	1e2ca <sys_clock_timeout_end_calc>
   1da86:	4606      	mov	r6, r0
   1da88:	4689      	mov	r9, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1da8a:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   1da8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da92:	f3ef 8511 	mrs	r5, BASEPRI
   1da96:	f383 8812 	msr	BASEPRI_MAX, r3
   1da9a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   1da9e:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   1daa2:	4644      	mov	r4, r8

	while (ret == NULL) {
   1daa4:	e00f      	b.n	1dac6 <k_heap_aligned_alloc+0x54>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1daa6:	9000      	str	r0, [sp, #0]
   1daa8:	9101      	str	r1, [sp, #4]
   1daaa:	f107 020c 	add.w	r2, r7, #12
   1daae:	4629      	mov	r1, r5
   1dab0:	4658      	mov	r0, fp
   1dab2:	f7f9 fa29 	bl	16f08 <z_pend_curr>
   1dab6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1daba:	f3ef 8511 	mrs	r5, BASEPRI
   1dabe:	f383 8812 	msr	BASEPRI_MAX, r3
   1dac2:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   1dac6:	b9ac      	cbnz	r4, 1daf4 <k_heap_aligned_alloc+0x82>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1dac8:	9a03      	ldr	r2, [sp, #12]
   1daca:	4651      	mov	r1, sl
   1dacc:	4638      	mov	r0, r7
   1dace:	f7fd f932 	bl	1ad36 <sys_heap_aligned_alloc>
   1dad2:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1dad4:	f7f9 fdae 	bl	17634 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1dad8:	b964      	cbnz	r4, 1daf4 <k_heap_aligned_alloc+0x82>
		    (ret != NULL) || ((end - now) <= 0)) {
   1dada:	1a30      	subs	r0, r6, r0
   1dadc:	eb69 0101 	sbc.w	r1, r9, r1
   1dae0:	2801      	cmp	r0, #1
   1dae2:	f171 0300 	sbcs.w	r3, r1, #0
   1dae6:	db05      	blt.n	1daf4 <k_heap_aligned_alloc+0x82>
		if (!blocked_alloc) {
   1dae8:	f1b8 0f00 	cmp.w	r8, #0
   1daec:	d1db      	bne.n	1daa6 <k_heap_aligned_alloc+0x34>
			blocked_alloc = true;
   1daee:	f04f 0801 	mov.w	r8, #1
   1daf2:	e7d8      	b.n	1daa6 <k_heap_aligned_alloc+0x34>
	__asm__ volatile(
   1daf4:	f385 8811 	msr	BASEPRI, r5
   1daf8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1dafc:	4620      	mov	r0, r4
   1dafe:	b005      	add	sp, #20
   1db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001db04 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1db04:	b570      	push	{r4, r5, r6, lr}
   1db06:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1db08:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   1db0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db10:	f3ef 8511 	mrs	r5, BASEPRI
   1db14:	f383 8812 	msr	BASEPRI_MAX, r3
   1db18:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   1db1c:	f7fd f8c7 	bl	1acae <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1db20:	f104 000c 	add.w	r0, r4, #12
   1db24:	f000 fb05 	bl	1e132 <z_unpend_all>
   1db28:	b920      	cbnz	r0, 1db34 <k_heap_free+0x30>
	__asm__ volatile(
   1db2a:	f385 8811 	msr	BASEPRI, r5
   1db2e:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1db32:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   1db34:	4629      	mov	r1, r5
   1db36:	4630      	mov	r0, r6
   1db38:	f7f9 f85e 	bl	16bf8 <z_reschedule>
   1db3c:	e7f9      	b.n	1db32 <k_heap_free+0x2e>

0001db3e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1db3e:	68c2      	ldr	r2, [r0, #12]
   1db40:	6903      	ldr	r3, [r0, #16]
   1db42:	431a      	orrs	r2, r3
   1db44:	f012 0203 	ands.w	r2, r2, #3
   1db48:	d10d      	bne.n	1db66 <create_free_list+0x28>
	slab->free_list = NULL;
   1db4a:	2100      	movs	r1, #0
   1db4c:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1db4e:	e005      	b.n	1db5c <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   1db50:	6941      	ldr	r1, [r0, #20]
   1db52:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   1db54:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   1db56:	68c1      	ldr	r1, [r0, #12]
   1db58:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1db5a:	3201      	adds	r2, #1
   1db5c:	6881      	ldr	r1, [r0, #8]
   1db5e:	4291      	cmp	r1, r2
   1db60:	d8f6      	bhi.n	1db50 <create_free_list+0x12>
	return 0;
   1db62:	2000      	movs	r0, #0
   1db64:	4770      	bx	lr
		return -EINVAL;
   1db66:	f06f 0015 	mvn.w	r0, #21
}
   1db6a:	4770      	bx	lr

0001db6c <k_mem_slab_init>:
{
   1db6c:	b510      	push	{r4, lr}
   1db6e:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   1db70:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   1db72:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   1db74:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   1db76:	2300      	movs	r3, #0
   1db78:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   1db7a:	f7ff ffe0 	bl	1db3e <create_free_list>
	if (rc < 0) {
   1db7e:	2800      	cmp	r0, #0
   1db80:	db01      	blt.n	1db86 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   1db82:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   1db84:	6064      	str	r4, [r4, #4]
}
   1db86:	bd10      	pop	{r4, pc}

0001db88 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db8a:	4604      	mov	r4, r0
   1db8c:	460d      	mov	r5, r1
	__asm__ volatile(
   1db8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db92:	f3ef 8611 	mrs	r6, BASEPRI
   1db96:	f383 8812 	msr	BASEPRI_MAX, r3
   1db9a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1db9e:	6943      	ldr	r3, [r0, #20]
   1dba0:	b163      	cbz	r3, 1dbbc <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   1dba2:	682b      	ldr	r3, [r5, #0]
   1dba4:	6962      	ldr	r2, [r4, #20]
   1dba6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1dba8:	682b      	ldr	r3, [r5, #0]
   1dbaa:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1dbac:	69a3      	ldr	r3, [r4, #24]
   1dbae:	3b01      	subs	r3, #1
   1dbb0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1dbb2:	f386 8811 	msr	BASEPRI, r6
   1dbb6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dbbc:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1dbc0:	f000 fa8c 	bl	1e0dc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1dbc4:	2800      	cmp	r0, #0
   1dbc6:	d0ec      	beq.n	1dba2 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1dbc8:	682a      	ldr	r2, [r5, #0]
   1dbca:	2100      	movs	r1, #0
   1dbcc:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1dbd0:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1dbd2:	f000 f9e3 	bl	1df9c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1dbd6:	4631      	mov	r1, r6
   1dbd8:	4638      	mov	r0, r7
   1dbda:	f7f9 f80d 	bl	16bf8 <z_reschedule>
			return;
   1dbde:	e7ec      	b.n	1dbba <k_mem_slab_free+0x32>

0001dbe0 <setup_thread_stack>:
{
   1dbe0:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1dbe2:	3207      	adds	r2, #7
   1dbe4:	f022 0207 	bic.w	r2, r2, #7
   1dbe8:	f102 0340 	add.w	r3, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1dbec:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1dbf0:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   1dbf4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   1dbf8:	2200      	movs	r2, #0
   1dbfa:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   1dbfe:	18c8      	adds	r0, r1, r3
   1dc00:	bc10      	pop	{r4}
   1dc02:	4770      	bx	lr

0001dc04 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1dc04:	f3ef 8005 	mrs	r0, IPSR
}
   1dc08:	3800      	subs	r0, #0
   1dc0a:	bf18      	it	ne
   1dc0c:	2001      	movne	r0, #1
   1dc0e:	4770      	bx	lr

0001dc10 <z_impl_k_thread_start>:
{
   1dc10:	b508      	push	{r3, lr}
	z_sched_start(thread);
   1dc12:	f7f9 f93f 	bl	16e94 <z_sched_start>
}
   1dc16:	bd08      	pop	{r3, pc}

0001dc18 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1dc18:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   1dc1a:	2400      	movs	r4, #0
   1dc1c:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   1dc1e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1dc20:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   1dc22:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1dc24:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1dc26:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1dc28:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1dc2a:	bc10      	pop	{r4}
   1dc2c:	4770      	bx	lr

0001dc2e <z_impl_k_thread_create>:
{
   1dc2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc30:	b087      	sub	sp, #28
   1dc32:	4604      	mov	r4, r0
   1dc34:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1dc36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1dc38:	2700      	movs	r7, #0
   1dc3a:	9705      	str	r7, [sp, #20]
   1dc3c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1dc3e:	9704      	str	r7, [sp, #16]
   1dc40:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1dc42:	9703      	str	r7, [sp, #12]
   1dc44:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1dc46:	9702      	str	r7, [sp, #8]
   1dc48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1dc4a:	9701      	str	r7, [sp, #4]
   1dc4c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1dc4e:	9700      	str	r7, [sp, #0]
   1dc50:	f7f8 fbee 	bl	16430 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1dc54:	f1b5 3fff 	cmp.w	r5, #4294967295
   1dc58:	bf08      	it	eq
   1dc5a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1dc5e:	d102      	bne.n	1dc66 <z_impl_k_thread_create+0x38>
}
   1dc60:	4620      	mov	r0, r4
   1dc62:	b007      	add	sp, #28
   1dc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1dc66:	4632      	mov	r2, r6
   1dc68:	462b      	mov	r3, r5
   1dc6a:	4620      	mov	r0, r4
   1dc6c:	f7f8 fbd2 	bl	16414 <schedule_new_thread>
   1dc70:	e7f6      	b.n	1dc60 <z_impl_k_thread_create+0x32>

0001dc72 <z_pm_save_idle_exit>:
{
   1dc72:	b508      	push	{r3, lr}
	pm_system_resume();
   1dc74:	f7f2 fde4 	bl	10840 <pm_system_resume>
	sys_clock_idle_exit();
   1dc78:	f7ff f845 	bl	1cd06 <sys_clock_idle_exit>
}
   1dc7c:	bd08      	pop	{r3, pc}

0001dc7e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1dc7e:	4288      	cmp	r0, r1
   1dc80:	da00      	bge.n	1dc84 <new_prio_for_inheritance+0x6>
   1dc82:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1dc84:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1dc88:	db01      	blt.n	1dc8e <new_prio_for_inheritance+0x10>
   1dc8a:	4608      	mov	r0, r1
   1dc8c:	4770      	bx	lr
   1dc8e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1dc92:	4770      	bx	lr

0001dc94 <adjust_owner_prio>:
{
   1dc94:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1dc96:	6880      	ldr	r0, [r0, #8]
   1dc98:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1dc9c:	428b      	cmp	r3, r1
   1dc9e:	d101      	bne.n	1dca4 <adjust_owner_prio+0x10>
	return false;
   1dca0:	2000      	movs	r0, #0
}
   1dca2:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1dca4:	f7f9 f944 	bl	16f30 <z_set_prio>
   1dca8:	e7fb      	b.n	1dca2 <adjust_owner_prio+0xe>

0001dcaa <z_impl_k_mutex_init>:
{
   1dcaa:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1dcac:	2000      	movs	r0, #0
   1dcae:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   1dcb0:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1dcb2:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1dcb4:	605b      	str	r3, [r3, #4]
}
   1dcb6:	4770      	bx	lr

0001dcb8 <prepare_thread_to_run>:
{
   1dcb8:	b508      	push	{r3, lr}
   1dcba:	2200      	movs	r2, #0
   1dcbc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   1dcc0:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   1dcc2:	f000 f96b 	bl	1df9c <z_ready_thread>
}
   1dcc6:	bd08      	pop	{r3, pc}

0001dcc8 <queue_insert>:
{
   1dcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dccc:	4605      	mov	r5, r0
   1dcce:	460e      	mov	r6, r1
   1dcd0:	4614      	mov	r4, r2
   1dcd2:	4699      	mov	r9, r3
   1dcd4:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1dcd8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1dcdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dce0:	f3ef 8811 	mrs	r8, BASEPRI
   1dce4:	f383 8812 	msr	BASEPRI_MAX, r3
   1dce8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1dcec:	b102      	cbz	r2, 1dcf0 <queue_insert+0x28>
	return list->tail;
   1dcee:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1dcf0:	4638      	mov	r0, r7
   1dcf2:	f000 f9f3 	bl	1e0dc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1dcf6:	b9f8      	cbnz	r0, 1dd38 <queue_insert+0x70>
	if (alloc) {
   1dcf8:	f1b9 0f00 	cmp.w	r9, #0
   1dcfc:	d125      	bne.n	1dd4a <queue_insert+0x82>
	node->next_and_flags = flags;
   1dcfe:	2300      	movs	r3, #0
   1dd00:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1dd02:	b39e      	cbz	r6, 1dd6c <queue_insert+0xa4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1dd04:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1dd06:	f033 0303 	bics.w	r3, r3, #3
   1dd0a:	d03b      	beq.n	1dd84 <queue_insert+0xbc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dd0c:	6822      	ldr	r2, [r4, #0]
   1dd0e:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dd12:	4313      	orrs	r3, r2
   1dd14:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dd16:	6833      	ldr	r3, [r6, #0]
   1dd18:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dd1c:	431c      	orrs	r4, r3
   1dd1e:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1dd20:	2104      	movs	r1, #4
   1dd22:	f105 0010 	add.w	r0, r5, #16
   1dd26:	f000 fb6b 	bl	1e400 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1dd2a:	4641      	mov	r1, r8
   1dd2c:	4638      	mov	r0, r7
   1dd2e:	f7f8 ff63 	bl	16bf8 <z_reschedule>
	return 0;
   1dd32:	2000      	movs	r0, #0
}
   1dd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prepare_thread_to_run(first_pending_thread, data);
   1dd38:	4621      	mov	r1, r4
   1dd3a:	f7ff ffbd 	bl	1dcb8 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   1dd3e:	4641      	mov	r1, r8
   1dd40:	4638      	mov	r0, r7
   1dd42:	f7f8 ff59 	bl	16bf8 <z_reschedule>
		return 0;
   1dd46:	2000      	movs	r0, #0
   1dd48:	e7f4      	b.n	1dd34 <queue_insert+0x6c>
	return z_thread_aligned_alloc(0, size);
   1dd4a:	2108      	movs	r1, #8
   1dd4c:	2000      	movs	r0, #0
   1dd4e:	f7f9 ff61 	bl	17c14 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1dd52:	b120      	cbz	r0, 1dd5e <queue_insert+0x96>
		anode->data = data;
   1dd54:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   1dd56:	2201      	movs	r2, #1
   1dd58:	6002      	str	r2, [r0, #0]
		data = anode;
   1dd5a:	4604      	mov	r4, r0
   1dd5c:	e7d1      	b.n	1dd02 <queue_insert+0x3a>
	__asm__ volatile(
   1dd5e:	f388 8811 	msr	BASEPRI, r8
   1dd62:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1dd66:	f06f 000b 	mvn.w	r0, #11
   1dd6a:	e7e3      	b.n	1dd34 <queue_insert+0x6c>
	return list->head;
   1dd6c:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dd6e:	6823      	ldr	r3, [r4, #0]
   1dd70:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dd74:	4313      	orrs	r3, r2
   1dd76:	6023      	str	r3, [r4, #0]
	list->head = node;
   1dd78:	602c      	str	r4, [r5, #0]
	return list->tail;
   1dd7a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   1dd7c:	2b00      	cmp	r3, #0
   1dd7e:	d1cf      	bne.n	1dd20 <queue_insert+0x58>
	list->tail = node;
   1dd80:	606c      	str	r4, [r5, #4]
}
   1dd82:	e7cd      	b.n	1dd20 <queue_insert+0x58>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dd84:	6823      	ldr	r3, [r4, #0]
   1dd86:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dd8a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1dd8c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1dd8e:	b132      	cbz	r2, 1dd9e <queue_insert+0xd6>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dd90:	6813      	ldr	r3, [r2, #0]
   1dd92:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dd96:	4323      	orrs	r3, r4
   1dd98:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1dd9a:	606c      	str	r4, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1dd9c:	e7c0      	b.n	1dd20 <queue_insert+0x58>
	list->tail = node;
   1dd9e:	606c      	str	r4, [r5, #4]
	list->head = node;
   1dda0:	602c      	str	r4, [r5, #0]
}
   1dda2:	e7bd      	b.n	1dd20 <queue_insert+0x58>

0001dda4 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1dda4:	b160      	cbz	r0, 1ddc0 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dda6:	6803      	ldr	r3, [r0, #0]
   1dda8:	f013 0f03 	tst.w	r3, #3
   1ddac:	d008      	beq.n	1ddc0 <z_queue_node_peek+0x1c>
{
   1ddae:	b510      	push	{r4, lr}
		ret = anode->data;
   1ddb0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1ddb2:	b909      	cbnz	r1, 1ddb8 <z_queue_node_peek+0x14>
		ret = anode->data;
   1ddb4:	4620      	mov	r0, r4
}
   1ddb6:	bd10      	pop	{r4, pc}
			k_free(anode);
   1ddb8:	f000 fb53 	bl	1e462 <k_free>
		ret = anode->data;
   1ddbc:	4620      	mov	r0, r4
   1ddbe:	e7fa      	b.n	1ddb6 <z_queue_node_peek+0x12>
}
   1ddc0:	4770      	bx	lr

0001ddc2 <z_impl_k_queue_init>:
	list->head = NULL;
   1ddc2:	2300      	movs	r3, #0
   1ddc4:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   1ddc6:	6043      	str	r3, [r0, #4]
   1ddc8:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1ddcc:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1ddce:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1ddd0:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1ddd4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1ddd6:	6143      	str	r3, [r0, #20]
}
   1ddd8:	4770      	bx	lr

0001ddda <k_queue_prepend>:
{
   1ddda:	b500      	push	{lr}
   1dddc:	b083      	sub	sp, #12
   1ddde:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1dde0:	2100      	movs	r1, #0
   1dde2:	9100      	str	r1, [sp, #0]
   1dde4:	460b      	mov	r3, r1
   1dde6:	f7ff ff6f 	bl	1dcc8 <queue_insert>
}
   1ddea:	b003      	add	sp, #12
   1ddec:	f85d fb04 	ldr.w	pc, [sp], #4

0001ddf0 <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   1ddf0:	2900      	cmp	r1, #0
   1ddf2:	d036      	beq.n	1de62 <k_queue_append_list+0x72>
{
   1ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ddf8:	4606      	mov	r6, r0
   1ddfa:	4617      	mov	r7, r2
   1ddfc:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   1ddfe:	b39a      	cbz	r2, 1de68 <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1de00:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1de04:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de08:	f3ef 8811 	mrs	r8, BASEPRI
   1de0c:	f383 8812 	msr	BASEPRI_MAX, r3
   1de10:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1de14:	4628      	mov	r0, r5
   1de16:	f000 f961 	bl	1e0dc <z_unpend_first_thread>
   1de1a:	e006      	b.n	1de2a <k_queue_append_list+0x3a>
		prepare_thread_to_run(thread, head);
   1de1c:	4621      	mov	r1, r4
   1de1e:	f7ff ff4b 	bl	1dcb8 <prepare_thread_to_run>
		head = *(void **)head;
   1de22:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1de24:	4628      	mov	r0, r5
   1de26:	f000 f959 	bl	1e0dc <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1de2a:	b10c      	cbz	r4, 1de30 <k_queue_append_list+0x40>
   1de2c:	2800      	cmp	r0, #0
   1de2e:	d1f5      	bne.n	1de1c <k_queue_append_list+0x2c>
	if (head != NULL) {
   1de30:	b14c      	cbz	r4, 1de46 <k_queue_append_list+0x56>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1de32:	b144      	cbz	r4, 1de46 <k_queue_append_list+0x56>
   1de34:	b13f      	cbz	r7, 1de46 <k_queue_append_list+0x56>
	return list->tail;
   1de36:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1de38:	b18a      	cbz	r2, 1de5e <k_queue_append_list+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1de3a:	6813      	ldr	r3, [r2, #0]
   1de3c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1de40:	431c      	orrs	r4, r3
   1de42:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1de44:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1de46:	2104      	movs	r1, #4
   1de48:	f106 0010 	add.w	r0, r6, #16
   1de4c:	f000 fad8 	bl	1e400 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1de50:	4641      	mov	r1, r8
   1de52:	4628      	mov	r0, r5
   1de54:	f7f8 fed0 	bl	16bf8 <z_reschedule>
	return 0;
   1de58:	2000      	movs	r0, #0
}
   1de5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   1de5e:	6034      	str	r4, [r6, #0]
}
   1de60:	e7f0      	b.n	1de44 <k_queue_append_list+0x54>
		return -EINVAL;
   1de62:	f06f 0015 	mvn.w	r0, #21
}
   1de66:	4770      	bx	lr
		return -EINVAL;
   1de68:	f06f 0015 	mvn.w	r0, #21
   1de6c:	e7f5      	b.n	1de5a <k_queue_append_list+0x6a>

0001de6e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1de6e:	b15a      	cbz	r2, 1de88 <z_impl_k_sem_init+0x1a>
   1de70:	428a      	cmp	r2, r1
   1de72:	d30c      	bcc.n	1de8e <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   1de74:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1de76:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1de78:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1de7a:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   1de7c:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1de80:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1de82:	6143      	str	r3, [r0, #20]
	return 0;
   1de84:	2000      	movs	r0, #0
   1de86:	4770      	bx	lr
		return -EINVAL;
   1de88:	f06f 0015 	mvn.w	r0, #21
   1de8c:	4770      	bx	lr
   1de8e:	f06f 0015 	mvn.w	r0, #21
}
   1de92:	4770      	bx	lr

0001de94 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1de94:	2300      	movs	r3, #0
   1de96:	6003      	str	r3, [r0, #0]
   1de98:	6043      	str	r3, [r0, #4]
   1de9a:	6083      	str	r3, [r0, #8]
   1de9c:	60c3      	str	r3, [r0, #12]
   1de9e:	6041      	str	r1, [r0, #4]
}
   1dea0:	4770      	bx	lr

0001dea2 <z_work_submit_to_queue>:
{
   1dea2:	b510      	push	{r4, lr}
   1dea4:	b082      	sub	sp, #8
   1dea6:	9001      	str	r0, [sp, #4]
   1dea8:	4608      	mov	r0, r1
   1deaa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1deae:	f3ef 8411 	mrs	r4, BASEPRI
   1deb2:	f383 8812 	msr	BASEPRI_MAX, r3
   1deb6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1deba:	a901      	add	r1, sp, #4
   1debc:	f7f8 fcd6 	bl	1686c <submit_to_queue_locked>
	__asm__ volatile(
   1dec0:	f384 8811 	msr	BASEPRI, r4
   1dec4:	f3bf 8f6f 	isb	sy
}
   1dec8:	b002      	add	sp, #8
   1deca:	bd10      	pop	{r4, pc}

0001decc <k_work_submit_to_queue>:
{
   1decc:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1dece:	f7ff ffe8 	bl	1dea2 <z_work_submit_to_queue>
	if (ret > 0) {
   1ded2:	1e04      	subs	r4, r0, #0
   1ded4:	dc01      	bgt.n	1deda <k_work_submit_to_queue+0xe>
}
   1ded6:	4620      	mov	r0, r4
   1ded8:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   1deda:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dede:	f3ef 8011 	mrs	r0, BASEPRI
   1dee2:	f383 8812 	msr	BASEPRI_MAX, r3
   1dee6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1deea:	f000 f80f 	bl	1df0c <z_reschedule_irqlock>
	return ret;
   1deee:	e7f2      	b.n	1ded6 <k_work_submit_to_queue+0xa>

0001def0 <thread_active_elsewhere>:
}
   1def0:	2000      	movs	r0, #0
   1def2:	4770      	bx	lr

0001def4 <pended_on_thread>:
}
   1def4:	6880      	ldr	r0, [r0, #8]
   1def6:	4770      	bx	lr

0001def8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1def8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1defc:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1df00:	4283      	cmp	r3, r0
   1df02:	d001      	beq.n	1df08 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1df04:	1ac0      	subs	r0, r0, r3
   1df06:	4770      	bx	lr
	return 0;
   1df08:	2000      	movs	r0, #0
}
   1df0a:	4770      	bx	lr

0001df0c <z_reschedule_irqlock>:
{
   1df0c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1df0e:	4603      	mov	r3, r0
   1df10:	b920      	cbnz	r0, 1df1c <z_reschedule_irqlock+0x10>
   1df12:	f3ef 8205 	mrs	r2, IPSR
   1df16:	b942      	cbnz	r2, 1df2a <z_reschedule_irqlock+0x1e>
   1df18:	2201      	movs	r2, #1
   1df1a:	e000      	b.n	1df1e <z_reschedule_irqlock+0x12>
   1df1c:	2200      	movs	r2, #0
	if (resched(key)) {
   1df1e:	b932      	cbnz	r2, 1df2e <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   1df20:	f383 8811 	msr	BASEPRI, r3
   1df24:	f3bf 8f6f 	isb	sy
}
   1df28:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1df2a:	2200      	movs	r2, #0
   1df2c:	e7f7      	b.n	1df1e <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1df2e:	4618      	mov	r0, r3
   1df30:	f7f2 ff54 	bl	10ddc <arch_swap>
	return ret;
   1df34:	e7f8      	b.n	1df28 <z_reschedule_irqlock+0x1c>

0001df36 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   1df36:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1df38:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   1df3a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1df3c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1df3e:	2300      	movs	r3, #0
   1df40:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1df42:	604b      	str	r3, [r1, #4]
}
   1df44:	4770      	bx	lr

0001df46 <z_unpend_thread>:
{
   1df46:	b538      	push	{r3, r4, r5, lr}
   1df48:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1df4a:	2300      	movs	r3, #0
	__asm__ volatile(
   1df4c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1df50:	f3ef 8511 	mrs	r5, BASEPRI
   1df54:	f382 8812 	msr	BASEPRI_MAX, r2
   1df58:	f3bf 8f6f 	isb	sy
   1df5c:	e010      	b.n	1df80 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1df5e:	4620      	mov	r0, r4
   1df60:	f7ff ffc8 	bl	1def4 <pended_on_thread>
   1df64:	4621      	mov	r1, r4
   1df66:	f7ff ffe6 	bl	1df36 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1df6a:	7b63      	ldrb	r3, [r4, #13]
   1df6c:	f023 0302 	bic.w	r3, r3, #2
   1df70:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1df72:	2300      	movs	r3, #0
   1df74:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1df76:	f385 8811 	msr	BASEPRI, r5
   1df7a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1df7e:	2301      	movs	r3, #1
   1df80:	2b00      	cmp	r3, #0
   1df82:	d0ec      	beq.n	1df5e <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   1df84:	f104 0018 	add.w	r0, r4, #24
   1df88:	f000 f935 	bl	1e1f6 <z_abort_timeout>
}
   1df8c:	bd38      	pop	{r3, r4, r5, pc}

0001df8e <z_priq_dumb_best>:
{
   1df8e:	4603      	mov	r3, r0
	return list->head == list;
   1df90:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1df92:	4283      	cmp	r3, r0
   1df94:	d000      	beq.n	1df98 <z_priq_dumb_best+0xa>
}
   1df96:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1df98:	2000      	movs	r0, #0
	return thread;
   1df9a:	e7fc      	b.n	1df96 <z_priq_dumb_best+0x8>

0001df9c <z_ready_thread>:
{
   1df9c:	b538      	push	{r3, r4, r5, lr}
   1df9e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1dfa0:	2300      	movs	r3, #0
	__asm__ volatile(
   1dfa2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1dfa6:	f3ef 8511 	mrs	r5, BASEPRI
   1dfaa:	f382 8812 	msr	BASEPRI_MAX, r2
   1dfae:	f3bf 8f6f 	isb	sy
   1dfb2:	e004      	b.n	1dfbe <z_ready_thread+0x22>
	__asm__ volatile(
   1dfb4:	f385 8811 	msr	BASEPRI, r5
   1dfb8:	f3bf 8f6f 	isb	sy
   1dfbc:	2301      	movs	r3, #1
   1dfbe:	b943      	cbnz	r3, 1dfd2 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1dfc0:	4620      	mov	r0, r4
   1dfc2:	f7ff ff95 	bl	1def0 <thread_active_elsewhere>
   1dfc6:	2800      	cmp	r0, #0
   1dfc8:	d1f4      	bne.n	1dfb4 <z_ready_thread+0x18>
			ready_thread(thread);
   1dfca:	4620      	mov	r0, r4
   1dfcc:	f7f8 ff22 	bl	16e14 <ready_thread>
   1dfd0:	e7f0      	b.n	1dfb4 <z_ready_thread+0x18>
}
   1dfd2:	bd38      	pop	{r3, r4, r5, pc}

0001dfd4 <z_thread_timeout>:
{
   1dfd4:	b570      	push	{r4, r5, r6, lr}
   1dfd6:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1dfd8:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   1dfdc:	2300      	movs	r3, #0
	__asm__ volatile(
   1dfde:	f04f 0240 	mov.w	r2, #64	; 0x40
   1dfe2:	f3ef 8611 	mrs	r6, BASEPRI
   1dfe6:	f382 8812 	msr	BASEPRI_MAX, r2
   1dfea:	f3bf 8f6f 	isb	sy
   1dfee:	e011      	b.n	1e014 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1dff0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1dff4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1dff8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1dffc:	f023 0310 	bic.w	r3, r3, #16
   1e000:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1e004:	4628      	mov	r0, r5
   1e006:	f7f8 ff05 	bl	16e14 <ready_thread>
	__asm__ volatile(
   1e00a:	f386 8811 	msr	BASEPRI, r6
   1e00e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1e012:	2301      	movs	r3, #1
   1e014:	b9ab      	cbnz	r3, 1e042 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1e016:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1e01a:	f013 0f28 	tst.w	r3, #40	; 0x28
   1e01e:	d1f4      	bne.n	1e00a <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   1e020:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1e024:	2b00      	cmp	r3, #0
   1e026:	d0e3      	beq.n	1dff0 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1e028:	4628      	mov	r0, r5
   1e02a:	f7ff ff63 	bl	1def4 <pended_on_thread>
   1e02e:	4629      	mov	r1, r5
   1e030:	f7ff ff81 	bl	1df36 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e034:	7b6b      	ldrb	r3, [r5, #13]
   1e036:	f023 0302 	bic.w	r3, r3, #2
   1e03a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1e03c:	2300      	movs	r3, #0
   1e03e:	60ab      	str	r3, [r5, #8]
}
   1e040:	e7d6      	b.n	1dff0 <z_thread_timeout+0x1c>
}
   1e042:	bd70      	pop	{r4, r5, r6, pc}

0001e044 <add_to_waitq_locked>:
{
   1e044:	b570      	push	{r4, r5, r6, lr}
   1e046:	4605      	mov	r5, r0
   1e048:	460e      	mov	r6, r1
	unready_thread(thread);
   1e04a:	f7f8 ff41 	bl	16ed0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1e04e:	7b6b      	ldrb	r3, [r5, #13]
   1e050:	f043 0302 	orr.w	r3, r3, #2
   1e054:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   1e056:	b1b6      	cbz	r6, 1e086 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   1e058:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1e05a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e05c:	42a6      	cmp	r6, r4
   1e05e:	d019      	beq.n	1e094 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e060:	b164      	cbz	r4, 1e07c <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e062:	4621      	mov	r1, r4
   1e064:	4628      	mov	r0, r5
   1e066:	f7ff ff47 	bl	1def8 <z_sched_prio_cmp>
   1e06a:	2800      	cmp	r0, #0
   1e06c:	dc0c      	bgt.n	1e088 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e06e:	b12c      	cbz	r4, 1e07c <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   1e070:	6873      	ldr	r3, [r6, #4]
   1e072:	429c      	cmp	r4, r3
   1e074:	d002      	beq.n	1e07c <add_to_waitq_locked+0x38>
   1e076:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e078:	2c00      	cmp	r4, #0
   1e07a:	d1f1      	bne.n	1e060 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   1e07c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1e07e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1e080:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1e082:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e084:	6075      	str	r5, [r6, #4]
}
   1e086:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   1e088:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1e08a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1e08c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1e08e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e090:	6065      	str	r5, [r4, #4]
}
   1e092:	e7f8      	b.n	1e086 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e094:	2400      	movs	r4, #0
   1e096:	e7e3      	b.n	1e060 <add_to_waitq_locked+0x1c>

0001e098 <pend>:
{
   1e098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e09c:	4605      	mov	r5, r0
   1e09e:	460e      	mov	r6, r1
   1e0a0:	4691      	mov	r9, r2
   1e0a2:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   1e0a4:	2400      	movs	r4, #0
	__asm__ volatile(
   1e0a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e0aa:	f3ef 8711 	mrs	r7, BASEPRI
   1e0ae:	f383 8812 	msr	BASEPRI_MAX, r3
   1e0b2:	f3bf 8f6f 	isb	sy
   1e0b6:	e008      	b.n	1e0ca <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
   1e0b8:	4631      	mov	r1, r6
   1e0ba:	4628      	mov	r0, r5
   1e0bc:	f7ff ffc2 	bl	1e044 <add_to_waitq_locked>
	__asm__ volatile(
   1e0c0:	f387 8811 	msr	BASEPRI, r7
   1e0c4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1e0c8:	2401      	movs	r4, #1
   1e0ca:	2c00      	cmp	r4, #0
   1e0cc:	d0f4      	beq.n	1e0b8 <pend+0x20>
	add_thread_timeout(thread, timeout);
   1e0ce:	464a      	mov	r2, r9
   1e0d0:	4643      	mov	r3, r8
   1e0d2:	4628      	mov	r0, r5
   1e0d4:	f7f8 fd32 	bl	16b3c <add_thread_timeout>
}
   1e0d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e0dc <z_unpend_first_thread>:
{
   1e0dc:	b570      	push	{r4, r5, r6, lr}
   1e0de:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   1e0e0:	2300      	movs	r3, #0
	__asm__ volatile(
   1e0e2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e0e6:	f3ef 8611 	mrs	r6, BASEPRI
   1e0ea:	f382 8812 	msr	BASEPRI_MAX, r2
   1e0ee:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1e0f2:	461c      	mov	r4, r3
   1e0f4:	e004      	b.n	1e100 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   1e0f6:	f386 8811 	msr	BASEPRI, r6
   1e0fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1e0fe:	2301      	movs	r3, #1
   1e100:	b9ab      	cbnz	r3, 1e12e <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   1e102:	4628      	mov	r0, r5
   1e104:	f7ff ff43 	bl	1df8e <z_priq_dumb_best>
		if (thread != NULL) {
   1e108:	4604      	mov	r4, r0
   1e10a:	2800      	cmp	r0, #0
   1e10c:	d0f3      	beq.n	1e0f6 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1e10e:	f7ff fef1 	bl	1def4 <pended_on_thread>
   1e112:	4621      	mov	r1, r4
   1e114:	f7ff ff0f 	bl	1df36 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e118:	7b63      	ldrb	r3, [r4, #13]
   1e11a:	f023 0302 	bic.w	r3, r3, #2
   1e11e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1e120:	2300      	movs	r3, #0
   1e122:	60a3      	str	r3, [r4, #8]
   1e124:	f104 0018 	add.w	r0, r4, #24
   1e128:	f000 f865 	bl	1e1f6 <z_abort_timeout>
   1e12c:	e7e3      	b.n	1e0f6 <z_unpend_first_thread+0x1a>
}
   1e12e:	4620      	mov	r0, r4
   1e130:	bd70      	pop	{r4, r5, r6, pc}

0001e132 <z_unpend_all>:
{
   1e132:	b538      	push	{r3, r4, r5, lr}
   1e134:	4605      	mov	r5, r0
	int need_sched = 0;
   1e136:	2000      	movs	r0, #0
	return list->head == list;
   1e138:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e13a:	42a5      	cmp	r5, r4
   1e13c:	d008      	beq.n	1e150 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e13e:	b13c      	cbz	r4, 1e150 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   1e140:	4620      	mov	r0, r4
   1e142:	f7ff ff00 	bl	1df46 <z_unpend_thread>
		z_ready_thread(thread);
   1e146:	4620      	mov	r0, r4
   1e148:	f7ff ff28 	bl	1df9c <z_ready_thread>
		need_sched = 1;
   1e14c:	2001      	movs	r0, #1
   1e14e:	e7f3      	b.n	1e138 <z_unpend_all+0x6>
}
   1e150:	bd38      	pop	{r3, r4, r5, pc}

0001e152 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1e152:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   1e154:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1e156:	6083      	str	r3, [r0, #8]
}
   1e158:	4770      	bx	lr

0001e15a <z_sched_wake>:
{
   1e15a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e15e:	4605      	mov	r5, r0
   1e160:	4688      	mov	r8, r1
   1e162:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   1e164:	2300      	movs	r3, #0
	__asm__ volatile(
   1e166:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e16a:	f3ef 8611 	mrs	r6, BASEPRI
   1e16e:	f382 8812 	msr	BASEPRI_MAX, r2
   1e172:	f3bf 8f6f 	isb	sy
	bool ret = false;
   1e176:	4699      	mov	r9, r3
   1e178:	e004      	b.n	1e184 <z_sched_wake+0x2a>
	__asm__ volatile(
   1e17a:	f386 8811 	msr	BASEPRI, r6
   1e17e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1e182:	2301      	movs	r3, #1
   1e184:	b9eb      	cbnz	r3, 1e1c2 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   1e186:	4628      	mov	r0, r5
   1e188:	f7ff ff01 	bl	1df8e <z_priq_dumb_best>
		if (thread != NULL) {
   1e18c:	4604      	mov	r4, r0
   1e18e:	2800      	cmp	r0, #0
   1e190:	d0f3      	beq.n	1e17a <z_sched_wake+0x20>
   1e192:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   1e196:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1e198:	f7ff feac 	bl	1def4 <pended_on_thread>
   1e19c:	4621      	mov	r1, r4
   1e19e:	f7ff feca 	bl	1df36 <z_priq_dumb_remove>
   1e1a2:	7b63      	ldrb	r3, [r4, #13]
   1e1a4:	f023 0302 	bic.w	r3, r3, #2
   1e1a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1e1aa:	2300      	movs	r3, #0
   1e1ac:	60a3      	str	r3, [r4, #8]
   1e1ae:	f104 0018 	add.w	r0, r4, #24
   1e1b2:	f000 f820 	bl	1e1f6 <z_abort_timeout>
			ready_thread(thread);
   1e1b6:	4620      	mov	r0, r4
   1e1b8:	f7f8 fe2c 	bl	16e14 <ready_thread>
			ret = true;
   1e1bc:	f04f 0901 	mov.w	r9, #1
   1e1c0:	e7db      	b.n	1e17a <z_sched_wake+0x20>
}
   1e1c2:	4648      	mov	r0, r9
   1e1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e1c8 <remove_timeout>:
{
   1e1c8:	b510      	push	{r4, lr}
   1e1ca:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1e1cc:	f7f9 f906 	bl	173dc <next>
   1e1d0:	b148      	cbz	r0, 1e1e6 <remove_timeout+0x1e>
   1e1d2:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1e1d4:	6920      	ldr	r0, [r4, #16]
   1e1d6:	6961      	ldr	r1, [r4, #20]
   1e1d8:	6913      	ldr	r3, [r2, #16]
   1e1da:	181b      	adds	r3, r3, r0
   1e1dc:	6950      	ldr	r0, [r2, #20]
   1e1de:	eb41 0100 	adc.w	r1, r1, r0
   1e1e2:	6113      	str	r3, [r2, #16]
   1e1e4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1e1e6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1e1e8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1e1ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e1ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e1ee:	2300      	movs	r3, #0
   1e1f0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1e1f2:	6063      	str	r3, [r4, #4]
}
   1e1f4:	bd10      	pop	{r4, pc}

0001e1f6 <z_abort_timeout>:
{
   1e1f6:	b570      	push	{r4, r5, r6, lr}
   1e1f8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1e1fa:	2300      	movs	r3, #0
	__asm__ volatile(
   1e1fc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e200:	f3ef 8611 	mrs	r6, BASEPRI
   1e204:	f382 8812 	msr	BASEPRI_MAX, r2
   1e208:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1e20c:	f06f 0015 	mvn.w	r0, #21
   1e210:	e004      	b.n	1e21c <z_abort_timeout+0x26>
	__asm__ volatile(
   1e212:	f386 8811 	msr	BASEPRI, r6
   1e216:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e21a:	2301      	movs	r3, #1
   1e21c:	461d      	mov	r5, r3
   1e21e:	b93b      	cbnz	r3, 1e230 <z_abort_timeout+0x3a>
	return node->next != NULL;
   1e220:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1e222:	2b00      	cmp	r3, #0
   1e224:	d0f5      	beq.n	1e212 <z_abort_timeout+0x1c>
			remove_timeout(to);
   1e226:	4620      	mov	r0, r4
   1e228:	f7ff ffce 	bl	1e1c8 <remove_timeout>
			ret = 0;
   1e22c:	4628      	mov	r0, r5
   1e22e:	e7f0      	b.n	1e212 <z_abort_timeout+0x1c>
}
   1e230:	bd70      	pop	{r4, r5, r6, pc}

0001e232 <z_get_next_timeout_expiry>:
{
   1e232:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1e234:	2300      	movs	r3, #0
	__asm__ volatile(
   1e236:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e23a:	f3ef 8411 	mrs	r4, BASEPRI
   1e23e:	f382 8812 	msr	BASEPRI_MAX, r2
   1e242:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1e246:	f04f 30ff 	mov.w	r0, #4294967295
   1e24a:	e006      	b.n	1e25a <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   1e24c:	f7f9 f8de 	bl	1740c <next_timeout>
	__asm__ volatile(
   1e250:	f384 8811 	msr	BASEPRI, r4
   1e254:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e258:	2301      	movs	r3, #1
   1e25a:	2b00      	cmp	r3, #0
   1e25c:	d0f6      	beq.n	1e24c <z_get_next_timeout_expiry+0x1a>
}
   1e25e:	bd10      	pop	{r4, pc}

0001e260 <z_set_timeout_expiry>:
{
   1e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e262:	4605      	mov	r5, r0
   1e264:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   1e266:	2300      	movs	r3, #0
	__asm__ volatile(
   1e268:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e26c:	f3ef 8611 	mrs	r6, BASEPRI
   1e270:	f382 8812 	msr	BASEPRI_MAX, r2
   1e274:	f3bf 8f6f 	isb	sy
   1e278:	e00a      	b.n	1e290 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   1e27a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   1e27c:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1e280:	2801      	cmp	r0, #1
   1e282:	dd00      	ble.n	1e286 <z_set_timeout_expiry+0x26>
   1e284:	b97c      	cbnz	r4, 1e2a6 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1e286:	f386 8811 	msr	BASEPRI, r6
   1e28a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e28e:	2301      	movs	r3, #1
   1e290:	461c      	mov	r4, r3
   1e292:	b97b      	cbnz	r3, 1e2b4 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1e294:	f7f9 f8ba 	bl	1740c <next_timeout>
			      || (ticks <= next_to);
   1e298:	f1b0 3fff 	cmp.w	r0, #4294967295
   1e29c:	d0ed      	beq.n	1e27a <z_set_timeout_expiry+0x1a>
   1e29e:	42a8      	cmp	r0, r5
   1e2a0:	dbec      	blt.n	1e27c <z_set_timeout_expiry+0x1c>
   1e2a2:	2401      	movs	r4, #1
   1e2a4:	e7ea      	b.n	1e27c <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1e2a6:	4639      	mov	r1, r7
   1e2a8:	42a8      	cmp	r0, r5
   1e2aa:	bfa8      	it	ge
   1e2ac:	4628      	movge	r0, r5
   1e2ae:	f7f5 fe3f 	bl	13f30 <sys_clock_set_timeout>
   1e2b2:	e7e8      	b.n	1e286 <z_set_timeout_expiry+0x26>
}
   1e2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e2b6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1e2b6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1e2b8:	f7f9 f9bc 	bl	17634 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e2bc:	bd08      	pop	{r3, pc}

0001e2be <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1e2be:	b900      	cbnz	r0, 1e2c2 <z_impl_k_busy_wait+0x4>
   1e2c0:	4770      	bx	lr
{
   1e2c2:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1e2c4:	f7f3 f90c 	bl	114e0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1e2c8:	bd08      	pop	{r3, pc}

0001e2ca <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e2ca:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e2ce:	bf08      	it	eq
   1e2d0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1e2d4:	d021      	beq.n	1e31a <sys_clock_timeout_end_calc+0x50>
{
   1e2d6:	b538      	push	{r3, r4, r5, lr}
   1e2d8:	4605      	mov	r5, r0
   1e2da:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e2dc:	ea51 0300 	orrs.w	r3, r1, r0
   1e2e0:	d009      	beq.n	1e2f6 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e2e2:	f06f 0301 	mvn.w	r3, #1
   1e2e6:	1a18      	subs	r0, r3, r0
   1e2e8:	f04f 33ff 	mov.w	r3, #4294967295
   1e2ec:	eb63 0101 	sbc.w	r1, r3, r1
   1e2f0:	2900      	cmp	r1, #0
   1e2f2:	db03      	blt.n	1e2fc <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1e2f4:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   1e2f6:	f7f9 f99d 	bl	17634 <sys_clock_tick_get>
   1e2fa:	e7fb      	b.n	1e2f4 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   1e2fc:	f7f9 f99a 	bl	17634 <sys_clock_tick_get>
   1e300:	4603      	mov	r3, r0
   1e302:	4628      	mov	r0, r5
   1e304:	4622      	mov	r2, r4
   1e306:	2d01      	cmp	r5, #1
   1e308:	f174 0400 	sbcs.w	r4, r4, #0
   1e30c:	da01      	bge.n	1e312 <sys_clock_timeout_end_calc+0x48>
   1e30e:	2001      	movs	r0, #1
   1e310:	2200      	movs	r2, #0
   1e312:	1818      	adds	r0, r3, r0
   1e314:	eb41 0102 	adc.w	r1, r1, r2
   1e318:	e7ec      	b.n	1e2f4 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   1e31a:	f04f 30ff 	mov.w	r0, #4294967295
   1e31e:	4601      	mov	r1, r0
}
   1e320:	4770      	bx	lr

0001e322 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e322:	b108      	cbz	r0, 1e328 <poller_thread+0x6>
   1e324:	3860      	subs	r0, #96	; 0x60
   1e326:	4770      	bx	lr
}
   1e328:	4770      	bx	lr

0001e32a <signal_poller>:
{
   1e32a:	b538      	push	{r3, r4, r5, lr}
   1e32c:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   1e32e:	6880      	ldr	r0, [r0, #8]
   1e330:	f7ff fff7 	bl	1e322 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1e334:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   1e336:	f013 0f02 	tst.w	r3, #2
   1e33a:	d025      	beq.n	1e388 <signal_poller+0x5e>
   1e33c:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   1e33e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1e340:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   1e342:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e346:	bf08      	it	eq
   1e348:	f112 0f02 	cmneq.w	r2, #2
   1e34c:	d01e      	beq.n	1e38c <signal_poller+0x62>
	z_unpend_thread(thread);
   1e34e:	f7ff fdfa 	bl	1df46 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e352:	2d08      	cmp	r5, #8
   1e354:	d00a      	beq.n	1e36c <signal_poller+0x42>
   1e356:	2300      	movs	r3, #0
   1e358:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   1e35c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e35e:	f013 0f1f 	tst.w	r3, #31
   1e362:	d108      	bne.n	1e376 <signal_poller+0x4c>
   1e364:	69a3      	ldr	r3, [r4, #24]
   1e366:	b123      	cbz	r3, 1e372 <signal_poller+0x48>
   1e368:	2300      	movs	r3, #0
   1e36a:	e005      	b.n	1e378 <signal_poller+0x4e>
   1e36c:	f06f 0303 	mvn.w	r3, #3
   1e370:	e7f2      	b.n	1e358 <signal_poller+0x2e>
   1e372:	2301      	movs	r3, #1
   1e374:	e000      	b.n	1e378 <signal_poller+0x4e>
   1e376:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   1e378:	b90b      	cbnz	r3, 1e37e <signal_poller+0x54>
		return 0;
   1e37a:	2000      	movs	r0, #0
   1e37c:	e005      	b.n	1e38a <signal_poller+0x60>
	z_ready_thread(thread);
   1e37e:	4620      	mov	r0, r4
   1e380:	f7ff fe0c 	bl	1df9c <z_ready_thread>
	return 0;
   1e384:	2000      	movs	r0, #0
   1e386:	e000      	b.n	1e38a <signal_poller+0x60>
		return 0;
   1e388:	2000      	movs	r0, #0
}
   1e38a:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1e38c:	f06f 000a 	mvn.w	r0, #10
   1e390:	e7fb      	b.n	1e38a <signal_poller+0x60>

0001e392 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   1e392:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   1e394:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1e396:	7823      	ldrb	r3, [r4, #0]
   1e398:	b173      	cbz	r3, 1e3b8 <signal_triggered_work+0x26>
   1e39a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1e39e:	b15d      	cbz	r5, 1e3b8 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1e3a0:	f1a4 0614 	sub.w	r6, r4, #20
   1e3a4:	f104 0014 	add.w	r0, r4, #20
   1e3a8:	f7ff ff25 	bl	1e1f6 <z_abort_timeout>
		twork->poll_result = 0;
   1e3ac:	2300      	movs	r3, #0
   1e3ae:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1e3b0:	4631      	mov	r1, r6
   1e3b2:	4628      	mov	r0, r5
   1e3b4:	f7ff fd75 	bl	1dea2 <z_work_submit_to_queue>
	}

	return 0;
}
   1e3b8:	2000      	movs	r0, #0
   1e3ba:	bd70      	pop	{r4, r5, r6, pc}

0001e3bc <signal_poll_event>:
{
   1e3bc:	b570      	push	{r4, r5, r6, lr}
   1e3be:	4604      	mov	r4, r0
   1e3c0:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   1e3c2:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   1e3c4:	b1d6      	cbz	r6, 1e3fc <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   1e3c6:	7873      	ldrb	r3, [r6, #1]
   1e3c8:	2b01      	cmp	r3, #1
   1e3ca:	d00d      	beq.n	1e3e8 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   1e3cc:	2b02      	cmp	r3, #2
   1e3ce:	d012      	beq.n	1e3f6 <signal_poll_event+0x3a>
		poller->is_polling = false;
   1e3d0:	2000      	movs	r0, #0
   1e3d2:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   1e3d4:	2300      	movs	r3, #0
   1e3d6:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   1e3d8:	68e3      	ldr	r3, [r4, #12]
   1e3da:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1e3de:	430d      	orrs	r5, r1
   1e3e0:	f365 3352 	bfi	r3, r5, #13, #6
   1e3e4:	60e3      	str	r3, [r4, #12]
}
   1e3e6:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   1e3e8:	f7ff ff9f 	bl	1e32a <signal_poller>
		poller->is_polling = false;
   1e3ec:	2300      	movs	r3, #0
   1e3ee:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   1e3f0:	4298      	cmp	r0, r3
   1e3f2:	daef      	bge.n	1e3d4 <signal_poll_event+0x18>
   1e3f4:	e7f7      	b.n	1e3e6 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   1e3f6:	f7ff ffcc 	bl	1e392 <signal_triggered_work>
   1e3fa:	e7f7      	b.n	1e3ec <signal_poll_event+0x30>
	int retcode = 0;
   1e3fc:	2000      	movs	r0, #0
   1e3fe:	e7e9      	b.n	1e3d4 <signal_poll_event+0x18>

0001e400 <z_handle_obj_poll_events>:
{
   1e400:	b508      	push	{r3, lr}
   1e402:	4603      	mov	r3, r0
	return list->head == list;
   1e404:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e406:	4283      	cmp	r3, r0
   1e408:	d009      	beq.n	1e41e <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   1e40a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1e40c:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1e40e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e410:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e412:	2300      	movs	r3, #0
   1e414:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1e416:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   1e418:	b108      	cbz	r0, 1e41e <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   1e41a:	f7ff ffcf 	bl	1e3bc <signal_poll_event>
}
   1e41e:	bd08      	pop	{r3, pc}

0001e420 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   1e420:	2300      	movs	r3, #0
   1e422:	6083      	str	r3, [r0, #8]
}
   1e424:	4770      	bx	lr

0001e426 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   1e426:	6883      	ldr	r3, [r0, #8]
   1e428:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   1e42a:	68c3      	ldr	r3, [r0, #12]
   1e42c:	6013      	str	r3, [r2, #0]
}
   1e42e:	4770      	bx	lr

0001e430 <z_heap_aligned_alloc>:
{
   1e430:	b5d0      	push	{r4, r6, r7, lr}
   1e432:	b082      	sub	sp, #8
   1e434:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e436:	2300      	movs	r3, #0
   1e438:	3204      	adds	r2, #4
   1e43a:	d20e      	bcs.n	1e45a <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   1e43c:	b97b      	cbnz	r3, 1e45e <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1e43e:	2600      	movs	r6, #0
   1e440:	2700      	movs	r7, #0
   1e442:	e9cd 6700 	strd	r6, r7, [sp]
   1e446:	f041 0104 	orr.w	r1, r1, #4
   1e44a:	4620      	mov	r0, r4
   1e44c:	f7ff fb11 	bl	1da72 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e450:	b108      	cbz	r0, 1e456 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   1e452:	f840 4b04 	str.w	r4, [r0], #4
}
   1e456:	b002      	add	sp, #8
   1e458:	bdd0      	pop	{r4, r6, r7, pc}
   1e45a:	2301      	movs	r3, #1
   1e45c:	e7ee      	b.n	1e43c <z_heap_aligned_alloc+0xc>
		return NULL;
   1e45e:	2000      	movs	r0, #0
   1e460:	e7f9      	b.n	1e456 <z_heap_aligned_alloc+0x26>

0001e462 <k_free>:
	if (ptr != NULL) {
   1e462:	b130      	cbz	r0, 1e472 <k_free+0x10>
{
   1e464:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   1e466:	1f01      	subs	r1, r0, #4
   1e468:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e46c:	f7ff fb4a 	bl	1db04 <k_heap_free>
}
   1e470:	bd08      	pop	{r3, pc}
   1e472:	4770      	bx	lr

0001e474 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1e474:	4770      	bx	lr
